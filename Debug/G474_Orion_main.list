
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e264  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800e448  0800e448  0001e448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ead8  0800ead8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ead8  0800ead8  0001ead8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eae0  0800eae0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eae0  0800eae0  0001eae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eae4  0800eae4  0001eae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800eae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000197c  200001d8  0800ecc0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001b54  0800ecc0  00021b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039508  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062fe  00000000  00000000  00059753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00016b0b  00000000  00000000  0005fa51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001880  00000000  00000000  00076560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d53  00000000  00000000  00077de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d8d8  00000000  00000000  0007ab33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000376a0  00000000  00000000  000a840b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e79f  00000000  00000000  000dfaab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000066b0  00000000  00000000  001fe24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  002048fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e42c 	.word	0x0800e42c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800e42c 	.word	0x0800e42c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
  }
  float_to_uchar4(senddata_motor, duty);
  can2_send(motor_id, senddata_motor);
}

void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fd4:	b500      	push	{lr}
  if (duty < -limit) {
 8000fd6:	eef1 7a60 	vneg.f32	s15, s1
 8000fda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fe2:	b083      	sub	sp, #12
  if (duty < -limit) {
 8000fe4:	d408      	bmi.n	8000ff8 <actuator_motor1+0x24>
  } else if (duty > limit) {
 8000fe6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	bf8c      	ite	hi
 8000ff0:	eef0 7a60 	vmovhi.f32	s15, s1
 8000ff4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8000ff8:	4668      	mov	r0, sp
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f004 fa17 	bl	8005430 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001002:	4669      	mov	r1, sp
 8001004:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001008:	f000 fb18 	bl	800163c <can1_send>
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 800100c:	b003      	add	sp, #12
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001012:	bf00      	nop

08001014 <actuator_motor2>:
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001014:	b500      	push	{lr}
  if (duty < -limit) {
 8001016:	eef1 7a60 	vneg.f32	s15, s1
 800101a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001022:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001024:	d408      	bmi.n	8001038 <actuator_motor2+0x24>
  } else if (duty > limit) {
 8001026:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	bf8c      	ite	hi
 8001030:	eef0 7a60 	vmovhi.f32	s15, s1
 8001034:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001038:	4668      	mov	r0, sp
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	f004 f9f7 	bl	8005430 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001042:	4669      	mov	r1, sp
 8001044:	f240 1001 	movw	r0, #257	; 0x101
 8001048:	f000 faf8 	bl	800163c <can1_send>
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 800104c:	b003      	add	sp, #12
 800104e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001052:	bf00      	nop

08001054 <actuator_motor3>:
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001054:	b500      	push	{lr}
  if (duty < -limit) {
 8001056:	eef1 7a60 	vneg.f32	s15, s1
 800105a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001062:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001064:	d408      	bmi.n	8001078 <actuator_motor3+0x24>
  } else if (duty > limit) {
 8001066:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	bf8c      	ite	hi
 8001070:	eef0 7a60 	vmovhi.f32	s15, s1
 8001074:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001078:	4668      	mov	r0, sp
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	f004 f9d7 	bl	8005430 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 8001082:	4669      	mov	r1, sp
 8001084:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001088:	f000 fb28 	bl	80016dc <can2_send>
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 800108c:	b003      	add	sp, #12
 800108e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001092:	bf00      	nop

08001094 <actuator_motor4>:
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 8001094:	b500      	push	{lr}
  if (duty < -limit) {
 8001096:	eef1 7a60 	vneg.f32	s15, s1
 800109a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010a2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010a4:	d408      	bmi.n	80010b8 <actuator_motor4+0x24>
  } else if (duty > limit) {
 80010a6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	bf8c      	ite	hi
 80010b0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010b4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010b8:	4668      	mov	r0, sp
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f004 f9b7 	bl	8005430 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 80010c2:	4669      	mov	r1, sp
 80010c4:	f240 1003 	movw	r0, #259	; 0x103
 80010c8:	f000 fb08 	bl	80016dc <can2_send>
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010cc:	b003      	add	sp, #12
 80010ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d2:	bf00      	nop

080010d4 <actuator_motor5>:
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010d4:	b500      	push	{lr}
  if (duty < -limit) {
 80010d6:	eef1 7a60 	vneg.f32	s15, s1
 80010da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010e2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010e4:	d408      	bmi.n	80010f8 <actuator_motor5+0x24>
  } else if (duty > limit) {
 80010e6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	bf8c      	ite	hi
 80010f0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010f4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010f8:	4668      	mov	r0, sp
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f004 f997 	bl	8005430 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001102:	4669      	mov	r1, sp
 8001104:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001108:	f000 fa98 	bl	800163c <can1_send>
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 800110c:	b003      	add	sp, #12
 800110e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001112:	bf00      	nop

08001114 <actuator_dribbler_up>:

void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 8001114:	b500      	push	{lr}
 8001116:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001118:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001134 <actuator_dribbler_up+0x20>
 800111c:	4668      	mov	r0, sp
 800111e:	f004 f987 	bl	8005430 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001122:	4669      	mov	r1, sp
 8001124:	f240 1005 	movw	r0, #261	; 0x105
 8001128:	f000 fa88 	bl	800163c <can1_send>
void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 800112c:	b003      	add	sp, #12
 800112e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001132:	bf00      	nop
 8001134:	3f4ccccd 	.word	0x3f4ccccd

08001138 <actuator_dribbler_down>:
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001138:	b500      	push	{lr}
 800113a:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 800113c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001158 <actuator_dribbler_down+0x20>
 8001140:	4668      	mov	r0, sp
 8001142:	f004 f975 	bl	8005430 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001146:	4669      	mov	r1, sp
 8001148:	f240 1005 	movw	r0, #261	; 0x105
 800114c:	f000 fa76 	bl	800163c <can1_send>
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001150:	b003      	add	sp, #12
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
 8001156:	bf00      	nop
 8001158:	00000000 	.word	0x00000000

0800115c <actuator_kicker_voltage>:

void actuator_kicker_voltage(float voltage)
{
 800115c:	b500      	push	{lr}
 800115e:	b083      	sub	sp, #12
  uint8_t senddata_kick[8];
  float_to_uchar4(&senddata_kick[4], voltage);
 8001160:	a801      	add	r0, sp, #4
 8001162:	f004 f965 	bl	8005430 <float_to_uchar4>

  senddata_kick[0] = 0;
  //can1_send(0x110, senddata_kick);
}
 8001166:	b003      	add	sp, #12
 8001168:	f85d fb04 	ldr.w	pc, [sp], #4

0800116c <actuator_kicker>:
	 * */
  uint8_t senddata_kick[8];
  senddata_kick[0] = id;
  senddata_kick[1] = param;
  //can1_send(0x110, senddata_kick);
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on)
{
 8001170:	b500      	push	{lr}
 8001172:	b083      	sub	sp, #12
 8001174:	4603      	mov	r3, r0
  /*id 0=>off
	 *   1=>on
	 * */
  uint8_t senddata_power[8];
  senddata_power[0] = 0;
 8001176:	2200      	movs	r2, #0
  senddata_power[1] = power_on;
  can1_send(0x010, senddata_power);
 8001178:	4669      	mov	r1, sp
 800117a:	2010      	movs	r0, #16
  senddata_power[0] = 0;
 800117c:	f88d 2000 	strb.w	r2, [sp]
  senddata_power[1] = power_on;
 8001180:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x010, senddata_power);
 8001184:	f000 fa5a 	bl	800163c <can1_send>
  can2_send(0x010, senddata_power);
 8001188:	4669      	mov	r1, sp
 800118a:	2010      	movs	r0, #16
 800118c:	f000 faa6 	bl	80016dc <can2_send>
}
 8001190:	b003      	add	sp, #12
 8001192:	f85d fb04 	ldr.w	pc, [sp], #4
 8001196:	bf00      	nop

08001198 <actuator_power_param>:

void actuator_power_param(uint8_t id, float param)
{
 8001198:	b500      	push	{lr}
 800119a:	b083      	sub	sp, #12
 800119c:	4603      	mov	r3, r0
 * */

  uint8_t senddata_power_param[8];

  senddata_power_param[0] = id;
  float_to_uchar4(&senddata_power_param[1], param);
 800119e:	f10d 0001 	add.w	r0, sp, #1
  senddata_power_param[0] = id;
 80011a2:	f88d 3000 	strb.w	r3, [sp]
  float_to_uchar4(&senddata_power_param[1], param);
 80011a6:	f004 f943 	bl	8005430 <float_to_uchar4>

  can1_send(0x010, senddata_power_param);
 80011aa:	4669      	mov	r1, sp
 80011ac:	2010      	movs	r0, #16
 80011ae:	f000 fa45 	bl	800163c <can1_send>
}
 80011b2:	b003      	add	sp, #12
 80011b4:	f85d fb04 	ldr.w	pc, [sp], #4

080011b8 <actuator_buzzer>:
  send_data_param[0] = param5;
  can1_send(0x304, send_data_param);
}

void actuator_buzzer(uint16_t ontime, uint16_t offtime)
{
 80011b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011ba:	4d07      	ldr	r5, [pc, #28]	; (80011d8 <actuator_buzzer+0x20>)
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	22fa      	movs	r2, #250	; 0xfa
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
{
 80011c2:	460c      	mov	r4, r1
  HAL_Delay(ontime);
 80011c4:	f004 fadc 	bl	8005780 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	2200      	movs	r2, #0
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(offtime);
 80011ce:	4620      	mov	r0, r4
}
 80011d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(offtime);
 80011d4:	f004 bad4 	b.w	8005780 <HAL_Delay>
 80011d8:	20001638 	.word	0x20001638

080011dc <actuator_buzzer_on>:

void actuator_buzzer_on() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250); }
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <actuator_buzzer_on+0xc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	22fa      	movs	r2, #250	; 0xfa
 80011e2:	639a      	str	r2, [r3, #56]	; 0x38
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20001638 	.word	0x20001638

080011ec <actuator_buzzer_off>:
void actuator_buzzer_off() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); }
 80011ec:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <actuator_buzzer_off+0xc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2200      	movs	r2, #0
 80011f2:	639a      	str	r2, [r3, #56]	; 0x38
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20001638 	.word	0x20001638

080011fc <morse_long>:

void morse_short() { actuator_buzzer(40, 20); }
void morse_long() { actuator_buzzer(120, 20); }
 80011fc:	b510      	push	{r4, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011fe:	4c07      	ldr	r4, [pc, #28]	; (800121c <morse_long+0x20>)
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	22fa      	movs	r2, #250	; 0xfa
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(ontime);
 8001206:	2078      	movs	r0, #120	; 0x78
 8001208:	f004 faba 	bl	8005780 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	2200      	movs	r2, #0
void morse_long() { actuator_buzzer(120, 20); }
 8001210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8001214:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(offtime);
 8001216:	2014      	movs	r0, #20
 8001218:	f004 bab2 	b.w	8005780 <HAL_Delay>
 800121c:	20001638 	.word	0x20001638

08001220 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001220:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001222:	2400      	movs	r4, #0
{
 8001224:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	2220      	movs	r2, #32
 8001228:	4621      	mov	r1, r4
 800122a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800122c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001230:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	f009 fff5 	bl	800b220 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001236:	4823      	ldr	r0, [pc, #140]	; (80012c4 <MX_ADC1_Init+0xa4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001238:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800123c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001240:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001242:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124a:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800124c:	8383      	strh	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 800124e:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 8001250:	2301      	movs	r3, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001252:	2240      	movs	r2, #64	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001254:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001258:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800125c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8001260:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001262:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001266:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800126a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800126c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.OversamplingMode = ENABLE;
 800126e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001272:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001274:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001276:	f004 fa95 	bl	80057a4 <HAL_ADC_Init>
 800127a:	b9c8      	cbnz	r0, 80012b0 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800127c:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001280:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001282:	a901      	add	r1, sp, #4
 8001284:	f004 ff56 	bl	8006134 <HAL_ADCEx_MultiModeConfigChannel>
 8001288:	b9c8      	cbnz	r0, 80012be <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800128e:	2306      	movs	r3, #6
 8001290:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001294:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001296:	237f      	movs	r3, #127	; 0x7f
 8001298:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800129c:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800129e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80012a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a6:	f004 fbf3 	bl	8005a90 <HAL_ADC_ConfigChannel>
 80012aa:	b920      	cbnz	r0, 80012b6 <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ac:	b00c      	add	sp, #48	; 0x30
 80012ae:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012b0:	f002 ff4e 	bl	8004150 <Error_Handler>
 80012b4:	e7e2      	b.n	800127c <MX_ADC1_Init+0x5c>
    Error_Handler();
 80012b6:	f002 ff4b 	bl	8004150 <Error_Handler>
}
 80012ba:	b00c      	add	sp, #48	; 0x30
 80012bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012be:	f002 ff47 	bl	8004150 <Error_Handler>
 80012c2:	e7e2      	b.n	800128a <MX_ADC1_Init+0x6a>
 80012c4:	200001f8 	.word	0x200001f8
 80012c8:	3ef08000 	.word	0x3ef08000

080012cc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80012cc:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ce:	2400      	movs	r4, #0
{
 80012d0:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	2220      	movs	r2, #32
 80012d4:	4621      	mov	r1, r4
 80012d6:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80012d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80012dc:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012de:	f009 ff9f 	bl	800b220 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80012e2:	4823      	ldr	r0, [pc, #140]	; (8001370 <MX_ADC3_Init+0xa4>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012e4:	4923      	ldr	r1, [pc, #140]	; (8001374 <MX_ADC3_Init+0xa8>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012e6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ee:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012f0:	e9c0 1300 	strd	r1, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012f4:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f8:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012fa:	8383      	strh	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012fc:	6442      	str	r2, [r0, #68]	; 0x44
  hadc3.Init.NbrOfConversion = 1;
 80012fe:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001300:	2240      	movs	r2, #64	; 0x40
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001302:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001306:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 800130e:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001310:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001314:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001316:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc3.Init.OversamplingMode = ENABLE;
 8001318:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800131c:	6482      	str	r2, [r0, #72]	; 0x48
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800131e:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001320:	f004 fa40 	bl	80057a4 <HAL_ADC_Init>
 8001324:	b9c8      	cbnz	r0, 800135a <MX_ADC3_Init+0x8e>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001326:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_ADC3_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800132a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800132c:	a901      	add	r1, sp, #4
 800132e:	f004 ff01 	bl	8006134 <HAL_ADCEx_MultiModeConfigChannel>
 8001332:	b9c8      	cbnz	r0, 8001368 <MX_ADC3_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001334:	4a10      	ldr	r2, [pc, #64]	; (8001378 <MX_ADC3_Init+0xac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <MX_ADC3_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2306      	movs	r3, #6
 800133a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800133e:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001340:	237f      	movs	r3, #127	; 0x7f
 8001342:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001346:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001348:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800134a:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 800134c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001350:	f004 fb9e 	bl	8005a90 <HAL_ADC_ConfigChannel>
 8001354:	b920      	cbnz	r0, 8001360 <MX_ADC3_Init+0x94>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001356:	b00c      	add	sp, #48	; 0x30
 8001358:	bd10      	pop	{r4, pc}
    Error_Handler();
 800135a:	f002 fef9 	bl	8004150 <Error_Handler>
 800135e:	e7e2      	b.n	8001326 <MX_ADC3_Init+0x5a>
    Error_Handler();
 8001360:	f002 fef6 	bl	8004150 <Error_Handler>
}
 8001364:	b00c      	add	sp, #48	; 0x30
 8001366:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001368:	f002 fef2 	bl	8004150 <Error_Handler>
 800136c:	e7e2      	b.n	8001334 <MX_ADC3_Init+0x68>
 800136e:	bf00      	nop
 8001370:	20000264 	.word	0x20000264
 8001374:	50000400 	.word	0x50000400
 8001378:	04300002 	.word	0x04300002

0800137c <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 800137c:	b510      	push	{r4, lr}
 800137e:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	4668      	mov	r0, sp
 8001386:	f009 ff4b 	bl	800b220 <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800138a:	4c1e      	ldr	r4, [pc, #120]	; (8001404 <MX_ADC5_Init+0x88>)
  hadc5.Instance = ADC5;
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <MX_ADC5_Init+0x8c>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800138e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001392:	2300      	movs	r3, #0
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001394:	e9c0 4200 	strd	r4, r2, [r0]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001398:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800139c:	2104      	movs	r1, #4
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013a6:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80013aa:	8382      	strh	r2, [r0, #28]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80013ac:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.NbrOfConversion = 1;
 80013b0:	2201      	movs	r2, #1
  hadc5.Init.DMAContinuousRequests = ENABLE;
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013b2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80013b4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80013b6:	2340      	movs	r3, #64	; 0x40
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b8:	6181      	str	r1, [r0, #24]
  hadc5.Init.NbrOfConversion = 1;
 80013ba:	6202      	str	r2, [r0, #32]
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80013bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.OversamplingMode = ENABLE;
 80013c0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80013c4:	6441      	str	r1, [r0, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80013c6:	6483      	str	r3, [r0, #72]	; 0x48
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80013c8:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80013ca:	f004 f9eb 	bl	80057a4 <HAL_ADC_Init>
 80013ce:	b990      	cbnz	r0, 80013f6 <MX_ADC5_Init+0x7a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <MX_ADC5_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80013d2:	480d      	ldr	r0, [pc, #52]	; (8001408 <MX_ADC5_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2306      	movs	r3, #6
 80013d6:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013da:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013dc:	237f      	movs	r3, #127	; 0x7f
 80013de:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013e2:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80013e4:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80013e6:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 80013e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80013ec:	f004 fb50 	bl	8005a90 <HAL_ADC_ConfigChannel>
 80013f0:	b920      	cbnz	r0, 80013fc <MX_ADC5_Init+0x80>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80013f2:	b008      	add	sp, #32
 80013f4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013f6:	f002 feab 	bl	8004150 <Error_Handler>
 80013fa:	e7e9      	b.n	80013d0 <MX_ADC5_Init+0x54>
    Error_Handler();
 80013fc:	f002 fea8 	bl	8004150 <Error_Handler>
}
 8001400:	b008      	add	sp, #32
 8001402:	bd10      	pop	{r4, pc}
 8001404:	50000600 	.word	0x50000600
 8001408:	200002d0 	.word	0x200002d0
 800140c:	08600004 	.word	0x08600004

08001410 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	4604      	mov	r4, r0
 8001414:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	2254      	movs	r2, #84	; 0x54
 800141a:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001420:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8001424:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001426:	f009 fefb 	bl	800b220 <memset>
  if(adcHandle->Instance==ADC1)
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001430:	d007      	beq.n	8001442 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8001432:	4a5f      	ldr	r2, [pc, #380]	; (80015b0 <HAL_ADC_MspInit+0x1a0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d04a      	beq.n	80014ce <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 8001438:	4a5e      	ldr	r2, [pc, #376]	; (80015b4 <HAL_ADC_MspInit+0x1a4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d07a      	beq.n	8001534 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800143e:	b020      	add	sp, #128	; 0x80
 8001440:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001442:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001446:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800144c:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800144e:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f006 fa8c 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8001454:	2800      	cmp	r0, #0
 8001456:	f040 80a2 	bne.w	800159e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 800145a:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800145e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 8001460:	4d57      	ldr	r5, [pc, #348]	; (80015c0 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001466:	64da      	str	r2, [r3, #76]	; 0x4c
 8001468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800146a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800146e:	9200      	str	r2, [sp, #0]
 8001470:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001474:	f042 0202 	orr.w	r2, r2, #2
 8001478:	64da      	str	r2, [r3, #76]	; 0x4c
 800147a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001482:	2201      	movs	r2, #1
 8001484:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001486:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800148a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001492:	f005 fd31 	bl	8006ef8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 8001496:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001498:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800149a:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a4:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80014b2:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80014b6:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80014b8:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80014ba:	f004 ff63 	bl	8006384 <HAL_DMA_Init>
 80014be:	b918      	cbnz	r0, 80014c8 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80014c0:	6565      	str	r5, [r4, #84]	; 0x54
 80014c2:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80014c4:	b020      	add	sp, #128	; 0x80
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80014c8:	f002 fe42 	bl	8004150 <Error_Handler>
 80014cc:	e7f8      	b.n	80014c0 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014d8:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014da:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	f006 fa46 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d15f      	bne.n	80015a4 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014e4:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_ADC_MspInit+0x1b8>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ea:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ee:	d109      	bne.n	8001504 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014f0:	4b31      	ldr	r3, [pc, #196]	; (80015b8 <HAL_ADC_MspInit+0x1a8>)
 80014f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001506:	482d      	ldr	r0, [pc, #180]	; (80015bc <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800150a:	4d30      	ldr	r5, [pc, #192]	; (80015cc <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	f042 0202 	orr.w	r2, r2, #2
 8001510:	64da      	str	r2, [r3, #76]	; 0x4c
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 800151a:	2202      	movs	r2, #2
 800151c:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800151e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 8001522:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800152a:	f005 fce5 	bl	8006ef8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800152e:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001530:	2325      	movs	r3, #37	; 0x25
 8001532:	e7b2      	b.n	800149a <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001534:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800153e:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001540:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001542:	f006 fa13 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8001546:	2800      	cmp	r0, #0
 8001548:	d12f      	bne.n	80015aa <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800154a:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_ADC_MspInit+0x1b8>)
 800154c:	6813      	ldr	r3, [r2, #0]
 800154e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001550:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001552:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001554:	d109      	bne.n	800156a <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_ADC_MspInit+0x1a8>)
 8001558:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800155a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800155e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	9304      	str	r3, [sp, #16]
 8001568:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 800156c:	4d19      	ldr	r5, [pc, #100]	; (80015d4 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001570:	f042 0201 	orr.w	r2, r2, #1
 8001574:	64da      	str	r2, [r3, #76]	; 0x4c
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800157e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001582:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800158c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f005 fcb0 	bl	8006ef8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800159a:	2327      	movs	r3, #39	; 0x27
 800159c:	e77d      	b.n	800149a <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 800159e:	f002 fdd7 	bl	8004150 <Error_Handler>
 80015a2:	e75a      	b.n	800145a <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 80015a4:	f002 fdd4 	bl	8004150 <Error_Handler>
 80015a8:	e79c      	b.n	80014e4 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 80015aa:	f002 fdd1 	bl	8004150 <Error_Handler>
 80015ae:	e7cc      	b.n	800154a <HAL_ADC_MspInit+0x13a>
 80015b0:	50000400 	.word	0x50000400
 80015b4:	50000600 	.word	0x50000600
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	2000033c 	.word	0x2000033c
 80015c4:	40020058 	.word	0x40020058
 80015c8:	200001f4 	.word	0x200001f4
 80015cc:	2000039c 	.word	0x2000039c
 80015d0:	40020030 	.word	0x40020030
 80015d4:	200003fc 	.word	0x200003fc
 80015d8:	40020044 	.word	0x40020044
 80015dc:	00000000 	.word	0x00000000

080015e0 <can1_init_ibis>:
FDCAN_TxHeaderTypeDef TxHeader;
FDCAN_FilterTypeDef sFilterConfig;

// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef * handler)
{
 80015e0:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 80015e2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001630 <can1_init_ibis+0x50>
{
 80015e6:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015e8:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80015ea:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015ec:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80015ee:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80015f0:	4811      	ldr	r0, [pc, #68]	; (8001638 <can1_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80015f2:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80015f4:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 80015f6:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 80015fa:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80015fe:	f005 f9f5 	bl	80069ec <HAL_FDCAN_ConfigFilter>
 8001602:	b930      	cbnz	r0, 8001612 <can1_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <can1_init_ibis+0x58>)
 8001606:	f005 fa23 	bl	8006a50 <HAL_FDCAN_Start>
 800160a:	b948      	cbnz	r0, 8001620 <can1_init_ibis+0x40>
    Error_Handler();
  }
}
 800160c:	b007      	add	sp, #28
 800160e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001612:	f002 fd9d 	bl	8004150 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <can1_init_ibis+0x58>)
 8001618:	f005 fa1a 	bl	8006a50 <HAL_FDCAN_Start>
 800161c:	2800      	cmp	r0, #0
 800161e:	d0f5      	beq.n	800160c <can1_init_ibis+0x2c>
    Error_Handler();
 8001620:	f002 fd96 	bl	8004150 <Error_Handler>
}
 8001624:	b007      	add	sp, #28
 8001626:	f85d fb04 	ldr.w	pc, [sp], #4
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
	...
 8001638:	20000cac 	.word	0x20000cac

0800163c <can1_send>:

void can1_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <can1_send+0x38>)
{
 800163e:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001640:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001644:	2500      	movs	r5, #0
 8001646:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800164a:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800164e:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001652:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 8001656:	4c08      	ldr	r4, [pc, #32]	; (8001678 <can1_send+0x3c>)
  TxHeader.MessageMarker = 0;
 8001658:	621d      	str	r5, [r3, #32]
{
 800165a:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 800165c:	4620      	mov	r0, r4
 800165e:	f005 faf9 	bl	8006c54 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001662:	2803      	cmp	r0, #3
 8001664:	d1fa      	bne.n	800165c <can1_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001666:	4632      	mov	r2, r6
 8001668:	4902      	ldr	r1, [pc, #8]	; (8001674 <can1_send+0x38>)
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <can1_send+0x3c>)
}
 800166c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001670:	f005 ba06 	b.w	8006a80 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001674:	2000045c 	.word	0x2000045c
 8001678:	20000cac 	.word	0x20000cac
 800167c:	00000000 	.word	0x00000000

08001680 <can2_init_ibis>:

void can2_init_ibis(FDCAN_HandleTypeDef * handler)
{
 8001680:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 8001682:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80016d0 <can2_init_ibis+0x50>
{
 8001686:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001688:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800168a:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800168c:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800168e:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001690:	4811      	ldr	r0, [pc, #68]	; (80016d8 <can2_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001692:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001694:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 8001696:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 800169a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 800169e:	f005 f9a5 	bl	80069ec <HAL_FDCAN_ConfigFilter>
 80016a2:	b930      	cbnz	r0, 80016b2 <can2_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <can2_init_ibis+0x58>)
 80016a6:	f005 f9d3 	bl	8006a50 <HAL_FDCAN_Start>
 80016aa:	b948      	cbnz	r0, 80016c0 <can2_init_ibis+0x40>
    Error_Handler();
  }
}
 80016ac:	b007      	add	sp, #28
 80016ae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016b2:	f002 fd4d 	bl	8004150 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 80016b6:	4808      	ldr	r0, [pc, #32]	; (80016d8 <can2_init_ibis+0x58>)
 80016b8:	f005 f9ca 	bl	8006a50 <HAL_FDCAN_Start>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d0f5      	beq.n	80016ac <can2_init_ibis+0x2c>
    Error_Handler();
 80016c0:	f002 fd46 	bl	8004150 <Error_Handler>
}
 80016c4:	b007      	add	sp, #28
 80016c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ca:	bf00      	nop
 80016cc:	f3af 8000 	nop.w
	...
 80016d8:	20000d10 	.word	0x20000d10

080016dc <can2_send>:

void can2_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <can2_send+0x38>)
{
 80016de:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 80016e4:	2500      	movs	r5, #0
 80016e6:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80016ea:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80016ee:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80016f2:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 80016f6:	4c08      	ldr	r4, [pc, #32]	; (8001718 <can2_send+0x3c>)
  TxHeader.MessageMarker = 0;
 80016f8:	621d      	str	r5, [r3, #32]
{
 80016fa:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 80016fc:	4620      	mov	r0, r4
 80016fe:	f005 faa9 	bl	8006c54 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001702:	2803      	cmp	r0, #3
 8001704:	d1fa      	bne.n	80016fc <can2_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001706:	4632      	mov	r2, r6
 8001708:	4902      	ldr	r1, [pc, #8]	; (8001714 <can2_send+0x38>)
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <can2_send+0x3c>)
}
 800170c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001710:	f005 b9b6 	b.w	8006a80 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001714:	2000045c 	.word	0x2000045c
 8001718:	20000d10 	.word	0x20000d10
 800171c:	00000000 	.word	0x00000000

08001720 <HAL_FDCAN_RxFifo0Callback>:
{
  uint8_t RxData[CAN_RX_DATA_SIZE];
  FDCAN_RxHeaderTypeDef RxHeader;
  uint16_t rx_can_id;

  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001720:	07cb      	lsls	r3, r1, #31
 8001722:	d400      	bmi.n	8001726 <HAL_FDCAN_RxFifo0Callback+0x6>
 8001724:	4770      	bx	lr
{
 8001726:	b530      	push	{r4, r5, lr}
 8001728:	b08d      	sub	sp, #52	; 0x34
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800172a:	466b      	mov	r3, sp
 800172c:	aa02      	add	r2, sp, #8
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	f005 fa0c 	bl	8006b4c <HAL_FDCAN_GetRxMessage>
 8001734:	2800      	cmp	r0, #0
 8001736:	d134      	bne.n	80017a2 <HAL_FDCAN_RxFifo0Callback+0x82>
      Error_Handler();
    }
    rx_can_id = RxHeader.Identifier;
 8001738:	9b02      	ldr	r3, [sp, #8]
    switch (rx_can_id) {
 800173a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800173e:	4213      	tst	r3, r2
 8001740:	b29d      	uxth	r5, r3
 8001742:	f000 809b 	beq.w	800187c <HAL_FDCAN_RxFifo0Callback+0x15c>
 8001746:	f5a5 7400 	sub.w	r4, r5, #512	; 0x200
 800174a:	2c41      	cmp	r4, #65	; 0x41
 800174c:	d827      	bhi.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
 800174e:	2c41      	cmp	r4, #65	; 0x41
 8001750:	d825      	bhi.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
 8001752:	e8df f004 	tbb	[pc, r4]
 8001756:	4a4a      	.short	0x4a4a
 8001758:	24244a4a 	.word	0x24244a4a
 800175c:	24242424 	.word	0x24242424
 8001760:	24242424 	.word	0x24242424
 8001764:	29292424 	.word	0x29292424
 8001768:	29292929 	.word	0x29292929
 800176c:	24242429 	.word	0x24242429
 8001770:	24242424 	.word	0x24242424
 8001774:	3f3f2424 	.word	0x3f3f2424
 8001778:	24793f3f 	.word	0x24793f3f
 800177c:	24242424 	.word	0x24242424
 8001780:	24242424 	.word	0x24242424
 8001784:	34342424 	.word	0x34342424
 8001788:	24343434 	.word	0x24343434
 800178c:	24242424 	.word	0x24242424
 8001790:	24242424 	.word	0x24242424
 8001794:	6c212424 	.word	0x6c212424
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
        break;

      // can_raw.ball_detection
      case 0x240:
        can_raw.ball_detection[0] = RxData[0];
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_FDCAN_RxFifo0Callback+0x178>)
 800179a:	9a00      	ldr	r2, [sp, #0]
 800179c:	67da      	str	r2, [r3, #124]	; 0x7c
          error_flag = true;
        }*/
        break;
    }
  }
}
 800179e:	b00d      	add	sp, #52	; 0x34
 80017a0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80017a2:	f002 fcd5 	bl	8004150 <Error_Handler>
 80017a6:	e7c7      	b.n	8001738 <HAL_FDCAN_RxFifo0Callback+0x18>
        can_raw.power_voltage[rx_can_id - 0x210] = uchar4_to_float(RxData);
 80017a8:	4668      	mov	r0, sp
 80017aa:	f003 fe3d 	bl	8005428 <uchar4_to_float>
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <HAL_FDCAN_RxFifo0Callback+0x178>)
 80017b0:	f5a5 7501 	sub.w	r5, r5, #516	; 0x204
 80017b4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80017b8:	ed83 0a00 	vstr	s0, [r3]
        break;
 80017bc:	e7ef      	b.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
 80017be:	4668      	mov	r0, sp
 80017c0:	f003 fe32 	bl	8005428 <uchar4_to_float>
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_FDCAN_RxFifo0Callback+0x178>)
 80017c6:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 80017ca:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80017ce:	ed83 0a00 	vstr	s0, [r3]
        break;
 80017d2:	e7e4      	b.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[rx_can_id - 0x220] = uchar4_to_float(RxData);
 80017d4:	4668      	mov	r0, sp
 80017d6:	f003 fe27 	bl	8005428 <uchar4_to_float>
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_FDCAN_RxFifo0Callback+0x178>)
 80017dc:	f2a5 250e 	subw	r5, r5, #526	; 0x20e
 80017e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80017e4:	ed83 0a01 	vstr	s0, [r3, #4]
        break;
 80017e8:	e7d9      	b.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 80017ea:	a801      	add	r0, sp, #4
 80017ec:	f003 fe1c 	bl	8005428 <uchar4_to_float>
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_FDCAN_RxFifo0Callback+0x17c>)
 80017f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 80017f6:	4668      	mov	r0, sp
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 80017f8:	ed83 0a00 	vstr	s0, [r3]
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 80017fc:	f003 fe14 	bl	8005428 <uchar4_to_float>
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_FDCAN_RxFifo0Callback+0x178>)
 8001802:	f5a5 72ff 	sub.w	r2, r5, #510	; 0x1fe
 8001806:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800180a:	ed82 0a00 	vstr	s0, [r2]
        can_raw.motor_feedback_velocity[rx_can_id - 0x200] = can_raw.motor_feedback[3] * OMNI_DIAMETER * M_PI;
 800180e:	6958      	ldr	r0, [r3, #20]
 8001810:	f5a5 75fd 	sub.w	r5, r5, #506	; 0x1fa
 8001814:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001818:	f7fe febe 	bl	8000598 <__aeabi_f2d>
 800181c:	a31c      	add	r3, pc, #112	; (adr r3, 8001890 <HAL_FDCAN_RxFifo0Callback+0x170>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe ff11 	bl	8000648 <__aeabi_dmul>
 8001826:	f7ff fa07 	bl	8000c38 <__aeabi_d2f>
 800182a:	6068      	str	r0, [r5, #4]
        break;
 800182c:	e7b7      	b.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 800182e:	4c1c      	ldr	r4, [pc, #112]	; (80018a0 <HAL_FDCAN_RxFifo0Callback+0x180>)
 8001830:	9a00      	ldr	r2, [sp, #0]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 8001832:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8001836:	6222      	str	r2, [r4, #32]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 8001838:	85a3      	strh	r3, [r4, #44]	; 0x2c
        mouseOdometory();
 800183a:	f002 feb5 	bl	80045a8 <mouseOdometory>
        mouse.loop_cnt_debug = mouse.integral_loop_cnt;
 800183e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        mouse.integral_loop_cnt = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
}
 8001846:	e7aa      	b.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[4] = RxData[0];  // fet
 8001848:	f89d 3000 	ldrb.w	r3, [sp]
 800184c:	ee06 3a90 	vmov	s13, r3
        can_raw.temperature[5] = RxData[1];  // coil 1
 8001850:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001854:	ee07 3a10 	vmov	s14, r3
        can_raw.temperature[6] = RxData[2];  // coil 2
 8001858:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800185c:	ee07 3a90 	vmov	s15, r3
        can_raw.temperature[4] = RxData[0];  // fet
 8001860:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_FDCAN_RxFifo0Callback+0x178>)
        can_raw.temperature[5] = RxData[1];  // coil 1
 8001866:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        can_raw.temperature[6] = RxData[2];  // coil 2
 800186a:	eef8 7a67 	vcvt.f32.u32	s15, s15
        can_raw.temperature[4] = RxData[0];  // fet
 800186e:	edc3 6a17 	vstr	s13, [r3, #92]	; 0x5c
        can_raw.temperature[5] = RxData[1];  // coil 1
 8001872:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
        can_raw.temperature[6] = RxData[2];  // coil 2
 8001876:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
        break;
 800187a:	e790      	b.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.error_no[0] = RxData[0];
 800187c:	4906      	ldr	r1, [pc, #24]	; (8001898 <HAL_FDCAN_RxFifo0Callback+0x178>)
        sys.error_flag = true;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_FDCAN_RxFifo0Callback+0x184>)
        can_raw.error_no[0] = RxData[0];
 8001880:	9800      	ldr	r0, [sp, #0]
 8001882:	6008      	str	r0, [r1, #0]
        sys.error_flag = true;
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
        break;
 8001888:	e789      	b.n	800179e <HAL_FDCAN_RxFifo0Callback+0x7e>
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	ffba038a 	.word	0xffba038a
 8001894:	3fc684d8 	.word	0x3fc684d8
 8001898:	20000e84 	.word	0x20000e84
 800189c:	20000f8c 	.word	0x20000f8c
 80018a0:	20000fc4 	.word	0x20000fc4
 80018a4:	20001584 	.word	0x20001584

080018a8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <MX_DMA_Init+0xa0>)
{
 80018aa:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80018ae:	f040 0004 	orr.w	r0, r0, #4
 80018b2:	6498      	str	r0, [r3, #72]	; 0x48
 80018b4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 80018b6:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018b8:	f004 0404 	and.w	r4, r4, #4
 80018bc:	9400      	str	r4, [sp, #0]
 80018be:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80018c2:	f044 0401 	orr.w	r4, r4, #1
 80018c6:	649c      	str	r4, [r3, #72]	; 0x48
 80018c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ca:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80018d4:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80018d8:	f004 fcee 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80018dc:	200c      	movs	r0, #12
 80018de:	f004 fd29 	bl	8006334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2109      	movs	r1, #9
 80018e6:	200d      	movs	r0, #13
 80018e8:	f004 fce6 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018ec:	200d      	movs	r0, #13
 80018ee:	f004 fd21 	bl	8006334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	210a      	movs	r1, #10
 80018f6:	200e      	movs	r0, #14
 80018f8:	f004 fcde 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80018fc:	200e      	movs	r0, #14
 80018fe:	f004 fd19 	bl	8006334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	210b      	movs	r1, #11
 8001906:	200f      	movs	r0, #15
 8001908:	f004 fcd6 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800190c:	200f      	movs	r0, #15
 800190e:	f004 fd11 	bl	8006334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210e      	movs	r1, #14
 8001916:	2010      	movs	r0, #16
 8001918:	f004 fcce 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800191c:	2010      	movs	r0, #16
 800191e:	f004 fd09 	bl	8006334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	2011      	movs	r0, #17
 8001928:	f004 fcc6 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800192c:	2011      	movs	r0, #17
 800192e:	f004 fd01 	bl	8006334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2060      	movs	r0, #96	; 0x60
 8001936:	4611      	mov	r1, r2
 8001938:	f004 fcbe 	bl	80062b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 800193c:	2060      	movs	r0, #96	; 0x60

}
 800193e:	b002      	add	sp, #8
 8001940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 8001944:	f004 bcf6 	b.w	8006334 <HAL_NVIC_EnableIRQ>
 8001948:	40021000 	.word	0x40021000

0800194c <dma_printf_init>:
#include "dma_ring.h"
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart){
 800194c:	b510      	push	{r4, lr}
    dmi.huart = printf_huart;
 800194e:	4c06      	ldr	r4, [pc, #24]	; (8001968 <dma_printf_init+0x1c>)
void dma_printf_init(UART_HandleTypeDef *printf_huart){
 8001950:	4601      	mov	r1, r0
    dma_ring_init(&dmi.tx_ring, printf_huart);
 8001952:	4620      	mov	r0, r4
    dmi.huart = printf_huart;
 8001954:	f8c4 1410 	str.w	r1, [r4, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 8001958:	f000 f830 	bl	80019bc <dma_ring_init>
    dmi.sending = false;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 8001962:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
}
 8001966:	bd10      	pop	{r4, pc}
 8001968:	20000480 	.word	0x20000480

0800196c <dma_printf_send_it>:
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }
}

void dma_printf_send_it(UART_HandleTypeDef *printf_huart) {
 800196c:	b570      	push	{r4, r5, r6, lr}
    if(dmi.huart != printf_huart) return;
 800196e:	4c12      	ldr	r4, [pc, #72]	; (80019b8 <dma_printf_send_it+0x4c>)
 8001970:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8001974:	4283      	cmp	r3, r0
 8001976:	d000      	beq.n	800197a <dma_printf_send_it+0xe>
        dmi.sending = true;
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
    }else{
        dmi.sending = false;
    }
}
 8001978:	bd70      	pop	{r4, r5, r6, pc}
    dma_ring_forward_r_ptr(&dmi.tx_ring, dmi.previous_send_len);
 800197a:	f8d4 1414 	ldr.w	r1, [r4, #1044]	; 0x414
 800197e:	4620      	mov	r0, r4
 8001980:	f000 f834 	bl	80019ec <dma_ring_forward_r_ptr>
    uint16_t len = (uint16_t)dma_ring_available_linear(&dmi.tx_ring);
 8001984:	4620      	mov	r0, r4
 8001986:	f000 f823 	bl	80019d0 <dma_ring_available_linear>
 800198a:	b285      	uxth	r5, r0
    if (len > 0 ) {
 800198c:	b915      	cbnz	r5, 8001994 <dma_printf_send_it+0x28>
        dmi.sending = false;
 800198e:	f8c4 540c 	str.w	r5, [r4, #1036]	; 0x40c
}
 8001992:	bd70      	pop	{r4, r5, r6, pc}
        dmi.sending = true;
 8001994:	2301      	movs	r3, #1
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 8001996:	4620      	mov	r0, r4
 8001998:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        dmi.previous_send_len = len;
 800199c:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
        dmi.sending = true;
 80019a0:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80019a4:	f000 f81e 	bl	80019e4 <dma_ring_get_r_ptr>
 80019a8:	462a      	mov	r2, r5
 80019aa:	1821      	adds	r1, r4, r0
 80019ac:	4630      	mov	r0, r6
}
 80019ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        HAL_UART_Transmit_DMA(dmi.huart, dmi.tx_ring.buf+dma_ring_get_r_ptr(&dmi.tx_ring), len);
 80019b2:	f007 bb19 	b.w	8008fe8 <HAL_UART_Transmit_DMA>
 80019b6:	bf00      	nop
 80019b8:	20000480 	.word	0x20000480

080019bc <dma_ring_init>:
static void update_w_ptr(struct dma_ring_buf *ring){
	ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx))&0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart){
  ring->buf_size = RING_BUF_SIZE;
 80019bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
 80019c6:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  ring->w_ptr = 0;
  ring->r_ptr = 0;
  ring->overwrite_cnt = 0;
  ring->huart = huart;
 80019ca:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
}
 80019ce:	4770      	bx	lr

080019d0 <dma_ring_available_linear>:
  }else{
    return ring->buf_size + ring->w_ptr - ring->r_ptr;
  }
}
int dma_ring_available_linear(struct dma_ring_buf *ring){
  if(ring->w_ptr >= ring->r_ptr){
 80019d0:	f8b0 2402 	ldrh.w	r2, [r0, #1026]	; 0x402
 80019d4:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
 80019d8:	429a      	cmp	r2, r3
    return ring->w_ptr - ring->r_ptr;
  }else{
    return ring->buf_size - ring->r_ptr;
 80019da:	bf38      	it	cc
 80019dc:	f8b0 2400 	ldrhcc.w	r2, [r0, #1024]	; 0x400
 80019e0:	1ad0      	subs	r0, r2, r3
  }
}
 80019e2:	4770      	bx	lr

080019e4 <dma_ring_get_r_ptr>:
  return ring->w_ptr;
}

uint16_t dma_ring_get_r_ptr(struct dma_ring_buf *ring){
  return ring->r_ptr;
}
 80019e4:	f8b0 0404 	ldrh.w	r0, [r0, #1028]	; 0x404
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop

080019ec <dma_ring_forward_r_ptr>:

void dma_ring_forward_r_ptr(struct dma_ring_buf *ring, int len){
  while(len > 0){
 80019ec:	2900      	cmp	r1, #0
 80019ee:	dd0c      	ble.n	8001a0a <dma_ring_forward_r_ptr+0x1e>
 80019f0:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
    if(ring->r_ptr+1 >= ring->buf_size){
 80019f4:	f8b0 2400 	ldrh.w	r2, [r0, #1024]	; 0x400
 80019f8:	3301      	adds	r3, #1
 80019fa:	429a      	cmp	r2, r3
      ring->r_ptr = 0;
    }else{
      ring->r_ptr += 1;
 80019fc:	bfcc      	ite	gt
 80019fe:	b29b      	uxthgt	r3, r3
      ring->r_ptr = 0;
 8001a00:	2300      	movle	r3, #0
  while(len > 0){
 8001a02:	3901      	subs	r1, #1
 8001a04:	d1f8      	bne.n	80019f8 <dma_ring_forward_r_ptr+0xc>
 8001a06:	f8a0 3404 	strh.w	r3, [r0, #1028]	; 0x404
    }
    len--;
  }
}
 8001a0a:	4770      	bx	lr

08001a0c <dma_scanf_init>:
#include "dma_ring.h"
#include "dma_scanf.h"

struct dma_scanf_info dsi;

void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001a0c:	b510      	push	{r4, lr}
    dsi.huart = scanf_huart;
 8001a0e:	4c08      	ldr	r4, [pc, #32]	; (8001a30 <dma_scanf_init+0x24>)
void dma_scanf_init(UART_HandleTypeDef *scanf_huart){
 8001a10:	4601      	mov	r1, r0
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 8001a12:	4620      	mov	r0, r4
    dsi.huart = scanf_huart;
 8001a14:	f8c4 140c 	str.w	r1, [r4, #1036]	; 0x40c
    dma_ring_init(&dsi.rx_ring, scanf_huart);
 8001a18:	f7ff ffd0 	bl	80019bc <dma_ring_init>
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8001a1c:	f8b4 2400 	ldrh.w	r2, [r4, #1024]	; 0x400
 8001a20:	f8d4 040c 	ldr.w	r0, [r4, #1036]	; 0x40c
 8001a24:	4621      	mov	r1, r4
}
 8001a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_DMA(dsi.huart, dsi.rx_ring.buf, dsi.rx_ring.buf_size);
 8001a2a:	f008 bbf3 	b.w	800a214 <HAL_UART_Receive_DMA>
 8001a2e:	bf00      	nop
 8001a30:	20000898 	.word	0x20000898

08001a34 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a34:	4810      	ldr	r0, [pc, #64]	; (8001a78 <MX_FDCAN1_Init+0x44>)
{
 8001a36:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 8001a38:	4c10      	ldr	r4, [pc, #64]	; (8001a7c <MX_FDCAN1_Init+0x48>)
 8001a3a:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001a3c:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 8001a3e:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001a40:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a42:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001a44:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001a48:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 8001a4a:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a4c:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001a4e:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001a50:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a52:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001a56:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001a5a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a5e:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a60:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001a62:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001a64:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a66:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a68:	f004 fe42 	bl	80066f0 <HAL_FDCAN_Init>
 8001a6c:	b900      	cbnz	r0, 8001a70 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001a6e:	bd10      	pop	{r4, pc}
 8001a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001a74:	f002 bb6c 	b.w	8004150 <Error_Handler>
 8001a78:	20000cac 	.word	0x20000cac
 8001a7c:	40006400 	.word	0x40006400

08001a80 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001a80:	4810      	ldr	r0, [pc, #64]	; (8001ac4 <MX_FDCAN2_Init+0x44>)
{
 8001a82:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001a84:	4c10      	ldr	r4, [pc, #64]	; (8001ac8 <MX_FDCAN2_Init+0x48>)
 8001a86:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001a88:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 8001a8a:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001a8c:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a8e:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001a90:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001a94:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 8001a96:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001a98:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001a9a:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001a9c:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a9e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001aa2:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001aa6:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001aaa:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001aac:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001aae:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001ab0:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ab2:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001ab4:	f004 fe1c 	bl	80066f0 <HAL_FDCAN_Init>
 8001ab8:	b900      	cbnz	r0, 8001abc <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001aba:	bd10      	pop	{r4, pc}
 8001abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001ac0:	f002 bb46 	b.w	8004150 <Error_Handler>
 8001ac4:	20000d10 	.word	0x20000d10
 8001ac8:	40006800 	.word	0x40006800
 8001acc:	00000000 	.word	0x00000000

08001ad0 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ad0:	b510      	push	{r4, lr}
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad8:	2254      	movs	r2, #84	; 0x54
 8001ada:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001ae0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001ae4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae6:	f009 fb9b 	bl	800b220 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_FDCAN_MspInit+0x168>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8001af2:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_FDCAN_MspInit+0x16c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d047      	beq.n	8001b88 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001af8:	b01e      	add	sp, #120	; 0x78
 8001afa:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001afc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b04:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b06:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b08:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0a:	f005 ff2f 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d17f      	bne.n	8001c12 <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b12:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_FDCAN_MspInit+0x170>)
 8001b14:	6813      	ldr	r3, [r2, #0]
 8001b16:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001b18:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001b1c:	d109      	bne.n	8001b32 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <HAL_FDCAN_MspInit+0x174>)
 8001b20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b22:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <HAL_FDCAN_MspInit+0x174>)
 8001b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b36:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8001c20 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001b46:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8001c28 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b52:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b58:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b5c:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f005 f9ca 	bl	8006ef8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2103      	movs	r1, #3
 8001b68:	2015      	movs	r0, #21
 8001b6a:	f004 fba5 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001b6e:	2015      	movs	r0, #21
 8001b70:	f004 fbe0 	bl	8006334 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2104      	movs	r1, #4
 8001b78:	2016      	movs	r0, #22
 8001b7a:	f004 fb9d 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001b7e:	2016      	movs	r0, #22
 8001b80:	f004 fbd8 	bl	8006334 <HAL_NVIC_EnableIRQ>
}
 8001b84:	b01e      	add	sp, #120	; 0x78
 8001b86:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b90:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001b92:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001b94:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b96:	f005 fee9 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d13c      	bne.n	8001c18 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001b9e:	4a28      	ldr	r2, [pc, #160]	; (8001c40 <HAL_FDCAN_MspInit+0x170>)
 8001ba0:	6813      	ldr	r3, [r2, #0]
 8001ba2:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ba4:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ba6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001ba8:	d109      	bne.n	8001bbe <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_FDCAN_MspInit+0x174>)
 8001bac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	4821      	ldr	r0, [pc, #132]	; (8001c48 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001bc4:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001c30 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	f042 0202 	orr.w	r2, r2, #2
 8001bcc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001bd0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001bd4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001c28 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001be0:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001be2:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001be6:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f005 f985 	bl	8006ef8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2106      	movs	r1, #6
 8001bf2:	2056      	movs	r0, #86	; 0x56
 8001bf4:	f004 fb60 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001bf8:	2056      	movs	r0, #86	; 0x56
 8001bfa:	f004 fb9b 	bl	8006334 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2107      	movs	r1, #7
 8001c02:	2057      	movs	r0, #87	; 0x57
 8001c04:	f004 fb58 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001c08:	2057      	movs	r0, #87	; 0x57
 8001c0a:	f004 fb93 	bl	8006334 <HAL_NVIC_EnableIRQ>
}
 8001c0e:	b01e      	add	sp, #120	; 0x78
 8001c10:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001c12:	f002 fa9d 	bl	8004150 <Error_Handler>
 8001c16:	e77c      	b.n	8001b12 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 8001c18:	f002 fa9a 	bl	8004150 <Error_Handler>
 8001c1c:	e7bf      	b.n	8001b9e <HAL_FDCAN_MspInit+0xce>
 8001c1e:	bf00      	nop
 8001c20:	00001800 	.word	0x00001800
 8001c24:	00000002 	.word	0x00000002
	...
 8001c30:	00003000 	.word	0x00003000
 8001c34:	00000002 	.word	0x00000002
 8001c38:	40006400 	.word	0x40006400
 8001c3c:	40006800 	.word	0x40006800
 8001c40:	20000ca8 	.word	0x20000ca8
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000400 	.word	0x48000400

08001c4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	2400      	movs	r4, #0
{
 8001c50:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001c56:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001c60:	4f45      	ldr	r7, [pc, #276]	; (8001d78 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001c62:	4d46      	ldr	r5, [pc, #280]	; (8001d7c <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c64:	f042 0204 	orr.w	r2, r2, #4
 8001c68:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c6c:	f002 0204 	and.w	r2, r2, #4
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c76:	f042 0220 	orr.w	r2, r2, #32
 8001c7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7e:	f002 0220 	and.w	r2, r2, #32
 8001c82:	9202      	str	r2, [sp, #8]
 8001c84:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c90:	f002 0201 	and.w	r2, r2, #1
 8001c94:	9203      	str	r2, [sp, #12]
 8001c96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c9a:	f042 0202 	orr.w	r2, r2, #2
 8001c9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ca2:	f002 0202 	and.w	r2, r2, #2
 8001ca6:	9204      	str	r2, [sp, #16]
 8001ca8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cac:	f042 0208 	orr.w	r2, r2, #8
 8001cb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001cba:	4638      	mov	r0, r7
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc2:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001cc4:	f005 fa18 	bl	80070f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cc8:	4622      	mov	r2, r4
 8001cca:	f248 0110 	movw	r1, #32784	; 0x8010
 8001cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd2:	f005 fa11 	bl	80070f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f244 4184 	movw	r1, #17540	; 0x4484
 8001cde:	f005 fa0b 	bl	80070f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2601      	movs	r6, #1
 8001ce4:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	a906      	add	r1, sp, #24
 8001cea:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f005 f900 	bl	8006ef8 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001cfa:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001d02:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f005 f8f5 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d0e:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	4638      	mov	r0, r7
 8001d12:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f005 f8ec 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001d20:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d24:	a906      	add	r1, sp, #24
 8001d26:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001d28:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f005 f8e2 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d38:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	a906      	add	r1, sp, #24
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d40:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f005 f8d7 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4e:	a906      	add	r1, sp, #24
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d54:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d58:	f005 f8ce 	bl	8006ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d5c:	2260      	movs	r2, #96	; 0x60
 8001d5e:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	a906      	add	r1, sp, #24
 8001d62:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d64:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6a:	f005 f8c5 	bl	8006ef8 <HAL_GPIO_Init>

}
 8001d6e:	b00d      	add	sp, #52	; 0x34
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48000800 	.word	0x48000800
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48000c00 	.word	0x48000c00

08001d84 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001d84:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001d86:	4870      	ldr	r0, [pc, #448]	; (8001f48 <ICM20602_init+0x1c4>)
{
 8001d88:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	f005 f9b3 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2110      	movs	r1, #16
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d9a:	f005 f9ad 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001d9e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001da2:	216b      	movs	r1, #107	; 0x6b
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001da4:	2301      	movs	r3, #1
 8001da6:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001da8:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001dac:	9400      	str	r4, [sp, #0]
 8001dae:	a902      	add	r1, sp, #8
 8001db0:	4866      	ldr	r0, [pc, #408]	; (8001f4c <ICM20602_init+0x1c8>)
 8001db2:	f006 f8f5 	bl	8007fa0 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001db6:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001db8:	2301      	movs	r3, #1
 8001dba:	9400      	str	r4, [sp, #0]
 8001dbc:	aa03      	add	r2, sp, #12
 8001dbe:	a902      	add	r1, sp, #8
 8001dc0:	4862      	ldr	r0, [pc, #392]	; (8001f4c <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001dc2:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001dc6:	f006 f8eb 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2110      	movs	r1, #16
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f005 f991 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001dd6:	462a      	mov	r2, r5
 8001dd8:	2110      	movs	r1, #16
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dde:	f005 f98b 	bl	80070f8 <HAL_GPIO_WritePin>
	send_data[0]=reg & 0x7F;
 8001de2:	2319      	movs	r3, #25
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001de4:	9400      	str	r4, [sp, #0]
	send_data[0]=reg & 0x7F;
 8001de6:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001dea:	aa03      	add	r2, sp, #12
 8001dec:	2301      	movs	r3, #1
 8001dee:	a902      	add	r1, sp, #8
 8001df0:	4856      	ldr	r0, [pc, #344]	; (8001f4c <ICM20602_init+0x1c8>)
 8001df2:	f006 f8d5 	bl	8007fa0 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001df6:	2307      	movs	r3, #7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001df8:	9400      	str	r4, [sp, #0]
	send_data[0]=data;
 8001dfa:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001dfe:	aa03      	add	r2, sp, #12
 8001e00:	2301      	movs	r3, #1
 8001e02:	a902      	add	r1, sp, #8
 8001e04:	4851      	ldr	r0, [pc, #324]	; (8001f4c <ICM20602_init+0x1c8>)
 8001e06:	f006 f8cb 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f005 f971 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001e16:	462a      	mov	r2, r5
 8001e18:	2110      	movs	r1, #16
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f005 f96b 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e22:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001e24:	211a      	movs	r1, #26
	send_data[0]=data;
 8001e26:	461d      	mov	r5, r3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e28:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001e2a:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e2e:	9400      	str	r4, [sp, #0]
 8001e30:	a902      	add	r1, sp, #8
 8001e32:	4846      	ldr	r0, [pc, #280]	; (8001f4c <ICM20602_init+0x1c8>)
 8001e34:	f006 f8b4 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e38:	462b      	mov	r3, r5
 8001e3a:	9400      	str	r4, [sp, #0]
 8001e3c:	a902      	add	r1, sp, #8
 8001e3e:	aa03      	add	r2, sp, #12
 8001e40:	4842      	ldr	r0, [pc, #264]	; (8001f4c <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001e42:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e46:	f006 f8ab 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001e4a:	462a      	mov	r2, r5
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f005 f951 	bl	80070f8 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

	ICM20602_setAccRange(Ascale);
 8001e56:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <ICM20602_init+0x1cc>)
 8001e58:	681c      	ldr	r4, [r3, #0]

// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{

    switch(Ascale)
 8001e5a:	2c03      	cmp	r4, #3
 8001e5c:	d807      	bhi.n	8001e6e <ICM20602_init+0xea>
 8001e5e:	e8df f004 	tbb	[pc, r4]
 8001e62:	686d      	.short	0x686d
 8001e64:	6302      	.short	0x6302
            break;
        case AFS_4G:
            aRes = 4.0/32768.0;
            break;
        case AFS_8G:
            aRes = 8.0/32768.0;
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <ICM20602_init+0x1d0>)
 8001e68:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001e6c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2110      	movs	r1, #16
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e76:	f005 f93f 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e7a:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001e7e:	221c      	movs	r2, #28
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e80:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001e82:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e86:	a902      	add	r1, sp, #8
 8001e88:	aa03      	add	r2, sp, #12
 8001e8a:	4830      	ldr	r0, [pc, #192]	; (8001f4c <ICM20602_init+0x1c8>)
 8001e8c:	9500      	str	r5, [sp, #0]
 8001e8e:	f006 f887 	bl	8007fa0 <HAL_SPI_TransmitReceive>
        case AFS_16G:
            aRes = 16.0/32768.0;
            break;         
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001e92:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001e94:	2301      	movs	r3, #1
 8001e96:	aa03      	add	r2, sp, #12
 8001e98:	a902      	add	r1, sp, #8
 8001e9a:	482c      	ldr	r0, [pc, #176]	; (8001f4c <ICM20602_init+0x1c8>)
 8001e9c:	9500      	str	r5, [sp, #0]
	send_data[0]=data;
 8001e9e:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ea2:	f006 f87d 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eae:	f005 f923 	bl	80070f8 <HAL_GPIO_WritePin>
	ICM20602_setGyroRange(Gscale);
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <ICM20602_init+0x1d4>)
 8001eb4:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
    switch (Gscale) {
 8001eb6:	2c03      	cmp	r4, #3
 8001eb8:	d806      	bhi.n	8001ec8 <ICM20602_init+0x144>
 8001eba:	e8df f004 	tbb	[pc, r4]
 8001ebe:	2d31      	.short	0x2d31
 8001ec0:	2902      	.short	0x2902
            break;
        case GFS_500DPS:
            gRes = 500.0/32768.0;
            break;
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <ICM20602_init+0x1d8>)
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <ICM20602_init+0x1dc>)
 8001ec6:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2110      	movs	r1, #16
 8001ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed0:	f005 f912 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ed4:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001ed8:	221b      	movs	r2, #27
 8001eda:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ede:	a902      	add	r1, sp, #8
 8001ee0:	aa03      	add	r2, sp, #12
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9500      	str	r5, [sp, #0]
 8001ee6:	4819      	ldr	r0, [pc, #100]	; (8001f4c <ICM20602_init+0x1c8>)
 8001ee8:	f006 f85a 	bl	8007fa0 <HAL_SPI_TransmitReceive>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
            break;
    }

    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001eec:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001eee:	aa03      	add	r2, sp, #12
 8001ef0:	a902      	add	r1, sp, #8
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9500      	str	r5, [sp, #0]
 8001ef6:	4815      	ldr	r0, [pc, #84]	; (8001f4c <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001ef8:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001efc:	f006 f850 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f00:	2201      	movs	r2, #1
 8001f02:	2110      	movs	r1, #16
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f005 f8f6 	bl	80070f8 <HAL_GPIO_WritePin>
}
 8001f0c:	b005      	add	sp, #20
 8001f0e:	bd30      	pop	{r4, r5, pc}
            gRes = 2000.0/32768.0;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <ICM20602_init+0x1d8>)
 8001f12:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <ICM20602_init+0x1e0>)
 8001f14:	601a      	str	r2, [r3, #0]
            break;
 8001f16:	e7d7      	b.n	8001ec8 <ICM20602_init+0x144>
            gRes = 500.0/32768.0;
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <ICM20602_init+0x1d8>)
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <ICM20602_init+0x1e4>)
 8001f1c:	601a      	str	r2, [r3, #0]
            break;
 8001f1e:	e7d3      	b.n	8001ec8 <ICM20602_init+0x144>
            gRes = 250.0/32768.0;
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <ICM20602_init+0x1d8>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <ICM20602_init+0x1e8>)
 8001f24:	601a      	str	r2, [r3, #0]
            break;
 8001f26:	e7cf      	b.n	8001ec8 <ICM20602_init+0x144>
            aRes = 16.0/32768.0;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <ICM20602_init+0x1d0>)
 8001f2a:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001f2e:	601a      	str	r2, [r3, #0]
            break;         
 8001f30:	e79d      	b.n	8001e6e <ICM20602_init+0xea>
            aRes = 4.0/32768.0;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <ICM20602_init+0x1d0>)
 8001f34:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001f38:	601a      	str	r2, [r3, #0]
            break;
 8001f3a:	e798      	b.n	8001e6e <ICM20602_init+0xea>
            aRes = 2.0/32768.0;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <ICM20602_init+0x1d0>)
 8001f3e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001f42:	601a      	str	r2, [r3, #0]
            break;
 8001f44:	e793      	b.n	8001e6e <ICM20602_init+0xea>
 8001f46:	bf00      	nop
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	200015d4 	.word	0x200015d4
 8001f50:	20000d74 	.word	0x20000d74
 8001f54:	20000d78 	.word	0x20000d78
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000dc4 	.word	0x20000dc4
 8001f60:	3cfa0000 	.word	0x3cfa0000
 8001f64:	3d7a0000 	.word	0x3d7a0000
 8001f68:	3c7a0000 	.word	0x3c7a0000
 8001f6c:	3bfa0000 	.word	0x3bfa0000

08001f70 <ICM20602_clearAngle>:
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
    pitch_angle = 0.0f;
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <ICM20602_clearAngle+0x10>)
    roll_angle  = 0.0f;
 8001f72:	4904      	ldr	r1, [pc, #16]	; (8001f84 <ICM20602_clearAngle+0x14>)
    yaw_angle   = 0.0f;
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <ICM20602_clearAngle+0x18>)
    pitch_angle = 0.0f;
 8001f76:	2300      	movs	r3, #0
 8001f78:	6003      	str	r3, [r0, #0]
    roll_angle  = 0.0f;
 8001f7a:	600b      	str	r3, [r1, #0]
    yaw_angle   = 0.0f;
 8001f7c:	6013      	str	r3, [r2, #0]
}
 8001f7e:	4770      	bx	lr
 8001f80:	20000e20 	.word	0x20000e20
 8001f84:	20000e24 	.word	0x20000e24
 8001f88:	20000e28 	.word	0x20000e28

08001f8c <ICM20602_medianFilter>:
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f8c:	4a79      	ldr	r2, [pc, #484]	; (8002174 <ICM20602_medianFilter+0x1e8>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
    	gyro_mdat[i][0] = gyro[i];
 8001f8e:	487a      	ldr	r0, [pc, #488]	; (8002178 <ICM20602_medianFilter+0x1ec>)

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001f90:	4b7a      	ldr	r3, [pc, #488]	; (800217c <ICM20602_medianFilter+0x1f0>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001f92:	ed92 6a01 	vldr	s12, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001f96:	edd0 5a00 	vldr	s11, [r0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
    	acc_mdat[i][0]  = acc[i];
 8001f9a:	4979      	ldr	r1, [pc, #484]	; (8002180 <ICM20602_medianFilter+0x1f4>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001f9c:	ed92 7a00 	vldr	s14, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001fa0:	ed93 5a01 	vldr	s10, [r3, #4]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
    	acc_mdat[i][0]  = acc[i];
 8001fa8:	edd1 6a00 	vldr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001fac:	ed82 6a02 	vstr	s12, [r2, #8]

    	a = 0;
    	b = 2;

    	for (j = 2; j >= 0; j--) {
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001fb0:	eef4 5ac6 	vcmpe.f32	s11, s12
 8001fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001fb8:	ed82 7a01 	vstr	s14, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001fbc:	edc2 5a00 	vstr	s11, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001fc0:	ed83 5a02 	vstr	s10, [r3, #8]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001fc4:	edc3 7a01 	vstr	s15, [r3, #4]
    	acc_mdat[i][0]  = acc[i];
 8001fc8:	edc3 6a00 	vstr	s13, [r3]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001fcc:	dc05      	bgt.n	8001fda <ICM20602_medianFilter+0x4e>
 8001fce:	eef0 4a46 	vmov.f32	s9, s12
    	gyro_mdat[i][0] = gyro[i];
 8001fd2:	eeb0 6a65 	vmov.f32	s12, s11
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001fd6:	eef0 5a64 	vmov.f32	s11, s9
    			tmp         = gyro_tmp[a];
    			gyro_tmp[a] = gyro_tmp[b];
    			gyro_tmp[b] = tmp;
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001fda:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8001fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe2:	d405      	bmi.n	8001ff0 <ICM20602_medianFilter+0x64>
 8001fe4:	eef0 4a45 	vmov.f32	s9, s10
    	acc_mdat[i][0]  = acc[i];
 8001fe8:	eeb0 5a66 	vmov.f32	s10, s13
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001fec:	eef0 6a64 	vmov.f32	s13, s9
				acc_tmp[b]  = tmp;
			}
    		a = j-1;
    		b = j;
    	}
    	gyro[i] = gyro_tmp[1];
 8001ff0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff8:	bf88      	it	hi
 8001ffa:	eeb0 7a65 	vmovhi.f32	s14, s11
 8001ffe:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8002002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8002006:	eef4 7ae6 	vcmpe.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 800200a:	bfa8      	it	ge
 800200c:	eeb0 6a47 	vmovge.f32	s12, s14
    	acc[i]  = acc_tmp[1];
 8002010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002014:	bf98      	it	ls
 8002016:	eef0 6a67 	vmovls.f32	s13, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 800201a:	edd2 5a04 	vldr	s11, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 800201e:	ed90 7a01 	vldr	s14, [r0, #4]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8002022:	edd2 3a03 	vldr	s7, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8002026:	ed93 4a04 	vldr	s8, [r3, #16]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 800202a:	edd3 4a03 	vldr	s9, [r3, #12]
    	acc_mdat[i][0]  = acc[i];
 800202e:	edd1 7a01 	vldr	s15, [r1, #4]
    	gyro[i] = gyro_tmp[1];
 8002032:	ed80 6a00 	vstr	s12, [r0]
    	acc[i]  = acc_tmp[1];
 8002036:	eef4 6ac5 	vcmpe.f32	s13, s10
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 800203e:	eef4 5ac7 	vcmpe.f32	s11, s14
    	acc[i]  = acc_tmp[1];
 8002042:	bfb8      	it	lt
 8002044:	eef0 6a45 	vmovlt.f32	s13, s10
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 800204c:	edc1 6a00 	vstr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8002050:	edc2 5a05 	vstr	s11, [r2, #20]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8002054:	edc2 3a04 	vstr	s7, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8002058:	ed82 7a03 	vstr	s14, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 800205c:	ed83 4a05 	vstr	s8, [r3, #20]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8002060:	edc3 4a04 	vstr	s9, [r3, #16]
    	acc_mdat[i][0]  = acc[i];
 8002064:	edc3 7a03 	vstr	s15, [r3, #12]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8002068:	d405      	bmi.n	8002076 <ICM20602_medianFilter+0xea>
 800206a:	eef0 6a65 	vmov.f32	s13, s11
    	gyro_mdat[i][0] = gyro[i];
 800206e:	eef0 5a47 	vmov.f32	s11, s14
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8002072:	eeb0 7a66 	vmov.f32	s14, s13
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8002076:	eef4 7ac4 	vcmpe.f32	s15, s8
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	dc05      	bgt.n	800208c <ICM20602_medianFilter+0x100>
 8002080:	eef0 6a44 	vmov.f32	s13, s8
    	acc_mdat[i][0]  = acc[i];
 8002084:	eeb0 4a67 	vmov.f32	s8, s15
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8002088:	eef0 7a66 	vmov.f32	s15, s13
    	gyro[i] = gyro_tmp[1];
 800208c:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	bf88      	it	hi
 8002096:	eeb0 7a63 	vmovhi.f32	s14, s7
 800209a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 80020a2:	eef4 7ae4 	vcmpe.f32	s15, s9
    	gyro[i] = gyro_tmp[1];
 80020a6:	bfb4      	ite	lt
 80020a8:	eef0 6a65 	vmovlt.f32	s13, s11
 80020ac:	eef0 6a47 	vmovge.f32	s13, s14
    	acc[i]  = acc_tmp[1];
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b4:	bf8c      	ite	hi
 80020b6:	eeb0 7a64 	vmovhi.f32	s14, s9
 80020ba:	eeb0 7a67 	vmovls.f32	s14, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 80020be:	edd2 4a07 	vldr	s9, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 80020c2:	edd0 7a02 	vldr	s15, [r0, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 80020c6:	edd2 3a06 	vldr	s7, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 80020ca:	edd3 5a07 	vldr	s11, [r3, #28]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 80020ce:	ed93 6a06 	vldr	s12, [r3, #24]
    	acc_mdat[i][0]  = acc[i];
 80020d2:	ed91 5a02 	vldr	s10, [r1, #8]
    	gyro[i] = gyro_tmp[1];
 80020d6:	edc0 6a01 	vstr	s13, [r0, #4]
    	acc[i]  = acc_tmp[1];
 80020da:	eeb4 7ac4 	vcmpe.f32	s14, s8
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 80020e2:	eef4 7ae4 	vcmpe.f32	s15, s9
    	acc[i]  = acc_tmp[1];
 80020e6:	bfb8      	it	lt
 80020e8:	eeb0 7a44 	vmovlt.f32	s14, s8
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 80020ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 80020f0:	ed81 7a01 	vstr	s14, [r1, #4]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 80020f4:	edc2 4a08 	vstr	s9, [r2, #32]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 80020f8:	edc2 3a07 	vstr	s7, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 80020fc:	edc2 7a06 	vstr	s15, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8002100:	edc3 5a08 	vstr	s11, [r3, #32]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8002104:	ed83 6a07 	vstr	s12, [r3, #28]
    	acc_mdat[i][0]  = acc[i];
 8002108:	ed83 5a06 	vstr	s10, [r3, #24]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 800210c:	dc05      	bgt.n	800211a <ICM20602_medianFilter+0x18e>
 800210e:	eeb0 7a64 	vmov.f32	s14, s9
    	gyro_mdat[i][0] = gyro[i];
 8002112:	eef0 4a67 	vmov.f32	s9, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8002116:	eef0 7a47 	vmov.f32	s15, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 800211a:	eef4 5ac5 	vcmpe.f32	s11, s10
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	d405      	bmi.n	8002130 <ICM20602_medianFilter+0x1a4>
 8002124:	eeb0 7a65 	vmov.f32	s14, s11
    	acc_mdat[i][0]  = acc[i];
 8002128:	eef0 5a45 	vmov.f32	s11, s10
    	acc_mdat[i][2]  = acc_mdat[i][1];
 800212c:	eeb0 5a47 	vmov.f32	s10, s14
    	gyro[i] = gyro_tmp[1];
 8002130:	eef4 7ae3 	vcmpe.f32	s15, s7
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	bf88      	it	hi
 800213a:	eef0 7a63 	vmovhi.f32	s15, s7
 800213e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8002146:	eeb4 6ac5 	vcmpe.f32	s12, s10
    	gyro[i] = gyro_tmp[1];
 800214a:	bfb8      	it	lt
 800214c:	eef0 7a64 	vmovlt.f32	s15, s9
    	acc[i]  = acc_tmp[1];
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	bf88      	it	hi
 8002156:	eeb0 6a45 	vmovhi.f32	s12, s10
 800215a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	bfb8      	it	lt
 8002164:	eeb0 6a65 	vmovlt.f32	s12, s11
    	gyro[i] = gyro_tmp[1];
 8002168:	edc0 7a02 	vstr	s15, [r0, #8]
    	acc[i]  = acc_tmp[1];
 800216c:	ed81 6a02 	vstr	s12, [r1, #8]
    }
}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000de0 	.word	0x20000de0
 8002178:	20000dc8 	.word	0x20000dc8
 800217c:	20000d94 	.word	0x20000d94
 8002180:	20000d7c 	.word	0x20000d7c

08002184 <ICM20602_read_IMU_data>:
{
 8002184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002188:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800218c:	2200      	movs	r2, #0
{
 800218e:	b084      	sub	sp, #16
 8002190:	4606      	mov	r6, r0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002192:	2110      	movs	r1, #16
 8002194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8002198:	eeb0 8a40 	vmov.f32	s16, s0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800219c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021a0:	f004 ffaa 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021a4:	23c8      	movs	r3, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021a6:	9500      	str	r5, [sp, #0]
    send_data[0]= reg | 0x80;
 80021a8:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021ac:	aa03      	add	r2, sp, #12
 80021ae:	2301      	movs	r3, #1
 80021b0:	a902      	add	r1, sp, #8
 80021b2:	4889      	ldr	r0, [pc, #548]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
 80021b4:	f005 fef4 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    send_data[0]=0x00;
 80021b8:	2700      	movs	r7, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021ba:	2301      	movs	r3, #1
 80021bc:	9500      	str	r5, [sp, #0]
 80021be:	aa03      	add	r2, sp, #12
 80021c0:	a902      	add	r1, sp, #8
 80021c2:	4885      	ldr	r0, [pc, #532]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
    send_data[0]=0x00;
 80021c4:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021c8:	f005 feea 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021cc:	2110      	movs	r1, #16
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80021d4:	f89d 400c 	ldrb.w	r4, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021d8:	f004 ff8e 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021dc:	463a      	mov	r2, r7
 80021de:	2110      	movs	r1, #16
 80021e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e4:	f004 ff88 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021e8:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021ec:	9500      	str	r5, [sp, #0]
 80021ee:	2301      	movs	r3, #1
 80021f0:	aa03      	add	r2, sp, #12
 80021f2:	a902      	add	r1, sp, #8
 80021f4:	4878      	ldr	r0, [pc, #480]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
    send_data[0]= reg | 0x80;
 80021f6:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021fa:	f005 fed1 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021fe:	2301      	movs	r3, #1
 8002200:	9500      	str	r5, [sp, #0]
 8002202:	aa03      	add	r2, sp, #12
 8002204:	a902      	add	r1, sp, #8
 8002206:	4874      	ldr	r0, [pc, #464]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
    send_data[0]=0x00;
 8002208:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800220c:	f005 fec8 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002210:	f89d 800c 	ldrb.w	r8, [sp, #12]
    return ((HiByte<<8) | LoByte);
 8002214:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002218:	2110      	movs	r1, #16
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	2201      	movs	r2, #1
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002220:	b224      	sxth	r4, r4
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002222:	f004 ff69 	bl	80070f8 <HAL_GPIO_WritePin>
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002226:	4b6d      	ldr	r3, [pc, #436]	; (80023dc <ICM20602_read_IMU_data+0x258>)
 8002228:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002414 <ICM20602_read_IMU_data+0x290>
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	ee07 4a90 	vmov	s15, r4
 8002234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    send_data[0]= reg | 0x80;
 8002238:	24c2      	movs	r4, #194	; 0xc2
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800223a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223e:	edc8 7a02 	vstr	s15, [r8, #8]
    ICM20602_medianFilter();
 8002242:	f7ff fea3 	bl	8001f8c <ICM20602_medianFilter>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002246:	463a      	mov	r2, r7
 8002248:	2110      	movs	r1, #16
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f004 ff53 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002252:	9500      	str	r5, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	aa03      	add	r2, sp, #12
 8002258:	a902      	add	r1, sp, #8
 800225a:	485f      	ldr	r0, [pc, #380]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
    send_data[0]= reg | 0x80;
 800225c:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002260:	f005 fe9e 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002264:	2301      	movs	r3, #1
 8002266:	9500      	str	r5, [sp, #0]
 8002268:	aa03      	add	r2, sp, #12
 800226a:	a902      	add	r1, sp, #8
 800226c:	485a      	ldr	r0, [pc, #360]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
    send_data[0]=0x00;
 800226e:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002272:	f005 fe95 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002276:	2110      	movs	r1, #16
 8002278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800227e:	f89d 400c 	ldrb.w	r4, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002282:	f004 ff39 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002286:	463a      	mov	r2, r7
 8002288:	2110      	movs	r1, #16
 800228a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228e:	f004 ff33 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002292:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002296:	9500      	str	r5, [sp, #0]
 8002298:	2301      	movs	r3, #1
 800229a:	aa03      	add	r2, sp, #12
 800229c:	a902      	add	r1, sp, #8
 800229e:	484e      	ldr	r0, [pc, #312]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
    send_data[0]= reg | 0x80;
 80022a0:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022a4:	f005 fe7c 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022a8:	2301      	movs	r3, #1
 80022aa:	9500      	str	r5, [sp, #0]
 80022ac:	aa03      	add	r2, sp, #12
 80022ae:	a902      	add	r1, sp, #8
 80022b0:	4849      	ldr	r0, [pc, #292]	; (80023d8 <ICM20602_read_IMU_data+0x254>)
    send_data[0]=0x00;
 80022b2:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b6:	f005 fe73 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80022ba:	f89d 500c 	ldrb.w	r5, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80022be:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2110      	movs	r1, #16
 80022c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80022ca:	b224      	sxth	r4, r4
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022cc:	f004 ff14 	bl	80070f8 <HAL_GPIO_WritePin>
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80022d0:	ee07 4a90 	vmov	s15, r4

void ICM20602_IMU_compensate(void)
{
    int k;
    for(k=0;k<3;k++){
        acc_comp[k] = acc[k] - acc_off[k];
 80022d4:	4942      	ldr	r1, [pc, #264]	; (80023e0 <ICM20602_read_IMU_data+0x25c>)
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <ICM20602_read_IMU_data+0x260>)
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80022d8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80023e8 <ICM20602_read_IMU_data+0x264>
        acc_comp[k] = acc[k] - acc_off[k];
 80022dc:	edd1 4a00 	vldr	s9, [r1]
 80022e0:	edd1 5a02 	vldr	s11, [r1, #8]
 80022e4:	ed91 5a01 	vldr	s10, [r1, #4]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80022e8:	4940      	ldr	r1, [pc, #256]	; (80023ec <ICM20602_read_IMU_data+0x268>)
        acc_comp[k] = acc[k] - acc_off[k];
 80022ea:	ed93 2a01 	vldr	s4, [r3, #4]
 80022ee:	ed93 3a02 	vldr	s6, [r3, #8]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80022f2:	edd8 6a02 	vldr	s13, [r8, #8]
    *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 80022f6:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <ICM20602_read_IMU_data+0x26c>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80022f8:	edd1 1a00 	vldr	s3, [r1]
 80022fc:	edd1 2a01 	vldr	s5, [r1, #4]
 8002300:	edd8 3a00 	vldr	s7, [r8]
 8002304:	ed98 4a01 	vldr	s8, [r8, #4]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230c:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8002310:	eea7 6a87 	vfma.f32	s12, s15, s14
        acc_comp[k] = acc[k] - acc_off[k];
 8002314:	edd3 7a00 	vldr	s15, [r3]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002318:	ed92 7a02 	vldr	s14, [r2, #8]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <ICM20602_read_IMU_data+0x270>)
        acc_comp[k] = acc[k] - acc_off[k];
 800231e:	ee74 4ae7 	vsub.f32	s9, s9, s15
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002322:	edd1 7a02 	vldr	s15, [r1, #8]
        acc_comp[k] = acc[k] - acc_off[k];
 8002326:	4934      	ldr	r1, [pc, #208]	; (80023f8 <ICM20602_read_IMU_data+0x274>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002328:	ee76 7ae7 	vsub.f32	s15, s13, s15
        acc_comp[k] = acc[k] - acc_off[k];
 800232c:	ee35 5a42 	vsub.f32	s10, s10, s4
 8002330:	ee75 6ac3 	vsub.f32	s13, s11, s6
 8002334:	edc1 4a00 	vstr	s9, [r1]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002338:	ee34 4a62 	vsub.f32	s8, s8, s5
        acc_comp[k] = acc[k] - acc_off[k];
 800233c:	ed81 5a01 	vstr	s10, [r1, #4]
 8002340:	edc1 6a02 	vstr	s13, [r1, #8]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002344:	ee73 3ae1 	vsub.f32	s7, s7, s3
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002348:	492c      	ldr	r1, [pc, #176]	; (80023fc <ICM20602_read_IMU_data+0x278>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800234a:	ed83 4a01 	vstr	s8, [r3, #4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 800234e:	ee37 7a87 	vadd.f32	s14, s15, s14
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002352:	edc3 3a00 	vstr	s7, [r3]
 8002356:	edc3 7a02 	vstr	s15, [r3, #8]
    imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 800235a:	ed81 6a00 	vstr	s12, [r1]
    *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800235e:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002362:	edd6 7a00 	vldr	s15, [r6]
    while (deg < -180.0f) deg += 360.0f;
 8002366:	eddf 5a26 	vldr	s11, [pc, #152]	; 8002400 <ICM20602_read_IMU_data+0x27c>
    *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800236a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800236e:	eee7 7a04 	vfma.f32	s15, s14, s8
    while (deg < -180.0f) deg += 360.0f;
 8002372:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d50c      	bpl.n	8002396 <ICM20602_read_IMU_data+0x212>
 800237c:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8002404 <ICM20602_read_IMU_data+0x280>
 8002380:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002408 <ICM20602_read_IMU_data+0x284>
 8002384:	eeb0 7a67 	vmov.f32	s14, s15
 8002388:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002394:	d4f6      	bmi.n	8002384 <ICM20602_read_IMU_data+0x200>
    while (deg >= 180.0f) deg -= 360.0f;
 8002396:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800240c <ICM20602_read_IMU_data+0x288>
 800239a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a2:	db0c      	blt.n	80023be <ICM20602_read_IMU_data+0x23a>
 80023a4:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8002404 <ICM20602_read_IMU_data+0x280>
 80023a8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002410 <ICM20602_read_IMU_data+0x28c>
 80023ac:	eeb0 7a67 	vmov.f32	s14, s15
 80023b0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80023bc:	daf6      	bge.n	80023ac <ICM20602_read_IMU_data+0x228>
    *yaw_input = ICM20602_normAngle(*yaw_input);
 80023be:	edc6 7a00 	vstr	s15, [r6]
    gyro_prv[0] = gyro_comp[0];
 80023c2:	6818      	ldr	r0, [r3, #0]
    gyro_prv[1] = gyro_comp[1];
 80023c4:	6859      	ldr	r1, [r3, #4]
    gyro_prv[2] = gyro_comp[2];
 80023c6:	689b      	ldr	r3, [r3, #8]
    gyro_prv[0] = gyro_comp[0];
 80023c8:	6010      	str	r0, [r2, #0]
    gyro_prv[1] = gyro_comp[1];
 80023ca:	6051      	str	r1, [r2, #4]
    gyro_prv[2] = gyro_comp[2];
 80023cc:	6093      	str	r3, [r2, #8]
}
 80023ce:	b004      	add	sp, #16
 80023d0:	ecbd 8b02 	vpop	{d8}
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d8:	200015d4 	.word	0x200015d4
 80023dc:	20000dc4 	.word	0x20000dc4
 80023e0:	20000d7c 	.word	0x20000d7c
 80023e4:	20000db8 	.word	0x20000db8
 80023e8:	3b4889df 	.word	0x3b4889df
 80023ec:	20000e04 	.word	0x20000e04
 80023f0:	20000e10 	.word	0x20000e10
 80023f4:	20000dd4 	.word	0x20000dd4
 80023f8:	20000d88 	.word	0x20000d88
 80023fc:	20000e1c 	.word	0x20000e1c
 8002400:	c3340000 	.word	0xc3340000
 8002404:	43b40000 	.word	0x43b40000
 8002408:	c4070000 	.word	0xc4070000
 800240c:	43340000 	.word	0x43340000
 8002410:	44070000 	.word	0x44070000
 8002414:	20000dc8 	.word	0x20000dc8

08002418 <ICM20602_IMU_calibration2>:
{
 8002418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241c:	ed2d 8b06 	vpush	{d8-d10}
    double acc_sum[3]={0};
 8002420:	2400      	movs	r4, #0
{
 8002422:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    double acc_ave[3][10] = {{0.0}};
 8002426:	22f0      	movs	r2, #240	; 0xf0
 8002428:	4621      	mov	r1, r4
 800242a:	a822      	add	r0, sp, #136	; 0x88
    double acc_sum[3]={0};
 800242c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8002430:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8002434:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    double gyro_sum[3]={0};
 8002438:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 800243c:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 8002440:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    double acc_ave[3][10] = {{0.0}};
 8002444:	f008 feec 	bl	800b220 <memset>
    double gyro_ave[3][10] = {{0.0}};
 8002448:	4621      	mov	r1, r4
 800244a:	22f0      	movs	r2, #240	; 0xf0
 800244c:	a85e      	add	r0, sp, #376	; 0x178
 800244e:	f008 fee7 	bl	800b220 <memset>
    printf("put the IMU still!\n");
 8002452:	48c9      	ldr	r0, [pc, #804]	; (8002778 <ICM20602_IMU_calibration2+0x360>)
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002454:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 800277c <ICM20602_IMU_calibration2+0x364>
    printf("put the IMU still!\n");
 8002458:	f008 fd2a 	bl	800aeb0 <puts>
    HAL_Delay(200);
 800245c:	20c8      	movs	r0, #200	; 0xc8
 800245e:	f003 f98f 	bl	8005780 <HAL_Delay>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002462:	2200      	movs	r2, #0
 8002464:	2300      	movs	r3, #0
    double cal_len = 0.0f;
 8002466:	ec43 2b1a 	vmov	d10, r2, r3
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f7fd ff33 	bl	80002d8 <__aeabi_dsub>
 8002472:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002476:	9309      	str	r3, [sp, #36]	; 0x24
 8002478:	9008      	str	r0, [sp, #32]
		|| cal_len < 500.0
 800247a:	a3bd      	add	r3, pc, #756	; (adr r3, 8002770 <ICM20602_IMU_calibration2+0x358>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002484:	f7fe fb70 	bl	8000b68 <__aeabi_dcmpgt>
 8002488:	2800      	cmp	r0, #0
 800248a:	d15d      	bne.n	8002548 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 800248c:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8002490:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8002494:	f7fd ff20 	bl	80002d8 <__aeabi_dsub>
 8002498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800249c:	930b      	str	r3, [sp, #44]	; 0x2c
 800249e:	900a      	str	r0, [sp, #40]	; 0x28
 80024a0:	a3b3      	add	r3, pc, #716	; (adr r3, 8002770 <ICM20602_IMU_calibration2+0x358>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80024aa:	f7fe fb5d 	bl	8000b68 <__aeabi_dcmpgt>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d14a      	bne.n	8002548 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 80024b2:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80024b6:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 80024ba:	f7fd ff0d 	bl	80002d8 <__aeabi_dsub>
 80024be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80024c2:	930d      	str	r3, [sp, #52]	; 0x34
 80024c4:	900c      	str	r0, [sp, #48]	; 0x30
 80024c6:	a3aa      	add	r3, pc, #680	; (adr r3, 8002770 <ICM20602_IMU_calibration2+0x358>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80024d0:	f7fe fb4a 	bl	8000b68 <__aeabi_dcmpgt>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d137      	bne.n	8002548 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 80024d8:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
 80024dc:	e9dd 0170 	ldrd	r0, r1, [sp, #448]	; 0x1c0
 80024e0:	f7fd fefa 	bl	80002d8 <__aeabi_dsub>
 80024e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80024e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80024ea:	900e      	str	r0, [sp, #56]	; 0x38
 80024ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8002770 <ICM20602_IMU_calibration2+0x358>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80024f6:	f7fe fb37 	bl	8000b68 <__aeabi_dcmpgt>
 80024fa:	bb28      	cbnz	r0, 8002548 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 80024fc:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 8002500:	e9dd 0184 	ldrd	r0, r1, [sp, #528]	; 0x210
 8002504:	f7fd fee8 	bl	80002d8 <__aeabi_dsub>
 8002508:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800250c:	9311      	str	r3, [sp, #68]	; 0x44
 800250e:	9010      	str	r0, [sp, #64]	; 0x40
 8002510:	a397      	add	r3, pc, #604	; (adr r3, 8002770 <ICM20602_IMU_calibration2+0x358>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800251a:	f7fe fb25 	bl	8000b68 <__aeabi_dcmpgt>
 800251e:	b998      	cbnz	r0, 8002548 <ICM20602_IMU_calibration2+0x130>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002520:	e9dd 2386 	ldrd	r2, r3, [sp, #536]	; 0x218
 8002524:	e9dd 0198 	ldrd	r0, r1, [sp, #608]	; 0x260
 8002528:	f7fd fed6 	bl	80002d8 <__aeabi_dsub>
 800252c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002530:	9313      	str	r3, [sp, #76]	; 0x4c
 8002532:	9012      	str	r0, [sp, #72]	; 0x48
 8002534:	a38e      	add	r3, pc, #568	; (adr r3, 8002770 <ICM20602_IMU_calibration2+0x358>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800253e:	f7fe fb13 	bl	8000b68 <__aeabi_dcmpgt>
 8002542:	2800      	cmp	r0, #0
 8002544:	f000 82e8 	beq.w	8002b18 <ICM20602_IMU_calibration2+0x700>
 8002548:	4b8d      	ldr	r3, [pc, #564]	; (8002780 <ICM20602_IMU_calibration2+0x368>)
 800254a:	9304      	str	r3, [sp, #16]
 800254c:	ab16      	add	r3, sp, #88	; 0x58
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	ab1c      	add	r3, sp, #112	; 0x70
 8002552:	9303      	str	r3, [sp, #12]
 8002554:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <ICM20602_IMU_calibration2+0x36c>)
 8002556:	9305      	str	r3, [sp, #20]
 8002558:	498b      	ldr	r1, [pc, #556]	; (8002788 <ICM20602_IMU_calibration2+0x370>)
 800255a:	f8df b238 	ldr.w	fp, [pc, #568]	; 8002794 <ICM20602_IMU_calibration2+0x37c>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800255e:	4c8b      	ldr	r4, [pc, #556]	; (800278c <ICM20602_IMU_calibration2+0x374>)
 8002560:	ec53 2b1a 	vmov	r2, r3, d10
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe f999 	bl	800089c <__aeabi_ddiv>
 800256a:	ec41 0b19 	vmov	d9, r0, r1
 800256e:	ae22      	add	r6, sp, #136	; 0x88
 8002570:	ad5e      	add	r5, sp, #376	; 0x178
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002572:	2700      	movs	r7, #0
 8002574:	2200      	movs	r2, #0
 8002576:	2110      	movs	r1, #16
 8002578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800257c:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002580:	f004 fdba 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002584:	20bc      	movs	r0, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002586:	f8cd 8000 	str.w	r8, [sp]
 800258a:	2301      	movs	r3, #1
 800258c:	aa15      	add	r2, sp, #84	; 0x54
 800258e:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002590:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002594:	4620      	mov	r0, r4
 8002596:	f005 fd03 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800259a:	2301      	movs	r3, #1
 800259c:	f8cd 8000 	str.w	r8, [sp]
 80025a0:	aa15      	add	r2, sp, #84	; 0x54
 80025a2:	a914      	add	r1, sp, #80	; 0x50
 80025a4:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80025a6:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80025aa:	f005 fcf9 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80025ae:	2201      	movs	r2, #1
 80025b0:	2110      	movs	r1, #16
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80025b6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80025ba:	f004 fd9d 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2110      	movs	r1, #16
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c6:	f004 fd97 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80025ca:	20bb      	movs	r0, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80025cc:	f8cd 8000 	str.w	r8, [sp]
 80025d0:	2301      	movs	r3, #1
 80025d2:	aa15      	add	r2, sp, #84	; 0x54
 80025d4:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80025d6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80025da:	4620      	mov	r0, r4
 80025dc:	f005 fce0 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80025e0:	2301      	movs	r3, #1
 80025e2:	f8cd 8000 	str.w	r8, [sp]
 80025e6:	aa15      	add	r2, sp, #84	; 0x54
 80025e8:	a914      	add	r1, sp, #80	; 0x50
 80025ea:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80025ec:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80025f0:	f005 fcd6 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80025f4:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80025f8:	2201      	movs	r2, #1
 80025fa:	2110      	movs	r1, #16
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002600:	f004 fd7a 	bl	80070f8 <HAL_GPIO_WritePin>
    return((HiByte<<8) | LoByte);
 8002604:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002608:	4b61      	ldr	r3, [pc, #388]	; (8002790 <ICM20602_IMU_calibration2+0x378>)
 800260a:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <ICM20602_IMU_calibration2+0x368>)
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	fa0f f989 	sxth.w	r9, r9
 8002614:	ee07 9a90 	vmov	s15, r9
 8002618:	ee27 7a08 	vmul.f32	s14, s14, s16
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002620:	2110      	movs	r1, #16
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002622:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800262a:	edc2 7a00 	vstr	s15, [r2]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	f004 fd62 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002634:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002636:	20be      	movs	r0, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002638:	460a      	mov	r2, r1
 800263a:	f8cd 8000 	str.w	r8, [sp]
 800263e:	2301      	movs	r3, #1
 8002640:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002642:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002646:	4620      	mov	r0, r4
 8002648:	f005 fcaa 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800264c:	a915      	add	r1, sp, #84	; 0x54
 800264e:	2301      	movs	r3, #1
 8002650:	460a      	mov	r2, r1
 8002652:	f8cd 8000 	str.w	r8, [sp]
 8002656:	a914      	add	r1, sp, #80	; 0x50
 8002658:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800265a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800265e:	f005 fc9f 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002662:	2201      	movs	r2, #1
 8002664:	2110      	movs	r1, #16
 8002666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 800266a:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800266e:	f004 fd43 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2110      	movs	r1, #16
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	f004 fd3d 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800267e:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002680:	20bd      	movs	r0, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002682:	460a      	mov	r2, r1
 8002684:	f8cd 8000 	str.w	r8, [sp]
 8002688:	2301      	movs	r3, #1
 800268a:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800268c:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002690:	4620      	mov	r0, r4
 8002692:	f005 fc85 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002696:	a915      	add	r1, sp, #84	; 0x54
 8002698:	2301      	movs	r3, #1
 800269a:	460a      	mov	r2, r1
 800269c:	f8cd 8000 	str.w	r8, [sp]
 80026a0:	a914      	add	r1, sp, #80	; 0x50
 80026a2:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80026a4:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80026a8:	f005 fc7a 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80026ac:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2110      	movs	r1, #16
 80026b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b8:	f004 fd1e 	bl	80070f8 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 80026bc:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80026c0:	4b33      	ldr	r3, [pc, #204]	; (8002790 <ICM20602_IMU_calibration2+0x378>)
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <ICM20602_IMU_calibration2+0x368>)
 80026c4:	ed93 7a00 	vldr	s14, [r3]
 80026c8:	fa0f f989 	sxth.w	r9, r9
 80026cc:	ee07 9a90 	vmov	s15, r9
 80026d0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80026d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80026d8:	2110      	movs	r1, #16
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80026da:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80026de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80026e2:	edc2 7a01 	vstr	s15, [r2, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	f004 fd06 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80026ec:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80026ee:	20c0      	movs	r0, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80026f0:	460a      	mov	r2, r1
 80026f2:	f8cd 8000 	str.w	r8, [sp]
 80026f6:	2301      	movs	r3, #1
 80026f8:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80026fa:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80026fe:	4620      	mov	r0, r4
 8002700:	f005 fc4e 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002704:	a915      	add	r1, sp, #84	; 0x54
 8002706:	2301      	movs	r3, #1
 8002708:	460a      	mov	r2, r1
 800270a:	f8cd 8000 	str.w	r8, [sp]
 800270e:	a914      	add	r1, sp, #80	; 0x50
 8002710:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002712:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002716:	f005 fc43 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800271a:	2201      	movs	r2, #1
 800271c:	2110      	movs	r1, #16
 800271e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002722:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002726:	f004 fce7 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2110      	movs	r1, #16
 800272e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002732:	f004 fce1 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002736:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002738:	20bf      	movs	r0, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800273a:	460a      	mov	r2, r1
 800273c:	f8cd 8000 	str.w	r8, [sp]
 8002740:	2301      	movs	r3, #1
 8002742:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002744:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002748:	4620      	mov	r0, r4
 800274a:	f005 fc29 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800274e:	a915      	add	r1, sp, #84	; 0x54
 8002750:	2301      	movs	r3, #1
 8002752:	460a      	mov	r2, r1
 8002754:	f8cd 8000 	str.w	r8, [sp]
 8002758:	a914      	add	r1, sp, #80	; 0x50
 800275a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800275c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002760:	f005 fc1e 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002764:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002768:	2201      	movs	r2, #1
 800276a:	2110      	movs	r1, #16
 800276c:	e014      	b.n	8002798 <ICM20602_IMU_calibration2+0x380>
 800276e:	bf00      	nop
 8002770:	eb1c432d 	.word	0xeb1c432d
 8002774:	3f2a36e2 	.word	0x3f2a36e2
 8002778:	0800e448 	.word	0x0800e448
 800277c:	411ce80a 	.word	0x411ce80a
 8002780:	20000d7c 	.word	0x20000d7c
 8002784:	20000dc8 	.word	0x20000dc8
 8002788:	3ff00000 	.word	0x3ff00000
 800278c:	200015d4 	.word	0x200015d4
 8002790:	20000d78 	.word	0x20000d78
 8002794:	20000dc4 	.word	0x20000dc4
 8002798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279c:	f004 fcac 	bl	80070f8 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 80027a0:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80027a4:	4bc4      	ldr	r3, [pc, #784]	; (8002ab8 <ICM20602_IMU_calibration2+0x6a0>)
 80027a6:	4ac5      	ldr	r2, [pc, #788]	; (8002abc <ICM20602_IMU_calibration2+0x6a4>)
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	fa0f f989 	sxth.w	r9, r9
 80027b0:	ee07 9a90 	vmov	s15, r9
 80027b4:	ee27 7a08 	vmul.f32	s14, s14, s16
 80027b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027bc:	2110      	movs	r1, #16
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80027be:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80027c6:	edc2 7a02 	vstr	s15, [r2, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027ca:	2200      	movs	r2, #0
 80027cc:	f004 fc94 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80027d0:	20c4      	movs	r0, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027d2:	f8cd 8000 	str.w	r8, [sp]
 80027d6:	2301      	movs	r3, #1
 80027d8:	aa15      	add	r2, sp, #84	; 0x54
 80027da:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80027dc:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027e0:	4620      	mov	r0, r4
 80027e2:	f005 fbdd 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027e6:	2301      	movs	r3, #1
 80027e8:	f8cd 8000 	str.w	r8, [sp]
 80027ec:	aa15      	add	r2, sp, #84	; 0x54
 80027ee:	a914      	add	r1, sp, #80	; 0x50
 80027f0:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80027f2:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027f6:	f005 fbd3 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027fa:	2201      	movs	r2, #1
 80027fc:	2110      	movs	r1, #16
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002802:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002806:	f004 fc77 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2110      	movs	r1, #16
 800280e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002812:	f004 fc71 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002816:	20c3      	movs	r0, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002818:	f8cd 8000 	str.w	r8, [sp]
 800281c:	2301      	movs	r3, #1
 800281e:	aa15      	add	r2, sp, #84	; 0x54
 8002820:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002822:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002826:	4620      	mov	r0, r4
 8002828:	f005 fbba 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800282c:	2301      	movs	r3, #1
 800282e:	f8cd 8000 	str.w	r8, [sp]
 8002832:	aa15      	add	r2, sp, #84	; 0x54
 8002834:	a914      	add	r1, sp, #80	; 0x50
 8002836:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002838:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800283c:	f005 fbb0 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002840:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002844:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002848:	2201      	movs	r2, #1
 800284a:	2110      	movs	r1, #16
 800284c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002850:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002854:	f004 fc50 	bl	80070f8 <HAL_GPIO_WritePin>
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002858:	ee07 9a90 	vmov	s15, r9
 800285c:	ed9b 7a00 	vldr	s14, [fp]
 8002860:	4b97      	ldr	r3, [pc, #604]	; (8002ac0 <ICM20602_IMU_calibration2+0x6a8>)
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002866:	2200      	movs	r2, #0
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002868:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800286c:	2110      	movs	r1, #16
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800286e:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002876:	f004 fc3f 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800287a:	20c6      	movs	r0, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800287c:	f8cd 8000 	str.w	r8, [sp]
 8002880:	2301      	movs	r3, #1
 8002882:	aa15      	add	r2, sp, #84	; 0x54
 8002884:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002886:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800288a:	4620      	mov	r0, r4
 800288c:	f005 fb88 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002890:	2301      	movs	r3, #1
 8002892:	f8cd 8000 	str.w	r8, [sp]
 8002896:	aa15      	add	r2, sp, #84	; 0x54
 8002898:	a914      	add	r1, sp, #80	; 0x50
 800289a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800289c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028a0:	f005 fb7e 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028a4:	2201      	movs	r2, #1
 80028a6:	2110      	movs	r1, #16
 80028a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80028ac:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028b0:	f004 fc22 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2110      	movs	r1, #16
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028bc:	f004 fc1c 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80028c0:	20c5      	movs	r0, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028c2:	f8cd 8000 	str.w	r8, [sp]
 80028c6:	2301      	movs	r3, #1
 80028c8:	aa15      	add	r2, sp, #84	; 0x54
 80028ca:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80028cc:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028d0:	4620      	mov	r0, r4
 80028d2:	f005 fb65 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028d6:	2301      	movs	r3, #1
 80028d8:	f8cd 8000 	str.w	r8, [sp]
 80028dc:	aa15      	add	r2, sp, #84	; 0x54
 80028de:	a914      	add	r1, sp, #80	; 0x50
 80028e0:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80028e2:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028e6:	f005 fb5b 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80028ea:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 80028ee:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028f2:	2201      	movs	r2, #1
 80028f4:	2110      	movs	r1, #16
 80028f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 80028fa:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028fe:	f004 fbfb 	bl	80070f8 <HAL_GPIO_WritePin>
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002902:	ee07 9a90 	vmov	s15, r9
 8002906:	ed9b 7a00 	vldr	s14, [fp]
 800290a:	4b6d      	ldr	r3, [pc, #436]	; (8002ac0 <ICM20602_IMU_calibration2+0x6a8>)
 800290c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002910:	2200      	movs	r2, #0
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002912:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002916:	2110      	movs	r1, #16
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002918:	edc3 7a01 	vstr	s15, [r3, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800291c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002920:	f004 fbea 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002924:	20c8      	movs	r0, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002926:	f8cd 8000 	str.w	r8, [sp]
 800292a:	2301      	movs	r3, #1
 800292c:	aa15      	add	r2, sp, #84	; 0x54
 800292e:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002930:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002934:	4620      	mov	r0, r4
 8002936:	f005 fb33 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800293a:	2301      	movs	r3, #1
 800293c:	f8cd 8000 	str.w	r8, [sp]
 8002940:	aa15      	add	r2, sp, #84	; 0x54
 8002942:	a914      	add	r1, sp, #80	; 0x50
 8002944:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002946:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800294a:	f005 fb29 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800294e:	2201      	movs	r2, #1
 8002950:	2110      	movs	r1, #16
 8002952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002956:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800295a:	f004 fbcd 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2110      	movs	r1, #16
 8002962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002966:	f004 fbc7 	bl	80070f8 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800296a:	20c7      	movs	r0, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800296c:	f8cd 8000 	str.w	r8, [sp]
 8002970:	2301      	movs	r3, #1
 8002972:	aa15      	add	r2, sp, #84	; 0x54
 8002974:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002976:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800297a:	4620      	mov	r0, r4
 800297c:	f005 fb10 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002980:	2301      	movs	r3, #1
 8002982:	f8cd 8000 	str.w	r8, [sp]
 8002986:	aa15      	add	r2, sp, #84	; 0x54
 8002988:	a914      	add	r1, sp, #80	; 0x50
 800298a:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800298c:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002990:	f005 fb06 	bl	8007fa0 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002994:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002998:	ea49 2908 	orr.w	r9, r9, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800299c:	2201      	movs	r2, #1
 800299e:	2110      	movs	r1, #16
 80029a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029a4:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029a8:	f004 fba6 	bl	80070f8 <HAL_GPIO_WritePin>
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029ac:	ee07 9a90 	vmov	s15, r9
 80029b0:	ed9b 7a00 	vldr	s14, [fp]
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <ICM20602_IMU_calibration2+0x6a8>)
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    	for(j = 0; j < 3; j++){
 80029ba:	3650      	adds	r6, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    	for(j = 0; j < 3; j++){
 80029c0:	3550      	adds	r5, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029c2:	edc3 7a02 	vstr	s15, [r3, #8]
    		acc_sum[j]  += acc[j];
 80029c6:	9b04      	ldr	r3, [sp, #16]
 80029c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80029cc:	9304      	str	r3, [sp, #16]
 80029ce:	9b02      	ldr	r3, [sp, #8]
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80029d8:	f7fd fdde 	bl	8000598 <__aeabi_f2d>
 80029dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80029e0:	f7fd fc7c 	bl	80002dc <__adddf3>
 80029e4:	9b02      	ldr	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 80029e6:	9a05      	ldr	r2, [sp, #20]
    		acc_sum[j]  += acc[j];
 80029e8:	4680      	mov	r8, r0
 80029ea:	4689      	mov	r9, r1
 80029ec:	e8e3 8902 	strd	r8, r9, [r3], #8
    		gyro_sum[j] += gyro[j];
 80029f0:	f852 0b04 	ldr.w	r0, [r2], #4
 80029f4:	9205      	str	r2, [sp, #20]
 80029f6:	9a03      	ldr	r2, [sp, #12]
    		acc_sum[j]  += acc[j];
 80029f8:	9302      	str	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 80029fa:	e9d2 2300 	ldrd	r2, r3, [r2]
 80029fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a02:	f7fd fdc9 	bl	8000598 <__aeabi_f2d>
 8002a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002a0a:	f7fd fc67 	bl	80002dc <__adddf3>
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a0e:	464b      	mov	r3, r9
    		gyro_sum[j] += gyro[j];
 8002a10:	4689      	mov	r9, r1
 8002a12:	9903      	ldr	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a14:	4642      	mov	r2, r8
    		gyro_sum[j] += gyro[j];
 8002a16:	4680      	mov	r8, r0
 8002a18:	e8e1 8902 	strd	r8, r9, [r1], #8
 8002a1c:	9103      	str	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a1e:	ec51 0b19 	vmov	r0, r1, d9
 8002a22:	f7fd fe11 	bl	8000648 <__aeabi_dmul>
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a26:	4642      	mov	r2, r8
 8002a28:	464b      	mov	r3, r9
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a2a:	4680      	mov	r8, r0
 8002a2c:	4689      	mov	r9, r1
 8002a2e:	e946 8914 	strd	r8, r9, [r6, #-80]	; 0x50
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a32:	ec51 0b19 	vmov	r0, r1, d9
 8002a36:	f7fd fe07 	bl	8000648 <__aeabi_dmul>
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002a3a:	e956 2304 	ldrd	r2, r3, [r6, #-16]
 8002a3e:	e946 2302 	strd	r2, r3, [r6, #-8]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002a42:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8002a46:	e945 2302 	strd	r2, r3, [r5, #-8]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002a4a:	e956 2306 	ldrd	r2, r3, [r6, #-24]
 8002a4e:	e946 2304 	strd	r2, r3, [r6, #-16]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002a52:	e955 2306 	ldrd	r2, r3, [r5, #-24]
 8002a56:	e945 2304 	strd	r2, r3, [r5, #-16]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002a5a:	e956 2308 	ldrd	r2, r3, [r6, #-32]
 8002a5e:	e946 2306 	strd	r2, r3, [r6, #-24]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002a62:	e955 2308 	ldrd	r2, r3, [r5, #-32]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a66:	e945 0114 	strd	r0, r1, [r5, #-80]	; 0x50
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002a6a:	e945 2306 	strd	r2, r3, [r5, #-24]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002a6e:	e956 230a 	ldrd	r2, r3, [r6, #-40]	; 0x28
 8002a72:	e946 2308 	strd	r2, r3, [r6, #-32]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002a76:	e955 230a 	ldrd	r2, r3, [r5, #-40]	; 0x28
 8002a7a:	e945 2308 	strd	r2, r3, [r5, #-32]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002a7e:	e956 230c 	ldrd	r2, r3, [r6, #-48]	; 0x30
 8002a82:	e946 230a 	strd	r2, r3, [r6, #-40]	; 0x28
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002a86:	e955 230c 	ldrd	r2, r3, [r5, #-48]	; 0x30
 8002a8a:	e945 230a 	strd	r2, r3, [r5, #-40]	; 0x28
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002a8e:	e956 230e 	ldrd	r2, r3, [r6, #-56]	; 0x38
 8002a92:	e946 230c 	strd	r2, r3, [r6, #-48]	; 0x30
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002a96:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 8002a9a:	e945 230c 	strd	r2, r3, [r5, #-48]	; 0x30
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002a9e:	e956 2310 	ldrd	r2, r3, [r6, #-64]	; 0x40
 8002aa2:	e946 230e 	strd	r2, r3, [r6, #-56]	; 0x38
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002aa6:	e955 2310 	ldrd	r2, r3, [r5, #-64]	; 0x40
 8002aaa:	e945 230e 	strd	r2, r3, [r5, #-56]	; 0x38
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002aae:	e956 2312 	ldrd	r2, r3, [r6, #-72]	; 0x48
 8002ab2:	e946 2310 	strd	r2, r3, [r6, #-64]	; 0x40
 8002ab6:	e005      	b.n	8002ac4 <ICM20602_IMU_calibration2+0x6ac>
 8002ab8:	20000d78 	.word	0x20000d78
 8002abc:	20000d7c 	.word	0x20000d7c
 8002ac0:	20000dc8 	.word	0x20000dc8
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002ac4:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 8002ac8:	e945 2310 	strd	r2, r3, [r5, #-64]	; 0x40
    	for(j = 0; j < 3; j++){
 8002acc:	9b02      	ldr	r3, [sp, #8]
 8002ace:	aa1c      	add	r2, sp, #112	; 0x70
 8002ad0:	4293      	cmp	r3, r2
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002ad2:	e946 8912 	strd	r8, r9, [r6, #-72]	; 0x48
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002ad6:	e945 0112 	strd	r0, r1, [r5, #-72]	; 0x48
    	for(j = 0; j < 3; j++){
 8002ada:	f47f ad4b 	bne.w	8002574 <ICM20602_IMU_calibration2+0x15c>
    	cal_len ++;
 8002ade:	ec55 4b1a 	vmov	r4, r5, d10
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <ICM20602_IMU_calibration2+0x7d0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	ee1a 0a10 	vmov	r0, s20
 8002aec:	f7fd fbf6 	bl	80002dc <__adddf3>
    	if(cal_len>5000){break;}
 8002af0:	a33b      	add	r3, pc, #236	; (adr r3, 8002be0 <ICM20602_IMU_calibration2+0x7c8>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
    	cal_len ++;
 8002af6:	4606      	mov	r6, r0
 8002af8:	460f      	mov	r7, r1
    	if(cal_len>5000){break;}
 8002afa:	ee1a 0a10 	vmov	r0, s20
 8002afe:	4629      	mov	r1, r5
 8002b00:	f7fe f832 	bl	8000b68 <__aeabi_dcmpgt>
    	cal_len ++;
 8002b04:	4634      	mov	r4, r6
 8002b06:	463d      	mov	r5, r7
    	if(cal_len>5000){break;}
 8002b08:	b988      	cbnz	r0, 8002b2e <ICM20602_IMU_calibration2+0x716>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002b0a:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8002b0e:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
    	cal_len ++;
 8002b12:	ec47 6b1a 	vmov	d10, r6, r7
 8002b16:	e4aa      	b.n	800246e <ICM20602_IMU_calibration2+0x56>
		|| cal_len < 500.0
 8002b18:	4b34      	ldr	r3, [pc, #208]	; (8002bec <ICM20602_IMU_calibration2+0x7d4>)
 8002b1a:	ec51 0b1a 	vmov	r0, r1, d10
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f7fe f804 	bl	8000b2c <__aeabi_dcmplt>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	f47f ad0f 	bne.w	8002548 <ICM20602_IMU_calibration2+0x130>
 8002b2a:	ec55 4b1a 	vmov	r4, r5, d10
    if(cal_len==500){NVIC_SystemReset();}
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <ICM20602_IMU_calibration2+0x7d4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	f7fd ffef 	bl	8000b18 <__aeabi_dcmpeq>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d143      	bne.n	8002bc6 <ICM20602_IMU_calibration2+0x7ae>
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	4929      	ldr	r1, [pc, #164]	; (8002be8 <ICM20602_IMU_calibration2+0x7d0>)
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b44:	4f2a      	ldr	r7, [pc, #168]	; (8002bf0 <ICM20602_IMU_calibration2+0x7d8>)
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002b46:	4e2b      	ldr	r6, [pc, #172]	; (8002bf4 <ICM20602_IMU_calibration2+0x7dc>)
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fd fea7 	bl	800089c <__aeabi_ddiv>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b4e:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002b52:	4604      	mov	r4, r0
 8002b54:	460d      	mov	r5, r1
 8002b56:	f7fd fd77 	bl	8000648 <__aeabi_dmul>
 8002b5a:	f7fe f86d 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002b5e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b62:	6038      	str	r0, [r7, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002b64:	4629      	mov	r1, r5
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7fd fd6e 	bl	8000648 <__aeabi_dmul>
 8002b6c:	f7fe f864 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b70:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002b74:	6030      	str	r0, [r6, #0]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b76:	4629      	mov	r1, r5
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7fd fd65 	bl	8000648 <__aeabi_dmul>
 8002b7e:	f7fe f85b 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002b82:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b86:	6078      	str	r0, [r7, #4]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7fd fd5c 	bl	8000648 <__aeabi_dmul>
 8002b90:	f7fe f852 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b94:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002b98:	6070      	str	r0, [r6, #4]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7fd fd53 	bl	8000648 <__aeabi_dmul>
 8002ba2:	f7fe f849 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002ba6:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002baa:	60b8      	str	r0, [r7, #8]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002bac:	4629      	mov	r1, r5
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f7fd fd4a 	bl	8000648 <__aeabi_dmul>
 8002bb4:	f7fe f840 	bl	8000c38 <__aeabi_d2f>
 8002bb8:	60b0      	str	r0, [r6, #8]
}
 8002bba:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002bbe:	ecbd 8b06 	vpop	{d8-d10}
 8002bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bc6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bca:	490b      	ldr	r1, [pc, #44]	; (8002bf8 <ICM20602_IMU_calibration2+0x7e0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <ICM20602_IMU_calibration2+0x7e4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bce:	68ca      	ldr	r2, [r1, #12]
 8002bd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002bdc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002bde:	e7fd      	b.n	8002bdc <ICM20602_IMU_calibration2+0x7c4>
 8002be0:	00000000 	.word	0x00000000
 8002be4:	40b38700 	.word	0x40b38700
 8002be8:	3ff00000 	.word	0x3ff00000
 8002bec:	407f4000 	.word	0x407f4000
 8002bf0:	20000db8 	.word	0x20000db8
 8002bf4:	20000e04 	.word	0x20000e04
 8002bf8:	e000ed00 	.word	0xe000ed00
 8002bfc:	05fa0004 	.word	0x05fa0004

08002c00 <p.constprop.0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void p(const char * format, ...)
 8002c00:	b40f      	push	{r0, r1, r2, r3}
 8002c02:	b530      	push	{r4, r5, lr}
{
  va_list args;
  va_start(args, format);
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c04:	4c08      	ldr	r4, [pc, #32]	; (8002c28 <p.constprop.0+0x28>)
void p(const char * format, ...)
 8002c06:	b083      	sub	sp, #12
  va_start(args, format);
 8002c08:	ad07      	add	r5, sp, #28
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c0a:	4620      	mov	r0, r4
  va_start(args, format);
 8002c0c:	9501      	str	r5, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c0e:	f7fd fb57 	bl	80002c0 <strlen>
 8002c12:	4906      	ldr	r1, [pc, #24]	; (8002c2c <p.constprop.0+0x2c>)
 8002c14:	462a      	mov	r2, r5
 8002c16:	4420      	add	r0, r4
 8002c18:	f008 fa62 	bl	800b0e0 <vsiprintf>
  va_end(args);
}
 8002c1c:	b003      	add	sp, #12
 8002c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c22:	b004      	add	sp, #16
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000138c 	.word	0x2000138c
 8002c2c:	0800e4e4 	.word	0x0800e4e4

08002c30 <p.constprop.1>:
void p(const char * format, ...)
 8002c30:	b40f      	push	{r0, r1, r2, r3}
 8002c32:	b530      	push	{r4, r5, lr}
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c34:	4c08      	ldr	r4, [pc, #32]	; (8002c58 <p.constprop.1+0x28>)
void p(const char * format, ...)
 8002c36:	b083      	sub	sp, #12
  va_start(args, format);
 8002c38:	ad07      	add	r5, sp, #28
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c3a:	4620      	mov	r0, r4
  va_start(args, format);
 8002c3c:	9501      	str	r5, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c3e:	f7fd fb3f 	bl	80002c0 <strlen>
 8002c42:	4906      	ldr	r1, [pc, #24]	; (8002c5c <p.constprop.1+0x2c>)
 8002c44:	462a      	mov	r2, r5
 8002c46:	4420      	add	r0, r4
 8002c48:	f008 fa4a 	bl	800b0e0 <vsiprintf>
}
 8002c4c:	b003      	add	sp, #12
 8002c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c52:	b004      	add	sp, #16
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	2000138c 	.word	0x2000138c
 8002c5c:	0800e45c 	.word	0x0800e45c

08002c60 <p.constprop.2>:
void p(const char * format, ...)
 8002c60:	b40f      	push	{r0, r1, r2, r3}
 8002c62:	b530      	push	{r4, r5, lr}
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c64:	4c08      	ldr	r4, [pc, #32]	; (8002c88 <p.constprop.2+0x28>)
void p(const char * format, ...)
 8002c66:	b083      	sub	sp, #12
  va_start(args, format);
 8002c68:	ad07      	add	r5, sp, #28
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c6a:	4620      	mov	r0, r4
  va_start(args, format);
 8002c6c:	9501      	str	r5, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c6e:	f7fd fb27 	bl	80002c0 <strlen>
 8002c72:	4906      	ldr	r1, [pc, #24]	; (8002c8c <p.constprop.2+0x2c>)
 8002c74:	462a      	mov	r2, r5
 8002c76:	4420      	add	r0, r4
 8002c78:	f008 fa32 	bl	800b0e0 <vsiprintf>
}
 8002c7c:	b003      	add	sp, #12
 8002c7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c82:	b004      	add	sp, #16
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	2000138c 	.word	0x2000138c
 8002c8c:	0800e490 	.word	0x0800e490

08002c90 <p.constprop.3>:
void p(const char * format, ...)
 8002c90:	b40f      	push	{r0, r1, r2, r3}
 8002c92:	b530      	push	{r4, r5, lr}
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c94:	4c08      	ldr	r4, [pc, #32]	; (8002cb8 <p.constprop.3+0x28>)
void p(const char * format, ...)
 8002c96:	b083      	sub	sp, #12
  va_start(args, format);
 8002c98:	ad07      	add	r5, sp, #28
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c9a:	4620      	mov	r0, r4
  va_start(args, format);
 8002c9c:	9501      	str	r5, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c9e:	f7fd fb0f 	bl	80002c0 <strlen>
 8002ca2:	4906      	ldr	r1, [pc, #24]	; (8002cbc <p.constprop.3+0x2c>)
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	4420      	add	r0, r4
 8002ca8:	f008 fa1a 	bl	800b0e0 <vsiprintf>
}
 8002cac:	b003      	add	sp, #12
 8002cae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cb2:	b004      	add	sp, #16
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000138c 	.word	0x2000138c
 8002cbc:	0800e4b4 	.word	0x0800e4b4

08002cc0 <p.constprop.4>:
void p(const char * format, ...)
 8002cc0:	b40f      	push	{r0, r1, r2, r3}
 8002cc2:	b530      	push	{r4, r5, lr}
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002cc4:	4c08      	ldr	r4, [pc, #32]	; (8002ce8 <p.constprop.4+0x28>)
void p(const char * format, ...)
 8002cc6:	b083      	sub	sp, #12
  va_start(args, format);
 8002cc8:	ad07      	add	r5, sp, #28
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002cca:	4620      	mov	r0, r4
  va_start(args, format);
 8002ccc:	9501      	str	r5, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002cce:	f7fd faf7 	bl	80002c0 <strlen>
 8002cd2:	4906      	ldr	r1, [pc, #24]	; (8002cec <p.constprop.4+0x2c>)
 8002cd4:	462a      	mov	r2, r5
 8002cd6:	4420      	add	r0, r4
 8002cd8:	f008 fa02 	bl	800b0e0 <vsiprintf>
}
 8002cdc:	b003      	add	sp, #12
 8002cde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ce2:	b004      	add	sp, #16
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	2000138c 	.word	0x2000138c
 8002cec:	0800e4d0 	.word	0x0800e4d0

08002cf0 <__io_putchar>:
void __io_putchar(uint8_t ch) { HAL_UART_Transmit(&hlpuart1, &ch, 1, 1); }
 8002cf0:	b500      	push	{lr}
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	4684      	mov	ip, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f10d 0107 	add.w	r1, sp, #7
 8002cfe:	4804      	ldr	r0, [pc, #16]	; (8002d10 <__io_putchar+0x20>)
 8002d00:	f88d c007 	strb.w	ip, [sp, #7]
 8002d04:	f007 f900 	bl	8009f08 <HAL_UART_Transmit>
 8002d08:	b003      	add	sp, #12
 8002d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d0e:	bf00      	nop
 8002d10:	20001850 	.word	0x20001850

08002d14 <HAL_GetTick>:
uint32_t HAL_GetTick(void) { return uwTick; }
 8002d14:	4b01      	ldr	r3, [pc, #4]	; (8002d1c <HAL_GetTick+0x8>)
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20001a00 	.word	0x20001a00

08002d20 <p>:
{
 8002d20:	b40f      	push	{r0, r1, r2, r3}
 8002d22:	b530      	push	{r4, r5, lr}
 8002d24:	b085      	sub	sp, #20
 8002d26:	ac08      	add	r4, sp, #32
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002d28:	4d08      	ldr	r5, [pc, #32]	; (8002d4c <p+0x2c>)
{
 8002d2a:	f854 1b04 	ldr.w	r1, [r4], #4
 8002d2e:	9101      	str	r1, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002d30:	4628      	mov	r0, r5
  va_start(args, format);
 8002d32:	9403      	str	r4, [sp, #12]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002d34:	f7fd fac4 	bl	80002c0 <strlen>
 8002d38:	9901      	ldr	r1, [sp, #4]
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4428      	add	r0, r5
 8002d3e:	f008 f9cf 	bl	800b0e0 <vsiprintf>
}
 8002d42:	b005      	add	sp, #20
 8002d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d48:	b004      	add	sp, #16
 8002d4a:	4770      	bx	lr
 8002d4c:	2000138c 	.word	0x2000138c

08002d50 <motor_test>:
{
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
}

void motor_test()
{
 8002d50:	b510      	push	{r4, lr}
  if (decode_SW(adc_sw_data) & 0b00000001) {
 8002d52:	4c34      	ldr	r4, [pc, #208]	; (8002e24 <motor_test+0xd4>)
 8002d54:	8820      	ldrh	r0, [r4, #0]
 8002d56:	f002 fc47 	bl	80055e8 <decode_SW>
 8002d5a:	07c0      	lsls	r0, r0, #31
 8002d5c:	d517      	bpl.n	8002d8e <motor_test+0x3e>
    omni_move(2.0, 0.0, 0.0, 2.0);  // fwd
 8002d5e:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8002e28 <motor_test+0xd8>
 8002d62:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002d66:	eef0 0a41 	vmov.f32	s1, s2
 8002d6a:	eeb0 0a61 	vmov.f32	s0, s3
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
    omni_move(-2.0, 0.0, 0.0, 2.0);  // back
 8002d6e:	f001 febf 	bl	8004af0 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002d72:	482e      	ldr	r0, [pc, #184]	; (8002e2c <motor_test+0xdc>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d7a:	f004 f9bd 	bl	80070f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else {
    omni_move(0.0, 0.0, 0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
  }
  actuator_motor5(0.0, 0.0);
 8002d7e:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8002e28 <motor_test+0xd8>
}
 8002d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor5(0.0, 0.0);
 8002d86:	eeb0 0a60 	vmov.f32	s0, s1
 8002d8a:	f7fe b9a3 	b.w	80010d4 <actuator_motor5>
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
 8002d8e:	8820      	ldrh	r0, [r4, #0]
 8002d90:	f002 fc2a 	bl	80055e8 <decode_SW>
 8002d94:	0781      	lsls	r1, r0, #30
 8002d96:	d508      	bpl.n	8002daa <motor_test+0x5a>
    omni_move(-2.0, 0.0, 0.0, 2.0);  // back
 8002d98:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8002e28 <motor_test+0xd8>
 8002d9c:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002da0:	eef0 0a41 	vmov.f32	s1, s2
 8002da4:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
 8002da8:	e7e1      	b.n	8002d6e <motor_test+0x1e>
  } else if (decode_SW(adc_sw_data) & 0b00000100) {
 8002daa:	8820      	ldrh	r0, [r4, #0]
 8002dac:	f002 fc1c 	bl	80055e8 <decode_SW>
 8002db0:	0742      	lsls	r2, r0, #29
 8002db2:	d40d      	bmi.n	8002dd0 <motor_test+0x80>
  } else if (decode_SW(adc_sw_data) & 0b00001000) {
 8002db4:	8820      	ldrh	r0, [r4, #0]
 8002db6:	f002 fc17 	bl	80055e8 <decode_SW>
 8002dba:	0703      	lsls	r3, r0, #28
 8002dbc:	d511      	bpl.n	8002de2 <motor_test+0x92>
    omni_move(0.0, 2.0, 0.0, 2.0);  // right
 8002dbe:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8002e28 <motor_test+0xd8>
 8002dc2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002dc6:	eef0 0a61 	vmov.f32	s1, s3
 8002dca:	eeb0 0a41 	vmov.f32	s0, s2
 8002dce:	e7ce      	b.n	8002d6e <motor_test+0x1e>
    omni_move(0.0, -2.0, 0.0, 2.0);  // left
 8002dd0:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002e28 <motor_test+0xd8>
 8002dd4:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002dd8:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 8002ddc:	eeb0 0a41 	vmov.f32	s0, s2
 8002de0:	e7c5      	b.n	8002d6e <motor_test+0x1e>
  } else if (decode_SW(adc_sw_data) & 0b00010000) {
 8002de2:	8820      	ldrh	r0, [r4, #0]
 8002de4:	f002 fc00 	bl	80055e8 <decode_SW>
 8002de8:	f010 0410 	ands.w	r4, r0, #16
 8002dec:	d008      	beq.n	8002e00 <motor_test+0xb0>
    omni_move(0.0, 0.0, 20.0, 2.0);  // spin
 8002dee:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002e28 <motor_test+0xd8>
 8002df2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002df6:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8002dfa:	eeb0 0a60 	vmov.f32	s0, s1
 8002dfe:	e7b6      	b.n	8002d6e <motor_test+0x1e>
    omni_move(0.0, 0.0, 0.0, 0.0);
 8002e00:	eddf 1a09 	vldr	s3, [pc, #36]	; 8002e28 <motor_test+0xd8>
 8002e04:	eeb0 1a61 	vmov.f32	s2, s3
 8002e08:	eef0 0a61 	vmov.f32	s1, s3
 8002e0c:	eeb0 0a61 	vmov.f32	s0, s3
 8002e10:	f001 fe6e 	bl	8004af0 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <motor_test+0xdc>)
 8002e16:	4622      	mov	r2, r4
 8002e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e1c:	f004 f96c 	bl	80070f8 <HAL_GPIO_WritePin>
 8002e20:	e7ad      	b.n	8002d7e <motor_test+0x2e>
 8002e22:	bf00      	nop
 8002e24:	20000e2c 	.word	0x20000e2c
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	48000800 	.word	0x48000800

08002e30 <kicker_test>:
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
}

void kicker_test(bool manual_mode)
{
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static bool dribbler_up = false;

  if (kick_state != 0) {
 8002e32:	4c59      	ldr	r4, [pc, #356]	; (8002f98 <kicker_test+0x168>)
 8002e34:	8823      	ldrh	r3, [r4, #0]
 8002e36:	b29b      	uxth	r3, r3
{
 8002e38:	4605      	mov	r5, r0
  if (kick_state != 0) {
 8002e3a:	b13b      	cbz	r3, 8002e4c <kicker_test+0x1c>
    if (kick_state > MAIN_LOOP_CYCLE / 2) {
 8002e3c:	8823      	ldrh	r3, [r4, #0]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2bfa      	cmp	r3, #250	; 0xfa
 8002e42:	d829      	bhi.n	8002e98 <kicker_test+0x68>
      if (can_raw.ball_detection[0] == 0) {
        kick_state = 0;
      }
    } else {
      kick_state++;
 8002e44:	8823      	ldrh	r3, [r4, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	8023      	strh	r3, [r4, #0]
    }
  }

  if (dribbler_up == false && decode_SW(adc_sw_data) & 0b00000100) {
 8002e4c:	4f53      	ldr	r7, [pc, #332]	; (8002f9c <kicker_test+0x16c>)
 8002e4e:	4e54      	ldr	r6, [pc, #336]	; (8002fa0 <kicker_test+0x170>)
 8002e50:	783b      	ldrb	r3, [r7, #0]
 8002e52:	b35b      	cbz	r3, 8002eac <kicker_test+0x7c>
    dribbler_up = true;
    actuator_dribbler_down();
  } else if (dribbler_up == true && decode_SW(adc_sw_data) & 0b00001000) {
 8002e54:	8830      	ldrh	r0, [r6, #0]
 8002e56:	f002 fbc7 	bl	80055e8 <decode_SW>
 8002e5a:	0701      	lsls	r1, r0, #28
 8002e5c:	d461      	bmi.n	8002f22 <kicker_test+0xf2>
    dribbler_up = false;
    actuator_dribbler_up();
  }

  if (decode_SW(adc_sw_data) & 0b00010000) {
 8002e5e:	8830      	ldrh	r0, [r6, #0]
 8002e60:	f002 fbc2 	bl	80055e8 <decode_SW>
 8002e64:	06c3      	lsls	r3, r0, #27
 8002e66:	d52e      	bpl.n	8002ec6 <kicker_test+0x96>
    if (!manual_mode) {
 8002e68:	2d00      	cmp	r5, #0
 8002e6a:	d048      	beq.n	8002efe <kicker_test+0xce>
      actuator_motor5(0.5, 1.0);
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002e6c:	484d      	ldr	r0, [pc, #308]	; (8002fa4 <kicker_test+0x174>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e74:	f004 f940 	bl	80070f8 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
      if (kick_state == 0) {
 8002e78:	8821      	ldrh	r1, [r4, #0]
 8002e7a:	b289      	uxth	r1, r1
 8002e7c:	2900      	cmp	r1, #0
 8002e7e:	d067      	beq.n	8002f50 <kicker_test+0x120>
    actuator_motor5(0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
    actuator_kicker(1, 1);  // charge enable
    actuator_kicker_voltage(150.0);
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
 8002e80:	eddf 1a49 	vldr	s3, [pc, #292]	; 8002fa8 <kicker_test+0x178>
}
 8002e84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 8002e88:	eeb0 1a61 	vmov.f32	s2, s3
 8002e8c:	eef0 0a61 	vmov.f32	s1, s3
 8002e90:	eeb0 0a61 	vmov.f32	s0, s3
 8002e94:	f001 be2c 	b.w	8004af0 <omni_move>
      if (can_raw.ball_detection[0] == 0) {
 8002e98:	4b44      	ldr	r3, [pc, #272]	; (8002fac <kicker_test+0x17c>)
 8002e9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0d3      	beq.n	8002e4a <kicker_test+0x1a>
  if (dribbler_up == false && decode_SW(adc_sw_data) & 0b00000100) {
 8002ea2:	4f3e      	ldr	r7, [pc, #248]	; (8002f9c <kicker_test+0x16c>)
 8002ea4:	4e3e      	ldr	r6, [pc, #248]	; (8002fa0 <kicker_test+0x170>)
 8002ea6:	783b      	ldrb	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1d3      	bne.n	8002e54 <kicker_test+0x24>
 8002eac:	8830      	ldrh	r0, [r6, #0]
 8002eae:	f002 fb9b 	bl	80055e8 <decode_SW>
 8002eb2:	0742      	lsls	r2, r0, #29
 8002eb4:	d46b      	bmi.n	8002f8e <kicker_test+0x15e>
  } else if (dribbler_up == true && decode_SW(adc_sw_data) & 0b00001000) {
 8002eb6:	783b      	ldrb	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1cb      	bne.n	8002e54 <kicker_test+0x24>
  if (decode_SW(adc_sw_data) & 0b00010000) {
 8002ebc:	8830      	ldrh	r0, [r6, #0]
 8002ebe:	f002 fb93 	bl	80055e8 <decode_SW>
 8002ec2:	06c3      	lsls	r3, r0, #27
 8002ec4:	d4d0      	bmi.n	8002e68 <kicker_test+0x38>
  } else if (decode_SW(adc_sw_data) & 0b00000010) {
 8002ec6:	8830      	ldrh	r0, [r6, #0]
 8002ec8:	f002 fb8e 	bl	80055e8 <decode_SW>
 8002ecc:	f010 0602 	ands.w	r6, r0, #2
 8002ed0:	d048      	beq.n	8002f64 <kicker_test+0x134>
    if (!manual_mode) {
 8002ed2:	b35d      	cbz	r5, 8002f2c <kicker_test+0xfc>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002ed4:	4833      	ldr	r0, [pc, #204]	; (8002fa4 <kicker_test+0x174>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002edc:	f004 f90c 	bl	80070f8 <HAL_GPIO_WritePin>
      if (kick_state == 0) {
 8002ee0:	8823      	ldrh	r3, [r4, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1cb      	bne.n	8002e80 <kicker_test+0x50>
        actuator_kicker(2, 1);  // chip
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2002      	movs	r0, #2
 8002eec:	f7fe f93e 	bl	800116c <actuator_kicker>
        actuator_kicker(3, 255);
 8002ef0:	21ff      	movs	r1, #255	; 0xff
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	f7fe f93a 	bl	800116c <actuator_kicker>
        kick_state = 1;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	8023      	strh	r3, [r4, #0]
 8002efc:	e7c0      	b.n	8002e80 <kicker_test+0x50>
      actuator_motor5(0.5, 1.0);
 8002efe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f02:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002f06:	f7fe f8e5 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002f0a:	4826      	ldr	r0, [pc, #152]	; (8002fa4 <kicker_test+0x174>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f12:	f004 f8f1 	bl	80070f8 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <kicker_test+0x17c>)
 8002f18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d1af      	bne.n	8002e80 <kicker_test+0x50>
 8002f20:	e7aa      	b.n	8002e78 <kicker_test+0x48>
    dribbler_up = false;
 8002f22:	2300      	movs	r3, #0
 8002f24:	703b      	strb	r3, [r7, #0]
    actuator_dribbler_up();
 8002f26:	f7fe f8f5 	bl	8001114 <actuator_dribbler_up>
 8002f2a:	e798      	b.n	8002e5e <kicker_test+0x2e>
      actuator_motor5(0.5, 1.0);
 8002f2c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f30:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002f34:	f7fe f8ce 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8002f38:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <kicker_test+0x174>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f40:	f004 f8da 	bl	80070f8 <HAL_GPIO_WritePin>
    if (can_raw.ball_detection[0] == 1 || manual_mode) {
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <kicker_test+0x17c>)
 8002f46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d198      	bne.n	8002e80 <kicker_test+0x50>
 8002f4e:	e7c7      	b.n	8002ee0 <kicker_test+0xb0>
        actuator_kicker(2, 0);  // straight
 8002f50:	2002      	movs	r0, #2
 8002f52:	f7fe f90b 	bl	800116c <actuator_kicker>
        actuator_kicker(3, 100);
 8002f56:	2164      	movs	r1, #100	; 0x64
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f7fe f907 	bl	800116c <actuator_kicker>
        kick_state = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	8023      	strh	r3, [r4, #0]
 8002f62:	e78d      	b.n	8002e80 <kicker_test+0x50>
    actuator_motor5(0.0, 0.0);
 8002f64:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002fa8 <kicker_test+0x178>
 8002f68:	eeb0 0a60 	vmov.f32	s0, s1
 8002f6c:	f7fe f8b2 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8002f70:	4632      	mov	r2, r6
 8002f72:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <kicker_test+0x174>)
 8002f74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f78:	f004 f8be 	bl	80070f8 <HAL_GPIO_WritePin>
    actuator_kicker(1, 1);  // charge enable
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4608      	mov	r0, r1
 8002f80:	f7fe f8f4 	bl	800116c <actuator_kicker>
    actuator_kicker_voltage(150.0);
 8002f84:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002fb0 <kicker_test+0x180>
 8002f88:	f7fe f8e8 	bl	800115c <actuator_kicker_voltage>
 8002f8c:	e778      	b.n	8002e80 <kicker_test+0x50>
    dribbler_up = true;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	703b      	strb	r3, [r7, #0]
    actuator_dribbler_down();
 8002f92:	f7fe f8d1 	bl	8001138 <actuator_dribbler_down>
 8002f96:	e762      	b.n	8002e5e <kicker_test+0x2e>
 8002f98:	20000f88 	.word	0x20000f88
 8002f9c:	20000f74 	.word	0x20000f74
 8002fa0:	20000e2c 	.word	0x20000e2c
 8002fa4:	48000800 	.word	0x48000800
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	20000e84 	.word	0x20000e84
 8002fb0:	43160000 	.word	0x43160000

08002fb4 <speed_control>:
  // omega = 0;
  // out : omega
}

void speed_control()
{
 8002fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb8:	ed2d 8b10 	vpush	{d8-d15}
  // グローバル→ローカル座標系

  target.local_velocity[0] = target.velocity[0] * cos(-imu.yaw_angle_rad) - target.velocity[1] * sin(-imu.yaw_angle_rad);
 8002fbc:	f8df b3c0 	ldr.w	fp, [pc, #960]	; 8003380 <speed_control+0x3cc>
  target.local_velocity[1] = target.velocity[0] * sin(-imu.yaw_angle_rad) + target.velocity[1] * cos(-imu.yaw_angle_rad);

  diff_global[0] = omni.odom[0] - target.position[0];
 8002fc0:	f8df 93c0 	ldr.w	r9, [pc, #960]	; 8003384 <speed_control+0x3d0>
  target.local_velocity[0] = target.velocity[0] * cos(-imu.yaw_angle_rad) - target.velocity[1] * sin(-imu.yaw_angle_rad);
 8002fc4:	f8db 0010 	ldr.w	r0, [fp, #16]
  diff_global[0] = omni.odom[0] - target.position[0];
 8002fc8:	4ce6      	ldr	r4, [pc, #920]	; (8003364 <speed_control+0x3b0>)
  diff_global[1] = omni.odom[1] - target.position[1];

  diff_local[0] = diff_global[0] * cos(-imu.yaw_angle_rad) - diff_global[1] * sin(-imu.yaw_angle_rad);
 8002fca:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 8003388 <speed_control+0x3d4>
  diff_local[1] = diff_global[0] * sin(-imu.yaw_angle_rad) + diff_global[1] * cos(-imu.yaw_angle_rad);

  // 500Hz, m/s -> m / cycle
  for (int i = 0; i < 2; i++) {
    // 加速度制限
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002fce:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 800338c <speed_control+0x3d8>
{
 8002fd2:	b083      	sub	sp, #12
  target.local_velocity[0] = target.velocity[0] * cos(-imu.yaw_angle_rad) - target.velocity[1] * sin(-imu.yaw_angle_rad);
 8002fd4:	f7fd fae0 	bl	8000598 <__aeabi_f2d>
 8002fd8:	4be3      	ldr	r3, [pc, #908]	; (8003368 <speed_control+0x3b4>)
 8002fda:	689d      	ldr	r5, [r3, #8]
 8002fdc:	ec41 0b1b 	vmov	d11, r0, r1
 8002fe0:	f085 4000 	eor.w	r0, r5, #2147483648	; 0x80000000
 8002fe4:	f7fd fad8 	bl	8000598 <__aeabi_f2d>
 8002fe8:	ec41 0b10 	vmov	d0, r0, r1
 8002fec:	ec41 0b18 	vmov	d8, r0, r1
 8002ff0:	f00a f97a 	bl	800d2e8 <cos>
 8002ff4:	f8db 0014 	ldr.w	r0, [fp, #20]
 8002ff8:	eeb0 aa40 	vmov.f32	s20, s0
 8002ffc:	eef0 aa60 	vmov.f32	s21, s1
 8003000:	eeb0 fa40 	vmov.f32	s30, s0
 8003004:	eef0 fa60 	vmov.f32	s31, s1
 8003008:	f7fd fac6 	bl	8000598 <__aeabi_f2d>
 800300c:	4606      	mov	r6, r0
 800300e:	4628      	mov	r0, r5
 8003010:	460f      	mov	r7, r1
 8003012:	f7fd fac1 	bl	8000598 <__aeabi_f2d>
 8003016:	ec41 0b10 	vmov	d0, r0, r1
 800301a:	ec41 0b19 	vmov	d9, r0, r1
 800301e:	f00a f9b7 	bl	800d390 <sin>
 8003022:	ec53 2b1a 	vmov	r2, r3, d10
 8003026:	eeb0 ea40 	vmov.f32	s28, s0
 800302a:	eef0 ea60 	vmov.f32	s29, s1
 800302e:	ec51 0b1b 	vmov	r0, r1, d11
 8003032:	f7fd fb09 	bl	8000648 <__aeabi_dmul>
 8003036:	ec53 2b1e 	vmov	r2, r3, d14
 800303a:	ec41 0b1c 	vmov	d12, r0, r1
 800303e:	4630      	mov	r0, r6
 8003040:	4639      	mov	r1, r7
 8003042:	f7fd fb01 	bl	8000648 <__aeabi_dmul>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	ec51 0b1c 	vmov	r0, r1, d12
 800304e:	f7fd f945 	bl	80002dc <__adddf3>
 8003052:	f7fd fdf1 	bl	8000c38 <__aeabi_d2f>
  target.local_velocity[1] = target.velocity[0] * sin(-imu.yaw_angle_rad) + target.velocity[1] * cos(-imu.yaw_angle_rad);
 8003056:	eeb0 0a48 	vmov.f32	s0, s16
 800305a:	eef0 0a68 	vmov.f32	s1, s17
  target.local_velocity[0] = target.velocity[0] * cos(-imu.yaw_angle_rad) - target.velocity[1] * sin(-imu.yaw_angle_rad);
 800305e:	f8cb 0018 	str.w	r0, [fp, #24]
 8003062:	ee08 0a10 	vmov	s16, r0
  target.local_velocity[1] = target.velocity[0] * sin(-imu.yaw_angle_rad) + target.velocity[1] * cos(-imu.yaw_angle_rad);
 8003066:	f00a f993 	bl	800d390 <sin>
 800306a:	ec51 0b1b 	vmov	r0, r1, d11
 800306e:	eeb0 da40 	vmov.f32	s26, s0
 8003072:	eef0 da60 	vmov.f32	s27, s1
 8003076:	ec53 2b10 	vmov	r2, r3, d0
 800307a:	ed8d 0b00 	vstr	d0, [sp]
 800307e:	f7fd fae3 	bl	8000648 <__aeabi_dmul>
 8003082:	4632      	mov	r2, r6
 8003084:	463b      	mov	r3, r7
 8003086:	4606      	mov	r6, r0
 8003088:	460f      	mov	r7, r1
 800308a:	ec51 0b1a 	vmov	r0, r1, d10
 800308e:	f7fd fadb 	bl	8000648 <__aeabi_dmul>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4630      	mov	r0, r6
 8003098:	4639      	mov	r1, r7
 800309a:	f7fd f91f 	bl	80002dc <__adddf3>
 800309e:	f7fd fdcb 	bl	8000c38 <__aeabi_d2f>
  diff_global[0] = omni.odom[0] - target.position[0];
 80030a2:	ed99 ba06 	vldr	s22, [r9, #24]
 80030a6:	eddb aa00 	vldr	s21, [fp]
  diff_global[1] = omni.odom[1] - target.position[1];
 80030aa:	edd9 ba07 	vldr	s23, [r9, #28]
 80030ae:	ed9b aa01 	vldr	s20, [fp, #4]
  target.local_velocity[1] = target.velocity[0] * sin(-imu.yaw_angle_rad) + target.velocity[1] * cos(-imu.yaw_angle_rad);
 80030b2:	f8cb 001c 	str.w	r0, [fp, #28]
  diff_global[0] = omni.odom[0] - target.position[0];
 80030b6:	ee3b 7a6a 	vsub.f32	s14, s22, s21
  diff_global[1] = omni.odom[1] - target.position[1];
 80030ba:	ee7b 7aca 	vsub.f32	s15, s23, s20
  diff_global[0] = omni.odom[0] - target.position[0];
 80030be:	ed84 7a00 	vstr	s14, [r4]
  diff_global[1] = omni.odom[1] - target.position[1];
 80030c2:	edc4 7a01 	vstr	s15, [r4, #4]
  target.local_velocity[1] = target.velocity[0] * sin(-imu.yaw_angle_rad) + target.velocity[1] * cos(-imu.yaw_angle_rad);
 80030c6:	ee08 0a90 	vmov	s17, r0
  diff_local[0] = diff_global[0] * cos(-imu.yaw_angle_rad) - diff_global[1] * sin(-imu.yaw_angle_rad);
 80030ca:	6820      	ldr	r0, [r4, #0]
 80030cc:	f7fd fa64 	bl	8000598 <__aeabi_f2d>
 80030d0:	ec53 2b1f 	vmov	r2, r3, d15
 80030d4:	f7fd fab8 	bl	8000648 <__aeabi_dmul>
 80030d8:	4606      	mov	r6, r0
 80030da:	6860      	ldr	r0, [r4, #4]
 80030dc:	460f      	mov	r7, r1
 80030de:	f7fd fa5b 	bl	8000598 <__aeabi_f2d>
 80030e2:	ec53 2b1e 	vmov	r2, r3, d14
 80030e6:	f7fd faaf 	bl	8000648 <__aeabi_dmul>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4630      	mov	r0, r6
 80030f0:	4639      	mov	r1, r7
 80030f2:	f7fd f8f3 	bl	80002dc <__adddf3>
 80030f6:	f7fd fd9f 	bl	8000c38 <__aeabi_d2f>
 80030fa:	f8c8 0000 	str.w	r0, [r8]
  diff_local[1] = diff_global[0] * sin(-imu.yaw_angle_rad) + diff_global[1] * cos(-imu.yaw_angle_rad);
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	6865      	ldr	r5, [r4, #4]
 8003102:	f7fd fa49 	bl	8000598 <__aeabi_f2d>
 8003106:	ec53 2b1d 	vmov	r2, r3, d13
 800310a:	f7fd fa9d 	bl	8000648 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	4628      	mov	r0, r5
 8003112:	4614      	mov	r4, r2
 8003114:	460d      	mov	r5, r1
 8003116:	f7fd fa3f 	bl	8000598 <__aeabi_f2d>
 800311a:	ec53 2b1f 	vmov	r2, r3, d15
 800311e:	f7fd fa93 	bl	8000648 <__aeabi_dmul>
 8003122:	460b      	mov	r3, r1
 8003124:	4602      	mov	r2, r0
 8003126:	4629      	mov	r1, r5
 8003128:	4620      	mov	r0, r4
 800312a:	f7fd f8d7 	bl	80002dc <__adddf3>
 800312e:	f7fd fd83 	bl	8000c38 <__aeabi_d2f>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 8003132:	eddb 7a0a 	vldr	s15, [fp, #40]	; 0x28
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8003136:	4b8d      	ldr	r3, [pc, #564]	; (800336c <speed_control+0x3b8>)
  diff_local[1] = diff_global[0] * sin(-imu.yaw_angle_rad) + diff_global[1] * cos(-imu.yaw_angle_rad);
 8003138:	f8c8 0004 	str.w	r0, [r8, #4]
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 800313c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      output.accel_limit[i] = ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE;
    }

    // 減速方向は摩擦を使えるので制動力上げる
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8003144:	eeb0 7ac8 	vabs.f32	s14, s16
 8003148:	eef0 6ae7 	vabs.f32	s13, s15
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 800314c:	f8ca 3014 	str.w	r3, [sl, #20]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 8003150:	eeb4 7ae6 	vcmpe.f32	s14, s13
      output.accel_limit[i] = ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE;
 8003154:	bf44      	itt	mi
 8003156:	4b86      	ldrmi	r3, [pc, #536]	; (8003370 <speed_control+0x3bc>)
 8003158:	f8ca 3014 	strmi.w	r3, [sl, #20]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	d507      	bpl.n	8003172 <speed_control+0x1be>
      output.accel_limit[i] *= 3;
 8003162:	ed9a 7a05 	vldr	s14, [sl, #20]
 8003166:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800316a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800316e:	ed8a 7a05 	vstr	s14, [sl, #20]
    }

    // 目標移動位置を追い越してしまっている場合。速度ではないのはノイズが多いから
    // ノイズ対策であまりodom情報でアップデートはできないが、最大加速度側を増やして追従する
    // local_velocityに対して追従するlocal_velocity_currentの追従を早める
    if (diff_local[i] > 0 && target.local_velocity[i] > 0) {
 8003172:	ed98 7a00 	vldr	s14, [r8]
 8003176:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	dd0c      	ble.n	800319a <speed_control+0x1e6>
 8003180:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	dd07      	ble.n	800319a <speed_control+0x1e6>
      output.accel_limit[i] *= 5;
 800318a:	ed9a 7a05 	vldr	s14, [sl, #20]
 800318e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003192:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003196:	ed8a 7a05 	vstr	s14, [sl, #20]
    }
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 800319a:	ed98 7a00 	vldr	s14, [r8]
 800319e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	f100 8199 	bmi.w	80034dc <speed_control+0x528>
      output.accel_limit[i] *= 5;
    }

    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 80031aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80031ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 80031b2:	ed9a 7a05 	vldr	s14, [sl, #20]
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 80031b6:	f280 8162 	bge.w	800347e <speed_control+0x4ca>
        target.local_velocity_current[i] = target.local_velocity[i];
      } else {
        target.local_velocity_current[i] += output.accel_limit[i];
      }
    } else {
      if (target.local_velocity_current[i] - output.accel_limit[i] < target.local_velocity[i]) {
 80031ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80031be:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	f340 8141 	ble.w	800344c <speed_control+0x498>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 80031ca:	ee18 0a10 	vmov	r0, s16
 80031ce:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 80031d2:	4b66      	ldr	r3, [pc, #408]	; (800336c <speed_control+0x3b8>)
        target.local_velocity_current[i] += output.accel_limit[i];
 80031d4:	f8cb 0028 	str.w	r0, [fp, #40]	; 0x28
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 80031d8:	eeb0 7ae8 	vabs.f32	s14, s17
 80031dc:	eef0 6ae7 	vabs.f32	s13, s15
 80031e0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.accel_limit[i] = ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 80031e8:	f8ca 3018 	str.w	r3, [sl, #24]
    if (fabs(target.local_velocity[i]) < fabs(target.local_velocity_current[i])) {
 80031ec:	d507      	bpl.n	80031fe <speed_control+0x24a>
      output.accel_limit[i] *= 3;
 80031ee:	ed9a 7a06 	vldr	s14, [sl, #24]
 80031f2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80031f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80031fa:	ed8a 7a06 	vstr	s14, [sl, #24]
    if (diff_local[i] > 0 && target.local_velocity[i] > 0) {
 80031fe:	ed98 7a01 	vldr	s14, [r8, #4]
 8003202:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320a:	dd0c      	ble.n	8003226 <speed_control+0x272>
 800320c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	dd07      	ble.n	8003226 <speed_control+0x272>
      output.accel_limit[i] *= 5;
 8003216:	ed9a 7a06 	vldr	s14, [sl, #24]
 800321a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800321e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003222:	ed8a 7a06 	vstr	s14, [sl, #24]
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 8003226:	ed98 7a01 	vldr	s14, [r8, #4]
 800322a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003232:	f100 8144 	bmi.w	80034be <speed_control+0x50a>
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8003236:	eef4 8ae7 	vcmpe.f32	s17, s15
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 800323e:	ed9a 7a06 	vldr	s14, [sl, #24]
    if (target.local_velocity[i] >= target.local_velocity_current[i]) {
 8003242:	f2c0 812b 	blt.w	800349c <speed_control+0x4e8>
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 8003246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800324a:	eef4 8ac7 	vcmpe.f32	s17, s14
 800324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003252:	f100 8131 	bmi.w	80034b8 <speed_control+0x504>
        target.local_velocity_current[i] += output.accel_limit[i];
 8003256:	ed9a 7a06 	vldr	s14, [sl, #24]
 800325a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800325e:	ee17 4a90 	vmov	r4, s15
 8003262:	f8cb 402c 	str.w	r4, [fp, #44]	; 0x2c
      }
    }
  }

  // ローカル→グローバル座標系
  output.local_velocity_current[0] = target.local_velocity_current[0] * cos(imu.yaw_angle_rad) - target.local_velocity_current[1] * sin(imu.yaw_angle_rad);
 8003266:	f7fd f997 	bl	8000598 <__aeabi_f2d>
 800326a:	eeb0 0a49 	vmov.f32	s0, s18
 800326e:	eef0 0a69 	vmov.f32	s1, s19
 8003272:	4606      	mov	r6, r0
 8003274:	460f      	mov	r7, r1
 8003276:	f00a f837 	bl	800d2e8 <cos>
 800327a:	4620      	mov	r0, r4
 800327c:	eeb0 ca40 	vmov.f32	s24, s0
 8003280:	eef0 ca60 	vmov.f32	s25, s1
 8003284:	f7fd f988 	bl	8000598 <__aeabi_f2d>
 8003288:	ec53 2b1c 	vmov	r2, r3, d12
 800328c:	4604      	mov	r4, r0
 800328e:	460d      	mov	r5, r1
 8003290:	4630      	mov	r0, r6
 8003292:	4639      	mov	r1, r7
 8003294:	f7fd f9d8 	bl	8000648 <__aeabi_dmul>
 8003298:	4622      	mov	r2, r4
 800329a:	462b      	mov	r3, r5
 800329c:	ec41 0b1d 	vmov	d13, r0, r1
 80032a0:	ec51 0b1e 	vmov	r0, r1, d14
 80032a4:	f7fd f9d0 	bl	8000648 <__aeabi_dmul>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	ec51 0b1d 	vmov	r0, r1, d13
 80032b0:	f7fd f812 	bl	80002d8 <__aeabi_dsub>
 80032b4:	f7fd fcc0 	bl	8000c38 <__aeabi_d2f>
  output.local_velocity_current[1] = target.local_velocity_current[0] * sin(imu.yaw_angle_rad) + target.local_velocity_current[1] * cos(imu.yaw_angle_rad);
 80032b8:	4632      	mov	r2, r6
 80032ba:	463b      	mov	r3, r7
  output.local_velocity_current[0] = target.local_velocity_current[0] * cos(imu.yaw_angle_rad) - target.local_velocity_current[1] * sin(imu.yaw_angle_rad);
 80032bc:	f8ca 0008 	str.w	r0, [sl, #8]
  output.local_velocity_current[1] = target.local_velocity_current[0] * sin(imu.yaw_angle_rad) + target.local_velocity_current[1] * cos(imu.yaw_angle_rad);
 80032c0:	ec51 0b1e 	vmov	r0, r1, d14
 80032c4:	f7fd f9c0 	bl	8000648 <__aeabi_dmul>
 80032c8:	4622      	mov	r2, r4
 80032ca:	462b      	mov	r3, r5
 80032cc:	4604      	mov	r4, r0
 80032ce:	460d      	mov	r5, r1
 80032d0:	ec51 0b1c 	vmov	r0, r1, d12
 80032d4:	f7fd f9b8 	bl	8000648 <__aeabi_dmul>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4620      	mov	r0, r4
 80032de:	4629      	mov	r1, r5
 80032e0:	f7fc fffc 	bl	80002dc <__adddf3>
 80032e4:	f7fd fca8 	bl	8000c38 <__aeabi_d2f>
 80032e8:	f8ca 000c 	str.w	r0, [sl, #12]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 80032ec:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003374 <speed_control+0x3c0>
 80032f0:	edda 7a02 	vldr	s15, [sl, #8]
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 80032f4:	ed9a 6a03 	vldr	s12, [sl, #12]
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 80032f8:	eeb0 7a6a 	vmov.f32	s14, s21
 80032fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8003300:	eef0 7a4a 	vmov.f32	s15, s20
 8003304:	eee6 7a26 	vfma.f32	s15, s12, s13

  // ここから位置制御
  for (int i = 0; i < 2; i++) {
    // targetとodomの差分に上限をつける(吹っ飛び対策)
    float odom_diff_max = (float)OMNI_OUTPUT_LIMIT / OMNI_OUTPUT_GAIN_KP;
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8003308:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003378 <speed_control+0x3c4>
  target.position[0] += output.local_velocity_current[0] / MAIN_LOOP_CYCLE;  // speed to position
 800330c:	ed8b 7a00 	vstr	s14, [fp]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8003310:	ee37 6a4b 	vsub.f32	s12, s14, s22
  target.position[1] += output.local_velocity_current[1] / MAIN_LOOP_CYCLE;  // speed to position
 8003314:	edcb 7a01 	vstr	s15, [fp, #4]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8003318:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	f300 80a7 	bgt.w	8003472 <speed_control+0x4be>
      target.position[i] = omni.odom[i] + odom_diff_max;
    } else if (target.position[i] - omni.odom[i] < -odom_diff_max) {
 8003324:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8003394 <speed_control+0x3e0>
 8003328:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	f140 80ea 	bpl.w	8003508 <speed_control+0x554>
      target.position[i] = omni.odom[i] - odom_diff_max;
 8003334:	ee3b 7a66 	vsub.f32	s14, s22, s13
 8003338:	ee16 0a90 	vmov	r0, s13
 800333c:	ed8b 7a00 	vstr	s14, [fp]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 8003340:	ee77 6aeb 	vsub.f32	s13, s15, s23
 8003344:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003378 <speed_control+0x3c4>
    }

    // odom基準の絶対座標系
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8003348:	f8c9 0008 	str.w	r0, [r9, #8]
    if (target.position[i] - omni.odom[i] > odom_diff_max) {
 800334c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	f340 8081 	ble.w	800345a <speed_control+0x4a6>
      target.position[i] = omni.odom[i] + odom_diff_max;
 8003358:	ee3b 7a87 	vadd.f32	s14, s23, s14
 800335c:	4c07      	ldr	r4, [pc, #28]	; (800337c <speed_control+0x3c8>)
 800335e:	ed8b 7a01 	vstr	s14, [fp, #4]
 8003362:	e019      	b.n	8003398 <speed_control+0x3e4>
 8003364:	20000f64 	.word	0x20000f64
 8003368:	20000f78 	.word	0x20000f78
 800336c:	3c449ba6 	.word	0x3c449ba6
 8003370:	3bc49ba6 	.word	0x3bc49ba6
 8003374:	3b03126f 	.word	0x3b03126f
 8003378:	3e088889 	.word	0x3e088889
 800337c:	be088889 	.word	0xbe088889
 8003380:	20001588 	.word	0x20001588
 8003384:	20001004 	.word	0x20001004
 8003388:	20000f6c 	.word	0x20000f6c
 800338c:	2000136c 	.word	0x2000136c
 8003390:	c3160000 	.word	0xc3160000
 8003394:	be088889 	.word	0xbe088889
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8003398:	f8c9 400c 	str.w	r4, [r9, #12]
  }

  // グローバル→ローカル座標系
  omni.robot_pos_diff[0] = omni.odom_floor_diff[0] * cos(-imu.yaw_angle_rad) - omni.odom_floor_diff[1] * sin(-imu.yaw_angle_rad);
 800339c:	f7fd f8fc 	bl	8000598 <__aeabi_f2d>
 80033a0:	4606      	mov	r6, r0
 80033a2:	4620      	mov	r0, r4
 80033a4:	460f      	mov	r7, r1
 80033a6:	f7fd f8f7 	bl	8000598 <__aeabi_f2d>
 80033aa:	4632      	mov	r2, r6
 80033ac:	4604      	mov	r4, r0
 80033ae:	460d      	mov	r5, r1
 80033b0:	463b      	mov	r3, r7
 80033b2:	ec51 0b1f 	vmov	r0, r1, d15
 80033b6:	f7fd f947 	bl	8000648 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	ec43 2b19 	vmov	d9, r2, r3
 80033c2:	ec51 0b1e 	vmov	r0, r1, d14
 80033c6:	4622      	mov	r2, r4
 80033c8:	462b      	mov	r3, r5
 80033ca:	f7fd f93d 	bl	8000648 <__aeabi_dmul>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	ec51 0b19 	vmov	r0, r1, d9
 80033d6:	f7fc ff81 	bl	80002dc <__adddf3>
 80033da:	f7fd fc2d 	bl	8000c38 <__aeabi_d2f>
 80033de:	ee09 0a10 	vmov	s18, r0
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 80033e2:	4632      	mov	r2, r6
 80033e4:	463b      	mov	r3, r7
 80033e6:	e9dd 0100 	ldrd	r0, r1, [sp]
  omni.robot_pos_diff[0] = omni.odom_floor_diff[0] * cos(-imu.yaw_angle_rad) - omni.odom_floor_diff[1] * sin(-imu.yaw_angle_rad);
 80033ea:	ed89 9a04 	vstr	s18, [r9, #16]
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 80033ee:	f7fd f92b 	bl	8000648 <__aeabi_dmul>
 80033f2:	4622      	mov	r2, r4
 80033f4:	462b      	mov	r3, r5
 80033f6:	4604      	mov	r4, r0
 80033f8:	460d      	mov	r5, r1
 80033fa:	ec51 0b1f 	vmov	r0, r1, d15
 80033fe:	f7fd f923 	bl	8000648 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f7fc ff67 	bl	80002dc <__adddf3>
 800340e:	f7fd fc13 	bl	8000c38 <__aeabi_d2f>
 8003412:	ed99 7ad9 	vldr	s14, [r9, #868]	; 0x364
 8003416:	edd9 6ad8 	vldr	s13, [r9, #864]	; 0x360
 800341a:	f8c9 0014 	str.w	r0, [r9, #20]

  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 800341e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8003422:	eea6 8ae7 	vfms.f32	s16, s13, s15
 8003426:	eee7 8a67 	vfms.f32	s17, s14, s15
 800342a:	ed1f 7a27 	vldr	s14, [pc, #-156]	; 8003390 <speed_control+0x3dc>
  omni.robot_pos_diff[1] = omni.odom_floor_diff[0] * sin(-imu.yaw_angle_rad) + omni.odom_floor_diff[1] * cos(-imu.yaw_angle_rad);
 800342e:	ee07 0a90 	vmov	s15, r0
  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 8003432:	eea9 8a07 	vfma.f32	s16, s18, s14
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[1] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[1] * OMNI_OUTPUT_GAIN_FF;
 8003436:	eee7 8a87 	vfma.f32	s17, s15, s14
  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[0] * OMNI_OUTPUT_GAIN_FF;
 800343a:	ed8a 8a00 	vstr	s16, [sl]
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP - omni.local_odom_speed[1] * OMNI_OUTPUT_GAIN_KD + target.local_velocity[1] * OMNI_OUTPUT_GAIN_FF;
 800343e:	edca 8a01 	vstr	s17, [sl, #4]
}
 8003442:	b003      	add	sp, #12
 8003444:	ecbd 8b10 	vpop	{d8-d15}
 8003448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        target.local_velocity_current[i] -= output.accel_limit[i];
 800344c:	ed9a 7a05 	vldr	s14, [sl, #20]
 8003450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003454:	ee17 0a90 	vmov	r0, s15
 8003458:	e6b9      	b.n	80031ce <speed_control+0x21a>
    } else if (target.position[i] - omni.odom[i] < -odom_diff_max) {
 800345a:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8003394 <speed_control+0x3e0>
 800345e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	d448      	bmi.n	80034fa <speed_control+0x546>
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8003468:	ee7b 7ae7 	vsub.f32	s15, s23, s15
 800346c:	ee17 4a90 	vmov	r4, s15
 8003470:	e792      	b.n	8003398 <speed_control+0x3e4>
      target.position[i] = omni.odom[i] + odom_diff_max;
 8003472:	ee3b 7a26 	vadd.f32	s14, s22, s13
 8003476:	4827      	ldr	r0, [pc, #156]	; (8003514 <speed_control+0x560>)
 8003478:	ed8b 7a00 	vstr	s14, [fp]
 800347c:	e760      	b.n	8003340 <speed_control+0x38c>
      if (target.local_velocity_current[i] + output.accel_limit[i] > target.local_velocity[i]) {
 800347e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003482:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8003486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348a:	f53f ae9e 	bmi.w	80031ca <speed_control+0x216>
        target.local_velocity_current[i] += output.accel_limit[i];
 800348e:	ed9a 7a05 	vldr	s14, [sl, #20]
 8003492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003496:	ee17 0a90 	vmov	r0, s15
 800349a:	e698      	b.n	80031ce <speed_control+0x21a>
      if (target.local_velocity_current[i] - output.accel_limit[i] < target.local_velocity[i]) {
 800349c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80034a0:	eef4 8ac7 	vcmpe.f32	s17, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	dc06      	bgt.n	80034b8 <speed_control+0x504>
        target.local_velocity_current[i] -= output.accel_limit[i];
 80034aa:	ed9a 7a06 	vldr	s14, [sl, #24]
 80034ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034b2:	ee17 4a90 	vmov	r4, s15
 80034b6:	e6d4      	b.n	8003262 <speed_control+0x2ae>
    if (target.local_velocity[i] < target.local_velocity_current[i] && i == 0) {  // バック時だけ加速度制限変更
 80034b8:	ee18 4a90 	vmov	r4, s17
 80034bc:	e6d1      	b.n	8003262 <speed_control+0x2ae>
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 80034be:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80034c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c6:	f57f aeb6 	bpl.w	8003236 <speed_control+0x282>
      output.accel_limit[i] *= 5;
 80034ca:	ed9a 7a06 	vldr	s14, [sl, #24]
 80034ce:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80034d2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80034d6:	ed8a 7a06 	vstr	s14, [sl, #24]
 80034da:	e6ac      	b.n	8003236 <speed_control+0x282>
    if (diff_local[i] < 0 && target.local_velocity[i] < 0) {
 80034dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	f57f ae61 	bpl.w	80031aa <speed_control+0x1f6>
      output.accel_limit[i] *= 5;
 80034e8:	ed9a 7a05 	vldr	s14, [sl, #20]
 80034ec:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80034f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80034f4:	ed8a 7a05 	vstr	s14, [sl, #20]
 80034f8:	e657      	b.n	80031aa <speed_control+0x1f6>
      target.position[i] = omni.odom[i] - odom_diff_max;
 80034fa:	ee7b 7ac7 	vsub.f32	s15, s23, s14
 80034fe:	ee17 4a10 	vmov	r4, s14
 8003502:	edcb 7a01 	vstr	s15, [fp, #4]
 8003506:	e747      	b.n	8003398 <speed_control+0x3e4>
    omni.odom_floor_diff[i] = omni.odom[i] - target.position[i];
 8003508:	ee3b 7a47 	vsub.f32	s14, s22, s14
 800350c:	ee17 0a10 	vmov	r0, s14
 8003510:	e716      	b.n	8003340 <speed_control+0x38c>
 8003512:	bf00      	nop
 8003514:	be088889 	.word	0xbe088889

08003518 <output_limit>:

void output_limit()
{
  float limit_gain = 0;
  if (output.velocity[0] > OMNI_OUTPUT_LIMIT) {
 8003518:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <output_limit+0xa8>)
 800351a:	ed93 7a00 	vldr	s14, [r3]
    limit_gain = output.velocity[0] / OMNI_OUTPUT_LIMIT;
 800351e:	edd3 6a00 	vldr	s13, [r3]
  if (output.velocity[0] > OMNI_OUTPUT_LIMIT) {
 8003522:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	dd1f      	ble.n	8003570 <output_limit+0x58>
    output.velocity[0] = OMNI_OUTPUT_LIMIT;
 8003530:	edc3 7a00 	vstr	s15, [r3]
    output.velocity[1] /= limit_gain;
 8003534:	ed93 7a01 	vldr	s14, [r3, #4]
 8003538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003540:	ed83 7a01 	vstr	s14, [r3, #4]
    limit_gain = -output.velocity[0] / OMNI_OUTPUT_LIMIT;
    output.velocity[0] = -OMNI_OUTPUT_LIMIT;
    output.velocity[1] /= limit_gain;
  }

  if (output.velocity[1] > OMNI_OUTPUT_LIMIT) {
 8003544:	ed93 7a01 	vldr	s14, [r3, #4]
    limit_gain = output.velocity[1] / OMNI_OUTPUT_LIMIT;
 8003548:	edd3 6a01 	vldr	s13, [r3, #4]
  if (output.velocity[1] > OMNI_OUTPUT_LIMIT) {
 800354c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003558:	dd1e      	ble.n	8003598 <output_limit+0x80>
    output.velocity[1] = OMNI_OUTPUT_LIMIT;
 800355a:	edc3 7a01 	vstr	s15, [r3, #4]
    output.velocity[0] /= limit_gain;
 800355e:	ed93 7a00 	vldr	s14, [r3]
 8003562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003566:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800356a:	ed83 7a00 	vstr	s14, [r3]
 800356e:	4770      	bx	lr
  } else if (output.velocity[0] < -OMNI_OUTPUT_LIMIT) {
 8003570:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8003574:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	d5e2      	bpl.n	8003544 <output_limit+0x2c>
    limit_gain = -output.velocity[0] / OMNI_OUTPUT_LIMIT;
 800357e:	edd3 6a00 	vldr	s13, [r3]
    output.velocity[0] = -OMNI_OUTPUT_LIMIT;
 8003582:	ed83 7a00 	vstr	s14, [r3]
    output.velocity[1] /= limit_gain;
 8003586:	ed93 7a01 	vldr	s14, [r3, #4]
 800358a:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800358e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003592:	ed83 7a01 	vstr	s14, [r3, #4]
 8003596:	e7d5      	b.n	8003544 <output_limit+0x2c>
  } else if (output.velocity[1] < -OMNI_OUTPUT_LIMIT) {
 8003598:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800359c:	eef4 6ac7 	vcmpe.f32	s13, s14
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	d50b      	bpl.n	80035be <output_limit+0xa6>
    limit_gain = -output.velocity[1] / OMNI_OUTPUT_LIMIT;
 80035a6:	edd3 6a01 	vldr	s13, [r3, #4]
    output.velocity[1] = -OMNI_OUTPUT_LIMIT;
 80035aa:	ed83 7a01 	vstr	s14, [r3, #4]
    output.velocity[0] /= limit_gain;
 80035ae:	ed93 7a00 	vldr	s14, [r3]
 80035b2:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80035b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035ba:	ed83 7a00 	vstr	s14, [r3]
  }
}
 80035be:	4770      	bx	lr
 80035c0:	2000136c 	.word	0x2000136c
 80035c4:	00000000 	.word	0x00000000

080035c8 <send_accutuator_cmd_run>:
  omni_move(output.velocity[0], output.velocity[1], output.omega, OMNI_OUTPUT_LIMIT);
  send_accutuator_cmd_run();
}

void send_accutuator_cmd_run()
{
 80035c8:	b570      	push	{r4, r5, r6, lr}
  if (ai_cmd.kick_power > 0) {
 80035ca:	4c3d      	ldr	r4, [pc, #244]	; (80036c0 <send_accutuator_cmd_run+0xf8>)
 80035cc:	edd4 7a03 	vldr	s15, [r4, #12]
 80035d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80035d8:	b082      	sub	sp, #8
  if (ai_cmd.kick_power > 0) {
 80035da:	dd08      	ble.n	80035ee <send_accutuator_cmd_run+0x26>
    if (kick_state == 0) {
 80035dc:	4d39      	ldr	r5, [pc, #228]	; (80036c4 <send_accutuator_cmd_run+0xfc>)
 80035de:	882b      	ldrh	r3, [r5, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b98b      	cbnz	r3, 8003608 <send_accutuator_cmd_run+0x40>
      if (can_raw.ball_detection[0] == 1) {
 80035e4:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <send_accutuator_cmd_run+0x100>)
 80035e6:	f893 607c 	ldrb.w	r6, [r3, #124]	; 0x7c
 80035ea:	2e01      	cmp	r6, #1
 80035ec:	d042      	beq.n	8003674 <send_accutuator_cmd_run+0xac>
    }
  }

  static uint8_t can_sending_index = 0;

  can_sending_index++;
 80035ee:	4a37      	ldr	r2, [pc, #220]	; (80036cc <send_accutuator_cmd_run+0x104>)
 80035f0:	7813      	ldrb	r3, [r2, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	b2db      	uxtb	r3, r3
  switch (can_sending_index) {
 80035f6:	1e59      	subs	r1, r3, #1
  can_sending_index++;
 80035f8:	7013      	strb	r3, [r2, #0]
  switch (can_sending_index) {
 80035fa:	2904      	cmp	r1, #4
 80035fc:	d855      	bhi.n	80036aa <send_accutuator_cmd_run+0xe2>
 80035fe:	e8df f001 	tbb	[pc, r1]
 8003602:	1e15      	.short	0x1e15
 8003604:	2c25      	.short	0x2c25
 8003606:	0c          	.byte	0x0c
 8003607:	00          	.byte	0x00
      if (kick_state > MAIN_LOOP_CYCLE / 2) {
 8003608:	882b      	ldrh	r3, [r5, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	2bfa      	cmp	r3, #250	; 0xfa
 800360e:	d82b      	bhi.n	8003668 <send_accutuator_cmd_run+0xa0>
        kick_state++;
 8003610:	882b      	ldrh	r3, [r5, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	b29b      	uxth	r3, r3
 8003616:	802b      	strh	r3, [r5, #0]
 8003618:	e7e9      	b.n	80035ee <send_accutuator_cmd_run+0x26>
    case 4:
      actuator_kicker_voltage(150.0);
      break;

    case 5:
      actuator_motor5(ai_cmd.drible_power, 1.0);
 800361a:	ed94 0a02 	vldr	s0, [r4, #8]
 800361e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0

    default:
      can_sending_index = 0;
      break;
  }
}
 8003622:	b002      	add	sp, #8
 8003624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      actuator_motor5(ai_cmd.drible_power, 1.0);
 8003628:	f7fd bd54 	b.w	80010d4 <actuator_motor5>
      if (ai_cmd.chip_en == true) {
 800362c:	7c21      	ldrb	r1, [r4, #16]
 800362e:	b101      	cbz	r1, 8003632 <send_accutuator_cmd_run+0x6a>
        actuator_kicker(2, 1);
 8003630:	2101      	movs	r1, #1
        actuator_kicker(2, 0);
 8003632:	2002      	movs	r0, #2
}
 8003634:	b002      	add	sp, #8
 8003636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      actuator_kicker(1, 1);
 800363a:	f7fd bd97 	b.w	800116c <actuator_kicker>
      if (ai_cmd.chip_en == true) {
 800363e:	7c23      	ldrb	r3, [r4, #16]
 8003640:	b373      	cbz	r3, 80036a0 <send_accutuator_cmd_run+0xd8>
}
 8003642:	b002      	add	sp, #8
 8003644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        actuator_dribbler_up();
 8003648:	f7fd bd64 	b.w	8001114 <actuator_dribbler_up>
      actuator_kicker(1, 1);
 800364c:	2101      	movs	r1, #1
 800364e:	4608      	mov	r0, r1
}
 8003650:	b002      	add	sp, #8
 8003652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      actuator_kicker(1, 1);
 8003656:	f7fd bd89 	b.w	800116c <actuator_kicker>
      actuator_kicker_voltage(150.0);
 800365a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80036d0 <send_accutuator_cmd_run+0x108>
}
 800365e:	b002      	add	sp, #8
 8003660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      actuator_kicker_voltage(150.0);
 8003664:	f7fd bd7a 	b.w	800115c <actuator_kicker_voltage>
        if (can_raw.ball_detection[0] == 0) {
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <send_accutuator_cmd_run+0x100>)
 800366a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1bd      	bne.n	80035ee <send_accutuator_cmd_run+0x26>
 8003672:	e7d0      	b.n	8003616 <send_accutuator_cmd_run+0x4e>
        uint8_t kick_power_param = (float)ai_cmd.kick_power * 255.0;
 8003674:	ee17 0a90 	vmov	r0, s15
 8003678:	f7fc ff8e 	bl	8000598 <__aeabi_f2d>
 800367c:	a30e      	add	r3, pc, #56	; (adr r3, 80036b8 <send_accutuator_cmd_run+0xf0>)
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f7fc ffe1 	bl	8000648 <__aeabi_dmul>
 8003686:	f7fd fab7 	bl	8000bf8 <__aeabi_d2uiz>
 800368a:	b2c1      	uxtb	r1, r0
        printf(" kick=%d\r\n", kick_power_param);
 800368c:	4811      	ldr	r0, [pc, #68]	; (80036d4 <send_accutuator_cmd_run+0x10c>)
 800368e:	9101      	str	r1, [sp, #4]
 8003690:	f007 fba8 	bl	800ade4 <iprintf>
        actuator_kicker(3, (uint8_t)kick_power_param);
 8003694:	9901      	ldr	r1, [sp, #4]
 8003696:	2003      	movs	r0, #3
 8003698:	f7fd fd68 	bl	800116c <actuator_kicker>
        kick_state = 1;
 800369c:	802e      	strh	r6, [r5, #0]
 800369e:	e7a6      	b.n	80035ee <send_accutuator_cmd_run+0x26>
}
 80036a0:	b002      	add	sp, #8
 80036a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        actuator_dribbler_down();
 80036a6:	f7fd bd47 	b.w	8001138 <actuator_dribbler_down>
      can_sending_index = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	7013      	strb	r3, [r2, #0]
}
 80036ae:	b002      	add	sp, #8
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
 80036b2:	bf00      	nop
 80036b4:	f3af 8000 	nop.w
 80036b8:	00000000 	.word	0x00000000
 80036bc:	406fe000 	.word	0x406fe000
 80036c0:	20000e30 	.word	0x20000e30
 80036c4:	20000f88 	.word	0x20000f88
 80036c8:	20000e84 	.word	0x20000e84
 80036cc:	20000f04 	.word	0x20000f04
 80036d0:	43160000 	.word	0x43160000
 80036d4:	0800e4dc 	.word	0x0800e4dc

080036d8 <maintask_run>:
{
 80036d8:	b570      	push	{r4, r5, r6, lr}
  if (ai_cmd.local_vision_en_flag == false) {
 80036da:	4c30      	ldr	r4, [pc, #192]	; (800379c <maintask_run+0xc4>)
 80036dc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d157      	bne.n	8003794 <maintask_run+0xbc>
    target.velocity[0] = ai_cmd.local_target_speed[0];
 80036e4:	6961      	ldr	r1, [r4, #20]
    target.velocity[1] = ai_cmd.local_target_speed[1];
 80036e6:	69a2      	ldr	r2, [r4, #24]
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <maintask_run+0xc8>)
  output.omega = (getAngleDiff(ai_cmd.target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 80036ea:	4d2e      	ldr	r5, [pc, #184]	; (80037a4 <maintask_run+0xcc>)
 80036ec:	615a      	str	r2, [r3, #20]
 80036ee:	6119      	str	r1, [r3, #16]
  speed_control();
 80036f0:	f7ff fc60 	bl	8002fb4 <speed_control>
  output_limit();
 80036f4:	f7ff ff10 	bl	8003518 <output_limit>
  output.omega = (getAngleDiff(ai_cmd.target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 80036f8:	edd5 0a02 	vldr	s1, [r5, #8]
 80036fc:	ed94 0a00 	vldr	s0, [r4]
 8003700:	f001 fe9a 	bl	8005438 <getAngleDiff>
 8003704:	edd5 0a03 	vldr	s1, [r5, #12]
 8003708:	ee10 4a10 	vmov	r4, s0
 800370c:	ed95 0a02 	vldr	s0, [r5, #8]
 8003710:	f001 fe92 	bl	8005438 <getAngleDiff>
 8003714:	4620      	mov	r0, r4
 8003716:	ee10 6a10 	vmov	r6, s0
 800371a:	f7fc ff3d 	bl	8000598 <__aeabi_f2d>
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <maintask_run+0xd0>)
 8003720:	2200      	movs	r2, #0
 8003722:	f7fc ff91 	bl	8000648 <__aeabi_dmul>
 8003726:	4604      	mov	r4, r0
 8003728:	4630      	mov	r0, r6
 800372a:	460d      	mov	r5, r1
 800372c:	f7fc ff34 	bl	8000598 <__aeabi_f2d>
 8003730:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <maintask_run+0xd4>)
 8003732:	2200      	movs	r2, #0
 8003734:	f7fc ff88 	bl	8000648 <__aeabi_dmul>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4620      	mov	r0, r4
 800373e:	4629      	mov	r1, r5
 8003740:	f7fc fdca 	bl	80002d8 <__aeabi_dsub>
 8003744:	f7fd fa78 	bl	8000c38 <__aeabi_d2f>
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <maintask_run+0xd8>)
 800374a:	6118      	str	r0, [r3, #16]
  if (output.omega > OMEGA_LIMIT) {
 800374c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003750:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = OMEGA_LIMIT;
 800375c:	bfc8      	it	gt
 800375e:	edc3 7a04 	vstrgt	s15, [r3, #16]
  if (output.omega < -OMEGA_LIMIT) {
 8003762:	ed93 7a04 	vldr	s14, [r3, #16]
 8003766:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 800376a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = -OMEGA_LIMIT;
 8003772:	bf48      	it	mi
 8003774:	edc3 7a04 	vstrmi	s15, [r3, #16]
  omni_move(output.velocity[0], output.velocity[1], output.omega, OMNI_OUTPUT_LIMIT);
 8003778:	ed93 0a00 	vldr	s0, [r3]
 800377c:	edd3 0a01 	vldr	s1, [r3, #4]
 8003780:	ed93 1a04 	vldr	s2, [r3, #16]
 8003784:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8003788:	f001 f9b2 	bl	8004af0 <omni_move>
}
 800378c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  send_accutuator_cmd_run();
 8003790:	f7ff bf1a 	b.w	80035c8 <send_accutuator_cmd_run>
    target.velocity[1] = 0;
 8003794:	2200      	movs	r2, #0
    target.velocity[0] = 0;
 8003796:	4611      	mov	r1, r2
 8003798:	e7a6      	b.n	80036e8 <maintask_run+0x10>
 800379a:	bf00      	nop
 800379c:	20000e30 	.word	0x20000e30
 80037a0:	20001588 	.word	0x20001588
 80037a4:	20000f78 	.word	0x20000f78
 80037a8:	40640000 	.word	0x40640000
 80037ac:	40af4000 	.word	0x40af4000
 80037b0:	2000136c 	.word	0x2000136c
 80037b4:	00000000 	.word	0x00000000

080037b8 <HAL_TIM_PeriodElapsedCallback>:
{
 80037b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  mouse.integral_loop_cnt++;
 80037bc:	4ab4      	ldr	r2, [pc, #720]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
  pre_sw_mode = sw_mode;
 80037be:	4db5      	ldr	r5, [pc, #724]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
  mouse.integral_loop_cnt++;
 80037c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  pre_sw_mode = sw_mode;
 80037c2:	4eb5      	ldr	r6, [pc, #724]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 80037c4:	48b5      	ldr	r0, [pc, #724]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
{
 80037c6:	ed2d 8b02 	vpush	{d8}
  pre_sw_mode = sw_mode;
 80037ca:	7829      	ldrb	r1, [r5, #0]
 80037cc:	7031      	strb	r1, [r6, #0]
  mouse.integral_loop_cnt++;
 80037ce:	3301      	adds	r3, #1
{
 80037d0:	b085      	sub	sp, #20
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 80037d2:	2120      	movs	r1, #32
  mouse.integral_loop_cnt++;
 80037d4:	6313      	str	r3, [r2, #48]	; 0x30
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 80037d6:	f003 fc89 	bl	80070ec <HAL_GPIO_ReadPin>
 80037da:	2140      	movs	r1, #64	; 0x40
 80037dc:	4604      	mov	r4, r0
 80037de:	48af      	ldr	r0, [pc, #700]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80037e0:	f003 fc84 	bl	80070ec <HAL_GPIO_ReadPin>
 80037e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037e8:	4607      	mov	r7, r0
 80037ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ee:	f003 fc7d 	bl	80070ec <HAL_GPIO_ReadPin>
 80037f2:	f1c4 040f 	rsb	r4, r4, #15
 80037f6:	eba4 0447 	sub.w	r4, r4, r7, lsl #1
 80037fa:	2104      	movs	r1, #4
 80037fc:	4607      	mov	r7, r0
 80037fe:	48a8      	ldr	r0, [pc, #672]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003800:	f003 fc74 	bl	80070ec <HAL_GPIO_ReadPin>
 8003804:	b2e4      	uxtb	r4, r4
 8003806:	eba4 04c7 	sub.w	r4, r4, r7, lsl #3
  if (sys.error_flag) {
 800380a:	4fa6      	ldr	r7, [pc, #664]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800380c:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
  if (sys.error_flag) {
 8003810:	783b      	ldrb	r3, [r7, #0]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003812:	b2c0      	uxtb	r0, r0
  sw_mode = getModeSwitch();
 8003814:	7028      	strb	r0, [r5, #0]
  if (sys.error_flag) {
 8003816:	2b00      	cmp	r3, #0
 8003818:	d036      	beq.n	8003888 <HAL_TIM_PeriodElapsedCallback+0xd0>
    target.position[i] = omni.odom[i];
 800381a:	4ba3      	ldr	r3, [pc, #652]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
    ai_cmd.local_target_speed[i] = 0;
 800381c:	4aa3      	ldr	r2, [pc, #652]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
    target.position[i] = omni.odom[i];
 800381e:	49a4      	ldr	r1, [pc, #656]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003820:	6998      	ldr	r0, [r3, #24]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	604b      	str	r3, [r1, #4]
  imu.yaw_angle = ai_cmd.target_theta;
 8003826:	6813      	ldr	r3, [r2, #0]
    sys.main_mode = 9;
 8003828:	2409      	movs	r4, #9
    sys.main_mode = 7;
 800382a:	70bc      	strb	r4, [r7, #2]
  imu.yaw_angle = ai_cmd.target_theta;
 800382c:	4ca1      	ldr	r4, [pc, #644]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
    target.position[i] = omni.odom[i];
 800382e:	6008      	str	r0, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 8003830:	2100      	movs	r1, #0
 8003832:	6151      	str	r1, [r2, #20]
 8003834:	6191      	str	r1, [r2, #24]
  imu.yaw_angle = ai_cmd.target_theta;
 8003836:	6023      	str	r3, [r4, #0]
  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8003838:	68a2      	ldr	r2, [r4, #8]
  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 800383a:	489e      	ldr	r0, [pc, #632]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800383c:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8003ab8 <HAL_TIM_PeriodElapsedCallback+0x300>
  imu.pre_yaw_angle = imu.yaw_angle;
 8003840:	6063      	str	r3, [r4, #4]
  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8003842:	60e2      	str	r2, [r4, #12]
  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 8003844:	f7fe fc9e 	bl	8002184 <ICM20602_read_IMU_data>
  if (sys.main_mode < 2 && ai_cmd.vision_lost_flag == false) {
 8003848:	78bb      	ldrb	r3, [r7, #2]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d929      	bls.n	80038a2 <HAL_TIM_PeriodElapsedCallback+0xea>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 800384e:	6820      	ldr	r0, [r4, #0]
  imu.yaw_angle_rad = imu.yaw_angle * M_PI / 180;
 8003850:	f7fc fea2 	bl	8000598 <__aeabi_f2d>
 8003854:	a388      	add	r3, pc, #544	; (adr r3, 8003a78 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f7fc fef5 	bl	8000648 <__aeabi_dmul>
 800385e:	f7fd f9eb 	bl	8000c38 <__aeabi_d2f>
 8003862:	60a0      	str	r0, [r4, #8]
  omniOdometory();
 8003864:	f000 ff80 	bl	8004768 <omniOdometory>
  switch (sys.main_mode) {
 8003868:	78bb      	ldrb	r3, [r7, #2]
 800386a:	2b09      	cmp	r3, #9
 800386c:	f200 8095 	bhi.w	800399a <HAL_TIM_PeriodElapsedCallback+0x1e2>
 8003870:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003874:	00510051 	.word	0x00510051
 8003878:	00d00055 	.word	0x00d00055
 800387c:	00cc0136 	.word	0x00cc0136
 8003880:	009300d3 	.word	0x009300d3
 8003884:	00d70093 	.word	0x00d70093
  } else if (sw_mode != pre_sw_mode || sys.starting_status_flag) {  // reset
 8003888:	7833      	ldrb	r3, [r6, #0]
 800388a:	4283      	cmp	r3, r0
 800388c:	f000 815c 	beq.w	8003b48 <HAL_TIM_PeriodElapsedCallback+0x390>
    target.position[i] = omni.odom[i];
 8003890:	4b85      	ldr	r3, [pc, #532]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
    ai_cmd.local_target_speed[i] = 0;
 8003892:	4a86      	ldr	r2, [pc, #536]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
    target.position[i] = omni.odom[i];
 8003894:	4986      	ldr	r1, [pc, #536]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003896:	6998      	ldr	r0, [r3, #24]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	604b      	str	r3, [r1, #4]
    sys.main_mode = 7;
 800389c:	2407      	movs	r4, #7
  imu.yaw_angle = ai_cmd.target_theta;
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	e7c3      	b.n	800382a <HAL_TIM_PeriodElapsedCallback+0x72>
  if (sys.main_mode < 2 && ai_cmd.vision_lost_flag == false) {
 80038a2:	4b82      	ldr	r3, [pc, #520]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80038a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	d1d0      	bne.n	800384e <HAL_TIM_PeriodElapsedCallback+0x96>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 80038ac:	ed94 8a00 	vldr	s16, [r4]
 80038b0:	eddf 7a82 	vldr	s15, [pc, #520]	; 8003abc <HAL_TIM_PeriodElapsedCallback+0x304>
 80038b4:	edd3 0a01 	vldr	s1, [r3, #4]
 80038b8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80038bc:	edcd 0a01 	vstr	s1, [sp, #4]
 80038c0:	ee17 0a90 	vmov	r0, s15
 80038c4:	f7fc fe68 	bl	8000598 <__aeabi_f2d>
 80038c8:	a36d      	add	r3, pc, #436	; (adr r3, 8003a80 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc febb 	bl	8000648 <__aeabi_dmul>
 80038d2:	f7fd f9b1 	bl	8000c38 <__aeabi_d2f>
 80038d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80038da:	ee00 0a10 	vmov	s0, r0
 80038de:	f001 fdab 	bl	8005438 <getAngleDiff>
 80038e2:	ee18 0a10 	vmov	r0, s16
 80038e6:	ee10 5a10 	vmov	r5, s0
 80038ea:	f7fc fe55 	bl	8000598 <__aeabi_f2d>
 80038ee:	4680      	mov	r8, r0
 80038f0:	4628      	mov	r0, r5
 80038f2:	4689      	mov	r9, r1
 80038f4:	f7fc fe50 	bl	8000598 <__aeabi_f2d>
 80038f8:	a363      	add	r3, pc, #396	; (adr r3, 8003a88 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f7fc fea3 	bl	8000648 <__aeabi_dmul>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4640      	mov	r0, r8
 8003908:	4649      	mov	r1, r9
 800390a:	f7fc fce5 	bl	80002d8 <__aeabi_dsub>
 800390e:	f7fd f993 	bl	8000c38 <__aeabi_d2f>
 8003912:	6020      	str	r0, [r4, #0]
 8003914:	e79c      	b.n	8003850 <HAL_TIM_PeriodElapsedCallback+0x98>
      if (connection.connected_ai == false) {
 8003916:	4b6a      	ldr	r3, [pc, #424]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003918:	781c      	ldrb	r4, [r3, #0]
 800391a:	2c00      	cmp	r4, #0
 800391c:	d03d      	beq.n	800399a <HAL_TIM_PeriodElapsedCallback+0x1e2>
      maintask_run();
 800391e:	f7ff fedb 	bl	80036d8 <maintask_run>
  buzzer_cnt++;
 8003922:	4a68      	ldr	r2, [pc, #416]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	3301      	adds	r3, #1
  if (buzzer_cnt > 100) {
 8003928:	2b64      	cmp	r3, #100	; 0x64
 800392a:	d855      	bhi.n	80039d8 <HAL_TIM_PeriodElapsedCallback+0x220>
  buzzer_cnt++;
 800392c:	6013      	str	r3, [r2, #0]
  connection_check_cnt++;
 800392e:	4d66      	ldr	r5, [pc, #408]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	3301      	adds	r3, #1
  if (connection_check_cnt > MAIN_LOOP_CYCLE / 4) {  // 0.25s
 8003934:	2b7d      	cmp	r3, #125	; 0x7d
  connection_check_cnt++;
 8003936:	602b      	str	r3, [r5, #0]
  if (connection_check_cnt > MAIN_LOOP_CYCLE / 4) {  // 0.25s
 8003938:	d922      	bls.n	8003980 <HAL_TIM_PeriodElapsedCallback+0x1c8>
    if (connection.check_ver != connection.check_pre) {
 800393a:	4c61      	ldr	r4, [pc, #388]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800393c:	78e2      	ldrb	r2, [r4, #3]
 800393e:	78a3      	ldrb	r3, [r4, #2]
 8003940:	429a      	cmp	r2, r3
 8003942:	f000 8109 	beq.w	8003b58 <HAL_TIM_PeriodElapsedCallback+0x3a0>
      connection.connected_ai = true;
 8003946:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003948:	4860      	ldr	r0, [pc, #384]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x314>)
      connection.connected_ai = true;
 800394a:	7022      	strb	r2, [r4, #0]
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800394c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003950:	f003 fbd2 	bl	80070f8 <HAL_GPIO_WritePin>
    connection.cmd_rx_frq = (float)connection.cmd_cnt * 4;  // 0.25s cycle -> x4
 8003954:	edd4 7a01 	vldr	s15, [r4, #4]
    connection.check_pre = connection.check_ver;
 8003958:	78e2      	ldrb	r2, [r4, #3]
 800395a:	70a2      	strb	r2, [r4, #2]
    connection.cmd_rx_frq = (float)connection.cmd_cnt * 4;  // 0.25s cycle -> x4
 800395c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003960:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003964:	ee67 7a87 	vmul.f32	s15, s15, s14
    connection_check_cnt = 0;
 8003968:	2300      	movs	r3, #0
    if (connection.cmd_rx_frq > 0) {
 800396a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    connection_check_cnt = 0;
 8003972:	602b      	str	r3, [r5, #0]
    connection.cmd_cnt = 0;
 8003974:	6063      	str	r3, [r4, #4]
      connection.connected_cm4 = true;
 8003976:	bfc8      	it	gt
 8003978:	2301      	movgt	r3, #1
    connection.cmd_rx_frq = (float)connection.cmd_cnt * 4;  // 0.25s cycle -> x4
 800397a:	edc4 7a02 	vstr	s15, [r4, #8]
      connection.connected_cm4 = false;
 800397e:	7063      	strb	r3, [r4, #1]
  cnt_time_50Hz++;
 8003980:	4a53      	ldr	r2, [pc, #332]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003982:	8813      	ldrh	r3, [r2, #0]
 8003984:	3301      	adds	r3, #1
 8003986:	b29b      	uxth	r3, r3
  if (cnt_time_50Hz > 10) {
 8003988:	2b0a      	cmp	r3, #10
 800398a:	f200 80c7 	bhi.w	8003b1c <HAL_TIM_PeriodElapsedCallback+0x364>
  cnt_time_50Hz++;
 800398e:	8013      	strh	r3, [r2, #0]
}
 8003990:	b005      	add	sp, #20
 8003992:	ecbd 8b02 	vpop	{d8}
 8003996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

}

void maintask_stop()
{
  omni_move(0.0, 0.0, 0.0, 0.0);
 800399a:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x31c>
 800399e:	eef0 0a61 	vmov.f32	s1, s3
 80039a2:	eeb0 0a61 	vmov.f32	s0, s3
 80039a6:	eeb0 1a61 	vmov.f32	s2, s3
 80039aa:	f001 f8a1 	bl	8004af0 <omni_move>
  actuator_motor5(0.0, 0.0);
 80039ae:	eddf 0a49 	vldr	s1, [pc, #292]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x31c>
 80039b2:	eeb0 0a60 	vmov.f32	s0, s1
 80039b6:	f7fd fb8d 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 80039ba:	2100      	movs	r1, #0
 80039bc:	2001      	movs	r0, #1
 80039be:	f7fd fbd5 	bl	800116c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 80039c2:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x31c>
 80039c6:	f7fd fbc9 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 80039ca:	f7fd fbb5 	bl	8001138 <actuator_dribbler_down>
  buzzer_cnt++;
 80039ce:	4a3d      	ldr	r2, [pc, #244]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80039d0:	6813      	ldr	r3, [r2, #0]
 80039d2:	3301      	adds	r3, #1
  if (buzzer_cnt > 100) {
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d9a9      	bls.n	800392c <HAL_TIM_PeriodElapsedCallback+0x174>
    if (can_raw.power_voltage[0] < 21.0 || sys.error_flag) {
 80039d8:	493f      	ldr	r1, [pc, #252]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80039da:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80039de:	eef3 7a05 	vmov.f32	s15, #53	; 0x41a80000  21.0
 80039e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    buzzer_cnt = 0;
 80039e6:	2300      	movs	r3, #0
    if (can_raw.power_voltage[0] < 21.0 || sys.error_flag) {
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    buzzer_cnt = 0;
 80039ec:	6013      	str	r3, [r2, #0]
    if (can_raw.power_voltage[0] < 21.0 || sys.error_flag) {
 80039ee:	d403      	bmi.n	80039f8 <HAL_TIM_PeriodElapsedCallback+0x240>
 80039f0:	783b      	ldrb	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a2 	beq.w	8003b3c <HAL_TIM_PeriodElapsedCallback+0x384>
      if (buzzer_state == false) {
 80039f8:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	f040 809e 	bne.w	8003b3e <HAL_TIM_PeriodElapsedCallback+0x386>
        buzzer_state = true;
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
        actuator_buzzer_on();
 8003a06:	f7fd fbe9 	bl	80011dc <actuator_buzzer_on>
 8003a0a:	e790      	b.n	800392e <HAL_TIM_PeriodElapsedCallback+0x176>
      kicker_test(false);
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f7ff fa0f 	bl	8002e30 <kicker_test>
      break;
 8003a12:	e786      	b.n	8003922 <HAL_TIM_PeriodElapsedCallback+0x16a>
      motor_test();
 8003a14:	f7ff f99c 	bl	8002d50 <motor_test>
      break;
 8003a18:	e783      	b.n	8003922 <HAL_TIM_PeriodElapsedCallback+0x16a>
      kicker_test(true);
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f7ff fa08 	bl	8002e30 <kicker_test>
      break;
 8003a20:	e77f      	b.n	8003922 <HAL_TIM_PeriodElapsedCallback+0x16a>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003a22:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8003a26:	eef0 0a61 	vmov.f32	s1, s3
 8003a2a:	eeb0 0a61 	vmov.f32	s0, s3
 8003a2e:	eeb0 1a61 	vmov.f32	s2, s3
 8003a32:	f001 f85d 	bl	8004af0 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003a36:	eddf 0a27 	vldr	s1, [pc, #156]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8003a3a:	eeb0 0a60 	vmov.f32	s0, s1
 8003a3e:	f7fd fb49 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003a42:	2100      	movs	r1, #0
 8003a44:	2001      	movs	r0, #1
 8003a46:	f7fd fb91 	bl	800116c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003a4a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003ad4 <HAL_TIM_PeriodElapsedCallback+0x31c>
 8003a4e:	f7fd fb85 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003a52:	f7fd fb71 	bl	8001138 <actuator_dribbler_down>
}

void send_can_error()
{
  uint8_t senddata_error[8];
  can1_send(0x000, senddata_error);
 8003a56:	a902      	add	r1, sp, #8
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f7fd fdef 	bl	800163c <can1_send>
  can2_send(0x000, senddata_error);
 8003a5e:	a902      	add	r1, sp, #8
 8003a60:	2000      	movs	r0, #0
 8003a62:	f7fd fe3b 	bl	80016dc <can2_send>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003a66:	480d      	ldr	r0, [pc, #52]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a6e:	f003 fb43 	bl	80070f8 <HAL_GPIO_WritePin>
}
 8003a72:	e756      	b.n	8003922 <HAL_TIM_PeriodElapsedCallback+0x16a>
 8003a74:	f3af 8000 	nop.w
 8003a78:	a2529d39 	.word	0xa2529d39
 8003a7c:	3f91df46 	.word	0x3f91df46
 8003a80:	16c16c17 	.word	0x16c16c17
 8003a84:	3f76c16c 	.word	0x3f76c16c
 8003a88:	48b81fe5 	.word	0x48b81fe5
 8003a8c:	3fad55df 	.word	0x3fad55df
 8003a90:	20000fc4 	.word	0x20000fc4
 8003a94:	20001582 	.word	0x20001582
 8003a98:	20001388 	.word	0x20001388
 8003a9c:	48000400 	.word	0x48000400
 8003aa0:	48000c00 	.word	0x48000c00
 8003aa4:	20001584 	.word	0x20001584
 8003aa8:	20001004 	.word	0x20001004
 8003aac:	20000e30 	.word	0x20000e30
 8003ab0:	20001588 	.word	0x20001588
 8003ab4:	20000f78 	.word	0x20000f78
 8003ab8:	3b03126f 	.word	0x3b03126f
 8003abc:	40490fdb 	.word	0x40490fdb
 8003ac0:	20000f08 	.word	0x20000f08
 8003ac4:	20000e7c 	.word	0x20000e7c
 8003ac8:	20000f14 	.word	0x20000f14
 8003acc:	48000800 	.word	0x48000800
 8003ad0:	20000f06 	.word	0x20000f06
 8003ad4:	00000000 	.word	0x00000000
 8003ad8:	20000e84 	.word	0x20000e84
 8003adc:	20000e80 	.word	0x20000e80
  if (decode_SW(adc_sw_data) & 0b00010000) {
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8003ae2:	8818      	ldrh	r0, [r3, #0]
 8003ae4:	f001 fd80 	bl	80055e8 <decode_SW>
 8003ae8:	f010 0410 	ands.w	r4, r0, #16
 8003aec:	d057      	beq.n	8003b9e <HAL_TIM_PeriodElapsedCallback+0x3e6>
    actuator_motor5(0.5, 1.0);
 8003aee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003af2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003af6:	f7fd faed 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003afa:	4830      	ldr	r0, [pc, #192]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b02:	f003 faf9 	bl	80070f8 <HAL_GPIO_WritePin>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003b06:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8003bc0 <HAL_TIM_PeriodElapsedCallback+0x408>
 8003b0a:	eeb0 1a61 	vmov.f32	s2, s3
 8003b0e:	eef0 0a61 	vmov.f32	s1, s3
 8003b12:	eeb0 0a61 	vmov.f32	s0, s3
 8003b16:	f000 ffeb 	bl	8004af0 <omni_move>
}
 8003b1a:	e702      	b.n	8003922 <HAL_TIM_PeriodElapsedCallback+0x16a>
    debug.print_flag = true;
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003b1e:	2001      	movs	r0, #1
    cnt_time_50Hz = 0;
 8003b20:	2100      	movs	r1, #0
 8003b22:	8011      	strh	r1, [r2, #0]
    debug.print_flag = true;
 8003b24:	7218      	strb	r0, [r3, #8]
    actuator_power_ONOFF(1);
 8003b26:	f7fd fb23 	bl	8001170 <actuator_power_ONOFF>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003b2a:	4827      	ldr	r0, [pc, #156]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8003b2c:	2180      	movs	r1, #128	; 0x80
}
 8003b2e:	b005      	add	sp, #20
 8003b30:	ecbd 8b02 	vpop	{d8}
 8003b34:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003b38:	f003 bae4 	b.w	8007104 <HAL_GPIO_TogglePin>
 8003b3c:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x414>)
        buzzer_state = false;
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
        actuator_buzzer_off();
 8003b42:	f7fd fb53 	bl	80011ec <actuator_buzzer_off>
 8003b46:	e6f2      	b.n	800392e <HAL_TIM_PeriodElapsedCallback+0x176>
  } else if (sw_mode != pre_sw_mode || sys.starting_status_flag) {  // reset
 8003b48:	787a      	ldrb	r2, [r7, #1]
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	f47f aea0 	bne.w	8003890 <HAL_TIM_PeriodElapsedCallback+0xd8>
  imu.pre_yaw_angle = imu.yaw_angle;
 8003b50:	4c1f      	ldr	r4, [pc, #124]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x418>)
    sys.main_mode = sw_mode;
 8003b52:	70bb      	strb	r3, [r7, #2]
  imu.pre_yaw_angle = imu.yaw_angle;
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	e66f      	b.n	8003838 <HAL_TIM_PeriodElapsedCallback+0x80>
      connection.connected_ai = false;
 8003b58:	2600      	movs	r6, #0
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003b5a:	4632      	mov	r2, r6
 8003b5c:	4817      	ldr	r0, [pc, #92]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x404>)
      connection.connected_ai = false;
 8003b5e:	7026      	strb	r6, [r4, #0]
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b64:	f003 fac8 	bl	80070f8 <HAL_GPIO_WritePin>
void resetAiCmdData()
{
  ai_cmd.local_target_speed[0] = 0;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	615a      	str	r2, [r3, #20]
  ai_cmd.local_target_speed[1] = 0;
 8003b6e:	619a      	str	r2, [r3, #24]
  ai_cmd.global_vision_theta = 0;
 8003b70:	605a      	str	r2, [r3, #4]
  ai_cmd.target_theta = 0;
 8003b72:	601a      	str	r2, [r3, #0]
  ai_cmd.chip_en = false;
  ai_cmd.kick_power = 0;
 8003b74:	60da      	str	r2, [r3, #12]
  ai_cmd.drible_power = 0;
 8003b76:	609a      	str	r2, [r3, #8]
  ai_cmd.ball_local_x = 0;
  ai_cmd.ball_local_y = 0;
  ai_cmd.ball_local_radius = 0;
  ai_cmd.ball_local_FPS = 0;

  ai_cmd.vision_lost_flag = true;
 8003b78:	2201      	movs	r2, #1
  ai_cmd.global_ball_position[1] = 0;
 8003b7a:	e9c3 660b 	strd	r6, r6, [r3, #44]	; 0x2c
  ai_cmd.global_robot_position[1] = 0;
 8003b7e:	e9c3 6607 	strd	r6, r6, [r3, #28]
  ai_cmd.global_target_position[1] = 0;
 8003b82:	e9c3 6609 	strd	r6, r6, [r3, #36]	; 0x24
  ai_cmd.ball_local_y = 0;
 8003b86:	e9c3 660e 	strd	r6, r6, [r3, #56]	; 0x38
  ai_cmd.ball_local_FPS = 0;
 8003b8a:	e9c3 6610 	strd	r6, r6, [r3, #64]	; 0x40
  ai_cmd.chip_en = false;
 8003b8e:	741e      	strb	r6, [r3, #16]
  ai_cmd.allow_local_flags = 0;
 8003b90:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
  ai_cmd.vision_lost_flag = true;
 8003b94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  ai_cmd.local_vision_en_flag = false;
  ai_cmd.keeper_mode_en_flag = false;
 8003b98:	f883 604a 	strb.w	r6, [r3, #74]	; 0x4a
}
 8003b9c:	e6da      	b.n	8003954 <HAL_TIM_PeriodElapsedCallback+0x19c>
    actuator_motor5(0.0, 0.0);
 8003b9e:	eddf 0a08 	vldr	s1, [pc, #32]	; 8003bc0 <HAL_TIM_PeriodElapsedCallback+0x408>
 8003ba2:	eeb0 0a60 	vmov.f32	s0, s1
 8003ba6:	f7fd fa95 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003baa:	4804      	ldr	r0, [pc, #16]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x404>)
 8003bac:	4622      	mov	r2, r4
 8003bae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bb2:	f003 faa1 	bl	80070f8 <HAL_GPIO_WritePin>
 8003bb6:	e7a6      	b.n	8003b06 <HAL_TIM_PeriodElapsedCallback+0x34e>
 8003bb8:	20000e2c 	.word	0x20000e2c
 8003bbc:	48000800 	.word	0x48000800
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	20000f58 	.word	0x20000f58
 8003bc8:	48000400 	.word	0x48000400
 8003bcc:	20000e80 	.word	0x20000e80
 8003bd0:	20000f78 	.word	0x20000f78
 8003bd4:	20000e30 	.word	0x20000e30

08003bd8 <sendRobotInfo>:
{
 8003bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  ring_counter++;
 8003bdc:	4ac0      	ldr	r2, [pc, #768]	; (8003ee0 <sendRobotInfo+0x308>)
	  switch (send_no) {
 8003bde:	48c1      	ldr	r0, [pc, #772]	; (8003ee4 <sendRobotInfo+0x30c>)
	  ring_counter++;
 8003be0:	7813      	ldrb	r3, [r2, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	b2db      	uxtb	r3, r3
	  if (ring_counter > 200) {
 8003be6:	2bc8      	cmp	r3, #200	; 0xc8
	    ring_counter = 0;
 8003be8:	bf88      	it	hi
 8003bea:	2300      	movhi	r3, #0
 8003bec:	7013      	strb	r3, [r2, #0]
	  switch (send_no) {
 8003bee:	7802      	ldrb	r2, [r0, #0]
{
 8003bf0:	b086      	sub	sp, #24
	  switch (send_no) {
 8003bf2:	2a04      	cmp	r2, #4
 8003bf4:	f200 8156 	bhi.w	8003ea4 <sendRobotInfo+0x2cc>
 8003bf8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003bfc:	0086003a 	.word	0x0086003a
 8003c00:	012200c7 	.word	0x012200c7
 8003c04:	0005      	.short	0x0005
		  senddata[1]=0xFB;
 8003c06:	49b8      	ldr	r1, [pc, #736]	; (8003ee8 <sendRobotInfo+0x310>)
	      senddata[12]=connection.check_ver;
 8003c08:	4db8      	ldr	r5, [pc, #736]	; (8003eec <sendRobotInfo+0x314>)
	      senddata[3]=ring_counter;
 8003c0a:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f363 0207 	bfi	r2, r3, #0, #8
 8003c14:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8003c18:	f364 220f 	bfi	r2, r4, #8, #8
 8003c1c:	f363 4217 	bfi	r2, r3, #16, #8
 8003c20:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
 8003c24:	f8d1 3033 	ldr.w	r3, [r1, #51]	; 0x33
 8003c28:	f8cd 300f 	str.w	r3, [sp, #15]
	      senddata[13]=0;
 8003c2c:	2300      	movs	r3, #0
	      senddata[3]=ring_counter;
 8003c2e:	f364 621f 	bfi	r2, r4, #24, #8
	      senddata[13]=0;
 8003c32:	f8ad 3015 	strh.w	r3, [sp, #21]
		  senddata[11]=temp[3];
 8003c36:	f891 4037 	ldrb.w	r4, [r1, #55]	; 0x37
	      senddata[15]=0;
 8003c3a:	f88d 3017 	strb.w	r3, [sp, #23]
	      senddata[12]=connection.check_ver;
 8003c3e:	78e9      	ldrb	r1, [r5, #3]
	      senddata[3]=ring_counter;
 8003c40:	f8cd 200b 	str.w	r2, [sp, #11]
		  senddata[0]=0xFA;
 8003c44:	f64f 35fa 	movw	r5, #64506	; 0xfbfa
		  senddata[2]=send_no+10;
 8003c48:	230e      	movs	r3, #14
		  senddata[0]=0xFA;
 8003c4a:	f8ad 5008 	strh.w	r5, [sp, #8]
		  senddata[11]=temp[3];
 8003c4e:	f88d 4013 	strb.w	r4, [sp, #19]
	      senddata[12]=connection.check_ver;
 8003c52:	f88d 1014 	strb.w	r1, [sp, #20]
		  senddata[2]=send_no+10;
 8003c56:	f88d 300a 	strb.w	r3, [sp, #10]
	  if(send_no>4){send_no=0;}
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	7003      	strb	r3, [r0, #0]
	  HAL_UART_Transmit(&huart2, senddata, sizeof(senddata),0xff);
 8003c5e:	23ff      	movs	r3, #255	; 0xff
 8003c60:	2210      	movs	r2, #16
 8003c62:	a902      	add	r1, sp, #8
 8003c64:	48a2      	ldr	r0, [pc, #648]	; (8003ef0 <sendRobotInfo+0x318>)
 8003c66:	f006 f94f 	bl	8009f08 <HAL_UART_Transmit>
}
 8003c6a:	b006      	add	sp, #24
 8003c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  	  msg.data.diff_angle = imu.yaw_angle - ai_cmd.global_vision_theta;
 8003c70:	4ea0      	ldr	r6, [pc, #640]	; (8003ef4 <sendRobotInfo+0x31c>)
 8003c72:	49a1      	ldr	r1, [pc, #644]	; (8003ef8 <sendRobotInfo+0x320>)
 8003c74:	ed96 7a00 	vldr	s14, [r6]
 8003c78:	edd1 7a01 	vldr	s15, [r1, #4]
		  senddata[12]=can_raw.ball_detection[0];
 8003c7c:	4f9f      	ldr	r7, [pc, #636]	; (8003efc <sendRobotInfo+0x324>)
 8003c7e:	78f5      	ldrb	r5, [r6, #3]
 8003c80:	f897 c07c 	ldrb.w	ip, [r7, #124]	; 0x7c
		  senddata[3]=ring_counter;
 8003c84:	f896 e000 	ldrb.w	lr, [r6]
 8003c88:	ee77 7a67 	vsub.f32	s15, s14, s15
		  senddata[0]=0xFA;
 8003c8c:	f64f 31fa 	movw	r1, #64506	; 0xfbfa
 8003c90:	f8ad 1008 	strh.w	r1, [sp, #8]
		  senddata[2]=send_no+10;
 8003c94:	ee17 1a90 	vmov	r1, s15
 8003c98:	2400      	movs	r4, #0
 8003c9a:	f365 0407 	bfi	r4, r5, #0, #8
 8003c9e:	ea4f 6811 	mov.w	r8, r1, lsr #24
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	f368 0507 	bfi	r5, r8, #0, #8
 8003ca8:	f36c 250f 	bfi	r5, ip, #8, #8
		  senddata[3]=ring_counter;
 8003cac:	f04f 0c00 	mov.w	ip, #0
 8003cb0:	f363 0c07 	bfi	ip, r3, #0, #8
 8003cb4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8003cb8:	f363 4517 	bfi	r5, r3, #16, #8
 8003cbc:	7873      	ldrb	r3, [r6, #1]
 8003cbe:	f36e 2c0f 	bfi	ip, lr, #8, #8
 8003cc2:	f363 4c17 	bfi	ip, r3, #16, #8
 8003cc6:	78b3      	ldrb	r3, [r6, #2]
 8003cc8:	f363 6c1f 	bfi	ip, r3, #24, #8
 8003ccc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003cd0:	f8cd c00b 	str.w	ip, [sp, #11]
 8003cd4:	f361 240f 	bfi	r4, r1, #8, #8
 8003cd8:	f363 651f 	bfi	r5, r3, #24, #8
 8003cdc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003ce0:	f363 4417 	bfi	r4, r3, #16, #8
 8003ce4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8003ce8:	f361 641f 	bfi	r4, r1, #24, #8
		  senddata[2]=send_no+10;
 8003cec:	230a      	movs	r3, #10
		  senddata[15]=can_raw.ball_detection[3];
 8003cee:	f897 c07f 	ldrb.w	ip, [r7, #127]	; 0x7f
		  senddata[3]=ring_counter;
 8003cf2:	f8cd 5013 	str.w	r5, [sp, #19]
 8003cf6:	f8cd 400f 	str.w	r4, [sp, #15]
		  senddata[2]=send_no+10;
 8003cfa:	f88d 300a 	strb.w	r3, [sp, #10]
	  send_no++;
 8003cfe:	3201      	adds	r2, #1
	      senddata[15]=temp[3];
 8003d00:	f88d c017 	strb.w	ip, [sp, #23]
	  send_no++;
 8003d04:	7002      	strb	r2, [r0, #0]
	  if(send_no>4){send_no=0;}
 8003d06:	e7aa      	b.n	8003c5e <sendRobotInfo+0x86>
		  senddata[1]=0xFB;
 8003d08:	497c      	ldr	r1, [pc, #496]	; (8003efc <sendRobotInfo+0x324>)
		  senddata[0]=0xFA;
 8003d0a:	f64f 34fa 	movw	r4, #64506	; 0xfbfa
		  senddata[12]=(uint8_t)can_raw.current[0];
 8003d0e:	edd1 6a1a 	vldr	s13, [r1, #104]	; 0x68
		  senddata[0]=0xFA;
 8003d12:	f8ad 4008 	strh.w	r4, [sp, #8]
		  senddata[2]=send_no+10;
 8003d16:	240b      	movs	r4, #11
 8003d18:	79cd      	ldrb	r5, [r1, #7]
 8003d1a:	f88d 400a 	strb.w	r4, [sp, #10]
		  senddata[12]=(uint8_t)can_raw.current[0];
 8003d1e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8003d22:	f8d1 4003 	ldr.w	r4, [r1, #3]
		  senddata[13]=(uint8_t)can_raw.current[1];
 8003d26:	ed91 7a1b 	vldr	s14, [r1, #108]	; 0x6c
		  senddata[3]=ring_counter;
 8003d2a:	f8cd 400f 	str.w	r4, [sp, #15]
 8003d2e:	2400      	movs	r4, #0
 8003d30:	f365 0407 	bfi	r4, r5, #0, #8
 8003d34:	ee16 5a90 	vmov	r5, s13
		  senddata[13]=(uint8_t)can_raw.current[1];
 8003d38:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003d3c:	f365 240f 	bfi	r4, r5, #8, #8
		  senddata[3]=ring_counter;
 8003d40:	2500      	movs	r5, #0
 8003d42:	f363 0507 	bfi	r5, r3, #0, #8
 8003d46:	ee17 3a10 	vmov	r3, s14
 8003d4a:	780e      	ldrb	r6, [r1, #0]
		  senddata[14]=(uint8_t)can_raw.current[2];
 8003d4c:	edd1 7a1c 	vldr	s15, [r1, #112]	; 0x70
		  senddata[15]=(uint8_t)can_raw.current[3];
 8003d50:	ed91 6a1d 	vldr	s12, [r1, #116]	; 0x74
 8003d54:	f363 4417 	bfi	r4, r3, #16, #8
		  senddata[3]=ring_counter;
 8003d58:	784b      	ldrb	r3, [r1, #1]
 8003d5a:	f366 250f 	bfi	r5, r6, #8, #8
 8003d5e:	f363 4517 	bfi	r5, r3, #16, #8
		  senddata[14]=(uint8_t)can_raw.current[2];
 8003d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		  senddata[3]=ring_counter;
 8003d66:	788b      	ldrb	r3, [r1, #2]
		  senddata[15]=(uint8_t)can_raw.current[3];
 8003d68:	eebc 6ac6 	vcvt.u32.f32	s12, s12
		  senddata[3]=ring_counter;
 8003d6c:	f363 651f 	bfi	r5, r3, #24, #8
 8003d70:	ee17 3a90 	vmov	r3, s15
		  senddata[15]=(uint8_t)can_raw.current[3];
 8003d74:	ed8d 6a01 	vstr	s12, [sp, #4]
 8003d78:	f363 641f 	bfi	r4, r3, #24, #8
 8003d7c:	f89d c004 	ldrb.w	ip, [sp, #4]
		  senddata[3]=ring_counter;
 8003d80:	f8cd 500b 	str.w	r5, [sp, #11]
 8003d84:	f8cd 4013 	str.w	r4, [sp, #19]
		break;
 8003d88:	e7b9      	b.n	8003cfe <sendRobotInfo+0x126>
		  senddata[8]=(uint8_t)can_raw.temperature[3];
 8003d8a:	495c      	ldr	r1, [pc, #368]	; (8003efc <sendRobotInfo+0x324>)
		  senddata[4]=kick_state / 10;
 8003d8c:	4c5c      	ldr	r4, [pc, #368]	; (8003f00 <sendRobotInfo+0x328>)
		  senddata[8]=(uint8_t)can_raw.temperature[3];
 8003d8e:	edd1 4a16 	vldr	s9, [r1, #88]	; 0x58
		  senddata[4]=kick_state / 10;
 8003d92:	f8b4 c000 	ldrh.w	ip, [r4]
		  senddata[9]=(uint8_t)can_raw.temperature[4];
 8003d96:	ed91 5a17 	vldr	s10, [r1, #92]	; 0x5c
		  senddata[3]=ring_counter;
 8003d9a:	f88d 300b 	strb.w	r3, [sp, #11]
		  senddata[8]=(uint8_t)can_raw.temperature[3];
 8003d9e:	eefc 4ae4 	vcvt.u32.f32	s9, s9
		  senddata[4]=kick_state / 10;
 8003da2:	4b58      	ldr	r3, [pc, #352]	; (8003f04 <sendRobotInfo+0x32c>)
		  senddata[5]=(uint8_t)can_raw.temperature[0];
 8003da4:	edd1 5a13 	vldr	s11, [r1, #76]	; 0x4c
		  senddata[10]=(uint8_t)can_raw.temperature[5];
 8003da8:	ed91 6a18 	vldr	s12, [r1, #96]	; 0x60
		  senddata[6]=(uint8_t)can_raw.temperature[1];
 8003dac:	edd1 6a14 	vldr	s13, [r1, #80]	; 0x50
		  senddata[11]=(uint8_t)can_raw.temperature[6];
 8003db0:	ed91 7a19 	vldr	s14, [r1, #100]	; 0x64
		  senddata[7]=(uint8_t)can_raw.temperature[2];
 8003db4:	edd1 7a15 	vldr	s15, [r1, #84]	; 0x54
		  senddata[0]=0xFA;
 8003db8:	f64f 34fa 	movw	r4, #64506	; 0xfbfa
		  senddata[4]=kick_state / 10;
 8003dbc:	fa1f fc8c 	uxth.w	ip, ip
		  senddata[0]=0xFA;
 8003dc0:	f8ad 4008 	strh.w	r4, [sp, #8]
		  senddata[9]=(uint8_t)can_raw.temperature[4];
 8003dc4:	eebc 5ac5 	vcvt.u32.f32	s10, s10
		  senddata[4]=kick_state / 10;
 8003dc8:	fba3 430c 	umull	r4, r3, r3, ip
 8003dcc:	ee14 4a90 	vmov	r4, s9
 8003dd0:	2500      	movs	r5, #0
 8003dd2:	f364 0507 	bfi	r5, r4, #0, #8
 8003dd6:	ee15 4a10 	vmov	r4, s10
		  senddata[5]=(uint8_t)can_raw.temperature[0];
 8003dda:	eefc 5ae5 	vcvt.u32.f32	s11, s11
		  senddata[4]=kick_state / 10;
 8003dde:	08db      	lsrs	r3, r3, #3
 8003de0:	f364 250f 	bfi	r5, r4, #8, #8
 8003de4:	2400      	movs	r4, #0
 8003de6:	f363 0407 	bfi	r4, r3, #0, #8
		  senddata[10]=(uint8_t)can_raw.temperature[5];
 8003dea:	eebc 6ac6 	vcvt.u32.f32	s12, s12
		  senddata[4]=kick_state / 10;
 8003dee:	ee15 3a90 	vmov	r3, s11
		  senddata[6]=(uint8_t)can_raw.temperature[1];
 8003df2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
		  senddata[4]=kick_state / 10;
 8003df6:	f363 240f 	bfi	r4, r3, #8, #8
 8003dfa:	ee16 3a10 	vmov	r3, s12
		  senddata[11]=(uint8_t)can_raw.temperature[6];
 8003dfe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003e02:	f363 4517 	bfi	r5, r3, #16, #8
		  senddata[4]=kick_state / 10;
 8003e06:	ee16 3a90 	vmov	r3, s13
 8003e0a:	f363 4417 	bfi	r4, r3, #16, #8
 8003e0e:	ee17 3a10 	vmov	r3, s14
		  senddata[7]=(uint8_t)can_raw.temperature[2];
 8003e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e16:	f363 651f 	bfi	r5, r3, #24, #8
		  senddata[12]=temp[0];
 8003e1a:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
 8003e1c:	f8ad 3014 	strh.w	r3, [sp, #20]
		  senddata[14]=temp[2];
 8003e20:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8003e24:	f88d 3016 	strb.w	r3, [sp, #22]
		  senddata[4]=kick_state / 10;
 8003e28:	ee17 3a90 	vmov	r3, s15
 8003e2c:	f363 641f 	bfi	r4, r3, #24, #8
		  senddata[2]=send_no+10;
 8003e30:	230c      	movs	r3, #12
		  senddata[15]=temp[3];
 8003e32:	f891 c033 	ldrb.w	ip, [r1, #51]	; 0x33
		  senddata[4]=kick_state / 10;
 8003e36:	9504      	str	r5, [sp, #16]
 8003e38:	9403      	str	r4, [sp, #12]
		  senddata[2]=send_no+10;
 8003e3a:	f88d 300a 	strb.w	r3, [sp, #10]
		break;
 8003e3e:	e75e      	b.n	8003cfe <sendRobotInfo+0x126>
		  senddata[7]=temp[3];
 8003e40:	4d2e      	ldr	r5, [pc, #184]	; (8003efc <sendRobotInfo+0x324>)
		  senddata[0]=0xFA;
 8003e42:	f64f 34fa 	movw	r4, #64506	; 0xfbfa
 8003e46:	f895 604b 	ldrb.w	r6, [r5, #75]	; 0x4b
 8003e4a:	f8ad 4008 	strh.w	r4, [sp, #8]
		  senddata[8]=temp[0];
 8003e4e:	4c26      	ldr	r4, [pc, #152]	; (8003ee8 <sendRobotInfo+0x310>)
 8003e50:	2100      	movs	r1, #0
 8003e52:	f366 0107 	bfi	r1, r6, #0, #8
	      senddata[3]=ring_counter;
 8003e56:	f04f 0c00 	mov.w	ip, #0
 8003e5a:	7e26      	ldrb	r6, [r4, #24]
 8003e5c:	f363 0c07 	bfi	ip, r3, #0, #8
 8003e60:	7e63      	ldrb	r3, [r4, #25]
 8003e62:	f366 210f 	bfi	r1, r6, #8, #8
 8003e66:	f895 6048 	ldrb.w	r6, [r5, #72]	; 0x48
 8003e6a:	f363 4117 	bfi	r1, r3, #16, #8
 8003e6e:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
 8003e72:	f366 2c0f 	bfi	ip, r6, #8, #8
 8003e76:	f363 4c17 	bfi	ip, r3, #16, #8
 8003e7a:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 8003e7e:	f363 6c1f 	bfi	ip, r3, #24, #8
 8003e82:	7ea3      	ldrb	r3, [r4, #26]
 8003e84:	f8cd c00b 	str.w	ip, [sp, #11]
 8003e88:	f363 611f 	bfi	r1, r3, #24, #8
 8003e8c:	f8d4 301b 	ldr.w	r3, [r4, #27]
 8003e90:	f8cd 3013 	str.w	r3, [sp, #19]
		  senddata[2]=send_no+10;
 8003e94:	230d      	movs	r3, #13
	      senddata[15]=temp[3];
 8003e96:	f894 c01f 	ldrb.w	ip, [r4, #31]
	      senddata[3]=ring_counter;
 8003e9a:	f8cd 100f 	str.w	r1, [sp, #15]
		  senddata[2]=send_no+10;
 8003e9e:	f88d 300a 	strb.w	r3, [sp, #10]
		break;
 8003ea2:	e72c      	b.n	8003cfe <sendRobotInfo+0x126>
	  send_no++;
 8003ea4:	1c51      	adds	r1, r2, #1
		  senddata[4]=connection.check_ver;
 8003ea6:	4d11      	ldr	r5, [pc, #68]	; (8003eec <sendRobotInfo+0x314>)
		  senddata[3]=ring_counter;
 8003ea8:	f88d 300b 	strb.w	r3, [sp, #11]
	  send_no++;
 8003eac:	b2cb      	uxtb	r3, r1
		  senddata[5]=0;
 8003eae:	2400      	movs	r4, #0
		  senddata[4]=connection.check_ver;
 8003eb0:	78ed      	ldrb	r5, [r5, #3]
 8003eb2:	f88d 500c 	strb.w	r5, [sp, #12]
		  senddata[0]=0xFA;
 8003eb6:	f64f 36fa 	movw	r6, #64506	; 0xfbfa
		  senddata[2]=send_no+100;
 8003eba:	3264      	adds	r2, #100	; 0x64
	  if(send_no>4){send_no=0;}
 8003ebc:	2b04      	cmp	r3, #4
		  senddata[0]=0xFA;
 8003ebe:	f8ad 6008 	strh.w	r6, [sp, #8]
		  senddata[2]=send_no+100;
 8003ec2:	f88d 200a 	strb.w	r2, [sp, #10]
		  senddata[5]=0;
 8003ec6:	f8cd 400d 	str.w	r4, [sp, #13]
 8003eca:	f8cd 4011 	str.w	r4, [sp, #17]
		  senddata[13]=0;
 8003ece:	f8ad 4015 	strh.w	r4, [sp, #21]
		  senddata[15]=0;
 8003ed2:	f88d 4017 	strb.w	r4, [sp, #23]
	  send_no++;
 8003ed6:	7003      	strb	r3, [r0, #0]
	  if(send_no>4){send_no=0;}
 8003ed8:	f63f aebf 	bhi.w	8003c5a <sendRobotInfo+0x82>
 8003edc:	e6bf      	b.n	8003c5e <sendRobotInfo+0x86>
 8003ede:	bf00      	nop
 8003ee0:	20001580 	.word	0x20001580
 8003ee4:	20001581 	.word	0x20001581
 8003ee8:	20001004 	.word	0x20001004
 8003eec:	20000f08 	.word	0x20000f08
 8003ef0:	200018e0 	.word	0x200018e0
 8003ef4:	20000f78 	.word	0x20000f78
 8003ef8:	20000e30 	.word	0x20000e30
 8003efc:	20000e84 	.word	0x20000e84
 8003f00:	20000f88 	.word	0x20000f88
 8003f04:	cccccccd 	.word	0xcccccccd

08003f08 <parseRxCmd>:

void parseRxCmd()
{
 8003f08:	b570      	push	{r4, r5, r6, lr}
  connection.cmd_cnt++;
 8003f0a:	4b67      	ldr	r3, [pc, #412]	; (80040a8 <parseRxCmd+0x1a0>)
  connection.check_ver = data_from_ether[1];
 8003f0c:	4e67      	ldr	r6, [pc, #412]	; (80040ac <parseRxCmd+0x1a4>)
  connection.cmd_cnt++;
 8003f0e:	685a      	ldr	r2, [r3, #4]

  // time out
  if (connection.connected_ai == 0) {
 8003f10:	781d      	ldrb	r5, [r3, #0]
  connection.check_ver = data_from_ether[1];
 8003f12:	7871      	ldrb	r1, [r6, #1]
  connection.cmd_cnt++;
 8003f14:	3201      	adds	r2, #1
{
 8003f16:	ed2d 8b02 	vpush	{d8}
  connection.cmd_cnt++;
 8003f1a:	605a      	str	r2, [r3, #4]
  connection.check_ver = data_from_ether[1];
 8003f1c:	70d9      	strb	r1, [r3, #3]
  if (connection.connected_ai == 0) {
 8003f1e:	2d00      	cmp	r5, #0
 8003f20:	f000 80a3 	beq.w	800406a <parseRxCmd+0x162>
    resetAiCmdData();
    return;
  }

  ai_cmd.local_target_speed[0] = two_to_float(&data_from_ether[2]) * AI_CMD_VEL_MAX_MPS;
 8003f24:	1cb0      	adds	r0, r6, #2
 8003f26:	f001 fb87 	bl	8005638 <two_to_float>
 8003f2a:	eeb1 8a0c 	vmov.f32	s16, #28	; 0x40e00000  7.0
 8003f2e:	4c60      	ldr	r4, [pc, #384]	; (80040b0 <parseRxCmd+0x1a8>)
 8003f30:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[4]) * AI_CMD_VEL_MAX_MPS;
 8003f34:	1d30      	adds	r0, r6, #4
  ai_cmd.local_target_speed[0] = two_to_float(&data_from_ether[2]) * AI_CMD_VEL_MAX_MPS;
 8003f36:	ed84 0a05 	vstr	s0, [r4, #20]
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[4]) * AI_CMD_VEL_MAX_MPS;
 8003f3a:	f001 fb7d 	bl	8005638 <two_to_float>
 8003f3e:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd.global_vision_theta = two_to_float(&data_from_ether[6]) * M_PI;
 8003f42:	1db0      	adds	r0, r6, #6
  ai_cmd.local_target_speed[1] = two_to_float(&data_from_ether[4]) * AI_CMD_VEL_MAX_MPS;
 8003f44:	ed84 0a06 	vstr	s0, [r4, #24]
  ai_cmd.global_vision_theta = two_to_float(&data_from_ether[6]) * M_PI;
 8003f48:	f001 fb76 	bl	8005638 <two_to_float>
 8003f4c:	ee10 0a10 	vmov	r0, s0
 8003f50:	f7fc fb22 	bl	8000598 <__aeabi_f2d>
 8003f54:	a352      	add	r3, pc, #328	; (adr r3, 80040a0 <parseRxCmd+0x198>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f7fc fb75 	bl	8000648 <__aeabi_dmul>
 8003f5e:	f7fc fe6b 	bl	8000c38 <__aeabi_d2f>
 8003f62:	4603      	mov	r3, r0
  ai_cmd.target_theta = two_to_float(&data_from_ether[8]) * M_PI;
 8003f64:	f106 0008 	add.w	r0, r6, #8
  ai_cmd.global_vision_theta = two_to_float(&data_from_ether[6]) * M_PI;
 8003f68:	6063      	str	r3, [r4, #4]
  ai_cmd.target_theta = two_to_float(&data_from_ether[8]) * M_PI;
 8003f6a:	f001 fb65 	bl	8005638 <two_to_float>
 8003f6e:	ee10 0a10 	vmov	r0, s0
 8003f72:	f7fc fb11 	bl	8000598 <__aeabi_f2d>
 8003f76:	a34a      	add	r3, pc, #296	; (adr r3, 80040a0 <parseRxCmd+0x198>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc fb64 	bl	8000648 <__aeabi_dmul>
 8003f80:	f7fc fe5a 	bl	8000c38 <__aeabi_d2f>
  if (data_from_ether[10] > 100) {
 8003f84:	7ab3      	ldrb	r3, [r6, #10]
  ai_cmd.target_theta = two_to_float(&data_from_ether[8]) * M_PI;
 8003f86:	6020      	str	r0, [r4, #0]
  if (data_from_ether[10] > 100) {
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d864      	bhi.n	8004056 <parseRxCmd+0x14e>
    ai_cmd.chip_en = true;
    ai_cmd.kick_power = (float)(data_from_ether[10] - 100) / 20;
  } else {
    ai_cmd.kick_power = (float)data_from_ether[10] / 20;
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80040b4 <parseRxCmd+0x1ac>
 8003f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ai_cmd.chip_en = false;
 8003f98:	2500      	movs	r5, #0
    ai_cmd.kick_power = (float)data_from_ether[10] / 20;
 8003f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
  ai_cmd.drible_power = (float)data_from_ether[11] / 20;
 8003f9e:	7af3      	ldrb	r3, [r6, #11]
 8003fa0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80040b4 <parseRxCmd+0x1ac>

  ai_cmd.allow_local_flags = data_from_ether[12];

  ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[13]);
 8003fa4:	4844      	ldr	r0, [pc, #272]	; (80040b8 <parseRxCmd+0x1b0>)
 8003fa6:	edc4 7a03 	vstr	s15, [r4, #12]
  ai_cmd.drible_power = (float)data_from_ether[11] / 20;
 8003faa:	ee07 3a10 	vmov	s14, r3
 8003fae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  ai_cmd.allow_local_flags = data_from_ether[12];
 8003fb2:	7b33      	ldrb	r3, [r6, #12]
 8003fb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  ai_cmd.drible_power = (float)data_from_ether[11] / 20;
 8003fb8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003fbc:	7425      	strb	r5, [r4, #16]
 8003fbe:	ed84 7a02 	vstr	s14, [r4, #8]
  ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[13]);
 8003fc2:	f001 fb5d 	bl	8005680 <two_to_int>
 8003fc6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[15]);
 8003fca:	483c      	ldr	r0, [pc, #240]	; (80040bc <parseRxCmd+0x1b4>)
  ai_cmd.global_ball_position[0] = two_to_int(&data_from_ether[13]);
 8003fcc:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
  ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[15]);
 8003fd0:	f001 fb56 	bl	8005680 <two_to_int>
 8003fd4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[17]);
 8003fd8:	4839      	ldr	r0, [pc, #228]	; (80040c0 <parseRxCmd+0x1b8>)
  ai_cmd.global_ball_position[1] = two_to_int(&data_from_ether[15]);
 8003fda:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[17]);
 8003fde:	f001 fb4f 	bl	8005680 <two_to_int>
 8003fe2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[19]);
 8003fe6:	4837      	ldr	r0, [pc, #220]	; (80040c4 <parseRxCmd+0x1bc>)
  ai_cmd.global_robot_position[0] = two_to_int(&data_from_ether[17]);
 8003fe8:	ed84 0a07 	vstr	s0, [r4, #28]
  ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[19]);
 8003fec:	f001 fb48 	bl	8005680 <two_to_int>
 8003ff0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  ai_cmd.global_target_position[0] = two_to_int(&data_from_ether[21]);
 8003ff4:	4834      	ldr	r0, [pc, #208]	; (80040c8 <parseRxCmd+0x1c0>)
  ai_cmd.global_robot_position[1] = two_to_int(&data_from_ether[19]);
 8003ff6:	ed84 0a08 	vstr	s0, [r4, #32]
  ai_cmd.global_target_position[0] = two_to_int(&data_from_ether[21]);
 8003ffa:	f001 fb41 	bl	8005680 <two_to_int>
 8003ffe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  ai_cmd.global_target_position[1] = two_to_int(&data_from_ether[23]);
 8004002:	4832      	ldr	r0, [pc, #200]	; (80040cc <parseRxCmd+0x1c4>)
  ai_cmd.global_target_position[0] = two_to_int(&data_from_ether[21]);
 8004004:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  ai_cmd.global_target_position[1] = two_to_int(&data_from_ether[23]);
 8004008:	f001 fb3a 	bl	8005680 <two_to_int>

  ai_cmd.ball_local_x = data_from_ether[RX_BUF_SIZE_ETHER - 8] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 7];
 800400c:	8f33      	ldrh	r3, [r6, #56]	; 0x38
  ai_cmd.ball_local_y = data_from_ether[RX_BUF_SIZE_ETHER - 6] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 5];
 800400e:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
  ai_cmd.ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
  ai_cmd.ball_local_FPS = data_from_ether[RX_BUF_SIZE_ETHER - 2];

  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8004010:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
  ai_cmd.ball_local_FPS = data_from_ether[RX_BUF_SIZE_ETHER - 2];
 8004014:	f896 103e 	ldrb.w	r1, [r6, #62]	; 0x3e
 8004018:	6461      	str	r1, [r4, #68]	; 0x44
  ai_cmd.ball_local_x = data_from_ether[RX_BUF_SIZE_ETHER - 8] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 7];
 800401a:	ba5b      	rev16	r3, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	63a3      	str	r3, [r4, #56]	; 0x38
  ai_cmd.ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 8004020:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
  ai_cmd.ball_local_y = data_from_ether[RX_BUF_SIZE_ETHER - 6] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 5];
 8004022:	ba52      	rev16	r2, r2
  ai_cmd.ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 8004024:	ba5b      	rev16	r3, r3
  ai_cmd.ball_local_y = data_from_ether[RX_BUF_SIZE_ETHER - 6] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 5];
 8004026:	b292      	uxth	r2, r2
  ai_cmd.ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 8004028:	b29b      	uxth	r3, r3
  ai_cmd.global_target_position[1] = two_to_int(&data_from_ether[23]);
 800402a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  ai_cmd.ball_local_radius = data_from_ether[RX_BUF_SIZE_ETHER - 4] << 8 | data_from_ether[RX_BUF_SIZE_ETHER - 3];
 800402e:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8004032:	43eb      	mvns	r3, r5
    ai_cmd.vision_lost_flag = false;
  } else {
    ai_cmd.vision_lost_flag = true;
  }

  if ((ai_cmd.allow_local_flags & FLAG_ENABLE_LOCAL_VISION) != 0) {
 8004034:	f3c5 02c0 	ubfx	r2, r5, #3, #1
  ai_cmd.global_target_position[1] = two_to_int(&data_from_ether[23]);
 8004038:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
  if ((ai_cmd.allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 800403c:	f003 0301 	and.w	r3, r3, #1
    ai_cmd.local_vision_en_flag = true;
  } else {
    ai_cmd.local_vision_en_flag = false;
  }

  if ((ai_cmd.allow_local_flags & FLAG_ENABLE_KEEPER_MODE) != 0) {
 8004040:	f3c5 0540 	ubfx	r5, r5, #1, #1
    ai_cmd.keeper_mode_en_flag = true;
  } else {
    ai_cmd.keeper_mode_en_flag = false;
  }
}
 8004044:	ecbd 8b02 	vpop	{d8}
  ai_cmd.vision_lost_flag = true;
 8004048:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  ai_cmd.local_vision_en_flag = false;
 800404c:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
  ai_cmd.keeper_mode_en_flag = false;
 8004050:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
}
 8004054:	bd70      	pop	{r4, r5, r6, pc}
    ai_cmd.kick_power = (float)(data_from_ether[10] - 100) / 20;
 8004056:	3b64      	subs	r3, #100	; 0x64
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80040b4 <parseRxCmd+0x1ac>
 8004060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004068:	e799      	b.n	8003f9e <parseRxCmd+0x96>
  ai_cmd.local_target_speed[0] = 0;
 800406a:	4c11      	ldr	r4, [pc, #68]	; (80040b0 <parseRxCmd+0x1a8>)
 800406c:	2300      	movs	r3, #0
 800406e:	6163      	str	r3, [r4, #20]
  ai_cmd.local_target_speed[1] = 0;
 8004070:	61a3      	str	r3, [r4, #24]
  ai_cmd.global_vision_theta = 0;
 8004072:	6063      	str	r3, [r4, #4]
  ai_cmd.target_theta = 0;
 8004074:	6023      	str	r3, [r4, #0]
  ai_cmd.kick_power = 0;
 8004076:	60e3      	str	r3, [r4, #12]
  ai_cmd.drible_power = 0;
 8004078:	60a3      	str	r3, [r4, #8]
  ai_cmd.global_ball_position[1] = 0;
 800407a:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  ai_cmd.global_robot_position[1] = 0;
 800407e:	e9c4 5507 	strd	r5, r5, [r4, #28]
  ai_cmd.global_target_position[1] = 0;
 8004082:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
  ai_cmd.ball_local_y = 0;
 8004086:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
  ai_cmd.ball_local_FPS = 0;
 800408a:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  ai_cmd.chip_en = false;
 800408e:	7425      	strb	r5, [r4, #16]
  ai_cmd.allow_local_flags = 0;
 8004090:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 8004094:	462a      	mov	r2, r5
 8004096:	2301      	movs	r3, #1
 8004098:	e7d4      	b.n	8004044 <parseRxCmd+0x13c>
 800409a:	bf00      	nop
 800409c:	f3af 8000 	nop.w
 80040a0:	54442d18 	.word	0x54442d18
 80040a4:	400921fb 	.word	0x400921fb
 80040a8:	20000f08 	.word	0x20000f08
 80040ac:	20000f18 	.word	0x20000f18
 80040b0:	20000e30 	.word	0x20000e30
 80040b4:	3d4ccccd 	.word	0x3d4ccccd
 80040b8:	20000f25 	.word	0x20000f25
 80040bc:	20000f27 	.word	0x20000f27
 80040c0:	20000f29 	.word	0x20000f29
 80040c4:	20000f2b 	.word	0x20000f2b
 80040c8:	20000f2d 	.word	0x20000f2d
 80040cc:	20000f2f 	.word	0x20000f2f

080040d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
  static int32_t uart_rx_cmd_idx = 0;
  uint8_t rx_data_tmp;

  if (huart->Instance == USART2) {
 80040d0:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_UART_RxCpltCallback+0x58>)
 80040d2:	6802      	ldr	r2, [r0, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d000      	beq.n	80040da <HAL_UART_RxCpltCallback+0xa>
 80040d8:	4770      	bx	lr
{
 80040da:	b510      	push	{r4, lr}
    rx_data_tmp = uart2_rx_it_buffer;
 80040dc:	4913      	ldr	r1, [pc, #76]	; (800412c <HAL_UART_RxCpltCallback+0x5c>)
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 80040de:	4814      	ldr	r0, [pc, #80]	; (8004130 <HAL_UART_RxCpltCallback+0x60>)
    rx_data_tmp = uart2_rx_it_buffer;
 80040e0:	780c      	ldrb	r4, [r1, #0]
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 80040e2:	2201      	movs	r2, #1
 80040e4:	f004 feb4 	bl	8008e50 <HAL_UART_Receive_IT>

    if (uart_rx_cmd_idx >= 0 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 80040e8:	4a12      	ldr	r2, [pc, #72]	; (8004134 <HAL_UART_RxCpltCallback+0x64>)
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	2b3f      	cmp	r3, #63	; 0x3f
 80040ee:	d806      	bhi.n	80040fe <HAL_UART_RxCpltCallback+0x2e>
      data_from_ether[uart_rx_cmd_idx] = rx_data_tmp;
 80040f0:	4911      	ldr	r1, [pc, #68]	; (8004138 <HAL_UART_RxCpltCallback+0x68>)
 80040f2:	54cc      	strb	r4, [r1, r3]
      uart_rx_cmd_idx++;
    }

    // data byte
    if (uart_rx_cmd_idx != -1 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
      uart_rx_cmd_idx++;
 80040f4:	3301      	adds	r3, #1
 80040f6:	6013      	str	r3, [r2, #0]
    }

    // end
    if (uart_rx_cmd_idx == RX_BUF_SIZE_ETHER) {
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d00b      	beq.n	8004114 <HAL_UART_RxCpltCallback+0x44>
      uart_rx_cmd_idx = -1;
      parseRxCmd();
      sendRobotInfo();
    }
  }
}
 80040fc:	bd10      	pop	{r4, pc}
    if (uart_rx_cmd_idx == -1 && rx_data_tmp == 254) {
 80040fe:	1c59      	adds	r1, r3, #1
 8004100:	d104      	bne.n	800410c <HAL_UART_RxCpltCallback+0x3c>
 8004102:	2cfe      	cmp	r4, #254	; 0xfe
 8004104:	d1fa      	bne.n	80040fc <HAL_UART_RxCpltCallback+0x2c>
      uart_rx_cmd_idx++;
 8004106:	2301      	movs	r3, #1
 8004108:	6013      	str	r3, [r2, #0]
}
 800410a:	bd10      	pop	{r4, pc}
    if (uart_rx_cmd_idx != -1 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 800410c:	2b3f      	cmp	r3, #63	; 0x3f
 800410e:	dcf3      	bgt.n	80040f8 <HAL_UART_RxCpltCallback+0x28>
      uart_rx_cmd_idx++;
 8004110:	3301      	adds	r3, #1
 8004112:	e7f0      	b.n	80040f6 <HAL_UART_RxCpltCallback+0x26>
      uart_rx_cmd_idx = -1;
 8004114:	f04f 33ff 	mov.w	r3, #4294967295
 8004118:	6013      	str	r3, [r2, #0]
      parseRxCmd();
 800411a:	f7ff fef5 	bl	8003f08 <parseRxCmd>
}
 800411e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sendRobotInfo();
 8004122:	f7ff bd59 	b.w	8003bd8 <sendRobotInfo>
 8004126:	bf00      	nop
 8004128:	40004400 	.word	0x40004400
 800412c:	200015b8 	.word	0x200015b8
 8004130:	200018e0 	.word	0x200018e0
 8004134:	200015bc 	.word	0x200015bc
 8004138:	20000f18 	.word	0x20000f18

0800413c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef * huart)
{
  if (huart->Instance == hlpuart1.Instance) {
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_UART_TxCpltCallback+0x10>)
 800413e:	6802      	ldr	r2, [r0, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d000      	beq.n	8004148 <HAL_UART_TxCpltCallback+0xc>
    dma_printf_send_it(huart);
  }
}
 8004146:	4770      	bx	lr
    dma_printf_send_it(huart);
 8004148:	f7fd bc10 	b.w	800196c <dma_printf_send_it>
 800414c:	20001850 	.word	0x20001850

08004150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004150:	b508      	push	{r3, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 8004152:	ed9f 8a14 	vldr	s16, [pc, #80]	; 80041a4 <Error_Handler+0x54>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1) {
    maintask_stop(255, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8004156:	4c14      	ldr	r4, [pc, #80]	; (80041a8 <Error_Handler+0x58>)
  omni_move(0.0, 0.0, 0.0, 0.0);
 8004158:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80041a4 <Error_Handler+0x54>
 800415c:	eef0 1a48 	vmov.f32	s3, s16
 8004160:	eeb0 0a41 	vmov.f32	s0, s2
 8004164:	eef0 0a41 	vmov.f32	s1, s2
 8004168:	f000 fcc2 	bl	8004af0 <omni_move>
  actuator_motor5(0.0, 0.0);
 800416c:	eef0 0a48 	vmov.f32	s1, s16
 8004170:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80041a4 <Error_Handler+0x54>
 8004174:	f7fc ffae 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8004178:	2100      	movs	r1, #0
 800417a:	2001      	movs	r0, #1
 800417c:	f7fc fff6 	bl	800116c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8004180:	eeb0 0a48 	vmov.f32	s0, s16
 8004184:	f7fc ffea 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8004188:	f7fc ffd6 	bl	8001138 <actuator_dribbler_down>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800418c:	4620      	mov	r0, r4
 800418e:	2201      	movs	r2, #1
 8004190:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004194:	f002 ffb0 	bl	80070f8 <HAL_GPIO_WritePin>
    actuator_buzzer(200, 200);
 8004198:	21c8      	movs	r1, #200	; 0xc8
 800419a:	4608      	mov	r0, r1
 800419c:	f7fd f80c 	bl	80011b8 <actuator_buzzer>
  while (1) {
 80041a0:	e7da      	b.n	8004158 <Error_Handler+0x8>
 80041a2:	bf00      	nop
 80041a4:	00000000 	.word	0x00000000
 80041a8:	48000400 	.word	0x48000400

080041ac <SystemClock_Config>:
{
 80041ac:	b510      	push	{r4, lr}
 80041ae:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041b0:	2238      	movs	r2, #56	; 0x38
 80041b2:	2100      	movs	r1, #0
 80041b4:	a806      	add	r0, sp, #24
 80041b6:	f007 f833 	bl	800b220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041ba:	2000      	movs	r0, #0
 80041bc:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80041c0:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80041c4:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80041c6:	f002 ffa7 	bl	8007118 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041ca:	2001      	movs	r0, #1
 80041cc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041d0:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041d6:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 80041d8:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80041da:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041dc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 80041e0:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041e4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041e8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80041ea:	f003 f813 	bl	8007214 <HAL_RCC_OscConfig>
 80041ee:	b970      	cbnz	r0, 800420e <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80041f0:	2104      	movs	r1, #4
 80041f2:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041f4:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80041f6:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041fa:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041fe:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004202:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004204:	f003 fa8a 	bl	800771c <HAL_RCC_ClockConfig>
 8004208:	b908      	cbnz	r0, 800420e <SystemClock_Config+0x62>
}
 800420a:	b014      	add	sp, #80	; 0x50
 800420c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800420e:	f7ff ff9f 	bl	8004150 <Error_Handler>
 8004212:	bf00      	nop
 8004214:	0000      	movs	r0, r0
	...

08004218 <main>:
{
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	ed2d 8b02 	vpush	{d8}
 8004220:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8004222:	f001 fa91 	bl	8005748 <HAL_Init>
  kick_state = 0;
 8004226:	4cbe      	ldr	r4, [pc, #760]	; (8004520 <main+0x308>)
  SystemClock_Config();
 8004228:	f7ff ffc0 	bl	80041ac <SystemClock_Config>
  MX_GPIO_Init();
 800422c:	f7fd fd0e 	bl	8001c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8004230:	f7fd fb3a 	bl	80018a8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004234:	f7fd fbfe 	bl	8001a34 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8004238:	f000 feca 	bl	8004fd0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800423c:	f000 ff16 	bl	800506c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004240:	f000 ff5c 	bl	80050fc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8004244:	f000 fcc6 	bl	8004bd4 <MX_SPI1_Init>
  MX_TIM5_Init();
 8004248:	f000 fdf2 	bl	8004e30 <MX_TIM5_Init>
  MX_TIM7_Init();
 800424c:	f000 fe5e 	bl	8004f0c <MX_TIM7_Init>
  MX_ADC5_Init();
 8004250:	f7fd f894 	bl	800137c <MX_ADC5_Init>
  MX_ADC3_Init();
 8004254:	f7fd f83a 	bl	80012cc <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8004258:	f7fd fc12 	bl	8001a80 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 800425c:	f7fc ffe0 	bl	8001220 <MX_ADC1_Init>
  send_no=0;
 8004260:	4ab0      	ldr	r2, [pc, #704]	; (8004524 <main+0x30c>)
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004262:	48b1      	ldr	r0, [pc, #708]	; (8004528 <main+0x310>)
  kick_state = 0;
 8004264:	2300      	movs	r3, #0
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004266:	2104      	movs	r1, #4
  kick_state = 0;
 8004268:	8023      	strh	r3, [r4, #0]
  send_no=0;
 800426a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800426c:	f004 fa76 	bl	800875c <HAL_TIM_PWM_Start>
 8004270:	2404      	movs	r4, #4
    actuator_buzzer(20, 20);
 8004272:	2114      	movs	r1, #20
 8004274:	4608      	mov	r0, r1
 8004276:	f7fc ff9f 	bl	80011b8 <actuator_buzzer>
  for (int i = 0; i < 4; i++) {
 800427a:	3c01      	subs	r4, #1
 800427c:	d1f9      	bne.n	8004272 <main+0x5a>
  setbuf(stdin, NULL);
 800427e:	4dab      	ldr	r5, [pc, #684]	; (800452c <main+0x314>)
  morse_long();
 8004280:	f7fc ffbc 	bl	80011fc <morse_long>
  setbuf(stdin, NULL);
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	4621      	mov	r1, r4
 8004288:	6858      	ldr	r0, [r3, #4]
 800428a:	f006 fe19 	bl	800aec0 <setbuf>
  setbuf(stdout, NULL);
 800428e:	682b      	ldr	r3, [r5, #0]
 8004290:	4621      	mov	r1, r4
 8004292:	6898      	ldr	r0, [r3, #8]
 8004294:	f006 fe14 	bl	800aec0 <setbuf>
  setbuf(stderr, NULL);
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	4621      	mov	r1, r4
 800429c:	68d8      	ldr	r0, [r3, #12]
 800429e:	f006 fe0f 	bl	800aec0 <setbuf>
  dma_printf_init(&hlpuart1);
 80042a2:	48a3      	ldr	r0, [pc, #652]	; (8004530 <main+0x318>)
 80042a4:	f7fd fb52 	bl	800194c <dma_printf_init>
  dma_scanf_init(&hlpuart1);
 80042a8:	48a1      	ldr	r0, [pc, #644]	; (8004530 <main+0x318>)
 80042aa:	f7fd fbaf 	bl	8001a0c <dma_scanf_init>
  printf("start\r\n");
 80042ae:	48a1      	ldr	r0, [pc, #644]	; (8004534 <main+0x31c>)
 80042b0:	f006 fdfe 	bl	800aeb0 <puts>
  HAL_UART_Init(&hlpuart1);
 80042b4:	489e      	ldr	r0, [pc, #632]	; (8004530 <main+0x318>)
 80042b6:	f005 feed 	bl	800a094 <HAL_UART_Init>
  HAL_UART_Init(&huart2);
 80042ba:	489f      	ldr	r0, [pc, #636]	; (8004538 <main+0x320>)
 80042bc:	f005 feea 	bl	800a094 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 80042c0:	499e      	ldr	r1, [pc, #632]	; (800453c <main+0x324>)
 80042c2:	489d      	ldr	r0, [pc, #628]	; (8004538 <main+0x320>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	f004 fdc3 	bl	8008e50 <HAL_UART_Receive_IT>
  can1_init_ibis(&hfdcan1);
 80042ca:	489d      	ldr	r0, [pc, #628]	; (8004540 <main+0x328>)
 80042cc:	f7fd f988 	bl	80015e0 <can1_init_ibis>
  can2_init_ibis(&hfdcan2);
 80042d0:	489c      	ldr	r0, [pc, #624]	; (8004544 <main+0x32c>)
 80042d2:	f7fd f9d5 	bl	8001680 <can2_init_ibis>
  HAL_FDCAN_Start(&hfdcan1);
 80042d6:	489a      	ldr	r0, [pc, #616]	; (8004540 <main+0x328>)
 80042d8:	f002 fbba 	bl	8006a50 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80042dc:	4898      	ldr	r0, [pc, #608]	; (8004540 <main+0x328>)
 80042de:	4622      	mov	r2, r4
 80042e0:	2101      	movs	r1, #1
 80042e2:	f002 fcbd 	bl	8006c60 <HAL_FDCAN_ActivateNotification>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	f040 80fb 	bne.w	80044e2 <main+0x2ca>
  HAL_FDCAN_Start(&hfdcan2);
 80042ec:	4895      	ldr	r0, [pc, #596]	; (8004544 <main+0x32c>)
 80042ee:	f002 fbaf 	bl	8006a50 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80042f2:	4894      	ldr	r0, [pc, #592]	; (8004544 <main+0x32c>)
 80042f4:	4622      	mov	r2, r4
 80042f6:	2101      	movs	r1, #1
 80042f8:	f002 fcb2 	bl	8006c60 <HAL_FDCAN_ActivateNotification>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	f040 80f0 	bne.w	80044e2 <main+0x2ca>
  HAL_ADC_Start_DMA(&hadc5, &adc_sw_data, 1);
 8004302:	2201      	movs	r2, #1
 8004304:	4990      	ldr	r1, [pc, #576]	; (8004548 <main+0x330>)
 8004306:	4891      	ldr	r0, [pc, #580]	; (800454c <main+0x334>)
 8004308:	f001 fe8a 	bl	8006020 <HAL_ADC_Start_DMA>
  actuator_power_ONOFF(0);
 800430c:	4620      	mov	r0, r4
 800430e:	f7fc ff2f 	bl	8001170 <actuator_power_ONOFF>
  HAL_Delay(20);
 8004312:	2014      	movs	r0, #20
 8004314:	f001 fa34 	bl	8005780 <HAL_Delay>
  actuator_motor1(0.0, 0.0);
 8004318:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8004550 <main+0x338>
 800431c:	eeb0 0a60 	vmov.f32	s0, s1
 8004320:	f7fc fe58 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 8004324:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8004550 <main+0x338>
 8004328:	eeb0 0a60 	vmov.f32	s0, s1
 800432c:	f7fc fe72 	bl	8001014 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 8004330:	eddf 0a87 	vldr	s1, [pc, #540]	; 8004550 <main+0x338>
 8004334:	eeb0 0a60 	vmov.f32	s0, s1
 8004338:	f7fc fe8c 	bl	8001054 <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 800433c:	eddf 0a84 	vldr	s1, [pc, #528]	; 8004550 <main+0x338>
 8004340:	eeb0 0a60 	vmov.f32	s0, s1
 8004344:	f7fc fea6 	bl	8001094 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 8004348:	eddf 0a81 	vldr	s1, [pc, #516]	; 8004550 <main+0x338>
 800434c:	eeb0 0a60 	vmov.f32	s0, s1
 8004350:	f7fc fec0 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 1);
 8004354:	2101      	movs	r1, #1
 8004356:	4608      	mov	r0, r1
 8004358:	f7fc ff08 	bl	800116c <actuator_kicker>
  actuator_kicker_voltage(150.0);
 800435c:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004554 <main+0x33c>
 8004360:	f7fc fefc 	bl	800115c <actuator_kicker_voltage>
  actuator_power_param(1, 15.0);  // min voltage
 8004364:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8004368:	2001      	movs	r0, #1
 800436a:	f7fc ff15 	bl	8001198 <actuator_power_param>
  actuator_power_param(2, 35.0);  // max voltage
 800436e:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8004558 <main+0x340>
 8004372:	2002      	movs	r0, #2
 8004374:	f7fc ff10 	bl	8001198 <actuator_power_param>
  actuator_power_param(3, 50.0);  // max can_raw.current
 8004378:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800455c <main+0x344>
 800437c:	2003      	movs	r0, #3
 800437e:	f7fc ff0b 	bl	8001198 <actuator_power_param>
  actuator_power_param(4, 90.0);  // max temp(fet)
 8004382:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8004560 <main+0x348>
 8004386:	2004      	movs	r0, #4
 8004388:	f7fc ff06 	bl	8001198 <actuator_power_param>
  actuator_power_param(5, 90.0);  // max temp(solenoid)
 800438c:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8004560 <main+0x348>
 8004390:	2005      	movs	r0, #5
 8004392:	f7fc ff01 	bl	8001198 <actuator_power_param>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8004396:	4873      	ldr	r0, [pc, #460]	; (8004564 <main+0x34c>)
 8004398:	2201      	movs	r2, #1
 800439a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800439e:	f002 feab 	bl	80070f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80043a2:	2201      	movs	r2, #1
 80043a4:	4611      	mov	r1, r2
 80043a6:	486f      	ldr	r0, [pc, #444]	; (8004564 <main+0x34c>)
 80043a8:	f002 fea6 	bl	80070f8 <HAL_GPIO_WritePin>
  ICM20602_init();
 80043ac:	f7fd fcea 	bl	8001d84 <ICM20602_init>
  ICM20602_IMU_calibration2();
 80043b0:	f7fe f832 	bl	8002418 <ICM20602_IMU_calibration2>
  ICM20602_clearAngle();
 80043b4:	f7fd fddc 	bl	8001f70 <ICM20602_clearAngle>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80043b8:	486a      	ldr	r0, [pc, #424]	; (8004564 <main+0x34c>)
 80043ba:	4622      	mov	r2, r4
 80043bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043c0:	f002 fe9a 	bl	80070f8 <HAL_GPIO_WritePin>
  actuator_power_ONOFF(1);
 80043c4:	2001      	movs	r0, #1
 80043c6:	2508      	movs	r5, #8
 80043c8:	f7fc fed2 	bl	8001170 <actuator_power_ONOFF>
    actuator_buzzer(20, 20);
 80043cc:	2114      	movs	r1, #20
 80043ce:	4608      	mov	r0, r1
 80043d0:	f7fc fef2 	bl	80011b8 <actuator_buzzer>
  for (int i = 0; i < 8; i++) {
 80043d4:	3d01      	subs	r5, #1
 80043d6:	d1f9      	bne.n	80043cc <main+0x1b4>
  sys.starting_status_flag = true;
 80043d8:	4e63      	ldr	r6, [pc, #396]	; (8004568 <main+0x350>)
 80043da:	4c64      	ldr	r4, [pc, #400]	; (800456c <main+0x354>)
 80043dc:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004598 <main+0x380>
      p("vel X %+4.1f Y %+4.1f tharW %+6.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta * 180 / M_PI);
 80043e0:	ed9f 8a63 	vldr	s16, [pc, #396]	; 8004570 <main+0x358>
 80043e4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800459c <main+0x384>
 80043e8:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80045a0 <main+0x388>
  sys.starting_status_flag = true;
 80043ec:	2301      	movs	r3, #1
  HAL_Delay(100);
 80043ee:	2064      	movs	r0, #100	; 0x64
  sys.starting_status_flag = true;
 80043f0:	7073      	strb	r3, [r6, #1]
  HAL_Delay(100);
 80043f2:	f001 f9c5 	bl	8005780 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 80043f6:	485f      	ldr	r0, [pc, #380]	; (8004574 <main+0x35c>)
 80043f8:	f004 f8d4 	bl	80085a4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 80043fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004400:	f001 f9be 	bl	8005780 <HAL_Delay>
  sys.starting_status_flag = false;
 8004404:	7075      	strb	r5, [r6, #1]
 8004406:	4d5c      	ldr	r5, [pc, #368]	; (8004578 <main+0x360>)
    debug.main_loop_cnt++;
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	6023      	str	r3, [r4, #0]
    if (debug.print_flag) {
 800440e:	7a23      	ldrb	r3, [r4, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f9      	beq.n	8004408 <main+0x1f0>
      debug.print_flag = false;
 8004414:	2300      	movs	r3, #0
      p("yaw=%+6.1f ", imu.yaw_angle);
 8004416:	f8da 0000 	ldr.w	r0, [sl]
      debug.print_flag = false;
 800441a:	7223      	strb	r3, [r4, #8]
      printf_buffer[0] = 0;
 800441c:	f889 3000 	strb.w	r3, [r9]
      p("yaw=%+6.1f ", imu.yaw_angle);
 8004420:	f7fc f8ba 	bl	8000598 <__aeabi_f2d>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4854      	ldr	r0, [pc, #336]	; (800457c <main+0x364>)
 800442a:	f7fe fc49 	bl	8002cc0 <p.constprop.4>
      if (connection.connected_ai) {
 800442e:	f898 3000 	ldrb.w	r3, [r8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d057      	beq.n	80044e6 <main+0x2ce>
        p("\e[32mcon %3d , %3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004436:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800443a:	f7fc f8ad 	bl	8000598 <__aeabi_f2d>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	484f      	ldr	r0, [pc, #316]	; (8004580 <main+0x368>)
 8004444:	f898 1003 	ldrb.w	r1, [r8, #3]
 8004448:	f7fe fc22 	bl	8002c90 <p.constprop.3>
      p("vel X %+4.1f Y %+4.1f tharW %+6.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta * 180 / M_PI);
 800444c:	6968      	ldr	r0, [r5, #20]
 800444e:	f7fc f8a3 	bl	8000598 <__aeabi_f2d>
 8004452:	edd5 7a00 	vldr	s15, [r5]
 8004456:	ee67 7a88 	vmul.f32	s15, s15, s16
 800445a:	4606      	mov	r6, r0
 800445c:	ee17 0a90 	vmov	r0, s15
 8004460:	460f      	mov	r7, r1
 8004462:	f7fc f899 	bl	8000598 <__aeabi_f2d>
 8004466:	a32c      	add	r3, pc, #176	; (adr r3, 8004518 <main+0x300>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fc f8ec 	bl	8000648 <__aeabi_dmul>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	69a8      	ldr	r0, [r5, #24]
 8004476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800447a:	f7fc f88d 	bl	8000598 <__aeabi_f2d>
 800447e:	468c      	mov	ip, r1
 8004480:	4683      	mov	fp, r0
 8004482:	e9cd bc00 	strd	fp, ip, [sp]
 8004486:	4632      	mov	r2, r6
 8004488:	463b      	mov	r3, r7
 800448a:	483e      	ldr	r0, [pc, #248]	; (8004584 <main+0x36c>)
 800448c:	f7fe fbe8 	bl	8002c60 <p.constprop.2>
      p("kick %3.2f chip %d dri %3.2f keeper %d local %d ", ai_cmd.kick_power, ai_cmd.chip_en, ai_cmd.drible_power, ai_cmd.keeper_mode_en_flag, ai_cmd.local_vision_en_flag);
 8004490:	68e8      	ldr	r0, [r5, #12]
 8004492:	f7fc f881 	bl	8000598 <__aeabi_f2d>
 8004496:	f895 6049 	ldrb.w	r6, [r5, #73]	; 0x49
 800449a:	460b      	mov	r3, r1
 800449c:	f895 104a 	ldrb.w	r1, [r5, #74]	; 0x4a
 80044a0:	4602      	mov	r2, r0
 80044a2:	68a8      	ldr	r0, [r5, #8]
 80044a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044a8:	e9cd 1604 	strd	r1, r6, [sp, #16]
 80044ac:	f7fc f874 	bl	8000598 <__aeabi_f2d>
 80044b0:	4606      	mov	r6, r0
 80044b2:	460f      	mov	r7, r1
 80044b4:	7c29      	ldrb	r1, [r5, #16]
 80044b6:	9100      	str	r1, [sp, #0]
 80044b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044bc:	4832      	ldr	r0, [pc, #200]	; (8004588 <main+0x370>)
 80044be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80044c2:	f7fe fbb5 	bl	8002c30 <p.constprop.1>
      p("\r\n");
 80044c6:	4831      	ldr	r0, [pc, #196]	; (800458c <main+0x374>)
 80044c8:	f7fe fb9a 	bl	8002c00 <p.constprop.0>
      HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)printf_buffer, strlen(printf_buffer));
 80044cc:	4648      	mov	r0, r9
 80044ce:	f7fb fef7 	bl	80002c0 <strlen>
 80044d2:	4649      	mov	r1, r9
 80044d4:	b282      	uxth	r2, r0
 80044d6:	4816      	ldr	r0, [pc, #88]	; (8004530 <main+0x318>)
 80044d8:	f004 fd86 	bl	8008fe8 <HAL_UART_Transmit_DMA>
      debug.main_loop_cnt = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	6023      	str	r3, [r4, #0]
 80044e0:	e792      	b.n	8004408 <main+0x1f0>
    Error_Handler();
 80044e2:	f7ff fe35 	bl	8004150 <Error_Handler>
      } else if (connection.connected_cm4) {
 80044e6:	f898 3001 	ldrb.w	r3, [r8, #1]
        p("\e[33mcon %3d , %3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 80044ea:	f8d8 0008 	ldr.w	r0, [r8, #8]
      } else if (connection.connected_cm4) {
 80044ee:	b14b      	cbz	r3, 8004504 <main+0x2ec>
        p("\e[33mcon %3d , %3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 80044f0:	f7fc f852 	bl	8000598 <__aeabi_f2d>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4825      	ldr	r0, [pc, #148]	; (8004590 <main+0x378>)
 80044fa:	f898 1003 	ldrb.w	r1, [r8, #3]
 80044fe:	f7fe fc0f 	bl	8002d20 <p>
 8004502:	e7a3      	b.n	800444c <main+0x234>
        p("\e[31mcon %3d , %3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004504:	f7fc f848 	bl	8000598 <__aeabi_f2d>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4821      	ldr	r0, [pc, #132]	; (8004594 <main+0x37c>)
 800450e:	f898 1003 	ldrb.w	r1, [r8, #3]
 8004512:	f7fe fc05 	bl	8002d20 <p>
 8004516:	e799      	b.n	800444c <main+0x234>
 8004518:	6dc9c883 	.word	0x6dc9c883
 800451c:	3fd45f30 	.word	0x3fd45f30
 8004520:	20000f88 	.word	0x20000f88
 8004524:	20001581 	.word	0x20001581
 8004528:	20001638 	.word	0x20001638
 800452c:	20000068 	.word	0x20000068
 8004530:	20001850 	.word	0x20001850
 8004534:	0800e4e8 	.word	0x0800e4e8
 8004538:	200018e0 	.word	0x200018e0
 800453c:	200015b8 	.word	0x200015b8
 8004540:	20000cac 	.word	0x20000cac
 8004544:	20000d10 	.word	0x20000d10
 8004548:	20000e2c 	.word	0x20000e2c
 800454c:	200002d0 	.word	0x200002d0
 8004550:	00000000 	.word	0x00000000
 8004554:	43160000 	.word	0x43160000
 8004558:	420c0000 	.word	0x420c0000
 800455c:	42480000 	.word	0x42480000
 8004560:	42b40000 	.word	0x42b40000
 8004564:	48000800 	.word	0x48000800
 8004568:	20001584 	.word	0x20001584
 800456c:	20000f58 	.word	0x20000f58
 8004570:	43340000 	.word	0x43340000
 8004574:	20001684 	.word	0x20001684
 8004578:	20000e30 	.word	0x20000e30
 800457c:	0800e4d0 	.word	0x0800e4d0
 8004580:	0800e4b4 	.word	0x0800e4b4
 8004584:	0800e490 	.word	0x0800e490
 8004588:	0800e45c 	.word	0x0800e45c
 800458c:	0800e4e4 	.word	0x0800e4e4
 8004590:	0800e4f0 	.word	0x0800e4f0
 8004594:	0800e50c 	.word	0x0800e50c
 8004598:	2000138c 	.word	0x2000138c
 800459c:	20000f78 	.word	0x20000f78
 80045a0:	20000f08 	.word	0x20000f08
 80045a4:	00000000 	.word	0x00000000

080045a8 <mouseOdometory>:
 */

#include "management.h"

void mouseOdometory()
{
 80045a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 80045ac:	4c68      	ldr	r4, [pc, #416]	; (8004750 <mouseOdometory+0x1a8>)
 80045ae:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004754 <mouseOdometory+0x1ac>
 80045b2:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;

  mouse.raw_odom[0] += mouse.raw_diff[0];
 80045b6:	edd4 6a02 	vldr	s13, [r4, #8]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 80045ba:	ee07 3a90 	vmov	s15, r3
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 80045be:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
{
 80045c2:	ed2d 8b04 	vpush	{d8-d9}
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 80045c6:	ee08 3a10 	vmov	s16, r3
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 80045ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 80045ce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 80045d2:	ee67 7a87 	vmul.f32	s15, s15, s14
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 80045d6:	ee28 8a07 	vmul.f32	s16, s16, s14
  mouse.raw_odom[1] += mouse.raw_diff[1];
 80045da:	ed94 7a03 	vldr	s14, [r4, #12]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 80045de:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  mouse.raw_odom[1] += mouse.raw_diff[1];
 80045e2:	ee37 7a08 	vadd.f32	s14, s14, s16
  mouse.raw_odom[0] += mouse.raw_diff[0];
 80045e6:	ee76 6aa7 	vadd.f32	s13, s13, s15

  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 80045ea:	ee17 0a90 	vmov	r0, s15
  mouse.raw_odom[0] += mouse.raw_diff[0];
 80045ee:	edc4 6a02 	vstr	s13, [r4, #8]
  mouse.raw_odom[1] += mouse.raw_diff[1];
 80045f2:	ed84 7a03 	vstr	s14, [r4, #12]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 80045f6:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 80045fa:	f7fb ffcd 	bl	8000598 <__aeabi_f2d>
 80045fe:	4b56      	ldr	r3, [pc, #344]	; (8004758 <mouseOdometory+0x1b0>)
 8004600:	689d      	ldr	r5, [r3, #8]
 8004602:	4606      	mov	r6, r0
 8004604:	4628      	mov	r0, r5
 8004606:	460f      	mov	r7, r1
 8004608:	f7fb ffc6 	bl	8000598 <__aeabi_f2d>
 800460c:	ec41 0b10 	vmov	d0, r0, r1
 8004610:	ec41 0b19 	vmov	d9, r0, r1
 8004614:	f008 fe68 	bl	800d2e8 <cos>
 8004618:	ee18 0a10 	vmov	r0, s16
 800461c:	ec5b ab10 	vmov	sl, fp, d0
 8004620:	f7fb ffba 	bl	8000598 <__aeabi_f2d>
 8004624:	eeb0 0a49 	vmov.f32	s0, s18
 8004628:	eef0 0a69 	vmov.f32	s1, s19
 800462c:	ec41 0b18 	vmov	d8, r0, r1
 8004630:	f008 feae 	bl	800d390 <sin>
 8004634:	4652      	mov	r2, sl
 8004636:	465b      	mov	r3, fp
 8004638:	4630      	mov	r0, r6
 800463a:	4639      	mov	r1, r7
 800463c:	eeb0 9a40 	vmov.f32	s18, s0
 8004640:	eef0 9a60 	vmov.f32	s19, s1
 8004644:	f7fc f800 	bl	8000648 <__aeabi_dmul>
 8004648:	ec53 2b19 	vmov	r2, r3, d9
 800464c:	4680      	mov	r8, r0
 800464e:	4689      	mov	r9, r1
 8004650:	ec51 0b18 	vmov	r0, r1, d8
 8004654:	f7fb fff8 	bl	8000648 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f7fb fe3a 	bl	80002d8 <__aeabi_dsub>
 8004664:	4b3d      	ldr	r3, [pc, #244]	; (800475c <mouseOdometory+0x1b4>)
 8004666:	2200      	movs	r2, #0
 8004668:	f7fb ffee 	bl	8000648 <__aeabi_dmul>
 800466c:	4680      	mov	r8, r0
 800466e:	6920      	ldr	r0, [r4, #16]
 8004670:	4689      	mov	r9, r1
 8004672:	f7fb ff91 	bl	8000598 <__aeabi_f2d>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	f7fb fe2d 	bl	80002dc <__adddf3>
 8004682:	f7fc fad9 	bl	8000c38 <__aeabi_d2f>
 8004686:	4603      	mov	r3, r0
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004688:	4639      	mov	r1, r7
 800468a:	4630      	mov	r0, r6
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 800468c:	6123      	str	r3, [r4, #16]
 800468e:	461e      	mov	r6, r3
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004690:	ec53 2b19 	vmov	r2, r3, d9
 8004694:	f7fb ffd8 	bl	8000648 <__aeabi_dmul>
 8004698:	ec53 2b18 	vmov	r2, r3, d8
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	4650      	mov	r0, sl
 80046a2:	4659      	mov	r1, fp
 80046a4:	f7fb ffd0 	bl	8000648 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4640      	mov	r0, r8
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fb fe14 	bl	80002dc <__adddf3>
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <mouseOdometory+0x1b4>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	f7fb ffc6 	bl	8000648 <__aeabi_dmul>
 80046bc:	4680      	mov	r8, r0
 80046be:	6960      	ldr	r0, [r4, #20]
 80046c0:	4689      	mov	r9, r1
 80046c2:	f7fb ff69 	bl	8000598 <__aeabi_f2d>
 80046c6:	4602      	mov	r2, r0
 80046c8:	460b      	mov	r3, r1
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fb fe05 	bl	80002dc <__adddf3>
 80046d2:	f7fc fab1 	bl	8000c38 <__aeabi_d2f>

  // 旋回ぶん補正 X方向は誤差に埋もれてしまう。パラメーター調整を省略するために無効化
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 80046d6:	4652      	mov	r2, sl
 80046d8:	465b      	mov	r3, fp
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 80046da:	4680      	mov	r8, r0
 80046dc:	6160      	str	r0, [r4, #20]
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 80046de:	4920      	ldr	r1, [pc, #128]	; (8004760 <mouseOdometory+0x1b8>)
 80046e0:	2000      	movs	r0, #0
 80046e2:	f7fb fdf9 	bl	80002d8 <__aeabi_dsub>
 80046e6:	a318      	add	r3, pc, #96	; (adr r3, 8004748 <mouseOdometory+0x1a0>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f7fb ffac 	bl	8000648 <__aeabi_dmul>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4630      	mov	r0, r6
 80046f4:	460f      	mov	r7, r1
 80046f6:	4616      	mov	r6, r2
 80046f8:	f7fb ff4e 	bl	8000598 <__aeabi_f2d>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4630      	mov	r0, r6
 8004702:	4639      	mov	r1, r7
 8004704:	f7fb fdea 	bl	80002dc <__adddf3>
 8004708:	f7fc fa96 	bl	8000c38 <__aeabi_d2f>
 800470c:	61a0      	str	r0, [r4, #24]
  //  +(0.009 * sin(imu.yaw_angle_rad));
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 800470e:	4640      	mov	r0, r8
 8004710:	f7fb ff42 	bl	8000598 <__aeabi_f2d>
 8004714:	a30c      	add	r3, pc, #48	; (adr r3, 8004748 <mouseOdometory+0x1a0>)
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	4606      	mov	r6, r0
 800471c:	460f      	mov	r7, r1
 800471e:	ec51 0b19 	vmov	r0, r1, d9
 8004722:	f7fb ff91 	bl	8000648 <__aeabi_dmul>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4630      	mov	r0, r6
 800472c:	4639      	mov	r1, r7
 800472e:	f7fb fdd3 	bl	80002d8 <__aeabi_dsub>
 8004732:	f7fc fa81 	bl	8000c38 <__aeabi_d2f>
  //  +(0.009 * cos(imu.yaw_angle_rad) - 0.009);

  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
}
 8004736:	ecbd 8b04 	vpop	{d8-d9}
  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
 800473a:	63a5      	str	r5, [r4, #56]	; 0x38
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 800473c:	61e0      	str	r0, [r4, #28]
}
 800473e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	f3af 8000 	nop.w
 8004748:	4189374c 	.word	0x4189374c
 800474c:	3fb0e560 	.word	0x3fb0e560
 8004750:	20000fc4 	.word	0x20000fc4
 8004754:	3b03126f 	.word	0x3b03126f
 8004758:	20000f78 	.word	0x20000f78
 800475c:	3fe00000 	.word	0x3fe00000
 8004760:	3ff00000 	.word	0x3ff00000
 8004764:	00000000 	.word	0x00000000

08004768 <omniOdometory>:

void omniOdometory()
{
 8004768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	4dd6      	ldr	r5, [pc, #856]	; (8004ac8 <omniOdometory+0x360>)
 800476e:	ed2d 8b08 	vpush	{d8-d11}
 8004772:	462c      	mov	r4, r5
 8004774:	f105 0610 	add.w	r6, r5, #16

  for (int i = 0; i < 4; i++) {
    if (isnan(motor.enc_angle[i])) {
      motor.enc_angle[i] = 0;
    }
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004778:	ecb4 0a01 	vldmia	r4!, {s0}
 800477c:	edd4 0a04 	vldr	s1, [r4, #16]
 8004780:	f000 fe5a 	bl	8005438 <getAngleDiff>
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 8004784:	f854 3c04 	ldr.w	r3, [r4, #-4]
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004788:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  for (int i = 0; i < 4; i++) {
 800478c:	42b4      	cmp	r4, r6
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 800478e:	6123      	str	r3, [r4, #16]
  for (int i = 0; i < 4; i++) {
 8004790:	d1f2      	bne.n	8004778 <omniOdometory+0x10>
  }

  // float robot_rotation_adj;
  // robot_rotation_adj = normalizeAngle(imu.yaw_angle_rad - imu.pre_yaw_angle_rad) * OMNI_ROTATION_LENGTH;  // mm

  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004792:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004794:	f8df a350 	ldr.w	sl, [pc, #848]	; 8004ae8 <omniOdometory+0x380>
 8004798:	f7fb fefe 	bl	8000598 <__aeabi_f2d>
 800479c:	a3c2      	add	r3, pc, #776	; (adr r3, 8004aa8 <omniOdometory+0x340>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fb ff51 	bl	8000648 <__aeabi_dmul>
 80047a6:	f7fc fa47 	bl	8000c38 <__aeabi_d2f>
 80047aa:	4604      	mov	r4, r0
  //  +robot_rotation_adj * 2;
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 80047ac:	6b28      	ldr	r0, [r5, #48]	; 0x30
  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 80047ae:	f8ca 4000 	str.w	r4, [sl]
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 80047b2:	f7fb fef1 	bl	8000598 <__aeabi_f2d>
 80047b6:	a3bc      	add	r3, pc, #752	; (adr r3, 8004aa8 <omniOdometory+0x340>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fb ff44 	bl	8000648 <__aeabi_dmul>
 80047c0:	f7fc fa3a 	bl	8000c38 <__aeabi_d2f>
 80047c4:	4606      	mov	r6, r0
  //  +robot_rotation_adj * 2;

  // right back & left back
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 80047c6:	4620      	mov	r0, r4
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 80047c8:	f8ca 6004 	str.w	r6, [sl, #4]
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 80047cc:	f7fb fee4 	bl	8000598 <__aeabi_f2d>
 80047d0:	4bbe      	ldr	r3, [pc, #760]	; (8004acc <omniOdometory+0x364>)
 80047d2:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80047d6:	4604      	mov	r4, r0
 80047d8:	4658      	mov	r0, fp
 80047da:	460d      	mov	r5, r1
 80047dc:	f7fb fedc 	bl	8000598 <__aeabi_f2d>
 80047e0:	ec41 0b10 	vmov	d0, r0, r1
 80047e4:	ec41 0b18 	vmov	d8, r0, r1
 80047e8:	f008 fd7e 	bl	800d2e8 <cos>
 80047ec:	4630      	mov	r0, r6
 80047ee:	eeb0 ba40 	vmov.f32	s22, s0
 80047f2:	eef0 ba60 	vmov.f32	s23, s1
 80047f6:	f7fb fecf 	bl	8000598 <__aeabi_f2d>
 80047fa:	eeb0 0a48 	vmov.f32	s0, s16
 80047fe:	eef0 0a68 	vmov.f32	s1, s17
 8004802:	4680      	mov	r8, r0
 8004804:	4689      	mov	r9, r1
 8004806:	f008 fdc3 	bl	800d390 <sin>
 800480a:	ec53 2b1b 	vmov	r2, r3, d11
 800480e:	eeb0 aa40 	vmov.f32	s20, s0
 8004812:	eef0 aa60 	vmov.f32	s21, s1
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fb ff15 	bl	8000648 <__aeabi_dmul>
 800481e:	ec53 2b1a 	vmov	r2, r3, d10
 8004822:	4606      	mov	r6, r0
 8004824:	460f      	mov	r7, r1
 8004826:	4640      	mov	r0, r8
 8004828:	4649      	mov	r1, r9
 800482a:	f7fb ff0d 	bl	8000648 <__aeabi_dmul>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4630      	mov	r0, r6
 8004834:	4639      	mov	r1, r7
 8004836:	f7fb fd51 	bl	80002dc <__adddf3>
 800483a:	4606      	mov	r6, r0
 800483c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8004840:	460f      	mov	r7, r1
 8004842:	f7fb fea9 	bl	8000598 <__aeabi_f2d>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4630      	mov	r0, r6
 800484c:	4639      	mov	r1, r7
 800484e:	f7fb fd45 	bl	80002dc <__adddf3>
 8004852:	f7fc f9f1 	bl	8000c38 <__aeabi_d2f>
 8004856:	4606      	mov	r6, r0
 8004858:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 800485c:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8004860:	f7fb fe9a 	bl	8000598 <__aeabi_f2d>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4620      	mov	r0, r4
 800486a:	4629      	mov	r1, r5
 800486c:	4614      	mov	r4, r2
 800486e:	461d      	mov	r5, r3
 8004870:	ec53 2b1a 	vmov	r2, r3, d10
 8004874:	f7fb fee8 	bl	8000648 <__aeabi_dmul>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4620      	mov	r0, r4
 800487e:	4629      	mov	r1, r5
 8004880:	f7fb fd2c 	bl	80002dc <__adddf3>
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	4604      	mov	r4, r0
 800488a:	460d      	mov	r5, r1
 800488c:	ec51 0b1b 	vmov	r0, r1, d11
 8004890:	f7fb feda 	bl	8000648 <__aeabi_dmul>
 8004894:	460b      	mov	r3, r1
 8004896:	4602      	mov	r2, r0
 8004898:	4629      	mov	r1, r5
 800489a:	4620      	mov	r0, r4
 800489c:	f7fb fd1c 	bl	80002d8 <__aeabi_dsub>
 80048a0:	f7fc f9ca 	bl	8000c38 <__aeabi_d2f>

  omni.pre_odom[0] = omni.odom[0];
 80048a4:	ed9a 9a06 	vldr	s18, [sl, #24]
  omni.pre_odom[1] = omni.odom[1];
 80048a8:	edda 8a07 	vldr	s17, [sl, #28]
  omni.pre_odom[0] = omni.odom[0];
 80048ac:	ed8a 9a08 	vstr	s18, [sl, #32]
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 80048b0:	4605      	mov	r5, r0

  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 80048b2:	4630      	mov	r0, r6
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 80048b4:	f8ca 502c 	str.w	r5, [sl, #44]	; 0x2c
  omni.pre_odom[1] = omni.odom[1];
 80048b8:	edca 8a09 	vstr	s17, [sl, #36]	; 0x24
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 80048bc:	f7fb fe6c 	bl	8000598 <__aeabi_f2d>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4628      	mov	r0, r5
 80048c4:	4614      	mov	r4, r2
 80048c6:	460d      	mov	r5, r1
 80048c8:	f7fb fe66 	bl	8000598 <__aeabi_f2d>
 80048cc:	a378      	add	r3, pc, #480	; (adr r3, 8004ab0 <omniOdometory+0x348>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	4680      	mov	r8, r0
 80048d4:	4689      	mov	r9, r1
 80048d6:	4620      	mov	r0, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	f7fb feb5 	bl	8000648 <__aeabi_dmul>
 80048de:	a376      	add	r3, pc, #472	; (adr r3, 8004ab8 <omniOdometory+0x350>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	4606      	mov	r6, r0
 80048e6:	460f      	mov	r7, r1
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fb feac 	bl	8000648 <__aeabi_dmul>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4630      	mov	r0, r6
 80048f6:	4639      	mov	r1, r7
 80048f8:	f7fb fcee 	bl	80002d8 <__aeabi_dsub>
 80048fc:	4b74      	ldr	r3, [pc, #464]	; (8004ad0 <omniOdometory+0x368>)
 80048fe:	2200      	movs	r2, #0
 8004900:	f7fb fea2 	bl	8000648 <__aeabi_dmul>
 8004904:	4b73      	ldr	r3, [pc, #460]	; (8004ad4 <omniOdometory+0x36c>)
 8004906:	4606      	mov	r6, r0
 8004908:	460f      	mov	r7, r1
 800490a:	2200      	movs	r2, #0
 800490c:	ec51 0b1b 	vmov	r0, r1, d11
 8004910:	f7fb fce2 	bl	80002d8 <__aeabi_dsub>
 8004914:	a36a      	add	r3, pc, #424	; (adr r3, 8004ac0 <omniOdometory+0x358>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fe95 	bl	8000648 <__aeabi_dmul>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4630      	mov	r0, r6
 8004924:	4639      	mov	r1, r7
 8004926:	f7fb fcd9 	bl	80002dc <__adddf3>
 800492a:	f7fc f985 	bl	8000c38 <__aeabi_d2f>
 800492e:	ee08 0a10 	vmov	s16, r0
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004932:	a361      	add	r3, pc, #388	; (adr r3, 8004ab8 <omniOdometory+0x350>)
 8004934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004938:	4620      	mov	r0, r4
 800493a:	4629      	mov	r1, r5
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 800493c:	ed8a 8a06 	vstr	s16, [sl, #24]
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004940:	f7fb fe82 	bl	8000648 <__aeabi_dmul>
 8004944:	a35a      	add	r3, pc, #360	; (adr r3, 8004ab0 <omniOdometory+0x348>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	4604      	mov	r4, r0
 800494c:	460d      	mov	r5, r1
 800494e:	4640      	mov	r0, r8
 8004950:	4649      	mov	r1, r9
 8004952:	f7fb fe79 	bl	8000648 <__aeabi_dmul>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4620      	mov	r0, r4
 800495c:	4629      	mov	r1, r5
 800495e:	f7fb fcbd 	bl	80002dc <__adddf3>
 8004962:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <omniOdometory+0x368>)
 8004964:	2200      	movs	r2, #0
 8004966:	f7fb fe6f 	bl	8000648 <__aeabi_dmul>
 800496a:	a355      	add	r3, pc, #340	; (adr r3, 8004ac0 <omniOdometory+0x358>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	4604      	mov	r4, r0
 8004972:	460d      	mov	r5, r1
 8004974:	ec51 0b1a 	vmov	r0, r1, d10
 8004978:	f7fb fe66 	bl	8000648 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fb fcaa 	bl	80002dc <__adddf3>
 8004988:	f7fc f956 	bl	8000c38 <__aeabi_d2f>
 800498c:	ee07 0a90 	vmov	s15, r0

  //omni.odom[0] += (omni.travel_distance[0] * cos(imu.yaw_angle_rad + M_PI * 3 / 4) - omni.travel_distance[1] * cos(imu.yaw_angle_rad + M_PI * 5 / 4)) / 2;
  //omni.odom[1] += (omni.travel_distance[0] * sin(imu.yaw_angle_rad + M_PI * 3 / 4) - omni.travel_distance[1] * sin(imu.yaw_angle_rad + M_PI * 5 / 4)) / 2;

  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004990:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004ad8 <omniOdometory+0x370>
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8004994:	edca 7a07 	vstr	s15, [sl, #28]
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8004998:	ee38 8a49 	vsub.f32	s16, s16, s18
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 800499c:	ee77 8ae8 	vsub.f32	s17, s15, s17
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 80049a0:	ee28 8a07 	vmul.f32	s16, s16, s14
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 80049a4:	ee68 8a87 	vmul.f32	s17, s17, s14

  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 80049a8:	ee18 0a10 	vmov	r0, s16
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 80049ac:	ed8a 8a0c 	vstr	s16, [sl, #48]	; 0x30
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 80049b0:	edca 8a0d 	vstr	s17, [sl, #52]	; 0x34
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 80049b4:	f7fb fdf0 	bl	8000598 <__aeabi_f2d>
 80049b8:	4606      	mov	r6, r0
 80049ba:	f08b 4000 	eor.w	r0, fp, #2147483648	; 0x80000000
 80049be:	460f      	mov	r7, r1
 80049c0:	f7fb fdea 	bl	8000598 <__aeabi_f2d>
 80049c4:	ec41 0b10 	vmov	d0, r0, r1
 80049c8:	ec41 0b19 	vmov	d9, r0, r1
 80049cc:	f008 fc8c 	bl	800d2e8 <cos>
 80049d0:	ee18 0a90 	vmov	r0, s17
 80049d4:	eeb0 ba40 	vmov.f32	s22, s0
 80049d8:	eef0 ba60 	vmov.f32	s23, s1
 80049dc:	f7fb fddc 	bl	8000598 <__aeabi_f2d>
 80049e0:	ec53 2b1b 	vmov	r2, r3, d11
 80049e4:	4604      	mov	r4, r0
 80049e6:	460d      	mov	r5, r1
 80049e8:	4630      	mov	r0, r6
 80049ea:	4639      	mov	r1, r7
 80049ec:	f7fb fe2c 	bl	8000648 <__aeabi_dmul>
 80049f0:	4622      	mov	r2, r4
 80049f2:	462b      	mov	r3, r5
 80049f4:	4680      	mov	r8, r0
 80049f6:	4689      	mov	r9, r1
 80049f8:	ec51 0b1a 	vmov	r0, r1, d10
 80049fc:	f7fb fe24 	bl	8000648 <__aeabi_dmul>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4640      	mov	r0, r8
 8004a06:	4649      	mov	r1, r9
 8004a08:	f7fb fc68 	bl	80002dc <__adddf3>
 8004a0c:	f7fc f914 	bl	8000c38 <__aeabi_d2f>
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004a10:	eeb0 0a49 	vmov.f32	s0, s18
 8004a14:	eef0 0a69 	vmov.f32	s1, s19
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8004a18:	f8ca 0360 	str.w	r0, [sl, #864]	; 0x360
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004a1c:	f008 fcb8 	bl	800d390 <sin>
 8004a20:	4630      	mov	r0, r6
 8004a22:	ec53 2b10 	vmov	r2, r3, d0
 8004a26:	4639      	mov	r1, r7
 8004a28:	f7fb fe0e 	bl	8000648 <__aeabi_dmul>
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	462b      	mov	r3, r5
 8004a30:	4604      	mov	r4, r0
 8004a32:	460d      	mov	r5, r1
 8004a34:	ec51 0b1b 	vmov	r0, r1, d11
 8004a38:	f7fb fe06 	bl	8000648 <__aeabi_dmul>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4620      	mov	r0, r4
 8004a42:	4629      	mov	r1, r5
 8004a44:	f7fb fc4a 	bl	80002dc <__adddf3>
 8004a48:	f7fc f8f6 	bl	8000c38 <__aeabi_d2f>

  static uint32_t odom_speed_index = 0;
  odom_speed_index++;
 8004a4c:	4b23      	ldr	r3, [pc, #140]	; (8004adc <omniOdometory+0x374>)
    odom_speed_index = 0;
  }
  omni.odom_speed_log[0][odom_speed_index] = omni.odom_speed[0];
  omni.odom_speed_log[1][odom_speed_index] = omni.odom_speed[1];

  omni.odom_speed_log_total[0] = 0;
 8004a4e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ae0 <omniOdometory+0x378>
  odom_speed_index++;
 8004a52:	681a      	ldr	r2, [r3, #0]
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8004a54:	f8ca 0364 	str.w	r0, [sl, #868]	; 0x364
  odom_speed_index++;
 8004a58:	3201      	adds	r2, #1
  if (odom_speed_index >= SPEED_LOG_BUF_SIZE) {
 8004a5a:	2a63      	cmp	r2, #99	; 0x63
    odom_speed_index = 0;
 8004a5c:	bf88      	it	hi
 8004a5e:	2200      	movhi	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
  omni.odom_speed_log[0][odom_speed_index] = omni.odom_speed[0];
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <omniOdometory+0x37c>)
  omni.odom_speed_log_total[0] = 0;
 8004a64:	edca 6ad6 	vstr	s13, [sl, #856]	; 0x358
  omni.odom_speed_log[0][odom_speed_index] = omni.odom_speed[0];
 8004a68:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
  omni.odom_speed_log_total[1] = 0;
 8004a6c:	eef0 7a66 	vmov.f32	s15, s13
 8004a70:	eeb0 7a66 	vmov.f32	s14, s13
  omni.odom_speed_log[0][odom_speed_index] = omni.odom_speed[0];
 8004a74:	ed81 8a0e 	vstr	s16, [r1, #56]	; 0x38
  omni.odom_speed_log[1][odom_speed_index] = omni.odom_speed[1];
 8004a78:	edc1 8a72 	vstr	s17, [r1, #456]	; 0x1c8
  omni.odom_speed_log_total[1] = 0;
 8004a7c:	edca 6ad7 	vstr	s13, [sl, #860]	; 0x35c
  for (int i = 0; i < SPEED_LOG_BUF_SIZE; i++) {
 8004a80:	f503 72c8 	add.w	r2, r3, #400	; 0x190
    omni.odom_speed_log_total[0] += omni.odom_speed_log[0][i];
 8004a84:	ecb3 6a01 	vldmia	r3!, {s12}
    omni.odom_speed_log_total[1] += omni.odom_speed_log[1][i];
 8004a88:	edd3 6a63 	vldr	s13, [r3, #396]	; 0x18c
  for (int i = 0; i < SPEED_LOG_BUF_SIZE; i++) {
 8004a8c:	4293      	cmp	r3, r2
    omni.odom_speed_log_total[0] += omni.odom_speed_log[0][i];
 8004a8e:	ee37 7a06 	vadd.f32	s14, s14, s12
    omni.odom_speed_log_total[1] += omni.odom_speed_log[1][i];
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
  for (int i = 0; i < SPEED_LOG_BUF_SIZE; i++) {
 8004a96:	d1f5      	bne.n	8004a84 <omniOdometory+0x31c>
  }
 8004a98:	ecbd 8b08 	vpop	{d8-d11}
 8004a9c:	ed8a 7ad6 	vstr	s14, [sl, #856]	; 0x358
 8004aa0:	edca 7ad7 	vstr	s15, [sl, #860]	; 0x35c
 8004aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa8:	3126e979 	.word	0x3126e979
 8004aac:	3facac08 	.word	0x3facac08
 8004ab0:	667f3bcc 	.word	0x667f3bcc
 8004ab4:	bfe6a09e 	.word	0xbfe6a09e
 8004ab8:	667f3bcd 	.word	0x667f3bcd
 8004abc:	3fe6a09e 	.word	0x3fe6a09e
 8004ac0:	1cac0831 	.word	0x1cac0831
 8004ac4:	3fbb645a 	.word	0x3fbb645a
 8004ac8:	20000f8c 	.word	0x20000f8c
 8004acc:	20000f78 	.word	0x20000f78
 8004ad0:	3fe00000 	.word	0x3fe00000
 8004ad4:	3ff00000 	.word	0x3ff00000
 8004ad8:	43fa0000 	.word	0x43fa0000
 8004adc:	200015c0 	.word	0x200015c0
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	2000103c 	.word	0x2000103c
 8004ae8:	20001004 	.word	0x20001004
 8004aec:	00000000 	.word	0x00000000

08004af0 <omni_move>:
const float32_t cosM2 = cos(7.0 * M_PI / 4.0);
const float32_t cosM3 = cos(5.0 * M_PI / 4.0);
const float32_t cosM4 = cos(5.0 * M_PI / 6.0);

void omni_move(float32_t vel_y_robot, float32_t vel_x_robot, float32_t omega_roboot, float32_t duty_limit)
{
 8004af0:	b510      	push	{r4, lr}
 8004af2:	ee11 0a10 	vmov	r0, s2
 8004af6:	ed2d 8b04 	vpush	{d8-d9}
 8004afa:	eef0 8a61 	vmov.f32	s17, s3
 8004afe:	eeb0 8a60 	vmov.f32	s16, s1
 8004b02:	eeb0 9a40 	vmov.f32	s18, s0
  float32_t rotation_omega_motor;

  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 8004b06:	f7fb fd47 	bl	8000598 <__aeabi_f2d>
 8004b0a:	a330      	add	r3, pc, #192	; (adr r3, 8004bcc <omni_move+0xdc>)
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f7fb fd9a 	bl	8000648 <__aeabi_dmul>
 8004b14:	f7fc f890 	bl	8000c38 <__aeabi_d2f>

  motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8004b18:	eddf 7a27 	vldr	s15, [pc, #156]	; 8004bb8 <omni_move+0xc8>
  motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8004b1c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004bbc <omni_move+0xcc>
 8004b20:	eddf 4a27 	vldr	s9, [pc, #156]	; 8004bc0 <omni_move+0xd0>
  motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8004b24:	4c27      	ldr	r4, [pc, #156]	; (8004bc4 <omni_move+0xd4>)
 8004b26:	ee69 7a27 	vmul.f32	s15, s18, s15
  motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8004b2a:	ee29 7a07 	vmul.f32	s14, s18, s14
 8004b2e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004b32:	eef0 6a67 	vmov.f32	s13, s15
 8004b36:	eea8 7a24 	vfma.f32	s14, s16, s9
 8004b3a:	eee8 6a25 	vfma.f32	s13, s16, s11
  motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8004b3e:	ee05 0a10 	vmov	s10, r0
 8004b42:	eed8 7a25 	vfnms.f32	s15, s16, s11
 8004b46:	ee38 0a09 	vadd.f32	s0, s16, s18
  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 8004b4a:	ee06 0a10 	vmov	s12, r0
  motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8004b4e:	eea0 5a24 	vfma.f32	s10, s0, s9
  motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8004b52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004bc8 <omni_move+0xd8>
 8004b56:	ee36 0a26 	vadd.f32	s0, s12, s13
  motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8004b5a:	ee36 7a07 	vadd.f32	s14, s12, s14
  motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8004b5e:	ee77 7a86 	vadd.f32	s15, s15, s12
  motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8004b62:	ee20 0a25 	vmul.f32	s0, s0, s11
  motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8004b66:	ee27 7a25 	vmul.f32	s14, s14, s11
  motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8004b6a:	ee65 6a25 	vmul.f32	s13, s10, s11
  motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8004b6e:	ee67 7aa5 	vmul.f32	s15, s15, s11

  actuator_motor1(motor_voltage[0], duty_limit);
 8004b72:	eef0 0a68 	vmov.f32	s1, s17
  motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8004b76:	ed84 7a01 	vstr	s14, [r4, #4]
  motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8004b7a:	edc4 6a02 	vstr	s13, [r4, #8]
  motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8004b7e:	edc4 7a03 	vstr	s15, [r4, #12]
  motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8004b82:	ed84 0a00 	vstr	s0, [r4]
  actuator_motor1(motor_voltage[0], duty_limit);
 8004b86:	f7fc fa25 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(motor_voltage[1], duty_limit);
 8004b8a:	ed94 0a01 	vldr	s0, [r4, #4]
 8004b8e:	eef0 0a68 	vmov.f32	s1, s17
 8004b92:	f7fc fa3f 	bl	8001014 <actuator_motor2>
  actuator_motor3(motor_voltage[2], duty_limit);
 8004b96:	ed94 0a02 	vldr	s0, [r4, #8]
 8004b9a:	eef0 0a68 	vmov.f32	s1, s17
 8004b9e:	f7fc fa59 	bl	8001054 <actuator_motor3>
  actuator_motor4(motor_voltage[3], duty_limit);
 8004ba2:	eef0 0a68 	vmov.f32	s1, s17
}
 8004ba6:	ecbd 8b04 	vpop	{d8-d9}
  actuator_motor4(motor_voltage[3], duty_limit);
 8004baa:	ed94 0a03 	vldr	s0, [r4, #12]
}
 8004bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor4(motor_voltage[3], duty_limit);
 8004bb2:	f7fc ba6f 	b.w	8001094 <actuator_motor4>
 8004bb6:	bf00      	nop
 8004bb8:	3f5db3d7 	.word	0x3f5db3d7
 8004bbc:	3f3504f3 	.word	0x3f3504f3
 8004bc0:	bf3504f3 	.word	0xbf3504f3
 8004bc4:	200015c4 	.word	0x200015c4
 8004bc8:	40b5e430 	.word	0x40b5e430
 8004bcc:	47ae147b 	.word	0x47ae147b
 8004bd0:	3fb47ae1 	.word	0x3fb47ae1

08004bd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004bd4:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004bd6:	4811      	ldr	r0, [pc, #68]	; (8004c1c <MX_SPI1_Init+0x48>)
 8004bd8:	4c11      	ldr	r4, [pc, #68]	; (8004c20 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bda:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004bde:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004be0:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004be4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004be8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bec:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004bf0:	2420      	movs	r4, #32
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004bf2:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004bf4:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004bf6:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bf8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bfc:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c00:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c04:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c08:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c0a:	f003 f94b 	bl	8007ea4 <HAL_SPI_Init>
 8004c0e:	b900      	cbnz	r0, 8004c12 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c10:	bd10      	pop	{r4, pc}
 8004c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004c16:	f7ff ba9b 	b.w	8004150 <Error_Handler>
 8004c1a:	bf00      	nop
 8004c1c:	200015d4 	.word	0x200015d4
 8004c20:	40013000 	.word	0x40013000
 8004c24:	00000000 	.word	0x00000000

08004c28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c28:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_SPI_MspInit+0x70>)
 8004c2c:	6801      	ldr	r1, [r0, #0]
{
 8004c2e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c30:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8004c32:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c34:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c38:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c3c:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004c40:	b009      	add	sp, #36	; 0x24
 8004c42:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004c4e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8004c90 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c58:	661a      	str	r2, [r3, #96]	; 0x60
 8004c5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c60:	9200      	str	r2, [sp, #0]
 8004c62:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c74:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c76:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c80:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c82:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c84:	f002 f938 	bl	8006ef8 <HAL_GPIO_Init>
}
 8004c88:	b009      	add	sp, #36	; 0x24
 8004c8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c8e:	bf00      	nop
 8004c90:	000000e0 	.word	0x000000e0
 8004c94:	00000002 	.word	0x00000002
 8004c98:	40013000 	.word	0x40013000

08004c9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_MspInit+0x30>)
 8004c9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	661a      	str	r2, [r3, #96]	; 0x60
 8004ca6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004ca8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004caa:	f002 0201 	and.w	r2, r2, #1
 8004cae:	9200      	str	r2, [sp, #0]
 8004cb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cb8:	659a      	str	r2, [r3, #88]	; 0x58
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cc4:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8004cc6:	f002 ba9d 	b.w	8007204 <HAL_PWREx_DisableUCPDDeadBattery>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000

08004cd0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop

08004cd4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cd4:	e7fe      	b.n	8004cd4 <HardFault_Handler>
 8004cd6:	bf00      	nop

08004cd8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cd8:	e7fe      	b.n	8004cd8 <MemManage_Handler>
 8004cda:	bf00      	nop

08004cdc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cdc:	e7fe      	b.n	8004cdc <BusFault_Handler>
 8004cde:	bf00      	nop

08004ce0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ce0:	e7fe      	b.n	8004ce0 <UsageFault_Handler>
 8004ce2:	bf00      	nop

08004ce4 <SVC_Handler>:
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <DebugMon_Handler>:
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <PendSV_Handler>:
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cf0:	f000 bd3a 	b.w	8005768 <HAL_IncTick>

08004cf4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004cf4:	4801      	ldr	r0, [pc, #4]	; (8004cfc <DMA1_Channel2_IRQHandler+0x8>)
 8004cf6:	f001 bcad 	b.w	8006654 <HAL_DMA_IRQHandler>
 8004cfa:	bf00      	nop
 8004cfc:	200017f0 	.word	0x200017f0

08004d00 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004d00:	4801      	ldr	r0, [pc, #4]	; (8004d08 <DMA1_Channel3_IRQHandler+0x8>)
 8004d02:	f001 bca7 	b.w	8006654 <HAL_DMA_IRQHandler>
 8004d06:	bf00      	nop
 8004d08:	2000039c 	.word	0x2000039c

08004d0c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <DMA1_Channel4_IRQHandler+0x8>)
 8004d0e:	f001 bca1 	b.w	8006654 <HAL_DMA_IRQHandler>
 8004d12:	bf00      	nop
 8004d14:	200003fc 	.word	0x200003fc

08004d18 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <DMA1_Channel5_IRQHandler+0x8>)
 8004d1a:	f001 bc9b 	b.w	8006654 <HAL_DMA_IRQHandler>
 8004d1e:	bf00      	nop
 8004d20:	2000033c 	.word	0x2000033c

08004d24 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <DMA1_Channel6_IRQHandler+0x8>)
 8004d26:	f001 bc95 	b.w	8006654 <HAL_DMA_IRQHandler>
 8004d2a:	bf00      	nop
 8004d2c:	200016d0 	.word	0x200016d0

08004d30 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004d30:	4801      	ldr	r0, [pc, #4]	; (8004d38 <DMA1_Channel7_IRQHandler+0x8>)
 8004d32:	f001 bc8f 	b.w	8006654 <HAL_DMA_IRQHandler>
 8004d36:	bf00      	nop
 8004d38:	20001730 	.word	0x20001730

08004d3c <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004d3c:	4801      	ldr	r0, [pc, #4]	; (8004d44 <FDCAN1_IT0_IRQHandler+0x8>)
 8004d3e:	f002 b817 	b.w	8006d70 <HAL_FDCAN_IRQHandler>
 8004d42:	bf00      	nop
 8004d44:	20000cac 	.word	0x20000cac

08004d48 <FDCAN1_IT1_IRQHandler>:
 8004d48:	4801      	ldr	r0, [pc, #4]	; (8004d50 <FDCAN1_IT1_IRQHandler+0x8>)
 8004d4a:	f002 b811 	b.w	8006d70 <HAL_FDCAN_IRQHandler>
 8004d4e:	bf00      	nop
 8004d50:	20000cac 	.word	0x20000cac

08004d54 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d54:	4801      	ldr	r0, [pc, #4]	; (8004d5c <USART2_IRQHandler+0x8>)
 8004d56:	f004 ba43 	b.w	80091e0 <HAL_UART_IRQHandler>
 8004d5a:	bf00      	nop
 8004d5c:	200018e0 	.word	0x200018e0

08004d60 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d60:	4801      	ldr	r0, [pc, #4]	; (8004d68 <TIM7_DAC_IRQHandler+0x8>)
 8004d62:	f003 bdb5 	b.w	80088d0 <HAL_TIM_IRQHandler>
 8004d66:	bf00      	nop
 8004d68:	20001684 	.word	0x20001684

08004d6c <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <FDCAN2_IT0_IRQHandler+0x8>)
 8004d6e:	f001 bfff 	b.w	8006d70 <HAL_FDCAN_IRQHandler>
 8004d72:	bf00      	nop
 8004d74:	20000d10 	.word	0x20000d10

08004d78 <FDCAN2_IT1_IRQHandler>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <FDCAN2_IT1_IRQHandler+0x8>)
 8004d7a:	f001 bff9 	b.w	8006d70 <HAL_FDCAN_IRQHandler>
 8004d7e:	bf00      	nop
 8004d80:	20000d10 	.word	0x20000d10

08004d84 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004d84:	4801      	ldr	r0, [pc, #4]	; (8004d8c <LPUART1_IRQHandler+0x8>)
 8004d86:	f004 ba2b 	b.w	80091e0 <HAL_UART_IRQHandler>
 8004d8a:	bf00      	nop
 8004d8c:	20001850 	.word	0x20001850

08004d90 <DMA1_Channel8_IRQHandler>:
void DMA1_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004d90:	4801      	ldr	r0, [pc, #4]	; (8004d98 <DMA1_Channel8_IRQHandler+0x8>)
 8004d92:	f001 bc5f 	b.w	8006654 <HAL_DMA_IRQHandler>
 8004d96:	bf00      	nop
 8004d98:	20001790 	.word	0x20001790

08004d9c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	4770      	bx	lr

08004da0 <_kill>:

int _kill(int pid, int sig)
{
 8004da0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004da2:	f006 fa8f 	bl	800b2c4 <__errno>
 8004da6:	2316      	movs	r3, #22
 8004da8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	bd08      	pop	{r3, pc}

08004db0 <_exit>:

void _exit (int status)
{
 8004db0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004db2:	f006 fa87 	bl	800b2c4 <__errno>
 8004db6:	2316      	movs	r3, #22
 8004db8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004dba:	e7fe      	b.n	8004dba <_exit+0xa>

08004dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dbc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dbe:	1e16      	subs	r6, r2, #0
 8004dc0:	dd07      	ble.n	8004dd2 <_read+0x16>
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004dc6:	f3af 8000 	nop.w
 8004dca:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dce:	42a5      	cmp	r5, r4
 8004dd0:	d1f9      	bne.n	8004dc6 <_read+0xa>
	}

return len;
}
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
 8004dd6:	bf00      	nop

08004dd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dd8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dda:	1e16      	subs	r6, r2, #0
 8004ddc:	dd07      	ble.n	8004dee <_write+0x16>
 8004dde:	460c      	mov	r4, r1
 8004de0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8004de2:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004de6:	f7fd ff83 	bl	8002cf0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dea:	42ac      	cmp	r4, r5
 8004dec:	d1f9      	bne.n	8004de2 <_write+0xa>
	}
	return len;
}
 8004dee:	4630      	mov	r0, r6
 8004df0:	bd70      	pop	{r4, r5, r6, pc}
 8004df2:	bf00      	nop

08004df4 <_close>:

int _close(int file)
{
	return -1;
}
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop

08004dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e00:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004e02:	2000      	movs	r0, #0
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop

08004e08 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004e08:	2001      	movs	r0, #1
 8004e0a:	4770      	bx	lr

08004e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	4770      	bx	lr

08004e10 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <SystemInit+0x18>)
 8004e12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e1a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e22:	6099      	str	r1, [r3, #8]
#endif
}
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	e000ed00 	.word	0xe000ed00
 8004e2c:	00000000 	.word	0x00000000

08004e30 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004e30:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004e32:	4c33      	ldr	r4, [pc, #204]	; (8004f00 <MX_TIM5_Init+0xd0>)
 8004e34:	4a33      	ldr	r2, [pc, #204]	; (8004f04 <MX_TIM5_Init+0xd4>)
 8004e36:	6022      	str	r2, [r4, #0]
{
 8004e38:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 8004e3a:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e3c:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 8004e3e:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004e40:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 8004e42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e46:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e4a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8004e4e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004e52:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 8004e56:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e5a:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e5c:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e5e:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e60:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004e62:	f003 fbe1 	bl	8008628 <HAL_TIM_PWM_Init>
 8004e66:	bb00      	cbnz	r0, 8004eaa <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e68:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e6a:	4825      	ldr	r0, [pc, #148]	; (8004f00 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e6c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e6e:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e70:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004e72:	f003 ff83 	bl	8008d7c <HAL_TIMEx_MasterConfigSynchronization>
 8004e76:	b9f0      	cbnz	r0, 8004eb6 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e78:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8004ef0 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e7c:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e7e:	4820      	ldr	r0, [pc, #128]	; (8004f00 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e80:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e82:	2204      	movs	r2, #4
 8004e84:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e86:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e8a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e8c:	f003 fe6c 	bl	8008b68 <HAL_TIM_PWM_ConfigChannel>
 8004e90:	b970      	cbnz	r0, 8004eb0 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 8004e92:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <MX_TIM5_Init+0xd4>)
 8004e94:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e96:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8004e98:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e9a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004e9e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004ea2:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 8004ea4:	d00a      	beq.n	8004ebc <MX_TIM5_Init+0x8c>
}
 8004ea6:	b012      	add	sp, #72	; 0x48
 8004ea8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004eaa:	f7ff f951 	bl	8004150 <Error_Handler>
 8004eae:	e7db      	b.n	8004e68 <MX_TIM5_Init+0x38>
    Error_Handler();
 8004eb0:	f7ff f94e 	bl	8004150 <Error_Handler>
 8004eb4:	e7ed      	b.n	8004e92 <MX_TIM5_Init+0x62>
    Error_Handler();
 8004eb6:	f7ff f94b 	bl	8004150 <Error_Handler>
 8004eba:	e7dd      	b.n	8004e78 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ebc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004ec0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8004ec4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8004ef8 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004eca:	480f      	ldr	r0, [pc, #60]	; (8004f08 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ecc:	f042 0204 	orr.w	r2, r2, #4
 8004ed0:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004eda:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8004edc:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8004ede:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee2:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8004ee4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004ee6:	f002 f807 	bl	8006ef8 <HAL_GPIO_Init>
}
 8004eea:	b012      	add	sp, #72	; 0x48
 8004eec:	bd10      	pop	{r4, pc}
 8004eee:	bf00      	nop
 8004ef0:	00000060 	.word	0x00000060
 8004ef4:	00000000 	.word	0x00000000
 8004ef8:	00001000 	.word	0x00001000
 8004efc:	00000002 	.word	0x00000002
 8004f00:	20001638 	.word	0x20001638
 8004f04:	40000c00 	.word	0x40000c00
 8004f08:	48000800 	.word	0x48000800

08004f0c <MX_TIM7_Init>:
{
 8004f0c:	b500      	push	{lr}
  htim7.Instance = TIM7;
 8004f0e:	4812      	ldr	r0, [pc, #72]	; (8004f58 <MX_TIM7_Init+0x4c>)
 8004f10:	4912      	ldr	r1, [pc, #72]	; (8004f5c <MX_TIM7_Init+0x50>)
{
 8004f12:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 8004f14:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f16:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8004f18:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 2000;
 8004f1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f20:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 2000;
 8004f24:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f28:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f2a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004f2c:	f003 faa0 	bl	8008470 <HAL_TIM_Base_Init>
 8004f30:	b950      	cbnz	r0, 8004f48 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f32:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f34:	4808      	ldr	r0, [pc, #32]	; (8004f58 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f36:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f38:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f3a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f3c:	f003 ff1e 	bl	8008d7c <HAL_TIMEx_MasterConfigSynchronization>
 8004f40:	b928      	cbnz	r0, 8004f4e <MX_TIM7_Init+0x42>
}
 8004f42:	b005      	add	sp, #20
 8004f44:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8004f48:	f7ff f902 	bl	8004150 <Error_Handler>
 8004f4c:	e7f1      	b.n	8004f32 <MX_TIM7_Init+0x26>
    Error_Handler();
 8004f4e:	f7ff f8ff 	bl	8004150 <Error_Handler>
}
 8004f52:	b005      	add	sp, #20
 8004f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f58:	20001684 	.word	0x20001684
 8004f5c:	40001400 	.word	0x40001400

08004f60 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_TIM_PWM_MspInit+0x28>)
 8004f62:	6802      	ldr	r2, [r0, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d000      	beq.n	8004f6a <HAL_TIM_PWM_MspInit+0xa>
 8004f68:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f6a:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 8004f6e:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f72:	f042 0208 	orr.w	r2, r2, #8
 8004f76:	659a      	str	r2, [r3, #88]	; 0x58
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	9b01      	ldr	r3, [sp, #4]
}
 8004f82:	b002      	add	sp, #8
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40000c00 	.word	0x40000c00

08004f8c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <HAL_TIM_Base_MspInit+0x3c>)
 8004f8e:	6802      	ldr	r2, [r0, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d000      	beq.n	8004f96 <HAL_TIM_Base_MspInit+0xa>
 8004f94:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f96:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 8004f9a:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f9c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004f9e:	f041 0120 	orr.w	r1, r1, #32
 8004fa2:	6599      	str	r1, [r3, #88]	; 0x58
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8004fa6:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8004fae:	2037      	movs	r0, #55	; 0x37
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004fb4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8004fb6:	f001 f97f 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8004fba:	2037      	movs	r0, #55	; 0x37
}
 8004fbc:	b003      	add	sp, #12
 8004fbe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8004fc2:	f001 b9b7 	b.w	8006334 <HAL_NVIC_EnableIRQ>
 8004fc6:	bf00      	nop
 8004fc8:	40001400 	.word	0x40001400
 8004fcc:	00000000 	.word	0x00000000

08004fd0 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fd0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005058 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 8004fd4:	4822      	ldr	r0, [pc, #136]	; (8005060 <MX_LPUART1_UART_Init+0x90>)
 8004fd6:	4923      	ldr	r1, [pc, #140]	; (8005064 <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 8004fd8:	4a23      	ldr	r2, [pc, #140]	; (8005068 <MX_LPUART1_UART_Init+0x98>)
{
 8004fda:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fdc:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 8004fde:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004fe2:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004fe4:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fea:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004fee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004ff2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ff6:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004ff8:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004ffa:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004ffc:	f005 f84a 	bl	800a094 <HAL_UART_Init>
 8005000:	b970      	cbnz	r0, 8005020 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005002:	4817      	ldr	r0, [pc, #92]	; (8005060 <MX_LPUART1_UART_Init+0x90>)
 8005004:	2100      	movs	r1, #0
 8005006:	f005 f953 	bl	800a2b0 <HAL_UARTEx_SetTxFifoThreshold>
 800500a:	b988      	cbnz	r0, 8005030 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800500c:	4814      	ldr	r0, [pc, #80]	; (8005060 <MX_LPUART1_UART_Init+0x90>)
 800500e:	2100      	movs	r1, #0
 8005010:	f005 f990 	bl	800a334 <HAL_UARTEx_SetRxFifoThreshold>
 8005014:	b9a0      	cbnz	r0, 8005040 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005016:	4812      	ldr	r0, [pc, #72]	; (8005060 <MX_LPUART1_UART_Init+0x90>)
 8005018:	f005 f92c 	bl	800a274 <HAL_UARTEx_DisableFifoMode>
 800501c:	b9b8      	cbnz	r0, 800504e <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800501e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005020:	f7ff f896 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005024:	480e      	ldr	r0, [pc, #56]	; (8005060 <MX_LPUART1_UART_Init+0x90>)
 8005026:	2100      	movs	r1, #0
 8005028:	f005 f942 	bl	800a2b0 <HAL_UARTEx_SetTxFifoThreshold>
 800502c:	2800      	cmp	r0, #0
 800502e:	d0ed      	beq.n	800500c <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 8005030:	f7ff f88e 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005034:	480a      	ldr	r0, [pc, #40]	; (8005060 <MX_LPUART1_UART_Init+0x90>)
 8005036:	2100      	movs	r1, #0
 8005038:	f005 f97c 	bl	800a334 <HAL_UARTEx_SetRxFifoThreshold>
 800503c:	2800      	cmp	r0, #0
 800503e:	d0ea      	beq.n	8005016 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 8005040:	f7ff f886 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005044:	4806      	ldr	r0, [pc, #24]	; (8005060 <MX_LPUART1_UART_Init+0x90>)
 8005046:	f005 f915 	bl	800a274 <HAL_UARTEx_DisableFifoMode>
 800504a:	2800      	cmp	r0, #0
 800504c:	d0e7      	beq.n	800501e <MX_LPUART1_UART_Init+0x4e>
}
 800504e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005052:	f7ff b87d 	b.w	8004150 <Error_Handler>
 8005056:	bf00      	nop
	...
 8005060:	20001850 	.word	0x20001850
 8005064:	40008000 	.word	0x40008000
 8005068:	001e8480 	.word	0x001e8480

0800506c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800506c:	4821      	ldr	r0, [pc, #132]	; (80050f4 <MX_USART2_UART_Init+0x88>)
 800506e:	4922      	ldr	r1, [pc, #136]	; (80050f8 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 8005070:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 8005074:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005076:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8005078:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800507c:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800507e:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005080:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005084:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005088:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800508c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005090:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005094:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005096:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005098:	f004 fffc 	bl	800a094 <HAL_UART_Init>
 800509c:	b970      	cbnz	r0, 80050bc <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800509e:	4815      	ldr	r0, [pc, #84]	; (80050f4 <MX_USART2_UART_Init+0x88>)
 80050a0:	2100      	movs	r1, #0
 80050a2:	f005 f905 	bl	800a2b0 <HAL_UARTEx_SetTxFifoThreshold>
 80050a6:	b988      	cbnz	r0, 80050cc <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050a8:	4812      	ldr	r0, [pc, #72]	; (80050f4 <MX_USART2_UART_Init+0x88>)
 80050aa:	2100      	movs	r1, #0
 80050ac:	f005 f942 	bl	800a334 <HAL_UARTEx_SetRxFifoThreshold>
 80050b0:	b9a0      	cbnz	r0, 80050dc <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80050b2:	4810      	ldr	r0, [pc, #64]	; (80050f4 <MX_USART2_UART_Init+0x88>)
 80050b4:	f005 f8de 	bl	800a274 <HAL_UARTEx_DisableFifoMode>
 80050b8:	b9b8      	cbnz	r0, 80050ea <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80050ba:	bd10      	pop	{r4, pc}
    Error_Handler();
 80050bc:	f7ff f848 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050c0:	480c      	ldr	r0, [pc, #48]	; (80050f4 <MX_USART2_UART_Init+0x88>)
 80050c2:	2100      	movs	r1, #0
 80050c4:	f005 f8f4 	bl	800a2b0 <HAL_UARTEx_SetTxFifoThreshold>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d0ed      	beq.n	80050a8 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 80050cc:	f7ff f840 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050d0:	4808      	ldr	r0, [pc, #32]	; (80050f4 <MX_USART2_UART_Init+0x88>)
 80050d2:	2100      	movs	r1, #0
 80050d4:	f005 f92e 	bl	800a334 <HAL_UARTEx_SetRxFifoThreshold>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d0ea      	beq.n	80050b2 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 80050dc:	f7ff f838 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80050e0:	4804      	ldr	r0, [pc, #16]	; (80050f4 <MX_USART2_UART_Init+0x88>)
 80050e2:	f005 f8c7 	bl	800a274 <HAL_UARTEx_DisableFifoMode>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0e7      	beq.n	80050ba <MX_USART2_UART_Init+0x4e>
}
 80050ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80050ee:	f7ff b82f 	b.w	8004150 <Error_Handler>
 80050f2:	bf00      	nop
 80050f4:	200018e0 	.word	0x200018e0
 80050f8:	40004400 	.word	0x40004400

080050fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80050fc:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80050fe:	481f      	ldr	r0, [pc, #124]	; (800517c <MX_USART3_UART_Init+0x80>)
 8005100:	4c1f      	ldr	r4, [pc, #124]	; (8005180 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005102:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8005104:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005108:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 800510a:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800510e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005112:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005116:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800511a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800511e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005120:	f004 ffb8 	bl	800a094 <HAL_UART_Init>
 8005124:	b970      	cbnz	r0, 8005144 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005126:	4815      	ldr	r0, [pc, #84]	; (800517c <MX_USART3_UART_Init+0x80>)
 8005128:	2100      	movs	r1, #0
 800512a:	f005 f8c1 	bl	800a2b0 <HAL_UARTEx_SetTxFifoThreshold>
 800512e:	b988      	cbnz	r0, 8005154 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005130:	4812      	ldr	r0, [pc, #72]	; (800517c <MX_USART3_UART_Init+0x80>)
 8005132:	2100      	movs	r1, #0
 8005134:	f005 f8fe 	bl	800a334 <HAL_UARTEx_SetRxFifoThreshold>
 8005138:	b9a0      	cbnz	r0, 8005164 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800513a:	4810      	ldr	r0, [pc, #64]	; (800517c <MX_USART3_UART_Init+0x80>)
 800513c:	f005 f89a 	bl	800a274 <HAL_UARTEx_DisableFifoMode>
 8005140:	b9b8      	cbnz	r0, 8005172 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005142:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005144:	f7ff f804 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005148:	480c      	ldr	r0, [pc, #48]	; (800517c <MX_USART3_UART_Init+0x80>)
 800514a:	2100      	movs	r1, #0
 800514c:	f005 f8b0 	bl	800a2b0 <HAL_UARTEx_SetTxFifoThreshold>
 8005150:	2800      	cmp	r0, #0
 8005152:	d0ed      	beq.n	8005130 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8005154:	f7fe fffc 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005158:	4808      	ldr	r0, [pc, #32]	; (800517c <MX_USART3_UART_Init+0x80>)
 800515a:	2100      	movs	r1, #0
 800515c:	f005 f8ea 	bl	800a334 <HAL_UARTEx_SetRxFifoThreshold>
 8005160:	2800      	cmp	r0, #0
 8005162:	d0ea      	beq.n	800513a <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8005164:	f7fe fff4 	bl	8004150 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005168:	4804      	ldr	r0, [pc, #16]	; (800517c <MX_USART3_UART_Init+0x80>)
 800516a:	f005 f883 	bl	800a274 <HAL_UARTEx_DisableFifoMode>
 800516e:	2800      	cmp	r0, #0
 8005170:	d0e7      	beq.n	8005142 <MX_USART3_UART_Init+0x46>
}
 8005172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005176:	f7fe bfeb 	b.w	8004150 <Error_Handler>
 800517a:	bf00      	nop
 800517c:	20001970 	.word	0x20001970
 8005180:	40004800 	.word	0x40004800

08005184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4604      	mov	r4, r0
 8005188:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800518a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800518c:	2254      	movs	r2, #84	; 0x54
 800518e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005190:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8005194:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8005198:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800519a:	f006 f841 	bl	800b220 <memset>
  if(uartHandle->Instance==LPUART1)
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	4a93      	ldr	r2, [pc, #588]	; (80053f0 <HAL_UART_MspInit+0x26c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d008      	beq.n	80051b8 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80051a6:	4a93      	ldr	r2, [pc, #588]	; (80053f4 <HAL_UART_MspInit+0x270>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d067      	beq.n	800527c <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80051ac:	4a92      	ldr	r2, [pc, #584]	; (80053f8 <HAL_UART_MspInit+0x274>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	f000 80ba 	beq.w	8005328 <HAL_UART_MspInit+0x1a4>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80051b4:	b020      	add	sp, #128	; 0x80
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80051b8:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051ba:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80051bc:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051be:	f002 fbd5 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f040 8104 	bne.w	80053d0 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80051c8:	4b8c      	ldr	r3, [pc, #560]	; (80053fc <HAL_UART_MspInit+0x278>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 80051ca:	4e8d      	ldr	r6, [pc, #564]	; (8005400 <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80051cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80051d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051d6:	f002 0201 	and.w	r2, r2, #1
 80051da:	9200      	str	r2, [sp, #0]
 80051dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80051e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051ee:	220c      	movs	r2, #12
 80051f0:	2302      	movs	r3, #2
 80051f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80051f6:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005200:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005202:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005208:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520a:	f001 fe75 	bl	8006ef8 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800520e:	497d      	ldr	r1, [pc, #500]	; (8005404 <HAL_UART_MspInit+0x280>)
 8005210:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005212:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005214:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005218:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800521a:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800521c:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800521e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005222:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005226:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800522a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800522c:	f001 f8aa 	bl	8006384 <HAL_DMA_Init>
 8005230:	2800      	cmp	r0, #0
 8005232:	f040 80ca 	bne.w	80053ca <HAL_UART_MspInit+0x246>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8005236:	4d74      	ldr	r5, [pc, #464]	; (8005408 <HAL_UART_MspInit+0x284>)
 8005238:	4974      	ldr	r1, [pc, #464]	; (800540c <HAL_UART_MspInit+0x288>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800523a:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800523c:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800523e:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005240:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005244:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005246:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005248:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800524a:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800524e:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005252:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005256:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005258:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800525a:	f001 f893 	bl	8006384 <HAL_DMA_Init>
 800525e:	2800      	cmp	r0, #0
 8005260:	f040 80b0 	bne.w	80053c4 <HAL_UART_MspInit+0x240>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005264:	2200      	movs	r2, #0
 8005266:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005268:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800526a:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800526c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 800526e:	f001 f823 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005272:	205b      	movs	r0, #91	; 0x5b
 8005274:	f001 f85e 	bl	8006334 <HAL_NVIC_EnableIRQ>
}
 8005278:	b020      	add	sp, #128	; 0x80
 800527a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800527c:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800527e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005280:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005282:	f002 fb73 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8005286:	2800      	cmp	r0, #0
 8005288:	f040 80a5 	bne.w	80053d6 <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART2_CLK_ENABLE();
 800528c:	4b5b      	ldr	r3, [pc, #364]	; (80053fc <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 800528e:	4860      	ldr	r0, [pc, #384]	; (8005410 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_tx.Instance = DMA1_Channel8;
 8005292:	4d60      	ldr	r5, [pc, #384]	; (8005414 <HAL_UART_MspInit+0x290>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005294:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005298:	659a      	str	r2, [r3, #88]	; 0x58
 800529a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800529c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80052a0:	9202      	str	r2, [sp, #8]
 80052a2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052a6:	f042 0202 	orr.w	r2, r2, #2
 80052aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 80052b4:	2208      	movs	r2, #8
 80052b6:	2302      	movs	r3, #2
 80052b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052bc:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 80052be:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052c2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 80052c4:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 80052c6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 80052c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 80052cc:	f001 fe14 	bl	8006ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 80052d0:	2210      	movs	r2, #16
 80052d2:	2302      	movs	r3, #2
 80052d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 80052d8:	484d      	ldr	r0, [pc, #308]	; (8005410 <HAL_UART_MspInit+0x28c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052da:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 80052dc:	2201      	movs	r2, #1
 80052de:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 80052e0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 80052e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 80052e6:	f001 fe07 	bl	8006ef8 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80052ea:	494b      	ldr	r1, [pc, #300]	; (8005418 <HAL_UART_MspInit+0x294>)
 80052ec:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052ee:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80052f0:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80052f4:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052f6:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052f8:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052fa:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052fe:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005302:	e9c5 3307 	strd	r3, r3, [r5, #28]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005306:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005308:	f001 f83c 	bl	8006384 <HAL_DMA_Init>
 800530c:	2800      	cmp	r0, #0
 800530e:	d165      	bne.n	80053dc <HAL_UART_MspInit+0x258>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005310:	2200      	movs	r2, #0
 8005312:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005314:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005316:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005318:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800531a:	f000 ffcd 	bl	80062b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800531e:	2026      	movs	r0, #38	; 0x26
 8005320:	f001 f808 	bl	8006334 <HAL_NVIC_EnableIRQ>
}
 8005324:	b020      	add	sp, #128	; 0x80
 8005326:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005328:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800532a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800532c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800532e:	f002 fb1d 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8005332:	2800      	cmp	r0, #0
 8005334:	d158      	bne.n	80053e8 <HAL_UART_MspInit+0x264>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005336:	4b31      	ldr	r3, [pc, #196]	; (80053fc <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005338:	4838      	ldr	r0, [pc, #224]	; (800541c <HAL_UART_MspInit+0x298>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800533a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800533c:	4d38      	ldr	r5, [pc, #224]	; (8005420 <HAL_UART_MspInit+0x29c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800533e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005342:	659a      	str	r2, [r3, #88]	; 0x58
 8005344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005346:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800534a:	9204      	str	r2, [sp, #16]
 800534c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800534e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005350:	f042 0204 	orr.w	r2, r2, #4
 8005354:	64da      	str	r2, [r3, #76]	; 0x4c
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 800535e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005362:	2302      	movs	r3, #2
 8005364:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005368:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 800536a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800536c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800536e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005370:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005372:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8005374:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005378:	f001 fdbe 	bl	8006ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 800537c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005380:	2302      	movs	r3, #2
 8005382:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005386:	4825      	ldr	r0, [pc, #148]	; (800541c <HAL_UART_MspInit+0x298>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005388:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 800538a:	2201      	movs	r2, #1
 800538c:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 800538e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8005390:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8005394:	f001 fdb0 	bl	8006ef8 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005398:	4922      	ldr	r1, [pc, #136]	; (8005424 <HAL_UART_MspInit+0x2a0>)
 800539a:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800539c:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800539e:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80053a2:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053a4:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80053a6:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053a8:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053ac:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80053b0:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053b4:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80053b6:	f000 ffe5 	bl	8006384 <HAL_DMA_Init>
 80053ba:	b990      	cbnz	r0, 80053e2 <HAL_UART_MspInit+0x25e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80053bc:	67e5      	str	r5, [r4, #124]	; 0x7c
 80053be:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80053c0:	b020      	add	sp, #128	; 0x80
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80053c4:	f7fe fec4 	bl	8004150 <Error_Handler>
 80053c8:	e74c      	b.n	8005264 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80053ca:	f7fe fec1 	bl	8004150 <Error_Handler>
 80053ce:	e732      	b.n	8005236 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 80053d0:	f7fe febe 	bl	8004150 <Error_Handler>
 80053d4:	e6f8      	b.n	80051c8 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80053d6:	f7fe febb 	bl	8004150 <Error_Handler>
 80053da:	e757      	b.n	800528c <HAL_UART_MspInit+0x108>
      Error_Handler();
 80053dc:	f7fe feb8 	bl	8004150 <Error_Handler>
 80053e0:	e796      	b.n	8005310 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80053e2:	f7fe feb5 	bl	8004150 <Error_Handler>
 80053e6:	e7e9      	b.n	80053bc <HAL_UART_MspInit+0x238>
      Error_Handler();
 80053e8:	f7fe feb2 	bl	8004150 <Error_Handler>
 80053ec:	e7a3      	b.n	8005336 <HAL_UART_MspInit+0x1b2>
 80053ee:	bf00      	nop
 80053f0:	40008000 	.word	0x40008000
 80053f4:	40004400 	.word	0x40004400
 80053f8:	40004800 	.word	0x40004800
 80053fc:	40021000 	.word	0x40021000
 8005400:	200016d0 	.word	0x200016d0
 8005404:	4002006c 	.word	0x4002006c
 8005408:	20001730 	.word	0x20001730
 800540c:	40020080 	.word	0x40020080
 8005410:	48000400 	.word	0x48000400
 8005414:	20001790 	.word	0x20001790
 8005418:	40020094 	.word	0x40020094
 800541c:	48000800 	.word	0x48000800
 8005420:	200017f0 	.word	0x200017f0
 8005424:	4002001c 	.word	0x4002001c

08005428 <uchar4_to_float>:
  Float_char4 tmp;
  tmp.char4_value[0] = value[0];
  tmp.char4_value[1] = value[1];
  tmp.char4_value[2] = value[2];
  tmp.char4_value[3] = value[3];
  return tmp.float_value;
 8005428:	6803      	ldr	r3, [r0, #0]
 800542a:	ee00 3a10 	vmov	s0, r3
}
 800542e:	4770      	bx	lr

08005430 <float_to_uchar4>:

void float_to_uchar4(unsigned char * value, float float_value)
{
  Float_char4 tmp;
  tmp.float_value = float_value;
  value[0] = tmp.char4_value[0];
 8005430:	ee10 3a10 	vmov	r3, s0
 8005434:	6003      	str	r3, [r0, #0]
  value[1] = tmp.char4_value[1];
  value[2] = tmp.char4_value[2];
  value[3] = tmp.char4_value[3];
}
 8005436:	4770      	bx	lr

08005438 <getAngleDiff>:
  }
  return angle_rad;
}

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8005438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (angle_rad > M_PI) {
 800543c:	ee10 0a10 	vmov	r0, s0
{
 8005440:	ed2d 8b04 	vpush	{d8-d9}
 8005444:	eeb0 8a40 	vmov.f32	s16, s0
 8005448:	eef0 8a60 	vmov.f32	s17, s1
  while (angle_rad > M_PI) {
 800544c:	f7fb f8a4 	bl	8000598 <__aeabi_f2d>
 8005450:	a35f      	add	r3, pc, #380	; (adr r3, 80055d0 <getAngleDiff+0x198>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	4606      	mov	r6, r0
 8005458:	460f      	mov	r7, r1
 800545a:	f7fb fb85 	bl	8000b68 <__aeabi_dcmpgt>
 800545e:	b1d0      	cbz	r0, 8005496 <getAngleDiff+0x5e>
    angle_rad -= 2.0f * M_PI;
 8005460:	f20f 1974 	addw	r9, pc, #372	; 0x174
 8005464:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 8005468:	a559      	add	r5, pc, #356	; (adr r5, 80055d0 <getAngleDiff+0x198>)
 800546a:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad -= 2.0f * M_PI;
 800546e:	4642      	mov	r2, r8
 8005470:	464b      	mov	r3, r9
 8005472:	4630      	mov	r0, r6
 8005474:	4639      	mov	r1, r7
 8005476:	f7fa ff2f 	bl	80002d8 <__aeabi_dsub>
 800547a:	f7fb fbdd 	bl	8000c38 <__aeabi_d2f>
 800547e:	ee08 0a10 	vmov	s16, r0
  while (angle_rad > M_PI) {
 8005482:	f7fb f889 	bl	8000598 <__aeabi_f2d>
 8005486:	4622      	mov	r2, r4
 8005488:	462b      	mov	r3, r5
 800548a:	4606      	mov	r6, r0
 800548c:	460f      	mov	r7, r1
 800548e:	f7fb fb6b 	bl	8000b68 <__aeabi_dcmpgt>
 8005492:	2800      	cmp	r0, #0
 8005494:	d1eb      	bne.n	800546e <getAngleDiff+0x36>
  while (angle_rad < -M_PI) {
 8005496:	a352      	add	r3, pc, #328	; (adr r3, 80055e0 <getAngleDiff+0x1a8>)
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb fb44 	bl	8000b2c <__aeabi_dcmplt>
 80054a4:	b1d0      	cbz	r0, 80054dc <getAngleDiff+0xa4>
    angle_rad += 2.0f * M_PI;
 80054a6:	f20f 1930 	addw	r9, pc, #304	; 0x130
 80054aa:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 80054ae:	a54c      	add	r5, pc, #304	; (adr r5, 80055e0 <getAngleDiff+0x1a8>)
 80054b0:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad += 2.0f * M_PI;
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	4630      	mov	r0, r6
 80054ba:	4639      	mov	r1, r7
 80054bc:	f7fa ff0e 	bl	80002dc <__adddf3>
 80054c0:	f7fb fbba 	bl	8000c38 <__aeabi_d2f>
 80054c4:	ee08 0a10 	vmov	s16, r0
  while (angle_rad < -M_PI) {
 80054c8:	f7fb f866 	bl	8000598 <__aeabi_f2d>
 80054cc:	4622      	mov	r2, r4
 80054ce:	462b      	mov	r3, r5
 80054d0:	4606      	mov	r6, r0
 80054d2:	460f      	mov	r7, r1
 80054d4:	f7fb fb2a 	bl	8000b2c <__aeabi_dcmplt>
 80054d8:	2800      	cmp	r0, #0
 80054da:	d1eb      	bne.n	80054b4 <getAngleDiff+0x7c>
  while (angle_rad > M_PI) {
 80054dc:	ee18 0a90 	vmov	r0, s17
 80054e0:	f7fb f85a 	bl	8000598 <__aeabi_f2d>
 80054e4:	a33a      	add	r3, pc, #232	; (adr r3, 80055d0 <getAngleDiff+0x198>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	4604      	mov	r4, r0
 80054ec:	460d      	mov	r5, r1
 80054ee:	f7fb fb3b 	bl	8000b68 <__aeabi_dcmpgt>
 80054f2:	b1d8      	cbz	r0, 800552c <getAngleDiff+0xf4>
    angle_rad -= 2.0f * M_PI;
 80054f4:	f20f 09e0 	addw	r9, pc, #224	; 0xe0
 80054f8:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 80054fc:	f20f 0bd0 	addw	fp, pc, #208	; 0xd0
 8005500:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad -= 2.0f * M_PI;
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	4620      	mov	r0, r4
 800550a:	4629      	mov	r1, r5
 800550c:	f7fa fee4 	bl	80002d8 <__aeabi_dsub>
 8005510:	f7fb fb92 	bl	8000c38 <__aeabi_d2f>
 8005514:	ee08 0a90 	vmov	s17, r0
  while (angle_rad > M_PI) {
 8005518:	f7fb f83e 	bl	8000598 <__aeabi_f2d>
 800551c:	4652      	mov	r2, sl
 800551e:	465b      	mov	r3, fp
 8005520:	4604      	mov	r4, r0
 8005522:	460d      	mov	r5, r1
 8005524:	f7fb fb20 	bl	8000b68 <__aeabi_dcmpgt>
 8005528:	2800      	cmp	r0, #0
 800552a:	d1eb      	bne.n	8005504 <getAngleDiff+0xcc>
  while (angle_rad < -M_PI) {
 800552c:	a32c      	add	r3, pc, #176	; (adr r3, 80055e0 <getAngleDiff+0x1a8>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	4620      	mov	r0, r4
 8005534:	4629      	mov	r1, r5
 8005536:	f7fb faf9 	bl	8000b2c <__aeabi_dcmplt>
 800553a:	b1d8      	cbz	r0, 8005574 <getAngleDiff+0x13c>
    angle_rad += 2.0f * M_PI;
 800553c:	f20f 0998 	addw	r9, pc, #152	; 0x98
 8005540:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 8005544:	f20f 0b98 	addw	fp, pc, #152	; 0x98
 8005548:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad += 2.0f * M_PI;
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	4620      	mov	r0, r4
 8005552:	4629      	mov	r1, r5
 8005554:	f7fa fec2 	bl	80002dc <__adddf3>
 8005558:	f7fb fb6e 	bl	8000c38 <__aeabi_d2f>
 800555c:	ee08 0a90 	vmov	s17, r0
  while (angle_rad < -M_PI) {
 8005560:	f7fb f81a 	bl	8000598 <__aeabi_f2d>
 8005564:	4652      	mov	r2, sl
 8005566:	465b      	mov	r3, fp
 8005568:	4604      	mov	r4, r0
 800556a:	460d      	mov	r5, r1
 800556c:	f7fb fade 	bl	8000b2c <__aeabi_dcmplt>
 8005570:	2800      	cmp	r0, #0
 8005572:	d1eb      	bne.n	800554c <getAngleDiff+0x114>
  angle_rad1 = normalizeAngle(angle_rad1);
  angle_rad2 = normalizeAngle(angle_rad2);
  if (fabs(angle_rad1 - angle_rad2) > M_PI) {
 8005574:	ee38 9a68 	vsub.f32	s18, s16, s17
 8005578:	eef0 7ac9 	vabs.f32	s15, s18
 800557c:	ee17 0a90 	vmov	r0, s15
 8005580:	f7fb f80a 	bl	8000598 <__aeabi_f2d>
 8005584:	a312      	add	r3, pc, #72	; (adr r3, 80055d0 <getAngleDiff+0x198>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fb faed 	bl	8000b68 <__aeabi_dcmpgt>
 800558e:	b198      	cbz	r0, 80055b8 <getAngleDiff+0x180>
    if (angle_rad1 > angle_rad2) {
 8005590:	eef4 8ac8 	vcmpe.f32	s17, s16
 8005594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8005598:	a30f      	add	r3, pc, #60	; (adr r3, 80055d8 <getAngleDiff+0x1a0>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
    if (angle_rad1 > angle_rad2) {
 80055a2:	d40f      	bmi.n	80055c4 <getAngleDiff+0x18c>
    } else {
      return (angle_rad1 + 2 * M_PI) - angle_rad2;
 80055a4:	f7fa fe9a 	bl	80002dc <__adddf3>
 80055a8:	4622      	mov	r2, r4
 80055aa:	462b      	mov	r3, r5
 80055ac:	f7fa fe94 	bl	80002d8 <__aeabi_dsub>
 80055b0:	f7fb fb42 	bl	8000c38 <__aeabi_d2f>
 80055b4:	ee09 0a10 	vmov	s18, r0
    }
  } else {
    return angle_rad1 - angle_rad2;
  }
}
 80055b8:	eeb0 0a49 	vmov.f32	s0, s18
 80055bc:	ecbd 8b04 	vpop	{d8-d9}
 80055c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 80055c4:	f7fa fe88 	bl	80002d8 <__aeabi_dsub>
 80055c8:	e7ee      	b.n	80055a8 <getAngleDiff+0x170>
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
 80055d0:	54442d18 	.word	0x54442d18
 80055d4:	400921fb 	.word	0x400921fb
 80055d8:	54442d18 	.word	0x54442d18
 80055dc:	401921fb 	.word	0x401921fb
 80055e0:	54442d18 	.word	0x54442d18
 80055e4:	c00921fb 	.word	0xc00921fb

080055e8 <decode_SW>:

uint8_t decode_SW(uint16_t sw_raw_data)
{
  int data;
  sw_raw_data = sw_raw_data & 0xFFFF;
  if (sw_raw_data < 100) {
 80055e8:	2863      	cmp	r0, #99	; 0x63
 80055ea:	d906      	bls.n	80055fa <decode_SW+0x12>
    data = 0b00010000;  // C
  } else if (sw_raw_data < 500 && sw_raw_data > 100) {
 80055ec:	f1a0 0365 	sub.w	r3, r0, #101	; 0x65
 80055f0:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80055f4:	d803      	bhi.n	80055fe <decode_SW+0x16>
 80055f6:	2002      	movs	r0, #2
 80055f8:	4770      	bx	lr
 80055fa:	2010      	movs	r0, #16
 80055fc:	4770      	bx	lr
    data = 0b00000010;  // B
  } else if (sw_raw_data < 2000 && sw_raw_data > 500) {
 80055fe:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 8005602:	1883      	adds	r3, r0, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	f240 52da 	movw	r2, #1498	; 0x5da
 800560a:	4293      	cmp	r3, r2
 800560c:	d910      	bls.n	8005630 <decode_SW+0x48>
    data = 0b00000100;  // R
  } else if (sw_raw_data < 3000 && sw_raw_data > 2000) {
 800560e:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
 8005612:	18c3      	adds	r3, r0, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	f240 32e6 	movw	r2, #998	; 0x3e6
 800561a:	4293      	cmp	r3, r2
 800561c:	d90a      	bls.n	8005634 <decode_SW+0x4c>
    data = 0b00000001;  // F
  } else if (sw_raw_data < 4000 && sw_raw_data > 3000) {
 800561e:	f6a0 30b9 	subw	r0, r0, #3001	; 0xbb9
 8005622:	b280      	uxth	r0, r0
 8005624:	4290      	cmp	r0, r2
 8005626:	bf8c      	ite	hi
 8005628:	2000      	movhi	r0, #0
 800562a:	2001      	movls	r0, #1
    data = 0b00001000;  // L
  } else {
    data = 0b00000000;
  }
  return data;
 800562c:	00c0      	lsls	r0, r0, #3
 800562e:	4770      	bx	lr
 8005630:	2004      	movs	r0, #4
 8005632:	4770      	bx	lr
 8005634:	2001      	movs	r0, #1
}
 8005636:	4770      	bx	lr

08005638 <two_to_float>:

float two_to_float(uint8_t data[2]) { return (float)((data[0] << 8 | data[1]) - 32767.0) / 32767.0; }
 8005638:	b508      	push	{r3, lr}
 800563a:	8800      	ldrh	r0, [r0, #0]
 800563c:	ba40      	rev16	r0, r0
 800563e:	b280      	uxth	r0, r0
 8005640:	f7fa ff98 	bl	8000574 <__aeabi_i2d>
 8005644:	a30a      	add	r3, pc, #40	; (adr r3, 8005670 <two_to_float+0x38>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f7fa fe45 	bl	80002d8 <__aeabi_dsub>
 800564e:	f7fb faf3 	bl	8000c38 <__aeabi_d2f>
 8005652:	f7fa ffa1 	bl	8000598 <__aeabi_f2d>
 8005656:	a308      	add	r3, pc, #32	; (adr r3, 8005678 <two_to_float+0x40>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f7fa fff4 	bl	8000648 <__aeabi_dmul>
 8005660:	f7fb faea 	bl	8000c38 <__aeabi_d2f>
 8005664:	ee00 0a10 	vmov	s0, r0
 8005668:	bd08      	pop	{r3, pc}
 800566a:	bf00      	nop
 800566c:	f3af 8000 	nop.w
 8005670:	00000000 	.word	0x00000000
 8005674:	40dfffc0 	.word	0x40dfffc0
 8005678:	00400080 	.word	0x00400080
 800567c:	3f000020 	.word	0x3f000020

08005680 <two_to_int>:
float two_to_int(uint8_t data[2]) { return ((data[0] << 8 | data[1]) - 32767.0); }
 8005680:	b508      	push	{r3, lr}
 8005682:	8800      	ldrh	r0, [r0, #0]
 8005684:	ba40      	rev16	r0, r0
 8005686:	b280      	uxth	r0, r0
 8005688:	f7fa ff74 	bl	8000574 <__aeabi_i2d>
 800568c:	a304      	add	r3, pc, #16	; (adr r3, 80056a0 <two_to_int+0x20>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa fe21 	bl	80002d8 <__aeabi_dsub>
 8005696:	f7fb facf 	bl	8000c38 <__aeabi_d2f>
 800569a:	ee00 0a10 	vmov	s0, r0
 800569e:	bd08      	pop	{r3, pc}
 80056a0:	00000000 	.word	0x00000000
 80056a4:	40dfffc0 	.word	0x40dfffc0

080056a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056a8:	480d      	ldr	r0, [pc, #52]	; (80056e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056ac:	480d      	ldr	r0, [pc, #52]	; (80056e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80056ae:	490e      	ldr	r1, [pc, #56]	; (80056e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056b0:	4a0e      	ldr	r2, [pc, #56]	; (80056ec <LoopForever+0xe>)
  movs r3, #0
 80056b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80056b4:	e002      	b.n	80056bc <LoopCopyDataInit>

080056b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056ba:	3304      	adds	r3, #4

080056bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056c0:	d3f9      	bcc.n	80056b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056c2:	4a0b      	ldr	r2, [pc, #44]	; (80056f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80056c4:	4c0b      	ldr	r4, [pc, #44]	; (80056f4 <LoopForever+0x16>)
  movs r3, #0
 80056c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056c8:	e001      	b.n	80056ce <LoopFillZerobss>

080056ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056cc:	3204      	adds	r2, #4

080056ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056d0:	d3fb      	bcc.n	80056ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80056d2:	f7ff fb9d 	bl	8004e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056d6:	f005 fdfb 	bl	800b2d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80056da:	f7fe fd9d 	bl	8004218 <main>

080056de <LoopForever>:

LoopForever:
    b LoopForever
 80056de:	e7fe      	b.n	80056de <LoopForever>
  ldr   r0, =_estack
 80056e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80056ec:	0800eae8 	.word	0x0800eae8
  ldr r2, =_sbss
 80056f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80056f4:	20001b54 	.word	0x20001b54

080056f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80056f8:	e7fe      	b.n	80056f8 <ADC1_2_IRQHandler>
	...

080056fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056fc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <HAL_InitTick+0x40>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	b90b      	cbnz	r3, 8005708 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005704:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005706:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005708:	490d      	ldr	r1, [pc, #52]	; (8005740 <HAL_InitTick+0x44>)
 800570a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800570e:	4605      	mov	r5, r0
 8005710:	fbb2 f3f3 	udiv	r3, r2, r3
 8005714:	6808      	ldr	r0, [r1, #0]
 8005716:	fbb0 f0f3 	udiv	r0, r0, r3
 800571a:	f000 fe19 	bl	8006350 <HAL_SYSTICK_Config>
 800571e:	4604      	mov	r4, r0
 8005720:	2800      	cmp	r0, #0
 8005722:	d1ef      	bne.n	8005704 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005724:	2d0f      	cmp	r5, #15
 8005726:	d8ed      	bhi.n	8005704 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005728:	4602      	mov	r2, r0
 800572a:	4629      	mov	r1, r5
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	f000 fdc2 	bl	80062b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <HAL_InitTick+0x48>)
 8005736:	4620      	mov	r0, r4
 8005738:	601d      	str	r5, [r3, #0]
}
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	20000008 	.word	0x20000008
 8005740:	20000004 	.word	0x20000004
 8005744:	2000000c 	.word	0x2000000c

08005748 <HAL_Init>:
{
 8005748:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800574a:	2003      	movs	r0, #3
 800574c:	f000 fda2 	bl	8006294 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005750:	2000      	movs	r0, #0
 8005752:	f7ff ffd3 	bl	80056fc <HAL_InitTick>
 8005756:	b110      	cbz	r0, 800575e <HAL_Init+0x16>
    status = HAL_ERROR;
 8005758:	2401      	movs	r4, #1
}
 800575a:	4620      	mov	r0, r4
 800575c:	bd10      	pop	{r4, pc}
 800575e:	4604      	mov	r4, r0
    HAL_MspInit();
 8005760:	f7ff fa9c 	bl	8004c9c <HAL_MspInit>
}
 8005764:	4620      	mov	r0, r4
 8005766:	bd10      	pop	{r4, pc}

08005768 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005768:	4a03      	ldr	r2, [pc, #12]	; (8005778 <HAL_IncTick+0x10>)
 800576a:	4904      	ldr	r1, [pc, #16]	; (800577c <HAL_IncTick+0x14>)
 800576c:	6813      	ldr	r3, [r2, #0]
 800576e:	6809      	ldr	r1, [r1, #0]
 8005770:	440b      	add	r3, r1
 8005772:	6013      	str	r3, [r2, #0]
}
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	20001a00 	.word	0x20001a00
 800577c:	20000008 	.word	0x20000008

08005780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7fd fac6 	bl	8002d14 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005788:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800578a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800578c:	d002      	beq.n	8005794 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_Delay+0x20>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005794:	f7fd fabe 	bl	8002d14 <HAL_GetTick>
 8005798:	1b43      	subs	r3, r0, r5
 800579a:	42a3      	cmp	r3, r4
 800579c:	d3fa      	bcc.n	8005794 <HAL_Delay+0x14>
  {
  }
}
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20000008 	.word	0x20000008

080057a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057a4:	b530      	push	{r4, r5, lr}
 80057a6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80057ac:	2800      	cmp	r0, #0
 80057ae:	f000 80d4 	beq.w	800595a <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057b2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80057b4:	4604      	mov	r4, r0
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	f000 809d 	beq.w	80058f6 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057bc:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80057be:	6893      	ldr	r3, [r2, #8]
 80057c0:	009d      	lsls	r5, r3, #2
 80057c2:	d505      	bpl.n	80057d0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80057c4:	6893      	ldr	r3, [r2, #8]
 80057c6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80057ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057ce:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057d0:	6893      	ldr	r3, [r2, #8]
 80057d2:	00d8      	lsls	r0, r3, #3
 80057d4:	d419      	bmi.n	800580a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057d6:	4b7e      	ldr	r3, [pc, #504]	; (80059d0 <HAL_ADC_Init+0x22c>)
 80057d8:	487e      	ldr	r0, [pc, #504]	; (80059d4 <HAL_ADC_Init+0x230>)
 80057da:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80057dc:	6891      	ldr	r1, [r2, #8]
 80057de:	099b      	lsrs	r3, r3, #6
 80057e0:	fba0 0303 	umull	r0, r3, r0, r3
 80057e4:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80057e8:	099b      	lsrs	r3, r3, #6
 80057ea:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80057ee:	3301      	adds	r3, #1
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80057f6:	6091      	str	r1, [r2, #8]
 80057f8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80057fa:	9b01      	ldr	r3, [sp, #4]
 80057fc:	b12b      	cbz	r3, 800580a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	3b01      	subs	r3, #1
 8005802:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005804:	9b01      	ldr	r3, [sp, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f9      	bne.n	80057fe <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800580a:	6893      	ldr	r3, [r2, #8]
 800580c:	00d9      	lsls	r1, r3, #3
 800580e:	d464      	bmi.n	80058da <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005810:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005812:	f043 0310 	orr.w	r3, r3, #16
 8005816:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005818:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800581a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800581c:	4303      	orrs	r3, r0
 800581e:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005820:	6893      	ldr	r3, [r2, #8]
 8005822:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005826:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005828:	d15e      	bne.n	80058e8 <HAL_ADC_Init+0x144>
 800582a:	06db      	lsls	r3, r3, #27
 800582c:	d45c      	bmi.n	80058e8 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800582e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005830:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005834:	f043 0302 	orr.w	r3, r3, #2
 8005838:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800583a:	6893      	ldr	r3, [r2, #8]
 800583c:	07dd      	lsls	r5, r3, #31
 800583e:	d419      	bmi.n	8005874 <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005840:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005844:	4b64      	ldr	r3, [pc, #400]	; (80059d8 <HAL_ADC_Init+0x234>)
 8005846:	f000 80a0 	beq.w	800598a <HAL_ADC_Init+0x1e6>
 800584a:	429a      	cmp	r2, r3
 800584c:	f000 80a5 	beq.w	800599a <HAL_ADC_Init+0x1f6>
 8005850:	4962      	ldr	r1, [pc, #392]	; (80059dc <HAL_ADC_Init+0x238>)
 8005852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005856:	6889      	ldr	r1, [r1, #8]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	430b      	orrs	r3, r1
 800585c:	4960      	ldr	r1, [pc, #384]	; (80059e0 <HAL_ADC_Init+0x23c>)
 800585e:	6889      	ldr	r1, [r1, #8]
 8005860:	430b      	orrs	r3, r1
 8005862:	07d9      	lsls	r1, r3, #31
 8005864:	d406      	bmi.n	8005874 <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005866:	495f      	ldr	r1, [pc, #380]	; (80059e4 <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005868:	688b      	ldr	r3, [r1, #8]
 800586a:	6865      	ldr	r5, [r4, #4]
 800586c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005870:	432b      	orrs	r3, r5
 8005872:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8005874:	68e5      	ldr	r5, [r4, #12]
 8005876:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005878:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800587c:	432b      	orrs	r3, r5
 800587e:	68a5      	ldr	r5, [r4, #8]
 8005880:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005882:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005884:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8005886:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800588a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800588e:	d05f      	beq.n	8005950 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005890:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005892:	b121      	cbz	r1, 800589e <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8005894:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005896:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800589a:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800589c:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800589e:	68d5      	ldr	r5, [r2, #12]
 80058a0:	4951      	ldr	r1, [pc, #324]	; (80059e8 <HAL_ADC_Init+0x244>)
 80058a2:	4029      	ands	r1, r5
 80058a4:	4319      	orrs	r1, r3
 80058a6:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80058a8:	6913      	ldr	r3, [r2, #16]
 80058aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ac:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058b4:	6893      	ldr	r3, [r2, #8]
 80058b6:	075b      	lsls	r3, r3, #29
 80058b8:	d523      	bpl.n	8005902 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058ba:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80058bc:	6963      	ldr	r3, [r4, #20]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d04e      	beq.n	8005960 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80058c4:	f023 030f 	bic.w	r3, r3, #15
 80058c8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058cc:	f023 0303 	bic.w	r3, r3, #3
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80058d6:	b003      	add	sp, #12
 80058d8:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058da:	6893      	ldr	r3, [r2, #8]
 80058dc:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058e0:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80058e6:	d0a0      	beq.n	800582a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80058ea:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ec:	f043 0310 	orr.w	r3, r3, #16
 80058f0:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80058f2:	b003      	add	sp, #12
 80058f4:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80058f6:	f7fb fd8b 	bl	8001410 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80058fa:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80058fc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8005900:	e75c      	b.n	80057bc <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005902:	6893      	ldr	r3, [r2, #8]
 8005904:	071d      	lsls	r5, r3, #28
 8005906:	d4d9      	bmi.n	80058bc <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005908:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800590a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800590e:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005910:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005914:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005916:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800591a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800591e:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8005920:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005922:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005924:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005926:	bb19      	cbnz	r1, 8005970 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800592c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800592e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8005932:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005936:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800593a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800593e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005942:	2b01      	cmp	r3, #1
 8005944:	d032      	beq.n	80059ac <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005946:	6913      	ldr	r3, [r2, #16]
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6113      	str	r3, [r2, #16]
 800594e:	e7b5      	b.n	80058bc <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005950:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005952:	3901      	subs	r1, #1
 8005954:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005958:	e79a      	b.n	8005890 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 800595a:	2001      	movs	r0, #1
}
 800595c:	b003      	add	sp, #12
 800595e:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005960:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005962:	6a23      	ldr	r3, [r4, #32]
 8005964:	f021 010f 	bic.w	r1, r1, #15
 8005968:	3b01      	subs	r3, #1
 800596a:	430b      	orrs	r3, r1
 800596c:	6313      	str	r3, [r2, #48]	; 0x30
 800596e:	e7ac      	b.n	80058ca <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005974:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005976:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800597a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800597e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005982:	430b      	orrs	r3, r1
 8005984:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005988:	e7d9      	b.n	800593e <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800598a:	6891      	ldr	r1, [r2, #8]
 800598c:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800598e:	430b      	orrs	r3, r1
 8005990:	07db      	lsls	r3, r3, #31
 8005992:	f53f af6f 	bmi.w	8005874 <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005996:	4915      	ldr	r1, [pc, #84]	; (80059ec <HAL_ADC_Init+0x248>)
 8005998:	e766      	b.n	8005868 <HAL_ADC_Init+0xc4>
 800599a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059a2:	430b      	orrs	r3, r1
 80059a4:	07d9      	lsls	r1, r3, #31
 80059a6:	f53f af65 	bmi.w	8005874 <HAL_ADC_Init+0xd0>
 80059aa:	e7f4      	b.n	8005996 <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 80059ac:	6911      	ldr	r1, [r2, #16]
 80059ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80059b0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80059b2:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80059b6:	f021 0104 	bic.w	r1, r1, #4
 80059ba:	432b      	orrs	r3, r5
 80059bc:	430b      	orrs	r3, r1
 80059be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80059c4:	430b      	orrs	r3, r1
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	6113      	str	r3, [r2, #16]
 80059cc:	e776      	b.n	80058bc <HAL_ADC_Init+0x118>
 80059ce:	bf00      	nop
 80059d0:	20000004 	.word	0x20000004
 80059d4:	053e2d63 	.word	0x053e2d63
 80059d8:	50000100 	.word	0x50000100
 80059dc:	50000400 	.word	0x50000400
 80059e0:	50000600 	.word	0x50000600
 80059e4:	50000700 	.word	0x50000700
 80059e8:	fff04007 	.word	0xfff04007
 80059ec:	50000300 	.word	0x50000300

080059f0 <HAL_ADC_ConvCpltCallback>:
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop

080059f4 <HAL_ADC_ConvHalfCpltCallback>:
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop

080059f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80059f8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80059fc:	f7ff fffa 	bl	80059f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a00:	bd08      	pop	{r3, pc}
 8005a02:	bf00      	nop

08005a04 <HAL_ADC_ErrorCallback>:
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop

08005a08 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a08:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a0c:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8005a10:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a14:	d11d      	bne.n	8005a52 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a16:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a1e:	680a      	ldr	r2, [r1, #0]
 8005a20:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a24:	68ca      	ldr	r2, [r1, #12]
 8005a26:	d01b      	beq.n	8005a60 <ADC_DMAConvCplt+0x58>
 8005a28:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8005a2c:	d10d      	bne.n	8005a4a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a2e:	68ca      	ldr	r2, [r1, #12]
 8005a30:	0494      	lsls	r4, r2, #18
 8005a32:	d40a      	bmi.n	8005a4a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a3e:	04d1      	lsls	r1, r2, #19
 8005a40:	d403      	bmi.n	8005a4a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a44:	f042 0201 	orr.w	r2, r2, #1
 8005a48:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ffd0 	bl	80059f0 <HAL_ADC_ConvCpltCallback>
}
 8005a50:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a52:	06d2      	lsls	r2, r2, #27
 8005a54:	d40a      	bmi.n	8005a6c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005a60:	0790      	lsls	r0, r2, #30
 8005a62:	d5e7      	bpl.n	8005a34 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff ffc3 	bl	80059f0 <HAL_ADC_ConvCpltCallback>
 8005a6a:	e7f1      	b.n	8005a50 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff ffc9 	bl	8005a04 <HAL_ADC_ErrorCallback>
}
 8005a72:	bd10      	pop	{r4, pc}

08005a74 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a74:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8005a76:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a78:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a7e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a80:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005a82:	f043 0304 	orr.w	r3, r3, #4
 8005a86:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a88:	f7ff ffbc 	bl	8005a04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a8c:	bd08      	pop	{r3, pc}
 8005a8e:	bf00      	nop

08005a90 <HAL_ADC_ConfigChannel>:
{
 8005a90:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005a92:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8005a96:	b083      	sub	sp, #12
 8005a98:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005a9a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005a9c:	f04f 0000 	mov.w	r0, #0
 8005aa0:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005aa2:	f000 8174 	beq.w	8005d8e <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005aa6:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005aae:	6894      	ldr	r4, [r2, #8]
 8005ab0:	0766      	lsls	r6, r4, #29
 8005ab2:	d45e      	bmi.n	8005b72 <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ab4:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005ab6:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005aba:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005abe:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005ac2:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005ac4:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005ac8:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005acc:	f854 500e 	ldr.w	r5, [r4, lr]
 8005ad0:	261f      	movs	r6, #31
 8005ad2:	fa00 f00c 	lsl.w	r0, r0, ip
 8005ad6:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005ada:	ea25 0c0c 	bic.w	ip, r5, ip
 8005ade:	ea40 000c 	orr.w	r0, r0, ip
 8005ae2:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ae6:	6890      	ldr	r0, [r2, #8]
 8005ae8:	0745      	lsls	r5, r0, #29
 8005aea:	d572      	bpl.n	8005bd2 <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005aec:	6890      	ldr	r0, [r2, #8]
 8005aee:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005af0:	6894      	ldr	r4, [r2, #8]
 8005af2:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005af6:	4604      	mov	r4, r0
 8005af8:	d10c      	bne.n	8005b14 <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005afa:	4dbd      	ldr	r5, [pc, #756]	; (8005df0 <HAL_ADC_ConfigChannel+0x360>)
 8005afc:	68ce      	ldr	r6, [r1, #12]
 8005afe:	42ae      	cmp	r6, r5
 8005b00:	f000 80eb 	beq.w	8005cda <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 8005b04:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8005b08:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005b0c:	ea21 0100 	bic.w	r1, r1, r0
 8005b10:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005b14:	49b7      	ldr	r1, [pc, #732]	; (8005df4 <HAL_ADC_ConfigChannel+0x364>)
 8005b16:	420c      	tst	r4, r1
 8005b18:	d059      	beq.n	8005bce <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b1a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005b1e:	f000 8134 	beq.w	8005d8a <HAL_ADC_ConfigChannel+0x2fa>
 8005b22:	4db5      	ldr	r5, [pc, #724]	; (8005df8 <HAL_ADC_ConfigChannel+0x368>)
 8005b24:	49b5      	ldr	r1, [pc, #724]	; (8005dfc <HAL_ADC_ConfigChannel+0x36c>)
 8005b26:	48b6      	ldr	r0, [pc, #728]	; (8005e00 <HAL_ADC_ConfigChannel+0x370>)
 8005b28:	42aa      	cmp	r2, r5
 8005b2a:	bf18      	it	ne
 8005b2c:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005b2e:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b30:	49b4      	ldr	r1, [pc, #720]	; (8005e04 <HAL_ADC_ConfigChannel+0x374>)
 8005b32:	428c      	cmp	r4, r1
 8005b34:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8005b38:	d024      	beq.n	8005b84 <HAL_ADC_ConfigChannel+0xf4>
 8005b3a:	49b3      	ldr	r1, [pc, #716]	; (8005e08 <HAL_ADC_ConfigChannel+0x378>)
 8005b3c:	428c      	cmp	r4, r1
 8005b3e:	d021      	beq.n	8005b84 <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b40:	49b2      	ldr	r1, [pc, #712]	; (8005e0c <HAL_ADC_ConfigChannel+0x37c>)
 8005b42:	428c      	cmp	r4, r1
 8005b44:	f040 8139 	bne.w	8005dba <HAL_ADC_ConfigChannel+0x32a>
 8005b48:	01c4      	lsls	r4, r0, #7
 8005b4a:	d440      	bmi.n	8005bce <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b4c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005b50:	f000 8215 	beq.w	8005f7e <HAL_ADC_ConfigChannel+0x4ee>
 8005b54:	4ca8      	ldr	r4, [pc, #672]	; (8005df8 <HAL_ADC_ConfigChannel+0x368>)
 8005b56:	49a9      	ldr	r1, [pc, #676]	; (8005dfc <HAL_ADC_ConfigChannel+0x36c>)
 8005b58:	48a9      	ldr	r0, [pc, #676]	; (8005e00 <HAL_ADC_ConfigChannel+0x370>)
 8005b5a:	42a2      	cmp	r2, r4
 8005b5c:	bf18      	it	ne
 8005b5e:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b60:	688a      	ldr	r2, [r1, #8]
 8005b62:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005b66:	432a      	orrs	r2, r5
 8005b68:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	608a      	str	r2, [r1, #8]
}
 8005b70:	e003      	b.n	8005b7a <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b74:	f042 0220 	orr.w	r2, r2, #32
 8005b78:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005b80:	b003      	add	sp, #12
 8005b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b84:	0201      	lsls	r1, r0, #8
 8005b86:	d422      	bmi.n	8005bce <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b88:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005b8c:	f000 8113 	beq.w	8005db6 <HAL_ADC_ConfigChannel+0x326>
 8005b90:	499f      	ldr	r1, [pc, #636]	; (8005e10 <HAL_ADC_ConfigChannel+0x380>)
 8005b92:	428a      	cmp	r2, r1
 8005b94:	d11b      	bne.n	8005bce <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b96:	489a      	ldr	r0, [pc, #616]	; (8005e00 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b98:	4a9e      	ldr	r2, [pc, #632]	; (8005e14 <HAL_ADC_ConfigChannel+0x384>)
 8005b9a:	4c9f      	ldr	r4, [pc, #636]	; (8005e18 <HAL_ADC_ConfigChannel+0x388>)
 8005b9c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b9e:	6881      	ldr	r1, [r0, #8]
 8005ba0:	0992      	lsrs	r2, r2, #6
 8005ba2:	fba4 4202 	umull	r4, r2, r4, r2
 8005ba6:	0992      	lsrs	r2, r2, #6
 8005ba8:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005bac:	3201      	adds	r2, #1
 8005bae:	4329      	orrs	r1, r5
 8005bb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005bb4:	0092      	lsls	r2, r2, #2
 8005bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005bba:	6081      	str	r1, [r0, #8]
 8005bbc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005bbe:	9a01      	ldr	r2, [sp, #4]
 8005bc0:	b12a      	cbz	r2, 8005bce <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 8005bc2:	9a01      	ldr	r2, [sp, #4]
 8005bc4:	3a01      	subs	r2, #1
 8005bc6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005bc8:	9a01      	ldr	r2, [sp, #4]
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	d1f9      	bne.n	8005bc2 <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e7d3      	b.n	8005b7a <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005bd2:	6890      	ldr	r0, [r2, #8]
 8005bd4:	0700      	lsls	r0, r0, #28
 8005bd6:	d47e      	bmi.n	8005cd6 <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005bd8:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005bda:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005bdc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8005be0:	f000 8120 	beq.w	8005e24 <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005be4:	0dee      	lsrs	r6, r5, #23
 8005be6:	f102 0c14 	add.w	ip, r2, #20
 8005bea:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8005bee:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005bf2:	f85c 4006 	ldr.w	r4, [ip, r6]
 8005bf6:	2707      	movs	r7, #7
 8005bf8:	40a8      	lsls	r0, r5
 8005bfa:	fa07 f505 	lsl.w	r5, r7, r5
 8005bfe:	ea24 0405 	bic.w	r4, r4, r5
 8005c02:	4320      	orrs	r0, r4
 8005c04:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005c08:	6950      	ldr	r0, [r2, #20]
 8005c0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c0e:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c10:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c14:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c16:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c18:	d02d      	beq.n	8005c76 <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c1a:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005c1e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005c22:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8005c24:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8005c28:	4f7c      	ldr	r7, [pc, #496]	; (8005e1c <HAL_ADC_ConfigChannel+0x38c>)
 8005c2a:	4086      	lsls	r6, r0
 8005c2c:	6808      	ldr	r0, [r1, #0]
 8005c2e:	ea0c 0707 	and.w	r7, ip, r7
 8005c32:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c36:	4338      	orrs	r0, r7
 8005c38:	4330      	orrs	r0, r6
 8005c3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005c3e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c42:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8005c44:	698e      	ldr	r6, [r1, #24]
 8005c46:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005c4a:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8005c4e:	4330      	orrs	r0, r6
 8005c50:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c54:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005c56:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8005c58:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005c5c:	f1a5 0501 	sub.w	r5, r5, #1
 8005c60:	fab5 f585 	clz	r5, r5
 8005c64:	096d      	lsrs	r5, r5, #5
 8005c66:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8005c6a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8005c6e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8005c72:	6808      	ldr	r0, [r1, #0]
}
 8005c74:	e73c      	b.n	8005af0 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c76:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c78:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005c7a:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005c7c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c80:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	f040 80df 	bne.w	8005e48 <HAL_ADC_ConfigChannel+0x3b8>
 8005c8a:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c8e:	42ac      	cmp	r4, r5
 8005c90:	f000 813d 	beq.w	8005f0e <HAL_ADC_ConfigChannel+0x47e>
 8005c94:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005c96:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c98:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c9c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005ca0:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8005ca4:	42ae      	cmp	r6, r5
 8005ca6:	f000 8158 	beq.w	8005f5a <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005caa:	68a6      	ldr	r6, [r4, #8]
 8005cac:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cae:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005cb2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005cb6:	42ae      	cmp	r6, r5
 8005cb8:	f000 813d 	beq.w	8005f36 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005cbc:	68e6      	ldr	r6, [r4, #12]
 8005cbe:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cc0:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005cc4:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8005cc8:	42a5      	cmp	r5, r4
 8005cca:	f47f af11 	bne.w	8005af0 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8005cce:	6838      	ldr	r0, [r7, #0]
 8005cd0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005cd4:	6038      	str	r0, [r7, #0]
 8005cd6:	6808      	ldr	r0, [r1, #0]
}
 8005cd8:	e70a      	b.n	8005af0 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 8005cda:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005cde:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8005ce2:	432c      	orrs	r4, r5
 8005ce4:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	d053      	beq.n	8005d94 <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cec:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005cf0:	2c00      	cmp	r4, #0
 8005cf2:	f000 80e8 	beq.w	8005ec6 <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005cf6:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cfa:	3401      	adds	r4, #1
 8005cfc:	f004 041f 	and.w	r4, r4, #31
 8005d00:	2c09      	cmp	r4, #9
 8005d02:	f240 80e0 	bls.w	8005ec6 <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d06:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005d0a:	2c00      	cmp	r4, #0
 8005d0c:	f000 813d 	beq.w	8005f8a <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 8005d10:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d14:	3401      	adds	r4, #1
 8005d16:	06a4      	lsls	r4, r4, #26
 8005d18:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	f000 8130 	beq.w	8005f86 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005d26:	fab5 f585 	clz	r5, r5
 8005d2a:	3501      	adds	r5, #1
 8005d2c:	f005 051f 	and.w	r5, r5, #31
 8005d30:	2601      	movs	r6, #1
 8005d32:	fa06 f505 	lsl.w	r5, r6, r5
 8005d36:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	f000 8120 	beq.w	8005f82 <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 8005d42:	fab0 f080 	clz	r0, r0
 8005d46:	1c45      	adds	r5, r0, #1
 8005d48:	f005 051f 	and.w	r5, r5, #31
 8005d4c:	2003      	movs	r0, #3
 8005d4e:	f06f 061d 	mvn.w	r6, #29
 8005d52:	fb10 6005 	smlabb	r0, r0, r5, r6
 8005d56:	0500      	lsls	r0, r0, #20
 8005d58:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d5c:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d5e:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005d60:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d62:	f005 0504 	and.w	r5, r5, #4
 8005d66:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005d6a:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005d6e:	fa04 fc00 	lsl.w	ip, r4, r0
 8005d72:	f04f 0e07 	mov.w	lr, #7
 8005d76:	5974      	ldr	r4, [r6, r5]
 8005d78:	fa0e f000 	lsl.w	r0, lr, r0
 8005d7c:	ea24 0000 	bic.w	r0, r4, r0
 8005d80:	ea40 000c 	orr.w	r0, r0, ip
 8005d84:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d86:	680c      	ldr	r4, [r1, #0]
}
 8005d88:	e6c4      	b.n	8005b14 <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d8a:	491c      	ldr	r1, [pc, #112]	; (8005dfc <HAL_ADC_ConfigChannel+0x36c>)
 8005d8c:	e6cf      	b.n	8005b2e <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8005d8e:	2002      	movs	r0, #2
}
 8005d90:	b003      	add	sp, #12
 8005d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d94:	0e80      	lsrs	r0, r0, #26
 8005d96:	3001      	adds	r0, #1
 8005d98:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d9c:	2d09      	cmp	r5, #9
 8005d9e:	f200 8084 	bhi.w	8005eaa <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005da2:	0684      	lsls	r4, r0, #26
 8005da4:	2001      	movs	r0, #1
 8005da6:	40a8      	lsls	r0, r5
 8005da8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005dac:	4304      	orrs	r4, r0
 8005dae:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8005db2:	0500      	lsls	r0, r0, #20
 8005db4:	e7d2      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005db6:	4811      	ldr	r0, [pc, #68]	; (8005dfc <HAL_ADC_ConfigChannel+0x36c>)
 8005db8:	e6ee      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005dba:	4919      	ldr	r1, [pc, #100]	; (8005e20 <HAL_ADC_ConfigChannel+0x390>)
 8005dbc:	428c      	cmp	r4, r1
 8005dbe:	f47f af06 	bne.w	8005bce <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dc2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005dc6:	f47f af02 	bne.w	8005bce <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005dca:	490b      	ldr	r1, [pc, #44]	; (8005df8 <HAL_ADC_ConfigChannel+0x368>)
 8005dcc:	428a      	cmp	r2, r1
 8005dce:	f43f aefe 	beq.w	8005bce <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dd2:	4c0b      	ldr	r4, [pc, #44]	; (8005e00 <HAL_ADC_ConfigChannel+0x370>)
 8005dd4:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8005dd8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005ddc:	bf18      	it	ne
 8005dde:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005de6:	432a      	orrs	r2, r5
 8005de8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005dec:	608a      	str	r2, [r1, #8]
}
 8005dee:	e6c4      	b.n	8005b7a <HAL_ADC_ConfigChannel+0xea>
 8005df0:	407f0000 	.word	0x407f0000
 8005df4:	80080000 	.word	0x80080000
 8005df8:	50000100 	.word	0x50000100
 8005dfc:	50000300 	.word	0x50000300
 8005e00:	50000700 	.word	0x50000700
 8005e04:	c3210000 	.word	0xc3210000
 8005e08:	90c00010 	.word	0x90c00010
 8005e0c:	c7520000 	.word	0xc7520000
 8005e10:	50000600 	.word	0x50000600
 8005e14:	20000004 	.word	0x20000004
 8005e18:	053e2d63 	.word	0x053e2d63
 8005e1c:	03fff000 	.word	0x03fff000
 8005e20:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005e24:	0de8      	lsrs	r0, r5, #23
 8005e26:	f000 0004 	and.w	r0, r0, #4
 8005e2a:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 8005e2e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8005e32:	2607      	movs	r6, #7
 8005e34:	40ae      	lsls	r6, r5
 8005e36:	5825      	ldr	r5, [r4, r0]
 8005e38:	ea25 0506 	bic.w	r5, r5, r6
 8005e3c:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005e3e:	6950      	ldr	r0, [r2, #20]
 8005e40:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005e44:	6150      	str	r0, [r2, #20]
}
 8005e46:	e6e3      	b.n	8005c10 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e48:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e4c:	b11d      	cbz	r5, 8005e56 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8005e4e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e52:	42ac      	cmp	r4, r5
 8005e54:	d05b      	beq.n	8005f0e <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e56:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005e58:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e5a:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e5e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005e62:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e66:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e6a:	b11d      	cbz	r5, 8005e74 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8005e6c:	fab5 f585 	clz	r5, r5
 8005e70:	42ae      	cmp	r6, r5
 8005e72:	d072      	beq.n	8005f5a <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e74:	68a5      	ldr	r5, [r4, #8]
 8005e76:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e78:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e7c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e80:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e84:	b11d      	cbz	r5, 8005e8e <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 8005e86:	fab5 f585 	clz	r5, r5
 8005e8a:	42ae      	cmp	r6, r5
 8005e8c:	d053      	beq.n	8005f36 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e8e:	68e5      	ldr	r5, [r4, #12]
 8005e90:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e92:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e96:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f43f ae26 	beq.w	8005af0 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 8005ea4:	fab5 f585 	clz	r5, r5
 8005ea8:	e70e      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005eaa:	0684      	lsls	r4, r0, #26
 8005eac:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8005eb0:	381e      	subs	r0, #30
 8005eb2:	2601      	movs	r6, #1
 8005eb4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005eb8:	0500      	lsls	r0, r0, #20
 8005eba:	fa06 f505 	lsl.w	r5, r6, r5
 8005ebe:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005ec2:	432c      	orrs	r4, r5
 8005ec4:	e74a      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	d065      	beq.n	8005f9a <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8005ece:	fab4 f484 	clz	r4, r4
 8005ed2:	3401      	adds	r4, #1
 8005ed4:	06a4      	lsls	r4, r4, #26
 8005ed6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eda:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	d059      	beq.n	8005f96 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8005ee2:	fab5 f585 	clz	r5, r5
 8005ee6:	3501      	adds	r5, #1
 8005ee8:	f005 051f 	and.w	r5, r5, #31
 8005eec:	2601      	movs	r6, #1
 8005eee:	fa06 f505 	lsl.w	r5, r6, r5
 8005ef2:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef4:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d049      	beq.n	8005f90 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8005efc:	fab0 f080 	clz	r0, r0
 8005f00:	3001      	adds	r0, #1
 8005f02:	f000 001f 	and.w	r0, r0, #31
 8005f06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005f0a:	0500      	lsls	r0, r0, #20
 8005f0c:	e726      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 8005f0e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005f10:	4614      	mov	r4, r2
 8005f12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f16:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f1a:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f1c:	6808      	ldr	r0, [r1, #0]
 8005f1e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005f20:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f24:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f28:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f2c:	2d00      	cmp	r5, #0
 8005f2e:	d19a      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x3d6>
 8005f30:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005f34:	e6b6      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 8005f36:	6838      	ldr	r0, [r7, #0]
 8005f38:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f3c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f3e:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f40:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f42:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f46:	68e4      	ldr	r4, [r4, #12]
 8005f48:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f4c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	d1a2      	bne.n	8005e9a <HAL_ADC_ConfigChannel+0x40a>
 8005f54:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005f58:	e6b6      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8005f5a:	6838      	ldr	r0, [r7, #0]
 8005f5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f60:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f62:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	68a6      	ldr	r6, [r4, #8]
 8005f68:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f6c:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f70:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f74:	2d00      	cmp	r5, #0
 8005f76:	d183      	bne.n	8005e80 <HAL_ADC_ConfigChannel+0x3f0>
 8005f78:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005f7c:	e69b      	b.n	8005cb6 <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f7e:	4908      	ldr	r1, [pc, #32]	; (8005fa0 <HAL_ADC_ConfigChannel+0x510>)
 8005f80:	e5ee      	b.n	8005b60 <HAL_ADC_ConfigChannel+0xd0>
 8005f82:	4808      	ldr	r0, [pc, #32]	; (8005fa4 <HAL_ADC_ConfigChannel+0x514>)
 8005f84:	e6ea      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x2cc>
 8005f86:	2502      	movs	r5, #2
 8005f88:	e6d5      	b.n	8005d36 <HAL_ADC_ConfigChannel+0x2a6>
 8005f8a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005f8e:	e6c5      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x28c>
 8005f90:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005f94:	e6e2      	b.n	8005d5c <HAL_ADC_ConfigChannel+0x2cc>
 8005f96:	2502      	movs	r5, #2
 8005f98:	e7ab      	b.n	8005ef2 <HAL_ADC_ConfigChannel+0x462>
 8005f9a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005f9e:	e79c      	b.n	8005eda <HAL_ADC_ConfigChannel+0x44a>
 8005fa0:	50000300 	.word	0x50000300
 8005fa4:	fe500000 	.word	0xfe500000

08005fa8 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fa8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	07d2      	lsls	r2, r2, #31
 8005fae:	d501      	bpl.n	8005fb4 <ADC_Enable+0xc>
  return HAL_OK;
 8005fb0:	2000      	movs	r0, #0
}
 8005fb2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005fb4:	6899      	ldr	r1, [r3, #8]
 8005fb6:	4a18      	ldr	r2, [pc, #96]	; (8006018 <ADC_Enable+0x70>)
 8005fb8:	4211      	tst	r1, r2
{
 8005fba:	b570      	push	{r4, r5, r6, lr}
 8005fbc:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005fbe:	d008      	beq.n	8005fd2 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fc0:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005fc2:	f043 0310 	orr.w	r3, r3, #16
 8005fc6:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fc8:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8005fca:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fcc:	4303      	orrs	r3, r0
 8005fce:	6633      	str	r3, [r6, #96]	; 0x60
}
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	4d11      	ldr	r5, [pc, #68]	; (800601c <ADC_Enable+0x74>)
 8005fd6:	402a      	ands	r2, r5
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005fde:	f7fc fe99 	bl	8002d14 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fe2:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005fe4:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	07d0      	lsls	r0, r2, #31
 8005fea:	d413      	bmi.n	8006014 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	07d1      	lsls	r1, r2, #31
 8005ff0:	d404      	bmi.n	8005ffc <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	402a      	ands	r2, r5
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ffc:	f7fc fe8a 	bl	8002d14 <HAL_GetTick>
 8006000:	1b03      	subs	r3, r0, r4
 8006002:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006004:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006006:	d9ee      	bls.n	8005fe6 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	07d2      	lsls	r2, r2, #31
 800600c:	d5d8      	bpl.n	8005fc0 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	07d0      	lsls	r0, r2, #31
 8006012:	d5eb      	bpl.n	8005fec <ADC_Enable+0x44>
  return HAL_OK;
 8006014:	2000      	movs	r0, #0
}
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	8000003f 	.word	0x8000003f
 800601c:	7fffffc0 	.word	0x7fffffc0

08006020 <HAL_ADC_Start_DMA>:
{
 8006020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006024:	6805      	ldr	r5, [r0, #0]
 8006026:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 800602a:	4604      	mov	r4, r0
 800602c:	460e      	mov	r6, r1
 800602e:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006030:	d022      	beq.n	8006078 <HAL_ADC_Start_DMA+0x58>
 8006032:	4a39      	ldr	r2, [pc, #228]	; (8006118 <HAL_ADC_Start_DMA+0xf8>)
 8006034:	4839      	ldr	r0, [pc, #228]	; (800611c <HAL_ADC_Start_DMA+0xfc>)
 8006036:	4b3a      	ldr	r3, [pc, #232]	; (8006120 <HAL_ADC_Start_DMA+0x100>)
 8006038:	4295      	cmp	r5, r2
 800603a:	bf08      	it	eq
 800603c:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800603e:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006040:	68ab      	ldr	r3, [r5, #8]
 8006042:	075b      	lsls	r3, r3, #29
 8006044:	d415      	bmi.n	8006072 <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 8006046:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800604a:	2b01      	cmp	r3, #1
 800604c:	d011      	beq.n	8006072 <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800604e:	4b35      	ldr	r3, [pc, #212]	; (8006124 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8006050:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006052:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006054:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8006058:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800605c:	d00e      	beq.n	800607c <HAL_ADC_Start_DMA+0x5c>
 800605e:	f240 2321 	movw	r3, #545	; 0x221
 8006062:	fa23 f308 	lsr.w	r3, r3, r8
 8006066:	4003      	ands	r3, r0
 8006068:	d108      	bne.n	800607c <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 800606a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 800606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8006072:	2002      	movs	r0, #2
}
 8006074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006078:	4829      	ldr	r0, [pc, #164]	; (8006120 <HAL_ADC_Start_DMA+0x100>)
 800607a:	e7e0      	b.n	800603e <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 800607c:	4620      	mov	r0, r4
 800607e:	f7ff ff93 	bl	8005fa8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8006082:	2800      	cmp	r0, #0
 8006084:	d13f      	bne.n	8006106 <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 8006086:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006088:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800608a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006096:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006098:	4b1f      	ldr	r3, [pc, #124]	; (8006118 <HAL_ADC_Start_DMA+0xf8>)
 800609a:	4299      	cmp	r1, r3
 800609c:	d038      	beq.n	8006110 <HAL_ADC_Start_DMA+0xf0>
 800609e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a2:	4299      	cmp	r1, r3
 80060a4:	d034      	beq.n	8006110 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80060a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80060a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80060ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060b2:	4d1d      	ldr	r5, [pc, #116]	; (8006128 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80060b4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80060b8:	bf1c      	itt	ne
 80060ba:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80060bc:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80060c0:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060c2:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060c4:	4d19      	ldr	r5, [pc, #100]	; (800612c <HAL_ADC_Start_DMA+0x10c>)
 80060c6:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060c8:	4d19      	ldr	r5, [pc, #100]	; (8006130 <HAL_ADC_Start_DMA+0x110>)
 80060ca:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80060cc:	251c      	movs	r5, #28
 80060ce:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 80060d0:	2500      	movs	r5, #0
 80060d2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060d6:	684d      	ldr	r5, [r1, #4]
 80060d8:	f045 0510 	orr.w	r5, r5, #16
 80060dc:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80060de:	68cd      	ldr	r5, [r1, #12]
 80060e0:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060e4:	463b      	mov	r3, r7
 80060e6:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80060e8:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060ea:	3140      	adds	r1, #64	; 0x40
 80060ec:	f000 f9e0 	bl	80064b0 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80060f0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80060f2:	6893      	ldr	r3, [r2, #8]
 80060f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060fc:	f043 0304 	orr.w	r3, r3, #4
 8006100:	6093      	str	r3, [r2, #8]
}
 8006102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8006106:	2300      	movs	r3, #0
 8006108:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 800610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006110:	f1b8 0f00 	cmp.w	r8, #0
 8006114:	d1cb      	bne.n	80060ae <HAL_ADC_Start_DMA+0x8e>
 8006116:	e7c6      	b.n	80060a6 <HAL_ADC_Start_DMA+0x86>
 8006118:	50000100 	.word	0x50000100
 800611c:	50000700 	.word	0x50000700
 8006120:	50000300 	.word	0x50000300
 8006124:	50000600 	.word	0x50000600
 8006128:	08005a09 	.word	0x08005a09
 800612c:	080059f9 	.word	0x080059f9
 8006130:	08005a75 	.word	0x08005a75

08006134 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006134:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006136:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800613a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800613c:	2a01      	cmp	r2, #1
{
 800613e:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8006140:	d056      	beq.n	80061f0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006142:	6802      	ldr	r2, [r0, #0]
 8006144:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006146:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8006148:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800614a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800614e:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8006150:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006154:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006156:	d00b      	beq.n	8006170 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006158:	4d48      	ldr	r5, [pc, #288]	; (800627c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800615a:	42aa      	cmp	r2, r5
 800615c:	d046      	beq.n	80061ec <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800615e:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006160:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006164:	f042 0220 	orr.w	r2, r2, #32
 8006168:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800616a:	b01d      	add	sp, #116	; 0x74
 800616c:	bc70      	pop	{r4, r5, r6}
 800616e:	4770      	bx	lr
 8006170:	4843      	ldr	r0, [pc, #268]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006172:	6880      	ldr	r0, [r0, #8]
 8006174:	0740      	lsls	r0, r0, #29
 8006176:	d50b      	bpl.n	8006190 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006178:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800617a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800617c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006180:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006182:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800618a:	b01d      	add	sp, #116	; 0x74
 800618c:	bc70      	pop	{r4, r5, r6}
 800618e:	4770      	bx	lr
 8006190:	6890      	ldr	r0, [r2, #8]
 8006192:	0744      	lsls	r4, r0, #29
 8006194:	d4f1      	bmi.n	800617a <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006196:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800619a:	d02d      	beq.n	80061f8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 800619c:	4838      	ldr	r0, [pc, #224]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800619e:	4282      	cmp	r2, r0
 80061a0:	d02a      	beq.n	80061f8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	d058      	beq.n	8006258 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80061a6:	4837      	ldr	r0, [pc, #220]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80061a8:	684c      	ldr	r4, [r1, #4]
 80061aa:	6882      	ldr	r2, [r0, #8]
 80061ac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80061b0:	4322      	orrs	r2, r4
 80061b2:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 80061b6:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80061ba:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061bc:	4a2f      	ldr	r2, [pc, #188]	; (800627c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80061be:	6894      	ldr	r4, [r2, #8]
 80061c0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80061c4:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061c6:	4322      	orrs	r2, r4
 80061c8:	4c2f      	ldr	r4, [pc, #188]	; (8006288 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80061ca:	68a4      	ldr	r4, [r4, #8]
 80061cc:	4322      	orrs	r2, r4
 80061ce:	43d2      	mvns	r2, r2
 80061d0:	f002 0201 	and.w	r2, r2, #1
 80061d4:	b142      	cbz	r2, 80061e8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 80061d6:	6884      	ldr	r4, [r0, #8]
 80061d8:	688a      	ldr	r2, [r1, #8]
 80061da:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 80061de:	4332      	orrs	r2, r6
 80061e0:	f021 010f 	bic.w	r1, r1, #15
 80061e4:	430a      	orrs	r2, r1
 80061e6:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061e8:	2000      	movs	r0, #0
 80061ea:	e7cb      	b.n	8006184 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80061ec:	4827      	ldr	r0, [pc, #156]	; (800628c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80061ee:	e7c0      	b.n	8006172 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80061f0:	2002      	movs	r0, #2
}
 80061f2:	b01d      	add	sp, #116	; 0x74
 80061f4:	bc70      	pop	{r4, r5, r6}
 80061f6:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061f8:	b1ae      	cbz	r6, 8006226 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80061fa:	4825      	ldr	r0, [pc, #148]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80061fc:	684c      	ldr	r4, [r1, #4]
 80061fe:	6882      	ldr	r2, [r0, #8]
 8006200:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006204:	4322      	orrs	r2, r4
 8006206:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 800620a:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 800620e:	6082      	str	r2, [r0, #8]
 8006210:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006212:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006216:	6880      	ldr	r0, [r0, #8]
 8006218:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800621a:	4302      	orrs	r2, r0
 800621c:	43d2      	mvns	r2, r2
 800621e:	481c      	ldr	r0, [pc, #112]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006220:	f002 0201 	and.w	r2, r2, #1
 8006224:	e7d6      	b.n	80061d4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006226:	491a      	ldr	r1, [pc, #104]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006228:	688a      	ldr	r2, [r1, #8]
 800622a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800622e:	608a      	str	r2, [r1, #8]
 8006230:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006234:	4a12      	ldr	r2, [pc, #72]	; (8006280 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006236:	6880      	ldr	r0, [r0, #8]
 8006238:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800623a:	4915      	ldr	r1, [pc, #84]	; (8006290 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800623c:	4302      	orrs	r2, r0
 800623e:	43d2      	mvns	r2, r2
 8006240:	f002 0201 	and.w	r2, r2, #1
 8006244:	2a00      	cmp	r2, #0
 8006246:	d0cf      	beq.n	80061e8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006248:	688a      	ldr	r2, [r1, #8]
 800624a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800624e:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006252:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006254:	608a      	str	r2, [r1, #8]
 8006256:	e795      	b.n	8006184 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006258:	490a      	ldr	r1, [pc, #40]	; (8006284 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800625a:	4808      	ldr	r0, [pc, #32]	; (800627c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800625c:	688a      	ldr	r2, [r1, #8]
 800625e:	4c0b      	ldr	r4, [pc, #44]	; (800628c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006260:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006264:	608a      	str	r2, [r1, #8]
 8006266:	6880      	ldr	r0, [r0, #8]
 8006268:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800626a:	4302      	orrs	r2, r0
 800626c:	4806      	ldr	r0, [pc, #24]	; (8006288 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800626e:	6880      	ldr	r0, [r0, #8]
 8006270:	4302      	orrs	r2, r0
 8006272:	43d2      	mvns	r2, r2
 8006274:	f002 0201 	and.w	r2, r2, #1
 8006278:	e7e4      	b.n	8006244 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 800627a:	bf00      	nop
 800627c:	50000400 	.word	0x50000400
 8006280:	50000100 	.word	0x50000100
 8006284:	50000700 	.word	0x50000700
 8006288:	50000600 	.word	0x50000600
 800628c:	50000500 	.word	0x50000500
 8006290:	50000300 	.word	0x50000300

08006294 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006294:	4907      	ldr	r1, [pc, #28]	; (80062b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006296:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006298:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800629e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062a2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062a4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062a6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80062ae:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	e000ed00 	.word	0xe000ed00

080062b8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b8:	4b1c      	ldr	r3, [pc, #112]	; (800632c <HAL_NVIC_SetPriority+0x74>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062c0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c2:	f1c3 0e07 	rsb	lr, r3, #7
 80062c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062ce:	bf28      	it	cs
 80062d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d4:	f1bc 0f06 	cmp.w	ip, #6
 80062d8:	d91b      	bls.n	8006312 <HAL_NVIC_SetPriority+0x5a>
 80062da:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062dc:	f04f 3cff 	mov.w	ip, #4294967295
 80062e0:	fa0c fc03 	lsl.w	ip, ip, r3
 80062e4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e8:	f04f 3cff 	mov.w	ip, #4294967295
 80062ec:	fa0c fc0e 	lsl.w	ip, ip, lr
 80062f0:	ea21 010c 	bic.w	r1, r1, ip
 80062f4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80062f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80062fc:	db0c      	blt.n	8006318 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062fe:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006302:	0109      	lsls	r1, r1, #4
 8006304:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006308:	b2c9      	uxtb	r1, r1
 800630a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800630e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006312:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006314:	4613      	mov	r3, r2
 8006316:	e7e7      	b.n	80062e8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <HAL_NVIC_SetPriority+0x78>)
 800631a:	f000 000f 	and.w	r0, r0, #15
 800631e:	0109      	lsls	r1, r1, #4
 8006320:	4403      	add	r3, r0
 8006322:	b2c9      	uxtb	r1, r1
 8006324:	7619      	strb	r1, [r3, #24]
 8006326:	f85d fb04 	ldr.w	pc, [sp], #4
 800632a:	bf00      	nop
 800632c:	e000ed00 	.word	0xe000ed00
 8006330:	e000ecfc 	.word	0xe000ecfc

08006334 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006334:	2800      	cmp	r0, #0
 8006336:	db07      	blt.n	8006348 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <HAL_NVIC_EnableIRQ+0x18>)
 800633a:	0941      	lsrs	r1, r0, #5
 800633c:	2301      	movs	r3, #1
 800633e:	f000 001f 	and.w	r0, r0, #31
 8006342:	4083      	lsls	r3, r0
 8006344:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	e000e100 	.word	0xe000e100

08006350 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006350:	3801      	subs	r0, #1
 8006352:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8006356:	d210      	bcs.n	800637a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006358:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800635a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800635e:	4c08      	ldr	r4, [pc, #32]	; (8006380 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006360:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006362:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8006366:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800636a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800636c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800636e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006370:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8006372:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006376:	6119      	str	r1, [r3, #16]
 8006378:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800637a:	2001      	movs	r0, #1
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	e000ed00 	.word	0xe000ed00

08006384 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006384:	2800      	cmp	r0, #0
 8006386:	d078      	beq.n	800647a <HAL_DMA_Init+0xf6>
{
 8006388:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800638a:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <HAL_DMA_Init+0xfc>)
 800638c:	6804      	ldr	r4, [r0, #0]
 800638e:	429c      	cmp	r4, r3
 8006390:	d95f      	bls.n	8006452 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006392:	4a3c      	ldr	r2, [pc, #240]	; (8006484 <HAL_DMA_Init+0x100>)
 8006394:	4b3c      	ldr	r3, [pc, #240]	; (8006488 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8006396:	493d      	ldr	r1, [pc, #244]	; (800648c <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006398:	4422      	add	r2, r4
 800639a:	fba3 3202 	umull	r3, r2, r3, r2
 800639e:	0912      	lsrs	r2, r2, #4
 80063a0:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063a2:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063a4:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80063a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 80063aa:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063ac:	4e36      	ldr	r6, [pc, #216]	; (8006488 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063ae:	4f34      	ldr	r7, [pc, #208]	; (8006480 <HAL_DMA_Init+0xfc>)
 80063b0:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b4:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 80063b6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6941      	ldr	r1, [r0, #20]
 80063bc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063be:	6981      	ldr	r1, [r0, #24]
 80063c0:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 80063c2:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063c4:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c8:	69c1      	ldr	r1, [r0, #28]
 80063ca:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063cc:	b2e1      	uxtb	r1, r4
 80063ce:	3908      	subs	r1, #8
 80063d0:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80063d4:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063d6:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80063da:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80063dc:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 80063e0:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063e2:	4e2b      	ldr	r6, [pc, #172]	; (8006490 <HAL_DMA_Init+0x10c>)
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063e6:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063ea:	42bc      	cmp	r4, r7
 80063ec:	bf98      	it	ls
 80063ee:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063f0:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063f4:	4c28      	ldr	r4, [pc, #160]	; (8006498 <HAL_DMA_Init+0x114>)
 80063f6:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063f8:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80063fc:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80063fe:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006402:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006404:	6484      	str	r4, [r0, #72]	; 0x48
 8006406:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800640a:	d02b      	beq.n	8006464 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800640c:	6845      	ldr	r5, [r0, #4]
 800640e:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006410:	3d01      	subs	r5, #1
 8006412:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006414:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006418:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800641c:	d828      	bhi.n	8006470 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800641e:	4b1f      	ldr	r3, [pc, #124]	; (800649c <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006420:	4d1f      	ldr	r5, [pc, #124]	; (80064a0 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006422:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006424:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006426:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006428:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800642a:	f004 041f 	and.w	r4, r4, #31
 800642e:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006432:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006434:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006438:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800643a:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800643c:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800643e:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006440:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006442:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006444:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006448:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800644c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800644e:	4618      	mov	r0, r3
}
 8006450:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_DMA_Init+0x124>)
 8006454:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8006456:	4915      	ldr	r1, [pc, #84]	; (80064ac <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006458:	4422      	add	r2, r4
 800645a:	fba3 3202 	umull	r3, r2, r3, r2
 800645e:	0912      	lsrs	r2, r2, #4
 8006460:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8006462:	e79e      	b.n	80063a2 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006464:	2400      	movs	r4, #0
 8006466:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006468:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800646c:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006470:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8006472:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006476:	65c3      	str	r3, [r0, #92]	; 0x5c
 8006478:	e7e1      	b.n	800643e <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 800647a:	2001      	movs	r0, #1
}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40020407 	.word	0x40020407
 8006484:	bffdfbf8 	.word	0xbffdfbf8
 8006488:	cccccccd 	.word	0xcccccccd
 800648c:	40020400 	.word	0x40020400
 8006490:	40020800 	.word	0x40020800
 8006494:	40020820 	.word	0x40020820
 8006498:	40020880 	.word	0x40020880
 800649c:	1000823f 	.word	0x1000823f
 80064a0:	40020940 	.word	0x40020940
 80064a4:	40020900 	.word	0x40020900
 80064a8:	bffdfff8 	.word	0xbffdfff8
 80064ac:	40020000 	.word	0x40020000

080064b0 <HAL_DMA_Start_IT>:
{
 80064b0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80064b2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80064b6:	2c01      	cmp	r4, #1
 80064b8:	d051      	beq.n	800655e <HAL_DMA_Start_IT+0xae>
 80064ba:	2401      	movs	r4, #1
 80064bc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80064c0:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80064c4:	2c01      	cmp	r4, #1
 80064c6:	d005      	beq.n	80064d4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80064c8:	2300      	movs	r3, #0
 80064ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80064ce:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80064d0:	2002      	movs	r0, #2
}
 80064d2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80064d4:	2402      	movs	r4, #2
 80064d6:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064da:	2400      	movs	r4, #0
 80064dc:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80064de:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064e0:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 80064e2:	6825      	ldr	r5, [r4, #0]
 80064e4:	f025 0501 	bic.w	r5, r5, #1
 80064e8:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064ea:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 80064ee:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80064f0:	b115      	cbz	r5, 80064f8 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064f2:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 80064f6:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064f8:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80064fa:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80064fc:	f006 0c1f 	and.w	ip, r6, #31
 8006500:	2601      	movs	r6, #1
 8006502:	fa06 f60c 	lsl.w	r6, r6, ip
 8006506:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006508:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800650a:	6883      	ldr	r3, [r0, #8]
 800650c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 800650e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8006510:	bf0b      	itete	eq
 8006512:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006514:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006516:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006518:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800651a:	b1bb      	cbz	r3, 800654c <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	f043 030e 	orr.w	r3, r3, #14
 8006522:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006524:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	03d2      	lsls	r2, r2, #15
 800652a:	d503      	bpl.n	8006534 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006532:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006534:	b11d      	cbz	r5, 800653e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8006544:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006546:	6023      	str	r3, [r4, #0]
}
 8006548:	bcf0      	pop	{r4, r5, r6, r7}
 800654a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800654c:	6823      	ldr	r3, [r4, #0]
 800654e:	f023 0304 	bic.w	r3, r3, #4
 8006552:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	f043 030a 	orr.w	r3, r3, #10
 800655a:	6023      	str	r3, [r4, #0]
 800655c:	e7e2      	b.n	8006524 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 800655e:	2002      	movs	r0, #2
}
 8006560:	bcf0      	pop	{r4, r5, r6, r7}
 8006562:	4770      	bx	lr

08006564 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006564:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006568:	2a02      	cmp	r2, #2
{
 800656a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800656c:	d009      	beq.n	8006582 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800656e:	2204      	movs	r2, #4
 8006570:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8006572:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8006574:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8006576:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8006578:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800657c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006580:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006582:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006584:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8006586:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006588:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800658a:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800658c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800658e:	f020 000e 	bic.w	r0, r0, #14
 8006592:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800659a:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 800659c:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800659e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 80065a0:	f020 0001 	bic.w	r0, r0, #1
 80065a4:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065a6:	f001 011f 	and.w	r1, r1, #31
 80065aa:	2201      	movs	r2, #1
 80065ac:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065ae:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065b2:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065b4:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 80065b6:	b138      	cbz	r0, 80065c8 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065b8:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065ba:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065c2:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065c4:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065c6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80065c8:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 80065ca:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 80065cc:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80065d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80065d4:	bc30      	pop	{r4, r5}
 80065d6:	4770      	bx	lr

080065d8 <HAL_DMA_Abort_IT>:
{
 80065d8:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065da:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d009      	beq.n	80065f6 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 80065e2:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065e4:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80065e6:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065e8:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80065ea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80065ee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 80065f2:	4618      	mov	r0, r3
}
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065f6:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065f8:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fa:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065fe:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006600:	f021 010e 	bic.w	r1, r1, #14
 8006604:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006606:	6819      	ldr	r1, [r3, #0]
 8006608:	f021 0101 	bic.w	r1, r1, #1
 800660c:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800660e:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006610:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006616:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006618:	f002 021f 	and.w	r2, r2, #31
 800661c:	2301      	movs	r3, #1
 800661e:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006620:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006624:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006626:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8006628:	b132      	cbz	r2, 8006638 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800662a:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800662c:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006634:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006636:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8006638:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800663a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800663c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800663e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8006642:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8006646:	b113      	cbz	r3, 800664e <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8006648:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	4620      	mov	r0, r4
}
 800664c:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800664e:	4618      	mov	r0, r3
}
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	bf00      	nop

08006654 <HAL_DMA_IRQHandler>:
{
 8006654:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006656:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006658:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800665a:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800665c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800665e:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	2204      	movs	r2, #4
 8006666:	409a      	lsls	r2, r3
 8006668:	420a      	tst	r2, r1
 800666a:	d00e      	beq.n	800668a <HAL_DMA_IRQHandler+0x36>
 800666c:	f014 0f04 	tst.w	r4, #4
 8006670:	d00b      	beq.n	800668a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006672:	682b      	ldr	r3, [r5, #0]
 8006674:	069b      	lsls	r3, r3, #26
 8006676:	d403      	bmi.n	8006680 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	f023 0304 	bic.w	r3, r3, #4
 800667e:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006680:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006682:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006684:	b1cb      	cbz	r3, 80066ba <HAL_DMA_IRQHandler+0x66>
}
 8006686:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006688:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800668a:	2202      	movs	r2, #2
 800668c:	409a      	lsls	r2, r3
 800668e:	420a      	tst	r2, r1
 8006690:	d015      	beq.n	80066be <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8006692:	f014 0f02 	tst.w	r4, #2
 8006696:	d012      	beq.n	80066be <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	0699      	lsls	r1, r3, #26
 800669c:	d406      	bmi.n	80066ac <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800669e:	682b      	ldr	r3, [r5, #0]
 80066a0:	f023 030a 	bic.w	r3, r3, #10
 80066a4:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 80066ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80066ae:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80066b0:	2100      	movs	r1, #0
 80066b2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e5      	bne.n	8006686 <HAL_DMA_IRQHandler+0x32>
}
 80066ba:	bc70      	pop	{r4, r5, r6}
 80066bc:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066be:	2208      	movs	r2, #8
 80066c0:	409a      	lsls	r2, r3
 80066c2:	420a      	tst	r2, r1
 80066c4:	d0f9      	beq.n	80066ba <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 80066c6:	0722      	lsls	r2, r4, #28
 80066c8:	d5f7      	bpl.n	80066ba <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ca:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80066cc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ce:	f022 020e 	bic.w	r2, r2, #14
 80066d2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066d4:	2201      	movs	r2, #1
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80066da:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066dc:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066de:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80066e0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80066e4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 80066e8:	2900      	cmp	r1, #0
 80066ea:	d0e6      	beq.n	80066ba <HAL_DMA_IRQHandler+0x66>
}
 80066ec:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80066ee:	4708      	bx	r1

080066f0 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f000 814c 	beq.w	800698e <HAL_FDCAN_Init+0x29e>
{
 80066f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80066fa:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80066fe:	4604      	mov	r4, r0
 8006700:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006704:	2b00      	cmp	r3, #0
 8006706:	d073      	beq.n	80067f0 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	6993      	ldr	r3, [r2, #24]
 800670c:	f023 0310 	bic.w	r3, r3, #16
 8006710:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006712:	f7fc faff 	bl	8002d14 <HAL_GetTick>
 8006716:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006718:	e004      	b.n	8006724 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800671a:	f7fc fafb 	bl	8002d14 <HAL_GetTick>
 800671e:	1b43      	subs	r3, r0, r5
 8006720:	2b0a      	cmp	r3, #10
 8006722:	d85b      	bhi.n	80067dc <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	0711      	lsls	r1, r2, #28
 800672a:	d4f6      	bmi.n	800671a <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006734:	f7fc faee 	bl	8002d14 <HAL_GetTick>
 8006738:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800673a:	e004      	b.n	8006746 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800673c:	f7fc faea 	bl	8002d14 <HAL_GetTick>
 8006740:	1b40      	subs	r0, r0, r5
 8006742:	280a      	cmp	r0, #10
 8006744:	d84a      	bhi.n	80067dc <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	07d2      	lsls	r2, r2, #31
 800674c:	d5f6      	bpl.n	800673c <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800674e:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006750:	4998      	ldr	r1, [pc, #608]	; (80069b4 <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006752:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8006756:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006758:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 800675a:	f000 8113 	beq.w	8006984 <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800675e:	7c22      	ldrb	r2, [r4, #16]
 8006760:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006762:	699a      	ldr	r2, [r3, #24]
 8006764:	bf0c      	ite	eq
 8006766:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800676a:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800676e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006770:	7c62      	ldrb	r2, [r4, #17]
 8006772:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	bf0c      	ite	eq
 8006778:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800677c:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8006780:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006782:	7ca2      	ldrb	r2, [r4, #18]
 8006784:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	bf0c      	ite	eq
 800678a:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800678e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8006792:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006798:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800679a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800679e:	4302      	orrs	r2, r0
 80067a0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80067a2:	699a      	ldr	r2, [r3, #24]
 80067a4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80067a8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067aa:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80067ac:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067ae:	f022 0210 	bic.w	r2, r2, #16
 80067b2:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80067b4:	d021      	beq.n	80067fa <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80067b6:	b321      	cbz	r1, 8006802 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80067b8:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80067ba:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80067bc:	f000 80f5 	beq.w	80069aa <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80067c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067c4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067c6:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80067c8:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80067ca:	f042 0210 	orr.w	r2, r2, #16
 80067ce:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80067d0:	d117      	bne.n	8006802 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80067d2:	699a      	ldr	r2, [r3, #24]
 80067d4:	f042 0220 	orr.w	r2, r2, #32
 80067d8:	619a      	str	r2, [r3, #24]
 80067da:	e012      	b.n	8006802 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80067dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80067de:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80067e6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80067ea:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80067ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80067f0:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80067f4:	f7fb f96c 	bl	8001ad0 <HAL_FDCAN_MspInit>
 80067f8:	e786      	b.n	8006708 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	f042 0204 	orr.w	r2, r2, #4
 8006800:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006802:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006806:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006808:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800680a:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800680c:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006810:	6a21      	ldr	r1, [r4, #32]
 8006812:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006814:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006816:	6961      	ldr	r1, [r4, #20]
 8006818:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800681a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800681e:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006822:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006824:	d10e      	bne.n	8006844 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006826:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800682a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800682c:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800682e:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006830:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006832:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006834:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006838:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800683a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800683c:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800683e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006842:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006844:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006848:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800684a:	495b      	ldr	r1, [pc, #364]	; (80069b8 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800684c:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 800684e:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006850:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8006854:	f000 809d 	beq.w	8006992 <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006858:	4a58      	ldr	r2, [pc, #352]	; (80069bc <HAL_FDCAN_Init+0x2cc>)
 800685a:	4e59      	ldr	r6, [pc, #356]	; (80069c0 <HAL_FDCAN_Init+0x2d0>)
 800685c:	4f59      	ldr	r7, [pc, #356]	; (80069c4 <HAL_FDCAN_Init+0x2d4>)
 800685e:	4d5a      	ldr	r5, [pc, #360]	; (80069c8 <HAL_FDCAN_Init+0x2d8>)
 8006860:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006864:	428b      	cmp	r3, r1
 8006866:	bf18      	it	ne
 8006868:	4691      	movne	r9, r2
 800686a:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 800686e:	f1a2 0218 	sub.w	r2, r2, #24
 8006872:	f101 0110 	add.w	r1, r1, #16
 8006876:	bf18      	it	ne
 8006878:	4616      	movne	r6, r2
 800687a:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 800687e:	bf14      	ite	ne
 8006880:	4617      	movne	r7, r2
 8006882:	468e      	moveq	lr, r1
 8006884:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006888:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 800688c:	bf14      	ite	ne
 800688e:	4696      	movne	lr, r2
 8006890:	4688      	moveq	r8, r1
 8006892:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8006896:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 800689a:	bf14      	ite	ne
 800689c:	4690      	movne	r8, r2
 800689e:	468c      	moveq	ip, r1
 80068a0:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 80068a4:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 80068a8:	bf14      	ite	ne
 80068aa:	4694      	movne	ip, r2
 80068ac:	46a9      	moveq	r9, r5
 80068ae:	f502 7254 	add.w	r2, r2, #848	; 0x350
 80068b2:	bf18      	it	ne
 80068b4:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80068b6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80068ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80068bc:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80068be:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 80068c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80068c6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80068ca:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80068ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80068d0:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80068d4:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80068d8:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 80068dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80068e0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80068e4:	1a89      	subs	r1, r1, r2
 80068e6:	1c53      	adds	r3, r2, #1
 80068e8:	4563      	cmp	r3, ip
 80068ea:	ea4f 0391 	mov.w	r3, r1, lsr #2
 80068ee:	f103 0301 	add.w	r3, r3, #1
 80068f2:	bf98      	it	ls
 80068f4:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80068f6:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80068fa:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068fe:	bf88      	it	hi
 8006900:	2501      	movhi	r5, #1
 8006902:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8006906:	d81a      	bhi.n	800693e <HAL_FDCAN_Init+0x24e>
 8006908:	2917      	cmp	r1, #23
 800690a:	bf8c      	ite	hi
 800690c:	2100      	movhi	r1, #0
 800690e:	2101      	movls	r1, #1
 8006910:	b9a9      	cbnz	r1, 800693e <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006912:	4616      	mov	r6, r2
 8006914:	b10b      	cbz	r3, 800691a <HAL_FDCAN_Init+0x22a>
 8006916:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800691a:	1aed      	subs	r5, r5, r3
 800691c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006920:	086a      	lsrs	r2, r5, #1
 8006922:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006926:	2000      	movs	r0, #0
 8006928:	2100      	movs	r1, #0
 800692a:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800692e:	429a      	cmp	r2, r3
 8006930:	d1fb      	bne.n	800692a <HAL_FDCAN_Init+0x23a>
 8006932:	f025 0301 	bic.w	r3, r5, #1
 8006936:	429d      	cmp	r5, r3
 8006938:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800693c:	d01a      	beq.n	8006974 <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800693e:	4611      	mov	r1, r2
 8006940:	2300      	movs	r3, #0
 8006942:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006946:	458c      	cmp	ip, r1
 8006948:	d914      	bls.n	8006974 <HAL_FDCAN_Init+0x284>
 800694a:	f102 0108 	add.w	r1, r2, #8
 800694e:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006950:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006952:	d90f      	bls.n	8006974 <HAL_FDCAN_Init+0x284>
 8006954:	f102 010c 	add.w	r1, r2, #12
 8006958:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800695a:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800695c:	d90a      	bls.n	8006974 <HAL_FDCAN_Init+0x284>
 800695e:	f102 0110 	add.w	r1, r2, #16
 8006962:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006964:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006966:	d905      	bls.n	8006974 <HAL_FDCAN_Init+0x284>
 8006968:	f102 0114 	add.w	r1, r2, #20
 800696c:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800696e:	6113      	str	r3, [r2, #16]
 8006970:	bf88      	it	hi
 8006972:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8006974:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006976:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006978:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800697a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 800697e:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8006980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006984:	4a11      	ldr	r2, [pc, #68]	; (80069cc <HAL_FDCAN_Init+0x2dc>)
 8006986:	6861      	ldr	r1, [r4, #4]
 8006988:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 800698c:	e6e7      	b.n	800675e <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 800698e:	2001      	movs	r0, #1
}
 8006990:	4770      	bx	lr
 8006992:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80069dc <HAL_FDCAN_Init+0x2ec>
 8006996:	4e0e      	ldr	r6, [pc, #56]	; (80069d0 <HAL_FDCAN_Init+0x2e0>)
 8006998:	4f0e      	ldr	r7, [pc, #56]	; (80069d4 <HAL_FDCAN_Init+0x2e4>)
 800699a:	f8df e044 	ldr.w	lr, [pc, #68]	; 80069e0 <HAL_FDCAN_Init+0x2f0>
 800699e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80069e4 <HAL_FDCAN_Init+0x2f4>
 80069a2:	f8df c044 	ldr.w	ip, [pc, #68]	; 80069e8 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 80069a6:	4a0c      	ldr	r2, [pc, #48]	; (80069d8 <HAL_FDCAN_Init+0x2e8>)
 80069a8:	e785      	b.n	80068b6 <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80069aa:	f042 0220 	orr.w	r2, r2, #32
 80069ae:	619a      	str	r2, [r3, #24]
 80069b0:	e727      	b.n	8006802 <HAL_FDCAN_Init+0x112>
 80069b2:	bf00      	nop
 80069b4:	40006400 	.word	0x40006400
 80069b8:	40006800 	.word	0x40006800
 80069bc:	4000a678 	.word	0x4000a678
 80069c0:	4000ad00 	.word	0x4000ad00
 80069c4:	4000ac28 	.word	0x4000ac28
 80069c8:	4000ad18 	.word	0x4000ad18
 80069cc:	40006000 	.word	0x40006000
 80069d0:	4000a9b0 	.word	0x4000a9b0
 80069d4:	4000a8d8 	.word	0x4000a8d8
 80069d8:	4000a750 	.word	0x4000a750
 80069dc:	4000a9c8 	.word	0x4000a9c8
 80069e0:	4000a800 	.word	0x4000a800
 80069e4:	4000a7c0 	.word	0x4000a7c0
 80069e8:	4000aaa0 	.word	0x4000aaa0

080069ec <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80069ec:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069f0:	3a01      	subs	r2, #1
 80069f2:	2a01      	cmp	r2, #1
{
 80069f4:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069f6:	d905      	bls.n	8006a04 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80069f8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80069fa:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80069fe:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006a00:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006a02:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006a04:	6808      	ldr	r0, [r1, #0]
{
 8006a06:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006a08:	b978      	cbnz	r0, 8006a2a <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 8006a0a:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006a0e:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a10:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 8006a14:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a16:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006a18:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a1a:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 8006a1c:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 8006a22:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 8006a26:	bc30      	pop	{r4, r5}
 8006a28:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006a2a:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006a2c:	688a      	ldr	r2, [r1, #8]
 8006a2e:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006a30:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006a32:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006a36:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006a3a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006a3e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8006a42:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8006a46:	2000      	movs	r0, #0
}
 8006a48:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8006a4a:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8006a4e:	4770      	bx	lr

08006a50 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a50:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8006a54:	2a01      	cmp	r2, #1
{
 8006a56:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a58:	d005      	beq.n	8006a66 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a5a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006a5c:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8006a60:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a62:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006a64:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a66:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a6e:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a70:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006a78:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a7a:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006a80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006a82:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a86:	2b02      	cmp	r3, #2
{
 8006a88:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006a8c:	6805      	ldr	r5, [r0, #0]
 8006a8e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8006a92:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8006a96:	d00d      	beq.n	8006ab4 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006a98:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8006a9e:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006aa0:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006aa6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006aa8:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006aac:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006aae:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006ab4:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006ab8:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006aba:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d139      	bne.n	8006b36 <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006ac2:	688b      	ldr	r3, [r1, #8]
 8006ac4:	690f      	ldr	r7, [r1, #16]
 8006ac6:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006ac8:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006aca:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ace:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8006ad2:	4303      	orrs	r3, r0
 8006ad4:	6948      	ldr	r0, [r1, #20]
 8006ad6:	6a0c      	ldr	r4, [r1, #32]
 8006ad8:	4303      	orrs	r3, r0
 8006ada:	68c8      	ldr	r0, [r1, #12]
 8006adc:	4303      	orrs	r3, r0
 8006ade:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006ae2:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 8006ae6:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006aea:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006aee:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006af2:	4c15      	ldr	r4, [pc, #84]	; (8006b48 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8006af4:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006af6:	89cb      	ldrh	r3, [r1, #14]
 8006af8:	5ce3      	ldrb	r3, [r4, r3]
 8006afa:	b1a3      	cbz	r3, 8006b26 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006afc:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006afe:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006b00:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b02:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006b06:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006b08:	433b      	orrs	r3, r7
 8006b0a:	7857      	ldrb	r7, [r2, #1]
 8006b0c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b10:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b14:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006b18:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006b1a:	89cb      	ldrh	r3, [r1, #14]
 8006b1c:	5ce3      	ldrb	r3, [r4, r3]
 8006b1e:	459c      	cmp	ip, r3
 8006b20:	f102 0204 	add.w	r2, r2, #4
 8006b24:	d3ea      	bcc.n	8006afc <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b26:	2301      	movs	r3, #1
 8006b28:	40b3      	lsls	r3, r6
 8006b2a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 8006b2e:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006b30:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 8006b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8006b36:	690b      	ldr	r3, [r1, #16]
 8006b38:	6808      	ldr	r0, [r1, #0]
 8006b3a:	ea43 0700 	orr.w	r7, r3, r0
 8006b3e:	688b      	ldr	r3, [r1, #8]
 8006b40:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b42:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8006b46:	e7c2      	b.n	8006ace <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006b48:	0800e540 	.word	0x0800e540

08006b4c <HAL_FDCAN_GetRxMessage>:
{
 8006b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4e:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006b50:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006b54:	2802      	cmp	r0, #2
 8006b56:	d10d      	bne.n	8006b74 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b58:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006b5a:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b5e:	d00f      	beq.n	8006b80 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006b60:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8006b64:	0700      	lsls	r0, r0, #28
 8006b66:	d160      	bne.n	8006c2a <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b68:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8006b6e:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b70:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b74:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006b76:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006b7a:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b7c:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006b80:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8006b84:	0705      	lsls	r5, r0, #28
 8006b86:	d0ef      	beq.n	8006b68 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006b88:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006b8c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006b8e:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006b92:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006b96:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006b9a:	6828      	ldr	r0, [r5, #0]
 8006b9c:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006ba0:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d150      	bne.n	8006c48 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006ba6:	6828      	ldr	r0, [r5, #0]
 8006ba8:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8006bac:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006bae:	6828      	ldr	r0, [r5, #0]
 8006bb0:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8006bb4:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006bb6:	6828      	ldr	r0, [r5, #0]
 8006bb8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006bbc:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006bbe:	88a8      	ldrh	r0, [r5, #4]
 8006bc0:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006bc2:	6868      	ldr	r0, [r5, #4]
 8006bc4:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8006bc8:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006bca:	686e      	ldr	r6, [r5, #4]
 8006bcc:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8006bd0:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006bd2:	686e      	ldr	r6, [r5, #4]
 8006bd4:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8006bd8:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006bda:	79ee      	ldrb	r6, [r5, #7]
 8006bdc:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006be0:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006be2:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006be4:	4e1a      	ldr	r6, [pc, #104]	; (8006c50 <HAL_FDCAN_GetRxMessage+0x104>)
 8006be6:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006bea:	6868      	ldr	r0, [r5, #4]
 8006bec:	0fc0      	lsrs	r0, r0, #31
 8006bee:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006bf0:	f1be 0f00 	cmp.w	lr, #0
 8006bf4:	d011      	beq.n	8006c1a <HAL_FDCAN_GetRxMessage+0xce>
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006bfc:	46f4      	mov	ip, lr
 8006bfe:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 8006c02:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006c06:	89d0      	ldrh	r0, [r2, #14]
 8006c08:	f1ac 0c06 	sub.w	ip, ip, #6
 8006c0c:	5c30      	ldrb	r0, [r6, r0]
 8006c0e:	ebac 0c05 	sub.w	ip, ip, r5
 8006c12:	4560      	cmp	r0, ip
 8006c14:	d8f2      	bhi.n	8006bfc <HAL_FDCAN_GetRxMessage+0xb0>
 8006c16:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006c1a:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006c1c:	bf0c      	ite	eq
 8006c1e:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006c22:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8006c26:	2000      	movs	r0, #0
}
 8006c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c2a:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c2e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c30:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c34:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006c38:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006c3c:	6828      	ldr	r0, [r5, #0]
 8006c3e:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006c42:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d0ae      	beq.n	8006ba6 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006c48:	6828      	ldr	r0, [r5, #0]
 8006c4a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006c4e:	e7ad      	b.n	8006bac <HAL_FDCAN_GetRxMessage+0x60>
 8006c50:	0800e540 	.word	0x0800e540

08006c54 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006c54:	6803      	ldr	r3, [r0, #0]
 8006c56:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 8006c5a:	f000 0007 	and.w	r0, r0, #7
 8006c5e:	4770      	bx	lr

08006c60 <HAL_FDCAN_ActivateNotification>:
{
 8006c60:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006c62:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006c66:	3801      	subs	r0, #1
 8006c68:	2801      	cmp	r0, #1
 8006c6a:	d905      	bls.n	8006c78 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c6e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006c72:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c74:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c76:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c78:	681b      	ldr	r3, [r3, #0]
{
 8006c7a:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c7c:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c80:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c82:	d03d      	beq.n	8006d00 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006c84:	07c4      	lsls	r4, r0, #31
 8006c86:	d43b      	bmi.n	8006d00 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006c88:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006c8a:	f044 0401 	orr.w	r4, r4, #1
 8006c8e:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006c90:	b1cd      	cbz	r5, 8006cc6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006c92:	07c5      	lsls	r5, r0, #31
 8006c94:	d517      	bpl.n	8006cc6 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006c96:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006c98:	f040 0002 	orr.w	r0, r0, #2
 8006c9c:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006c9e:	060c      	lsls	r4, r1, #24
 8006ca0:	d504      	bpl.n	8006cac <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006ca2:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006ca6:	4310      	orrs	r0, r2
 8006ca8:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006cac:	05c8      	lsls	r0, r1, #23
 8006cae:	d504      	bpl.n	8006cba <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006cb0:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006cb4:	4302      	orrs	r2, r0
 8006cb6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cbc:	430a      	orrs	r2, r1
    return HAL_OK;
 8006cbe:	2000      	movs	r0, #0
}
 8006cc0:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006cc2:	655a      	str	r2, [r3, #84]	; 0x54
}
 8006cc4:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006cc6:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006cca:	d001      	beq.n	8006cd0 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006ccc:	0784      	lsls	r4, r0, #30
 8006cce:	d4e2      	bmi.n	8006c96 <HAL_FDCAN_ActivateNotification+0x36>
 8006cd0:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006cd4:	d131      	bne.n	8006d3a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006cd6:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006cda:	d001      	beq.n	8006ce0 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006cdc:	0704      	lsls	r4, r0, #28
 8006cde:	d4da      	bmi.n	8006c96 <HAL_FDCAN_ActivateNotification+0x36>
 8006ce0:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006ce4:	d001      	beq.n	8006cea <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006ce6:	06c5      	lsls	r5, r0, #27
 8006ce8:	d4d5      	bmi.n	8006c96 <HAL_FDCAN_ActivateNotification+0x36>
 8006cea:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006cee:	d001      	beq.n	8006cf4 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006cf0:	0684      	lsls	r4, r0, #26
 8006cf2:	d4d0      	bmi.n	8006c96 <HAL_FDCAN_ActivateNotification+0x36>
 8006cf4:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006cf8:	d0d1      	beq.n	8006c9e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006cfa:	0645      	lsls	r5, r0, #25
 8006cfc:	d5cf      	bpl.n	8006c9e <HAL_FDCAN_ActivateNotification+0x3e>
 8006cfe:	e7ca      	b.n	8006c96 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006d00:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006d04:	d001      	beq.n	8006d0a <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006d06:	0784      	lsls	r4, r0, #30
 8006d08:	d5be      	bpl.n	8006c88 <HAL_FDCAN_ActivateNotification+0x28>
 8006d0a:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006d0e:	d117      	bne.n	8006d40 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d10:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006d14:	d001      	beq.n	8006d1a <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006d16:	0704      	lsls	r4, r0, #28
 8006d18:	d5b6      	bpl.n	8006c88 <HAL_FDCAN_ActivateNotification+0x28>
 8006d1a:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006d1e:	d001      	beq.n	8006d24 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006d20:	06c4      	lsls	r4, r0, #27
 8006d22:	d5b1      	bpl.n	8006c88 <HAL_FDCAN_ActivateNotification+0x28>
 8006d24:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006d28:	d001      	beq.n	8006d2e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006d2a:	0684      	lsls	r4, r0, #26
 8006d2c:	d5ac      	bpl.n	8006c88 <HAL_FDCAN_ActivateNotification+0x28>
 8006d2e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006d32:	d0ad      	beq.n	8006c90 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006d34:	0644      	lsls	r4, r0, #25
 8006d36:	d4ab      	bmi.n	8006c90 <HAL_FDCAN_ActivateNotification+0x30>
 8006d38:	e7a6      	b.n	8006c88 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006d3a:	0745      	lsls	r5, r0, #29
 8006d3c:	d4ab      	bmi.n	8006c96 <HAL_FDCAN_ActivateNotification+0x36>
 8006d3e:	e7ca      	b.n	8006cd6 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d40:	0744      	lsls	r4, r0, #29
 8006d42:	d5a1      	bpl.n	8006c88 <HAL_FDCAN_ActivateNotification+0x28>
 8006d44:	e7e4      	b.n	8006d10 <HAL_FDCAN_ActivateNotification+0xb0>
 8006d46:	bf00      	nop

08006d48 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop

08006d4c <HAL_FDCAN_RxFifo1Callback>:
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop

08006d50 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop

08006d54 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop

08006d58 <HAL_FDCAN_TxBufferAbortCallback>:
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop

08006d5c <HAL_FDCAN_TimestampWraparoundCallback>:
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop

08006d64 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <HAL_FDCAN_ErrorCallback>:
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop

08006d6c <HAL_FDCAN_ErrorStatusCallback>:
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <HAL_FDCAN_IRQHandler>:
{
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006d74:	6803      	ldr	r3, [r0, #0]
 8006d76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d7a:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d80:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006d82:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d84:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006d8a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d8c:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8006d8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006d90:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006d92:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d96:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006d98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d9a:	0652      	lsls	r2, r2, #25
{
 8006d9c:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d9e:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006da2:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006da6:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006daa:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006dae:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006db2:	d502      	bpl.n	8006dba <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006db6:	0651      	lsls	r1, r2, #25
 8006db8:	d473      	bmi.n	8006ea2 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dbc:	05d2      	lsls	r2, r2, #23
 8006dbe:	d502      	bpl.n	8006dc6 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc2:	05d0      	lsls	r0, r2, #23
 8006dc4:	d45d      	bmi.n	8006e82 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	d14a      	bne.n	8006e62 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8006dcc:	f1b8 0f00 	cmp.w	r8, #0
 8006dd0:	d137      	bne.n	8006e42 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	d13e      	bne.n	8006e54 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd8:	0591      	lsls	r1, r2, #22
 8006dda:	d502      	bpl.n	8006de2 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dde:	0592      	lsls	r2, r2, #22
 8006de0:	d475      	bmi.n	8006ece <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006de4:	0617      	lsls	r7, r2, #24
 8006de6:	d502      	bpl.n	8006dee <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dea:	0610      	lsls	r0, r2, #24
 8006dec:	d477      	bmi.n	8006ede <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006df0:	0491      	lsls	r1, r2, #18
 8006df2:	d502      	bpl.n	8006dfa <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006df6:	0492      	lsls	r2, r2, #18
 8006df8:	d459      	bmi.n	8006eae <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006dfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dfc:	0417      	lsls	r7, r2, #16
 8006dfe:	d502      	bpl.n	8006e06 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e02:	0410      	lsls	r0, r2, #16
 8006e04:	d45b      	bmi.n	8006ebe <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006e06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e08:	0451      	lsls	r1, r2, #17
 8006e0a:	d509      	bpl.n	8006e20 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e0e:	0452      	lsls	r2, r2, #17
 8006e10:	d506      	bpl.n	8006e20 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e16:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006e18:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006e1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e1e:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006e20:	b94e      	cbnz	r6, 8006e36 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8006e22:	b125      	cbz	r5, 8006e2e <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006e28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e2a:	432b      	orrs	r3, r5
 8006e2c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006e2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006e30:	bb13      	cbnz	r3, 8006e78 <HAL_FDCAN_IRQHandler+0x108>
}
 8006e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006e36:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f7ff ff96 	bl	8006d6c <HAL_FDCAN_ErrorStatusCallback>
 8006e40:	e7ef      	b.n	8006e22 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e42:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006e46:	4641      	mov	r1, r8
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f7fa fc69 	bl	8001720 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e4e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006e50:	2f00      	cmp	r7, #0
 8006e52:	d0c0      	beq.n	8006dd6 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e54:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006e56:	4639      	mov	r1, r7
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f7ff ff77 	bl	8006d4c <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	e7b9      	b.n	8006dd6 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e62:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006e66:	4649      	mov	r1, r9
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7ff ff6d 	bl	8006d48 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e6e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006e70:	f1b8 0f00 	cmp.w	r8, #0
 8006e74:	d0ad      	beq.n	8006dd2 <HAL_FDCAN_IRQHandler+0x62>
 8006e76:	e7e4      	b.n	8006e42 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7ff ff75 	bl	8006d68 <HAL_FDCAN_ErrorCallback>
}
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006e82:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006e86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006e8a:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e90:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006e92:	4620      	mov	r0, r4
 8006e94:	f7ff ff60 	bl	8006d58 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e98:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006e9a:	f1b9 0f00 	cmp.w	r9, #0
 8006e9e:	d095      	beq.n	8006dcc <HAL_FDCAN_IRQHandler+0x5c>
 8006ea0:	e7df      	b.n	8006e62 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006ea2:	2240      	movs	r2, #64	; 0x40
 8006ea4:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006ea6:	f7ff ff5d 	bl	8006d64 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	e785      	b.n	8006dba <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006eb2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f7ff ff51 	bl	8006d5c <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	e79d      	b.n	8006dfa <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006ebe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006ec2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7ff ff4b 	bl	8006d60 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	e79b      	b.n	8006e06 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7ff ff3b 	bl	8006d50 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	e781      	b.n	8006de2 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006ede:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006ee2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006ee6:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006ee8:	2280      	movs	r2, #128	; 0x80
 8006eea:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7ff ff31 	bl	8006d54 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	e77b      	b.n	8006dee <HAL_FDCAN_IRQHandler+0x7e>
 8006ef6:	bf00      	nop

08006ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006efc:	680c      	ldr	r4, [r1, #0]
{
 8006efe:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d07d      	beq.n	8007000 <HAL_GPIO_Init+0x108>
 8006f04:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f08:	4e71      	ldr	r6, [pc, #452]	; (80070d0 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8006f0a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f0c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f10:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f12:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8006f16:	ea17 0a04 	ands.w	sl, r7, r4
 8006f1a:	d06b      	beq.n	8006ff4 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f1c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006f20:	f001 0203 	and.w	r2, r1, #3
 8006f24:	1e55      	subs	r5, r2, #1
 8006f26:	2d01      	cmp	r5, #1
 8006f28:	d96d      	bls.n	8007006 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f2a:	2a03      	cmp	r2, #3
 8006f2c:	f040 80b1 	bne.w	8007092 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f30:	fa02 f20c 	lsl.w	r2, r2, ip
 8006f34:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8006f36:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f38:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f3a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f3c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006f40:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f42:	d057      	beq.n	8006ff4 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f44:	4d63      	ldr	r5, [pc, #396]	; (80070d4 <HAL_GPIO_Init+0x1dc>)
 8006f46:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006f48:	f042 0201 	orr.w	r2, r2, #1
 8006f4c:	662a      	str	r2, [r5, #96]	; 0x60
 8006f4e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8006f50:	f002 0201 	and.w	r2, r2, #1
 8006f54:	9203      	str	r2, [sp, #12]
 8006f56:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f58:	f023 0203 	bic.w	r2, r3, #3
 8006f5c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006f60:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f64:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f68:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f6a:	00bf      	lsls	r7, r7, #2
 8006f6c:	f04f 080f 	mov.w	r8, #15
 8006f70:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f74:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f78:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f7c:	d01a      	beq.n	8006fb4 <HAL_GPIO_Init+0xbc>
 8006f7e:	4d56      	ldr	r5, [pc, #344]	; (80070d8 <HAL_GPIO_Init+0x1e0>)
 8006f80:	42a8      	cmp	r0, r5
 8006f82:	f000 8092 	beq.w	80070aa <HAL_GPIO_Init+0x1b2>
 8006f86:	4d55      	ldr	r5, [pc, #340]	; (80070dc <HAL_GPIO_Init+0x1e4>)
 8006f88:	42a8      	cmp	r0, r5
 8006f8a:	f000 8093 	beq.w	80070b4 <HAL_GPIO_Init+0x1bc>
 8006f8e:	4d54      	ldr	r5, [pc, #336]	; (80070e0 <HAL_GPIO_Init+0x1e8>)
 8006f90:	42a8      	cmp	r0, r5
 8006f92:	f000 8083 	beq.w	800709c <HAL_GPIO_Init+0x1a4>
 8006f96:	4d53      	ldr	r5, [pc, #332]	; (80070e4 <HAL_GPIO_Init+0x1ec>)
 8006f98:	42a8      	cmp	r0, r5
 8006f9a:	f000 8092 	beq.w	80070c2 <HAL_GPIO_Init+0x1ca>
 8006f9e:	4d52      	ldr	r5, [pc, #328]	; (80070e8 <HAL_GPIO_Init+0x1f0>)
 8006fa0:	42a8      	cmp	r0, r5
 8006fa2:	bf0c      	ite	eq
 8006fa4:	f04f 0805 	moveq.w	r8, #5
 8006fa8:	f04f 0806 	movne.w	r8, #6
 8006fac:	fa08 f707 	lsl.w	r7, r8, r7
 8006fb0:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fb4:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8006fb8:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8006fba:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fbe:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8006fc0:	bf54      	ite	pl
 8006fc2:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006fc4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8006fc8:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8006fca:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fcc:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8006fce:	bf54      	ite	pl
 8006fd0:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006fd2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8006fd6:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8006fd8:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fda:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8006fdc:	bf54      	ite	pl
 8006fde:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006fe0:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8006fe4:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006fe6:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fe8:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8006fea:	bf54      	ite	pl
 8006fec:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006fee:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8006ff2:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8006ff4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ff6:	fa34 f203 	lsrs.w	r2, r4, r3
 8006ffa:	f10c 0c02 	add.w	ip, ip, #2
 8006ffe:	d188      	bne.n	8006f12 <HAL_GPIO_Init+0x1a>
  }
}
 8007000:	b005      	add	sp, #20
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007006:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800700a:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800700e:	f04f 0803 	mov.w	r8, #3
 8007012:	fa08 f80c 	lsl.w	r8, r8, ip
 8007016:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800701a:	fa05 f50c 	lsl.w	r5, r5, ip
 800701e:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8007022:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007024:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8007028:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800702c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007030:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8007034:	409f      	lsls	r7, r3
 8007036:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800703a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800703c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800703e:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007042:	f8de 7008 	ldr.w	r7, [lr, #8]
 8007046:	fa07 f70c 	lsl.w	r7, r7, ip
 800704a:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800704e:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8007050:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007052:	fa02 f20c 	lsl.w	r2, r2, ip
 8007056:	f47f af6e 	bne.w	8006f36 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 800705a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800705e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007062:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8007066:	f8d9 7020 	ldr.w	r7, [r9, #32]
 800706a:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800706c:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007070:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007074:	fa07 f708 	lsl.w	r7, r7, r8
 8007078:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800707a:	270f      	movs	r7, #15
 800707c:	fa07 f808 	lsl.w	r8, r7, r8
 8007080:	9f00      	ldr	r7, [sp, #0]
 8007082:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007086:	9f01      	ldr	r7, [sp, #4]
 8007088:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800708c:	f8c9 7020 	str.w	r7, [r9, #32]
 8007090:	e751      	b.n	8006f36 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007092:	2503      	movs	r5, #3
 8007094:	fa05 f50c 	lsl.w	r5, r5, ip
 8007098:	43ed      	mvns	r5, r5
 800709a:	e7cf      	b.n	800703c <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800709c:	f04f 0803 	mov.w	r8, #3
 80070a0:	fa08 f707 	lsl.w	r7, r8, r7
 80070a4:	ea49 0907 	orr.w	r9, r9, r7
 80070a8:	e784      	b.n	8006fb4 <HAL_GPIO_Init+0xbc>
 80070aa:	fa0b f707 	lsl.w	r7, fp, r7
 80070ae:	ea49 0907 	orr.w	r9, r9, r7
 80070b2:	e77f      	b.n	8006fb4 <HAL_GPIO_Init+0xbc>
 80070b4:	f04f 0802 	mov.w	r8, #2
 80070b8:	fa08 f707 	lsl.w	r7, r8, r7
 80070bc:	ea49 0907 	orr.w	r9, r9, r7
 80070c0:	e778      	b.n	8006fb4 <HAL_GPIO_Init+0xbc>
 80070c2:	f04f 0804 	mov.w	r8, #4
 80070c6:	fa08 f707 	lsl.w	r7, r8, r7
 80070ca:	ea49 0907 	orr.w	r9, r9, r7
 80070ce:	e771      	b.n	8006fb4 <HAL_GPIO_Init+0xbc>
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40021000 	.word	0x40021000
 80070d8:	48000400 	.word	0x48000400
 80070dc:	48000800 	.word	0x48000800
 80070e0:	48000c00 	.word	0x48000c00
 80070e4:	48001000 	.word	0x48001000
 80070e8:	48001400 	.word	0x48001400

080070ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80070ec:	6903      	ldr	r3, [r0, #16]
 80070ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80070f0:	bf14      	ite	ne
 80070f2:	2001      	movne	r0, #1
 80070f4:	2000      	moveq	r0, #0
 80070f6:	4770      	bx	lr

080070f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070f8:	b10a      	cbz	r2, 80070fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070fa:	6181      	str	r1, [r0, #24]
 80070fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070fe:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop

08007104 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007104:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007106:	ea01 0203 	and.w	r2, r1, r3
 800710a:	ea21 0103 	bic.w	r1, r1, r3
 800710e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007112:	6181      	str	r1, [r0, #24]
}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007118:	4a37      	ldr	r2, [pc, #220]	; (80071f8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800711a:	b960      	cbnz	r0, 8007136 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800711c:	6813      	ldr	r3, [r2, #0]
 800711e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007126:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800712a:	d01d      	beq.n	8007168 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800712c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007134:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007136:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800713a:	d007      	beq.n	800714c <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800713c:	6813      	ldr	r3, [r2, #0]
 800713e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007146:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007148:	6013      	str	r3, [r2, #0]
}
 800714a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800714c:	6813      	ldr	r3, [r2, #0]
 800714e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007156:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800715a:	d02b      	beq.n	80071b4 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800715c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8007160:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007162:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007166:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800716c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007170:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007172:	4822      	ldr	r0, [pc, #136]	; (80071fc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007174:	4922      	ldr	r1, [pc, #136]	; (8007200 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007176:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800717a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800717e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007180:	6803      	ldr	r3, [r0, #0]
 8007182:	2032      	movs	r0, #50	; 0x32
 8007184:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007188:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800718a:	fba1 1303 	umull	r1, r3, r1, r3
 800718e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007190:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007192:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007196:	d506      	bpl.n	80071a6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007198:	e000      	b.n	800719c <HAL_PWREx_ControlVoltageScaling+0x84>
 800719a:	b123      	cbz	r3, 80071a6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 800719c:	6951      	ldr	r1, [r2, #20]
 800719e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80071a0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071a4:	d4f9      	bmi.n	800719a <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 80071ac:	bf54      	ite	pl
 80071ae:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 80071b0:	2003      	movmi	r0, #3
 80071b2:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80071b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071bc:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071be:	480f      	ldr	r0, [pc, #60]	; (80071fc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80071c0:	490f      	ldr	r1, [pc, #60]	; (8007200 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80071c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071ca:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071cc:	6803      	ldr	r3, [r0, #0]
 80071ce:	2032      	movs	r0, #50	; 0x32
 80071d0:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071d4:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071d6:	fba1 1303 	umull	r1, r3, r1, r3
 80071da:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071dc:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071de:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071e2:	d5e0      	bpl.n	80071a6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80071e4:	e001      	b.n	80071ea <HAL_PWREx_ControlVoltageScaling+0xd2>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0dd      	beq.n	80071a6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80071ea:	6951      	ldr	r1, [r2, #20]
 80071ec:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80071ee:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071f2:	d5d8      	bpl.n	80071a6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80071f4:	e7f7      	b.n	80071e6 <HAL_PWREx_ControlVoltageScaling+0xce>
 80071f6:	bf00      	nop
 80071f8:	40007000 	.word	0x40007000
 80071fc:	20000004 	.word	0x20000004
 8007200:	431bde83 	.word	0x431bde83

08007204 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007204:	4a02      	ldr	r2, [pc, #8]	; (8007210 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007206:	6893      	ldr	r3, [r2, #8]
 8007208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800720c:	6093      	str	r3, [r2, #8]
}
 800720e:	4770      	bx	lr
 8007210:	40007000 	.word	0x40007000

08007214 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007214:	2800      	cmp	r0, #0
 8007216:	f000 81c3 	beq.w	80075a0 <HAL_RCC_OscConfig+0x38c>
{
 800721a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800721e:	6803      	ldr	r3, [r0, #0]
 8007220:	07d9      	lsls	r1, r3, #31
{
 8007222:	b082      	sub	sp, #8
 8007224:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007226:	d52d      	bpl.n	8007284 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007228:	49a6      	ldr	r1, [pc, #664]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 800722a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800722c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800722e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007232:	2a0c      	cmp	r2, #12
 8007234:	f000 810a 	beq.w	800744c <HAL_RCC_OscConfig+0x238>
 8007238:	2a08      	cmp	r2, #8
 800723a:	f000 810c 	beq.w	8007456 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800723e:	6863      	ldr	r3, [r4, #4]
 8007240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007244:	f000 8133 	beq.w	80074ae <HAL_RCC_OscConfig+0x29a>
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800724c:	f000 819b 	beq.w	8007586 <HAL_RCC_OscConfig+0x372>
 8007250:	4d9c      	ldr	r5, [pc, #624]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 8007252:	682a      	ldr	r2, [r5, #0]
 8007254:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007258:	602a      	str	r2, [r5, #0]
 800725a:	682a      	ldr	r2, [r5, #0]
 800725c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007260:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007262:	2b00      	cmp	r3, #0
 8007264:	f040 8128 	bne.w	80074b8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fb fd54 	bl	8002d14 <HAL_GetTick>
 800726c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800726e:	e005      	b.n	800727c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007270:	f7fb fd50 	bl	8002d14 <HAL_GetTick>
 8007274:	1b80      	subs	r0, r0, r6
 8007276:	2864      	cmp	r0, #100	; 0x64
 8007278:	f200 8142 	bhi.w	8007500 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	039f      	lsls	r7, r3, #14
 8007280:	d4f6      	bmi.n	8007270 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	079e      	lsls	r6, r3, #30
 8007286:	d528      	bpl.n	80072da <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007288:	4a8e      	ldr	r2, [pc, #568]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 800728a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800728c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800728e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007292:	2b0c      	cmp	r3, #12
 8007294:	f000 80ec 	beq.w	8007470 <HAL_RCC_OscConfig+0x25c>
 8007298:	2b04      	cmp	r3, #4
 800729a:	f000 80ee 	beq.w	800747a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800729e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072a0:	4d88      	ldr	r5, [pc, #544]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 811d 	beq.w	80074e2 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ae:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fb fd30 	bl	8002d14 <HAL_GetTick>
 80072b4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072b6:	e005      	b.n	80072c4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b8:	f7fb fd2c 	bl	8002d14 <HAL_GetTick>
 80072bc:	1b80      	subs	r0, r0, r6
 80072be:	2802      	cmp	r0, #2
 80072c0:	f200 811e 	bhi.w	8007500 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	0558      	lsls	r0, r3, #21
 80072c8:	d5f6      	bpl.n	80072b8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ca:	686b      	ldr	r3, [r5, #4]
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80072d6:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	071a      	lsls	r2, r3, #28
 80072dc:	d519      	bpl.n	8007312 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072de:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e0:	4d78      	ldr	r5, [pc, #480]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 809e 	beq.w	8007424 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80072e8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fb fd0e 	bl	8002d14 <HAL_GetTick>
 80072f8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072fa:	e005      	b.n	8007308 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072fc:	f7fb fd0a 	bl	8002d14 <HAL_GetTick>
 8007300:	1b80      	subs	r0, r0, r6
 8007302:	2802      	cmp	r0, #2
 8007304:	f200 80fc 	bhi.w	8007500 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007308:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800730c:	079f      	lsls	r7, r3, #30
 800730e:	d5f5      	bpl.n	80072fc <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	0759      	lsls	r1, r3, #29
 8007314:	d541      	bpl.n	800739a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007316:	4b6b      	ldr	r3, [pc, #428]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 8007318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800731a:	00d2      	lsls	r2, r2, #3
 800731c:	f100 80f4 	bmi.w	8007508 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007322:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007326:	659a      	str	r2, [r3, #88]	; 0x58
 8007328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007332:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007334:	4e64      	ldr	r6, [pc, #400]	; (80074c8 <HAL_RCC_OscConfig+0x2b4>)
 8007336:	6833      	ldr	r3, [r6, #0]
 8007338:	05df      	lsls	r7, r3, #23
 800733a:	f140 8113 	bpl.w	8007564 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	2b01      	cmp	r3, #1
 8007342:	f000 80e3 	beq.w	800750c <HAL_RCC_OscConfig+0x2f8>
 8007346:	2b05      	cmp	r3, #5
 8007348:	f000 8169 	beq.w	800761e <HAL_RCC_OscConfig+0x40a>
 800734c:	4e5d      	ldr	r6, [pc, #372]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 800734e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800735a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800735e:	f022 0204 	bic.w	r2, r2, #4
 8007362:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 80d7 	bne.w	800751a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800736c:	f7fb fcd2 	bl	8002d14 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007370:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007374:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007376:	e005      	b.n	8007384 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007378:	f7fb fccc 	bl	8002d14 <HAL_GetTick>
 800737c:	1bc0      	subs	r0, r0, r7
 800737e:	4540      	cmp	r0, r8
 8007380:	f200 80be 	bhi.w	8007500 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007384:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8007388:	079a      	lsls	r2, r3, #30
 800738a:	d4f5      	bmi.n	8007378 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800738c:	b125      	cbz	r5, 8007398 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800738e:	4a4d      	ldr	r2, [pc, #308]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 8007390:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007396:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	069b      	lsls	r3, r3, #26
 800739c:	d518      	bpl.n	80073d0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800739e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073a0:	4d48      	ldr	r5, [pc, #288]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 80ca 	beq.w	800753c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80073a8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80073ac:	f043 0301 	orr.w	r3, r3, #1
 80073b0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b4:	f7fb fcae 	bl	8002d14 <HAL_GetTick>
 80073b8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073ba:	e005      	b.n	80073c8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073bc:	f7fb fcaa 	bl	8002d14 <HAL_GetTick>
 80073c0:	1b80      	subs	r0, r0, r6
 80073c2:	2802      	cmp	r0, #2
 80073c4:	f200 809c 	bhi.w	8007500 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80073cc:	079f      	lsls	r7, r3, #30
 80073ce:	d5f5      	bpl.n	80073bc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073d0:	69e0      	ldr	r0, [r4, #28]
 80073d2:	b318      	cbz	r0, 800741c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073d4:	4d3b      	ldr	r5, [pc, #236]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 80073d6:	68ab      	ldr	r3, [r5, #8]
 80073d8:	f003 030c 	and.w	r3, r3, #12
 80073dc:	2b0c      	cmp	r3, #12
 80073de:	f000 812c 	beq.w	800763a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073e4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80073e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ea:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073ec:	f000 80da 	beq.w	80075a4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80073f0:	68eb      	ldr	r3, [r5, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80073f8:	68eb      	ldr	r3, [r5, #12]
 80073fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80073fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007402:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007404:	f7fb fc86 	bl	8002d14 <HAL_GetTick>
 8007408:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800740a:	e004      	b.n	8007416 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800740c:	f7fb fc82 	bl	8002d14 <HAL_GetTick>
 8007410:	1b00      	subs	r0, r0, r4
 8007412:	2802      	cmp	r0, #2
 8007414:	d874      	bhi.n	8007500 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007416:	682b      	ldr	r3, [r5, #0]
 8007418:	019b      	lsls	r3, r3, #6
 800741a:	d4f7      	bmi.n	800740c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800741c:	2000      	movs	r0, #0
}
 800741e:	b002      	add	sp, #8
 8007420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007424:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007430:	f7fb fc70 	bl	8002d14 <HAL_GetTick>
 8007434:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007436:	e004      	b.n	8007442 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007438:	f7fb fc6c 	bl	8002d14 <HAL_GetTick>
 800743c:	1b80      	subs	r0, r0, r6
 800743e:	2802      	cmp	r0, #2
 8007440:	d85e      	bhi.n	8007500 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007442:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007446:	0798      	lsls	r0, r3, #30
 8007448:	d4f6      	bmi.n	8007438 <HAL_RCC_OscConfig+0x224>
 800744a:	e761      	b.n	8007310 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800744c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007450:	2903      	cmp	r1, #3
 8007452:	f47f aef4 	bne.w	800723e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007456:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	0392      	lsls	r2, r2, #14
 800745c:	f57f af12 	bpl.w	8007284 <HAL_RCC_OscConfig+0x70>
 8007460:	6862      	ldr	r2, [r4, #4]
 8007462:	2a00      	cmp	r2, #0
 8007464:	f47f af0e 	bne.w	8007284 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8007468:	2001      	movs	r0, #1
}
 800746a:	b002      	add	sp, #8
 800746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007470:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007474:	2a02      	cmp	r2, #2
 8007476:	f47f af12 	bne.w	800729e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	055d      	lsls	r5, r3, #21
 8007480:	d502      	bpl.n	8007488 <HAL_RCC_OscConfig+0x274>
 8007482:	68e3      	ldr	r3, [r4, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ef      	beq.n	8007468 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007488:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 800748a:	6920      	ldr	r0, [r4, #16]
 800748c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800748e:	490f      	ldr	r1, [pc, #60]	; (80074cc <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007490:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007494:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007498:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800749a:	6808      	ldr	r0, [r1, #0]
 800749c:	f7fe f92e 	bl	80056fc <HAL_InitTick>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d1e1      	bne.n	8007468 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	071a      	lsls	r2, r3, #28
 80074a8:	f57f af33 	bpl.w	8007312 <HAL_RCC_OscConfig+0xfe>
 80074ac:	e717      	b.n	80072de <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ae:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
 80074b0:	6813      	ldr	r3, [r2, #0]
 80074b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80074b8:	f7fb fc2c 	bl	8002d14 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074bc:	4e01      	ldr	r6, [pc, #4]	; (80074c4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80074be:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074c0:	e00b      	b.n	80074da <HAL_RCC_OscConfig+0x2c6>
 80074c2:	bf00      	nop
 80074c4:	40021000 	.word	0x40021000
 80074c8:	40007000 	.word	0x40007000
 80074cc:	2000000c 	.word	0x2000000c
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d0:	f7fb fc20 	bl	8002d14 <HAL_GetTick>
 80074d4:	1b40      	subs	r0, r0, r5
 80074d6:	2864      	cmp	r0, #100	; 0x64
 80074d8:	d812      	bhi.n	8007500 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074da:	6833      	ldr	r3, [r6, #0]
 80074dc:	039b      	lsls	r3, r3, #14
 80074de:	d5f7      	bpl.n	80074d0 <HAL_RCC_OscConfig+0x2bc>
 80074e0:	e6cf      	b.n	8007282 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80074e2:	682b      	ldr	r3, [r5, #0]
 80074e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80074ea:	f7fb fc13 	bl	8002d14 <HAL_GetTick>
 80074ee:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	0559      	lsls	r1, r3, #21
 80074f4:	d5d6      	bpl.n	80074a4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074f6:	f7fb fc0d 	bl	8002d14 <HAL_GetTick>
 80074fa:	1b80      	subs	r0, r0, r6
 80074fc:	2802      	cmp	r0, #2
 80074fe:	d9f7      	bls.n	80074f0 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8007500:	2003      	movs	r0, #3
}
 8007502:	b002      	add	sp, #8
 8007504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007508:	2500      	movs	r5, #0
 800750a:	e713      	b.n	8007334 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800750c:	4a65      	ldr	r2, [pc, #404]	; (80076a4 <HAL_RCC_OscConfig+0x490>)
 800750e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800751a:	f7fb fbfb 	bl	8002d14 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800751e:	4f61      	ldr	r7, [pc, #388]	; (80076a4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8007520:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007522:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007526:	e004      	b.n	8007532 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007528:	f7fb fbf4 	bl	8002d14 <HAL_GetTick>
 800752c:	1b80      	subs	r0, r0, r6
 800752e:	4540      	cmp	r0, r8
 8007530:	d8e6      	bhi.n	8007500 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007532:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007536:	0799      	lsls	r1, r3, #30
 8007538:	d5f6      	bpl.n	8007528 <HAL_RCC_OscConfig+0x314>
 800753a:	e727      	b.n	800738c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800753c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8007548:	f7fb fbe4 	bl	8002d14 <HAL_GetTick>
 800754c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800754e:	e004      	b.n	800755a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007550:	f7fb fbe0 	bl	8002d14 <HAL_GetTick>
 8007554:	1b80      	subs	r0, r0, r6
 8007556:	2802      	cmp	r0, #2
 8007558:	d8d2      	bhi.n	8007500 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800755a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800755e:	0798      	lsls	r0, r3, #30
 8007560:	d4f6      	bmi.n	8007550 <HAL_RCC_OscConfig+0x33c>
 8007562:	e735      	b.n	80073d0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007564:	6833      	ldr	r3, [r6, #0]
 8007566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800756a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800756c:	f7fb fbd2 	bl	8002d14 <HAL_GetTick>
 8007570:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007572:	6833      	ldr	r3, [r6, #0]
 8007574:	05d8      	lsls	r0, r3, #23
 8007576:	f53f aee2 	bmi.w	800733e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800757a:	f7fb fbcb 	bl	8002d14 <HAL_GetTick>
 800757e:	1bc0      	subs	r0, r0, r7
 8007580:	2802      	cmp	r0, #2
 8007582:	d9f6      	bls.n	8007572 <HAL_RCC_OscConfig+0x35e>
 8007584:	e7bc      	b.n	8007500 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007586:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800758a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800759c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800759e:	e78b      	b.n	80074b8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80075a0:	2001      	movs	r0, #1
}
 80075a2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80075a4:	f7fb fbb6 	bl	8002d14 <HAL_GetTick>
 80075a8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075aa:	e004      	b.n	80075b6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ac:	f7fb fbb2 	bl	8002d14 <HAL_GetTick>
 80075b0:	1b80      	subs	r0, r0, r6
 80075b2:	2802      	cmp	r0, #2
 80075b4:	d8a4      	bhi.n	8007500 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075b6:	682b      	ldr	r3, [r5, #0]
 80075b8:	0199      	lsls	r1, r3, #6
 80075ba:	d4f7      	bmi.n	80075ac <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075bc:	68e9      	ldr	r1, [r5, #12]
 80075be:	4b3a      	ldr	r3, [pc, #232]	; (80076a8 <HAL_RCC_OscConfig+0x494>)
 80075c0:	6a22      	ldr	r2, [r4, #32]
 80075c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075c4:	4e37      	ldr	r6, [pc, #220]	; (80076a4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075c6:	400b      	ands	r3, r1
 80075c8:	4313      	orrs	r3, r2
 80075ca:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80075ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075d2:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80075d6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80075da:	3801      	subs	r0, #1
 80075dc:	0849      	lsrs	r1, r1, #1
 80075de:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80075e2:	3901      	subs	r1, #1
 80075e4:	0852      	lsrs	r2, r2, #1
 80075e6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80075ea:	3a01      	subs	r2, #1
 80075ec:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80075f0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80075f2:	682b      	ldr	r3, [r5, #0]
 80075f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075f8:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075fa:	68eb      	ldr	r3, [r5, #12]
 80075fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007600:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007602:	f7fb fb87 	bl	8002d14 <HAL_GetTick>
 8007606:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007608:	e005      	b.n	8007616 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760a:	f7fb fb83 	bl	8002d14 <HAL_GetTick>
 800760e:	1b00      	subs	r0, r0, r4
 8007610:	2802      	cmp	r0, #2
 8007612:	f63f af75 	bhi.w	8007500 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007616:	6833      	ldr	r3, [r6, #0]
 8007618:	019a      	lsls	r2, r3, #6
 800761a:	d5f6      	bpl.n	800760a <HAL_RCC_OscConfig+0x3f6>
 800761c:	e6fe      	b.n	800741c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800761e:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <HAL_RCC_OscConfig+0x490>)
 8007620:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007624:	f042 0204 	orr.w	r2, r2, #4
 8007628:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800762c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007630:	f042 0201 	orr.w	r2, r2, #1
 8007634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007638:	e76f      	b.n	800751a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800763a:	2801      	cmp	r0, #1
 800763c:	f43f aeef 	beq.w	800741e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8007640:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007642:	6a22      	ldr	r2, [r4, #32]
 8007644:	f003 0103 	and.w	r1, r3, #3
 8007648:	4291      	cmp	r1, r2
 800764a:	f47f af0d 	bne.w	8007468 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800764e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007650:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007654:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007656:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800765a:	f47f af05 	bne.w	8007468 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800765e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007660:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007664:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007668:	f47f aefe 	bne.w	8007468 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800766c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800766e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007672:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007676:	f47f aef7 	bne.w	8007468 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800767a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800767c:	0852      	lsrs	r2, r2, #1
 800767e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007682:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007684:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007688:	f47f aeee 	bne.w	8007468 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800768c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800768e:	0852      	lsrs	r2, r2, #1
 8007690:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007694:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007696:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800769a:	bf14      	ite	ne
 800769c:	2001      	movne	r0, #1
 800769e:	2000      	moveq	r0, #0
 80076a0:	e6bd      	b.n	800741e <HAL_RCC_OscConfig+0x20a>
 80076a2:	bf00      	nop
 80076a4:	40021000 	.word	0x40021000
 80076a8:	019f800c 	.word	0x019f800c

080076ac <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80076ac:	4b18      	ldr	r3, [pc, #96]	; (8007710 <HAL_RCC_GetSysClockFreq+0x64>)
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	f002 020c 	and.w	r2, r2, #12
 80076b4:	2a04      	cmp	r2, #4
 80076b6:	d026      	beq.n	8007706 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	f002 020c 	and.w	r2, r2, #12
 80076be:	2a08      	cmp	r2, #8
 80076c0:	d023      	beq.n	800770a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	f002 020c 	and.w	r2, r2, #12
 80076c8:	2a0c      	cmp	r2, #12
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80076cc:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80076ce:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076d0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076d2:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076d4:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076d6:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80076da:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076e0:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076e4:	bf0c      	ite	eq
 80076e6:	4b0b      	ldreq	r3, [pc, #44]	; (8007714 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076e8:	4b0b      	ldrne	r3, [pc, #44]	; (8007718 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076ea:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80076f0:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076f4:	4b06      	ldr	r3, [pc, #24]	; (8007710 <HAL_RCC_GetSysClockFreq+0x64>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80076fc:	3301      	adds	r3, #1
 80076fe:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007700:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007704:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007706:	4804      	ldr	r0, [pc, #16]	; (8007718 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007708:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800770a:	4802      	ldr	r0, [pc, #8]	; (8007714 <HAL_RCC_GetSysClockFreq+0x68>)
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40021000 	.word	0x40021000
 8007714:	007a1200 	.word	0x007a1200
 8007718:	00f42400 	.word	0x00f42400

0800771c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800771c:	2800      	cmp	r0, #0
 800771e:	f000 80ee 	beq.w	80078fe <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007722:	4a78      	ldr	r2, [pc, #480]	; (8007904 <HAL_RCC_ClockConfig+0x1e8>)
{
 8007724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007728:	6813      	ldr	r3, [r2, #0]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	428b      	cmp	r3, r1
 8007730:	460d      	mov	r5, r1
 8007732:	4604      	mov	r4, r0
 8007734:	d20c      	bcs.n	8007750 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	f023 030f 	bic.w	r3, r3, #15
 800773c:	430b      	orrs	r3, r1
 800773e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007740:	6813      	ldr	r3, [r2, #0]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	428b      	cmp	r3, r1
 8007748:	d002      	beq.n	8007750 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800774a:	2001      	movs	r0, #1
}
 800774c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	07df      	lsls	r7, r3, #31
 8007754:	d569      	bpl.n	800782a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007756:	6867      	ldr	r7, [r4, #4]
 8007758:	2f03      	cmp	r7, #3
 800775a:	f000 80a0 	beq.w	800789e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800775e:	4b6a      	ldr	r3, [pc, #424]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007760:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007762:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007764:	f000 8097 	beq.w	8007896 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007768:	055b      	lsls	r3, r3, #21
 800776a:	d5ee      	bpl.n	800774a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800776c:	f7ff ff9e 	bl	80076ac <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007770:	4b66      	ldr	r3, [pc, #408]	; (800790c <HAL_RCC_ClockConfig+0x1f0>)
 8007772:	4298      	cmp	r0, r3
 8007774:	f240 80c0 	bls.w	80078f8 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007778:	4a63      	ldr	r2, [pc, #396]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 800777a:	6893      	ldr	r3, [r2, #8]
 800777c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007784:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007786:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800778a:	4e5f      	ldr	r6, [pc, #380]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 800778c:	68b3      	ldr	r3, [r6, #8]
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	433b      	orrs	r3, r7
 8007794:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007796:	f7fb fabd 	bl	8002d14 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800779a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800779e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a0:	e004      	b.n	80077ac <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077a2:	f7fb fab7 	bl	8002d14 <HAL_GetTick>
 80077a6:	1bc0      	subs	r0, r0, r7
 80077a8:	4540      	cmp	r0, r8
 80077aa:	d871      	bhi.n	8007890 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ac:	68b3      	ldr	r3, [r6, #8]
 80077ae:	6862      	ldr	r2, [r4, #4]
 80077b0:	f003 030c 	and.w	r3, r3, #12
 80077b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80077b8:	d1f3      	bne.n	80077a2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	079f      	lsls	r7, r3, #30
 80077be:	d436      	bmi.n	800782e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80077c0:	f1b9 0f00 	cmp.w	r9, #0
 80077c4:	d003      	beq.n	80077ce <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80077c6:	68b3      	ldr	r3, [r6, #8]
 80077c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077cc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077ce:	4e4d      	ldr	r6, [pc, #308]	; (8007904 <HAL_RCC_ClockConfig+0x1e8>)
 80077d0:	6833      	ldr	r3, [r6, #0]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	42ab      	cmp	r3, r5
 80077d8:	d846      	bhi.n	8007868 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	075a      	lsls	r2, r3, #29
 80077de:	d506      	bpl.n	80077ee <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077e0:	4949      	ldr	r1, [pc, #292]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 80077e2:	68e0      	ldr	r0, [r4, #12]
 80077e4:	688a      	ldr	r2, [r1, #8]
 80077e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077ea:	4302      	orrs	r2, r0
 80077ec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ee:	071b      	lsls	r3, r3, #28
 80077f0:	d507      	bpl.n	8007802 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077f2:	4a45      	ldr	r2, [pc, #276]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 80077f4:	6921      	ldr	r1, [r4, #16]
 80077f6:	6893      	ldr	r3, [r2, #8]
 80077f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80077fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007800:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007802:	f7ff ff53 	bl	80076ac <HAL_RCC_GetSysClockFreq>
 8007806:	4a40      	ldr	r2, [pc, #256]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 8007808:	4c41      	ldr	r4, [pc, #260]	; (8007910 <HAL_RCC_ClockConfig+0x1f4>)
 800780a:	6892      	ldr	r2, [r2, #8]
 800780c:	4941      	ldr	r1, [pc, #260]	; (8007914 <HAL_RCC_ClockConfig+0x1f8>)
 800780e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007812:	4603      	mov	r3, r0
 8007814:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007816:	4840      	ldr	r0, [pc, #256]	; (8007918 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007818:	f002 021f 	and.w	r2, r2, #31
 800781c:	40d3      	lsrs	r3, r2
 800781e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007820:	6800      	ldr	r0, [r0, #0]
}
 8007822:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007826:	f7fd bf69 	b.w	80056fc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800782a:	079e      	lsls	r6, r3, #30
 800782c:	d5cf      	bpl.n	80077ce <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782e:	0758      	lsls	r0, r3, #29
 8007830:	d504      	bpl.n	800783c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007832:	4935      	ldr	r1, [pc, #212]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 8007834:	688a      	ldr	r2, [r1, #8]
 8007836:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800783a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800783c:	0719      	lsls	r1, r3, #28
 800783e:	d506      	bpl.n	800784e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007840:	4a31      	ldr	r2, [pc, #196]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 8007842:	6893      	ldr	r3, [r2, #8]
 8007844:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007848:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800784c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800784e:	4a2e      	ldr	r2, [pc, #184]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 8007850:	68a1      	ldr	r1, [r4, #8]
 8007852:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007854:	4e2b      	ldr	r6, [pc, #172]	; (8007904 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800785a:	430b      	orrs	r3, r1
 800785c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800785e:	6833      	ldr	r3, [r6, #0]
 8007860:	f003 030f 	and.w	r3, r3, #15
 8007864:	42ab      	cmp	r3, r5
 8007866:	d9b8      	bls.n	80077da <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007868:	6833      	ldr	r3, [r6, #0]
 800786a:	f023 030f 	bic.w	r3, r3, #15
 800786e:	432b      	orrs	r3, r5
 8007870:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007872:	f7fb fa4f 	bl	8002d14 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007876:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800787a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800787c:	6833      	ldr	r3, [r6, #0]
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	42ab      	cmp	r3, r5
 8007884:	d0a9      	beq.n	80077da <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007886:	f7fb fa45 	bl	8002d14 <HAL_GetTick>
 800788a:	1bc0      	subs	r0, r0, r7
 800788c:	4540      	cmp	r0, r8
 800788e:	d9f5      	bls.n	800787c <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007890:	2003      	movs	r0, #3
}
 8007892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007896:	039a      	lsls	r2, r3, #14
 8007898:	f53f af68 	bmi.w	800776c <HAL_RCC_ClockConfig+0x50>
 800789c:	e755      	b.n	800774a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800789e:	4a1a      	ldr	r2, [pc, #104]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
 80078a0:	6811      	ldr	r1, [r2, #0]
 80078a2:	0188      	lsls	r0, r1, #6
 80078a4:	f57f af51 	bpl.w	800774a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078a8:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078aa:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078ac:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80078ae:	4e17      	ldr	r6, [pc, #92]	; (800790c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078b0:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80078b4:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078b6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078ba:	bf0c      	ite	eq
 80078bc:	4817      	ldreq	r0, [pc, #92]	; (800791c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078be:	4818      	ldrne	r0, [pc, #96]	; (8007920 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078c0:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c2:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078c6:	4810      	ldr	r0, [pc, #64]	; (8007908 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078c8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80078cc:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078d0:	68c1      	ldr	r1, [r0, #12]
 80078d2:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80078d6:	3101      	adds	r1, #1
 80078d8:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80078da:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80078de:	42b2      	cmp	r2, r6
 80078e0:	d90a      	bls.n	80078f8 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80078e2:	6882      	ldr	r2, [r0, #8]
 80078e4:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80078e8:	f43f af46 	beq.w	8007778 <HAL_RCC_ClockConfig+0x5c>
 80078ec:	0799      	lsls	r1, r3, #30
 80078ee:	d503      	bpl.n	80078f8 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078f0:	68a3      	ldr	r3, [r4, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f43f af40 	beq.w	8007778 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80078f8:	f04f 0900 	mov.w	r9, #0
 80078fc:	e745      	b.n	800778a <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80078fe:	2001      	movs	r0, #1
}
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	40022000 	.word	0x40022000
 8007908:	40021000 	.word	0x40021000
 800790c:	04c4b400 	.word	0x04c4b400
 8007910:	0800e528 	.word	0x0800e528
 8007914:	20000004 	.word	0x20000004
 8007918:	2000000c 	.word	0x2000000c
 800791c:	007a1200 	.word	0x007a1200
 8007920:	00f42400 	.word	0x00f42400

08007924 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007926:	4a06      	ldr	r2, [pc, #24]	; (8007940 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007928:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800792a:	4906      	ldr	r1, [pc, #24]	; (8007944 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800792c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	5cd3      	ldrb	r3, [r2, r3]
 8007934:	f003 031f 	and.w	r3, r3, #31
}
 8007938:	40d8      	lsrs	r0, r3
 800793a:	4770      	bx	lr
 800793c:	40021000 	.word	0x40021000
 8007940:	0800e538 	.word	0x0800e538
 8007944:	20000004 	.word	0x20000004

08007948 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <HAL_RCC_GetPCLK2Freq+0x18>)
 800794a:	4a06      	ldr	r2, [pc, #24]	; (8007964 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800794c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800794e:	4906      	ldr	r1, [pc, #24]	; (8007968 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007950:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007954:	6808      	ldr	r0, [r1, #0]
 8007956:	5cd3      	ldrb	r3, [r2, r3]
 8007958:	f003 031f 	and.w	r3, r3, #31
}
 800795c:	40d8      	lsrs	r0, r3
 800795e:	4770      	bx	lr
 8007960:	40021000 	.word	0x40021000
 8007964:	0800e538 	.word	0x0800e538
 8007968:	20000004 	.word	0x20000004

0800796c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007970:	6803      	ldr	r3, [r0, #0]
{
 8007972:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007974:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007978:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800797a:	d056      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800797c:	4bac      	ldr	r3, [pc, #688]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800797e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007980:	00d5      	lsls	r5, r2, #3
 8007982:	f140 813e 	bpl.w	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8007986:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007988:	4daa      	ldr	r5, [pc, #680]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800798a:	682b      	ldr	r3, [r5, #0]
 800798c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007990:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007992:	f7fb f9bf 	bl	8002d14 <HAL_GetTick>
 8007996:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007998:	e005      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800799a:	f7fb f9bb 	bl	8002d14 <HAL_GetTick>
 800799e:	1b83      	subs	r3, r0, r6
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	f200 8139 	bhi.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079a6:	682b      	ldr	r3, [r5, #0]
 80079a8:	05d8      	lsls	r0, r3, #23
 80079aa:	d5f6      	bpl.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079ac:	4da0      	ldr	r5, [pc, #640]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80079ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079b2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80079b6:	d027      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80079b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d025      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079be:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079c2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80079c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ca:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079ce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80079d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079da:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079de:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80079e0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079e4:	f140 8148 	bpl.w	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fb f994 	bl	8002d14 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ec:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80079f0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079f2:	e005      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f4:	f7fb f98e 	bl	8002d14 <HAL_GetTick>
 80079f8:	1b80      	subs	r0, r0, r6
 80079fa:	4540      	cmp	r0, r8
 80079fc:	f200 810c 	bhi.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a00:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007a04:	079b      	lsls	r3, r3, #30
 8007a06:	d5f5      	bpl.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a08:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a0a:	4989      	ldr	r1, [pc, #548]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007a10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a1a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a1c:	b127      	cbz	r7, 8007a28 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a1e:	4a84      	ldr	r2, [pc, #528]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a20:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	07dd      	lsls	r5, r3, #31
 8007a2c:	d508      	bpl.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a2e:	4980      	ldr	r1, [pc, #512]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a30:	6865      	ldr	r5, [r4, #4]
 8007a32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a36:	f022 0203 	bic.w	r2, r2, #3
 8007a3a:	432a      	orrs	r2, r5
 8007a3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a40:	0799      	lsls	r1, r3, #30
 8007a42:	d508      	bpl.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a44:	497a      	ldr	r1, [pc, #488]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a46:	68a5      	ldr	r5, [r4, #8]
 8007a48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a4c:	f022 020c 	bic.w	r2, r2, #12
 8007a50:	432a      	orrs	r2, r5
 8007a52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a56:	075a      	lsls	r2, r3, #29
 8007a58:	d508      	bpl.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a5a:	4975      	ldr	r1, [pc, #468]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a5c:	68e5      	ldr	r5, [r4, #12]
 8007a5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a62:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007a66:	432a      	orrs	r2, r5
 8007a68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a6c:	071f      	lsls	r7, r3, #28
 8007a6e:	d508      	bpl.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a70:	496f      	ldr	r1, [pc, #444]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a72:	6925      	ldr	r5, [r4, #16]
 8007a74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a78:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a7c:	432a      	orrs	r2, r5
 8007a7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a82:	06de      	lsls	r6, r3, #27
 8007a84:	d508      	bpl.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a86:	496a      	ldr	r1, [pc, #424]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a88:	6965      	ldr	r5, [r4, #20]
 8007a8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a92:	432a      	orrs	r2, r5
 8007a94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a98:	069d      	lsls	r5, r3, #26
 8007a9a:	d508      	bpl.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a9c:	4964      	ldr	r1, [pc, #400]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a9e:	69a5      	ldr	r5, [r4, #24]
 8007aa0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007aa4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007aa8:	432a      	orrs	r2, r5
 8007aaa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007aae:	0659      	lsls	r1, r3, #25
 8007ab0:	d508      	bpl.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ab2:	495f      	ldr	r1, [pc, #380]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ab4:	69e5      	ldr	r5, [r4, #28]
 8007ab6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007aba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007abe:	432a      	orrs	r2, r5
 8007ac0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ac4:	061a      	lsls	r2, r3, #24
 8007ac6:	d508      	bpl.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ac8:	4959      	ldr	r1, [pc, #356]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007aca:	6a25      	ldr	r5, [r4, #32]
 8007acc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ad0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007ad4:	432a      	orrs	r2, r5
 8007ad6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ada:	05df      	lsls	r7, r3, #23
 8007adc:	d508      	bpl.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ade:	4954      	ldr	r1, [pc, #336]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ae0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ae2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ae6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007aea:	432a      	orrs	r2, r5
 8007aec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007af0:	039e      	lsls	r6, r3, #14
 8007af2:	d508      	bpl.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007af4:	494e      	ldr	r1, [pc, #312]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007af6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007af8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8007afc:	f022 0203 	bic.w	r2, r2, #3
 8007b00:	432a      	orrs	r2, r5
 8007b02:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b06:	059d      	lsls	r5, r3, #22
 8007b08:	d508      	bpl.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b0a:	4949      	ldr	r1, [pc, #292]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b0c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007b0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b12:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007b16:	432a      	orrs	r2, r5
 8007b18:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b1c:	0559      	lsls	r1, r3, #21
 8007b1e:	d50b      	bpl.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b20:	4943      	ldr	r1, [pc, #268]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007b24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b28:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007b2c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b2e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b36:	d071      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b38:	051a      	lsls	r2, r3, #20
 8007b3a:	d50b      	bpl.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b3c:	493c      	ldr	r1, [pc, #240]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b3e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007b40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b44:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007b48:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b4a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b52:	d068      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b54:	04df      	lsls	r7, r3, #19
 8007b56:	d50b      	bpl.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b58:	4935      	ldr	r1, [pc, #212]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b5a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007b5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b64:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b66:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b6a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b6e:	d063      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b70:	049e      	lsls	r6, r3, #18
 8007b72:	d50b      	bpl.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b74:	492e      	ldr	r1, [pc, #184]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b76:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007b78:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b7c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007b80:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b82:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b8a:	d05a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b8c:	045d      	lsls	r5, r3, #17
 8007b8e:	d50b      	bpl.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b90:	4927      	ldr	r1, [pc, #156]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b92:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007b94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b98:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007b9c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b9e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ba2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ba6:	d051      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ba8:	0419      	lsls	r1, r3, #16
 8007baa:	d50b      	bpl.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bac:	4920      	ldr	r1, [pc, #128]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bae:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007bb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bb8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bba:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bbe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bc2:	d048      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007bc4:	03da      	lsls	r2, r3, #15
 8007bc6:	d50b      	bpl.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007bc8:	4919      	ldr	r1, [pc, #100]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bca:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8007bcc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007bd0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007bd4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007bd6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007bda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007bde:	d03f      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007be0:	035b      	lsls	r3, r3, #13
 8007be2:	d50b      	bpl.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007be4:	4a12      	ldr	r2, [pc, #72]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007be6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007be8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007bec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007bf0:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bf2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007bf6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bfa:	d036      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8007bfc:	b002      	add	sp, #8
 8007bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c08:	659a      	str	r2, [r3, #88]	; 0x58
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c14:	2701      	movs	r7, #1
 8007c16:	e6b7      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8007c18:	2003      	movs	r0, #3
 8007c1a:	e6ff      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c1c:	68ca      	ldr	r2, [r1, #12]
 8007c1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c22:	60ca      	str	r2, [r1, #12]
 8007c24:	e788      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c26:	68ca      	ldr	r2, [r1, #12]
 8007c28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c2c:	60ca      	str	r2, [r1, #12]
 8007c2e:	e791      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007c30:	40021000 	.word	0x40021000
 8007c34:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c38:	68ca      	ldr	r2, [r1, #12]
 8007c3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c3e:	60ca      	str	r2, [r1, #12]
 8007c40:	e796      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c42:	68ca      	ldr	r2, [r1, #12]
 8007c44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c48:	60ca      	str	r2, [r1, #12]
 8007c4a:	e79f      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c4c:	68ca      	ldr	r2, [r1, #12]
 8007c4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c52:	60ca      	str	r2, [r1, #12]
 8007c54:	e7a8      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c56:	68ca      	ldr	r2, [r1, #12]
 8007c58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c5c:	60ca      	str	r2, [r1, #12]
 8007c5e:	e7b1      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c60:	68ca      	ldr	r2, [r1, #12]
 8007c62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c66:	60ca      	str	r2, [r1, #12]
 8007c68:	e7ba      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c6a:	68d3      	ldr	r3, [r2, #12]
 8007c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c70:	60d3      	str	r3, [r2, #12]
}
 8007c72:	b002      	add	sp, #8
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	4613      	mov	r3, r2
 8007c7a:	e6c6      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9e>

08007c7c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c82:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007c84:	4617      	mov	r7, r2
 8007c86:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8007c88:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007c8c:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c8e:	f7fb f841 	bl	8002d14 <HAL_GetTick>
 8007c92:	442f      	add	r7, r5
 8007c94:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8007c96:	f7fb f83d 	bl	8002d14 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c9a:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c9c:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ca4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ca8:	0d1b      	lsrs	r3, r3, #20
 8007caa:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8007cae:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007cb0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	1c69      	adds	r1, r5, #1
 8007cb6:	6893      	ldr	r3, [r2, #8]
 8007cb8:	d110      	bne.n	8007cdc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 8007cba:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007cbe:	d009      	beq.n	8007cd4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007cc0:	7b23      	ldrb	r3, [r4, #12]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ccc:	6893      	ldr	r3, [r2, #8]
 8007cce:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007cd2:	d1f5      	bne.n	8007cc0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8007cd4:	2000      	movs	r0, #0
}
 8007cd6:	b002      	add	sp, #8
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007cdc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007ce0:	d0f8      	beq.n	8007cd4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8007ce2:	7b23      	ldrb	r3, [r4, #12]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8007cea:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cee:	f7fb f811 	bl	8002d14 <HAL_GetTick>
 8007cf2:	eba0 0008 	sub.w	r0, r0, r8
 8007cf6:	42b8      	cmp	r0, r7
 8007cf8:	d209      	bcs.n	8007d0e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 8007cfa:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cfc:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8007cfe:	2b00      	cmp	r3, #0
      count--;
 8007d00:	9b01      	ldr	r3, [sp, #4]
 8007d02:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007d06:	bf08      	it	eq
 8007d08:	2700      	moveq	r7, #0
      count--;
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	e7d2      	b.n	8007cb4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d0e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d12:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d14:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d1c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d1e:	d013      	beq.n	8007d48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d20:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007d22:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007d26:	d107      	bne.n	8007d38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d36:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007d38:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007d3a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007d3c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007d40:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007d44:	2003      	movs	r0, #3
 8007d46:	e7c6      	b.n	8007cd6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d48:	68b2      	ldr	r2, [r6, #8]
 8007d4a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007d4e:	d002      	beq.n	8007d56 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007d54:	d1e4      	bne.n	8007d20 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e7df      	b.n	8007d20 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8007d60:	20000004 	.word	0x20000004

08007d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007d70:	eb01 0902 	add.w	r9, r1, r2
{
 8007d74:	460e      	mov	r6, r1
 8007d76:	4617      	mov	r7, r2
 8007d78:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d7a:	f7fa ffcb 	bl	8002d14 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d7e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8007ea0 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d82:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007d86:	f7fa ffc5 	bl	8002d14 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007d96:	0d1b      	lsrs	r3, r3, #20
 8007d98:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 8007d9c:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d9e:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8007da0:	1c70      	adds	r0, r6, #1
 8007da2:	682c      	ldr	r4, [r5, #0]
 8007da4:	d120      	bne.n	8007de8 <SPI_EndRxTxTransaction+0x84>
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8007dac:	d1fb      	bne.n	8007da6 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dae:	f7fa ffb1 	bl	8002d14 <HAL_GetTick>
 8007db2:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007db6:	f7fa ffad 	bl	8002d14 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dba:	f8d8 3000 	ldr.w	r3, [r8]
 8007dbe:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007dc2:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8007dc6:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dc8:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dca:	1c71      	adds	r1, r6, #1
 8007dcc:	682c      	ldr	r4, [r5, #0]
 8007dce:	d11f      	bne.n	8007e10 <SPI_EndRxTxTransaction+0xac>
 8007dd0:	68a3      	ldr	r3, [r4, #8]
 8007dd2:	061a      	lsls	r2, r3, #24
 8007dd4:	d4fc      	bmi.n	8007dd0 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dd6:	463a      	mov	r2, r7
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f7ff ff4e 	bl	8007c7c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007de0:	bb48      	cbnz	r0, 8007e36 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007de2:	b005      	add	sp, #20
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007de8:	68a3      	ldr	r3, [r4, #8]
 8007dea:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8007dee:	d0de      	beq.n	8007dae <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007df0:	f7fa ff90 	bl	8002d14 <HAL_GetTick>
 8007df4:	eba0 000b 	sub.w	r0, r0, fp
 8007df8:	4550      	cmp	r0, sl
 8007dfa:	d222      	bcs.n	8007e42 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007dfc:	9a02      	ldr	r2, [sp, #8]
      count--;
 8007dfe:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8007e00:	2a00      	cmp	r2, #0
      count--;
 8007e02:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007e06:	bf08      	it	eq
 8007e08:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8007e0c:	9302      	str	r3, [sp, #8]
 8007e0e:	e7c7      	b.n	8007da0 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e10:	68a3      	ldr	r3, [r4, #8]
 8007e12:	061b      	lsls	r3, r3, #24
 8007e14:	d5df      	bpl.n	8007dd6 <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e16:	f7fa ff7d 	bl	8002d14 <HAL_GetTick>
 8007e1a:	eba0 0008 	sub.w	r0, r0, r8
 8007e1e:	4548      	cmp	r0, r9
 8007e20:	d20f      	bcs.n	8007e42 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007e22:	9a03      	ldr	r2, [sp, #12]
      count--;
 8007e24:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8007e26:	2a00      	cmp	r2, #0
      count--;
 8007e28:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007e2c:	bf08      	it	eq
 8007e2e:	f04f 0900 	moveq.w	r9, #0
      count--;
 8007e32:	9303      	str	r3, [sp, #12]
 8007e34:	e7c9      	b.n	8007dca <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e36:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007e38:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007e3c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e3e:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e40:	e7cf      	b.n	8007de2 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e42:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e46:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e48:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e50:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e52:	d019      	beq.n	8007e88 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e54:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007e56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007e5a:	d107      	bne.n	8007e6c <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e6a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e72:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8007e74:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e76:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007e7a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8007e7c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e80:	662b      	str	r3, [r5, #96]	; 0x60
}
 8007e82:	b005      	add	sp, #20
 8007e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e88:	68aa      	ldr	r2, [r5, #8]
 8007e8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007e8e:	d002      	beq.n	8007e96 <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007e94:	d1de      	bne.n	8007e54 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e7d9      	b.n	8007e54 <SPI_EndRxTxTransaction+0xf0>
 8007ea0:	20000004 	.word	0x20000004

08007ea4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d077      	beq.n	8007f98 <HAL_SPI_Init+0xf4>
{
 8007ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007eac:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eae:	4604      	mov	r4, r0
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	d058      	beq.n	8007f66 <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007eb4:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007eba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ec2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d059      	beq.n	8007f7e <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8007eca:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ecc:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007ed4:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ed6:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ede:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ee0:	d947      	bls.n	8007f72 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ee2:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8007ee6:	d159      	bne.n	8007f9c <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ee8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007eea:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007eec:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007ef0:	6862      	ldr	r2, [r4, #4]
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007ef8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007efc:	431a      	orrs	r2, r3
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	4313      	orrs	r3, r2
 8007f06:	6962      	ldr	r2, [r4, #20]
 8007f08:	f002 0201 	and.w	r2, r2, #1
 8007f0c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f10:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f1c:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f1e:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f22:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007f26:	69a6      	ldr	r6, [r4, #24]
 8007f28:	6a23      	ldr	r3, [r4, #32]
 8007f2a:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8007f2e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007f32:	4313      	orrs	r3, r2
 8007f34:	ea43 0308 	orr.w	r3, r3, r8
 8007f38:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f3a:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f3c:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f3e:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f42:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f44:	ea4e 0306 	orr.w	r3, lr, r6
 8007f48:	ea43 030c 	orr.w	r3, r3, ip
 8007f4c:	4303      	orrs	r3, r0
 8007f4e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f50:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f52:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007f58:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f5a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f5c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f5e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8007f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f66:	6843      	ldr	r3, [r0, #4]
 8007f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6c:	d0a5      	beq.n	8007eba <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f6e:	61c6      	str	r6, [r0, #28]
 8007f70:	e7a3      	b.n	8007eba <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f72:	d00b      	beq.n	8007f8c <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f78:	2500      	movs	r5, #0
 8007f7a:	62a5      	str	r5, [r4, #40]	; 0x28
 8007f7c:	e7b8      	b.n	8007ef0 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8007f7e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7fc fe50 	bl	8004c28 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f8a:	e79e      	b.n	8007eca <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f8c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f92:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007f96:	e7ab      	b.n	8007ef0 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8007f98:	2001      	movs	r0, #1
}
 8007f9a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e7eb      	b.n	8007f78 <HAL_SPI_Init+0xd4>

08007fa0 <HAL_SPI_TransmitReceive>:
{
 8007fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007fa6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8007faa:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8007fac:	2801      	cmp	r0, #1
 8007fae:	f000 8097 	beq.w	80080e0 <HAL_SPI_TransmitReceive+0x140>
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8007fba:	4689      	mov	r9, r1
 8007fbc:	4690      	mov	r8, r2
 8007fbe:	f7fa fea9 	bl	8002d14 <HAL_GetTick>
 8007fc2:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8007fc4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007fc8:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fca:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8007fcc:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fce:	d010      	beq.n	8007ff2 <HAL_SPI_TransmitReceive+0x52>
 8007fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fd4:	d008      	beq.n	8007fe8 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8007fd6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007fd8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8007fda:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8007fdc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007fe0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fe8:	68a2      	ldr	r2, [r4, #8]
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	d1f3      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x36>
 8007fee:	2904      	cmp	r1, #4
 8007ff0:	d1f1      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ff2:	f1b9 0f00 	cmp.w	r9, #0
 8007ff6:	d076      	beq.n	80080e6 <HAL_SPI_TransmitReceive+0x146>
 8007ff8:	f1b8 0f00 	cmp.w	r8, #0
 8007ffc:	d073      	beq.n	80080e6 <HAL_SPI_TransmitReceive+0x146>
 8007ffe:	2f00      	cmp	r7, #0
 8008000:	d071      	beq.n	80080e6 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008002:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008006:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008008:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800800c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800800e:	bf1c      	itt	ne
 8008010:	2205      	movne	r2, #5
 8008012:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008016:	2200      	movs	r2, #0
 8008018:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800801a:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800801e:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8008020:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008024:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 8008028:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800802a:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 800802c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008030:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008034:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008036:	d858      	bhi.n	80080ea <HAL_SPI_TransmitReceive+0x14a>
 8008038:	2f01      	cmp	r7, #1
 800803a:	f000 8124 	beq.w	8008286 <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800803e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008042:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008044:	6811      	ldr	r1, [r2, #0]
 8008046:	0649      	lsls	r1, r1, #25
 8008048:	f100 80e3 	bmi.w	8008212 <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 800804c:	6811      	ldr	r1, [r2, #0]
 800804e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008052:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80df 	beq.w	8008218 <HAL_SPI_TransmitReceive+0x278>
 800805a:	2f01      	cmp	r7, #1
 800805c:	f000 80dc 	beq.w	8008218 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 8008060:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008062:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008064:	b29b      	uxth	r3, r3
 8008066:	b92b      	cbnz	r3, 8008074 <HAL_SPI_TransmitReceive+0xd4>
 8008068:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8086 	beq.w	8008180 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	6893      	ldr	r3, [r2, #8]
 8008078:	0799      	lsls	r1, r3, #30
 800807a:	d505      	bpl.n	8008088 <HAL_SPI_TransmitReceive+0xe8>
 800807c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800807e:	b29b      	uxth	r3, r3
 8008080:	b113      	cbz	r3, 8008088 <HAL_SPI_TransmitReceive+0xe8>
 8008082:	2f00      	cmp	r7, #0
 8008084:	f040 80e4 	bne.w	8008250 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008088:	6893      	ldr	r3, [r2, #8]
 800808a:	f013 0301 	ands.w	r3, r3, #1
 800808e:	d01e      	beq.n	80080ce <HAL_SPI_TransmitReceive+0x12e>
 8008090:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008094:	b289      	uxth	r1, r1
 8008096:	b1d1      	cbz	r1, 80080ce <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8008098:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800809c:	b289      	uxth	r1, r1
 800809e:	2901      	cmp	r1, #1
 80080a0:	f240 80c8 	bls.w	8008234 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080a4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080a6:	68d0      	ldr	r0, [r2, #12]
 80080a8:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080ac:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80080ae:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80080b2:	3902      	subs	r1, #2
 80080b4:	b289      	uxth	r1, r1
 80080b6:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80080ba:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80080be:	b289      	uxth	r1, r1
 80080c0:	2901      	cmp	r1, #1
        txallowed = 1U;
 80080c2:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 80080c4:	d803      	bhi.n	80080ce <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080c6:	6853      	ldr	r3, [r2, #4]
 80080c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080cc:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080ce:	f7fa fe21 	bl	8002d14 <HAL_GetTick>
 80080d2:	1b43      	subs	r3, r0, r5
 80080d4:	42b3      	cmp	r3, r6
 80080d6:	d3c4      	bcc.n	8008062 <HAL_SPI_TransmitReceive+0xc2>
 80080d8:	1c73      	adds	r3, r6, #1
 80080da:	d0c2      	beq.n	8008062 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 80080dc:	2003      	movs	r0, #3
 80080de:	e77b      	b.n	8007fd8 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80080e0:	2002      	movs	r0, #2
}
 80080e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80080e6:	2001      	movs	r0, #1
 80080e8:	e776      	b.n	8007fd8 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080ea:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80080ee:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080f0:	6811      	ldr	r1, [r2, #0]
 80080f2:	0648      	lsls	r0, r1, #25
 80080f4:	d403      	bmi.n	80080fe <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 80080f6:	6811      	ldr	r1, [r2, #0]
 80080f8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80080fc:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d161      	bne.n	80081c6 <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008102:	4649      	mov	r1, r9
 8008104:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008108:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800810a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800810c:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800810e:	3b01      	subs	r3, #1
 8008110:	b29b      	uxth	r3, r3
 8008112:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008114:	1c72      	adds	r2, r6, #1
{
 8008116:	f04f 0701 	mov.w	r7, #1
 800811a:	d028      	beq.n	800816e <HAL_SPI_TransmitReceive+0x1ce>
 800811c:	e04e      	b.n	80081bc <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	6893      	ldr	r3, [r2, #8]
 8008122:	079b      	lsls	r3, r3, #30
 8008124:	d50d      	bpl.n	8008142 <HAL_SPI_TransmitReceive+0x1a2>
 8008126:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008128:	b29b      	uxth	r3, r3
 800812a:	b153      	cbz	r3, 8008142 <HAL_SPI_TransmitReceive+0x1a2>
 800812c:	b14f      	cbz	r7, 8008142 <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800812e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008130:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008134:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8008136:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008138:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800813a:	3b01      	subs	r3, #1
 800813c:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800813e:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008140:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008142:	6893      	ldr	r3, [r2, #8]
 8008144:	f013 0301 	ands.w	r3, r3, #1
 8008148:	d00f      	beq.n	800816a <HAL_SPI_TransmitReceive+0x1ca>
 800814a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800814e:	b289      	uxth	r1, r1
 8008150:	b159      	cbz	r1, 800816a <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008152:	68d1      	ldr	r1, [r2, #12]
 8008154:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008156:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800815a:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800815c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008160:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008162:	3b01      	subs	r3, #1
 8008164:	b29b      	uxth	r3, r3
 8008166:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800816a:	f7fa fdd3 	bl	8002d14 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800816e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008170:	b29b      	uxth	r3, r3
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1d3      	bne.n	800811e <HAL_SPI_TransmitReceive+0x17e>
 8008176:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1ce      	bne.n	800811e <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008180:	462a      	mov	r2, r5
 8008182:	4631      	mov	r1, r6
 8008184:	4620      	mov	r0, r4
 8008186:	f7ff fded 	bl	8007d64 <SPI_EndRxTxTransaction>
 800818a:	2800      	cmp	r0, #0
 800818c:	f43f af24 	beq.w	8007fd8 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008190:	2320      	movs	r3, #32
 8008192:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008194:	2001      	movs	r0, #1
 8008196:	e71f      	b.n	8007fd8 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008198:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0ee      	beq.n	8008180 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	6893      	ldr	r3, [r2, #8]
 80081a6:	0798      	lsls	r0, r3, #30
 80081a8:	d422      	bmi.n	80081f0 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081aa:	6893      	ldr	r3, [r2, #8]
 80081ac:	f013 0301 	ands.w	r3, r3, #1
 80081b0:	d10c      	bne.n	80081cc <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081b2:	f7fa fdaf 	bl	8002d14 <HAL_GetTick>
 80081b6:	1b40      	subs	r0, r0, r5
 80081b8:	42b0      	cmp	r0, r6
 80081ba:	d28f      	bcs.n	80080dc <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1ee      	bne.n	80081a2 <HAL_SPI_TransmitReceive+0x202>
 80081c4:	e7e8      	b.n	8008198 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081c6:	2f01      	cmp	r7, #1
 80081c8:	d1a4      	bne.n	8008114 <HAL_SPI_TransmitReceive+0x174>
 80081ca:	e79a      	b.n	8008102 <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081cc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80081d0:	b289      	uxth	r1, r1
 80081d2:	2900      	cmp	r1, #0
 80081d4:	d0ed      	beq.n	80081b2 <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081d6:	68d1      	ldr	r1, [r2, #12]
 80081d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081da:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80081de:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80081e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081e4:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80081ee:	e7e0      	b.n	80081b2 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0d8      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x20a>
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	d0d6      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081fe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008202:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008204:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008206:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008208:	3b01      	subs	r3, #1
 800820a:	b29b      	uxth	r3, r3
        txallowed = 0U;
 800820c:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 800820e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008210:	e7cb      	b.n	80081aa <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008212:	2b00      	cmp	r3, #0
 8008214:	f47f af24 	bne.w	8008060 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8008218:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	d93a      	bls.n	8008296 <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008220:	4649      	mov	r1, r9
 8008222:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008226:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8008228:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800822a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800822c:	3b02      	subs	r3, #2
 800822e:	b29b      	uxth	r3, r3
 8008230:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008232:	e715      	b.n	8008060 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 8008234:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008238:	7b12      	ldrb	r2, [r2, #12]
 800823a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800823c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800823e:	3301      	adds	r3, #1
 8008240:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8008242:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008246:	3b01      	subs	r3, #1
 8008248:	b29b      	uxth	r3, r3
 800824a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800824e:	e73e      	b.n	80080ce <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8008250:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008252:	b29b      	uxth	r3, r3
 8008254:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008256:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8008258:	d909      	bls.n	800826e <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800825a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800825e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008260:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008262:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008264:	3b02      	subs	r3, #2
 8008266:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008268:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 800826a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800826c:	e70c      	b.n	8008088 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8008272:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8008274:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008276:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8008278:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800827a:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800827c:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800827e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008280:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 8008282:	2700      	movs	r7, #0
 8008284:	e700      	b.n	8008088 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008286:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800828a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800828c:	6811      	ldr	r1, [r2, #0]
 800828e:	0649      	lsls	r1, r1, #25
 8008290:	f57f aedc 	bpl.w	800804c <HAL_SPI_TransmitReceive+0xac>
 8008294:	e7c0      	b.n	8008218 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008296:	f899 3000 	ldrb.w	r3, [r9]
 800829a:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800829c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 800829e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80082a0:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80082a2:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80082a4:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80082a6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80082a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082aa:	e6d9      	b.n	8008060 <HAL_SPI_TransmitReceive+0xc0>

080082ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ac:	6a03      	ldr	r3, [r0, #32]
 80082ae:	f023 0301 	bic.w	r3, r3, #1
 80082b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082b4:	6a03      	ldr	r3, [r0, #32]
{
 80082b6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082c2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80082c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80082ca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80082ce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082d0:	4d15      	ldr	r5, [pc, #84]	; (8008328 <TIM_OC1_SetConfig+0x7c>)
 80082d2:	42a8      	cmp	r0, r5
 80082d4:	d013      	beq.n	80082fe <TIM_OC1_SetConfig+0x52>
 80082d6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80082da:	42a8      	cmp	r0, r5
 80082dc:	d00f      	beq.n	80082fe <TIM_OC1_SetConfig+0x52>
 80082de:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80082e2:	42a8      	cmp	r0, r5
 80082e4:	d00b      	beq.n	80082fe <TIM_OC1_SetConfig+0x52>
 80082e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082ea:	42a8      	cmp	r0, r5
 80082ec:	d007      	beq.n	80082fe <TIM_OC1_SetConfig+0x52>
 80082ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082f2:	42a8      	cmp	r0, r5
 80082f4:	d003      	beq.n	80082fe <TIM_OC1_SetConfig+0x52>
 80082f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80082fa:	42a8      	cmp	r0, r5
 80082fc:	d10d      	bne.n	800831a <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008300:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008304:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008306:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800830a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800830e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008312:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008316:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800831a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800831c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800831e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008320:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8008322:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8008324:	6203      	str	r3, [r0, #32]
}
 8008326:	4770      	bx	lr
 8008328:	40012c00 	.word	0x40012c00

0800832c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008332:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008334:	6a03      	ldr	r3, [r0, #32]
{
 8008336:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800833a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800833c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800833e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008342:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008346:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008348:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800834a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800834e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008352:	4d1c      	ldr	r5, [pc, #112]	; (80083c4 <TIM_OC3_SetConfig+0x98>)
 8008354:	42a8      	cmp	r0, r5
 8008356:	d017      	beq.n	8008388 <TIM_OC3_SetConfig+0x5c>
 8008358:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800835c:	42a8      	cmp	r0, r5
 800835e:	d013      	beq.n	8008388 <TIM_OC3_SetConfig+0x5c>
 8008360:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008364:	42a8      	cmp	r0, r5
 8008366:	d025      	beq.n	80083b4 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008368:	4d17      	ldr	r5, [pc, #92]	; (80083c8 <TIM_OC3_SetConfig+0x9c>)
 800836a:	42a8      	cmp	r0, r5
 800836c:	d013      	beq.n	8008396 <TIM_OC3_SetConfig+0x6a>
 800836e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008372:	42a8      	cmp	r0, r5
 8008374:	d00f      	beq.n	8008396 <TIM_OC3_SetConfig+0x6a>
 8008376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800837a:	42a8      	cmp	r0, r5
 800837c:	d00b      	beq.n	8008396 <TIM_OC3_SetConfig+0x6a>
 800837e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008382:	42a8      	cmp	r0, r5
 8008384:	d10f      	bne.n	80083a6 <TIM_OC3_SetConfig+0x7a>
 8008386:	e006      	b.n	8008396 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008388:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800838a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800838e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008396:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800839a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800839e:	ea46 0c05 	orr.w	ip, r6, r5
 80083a2:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083a6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80083a8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80083aa:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80083ac:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80083ae:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80083b0:	6203      	str	r3, [r0, #32]
}
 80083b2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083b4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80083b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80083be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c2:	e7d1      	b.n	8008368 <TIM_OC3_SetConfig+0x3c>
 80083c4:	40012c00 	.word	0x40012c00
 80083c8:	40014000 	.word	0x40014000

080083cc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083cc:	6a03      	ldr	r3, [r0, #32]
 80083ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d4:	6a03      	ldr	r3, [r0, #32]
{
 80083d6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083da:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80083e2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083ea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80083ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083f0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80083f4:	4d1c      	ldr	r5, [pc, #112]	; (8008468 <TIM_OC4_SetConfig+0x9c>)
 80083f6:	42a8      	cmp	r0, r5
 80083f8:	d017      	beq.n	800842a <TIM_OC4_SetConfig+0x5e>
 80083fa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80083fe:	42a8      	cmp	r0, r5
 8008400:	d013      	beq.n	800842a <TIM_OC4_SetConfig+0x5e>
 8008402:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008406:	42a8      	cmp	r0, r5
 8008408:	d025      	beq.n	8008456 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840a:	4d18      	ldr	r5, [pc, #96]	; (800846c <TIM_OC4_SetConfig+0xa0>)
 800840c:	42a8      	cmp	r0, r5
 800840e:	d013      	beq.n	8008438 <TIM_OC4_SetConfig+0x6c>
 8008410:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008414:	42a8      	cmp	r0, r5
 8008416:	d00f      	beq.n	8008438 <TIM_OC4_SetConfig+0x6c>
 8008418:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800841c:	42a8      	cmp	r0, r5
 800841e:	d00b      	beq.n	8008438 <TIM_OC4_SetConfig+0x6c>
 8008420:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008424:	42a8      	cmp	r0, r5
 8008426:	d10f      	bne.n	8008448 <TIM_OC4_SetConfig+0x7c>
 8008428:	e006      	b.n	8008438 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800842a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800842c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008430:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008438:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800843c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008440:	ea46 0c05 	orr.w	ip, r6, r5
 8008444:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008448:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800844a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800844c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800844e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8008450:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8008452:	6203      	str	r3, [r0, #32]
}
 8008454:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008456:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800845c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008464:	e7d1      	b.n	800840a <TIM_OC4_SetConfig+0x3e>
 8008466:	bf00      	nop
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40014000 	.word	0x40014000

08008470 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008470:	2800      	cmp	r0, #0
 8008472:	f000 808c 	beq.w	800858e <HAL_TIM_Base_Init+0x11e>
{
 8008476:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008478:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800847c:	4604      	mov	r4, r0
 800847e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008482:	2b00      	cmp	r3, #0
 8008484:	d078      	beq.n	8008578 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008486:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008488:	4944      	ldr	r1, [pc, #272]	; (800859c <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800848a:	2302      	movs	r3, #2
 800848c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008490:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008492:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008494:	d05c      	beq.n	8008550 <HAL_TIM_Base_Init+0xe0>
 8008496:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800849a:	d02c      	beq.n	80084f6 <HAL_TIM_Base_Init+0x86>
 800849c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80084a0:	428a      	cmp	r2, r1
 80084a2:	d028      	beq.n	80084f6 <HAL_TIM_Base_Init+0x86>
 80084a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084a8:	428a      	cmp	r2, r1
 80084aa:	d024      	beq.n	80084f6 <HAL_TIM_Base_Init+0x86>
 80084ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084b0:	428a      	cmp	r2, r1
 80084b2:	d020      	beq.n	80084f6 <HAL_TIM_Base_Init+0x86>
 80084b4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80084b8:	428a      	cmp	r2, r1
 80084ba:	d049      	beq.n	8008550 <HAL_TIM_Base_Init+0xe0>
 80084bc:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80084c0:	428a      	cmp	r2, r1
 80084c2:	d066      	beq.n	8008592 <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084c4:	4936      	ldr	r1, [pc, #216]	; (80085a0 <HAL_TIM_Base_Init+0x130>)
 80084c6:	428a      	cmp	r2, r1
 80084c8:	d05b      	beq.n	8008582 <HAL_TIM_Base_Init+0x112>
 80084ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084ce:	428a      	cmp	r2, r1
 80084d0:	d057      	beq.n	8008582 <HAL_TIM_Base_Init+0x112>
 80084d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084d6:	428a      	cmp	r2, r1
 80084d8:	d053      	beq.n	8008582 <HAL_TIM_Base_Init+0x112>
 80084da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084de:	428a      	cmp	r2, r1
 80084e0:	d04f      	beq.n	8008582 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084e2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084e4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ea:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80084ec:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80084ee:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084f0:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80084f2:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084f4:	e010      	b.n	8008518 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 80084f6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084f8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80084fe:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008504:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008506:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800850c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800850e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008510:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008512:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008514:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008516:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008518:	2301      	movs	r3, #1
 800851a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800851c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008520:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008524:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008528:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800852c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008538:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800853c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008540:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008544:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008548:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800854c:	2000      	movs	r0, #0
}
 800854e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008550:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008552:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008558:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800855a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800855e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008560:	69a1      	ldr	r1, [r4, #24]
 8008562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008566:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008568:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800856a:	68e3      	ldr	r3, [r4, #12]
 800856c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800856e:	6863      	ldr	r3, [r4, #4]
 8008570:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008572:	6963      	ldr	r3, [r4, #20]
 8008574:	6313      	str	r3, [r2, #48]	; 0x30
 8008576:	e7cf      	b.n	8008518 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008578:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800857c:	f7fc fd06 	bl	8004f8c <HAL_TIM_Base_MspInit>
 8008580:	e781      	b.n	8008486 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008582:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008584:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800858a:	4303      	orrs	r3, r0
 800858c:	e7e9      	b.n	8008562 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 800858e:	2001      	movs	r0, #1
}
 8008590:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8008592:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008598:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800859a:	e793      	b.n	80084c4 <HAL_TIM_Base_Init+0x54>
 800859c:	40012c00 	.word	0x40012c00
 80085a0:	40014000 	.word	0x40014000

080085a4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80085a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d132      	bne.n	8008612 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085ac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085ae:	491b      	ldr	r1, [pc, #108]	; (800861c <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	2202      	movs	r2, #2
 80085b2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085b6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085b8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c0:	d019      	beq.n	80085f6 <HAL_TIM_Base_Start_IT+0x52>
 80085c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c6:	d016      	beq.n	80085f6 <HAL_TIM_Base_Start_IT+0x52>
 80085c8:	4a15      	ldr	r2, [pc, #84]	; (8008620 <HAL_TIM_Base_Start_IT+0x7c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d013      	beq.n	80085f6 <HAL_TIM_Base_Start_IT+0x52>
 80085ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d00f      	beq.n	80085f6 <HAL_TIM_Base_Start_IT+0x52>
 80085d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <HAL_TIM_Base_Start_IT+0x52>
 80085de:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d007      	beq.n	80085f6 <HAL_TIM_Base_Start_IT+0x52>
 80085e6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d003      	beq.n	80085f6 <HAL_TIM_Base_Start_IT+0x52>
 80085ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d107      	bne.n	8008606 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085f6:	6899      	ldr	r1, [r3, #8]
 80085f8:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <HAL_TIM_Base_Start_IT+0x80>)
 80085fa:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085fc:	2a06      	cmp	r2, #6
 80085fe:	d00a      	beq.n	8008616 <HAL_TIM_Base_Start_IT+0x72>
 8008600:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008604:	d007      	beq.n	8008616 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800860c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	4770      	bx	lr
    return HAL_ERROR;
 8008612:	2001      	movs	r0, #1
 8008614:	4770      	bx	lr
  return HAL_OK;
 8008616:	2000      	movs	r0, #0
}
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40012c00 	.word	0x40012c00
 8008620:	40000400 	.word	0x40000400
 8008624:	00010007 	.word	0x00010007

08008628 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008628:	2800      	cmp	r0, #0
 800862a:	f000 808c 	beq.w	8008746 <HAL_TIM_PWM_Init+0x11e>
{
 800862e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008630:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008634:	4604      	mov	r4, r0
 8008636:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800863a:	2b00      	cmp	r3, #0
 800863c:	d078      	beq.n	8008730 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008640:	4944      	ldr	r1, [pc, #272]	; (8008754 <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008642:	2302      	movs	r3, #2
 8008644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008648:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800864a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800864c:	d05c      	beq.n	8008708 <HAL_TIM_PWM_Init+0xe0>
 800864e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008652:	d02c      	beq.n	80086ae <HAL_TIM_PWM_Init+0x86>
 8008654:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008658:	428a      	cmp	r2, r1
 800865a:	d028      	beq.n	80086ae <HAL_TIM_PWM_Init+0x86>
 800865c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008660:	428a      	cmp	r2, r1
 8008662:	d024      	beq.n	80086ae <HAL_TIM_PWM_Init+0x86>
 8008664:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008668:	428a      	cmp	r2, r1
 800866a:	d020      	beq.n	80086ae <HAL_TIM_PWM_Init+0x86>
 800866c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008670:	428a      	cmp	r2, r1
 8008672:	d049      	beq.n	8008708 <HAL_TIM_PWM_Init+0xe0>
 8008674:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008678:	428a      	cmp	r2, r1
 800867a:	d066      	beq.n	800874a <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800867c:	4936      	ldr	r1, [pc, #216]	; (8008758 <HAL_TIM_PWM_Init+0x130>)
 800867e:	428a      	cmp	r2, r1
 8008680:	d05b      	beq.n	800873a <HAL_TIM_PWM_Init+0x112>
 8008682:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008686:	428a      	cmp	r2, r1
 8008688:	d057      	beq.n	800873a <HAL_TIM_PWM_Init+0x112>
 800868a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800868e:	428a      	cmp	r2, r1
 8008690:	d053      	beq.n	800873a <HAL_TIM_PWM_Init+0x112>
 8008692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008696:	428a      	cmp	r2, r1
 8008698:	d04f      	beq.n	800873a <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800869a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800869c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800869e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80086a4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80086a6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086a8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086aa:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086ac:	e010      	b.n	80086d0 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 80086ae:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086b0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80086b6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80086b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086bc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086be:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086c4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086c6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80086c8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80086ca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086cc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086ce:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80086d0:	2301      	movs	r3, #1
 80086d2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086d4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80086dc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80086e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80086e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80086e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80086f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80086fc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008700:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008704:	2000      	movs	r0, #0
}
 8008706:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008708:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800870a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800870c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008710:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008716:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008718:	69a1      	ldr	r1, [r4, #24]
 800871a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800871e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008720:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008722:	68e3      	ldr	r3, [r4, #12]
 8008724:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008726:	6863      	ldr	r3, [r4, #4]
 8008728:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800872a:	6963      	ldr	r3, [r4, #20]
 800872c:	6313      	str	r3, [r2, #48]	; 0x30
 800872e:	e7cf      	b.n	80086d0 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008730:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008734:	f7fc fc14 	bl	8004f60 <HAL_TIM_PWM_MspInit>
 8008738:	e781      	b.n	800863e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800873a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800873c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800873e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008742:	4303      	orrs	r3, r0
 8008744:	e7e9      	b.n	800871a <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 8008746:	2001      	movs	r0, #1
}
 8008748:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800874a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800874c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008750:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008752:	e793      	b.n	800867c <HAL_TIM_PWM_Init+0x54>
 8008754:	40012c00 	.word	0x40012c00
 8008758:	40014000 	.word	0x40014000

0800875c <HAL_TIM_PWM_Start>:
 800875c:	2910      	cmp	r1, #16
 800875e:	d80a      	bhi.n	8008776 <HAL_TIM_PWM_Start+0x1a>
 8008760:	e8df f001 	tbb	[pc, r1]
 8008764:	09090961 	.word	0x09090961
 8008768:	09090967 	.word	0x09090967
 800876c:	0909096f 	.word	0x0909096f
 8008770:	09090974 	.word	0x09090974
 8008774:	7d          	.byte	0x7d
 8008775:	00          	.byte	0x00
 8008776:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800877a:	2b01      	cmp	r3, #1
 800877c:	d157      	bne.n	800882e <HAL_TIM_PWM_Start+0xd2>
 800877e:	2910      	cmp	r1, #16
 8008780:	d80a      	bhi.n	8008798 <HAL_TIM_PWM_Start+0x3c>
 8008782:	e8df f001 	tbb	[pc, r1]
 8008786:	0993      	.short	0x0993
 8008788:	095a0909 	.word	0x095a0909
 800878c:	097c0909 	.word	0x097c0909
 8008790:	09780909 	.word	0x09780909
 8008794:	0909      	.short	0x0909
 8008796:	74          	.byte	0x74
 8008797:	00          	.byte	0x00
 8008798:	2302      	movs	r3, #2
 800879a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800879e:	6803      	ldr	r3, [r0, #0]
 80087a0:	2201      	movs	r2, #1
 80087a2:	6a18      	ldr	r0, [r3, #32]
 80087a4:	f001 011f 	and.w	r1, r1, #31
 80087a8:	fa02 f101 	lsl.w	r1, r2, r1
 80087ac:	ea20 0001 	bic.w	r0, r0, r1
 80087b0:	6218      	str	r0, [r3, #32]
 80087b2:	6a18      	ldr	r0, [r3, #32]
 80087b4:	4a3f      	ldr	r2, [pc, #252]	; (80088b4 <HAL_TIM_PWM_Start+0x158>)
 80087b6:	4301      	orrs	r1, r0
 80087b8:	4293      	cmp	r3, r2
 80087ba:	6219      	str	r1, [r3, #32]
 80087bc:	d063      	beq.n	8008886 <HAL_TIM_PWM_Start+0x12a>
 80087be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d06d      	beq.n	80088a2 <HAL_TIM_PWM_Start+0x146>
 80087c6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d069      	beq.n	80088a2 <HAL_TIM_PWM_Start+0x146>
 80087ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d065      	beq.n	80088a2 <HAL_TIM_PWM_Start+0x146>
 80087d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087da:	4293      	cmp	r3, r2
 80087dc:	d061      	beq.n	80088a2 <HAL_TIM_PWM_Start+0x146>
 80087de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d05d      	beq.n	80088a2 <HAL_TIM_PWM_Start+0x146>
 80087e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ea:	d050      	beq.n	800888e <HAL_TIM_PWM_Start+0x132>
 80087ec:	4a32      	ldr	r2, [pc, #200]	; (80088b8 <HAL_TIM_PWM_Start+0x15c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d04d      	beq.n	800888e <HAL_TIM_PWM_Start+0x132>
 80087f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d049      	beq.n	800888e <HAL_TIM_PWM_Start+0x132>
 80087fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087fe:	4293      	cmp	r3, r2
 8008800:	d045      	beq.n	800888e <HAL_TIM_PWM_Start+0x132>
 8008802:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008806:	4293      	cmp	r3, r2
 8008808:	d041      	beq.n	800888e <HAL_TIM_PWM_Start+0x132>
 800880a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800880e:	4293      	cmp	r3, r2
 8008810:	d03d      	beq.n	800888e <HAL_TIM_PWM_Start+0x132>
 8008812:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008816:	4293      	cmp	r3, r2
 8008818:	d039      	beq.n	800888e <HAL_TIM_PWM_Start+0x132>
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	f042 0201 	orr.w	r2, r2, #1
 8008820:	2000      	movs	r0, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	4770      	bx	lr
 8008826:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800882a:	2b01      	cmp	r3, #1
 800882c:	d03e      	beq.n	80088ac <HAL_TIM_PWM_Start+0x150>
 800882e:	2001      	movs	r0, #1
 8008830:	4770      	bx	lr
 8008832:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008836:	2b01      	cmp	r3, #1
 8008838:	d1f9      	bne.n	800882e <HAL_TIM_PWM_Start+0xd2>
 800883a:	2302      	movs	r3, #2
 800883c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008840:	e7ad      	b.n	800879e <HAL_TIM_PWM_Start+0x42>
 8008842:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008846:	2b01      	cmp	r3, #1
 8008848:	d099      	beq.n	800877e <HAL_TIM_PWM_Start+0x22>
 800884a:	e7f0      	b.n	800882e <HAL_TIM_PWM_Start+0xd2>
 800884c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008850:	3b01      	subs	r3, #1
 8008852:	bf18      	it	ne
 8008854:	2301      	movne	r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d091      	beq.n	800877e <HAL_TIM_PWM_Start+0x22>
 800885a:	2001      	movs	r0, #1
 800885c:	4770      	bx	lr
 800885e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008862:	3b01      	subs	r3, #1
 8008864:	bf18      	it	ne
 8008866:	2301      	movne	r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d088      	beq.n	800877e <HAL_TIM_PWM_Start+0x22>
 800886c:	e7f5      	b.n	800885a <HAL_TIM_PWM_Start+0xfe>
 800886e:	2302      	movs	r3, #2
 8008870:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008874:	e793      	b.n	800879e <HAL_TIM_PWM_Start+0x42>
 8008876:	2302      	movs	r3, #2
 8008878:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800887c:	e78f      	b.n	800879e <HAL_TIM_PWM_Start+0x42>
 800887e:	2302      	movs	r3, #2
 8008880:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008884:	e78b      	b.n	800879e <HAL_TIM_PWM_Start+0x42>
 8008886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008888:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800888c:	645a      	str	r2, [r3, #68]	; 0x44
 800888e:	6899      	ldr	r1, [r3, #8]
 8008890:	4a0a      	ldr	r2, [pc, #40]	; (80088bc <HAL_TIM_PWM_Start+0x160>)
 8008892:	400a      	ands	r2, r1
 8008894:	2a06      	cmp	r2, #6
 8008896:	d002      	beq.n	800889e <HAL_TIM_PWM_Start+0x142>
 8008898:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800889c:	d1bd      	bne.n	800881a <HAL_TIM_PWM_Start+0xbe>
 800889e:	2000      	movs	r0, #0
 80088a0:	4770      	bx	lr
 80088a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088a8:	645a      	str	r2, [r3, #68]	; 0x44
 80088aa:	e79c      	b.n	80087e6 <HAL_TIM_PWM_Start+0x8a>
 80088ac:	2302      	movs	r3, #2
 80088ae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80088b2:	e774      	b.n	800879e <HAL_TIM_PWM_Start+0x42>
 80088b4:	40012c00 	.word	0x40012c00
 80088b8:	40000400 	.word	0x40000400
 80088bc:	00010007 	.word	0x00010007

080088c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop

080088c4 <HAL_TIM_IC_CaptureCallback>:
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop

080088c8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <HAL_TIM_TriggerCallback>:
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop

080088d0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088d0:	6803      	ldr	r3, [r0, #0]
 80088d2:	691a      	ldr	r2, [r3, #16]
 80088d4:	0791      	lsls	r1, r2, #30
{
 80088d6:	b510      	push	{r4, lr}
 80088d8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088da:	d503      	bpl.n	80088e4 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	0792      	lsls	r2, r2, #30
 80088e0:	f100 808a 	bmi.w	80089f8 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	0752      	lsls	r2, r2, #29
 80088e8:	d502      	bpl.n	80088f0 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	0750      	lsls	r0, r2, #29
 80088ee:	d470      	bmi.n	80089d2 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	0711      	lsls	r1, r2, #28
 80088f4:	d502      	bpl.n	80088fc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	0712      	lsls	r2, r2, #28
 80088fa:	d458      	bmi.n	80089ae <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088fc:	691a      	ldr	r2, [r3, #16]
 80088fe:	06d1      	lsls	r1, r2, #27
 8008900:	d502      	bpl.n	8008908 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	06d2      	lsls	r2, r2, #27
 8008906:	d43e      	bmi.n	8008986 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	07d0      	lsls	r0, r2, #31
 800890c:	d503      	bpl.n	8008916 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	07d1      	lsls	r1, r2, #31
 8008912:	f100 808a 	bmi.w	8008a2a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008916:	691a      	ldr	r2, [r3, #16]
 8008918:	0612      	lsls	r2, r2, #24
 800891a:	d503      	bpl.n	8008924 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	0610      	lsls	r0, r2, #24
 8008920:	f100 808b 	bmi.w	8008a3a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	05d1      	lsls	r1, r2, #23
 8008928:	d503      	bpl.n	8008932 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	0612      	lsls	r2, r2, #24
 800892e:	f100 808c 	bmi.w	8008a4a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	0650      	lsls	r0, r2, #25
 8008936:	d503      	bpl.n	8008940 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	0651      	lsls	r1, r2, #25
 800893c:	f100 808d 	bmi.w	8008a5a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008940:	691a      	ldr	r2, [r3, #16]
 8008942:	0692      	lsls	r2, r2, #26
 8008944:	d503      	bpl.n	800894e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008946:	68da      	ldr	r2, [r3, #12]
 8008948:	0690      	lsls	r0, r2, #26
 800894a:	f100 808e 	bmi.w	8008a6a <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	02d1      	lsls	r1, r2, #11
 8008952:	d503      	bpl.n	800895c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	02d2      	lsls	r2, r2, #11
 8008958:	f100 808f 	bmi.w	8008a7a <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800895c:	691a      	ldr	r2, [r3, #16]
 800895e:	0290      	lsls	r0, r2, #10
 8008960:	d503      	bpl.n	800896a <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	0291      	lsls	r1, r2, #10
 8008966:	f100 8090 	bmi.w	8008a8a <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	0252      	lsls	r2, r2, #9
 800896e:	d503      	bpl.n	8008978 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008970:	68da      	ldr	r2, [r3, #12]
 8008972:	0250      	lsls	r0, r2, #9
 8008974:	f100 8091 	bmi.w	8008a9a <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008978:	691a      	ldr	r2, [r3, #16]
 800897a:	0211      	lsls	r1, r2, #8
 800897c:	d502      	bpl.n	8008984 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	0212      	lsls	r2, r2, #8
 8008982:	d44a      	bmi.n	8008a1a <HAL_TIM_IRQHandler+0x14a>
}
 8008984:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008986:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800898a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800898c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800898e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008990:	69db      	ldr	r3, [r3, #28]
 8008992:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8008996:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008998:	f040 8090 	bne.w	8008abc <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800899c:	f7ff ff90 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7ff ff91 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089a8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089aa:	7722      	strb	r2, [r4, #28]
 80089ac:	e7ac      	b.n	8008908 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089ae:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089b2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089b4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80089bc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089be:	d17a      	bne.n	8008ab6 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c0:	f7ff ff7e 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7ff ff7f 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089cc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ce:	7722      	strb	r2, [r4, #28]
 80089d0:	e794      	b.n	80088fc <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089d2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089d6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089d8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80089e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089e4:	d164      	bne.n	8008ab0 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e6:	f7ff ff6b 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ea:	4620      	mov	r0, r4
 80089ec:	f7ff ff6c 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089f2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f4:	7722      	strb	r2, [r4, #28]
 80089f6:	e77b      	b.n	80088f0 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089f8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089fc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089fe:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a00:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	0799      	lsls	r1, r3, #30
 8008a06:	d150      	bne.n	8008aaa <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a08:	f7ff ff5a 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff ff5b 	bl	80088c8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a12:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a14:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a16:	7722      	strb	r2, [r4, #28]
 8008a18:	e764      	b.n	80088e4 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008a1a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008a1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008a20:	611a      	str	r2, [r3, #16]
}
 8008a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008a26:	f000 ba11 	b.w	8008e4c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a2a:	f06f 0201 	mvn.w	r2, #1
 8008a2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7fa fec1 	bl	80037b8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	e76d      	b.n	8008916 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 f9f9 	bl	8008e38 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a46:	6823      	ldr	r3, [r4, #0]
 8008a48:	e76c      	b.n	8008924 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 f9f3 	bl	8008e3c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	e76b      	b.n	8008932 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008a60:	4620      	mov	r0, r4
 8008a62:	f7ff ff33 	bl	80088cc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	e76a      	b.n	8008940 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a6a:	f06f 0220 	mvn.w	r2, #32
 8008a6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 f9df 	bl	8008e34 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	e769      	b.n	800894e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008a7a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008a7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 f9dd 	bl	8008e40 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	e768      	b.n	800895c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008a8a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008a8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 f9d7 	bl	8008e44 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	e767      	b.n	800896a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008a9a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008a9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 f9d1 	bl	8008e48 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	e766      	b.n	8008978 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8008aaa:	f7ff ff0b 	bl	80088c4 <HAL_TIM_IC_CaptureCallback>
 8008aae:	e7b0      	b.n	8008a12 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab0:	f7ff ff08 	bl	80088c4 <HAL_TIM_IC_CaptureCallback>
 8008ab4:	e79c      	b.n	80089f0 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8008ab6:	f7ff ff05 	bl	80088c4 <HAL_TIM_IC_CaptureCallback>
 8008aba:	e786      	b.n	80089ca <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8008abc:	f7ff ff02 	bl	80088c4 <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e771      	b.n	80089a6 <HAL_TIM_IRQHandler+0xd6>
 8008ac2:	bf00      	nop

08008ac4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac4:	6a03      	ldr	r3, [r0, #32]
 8008ac6:	f023 0310 	bic.w	r3, r3, #16
 8008aca:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008acc:	6a03      	ldr	r3, [r0, #32]
{
 8008ace:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008ad0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008ad2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ad6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008ada:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ade:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ae2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008ae4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ae8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008aec:	4d1c      	ldr	r5, [pc, #112]	; (8008b60 <TIM_OC2_SetConfig+0x9c>)
 8008aee:	42a8      	cmp	r0, r5
 8008af0:	d017      	beq.n	8008b22 <TIM_OC2_SetConfig+0x5e>
 8008af2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008af6:	42a8      	cmp	r0, r5
 8008af8:	d013      	beq.n	8008b22 <TIM_OC2_SetConfig+0x5e>
 8008afa:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008afe:	42a8      	cmp	r0, r5
 8008b00:	d025      	beq.n	8008b4e <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b02:	4d18      	ldr	r5, [pc, #96]	; (8008b64 <TIM_OC2_SetConfig+0xa0>)
 8008b04:	42a8      	cmp	r0, r5
 8008b06:	d013      	beq.n	8008b30 <TIM_OC2_SetConfig+0x6c>
 8008b08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b0c:	42a8      	cmp	r0, r5
 8008b0e:	d00f      	beq.n	8008b30 <TIM_OC2_SetConfig+0x6c>
 8008b10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008b14:	42a8      	cmp	r0, r5
 8008b16:	d00b      	beq.n	8008b30 <TIM_OC2_SetConfig+0x6c>
 8008b18:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b1c:	42a8      	cmp	r0, r5
 8008b1e:	d10f      	bne.n	8008b40 <TIM_OC2_SetConfig+0x7c>
 8008b20:	e006      	b.n	8008b30 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b22:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b30:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b34:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b38:	ea46 0c05 	orr.w	ip, r6, r5
 8008b3c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008b40:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008b42:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008b44:	6182      	str	r2, [r0, #24]
}
 8008b46:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008b48:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008b4a:	6203      	str	r3, [r0, #32]
}
 8008b4c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b4e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5c:	e7d1      	b.n	8008b02 <TIM_OC2_SetConfig+0x3e>
 8008b5e:	bf00      	nop
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40014000 	.word	0x40014000

08008b68 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008b68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	f000 80ff 	beq.w	8008d70 <HAL_TIM_PWM_ConfigChannel+0x208>
 8008b72:	2301      	movs	r3, #1
{
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	4604      	mov	r4, r0
 8008b78:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008b7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008b7e:	2a14      	cmp	r2, #20
 8008b80:	d80c      	bhi.n	8008b9c <HAL_TIM_PWM_ConfigChannel+0x34>
 8008b82:	e8df f002 	tbb	[pc, r2]
 8008b86:	0b59      	.short	0x0b59
 8008b88:	0b6e0b0b 	.word	0x0b6e0b0b
 8008b8c:	0b840b0b 	.word	0x0b840b0b
 8008b90:	0b990b0b 	.word	0x0b990b0b
 8008b94:	0baf0b0b 	.word	0x0baf0b0b
 8008b98:	0b0b      	.short	0x0b0b
 8008b9a:	11          	.byte	0x11
 8008b9b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008b9c:	2300      	movs	r3, #0
  switch (Channel)
 8008b9e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8008ba0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ba8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008baa:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bac:	6a1a      	ldr	r2, [r3, #32]
 8008bae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008bb2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008bb4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008bb6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008bb8:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bba:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008bbe:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bc6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bc8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bcc:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd0:	4e69      	ldr	r6, [pc, #420]	; (8008d78 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008bd2:	42b3      	cmp	r3, r6
 8008bd4:	d013      	beq.n	8008bfe <HAL_TIM_PWM_ConfigChannel+0x96>
 8008bd6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008bda:	42b3      	cmp	r3, r6
 8008bdc:	d00f      	beq.n	8008bfe <HAL_TIM_PWM_ConfigChannel+0x96>
 8008bde:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008be2:	42b3      	cmp	r3, r6
 8008be4:	d00b      	beq.n	8008bfe <HAL_TIM_PWM_ConfigChannel+0x96>
 8008be6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008bea:	42b3      	cmp	r3, r6
 8008bec:	d007      	beq.n	8008bfe <HAL_TIM_PWM_ConfigChannel+0x96>
 8008bee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008bf2:	42b3      	cmp	r3, r6
 8008bf4:	d003      	beq.n	8008bfe <HAL_TIM_PWM_ConfigChannel+0x96>
 8008bf6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008bfa:	42b3      	cmp	r3, r6
 8008bfc:	d104      	bne.n	8008c08 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bfe:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c00:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c04:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c08:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c0a:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c0c:	6869      	ldr	r1, [r5, #4]
 8008c0e:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c10:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c14:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008c22:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c24:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c26:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008c2a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008c2c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008c2e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008c30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008c34:	4610      	mov	r0, r2
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c38:	6800      	ldr	r0, [r0, #0]
 8008c3a:	f7ff fb37 	bl	80082ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c3e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c40:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c42:	f043 0308 	orr.w	r3, r3, #8
 8008c46:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c48:	6983      	ldr	r3, [r0, #24]
 8008c4a:	f023 0304 	bic.w	r3, r3, #4
 8008c4e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c50:	6983      	ldr	r3, [r0, #24]
 8008c52:	430b      	orrs	r3, r1
 8008c54:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008c56:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008c58:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008c5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008c5e:	4610      	mov	r0, r2
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c62:	6800      	ldr	r0, [r0, #0]
 8008c64:	f7ff ff2e 	bl	8008ac4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c68:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c6a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c70:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c72:	6983      	ldr	r3, [r0, #24]
 8008c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c78:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c7a:	6983      	ldr	r3, [r0, #24]
 8008c7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008c80:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008c82:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008c84:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008c86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c8e:	6800      	ldr	r0, [r0, #0]
 8008c90:	f7ff fb4c 	bl	800832c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c94:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c96:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c98:	f043 0308 	orr.w	r3, r3, #8
 8008c9c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c9e:	69c3      	ldr	r3, [r0, #28]
 8008ca0:	f023 0304 	bic.w	r3, r3, #4
 8008ca4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ca6:	69c3      	ldr	r3, [r0, #28]
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008cac:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008cae:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008cb0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008cb8:	6800      	ldr	r0, [r0, #0]
 8008cba:	f7ff fb87 	bl	80083cc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cbe:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cc0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008cc6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cc8:	69c3      	ldr	r3, [r0, #28]
 8008cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cce:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cd0:	69c3      	ldr	r3, [r0, #28]
 8008cd2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008cd6:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8008cd8:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008cda:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008cdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ce4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008ce6:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ce8:	6a1a      	ldr	r2, [r3, #32]
 8008cea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cee:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008cf0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008cf2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008cf4:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cf6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008cfa:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008cfe:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d00:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008d02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d06:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d0a:	4e1b      	ldr	r6, [pc, #108]	; (8008d78 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8008d0c:	42b3      	cmp	r3, r6
 8008d0e:	d013      	beq.n	8008d38 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008d10:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008d14:	42b3      	cmp	r3, r6
 8008d16:	d00f      	beq.n	8008d38 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008d18:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008d1c:	42b3      	cmp	r3, r6
 8008d1e:	d00b      	beq.n	8008d38 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008d20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008d24:	42b3      	cmp	r3, r6
 8008d26:	d007      	beq.n	8008d38 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008d28:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008d2c:	42b3      	cmp	r3, r6
 8008d2e:	d003      	beq.n	8008d38 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8008d30:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008d34:	42b3      	cmp	r3, r6
 8008d36:	d104      	bne.n	8008d42 <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d38:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d3a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d3e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008d42:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008d44:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008d46:	6869      	ldr	r1, [r5, #4]
 8008d48:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8008d4a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d4e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d50:	f042 0208 	orr.w	r2, r2, #8
 8008d54:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d56:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d58:	f021 0104 	bic.w	r1, r1, #4
 8008d5c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d5e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d60:	4301      	orrs	r1, r0
 8008d62:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008d64:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d66:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8008d68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8008d70:	2202      	movs	r2, #2
}
 8008d72:	4610      	mov	r0, r2
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40012c00 	.word	0x40012c00

08008d7c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d051      	beq.n	8008e28 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8008d84:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d86:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d88:	4d28      	ldr	r5, [pc, #160]	; (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d90:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008d92:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008d94:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d96:	d03b      	beq.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008d98:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d9c:	42aa      	cmp	r2, r5
 8008d9e:	d032      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008da0:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008da4:	42aa      	cmp	r2, r5
 8008da6:	d02e      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008da8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008daa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008db2:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008db8:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dba:	d016      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008dbc:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d013      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d00f      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d00b      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008dd2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d007      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008dda:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d003      	beq.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d104      	bne.n	8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dea:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dec:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008df0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008df2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008df4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008df6:	2201      	movs	r2, #1
 8008df8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008dfc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008e00:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008e02:	4618      	mov	r0, r3
}
 8008e04:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e06:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e0c:	432b      	orrs	r3, r5
 8008e0e:	e7cb      	b.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8008e10:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e16:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e18:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e1c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e22:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008e24:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e26:	e7e0      	b.n	8008dea <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008e28:	2002      	movs	r0, #2
}
 8008e2a:	4770      	bx	lr
 8008e2c:	40012c00 	.word	0x40012c00
 8008e30:	40000400 	.word	0x40000400

08008e34 <HAL_TIMEx_CommutCallback>:
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop

08008e38 <HAL_TIMEx_BreakCallback>:
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop

08008e3c <HAL_TIMEx_Break2Callback>:
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop

08008e40 <HAL_TIMEx_EncoderIndexCallback>:
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop

08008e44 <HAL_TIMEx_DirectionChangeCallback>:
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop

08008e48 <HAL_TIMEx_IndexErrorCallback>:
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop

08008e4c <HAL_TIMEx_TransitionErrorCallback>:
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e50:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008e54:	2b20      	cmp	r3, #32
 8008e56:	d15f      	bne.n	8008f18 <HAL_UART_Receive_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	d05b      	beq.n	8008f14 <HAL_UART_Receive_IT+0xc4>
 8008e5c:	2a00      	cmp	r2, #0
 8008e5e:	d059      	beq.n	8008f14 <HAL_UART_Receive_IT+0xc4>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008e60:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d057      	beq.n	8008f18 <HAL_UART_Receive_IT+0xc8>
{
 8008e68:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e6a:	6803      	ldr	r3, [r0, #0]
 8008e6c:	4c59      	ldr	r4, [pc, #356]	; (8008fd4 <HAL_UART_Receive_IT+0x184>)
    __HAL_LOCK(huart);
 8008e6e:	2501      	movs	r5, #1
 8008e70:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e74:	42a3      	cmp	r3, r4
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e76:	f04f 0500 	mov.w	r5, #0
 8008e7a:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e7c:	d00a      	beq.n	8008e94 <HAL_UART_Receive_IT+0x44>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e7e:	685c      	ldr	r4, [r3, #4]
 8008e80:	0224      	lsls	r4, r4, #8
 8008e82:	d507      	bpl.n	8008e94 <HAL_UART_Receive_IT+0x44>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	e853 4f00 	ldrex	r4, [r3]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e88:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	e843 4500 	strex	r5, r4, [r3]
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	d1f7      	bne.n	8008e84 <HAL_UART_Receive_IT+0x34>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e94:	6885      	ldr	r5, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8008e96:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 8008e98:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 8008e9a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8008e9e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008ea2:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ea6:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8008ea8:	d04f      	beq.n	8008f4a <HAL_UART_Receive_IT+0xfa>
 8008eaa:	2d00      	cmp	r5, #0
 8008eac:	d177      	bne.n	8008f9e <HAL_UART_Receive_IT+0x14e>
 8008eae:	6901      	ldr	r1, [r0, #16]
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	bf14      	ite	ne
 8008eb4:	247f      	movne	r4, #127	; 0x7f
 8008eb6:	24ff      	moveq	r4, #255	; 0xff

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb8:	2100      	movs	r1, #0
 8008eba:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ebe:	2122      	movs	r1, #34	; 0x22
  UART_MASK_COMPUTATION(huart);
 8008ec0:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ec4:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	f103 0108 	add.w	r1, r3, #8
 8008ecc:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed0:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	f103 0508 	add.w	r5, r3, #8
 8008ed8:	e845 1400 	strex	r4, r1, [r5]
 8008edc:	2c00      	cmp	r4, #0
 8008ede:	d1f3      	bne.n	8008ec8 <HAL_UART_Receive_IT+0x78>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ee0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8008ee2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008ee6:	d037      	beq.n	8008f58 <HAL_UART_Receive_IT+0x108>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ee8:	6882      	ldr	r2, [r0, #8]
 8008eea:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008eee:	6902      	ldr	r2, [r0, #16]
 8008ef0:	d014      	beq.n	8008f1c <HAL_UART_Receive_IT+0xcc>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ef2:	4c39      	ldr	r4, [pc, #228]	; (8008fd8 <HAL_UART_Receive_IT+0x188>)
 8008ef4:	6704      	str	r4, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008efc:	b1a2      	cbz	r2, 8008f28 <HAL_UART_Receive_IT+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008f02:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f06:	e843 2100 	strex	r1, r2, [r3]
 8008f0a:	2900      	cmp	r1, #0
 8008f0c:	d1f7      	bne.n	8008efe <HAL_UART_Receive_IT+0xae>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f0e:	2000      	movs	r0, #0
}
 8008f10:	bc30      	pop	{r4, r5}
 8008f12:	4770      	bx	lr
      return HAL_ERROR;
 8008f14:	2001      	movs	r0, #1
 8008f16:	4770      	bx	lr
    return HAL_BUSY;
 8008f18:	2002      	movs	r0, #2
}
 8008f1a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f1c:	2a00      	cmp	r2, #0
 8008f1e:	d147      	bne.n	8008fb0 <HAL_UART_Receive_IT+0x160>
 8008f20:	492e      	ldr	r1, [pc, #184]	; (8008fdc <HAL_UART_Receive_IT+0x18c>)
 8008f22:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008f24:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f2c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	e843 2100 	strex	r1, r2, [r3]
 8008f34:	2900      	cmp	r1, #0
 8008f36:	d0ea      	beq.n	8008f0e <HAL_UART_Receive_IT+0xbe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	e853 2f00 	ldrex	r2, [r3]
 8008f3c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	e843 2100 	strex	r1, r2, [r3]
 8008f44:	2900      	cmp	r1, #0
 8008f46:	d1ef      	bne.n	8008f28 <HAL_UART_Receive_IT+0xd8>
 8008f48:	e7e1      	b.n	8008f0e <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 8008f4a:	6901      	ldr	r1, [r0, #16]
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008f52:	bf18      	it	ne
 8008f54:	24ff      	movne	r4, #255	; 0xff
 8008f56:	e7af      	b.n	8008eb8 <HAL_UART_Receive_IT+0x68>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f58:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8008f5c:	4291      	cmp	r1, r2
 8008f5e:	d8c3      	bhi.n	8008ee8 <HAL_UART_Receive_IT+0x98>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f60:	6882      	ldr	r2, [r0, #8]
 8008f62:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008f66:	6902      	ldr	r2, [r0, #16]
 8008f68:	d028      	beq.n	8008fbc <HAL_UART_Receive_IT+0x16c>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f6a:	491d      	ldr	r1, [pc, #116]	; (8008fe0 <HAL_UART_Receive_IT+0x190>)
 8008f6c:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008f6e:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f72:	b13a      	cbz	r2, 8008f84 <HAL_UART_Receive_IT+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f74:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7c:	e843 2100 	strex	r1, r2, [r3]
 8008f80:	2900      	cmp	r1, #0
 8008f82:	d1f7      	bne.n	8008f74 <HAL_UART_Receive_IT+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	f103 0208 	add.w	r2, r3, #8
 8008f88:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	f103 0008 	add.w	r0, r3, #8
 8008f94:	e840 2100 	strex	r1, r2, [r0]
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	d1f3      	bne.n	8008f84 <HAL_UART_Receive_IT+0x134>
 8008f9c:	e7b7      	b.n	8008f0e <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 8008f9e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8008fa2:	d189      	bne.n	8008eb8 <HAL_UART_Receive_IT+0x68>
 8008fa4:	6901      	ldr	r1, [r0, #16]
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	bf0c      	ite	eq
 8008faa:	247f      	moveq	r4, #127	; 0x7f
 8008fac:	243f      	movne	r4, #63	; 0x3f
 8008fae:	e783      	b.n	8008eb8 <HAL_UART_Receive_IT+0x68>
      huart->RxISR = UART_RxISR_8BIT;
 8008fb0:	4909      	ldr	r1, [pc, #36]	; (8008fd8 <HAL_UART_Receive_IT+0x188>)
 8008fb2:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fba:	e7a0      	b.n	8008efe <HAL_UART_Receive_IT+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fbc:	b922      	cbnz	r2, 8008fc8 <HAL_UART_Receive_IT+0x178>
 8008fbe:	4909      	ldr	r1, [pc, #36]	; (8008fe4 <HAL_UART_Receive_IT+0x194>)
 8008fc0:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008fc2:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fc6:	e7dd      	b.n	8008f84 <HAL_UART_Receive_IT+0x134>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008fc8:	4a05      	ldr	r2, [pc, #20]	; (8008fe0 <HAL_UART_Receive_IT+0x190>)
 8008fca:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008fcc:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fd0:	e7d0      	b.n	8008f74 <HAL_UART_Receive_IT+0x124>
 8008fd2:	bf00      	nop
 8008fd4:	40008000 	.word	0x40008000
 8008fd8:	08009605 	.word	0x08009605
 8008fdc:	080095b9 	.word	0x080095b9
 8008fe0:	08009645 	.word	0x08009645
 8008fe4:	080097f1 	.word	0x080097f1

08008fe8 <HAL_UART_Transmit_DMA>:
{
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8008fea:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8008fee:	2e20      	cmp	r6, #32
 8008ff0:	d141      	bne.n	8009076 <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8008ff2:	2900      	cmp	r1, #0
 8008ff4:	d03d      	beq.n	8009072 <HAL_UART_Transmit_DMA+0x8a>
 8008ff6:	2a00      	cmp	r2, #0
 8008ff8:	d03b      	beq.n	8009072 <HAL_UART_Transmit_DMA+0x8a>
 8008ffa:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8008ffc:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8009000:	2801      	cmp	r0, #1
 8009002:	d038      	beq.n	8009076 <HAL_UART_Transmit_DMA+0x8e>
    if (huart->hdmatx != NULL)
 8009004:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8009006:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900a:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800900c:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800900e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009010:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 8009014:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009016:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 800901a:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800901e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009022:	b190      	cbz	r0, 800904a <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009024:	f8df c064 	ldr.w	ip, [pc, #100]	; 800908c <HAL_UART_Transmit_DMA+0xa4>
      huart->hdmatx->XferAbortCallback = NULL;
 8009028:	6387      	str	r7, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800902a:	4613      	mov	r3, r2
 800902c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800902e:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009032:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8009090 <HAL_UART_Transmit_DMA+0xa8>
 8009036:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800903a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8009094 <HAL_UART_Transmit_DMA+0xac>
 800903e:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009042:	3228      	adds	r2, #40	; 0x28
 8009044:	f7fd fa34 	bl	80064b0 <HAL_DMA_Start_IT>
 8009048:	b9b8      	cbnz	r0, 800907a <HAL_UART_Transmit_DMA+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800904a:	6822      	ldr	r2, [r4, #0]
 800904c:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 800904e:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009050:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8009052:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	f102 0308 	add.w	r3, r2, #8
 800905a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800905e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	f102 0008 	add.w	r0, r2, #8
 8009066:	e840 3100 	strex	r1, r3, [r0]
 800906a:	2900      	cmp	r1, #0
 800906c:	d1f3      	bne.n	8009056 <HAL_UART_Transmit_DMA+0x6e>
    return HAL_OK;
 800906e:	2000      	movs	r0, #0
}
 8009070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8009072:	2001      	movs	r0, #1
}
 8009074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009076:	2002      	movs	r0, #2
}
 8009078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800907a:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800907c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009080:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 8009084:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8009086:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 800908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800908c:	08009099 	.word	0x08009099
 8009090:	080090e1 	.word	0x080090e1
 8009094:	080090f5 	.word	0x080090f5

08009098 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009098:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800909a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800909c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f013 0320 	ands.w	r3, r3, #32
 80090a4:	d117      	bne.n	80090d6 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 80090a6:	6802      	ldr	r2, [r0, #0]
 80090a8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	f102 0308 	add.w	r3, r2, #8
 80090b0:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	f102 0008 	add.w	r0, r2, #8
 80090bc:	e840 3100 	strex	r1, r3, [r0]
 80090c0:	2900      	cmp	r1, #0
 80090c2:	d1f3      	bne.n	80090ac <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	e842 3100 	strex	r1, r3, [r2]
 80090d0:	2900      	cmp	r1, #0
 80090d2:	d1f7      	bne.n	80090c4 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090d4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80090d6:	f7fb f831 	bl	800413c <HAL_UART_TxCpltCallback>
}
 80090da:	bd08      	pop	{r3, pc}

080090dc <HAL_UART_TxHalfCpltCallback>:
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop

080090e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090e0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80090e4:	f7ff fffa 	bl	80090dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e8:	bd08      	pop	{r3, pc}
 80090ea:	bf00      	nop

080090ec <HAL_UART_RxHalfCpltCallback>:
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop

080090f0 <HAL_UART_ErrorCallback>:
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop

080090f4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090f4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090f6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090f8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 80090fc:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090fe:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	0612      	lsls	r2, r2, #24
 8009106:	d501      	bpl.n	800910c <UART_DMAError+0x18>
 8009108:	2921      	cmp	r1, #33	; 0x21
 800910a:	d00d      	beq.n	8009128 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800910c:	689a      	ldr	r2, [r3, #8]
 800910e:	0652      	lsls	r2, r2, #25
 8009110:	d501      	bpl.n	8009116 <UART_DMAError+0x22>
 8009112:	2c22      	cmp	r4, #34	; 0x22
 8009114:	d023      	beq.n	800915e <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009116:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800911a:	f043 0310 	orr.w	r3, r3, #16
 800911e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009122:	f7ff ffe5 	bl	80090f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009126:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8009128:	2200      	movs	r2, #0
 800912a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009132:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	e843 2100 	strex	r1, r2, [r3]
 800913a:	2900      	cmp	r1, #0
 800913c:	d1f7      	bne.n	800912e <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	f103 0208 	add.w	r2, r3, #8
 8009142:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009146:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	f103 0c08 	add.w	ip, r3, #8
 800914e:	e84c 2100 	strex	r1, r2, [ip]
 8009152:	2900      	cmp	r1, #0
 8009154:	d1f3      	bne.n	800913e <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8009156:	2220      	movs	r2, #32
 8009158:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 800915c:	e7d6      	b.n	800910c <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800915e:	2200      	movs	r2, #0
 8009160:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009168:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	e843 2100 	strex	r1, r2, [r3]
 8009170:	2900      	cmp	r1, #0
 8009172:	d1f7      	bne.n	8009164 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009174:	4c13      	ldr	r4, [pc, #76]	; (80091c4 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	f103 0208 	add.w	r2, r3, #8
 800917a:	e852 2f00 	ldrex	r2, [r2]
 800917e:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	f103 0c08 	add.w	ip, r3, #8
 8009184:	e84c 2100 	strex	r1, r2, [ip]
 8009188:	2900      	cmp	r1, #0
 800918a:	d1f4      	bne.n	8009176 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800918c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800918e:	2a01      	cmp	r2, #1
 8009190:	d006      	beq.n	80091a0 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009192:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009194:	2220      	movs	r2, #32
 8009196:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 800919a:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800919e:	e7ba      	b.n	8009116 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	e843 2100 	strex	r1, r2, [r3]
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d0f0      	beq.n	8009192 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	e853 2f00 	ldrex	r2, [r3]
 80091b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	e843 2100 	strex	r1, r2, [r3]
 80091bc:	2900      	cmp	r1, #0
 80091be:	d1ef      	bne.n	80091a0 <UART_DMAError+0xac>
 80091c0:	e7e7      	b.n	8009192 <UART_DMAError+0x9e>
 80091c2:	bf00      	nop
 80091c4:	effffffe 	.word	0xeffffffe

080091c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80091d2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091d6:	f7ff ff8b 	bl	80090f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091da:	bd08      	pop	{r3, pc}

080091dc <HAL_UARTEx_RxEventCallback>:
}
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop

080091e0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091e0:	6803      	ldr	r3, [r0, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091e4:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091e6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80091ea:	ea12 0f0c 	tst.w	r2, ip
{
 80091ee:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091f0:	689d      	ldr	r5, [r3, #8]
{
 80091f2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80091f4:	f000 80eb 	beq.w	80093ce <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091f8:	489a      	ldr	r0, [pc, #616]	; (8009464 <HAL_UART_IRQHandler+0x284>)
 80091fa:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091fe:	489a      	ldr	r0, [pc, #616]	; (8009468 <HAL_UART_IRQHandler+0x288>)
 8009200:	4008      	ands	r0, r1
 8009202:	ea50 000c 	orrs.w	r0, r0, ip
 8009206:	d155      	bne.n	80092b4 <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009208:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800920a:	2801      	cmp	r0, #1
 800920c:	d022      	beq.n	8009254 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800920e:	02d6      	lsls	r6, r2, #11
 8009210:	d502      	bpl.n	8009218 <HAL_UART_IRQHandler+0x38>
 8009212:	0268      	lsls	r0, r5, #9
 8009214:	f100 8104 	bmi.w	8009420 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009218:	0616      	lsls	r6, r2, #24
 800921a:	d506      	bpl.n	800922a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800921c:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009220:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009224:	4328      	orrs	r0, r5
 8009226:	f040 80f3 	bne.w	8009410 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800922a:	0650      	lsls	r0, r2, #25
 800922c:	d534      	bpl.n	8009298 <HAL_UART_IRQHandler+0xb8>
 800922e:	064e      	lsls	r6, r1, #25
 8009230:	d532      	bpl.n	8009298 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	e843 2100 	strex	r1, r2, [r3]
 800923e:	2900      	cmp	r1, #0
 8009240:	d1f7      	bne.n	8009232 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009242:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009244:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009246:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 800924a:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800924c:	4620      	mov	r0, r4
 800924e:	f7fa ff75 	bl	800413c <HAL_UART_TxCpltCallback>
}
 8009252:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009254:	06d6      	lsls	r6, r2, #27
 8009256:	d5da      	bpl.n	800920e <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009258:	06c8      	lsls	r0, r1, #27
 800925a:	d5d8      	bpl.n	800920e <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800925c:	2210      	movs	r2, #16
 800925e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	0651      	lsls	r1, r2, #25
 8009264:	f140 8106 	bpl.w	8009474 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009268:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800926a:	6801      	ldr	r1, [r0, #0]
 800926c:	684a      	ldr	r2, [r1, #4]
 800926e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009270:	2a00      	cmp	r2, #0
 8009272:	d0ee      	beq.n	8009252 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009274:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009278:	4295      	cmp	r5, r2
 800927a:	d9ea      	bls.n	8009252 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800927c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009280:	680a      	ldr	r2, [r1, #0]
 8009282:	0692      	lsls	r2, r2, #26
 8009284:	f140 812b 	bpl.w	80094de <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009288:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800928c:	1ae9      	subs	r1, r5, r3
 800928e:	4620      	mov	r0, r4
 8009290:	b289      	uxth	r1, r1
 8009292:	f7ff ffa3 	bl	80091dc <HAL_UARTEx_RxEventCallback>
}
 8009296:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009298:	0215      	lsls	r5, r2, #8
 800929a:	d502      	bpl.n	80092a2 <HAL_UART_IRQHandler+0xc2>
 800929c:	0048      	lsls	r0, r1, #1
 800929e:	f100 80dc 	bmi.w	800945a <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092a2:	01d3      	lsls	r3, r2, #7
 80092a4:	d5d5      	bpl.n	8009252 <HAL_UART_IRQHandler+0x72>
 80092a6:	2900      	cmp	r1, #0
 80092a8:	dad3      	bge.n	8009252 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092aa:	4620      	mov	r0, r4
}
 80092ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092b0:	f000 bfdc 	b.w	800a26c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092b4:	07d0      	lsls	r0, r2, #31
 80092b6:	d509      	bpl.n	80092cc <HAL_UART_IRQHandler+0xec>
 80092b8:	05ce      	lsls	r6, r1, #23
 80092ba:	d507      	bpl.n	80092cc <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092bc:	2001      	movs	r0, #1
 80092be:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092c0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80092c4:	f040 0001 	orr.w	r0, r0, #1
 80092c8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092cc:	0790      	lsls	r0, r2, #30
 80092ce:	f140 8090 	bpl.w	80093f2 <HAL_UART_IRQHandler+0x212>
 80092d2:	07ee      	lsls	r6, r5, #31
 80092d4:	d50a      	bpl.n	80092ec <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092d6:	2002      	movs	r0, #2
 80092d8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092da:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80092de:	f040 0004 	orr.w	r0, r0, #4
 80092e2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e6:	0750      	lsls	r0, r2, #29
 80092e8:	f100 8089 	bmi.w	80093fe <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092ec:	0716      	lsls	r6, r2, #28
 80092ee:	d50c      	bpl.n	800930a <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092f0:	f001 0020 	and.w	r0, r1, #32
 80092f4:	ea50 000c 	orrs.w	r0, r0, ip
 80092f8:	d007      	beq.n	800930a <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092fa:	2008      	movs	r0, #8
 80092fc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092fe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009302:	f040 0008 	orr.w	r0, r0, #8
 8009306:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800930a:	0510      	lsls	r0, r2, #20
 800930c:	d50a      	bpl.n	8009324 <HAL_UART_IRQHandler+0x144>
 800930e:	014e      	lsls	r6, r1, #5
 8009310:	d508      	bpl.n	8009324 <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009312:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009316:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009318:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800931c:	f040 0020 	orr.w	r0, r0, #32
 8009320:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009324:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009328:	2800      	cmp	r0, #0
 800932a:	d092      	beq.n	8009252 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800932c:	0690      	lsls	r0, r2, #26
 800932e:	d50a      	bpl.n	8009346 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009330:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009334:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 8009338:	4329      	orrs	r1, r5
 800933a:	d004      	beq.n	8009346 <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 800933c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800933e:	b112      	cbz	r2, 8009346 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8009340:	4620      	mov	r0, r4
 8009342:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009344:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8009346:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800934a:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800934c:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009350:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009354:	ea52 0501 	orrs.w	r5, r2, r1
 8009358:	f000 80f2 	beq.w	8009540 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009360:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	e843 2100 	strex	r1, r2, [r3]
 8009368:	2900      	cmp	r1, #0
 800936a:	d1f7      	bne.n	800935c <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800936c:	483f      	ldr	r0, [pc, #252]	; (800946c <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	f103 0208 	add.w	r2, r3, #8
 8009372:	e852 2f00 	ldrex	r2, [r2]
 8009376:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	f103 0508 	add.w	r5, r3, #8
 800937c:	e845 2100 	strex	r1, r2, [r5]
 8009380:	2900      	cmp	r1, #0
 8009382:	d1f4      	bne.n	800936e <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009384:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009386:	2a01      	cmp	r2, #1
 8009388:	d052      	beq.n	8009430 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800938c:	2120      	movs	r1, #32
 800938e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009392:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009394:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8009396:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009398:	064a      	lsls	r2, r1, #25
 800939a:	d55a      	bpl.n	8009452 <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	f103 0208 	add.w	r2, r3, #8
 80093a0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	f103 0008 	add.w	r0, r3, #8
 80093ac:	e840 2100 	strex	r1, r2, [r0]
 80093b0:	2900      	cmp	r1, #0
 80093b2:	d1f3      	bne.n	800939c <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 80093b4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d04b      	beq.n	8009452 <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093ba:	4b2d      	ldr	r3, [pc, #180]	; (8009470 <HAL_UART_IRQHandler+0x290>)
 80093bc:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093be:	f7fd f90b 	bl	80065d8 <HAL_DMA_Abort_IT>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	f43f af45 	beq.w	8009252 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093c8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80093ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80093cc:	e00e      	b.n	80093ec <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093ce:	0696      	lsls	r6, r2, #26
 80093d0:	f57f af1a 	bpl.w	8009208 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093d4:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093d8:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 80093dc:	ea5c 0c0e 	orrs.w	ip, ip, lr
 80093e0:	f43f af12 	beq.w	8009208 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 80093e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f43f af33 	beq.w	8009252 <HAL_UART_IRQHandler+0x72>
}
 80093ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093f0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093f2:	0756      	lsls	r6, r2, #29
 80093f4:	f57f af7a 	bpl.w	80092ec <HAL_UART_IRQHandler+0x10c>
 80093f8:	07e8      	lsls	r0, r5, #31
 80093fa:	f57f af77 	bpl.w	80092ec <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093fe:	2004      	movs	r0, #4
 8009400:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009402:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009406:	f040 0002 	orr.w	r0, r0, #2
 800940a:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800940e:	e76d      	b.n	80092ec <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 8009410:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009412:	2b00      	cmp	r3, #0
 8009414:	f43f af1d 	beq.w	8009252 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8009418:	4620      	mov	r0, r4
}
 800941a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800941e:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8009424:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009426:	621a      	str	r2, [r3, #32]
}
 8009428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800942c:	f000 bf1c 	b.w	800a268 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009434:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	e843 2100 	strex	r1, r2, [r3]
 800943c:	2900      	cmp	r1, #0
 800943e:	d0a4      	beq.n	800938a <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	e853 2f00 	ldrex	r2, [r3]
 8009444:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	e843 2100 	strex	r1, r2, [r3]
 800944c:	2900      	cmp	r1, #0
 800944e:	d1ef      	bne.n	8009430 <HAL_UART_IRQHandler+0x250>
 8009450:	e79b      	b.n	800938a <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff fe4c 	bl	80090f0 <HAL_UART_ErrorCallback>
}
 8009458:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800945a:	4620      	mov	r0, r4
}
 800945c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009460:	f000 bf06 	b.w	800a270 <HAL_UARTEx_TxFifoEmptyCallback>
 8009464:	10000001 	.word	0x10000001
 8009468:	04000120 	.word	0x04000120
 800946c:	effffffe 	.word	0xeffffffe
 8009470:	080091c9 	.word	0x080091c9
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009474:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8009478:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800947c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 8009480:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009482:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8009484:	2a00      	cmp	r2, #0
 8009486:	f43f aee4 	beq.w	8009252 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800948a:	1a41      	subs	r1, r0, r1
 800948c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800948e:	2900      	cmp	r1, #0
 8009490:	f43f aedf 	beq.w	8009252 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009494:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009498:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	e843 2000 	strex	r0, r2, [r3]
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d1f7      	bne.n	8009494 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094a4:	4d29      	ldr	r5, [pc, #164]	; (800954c <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	f103 0208 	add.w	r2, r3, #8
 80094aa:	e852 2f00 	ldrex	r2, [r2]
 80094ae:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	f103 0c08 	add.w	ip, r3, #8
 80094b4:	e84c 2000 	strex	r0, r2, [ip]
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d1f4      	bne.n	80094a6 <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 80094bc:	2220      	movs	r2, #32
 80094be:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80094c2:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	e843 2000 	strex	r0, r2, [r3]
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d1f7      	bne.n	80094c6 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7ff fe80 	bl	80091dc <HAL_UARTEx_RxEventCallback>
}
 80094dc:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	e843 2100 	strex	r1, r2, [r3]
 80094ea:	2900      	cmp	r1, #0
 80094ec:	d1f7      	bne.n	80094de <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	f103 0208 	add.w	r2, r3, #8
 80094f2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	f103 0508 	add.w	r5, r3, #8
 80094fe:	e845 2100 	strex	r1, r2, [r5]
 8009502:	2900      	cmp	r1, #0
 8009504:	d1f3      	bne.n	80094ee <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	f103 0208 	add.w	r2, r3, #8
 800950a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800950e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	f103 0508 	add.w	r5, r3, #8
 8009516:	e845 2100 	strex	r1, r2, [r5]
 800951a:	2900      	cmp	r1, #0
 800951c:	d1f3      	bne.n	8009506 <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 800951e:	2220      	movs	r2, #32
 8009520:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009524:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	e843 2100 	strex	r1, r2, [r3]
 8009532:	2900      	cmp	r1, #0
 8009534:	d1f7      	bne.n	8009526 <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009536:	f7fd f815 	bl	8006564 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800953a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800953e:	e6a3      	b.n	8009288 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8009540:	4620      	mov	r0, r4
 8009542:	f7ff fdd5 	bl	80090f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	effffffe 	.word	0xeffffffe

08009550 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8009550:	b508      	push	{r3, lr}
 8009552:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009558:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	e843 2100 	strex	r1, r2, [r3]
 8009560:	2900      	cmp	r1, #0
 8009562:	d1f7      	bne.n	8009554 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	f103 0208 	add.w	r2, r3, #8
 8009568:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	f103 0c08 	add.w	ip, r3, #8
 8009574:	e84c 2100 	strex	r1, r2, [ip]
 8009578:	2900      	cmp	r1, #0
 800957a:	d1f3      	bne.n	8009564 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800957c:	2220      	movs	r2, #32
 800957e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009582:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8009584:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009586:	2a01      	cmp	r2, #1
 8009588:	d112      	bne.n	80095b0 <UART_RxISR_16BIT.part.0+0x60>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958a:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009590:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	e843 2100 	strex	r1, r2, [r3]
 8009598:	2900      	cmp	r1, #0
 800959a:	d1f7      	bne.n	800958c <UART_RxISR_16BIT.part.0+0x3c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800959c:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800959e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095a2:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a4:	bf44      	itt	mi
 80095a6:	2210      	movmi	r2, #16
 80095a8:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095aa:	f7ff fe17 	bl	80091dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ae:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80095b0:	f7fa fd8e 	bl	80040d0 <HAL_UART_RxCpltCallback>
}
 80095b4:	bd08      	pop	{r3, pc}
 80095b6:	bf00      	nop

080095b8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095b8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 80095bc:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095c0:	2922      	cmp	r1, #34	; 0x22
 80095c2:	d005      	beq.n	80095d0 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095c4:	6802      	ldr	r2, [r0, #0]
 80095c6:	6993      	ldr	r3, [r2, #24]
 80095c8:	f043 0308 	orr.w	r3, r3, #8
 80095cc:	6193      	str	r3, [r2, #24]
 80095ce:	4770      	bx	lr
{
 80095d0:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095d2:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 80095d4:	6d81      	ldr	r1, [r0, #88]	; 0x58
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095d6:	6a64      	ldr	r4, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80095d8:	4022      	ands	r2, r4
 80095da:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80095de:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 80095e2:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80095e4:	3a01      	subs	r2, #1
 80095e6:	b292      	uxth	r2, r2
 80095e8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80095ec:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	b91b      	cbnz	r3, 80095fc <UART_RxISR_16BIT+0x44>
  }
}
 80095f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f8:	f7ff bfaa 	b.w	8009550 <UART_RxISR_16BIT.part.0>
 80095fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop

08009604 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009604:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 8009608:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800960c:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800960e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009610:	d004      	beq.n	800961c <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009612:	6993      	ldr	r3, [r2, #24]
 8009614:	f043 0308 	orr.w	r3, r3, #8
 8009618:	6193      	str	r3, [r2, #24]
}
 800961a:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800961c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800961e:	400a      	ands	r2, r1
 8009620:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8009622:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8009624:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8009628:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800962a:	3a01      	subs	r2, #1
 800962c:	b292      	uxth	r2, r2
 800962e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8009632:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8009636:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8009638:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800963a:	6581      	str	r1, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 800963c:	2a00      	cmp	r2, #0
 800963e:	d1ec      	bne.n	800961a <UART_RxISR_8BIT+0x16>
 8009640:	f7ff bf86 	b.w	8009550 <UART_RxISR_16BIT.part.0>

08009644 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009648:	6802      	ldr	r2, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 800964a:	f8b0 b060 	ldrh.w	fp, [r0, #96]	; 0x60
{
 800964e:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009650:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009652:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009654:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009656:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800965a:	2922      	cmp	r1, #34	; 0x22
 800965c:	d006      	beq.n	800966c <UART_RxISR_8BIT_FIFOEN+0x28>
 800965e:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009660:	6992      	ldr	r2, [r2, #24]
 8009662:	f042 0208 	orr.w	r2, r2, #8
 8009666:	619a      	str	r2, [r3, #24]
  }
}
 8009668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800966c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 80b5 	beq.w	80097e0 <UART_RxISR_8BIT_FIFOEN+0x19c>
 8009676:	0685      	lsls	r5, r0, #26
 8009678:	d57b      	bpl.n	8009772 <UART_RxISR_8BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800967a:	f8df a170 	ldr.w	sl, [pc, #368]	; 80097ec <UART_RxISR_8BIT_FIFOEN+0x1a8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800967e:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009682:	f006 0601 	and.w	r6, r6, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009686:	fa5f fb8b 	uxtb.w	fp, fp
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800968a:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800968e:	f04f 0904 	mov.w	r9, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009692:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009696:	ea0b 0202 	and.w	r2, fp, r2
 800969a:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 800969c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80096a0:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr++;
 80096a2:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80096a4:	3901      	subs	r1, #1
 80096a6:	b289      	uxth	r1, r1
 80096a8:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80096ac:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 80096ae:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80096b0:	0768      	lsls	r0, r5, #29
      huart->pRxBuffPtr++;
 80096b2:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80096b4:	d01a      	beq.n	80096ec <UART_RxISR_8BIT_FIFOEN+0xa8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096b6:	07e9      	lsls	r1, r5, #31
 80096b8:	d508      	bpl.n	80096cc <UART_RxISR_8BIT_FIFOEN+0x88>
 80096ba:	b13f      	cbz	r7, 80096cc <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096bc:	2201      	movs	r2, #1
 80096be:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80096c4:	f042 0201 	orr.w	r2, r2, #1
 80096c8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096cc:	07aa      	lsls	r2, r5, #30
 80096ce:	d515      	bpl.n	80096fc <UART_RxISR_8BIT_FIFOEN+0xb8>
 80096d0:	b14e      	cbz	r6, 80096e6 <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096d2:	2202      	movs	r2, #2
 80096d4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096d6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096da:	0768      	lsls	r0, r5, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096dc:	f042 0204 	orr.w	r2, r2, #4
 80096e0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096e4:	d40e      	bmi.n	8009704 <UART_RxISR_8BIT_FIFOEN+0xc0>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80096ea:	b9bb      	cbnz	r3, 800971c <UART_RxISR_8BIT_FIFOEN+0xd8>
      if (huart->RxXferCount == 0U)
 80096ec:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	b1eb      	cbz	r3, 8009730 <UART_RxISR_8BIT_FIFOEN+0xec>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096f4:	06ab      	lsls	r3, r5, #26
 80096f6:	d53c      	bpl.n	8009772 <UART_RxISR_8BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096f8:	6822      	ldr	r2, [r4, #0]
 80096fa:	e7ca      	b.n	8009692 <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096fc:	0769      	lsls	r1, r5, #29
 80096fe:	d5f2      	bpl.n	80096e6 <UART_RxISR_8BIT_FIFOEN+0xa2>
 8009700:	2e00      	cmp	r6, #0
 8009702:	d0f0      	beq.n	80096e6 <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009704:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009708:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800970c:	f043 0302 	orr.w	r3, r3, #2
 8009710:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009714:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d0e7      	beq.n	80096ec <UART_RxISR_8BIT_FIFOEN+0xa8>
          HAL_UART_ErrorCallback(huart);
 800971c:	4620      	mov	r0, r4
 800971e:	f7ff fce7 	bl	80090f0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009722:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 8009726:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800972a:	b29b      	uxth	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e1      	bne.n	80096f4 <UART_RxISR_8BIT_FIFOEN+0xb0>
 8009730:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009732:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	e843 2100 	strex	r1, r2, [r3]
 800973e:	2900      	cmp	r1, #0
 8009740:	d1f7      	bne.n	8009732 <UART_RxISR_8BIT_FIFOEN+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009742:	f103 0208 	add.w	r2, r3, #8
 8009746:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800974a:	ea02 020a 	and.w	r2, r2, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	f103 0008 	add.w	r0, r3, #8
 8009752:	e840 2100 	strex	r1, r2, [r0]
 8009756:	2900      	cmp	r1, #0
 8009758:	d1f3      	bne.n	8009742 <UART_RxISR_8BIT_FIFOEN+0xfe>
        huart->RxState = HAL_UART_STATE_READY;
 800975a:	2220      	movs	r2, #32
 800975c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009760:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009762:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009764:	2a01      	cmp	r2, #1
 8009766:	d027      	beq.n	80097b8 <UART_RxISR_8BIT_FIFOEN+0x174>
          HAL_UART_RxCpltCallback(huart);
 8009768:	4620      	mov	r0, r4
 800976a:	f7fa fcb1 	bl	80040d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800976e:	06ab      	lsls	r3, r5, #26
 8009770:	d4c2      	bmi.n	80096f8 <UART_RxISR_8BIT_FIFOEN+0xb4>
    rxdatacount = huart->RxXferCount;
 8009772:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009776:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009778:	2b00      	cmp	r3, #0
 800977a:	f43f af75 	beq.w	8009668 <UART_RxISR_8BIT_FIFOEN+0x24>
 800977e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8009782:	429a      	cmp	r2, r3
 8009784:	f67f af70 	bls.w	8009668 <UART_RxISR_8BIT_FIFOEN+0x24>
 8009788:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	f103 0208 	add.w	r2, r3, #8
 800978e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009792:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	f103 0008 	add.w	r0, r3, #8
 800979a:	e840 2100 	strex	r1, r2, [r0]
 800979e:	2900      	cmp	r1, #0
 80097a0:	d1f3      	bne.n	800978a <UART_RxISR_8BIT_FIFOEN+0x146>
      huart->RxISR = UART_RxISR_8BIT;
 80097a2:	4a11      	ldr	r2, [pc, #68]	; (80097e8 <UART_RxISR_8BIT_FIFOEN+0x1a4>)
 80097a4:	6722      	str	r2, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097aa:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	e843 2100 	strex	r1, r2, [r3]
 80097b2:	2900      	cmp	r1, #0
 80097b4:	d1f7      	bne.n	80097a6 <UART_RxISR_8BIT_FIFOEN+0x162>
 80097b6:	e757      	b.n	8009668 <UART_RxISR_8BIT_FIFOEN+0x24>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b8:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097be:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	e843 2100 	strex	r1, r2, [r3]
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d1f7      	bne.n	80097ba <UART_RxISR_8BIT_FIFOEN+0x176>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097ca:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097d0:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097d2:	bf44      	itt	mi
 80097d4:	2210      	movmi	r2, #16
 80097d6:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097d8:	4620      	mov	r0, r4
 80097da:	f7ff fcff 	bl	80091dc <HAL_UARTEx_RxEventCallback>
 80097de:	e789      	b.n	80096f4 <UART_RxISR_8BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 80097e0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097e4:	e740      	b.n	8009668 <UART_RxISR_8BIT_FIFOEN+0x24>
 80097e6:	bf00      	nop
 80097e8:	08009605 	.word	0x08009605
 80097ec:	effffffe 	.word	0xeffffffe

080097f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097f4:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 80097f6:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097fa:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097fc:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097fe:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009800:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009804:	2a22      	cmp	r2, #34	; 0x22
 8009806:	d005      	beq.n	8009814 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	f042 0208 	orr.w	r2, r2, #8
 800980e:	619a      	str	r2, [r3, #24]
  }
}
 8009810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009814:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8009818:	4683      	mov	fp, r0
 800981a:	2a00      	cmp	r2, #0
 800981c:	f000 80b9 	beq.w	8009992 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8009820:	068c      	lsls	r4, r1, #26
 8009822:	d57c      	bpl.n	800991e <UART_RxISR_16BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009824:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800999c <UART_RxISR_16BIT_FIFOEN+0x1ac>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009828:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800982c:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009830:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009832:	f04f 0804 	mov.w	r8, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8009838:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
 800983c:	ea0a 0202 	and.w	r2, sl, r2
 8009840:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 8009844:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8009848:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
 800984c:	3a01      	subs	r2, #1
 800984e:	b292      	uxth	r2, r2
 8009850:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009854:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009856:	0760      	lsls	r0, r4, #29
 8009858:	d01a      	beq.n	8009890 <UART_RxISR_16BIT_FIFOEN+0xa0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800985a:	07e1      	lsls	r1, r4, #31
 800985c:	d508      	bpl.n	8009870 <UART_RxISR_16BIT_FIFOEN+0x80>
 800985e:	b13e      	cbz	r6, 8009870 <UART_RxISR_16BIT_FIFOEN+0x80>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009860:	2201      	movs	r2, #1
 8009862:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009864:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 8009868:	f042 0201 	orr.w	r2, r2, #1
 800986c:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009870:	07a2      	lsls	r2, r4, #30
 8009872:	d516      	bpl.n	80098a2 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8009874:	b14d      	cbz	r5, 800988a <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009876:	2202      	movs	r2, #2
 8009878:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800987a:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800987e:	0760      	lsls	r0, r4, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009880:	f042 0204 	orr.w	r2, r2, #4
 8009884:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009888:	d40f      	bmi.n	80098aa <UART_RxISR_16BIT_FIFOEN+0xba>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800988a:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800988e:	b9c3      	cbnz	r3, 80098c2 <UART_RxISR_16BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8009890:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8009894:	b29b      	uxth	r3, r3
 8009896:	b1f3      	cbz	r3, 80098d6 <UART_RxISR_16BIT_FIFOEN+0xe6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009898:	06a3      	lsls	r3, r4, #26
 800989a:	d540      	bpl.n	800991e <UART_RxISR_16BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800989c:	f8db 3000 	ldr.w	r3, [fp]
 80098a0:	e7c9      	b.n	8009836 <UART_RxISR_16BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098a2:	0761      	lsls	r1, r4, #29
 80098a4:	d5f1      	bpl.n	800988a <UART_RxISR_16BIT_FIFOEN+0x9a>
 80098a6:	2d00      	cmp	r5, #0
 80098a8:	d0ef      	beq.n	800988a <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098aa:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098ae:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80098b2:	f043 0302 	orr.w	r3, r3, #2
 80098b6:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098ba:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0e6      	beq.n	8009890 <UART_RxISR_16BIT_FIFOEN+0xa0>
          HAL_UART_ErrorCallback(huart);
 80098c2:	4658      	mov	r0, fp
 80098c4:	f7ff fc14 	bl	80090f0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c8:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 80098cc:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1e0      	bne.n	8009898 <UART_RxISR_16BIT_FIFOEN+0xa8>
 80098d6:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098da:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	e843 2100 	strex	r1, r2, [r3]
 80098e6:	2900      	cmp	r1, #0
 80098e8:	d1f7      	bne.n	80098da <UART_RxISR_16BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	f103 0208 	add.w	r2, r3, #8
 80098ee:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098f2:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	f103 0008 	add.w	r0, r3, #8
 80098fa:	e840 2100 	strex	r1, r2, [r0]
 80098fe:	2900      	cmp	r1, #0
 8009900:	d1f3      	bne.n	80098ea <UART_RxISR_16BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 8009902:	2220      	movs	r2, #32
 8009904:	f8cb 2088 	str.w	r2, [fp, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009908:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
        huart->RxISR = NULL;
 800990c:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009910:	2a01      	cmp	r2, #1
 8009912:	d029      	beq.n	8009968 <UART_RxISR_16BIT_FIFOEN+0x178>
          HAL_UART_RxCpltCallback(huart);
 8009914:	4658      	mov	r0, fp
 8009916:	f7fa fbdb 	bl	80040d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800991a:	06a3      	lsls	r3, r4, #26
 800991c:	d4be      	bmi.n	800989c <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 800991e:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8009922:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009924:	2b00      	cmp	r3, #0
 8009926:	f43f af73 	beq.w	8009810 <UART_RxISR_16BIT_FIFOEN+0x20>
 800992a:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
 800992e:	429a      	cmp	r2, r3
 8009930:	f67f af6e 	bls.w	8009810 <UART_RxISR_16BIT_FIFOEN+0x20>
 8009934:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	f103 0208 	add.w	r2, r3, #8
 800993c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009940:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	f103 0008 	add.w	r0, r3, #8
 8009948:	e840 2100 	strex	r1, r2, [r0]
 800994c:	2900      	cmp	r1, #0
 800994e:	d1f3      	bne.n	8009938 <UART_RxISR_16BIT_FIFOEN+0x148>
      huart->RxISR = UART_RxISR_16BIT;
 8009950:	4a11      	ldr	r2, [pc, #68]	; (8009998 <UART_RxISR_16BIT_FIFOEN+0x1a8>)
 8009952:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009956:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800995a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	e843 2100 	strex	r1, r2, [r3]
 8009962:	2900      	cmp	r1, #0
 8009964:	d1f7      	bne.n	8009956 <UART_RxISR_16BIT_FIFOEN+0x166>
 8009966:	e753      	b.n	8009810 <UART_RxISR_16BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009968:	f8cb 106c 	str.w	r1, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009970:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	e843 2100 	strex	r1, r2, [r3]
 8009978:	2900      	cmp	r1, #0
 800997a:	d1f7      	bne.n	800996c <UART_RxISR_16BIT_FIFOEN+0x17c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800997c:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800997e:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009982:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009984:	bf44      	itt	mi
 8009986:	2210      	movmi	r2, #16
 8009988:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800998a:	4658      	mov	r0, fp
 800998c:	f7ff fc26 	bl	80091dc <HAL_UARTEx_RxEventCallback>
 8009990:	e782      	b.n	8009898 <UART_RxISR_16BIT_FIFOEN+0xa8>
    rxdatacount = huart->RxXferCount;
 8009992:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009996:	e73b      	b.n	8009810 <UART_RxISR_16BIT_FIFOEN+0x20>
 8009998:	080095b9 	.word	0x080095b9
 800999c:	effffffe 	.word	0xeffffffe

080099a0 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80099a2:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d002      	beq.n	80099b0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80099aa:	f7ff fb9f 	bl	80090ec <HAL_UART_RxHalfCpltCallback>
}
 80099ae:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80099b0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80099b4:	0849      	lsrs	r1, r1, #1
 80099b6:	f7ff fc11 	bl	80091dc <HAL_UARTEx_RxEventCallback>
}
 80099ba:	bd08      	pop	{r3, pc}

080099bc <UART_DMAReceiveCplt>:
{
 80099bc:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80099be:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	f012 0220 	ands.w	r2, r2, #32
 80099c8:	d128      	bne.n	8009a1c <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 80099ca:	6803      	ldr	r3, [r0, #0]
 80099cc:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	e843 2100 	strex	r1, r2, [r3]
 80099dc:	2900      	cmp	r1, #0
 80099de:	d1f7      	bne.n	80099d0 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	f103 0208 	add.w	r2, r3, #8
 80099e4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ec:	f103 0c08 	add.w	ip, r3, #8
 80099f0:	e84c 2100 	strex	r1, r2, [ip]
 80099f4:	2900      	cmp	r1, #0
 80099f6:	d1f3      	bne.n	80099e0 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f8:	f103 0208 	add.w	r2, r3, #8
 80099fc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	f103 0c08 	add.w	ip, r3, #8
 8009a08:	e84c 2100 	strex	r1, r2, [ip]
 8009a0c:	2900      	cmp	r1, #0
 8009a0e:	d1f3      	bne.n	80099f8 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8009a10:	2220      	movs	r2, #32
 8009a12:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a16:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8009a18:	2a01      	cmp	r2, #1
 8009a1a:	d005      	beq.n	8009a28 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d013      	beq.n	8009a4a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009a22:	f7fa fb55 	bl	80040d0 <HAL_UART_RxCpltCallback>
}
 8009a26:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	e843 2100 	strex	r1, r2, [r3]
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d0f1      	beq.n	8009a1c <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a38:	e853 2f00 	ldrex	r2, [r3]
 8009a3c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a40:	e843 2100 	strex	r1, r2, [r3]
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d1ef      	bne.n	8009a28 <UART_DMAReceiveCplt+0x6c>
 8009a48:	e7e8      	b.n	8009a1c <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a4a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009a4e:	f7ff fbc5 	bl	80091dc <HAL_UARTEx_RxEventCallback>
}
 8009a52:	bd08      	pop	{r3, pc}

08009a54 <UART_SetConfig>:
{
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a58:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a5a:	6882      	ldr	r2, [r0, #8]
 8009a5c:	6900      	ldr	r0, [r0, #16]
 8009a5e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a60:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a62:	4302      	orrs	r2, r0
 8009a64:	430a      	orrs	r2, r1
 8009a66:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a68:	49b2      	ldr	r1, [pc, #712]	; (8009d34 <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a6a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a6c:	4029      	ands	r1, r5
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	68e1      	ldr	r1, [r4, #12]
 8009a76:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009a7a:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a7c:	49ae      	ldr	r1, [pc, #696]	; (8009d38 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a7e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a80:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a82:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a84:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a86:	f000 8081 	beq.w	8009b8c <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8009a8a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a8c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009a90:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8009a94:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a96:	430a      	orrs	r2, r1
 8009a98:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009a9e:	f022 020f 	bic.w	r2, r2, #15
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009aa6:	4aa5      	ldr	r2, [pc, #660]	; (8009d3c <UART_SetConfig+0x2e8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d027      	beq.n	8009afc <UART_SetConfig+0xa8>
 8009aac:	4aa4      	ldr	r2, [pc, #656]	; (8009d40 <UART_SetConfig+0x2ec>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d04b      	beq.n	8009b4a <UART_SetConfig+0xf6>
 8009ab2:	4aa4      	ldr	r2, [pc, #656]	; (8009d44 <UART_SetConfig+0x2f0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	f000 8111 	beq.w	8009cdc <UART_SetConfig+0x288>
 8009aba:	4aa3      	ldr	r2, [pc, #652]	; (8009d48 <UART_SetConfig+0x2f4>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	f000 80b9 	beq.w	8009c34 <UART_SetConfig+0x1e0>
 8009ac2:	4aa2      	ldr	r2, [pc, #648]	; (8009d4c <UART_SetConfig+0x2f8>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d111      	bne.n	8009aec <UART_SetConfig+0x98>
 8009ac8:	4ba1      	ldr	r3, [pc, #644]	; (8009d50 <UART_SetConfig+0x2fc>)
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad6:	f000 8126 	beq.w	8009d26 <UART_SetConfig+0x2d2>
 8009ada:	f200 80d5 	bhi.w	8009c88 <UART_SetConfig+0x234>
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 80d9 	beq.w	8009c96 <UART_SetConfig+0x242>
 8009ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae8:	f000 80b0 	beq.w	8009c4c <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 8009aec:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8009aee:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8009af0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8009af4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8009af8:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009afc:	4b94      	ldr	r3, [pc, #592]	; (8009d50 <UART_SetConfig+0x2fc>)
 8009afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b02:	f003 0303 	and.w	r3, r3, #3
 8009b06:	3b01      	subs	r3, #1
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	f240 808d 	bls.w	8009c28 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b0e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009b12:	f000 8103 	beq.w	8009d1c <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b16:	f7fd ff17 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f000 80dc 	beq.w	8009cd8 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b22:	6862      	ldr	r2, [r4, #4]
 8009b24:	4b8b      	ldr	r3, [pc, #556]	; (8009d54 <UART_SetConfig+0x300>)
 8009b26:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009b2a:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b2e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b32:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009b36:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b3a:	f1a3 0210 	sub.w	r2, r3, #16
 8009b3e:	428a      	cmp	r2, r1
 8009b40:	d8d4      	bhi.n	8009aec <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b42:	6822      	ldr	r2, [r4, #0]
 8009b44:	2000      	movs	r0, #0
 8009b46:	60d3      	str	r3, [r2, #12]
 8009b48:	e7d1      	b.n	8009aee <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b4a:	4b81      	ldr	r3, [pc, #516]	; (8009d50 <UART_SetConfig+0x2fc>)
 8009b4c:	4a82      	ldr	r2, [pc, #520]	; (8009d58 <UART_SetConfig+0x304>)
 8009b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b52:	f003 030c 	and.w	r3, r3, #12
 8009b56:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009b5c:	d07c      	beq.n	8009c58 <UART_SetConfig+0x204>
    switch (clocksource)
 8009b5e:	2b08      	cmp	r3, #8
 8009b60:	d8c4      	bhi.n	8009aec <UART_SetConfig+0x98>
 8009b62:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <UART_SetConfig+0x114>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009c91 	.word	0x08009c91
 8009b6c:	08009b17 	.word	0x08009b17
 8009b70:	08009d13 	.word	0x08009d13
 8009b74:	08009aed 	.word	0x08009aed
 8009b78:	08009c53 	.word	0x08009c53
 8009b7c:	08009aed 	.word	0x08009aed
 8009b80:	08009aed 	.word	0x08009aed
 8009b84:	08009aed 	.word	0x08009aed
 8009b88:	08009d03 	.word	0x08009d03
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b8c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009b90:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009b94:	4311      	orrs	r1, r2
 8009b96:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b9c:	486c      	ldr	r0, [pc, #432]	; (8009d50 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b9e:	f022 020f 	bic.w	r2, r2, #15
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ba6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009baa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bb2:	f000 80ac 	beq.w	8009d0e <UART_SetConfig+0x2ba>
 8009bb6:	d80b      	bhi.n	8009bd0 <UART_SetConfig+0x17c>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d038      	beq.n	8009c2e <UART_SetConfig+0x1da>
 8009bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc0:	d194      	bne.n	8009aec <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 8009bc2:	f7fd fd73 	bl	80076ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f000 8086 	beq.w	8009cd8 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009bce:	e004      	b.n	8009bda <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bd4:	d18a      	bne.n	8009aec <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 8009bd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bda:	4b5e      	ldr	r3, [pc, #376]	; (8009d54 <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bdc:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bde:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8009be2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009be6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009bea:	4299      	cmp	r1, r3
 8009bec:	f63f af7e 	bhi.w	8009aec <UART_SetConfig+0x98>
 8009bf0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8009bf4:	f63f af7a 	bhi.w	8009aec <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f7f7 f86c 	bl	8000cd8 <__aeabi_uldivmod>
 8009c00:	086a      	lsrs	r2, r5, #1
 8009c02:	0203      	lsls	r3, r0, #8
 8009c04:	0209      	lsls	r1, r1, #8
 8009c06:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009c0a:	1898      	adds	r0, r3, r2
 8009c0c:	f141 0100 	adc.w	r1, r1, #0
 8009c10:	462a      	mov	r2, r5
 8009c12:	2300      	movs	r3, #0
 8009c14:	f7f7 f860 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c18:	4a50      	ldr	r2, [pc, #320]	; (8009d5c <UART_SetConfig+0x308>)
 8009c1a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8009c1e:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c20:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c22:	f63f af63 	bhi.w	8009aec <UART_SetConfig+0x98>
 8009c26:	e78c      	b.n	8009b42 <UART_SetConfig+0xee>
 8009c28:	4a4d      	ldr	r2, [pc, #308]	; (8009d60 <UART_SetConfig+0x30c>)
 8009c2a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c2c:	e794      	b.n	8009b58 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c2e:	f7fd fe79 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
        break;
 8009c32:	e7c8      	b.n	8009bc6 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c34:	4b46      	ldr	r3, [pc, #280]	; (8009d50 <UART_SetConfig+0x2fc>)
 8009c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c3e:	2b80      	cmp	r3, #128	; 0x80
 8009c40:	d071      	beq.n	8009d26 <UART_SetConfig+0x2d2>
 8009c42:	d861      	bhi.n	8009d08 <UART_SetConfig+0x2b4>
 8009c44:	b33b      	cbz	r3, 8009c96 <UART_SetConfig+0x242>
 8009c46:	2b40      	cmp	r3, #64	; 0x40
 8009c48:	f47f af50 	bne.w	8009aec <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c4c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009c50:	d061      	beq.n	8009d16 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 8009c52:	f7fd fd2b 	bl	80076ac <HAL_RCC_GetSysClockFreq>
        break;
 8009c56:	e760      	b.n	8009b1a <UART_SetConfig+0xc6>
    switch (clocksource)
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	f63f af47 	bhi.w	8009aec <UART_SetConfig+0x98>
 8009c5e:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <UART_SetConfig+0x210>)
 8009c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c64:	08009c9d 	.word	0x08009c9d
 8009c68:	08009d1d 	.word	0x08009d1d
 8009c6c:	08009d23 	.word	0x08009d23
 8009c70:	08009aed 	.word	0x08009aed
 8009c74:	08009d17 	.word	0x08009d17
 8009c78:	08009aed 	.word	0x08009aed
 8009c7c:	08009aed 	.word	0x08009aed
 8009c80:	08009aed 	.word	0x08009aed
 8009c84:	08009ca5 	.word	0x08009ca5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c8c:	d036      	beq.n	8009cfc <UART_SetConfig+0x2a8>
 8009c8e:	e72d      	b.n	8009aec <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c90:	f7fd fe48 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
        break;
 8009c94:	e741      	b.n	8009b1a <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c96:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009c9a:	d1f9      	bne.n	8009c90 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c9c:	f7fd fe42 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009ca0:	b1d0      	cbz	r0, 8009cd8 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ca2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ca4:	6862      	ldr	r2, [r4, #4]
 8009ca6:	4b2b      	ldr	r3, [pc, #172]	; (8009d54 <UART_SetConfig+0x300>)
 8009ca8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8009cac:	fbb0 f0f1 	udiv	r0, r0, r1
 8009cb0:	0853      	lsrs	r3, r2, #1
 8009cb2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cb6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cba:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cbe:	f1a3 0210 	sub.w	r2, r3, #16
 8009cc2:	428a      	cmp	r2, r1
 8009cc4:	f63f af12 	bhi.w	8009aec <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cc8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009ccc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cce:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cd0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60cb      	str	r3, [r1, #12]
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e708      	b.n	8009aee <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cdc:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <UART_SetConfig+0x2fc>)
 8009cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ce6:	2b20      	cmp	r3, #32
 8009ce8:	d01d      	beq.n	8009d26 <UART_SetConfig+0x2d2>
 8009cea:	d804      	bhi.n	8009cf6 <UART_SetConfig+0x2a2>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0d2      	beq.n	8009c96 <UART_SetConfig+0x242>
 8009cf0:	2b10      	cmp	r3, #16
 8009cf2:	d0ab      	beq.n	8009c4c <UART_SetConfig+0x1f8>
 8009cf4:	e6fa      	b.n	8009aec <UART_SetConfig+0x98>
 8009cf6:	2b30      	cmp	r3, #48	; 0x30
 8009cf8:	f47f aef8 	bne.w	8009aec <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cfc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009d00:	d0d0      	beq.n	8009ca4 <UART_SetConfig+0x250>
    switch (clocksource)
 8009d02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009d06:	e70c      	b.n	8009b22 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d08:	2bc0      	cmp	r3, #192	; 0xc0
 8009d0a:	d0f7      	beq.n	8009cfc <UART_SetConfig+0x2a8>
 8009d0c:	e6ee      	b.n	8009aec <UART_SetConfig+0x98>
 8009d0e:	4815      	ldr	r0, [pc, #84]	; (8009d64 <UART_SetConfig+0x310>)
 8009d10:	e763      	b.n	8009bda <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 8009d12:	4814      	ldr	r0, [pc, #80]	; (8009d64 <UART_SetConfig+0x310>)
 8009d14:	e705      	b.n	8009b22 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8009d16:	f7fd fcc9 	bl	80076ac <HAL_RCC_GetSysClockFreq>
        break;
 8009d1a:	e7c1      	b.n	8009ca0 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d1c:	f7fd fe14 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
        break;
 8009d20:	e7be      	b.n	8009ca0 <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 8009d22:	4810      	ldr	r0, [pc, #64]	; (8009d64 <UART_SetConfig+0x310>)
 8009d24:	e7be      	b.n	8009ca4 <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009d2a:	480e      	ldr	r0, [pc, #56]	; (8009d64 <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2c:	f47f aef9 	bne.w	8009b22 <UART_SetConfig+0xce>
 8009d30:	e7b8      	b.n	8009ca4 <UART_SetConfig+0x250>
 8009d32:	bf00      	nop
 8009d34:	cfff69f3 	.word	0xcfff69f3
 8009d38:	40008000 	.word	0x40008000
 8009d3c:	40013800 	.word	0x40013800
 8009d40:	40004400 	.word	0x40004400
 8009d44:	40004800 	.word	0x40004800
 8009d48:	40004c00 	.word	0x40004c00
 8009d4c:	40005000 	.word	0x40005000
 8009d50:	40021000 	.word	0x40021000
 8009d54:	0800e564 	.word	0x0800e564
 8009d58:	0800e554 	.word	0x0800e554
 8009d5c:	000ffcff 	.word	0x000ffcff
 8009d60:	0800e550 	.word	0x0800e550
 8009d64:	00f42400 	.word	0x00f42400

08009d68 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009d6a:	07da      	lsls	r2, r3, #31
{
 8009d6c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d6e:	d506      	bpl.n	8009d7e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d70:	6801      	ldr	r1, [r0, #0]
 8009d72:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009d74:	684a      	ldr	r2, [r1, #4]
 8009d76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009d7a:	4322      	orrs	r2, r4
 8009d7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d7e:	079c      	lsls	r4, r3, #30
 8009d80:	d506      	bpl.n	8009d90 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d82:	6801      	ldr	r1, [r0, #0]
 8009d84:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009d86:	684a      	ldr	r2, [r1, #4]
 8009d88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d8c:	4322      	orrs	r2, r4
 8009d8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d90:	0759      	lsls	r1, r3, #29
 8009d92:	d506      	bpl.n	8009da2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d94:	6801      	ldr	r1, [r0, #0]
 8009d96:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009d98:	684a      	ldr	r2, [r1, #4]
 8009d9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d9e:	4322      	orrs	r2, r4
 8009da0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009da2:	071a      	lsls	r2, r3, #28
 8009da4:	d506      	bpl.n	8009db4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da6:	6801      	ldr	r1, [r0, #0]
 8009da8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009daa:	684a      	ldr	r2, [r1, #4]
 8009dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009db0:	4322      	orrs	r2, r4
 8009db2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009db4:	06dc      	lsls	r4, r3, #27
 8009db6:	d506      	bpl.n	8009dc6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009db8:	6801      	ldr	r1, [r0, #0]
 8009dba:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009dbc:	688a      	ldr	r2, [r1, #8]
 8009dbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dc2:	4322      	orrs	r2, r4
 8009dc4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dc6:	0699      	lsls	r1, r3, #26
 8009dc8:	d506      	bpl.n	8009dd8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dca:	6801      	ldr	r1, [r0, #0]
 8009dcc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009dce:	688a      	ldr	r2, [r1, #8]
 8009dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dd4:	4322      	orrs	r2, r4
 8009dd6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dd8:	065a      	lsls	r2, r3, #25
 8009dda:	d509      	bpl.n	8009df0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ddc:	6801      	ldr	r1, [r0, #0]
 8009dde:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009de0:	684a      	ldr	r2, [r1, #4]
 8009de2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009de6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009de8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dec:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dee:	d00b      	beq.n	8009e08 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009df0:	061b      	lsls	r3, r3, #24
 8009df2:	d506      	bpl.n	8009e02 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009df4:	6802      	ldr	r2, [r0, #0]
 8009df6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009df8:	6853      	ldr	r3, [r2, #4]
 8009dfa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	6053      	str	r3, [r2, #4]
}
 8009e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e06:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e08:	684a      	ldr	r2, [r1, #4]
 8009e0a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009e0c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009e10:	4322      	orrs	r2, r4
 8009e12:	604a      	str	r2, [r1, #4]
 8009e14:	e7ec      	b.n	8009df0 <UART_AdvFeatureConfig+0x88>
 8009e16:	bf00      	nop

08009e18 <UART_WaitOnFlagUntilTimeout>:
{
 8009e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e20:	6804      	ldr	r4, [r0, #0]
{
 8009e22:	4607      	mov	r7, r0
 8009e24:	460e      	mov	r6, r1
 8009e26:	4615      	mov	r5, r2
 8009e28:	4699      	mov	r9, r3
 8009e2a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009e2e:	d10a      	bne.n	8009e46 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e30:	69e3      	ldr	r3, [r4, #28]
 8009e32:	ea36 0303 	bics.w	r3, r6, r3
 8009e36:	bf0c      	ite	eq
 8009e38:	2301      	moveq	r3, #1
 8009e3a:	2300      	movne	r3, #0
 8009e3c:	429d      	cmp	r5, r3
 8009e3e:	d0f7      	beq.n	8009e30 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8009e40:	2000      	movs	r0, #0
}
 8009e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e46:	69e2      	ldr	r2, [r4, #28]
 8009e48:	ea36 0202 	bics.w	r2, r6, r2
 8009e4c:	bf0c      	ite	eq
 8009e4e:	2301      	moveq	r3, #1
 8009e50:	2300      	movne	r3, #0
 8009e52:	42ab      	cmp	r3, r5
 8009e54:	d1f4      	bne.n	8009e40 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e56:	f7f8 ff5d 	bl	8002d14 <HAL_GetTick>
 8009e5a:	eba0 0009 	sub.w	r0, r0, r9
 8009e5e:	4540      	cmp	r0, r8
 8009e60:	d833      	bhi.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e62:	f1b8 0f00 	cmp.w	r8, #0
 8009e66:	d030      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e68:	683c      	ldr	r4, [r7, #0]
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	0758      	lsls	r0, r3, #29
 8009e6e:	4622      	mov	r2, r4
 8009e70:	d5db      	bpl.n	8009e2a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e72:	69e3      	ldr	r3, [r4, #28]
 8009e74:	0519      	lsls	r1, r3, #20
 8009e76:	d5d8      	bpl.n	8009e2a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e7c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e86:	e844 3100 	strex	r1, r3, [r4]
 8009e8a:	b139      	cbz	r1, 8009e9c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8c:	e852 3f00 	ldrex	r3, [r2]
 8009e90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e94:	e842 3100 	strex	r1, r3, [r2]
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	d1f7      	bne.n	8009e8c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	f102 0308 	add.w	r3, r2, #8
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ea4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	f102 0008 	add.w	r0, r2, #8
 8009eac:	e840 3100 	strex	r1, r3, [r0]
 8009eb0:	2900      	cmp	r1, #0
 8009eb2:	d1f3      	bne.n	8009e9c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8009eba:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 8009ec2:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009ec8:	e7bb      	b.n	8009e42 <UART_WaitOnFlagUntilTimeout+0x2a>
 8009eca:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	e842 3100 	strex	r1, r3, [r2]
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	d1f7      	bne.n	8009ecc <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	f102 0308 	add.w	r3, r2, #8
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	f102 0008 	add.w	r0, r2, #8
 8009eec:	e840 3100 	strex	r1, r3, [r0]
 8009ef0:	2900      	cmp	r1, #0
 8009ef2:	d1f3      	bne.n	8009edc <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8009ef4:	2320      	movs	r3, #32
 8009ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8009efa:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 8009f02:	2003      	movs	r0, #3
 8009f04:	e79d      	b.n	8009e42 <UART_WaitOnFlagUntilTimeout+0x2a>
 8009f06:	bf00      	nop

08009f08 <HAL_UART_Transmit>:
{
 8009f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8009f0e:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8009f12:	2820      	cmp	r0, #32
{
 8009f14:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8009f16:	f040 8090 	bne.w	800a03a <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8009f1a:	4689      	mov	r9, r1
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d048      	beq.n	8009fb2 <HAL_UART_Transmit+0xaa>
 8009f20:	4614      	mov	r4, r2
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	d045      	beq.n	8009fb2 <HAL_UART_Transmit+0xaa>
 8009f26:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8009f28:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	f000 8084 	beq.w	800a03a <HAL_UART_Transmit+0x132>
 8009f32:	2301      	movs	r3, #1
 8009f34:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f38:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f3c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f3e:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f42:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8009f46:	f7f8 fee5 	bl	8002d14 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f4a:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8009f4c:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8009f54:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 8009f58:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5a:	d072      	beq.n	800a042 <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 8009f5c:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 8009f60:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8009f62:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8009f64:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009f68:	b1b3      	cbz	r3, 8009f98 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f6a:	682c      	ldr	r4, [r5, #0]
 8009f6c:	1c71      	adds	r1, r6, #1
 8009f6e:	d124      	bne.n	8009fba <HAL_UART_Transmit+0xb2>
 8009f70:	69e2      	ldr	r2, [r4, #28]
 8009f72:	0612      	lsls	r2, r2, #24
 8009f74:	d5fc      	bpl.n	8009f70 <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 8009f76:	f1b9 0f00 	cmp.w	r9, #0
 8009f7a:	d059      	beq.n	800a030 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f7c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009f80:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8009f82:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009f8e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e9      	bne.n	8009f6c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f98:	9600      	str	r6, [sp, #0]
 8009f9a:	463b      	mov	r3, r7
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2140      	movs	r1, #64	; 0x40
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f7ff ff39 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d171      	bne.n	800a08e <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 8009faa:	2320      	movs	r3, #32
 8009fac:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 8009fb0:	e000      	b.n	8009fb4 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 8009fb2:	2001      	movs	r0, #1
}
 8009fb4:	b003      	add	sp, #12
 8009fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fba:	69e3      	ldr	r3, [r4, #28]
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	d4da      	bmi.n	8009f76 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fc0:	f7f8 fea8 	bl	8002d14 <HAL_GetTick>
 8009fc4:	1bc0      	subs	r0, r0, r7
 8009fc6:	4286      	cmp	r6, r0
 8009fc8:	d341      	bcc.n	800a04e <HAL_UART_Transmit+0x146>
 8009fca:	2e00      	cmp	r6, #0
 8009fcc:	d03f      	beq.n	800a04e <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fce:	682c      	ldr	r4, [r5, #0]
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	0752      	lsls	r2, r2, #29
 8009fd4:	4623      	mov	r3, r4
 8009fd6:	d5c9      	bpl.n	8009f6c <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fd8:	69e2      	ldr	r2, [r4, #28]
 8009fda:	0510      	lsls	r0, r2, #20
 8009fdc:	d5c6      	bpl.n	8009f6c <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fe2:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe4:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	e844 2100 	strex	r1, r2, [r4]
 8009ff0:	b139      	cbz	r1, 800a002 <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	e853 2f00 	ldrex	r2, [r3]
 8009ff6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	e843 2100 	strex	r1, r2, [r3]
 8009ffe:	2900      	cmp	r1, #0
 800a000:	d1f7      	bne.n	8009ff2 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	f103 0208 	add.w	r2, r3, #8
 800a006:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	f103 0008 	add.w	r0, r3, #8
 800a012:	e840 2100 	strex	r1, r2, [r0]
 800a016:	2900      	cmp	r1, #0
 800a018:	d1f3      	bne.n	800a002 <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 800a01a:	2320      	movs	r3, #32
 800a01c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800a020:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a024:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 800a028:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a02a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 800a02e:	e7c1      	b.n	8009fb4 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a030:	f838 3b02 	ldrh.w	r3, [r8], #2
 800a034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a038:	e7a2      	b.n	8009f80 <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 800a03a:	2002      	movs	r0, #2
}
 800a03c:	b003      	add	sp, #12
 800a03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a042:	692b      	ldr	r3, [r5, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d189      	bne.n	8009f5c <HAL_UART_Transmit+0x54>
 800a048:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800a04a:	4699      	mov	r9, r3
 800a04c:	e786      	b.n	8009f5c <HAL_UART_Transmit+0x54>
 800a04e:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a050:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a054:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	e843 2100 	strex	r1, r2, [r3]
 800a05c:	2900      	cmp	r1, #0
 800a05e:	d1f7      	bne.n	800a050 <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	f103 0208 	add.w	r2, r3, #8
 800a064:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a068:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06c:	f103 0008 	add.w	r0, r3, #8
 800a070:	e840 2100 	strex	r1, r2, [r0]
 800a074:	2900      	cmp	r1, #0
 800a076:	d1f3      	bne.n	800a060 <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 800a078:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800a07a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800a07c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800a080:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a084:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800a088:	b003      	add	sp, #12
 800a08a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800a08e:	2003      	movs	r0, #3
 800a090:	e790      	b.n	8009fb4 <HAL_UART_Transmit+0xac>
 800a092:	bf00      	nop

0800a094 <HAL_UART_Init>:
  if (huart == NULL)
 800a094:	2800      	cmp	r0, #0
 800a096:	d066      	beq.n	800a166 <HAL_UART_Init+0xd2>
{
 800a098:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800a09a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800a09e:	b082      	sub	sp, #8
 800a0a0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d04c      	beq.n	800a140 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800a0a6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a0a8:	2324      	movs	r3, #36	; 0x24
 800a0aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0b4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800a0b6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0b8:	f7ff fccc 	bl	8009a54 <UART_SetConfig>
 800a0bc:	2801      	cmp	r0, #1
 800a0be:	d03c      	beq.n	800a13a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d135      	bne.n	800a132 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	6859      	ldr	r1, [r3, #4]
 800a0ca:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800a0ce:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0d0:	6899      	ldr	r1, [r3, #8]
 800a0d2:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800a0d6:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a0d8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0da:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800a0dc:	f041 0101 	orr.w	r1, r1, #1
 800a0e0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800a0e6:	f7f8 fe15 	bl	8002d14 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800a0f0:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0f2:	d40e      	bmi.n	800a112 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	075b      	lsls	r3, r3, #29
 800a0f8:	d427      	bmi.n	800a14a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fa:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800a102:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a106:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800a10a:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a10c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800a10e:	b002      	add	sp, #8
 800a110:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a112:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	462a      	mov	r2, r5
 800a11a:	4603      	mov	r3, r0
 800a11c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a120:	4620      	mov	r0, r4
 800a122:	f7ff fe79 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 800a126:	b9e0      	cbnz	r0, 800a162 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a128:	6823      	ldr	r3, [r4, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	075b      	lsls	r3, r3, #29
 800a12e:	d40c      	bmi.n	800a14a <HAL_UART_Init+0xb6>
 800a130:	e7e3      	b.n	800a0fa <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff fe18 	bl	8009d68 <UART_AdvFeatureConfig>
 800a138:	e7c5      	b.n	800a0c6 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800a13a:	2001      	movs	r0, #1
}
 800a13c:	b002      	add	sp, #8
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800a140:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800a144:	f7fb f81e 	bl	8005184 <HAL_UART_MspInit>
 800a148:	e7ad      	b.n	800a0a6 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a14a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	2200      	movs	r2, #0
 800a152:	4633      	mov	r3, r6
 800a154:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a158:	4620      	mov	r0, r4
 800a15a:	f7ff fe5d 	bl	8009e18 <UART_WaitOnFlagUntilTimeout>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d0cb      	beq.n	800a0fa <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800a162:	2003      	movs	r0, #3
 800a164:	e7d3      	b.n	800a10e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800a166:	2001      	movs	r0, #1
}
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop

0800a16c <UART_Start_Receive_DMA>:
{
 800a16c:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a16e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a170:	2500      	movs	r5, #0
 800a172:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 800a176:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800a178:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800a17a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a17e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 800a182:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800a184:	b168      	cbz	r0, 800a1a2 <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a186:	4e20      	ldr	r6, [pc, #128]	; (800a208 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800a188:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a18a:	4613      	mov	r3, r2
 800a18c:	460a      	mov	r2, r1
 800a18e:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a190:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a192:	4e1e      	ldr	r6, [pc, #120]	; (800a20c <UART_Start_Receive_DMA+0xa0>)
 800a194:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a196:	4e1e      	ldr	r6, [pc, #120]	; (800a210 <UART_Start_Receive_DMA+0xa4>)
 800a198:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a19a:	3124      	adds	r1, #36	; 0x24
 800a19c:	f7fc f988 	bl	80064b0 <HAL_DMA_Start_IT>
 800a1a0:	bb40      	cbnz	r0, 800a1f4 <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1a2:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1aa:	b14b      	cbz	r3, 800a1c0 <UART_Start_Receive_DMA+0x54>
 800a1ac:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ae:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	e843 2100 	strex	r1, r2, [r3]
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	d1f7      	bne.n	800a1ae <UART_Start_Receive_DMA+0x42>
 800a1be:	e000      	b.n	800a1c2 <UART_Start_Receive_DMA+0x56>
 800a1c0:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	f103 0208 	add.w	r2, r3, #8
 800a1c6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ca:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ce:	f103 0008 	add.w	r0, r3, #8
 800a1d2:	e840 2100 	strex	r1, r2, [r0]
 800a1d6:	2900      	cmp	r1, #0
 800a1d8:	d1f3      	bne.n	800a1c2 <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	f103 0208 	add.w	r2, r3, #8
 800a1de:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e6:	f103 0108 	add.w	r1, r3, #8
 800a1ea:	e841 2000 	strex	r0, r2, [r1]
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d1f3      	bne.n	800a1da <UART_Start_Receive_DMA+0x6e>
}
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1f4:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800a1f6:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 800a1f8:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1fc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 800a200:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800a202:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	080099bd 	.word	0x080099bd
 800a20c:	080099a1 	.word	0x080099a1
 800a210:	080090f5 	.word	0x080090f5

0800a214 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800a214:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a218:	2b20      	cmp	r3, #32
 800a21a:	d120      	bne.n	800a25e <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800a21c:	b1e9      	cbz	r1, 800a25a <HAL_UART_Receive_DMA+0x46>
 800a21e:	b1e2      	cbz	r2, 800a25a <HAL_UART_Receive_DMA+0x46>
    __HAL_LOCK(huart);
 800a220:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a224:	2b01      	cmp	r3, #1
 800a226:	d01a      	beq.n	800a25e <HAL_UART_Receive_DMA+0x4a>
{
 800a228:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a22a:	4b0e      	ldr	r3, [pc, #56]	; (800a264 <HAL_UART_Receive_DMA+0x50>)
 800a22c:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800a22e:	2501      	movs	r5, #1
 800a230:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a234:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a236:	f04f 0500 	mov.w	r5, #0
 800a23a:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a23c:	d00a      	beq.n	800a254 <HAL_UART_Receive_DMA+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a23e:	6863      	ldr	r3, [r4, #4]
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	d507      	bpl.n	800a254 <HAL_UART_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a244:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24c:	e844 3500 	strex	r5, r3, [r4]
 800a250:	2d00      	cmp	r5, #0
 800a252:	d1f7      	bne.n	800a244 <HAL_UART_Receive_DMA+0x30>
}
 800a254:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a256:	f7ff bf89 	b.w	800a16c <UART_Start_Receive_DMA>
      return HAL_ERROR;
 800a25a:	2001      	movs	r0, #1
 800a25c:	4770      	bx	lr
    return HAL_BUSY;
 800a25e:	2002      	movs	r0, #2
}
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	40008000 	.word	0x40008000

0800a268 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop

0800a26c <HAL_UARTEx_RxFifoFullCallback>:
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop

0800a270 <HAL_UARTEx_TxFifoEmptyCallback>:
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop

0800a274 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a274:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d017      	beq.n	800a2ac <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a27c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a27e:	2324      	movs	r3, #36	; 0x24
{
 800a280:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800a282:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a286:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a288:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a28a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800a28c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a290:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800a294:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a296:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a298:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a29a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800a29e:	2220      	movs	r2, #32
 800a2a0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800a2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800a2a8:	4618      	mov	r0, r3
}
 800a2aa:	4770      	bx	lr
  __HAL_LOCK(huart);
 800a2ac:	2002      	movs	r0, #2
}
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2b0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a2b4:	2a01      	cmp	r2, #1
 800a2b6:	d037      	beq.n	800a328 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ba:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a2bc:	2024      	movs	r0, #36	; 0x24
{
 800a2be:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a2c0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2c4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2c6:	6810      	ldr	r0, [r2, #0]
 800a2c8:	f020 0001 	bic.w	r0, r0, #1
 800a2cc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2ce:	6890      	ldr	r0, [r2, #8]
 800a2d0:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800a2d4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2d6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a2d8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2da:	b310      	cbz	r0, 800a322 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2dc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2de:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2e0:	4d12      	ldr	r5, [pc, #72]	; (800a32c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2e2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2e6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2ea:	4911      	ldr	r1, [pc, #68]	; (800a330 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800a2ec:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2f0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2f4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2f8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2fc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2fe:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a300:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a304:	fbb1 f1f5 	udiv	r1, r1, r5
 800a308:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a30c:	2100      	movs	r1, #0
 800a30e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a312:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a314:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a316:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800a31a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a31c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800a320:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a322:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a324:	4608      	mov	r0, r1
 800a326:	e7ef      	b.n	800a308 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a328:	2002      	movs	r0, #2
}
 800a32a:	4770      	bx	lr
 800a32c:	0800e57c 	.word	0x0800e57c
 800a330:	0800e584 	.word	0x0800e584

0800a334 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800a334:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800a338:	2a01      	cmp	r2, #1
 800a33a:	d037      	beq.n	800a3ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800a33c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a33e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a340:	2024      	movs	r0, #36	; 0x24
{
 800a342:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800a344:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a348:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a34a:	6810      	ldr	r0, [r2, #0]
 800a34c:	f020 0001 	bic.w	r0, r0, #1
 800a350:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a352:	6890      	ldr	r0, [r2, #8]
 800a354:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800a358:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a35a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a35c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a35e:	b310      	cbz	r0, 800a3a6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a360:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a362:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a364:	4d12      	ldr	r5, [pc, #72]	; (800a3b0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a366:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a36a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a36e:	4911      	ldr	r1, [pc, #68]	; (800a3b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a370:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a374:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800a378:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800a37c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a380:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a382:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a384:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a388:	fbb1 f1f5 	udiv	r1, r1, r5
 800a38c:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a390:	2100      	movs	r1, #0
 800a392:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a396:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a398:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800a39a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800a39e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800a3a4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800a3a6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	e7ef      	b.n	800a38c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800a3ac:	2002      	movs	r0, #2
}
 800a3ae:	4770      	bx	lr
 800a3b0:	0800e57c 	.word	0x0800e57c
 800a3b4:	0800e584 	.word	0x0800e584

0800a3b8 <__cvt>:
 800a3b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3bc:	ec55 4b10 	vmov	r4, r5, d0
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	bfbb      	ittet	lt
 800a3ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a3ce:	461d      	movlt	r5, r3
 800a3d0:	2300      	movge	r3, #0
 800a3d2:	232d      	movlt	r3, #45	; 0x2d
 800a3d4:	700b      	strb	r3, [r1, #0]
 800a3d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a3dc:	4691      	mov	r9, r2
 800a3de:	f023 0820 	bic.w	r8, r3, #32
 800a3e2:	bfbc      	itt	lt
 800a3e4:	4622      	movlt	r2, r4
 800a3e6:	4614      	movlt	r4, r2
 800a3e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3ec:	d005      	beq.n	800a3fa <__cvt+0x42>
 800a3ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3f2:	d100      	bne.n	800a3f6 <__cvt+0x3e>
 800a3f4:	3601      	adds	r6, #1
 800a3f6:	2102      	movs	r1, #2
 800a3f8:	e000      	b.n	800a3fc <__cvt+0x44>
 800a3fa:	2103      	movs	r1, #3
 800a3fc:	ab03      	add	r3, sp, #12
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	ab02      	add	r3, sp, #8
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	ec45 4b10 	vmov	d0, r4, r5
 800a408:	4653      	mov	r3, sl
 800a40a:	4632      	mov	r2, r6
 800a40c:	f001 f810 	bl	800b430 <_dtoa_r>
 800a410:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a414:	4607      	mov	r7, r0
 800a416:	d102      	bne.n	800a41e <__cvt+0x66>
 800a418:	f019 0f01 	tst.w	r9, #1
 800a41c:	d022      	beq.n	800a464 <__cvt+0xac>
 800a41e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a422:	eb07 0906 	add.w	r9, r7, r6
 800a426:	d110      	bne.n	800a44a <__cvt+0x92>
 800a428:	783b      	ldrb	r3, [r7, #0]
 800a42a:	2b30      	cmp	r3, #48	; 0x30
 800a42c:	d10a      	bne.n	800a444 <__cvt+0x8c>
 800a42e:	2200      	movs	r2, #0
 800a430:	2300      	movs	r3, #0
 800a432:	4620      	mov	r0, r4
 800a434:	4629      	mov	r1, r5
 800a436:	f7f6 fb6f 	bl	8000b18 <__aeabi_dcmpeq>
 800a43a:	b918      	cbnz	r0, 800a444 <__cvt+0x8c>
 800a43c:	f1c6 0601 	rsb	r6, r6, #1
 800a440:	f8ca 6000 	str.w	r6, [sl]
 800a444:	f8da 3000 	ldr.w	r3, [sl]
 800a448:	4499      	add	r9, r3
 800a44a:	2200      	movs	r2, #0
 800a44c:	2300      	movs	r3, #0
 800a44e:	4620      	mov	r0, r4
 800a450:	4629      	mov	r1, r5
 800a452:	f7f6 fb61 	bl	8000b18 <__aeabi_dcmpeq>
 800a456:	b108      	cbz	r0, 800a45c <__cvt+0xa4>
 800a458:	f8cd 900c 	str.w	r9, [sp, #12]
 800a45c:	2230      	movs	r2, #48	; 0x30
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	454b      	cmp	r3, r9
 800a462:	d307      	bcc.n	800a474 <__cvt+0xbc>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a468:	1bdb      	subs	r3, r3, r7
 800a46a:	4638      	mov	r0, r7
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	b004      	add	sp, #16
 800a470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a474:	1c59      	adds	r1, r3, #1
 800a476:	9103      	str	r1, [sp, #12]
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	e7f0      	b.n	800a45e <__cvt+0xa6>

0800a47c <__exponent>:
 800a47c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a47e:	4603      	mov	r3, r0
 800a480:	2900      	cmp	r1, #0
 800a482:	bfb8      	it	lt
 800a484:	4249      	neglt	r1, r1
 800a486:	f803 2b02 	strb.w	r2, [r3], #2
 800a48a:	bfb4      	ite	lt
 800a48c:	222d      	movlt	r2, #45	; 0x2d
 800a48e:	222b      	movge	r2, #43	; 0x2b
 800a490:	2909      	cmp	r1, #9
 800a492:	7042      	strb	r2, [r0, #1]
 800a494:	dd2a      	ble.n	800a4ec <__exponent+0x70>
 800a496:	f10d 0207 	add.w	r2, sp, #7
 800a49a:	4617      	mov	r7, r2
 800a49c:	260a      	movs	r6, #10
 800a49e:	4694      	mov	ip, r2
 800a4a0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a4a4:	fb06 1415 	mls	r4, r6, r5, r1
 800a4a8:	3430      	adds	r4, #48	; 0x30
 800a4aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	2c63      	cmp	r4, #99	; 0x63
 800a4b2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	dcf1      	bgt.n	800a49e <__exponent+0x22>
 800a4ba:	3130      	adds	r1, #48	; 0x30
 800a4bc:	f1ac 0402 	sub.w	r4, ip, #2
 800a4c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a4c4:	1c41      	adds	r1, r0, #1
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	42ba      	cmp	r2, r7
 800a4ca:	d30a      	bcc.n	800a4e2 <__exponent+0x66>
 800a4cc:	f10d 0209 	add.w	r2, sp, #9
 800a4d0:	eba2 020c 	sub.w	r2, r2, ip
 800a4d4:	42bc      	cmp	r4, r7
 800a4d6:	bf88      	it	hi
 800a4d8:	2200      	movhi	r2, #0
 800a4da:	4413      	add	r3, r2
 800a4dc:	1a18      	subs	r0, r3, r0
 800a4de:	b003      	add	sp, #12
 800a4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a4ea:	e7ed      	b.n	800a4c8 <__exponent+0x4c>
 800a4ec:	2330      	movs	r3, #48	; 0x30
 800a4ee:	3130      	adds	r1, #48	; 0x30
 800a4f0:	7083      	strb	r3, [r0, #2]
 800a4f2:	70c1      	strb	r1, [r0, #3]
 800a4f4:	1d03      	adds	r3, r0, #4
 800a4f6:	e7f1      	b.n	800a4dc <__exponent+0x60>

0800a4f8 <_printf_float>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	ed2d 8b02 	vpush	{d8}
 800a500:	b08d      	sub	sp, #52	; 0x34
 800a502:	460c      	mov	r4, r1
 800a504:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a508:	4616      	mov	r6, r2
 800a50a:	461f      	mov	r7, r3
 800a50c:	4605      	mov	r5, r0
 800a50e:	f000 fe8f 	bl	800b230 <_localeconv_r>
 800a512:	f8d0 a000 	ldr.w	sl, [r0]
 800a516:	4650      	mov	r0, sl
 800a518:	f7f5 fed2 	bl	80002c0 <strlen>
 800a51c:	2300      	movs	r3, #0
 800a51e:	930a      	str	r3, [sp, #40]	; 0x28
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	f8d8 3000 	ldr.w	r3, [r8]
 800a528:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a52c:	3307      	adds	r3, #7
 800a52e:	f023 0307 	bic.w	r3, r3, #7
 800a532:	f103 0208 	add.w	r2, r3, #8
 800a536:	f8c8 2000 	str.w	r2, [r8]
 800a53a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a53e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a542:	9307      	str	r3, [sp, #28]
 800a544:	f8cd 8018 	str.w	r8, [sp, #24]
 800a548:	ee08 0a10 	vmov	s16, r0
 800a54c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a554:	4b9e      	ldr	r3, [pc, #632]	; (800a7d0 <_printf_float+0x2d8>)
 800a556:	f04f 32ff 	mov.w	r2, #4294967295
 800a55a:	f7f6 fb0f 	bl	8000b7c <__aeabi_dcmpun>
 800a55e:	bb88      	cbnz	r0, 800a5c4 <_printf_float+0xcc>
 800a560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a564:	4b9a      	ldr	r3, [pc, #616]	; (800a7d0 <_printf_float+0x2d8>)
 800a566:	f04f 32ff 	mov.w	r2, #4294967295
 800a56a:	f7f6 fae9 	bl	8000b40 <__aeabi_dcmple>
 800a56e:	bb48      	cbnz	r0, 800a5c4 <_printf_float+0xcc>
 800a570:	2200      	movs	r2, #0
 800a572:	2300      	movs	r3, #0
 800a574:	4640      	mov	r0, r8
 800a576:	4649      	mov	r1, r9
 800a578:	f7f6 fad8 	bl	8000b2c <__aeabi_dcmplt>
 800a57c:	b110      	cbz	r0, 800a584 <_printf_float+0x8c>
 800a57e:	232d      	movs	r3, #45	; 0x2d
 800a580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a584:	4a93      	ldr	r2, [pc, #588]	; (800a7d4 <_printf_float+0x2dc>)
 800a586:	4b94      	ldr	r3, [pc, #592]	; (800a7d8 <_printf_float+0x2e0>)
 800a588:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a58c:	bf94      	ite	ls
 800a58e:	4690      	movls	r8, r2
 800a590:	4698      	movhi	r8, r3
 800a592:	2303      	movs	r3, #3
 800a594:	6123      	str	r3, [r4, #16]
 800a596:	9b05      	ldr	r3, [sp, #20]
 800a598:	f023 0304 	bic.w	r3, r3, #4
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	f04f 0900 	mov.w	r9, #0
 800a5a2:	9700      	str	r7, [sp, #0]
 800a5a4:	4633      	mov	r3, r6
 800a5a6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 f9da 	bl	800a964 <_printf_common>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f040 8090 	bne.w	800a6d6 <_printf_float+0x1de>
 800a5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ba:	b00d      	add	sp, #52	; 0x34
 800a5bc:	ecbd 8b02 	vpop	{d8}
 800a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	464b      	mov	r3, r9
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	f7f6 fad6 	bl	8000b7c <__aeabi_dcmpun>
 800a5d0:	b140      	cbz	r0, 800a5e4 <_printf_float+0xec>
 800a5d2:	464b      	mov	r3, r9
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	bfbc      	itt	lt
 800a5d8:	232d      	movlt	r3, #45	; 0x2d
 800a5da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5de:	4a7f      	ldr	r2, [pc, #508]	; (800a7dc <_printf_float+0x2e4>)
 800a5e0:	4b7f      	ldr	r3, [pc, #508]	; (800a7e0 <_printf_float+0x2e8>)
 800a5e2:	e7d1      	b.n	800a588 <_printf_float+0x90>
 800a5e4:	6863      	ldr	r3, [r4, #4]
 800a5e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a5ea:	9206      	str	r2, [sp, #24]
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	d13f      	bne.n	800a670 <_printf_float+0x178>
 800a5f0:	2306      	movs	r3, #6
 800a5f2:	6063      	str	r3, [r4, #4]
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	6861      	ldr	r1, [r4, #4]
 800a5f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9303      	str	r3, [sp, #12]
 800a600:	ab0a      	add	r3, sp, #40	; 0x28
 800a602:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a606:	ab09      	add	r3, sp, #36	; 0x24
 800a608:	ec49 8b10 	vmov	d0, r8, r9
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	6022      	str	r2, [r4, #0]
 800a610:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a614:	4628      	mov	r0, r5
 800a616:	f7ff fecf 	bl	800a3b8 <__cvt>
 800a61a:	9b06      	ldr	r3, [sp, #24]
 800a61c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a61e:	2b47      	cmp	r3, #71	; 0x47
 800a620:	4680      	mov	r8, r0
 800a622:	d108      	bne.n	800a636 <_printf_float+0x13e>
 800a624:	1cc8      	adds	r0, r1, #3
 800a626:	db02      	blt.n	800a62e <_printf_float+0x136>
 800a628:	6863      	ldr	r3, [r4, #4]
 800a62a:	4299      	cmp	r1, r3
 800a62c:	dd41      	ble.n	800a6b2 <_printf_float+0x1ba>
 800a62e:	f1ab 0302 	sub.w	r3, fp, #2
 800a632:	fa5f fb83 	uxtb.w	fp, r3
 800a636:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a63a:	d820      	bhi.n	800a67e <_printf_float+0x186>
 800a63c:	3901      	subs	r1, #1
 800a63e:	465a      	mov	r2, fp
 800a640:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a644:	9109      	str	r1, [sp, #36]	; 0x24
 800a646:	f7ff ff19 	bl	800a47c <__exponent>
 800a64a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a64c:	1813      	adds	r3, r2, r0
 800a64e:	2a01      	cmp	r2, #1
 800a650:	4681      	mov	r9, r0
 800a652:	6123      	str	r3, [r4, #16]
 800a654:	dc02      	bgt.n	800a65c <_printf_float+0x164>
 800a656:	6822      	ldr	r2, [r4, #0]
 800a658:	07d2      	lsls	r2, r2, #31
 800a65a:	d501      	bpl.n	800a660 <_printf_float+0x168>
 800a65c:	3301      	adds	r3, #1
 800a65e:	6123      	str	r3, [r4, #16]
 800a660:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a664:	2b00      	cmp	r3, #0
 800a666:	d09c      	beq.n	800a5a2 <_printf_float+0xaa>
 800a668:	232d      	movs	r3, #45	; 0x2d
 800a66a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a66e:	e798      	b.n	800a5a2 <_printf_float+0xaa>
 800a670:	9a06      	ldr	r2, [sp, #24]
 800a672:	2a47      	cmp	r2, #71	; 0x47
 800a674:	d1be      	bne.n	800a5f4 <_printf_float+0xfc>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1bc      	bne.n	800a5f4 <_printf_float+0xfc>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e7b9      	b.n	800a5f2 <_printf_float+0xfa>
 800a67e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a682:	d118      	bne.n	800a6b6 <_printf_float+0x1be>
 800a684:	2900      	cmp	r1, #0
 800a686:	6863      	ldr	r3, [r4, #4]
 800a688:	dd0b      	ble.n	800a6a2 <_printf_float+0x1aa>
 800a68a:	6121      	str	r1, [r4, #16]
 800a68c:	b913      	cbnz	r3, 800a694 <_printf_float+0x19c>
 800a68e:	6822      	ldr	r2, [r4, #0]
 800a690:	07d0      	lsls	r0, r2, #31
 800a692:	d502      	bpl.n	800a69a <_printf_float+0x1a2>
 800a694:	3301      	adds	r3, #1
 800a696:	440b      	add	r3, r1
 800a698:	6123      	str	r3, [r4, #16]
 800a69a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a69c:	f04f 0900 	mov.w	r9, #0
 800a6a0:	e7de      	b.n	800a660 <_printf_float+0x168>
 800a6a2:	b913      	cbnz	r3, 800a6aa <_printf_float+0x1b2>
 800a6a4:	6822      	ldr	r2, [r4, #0]
 800a6a6:	07d2      	lsls	r2, r2, #31
 800a6a8:	d501      	bpl.n	800a6ae <_printf_float+0x1b6>
 800a6aa:	3302      	adds	r3, #2
 800a6ac:	e7f4      	b.n	800a698 <_printf_float+0x1a0>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e7f2      	b.n	800a698 <_printf_float+0x1a0>
 800a6b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b8:	4299      	cmp	r1, r3
 800a6ba:	db05      	blt.n	800a6c8 <_printf_float+0x1d0>
 800a6bc:	6823      	ldr	r3, [r4, #0]
 800a6be:	6121      	str	r1, [r4, #16]
 800a6c0:	07d8      	lsls	r0, r3, #31
 800a6c2:	d5ea      	bpl.n	800a69a <_printf_float+0x1a2>
 800a6c4:	1c4b      	adds	r3, r1, #1
 800a6c6:	e7e7      	b.n	800a698 <_printf_float+0x1a0>
 800a6c8:	2900      	cmp	r1, #0
 800a6ca:	bfd4      	ite	le
 800a6cc:	f1c1 0202 	rsble	r2, r1, #2
 800a6d0:	2201      	movgt	r2, #1
 800a6d2:	4413      	add	r3, r2
 800a6d4:	e7e0      	b.n	800a698 <_printf_float+0x1a0>
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	055a      	lsls	r2, r3, #21
 800a6da:	d407      	bmi.n	800a6ec <_printf_float+0x1f4>
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	4642      	mov	r2, r8
 800a6e0:	4631      	mov	r1, r6
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	47b8      	blx	r7
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d12c      	bne.n	800a744 <_printf_float+0x24c>
 800a6ea:	e764      	b.n	800a5b6 <_printf_float+0xbe>
 800a6ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6f0:	f240 80e0 	bls.w	800a8b4 <_printf_float+0x3bc>
 800a6f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f7f6 fa0c 	bl	8000b18 <__aeabi_dcmpeq>
 800a700:	2800      	cmp	r0, #0
 800a702:	d034      	beq.n	800a76e <_printf_float+0x276>
 800a704:	4a37      	ldr	r2, [pc, #220]	; (800a7e4 <_printf_float+0x2ec>)
 800a706:	2301      	movs	r3, #1
 800a708:	4631      	mov	r1, r6
 800a70a:	4628      	mov	r0, r5
 800a70c:	47b8      	blx	r7
 800a70e:	3001      	adds	r0, #1
 800a710:	f43f af51 	beq.w	800a5b6 <_printf_float+0xbe>
 800a714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a718:	429a      	cmp	r2, r3
 800a71a:	db02      	blt.n	800a722 <_printf_float+0x22a>
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	07d8      	lsls	r0, r3, #31
 800a720:	d510      	bpl.n	800a744 <_printf_float+0x24c>
 800a722:	ee18 3a10 	vmov	r3, s16
 800a726:	4652      	mov	r2, sl
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	f43f af41 	beq.w	800a5b6 <_printf_float+0xbe>
 800a734:	f04f 0800 	mov.w	r8, #0
 800a738:	f104 091a 	add.w	r9, r4, #26
 800a73c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73e:	3b01      	subs	r3, #1
 800a740:	4543      	cmp	r3, r8
 800a742:	dc09      	bgt.n	800a758 <_printf_float+0x260>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	079b      	lsls	r3, r3, #30
 800a748:	f100 8107 	bmi.w	800a95a <_printf_float+0x462>
 800a74c:	68e0      	ldr	r0, [r4, #12]
 800a74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a750:	4298      	cmp	r0, r3
 800a752:	bfb8      	it	lt
 800a754:	4618      	movlt	r0, r3
 800a756:	e730      	b.n	800a5ba <_printf_float+0xc2>
 800a758:	2301      	movs	r3, #1
 800a75a:	464a      	mov	r2, r9
 800a75c:	4631      	mov	r1, r6
 800a75e:	4628      	mov	r0, r5
 800a760:	47b8      	blx	r7
 800a762:	3001      	adds	r0, #1
 800a764:	f43f af27 	beq.w	800a5b6 <_printf_float+0xbe>
 800a768:	f108 0801 	add.w	r8, r8, #1
 800a76c:	e7e6      	b.n	800a73c <_printf_float+0x244>
 800a76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	dc39      	bgt.n	800a7e8 <_printf_float+0x2f0>
 800a774:	4a1b      	ldr	r2, [pc, #108]	; (800a7e4 <_printf_float+0x2ec>)
 800a776:	2301      	movs	r3, #1
 800a778:	4631      	mov	r1, r6
 800a77a:	4628      	mov	r0, r5
 800a77c:	47b8      	blx	r7
 800a77e:	3001      	adds	r0, #1
 800a780:	f43f af19 	beq.w	800a5b6 <_printf_float+0xbe>
 800a784:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a788:	4313      	orrs	r3, r2
 800a78a:	d102      	bne.n	800a792 <_printf_float+0x29a>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	07d9      	lsls	r1, r3, #31
 800a790:	d5d8      	bpl.n	800a744 <_printf_float+0x24c>
 800a792:	ee18 3a10 	vmov	r3, s16
 800a796:	4652      	mov	r2, sl
 800a798:	4631      	mov	r1, r6
 800a79a:	4628      	mov	r0, r5
 800a79c:	47b8      	blx	r7
 800a79e:	3001      	adds	r0, #1
 800a7a0:	f43f af09 	beq.w	800a5b6 <_printf_float+0xbe>
 800a7a4:	f04f 0900 	mov.w	r9, #0
 800a7a8:	f104 0a1a 	add.w	sl, r4, #26
 800a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ae:	425b      	negs	r3, r3
 800a7b0:	454b      	cmp	r3, r9
 800a7b2:	dc01      	bgt.n	800a7b8 <_printf_float+0x2c0>
 800a7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b6:	e792      	b.n	800a6de <_printf_float+0x1e6>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	4652      	mov	r2, sl
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4628      	mov	r0, r5
 800a7c0:	47b8      	blx	r7
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	f43f aef7 	beq.w	800a5b6 <_printf_float+0xbe>
 800a7c8:	f109 0901 	add.w	r9, r9, #1
 800a7cc:	e7ee      	b.n	800a7ac <_printf_float+0x2b4>
 800a7ce:	bf00      	nop
 800a7d0:	7fefffff 	.word	0x7fefffff
 800a7d4:	0800e58c 	.word	0x0800e58c
 800a7d8:	0800e590 	.word	0x0800e590
 800a7dc:	0800e594 	.word	0x0800e594
 800a7e0:	0800e598 	.word	0x0800e598
 800a7e4:	0800e59c 	.word	0x0800e59c
 800a7e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	bfa8      	it	ge
 800a7f0:	461a      	movge	r2, r3
 800a7f2:	2a00      	cmp	r2, #0
 800a7f4:	4691      	mov	r9, r2
 800a7f6:	dc37      	bgt.n	800a868 <_printf_float+0x370>
 800a7f8:	f04f 0b00 	mov.w	fp, #0
 800a7fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a800:	f104 021a 	add.w	r2, r4, #26
 800a804:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	eba3 0309 	sub.w	r3, r3, r9
 800a80c:	455b      	cmp	r3, fp
 800a80e:	dc33      	bgt.n	800a878 <_printf_float+0x380>
 800a810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a814:	429a      	cmp	r2, r3
 800a816:	db3b      	blt.n	800a890 <_printf_float+0x398>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	07da      	lsls	r2, r3, #31
 800a81c:	d438      	bmi.n	800a890 <_printf_float+0x398>
 800a81e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a822:	eba2 0903 	sub.w	r9, r2, r3
 800a826:	9b05      	ldr	r3, [sp, #20]
 800a828:	1ad2      	subs	r2, r2, r3
 800a82a:	4591      	cmp	r9, r2
 800a82c:	bfa8      	it	ge
 800a82e:	4691      	movge	r9, r2
 800a830:	f1b9 0f00 	cmp.w	r9, #0
 800a834:	dc35      	bgt.n	800a8a2 <_printf_float+0x3aa>
 800a836:	f04f 0800 	mov.w	r8, #0
 800a83a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a83e:	f104 0a1a 	add.w	sl, r4, #26
 800a842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a846:	1a9b      	subs	r3, r3, r2
 800a848:	eba3 0309 	sub.w	r3, r3, r9
 800a84c:	4543      	cmp	r3, r8
 800a84e:	f77f af79 	ble.w	800a744 <_printf_float+0x24c>
 800a852:	2301      	movs	r3, #1
 800a854:	4652      	mov	r2, sl
 800a856:	4631      	mov	r1, r6
 800a858:	4628      	mov	r0, r5
 800a85a:	47b8      	blx	r7
 800a85c:	3001      	adds	r0, #1
 800a85e:	f43f aeaa 	beq.w	800a5b6 <_printf_float+0xbe>
 800a862:	f108 0801 	add.w	r8, r8, #1
 800a866:	e7ec      	b.n	800a842 <_printf_float+0x34a>
 800a868:	4613      	mov	r3, r2
 800a86a:	4631      	mov	r1, r6
 800a86c:	4642      	mov	r2, r8
 800a86e:	4628      	mov	r0, r5
 800a870:	47b8      	blx	r7
 800a872:	3001      	adds	r0, #1
 800a874:	d1c0      	bne.n	800a7f8 <_printf_float+0x300>
 800a876:	e69e      	b.n	800a5b6 <_printf_float+0xbe>
 800a878:	2301      	movs	r3, #1
 800a87a:	4631      	mov	r1, r6
 800a87c:	4628      	mov	r0, r5
 800a87e:	9205      	str	r2, [sp, #20]
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	f43f ae97 	beq.w	800a5b6 <_printf_float+0xbe>
 800a888:	9a05      	ldr	r2, [sp, #20]
 800a88a:	f10b 0b01 	add.w	fp, fp, #1
 800a88e:	e7b9      	b.n	800a804 <_printf_float+0x30c>
 800a890:	ee18 3a10 	vmov	r3, s16
 800a894:	4652      	mov	r2, sl
 800a896:	4631      	mov	r1, r6
 800a898:	4628      	mov	r0, r5
 800a89a:	47b8      	blx	r7
 800a89c:	3001      	adds	r0, #1
 800a89e:	d1be      	bne.n	800a81e <_printf_float+0x326>
 800a8a0:	e689      	b.n	800a5b6 <_printf_float+0xbe>
 800a8a2:	9a05      	ldr	r2, [sp, #20]
 800a8a4:	464b      	mov	r3, r9
 800a8a6:	4442      	add	r2, r8
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	47b8      	blx	r7
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	d1c1      	bne.n	800a836 <_printf_float+0x33e>
 800a8b2:	e680      	b.n	800a5b6 <_printf_float+0xbe>
 800a8b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8b6:	2a01      	cmp	r2, #1
 800a8b8:	dc01      	bgt.n	800a8be <_printf_float+0x3c6>
 800a8ba:	07db      	lsls	r3, r3, #31
 800a8bc:	d53a      	bpl.n	800a934 <_printf_float+0x43c>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4642      	mov	r2, r8
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	f43f ae74 	beq.w	800a5b6 <_printf_float+0xbe>
 800a8ce:	ee18 3a10 	vmov	r3, s16
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	47b8      	blx	r7
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f43f ae6b 	beq.w	800a5b6 <_printf_float+0xbe>
 800a8e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a8ec:	f7f6 f914 	bl	8000b18 <__aeabi_dcmpeq>
 800a8f0:	b9d8      	cbnz	r0, 800a92a <_printf_float+0x432>
 800a8f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a8f6:	f108 0201 	add.w	r2, r8, #1
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	47b8      	blx	r7
 800a900:	3001      	adds	r0, #1
 800a902:	d10e      	bne.n	800a922 <_printf_float+0x42a>
 800a904:	e657      	b.n	800a5b6 <_printf_float+0xbe>
 800a906:	2301      	movs	r3, #1
 800a908:	4652      	mov	r2, sl
 800a90a:	4631      	mov	r1, r6
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b8      	blx	r7
 800a910:	3001      	adds	r0, #1
 800a912:	f43f ae50 	beq.w	800a5b6 <_printf_float+0xbe>
 800a916:	f108 0801 	add.w	r8, r8, #1
 800a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a91c:	3b01      	subs	r3, #1
 800a91e:	4543      	cmp	r3, r8
 800a920:	dcf1      	bgt.n	800a906 <_printf_float+0x40e>
 800a922:	464b      	mov	r3, r9
 800a924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a928:	e6da      	b.n	800a6e0 <_printf_float+0x1e8>
 800a92a:	f04f 0800 	mov.w	r8, #0
 800a92e:	f104 0a1a 	add.w	sl, r4, #26
 800a932:	e7f2      	b.n	800a91a <_printf_float+0x422>
 800a934:	2301      	movs	r3, #1
 800a936:	4642      	mov	r2, r8
 800a938:	e7df      	b.n	800a8fa <_printf_float+0x402>
 800a93a:	2301      	movs	r3, #1
 800a93c:	464a      	mov	r2, r9
 800a93e:	4631      	mov	r1, r6
 800a940:	4628      	mov	r0, r5
 800a942:	47b8      	blx	r7
 800a944:	3001      	adds	r0, #1
 800a946:	f43f ae36 	beq.w	800a5b6 <_printf_float+0xbe>
 800a94a:	f108 0801 	add.w	r8, r8, #1
 800a94e:	68e3      	ldr	r3, [r4, #12]
 800a950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a952:	1a5b      	subs	r3, r3, r1
 800a954:	4543      	cmp	r3, r8
 800a956:	dcf0      	bgt.n	800a93a <_printf_float+0x442>
 800a958:	e6f8      	b.n	800a74c <_printf_float+0x254>
 800a95a:	f04f 0800 	mov.w	r8, #0
 800a95e:	f104 0919 	add.w	r9, r4, #25
 800a962:	e7f4      	b.n	800a94e <_printf_float+0x456>

0800a964 <_printf_common>:
 800a964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a968:	4616      	mov	r6, r2
 800a96a:	4699      	mov	r9, r3
 800a96c:	688a      	ldr	r2, [r1, #8]
 800a96e:	690b      	ldr	r3, [r1, #16]
 800a970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a974:	4293      	cmp	r3, r2
 800a976:	bfb8      	it	lt
 800a978:	4613      	movlt	r3, r2
 800a97a:	6033      	str	r3, [r6, #0]
 800a97c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a980:	4607      	mov	r7, r0
 800a982:	460c      	mov	r4, r1
 800a984:	b10a      	cbz	r2, 800a98a <_printf_common+0x26>
 800a986:	3301      	adds	r3, #1
 800a988:	6033      	str	r3, [r6, #0]
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	0699      	lsls	r1, r3, #26
 800a98e:	bf42      	ittt	mi
 800a990:	6833      	ldrmi	r3, [r6, #0]
 800a992:	3302      	addmi	r3, #2
 800a994:	6033      	strmi	r3, [r6, #0]
 800a996:	6825      	ldr	r5, [r4, #0]
 800a998:	f015 0506 	ands.w	r5, r5, #6
 800a99c:	d106      	bne.n	800a9ac <_printf_common+0x48>
 800a99e:	f104 0a19 	add.w	sl, r4, #25
 800a9a2:	68e3      	ldr	r3, [r4, #12]
 800a9a4:	6832      	ldr	r2, [r6, #0]
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	42ab      	cmp	r3, r5
 800a9aa:	dc26      	bgt.n	800a9fa <_printf_common+0x96>
 800a9ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9b0:	1e13      	subs	r3, r2, #0
 800a9b2:	6822      	ldr	r2, [r4, #0]
 800a9b4:	bf18      	it	ne
 800a9b6:	2301      	movne	r3, #1
 800a9b8:	0692      	lsls	r2, r2, #26
 800a9ba:	d42b      	bmi.n	800aa14 <_printf_common+0xb0>
 800a9bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	47c0      	blx	r8
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d01e      	beq.n	800aa08 <_printf_common+0xa4>
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	f003 0306 	and.w	r3, r3, #6
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	bf02      	ittt	eq
 800a9d6:	68e5      	ldreq	r5, [r4, #12]
 800a9d8:	6833      	ldreq	r3, [r6, #0]
 800a9da:	1aed      	subeq	r5, r5, r3
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	bf0c      	ite	eq
 800a9e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9e4:	2500      	movne	r5, #0
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	bfc4      	itt	gt
 800a9ea:	1a9b      	subgt	r3, r3, r2
 800a9ec:	18ed      	addgt	r5, r5, r3
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	341a      	adds	r4, #26
 800a9f2:	42b5      	cmp	r5, r6
 800a9f4:	d11a      	bne.n	800aa2c <_printf_common+0xc8>
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	e008      	b.n	800aa0c <_printf_common+0xa8>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4652      	mov	r2, sl
 800a9fe:	4649      	mov	r1, r9
 800aa00:	4638      	mov	r0, r7
 800aa02:	47c0      	blx	r8
 800aa04:	3001      	adds	r0, #1
 800aa06:	d103      	bne.n	800aa10 <_printf_common+0xac>
 800aa08:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa10:	3501      	adds	r5, #1
 800aa12:	e7c6      	b.n	800a9a2 <_printf_common+0x3e>
 800aa14:	18e1      	adds	r1, r4, r3
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	2030      	movs	r0, #48	; 0x30
 800aa1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa1e:	4422      	add	r2, r4
 800aa20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa28:	3302      	adds	r3, #2
 800aa2a:	e7c7      	b.n	800a9bc <_printf_common+0x58>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	4622      	mov	r2, r4
 800aa30:	4649      	mov	r1, r9
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c0      	blx	r8
 800aa36:	3001      	adds	r0, #1
 800aa38:	d0e6      	beq.n	800aa08 <_printf_common+0xa4>
 800aa3a:	3601      	adds	r6, #1
 800aa3c:	e7d9      	b.n	800a9f2 <_printf_common+0x8e>
	...

0800aa40 <_printf_i>:
 800aa40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa44:	7e0f      	ldrb	r7, [r1, #24]
 800aa46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa48:	2f78      	cmp	r7, #120	; 0x78
 800aa4a:	4691      	mov	r9, r2
 800aa4c:	4680      	mov	r8, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	469a      	mov	sl, r3
 800aa52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa56:	d807      	bhi.n	800aa68 <_printf_i+0x28>
 800aa58:	2f62      	cmp	r7, #98	; 0x62
 800aa5a:	d80a      	bhi.n	800aa72 <_printf_i+0x32>
 800aa5c:	2f00      	cmp	r7, #0
 800aa5e:	f000 80d4 	beq.w	800ac0a <_printf_i+0x1ca>
 800aa62:	2f58      	cmp	r7, #88	; 0x58
 800aa64:	f000 80c0 	beq.w	800abe8 <_printf_i+0x1a8>
 800aa68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa70:	e03a      	b.n	800aae8 <_printf_i+0xa8>
 800aa72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa76:	2b15      	cmp	r3, #21
 800aa78:	d8f6      	bhi.n	800aa68 <_printf_i+0x28>
 800aa7a:	a101      	add	r1, pc, #4	; (adr r1, 800aa80 <_printf_i+0x40>)
 800aa7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa80:	0800aad9 	.word	0x0800aad9
 800aa84:	0800aaed 	.word	0x0800aaed
 800aa88:	0800aa69 	.word	0x0800aa69
 800aa8c:	0800aa69 	.word	0x0800aa69
 800aa90:	0800aa69 	.word	0x0800aa69
 800aa94:	0800aa69 	.word	0x0800aa69
 800aa98:	0800aaed 	.word	0x0800aaed
 800aa9c:	0800aa69 	.word	0x0800aa69
 800aaa0:	0800aa69 	.word	0x0800aa69
 800aaa4:	0800aa69 	.word	0x0800aa69
 800aaa8:	0800aa69 	.word	0x0800aa69
 800aaac:	0800abf1 	.word	0x0800abf1
 800aab0:	0800ab19 	.word	0x0800ab19
 800aab4:	0800abab 	.word	0x0800abab
 800aab8:	0800aa69 	.word	0x0800aa69
 800aabc:	0800aa69 	.word	0x0800aa69
 800aac0:	0800ac13 	.word	0x0800ac13
 800aac4:	0800aa69 	.word	0x0800aa69
 800aac8:	0800ab19 	.word	0x0800ab19
 800aacc:	0800aa69 	.word	0x0800aa69
 800aad0:	0800aa69 	.word	0x0800aa69
 800aad4:	0800abb3 	.word	0x0800abb3
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	1d1a      	adds	r2, r3, #4
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	602a      	str	r2, [r5, #0]
 800aae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aae8:	2301      	movs	r3, #1
 800aaea:	e09f      	b.n	800ac2c <_printf_i+0x1ec>
 800aaec:	6820      	ldr	r0, [r4, #0]
 800aaee:	682b      	ldr	r3, [r5, #0]
 800aaf0:	0607      	lsls	r7, r0, #24
 800aaf2:	f103 0104 	add.w	r1, r3, #4
 800aaf6:	6029      	str	r1, [r5, #0]
 800aaf8:	d501      	bpl.n	800aafe <_printf_i+0xbe>
 800aafa:	681e      	ldr	r6, [r3, #0]
 800aafc:	e003      	b.n	800ab06 <_printf_i+0xc6>
 800aafe:	0646      	lsls	r6, r0, #25
 800ab00:	d5fb      	bpl.n	800aafa <_printf_i+0xba>
 800ab02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab06:	2e00      	cmp	r6, #0
 800ab08:	da03      	bge.n	800ab12 <_printf_i+0xd2>
 800ab0a:	232d      	movs	r3, #45	; 0x2d
 800ab0c:	4276      	negs	r6, r6
 800ab0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab12:	485a      	ldr	r0, [pc, #360]	; (800ac7c <_printf_i+0x23c>)
 800ab14:	230a      	movs	r3, #10
 800ab16:	e012      	b.n	800ab3e <_printf_i+0xfe>
 800ab18:	682b      	ldr	r3, [r5, #0]
 800ab1a:	6820      	ldr	r0, [r4, #0]
 800ab1c:	1d19      	adds	r1, r3, #4
 800ab1e:	6029      	str	r1, [r5, #0]
 800ab20:	0605      	lsls	r5, r0, #24
 800ab22:	d501      	bpl.n	800ab28 <_printf_i+0xe8>
 800ab24:	681e      	ldr	r6, [r3, #0]
 800ab26:	e002      	b.n	800ab2e <_printf_i+0xee>
 800ab28:	0641      	lsls	r1, r0, #25
 800ab2a:	d5fb      	bpl.n	800ab24 <_printf_i+0xe4>
 800ab2c:	881e      	ldrh	r6, [r3, #0]
 800ab2e:	4853      	ldr	r0, [pc, #332]	; (800ac7c <_printf_i+0x23c>)
 800ab30:	2f6f      	cmp	r7, #111	; 0x6f
 800ab32:	bf0c      	ite	eq
 800ab34:	2308      	moveq	r3, #8
 800ab36:	230a      	movne	r3, #10
 800ab38:	2100      	movs	r1, #0
 800ab3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab3e:	6865      	ldr	r5, [r4, #4]
 800ab40:	60a5      	str	r5, [r4, #8]
 800ab42:	2d00      	cmp	r5, #0
 800ab44:	bfa2      	ittt	ge
 800ab46:	6821      	ldrge	r1, [r4, #0]
 800ab48:	f021 0104 	bicge.w	r1, r1, #4
 800ab4c:	6021      	strge	r1, [r4, #0]
 800ab4e:	b90e      	cbnz	r6, 800ab54 <_printf_i+0x114>
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	d04b      	beq.n	800abec <_printf_i+0x1ac>
 800ab54:	4615      	mov	r5, r2
 800ab56:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab5a:	fb03 6711 	mls	r7, r3, r1, r6
 800ab5e:	5dc7      	ldrb	r7, [r0, r7]
 800ab60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab64:	4637      	mov	r7, r6
 800ab66:	42bb      	cmp	r3, r7
 800ab68:	460e      	mov	r6, r1
 800ab6a:	d9f4      	bls.n	800ab56 <_printf_i+0x116>
 800ab6c:	2b08      	cmp	r3, #8
 800ab6e:	d10b      	bne.n	800ab88 <_printf_i+0x148>
 800ab70:	6823      	ldr	r3, [r4, #0]
 800ab72:	07de      	lsls	r6, r3, #31
 800ab74:	d508      	bpl.n	800ab88 <_printf_i+0x148>
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	6861      	ldr	r1, [r4, #4]
 800ab7a:	4299      	cmp	r1, r3
 800ab7c:	bfde      	ittt	le
 800ab7e:	2330      	movle	r3, #48	; 0x30
 800ab80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab88:	1b52      	subs	r2, r2, r5
 800ab8a:	6122      	str	r2, [r4, #16]
 800ab8c:	f8cd a000 	str.w	sl, [sp]
 800ab90:	464b      	mov	r3, r9
 800ab92:	aa03      	add	r2, sp, #12
 800ab94:	4621      	mov	r1, r4
 800ab96:	4640      	mov	r0, r8
 800ab98:	f7ff fee4 	bl	800a964 <_printf_common>
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	d14a      	bne.n	800ac36 <_printf_i+0x1f6>
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	b004      	add	sp, #16
 800aba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f043 0320 	orr.w	r3, r3, #32
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	4833      	ldr	r0, [pc, #204]	; (800ac80 <_printf_i+0x240>)
 800abb4:	2778      	movs	r7, #120	; 0x78
 800abb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	6829      	ldr	r1, [r5, #0]
 800abbe:	061f      	lsls	r7, r3, #24
 800abc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800abc4:	d402      	bmi.n	800abcc <_printf_i+0x18c>
 800abc6:	065f      	lsls	r7, r3, #25
 800abc8:	bf48      	it	mi
 800abca:	b2b6      	uxthmi	r6, r6
 800abcc:	07df      	lsls	r7, r3, #31
 800abce:	bf48      	it	mi
 800abd0:	f043 0320 	orrmi.w	r3, r3, #32
 800abd4:	6029      	str	r1, [r5, #0]
 800abd6:	bf48      	it	mi
 800abd8:	6023      	strmi	r3, [r4, #0]
 800abda:	b91e      	cbnz	r6, 800abe4 <_printf_i+0x1a4>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	f023 0320 	bic.w	r3, r3, #32
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	2310      	movs	r3, #16
 800abe6:	e7a7      	b.n	800ab38 <_printf_i+0xf8>
 800abe8:	4824      	ldr	r0, [pc, #144]	; (800ac7c <_printf_i+0x23c>)
 800abea:	e7e4      	b.n	800abb6 <_printf_i+0x176>
 800abec:	4615      	mov	r5, r2
 800abee:	e7bd      	b.n	800ab6c <_printf_i+0x12c>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	6826      	ldr	r6, [r4, #0]
 800abf4:	6961      	ldr	r1, [r4, #20]
 800abf6:	1d18      	adds	r0, r3, #4
 800abf8:	6028      	str	r0, [r5, #0]
 800abfa:	0635      	lsls	r5, r6, #24
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	d501      	bpl.n	800ac04 <_printf_i+0x1c4>
 800ac00:	6019      	str	r1, [r3, #0]
 800ac02:	e002      	b.n	800ac0a <_printf_i+0x1ca>
 800ac04:	0670      	lsls	r0, r6, #25
 800ac06:	d5fb      	bpl.n	800ac00 <_printf_i+0x1c0>
 800ac08:	8019      	strh	r1, [r3, #0]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6123      	str	r3, [r4, #16]
 800ac0e:	4615      	mov	r5, r2
 800ac10:	e7bc      	b.n	800ab8c <_printf_i+0x14c>
 800ac12:	682b      	ldr	r3, [r5, #0]
 800ac14:	1d1a      	adds	r2, r3, #4
 800ac16:	602a      	str	r2, [r5, #0]
 800ac18:	681d      	ldr	r5, [r3, #0]
 800ac1a:	6862      	ldr	r2, [r4, #4]
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	4628      	mov	r0, r5
 800ac20:	f7f5 fafe 	bl	8000220 <memchr>
 800ac24:	b108      	cbz	r0, 800ac2a <_printf_i+0x1ea>
 800ac26:	1b40      	subs	r0, r0, r5
 800ac28:	6060      	str	r0, [r4, #4]
 800ac2a:	6863      	ldr	r3, [r4, #4]
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac34:	e7aa      	b.n	800ab8c <_printf_i+0x14c>
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	462a      	mov	r2, r5
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	47d0      	blx	sl
 800ac40:	3001      	adds	r0, #1
 800ac42:	d0ad      	beq.n	800aba0 <_printf_i+0x160>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	079b      	lsls	r3, r3, #30
 800ac48:	d413      	bmi.n	800ac72 <_printf_i+0x232>
 800ac4a:	68e0      	ldr	r0, [r4, #12]
 800ac4c:	9b03      	ldr	r3, [sp, #12]
 800ac4e:	4298      	cmp	r0, r3
 800ac50:	bfb8      	it	lt
 800ac52:	4618      	movlt	r0, r3
 800ac54:	e7a6      	b.n	800aba4 <_printf_i+0x164>
 800ac56:	2301      	movs	r3, #1
 800ac58:	4632      	mov	r2, r6
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	4640      	mov	r0, r8
 800ac5e:	47d0      	blx	sl
 800ac60:	3001      	adds	r0, #1
 800ac62:	d09d      	beq.n	800aba0 <_printf_i+0x160>
 800ac64:	3501      	adds	r5, #1
 800ac66:	68e3      	ldr	r3, [r4, #12]
 800ac68:	9903      	ldr	r1, [sp, #12]
 800ac6a:	1a5b      	subs	r3, r3, r1
 800ac6c:	42ab      	cmp	r3, r5
 800ac6e:	dcf2      	bgt.n	800ac56 <_printf_i+0x216>
 800ac70:	e7eb      	b.n	800ac4a <_printf_i+0x20a>
 800ac72:	2500      	movs	r5, #0
 800ac74:	f104 0619 	add.w	r6, r4, #25
 800ac78:	e7f5      	b.n	800ac66 <_printf_i+0x226>
 800ac7a:	bf00      	nop
 800ac7c:	0800e59e 	.word	0x0800e59e
 800ac80:	0800e5af 	.word	0x0800e5af

0800ac84 <std>:
 800ac84:	2300      	movs	r3, #0
 800ac86:	b510      	push	{r4, lr}
 800ac88:	4604      	mov	r4, r0
 800ac8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac92:	6083      	str	r3, [r0, #8]
 800ac94:	8181      	strh	r1, [r0, #12]
 800ac96:	6643      	str	r3, [r0, #100]	; 0x64
 800ac98:	81c2      	strh	r2, [r0, #14]
 800ac9a:	6183      	str	r3, [r0, #24]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	2208      	movs	r2, #8
 800aca0:	305c      	adds	r0, #92	; 0x5c
 800aca2:	f000 fabd 	bl	800b220 <memset>
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <std+0x38>)
 800aca8:	6263      	str	r3, [r4, #36]	; 0x24
 800acaa:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <std+0x3c>)
 800acac:	62a3      	str	r3, [r4, #40]	; 0x28
 800acae:	4b05      	ldr	r3, [pc, #20]	; (800acc4 <std+0x40>)
 800acb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <std+0x44>)
 800acb4:	6224      	str	r4, [r4, #32]
 800acb6:	6323      	str	r3, [r4, #48]	; 0x30
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	bf00      	nop
 800acbc:	0800b02d 	.word	0x0800b02d
 800acc0:	0800b04f 	.word	0x0800b04f
 800acc4:	0800b087 	.word	0x0800b087
 800acc8:	0800b0ab 	.word	0x0800b0ab

0800accc <stdio_exit_handler>:
 800accc:	4a02      	ldr	r2, [pc, #8]	; (800acd8 <stdio_exit_handler+0xc>)
 800acce:	4903      	ldr	r1, [pc, #12]	; (800acdc <stdio_exit_handler+0x10>)
 800acd0:	4803      	ldr	r0, [pc, #12]	; (800ace0 <stdio_exit_handler+0x14>)
 800acd2:	f000 b869 	b.w	800ada8 <_fwalk_sglue>
 800acd6:	bf00      	nop
 800acd8:	20000010 	.word	0x20000010
 800acdc:	0800cf51 	.word	0x0800cf51
 800ace0:	2000001c 	.word	0x2000001c

0800ace4 <cleanup_stdio>:
 800ace4:	6841      	ldr	r1, [r0, #4]
 800ace6:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <cleanup_stdio+0x34>)
 800ace8:	4299      	cmp	r1, r3
 800acea:	b510      	push	{r4, lr}
 800acec:	4604      	mov	r4, r0
 800acee:	d001      	beq.n	800acf4 <cleanup_stdio+0x10>
 800acf0:	f002 f92e 	bl	800cf50 <_fflush_r>
 800acf4:	68a1      	ldr	r1, [r4, #8]
 800acf6:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <cleanup_stdio+0x38>)
 800acf8:	4299      	cmp	r1, r3
 800acfa:	d002      	beq.n	800ad02 <cleanup_stdio+0x1e>
 800acfc:	4620      	mov	r0, r4
 800acfe:	f002 f927 	bl	800cf50 <_fflush_r>
 800ad02:	68e1      	ldr	r1, [r4, #12]
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <cleanup_stdio+0x3c>)
 800ad06:	4299      	cmp	r1, r3
 800ad08:	d004      	beq.n	800ad14 <cleanup_stdio+0x30>
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad10:	f002 b91e 	b.w	800cf50 <_fflush_r>
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	bf00      	nop
 800ad18:	20001a04 	.word	0x20001a04
 800ad1c:	20001a6c 	.word	0x20001a6c
 800ad20:	20001ad4 	.word	0x20001ad4

0800ad24 <global_stdio_init.part.0>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	4b0b      	ldr	r3, [pc, #44]	; (800ad54 <global_stdio_init.part.0+0x30>)
 800ad28:	4c0b      	ldr	r4, [pc, #44]	; (800ad58 <global_stdio_init.part.0+0x34>)
 800ad2a:	4a0c      	ldr	r2, [pc, #48]	; (800ad5c <global_stdio_init.part.0+0x38>)
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	2200      	movs	r2, #0
 800ad32:	2104      	movs	r1, #4
 800ad34:	f7ff ffa6 	bl	800ac84 <std>
 800ad38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	2109      	movs	r1, #9
 800ad40:	f7ff ffa0 	bl	800ac84 <std>
 800ad44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ad48:	2202      	movs	r2, #2
 800ad4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad4e:	2112      	movs	r1, #18
 800ad50:	f7ff bf98 	b.w	800ac84 <std>
 800ad54:	20001b3c 	.word	0x20001b3c
 800ad58:	20001a04 	.word	0x20001a04
 800ad5c:	0800accd 	.word	0x0800accd

0800ad60 <__sfp_lock_acquire>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__sfp_lock_acquire+0x8>)
 800ad62:	f000 bad9 	b.w	800b318 <__retarget_lock_acquire_recursive>
 800ad66:	bf00      	nop
 800ad68:	20001b45 	.word	0x20001b45

0800ad6c <__sfp_lock_release>:
 800ad6c:	4801      	ldr	r0, [pc, #4]	; (800ad74 <__sfp_lock_release+0x8>)
 800ad6e:	f000 bad4 	b.w	800b31a <__retarget_lock_release_recursive>
 800ad72:	bf00      	nop
 800ad74:	20001b45 	.word	0x20001b45

0800ad78 <__sinit>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	f7ff fff0 	bl	800ad60 <__sfp_lock_acquire>
 800ad80:	6a23      	ldr	r3, [r4, #32]
 800ad82:	b11b      	cbz	r3, 800ad8c <__sinit+0x14>
 800ad84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad88:	f7ff bff0 	b.w	800ad6c <__sfp_lock_release>
 800ad8c:	4b04      	ldr	r3, [pc, #16]	; (800ada0 <__sinit+0x28>)
 800ad8e:	6223      	str	r3, [r4, #32]
 800ad90:	4b04      	ldr	r3, [pc, #16]	; (800ada4 <__sinit+0x2c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1f5      	bne.n	800ad84 <__sinit+0xc>
 800ad98:	f7ff ffc4 	bl	800ad24 <global_stdio_init.part.0>
 800ad9c:	e7f2      	b.n	800ad84 <__sinit+0xc>
 800ad9e:	bf00      	nop
 800ada0:	0800ace5 	.word	0x0800ace5
 800ada4:	20001b3c 	.word	0x20001b3c

0800ada8 <_fwalk_sglue>:
 800ada8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adac:	4607      	mov	r7, r0
 800adae:	4688      	mov	r8, r1
 800adb0:	4614      	mov	r4, r2
 800adb2:	2600      	movs	r6, #0
 800adb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adb8:	f1b9 0901 	subs.w	r9, r9, #1
 800adbc:	d505      	bpl.n	800adca <_fwalk_sglue+0x22>
 800adbe:	6824      	ldr	r4, [r4, #0]
 800adc0:	2c00      	cmp	r4, #0
 800adc2:	d1f7      	bne.n	800adb4 <_fwalk_sglue+0xc>
 800adc4:	4630      	mov	r0, r6
 800adc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d907      	bls.n	800ade0 <_fwalk_sglue+0x38>
 800add0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800add4:	3301      	adds	r3, #1
 800add6:	d003      	beq.n	800ade0 <_fwalk_sglue+0x38>
 800add8:	4629      	mov	r1, r5
 800adda:	4638      	mov	r0, r7
 800addc:	47c0      	blx	r8
 800adde:	4306      	orrs	r6, r0
 800ade0:	3568      	adds	r5, #104	; 0x68
 800ade2:	e7e9      	b.n	800adb8 <_fwalk_sglue+0x10>

0800ade4 <iprintf>:
 800ade4:	b40f      	push	{r0, r1, r2, r3}
 800ade6:	b507      	push	{r0, r1, r2, lr}
 800ade8:	4906      	ldr	r1, [pc, #24]	; (800ae04 <iprintf+0x20>)
 800adea:	ab04      	add	r3, sp, #16
 800adec:	6808      	ldr	r0, [r1, #0]
 800adee:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf2:	6881      	ldr	r1, [r0, #8]
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	f001 ff0b 	bl	800cc10 <_vfiprintf_r>
 800adfa:	b003      	add	sp, #12
 800adfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae00:	b004      	add	sp, #16
 800ae02:	4770      	bx	lr
 800ae04:	20000068 	.word	0x20000068

0800ae08 <_puts_r>:
 800ae08:	6a03      	ldr	r3, [r0, #32]
 800ae0a:	b570      	push	{r4, r5, r6, lr}
 800ae0c:	6884      	ldr	r4, [r0, #8]
 800ae0e:	4605      	mov	r5, r0
 800ae10:	460e      	mov	r6, r1
 800ae12:	b90b      	cbnz	r3, 800ae18 <_puts_r+0x10>
 800ae14:	f7ff ffb0 	bl	800ad78 <__sinit>
 800ae18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae1a:	07db      	lsls	r3, r3, #31
 800ae1c:	d405      	bmi.n	800ae2a <_puts_r+0x22>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	0598      	lsls	r0, r3, #22
 800ae22:	d402      	bmi.n	800ae2a <_puts_r+0x22>
 800ae24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae26:	f000 fa77 	bl	800b318 <__retarget_lock_acquire_recursive>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	0719      	lsls	r1, r3, #28
 800ae2e:	d513      	bpl.n	800ae58 <_puts_r+0x50>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	b18b      	cbz	r3, 800ae58 <_puts_r+0x50>
 800ae34:	3e01      	subs	r6, #1
 800ae36:	68a3      	ldr	r3, [r4, #8]
 800ae38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	60a3      	str	r3, [r4, #8]
 800ae40:	b9e9      	cbnz	r1, 800ae7e <_puts_r+0x76>
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	da2e      	bge.n	800aea4 <_puts_r+0x9c>
 800ae46:	4622      	mov	r2, r4
 800ae48:	210a      	movs	r1, #10
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f000 f952 	bl	800b0f4 <__swbuf_r>
 800ae50:	3001      	adds	r0, #1
 800ae52:	d007      	beq.n	800ae64 <_puts_r+0x5c>
 800ae54:	250a      	movs	r5, #10
 800ae56:	e007      	b.n	800ae68 <_puts_r+0x60>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f000 f988 	bl	800b170 <__swsetup_r>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d0e7      	beq.n	800ae34 <_puts_r+0x2c>
 800ae64:	f04f 35ff 	mov.w	r5, #4294967295
 800ae68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae6a:	07da      	lsls	r2, r3, #31
 800ae6c:	d405      	bmi.n	800ae7a <_puts_r+0x72>
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	059b      	lsls	r3, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_puts_r+0x72>
 800ae74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae76:	f000 fa50 	bl	800b31a <__retarget_lock_release_recursive>
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	bd70      	pop	{r4, r5, r6, pc}
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	da04      	bge.n	800ae8c <_puts_r+0x84>
 800ae82:	69a2      	ldr	r2, [r4, #24]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	dc06      	bgt.n	800ae96 <_puts_r+0x8e>
 800ae88:	290a      	cmp	r1, #10
 800ae8a:	d004      	beq.n	800ae96 <_puts_r+0x8e>
 800ae8c:	6823      	ldr	r3, [r4, #0]
 800ae8e:	1c5a      	adds	r2, r3, #1
 800ae90:	6022      	str	r2, [r4, #0]
 800ae92:	7019      	strb	r1, [r3, #0]
 800ae94:	e7cf      	b.n	800ae36 <_puts_r+0x2e>
 800ae96:	4622      	mov	r2, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 f92b 	bl	800b0f4 <__swbuf_r>
 800ae9e:	3001      	adds	r0, #1
 800aea0:	d1c9      	bne.n	800ae36 <_puts_r+0x2e>
 800aea2:	e7df      	b.n	800ae64 <_puts_r+0x5c>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	250a      	movs	r5, #10
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	6022      	str	r2, [r4, #0]
 800aeac:	701d      	strb	r5, [r3, #0]
 800aeae:	e7db      	b.n	800ae68 <_puts_r+0x60>

0800aeb0 <puts>:
 800aeb0:	4b02      	ldr	r3, [pc, #8]	; (800aebc <puts+0xc>)
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	6818      	ldr	r0, [r3, #0]
 800aeb6:	f7ff bfa7 	b.w	800ae08 <_puts_r>
 800aeba:	bf00      	nop
 800aebc:	20000068 	.word	0x20000068

0800aec0 <setbuf>:
 800aec0:	fab1 f281 	clz	r2, r1
 800aec4:	0952      	lsrs	r2, r2, #5
 800aec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeca:	0052      	lsls	r2, r2, #1
 800aecc:	f000 b800 	b.w	800aed0 <setvbuf>

0800aed0 <setvbuf>:
 800aed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aed4:	461d      	mov	r5, r3
 800aed6:	4b54      	ldr	r3, [pc, #336]	; (800b028 <setvbuf+0x158>)
 800aed8:	681f      	ldr	r7, [r3, #0]
 800aeda:	4604      	mov	r4, r0
 800aedc:	460e      	mov	r6, r1
 800aede:	4690      	mov	r8, r2
 800aee0:	b127      	cbz	r7, 800aeec <setvbuf+0x1c>
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	b913      	cbnz	r3, 800aeec <setvbuf+0x1c>
 800aee6:	4638      	mov	r0, r7
 800aee8:	f7ff ff46 	bl	800ad78 <__sinit>
 800aeec:	f1b8 0f02 	cmp.w	r8, #2
 800aef0:	d006      	beq.n	800af00 <setvbuf+0x30>
 800aef2:	f1b8 0f01 	cmp.w	r8, #1
 800aef6:	f200 8094 	bhi.w	800b022 <setvbuf+0x152>
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	f2c0 8091 	blt.w	800b022 <setvbuf+0x152>
 800af00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af02:	07da      	lsls	r2, r3, #31
 800af04:	d405      	bmi.n	800af12 <setvbuf+0x42>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	059b      	lsls	r3, r3, #22
 800af0a:	d402      	bmi.n	800af12 <setvbuf+0x42>
 800af0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af0e:	f000 fa03 	bl	800b318 <__retarget_lock_acquire_recursive>
 800af12:	4621      	mov	r1, r4
 800af14:	4638      	mov	r0, r7
 800af16:	f002 f81b 	bl	800cf50 <_fflush_r>
 800af1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af1c:	b141      	cbz	r1, 800af30 <setvbuf+0x60>
 800af1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af22:	4299      	cmp	r1, r3
 800af24:	d002      	beq.n	800af2c <setvbuf+0x5c>
 800af26:	4638      	mov	r0, r7
 800af28:	f001 f874 	bl	800c014 <_free_r>
 800af2c:	2300      	movs	r3, #0
 800af2e:	6363      	str	r3, [r4, #52]	; 0x34
 800af30:	2300      	movs	r3, #0
 800af32:	61a3      	str	r3, [r4, #24]
 800af34:	6063      	str	r3, [r4, #4]
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	0618      	lsls	r0, r3, #24
 800af3a:	d503      	bpl.n	800af44 <setvbuf+0x74>
 800af3c:	6921      	ldr	r1, [r4, #16]
 800af3e:	4638      	mov	r0, r7
 800af40:	f001 f868 	bl	800c014 <_free_r>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	f1b8 0f02 	cmp.w	r8, #2
 800af52:	81a3      	strh	r3, [r4, #12]
 800af54:	d05f      	beq.n	800b016 <setvbuf+0x146>
 800af56:	ab01      	add	r3, sp, #4
 800af58:	466a      	mov	r2, sp
 800af5a:	4621      	mov	r1, r4
 800af5c:	4638      	mov	r0, r7
 800af5e:	f002 f81f 	bl	800cfa0 <__swhatbuf_r>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	4318      	orrs	r0, r3
 800af66:	81a0      	strh	r0, [r4, #12]
 800af68:	bb2d      	cbnz	r5, 800afb6 <setvbuf+0xe6>
 800af6a:	9d00      	ldr	r5, [sp, #0]
 800af6c:	4628      	mov	r0, r5
 800af6e:	f001 f89d 	bl	800c0ac <malloc>
 800af72:	4606      	mov	r6, r0
 800af74:	2800      	cmp	r0, #0
 800af76:	d150      	bne.n	800b01a <setvbuf+0x14a>
 800af78:	f8dd 9000 	ldr.w	r9, [sp]
 800af7c:	45a9      	cmp	r9, r5
 800af7e:	d13e      	bne.n	800affe <setvbuf+0x12e>
 800af80:	f04f 35ff 	mov.w	r5, #4294967295
 800af84:	2200      	movs	r2, #0
 800af86:	60a2      	str	r2, [r4, #8]
 800af88:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800af8c:	6022      	str	r2, [r4, #0]
 800af8e:	6122      	str	r2, [r4, #16]
 800af90:	2201      	movs	r2, #1
 800af92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af96:	6162      	str	r2, [r4, #20]
 800af98:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af9a:	f043 0302 	orr.w	r3, r3, #2
 800af9e:	07d1      	lsls	r1, r2, #31
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	d404      	bmi.n	800afae <setvbuf+0xde>
 800afa4:	059b      	lsls	r3, r3, #22
 800afa6:	d402      	bmi.n	800afae <setvbuf+0xde>
 800afa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afaa:	f000 f9b6 	bl	800b31a <__retarget_lock_release_recursive>
 800afae:	4628      	mov	r0, r5
 800afb0:	b003      	add	sp, #12
 800afb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afb6:	2e00      	cmp	r6, #0
 800afb8:	d0d8      	beq.n	800af6c <setvbuf+0x9c>
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	b913      	cbnz	r3, 800afc4 <setvbuf+0xf4>
 800afbe:	4638      	mov	r0, r7
 800afc0:	f7ff feda 	bl	800ad78 <__sinit>
 800afc4:	f1b8 0f01 	cmp.w	r8, #1
 800afc8:	bf08      	it	eq
 800afca:	89a3      	ldrheq	r3, [r4, #12]
 800afcc:	6026      	str	r6, [r4, #0]
 800afce:	bf04      	itt	eq
 800afd0:	f043 0301 	orreq.w	r3, r3, #1
 800afd4:	81a3      	strheq	r3, [r4, #12]
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f013 0208 	ands.w	r2, r3, #8
 800afdc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800afe0:	d01d      	beq.n	800b01e <setvbuf+0x14e>
 800afe2:	07da      	lsls	r2, r3, #31
 800afe4:	bf41      	itttt	mi
 800afe6:	2200      	movmi	r2, #0
 800afe8:	426d      	negmi	r5, r5
 800afea:	60a2      	strmi	r2, [r4, #8]
 800afec:	61a5      	strmi	r5, [r4, #24]
 800afee:	bf58      	it	pl
 800aff0:	60a5      	strpl	r5, [r4, #8]
 800aff2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800aff4:	f015 0501 	ands.w	r5, r5, #1
 800aff8:	d0d4      	beq.n	800afa4 <setvbuf+0xd4>
 800affa:	2500      	movs	r5, #0
 800affc:	e7d7      	b.n	800afae <setvbuf+0xde>
 800affe:	4648      	mov	r0, r9
 800b000:	f001 f854 	bl	800c0ac <malloc>
 800b004:	4606      	mov	r6, r0
 800b006:	2800      	cmp	r0, #0
 800b008:	d0ba      	beq.n	800af80 <setvbuf+0xb0>
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	464d      	mov	r5, r9
 800b014:	e7d1      	b.n	800afba <setvbuf+0xea>
 800b016:	2500      	movs	r5, #0
 800b018:	e7b4      	b.n	800af84 <setvbuf+0xb4>
 800b01a:	46a9      	mov	r9, r5
 800b01c:	e7f5      	b.n	800b00a <setvbuf+0x13a>
 800b01e:	60a2      	str	r2, [r4, #8]
 800b020:	e7e7      	b.n	800aff2 <setvbuf+0x122>
 800b022:	f04f 35ff 	mov.w	r5, #4294967295
 800b026:	e7c2      	b.n	800afae <setvbuf+0xde>
 800b028:	20000068 	.word	0x20000068

0800b02c <__sread>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	460c      	mov	r4, r1
 800b030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b034:	f000 f922 	bl	800b27c <_read_r>
 800b038:	2800      	cmp	r0, #0
 800b03a:	bfab      	itete	ge
 800b03c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b03e:	89a3      	ldrhlt	r3, [r4, #12]
 800b040:	181b      	addge	r3, r3, r0
 800b042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b046:	bfac      	ite	ge
 800b048:	6563      	strge	r3, [r4, #84]	; 0x54
 800b04a:	81a3      	strhlt	r3, [r4, #12]
 800b04c:	bd10      	pop	{r4, pc}

0800b04e <__swrite>:
 800b04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b052:	461f      	mov	r7, r3
 800b054:	898b      	ldrh	r3, [r1, #12]
 800b056:	05db      	lsls	r3, r3, #23
 800b058:	4605      	mov	r5, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	4616      	mov	r6, r2
 800b05e:	d505      	bpl.n	800b06c <__swrite+0x1e>
 800b060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b064:	2302      	movs	r3, #2
 800b066:	2200      	movs	r2, #0
 800b068:	f000 f8f6 	bl	800b258 <_lseek_r>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	4632      	mov	r2, r6
 800b07a:	463b      	mov	r3, r7
 800b07c:	4628      	mov	r0, r5
 800b07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b082:	f000 b90d 	b.w	800b2a0 <_write_r>

0800b086 <__sseek>:
 800b086:	b510      	push	{r4, lr}
 800b088:	460c      	mov	r4, r1
 800b08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08e:	f000 f8e3 	bl	800b258 <_lseek_r>
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	bf15      	itete	ne
 800b098:	6560      	strne	r0, [r4, #84]	; 0x54
 800b09a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b09e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0a2:	81a3      	strheq	r3, [r4, #12]
 800b0a4:	bf18      	it	ne
 800b0a6:	81a3      	strhne	r3, [r4, #12]
 800b0a8:	bd10      	pop	{r4, pc}

0800b0aa <__sclose>:
 800b0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ae:	f000 b8c3 	b.w	800b238 <_close_r>
	...

0800b0b4 <_vsiprintf_r>:
 800b0b4:	b500      	push	{lr}
 800b0b6:	b09b      	sub	sp, #108	; 0x6c
 800b0b8:	9100      	str	r1, [sp, #0]
 800b0ba:	9104      	str	r1, [sp, #16]
 800b0bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0c0:	9105      	str	r1, [sp, #20]
 800b0c2:	9102      	str	r1, [sp, #8]
 800b0c4:	4905      	ldr	r1, [pc, #20]	; (800b0dc <_vsiprintf_r+0x28>)
 800b0c6:	9103      	str	r1, [sp, #12]
 800b0c8:	4669      	mov	r1, sp
 800b0ca:	f001 fc79 	bl	800c9c0 <_svfiprintf_r>
 800b0ce:	9b00      	ldr	r3, [sp, #0]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	701a      	strb	r2, [r3, #0]
 800b0d4:	b01b      	add	sp, #108	; 0x6c
 800b0d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0da:	bf00      	nop
 800b0dc:	ffff0208 	.word	0xffff0208

0800b0e0 <vsiprintf>:
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	460a      	mov	r2, r1
 800b0e4:	4601      	mov	r1, r0
 800b0e6:	4802      	ldr	r0, [pc, #8]	; (800b0f0 <vsiprintf+0x10>)
 800b0e8:	6800      	ldr	r0, [r0, #0]
 800b0ea:	f7ff bfe3 	b.w	800b0b4 <_vsiprintf_r>
 800b0ee:	bf00      	nop
 800b0f0:	20000068 	.word	0x20000068

0800b0f4 <__swbuf_r>:
 800b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f6:	460e      	mov	r6, r1
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	4605      	mov	r5, r0
 800b0fc:	b118      	cbz	r0, 800b106 <__swbuf_r+0x12>
 800b0fe:	6a03      	ldr	r3, [r0, #32]
 800b100:	b90b      	cbnz	r3, 800b106 <__swbuf_r+0x12>
 800b102:	f7ff fe39 	bl	800ad78 <__sinit>
 800b106:	69a3      	ldr	r3, [r4, #24]
 800b108:	60a3      	str	r3, [r4, #8]
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	071a      	lsls	r2, r3, #28
 800b10e:	d525      	bpl.n	800b15c <__swbuf_r+0x68>
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	b31b      	cbz	r3, 800b15c <__swbuf_r+0x68>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	6922      	ldr	r2, [r4, #16]
 800b118:	1a98      	subs	r0, r3, r2
 800b11a:	6963      	ldr	r3, [r4, #20]
 800b11c:	b2f6      	uxtb	r6, r6
 800b11e:	4283      	cmp	r3, r0
 800b120:	4637      	mov	r7, r6
 800b122:	dc04      	bgt.n	800b12e <__swbuf_r+0x3a>
 800b124:	4621      	mov	r1, r4
 800b126:	4628      	mov	r0, r5
 800b128:	f001 ff12 	bl	800cf50 <_fflush_r>
 800b12c:	b9e0      	cbnz	r0, 800b168 <__swbuf_r+0x74>
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	3b01      	subs	r3, #1
 800b132:	60a3      	str	r3, [r4, #8]
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	1c5a      	adds	r2, r3, #1
 800b138:	6022      	str	r2, [r4, #0]
 800b13a:	701e      	strb	r6, [r3, #0]
 800b13c:	6962      	ldr	r2, [r4, #20]
 800b13e:	1c43      	adds	r3, r0, #1
 800b140:	429a      	cmp	r2, r3
 800b142:	d004      	beq.n	800b14e <__swbuf_r+0x5a>
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	07db      	lsls	r3, r3, #31
 800b148:	d506      	bpl.n	800b158 <__swbuf_r+0x64>
 800b14a:	2e0a      	cmp	r6, #10
 800b14c:	d104      	bne.n	800b158 <__swbuf_r+0x64>
 800b14e:	4621      	mov	r1, r4
 800b150:	4628      	mov	r0, r5
 800b152:	f001 fefd 	bl	800cf50 <_fflush_r>
 800b156:	b938      	cbnz	r0, 800b168 <__swbuf_r+0x74>
 800b158:	4638      	mov	r0, r7
 800b15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b15c:	4621      	mov	r1, r4
 800b15e:	4628      	mov	r0, r5
 800b160:	f000 f806 	bl	800b170 <__swsetup_r>
 800b164:	2800      	cmp	r0, #0
 800b166:	d0d5      	beq.n	800b114 <__swbuf_r+0x20>
 800b168:	f04f 37ff 	mov.w	r7, #4294967295
 800b16c:	e7f4      	b.n	800b158 <__swbuf_r+0x64>
	...

0800b170 <__swsetup_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4b2a      	ldr	r3, [pc, #168]	; (800b21c <__swsetup_r+0xac>)
 800b174:	4605      	mov	r5, r0
 800b176:	6818      	ldr	r0, [r3, #0]
 800b178:	460c      	mov	r4, r1
 800b17a:	b118      	cbz	r0, 800b184 <__swsetup_r+0x14>
 800b17c:	6a03      	ldr	r3, [r0, #32]
 800b17e:	b90b      	cbnz	r3, 800b184 <__swsetup_r+0x14>
 800b180:	f7ff fdfa 	bl	800ad78 <__sinit>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b18a:	0718      	lsls	r0, r3, #28
 800b18c:	d422      	bmi.n	800b1d4 <__swsetup_r+0x64>
 800b18e:	06d9      	lsls	r1, r3, #27
 800b190:	d407      	bmi.n	800b1a2 <__swsetup_r+0x32>
 800b192:	2309      	movs	r3, #9
 800b194:	602b      	str	r3, [r5, #0]
 800b196:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a0:	e034      	b.n	800b20c <__swsetup_r+0x9c>
 800b1a2:	0758      	lsls	r0, r3, #29
 800b1a4:	d512      	bpl.n	800b1cc <__swsetup_r+0x5c>
 800b1a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1a8:	b141      	cbz	r1, 800b1bc <__swsetup_r+0x4c>
 800b1aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1ae:	4299      	cmp	r1, r3
 800b1b0:	d002      	beq.n	800b1b8 <__swsetup_r+0x48>
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f000 ff2e 	bl	800c014 <_free_r>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	6363      	str	r3, [r4, #52]	; 0x34
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	6063      	str	r3, [r4, #4]
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	f043 0308 	orr.w	r3, r3, #8
 800b1d2:	81a3      	strh	r3, [r4, #12]
 800b1d4:	6923      	ldr	r3, [r4, #16]
 800b1d6:	b94b      	cbnz	r3, 800b1ec <__swsetup_r+0x7c>
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1e2:	d003      	beq.n	800b1ec <__swsetup_r+0x7c>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f001 ff00 	bl	800cfec <__smakebuf_r>
 800b1ec:	89a0      	ldrh	r0, [r4, #12]
 800b1ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1f2:	f010 0301 	ands.w	r3, r0, #1
 800b1f6:	d00a      	beq.n	800b20e <__swsetup_r+0x9e>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60a3      	str	r3, [r4, #8]
 800b1fc:	6963      	ldr	r3, [r4, #20]
 800b1fe:	425b      	negs	r3, r3
 800b200:	61a3      	str	r3, [r4, #24]
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	b943      	cbnz	r3, 800b218 <__swsetup_r+0xa8>
 800b206:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b20a:	d1c4      	bne.n	800b196 <__swsetup_r+0x26>
 800b20c:	bd38      	pop	{r3, r4, r5, pc}
 800b20e:	0781      	lsls	r1, r0, #30
 800b210:	bf58      	it	pl
 800b212:	6963      	ldrpl	r3, [r4, #20]
 800b214:	60a3      	str	r3, [r4, #8]
 800b216:	e7f4      	b.n	800b202 <__swsetup_r+0x92>
 800b218:	2000      	movs	r0, #0
 800b21a:	e7f7      	b.n	800b20c <__swsetup_r+0x9c>
 800b21c:	20000068 	.word	0x20000068

0800b220 <memset>:
 800b220:	4402      	add	r2, r0
 800b222:	4603      	mov	r3, r0
 800b224:	4293      	cmp	r3, r2
 800b226:	d100      	bne.n	800b22a <memset+0xa>
 800b228:	4770      	bx	lr
 800b22a:	f803 1b01 	strb.w	r1, [r3], #1
 800b22e:	e7f9      	b.n	800b224 <memset+0x4>

0800b230 <_localeconv_r>:
 800b230:	4800      	ldr	r0, [pc, #0]	; (800b234 <_localeconv_r+0x4>)
 800b232:	4770      	bx	lr
 800b234:	2000015c 	.word	0x2000015c

0800b238 <_close_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4d06      	ldr	r5, [pc, #24]	; (800b254 <_close_r+0x1c>)
 800b23c:	2300      	movs	r3, #0
 800b23e:	4604      	mov	r4, r0
 800b240:	4608      	mov	r0, r1
 800b242:	602b      	str	r3, [r5, #0]
 800b244:	f7f9 fdd6 	bl	8004df4 <_close>
 800b248:	1c43      	adds	r3, r0, #1
 800b24a:	d102      	bne.n	800b252 <_close_r+0x1a>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	b103      	cbz	r3, 800b252 <_close_r+0x1a>
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	20001b40 	.word	0x20001b40

0800b258 <_lseek_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4d07      	ldr	r5, [pc, #28]	; (800b278 <_lseek_r+0x20>)
 800b25c:	4604      	mov	r4, r0
 800b25e:	4608      	mov	r0, r1
 800b260:	4611      	mov	r1, r2
 800b262:	2200      	movs	r2, #0
 800b264:	602a      	str	r2, [r5, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	f7f9 fdd0 	bl	8004e0c <_lseek>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_lseek_r+0x1e>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_lseek_r+0x1e>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	20001b40 	.word	0x20001b40

0800b27c <_read_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4d07      	ldr	r5, [pc, #28]	; (800b29c <_read_r+0x20>)
 800b280:	4604      	mov	r4, r0
 800b282:	4608      	mov	r0, r1
 800b284:	4611      	mov	r1, r2
 800b286:	2200      	movs	r2, #0
 800b288:	602a      	str	r2, [r5, #0]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f7f9 fd96 	bl	8004dbc <_read>
 800b290:	1c43      	adds	r3, r0, #1
 800b292:	d102      	bne.n	800b29a <_read_r+0x1e>
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	b103      	cbz	r3, 800b29a <_read_r+0x1e>
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	20001b40 	.word	0x20001b40

0800b2a0 <_write_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4d07      	ldr	r5, [pc, #28]	; (800b2c0 <_write_r+0x20>)
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	4608      	mov	r0, r1
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	602a      	str	r2, [r5, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f7f9 fd92 	bl	8004dd8 <_write>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_write_r+0x1e>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_write_r+0x1e>
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	20001b40 	.word	0x20001b40

0800b2c4 <__errno>:
 800b2c4:	4b01      	ldr	r3, [pc, #4]	; (800b2cc <__errno+0x8>)
 800b2c6:	6818      	ldr	r0, [r3, #0]
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	20000068 	.word	0x20000068

0800b2d0 <__libc_init_array>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	4d0d      	ldr	r5, [pc, #52]	; (800b308 <__libc_init_array+0x38>)
 800b2d4:	4c0d      	ldr	r4, [pc, #52]	; (800b30c <__libc_init_array+0x3c>)
 800b2d6:	1b64      	subs	r4, r4, r5
 800b2d8:	10a4      	asrs	r4, r4, #2
 800b2da:	2600      	movs	r6, #0
 800b2dc:	42a6      	cmp	r6, r4
 800b2de:	d109      	bne.n	800b2f4 <__libc_init_array+0x24>
 800b2e0:	4d0b      	ldr	r5, [pc, #44]	; (800b310 <__libc_init_array+0x40>)
 800b2e2:	4c0c      	ldr	r4, [pc, #48]	; (800b314 <__libc_init_array+0x44>)
 800b2e4:	f003 f8a2 	bl	800e42c <_init>
 800b2e8:	1b64      	subs	r4, r4, r5
 800b2ea:	10a4      	asrs	r4, r4, #2
 800b2ec:	2600      	movs	r6, #0
 800b2ee:	42a6      	cmp	r6, r4
 800b2f0:	d105      	bne.n	800b2fe <__libc_init_array+0x2e>
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f8:	4798      	blx	r3
 800b2fa:	3601      	adds	r6, #1
 800b2fc:	e7ee      	b.n	800b2dc <__libc_init_array+0xc>
 800b2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b302:	4798      	blx	r3
 800b304:	3601      	adds	r6, #1
 800b306:	e7f2      	b.n	800b2ee <__libc_init_array+0x1e>
 800b308:	0800eae0 	.word	0x0800eae0
 800b30c:	0800eae0 	.word	0x0800eae0
 800b310:	0800eae0 	.word	0x0800eae0
 800b314:	0800eae4 	.word	0x0800eae4

0800b318 <__retarget_lock_acquire_recursive>:
 800b318:	4770      	bx	lr

0800b31a <__retarget_lock_release_recursive>:
 800b31a:	4770      	bx	lr

0800b31c <quorem>:
 800b31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	6903      	ldr	r3, [r0, #16]
 800b322:	690c      	ldr	r4, [r1, #16]
 800b324:	42a3      	cmp	r3, r4
 800b326:	4607      	mov	r7, r0
 800b328:	db7e      	blt.n	800b428 <quorem+0x10c>
 800b32a:	3c01      	subs	r4, #1
 800b32c:	f101 0814 	add.w	r8, r1, #20
 800b330:	f100 0514 	add.w	r5, r0, #20
 800b334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b33e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b342:	3301      	adds	r3, #1
 800b344:	429a      	cmp	r2, r3
 800b346:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b34a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b34e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b352:	d331      	bcc.n	800b3b8 <quorem+0x9c>
 800b354:	f04f 0e00 	mov.w	lr, #0
 800b358:	4640      	mov	r0, r8
 800b35a:	46ac      	mov	ip, r5
 800b35c:	46f2      	mov	sl, lr
 800b35e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b362:	b293      	uxth	r3, r2
 800b364:	fb06 e303 	mla	r3, r6, r3, lr
 800b368:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b36c:	0c1a      	lsrs	r2, r3, #16
 800b36e:	b29b      	uxth	r3, r3
 800b370:	ebaa 0303 	sub.w	r3, sl, r3
 800b374:	f8dc a000 	ldr.w	sl, [ip]
 800b378:	fa13 f38a 	uxtah	r3, r3, sl
 800b37c:	fb06 220e 	mla	r2, r6, lr, r2
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	9b00      	ldr	r3, [sp, #0]
 800b384:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b388:	b292      	uxth	r2, r2
 800b38a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b38e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b392:	f8bd 3000 	ldrh.w	r3, [sp]
 800b396:	4581      	cmp	r9, r0
 800b398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b39c:	f84c 3b04 	str.w	r3, [ip], #4
 800b3a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b3a4:	d2db      	bcs.n	800b35e <quorem+0x42>
 800b3a6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b3aa:	b92b      	cbnz	r3, 800b3b8 <quorem+0x9c>
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	3b04      	subs	r3, #4
 800b3b0:	429d      	cmp	r5, r3
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	d32c      	bcc.n	800b410 <quorem+0xf4>
 800b3b6:	613c      	str	r4, [r7, #16]
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f001 f9a7 	bl	800c70c <__mcmp>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	db22      	blt.n	800b408 <quorem+0xec>
 800b3c2:	3601      	adds	r6, #1
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3cc:	f8d1 c000 	ldr.w	ip, [r1]
 800b3d0:	b293      	uxth	r3, r2
 800b3d2:	1ac3      	subs	r3, r0, r3
 800b3d4:	0c12      	lsrs	r2, r2, #16
 800b3d6:	fa13 f38c 	uxtah	r3, r3, ip
 800b3da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b3de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3e8:	45c1      	cmp	r9, r8
 800b3ea:	f841 3b04 	str.w	r3, [r1], #4
 800b3ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b3f2:	d2e9      	bcs.n	800b3c8 <quorem+0xac>
 800b3f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3fc:	b922      	cbnz	r2, 800b408 <quorem+0xec>
 800b3fe:	3b04      	subs	r3, #4
 800b400:	429d      	cmp	r5, r3
 800b402:	461a      	mov	r2, r3
 800b404:	d30a      	bcc.n	800b41c <quorem+0x100>
 800b406:	613c      	str	r4, [r7, #16]
 800b408:	4630      	mov	r0, r6
 800b40a:	b003      	add	sp, #12
 800b40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	3b04      	subs	r3, #4
 800b414:	2a00      	cmp	r2, #0
 800b416:	d1ce      	bne.n	800b3b6 <quorem+0x9a>
 800b418:	3c01      	subs	r4, #1
 800b41a:	e7c9      	b.n	800b3b0 <quorem+0x94>
 800b41c:	6812      	ldr	r2, [r2, #0]
 800b41e:	3b04      	subs	r3, #4
 800b420:	2a00      	cmp	r2, #0
 800b422:	d1f0      	bne.n	800b406 <quorem+0xea>
 800b424:	3c01      	subs	r4, #1
 800b426:	e7eb      	b.n	800b400 <quorem+0xe4>
 800b428:	2000      	movs	r0, #0
 800b42a:	e7ee      	b.n	800b40a <quorem+0xee>
 800b42c:	0000      	movs	r0, r0
	...

0800b430 <_dtoa_r>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	ed2d 8b04 	vpush	{d8-d9}
 800b438:	69c5      	ldr	r5, [r0, #28]
 800b43a:	b093      	sub	sp, #76	; 0x4c
 800b43c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b440:	ec57 6b10 	vmov	r6, r7, d0
 800b444:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b448:	9107      	str	r1, [sp, #28]
 800b44a:	4604      	mov	r4, r0
 800b44c:	920a      	str	r2, [sp, #40]	; 0x28
 800b44e:	930d      	str	r3, [sp, #52]	; 0x34
 800b450:	b975      	cbnz	r5, 800b470 <_dtoa_r+0x40>
 800b452:	2010      	movs	r0, #16
 800b454:	f000 fe2a 	bl	800c0ac <malloc>
 800b458:	4602      	mov	r2, r0
 800b45a:	61e0      	str	r0, [r4, #28]
 800b45c:	b920      	cbnz	r0, 800b468 <_dtoa_r+0x38>
 800b45e:	4bae      	ldr	r3, [pc, #696]	; (800b718 <_dtoa_r+0x2e8>)
 800b460:	21ef      	movs	r1, #239	; 0xef
 800b462:	48ae      	ldr	r0, [pc, #696]	; (800b71c <_dtoa_r+0x2ec>)
 800b464:	f001 fe58 	bl	800d118 <__assert_func>
 800b468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b46c:	6005      	str	r5, [r0, #0]
 800b46e:	60c5      	str	r5, [r0, #12]
 800b470:	69e3      	ldr	r3, [r4, #28]
 800b472:	6819      	ldr	r1, [r3, #0]
 800b474:	b151      	cbz	r1, 800b48c <_dtoa_r+0x5c>
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	604a      	str	r2, [r1, #4]
 800b47a:	2301      	movs	r3, #1
 800b47c:	4093      	lsls	r3, r2
 800b47e:	608b      	str	r3, [r1, #8]
 800b480:	4620      	mov	r0, r4
 800b482:	f000 ff07 	bl	800c294 <_Bfree>
 800b486:	69e3      	ldr	r3, [r4, #28]
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	1e3b      	subs	r3, r7, #0
 800b48e:	bfbb      	ittet	lt
 800b490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b494:	9303      	strlt	r3, [sp, #12]
 800b496:	2300      	movge	r3, #0
 800b498:	2201      	movlt	r2, #1
 800b49a:	bfac      	ite	ge
 800b49c:	f8c8 3000 	strge.w	r3, [r8]
 800b4a0:	f8c8 2000 	strlt.w	r2, [r8]
 800b4a4:	4b9e      	ldr	r3, [pc, #632]	; (800b720 <_dtoa_r+0x2f0>)
 800b4a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b4aa:	ea33 0308 	bics.w	r3, r3, r8
 800b4ae:	d11b      	bne.n	800b4e8 <_dtoa_r+0xb8>
 800b4b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b4bc:	4333      	orrs	r3, r6
 800b4be:	f000 8593 	beq.w	800bfe8 <_dtoa_r+0xbb8>
 800b4c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4c4:	b963      	cbnz	r3, 800b4e0 <_dtoa_r+0xb0>
 800b4c6:	4b97      	ldr	r3, [pc, #604]	; (800b724 <_dtoa_r+0x2f4>)
 800b4c8:	e027      	b.n	800b51a <_dtoa_r+0xea>
 800b4ca:	4b97      	ldr	r3, [pc, #604]	; (800b728 <_dtoa_r+0x2f8>)
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	9800      	ldr	r0, [sp, #0]
 800b4d6:	b013      	add	sp, #76	; 0x4c
 800b4d8:	ecbd 8b04 	vpop	{d8-d9}
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	4b90      	ldr	r3, [pc, #576]	; (800b724 <_dtoa_r+0x2f4>)
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	3303      	adds	r3, #3
 800b4e6:	e7f3      	b.n	800b4d0 <_dtoa_r+0xa0>
 800b4e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	ec51 0b17 	vmov	r0, r1, d7
 800b4f2:	eeb0 8a47 	vmov.f32	s16, s14
 800b4f6:	eef0 8a67 	vmov.f32	s17, s15
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f7f5 fb0c 	bl	8000b18 <__aeabi_dcmpeq>
 800b500:	4681      	mov	r9, r0
 800b502:	b160      	cbz	r0, 800b51e <_dtoa_r+0xee>
 800b504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b506:	2301      	movs	r3, #1
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8568 	beq.w	800bfe2 <_dtoa_r+0xbb2>
 800b512:	4b86      	ldr	r3, [pc, #536]	; (800b72c <_dtoa_r+0x2fc>)
 800b514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	3b01      	subs	r3, #1
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	e7da      	b.n	800b4d4 <_dtoa_r+0xa4>
 800b51e:	aa10      	add	r2, sp, #64	; 0x40
 800b520:	a911      	add	r1, sp, #68	; 0x44
 800b522:	4620      	mov	r0, r4
 800b524:	eeb0 0a48 	vmov.f32	s0, s16
 800b528:	eef0 0a68 	vmov.f32	s1, s17
 800b52c:	f001 f994 	bl	800c858 <__d2b>
 800b530:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b534:	4682      	mov	sl, r0
 800b536:	2d00      	cmp	r5, #0
 800b538:	d07f      	beq.n	800b63a <_dtoa_r+0x20a>
 800b53a:	ee18 3a90 	vmov	r3, s17
 800b53e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b542:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b546:	ec51 0b18 	vmov	r0, r1, d8
 800b54a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b54e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b552:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b556:	4619      	mov	r1, r3
 800b558:	2200      	movs	r2, #0
 800b55a:	4b75      	ldr	r3, [pc, #468]	; (800b730 <_dtoa_r+0x300>)
 800b55c:	f7f4 febc 	bl	80002d8 <__aeabi_dsub>
 800b560:	a367      	add	r3, pc, #412	; (adr r3, 800b700 <_dtoa_r+0x2d0>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f7f5 f86f 	bl	8000648 <__aeabi_dmul>
 800b56a:	a367      	add	r3, pc, #412	; (adr r3, 800b708 <_dtoa_r+0x2d8>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f4 feb4 	bl	80002dc <__adddf3>
 800b574:	4606      	mov	r6, r0
 800b576:	4628      	mov	r0, r5
 800b578:	460f      	mov	r7, r1
 800b57a:	f7f4 fffb 	bl	8000574 <__aeabi_i2d>
 800b57e:	a364      	add	r3, pc, #400	; (adr r3, 800b710 <_dtoa_r+0x2e0>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f7f5 f860 	bl	8000648 <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f4 fea4 	bl	80002dc <__adddf3>
 800b594:	4606      	mov	r6, r0
 800b596:	460f      	mov	r7, r1
 800b598:	f7f5 fb06 	bl	8000ba8 <__aeabi_d2iz>
 800b59c:	2200      	movs	r2, #0
 800b59e:	4683      	mov	fp, r0
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f5 fac1 	bl	8000b2c <__aeabi_dcmplt>
 800b5aa:	b148      	cbz	r0, 800b5c0 <_dtoa_r+0x190>
 800b5ac:	4658      	mov	r0, fp
 800b5ae:	f7f4 ffe1 	bl	8000574 <__aeabi_i2d>
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	463b      	mov	r3, r7
 800b5b6:	f7f5 faaf 	bl	8000b18 <__aeabi_dcmpeq>
 800b5ba:	b908      	cbnz	r0, 800b5c0 <_dtoa_r+0x190>
 800b5bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5c0:	f1bb 0f16 	cmp.w	fp, #22
 800b5c4:	d857      	bhi.n	800b676 <_dtoa_r+0x246>
 800b5c6:	4b5b      	ldr	r3, [pc, #364]	; (800b734 <_dtoa_r+0x304>)
 800b5c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	ec51 0b18 	vmov	r0, r1, d8
 800b5d4:	f7f5 faaa 	bl	8000b2c <__aeabi_dcmplt>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d04e      	beq.n	800b67a <_dtoa_r+0x24a>
 800b5dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b5e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5e6:	1b5b      	subs	r3, r3, r5
 800b5e8:	1e5a      	subs	r2, r3, #1
 800b5ea:	bf45      	ittet	mi
 800b5ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800b5f0:	9305      	strmi	r3, [sp, #20]
 800b5f2:	2300      	movpl	r3, #0
 800b5f4:	2300      	movmi	r3, #0
 800b5f6:	9206      	str	r2, [sp, #24]
 800b5f8:	bf54      	ite	pl
 800b5fa:	9305      	strpl	r3, [sp, #20]
 800b5fc:	9306      	strmi	r3, [sp, #24]
 800b5fe:	f1bb 0f00 	cmp.w	fp, #0
 800b602:	db3c      	blt.n	800b67e <_dtoa_r+0x24e>
 800b604:	9b06      	ldr	r3, [sp, #24]
 800b606:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b60a:	445b      	add	r3, fp
 800b60c:	9306      	str	r3, [sp, #24]
 800b60e:	2300      	movs	r3, #0
 800b610:	9308      	str	r3, [sp, #32]
 800b612:	9b07      	ldr	r3, [sp, #28]
 800b614:	2b09      	cmp	r3, #9
 800b616:	d868      	bhi.n	800b6ea <_dtoa_r+0x2ba>
 800b618:	2b05      	cmp	r3, #5
 800b61a:	bfc4      	itt	gt
 800b61c:	3b04      	subgt	r3, #4
 800b61e:	9307      	strgt	r3, [sp, #28]
 800b620:	9b07      	ldr	r3, [sp, #28]
 800b622:	f1a3 0302 	sub.w	r3, r3, #2
 800b626:	bfcc      	ite	gt
 800b628:	2500      	movgt	r5, #0
 800b62a:	2501      	movle	r5, #1
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	f200 8085 	bhi.w	800b73c <_dtoa_r+0x30c>
 800b632:	e8df f003 	tbb	[pc, r3]
 800b636:	3b2e      	.short	0x3b2e
 800b638:	5839      	.short	0x5839
 800b63a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b63e:	441d      	add	r5, r3
 800b640:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b644:	2b20      	cmp	r3, #32
 800b646:	bfc1      	itttt	gt
 800b648:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b64c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b650:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b654:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b658:	bfd6      	itet	le
 800b65a:	f1c3 0320 	rsble	r3, r3, #32
 800b65e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b662:	fa06 f003 	lslle.w	r0, r6, r3
 800b666:	f7f4 ff75 	bl	8000554 <__aeabi_ui2d>
 800b66a:	2201      	movs	r2, #1
 800b66c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b670:	3d01      	subs	r5, #1
 800b672:	920e      	str	r2, [sp, #56]	; 0x38
 800b674:	e76f      	b.n	800b556 <_dtoa_r+0x126>
 800b676:	2301      	movs	r3, #1
 800b678:	e7b3      	b.n	800b5e2 <_dtoa_r+0x1b2>
 800b67a:	900c      	str	r0, [sp, #48]	; 0x30
 800b67c:	e7b2      	b.n	800b5e4 <_dtoa_r+0x1b4>
 800b67e:	9b05      	ldr	r3, [sp, #20]
 800b680:	eba3 030b 	sub.w	r3, r3, fp
 800b684:	9305      	str	r3, [sp, #20]
 800b686:	f1cb 0300 	rsb	r3, fp, #0
 800b68a:	9308      	str	r3, [sp, #32]
 800b68c:	2300      	movs	r3, #0
 800b68e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b690:	e7bf      	b.n	800b612 <_dtoa_r+0x1e2>
 800b692:	2300      	movs	r3, #0
 800b694:	9309      	str	r3, [sp, #36]	; 0x24
 800b696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dc52      	bgt.n	800b742 <_dtoa_r+0x312>
 800b69c:	2301      	movs	r3, #1
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	920a      	str	r2, [sp, #40]	; 0x28
 800b6a6:	e00b      	b.n	800b6c0 <_dtoa_r+0x290>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e7f3      	b.n	800b694 <_dtoa_r+0x264>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b2:	445b      	add	r3, fp
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	bfb8      	it	lt
 800b6be:	2301      	movlt	r3, #1
 800b6c0:	69e0      	ldr	r0, [r4, #28]
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	2204      	movs	r2, #4
 800b6c6:	f102 0614 	add.w	r6, r2, #20
 800b6ca:	429e      	cmp	r6, r3
 800b6cc:	d93d      	bls.n	800b74a <_dtoa_r+0x31a>
 800b6ce:	6041      	str	r1, [r0, #4]
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 fd9f 	bl	800c214 <_Balloc>
 800b6d6:	9000      	str	r0, [sp, #0]
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d139      	bne.n	800b750 <_dtoa_r+0x320>
 800b6dc:	4b16      	ldr	r3, [pc, #88]	; (800b738 <_dtoa_r+0x308>)
 800b6de:	4602      	mov	r2, r0
 800b6e0:	f240 11af 	movw	r1, #431	; 0x1af
 800b6e4:	e6bd      	b.n	800b462 <_dtoa_r+0x32>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e7e1      	b.n	800b6ae <_dtoa_r+0x27e>
 800b6ea:	2501      	movs	r5, #1
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	9307      	str	r3, [sp, #28]
 800b6f0:	9509      	str	r5, [sp, #36]	; 0x24
 800b6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	9304      	str	r3, [sp, #16]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	2312      	movs	r3, #18
 800b6fe:	e7d1      	b.n	800b6a4 <_dtoa_r+0x274>
 800b700:	636f4361 	.word	0x636f4361
 800b704:	3fd287a7 	.word	0x3fd287a7
 800b708:	8b60c8b3 	.word	0x8b60c8b3
 800b70c:	3fc68a28 	.word	0x3fc68a28
 800b710:	509f79fb 	.word	0x509f79fb
 800b714:	3fd34413 	.word	0x3fd34413
 800b718:	0800e5cd 	.word	0x0800e5cd
 800b71c:	0800e5e4 	.word	0x0800e5e4
 800b720:	7ff00000 	.word	0x7ff00000
 800b724:	0800e5c9 	.word	0x0800e5c9
 800b728:	0800e5c0 	.word	0x0800e5c0
 800b72c:	0800e59d 	.word	0x0800e59d
 800b730:	3ff80000 	.word	0x3ff80000
 800b734:	0800e6d0 	.word	0x0800e6d0
 800b738:	0800e63c 	.word	0x0800e63c
 800b73c:	2301      	movs	r3, #1
 800b73e:	9309      	str	r3, [sp, #36]	; 0x24
 800b740:	e7d7      	b.n	800b6f2 <_dtoa_r+0x2c2>
 800b742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	9304      	str	r3, [sp, #16]
 800b748:	e7ba      	b.n	800b6c0 <_dtoa_r+0x290>
 800b74a:	3101      	adds	r1, #1
 800b74c:	0052      	lsls	r2, r2, #1
 800b74e:	e7ba      	b.n	800b6c6 <_dtoa_r+0x296>
 800b750:	69e3      	ldr	r3, [r4, #28]
 800b752:	9a00      	ldr	r2, [sp, #0]
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	9b04      	ldr	r3, [sp, #16]
 800b758:	2b0e      	cmp	r3, #14
 800b75a:	f200 80a8 	bhi.w	800b8ae <_dtoa_r+0x47e>
 800b75e:	2d00      	cmp	r5, #0
 800b760:	f000 80a5 	beq.w	800b8ae <_dtoa_r+0x47e>
 800b764:	f1bb 0f00 	cmp.w	fp, #0
 800b768:	dd38      	ble.n	800b7dc <_dtoa_r+0x3ac>
 800b76a:	4bc0      	ldr	r3, [pc, #768]	; (800ba6c <_dtoa_r+0x63c>)
 800b76c:	f00b 020f 	and.w	r2, fp, #15
 800b770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b774:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b778:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b77c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b780:	d019      	beq.n	800b7b6 <_dtoa_r+0x386>
 800b782:	4bbb      	ldr	r3, [pc, #748]	; (800ba70 <_dtoa_r+0x640>)
 800b784:	ec51 0b18 	vmov	r0, r1, d8
 800b788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b78c:	f7f5 f886 	bl	800089c <__aeabi_ddiv>
 800b790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b794:	f008 080f 	and.w	r8, r8, #15
 800b798:	2503      	movs	r5, #3
 800b79a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ba70 <_dtoa_r+0x640>
 800b79e:	f1b8 0f00 	cmp.w	r8, #0
 800b7a2:	d10a      	bne.n	800b7ba <_dtoa_r+0x38a>
 800b7a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	463b      	mov	r3, r7
 800b7ac:	f7f5 f876 	bl	800089c <__aeabi_ddiv>
 800b7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7b4:	e02b      	b.n	800b80e <_dtoa_r+0x3de>
 800b7b6:	2502      	movs	r5, #2
 800b7b8:	e7ef      	b.n	800b79a <_dtoa_r+0x36a>
 800b7ba:	f018 0f01 	tst.w	r8, #1
 800b7be:	d008      	beq.n	800b7d2 <_dtoa_r+0x3a2>
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b7c8:	f7f4 ff3e 	bl	8000648 <__aeabi_dmul>
 800b7cc:	3501      	adds	r5, #1
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460f      	mov	r7, r1
 800b7d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b7d6:	f109 0908 	add.w	r9, r9, #8
 800b7da:	e7e0      	b.n	800b79e <_dtoa_r+0x36e>
 800b7dc:	f000 809f 	beq.w	800b91e <_dtoa_r+0x4ee>
 800b7e0:	f1cb 0600 	rsb	r6, fp, #0
 800b7e4:	4ba1      	ldr	r3, [pc, #644]	; (800ba6c <_dtoa_r+0x63c>)
 800b7e6:	4fa2      	ldr	r7, [pc, #648]	; (800ba70 <_dtoa_r+0x640>)
 800b7e8:	f006 020f 	and.w	r2, r6, #15
 800b7ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	ec51 0b18 	vmov	r0, r1, d8
 800b7f8:	f7f4 ff26 	bl	8000648 <__aeabi_dmul>
 800b7fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b800:	1136      	asrs	r6, r6, #4
 800b802:	2300      	movs	r3, #0
 800b804:	2502      	movs	r5, #2
 800b806:	2e00      	cmp	r6, #0
 800b808:	d17e      	bne.n	800b908 <_dtoa_r+0x4d8>
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1d0      	bne.n	800b7b0 <_dtoa_r+0x380>
 800b80e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b810:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 8084 	beq.w	800b922 <_dtoa_r+0x4f2>
 800b81a:	4b96      	ldr	r3, [pc, #600]	; (800ba74 <_dtoa_r+0x644>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	4640      	mov	r0, r8
 800b820:	4649      	mov	r1, r9
 800b822:	f7f5 f983 	bl	8000b2c <__aeabi_dcmplt>
 800b826:	2800      	cmp	r0, #0
 800b828:	d07b      	beq.n	800b922 <_dtoa_r+0x4f2>
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d078      	beq.n	800b922 <_dtoa_r+0x4f2>
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	dd39      	ble.n	800b8aa <_dtoa_r+0x47a>
 800b836:	4b90      	ldr	r3, [pc, #576]	; (800ba78 <_dtoa_r+0x648>)
 800b838:	2200      	movs	r2, #0
 800b83a:	4640      	mov	r0, r8
 800b83c:	4649      	mov	r1, r9
 800b83e:	f7f4 ff03 	bl	8000648 <__aeabi_dmul>
 800b842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b846:	9e01      	ldr	r6, [sp, #4]
 800b848:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b84c:	3501      	adds	r5, #1
 800b84e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b852:	4628      	mov	r0, r5
 800b854:	f7f4 fe8e 	bl	8000574 <__aeabi_i2d>
 800b858:	4642      	mov	r2, r8
 800b85a:	464b      	mov	r3, r9
 800b85c:	f7f4 fef4 	bl	8000648 <__aeabi_dmul>
 800b860:	4b86      	ldr	r3, [pc, #536]	; (800ba7c <_dtoa_r+0x64c>)
 800b862:	2200      	movs	r2, #0
 800b864:	f7f4 fd3a 	bl	80002dc <__adddf3>
 800b868:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b870:	9303      	str	r3, [sp, #12]
 800b872:	2e00      	cmp	r6, #0
 800b874:	d158      	bne.n	800b928 <_dtoa_r+0x4f8>
 800b876:	4b82      	ldr	r3, [pc, #520]	; (800ba80 <_dtoa_r+0x650>)
 800b878:	2200      	movs	r2, #0
 800b87a:	4640      	mov	r0, r8
 800b87c:	4649      	mov	r1, r9
 800b87e:	f7f4 fd2b 	bl	80002d8 <__aeabi_dsub>
 800b882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b886:	4680      	mov	r8, r0
 800b888:	4689      	mov	r9, r1
 800b88a:	f7f5 f96d 	bl	8000b68 <__aeabi_dcmpgt>
 800b88e:	2800      	cmp	r0, #0
 800b890:	f040 8296 	bne.w	800bdc0 <_dtoa_r+0x990>
 800b894:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b898:	4640      	mov	r0, r8
 800b89a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b89e:	4649      	mov	r1, r9
 800b8a0:	f7f5 f944 	bl	8000b2c <__aeabi_dcmplt>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f040 8289 	bne.w	800bdbc <_dtoa_r+0x98c>
 800b8aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b8ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f2c0 814e 	blt.w	800bb52 <_dtoa_r+0x722>
 800b8b6:	f1bb 0f0e 	cmp.w	fp, #14
 800b8ba:	f300 814a 	bgt.w	800bb52 <_dtoa_r+0x722>
 800b8be:	4b6b      	ldr	r3, [pc, #428]	; (800ba6c <_dtoa_r+0x63c>)
 800b8c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b8c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f280 80dc 	bge.w	800ba88 <_dtoa_r+0x658>
 800b8d0:	9b04      	ldr	r3, [sp, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f300 80d8 	bgt.w	800ba88 <_dtoa_r+0x658>
 800b8d8:	f040 826f 	bne.w	800bdba <_dtoa_r+0x98a>
 800b8dc:	4b68      	ldr	r3, [pc, #416]	; (800ba80 <_dtoa_r+0x650>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	f7f4 feb0 	bl	8000648 <__aeabi_dmul>
 800b8e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ec:	f7f5 f932 	bl	8000b54 <__aeabi_dcmpge>
 800b8f0:	9e04      	ldr	r6, [sp, #16]
 800b8f2:	4637      	mov	r7, r6
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f040 8245 	bne.w	800bd84 <_dtoa_r+0x954>
 800b8fa:	9d00      	ldr	r5, [sp, #0]
 800b8fc:	2331      	movs	r3, #49	; 0x31
 800b8fe:	f805 3b01 	strb.w	r3, [r5], #1
 800b902:	f10b 0b01 	add.w	fp, fp, #1
 800b906:	e241      	b.n	800bd8c <_dtoa_r+0x95c>
 800b908:	07f2      	lsls	r2, r6, #31
 800b90a:	d505      	bpl.n	800b918 <_dtoa_r+0x4e8>
 800b90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b910:	f7f4 fe9a 	bl	8000648 <__aeabi_dmul>
 800b914:	3501      	adds	r5, #1
 800b916:	2301      	movs	r3, #1
 800b918:	1076      	asrs	r6, r6, #1
 800b91a:	3708      	adds	r7, #8
 800b91c:	e773      	b.n	800b806 <_dtoa_r+0x3d6>
 800b91e:	2502      	movs	r5, #2
 800b920:	e775      	b.n	800b80e <_dtoa_r+0x3de>
 800b922:	9e04      	ldr	r6, [sp, #16]
 800b924:	465f      	mov	r7, fp
 800b926:	e792      	b.n	800b84e <_dtoa_r+0x41e>
 800b928:	9900      	ldr	r1, [sp, #0]
 800b92a:	4b50      	ldr	r3, [pc, #320]	; (800ba6c <_dtoa_r+0x63c>)
 800b92c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b930:	4431      	add	r1, r6
 800b932:	9102      	str	r1, [sp, #8]
 800b934:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b936:	eeb0 9a47 	vmov.f32	s18, s14
 800b93a:	eef0 9a67 	vmov.f32	s19, s15
 800b93e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b946:	2900      	cmp	r1, #0
 800b948:	d044      	beq.n	800b9d4 <_dtoa_r+0x5a4>
 800b94a:	494e      	ldr	r1, [pc, #312]	; (800ba84 <_dtoa_r+0x654>)
 800b94c:	2000      	movs	r0, #0
 800b94e:	f7f4 ffa5 	bl	800089c <__aeabi_ddiv>
 800b952:	ec53 2b19 	vmov	r2, r3, d9
 800b956:	f7f4 fcbf 	bl	80002d8 <__aeabi_dsub>
 800b95a:	9d00      	ldr	r5, [sp, #0]
 800b95c:	ec41 0b19 	vmov	d9, r0, r1
 800b960:	4649      	mov	r1, r9
 800b962:	4640      	mov	r0, r8
 800b964:	f7f5 f920 	bl	8000ba8 <__aeabi_d2iz>
 800b968:	4606      	mov	r6, r0
 800b96a:	f7f4 fe03 	bl	8000574 <__aeabi_i2d>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4640      	mov	r0, r8
 800b974:	4649      	mov	r1, r9
 800b976:	f7f4 fcaf 	bl	80002d8 <__aeabi_dsub>
 800b97a:	3630      	adds	r6, #48	; 0x30
 800b97c:	f805 6b01 	strb.w	r6, [r5], #1
 800b980:	ec53 2b19 	vmov	r2, r3, d9
 800b984:	4680      	mov	r8, r0
 800b986:	4689      	mov	r9, r1
 800b988:	f7f5 f8d0 	bl	8000b2c <__aeabi_dcmplt>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d164      	bne.n	800ba5a <_dtoa_r+0x62a>
 800b990:	4642      	mov	r2, r8
 800b992:	464b      	mov	r3, r9
 800b994:	4937      	ldr	r1, [pc, #220]	; (800ba74 <_dtoa_r+0x644>)
 800b996:	2000      	movs	r0, #0
 800b998:	f7f4 fc9e 	bl	80002d8 <__aeabi_dsub>
 800b99c:	ec53 2b19 	vmov	r2, r3, d9
 800b9a0:	f7f5 f8c4 	bl	8000b2c <__aeabi_dcmplt>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	f040 80b6 	bne.w	800bb16 <_dtoa_r+0x6e6>
 800b9aa:	9b02      	ldr	r3, [sp, #8]
 800b9ac:	429d      	cmp	r5, r3
 800b9ae:	f43f af7c 	beq.w	800b8aa <_dtoa_r+0x47a>
 800b9b2:	4b31      	ldr	r3, [pc, #196]	; (800ba78 <_dtoa_r+0x648>)
 800b9b4:	ec51 0b19 	vmov	r0, r1, d9
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f7f4 fe45 	bl	8000648 <__aeabi_dmul>
 800b9be:	4b2e      	ldr	r3, [pc, #184]	; (800ba78 <_dtoa_r+0x648>)
 800b9c0:	ec41 0b19 	vmov	d9, r0, r1
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	f7f4 fe3d 	bl	8000648 <__aeabi_dmul>
 800b9ce:	4680      	mov	r8, r0
 800b9d0:	4689      	mov	r9, r1
 800b9d2:	e7c5      	b.n	800b960 <_dtoa_r+0x530>
 800b9d4:	ec51 0b17 	vmov	r0, r1, d7
 800b9d8:	f7f4 fe36 	bl	8000648 <__aeabi_dmul>
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	9d00      	ldr	r5, [sp, #0]
 800b9e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9e2:	ec41 0b19 	vmov	d9, r0, r1
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	f7f5 f8dd 	bl	8000ba8 <__aeabi_d2iz>
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	f7f4 fdc0 	bl	8000574 <__aeabi_i2d>
 800b9f4:	3630      	adds	r6, #48	; 0x30
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fc6b 	bl	80002d8 <__aeabi_dsub>
 800ba02:	f805 6b01 	strb.w	r6, [r5], #1
 800ba06:	9b02      	ldr	r3, [sp, #8]
 800ba08:	429d      	cmp	r5, r3
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	4689      	mov	r9, r1
 800ba0e:	f04f 0200 	mov.w	r2, #0
 800ba12:	d124      	bne.n	800ba5e <_dtoa_r+0x62e>
 800ba14:	4b1b      	ldr	r3, [pc, #108]	; (800ba84 <_dtoa_r+0x654>)
 800ba16:	ec51 0b19 	vmov	r0, r1, d9
 800ba1a:	f7f4 fc5f 	bl	80002dc <__adddf3>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4640      	mov	r0, r8
 800ba24:	4649      	mov	r1, r9
 800ba26:	f7f5 f89f 	bl	8000b68 <__aeabi_dcmpgt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d173      	bne.n	800bb16 <_dtoa_r+0x6e6>
 800ba2e:	ec53 2b19 	vmov	r2, r3, d9
 800ba32:	4914      	ldr	r1, [pc, #80]	; (800ba84 <_dtoa_r+0x654>)
 800ba34:	2000      	movs	r0, #0
 800ba36:	f7f4 fc4f 	bl	80002d8 <__aeabi_dsub>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4640      	mov	r0, r8
 800ba40:	4649      	mov	r1, r9
 800ba42:	f7f5 f873 	bl	8000b2c <__aeabi_dcmplt>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	f43f af2f 	beq.w	800b8aa <_dtoa_r+0x47a>
 800ba4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ba4e:	1e6b      	subs	r3, r5, #1
 800ba50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba56:	2b30      	cmp	r3, #48	; 0x30
 800ba58:	d0f8      	beq.n	800ba4c <_dtoa_r+0x61c>
 800ba5a:	46bb      	mov	fp, r7
 800ba5c:	e04a      	b.n	800baf4 <_dtoa_r+0x6c4>
 800ba5e:	4b06      	ldr	r3, [pc, #24]	; (800ba78 <_dtoa_r+0x648>)
 800ba60:	f7f4 fdf2 	bl	8000648 <__aeabi_dmul>
 800ba64:	4680      	mov	r8, r0
 800ba66:	4689      	mov	r9, r1
 800ba68:	e7bd      	b.n	800b9e6 <_dtoa_r+0x5b6>
 800ba6a:	bf00      	nop
 800ba6c:	0800e6d0 	.word	0x0800e6d0
 800ba70:	0800e6a8 	.word	0x0800e6a8
 800ba74:	3ff00000 	.word	0x3ff00000
 800ba78:	40240000 	.word	0x40240000
 800ba7c:	401c0000 	.word	0x401c0000
 800ba80:	40140000 	.word	0x40140000
 800ba84:	3fe00000 	.word	0x3fe00000
 800ba88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba8c:	9d00      	ldr	r5, [sp, #0]
 800ba8e:	4642      	mov	r2, r8
 800ba90:	464b      	mov	r3, r9
 800ba92:	4630      	mov	r0, r6
 800ba94:	4639      	mov	r1, r7
 800ba96:	f7f4 ff01 	bl	800089c <__aeabi_ddiv>
 800ba9a:	f7f5 f885 	bl	8000ba8 <__aeabi_d2iz>
 800ba9e:	9001      	str	r0, [sp, #4]
 800baa0:	f7f4 fd68 	bl	8000574 <__aeabi_i2d>
 800baa4:	4642      	mov	r2, r8
 800baa6:	464b      	mov	r3, r9
 800baa8:	f7f4 fdce 	bl	8000648 <__aeabi_dmul>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4630      	mov	r0, r6
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f4 fc10 	bl	80002d8 <__aeabi_dsub>
 800bab8:	9e01      	ldr	r6, [sp, #4]
 800baba:	9f04      	ldr	r7, [sp, #16]
 800babc:	3630      	adds	r6, #48	; 0x30
 800babe:	f805 6b01 	strb.w	r6, [r5], #1
 800bac2:	9e00      	ldr	r6, [sp, #0]
 800bac4:	1bae      	subs	r6, r5, r6
 800bac6:	42b7      	cmp	r7, r6
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	d134      	bne.n	800bb38 <_dtoa_r+0x708>
 800bace:	f7f4 fc05 	bl	80002dc <__adddf3>
 800bad2:	4642      	mov	r2, r8
 800bad4:	464b      	mov	r3, r9
 800bad6:	4606      	mov	r6, r0
 800bad8:	460f      	mov	r7, r1
 800bada:	f7f5 f845 	bl	8000b68 <__aeabi_dcmpgt>
 800bade:	b9c8      	cbnz	r0, 800bb14 <_dtoa_r+0x6e4>
 800bae0:	4642      	mov	r2, r8
 800bae2:	464b      	mov	r3, r9
 800bae4:	4630      	mov	r0, r6
 800bae6:	4639      	mov	r1, r7
 800bae8:	f7f5 f816 	bl	8000b18 <__aeabi_dcmpeq>
 800baec:	b110      	cbz	r0, 800baf4 <_dtoa_r+0x6c4>
 800baee:	9b01      	ldr	r3, [sp, #4]
 800baf0:	07db      	lsls	r3, r3, #31
 800baf2:	d40f      	bmi.n	800bb14 <_dtoa_r+0x6e4>
 800baf4:	4651      	mov	r1, sl
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 fbcc 	bl	800c294 <_Bfree>
 800bafc:	2300      	movs	r3, #0
 800bafe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb00:	702b      	strb	r3, [r5, #0]
 800bb02:	f10b 0301 	add.w	r3, fp, #1
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f43f ace2 	beq.w	800b4d4 <_dtoa_r+0xa4>
 800bb10:	601d      	str	r5, [r3, #0]
 800bb12:	e4df      	b.n	800b4d4 <_dtoa_r+0xa4>
 800bb14:	465f      	mov	r7, fp
 800bb16:	462b      	mov	r3, r5
 800bb18:	461d      	mov	r5, r3
 800bb1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb1e:	2a39      	cmp	r2, #57	; 0x39
 800bb20:	d106      	bne.n	800bb30 <_dtoa_r+0x700>
 800bb22:	9a00      	ldr	r2, [sp, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d1f7      	bne.n	800bb18 <_dtoa_r+0x6e8>
 800bb28:	9900      	ldr	r1, [sp, #0]
 800bb2a:	2230      	movs	r2, #48	; 0x30
 800bb2c:	3701      	adds	r7, #1
 800bb2e:	700a      	strb	r2, [r1, #0]
 800bb30:	781a      	ldrb	r2, [r3, #0]
 800bb32:	3201      	adds	r2, #1
 800bb34:	701a      	strb	r2, [r3, #0]
 800bb36:	e790      	b.n	800ba5a <_dtoa_r+0x62a>
 800bb38:	4ba3      	ldr	r3, [pc, #652]	; (800bdc8 <_dtoa_r+0x998>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f7f4 fd84 	bl	8000648 <__aeabi_dmul>
 800bb40:	2200      	movs	r2, #0
 800bb42:	2300      	movs	r3, #0
 800bb44:	4606      	mov	r6, r0
 800bb46:	460f      	mov	r7, r1
 800bb48:	f7f4 ffe6 	bl	8000b18 <__aeabi_dcmpeq>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d09e      	beq.n	800ba8e <_dtoa_r+0x65e>
 800bb50:	e7d0      	b.n	800baf4 <_dtoa_r+0x6c4>
 800bb52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	f000 80ca 	beq.w	800bcee <_dtoa_r+0x8be>
 800bb5a:	9a07      	ldr	r2, [sp, #28]
 800bb5c:	2a01      	cmp	r2, #1
 800bb5e:	f300 80ad 	bgt.w	800bcbc <_dtoa_r+0x88c>
 800bb62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb64:	2a00      	cmp	r2, #0
 800bb66:	f000 80a5 	beq.w	800bcb4 <_dtoa_r+0x884>
 800bb6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb6e:	9e08      	ldr	r6, [sp, #32]
 800bb70:	9d05      	ldr	r5, [sp, #20]
 800bb72:	9a05      	ldr	r2, [sp, #20]
 800bb74:	441a      	add	r2, r3
 800bb76:	9205      	str	r2, [sp, #20]
 800bb78:	9a06      	ldr	r2, [sp, #24]
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	441a      	add	r2, r3
 800bb7e:	4620      	mov	r0, r4
 800bb80:	9206      	str	r2, [sp, #24]
 800bb82:	f000 fc3d 	bl	800c400 <__i2b>
 800bb86:	4607      	mov	r7, r0
 800bb88:	b165      	cbz	r5, 800bba4 <_dtoa_r+0x774>
 800bb8a:	9b06      	ldr	r3, [sp, #24]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	dd09      	ble.n	800bba4 <_dtoa_r+0x774>
 800bb90:	42ab      	cmp	r3, r5
 800bb92:	9a05      	ldr	r2, [sp, #20]
 800bb94:	bfa8      	it	ge
 800bb96:	462b      	movge	r3, r5
 800bb98:	1ad2      	subs	r2, r2, r3
 800bb9a:	9205      	str	r2, [sp, #20]
 800bb9c:	9a06      	ldr	r2, [sp, #24]
 800bb9e:	1aed      	subs	r5, r5, r3
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	9306      	str	r3, [sp, #24]
 800bba4:	9b08      	ldr	r3, [sp, #32]
 800bba6:	b1f3      	cbz	r3, 800bbe6 <_dtoa_r+0x7b6>
 800bba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 80a3 	beq.w	800bcf6 <_dtoa_r+0x8c6>
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	dd10      	ble.n	800bbd6 <_dtoa_r+0x7a6>
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	4632      	mov	r2, r6
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f000 fce1 	bl	800c580 <__pow5mult>
 800bbbe:	4652      	mov	r2, sl
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 fc31 	bl	800c42c <__multiply>
 800bbca:	4651      	mov	r1, sl
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f000 fb60 	bl	800c294 <_Bfree>
 800bbd4:	46c2      	mov	sl, r8
 800bbd6:	9b08      	ldr	r3, [sp, #32]
 800bbd8:	1b9a      	subs	r2, r3, r6
 800bbda:	d004      	beq.n	800bbe6 <_dtoa_r+0x7b6>
 800bbdc:	4651      	mov	r1, sl
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 fcce 	bl	800c580 <__pow5mult>
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 fc09 	bl	800c400 <__i2b>
 800bbee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	f340 8081 	ble.w	800bcfa <_dtoa_r+0x8ca>
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f000 fcbf 	bl	800c580 <__pow5mult>
 800bc02:	9b07      	ldr	r3, [sp, #28]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	4606      	mov	r6, r0
 800bc08:	dd7a      	ble.n	800bd00 <_dtoa_r+0x8d0>
 800bc0a:	f04f 0800 	mov.w	r8, #0
 800bc0e:	6933      	ldr	r3, [r6, #16]
 800bc10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc14:	6918      	ldr	r0, [r3, #16]
 800bc16:	f000 fba5 	bl	800c364 <__hi0bits>
 800bc1a:	f1c0 0020 	rsb	r0, r0, #32
 800bc1e:	9b06      	ldr	r3, [sp, #24]
 800bc20:	4418      	add	r0, r3
 800bc22:	f010 001f 	ands.w	r0, r0, #31
 800bc26:	f000 8094 	beq.w	800bd52 <_dtoa_r+0x922>
 800bc2a:	f1c0 0320 	rsb	r3, r0, #32
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	f340 8085 	ble.w	800bd3e <_dtoa_r+0x90e>
 800bc34:	9b05      	ldr	r3, [sp, #20]
 800bc36:	f1c0 001c 	rsb	r0, r0, #28
 800bc3a:	4403      	add	r3, r0
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	9b06      	ldr	r3, [sp, #24]
 800bc40:	4403      	add	r3, r0
 800bc42:	4405      	add	r5, r0
 800bc44:	9306      	str	r3, [sp, #24]
 800bc46:	9b05      	ldr	r3, [sp, #20]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dd05      	ble.n	800bc58 <_dtoa_r+0x828>
 800bc4c:	4651      	mov	r1, sl
 800bc4e:	461a      	mov	r2, r3
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 fcef 	bl	800c634 <__lshift>
 800bc56:	4682      	mov	sl, r0
 800bc58:	9b06      	ldr	r3, [sp, #24]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dd05      	ble.n	800bc6a <_dtoa_r+0x83a>
 800bc5e:	4631      	mov	r1, r6
 800bc60:	461a      	mov	r2, r3
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 fce6 	bl	800c634 <__lshift>
 800bc68:	4606      	mov	r6, r0
 800bc6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d072      	beq.n	800bd56 <_dtoa_r+0x926>
 800bc70:	4631      	mov	r1, r6
 800bc72:	4650      	mov	r0, sl
 800bc74:	f000 fd4a 	bl	800c70c <__mcmp>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	da6c      	bge.n	800bd56 <_dtoa_r+0x926>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4651      	mov	r1, sl
 800bc80:	220a      	movs	r2, #10
 800bc82:	4620      	mov	r0, r4
 800bc84:	f000 fb28 	bl	800c2d8 <__multadd>
 800bc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc8e:	4682      	mov	sl, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 81b0 	beq.w	800bff6 <_dtoa_r+0xbc6>
 800bc96:	2300      	movs	r3, #0
 800bc98:	4639      	mov	r1, r7
 800bc9a:	220a      	movs	r2, #10
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f000 fb1b 	bl	800c2d8 <__multadd>
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	4607      	mov	r7, r0
 800bca8:	f300 8096 	bgt.w	800bdd8 <_dtoa_r+0x9a8>
 800bcac:	9b07      	ldr	r3, [sp, #28]
 800bcae:	2b02      	cmp	r3, #2
 800bcb0:	dc59      	bgt.n	800bd66 <_dtoa_r+0x936>
 800bcb2:	e091      	b.n	800bdd8 <_dtoa_r+0x9a8>
 800bcb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bcb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bcba:	e758      	b.n	800bb6e <_dtoa_r+0x73e>
 800bcbc:	9b04      	ldr	r3, [sp, #16]
 800bcbe:	1e5e      	subs	r6, r3, #1
 800bcc0:	9b08      	ldr	r3, [sp, #32]
 800bcc2:	42b3      	cmp	r3, r6
 800bcc4:	bfbf      	itttt	lt
 800bcc6:	9b08      	ldrlt	r3, [sp, #32]
 800bcc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bcca:	9608      	strlt	r6, [sp, #32]
 800bccc:	1af3      	sublt	r3, r6, r3
 800bcce:	bfb4      	ite	lt
 800bcd0:	18d2      	addlt	r2, r2, r3
 800bcd2:	1b9e      	subge	r6, r3, r6
 800bcd4:	9b04      	ldr	r3, [sp, #16]
 800bcd6:	bfbc      	itt	lt
 800bcd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bcda:	2600      	movlt	r6, #0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	bfb7      	itett	lt
 800bce0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bce4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bce8:	1a9d      	sublt	r5, r3, r2
 800bcea:	2300      	movlt	r3, #0
 800bcec:	e741      	b.n	800bb72 <_dtoa_r+0x742>
 800bcee:	9e08      	ldr	r6, [sp, #32]
 800bcf0:	9d05      	ldr	r5, [sp, #20]
 800bcf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bcf4:	e748      	b.n	800bb88 <_dtoa_r+0x758>
 800bcf6:	9a08      	ldr	r2, [sp, #32]
 800bcf8:	e770      	b.n	800bbdc <_dtoa_r+0x7ac>
 800bcfa:	9b07      	ldr	r3, [sp, #28]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	dc19      	bgt.n	800bd34 <_dtoa_r+0x904>
 800bd00:	9b02      	ldr	r3, [sp, #8]
 800bd02:	b9bb      	cbnz	r3, 800bd34 <_dtoa_r+0x904>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd0a:	b99b      	cbnz	r3, 800bd34 <_dtoa_r+0x904>
 800bd0c:	9b03      	ldr	r3, [sp, #12]
 800bd0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd12:	0d1b      	lsrs	r3, r3, #20
 800bd14:	051b      	lsls	r3, r3, #20
 800bd16:	b183      	cbz	r3, 800bd3a <_dtoa_r+0x90a>
 800bd18:	9b05      	ldr	r3, [sp, #20]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	9305      	str	r3, [sp, #20]
 800bd1e:	9b06      	ldr	r3, [sp, #24]
 800bd20:	3301      	adds	r3, #1
 800bd22:	9306      	str	r3, [sp, #24]
 800bd24:	f04f 0801 	mov.w	r8, #1
 800bd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f47f af6f 	bne.w	800bc0e <_dtoa_r+0x7de>
 800bd30:	2001      	movs	r0, #1
 800bd32:	e774      	b.n	800bc1e <_dtoa_r+0x7ee>
 800bd34:	f04f 0800 	mov.w	r8, #0
 800bd38:	e7f6      	b.n	800bd28 <_dtoa_r+0x8f8>
 800bd3a:	4698      	mov	r8, r3
 800bd3c:	e7f4      	b.n	800bd28 <_dtoa_r+0x8f8>
 800bd3e:	d082      	beq.n	800bc46 <_dtoa_r+0x816>
 800bd40:	9a05      	ldr	r2, [sp, #20]
 800bd42:	331c      	adds	r3, #28
 800bd44:	441a      	add	r2, r3
 800bd46:	9205      	str	r2, [sp, #20]
 800bd48:	9a06      	ldr	r2, [sp, #24]
 800bd4a:	441a      	add	r2, r3
 800bd4c:	441d      	add	r5, r3
 800bd4e:	9206      	str	r2, [sp, #24]
 800bd50:	e779      	b.n	800bc46 <_dtoa_r+0x816>
 800bd52:	4603      	mov	r3, r0
 800bd54:	e7f4      	b.n	800bd40 <_dtoa_r+0x910>
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dc37      	bgt.n	800bdcc <_dtoa_r+0x99c>
 800bd5c:	9b07      	ldr	r3, [sp, #28]
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	dd34      	ble.n	800bdcc <_dtoa_r+0x99c>
 800bd62:	9b04      	ldr	r3, [sp, #16]
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	9b01      	ldr	r3, [sp, #4]
 800bd68:	b963      	cbnz	r3, 800bd84 <_dtoa_r+0x954>
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	2205      	movs	r2, #5
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fab2 	bl	800c2d8 <__multadd>
 800bd74:	4601      	mov	r1, r0
 800bd76:	4606      	mov	r6, r0
 800bd78:	4650      	mov	r0, sl
 800bd7a:	f000 fcc7 	bl	800c70c <__mcmp>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f73f adbb 	bgt.w	800b8fa <_dtoa_r+0x4ca>
 800bd84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd86:	9d00      	ldr	r5, [sp, #0]
 800bd88:	ea6f 0b03 	mvn.w	fp, r3
 800bd8c:	f04f 0800 	mov.w	r8, #0
 800bd90:	4631      	mov	r1, r6
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 fa7e 	bl	800c294 <_Bfree>
 800bd98:	2f00      	cmp	r7, #0
 800bd9a:	f43f aeab 	beq.w	800baf4 <_dtoa_r+0x6c4>
 800bd9e:	f1b8 0f00 	cmp.w	r8, #0
 800bda2:	d005      	beq.n	800bdb0 <_dtoa_r+0x980>
 800bda4:	45b8      	cmp	r8, r7
 800bda6:	d003      	beq.n	800bdb0 <_dtoa_r+0x980>
 800bda8:	4641      	mov	r1, r8
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 fa72 	bl	800c294 <_Bfree>
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f000 fa6e 	bl	800c294 <_Bfree>
 800bdb8:	e69c      	b.n	800baf4 <_dtoa_r+0x6c4>
 800bdba:	2600      	movs	r6, #0
 800bdbc:	4637      	mov	r7, r6
 800bdbe:	e7e1      	b.n	800bd84 <_dtoa_r+0x954>
 800bdc0:	46bb      	mov	fp, r7
 800bdc2:	4637      	mov	r7, r6
 800bdc4:	e599      	b.n	800b8fa <_dtoa_r+0x4ca>
 800bdc6:	bf00      	nop
 800bdc8:	40240000 	.word	0x40240000
 800bdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 80c8 	beq.w	800bf64 <_dtoa_r+0xb34>
 800bdd4:	9b04      	ldr	r3, [sp, #16]
 800bdd6:	9301      	str	r3, [sp, #4]
 800bdd8:	2d00      	cmp	r5, #0
 800bdda:	dd05      	ble.n	800bde8 <_dtoa_r+0x9b8>
 800bddc:	4639      	mov	r1, r7
 800bdde:	462a      	mov	r2, r5
 800bde0:	4620      	mov	r0, r4
 800bde2:	f000 fc27 	bl	800c634 <__lshift>
 800bde6:	4607      	mov	r7, r0
 800bde8:	f1b8 0f00 	cmp.w	r8, #0
 800bdec:	d05b      	beq.n	800bea6 <_dtoa_r+0xa76>
 800bdee:	6879      	ldr	r1, [r7, #4]
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f000 fa0f 	bl	800c214 <_Balloc>
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	b928      	cbnz	r0, 800be06 <_dtoa_r+0x9d6>
 800bdfa:	4b83      	ldr	r3, [pc, #524]	; (800c008 <_dtoa_r+0xbd8>)
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800be02:	f7ff bb2e 	b.w	800b462 <_dtoa_r+0x32>
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	3202      	adds	r2, #2
 800be0a:	0092      	lsls	r2, r2, #2
 800be0c:	f107 010c 	add.w	r1, r7, #12
 800be10:	300c      	adds	r0, #12
 800be12:	f001 f973 	bl	800d0fc <memcpy>
 800be16:	2201      	movs	r2, #1
 800be18:	4629      	mov	r1, r5
 800be1a:	4620      	mov	r0, r4
 800be1c:	f000 fc0a 	bl	800c634 <__lshift>
 800be20:	9b00      	ldr	r3, [sp, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	9304      	str	r3, [sp, #16]
 800be26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be2a:	4413      	add	r3, r2
 800be2c:	9308      	str	r3, [sp, #32]
 800be2e:	9b02      	ldr	r3, [sp, #8]
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	46b8      	mov	r8, r7
 800be36:	9306      	str	r3, [sp, #24]
 800be38:	4607      	mov	r7, r0
 800be3a:	9b04      	ldr	r3, [sp, #16]
 800be3c:	4631      	mov	r1, r6
 800be3e:	3b01      	subs	r3, #1
 800be40:	4650      	mov	r0, sl
 800be42:	9301      	str	r3, [sp, #4]
 800be44:	f7ff fa6a 	bl	800b31c <quorem>
 800be48:	4641      	mov	r1, r8
 800be4a:	9002      	str	r0, [sp, #8]
 800be4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800be50:	4650      	mov	r0, sl
 800be52:	f000 fc5b 	bl	800c70c <__mcmp>
 800be56:	463a      	mov	r2, r7
 800be58:	9005      	str	r0, [sp, #20]
 800be5a:	4631      	mov	r1, r6
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 fc71 	bl	800c744 <__mdiff>
 800be62:	68c2      	ldr	r2, [r0, #12]
 800be64:	4605      	mov	r5, r0
 800be66:	bb02      	cbnz	r2, 800beaa <_dtoa_r+0xa7a>
 800be68:	4601      	mov	r1, r0
 800be6a:	4650      	mov	r0, sl
 800be6c:	f000 fc4e 	bl	800c70c <__mcmp>
 800be70:	4602      	mov	r2, r0
 800be72:	4629      	mov	r1, r5
 800be74:	4620      	mov	r0, r4
 800be76:	9209      	str	r2, [sp, #36]	; 0x24
 800be78:	f000 fa0c 	bl	800c294 <_Bfree>
 800be7c:	9b07      	ldr	r3, [sp, #28]
 800be7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be80:	9d04      	ldr	r5, [sp, #16]
 800be82:	ea43 0102 	orr.w	r1, r3, r2
 800be86:	9b06      	ldr	r3, [sp, #24]
 800be88:	4319      	orrs	r1, r3
 800be8a:	d110      	bne.n	800beae <_dtoa_r+0xa7e>
 800be8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be90:	d029      	beq.n	800bee6 <_dtoa_r+0xab6>
 800be92:	9b05      	ldr	r3, [sp, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	dd02      	ble.n	800be9e <_dtoa_r+0xa6e>
 800be98:	9b02      	ldr	r3, [sp, #8]
 800be9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	f883 9000 	strb.w	r9, [r3]
 800bea4:	e774      	b.n	800bd90 <_dtoa_r+0x960>
 800bea6:	4638      	mov	r0, r7
 800bea8:	e7ba      	b.n	800be20 <_dtoa_r+0x9f0>
 800beaa:	2201      	movs	r2, #1
 800beac:	e7e1      	b.n	800be72 <_dtoa_r+0xa42>
 800beae:	9b05      	ldr	r3, [sp, #20]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	db04      	blt.n	800bebe <_dtoa_r+0xa8e>
 800beb4:	9907      	ldr	r1, [sp, #28]
 800beb6:	430b      	orrs	r3, r1
 800beb8:	9906      	ldr	r1, [sp, #24]
 800beba:	430b      	orrs	r3, r1
 800bebc:	d120      	bne.n	800bf00 <_dtoa_r+0xad0>
 800bebe:	2a00      	cmp	r2, #0
 800bec0:	dded      	ble.n	800be9e <_dtoa_r+0xa6e>
 800bec2:	4651      	mov	r1, sl
 800bec4:	2201      	movs	r2, #1
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 fbb4 	bl	800c634 <__lshift>
 800becc:	4631      	mov	r1, r6
 800bece:	4682      	mov	sl, r0
 800bed0:	f000 fc1c 	bl	800c70c <__mcmp>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	dc03      	bgt.n	800bee0 <_dtoa_r+0xab0>
 800bed8:	d1e1      	bne.n	800be9e <_dtoa_r+0xa6e>
 800beda:	f019 0f01 	tst.w	r9, #1
 800bede:	d0de      	beq.n	800be9e <_dtoa_r+0xa6e>
 800bee0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bee4:	d1d8      	bne.n	800be98 <_dtoa_r+0xa68>
 800bee6:	9a01      	ldr	r2, [sp, #4]
 800bee8:	2339      	movs	r3, #57	; 0x39
 800beea:	7013      	strb	r3, [r2, #0]
 800beec:	462b      	mov	r3, r5
 800beee:	461d      	mov	r5, r3
 800bef0:	3b01      	subs	r3, #1
 800bef2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bef6:	2a39      	cmp	r2, #57	; 0x39
 800bef8:	d06c      	beq.n	800bfd4 <_dtoa_r+0xba4>
 800befa:	3201      	adds	r2, #1
 800befc:	701a      	strb	r2, [r3, #0]
 800befe:	e747      	b.n	800bd90 <_dtoa_r+0x960>
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	dd07      	ble.n	800bf14 <_dtoa_r+0xae4>
 800bf04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bf08:	d0ed      	beq.n	800bee6 <_dtoa_r+0xab6>
 800bf0a:	9a01      	ldr	r2, [sp, #4]
 800bf0c:	f109 0301 	add.w	r3, r9, #1
 800bf10:	7013      	strb	r3, [r2, #0]
 800bf12:	e73d      	b.n	800bd90 <_dtoa_r+0x960>
 800bf14:	9b04      	ldr	r3, [sp, #16]
 800bf16:	9a08      	ldr	r2, [sp, #32]
 800bf18:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d043      	beq.n	800bfa8 <_dtoa_r+0xb78>
 800bf20:	4651      	mov	r1, sl
 800bf22:	2300      	movs	r3, #0
 800bf24:	220a      	movs	r2, #10
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 f9d6 	bl	800c2d8 <__multadd>
 800bf2c:	45b8      	cmp	r8, r7
 800bf2e:	4682      	mov	sl, r0
 800bf30:	f04f 0300 	mov.w	r3, #0
 800bf34:	f04f 020a 	mov.w	r2, #10
 800bf38:	4641      	mov	r1, r8
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	d107      	bne.n	800bf4e <_dtoa_r+0xb1e>
 800bf3e:	f000 f9cb 	bl	800c2d8 <__multadd>
 800bf42:	4680      	mov	r8, r0
 800bf44:	4607      	mov	r7, r0
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	9304      	str	r3, [sp, #16]
 800bf4c:	e775      	b.n	800be3a <_dtoa_r+0xa0a>
 800bf4e:	f000 f9c3 	bl	800c2d8 <__multadd>
 800bf52:	4639      	mov	r1, r7
 800bf54:	4680      	mov	r8, r0
 800bf56:	2300      	movs	r3, #0
 800bf58:	220a      	movs	r2, #10
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f000 f9bc 	bl	800c2d8 <__multadd>
 800bf60:	4607      	mov	r7, r0
 800bf62:	e7f0      	b.n	800bf46 <_dtoa_r+0xb16>
 800bf64:	9b04      	ldr	r3, [sp, #16]
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	9d00      	ldr	r5, [sp, #0]
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4650      	mov	r0, sl
 800bf6e:	f7ff f9d5 	bl	800b31c <quorem>
 800bf72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf76:	9b00      	ldr	r3, [sp, #0]
 800bf78:	f805 9b01 	strb.w	r9, [r5], #1
 800bf7c:	1aea      	subs	r2, r5, r3
 800bf7e:	9b01      	ldr	r3, [sp, #4]
 800bf80:	4293      	cmp	r3, r2
 800bf82:	dd07      	ble.n	800bf94 <_dtoa_r+0xb64>
 800bf84:	4651      	mov	r1, sl
 800bf86:	2300      	movs	r3, #0
 800bf88:	220a      	movs	r2, #10
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 f9a4 	bl	800c2d8 <__multadd>
 800bf90:	4682      	mov	sl, r0
 800bf92:	e7ea      	b.n	800bf6a <_dtoa_r+0xb3a>
 800bf94:	9b01      	ldr	r3, [sp, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	bfc8      	it	gt
 800bf9a:	461d      	movgt	r5, r3
 800bf9c:	9b00      	ldr	r3, [sp, #0]
 800bf9e:	bfd8      	it	le
 800bfa0:	2501      	movle	r5, #1
 800bfa2:	441d      	add	r5, r3
 800bfa4:	f04f 0800 	mov.w	r8, #0
 800bfa8:	4651      	mov	r1, sl
 800bfaa:	2201      	movs	r2, #1
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fb41 	bl	800c634 <__lshift>
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4682      	mov	sl, r0
 800bfb6:	f000 fba9 	bl	800c70c <__mcmp>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	dc96      	bgt.n	800beec <_dtoa_r+0xabc>
 800bfbe:	d102      	bne.n	800bfc6 <_dtoa_r+0xb96>
 800bfc0:	f019 0f01 	tst.w	r9, #1
 800bfc4:	d192      	bne.n	800beec <_dtoa_r+0xabc>
 800bfc6:	462b      	mov	r3, r5
 800bfc8:	461d      	mov	r5, r3
 800bfca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfce:	2a30      	cmp	r2, #48	; 0x30
 800bfd0:	d0fa      	beq.n	800bfc8 <_dtoa_r+0xb98>
 800bfd2:	e6dd      	b.n	800bd90 <_dtoa_r+0x960>
 800bfd4:	9a00      	ldr	r2, [sp, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d189      	bne.n	800beee <_dtoa_r+0xabe>
 800bfda:	f10b 0b01 	add.w	fp, fp, #1
 800bfde:	2331      	movs	r3, #49	; 0x31
 800bfe0:	e796      	b.n	800bf10 <_dtoa_r+0xae0>
 800bfe2:	4b0a      	ldr	r3, [pc, #40]	; (800c00c <_dtoa_r+0xbdc>)
 800bfe4:	f7ff ba99 	b.w	800b51a <_dtoa_r+0xea>
 800bfe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f47f aa6d 	bne.w	800b4ca <_dtoa_r+0x9a>
 800bff0:	4b07      	ldr	r3, [pc, #28]	; (800c010 <_dtoa_r+0xbe0>)
 800bff2:	f7ff ba92 	b.w	800b51a <_dtoa_r+0xea>
 800bff6:	9b01      	ldr	r3, [sp, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dcb5      	bgt.n	800bf68 <_dtoa_r+0xb38>
 800bffc:	9b07      	ldr	r3, [sp, #28]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	f73f aeb1 	bgt.w	800bd66 <_dtoa_r+0x936>
 800c004:	e7b0      	b.n	800bf68 <_dtoa_r+0xb38>
 800c006:	bf00      	nop
 800c008:	0800e63c 	.word	0x0800e63c
 800c00c:	0800e59c 	.word	0x0800e59c
 800c010:	0800e5c0 	.word	0x0800e5c0

0800c014 <_free_r>:
 800c014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c016:	2900      	cmp	r1, #0
 800c018:	d044      	beq.n	800c0a4 <_free_r+0x90>
 800c01a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c01e:	9001      	str	r0, [sp, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f1a1 0404 	sub.w	r4, r1, #4
 800c026:	bfb8      	it	lt
 800c028:	18e4      	addlt	r4, r4, r3
 800c02a:	f000 f8e7 	bl	800c1fc <__malloc_lock>
 800c02e:	4a1e      	ldr	r2, [pc, #120]	; (800c0a8 <_free_r+0x94>)
 800c030:	9801      	ldr	r0, [sp, #4]
 800c032:	6813      	ldr	r3, [r2, #0]
 800c034:	b933      	cbnz	r3, 800c044 <_free_r+0x30>
 800c036:	6063      	str	r3, [r4, #4]
 800c038:	6014      	str	r4, [r2, #0]
 800c03a:	b003      	add	sp, #12
 800c03c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c040:	f000 b8e2 	b.w	800c208 <__malloc_unlock>
 800c044:	42a3      	cmp	r3, r4
 800c046:	d908      	bls.n	800c05a <_free_r+0x46>
 800c048:	6825      	ldr	r5, [r4, #0]
 800c04a:	1961      	adds	r1, r4, r5
 800c04c:	428b      	cmp	r3, r1
 800c04e:	bf01      	itttt	eq
 800c050:	6819      	ldreq	r1, [r3, #0]
 800c052:	685b      	ldreq	r3, [r3, #4]
 800c054:	1949      	addeq	r1, r1, r5
 800c056:	6021      	streq	r1, [r4, #0]
 800c058:	e7ed      	b.n	800c036 <_free_r+0x22>
 800c05a:	461a      	mov	r2, r3
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	b10b      	cbz	r3, 800c064 <_free_r+0x50>
 800c060:	42a3      	cmp	r3, r4
 800c062:	d9fa      	bls.n	800c05a <_free_r+0x46>
 800c064:	6811      	ldr	r1, [r2, #0]
 800c066:	1855      	adds	r5, r2, r1
 800c068:	42a5      	cmp	r5, r4
 800c06a:	d10b      	bne.n	800c084 <_free_r+0x70>
 800c06c:	6824      	ldr	r4, [r4, #0]
 800c06e:	4421      	add	r1, r4
 800c070:	1854      	adds	r4, r2, r1
 800c072:	42a3      	cmp	r3, r4
 800c074:	6011      	str	r1, [r2, #0]
 800c076:	d1e0      	bne.n	800c03a <_free_r+0x26>
 800c078:	681c      	ldr	r4, [r3, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	6053      	str	r3, [r2, #4]
 800c07e:	440c      	add	r4, r1
 800c080:	6014      	str	r4, [r2, #0]
 800c082:	e7da      	b.n	800c03a <_free_r+0x26>
 800c084:	d902      	bls.n	800c08c <_free_r+0x78>
 800c086:	230c      	movs	r3, #12
 800c088:	6003      	str	r3, [r0, #0]
 800c08a:	e7d6      	b.n	800c03a <_free_r+0x26>
 800c08c:	6825      	ldr	r5, [r4, #0]
 800c08e:	1961      	adds	r1, r4, r5
 800c090:	428b      	cmp	r3, r1
 800c092:	bf04      	itt	eq
 800c094:	6819      	ldreq	r1, [r3, #0]
 800c096:	685b      	ldreq	r3, [r3, #4]
 800c098:	6063      	str	r3, [r4, #4]
 800c09a:	bf04      	itt	eq
 800c09c:	1949      	addeq	r1, r1, r5
 800c09e:	6021      	streq	r1, [r4, #0]
 800c0a0:	6054      	str	r4, [r2, #4]
 800c0a2:	e7ca      	b.n	800c03a <_free_r+0x26>
 800c0a4:	b003      	add	sp, #12
 800c0a6:	bd30      	pop	{r4, r5, pc}
 800c0a8:	20001b48 	.word	0x20001b48

0800c0ac <malloc>:
 800c0ac:	4b02      	ldr	r3, [pc, #8]	; (800c0b8 <malloc+0xc>)
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	6818      	ldr	r0, [r3, #0]
 800c0b2:	f000 b823 	b.w	800c0fc <_malloc_r>
 800c0b6:	bf00      	nop
 800c0b8:	20000068 	.word	0x20000068

0800c0bc <sbrk_aligned>:
 800c0bc:	b570      	push	{r4, r5, r6, lr}
 800c0be:	4e0e      	ldr	r6, [pc, #56]	; (800c0f8 <sbrk_aligned+0x3c>)
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	6831      	ldr	r1, [r6, #0]
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	b911      	cbnz	r1, 800c0ce <sbrk_aligned+0x12>
 800c0c8:	f001 f808 	bl	800d0dc <_sbrk_r>
 800c0cc:	6030      	str	r0, [r6, #0]
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f001 f803 	bl	800d0dc <_sbrk_r>
 800c0d6:	1c43      	adds	r3, r0, #1
 800c0d8:	d00a      	beq.n	800c0f0 <sbrk_aligned+0x34>
 800c0da:	1cc4      	adds	r4, r0, #3
 800c0dc:	f024 0403 	bic.w	r4, r4, #3
 800c0e0:	42a0      	cmp	r0, r4
 800c0e2:	d007      	beq.n	800c0f4 <sbrk_aligned+0x38>
 800c0e4:	1a21      	subs	r1, r4, r0
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 fff8 	bl	800d0dc <_sbrk_r>
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	d101      	bne.n	800c0f4 <sbrk_aligned+0x38>
 800c0f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	20001b4c 	.word	0x20001b4c

0800c0fc <_malloc_r>:
 800c0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c100:	1ccd      	adds	r5, r1, #3
 800c102:	f025 0503 	bic.w	r5, r5, #3
 800c106:	3508      	adds	r5, #8
 800c108:	2d0c      	cmp	r5, #12
 800c10a:	bf38      	it	cc
 800c10c:	250c      	movcc	r5, #12
 800c10e:	2d00      	cmp	r5, #0
 800c110:	4607      	mov	r7, r0
 800c112:	db01      	blt.n	800c118 <_malloc_r+0x1c>
 800c114:	42a9      	cmp	r1, r5
 800c116:	d905      	bls.n	800c124 <_malloc_r+0x28>
 800c118:	230c      	movs	r3, #12
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	2600      	movs	r6, #0
 800c11e:	4630      	mov	r0, r6
 800c120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1f8 <_malloc_r+0xfc>
 800c128:	f000 f868 	bl	800c1fc <__malloc_lock>
 800c12c:	f8d8 3000 	ldr.w	r3, [r8]
 800c130:	461c      	mov	r4, r3
 800c132:	bb5c      	cbnz	r4, 800c18c <_malloc_r+0x90>
 800c134:	4629      	mov	r1, r5
 800c136:	4638      	mov	r0, r7
 800c138:	f7ff ffc0 	bl	800c0bc <sbrk_aligned>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	4604      	mov	r4, r0
 800c140:	d155      	bne.n	800c1ee <_malloc_r+0xf2>
 800c142:	f8d8 4000 	ldr.w	r4, [r8]
 800c146:	4626      	mov	r6, r4
 800c148:	2e00      	cmp	r6, #0
 800c14a:	d145      	bne.n	800c1d8 <_malloc_r+0xdc>
 800c14c:	2c00      	cmp	r4, #0
 800c14e:	d048      	beq.n	800c1e2 <_malloc_r+0xe6>
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	4631      	mov	r1, r6
 800c154:	4638      	mov	r0, r7
 800c156:	eb04 0903 	add.w	r9, r4, r3
 800c15a:	f000 ffbf 	bl	800d0dc <_sbrk_r>
 800c15e:	4581      	cmp	r9, r0
 800c160:	d13f      	bne.n	800c1e2 <_malloc_r+0xe6>
 800c162:	6821      	ldr	r1, [r4, #0]
 800c164:	1a6d      	subs	r5, r5, r1
 800c166:	4629      	mov	r1, r5
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff ffa7 	bl	800c0bc <sbrk_aligned>
 800c16e:	3001      	adds	r0, #1
 800c170:	d037      	beq.n	800c1e2 <_malloc_r+0xe6>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	442b      	add	r3, r5
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	f8d8 3000 	ldr.w	r3, [r8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d038      	beq.n	800c1f2 <_malloc_r+0xf6>
 800c180:	685a      	ldr	r2, [r3, #4]
 800c182:	42a2      	cmp	r2, r4
 800c184:	d12b      	bne.n	800c1de <_malloc_r+0xe2>
 800c186:	2200      	movs	r2, #0
 800c188:	605a      	str	r2, [r3, #4]
 800c18a:	e00f      	b.n	800c1ac <_malloc_r+0xb0>
 800c18c:	6822      	ldr	r2, [r4, #0]
 800c18e:	1b52      	subs	r2, r2, r5
 800c190:	d41f      	bmi.n	800c1d2 <_malloc_r+0xd6>
 800c192:	2a0b      	cmp	r2, #11
 800c194:	d917      	bls.n	800c1c6 <_malloc_r+0xca>
 800c196:	1961      	adds	r1, r4, r5
 800c198:	42a3      	cmp	r3, r4
 800c19a:	6025      	str	r5, [r4, #0]
 800c19c:	bf18      	it	ne
 800c19e:	6059      	strne	r1, [r3, #4]
 800c1a0:	6863      	ldr	r3, [r4, #4]
 800c1a2:	bf08      	it	eq
 800c1a4:	f8c8 1000 	streq.w	r1, [r8]
 800c1a8:	5162      	str	r2, [r4, r5]
 800c1aa:	604b      	str	r3, [r1, #4]
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	f104 060b 	add.w	r6, r4, #11
 800c1b2:	f000 f829 	bl	800c208 <__malloc_unlock>
 800c1b6:	f026 0607 	bic.w	r6, r6, #7
 800c1ba:	1d23      	adds	r3, r4, #4
 800c1bc:	1af2      	subs	r2, r6, r3
 800c1be:	d0ae      	beq.n	800c11e <_malloc_r+0x22>
 800c1c0:	1b9b      	subs	r3, r3, r6
 800c1c2:	50a3      	str	r3, [r4, r2]
 800c1c4:	e7ab      	b.n	800c11e <_malloc_r+0x22>
 800c1c6:	42a3      	cmp	r3, r4
 800c1c8:	6862      	ldr	r2, [r4, #4]
 800c1ca:	d1dd      	bne.n	800c188 <_malloc_r+0x8c>
 800c1cc:	f8c8 2000 	str.w	r2, [r8]
 800c1d0:	e7ec      	b.n	800c1ac <_malloc_r+0xb0>
 800c1d2:	4623      	mov	r3, r4
 800c1d4:	6864      	ldr	r4, [r4, #4]
 800c1d6:	e7ac      	b.n	800c132 <_malloc_r+0x36>
 800c1d8:	4634      	mov	r4, r6
 800c1da:	6876      	ldr	r6, [r6, #4]
 800c1dc:	e7b4      	b.n	800c148 <_malloc_r+0x4c>
 800c1de:	4613      	mov	r3, r2
 800c1e0:	e7cc      	b.n	800c17c <_malloc_r+0x80>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f000 f80e 	bl	800c208 <__malloc_unlock>
 800c1ec:	e797      	b.n	800c11e <_malloc_r+0x22>
 800c1ee:	6025      	str	r5, [r4, #0]
 800c1f0:	e7dc      	b.n	800c1ac <_malloc_r+0xb0>
 800c1f2:	605b      	str	r3, [r3, #4]
 800c1f4:	deff      	udf	#255	; 0xff
 800c1f6:	bf00      	nop
 800c1f8:	20001b48 	.word	0x20001b48

0800c1fc <__malloc_lock>:
 800c1fc:	4801      	ldr	r0, [pc, #4]	; (800c204 <__malloc_lock+0x8>)
 800c1fe:	f7ff b88b 	b.w	800b318 <__retarget_lock_acquire_recursive>
 800c202:	bf00      	nop
 800c204:	20001b44 	.word	0x20001b44

0800c208 <__malloc_unlock>:
 800c208:	4801      	ldr	r0, [pc, #4]	; (800c210 <__malloc_unlock+0x8>)
 800c20a:	f7ff b886 	b.w	800b31a <__retarget_lock_release_recursive>
 800c20e:	bf00      	nop
 800c210:	20001b44 	.word	0x20001b44

0800c214 <_Balloc>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	69c6      	ldr	r6, [r0, #28]
 800c218:	4604      	mov	r4, r0
 800c21a:	460d      	mov	r5, r1
 800c21c:	b976      	cbnz	r6, 800c23c <_Balloc+0x28>
 800c21e:	2010      	movs	r0, #16
 800c220:	f7ff ff44 	bl	800c0ac <malloc>
 800c224:	4602      	mov	r2, r0
 800c226:	61e0      	str	r0, [r4, #28]
 800c228:	b920      	cbnz	r0, 800c234 <_Balloc+0x20>
 800c22a:	4b18      	ldr	r3, [pc, #96]	; (800c28c <_Balloc+0x78>)
 800c22c:	4818      	ldr	r0, [pc, #96]	; (800c290 <_Balloc+0x7c>)
 800c22e:	216b      	movs	r1, #107	; 0x6b
 800c230:	f000 ff72 	bl	800d118 <__assert_func>
 800c234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c238:	6006      	str	r6, [r0, #0]
 800c23a:	60c6      	str	r6, [r0, #12]
 800c23c:	69e6      	ldr	r6, [r4, #28]
 800c23e:	68f3      	ldr	r3, [r6, #12]
 800c240:	b183      	cbz	r3, 800c264 <_Balloc+0x50>
 800c242:	69e3      	ldr	r3, [r4, #28]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c24a:	b9b8      	cbnz	r0, 800c27c <_Balloc+0x68>
 800c24c:	2101      	movs	r1, #1
 800c24e:	fa01 f605 	lsl.w	r6, r1, r5
 800c252:	1d72      	adds	r2, r6, #5
 800c254:	0092      	lsls	r2, r2, #2
 800c256:	4620      	mov	r0, r4
 800c258:	f000 ff7c 	bl	800d154 <_calloc_r>
 800c25c:	b160      	cbz	r0, 800c278 <_Balloc+0x64>
 800c25e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c262:	e00e      	b.n	800c282 <_Balloc+0x6e>
 800c264:	2221      	movs	r2, #33	; 0x21
 800c266:	2104      	movs	r1, #4
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 ff73 	bl	800d154 <_calloc_r>
 800c26e:	69e3      	ldr	r3, [r4, #28]
 800c270:	60f0      	str	r0, [r6, #12]
 800c272:	68db      	ldr	r3, [r3, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e4      	bne.n	800c242 <_Balloc+0x2e>
 800c278:	2000      	movs	r0, #0
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	6802      	ldr	r2, [r0, #0]
 800c27e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c282:	2300      	movs	r3, #0
 800c284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c288:	e7f7      	b.n	800c27a <_Balloc+0x66>
 800c28a:	bf00      	nop
 800c28c:	0800e5cd 	.word	0x0800e5cd
 800c290:	0800e64d 	.word	0x0800e64d

0800c294 <_Bfree>:
 800c294:	b570      	push	{r4, r5, r6, lr}
 800c296:	69c6      	ldr	r6, [r0, #28]
 800c298:	4605      	mov	r5, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	b976      	cbnz	r6, 800c2bc <_Bfree+0x28>
 800c29e:	2010      	movs	r0, #16
 800c2a0:	f7ff ff04 	bl	800c0ac <malloc>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	61e8      	str	r0, [r5, #28]
 800c2a8:	b920      	cbnz	r0, 800c2b4 <_Bfree+0x20>
 800c2aa:	4b09      	ldr	r3, [pc, #36]	; (800c2d0 <_Bfree+0x3c>)
 800c2ac:	4809      	ldr	r0, [pc, #36]	; (800c2d4 <_Bfree+0x40>)
 800c2ae:	218f      	movs	r1, #143	; 0x8f
 800c2b0:	f000 ff32 	bl	800d118 <__assert_func>
 800c2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2b8:	6006      	str	r6, [r0, #0]
 800c2ba:	60c6      	str	r6, [r0, #12]
 800c2bc:	b13c      	cbz	r4, 800c2ce <_Bfree+0x3a>
 800c2be:	69eb      	ldr	r3, [r5, #28]
 800c2c0:	6862      	ldr	r2, [r4, #4]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2c8:	6021      	str	r1, [r4, #0]
 800c2ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	0800e5cd 	.word	0x0800e5cd
 800c2d4:	0800e64d 	.word	0x0800e64d

0800c2d8 <__multadd>:
 800c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	690d      	ldr	r5, [r1, #16]
 800c2de:	4607      	mov	r7, r0
 800c2e0:	460c      	mov	r4, r1
 800c2e2:	461e      	mov	r6, r3
 800c2e4:	f101 0c14 	add.w	ip, r1, #20
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c2ee:	b299      	uxth	r1, r3
 800c2f0:	fb02 6101 	mla	r1, r2, r1, r6
 800c2f4:	0c1e      	lsrs	r6, r3, #16
 800c2f6:	0c0b      	lsrs	r3, r1, #16
 800c2f8:	fb02 3306 	mla	r3, r2, r6, r3
 800c2fc:	b289      	uxth	r1, r1
 800c2fe:	3001      	adds	r0, #1
 800c300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c304:	4285      	cmp	r5, r0
 800c306:	f84c 1b04 	str.w	r1, [ip], #4
 800c30a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c30e:	dcec      	bgt.n	800c2ea <__multadd+0x12>
 800c310:	b30e      	cbz	r6, 800c356 <__multadd+0x7e>
 800c312:	68a3      	ldr	r3, [r4, #8]
 800c314:	42ab      	cmp	r3, r5
 800c316:	dc19      	bgt.n	800c34c <__multadd+0x74>
 800c318:	6861      	ldr	r1, [r4, #4]
 800c31a:	4638      	mov	r0, r7
 800c31c:	3101      	adds	r1, #1
 800c31e:	f7ff ff79 	bl	800c214 <_Balloc>
 800c322:	4680      	mov	r8, r0
 800c324:	b928      	cbnz	r0, 800c332 <__multadd+0x5a>
 800c326:	4602      	mov	r2, r0
 800c328:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <__multadd+0x84>)
 800c32a:	480d      	ldr	r0, [pc, #52]	; (800c360 <__multadd+0x88>)
 800c32c:	21ba      	movs	r1, #186	; 0xba
 800c32e:	f000 fef3 	bl	800d118 <__assert_func>
 800c332:	6922      	ldr	r2, [r4, #16]
 800c334:	3202      	adds	r2, #2
 800c336:	f104 010c 	add.w	r1, r4, #12
 800c33a:	0092      	lsls	r2, r2, #2
 800c33c:	300c      	adds	r0, #12
 800c33e:	f000 fedd 	bl	800d0fc <memcpy>
 800c342:	4621      	mov	r1, r4
 800c344:	4638      	mov	r0, r7
 800c346:	f7ff ffa5 	bl	800c294 <_Bfree>
 800c34a:	4644      	mov	r4, r8
 800c34c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c350:	3501      	adds	r5, #1
 800c352:	615e      	str	r6, [r3, #20]
 800c354:	6125      	str	r5, [r4, #16]
 800c356:	4620      	mov	r0, r4
 800c358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c35c:	0800e63c 	.word	0x0800e63c
 800c360:	0800e64d 	.word	0x0800e64d

0800c364 <__hi0bits>:
 800c364:	0c03      	lsrs	r3, r0, #16
 800c366:	041b      	lsls	r3, r3, #16
 800c368:	b9d3      	cbnz	r3, 800c3a0 <__hi0bits+0x3c>
 800c36a:	0400      	lsls	r0, r0, #16
 800c36c:	2310      	movs	r3, #16
 800c36e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c372:	bf04      	itt	eq
 800c374:	0200      	lsleq	r0, r0, #8
 800c376:	3308      	addeq	r3, #8
 800c378:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c37c:	bf04      	itt	eq
 800c37e:	0100      	lsleq	r0, r0, #4
 800c380:	3304      	addeq	r3, #4
 800c382:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c386:	bf04      	itt	eq
 800c388:	0080      	lsleq	r0, r0, #2
 800c38a:	3302      	addeq	r3, #2
 800c38c:	2800      	cmp	r0, #0
 800c38e:	db05      	blt.n	800c39c <__hi0bits+0x38>
 800c390:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c394:	f103 0301 	add.w	r3, r3, #1
 800c398:	bf08      	it	eq
 800c39a:	2320      	moveq	r3, #32
 800c39c:	4618      	mov	r0, r3
 800c39e:	4770      	bx	lr
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	e7e4      	b.n	800c36e <__hi0bits+0xa>

0800c3a4 <__lo0bits>:
 800c3a4:	6803      	ldr	r3, [r0, #0]
 800c3a6:	f013 0207 	ands.w	r2, r3, #7
 800c3aa:	d00c      	beq.n	800c3c6 <__lo0bits+0x22>
 800c3ac:	07d9      	lsls	r1, r3, #31
 800c3ae:	d422      	bmi.n	800c3f6 <__lo0bits+0x52>
 800c3b0:	079a      	lsls	r2, r3, #30
 800c3b2:	bf49      	itett	mi
 800c3b4:	085b      	lsrmi	r3, r3, #1
 800c3b6:	089b      	lsrpl	r3, r3, #2
 800c3b8:	6003      	strmi	r3, [r0, #0]
 800c3ba:	2201      	movmi	r2, #1
 800c3bc:	bf5c      	itt	pl
 800c3be:	6003      	strpl	r3, [r0, #0]
 800c3c0:	2202      	movpl	r2, #2
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	4770      	bx	lr
 800c3c6:	b299      	uxth	r1, r3
 800c3c8:	b909      	cbnz	r1, 800c3ce <__lo0bits+0x2a>
 800c3ca:	0c1b      	lsrs	r3, r3, #16
 800c3cc:	2210      	movs	r2, #16
 800c3ce:	b2d9      	uxtb	r1, r3
 800c3d0:	b909      	cbnz	r1, 800c3d6 <__lo0bits+0x32>
 800c3d2:	3208      	adds	r2, #8
 800c3d4:	0a1b      	lsrs	r3, r3, #8
 800c3d6:	0719      	lsls	r1, r3, #28
 800c3d8:	bf04      	itt	eq
 800c3da:	091b      	lsreq	r3, r3, #4
 800c3dc:	3204      	addeq	r2, #4
 800c3de:	0799      	lsls	r1, r3, #30
 800c3e0:	bf04      	itt	eq
 800c3e2:	089b      	lsreq	r3, r3, #2
 800c3e4:	3202      	addeq	r2, #2
 800c3e6:	07d9      	lsls	r1, r3, #31
 800c3e8:	d403      	bmi.n	800c3f2 <__lo0bits+0x4e>
 800c3ea:	085b      	lsrs	r3, r3, #1
 800c3ec:	f102 0201 	add.w	r2, r2, #1
 800c3f0:	d003      	beq.n	800c3fa <__lo0bits+0x56>
 800c3f2:	6003      	str	r3, [r0, #0]
 800c3f4:	e7e5      	b.n	800c3c2 <__lo0bits+0x1e>
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	e7e3      	b.n	800c3c2 <__lo0bits+0x1e>
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	e7e1      	b.n	800c3c2 <__lo0bits+0x1e>
	...

0800c400 <__i2b>:
 800c400:	b510      	push	{r4, lr}
 800c402:	460c      	mov	r4, r1
 800c404:	2101      	movs	r1, #1
 800c406:	f7ff ff05 	bl	800c214 <_Balloc>
 800c40a:	4602      	mov	r2, r0
 800c40c:	b928      	cbnz	r0, 800c41a <__i2b+0x1a>
 800c40e:	4b05      	ldr	r3, [pc, #20]	; (800c424 <__i2b+0x24>)
 800c410:	4805      	ldr	r0, [pc, #20]	; (800c428 <__i2b+0x28>)
 800c412:	f240 1145 	movw	r1, #325	; 0x145
 800c416:	f000 fe7f 	bl	800d118 <__assert_func>
 800c41a:	2301      	movs	r3, #1
 800c41c:	6144      	str	r4, [r0, #20]
 800c41e:	6103      	str	r3, [r0, #16]
 800c420:	bd10      	pop	{r4, pc}
 800c422:	bf00      	nop
 800c424:	0800e63c 	.word	0x0800e63c
 800c428:	0800e64d 	.word	0x0800e64d

0800c42c <__multiply>:
 800c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	4691      	mov	r9, r2
 800c432:	690a      	ldr	r2, [r1, #16]
 800c434:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c438:	429a      	cmp	r2, r3
 800c43a:	bfb8      	it	lt
 800c43c:	460b      	movlt	r3, r1
 800c43e:	460c      	mov	r4, r1
 800c440:	bfbc      	itt	lt
 800c442:	464c      	movlt	r4, r9
 800c444:	4699      	movlt	r9, r3
 800c446:	6927      	ldr	r7, [r4, #16]
 800c448:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	6861      	ldr	r1, [r4, #4]
 800c450:	eb07 060a 	add.w	r6, r7, sl
 800c454:	42b3      	cmp	r3, r6
 800c456:	b085      	sub	sp, #20
 800c458:	bfb8      	it	lt
 800c45a:	3101      	addlt	r1, #1
 800c45c:	f7ff feda 	bl	800c214 <_Balloc>
 800c460:	b930      	cbnz	r0, 800c470 <__multiply+0x44>
 800c462:	4602      	mov	r2, r0
 800c464:	4b44      	ldr	r3, [pc, #272]	; (800c578 <__multiply+0x14c>)
 800c466:	4845      	ldr	r0, [pc, #276]	; (800c57c <__multiply+0x150>)
 800c468:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c46c:	f000 fe54 	bl	800d118 <__assert_func>
 800c470:	f100 0514 	add.w	r5, r0, #20
 800c474:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c478:	462b      	mov	r3, r5
 800c47a:	2200      	movs	r2, #0
 800c47c:	4543      	cmp	r3, r8
 800c47e:	d321      	bcc.n	800c4c4 <__multiply+0x98>
 800c480:	f104 0314 	add.w	r3, r4, #20
 800c484:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c488:	f109 0314 	add.w	r3, r9, #20
 800c48c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c490:	9202      	str	r2, [sp, #8]
 800c492:	1b3a      	subs	r2, r7, r4
 800c494:	3a15      	subs	r2, #21
 800c496:	f022 0203 	bic.w	r2, r2, #3
 800c49a:	3204      	adds	r2, #4
 800c49c:	f104 0115 	add.w	r1, r4, #21
 800c4a0:	428f      	cmp	r7, r1
 800c4a2:	bf38      	it	cc
 800c4a4:	2204      	movcc	r2, #4
 800c4a6:	9201      	str	r2, [sp, #4]
 800c4a8:	9a02      	ldr	r2, [sp, #8]
 800c4aa:	9303      	str	r3, [sp, #12]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d80c      	bhi.n	800c4ca <__multiply+0x9e>
 800c4b0:	2e00      	cmp	r6, #0
 800c4b2:	dd03      	ble.n	800c4bc <__multiply+0x90>
 800c4b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d05b      	beq.n	800c574 <__multiply+0x148>
 800c4bc:	6106      	str	r6, [r0, #16]
 800c4be:	b005      	add	sp, #20
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c4:	f843 2b04 	str.w	r2, [r3], #4
 800c4c8:	e7d8      	b.n	800c47c <__multiply+0x50>
 800c4ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800c4ce:	f1ba 0f00 	cmp.w	sl, #0
 800c4d2:	d024      	beq.n	800c51e <__multiply+0xf2>
 800c4d4:	f104 0e14 	add.w	lr, r4, #20
 800c4d8:	46a9      	mov	r9, r5
 800c4da:	f04f 0c00 	mov.w	ip, #0
 800c4de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c4e2:	f8d9 1000 	ldr.w	r1, [r9]
 800c4e6:	fa1f fb82 	uxth.w	fp, r2
 800c4ea:	b289      	uxth	r1, r1
 800c4ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800c4f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c4f4:	f8d9 2000 	ldr.w	r2, [r9]
 800c4f8:	4461      	add	r1, ip
 800c4fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800c502:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c506:	b289      	uxth	r1, r1
 800c508:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c50c:	4577      	cmp	r7, lr
 800c50e:	f849 1b04 	str.w	r1, [r9], #4
 800c512:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c516:	d8e2      	bhi.n	800c4de <__multiply+0xb2>
 800c518:	9a01      	ldr	r2, [sp, #4]
 800c51a:	f845 c002 	str.w	ip, [r5, r2]
 800c51e:	9a03      	ldr	r2, [sp, #12]
 800c520:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c524:	3304      	adds	r3, #4
 800c526:	f1b9 0f00 	cmp.w	r9, #0
 800c52a:	d021      	beq.n	800c570 <__multiply+0x144>
 800c52c:	6829      	ldr	r1, [r5, #0]
 800c52e:	f104 0c14 	add.w	ip, r4, #20
 800c532:	46ae      	mov	lr, r5
 800c534:	f04f 0a00 	mov.w	sl, #0
 800c538:	f8bc b000 	ldrh.w	fp, [ip]
 800c53c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c540:	fb09 220b 	mla	r2, r9, fp, r2
 800c544:	4452      	add	r2, sl
 800c546:	b289      	uxth	r1, r1
 800c548:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c54c:	f84e 1b04 	str.w	r1, [lr], #4
 800c550:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c554:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c558:	f8be 1000 	ldrh.w	r1, [lr]
 800c55c:	fb09 110a 	mla	r1, r9, sl, r1
 800c560:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c564:	4567      	cmp	r7, ip
 800c566:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c56a:	d8e5      	bhi.n	800c538 <__multiply+0x10c>
 800c56c:	9a01      	ldr	r2, [sp, #4]
 800c56e:	50a9      	str	r1, [r5, r2]
 800c570:	3504      	adds	r5, #4
 800c572:	e799      	b.n	800c4a8 <__multiply+0x7c>
 800c574:	3e01      	subs	r6, #1
 800c576:	e79b      	b.n	800c4b0 <__multiply+0x84>
 800c578:	0800e63c 	.word	0x0800e63c
 800c57c:	0800e64d 	.word	0x0800e64d

0800c580 <__pow5mult>:
 800c580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c584:	4615      	mov	r5, r2
 800c586:	f012 0203 	ands.w	r2, r2, #3
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	d007      	beq.n	800c5a0 <__pow5mult+0x20>
 800c590:	4c25      	ldr	r4, [pc, #148]	; (800c628 <__pow5mult+0xa8>)
 800c592:	3a01      	subs	r2, #1
 800c594:	2300      	movs	r3, #0
 800c596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c59a:	f7ff fe9d 	bl	800c2d8 <__multadd>
 800c59e:	4607      	mov	r7, r0
 800c5a0:	10ad      	asrs	r5, r5, #2
 800c5a2:	d03d      	beq.n	800c620 <__pow5mult+0xa0>
 800c5a4:	69f4      	ldr	r4, [r6, #28]
 800c5a6:	b97c      	cbnz	r4, 800c5c8 <__pow5mult+0x48>
 800c5a8:	2010      	movs	r0, #16
 800c5aa:	f7ff fd7f 	bl	800c0ac <malloc>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	61f0      	str	r0, [r6, #28]
 800c5b2:	b928      	cbnz	r0, 800c5c0 <__pow5mult+0x40>
 800c5b4:	4b1d      	ldr	r3, [pc, #116]	; (800c62c <__pow5mult+0xac>)
 800c5b6:	481e      	ldr	r0, [pc, #120]	; (800c630 <__pow5mult+0xb0>)
 800c5b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c5bc:	f000 fdac 	bl	800d118 <__assert_func>
 800c5c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5c4:	6004      	str	r4, [r0, #0]
 800c5c6:	60c4      	str	r4, [r0, #12]
 800c5c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c5cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5d0:	b94c      	cbnz	r4, 800c5e6 <__pow5mult+0x66>
 800c5d2:	f240 2171 	movw	r1, #625	; 0x271
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f7ff ff12 	bl	800c400 <__i2b>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	6003      	str	r3, [r0, #0]
 800c5e6:	f04f 0900 	mov.w	r9, #0
 800c5ea:	07eb      	lsls	r3, r5, #31
 800c5ec:	d50a      	bpl.n	800c604 <__pow5mult+0x84>
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f7ff ff1a 	bl	800c42c <__multiply>
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	4680      	mov	r8, r0
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f7ff fe49 	bl	800c294 <_Bfree>
 800c602:	4647      	mov	r7, r8
 800c604:	106d      	asrs	r5, r5, #1
 800c606:	d00b      	beq.n	800c620 <__pow5mult+0xa0>
 800c608:	6820      	ldr	r0, [r4, #0]
 800c60a:	b938      	cbnz	r0, 800c61c <__pow5mult+0x9c>
 800c60c:	4622      	mov	r2, r4
 800c60e:	4621      	mov	r1, r4
 800c610:	4630      	mov	r0, r6
 800c612:	f7ff ff0b 	bl	800c42c <__multiply>
 800c616:	6020      	str	r0, [r4, #0]
 800c618:	f8c0 9000 	str.w	r9, [r0]
 800c61c:	4604      	mov	r4, r0
 800c61e:	e7e4      	b.n	800c5ea <__pow5mult+0x6a>
 800c620:	4638      	mov	r0, r7
 800c622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c626:	bf00      	nop
 800c628:	0800e798 	.word	0x0800e798
 800c62c:	0800e5cd 	.word	0x0800e5cd
 800c630:	0800e64d 	.word	0x0800e64d

0800c634 <__lshift>:
 800c634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c638:	460c      	mov	r4, r1
 800c63a:	6849      	ldr	r1, [r1, #4]
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c642:	68a3      	ldr	r3, [r4, #8]
 800c644:	4607      	mov	r7, r0
 800c646:	4691      	mov	r9, r2
 800c648:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c64c:	f108 0601 	add.w	r6, r8, #1
 800c650:	42b3      	cmp	r3, r6
 800c652:	db0b      	blt.n	800c66c <__lshift+0x38>
 800c654:	4638      	mov	r0, r7
 800c656:	f7ff fddd 	bl	800c214 <_Balloc>
 800c65a:	4605      	mov	r5, r0
 800c65c:	b948      	cbnz	r0, 800c672 <__lshift+0x3e>
 800c65e:	4602      	mov	r2, r0
 800c660:	4b28      	ldr	r3, [pc, #160]	; (800c704 <__lshift+0xd0>)
 800c662:	4829      	ldr	r0, [pc, #164]	; (800c708 <__lshift+0xd4>)
 800c664:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c668:	f000 fd56 	bl	800d118 <__assert_func>
 800c66c:	3101      	adds	r1, #1
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	e7ee      	b.n	800c650 <__lshift+0x1c>
 800c672:	2300      	movs	r3, #0
 800c674:	f100 0114 	add.w	r1, r0, #20
 800c678:	f100 0210 	add.w	r2, r0, #16
 800c67c:	4618      	mov	r0, r3
 800c67e:	4553      	cmp	r3, sl
 800c680:	db33      	blt.n	800c6ea <__lshift+0xb6>
 800c682:	6920      	ldr	r0, [r4, #16]
 800c684:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c688:	f104 0314 	add.w	r3, r4, #20
 800c68c:	f019 091f 	ands.w	r9, r9, #31
 800c690:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c694:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c698:	d02b      	beq.n	800c6f2 <__lshift+0xbe>
 800c69a:	f1c9 0e20 	rsb	lr, r9, #32
 800c69e:	468a      	mov	sl, r1
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	fa00 f009 	lsl.w	r0, r0, r9
 800c6a8:	4310      	orrs	r0, r2
 800c6aa:	f84a 0b04 	str.w	r0, [sl], #4
 800c6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6b2:	459c      	cmp	ip, r3
 800c6b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6b8:	d8f3      	bhi.n	800c6a2 <__lshift+0x6e>
 800c6ba:	ebac 0304 	sub.w	r3, ip, r4
 800c6be:	3b15      	subs	r3, #21
 800c6c0:	f023 0303 	bic.w	r3, r3, #3
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	f104 0015 	add.w	r0, r4, #21
 800c6ca:	4584      	cmp	ip, r0
 800c6cc:	bf38      	it	cc
 800c6ce:	2304      	movcc	r3, #4
 800c6d0:	50ca      	str	r2, [r1, r3]
 800c6d2:	b10a      	cbz	r2, 800c6d8 <__lshift+0xa4>
 800c6d4:	f108 0602 	add.w	r6, r8, #2
 800c6d8:	3e01      	subs	r6, #1
 800c6da:	4638      	mov	r0, r7
 800c6dc:	612e      	str	r6, [r5, #16]
 800c6de:	4621      	mov	r1, r4
 800c6e0:	f7ff fdd8 	bl	800c294 <_Bfree>
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	e7c5      	b.n	800c67e <__lshift+0x4a>
 800c6f2:	3904      	subs	r1, #4
 800c6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6fc:	459c      	cmp	ip, r3
 800c6fe:	d8f9      	bhi.n	800c6f4 <__lshift+0xc0>
 800c700:	e7ea      	b.n	800c6d8 <__lshift+0xa4>
 800c702:	bf00      	nop
 800c704:	0800e63c 	.word	0x0800e63c
 800c708:	0800e64d 	.word	0x0800e64d

0800c70c <__mcmp>:
 800c70c:	b530      	push	{r4, r5, lr}
 800c70e:	6902      	ldr	r2, [r0, #16]
 800c710:	690c      	ldr	r4, [r1, #16]
 800c712:	1b12      	subs	r2, r2, r4
 800c714:	d10e      	bne.n	800c734 <__mcmp+0x28>
 800c716:	f100 0314 	add.w	r3, r0, #20
 800c71a:	3114      	adds	r1, #20
 800c71c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c720:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c724:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c728:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c72c:	42a5      	cmp	r5, r4
 800c72e:	d003      	beq.n	800c738 <__mcmp+0x2c>
 800c730:	d305      	bcc.n	800c73e <__mcmp+0x32>
 800c732:	2201      	movs	r2, #1
 800c734:	4610      	mov	r0, r2
 800c736:	bd30      	pop	{r4, r5, pc}
 800c738:	4283      	cmp	r3, r0
 800c73a:	d3f3      	bcc.n	800c724 <__mcmp+0x18>
 800c73c:	e7fa      	b.n	800c734 <__mcmp+0x28>
 800c73e:	f04f 32ff 	mov.w	r2, #4294967295
 800c742:	e7f7      	b.n	800c734 <__mcmp+0x28>

0800c744 <__mdiff>:
 800c744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c748:	460c      	mov	r4, r1
 800c74a:	4606      	mov	r6, r0
 800c74c:	4611      	mov	r1, r2
 800c74e:	4620      	mov	r0, r4
 800c750:	4690      	mov	r8, r2
 800c752:	f7ff ffdb 	bl	800c70c <__mcmp>
 800c756:	1e05      	subs	r5, r0, #0
 800c758:	d110      	bne.n	800c77c <__mdiff+0x38>
 800c75a:	4629      	mov	r1, r5
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7ff fd59 	bl	800c214 <_Balloc>
 800c762:	b930      	cbnz	r0, 800c772 <__mdiff+0x2e>
 800c764:	4b3a      	ldr	r3, [pc, #232]	; (800c850 <__mdiff+0x10c>)
 800c766:	4602      	mov	r2, r0
 800c768:	f240 2137 	movw	r1, #567	; 0x237
 800c76c:	4839      	ldr	r0, [pc, #228]	; (800c854 <__mdiff+0x110>)
 800c76e:	f000 fcd3 	bl	800d118 <__assert_func>
 800c772:	2301      	movs	r3, #1
 800c774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	bfa4      	itt	ge
 800c77e:	4643      	movge	r3, r8
 800c780:	46a0      	movge	r8, r4
 800c782:	4630      	mov	r0, r6
 800c784:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c788:	bfa6      	itte	ge
 800c78a:	461c      	movge	r4, r3
 800c78c:	2500      	movge	r5, #0
 800c78e:	2501      	movlt	r5, #1
 800c790:	f7ff fd40 	bl	800c214 <_Balloc>
 800c794:	b920      	cbnz	r0, 800c7a0 <__mdiff+0x5c>
 800c796:	4b2e      	ldr	r3, [pc, #184]	; (800c850 <__mdiff+0x10c>)
 800c798:	4602      	mov	r2, r0
 800c79a:	f240 2145 	movw	r1, #581	; 0x245
 800c79e:	e7e5      	b.n	800c76c <__mdiff+0x28>
 800c7a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c7a4:	6926      	ldr	r6, [r4, #16]
 800c7a6:	60c5      	str	r5, [r0, #12]
 800c7a8:	f104 0914 	add.w	r9, r4, #20
 800c7ac:	f108 0514 	add.w	r5, r8, #20
 800c7b0:	f100 0e14 	add.w	lr, r0, #20
 800c7b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c7b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c7bc:	f108 0210 	add.w	r2, r8, #16
 800c7c0:	46f2      	mov	sl, lr
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c7c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c7cc:	fa11 f88b 	uxtah	r8, r1, fp
 800c7d0:	b299      	uxth	r1, r3
 800c7d2:	0c1b      	lsrs	r3, r3, #16
 800c7d4:	eba8 0801 	sub.w	r8, r8, r1
 800c7d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c7dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c7e0:	fa1f f888 	uxth.w	r8, r8
 800c7e4:	1419      	asrs	r1, r3, #16
 800c7e6:	454e      	cmp	r6, r9
 800c7e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c7ec:	f84a 3b04 	str.w	r3, [sl], #4
 800c7f0:	d8e8      	bhi.n	800c7c4 <__mdiff+0x80>
 800c7f2:	1b33      	subs	r3, r6, r4
 800c7f4:	3b15      	subs	r3, #21
 800c7f6:	f023 0303 	bic.w	r3, r3, #3
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	3415      	adds	r4, #21
 800c7fe:	42a6      	cmp	r6, r4
 800c800:	bf38      	it	cc
 800c802:	2304      	movcc	r3, #4
 800c804:	441d      	add	r5, r3
 800c806:	4473      	add	r3, lr
 800c808:	469e      	mov	lr, r3
 800c80a:	462e      	mov	r6, r5
 800c80c:	4566      	cmp	r6, ip
 800c80e:	d30e      	bcc.n	800c82e <__mdiff+0xea>
 800c810:	f10c 0203 	add.w	r2, ip, #3
 800c814:	1b52      	subs	r2, r2, r5
 800c816:	f022 0203 	bic.w	r2, r2, #3
 800c81a:	3d03      	subs	r5, #3
 800c81c:	45ac      	cmp	ip, r5
 800c81e:	bf38      	it	cc
 800c820:	2200      	movcc	r2, #0
 800c822:	4413      	add	r3, r2
 800c824:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c828:	b17a      	cbz	r2, 800c84a <__mdiff+0x106>
 800c82a:	6107      	str	r7, [r0, #16]
 800c82c:	e7a4      	b.n	800c778 <__mdiff+0x34>
 800c82e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c832:	fa11 f288 	uxtah	r2, r1, r8
 800c836:	1414      	asrs	r4, r2, #16
 800c838:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c83c:	b292      	uxth	r2, r2
 800c83e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c842:	f84e 2b04 	str.w	r2, [lr], #4
 800c846:	1421      	asrs	r1, r4, #16
 800c848:	e7e0      	b.n	800c80c <__mdiff+0xc8>
 800c84a:	3f01      	subs	r7, #1
 800c84c:	e7ea      	b.n	800c824 <__mdiff+0xe0>
 800c84e:	bf00      	nop
 800c850:	0800e63c 	.word	0x0800e63c
 800c854:	0800e64d 	.word	0x0800e64d

0800c858 <__d2b>:
 800c858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c85c:	460f      	mov	r7, r1
 800c85e:	2101      	movs	r1, #1
 800c860:	ec59 8b10 	vmov	r8, r9, d0
 800c864:	4616      	mov	r6, r2
 800c866:	f7ff fcd5 	bl	800c214 <_Balloc>
 800c86a:	4604      	mov	r4, r0
 800c86c:	b930      	cbnz	r0, 800c87c <__d2b+0x24>
 800c86e:	4602      	mov	r2, r0
 800c870:	4b24      	ldr	r3, [pc, #144]	; (800c904 <__d2b+0xac>)
 800c872:	4825      	ldr	r0, [pc, #148]	; (800c908 <__d2b+0xb0>)
 800c874:	f240 310f 	movw	r1, #783	; 0x30f
 800c878:	f000 fc4e 	bl	800d118 <__assert_func>
 800c87c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c884:	bb2d      	cbnz	r5, 800c8d2 <__d2b+0x7a>
 800c886:	9301      	str	r3, [sp, #4]
 800c888:	f1b8 0300 	subs.w	r3, r8, #0
 800c88c:	d026      	beq.n	800c8dc <__d2b+0x84>
 800c88e:	4668      	mov	r0, sp
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	f7ff fd87 	bl	800c3a4 <__lo0bits>
 800c896:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c89a:	b1e8      	cbz	r0, 800c8d8 <__d2b+0x80>
 800c89c:	f1c0 0320 	rsb	r3, r0, #32
 800c8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a4:	430b      	orrs	r3, r1
 800c8a6:	40c2      	lsrs	r2, r0
 800c8a8:	6163      	str	r3, [r4, #20]
 800c8aa:	9201      	str	r2, [sp, #4]
 800c8ac:	9b01      	ldr	r3, [sp, #4]
 800c8ae:	61a3      	str	r3, [r4, #24]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	bf14      	ite	ne
 800c8b4:	2202      	movne	r2, #2
 800c8b6:	2201      	moveq	r2, #1
 800c8b8:	6122      	str	r2, [r4, #16]
 800c8ba:	b1bd      	cbz	r5, 800c8ec <__d2b+0x94>
 800c8bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c8c0:	4405      	add	r5, r0
 800c8c2:	603d      	str	r5, [r7, #0]
 800c8c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8c8:	6030      	str	r0, [r6, #0]
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	b003      	add	sp, #12
 800c8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8d6:	e7d6      	b.n	800c886 <__d2b+0x2e>
 800c8d8:	6161      	str	r1, [r4, #20]
 800c8da:	e7e7      	b.n	800c8ac <__d2b+0x54>
 800c8dc:	a801      	add	r0, sp, #4
 800c8de:	f7ff fd61 	bl	800c3a4 <__lo0bits>
 800c8e2:	9b01      	ldr	r3, [sp, #4]
 800c8e4:	6163      	str	r3, [r4, #20]
 800c8e6:	3020      	adds	r0, #32
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	e7e5      	b.n	800c8b8 <__d2b+0x60>
 800c8ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8f4:	6038      	str	r0, [r7, #0]
 800c8f6:	6918      	ldr	r0, [r3, #16]
 800c8f8:	f7ff fd34 	bl	800c364 <__hi0bits>
 800c8fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c900:	e7e2      	b.n	800c8c8 <__d2b+0x70>
 800c902:	bf00      	nop
 800c904:	0800e63c 	.word	0x0800e63c
 800c908:	0800e64d 	.word	0x0800e64d

0800c90c <__ssputs_r>:
 800c90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c910:	688e      	ldr	r6, [r1, #8]
 800c912:	461f      	mov	r7, r3
 800c914:	42be      	cmp	r6, r7
 800c916:	680b      	ldr	r3, [r1, #0]
 800c918:	4682      	mov	sl, r0
 800c91a:	460c      	mov	r4, r1
 800c91c:	4690      	mov	r8, r2
 800c91e:	d82c      	bhi.n	800c97a <__ssputs_r+0x6e>
 800c920:	898a      	ldrh	r2, [r1, #12]
 800c922:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c926:	d026      	beq.n	800c976 <__ssputs_r+0x6a>
 800c928:	6965      	ldr	r5, [r4, #20]
 800c92a:	6909      	ldr	r1, [r1, #16]
 800c92c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c930:	eba3 0901 	sub.w	r9, r3, r1
 800c934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c938:	1c7b      	adds	r3, r7, #1
 800c93a:	444b      	add	r3, r9
 800c93c:	106d      	asrs	r5, r5, #1
 800c93e:	429d      	cmp	r5, r3
 800c940:	bf38      	it	cc
 800c942:	461d      	movcc	r5, r3
 800c944:	0553      	lsls	r3, r2, #21
 800c946:	d527      	bpl.n	800c998 <__ssputs_r+0x8c>
 800c948:	4629      	mov	r1, r5
 800c94a:	f7ff fbd7 	bl	800c0fc <_malloc_r>
 800c94e:	4606      	mov	r6, r0
 800c950:	b360      	cbz	r0, 800c9ac <__ssputs_r+0xa0>
 800c952:	6921      	ldr	r1, [r4, #16]
 800c954:	464a      	mov	r2, r9
 800c956:	f000 fbd1 	bl	800d0fc <memcpy>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c964:	81a3      	strh	r3, [r4, #12]
 800c966:	6126      	str	r6, [r4, #16]
 800c968:	6165      	str	r5, [r4, #20]
 800c96a:	444e      	add	r6, r9
 800c96c:	eba5 0509 	sub.w	r5, r5, r9
 800c970:	6026      	str	r6, [r4, #0]
 800c972:	60a5      	str	r5, [r4, #8]
 800c974:	463e      	mov	r6, r7
 800c976:	42be      	cmp	r6, r7
 800c978:	d900      	bls.n	800c97c <__ssputs_r+0x70>
 800c97a:	463e      	mov	r6, r7
 800c97c:	6820      	ldr	r0, [r4, #0]
 800c97e:	4632      	mov	r2, r6
 800c980:	4641      	mov	r1, r8
 800c982:	f000 fb6f 	bl	800d064 <memmove>
 800c986:	68a3      	ldr	r3, [r4, #8]
 800c988:	1b9b      	subs	r3, r3, r6
 800c98a:	60a3      	str	r3, [r4, #8]
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	4433      	add	r3, r6
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	2000      	movs	r0, #0
 800c994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c998:	462a      	mov	r2, r5
 800c99a:	f000 fc03 	bl	800d1a4 <_realloc_r>
 800c99e:	4606      	mov	r6, r0
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d1e0      	bne.n	800c966 <__ssputs_r+0x5a>
 800c9a4:	6921      	ldr	r1, [r4, #16]
 800c9a6:	4650      	mov	r0, sl
 800c9a8:	f7ff fb34 	bl	800c014 <_free_r>
 800c9ac:	230c      	movs	r3, #12
 800c9ae:	f8ca 3000 	str.w	r3, [sl]
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9b8:	81a3      	strh	r3, [r4, #12]
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	e7e9      	b.n	800c994 <__ssputs_r+0x88>

0800c9c0 <_svfiprintf_r>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	4698      	mov	r8, r3
 800c9c6:	898b      	ldrh	r3, [r1, #12]
 800c9c8:	061b      	lsls	r3, r3, #24
 800c9ca:	b09d      	sub	sp, #116	; 0x74
 800c9cc:	4607      	mov	r7, r0
 800c9ce:	460d      	mov	r5, r1
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	d50e      	bpl.n	800c9f2 <_svfiprintf_r+0x32>
 800c9d4:	690b      	ldr	r3, [r1, #16]
 800c9d6:	b963      	cbnz	r3, 800c9f2 <_svfiprintf_r+0x32>
 800c9d8:	2140      	movs	r1, #64	; 0x40
 800c9da:	f7ff fb8f 	bl	800c0fc <_malloc_r>
 800c9de:	6028      	str	r0, [r5, #0]
 800c9e0:	6128      	str	r0, [r5, #16]
 800c9e2:	b920      	cbnz	r0, 800c9ee <_svfiprintf_r+0x2e>
 800c9e4:	230c      	movs	r3, #12
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ec:	e0d0      	b.n	800cb90 <_svfiprintf_r+0x1d0>
 800c9ee:	2340      	movs	r3, #64	; 0x40
 800c9f0:	616b      	str	r3, [r5, #20]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f6:	2320      	movs	r3, #32
 800c9f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca00:	2330      	movs	r3, #48	; 0x30
 800ca02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cba8 <_svfiprintf_r+0x1e8>
 800ca06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca0a:	f04f 0901 	mov.w	r9, #1
 800ca0e:	4623      	mov	r3, r4
 800ca10:	469a      	mov	sl, r3
 800ca12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca16:	b10a      	cbz	r2, 800ca1c <_svfiprintf_r+0x5c>
 800ca18:	2a25      	cmp	r2, #37	; 0x25
 800ca1a:	d1f9      	bne.n	800ca10 <_svfiprintf_r+0x50>
 800ca1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca20:	d00b      	beq.n	800ca3a <_svfiprintf_r+0x7a>
 800ca22:	465b      	mov	r3, fp
 800ca24:	4622      	mov	r2, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	4638      	mov	r0, r7
 800ca2a:	f7ff ff6f 	bl	800c90c <__ssputs_r>
 800ca2e:	3001      	adds	r0, #1
 800ca30:	f000 80a9 	beq.w	800cb86 <_svfiprintf_r+0x1c6>
 800ca34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca36:	445a      	add	r2, fp
 800ca38:	9209      	str	r2, [sp, #36]	; 0x24
 800ca3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80a1 	beq.w	800cb86 <_svfiprintf_r+0x1c6>
 800ca44:	2300      	movs	r3, #0
 800ca46:	f04f 32ff 	mov.w	r2, #4294967295
 800ca4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca4e:	f10a 0a01 	add.w	sl, sl, #1
 800ca52:	9304      	str	r3, [sp, #16]
 800ca54:	9307      	str	r3, [sp, #28]
 800ca56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ca5c:	4654      	mov	r4, sl
 800ca5e:	2205      	movs	r2, #5
 800ca60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca64:	4850      	ldr	r0, [pc, #320]	; (800cba8 <_svfiprintf_r+0x1e8>)
 800ca66:	f7f3 fbdb 	bl	8000220 <memchr>
 800ca6a:	9a04      	ldr	r2, [sp, #16]
 800ca6c:	b9d8      	cbnz	r0, 800caa6 <_svfiprintf_r+0xe6>
 800ca6e:	06d0      	lsls	r0, r2, #27
 800ca70:	bf44      	itt	mi
 800ca72:	2320      	movmi	r3, #32
 800ca74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca78:	0711      	lsls	r1, r2, #28
 800ca7a:	bf44      	itt	mi
 800ca7c:	232b      	movmi	r3, #43	; 0x2b
 800ca7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca82:	f89a 3000 	ldrb.w	r3, [sl]
 800ca86:	2b2a      	cmp	r3, #42	; 0x2a
 800ca88:	d015      	beq.n	800cab6 <_svfiprintf_r+0xf6>
 800ca8a:	9a07      	ldr	r2, [sp, #28]
 800ca8c:	4654      	mov	r4, sl
 800ca8e:	2000      	movs	r0, #0
 800ca90:	f04f 0c0a 	mov.w	ip, #10
 800ca94:	4621      	mov	r1, r4
 800ca96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca9a:	3b30      	subs	r3, #48	; 0x30
 800ca9c:	2b09      	cmp	r3, #9
 800ca9e:	d94d      	bls.n	800cb3c <_svfiprintf_r+0x17c>
 800caa0:	b1b0      	cbz	r0, 800cad0 <_svfiprintf_r+0x110>
 800caa2:	9207      	str	r2, [sp, #28]
 800caa4:	e014      	b.n	800cad0 <_svfiprintf_r+0x110>
 800caa6:	eba0 0308 	sub.w	r3, r0, r8
 800caaa:	fa09 f303 	lsl.w	r3, r9, r3
 800caae:	4313      	orrs	r3, r2
 800cab0:	9304      	str	r3, [sp, #16]
 800cab2:	46a2      	mov	sl, r4
 800cab4:	e7d2      	b.n	800ca5c <_svfiprintf_r+0x9c>
 800cab6:	9b03      	ldr	r3, [sp, #12]
 800cab8:	1d19      	adds	r1, r3, #4
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	9103      	str	r1, [sp, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	bfbb      	ittet	lt
 800cac2:	425b      	neglt	r3, r3
 800cac4:	f042 0202 	orrlt.w	r2, r2, #2
 800cac8:	9307      	strge	r3, [sp, #28]
 800caca:	9307      	strlt	r3, [sp, #28]
 800cacc:	bfb8      	it	lt
 800cace:	9204      	strlt	r2, [sp, #16]
 800cad0:	7823      	ldrb	r3, [r4, #0]
 800cad2:	2b2e      	cmp	r3, #46	; 0x2e
 800cad4:	d10c      	bne.n	800caf0 <_svfiprintf_r+0x130>
 800cad6:	7863      	ldrb	r3, [r4, #1]
 800cad8:	2b2a      	cmp	r3, #42	; 0x2a
 800cada:	d134      	bne.n	800cb46 <_svfiprintf_r+0x186>
 800cadc:	9b03      	ldr	r3, [sp, #12]
 800cade:	1d1a      	adds	r2, r3, #4
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	9203      	str	r2, [sp, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bfb8      	it	lt
 800cae8:	f04f 33ff 	movlt.w	r3, #4294967295
 800caec:	3402      	adds	r4, #2
 800caee:	9305      	str	r3, [sp, #20]
 800caf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cbb8 <_svfiprintf_r+0x1f8>
 800caf4:	7821      	ldrb	r1, [r4, #0]
 800caf6:	2203      	movs	r2, #3
 800caf8:	4650      	mov	r0, sl
 800cafa:	f7f3 fb91 	bl	8000220 <memchr>
 800cafe:	b138      	cbz	r0, 800cb10 <_svfiprintf_r+0x150>
 800cb00:	9b04      	ldr	r3, [sp, #16]
 800cb02:	eba0 000a 	sub.w	r0, r0, sl
 800cb06:	2240      	movs	r2, #64	; 0x40
 800cb08:	4082      	lsls	r2, r0
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	3401      	adds	r4, #1
 800cb0e:	9304      	str	r3, [sp, #16]
 800cb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb14:	4825      	ldr	r0, [pc, #148]	; (800cbac <_svfiprintf_r+0x1ec>)
 800cb16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb1a:	2206      	movs	r2, #6
 800cb1c:	f7f3 fb80 	bl	8000220 <memchr>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d038      	beq.n	800cb96 <_svfiprintf_r+0x1d6>
 800cb24:	4b22      	ldr	r3, [pc, #136]	; (800cbb0 <_svfiprintf_r+0x1f0>)
 800cb26:	bb1b      	cbnz	r3, 800cb70 <_svfiprintf_r+0x1b0>
 800cb28:	9b03      	ldr	r3, [sp, #12]
 800cb2a:	3307      	adds	r3, #7
 800cb2c:	f023 0307 	bic.w	r3, r3, #7
 800cb30:	3308      	adds	r3, #8
 800cb32:	9303      	str	r3, [sp, #12]
 800cb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb36:	4433      	add	r3, r6
 800cb38:	9309      	str	r3, [sp, #36]	; 0x24
 800cb3a:	e768      	b.n	800ca0e <_svfiprintf_r+0x4e>
 800cb3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb40:	460c      	mov	r4, r1
 800cb42:	2001      	movs	r0, #1
 800cb44:	e7a6      	b.n	800ca94 <_svfiprintf_r+0xd4>
 800cb46:	2300      	movs	r3, #0
 800cb48:	3401      	adds	r4, #1
 800cb4a:	9305      	str	r3, [sp, #20]
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	f04f 0c0a 	mov.w	ip, #10
 800cb52:	4620      	mov	r0, r4
 800cb54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb58:	3a30      	subs	r2, #48	; 0x30
 800cb5a:	2a09      	cmp	r2, #9
 800cb5c:	d903      	bls.n	800cb66 <_svfiprintf_r+0x1a6>
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d0c6      	beq.n	800caf0 <_svfiprintf_r+0x130>
 800cb62:	9105      	str	r1, [sp, #20]
 800cb64:	e7c4      	b.n	800caf0 <_svfiprintf_r+0x130>
 800cb66:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e7f0      	b.n	800cb52 <_svfiprintf_r+0x192>
 800cb70:	ab03      	add	r3, sp, #12
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	462a      	mov	r2, r5
 800cb76:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <_svfiprintf_r+0x1f4>)
 800cb78:	a904      	add	r1, sp, #16
 800cb7a:	4638      	mov	r0, r7
 800cb7c:	f7fd fcbc 	bl	800a4f8 <_printf_float>
 800cb80:	1c42      	adds	r2, r0, #1
 800cb82:	4606      	mov	r6, r0
 800cb84:	d1d6      	bne.n	800cb34 <_svfiprintf_r+0x174>
 800cb86:	89ab      	ldrh	r3, [r5, #12]
 800cb88:	065b      	lsls	r3, r3, #25
 800cb8a:	f53f af2d 	bmi.w	800c9e8 <_svfiprintf_r+0x28>
 800cb8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb90:	b01d      	add	sp, #116	; 0x74
 800cb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb96:	ab03      	add	r3, sp, #12
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <_svfiprintf_r+0x1f4>)
 800cb9e:	a904      	add	r1, sp, #16
 800cba0:	4638      	mov	r0, r7
 800cba2:	f7fd ff4d 	bl	800aa40 <_printf_i>
 800cba6:	e7eb      	b.n	800cb80 <_svfiprintf_r+0x1c0>
 800cba8:	0800e7a4 	.word	0x0800e7a4
 800cbac:	0800e7ae 	.word	0x0800e7ae
 800cbb0:	0800a4f9 	.word	0x0800a4f9
 800cbb4:	0800c90d 	.word	0x0800c90d
 800cbb8:	0800e7aa 	.word	0x0800e7aa

0800cbbc <__sfputc_r>:
 800cbbc:	6893      	ldr	r3, [r2, #8]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	b410      	push	{r4}
 800cbc4:	6093      	str	r3, [r2, #8]
 800cbc6:	da08      	bge.n	800cbda <__sfputc_r+0x1e>
 800cbc8:	6994      	ldr	r4, [r2, #24]
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	db01      	blt.n	800cbd2 <__sfputc_r+0x16>
 800cbce:	290a      	cmp	r1, #10
 800cbd0:	d103      	bne.n	800cbda <__sfputc_r+0x1e>
 800cbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbd6:	f7fe ba8d 	b.w	800b0f4 <__swbuf_r>
 800cbda:	6813      	ldr	r3, [r2, #0]
 800cbdc:	1c58      	adds	r0, r3, #1
 800cbde:	6010      	str	r0, [r2, #0]
 800cbe0:	7019      	strb	r1, [r3, #0]
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <__sfputs_r>:
 800cbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbec:	4606      	mov	r6, r0
 800cbee:	460f      	mov	r7, r1
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	18d5      	adds	r5, r2, r3
 800cbf4:	42ac      	cmp	r4, r5
 800cbf6:	d101      	bne.n	800cbfc <__sfputs_r+0x12>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e007      	b.n	800cc0c <__sfputs_r+0x22>
 800cbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc00:	463a      	mov	r2, r7
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7ff ffda 	bl	800cbbc <__sfputc_r>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d1f3      	bne.n	800cbf4 <__sfputs_r+0xa>
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc10 <_vfiprintf_r>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	460d      	mov	r5, r1
 800cc16:	b09d      	sub	sp, #116	; 0x74
 800cc18:	4614      	mov	r4, r2
 800cc1a:	4698      	mov	r8, r3
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	b118      	cbz	r0, 800cc28 <_vfiprintf_r+0x18>
 800cc20:	6a03      	ldr	r3, [r0, #32]
 800cc22:	b90b      	cbnz	r3, 800cc28 <_vfiprintf_r+0x18>
 800cc24:	f7fe f8a8 	bl	800ad78 <__sinit>
 800cc28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc2a:	07d9      	lsls	r1, r3, #31
 800cc2c:	d405      	bmi.n	800cc3a <_vfiprintf_r+0x2a>
 800cc2e:	89ab      	ldrh	r3, [r5, #12]
 800cc30:	059a      	lsls	r2, r3, #22
 800cc32:	d402      	bmi.n	800cc3a <_vfiprintf_r+0x2a>
 800cc34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc36:	f7fe fb6f 	bl	800b318 <__retarget_lock_acquire_recursive>
 800cc3a:	89ab      	ldrh	r3, [r5, #12]
 800cc3c:	071b      	lsls	r3, r3, #28
 800cc3e:	d501      	bpl.n	800cc44 <_vfiprintf_r+0x34>
 800cc40:	692b      	ldr	r3, [r5, #16]
 800cc42:	b99b      	cbnz	r3, 800cc6c <_vfiprintf_r+0x5c>
 800cc44:	4629      	mov	r1, r5
 800cc46:	4630      	mov	r0, r6
 800cc48:	f7fe fa92 	bl	800b170 <__swsetup_r>
 800cc4c:	b170      	cbz	r0, 800cc6c <_vfiprintf_r+0x5c>
 800cc4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc50:	07dc      	lsls	r4, r3, #31
 800cc52:	d504      	bpl.n	800cc5e <_vfiprintf_r+0x4e>
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295
 800cc58:	b01d      	add	sp, #116	; 0x74
 800cc5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5e:	89ab      	ldrh	r3, [r5, #12]
 800cc60:	0598      	lsls	r0, r3, #22
 800cc62:	d4f7      	bmi.n	800cc54 <_vfiprintf_r+0x44>
 800cc64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc66:	f7fe fb58 	bl	800b31a <__retarget_lock_release_recursive>
 800cc6a:	e7f3      	b.n	800cc54 <_vfiprintf_r+0x44>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc70:	2320      	movs	r3, #32
 800cc72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc76:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc7a:	2330      	movs	r3, #48	; 0x30
 800cc7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ce30 <_vfiprintf_r+0x220>
 800cc80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc84:	f04f 0901 	mov.w	r9, #1
 800cc88:	4623      	mov	r3, r4
 800cc8a:	469a      	mov	sl, r3
 800cc8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc90:	b10a      	cbz	r2, 800cc96 <_vfiprintf_r+0x86>
 800cc92:	2a25      	cmp	r2, #37	; 0x25
 800cc94:	d1f9      	bne.n	800cc8a <_vfiprintf_r+0x7a>
 800cc96:	ebba 0b04 	subs.w	fp, sl, r4
 800cc9a:	d00b      	beq.n	800ccb4 <_vfiprintf_r+0xa4>
 800cc9c:	465b      	mov	r3, fp
 800cc9e:	4622      	mov	r2, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	4630      	mov	r0, r6
 800cca4:	f7ff ffa1 	bl	800cbea <__sfputs_r>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	f000 80a9 	beq.w	800ce00 <_vfiprintf_r+0x1f0>
 800ccae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccb0:	445a      	add	r2, fp
 800ccb2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccb4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f000 80a1 	beq.w	800ce00 <_vfiprintf_r+0x1f0>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccc8:	f10a 0a01 	add.w	sl, sl, #1
 800cccc:	9304      	str	r3, [sp, #16]
 800ccce:	9307      	str	r3, [sp, #28]
 800ccd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccd4:	931a      	str	r3, [sp, #104]	; 0x68
 800ccd6:	4654      	mov	r4, sl
 800ccd8:	2205      	movs	r2, #5
 800ccda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccde:	4854      	ldr	r0, [pc, #336]	; (800ce30 <_vfiprintf_r+0x220>)
 800cce0:	f7f3 fa9e 	bl	8000220 <memchr>
 800cce4:	9a04      	ldr	r2, [sp, #16]
 800cce6:	b9d8      	cbnz	r0, 800cd20 <_vfiprintf_r+0x110>
 800cce8:	06d1      	lsls	r1, r2, #27
 800ccea:	bf44      	itt	mi
 800ccec:	2320      	movmi	r3, #32
 800ccee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccf2:	0713      	lsls	r3, r2, #28
 800ccf4:	bf44      	itt	mi
 800ccf6:	232b      	movmi	r3, #43	; 0x2b
 800ccf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccfc:	f89a 3000 	ldrb.w	r3, [sl]
 800cd00:	2b2a      	cmp	r3, #42	; 0x2a
 800cd02:	d015      	beq.n	800cd30 <_vfiprintf_r+0x120>
 800cd04:	9a07      	ldr	r2, [sp, #28]
 800cd06:	4654      	mov	r4, sl
 800cd08:	2000      	movs	r0, #0
 800cd0a:	f04f 0c0a 	mov.w	ip, #10
 800cd0e:	4621      	mov	r1, r4
 800cd10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd14:	3b30      	subs	r3, #48	; 0x30
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d94d      	bls.n	800cdb6 <_vfiprintf_r+0x1a6>
 800cd1a:	b1b0      	cbz	r0, 800cd4a <_vfiprintf_r+0x13a>
 800cd1c:	9207      	str	r2, [sp, #28]
 800cd1e:	e014      	b.n	800cd4a <_vfiprintf_r+0x13a>
 800cd20:	eba0 0308 	sub.w	r3, r0, r8
 800cd24:	fa09 f303 	lsl.w	r3, r9, r3
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	9304      	str	r3, [sp, #16]
 800cd2c:	46a2      	mov	sl, r4
 800cd2e:	e7d2      	b.n	800ccd6 <_vfiprintf_r+0xc6>
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	1d19      	adds	r1, r3, #4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	9103      	str	r1, [sp, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfbb      	ittet	lt
 800cd3c:	425b      	neglt	r3, r3
 800cd3e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd42:	9307      	strge	r3, [sp, #28]
 800cd44:	9307      	strlt	r3, [sp, #28]
 800cd46:	bfb8      	it	lt
 800cd48:	9204      	strlt	r2, [sp, #16]
 800cd4a:	7823      	ldrb	r3, [r4, #0]
 800cd4c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd4e:	d10c      	bne.n	800cd6a <_vfiprintf_r+0x15a>
 800cd50:	7863      	ldrb	r3, [r4, #1]
 800cd52:	2b2a      	cmp	r3, #42	; 0x2a
 800cd54:	d134      	bne.n	800cdc0 <_vfiprintf_r+0x1b0>
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	1d1a      	adds	r2, r3, #4
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	9203      	str	r2, [sp, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfb8      	it	lt
 800cd62:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd66:	3402      	adds	r4, #2
 800cd68:	9305      	str	r3, [sp, #20]
 800cd6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ce40 <_vfiprintf_r+0x230>
 800cd6e:	7821      	ldrb	r1, [r4, #0]
 800cd70:	2203      	movs	r2, #3
 800cd72:	4650      	mov	r0, sl
 800cd74:	f7f3 fa54 	bl	8000220 <memchr>
 800cd78:	b138      	cbz	r0, 800cd8a <_vfiprintf_r+0x17a>
 800cd7a:	9b04      	ldr	r3, [sp, #16]
 800cd7c:	eba0 000a 	sub.w	r0, r0, sl
 800cd80:	2240      	movs	r2, #64	; 0x40
 800cd82:	4082      	lsls	r2, r0
 800cd84:	4313      	orrs	r3, r2
 800cd86:	3401      	adds	r4, #1
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd8e:	4829      	ldr	r0, [pc, #164]	; (800ce34 <_vfiprintf_r+0x224>)
 800cd90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd94:	2206      	movs	r2, #6
 800cd96:	f7f3 fa43 	bl	8000220 <memchr>
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d03f      	beq.n	800ce1e <_vfiprintf_r+0x20e>
 800cd9e:	4b26      	ldr	r3, [pc, #152]	; (800ce38 <_vfiprintf_r+0x228>)
 800cda0:	bb1b      	cbnz	r3, 800cdea <_vfiprintf_r+0x1da>
 800cda2:	9b03      	ldr	r3, [sp, #12]
 800cda4:	3307      	adds	r3, #7
 800cda6:	f023 0307 	bic.w	r3, r3, #7
 800cdaa:	3308      	adds	r3, #8
 800cdac:	9303      	str	r3, [sp, #12]
 800cdae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb0:	443b      	add	r3, r7
 800cdb2:	9309      	str	r3, [sp, #36]	; 0x24
 800cdb4:	e768      	b.n	800cc88 <_vfiprintf_r+0x78>
 800cdb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdba:	460c      	mov	r4, r1
 800cdbc:	2001      	movs	r0, #1
 800cdbe:	e7a6      	b.n	800cd0e <_vfiprintf_r+0xfe>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	3401      	adds	r4, #1
 800cdc4:	9305      	str	r3, [sp, #20]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	f04f 0c0a 	mov.w	ip, #10
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdd2:	3a30      	subs	r2, #48	; 0x30
 800cdd4:	2a09      	cmp	r2, #9
 800cdd6:	d903      	bls.n	800cde0 <_vfiprintf_r+0x1d0>
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d0c6      	beq.n	800cd6a <_vfiprintf_r+0x15a>
 800cddc:	9105      	str	r1, [sp, #20]
 800cdde:	e7c4      	b.n	800cd6a <_vfiprintf_r+0x15a>
 800cde0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cde4:	4604      	mov	r4, r0
 800cde6:	2301      	movs	r3, #1
 800cde8:	e7f0      	b.n	800cdcc <_vfiprintf_r+0x1bc>
 800cdea:	ab03      	add	r3, sp, #12
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	462a      	mov	r2, r5
 800cdf0:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <_vfiprintf_r+0x22c>)
 800cdf2:	a904      	add	r1, sp, #16
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f7fd fb7f 	bl	800a4f8 <_printf_float>
 800cdfa:	4607      	mov	r7, r0
 800cdfc:	1c78      	adds	r0, r7, #1
 800cdfe:	d1d6      	bne.n	800cdae <_vfiprintf_r+0x19e>
 800ce00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce02:	07d9      	lsls	r1, r3, #31
 800ce04:	d405      	bmi.n	800ce12 <_vfiprintf_r+0x202>
 800ce06:	89ab      	ldrh	r3, [r5, #12]
 800ce08:	059a      	lsls	r2, r3, #22
 800ce0a:	d402      	bmi.n	800ce12 <_vfiprintf_r+0x202>
 800ce0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce0e:	f7fe fa84 	bl	800b31a <__retarget_lock_release_recursive>
 800ce12:	89ab      	ldrh	r3, [r5, #12]
 800ce14:	065b      	lsls	r3, r3, #25
 800ce16:	f53f af1d 	bmi.w	800cc54 <_vfiprintf_r+0x44>
 800ce1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce1c:	e71c      	b.n	800cc58 <_vfiprintf_r+0x48>
 800ce1e:	ab03      	add	r3, sp, #12
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	462a      	mov	r2, r5
 800ce24:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <_vfiprintf_r+0x22c>)
 800ce26:	a904      	add	r1, sp, #16
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7fd fe09 	bl	800aa40 <_printf_i>
 800ce2e:	e7e4      	b.n	800cdfa <_vfiprintf_r+0x1ea>
 800ce30:	0800e7a4 	.word	0x0800e7a4
 800ce34:	0800e7ae 	.word	0x0800e7ae
 800ce38:	0800a4f9 	.word	0x0800a4f9
 800ce3c:	0800cbeb 	.word	0x0800cbeb
 800ce40:	0800e7aa 	.word	0x0800e7aa

0800ce44 <__sflush_r>:
 800ce44:	898a      	ldrh	r2, [r1, #12]
 800ce46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	0710      	lsls	r0, r2, #28
 800ce4e:	460c      	mov	r4, r1
 800ce50:	d458      	bmi.n	800cf04 <__sflush_r+0xc0>
 800ce52:	684b      	ldr	r3, [r1, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dc05      	bgt.n	800ce64 <__sflush_r+0x20>
 800ce58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	dc02      	bgt.n	800ce64 <__sflush_r+0x20>
 800ce5e:	2000      	movs	r0, #0
 800ce60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce66:	2e00      	cmp	r6, #0
 800ce68:	d0f9      	beq.n	800ce5e <__sflush_r+0x1a>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce70:	682f      	ldr	r7, [r5, #0]
 800ce72:	6a21      	ldr	r1, [r4, #32]
 800ce74:	602b      	str	r3, [r5, #0]
 800ce76:	d032      	beq.n	800cede <__sflush_r+0x9a>
 800ce78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce7a:	89a3      	ldrh	r3, [r4, #12]
 800ce7c:	075a      	lsls	r2, r3, #29
 800ce7e:	d505      	bpl.n	800ce8c <__sflush_r+0x48>
 800ce80:	6863      	ldr	r3, [r4, #4]
 800ce82:	1ac0      	subs	r0, r0, r3
 800ce84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce86:	b10b      	cbz	r3, 800ce8c <__sflush_r+0x48>
 800ce88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce8a:	1ac0      	subs	r0, r0, r3
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	4602      	mov	r2, r0
 800ce90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce92:	6a21      	ldr	r1, [r4, #32]
 800ce94:	4628      	mov	r0, r5
 800ce96:	47b0      	blx	r6
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	89a3      	ldrh	r3, [r4, #12]
 800ce9c:	d106      	bne.n	800ceac <__sflush_r+0x68>
 800ce9e:	6829      	ldr	r1, [r5, #0]
 800cea0:	291d      	cmp	r1, #29
 800cea2:	d82b      	bhi.n	800cefc <__sflush_r+0xb8>
 800cea4:	4a29      	ldr	r2, [pc, #164]	; (800cf4c <__sflush_r+0x108>)
 800cea6:	410a      	asrs	r2, r1
 800cea8:	07d6      	lsls	r6, r2, #31
 800ceaa:	d427      	bmi.n	800cefc <__sflush_r+0xb8>
 800ceac:	2200      	movs	r2, #0
 800ceae:	6062      	str	r2, [r4, #4]
 800ceb0:	04d9      	lsls	r1, r3, #19
 800ceb2:	6922      	ldr	r2, [r4, #16]
 800ceb4:	6022      	str	r2, [r4, #0]
 800ceb6:	d504      	bpl.n	800cec2 <__sflush_r+0x7e>
 800ceb8:	1c42      	adds	r2, r0, #1
 800ceba:	d101      	bne.n	800cec0 <__sflush_r+0x7c>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b903      	cbnz	r3, 800cec2 <__sflush_r+0x7e>
 800cec0:	6560      	str	r0, [r4, #84]	; 0x54
 800cec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cec4:	602f      	str	r7, [r5, #0]
 800cec6:	2900      	cmp	r1, #0
 800cec8:	d0c9      	beq.n	800ce5e <__sflush_r+0x1a>
 800ceca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cece:	4299      	cmp	r1, r3
 800ced0:	d002      	beq.n	800ced8 <__sflush_r+0x94>
 800ced2:	4628      	mov	r0, r5
 800ced4:	f7ff f89e 	bl	800c014 <_free_r>
 800ced8:	2000      	movs	r0, #0
 800ceda:	6360      	str	r0, [r4, #52]	; 0x34
 800cedc:	e7c0      	b.n	800ce60 <__sflush_r+0x1c>
 800cede:	2301      	movs	r3, #1
 800cee0:	4628      	mov	r0, r5
 800cee2:	47b0      	blx	r6
 800cee4:	1c41      	adds	r1, r0, #1
 800cee6:	d1c8      	bne.n	800ce7a <__sflush_r+0x36>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0c5      	beq.n	800ce7a <__sflush_r+0x36>
 800ceee:	2b1d      	cmp	r3, #29
 800cef0:	d001      	beq.n	800cef6 <__sflush_r+0xb2>
 800cef2:	2b16      	cmp	r3, #22
 800cef4:	d101      	bne.n	800cefa <__sflush_r+0xb6>
 800cef6:	602f      	str	r7, [r5, #0]
 800cef8:	e7b1      	b.n	800ce5e <__sflush_r+0x1a>
 800cefa:	89a3      	ldrh	r3, [r4, #12]
 800cefc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf00:	81a3      	strh	r3, [r4, #12]
 800cf02:	e7ad      	b.n	800ce60 <__sflush_r+0x1c>
 800cf04:	690f      	ldr	r7, [r1, #16]
 800cf06:	2f00      	cmp	r7, #0
 800cf08:	d0a9      	beq.n	800ce5e <__sflush_r+0x1a>
 800cf0a:	0793      	lsls	r3, r2, #30
 800cf0c:	680e      	ldr	r6, [r1, #0]
 800cf0e:	bf08      	it	eq
 800cf10:	694b      	ldreq	r3, [r1, #20]
 800cf12:	600f      	str	r7, [r1, #0]
 800cf14:	bf18      	it	ne
 800cf16:	2300      	movne	r3, #0
 800cf18:	eba6 0807 	sub.w	r8, r6, r7
 800cf1c:	608b      	str	r3, [r1, #8]
 800cf1e:	f1b8 0f00 	cmp.w	r8, #0
 800cf22:	dd9c      	ble.n	800ce5e <__sflush_r+0x1a>
 800cf24:	6a21      	ldr	r1, [r4, #32]
 800cf26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf28:	4643      	mov	r3, r8
 800cf2a:	463a      	mov	r2, r7
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	47b0      	blx	r6
 800cf30:	2800      	cmp	r0, #0
 800cf32:	dc06      	bgt.n	800cf42 <__sflush_r+0xfe>
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf40:	e78e      	b.n	800ce60 <__sflush_r+0x1c>
 800cf42:	4407      	add	r7, r0
 800cf44:	eba8 0800 	sub.w	r8, r8, r0
 800cf48:	e7e9      	b.n	800cf1e <__sflush_r+0xda>
 800cf4a:	bf00      	nop
 800cf4c:	dfbffffe 	.word	0xdfbffffe

0800cf50 <_fflush_r>:
 800cf50:	b538      	push	{r3, r4, r5, lr}
 800cf52:	690b      	ldr	r3, [r1, #16]
 800cf54:	4605      	mov	r5, r0
 800cf56:	460c      	mov	r4, r1
 800cf58:	b913      	cbnz	r3, 800cf60 <_fflush_r+0x10>
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	b118      	cbz	r0, 800cf6a <_fflush_r+0x1a>
 800cf62:	6a03      	ldr	r3, [r0, #32]
 800cf64:	b90b      	cbnz	r3, 800cf6a <_fflush_r+0x1a>
 800cf66:	f7fd ff07 	bl	800ad78 <__sinit>
 800cf6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d0f3      	beq.n	800cf5a <_fflush_r+0xa>
 800cf72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf74:	07d0      	lsls	r0, r2, #31
 800cf76:	d404      	bmi.n	800cf82 <_fflush_r+0x32>
 800cf78:	0599      	lsls	r1, r3, #22
 800cf7a:	d402      	bmi.n	800cf82 <_fflush_r+0x32>
 800cf7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf7e:	f7fe f9cb 	bl	800b318 <__retarget_lock_acquire_recursive>
 800cf82:	4628      	mov	r0, r5
 800cf84:	4621      	mov	r1, r4
 800cf86:	f7ff ff5d 	bl	800ce44 <__sflush_r>
 800cf8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf8c:	07da      	lsls	r2, r3, #31
 800cf8e:	4605      	mov	r5, r0
 800cf90:	d4e4      	bmi.n	800cf5c <_fflush_r+0xc>
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	059b      	lsls	r3, r3, #22
 800cf96:	d4e1      	bmi.n	800cf5c <_fflush_r+0xc>
 800cf98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf9a:	f7fe f9be 	bl	800b31a <__retarget_lock_release_recursive>
 800cf9e:	e7dd      	b.n	800cf5c <_fflush_r+0xc>

0800cfa0 <__swhatbuf_r>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa8:	2900      	cmp	r1, #0
 800cfaa:	b096      	sub	sp, #88	; 0x58
 800cfac:	4615      	mov	r5, r2
 800cfae:	461e      	mov	r6, r3
 800cfb0:	da0d      	bge.n	800cfce <__swhatbuf_r+0x2e>
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cfb8:	f04f 0100 	mov.w	r1, #0
 800cfbc:	bf0c      	ite	eq
 800cfbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cfc2:	2340      	movne	r3, #64	; 0x40
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	6031      	str	r1, [r6, #0]
 800cfc8:	602b      	str	r3, [r5, #0]
 800cfca:	b016      	add	sp, #88	; 0x58
 800cfcc:	bd70      	pop	{r4, r5, r6, pc}
 800cfce:	466a      	mov	r2, sp
 800cfd0:	f000 f862 	bl	800d098 <_fstat_r>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	dbec      	blt.n	800cfb2 <__swhatbuf_r+0x12>
 800cfd8:	9901      	ldr	r1, [sp, #4]
 800cfda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cfde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cfe2:	4259      	negs	r1, r3
 800cfe4:	4159      	adcs	r1, r3
 800cfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfea:	e7eb      	b.n	800cfc4 <__swhatbuf_r+0x24>

0800cfec <__smakebuf_r>:
 800cfec:	898b      	ldrh	r3, [r1, #12]
 800cfee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cff0:	079d      	lsls	r5, r3, #30
 800cff2:	4606      	mov	r6, r0
 800cff4:	460c      	mov	r4, r1
 800cff6:	d507      	bpl.n	800d008 <__smakebuf_r+0x1c>
 800cff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	6123      	str	r3, [r4, #16]
 800d000:	2301      	movs	r3, #1
 800d002:	6163      	str	r3, [r4, #20]
 800d004:	b002      	add	sp, #8
 800d006:	bd70      	pop	{r4, r5, r6, pc}
 800d008:	ab01      	add	r3, sp, #4
 800d00a:	466a      	mov	r2, sp
 800d00c:	f7ff ffc8 	bl	800cfa0 <__swhatbuf_r>
 800d010:	9900      	ldr	r1, [sp, #0]
 800d012:	4605      	mov	r5, r0
 800d014:	4630      	mov	r0, r6
 800d016:	f7ff f871 	bl	800c0fc <_malloc_r>
 800d01a:	b948      	cbnz	r0, 800d030 <__smakebuf_r+0x44>
 800d01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d020:	059a      	lsls	r2, r3, #22
 800d022:	d4ef      	bmi.n	800d004 <__smakebuf_r+0x18>
 800d024:	f023 0303 	bic.w	r3, r3, #3
 800d028:	f043 0302 	orr.w	r3, r3, #2
 800d02c:	81a3      	strh	r3, [r4, #12]
 800d02e:	e7e3      	b.n	800cff8 <__smakebuf_r+0xc>
 800d030:	89a3      	ldrh	r3, [r4, #12]
 800d032:	6020      	str	r0, [r4, #0]
 800d034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d038:	81a3      	strh	r3, [r4, #12]
 800d03a:	9b00      	ldr	r3, [sp, #0]
 800d03c:	6163      	str	r3, [r4, #20]
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	6120      	str	r0, [r4, #16]
 800d042:	b15b      	cbz	r3, 800d05c <__smakebuf_r+0x70>
 800d044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d048:	4630      	mov	r0, r6
 800d04a:	f000 f837 	bl	800d0bc <_isatty_r>
 800d04e:	b128      	cbz	r0, 800d05c <__smakebuf_r+0x70>
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	f043 0301 	orr.w	r3, r3, #1
 800d05a:	81a3      	strh	r3, [r4, #12]
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	431d      	orrs	r5, r3
 800d060:	81a5      	strh	r5, [r4, #12]
 800d062:	e7cf      	b.n	800d004 <__smakebuf_r+0x18>

0800d064 <memmove>:
 800d064:	4288      	cmp	r0, r1
 800d066:	b510      	push	{r4, lr}
 800d068:	eb01 0402 	add.w	r4, r1, r2
 800d06c:	d902      	bls.n	800d074 <memmove+0x10>
 800d06e:	4284      	cmp	r4, r0
 800d070:	4623      	mov	r3, r4
 800d072:	d807      	bhi.n	800d084 <memmove+0x20>
 800d074:	1e43      	subs	r3, r0, #1
 800d076:	42a1      	cmp	r1, r4
 800d078:	d008      	beq.n	800d08c <memmove+0x28>
 800d07a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d07e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d082:	e7f8      	b.n	800d076 <memmove+0x12>
 800d084:	4402      	add	r2, r0
 800d086:	4601      	mov	r1, r0
 800d088:	428a      	cmp	r2, r1
 800d08a:	d100      	bne.n	800d08e <memmove+0x2a>
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d096:	e7f7      	b.n	800d088 <memmove+0x24>

0800d098 <_fstat_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d07      	ldr	r5, [pc, #28]	; (800d0b8 <_fstat_r+0x20>)
 800d09c:	2300      	movs	r3, #0
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	602b      	str	r3, [r5, #0]
 800d0a6:	f7f7 fea9 	bl	8004dfc <_fstat>
 800d0aa:	1c43      	adds	r3, r0, #1
 800d0ac:	d102      	bne.n	800d0b4 <_fstat_r+0x1c>
 800d0ae:	682b      	ldr	r3, [r5, #0]
 800d0b0:	b103      	cbz	r3, 800d0b4 <_fstat_r+0x1c>
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	bd38      	pop	{r3, r4, r5, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20001b40 	.word	0x20001b40

0800d0bc <_isatty_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4d06      	ldr	r5, [pc, #24]	; (800d0d8 <_isatty_r+0x1c>)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	f7f7 fe9e 	bl	8004e08 <_isatty>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_isatty_r+0x1a>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_isatty_r+0x1a>
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	20001b40 	.word	0x20001b40

0800d0dc <_sbrk_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d06      	ldr	r5, [pc, #24]	; (800d0f8 <_sbrk_r+0x1c>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	f001 f992 	bl	800e410 <_sbrk>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_sbrk_r+0x1a>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_sbrk_r+0x1a>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20001b40 	.word	0x20001b40

0800d0fc <memcpy>:
 800d0fc:	440a      	add	r2, r1
 800d0fe:	4291      	cmp	r1, r2
 800d100:	f100 33ff 	add.w	r3, r0, #4294967295
 800d104:	d100      	bne.n	800d108 <memcpy+0xc>
 800d106:	4770      	bx	lr
 800d108:	b510      	push	{r4, lr}
 800d10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d112:	4291      	cmp	r1, r2
 800d114:	d1f9      	bne.n	800d10a <memcpy+0xe>
 800d116:	bd10      	pop	{r4, pc}

0800d118 <__assert_func>:
 800d118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d11a:	4614      	mov	r4, r2
 800d11c:	461a      	mov	r2, r3
 800d11e:	4b09      	ldr	r3, [pc, #36]	; (800d144 <__assert_func+0x2c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4605      	mov	r5, r0
 800d124:	68d8      	ldr	r0, [r3, #12]
 800d126:	b14c      	cbz	r4, 800d13c <__assert_func+0x24>
 800d128:	4b07      	ldr	r3, [pc, #28]	; (800d148 <__assert_func+0x30>)
 800d12a:	9100      	str	r1, [sp, #0]
 800d12c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d130:	4906      	ldr	r1, [pc, #24]	; (800d14c <__assert_func+0x34>)
 800d132:	462b      	mov	r3, r5
 800d134:	f000 f872 	bl	800d21c <fiprintf>
 800d138:	f000 f882 	bl	800d240 <abort>
 800d13c:	4b04      	ldr	r3, [pc, #16]	; (800d150 <__assert_func+0x38>)
 800d13e:	461c      	mov	r4, r3
 800d140:	e7f3      	b.n	800d12a <__assert_func+0x12>
 800d142:	bf00      	nop
 800d144:	20000068 	.word	0x20000068
 800d148:	0800e7bf 	.word	0x0800e7bf
 800d14c:	0800e7cc 	.word	0x0800e7cc
 800d150:	0800e7fa 	.word	0x0800e7fa

0800d154 <_calloc_r>:
 800d154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d156:	fba1 2402 	umull	r2, r4, r1, r2
 800d15a:	b94c      	cbnz	r4, 800d170 <_calloc_r+0x1c>
 800d15c:	4611      	mov	r1, r2
 800d15e:	9201      	str	r2, [sp, #4]
 800d160:	f7fe ffcc 	bl	800c0fc <_malloc_r>
 800d164:	9a01      	ldr	r2, [sp, #4]
 800d166:	4605      	mov	r5, r0
 800d168:	b930      	cbnz	r0, 800d178 <_calloc_r+0x24>
 800d16a:	4628      	mov	r0, r5
 800d16c:	b003      	add	sp, #12
 800d16e:	bd30      	pop	{r4, r5, pc}
 800d170:	220c      	movs	r2, #12
 800d172:	6002      	str	r2, [r0, #0]
 800d174:	2500      	movs	r5, #0
 800d176:	e7f8      	b.n	800d16a <_calloc_r+0x16>
 800d178:	4621      	mov	r1, r4
 800d17a:	f7fe f851 	bl	800b220 <memset>
 800d17e:	e7f4      	b.n	800d16a <_calloc_r+0x16>

0800d180 <__ascii_mbtowc>:
 800d180:	b082      	sub	sp, #8
 800d182:	b901      	cbnz	r1, 800d186 <__ascii_mbtowc+0x6>
 800d184:	a901      	add	r1, sp, #4
 800d186:	b142      	cbz	r2, 800d19a <__ascii_mbtowc+0x1a>
 800d188:	b14b      	cbz	r3, 800d19e <__ascii_mbtowc+0x1e>
 800d18a:	7813      	ldrb	r3, [r2, #0]
 800d18c:	600b      	str	r3, [r1, #0]
 800d18e:	7812      	ldrb	r2, [r2, #0]
 800d190:	1e10      	subs	r0, r2, #0
 800d192:	bf18      	it	ne
 800d194:	2001      	movne	r0, #1
 800d196:	b002      	add	sp, #8
 800d198:	4770      	bx	lr
 800d19a:	4610      	mov	r0, r2
 800d19c:	e7fb      	b.n	800d196 <__ascii_mbtowc+0x16>
 800d19e:	f06f 0001 	mvn.w	r0, #1
 800d1a2:	e7f8      	b.n	800d196 <__ascii_mbtowc+0x16>

0800d1a4 <_realloc_r>:
 800d1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a8:	4680      	mov	r8, r0
 800d1aa:	4614      	mov	r4, r2
 800d1ac:	460e      	mov	r6, r1
 800d1ae:	b921      	cbnz	r1, 800d1ba <_realloc_r+0x16>
 800d1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	f7fe bfa1 	b.w	800c0fc <_malloc_r>
 800d1ba:	b92a      	cbnz	r2, 800d1c8 <_realloc_r+0x24>
 800d1bc:	f7fe ff2a 	bl	800c014 <_free_r>
 800d1c0:	4625      	mov	r5, r4
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1c8:	f000 f841 	bl	800d24e <_malloc_usable_size_r>
 800d1cc:	4284      	cmp	r4, r0
 800d1ce:	4607      	mov	r7, r0
 800d1d0:	d802      	bhi.n	800d1d8 <_realloc_r+0x34>
 800d1d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1d6:	d812      	bhi.n	800d1fe <_realloc_r+0x5a>
 800d1d8:	4621      	mov	r1, r4
 800d1da:	4640      	mov	r0, r8
 800d1dc:	f7fe ff8e 	bl	800c0fc <_malloc_r>
 800d1e0:	4605      	mov	r5, r0
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d0ed      	beq.n	800d1c2 <_realloc_r+0x1e>
 800d1e6:	42bc      	cmp	r4, r7
 800d1e8:	4622      	mov	r2, r4
 800d1ea:	4631      	mov	r1, r6
 800d1ec:	bf28      	it	cs
 800d1ee:	463a      	movcs	r2, r7
 800d1f0:	f7ff ff84 	bl	800d0fc <memcpy>
 800d1f4:	4631      	mov	r1, r6
 800d1f6:	4640      	mov	r0, r8
 800d1f8:	f7fe ff0c 	bl	800c014 <_free_r>
 800d1fc:	e7e1      	b.n	800d1c2 <_realloc_r+0x1e>
 800d1fe:	4635      	mov	r5, r6
 800d200:	e7df      	b.n	800d1c2 <_realloc_r+0x1e>

0800d202 <__ascii_wctomb>:
 800d202:	b149      	cbz	r1, 800d218 <__ascii_wctomb+0x16>
 800d204:	2aff      	cmp	r2, #255	; 0xff
 800d206:	bf85      	ittet	hi
 800d208:	238a      	movhi	r3, #138	; 0x8a
 800d20a:	6003      	strhi	r3, [r0, #0]
 800d20c:	700a      	strbls	r2, [r1, #0]
 800d20e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d212:	bf98      	it	ls
 800d214:	2001      	movls	r0, #1
 800d216:	4770      	bx	lr
 800d218:	4608      	mov	r0, r1
 800d21a:	4770      	bx	lr

0800d21c <fiprintf>:
 800d21c:	b40e      	push	{r1, r2, r3}
 800d21e:	b503      	push	{r0, r1, lr}
 800d220:	4601      	mov	r1, r0
 800d222:	ab03      	add	r3, sp, #12
 800d224:	4805      	ldr	r0, [pc, #20]	; (800d23c <fiprintf+0x20>)
 800d226:	f853 2b04 	ldr.w	r2, [r3], #4
 800d22a:	6800      	ldr	r0, [r0, #0]
 800d22c:	9301      	str	r3, [sp, #4]
 800d22e:	f7ff fcef 	bl	800cc10 <_vfiprintf_r>
 800d232:	b002      	add	sp, #8
 800d234:	f85d eb04 	ldr.w	lr, [sp], #4
 800d238:	b003      	add	sp, #12
 800d23a:	4770      	bx	lr
 800d23c:	20000068 	.word	0x20000068

0800d240 <abort>:
 800d240:	b508      	push	{r3, lr}
 800d242:	2006      	movs	r0, #6
 800d244:	f000 f834 	bl	800d2b0 <raise>
 800d248:	2001      	movs	r0, #1
 800d24a:	f7f7 fdb1 	bl	8004db0 <_exit>

0800d24e <_malloc_usable_size_r>:
 800d24e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d252:	1f18      	subs	r0, r3, #4
 800d254:	2b00      	cmp	r3, #0
 800d256:	bfbc      	itt	lt
 800d258:	580b      	ldrlt	r3, [r1, r0]
 800d25a:	18c0      	addlt	r0, r0, r3
 800d25c:	4770      	bx	lr

0800d25e <_raise_r>:
 800d25e:	291f      	cmp	r1, #31
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4604      	mov	r4, r0
 800d264:	460d      	mov	r5, r1
 800d266:	d904      	bls.n	800d272 <_raise_r+0x14>
 800d268:	2316      	movs	r3, #22
 800d26a:	6003      	str	r3, [r0, #0]
 800d26c:	f04f 30ff 	mov.w	r0, #4294967295
 800d270:	bd38      	pop	{r3, r4, r5, pc}
 800d272:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d274:	b112      	cbz	r2, 800d27c <_raise_r+0x1e>
 800d276:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d27a:	b94b      	cbnz	r3, 800d290 <_raise_r+0x32>
 800d27c:	4620      	mov	r0, r4
 800d27e:	f000 f831 	bl	800d2e4 <_getpid_r>
 800d282:	462a      	mov	r2, r5
 800d284:	4601      	mov	r1, r0
 800d286:	4620      	mov	r0, r4
 800d288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d28c:	f000 b818 	b.w	800d2c0 <_kill_r>
 800d290:	2b01      	cmp	r3, #1
 800d292:	d00a      	beq.n	800d2aa <_raise_r+0x4c>
 800d294:	1c59      	adds	r1, r3, #1
 800d296:	d103      	bne.n	800d2a0 <_raise_r+0x42>
 800d298:	2316      	movs	r3, #22
 800d29a:	6003      	str	r3, [r0, #0]
 800d29c:	2001      	movs	r0, #1
 800d29e:	e7e7      	b.n	800d270 <_raise_r+0x12>
 800d2a0:	2400      	movs	r4, #0
 800d2a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	4798      	blx	r3
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e7e0      	b.n	800d270 <_raise_r+0x12>
	...

0800d2b0 <raise>:
 800d2b0:	4b02      	ldr	r3, [pc, #8]	; (800d2bc <raise+0xc>)
 800d2b2:	4601      	mov	r1, r0
 800d2b4:	6818      	ldr	r0, [r3, #0]
 800d2b6:	f7ff bfd2 	b.w	800d25e <_raise_r>
 800d2ba:	bf00      	nop
 800d2bc:	20000068 	.word	0x20000068

0800d2c0 <_kill_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4d07      	ldr	r5, [pc, #28]	; (800d2e0 <_kill_r+0x20>)
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	4608      	mov	r0, r1
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	602b      	str	r3, [r5, #0]
 800d2ce:	f7f7 fd67 	bl	8004da0 <_kill>
 800d2d2:	1c43      	adds	r3, r0, #1
 800d2d4:	d102      	bne.n	800d2dc <_kill_r+0x1c>
 800d2d6:	682b      	ldr	r3, [r5, #0]
 800d2d8:	b103      	cbz	r3, 800d2dc <_kill_r+0x1c>
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	bd38      	pop	{r3, r4, r5, pc}
 800d2de:	bf00      	nop
 800d2e0:	20001b40 	.word	0x20001b40

0800d2e4 <_getpid_r>:
 800d2e4:	f7f7 bd5a 	b.w	8004d9c <_getpid>

0800d2e8 <cos>:
 800d2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ea:	ec53 2b10 	vmov	r2, r3, d0
 800d2ee:	4826      	ldr	r0, [pc, #152]	; (800d388 <cos+0xa0>)
 800d2f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d2f4:	4281      	cmp	r1, r0
 800d2f6:	dc06      	bgt.n	800d306 <cos+0x1e>
 800d2f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d380 <cos+0x98>
 800d2fc:	b005      	add	sp, #20
 800d2fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800d302:	f000 b89d 	b.w	800d440 <__kernel_cos>
 800d306:	4821      	ldr	r0, [pc, #132]	; (800d38c <cos+0xa4>)
 800d308:	4281      	cmp	r1, r0
 800d30a:	dd09      	ble.n	800d320 <cos+0x38>
 800d30c:	ee10 0a10 	vmov	r0, s0
 800d310:	4619      	mov	r1, r3
 800d312:	f7f2 ffe1 	bl	80002d8 <__aeabi_dsub>
 800d316:	ec41 0b10 	vmov	d0, r0, r1
 800d31a:	b005      	add	sp, #20
 800d31c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d320:	4668      	mov	r0, sp
 800d322:	f000 fa15 	bl	800d750 <__ieee754_rem_pio2>
 800d326:	f000 0003 	and.w	r0, r0, #3
 800d32a:	2801      	cmp	r0, #1
 800d32c:	d00b      	beq.n	800d346 <cos+0x5e>
 800d32e:	2802      	cmp	r0, #2
 800d330:	d016      	beq.n	800d360 <cos+0x78>
 800d332:	b9e0      	cbnz	r0, 800d36e <cos+0x86>
 800d334:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d338:	ed9d 0b00 	vldr	d0, [sp]
 800d33c:	f000 f880 	bl	800d440 <__kernel_cos>
 800d340:	ec51 0b10 	vmov	r0, r1, d0
 800d344:	e7e7      	b.n	800d316 <cos+0x2e>
 800d346:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d34a:	ed9d 0b00 	vldr	d0, [sp]
 800d34e:	f000 f93f 	bl	800d5d0 <__kernel_sin>
 800d352:	ec53 2b10 	vmov	r2, r3, d0
 800d356:	ee10 0a10 	vmov	r0, s0
 800d35a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d35e:	e7da      	b.n	800d316 <cos+0x2e>
 800d360:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d364:	ed9d 0b00 	vldr	d0, [sp]
 800d368:	f000 f86a 	bl	800d440 <__kernel_cos>
 800d36c:	e7f1      	b.n	800d352 <cos+0x6a>
 800d36e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d372:	ed9d 0b00 	vldr	d0, [sp]
 800d376:	2001      	movs	r0, #1
 800d378:	f000 f92a 	bl	800d5d0 <__kernel_sin>
 800d37c:	e7e0      	b.n	800d340 <cos+0x58>
 800d37e:	bf00      	nop
	...
 800d388:	3fe921fb 	.word	0x3fe921fb
 800d38c:	7fefffff 	.word	0x7fefffff

0800d390 <sin>:
 800d390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d392:	ec53 2b10 	vmov	r2, r3, d0
 800d396:	4828      	ldr	r0, [pc, #160]	; (800d438 <sin+0xa8>)
 800d398:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d39c:	4281      	cmp	r1, r0
 800d39e:	dc07      	bgt.n	800d3b0 <sin+0x20>
 800d3a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d430 <sin+0xa0>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	b005      	add	sp, #20
 800d3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3ac:	f000 b910 	b.w	800d5d0 <__kernel_sin>
 800d3b0:	4822      	ldr	r0, [pc, #136]	; (800d43c <sin+0xac>)
 800d3b2:	4281      	cmp	r1, r0
 800d3b4:	dd09      	ble.n	800d3ca <sin+0x3a>
 800d3b6:	ee10 0a10 	vmov	r0, s0
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	f7f2 ff8c 	bl	80002d8 <__aeabi_dsub>
 800d3c0:	ec41 0b10 	vmov	d0, r0, r1
 800d3c4:	b005      	add	sp, #20
 800d3c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3ca:	4668      	mov	r0, sp
 800d3cc:	f000 f9c0 	bl	800d750 <__ieee754_rem_pio2>
 800d3d0:	f000 0003 	and.w	r0, r0, #3
 800d3d4:	2801      	cmp	r0, #1
 800d3d6:	d00c      	beq.n	800d3f2 <sin+0x62>
 800d3d8:	2802      	cmp	r0, #2
 800d3da:	d011      	beq.n	800d400 <sin+0x70>
 800d3dc:	b9f0      	cbnz	r0, 800d41c <sin+0x8c>
 800d3de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3e2:	ed9d 0b00 	vldr	d0, [sp]
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	f000 f8f2 	bl	800d5d0 <__kernel_sin>
 800d3ec:	ec51 0b10 	vmov	r0, r1, d0
 800d3f0:	e7e6      	b.n	800d3c0 <sin+0x30>
 800d3f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3f6:	ed9d 0b00 	vldr	d0, [sp]
 800d3fa:	f000 f821 	bl	800d440 <__kernel_cos>
 800d3fe:	e7f5      	b.n	800d3ec <sin+0x5c>
 800d400:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d404:	ed9d 0b00 	vldr	d0, [sp]
 800d408:	2001      	movs	r0, #1
 800d40a:	f000 f8e1 	bl	800d5d0 <__kernel_sin>
 800d40e:	ec53 2b10 	vmov	r2, r3, d0
 800d412:	ee10 0a10 	vmov	r0, s0
 800d416:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d41a:	e7d1      	b.n	800d3c0 <sin+0x30>
 800d41c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d420:	ed9d 0b00 	vldr	d0, [sp]
 800d424:	f000 f80c 	bl	800d440 <__kernel_cos>
 800d428:	e7f1      	b.n	800d40e <sin+0x7e>
 800d42a:	bf00      	nop
 800d42c:	f3af 8000 	nop.w
	...
 800d438:	3fe921fb 	.word	0x3fe921fb
 800d43c:	7fefffff 	.word	0x7fefffff

0800d440 <__kernel_cos>:
 800d440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	ec57 6b10 	vmov	r6, r7, d0
 800d448:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d44c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d450:	ed8d 1b00 	vstr	d1, [sp]
 800d454:	da07      	bge.n	800d466 <__kernel_cos+0x26>
 800d456:	ee10 0a10 	vmov	r0, s0
 800d45a:	4639      	mov	r1, r7
 800d45c:	f7f3 fba4 	bl	8000ba8 <__aeabi_d2iz>
 800d460:	2800      	cmp	r0, #0
 800d462:	f000 8088 	beq.w	800d576 <__kernel_cos+0x136>
 800d466:	4632      	mov	r2, r6
 800d468:	463b      	mov	r3, r7
 800d46a:	4630      	mov	r0, r6
 800d46c:	4639      	mov	r1, r7
 800d46e:	f7f3 f8eb 	bl	8000648 <__aeabi_dmul>
 800d472:	4b51      	ldr	r3, [pc, #324]	; (800d5b8 <__kernel_cos+0x178>)
 800d474:	2200      	movs	r2, #0
 800d476:	4604      	mov	r4, r0
 800d478:	460d      	mov	r5, r1
 800d47a:	f7f3 f8e5 	bl	8000648 <__aeabi_dmul>
 800d47e:	a340      	add	r3, pc, #256	; (adr r3, 800d580 <__kernel_cos+0x140>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	4682      	mov	sl, r0
 800d486:	468b      	mov	fp, r1
 800d488:	4620      	mov	r0, r4
 800d48a:	4629      	mov	r1, r5
 800d48c:	f7f3 f8dc 	bl	8000648 <__aeabi_dmul>
 800d490:	a33d      	add	r3, pc, #244	; (adr r3, 800d588 <__kernel_cos+0x148>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 ff21 	bl	80002dc <__adddf3>
 800d49a:	4622      	mov	r2, r4
 800d49c:	462b      	mov	r3, r5
 800d49e:	f7f3 f8d3 	bl	8000648 <__aeabi_dmul>
 800d4a2:	a33b      	add	r3, pc, #236	; (adr r3, 800d590 <__kernel_cos+0x150>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f2 ff16 	bl	80002d8 <__aeabi_dsub>
 800d4ac:	4622      	mov	r2, r4
 800d4ae:	462b      	mov	r3, r5
 800d4b0:	f7f3 f8ca 	bl	8000648 <__aeabi_dmul>
 800d4b4:	a338      	add	r3, pc, #224	; (adr r3, 800d598 <__kernel_cos+0x158>)
 800d4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ba:	f7f2 ff0f 	bl	80002dc <__adddf3>
 800d4be:	4622      	mov	r2, r4
 800d4c0:	462b      	mov	r3, r5
 800d4c2:	f7f3 f8c1 	bl	8000648 <__aeabi_dmul>
 800d4c6:	a336      	add	r3, pc, #216	; (adr r3, 800d5a0 <__kernel_cos+0x160>)
 800d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4cc:	f7f2 ff04 	bl	80002d8 <__aeabi_dsub>
 800d4d0:	4622      	mov	r2, r4
 800d4d2:	462b      	mov	r3, r5
 800d4d4:	f7f3 f8b8 	bl	8000648 <__aeabi_dmul>
 800d4d8:	a333      	add	r3, pc, #204	; (adr r3, 800d5a8 <__kernel_cos+0x168>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f2 fefd 	bl	80002dc <__adddf3>
 800d4e2:	4622      	mov	r2, r4
 800d4e4:	462b      	mov	r3, r5
 800d4e6:	f7f3 f8af 	bl	8000648 <__aeabi_dmul>
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	462b      	mov	r3, r5
 800d4ee:	f7f3 f8ab 	bl	8000648 <__aeabi_dmul>
 800d4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	f7f3 f8a3 	bl	8000648 <__aeabi_dmul>
 800d502:	460b      	mov	r3, r1
 800d504:	4602      	mov	r2, r0
 800d506:	4629      	mov	r1, r5
 800d508:	4620      	mov	r0, r4
 800d50a:	f7f2 fee5 	bl	80002d8 <__aeabi_dsub>
 800d50e:	4b2b      	ldr	r3, [pc, #172]	; (800d5bc <__kernel_cos+0x17c>)
 800d510:	4598      	cmp	r8, r3
 800d512:	4606      	mov	r6, r0
 800d514:	460f      	mov	r7, r1
 800d516:	dc10      	bgt.n	800d53a <__kernel_cos+0xfa>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4650      	mov	r0, sl
 800d51e:	4659      	mov	r1, fp
 800d520:	f7f2 feda 	bl	80002d8 <__aeabi_dsub>
 800d524:	460b      	mov	r3, r1
 800d526:	4926      	ldr	r1, [pc, #152]	; (800d5c0 <__kernel_cos+0x180>)
 800d528:	4602      	mov	r2, r0
 800d52a:	2000      	movs	r0, #0
 800d52c:	f7f2 fed4 	bl	80002d8 <__aeabi_dsub>
 800d530:	ec41 0b10 	vmov	d0, r0, r1
 800d534:	b003      	add	sp, #12
 800d536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53a:	4b22      	ldr	r3, [pc, #136]	; (800d5c4 <__kernel_cos+0x184>)
 800d53c:	4920      	ldr	r1, [pc, #128]	; (800d5c0 <__kernel_cos+0x180>)
 800d53e:	4598      	cmp	r8, r3
 800d540:	bfcc      	ite	gt
 800d542:	4d21      	ldrgt	r5, [pc, #132]	; (800d5c8 <__kernel_cos+0x188>)
 800d544:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d548:	2400      	movs	r4, #0
 800d54a:	4622      	mov	r2, r4
 800d54c:	462b      	mov	r3, r5
 800d54e:	2000      	movs	r0, #0
 800d550:	f7f2 fec2 	bl	80002d8 <__aeabi_dsub>
 800d554:	4622      	mov	r2, r4
 800d556:	4680      	mov	r8, r0
 800d558:	4689      	mov	r9, r1
 800d55a:	462b      	mov	r3, r5
 800d55c:	4650      	mov	r0, sl
 800d55e:	4659      	mov	r1, fp
 800d560:	f7f2 feba 	bl	80002d8 <__aeabi_dsub>
 800d564:	4632      	mov	r2, r6
 800d566:	463b      	mov	r3, r7
 800d568:	f7f2 feb6 	bl	80002d8 <__aeabi_dsub>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4640      	mov	r0, r8
 800d572:	4649      	mov	r1, r9
 800d574:	e7da      	b.n	800d52c <__kernel_cos+0xec>
 800d576:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d5b0 <__kernel_cos+0x170>
 800d57a:	e7db      	b.n	800d534 <__kernel_cos+0xf4>
 800d57c:	f3af 8000 	nop.w
 800d580:	be8838d4 	.word	0xbe8838d4
 800d584:	bda8fae9 	.word	0xbda8fae9
 800d588:	bdb4b1c4 	.word	0xbdb4b1c4
 800d58c:	3e21ee9e 	.word	0x3e21ee9e
 800d590:	809c52ad 	.word	0x809c52ad
 800d594:	3e927e4f 	.word	0x3e927e4f
 800d598:	19cb1590 	.word	0x19cb1590
 800d59c:	3efa01a0 	.word	0x3efa01a0
 800d5a0:	16c15177 	.word	0x16c15177
 800d5a4:	3f56c16c 	.word	0x3f56c16c
 800d5a8:	5555554c 	.word	0x5555554c
 800d5ac:	3fa55555 	.word	0x3fa55555
 800d5b0:	00000000 	.word	0x00000000
 800d5b4:	3ff00000 	.word	0x3ff00000
 800d5b8:	3fe00000 	.word	0x3fe00000
 800d5bc:	3fd33332 	.word	0x3fd33332
 800d5c0:	3ff00000 	.word	0x3ff00000
 800d5c4:	3fe90000 	.word	0x3fe90000
 800d5c8:	3fd20000 	.word	0x3fd20000
 800d5cc:	00000000 	.word	0x00000000

0800d5d0 <__kernel_sin>:
 800d5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d4:	ed2d 8b04 	vpush	{d8-d9}
 800d5d8:	eeb0 8a41 	vmov.f32	s16, s2
 800d5dc:	eef0 8a61 	vmov.f32	s17, s3
 800d5e0:	ec55 4b10 	vmov	r4, r5, d0
 800d5e4:	b083      	sub	sp, #12
 800d5e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d5ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d5ee:	9001      	str	r0, [sp, #4]
 800d5f0:	da06      	bge.n	800d600 <__kernel_sin+0x30>
 800d5f2:	ee10 0a10 	vmov	r0, s0
 800d5f6:	4629      	mov	r1, r5
 800d5f8:	f7f3 fad6 	bl	8000ba8 <__aeabi_d2iz>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d051      	beq.n	800d6a4 <__kernel_sin+0xd4>
 800d600:	4622      	mov	r2, r4
 800d602:	462b      	mov	r3, r5
 800d604:	4620      	mov	r0, r4
 800d606:	4629      	mov	r1, r5
 800d608:	f7f3 f81e 	bl	8000648 <__aeabi_dmul>
 800d60c:	4682      	mov	sl, r0
 800d60e:	468b      	mov	fp, r1
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	4620      	mov	r0, r4
 800d616:	4629      	mov	r1, r5
 800d618:	f7f3 f816 	bl	8000648 <__aeabi_dmul>
 800d61c:	a341      	add	r3, pc, #260	; (adr r3, 800d724 <__kernel_sin+0x154>)
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	4680      	mov	r8, r0
 800d624:	4689      	mov	r9, r1
 800d626:	4650      	mov	r0, sl
 800d628:	4659      	mov	r1, fp
 800d62a:	f7f3 f80d 	bl	8000648 <__aeabi_dmul>
 800d62e:	a33f      	add	r3, pc, #252	; (adr r3, 800d72c <__kernel_sin+0x15c>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	f7f2 fe50 	bl	80002d8 <__aeabi_dsub>
 800d638:	4652      	mov	r2, sl
 800d63a:	465b      	mov	r3, fp
 800d63c:	f7f3 f804 	bl	8000648 <__aeabi_dmul>
 800d640:	a33c      	add	r3, pc, #240	; (adr r3, 800d734 <__kernel_sin+0x164>)
 800d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d646:	f7f2 fe49 	bl	80002dc <__adddf3>
 800d64a:	4652      	mov	r2, sl
 800d64c:	465b      	mov	r3, fp
 800d64e:	f7f2 fffb 	bl	8000648 <__aeabi_dmul>
 800d652:	a33a      	add	r3, pc, #232	; (adr r3, 800d73c <__kernel_sin+0x16c>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f7f2 fe3e 	bl	80002d8 <__aeabi_dsub>
 800d65c:	4652      	mov	r2, sl
 800d65e:	465b      	mov	r3, fp
 800d660:	f7f2 fff2 	bl	8000648 <__aeabi_dmul>
 800d664:	a337      	add	r3, pc, #220	; (adr r3, 800d744 <__kernel_sin+0x174>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	f7f2 fe37 	bl	80002dc <__adddf3>
 800d66e:	9b01      	ldr	r3, [sp, #4]
 800d670:	4606      	mov	r6, r0
 800d672:	460f      	mov	r7, r1
 800d674:	b9eb      	cbnz	r3, 800d6b2 <__kernel_sin+0xe2>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	4650      	mov	r0, sl
 800d67c:	4659      	mov	r1, fp
 800d67e:	f7f2 ffe3 	bl	8000648 <__aeabi_dmul>
 800d682:	a325      	add	r3, pc, #148	; (adr r3, 800d718 <__kernel_sin+0x148>)
 800d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d688:	f7f2 fe26 	bl	80002d8 <__aeabi_dsub>
 800d68c:	4642      	mov	r2, r8
 800d68e:	464b      	mov	r3, r9
 800d690:	f7f2 ffda 	bl	8000648 <__aeabi_dmul>
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	4620      	mov	r0, r4
 800d69a:	4629      	mov	r1, r5
 800d69c:	f7f2 fe1e 	bl	80002dc <__adddf3>
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	ec45 4b10 	vmov	d0, r4, r5
 800d6a8:	b003      	add	sp, #12
 800d6aa:	ecbd 8b04 	vpop	{d8-d9}
 800d6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b2:	4b1b      	ldr	r3, [pc, #108]	; (800d720 <__kernel_sin+0x150>)
 800d6b4:	ec51 0b18 	vmov	r0, r1, d8
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f7f2 ffc5 	bl	8000648 <__aeabi_dmul>
 800d6be:	4632      	mov	r2, r6
 800d6c0:	ec41 0b19 	vmov	d9, r0, r1
 800d6c4:	463b      	mov	r3, r7
 800d6c6:	4640      	mov	r0, r8
 800d6c8:	4649      	mov	r1, r9
 800d6ca:	f7f2 ffbd 	bl	8000648 <__aeabi_dmul>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	ec51 0b19 	vmov	r0, r1, d9
 800d6d6:	f7f2 fdff 	bl	80002d8 <__aeabi_dsub>
 800d6da:	4652      	mov	r2, sl
 800d6dc:	465b      	mov	r3, fp
 800d6de:	f7f2 ffb3 	bl	8000648 <__aeabi_dmul>
 800d6e2:	ec53 2b18 	vmov	r2, r3, d8
 800d6e6:	f7f2 fdf7 	bl	80002d8 <__aeabi_dsub>
 800d6ea:	a30b      	add	r3, pc, #44	; (adr r3, 800d718 <__kernel_sin+0x148>)
 800d6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f0:	4606      	mov	r6, r0
 800d6f2:	460f      	mov	r7, r1
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	f7f2 ffa6 	bl	8000648 <__aeabi_dmul>
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	4630      	mov	r0, r6
 800d702:	4639      	mov	r1, r7
 800d704:	f7f2 fdea 	bl	80002dc <__adddf3>
 800d708:	4602      	mov	r2, r0
 800d70a:	460b      	mov	r3, r1
 800d70c:	4620      	mov	r0, r4
 800d70e:	4629      	mov	r1, r5
 800d710:	f7f2 fde2 	bl	80002d8 <__aeabi_dsub>
 800d714:	e7c4      	b.n	800d6a0 <__kernel_sin+0xd0>
 800d716:	bf00      	nop
 800d718:	55555549 	.word	0x55555549
 800d71c:	3fc55555 	.word	0x3fc55555
 800d720:	3fe00000 	.word	0x3fe00000
 800d724:	5acfd57c 	.word	0x5acfd57c
 800d728:	3de5d93a 	.word	0x3de5d93a
 800d72c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d730:	3e5ae5e6 	.word	0x3e5ae5e6
 800d734:	57b1fe7d 	.word	0x57b1fe7d
 800d738:	3ec71de3 	.word	0x3ec71de3
 800d73c:	19c161d5 	.word	0x19c161d5
 800d740:	3f2a01a0 	.word	0x3f2a01a0
 800d744:	1110f8a6 	.word	0x1110f8a6
 800d748:	3f811111 	.word	0x3f811111
 800d74c:	00000000 	.word	0x00000000

0800d750 <__ieee754_rem_pio2>:
 800d750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d754:	ed2d 8b02 	vpush	{d8}
 800d758:	ec55 4b10 	vmov	r4, r5, d0
 800d75c:	4bca      	ldr	r3, [pc, #808]	; (800da88 <__ieee754_rem_pio2+0x338>)
 800d75e:	b08b      	sub	sp, #44	; 0x2c
 800d760:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d764:	4598      	cmp	r8, r3
 800d766:	4682      	mov	sl, r0
 800d768:	9502      	str	r5, [sp, #8]
 800d76a:	dc08      	bgt.n	800d77e <__ieee754_rem_pio2+0x2e>
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	ed80 0b00 	vstr	d0, [r0]
 800d774:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d778:	f04f 0b00 	mov.w	fp, #0
 800d77c:	e028      	b.n	800d7d0 <__ieee754_rem_pio2+0x80>
 800d77e:	4bc3      	ldr	r3, [pc, #780]	; (800da8c <__ieee754_rem_pio2+0x33c>)
 800d780:	4598      	cmp	r8, r3
 800d782:	dc78      	bgt.n	800d876 <__ieee754_rem_pio2+0x126>
 800d784:	9b02      	ldr	r3, [sp, #8]
 800d786:	4ec2      	ldr	r6, [pc, #776]	; (800da90 <__ieee754_rem_pio2+0x340>)
 800d788:	2b00      	cmp	r3, #0
 800d78a:	ee10 0a10 	vmov	r0, s0
 800d78e:	a3b0      	add	r3, pc, #704	; (adr r3, 800da50 <__ieee754_rem_pio2+0x300>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	4629      	mov	r1, r5
 800d796:	dd39      	ble.n	800d80c <__ieee754_rem_pio2+0xbc>
 800d798:	f7f2 fd9e 	bl	80002d8 <__aeabi_dsub>
 800d79c:	45b0      	cmp	r8, r6
 800d79e:	4604      	mov	r4, r0
 800d7a0:	460d      	mov	r5, r1
 800d7a2:	d01b      	beq.n	800d7dc <__ieee754_rem_pio2+0x8c>
 800d7a4:	a3ac      	add	r3, pc, #688	; (adr r3, 800da58 <__ieee754_rem_pio2+0x308>)
 800d7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7aa:	f7f2 fd95 	bl	80002d8 <__aeabi_dsub>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	e9ca 2300 	strd	r2, r3, [sl]
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	f7f2 fd8d 	bl	80002d8 <__aeabi_dsub>
 800d7be:	a3a6      	add	r3, pc, #664	; (adr r3, 800da58 <__ieee754_rem_pio2+0x308>)
 800d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c4:	f7f2 fd88 	bl	80002d8 <__aeabi_dsub>
 800d7c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d7cc:	f04f 0b01 	mov.w	fp, #1
 800d7d0:	4658      	mov	r0, fp
 800d7d2:	b00b      	add	sp, #44	; 0x2c
 800d7d4:	ecbd 8b02 	vpop	{d8}
 800d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7dc:	a3a0      	add	r3, pc, #640	; (adr r3, 800da60 <__ieee754_rem_pio2+0x310>)
 800d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e2:	f7f2 fd79 	bl	80002d8 <__aeabi_dsub>
 800d7e6:	a3a0      	add	r3, pc, #640	; (adr r3, 800da68 <__ieee754_rem_pio2+0x318>)
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	460d      	mov	r5, r1
 800d7f0:	f7f2 fd72 	bl	80002d8 <__aeabi_dsub>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	e9ca 2300 	strd	r2, r3, [sl]
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	4629      	mov	r1, r5
 800d800:	f7f2 fd6a 	bl	80002d8 <__aeabi_dsub>
 800d804:	a398      	add	r3, pc, #608	; (adr r3, 800da68 <__ieee754_rem_pio2+0x318>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	e7db      	b.n	800d7c4 <__ieee754_rem_pio2+0x74>
 800d80c:	f7f2 fd66 	bl	80002dc <__adddf3>
 800d810:	45b0      	cmp	r8, r6
 800d812:	4604      	mov	r4, r0
 800d814:	460d      	mov	r5, r1
 800d816:	d016      	beq.n	800d846 <__ieee754_rem_pio2+0xf6>
 800d818:	a38f      	add	r3, pc, #572	; (adr r3, 800da58 <__ieee754_rem_pio2+0x308>)
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	f7f2 fd5d 	bl	80002dc <__adddf3>
 800d822:	4602      	mov	r2, r0
 800d824:	460b      	mov	r3, r1
 800d826:	e9ca 2300 	strd	r2, r3, [sl]
 800d82a:	4620      	mov	r0, r4
 800d82c:	4629      	mov	r1, r5
 800d82e:	f7f2 fd53 	bl	80002d8 <__aeabi_dsub>
 800d832:	a389      	add	r3, pc, #548	; (adr r3, 800da58 <__ieee754_rem_pio2+0x308>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	f7f2 fd50 	bl	80002dc <__adddf3>
 800d83c:	f04f 3bff 	mov.w	fp, #4294967295
 800d840:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d844:	e7c4      	b.n	800d7d0 <__ieee754_rem_pio2+0x80>
 800d846:	a386      	add	r3, pc, #536	; (adr r3, 800da60 <__ieee754_rem_pio2+0x310>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f7f2 fd46 	bl	80002dc <__adddf3>
 800d850:	a385      	add	r3, pc, #532	; (adr r3, 800da68 <__ieee754_rem_pio2+0x318>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	4604      	mov	r4, r0
 800d858:	460d      	mov	r5, r1
 800d85a:	f7f2 fd3f 	bl	80002dc <__adddf3>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	e9ca 2300 	strd	r2, r3, [sl]
 800d866:	4620      	mov	r0, r4
 800d868:	4629      	mov	r1, r5
 800d86a:	f7f2 fd35 	bl	80002d8 <__aeabi_dsub>
 800d86e:	a37e      	add	r3, pc, #504	; (adr r3, 800da68 <__ieee754_rem_pio2+0x318>)
 800d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d874:	e7e0      	b.n	800d838 <__ieee754_rem_pio2+0xe8>
 800d876:	4b87      	ldr	r3, [pc, #540]	; (800da94 <__ieee754_rem_pio2+0x344>)
 800d878:	4598      	cmp	r8, r3
 800d87a:	f300 80d8 	bgt.w	800da2e <__ieee754_rem_pio2+0x2de>
 800d87e:	f000 f96d 	bl	800db5c <fabs>
 800d882:	ec55 4b10 	vmov	r4, r5, d0
 800d886:	ee10 0a10 	vmov	r0, s0
 800d88a:	a379      	add	r3, pc, #484	; (adr r3, 800da70 <__ieee754_rem_pio2+0x320>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	4629      	mov	r1, r5
 800d892:	f7f2 fed9 	bl	8000648 <__aeabi_dmul>
 800d896:	4b80      	ldr	r3, [pc, #512]	; (800da98 <__ieee754_rem_pio2+0x348>)
 800d898:	2200      	movs	r2, #0
 800d89a:	f7f2 fd1f 	bl	80002dc <__adddf3>
 800d89e:	f7f3 f983 	bl	8000ba8 <__aeabi_d2iz>
 800d8a2:	4683      	mov	fp, r0
 800d8a4:	f7f2 fe66 	bl	8000574 <__aeabi_i2d>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	ec43 2b18 	vmov	d8, r2, r3
 800d8b0:	a367      	add	r3, pc, #412	; (adr r3, 800da50 <__ieee754_rem_pio2+0x300>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	f7f2 fec7 	bl	8000648 <__aeabi_dmul>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	460b      	mov	r3, r1
 800d8be:	4620      	mov	r0, r4
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	f7f2 fd09 	bl	80002d8 <__aeabi_dsub>
 800d8c6:	a364      	add	r3, pc, #400	; (adr r3, 800da58 <__ieee754_rem_pio2+0x308>)
 800d8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	460f      	mov	r7, r1
 800d8d0:	ec51 0b18 	vmov	r0, r1, d8
 800d8d4:	f7f2 feb8 	bl	8000648 <__aeabi_dmul>
 800d8d8:	f1bb 0f1f 	cmp.w	fp, #31
 800d8dc:	4604      	mov	r4, r0
 800d8de:	460d      	mov	r5, r1
 800d8e0:	dc0d      	bgt.n	800d8fe <__ieee754_rem_pio2+0x1ae>
 800d8e2:	4b6e      	ldr	r3, [pc, #440]	; (800da9c <__ieee754_rem_pio2+0x34c>)
 800d8e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ec:	4543      	cmp	r3, r8
 800d8ee:	d006      	beq.n	800d8fe <__ieee754_rem_pio2+0x1ae>
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	462b      	mov	r3, r5
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	f7f2 fcee 	bl	80002d8 <__aeabi_dsub>
 800d8fc:	e00e      	b.n	800d91c <__ieee754_rem_pio2+0x1cc>
 800d8fe:	462b      	mov	r3, r5
 800d900:	4622      	mov	r2, r4
 800d902:	4630      	mov	r0, r6
 800d904:	4639      	mov	r1, r7
 800d906:	f7f2 fce7 	bl	80002d8 <__aeabi_dsub>
 800d90a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d90e:	9303      	str	r3, [sp, #12]
 800d910:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d914:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d918:	2b10      	cmp	r3, #16
 800d91a:	dc02      	bgt.n	800d922 <__ieee754_rem_pio2+0x1d2>
 800d91c:	e9ca 0100 	strd	r0, r1, [sl]
 800d920:	e039      	b.n	800d996 <__ieee754_rem_pio2+0x246>
 800d922:	a34f      	add	r3, pc, #316	; (adr r3, 800da60 <__ieee754_rem_pio2+0x310>)
 800d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d928:	ec51 0b18 	vmov	r0, r1, d8
 800d92c:	f7f2 fe8c 	bl	8000648 <__aeabi_dmul>
 800d930:	4604      	mov	r4, r0
 800d932:	460d      	mov	r5, r1
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	4630      	mov	r0, r6
 800d93a:	4639      	mov	r1, r7
 800d93c:	f7f2 fccc 	bl	80002d8 <__aeabi_dsub>
 800d940:	4602      	mov	r2, r0
 800d942:	460b      	mov	r3, r1
 800d944:	4680      	mov	r8, r0
 800d946:	4689      	mov	r9, r1
 800d948:	4630      	mov	r0, r6
 800d94a:	4639      	mov	r1, r7
 800d94c:	f7f2 fcc4 	bl	80002d8 <__aeabi_dsub>
 800d950:	4622      	mov	r2, r4
 800d952:	462b      	mov	r3, r5
 800d954:	f7f2 fcc0 	bl	80002d8 <__aeabi_dsub>
 800d958:	a343      	add	r3, pc, #268	; (adr r3, 800da68 <__ieee754_rem_pio2+0x318>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	4604      	mov	r4, r0
 800d960:	460d      	mov	r5, r1
 800d962:	ec51 0b18 	vmov	r0, r1, d8
 800d966:	f7f2 fe6f 	bl	8000648 <__aeabi_dmul>
 800d96a:	4622      	mov	r2, r4
 800d96c:	462b      	mov	r3, r5
 800d96e:	f7f2 fcb3 	bl	80002d8 <__aeabi_dsub>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4604      	mov	r4, r0
 800d978:	460d      	mov	r5, r1
 800d97a:	4640      	mov	r0, r8
 800d97c:	4649      	mov	r1, r9
 800d97e:	f7f2 fcab 	bl	80002d8 <__aeabi_dsub>
 800d982:	9a03      	ldr	r2, [sp, #12]
 800d984:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	2b31      	cmp	r3, #49	; 0x31
 800d98c:	dc24      	bgt.n	800d9d8 <__ieee754_rem_pio2+0x288>
 800d98e:	e9ca 0100 	strd	r0, r1, [sl]
 800d992:	4646      	mov	r6, r8
 800d994:	464f      	mov	r7, r9
 800d996:	e9da 8900 	ldrd	r8, r9, [sl]
 800d99a:	4630      	mov	r0, r6
 800d99c:	4642      	mov	r2, r8
 800d99e:	464b      	mov	r3, r9
 800d9a0:	4639      	mov	r1, r7
 800d9a2:	f7f2 fc99 	bl	80002d8 <__aeabi_dsub>
 800d9a6:	462b      	mov	r3, r5
 800d9a8:	4622      	mov	r2, r4
 800d9aa:	f7f2 fc95 	bl	80002d8 <__aeabi_dsub>
 800d9ae:	9b02      	ldr	r3, [sp, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d9b6:	f6bf af0b 	bge.w	800d7d0 <__ieee754_rem_pio2+0x80>
 800d9ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9be:	f8ca 3004 	str.w	r3, [sl, #4]
 800d9c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9c6:	f8ca 8000 	str.w	r8, [sl]
 800d9ca:	f8ca 0008 	str.w	r0, [sl, #8]
 800d9ce:	f8ca 300c 	str.w	r3, [sl, #12]
 800d9d2:	f1cb 0b00 	rsb	fp, fp, #0
 800d9d6:	e6fb      	b.n	800d7d0 <__ieee754_rem_pio2+0x80>
 800d9d8:	a327      	add	r3, pc, #156	; (adr r3, 800da78 <__ieee754_rem_pio2+0x328>)
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	ec51 0b18 	vmov	r0, r1, d8
 800d9e2:	f7f2 fe31 	bl	8000648 <__aeabi_dmul>
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	460d      	mov	r5, r1
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	4649      	mov	r1, r9
 800d9f2:	f7f2 fc71 	bl	80002d8 <__aeabi_dsub>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	4606      	mov	r6, r0
 800d9fc:	460f      	mov	r7, r1
 800d9fe:	4640      	mov	r0, r8
 800da00:	4649      	mov	r1, r9
 800da02:	f7f2 fc69 	bl	80002d8 <__aeabi_dsub>
 800da06:	4622      	mov	r2, r4
 800da08:	462b      	mov	r3, r5
 800da0a:	f7f2 fc65 	bl	80002d8 <__aeabi_dsub>
 800da0e:	a31c      	add	r3, pc, #112	; (adr r3, 800da80 <__ieee754_rem_pio2+0x330>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	4604      	mov	r4, r0
 800da16:	460d      	mov	r5, r1
 800da18:	ec51 0b18 	vmov	r0, r1, d8
 800da1c:	f7f2 fe14 	bl	8000648 <__aeabi_dmul>
 800da20:	4622      	mov	r2, r4
 800da22:	462b      	mov	r3, r5
 800da24:	f7f2 fc58 	bl	80002d8 <__aeabi_dsub>
 800da28:	4604      	mov	r4, r0
 800da2a:	460d      	mov	r5, r1
 800da2c:	e760      	b.n	800d8f0 <__ieee754_rem_pio2+0x1a0>
 800da2e:	4b1c      	ldr	r3, [pc, #112]	; (800daa0 <__ieee754_rem_pio2+0x350>)
 800da30:	4598      	cmp	r8, r3
 800da32:	dd37      	ble.n	800daa4 <__ieee754_rem_pio2+0x354>
 800da34:	ee10 2a10 	vmov	r2, s0
 800da38:	462b      	mov	r3, r5
 800da3a:	4620      	mov	r0, r4
 800da3c:	4629      	mov	r1, r5
 800da3e:	f7f2 fc4b 	bl	80002d8 <__aeabi_dsub>
 800da42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da46:	e9ca 0100 	strd	r0, r1, [sl]
 800da4a:	e695      	b.n	800d778 <__ieee754_rem_pio2+0x28>
 800da4c:	f3af 8000 	nop.w
 800da50:	54400000 	.word	0x54400000
 800da54:	3ff921fb 	.word	0x3ff921fb
 800da58:	1a626331 	.word	0x1a626331
 800da5c:	3dd0b461 	.word	0x3dd0b461
 800da60:	1a600000 	.word	0x1a600000
 800da64:	3dd0b461 	.word	0x3dd0b461
 800da68:	2e037073 	.word	0x2e037073
 800da6c:	3ba3198a 	.word	0x3ba3198a
 800da70:	6dc9c883 	.word	0x6dc9c883
 800da74:	3fe45f30 	.word	0x3fe45f30
 800da78:	2e000000 	.word	0x2e000000
 800da7c:	3ba3198a 	.word	0x3ba3198a
 800da80:	252049c1 	.word	0x252049c1
 800da84:	397b839a 	.word	0x397b839a
 800da88:	3fe921fb 	.word	0x3fe921fb
 800da8c:	4002d97b 	.word	0x4002d97b
 800da90:	3ff921fb 	.word	0x3ff921fb
 800da94:	413921fb 	.word	0x413921fb
 800da98:	3fe00000 	.word	0x3fe00000
 800da9c:	0800e8fc 	.word	0x0800e8fc
 800daa0:	7fefffff 	.word	0x7fefffff
 800daa4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800daa8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800daac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800dab0:	4620      	mov	r0, r4
 800dab2:	460d      	mov	r5, r1
 800dab4:	f7f3 f878 	bl	8000ba8 <__aeabi_d2iz>
 800dab8:	f7f2 fd5c 	bl	8000574 <__aeabi_i2d>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4620      	mov	r0, r4
 800dac2:	4629      	mov	r1, r5
 800dac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dac8:	f7f2 fc06 	bl	80002d8 <__aeabi_dsub>
 800dacc:	4b21      	ldr	r3, [pc, #132]	; (800db54 <__ieee754_rem_pio2+0x404>)
 800dace:	2200      	movs	r2, #0
 800dad0:	f7f2 fdba 	bl	8000648 <__aeabi_dmul>
 800dad4:	460d      	mov	r5, r1
 800dad6:	4604      	mov	r4, r0
 800dad8:	f7f3 f866 	bl	8000ba8 <__aeabi_d2iz>
 800dadc:	f7f2 fd4a 	bl	8000574 <__aeabi_i2d>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4620      	mov	r0, r4
 800dae6:	4629      	mov	r1, r5
 800dae8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800daec:	f7f2 fbf4 	bl	80002d8 <__aeabi_dsub>
 800daf0:	4b18      	ldr	r3, [pc, #96]	; (800db54 <__ieee754_rem_pio2+0x404>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	f7f2 fda8 	bl	8000648 <__aeabi_dmul>
 800daf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dafc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800db00:	2703      	movs	r7, #3
 800db02:	2400      	movs	r4, #0
 800db04:	2500      	movs	r5, #0
 800db06:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800db0a:	4622      	mov	r2, r4
 800db0c:	462b      	mov	r3, r5
 800db0e:	46b9      	mov	r9, r7
 800db10:	3f01      	subs	r7, #1
 800db12:	f7f3 f801 	bl	8000b18 <__aeabi_dcmpeq>
 800db16:	2800      	cmp	r0, #0
 800db18:	d1f5      	bne.n	800db06 <__ieee754_rem_pio2+0x3b6>
 800db1a:	4b0f      	ldr	r3, [pc, #60]	; (800db58 <__ieee754_rem_pio2+0x408>)
 800db1c:	9301      	str	r3, [sp, #4]
 800db1e:	2302      	movs	r3, #2
 800db20:	9300      	str	r3, [sp, #0]
 800db22:	4632      	mov	r2, r6
 800db24:	464b      	mov	r3, r9
 800db26:	4651      	mov	r1, sl
 800db28:	a804      	add	r0, sp, #16
 800db2a:	f000 f821 	bl	800db70 <__kernel_rem_pio2>
 800db2e:	9b02      	ldr	r3, [sp, #8]
 800db30:	2b00      	cmp	r3, #0
 800db32:	4683      	mov	fp, r0
 800db34:	f6bf ae4c 	bge.w	800d7d0 <__ieee754_rem_pio2+0x80>
 800db38:	e9da 2100 	ldrd	r2, r1, [sl]
 800db3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db40:	e9ca 2300 	strd	r2, r3, [sl]
 800db44:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800db48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db4c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800db50:	e73f      	b.n	800d9d2 <__ieee754_rem_pio2+0x282>
 800db52:	bf00      	nop
 800db54:	41700000 	.word	0x41700000
 800db58:	0800e97c 	.word	0x0800e97c

0800db5c <fabs>:
 800db5c:	ec51 0b10 	vmov	r0, r1, d0
 800db60:	ee10 2a10 	vmov	r2, s0
 800db64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db68:	ec43 2b10 	vmov	d0, r2, r3
 800db6c:	4770      	bx	lr
	...

0800db70 <__kernel_rem_pio2>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	ed2d 8b02 	vpush	{d8}
 800db78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800db7c:	f112 0f14 	cmn.w	r2, #20
 800db80:	9306      	str	r3, [sp, #24]
 800db82:	9104      	str	r1, [sp, #16]
 800db84:	4bc2      	ldr	r3, [pc, #776]	; (800de90 <__kernel_rem_pio2+0x320>)
 800db86:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800db88:	9009      	str	r0, [sp, #36]	; 0x24
 800db8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	9b06      	ldr	r3, [sp, #24]
 800db92:	f103 33ff 	add.w	r3, r3, #4294967295
 800db96:	bfa8      	it	ge
 800db98:	1ed4      	subge	r4, r2, #3
 800db9a:	9305      	str	r3, [sp, #20]
 800db9c:	bfb2      	itee	lt
 800db9e:	2400      	movlt	r4, #0
 800dba0:	2318      	movge	r3, #24
 800dba2:	fb94 f4f3 	sdivge	r4, r4, r3
 800dba6:	f06f 0317 	mvn.w	r3, #23
 800dbaa:	fb04 3303 	mla	r3, r4, r3, r3
 800dbae:	eb03 0a02 	add.w	sl, r3, r2
 800dbb2:	9b00      	ldr	r3, [sp, #0]
 800dbb4:	9a05      	ldr	r2, [sp, #20]
 800dbb6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800de80 <__kernel_rem_pio2+0x310>
 800dbba:	eb03 0802 	add.w	r8, r3, r2
 800dbbe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dbc0:	1aa7      	subs	r7, r4, r2
 800dbc2:	ae20      	add	r6, sp, #128	; 0x80
 800dbc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dbc8:	2500      	movs	r5, #0
 800dbca:	4545      	cmp	r5, r8
 800dbcc:	dd13      	ble.n	800dbf6 <__kernel_rem_pio2+0x86>
 800dbce:	9b06      	ldr	r3, [sp, #24]
 800dbd0:	aa20      	add	r2, sp, #128	; 0x80
 800dbd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dbd6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800dbda:	f04f 0800 	mov.w	r8, #0
 800dbde:	9b00      	ldr	r3, [sp, #0]
 800dbe0:	4598      	cmp	r8, r3
 800dbe2:	dc31      	bgt.n	800dc48 <__kernel_rem_pio2+0xd8>
 800dbe4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800de80 <__kernel_rem_pio2+0x310>
 800dbe8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dbec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbf0:	462f      	mov	r7, r5
 800dbf2:	2600      	movs	r6, #0
 800dbf4:	e01b      	b.n	800dc2e <__kernel_rem_pio2+0xbe>
 800dbf6:	42ef      	cmn	r7, r5
 800dbf8:	d407      	bmi.n	800dc0a <__kernel_rem_pio2+0x9a>
 800dbfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dbfe:	f7f2 fcb9 	bl	8000574 <__aeabi_i2d>
 800dc02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dc06:	3501      	adds	r5, #1
 800dc08:	e7df      	b.n	800dbca <__kernel_rem_pio2+0x5a>
 800dc0a:	ec51 0b18 	vmov	r0, r1, d8
 800dc0e:	e7f8      	b.n	800dc02 <__kernel_rem_pio2+0x92>
 800dc10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dc18:	f7f2 fd16 	bl	8000648 <__aeabi_dmul>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	460b      	mov	r3, r1
 800dc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc24:	f7f2 fb5a 	bl	80002dc <__adddf3>
 800dc28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc2c:	3601      	adds	r6, #1
 800dc2e:	9b05      	ldr	r3, [sp, #20]
 800dc30:	429e      	cmp	r6, r3
 800dc32:	f1a7 0708 	sub.w	r7, r7, #8
 800dc36:	ddeb      	ble.n	800dc10 <__kernel_rem_pio2+0xa0>
 800dc38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc3c:	f108 0801 	add.w	r8, r8, #1
 800dc40:	ecab 7b02 	vstmia	fp!, {d7}
 800dc44:	3508      	adds	r5, #8
 800dc46:	e7ca      	b.n	800dbde <__kernel_rem_pio2+0x6e>
 800dc48:	9b00      	ldr	r3, [sp, #0]
 800dc4a:	aa0c      	add	r2, sp, #48	; 0x30
 800dc4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc50:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc52:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dc54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dc58:	9c00      	ldr	r4, [sp, #0]
 800dc5a:	930a      	str	r3, [sp, #40]	; 0x28
 800dc5c:	00e3      	lsls	r3, r4, #3
 800dc5e:	9308      	str	r3, [sp, #32]
 800dc60:	ab98      	add	r3, sp, #608	; 0x260
 800dc62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dc6a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800dc6e:	ab70      	add	r3, sp, #448	; 0x1c0
 800dc70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800dc74:	46c3      	mov	fp, r8
 800dc76:	46a1      	mov	r9, r4
 800dc78:	f1b9 0f00 	cmp.w	r9, #0
 800dc7c:	f1a5 0508 	sub.w	r5, r5, #8
 800dc80:	dc77      	bgt.n	800dd72 <__kernel_rem_pio2+0x202>
 800dc82:	ec47 6b10 	vmov	d0, r6, r7
 800dc86:	4650      	mov	r0, sl
 800dc88:	f000 fac2 	bl	800e210 <scalbn>
 800dc8c:	ec57 6b10 	vmov	r6, r7, d0
 800dc90:	2200      	movs	r2, #0
 800dc92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dc96:	ee10 0a10 	vmov	r0, s0
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f7f2 fcd4 	bl	8000648 <__aeabi_dmul>
 800dca0:	ec41 0b10 	vmov	d0, r0, r1
 800dca4:	f000 fb34 	bl	800e310 <floor>
 800dca8:	4b7a      	ldr	r3, [pc, #488]	; (800de94 <__kernel_rem_pio2+0x324>)
 800dcaa:	ec51 0b10 	vmov	r0, r1, d0
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f7f2 fcca 	bl	8000648 <__aeabi_dmul>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4630      	mov	r0, r6
 800dcba:	4639      	mov	r1, r7
 800dcbc:	f7f2 fb0c 	bl	80002d8 <__aeabi_dsub>
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	f7f2 ff70 	bl	8000ba8 <__aeabi_d2iz>
 800dcc8:	9002      	str	r0, [sp, #8]
 800dcca:	f7f2 fc53 	bl	8000574 <__aeabi_i2d>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	f7f2 faff 	bl	80002d8 <__aeabi_dsub>
 800dcda:	f1ba 0f00 	cmp.w	sl, #0
 800dcde:	4606      	mov	r6, r0
 800dce0:	460f      	mov	r7, r1
 800dce2:	dd6d      	ble.n	800ddc0 <__kernel_rem_pio2+0x250>
 800dce4:	1e61      	subs	r1, r4, #1
 800dce6:	ab0c      	add	r3, sp, #48	; 0x30
 800dce8:	9d02      	ldr	r5, [sp, #8]
 800dcea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcee:	f1ca 0018 	rsb	r0, sl, #24
 800dcf2:	fa43 f200 	asr.w	r2, r3, r0
 800dcf6:	4415      	add	r5, r2
 800dcf8:	4082      	lsls	r2, r0
 800dcfa:	1a9b      	subs	r3, r3, r2
 800dcfc:	aa0c      	add	r2, sp, #48	; 0x30
 800dcfe:	9502      	str	r5, [sp, #8]
 800dd00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dd04:	f1ca 0217 	rsb	r2, sl, #23
 800dd08:	fa43 fb02 	asr.w	fp, r3, r2
 800dd0c:	f1bb 0f00 	cmp.w	fp, #0
 800dd10:	dd65      	ble.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd12:	9b02      	ldr	r3, [sp, #8]
 800dd14:	2200      	movs	r2, #0
 800dd16:	3301      	adds	r3, #1
 800dd18:	9302      	str	r3, [sp, #8]
 800dd1a:	4615      	mov	r5, r2
 800dd1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dd20:	4294      	cmp	r4, r2
 800dd22:	f300 809f 	bgt.w	800de64 <__kernel_rem_pio2+0x2f4>
 800dd26:	f1ba 0f00 	cmp.w	sl, #0
 800dd2a:	dd07      	ble.n	800dd3c <__kernel_rem_pio2+0x1cc>
 800dd2c:	f1ba 0f01 	cmp.w	sl, #1
 800dd30:	f000 80c1 	beq.w	800deb6 <__kernel_rem_pio2+0x346>
 800dd34:	f1ba 0f02 	cmp.w	sl, #2
 800dd38:	f000 80c7 	beq.w	800deca <__kernel_rem_pio2+0x35a>
 800dd3c:	f1bb 0f02 	cmp.w	fp, #2
 800dd40:	d14d      	bne.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd42:	4632      	mov	r2, r6
 800dd44:	463b      	mov	r3, r7
 800dd46:	4954      	ldr	r1, [pc, #336]	; (800de98 <__kernel_rem_pio2+0x328>)
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f7f2 fac5 	bl	80002d8 <__aeabi_dsub>
 800dd4e:	4606      	mov	r6, r0
 800dd50:	460f      	mov	r7, r1
 800dd52:	2d00      	cmp	r5, #0
 800dd54:	d043      	beq.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd56:	4650      	mov	r0, sl
 800dd58:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800de88 <__kernel_rem_pio2+0x318>
 800dd5c:	f000 fa58 	bl	800e210 <scalbn>
 800dd60:	4630      	mov	r0, r6
 800dd62:	4639      	mov	r1, r7
 800dd64:	ec53 2b10 	vmov	r2, r3, d0
 800dd68:	f7f2 fab6 	bl	80002d8 <__aeabi_dsub>
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	460f      	mov	r7, r1
 800dd70:	e035      	b.n	800ddde <__kernel_rem_pio2+0x26e>
 800dd72:	4b4a      	ldr	r3, [pc, #296]	; (800de9c <__kernel_rem_pio2+0x32c>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	4630      	mov	r0, r6
 800dd78:	4639      	mov	r1, r7
 800dd7a:	f7f2 fc65 	bl	8000648 <__aeabi_dmul>
 800dd7e:	f7f2 ff13 	bl	8000ba8 <__aeabi_d2iz>
 800dd82:	f7f2 fbf7 	bl	8000574 <__aeabi_i2d>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	ec43 2b18 	vmov	d8, r2, r3
 800dd8e:	4b44      	ldr	r3, [pc, #272]	; (800dea0 <__kernel_rem_pio2+0x330>)
 800dd90:	2200      	movs	r2, #0
 800dd92:	f7f2 fc59 	bl	8000648 <__aeabi_dmul>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	4639      	mov	r1, r7
 800dd9e:	f7f2 fa9b 	bl	80002d8 <__aeabi_dsub>
 800dda2:	f7f2 ff01 	bl	8000ba8 <__aeabi_d2iz>
 800dda6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ddaa:	f84b 0b04 	str.w	r0, [fp], #4
 800ddae:	ec51 0b18 	vmov	r0, r1, d8
 800ddb2:	f7f2 fa93 	bl	80002dc <__adddf3>
 800ddb6:	f109 39ff 	add.w	r9, r9, #4294967295
 800ddba:	4606      	mov	r6, r0
 800ddbc:	460f      	mov	r7, r1
 800ddbe:	e75b      	b.n	800dc78 <__kernel_rem_pio2+0x108>
 800ddc0:	d106      	bne.n	800ddd0 <__kernel_rem_pio2+0x260>
 800ddc2:	1e63      	subs	r3, r4, #1
 800ddc4:	aa0c      	add	r2, sp, #48	; 0x30
 800ddc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddca:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ddce:	e79d      	b.n	800dd0c <__kernel_rem_pio2+0x19c>
 800ddd0:	4b34      	ldr	r3, [pc, #208]	; (800dea4 <__kernel_rem_pio2+0x334>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f7f2 febe 	bl	8000b54 <__aeabi_dcmpge>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d140      	bne.n	800de5e <__kernel_rem_pio2+0x2ee>
 800dddc:	4683      	mov	fp, r0
 800ddde:	2200      	movs	r2, #0
 800dde0:	2300      	movs	r3, #0
 800dde2:	4630      	mov	r0, r6
 800dde4:	4639      	mov	r1, r7
 800dde6:	f7f2 fe97 	bl	8000b18 <__aeabi_dcmpeq>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f000 80c1 	beq.w	800df72 <__kernel_rem_pio2+0x402>
 800ddf0:	1e65      	subs	r5, r4, #1
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	9900      	ldr	r1, [sp, #0]
 800ddf8:	428b      	cmp	r3, r1
 800ddfa:	da6d      	bge.n	800ded8 <__kernel_rem_pio2+0x368>
 800ddfc:	2a00      	cmp	r2, #0
 800ddfe:	f000 808a 	beq.w	800df16 <__kernel_rem_pio2+0x3a6>
 800de02:	ab0c      	add	r3, sp, #48	; 0x30
 800de04:	f1aa 0a18 	sub.w	sl, sl, #24
 800de08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 80ae 	beq.w	800df6e <__kernel_rem_pio2+0x3fe>
 800de12:	4650      	mov	r0, sl
 800de14:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800de88 <__kernel_rem_pio2+0x318>
 800de18:	f000 f9fa 	bl	800e210 <scalbn>
 800de1c:	1c6b      	adds	r3, r5, #1
 800de1e:	00da      	lsls	r2, r3, #3
 800de20:	9205      	str	r2, [sp, #20]
 800de22:	ec57 6b10 	vmov	r6, r7, d0
 800de26:	aa70      	add	r2, sp, #448	; 0x1c0
 800de28:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800de9c <__kernel_rem_pio2+0x32c>
 800de2c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800de30:	462c      	mov	r4, r5
 800de32:	f04f 0800 	mov.w	r8, #0
 800de36:	2c00      	cmp	r4, #0
 800de38:	f280 80d4 	bge.w	800dfe4 <__kernel_rem_pio2+0x474>
 800de3c:	462c      	mov	r4, r5
 800de3e:	2c00      	cmp	r4, #0
 800de40:	f2c0 8102 	blt.w	800e048 <__kernel_rem_pio2+0x4d8>
 800de44:	4b18      	ldr	r3, [pc, #96]	; (800dea8 <__kernel_rem_pio2+0x338>)
 800de46:	461e      	mov	r6, r3
 800de48:	ab70      	add	r3, sp, #448	; 0x1c0
 800de4a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800de4e:	1b2b      	subs	r3, r5, r4
 800de50:	f04f 0900 	mov.w	r9, #0
 800de54:	f04f 0a00 	mov.w	sl, #0
 800de58:	2700      	movs	r7, #0
 800de5a:	9306      	str	r3, [sp, #24]
 800de5c:	e0e6      	b.n	800e02c <__kernel_rem_pio2+0x4bc>
 800de5e:	f04f 0b02 	mov.w	fp, #2
 800de62:	e756      	b.n	800dd12 <__kernel_rem_pio2+0x1a2>
 800de64:	f8d8 3000 	ldr.w	r3, [r8]
 800de68:	bb05      	cbnz	r5, 800deac <__kernel_rem_pio2+0x33c>
 800de6a:	b123      	cbz	r3, 800de76 <__kernel_rem_pio2+0x306>
 800de6c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800de70:	f8c8 3000 	str.w	r3, [r8]
 800de74:	2301      	movs	r3, #1
 800de76:	3201      	adds	r2, #1
 800de78:	f108 0804 	add.w	r8, r8, #4
 800de7c:	461d      	mov	r5, r3
 800de7e:	e74f      	b.n	800dd20 <__kernel_rem_pio2+0x1b0>
	...
 800de8c:	3ff00000 	.word	0x3ff00000
 800de90:	0800eac8 	.word	0x0800eac8
 800de94:	40200000 	.word	0x40200000
 800de98:	3ff00000 	.word	0x3ff00000
 800de9c:	3e700000 	.word	0x3e700000
 800dea0:	41700000 	.word	0x41700000
 800dea4:	3fe00000 	.word	0x3fe00000
 800dea8:	0800ea88 	.word	0x0800ea88
 800deac:	1acb      	subs	r3, r1, r3
 800deae:	f8c8 3000 	str.w	r3, [r8]
 800deb2:	462b      	mov	r3, r5
 800deb4:	e7df      	b.n	800de76 <__kernel_rem_pio2+0x306>
 800deb6:	1e62      	subs	r2, r4, #1
 800deb8:	ab0c      	add	r3, sp, #48	; 0x30
 800deba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800debe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dec2:	a90c      	add	r1, sp, #48	; 0x30
 800dec4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dec8:	e738      	b.n	800dd3c <__kernel_rem_pio2+0x1cc>
 800deca:	1e62      	subs	r2, r4, #1
 800decc:	ab0c      	add	r3, sp, #48	; 0x30
 800dece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ded2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ded6:	e7f4      	b.n	800dec2 <__kernel_rem_pio2+0x352>
 800ded8:	a90c      	add	r1, sp, #48	; 0x30
 800deda:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dede:	3b01      	subs	r3, #1
 800dee0:	430a      	orrs	r2, r1
 800dee2:	e788      	b.n	800ddf6 <__kernel_rem_pio2+0x286>
 800dee4:	3301      	adds	r3, #1
 800dee6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800deea:	2900      	cmp	r1, #0
 800deec:	d0fa      	beq.n	800dee4 <__kernel_rem_pio2+0x374>
 800deee:	9a08      	ldr	r2, [sp, #32]
 800def0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800def4:	446a      	add	r2, sp
 800def6:	3a98      	subs	r2, #152	; 0x98
 800def8:	9208      	str	r2, [sp, #32]
 800defa:	9a06      	ldr	r2, [sp, #24]
 800defc:	a920      	add	r1, sp, #128	; 0x80
 800defe:	18a2      	adds	r2, r4, r2
 800df00:	18e3      	adds	r3, r4, r3
 800df02:	f104 0801 	add.w	r8, r4, #1
 800df06:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800df0a:	9302      	str	r3, [sp, #8]
 800df0c:	9b02      	ldr	r3, [sp, #8]
 800df0e:	4543      	cmp	r3, r8
 800df10:	da04      	bge.n	800df1c <__kernel_rem_pio2+0x3ac>
 800df12:	461c      	mov	r4, r3
 800df14:	e6a2      	b.n	800dc5c <__kernel_rem_pio2+0xec>
 800df16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df18:	2301      	movs	r3, #1
 800df1a:	e7e4      	b.n	800dee6 <__kernel_rem_pio2+0x376>
 800df1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df1e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800df22:	f7f2 fb27 	bl	8000574 <__aeabi_i2d>
 800df26:	e8e5 0102 	strd	r0, r1, [r5], #8
 800df2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df2c:	46ab      	mov	fp, r5
 800df2e:	461c      	mov	r4, r3
 800df30:	f04f 0900 	mov.w	r9, #0
 800df34:	2600      	movs	r6, #0
 800df36:	2700      	movs	r7, #0
 800df38:	9b05      	ldr	r3, [sp, #20]
 800df3a:	4599      	cmp	r9, r3
 800df3c:	dd06      	ble.n	800df4c <__kernel_rem_pio2+0x3dc>
 800df3e:	9b08      	ldr	r3, [sp, #32]
 800df40:	e8e3 6702 	strd	r6, r7, [r3], #8
 800df44:	f108 0801 	add.w	r8, r8, #1
 800df48:	9308      	str	r3, [sp, #32]
 800df4a:	e7df      	b.n	800df0c <__kernel_rem_pio2+0x39c>
 800df4c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800df50:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800df54:	f7f2 fb78 	bl	8000648 <__aeabi_dmul>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4630      	mov	r0, r6
 800df5e:	4639      	mov	r1, r7
 800df60:	f7f2 f9bc 	bl	80002dc <__adddf3>
 800df64:	f109 0901 	add.w	r9, r9, #1
 800df68:	4606      	mov	r6, r0
 800df6a:	460f      	mov	r7, r1
 800df6c:	e7e4      	b.n	800df38 <__kernel_rem_pio2+0x3c8>
 800df6e:	3d01      	subs	r5, #1
 800df70:	e747      	b.n	800de02 <__kernel_rem_pio2+0x292>
 800df72:	ec47 6b10 	vmov	d0, r6, r7
 800df76:	f1ca 0000 	rsb	r0, sl, #0
 800df7a:	f000 f949 	bl	800e210 <scalbn>
 800df7e:	ec57 6b10 	vmov	r6, r7, d0
 800df82:	4ba0      	ldr	r3, [pc, #640]	; (800e204 <__kernel_rem_pio2+0x694>)
 800df84:	ee10 0a10 	vmov	r0, s0
 800df88:	2200      	movs	r2, #0
 800df8a:	4639      	mov	r1, r7
 800df8c:	f7f2 fde2 	bl	8000b54 <__aeabi_dcmpge>
 800df90:	b1f8      	cbz	r0, 800dfd2 <__kernel_rem_pio2+0x462>
 800df92:	4b9d      	ldr	r3, [pc, #628]	; (800e208 <__kernel_rem_pio2+0x698>)
 800df94:	2200      	movs	r2, #0
 800df96:	4630      	mov	r0, r6
 800df98:	4639      	mov	r1, r7
 800df9a:	f7f2 fb55 	bl	8000648 <__aeabi_dmul>
 800df9e:	f7f2 fe03 	bl	8000ba8 <__aeabi_d2iz>
 800dfa2:	4680      	mov	r8, r0
 800dfa4:	f7f2 fae6 	bl	8000574 <__aeabi_i2d>
 800dfa8:	4b96      	ldr	r3, [pc, #600]	; (800e204 <__kernel_rem_pio2+0x694>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f7f2 fb4c 	bl	8000648 <__aeabi_dmul>
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f7f2 f98e 	bl	80002d8 <__aeabi_dsub>
 800dfbc:	f7f2 fdf4 	bl	8000ba8 <__aeabi_d2iz>
 800dfc0:	1c65      	adds	r5, r4, #1
 800dfc2:	ab0c      	add	r3, sp, #48	; 0x30
 800dfc4:	f10a 0a18 	add.w	sl, sl, #24
 800dfc8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dfcc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dfd0:	e71f      	b.n	800de12 <__kernel_rem_pio2+0x2a2>
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	4639      	mov	r1, r7
 800dfd6:	f7f2 fde7 	bl	8000ba8 <__aeabi_d2iz>
 800dfda:	ab0c      	add	r3, sp, #48	; 0x30
 800dfdc:	4625      	mov	r5, r4
 800dfde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dfe2:	e716      	b.n	800de12 <__kernel_rem_pio2+0x2a2>
 800dfe4:	ab0c      	add	r3, sp, #48	; 0x30
 800dfe6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800dfea:	f7f2 fac3 	bl	8000574 <__aeabi_i2d>
 800dfee:	4632      	mov	r2, r6
 800dff0:	463b      	mov	r3, r7
 800dff2:	f7f2 fb29 	bl	8000648 <__aeabi_dmul>
 800dff6:	4642      	mov	r2, r8
 800dff8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800dffc:	464b      	mov	r3, r9
 800dffe:	4630      	mov	r0, r6
 800e000:	4639      	mov	r1, r7
 800e002:	f7f2 fb21 	bl	8000648 <__aeabi_dmul>
 800e006:	3c01      	subs	r4, #1
 800e008:	4606      	mov	r6, r0
 800e00a:	460f      	mov	r7, r1
 800e00c:	e713      	b.n	800de36 <__kernel_rem_pio2+0x2c6>
 800e00e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e012:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e016:	f7f2 fb17 	bl	8000648 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4648      	mov	r0, r9
 800e020:	4651      	mov	r1, sl
 800e022:	f7f2 f95b 	bl	80002dc <__adddf3>
 800e026:	3701      	adds	r7, #1
 800e028:	4681      	mov	r9, r0
 800e02a:	468a      	mov	sl, r1
 800e02c:	9b00      	ldr	r3, [sp, #0]
 800e02e:	429f      	cmp	r7, r3
 800e030:	dc02      	bgt.n	800e038 <__kernel_rem_pio2+0x4c8>
 800e032:	9b06      	ldr	r3, [sp, #24]
 800e034:	429f      	cmp	r7, r3
 800e036:	ddea      	ble.n	800e00e <__kernel_rem_pio2+0x49e>
 800e038:	9a06      	ldr	r2, [sp, #24]
 800e03a:	ab48      	add	r3, sp, #288	; 0x120
 800e03c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e040:	e9c6 9a00 	strd	r9, sl, [r6]
 800e044:	3c01      	subs	r4, #1
 800e046:	e6fa      	b.n	800de3e <__kernel_rem_pio2+0x2ce>
 800e048:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e04a:	2b02      	cmp	r3, #2
 800e04c:	dc0b      	bgt.n	800e066 <__kernel_rem_pio2+0x4f6>
 800e04e:	2b00      	cmp	r3, #0
 800e050:	dc39      	bgt.n	800e0c6 <__kernel_rem_pio2+0x556>
 800e052:	d05d      	beq.n	800e110 <__kernel_rem_pio2+0x5a0>
 800e054:	9b02      	ldr	r3, [sp, #8]
 800e056:	f003 0007 	and.w	r0, r3, #7
 800e05a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e05e:	ecbd 8b02 	vpop	{d8}
 800e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e066:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d1f3      	bne.n	800e054 <__kernel_rem_pio2+0x4e4>
 800e06c:	9b05      	ldr	r3, [sp, #20]
 800e06e:	9500      	str	r5, [sp, #0]
 800e070:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e074:	eb0d 0403 	add.w	r4, sp, r3
 800e078:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e07c:	46a2      	mov	sl, r4
 800e07e:	9b00      	ldr	r3, [sp, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	f1aa 0a08 	sub.w	sl, sl, #8
 800e086:	dc69      	bgt.n	800e15c <__kernel_rem_pio2+0x5ec>
 800e088:	46aa      	mov	sl, r5
 800e08a:	f1ba 0f01 	cmp.w	sl, #1
 800e08e:	f1a4 0408 	sub.w	r4, r4, #8
 800e092:	f300 8083 	bgt.w	800e19c <__kernel_rem_pio2+0x62c>
 800e096:	9c05      	ldr	r4, [sp, #20]
 800e098:	ab48      	add	r3, sp, #288	; 0x120
 800e09a:	441c      	add	r4, r3
 800e09c:	2000      	movs	r0, #0
 800e09e:	2100      	movs	r1, #0
 800e0a0:	2d01      	cmp	r5, #1
 800e0a2:	f300 809a 	bgt.w	800e1da <__kernel_rem_pio2+0x66a>
 800e0a6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e0aa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e0ae:	f1bb 0f00 	cmp.w	fp, #0
 800e0b2:	f040 8098 	bne.w	800e1e6 <__kernel_rem_pio2+0x676>
 800e0b6:	9b04      	ldr	r3, [sp, #16]
 800e0b8:	e9c3 7800 	strd	r7, r8, [r3]
 800e0bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e0c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e0c4:	e7c6      	b.n	800e054 <__kernel_rem_pio2+0x4e4>
 800e0c6:	9e05      	ldr	r6, [sp, #20]
 800e0c8:	ab48      	add	r3, sp, #288	; 0x120
 800e0ca:	441e      	add	r6, r3
 800e0cc:	462c      	mov	r4, r5
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	2c00      	cmp	r4, #0
 800e0d4:	da33      	bge.n	800e13e <__kernel_rem_pio2+0x5ce>
 800e0d6:	f1bb 0f00 	cmp.w	fp, #0
 800e0da:	d036      	beq.n	800e14a <__kernel_rem_pio2+0x5da>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0e2:	9c04      	ldr	r4, [sp, #16]
 800e0e4:	e9c4 2300 	strd	r2, r3, [r4]
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e0f0:	f7f2 f8f2 	bl	80002d8 <__aeabi_dsub>
 800e0f4:	ae4a      	add	r6, sp, #296	; 0x128
 800e0f6:	2401      	movs	r4, #1
 800e0f8:	42a5      	cmp	r5, r4
 800e0fa:	da29      	bge.n	800e150 <__kernel_rem_pio2+0x5e0>
 800e0fc:	f1bb 0f00 	cmp.w	fp, #0
 800e100:	d002      	beq.n	800e108 <__kernel_rem_pio2+0x598>
 800e102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e106:	4619      	mov	r1, r3
 800e108:	9b04      	ldr	r3, [sp, #16]
 800e10a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e10e:	e7a1      	b.n	800e054 <__kernel_rem_pio2+0x4e4>
 800e110:	9c05      	ldr	r4, [sp, #20]
 800e112:	ab48      	add	r3, sp, #288	; 0x120
 800e114:	441c      	add	r4, r3
 800e116:	2000      	movs	r0, #0
 800e118:	2100      	movs	r1, #0
 800e11a:	2d00      	cmp	r5, #0
 800e11c:	da09      	bge.n	800e132 <__kernel_rem_pio2+0x5c2>
 800e11e:	f1bb 0f00 	cmp.w	fp, #0
 800e122:	d002      	beq.n	800e12a <__kernel_rem_pio2+0x5ba>
 800e124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e128:	4619      	mov	r1, r3
 800e12a:	9b04      	ldr	r3, [sp, #16]
 800e12c:	e9c3 0100 	strd	r0, r1, [r3]
 800e130:	e790      	b.n	800e054 <__kernel_rem_pio2+0x4e4>
 800e132:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e136:	f7f2 f8d1 	bl	80002dc <__adddf3>
 800e13a:	3d01      	subs	r5, #1
 800e13c:	e7ed      	b.n	800e11a <__kernel_rem_pio2+0x5aa>
 800e13e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e142:	f7f2 f8cb 	bl	80002dc <__adddf3>
 800e146:	3c01      	subs	r4, #1
 800e148:	e7c3      	b.n	800e0d2 <__kernel_rem_pio2+0x562>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	e7c8      	b.n	800e0e2 <__kernel_rem_pio2+0x572>
 800e150:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e154:	f7f2 f8c2 	bl	80002dc <__adddf3>
 800e158:	3401      	adds	r4, #1
 800e15a:	e7cd      	b.n	800e0f8 <__kernel_rem_pio2+0x588>
 800e15c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e160:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e164:	9b00      	ldr	r3, [sp, #0]
 800e166:	3b01      	subs	r3, #1
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	4632      	mov	r2, r6
 800e16c:	463b      	mov	r3, r7
 800e16e:	4640      	mov	r0, r8
 800e170:	4649      	mov	r1, r9
 800e172:	f7f2 f8b3 	bl	80002dc <__adddf3>
 800e176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	4640      	mov	r0, r8
 800e180:	4649      	mov	r1, r9
 800e182:	f7f2 f8a9 	bl	80002d8 <__aeabi_dsub>
 800e186:	4632      	mov	r2, r6
 800e188:	463b      	mov	r3, r7
 800e18a:	f7f2 f8a7 	bl	80002dc <__adddf3>
 800e18e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e192:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e196:	ed8a 7b00 	vstr	d7, [sl]
 800e19a:	e770      	b.n	800e07e <__kernel_rem_pio2+0x50e>
 800e19c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e1a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	4632      	mov	r2, r6
 800e1a8:	463b      	mov	r3, r7
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	f7f2 f896 	bl	80002dc <__adddf3>
 800e1b0:	e9cd 0100 	strd	r0, r1, [sp]
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f7f2 f88c 	bl	80002d8 <__aeabi_dsub>
 800e1c0:	4632      	mov	r2, r6
 800e1c2:	463b      	mov	r3, r7
 800e1c4:	f7f2 f88a 	bl	80002dc <__adddf3>
 800e1c8:	ed9d 7b00 	vldr	d7, [sp]
 800e1cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e1d0:	ed84 7b00 	vstr	d7, [r4]
 800e1d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1d8:	e757      	b.n	800e08a <__kernel_rem_pio2+0x51a>
 800e1da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e1de:	f7f2 f87d 	bl	80002dc <__adddf3>
 800e1e2:	3d01      	subs	r5, #1
 800e1e4:	e75c      	b.n	800e0a0 <__kernel_rem_pio2+0x530>
 800e1e6:	9b04      	ldr	r3, [sp, #16]
 800e1e8:	9a04      	ldr	r2, [sp, #16]
 800e1ea:	601f      	str	r7, [r3, #0]
 800e1ec:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e1f0:	605c      	str	r4, [r3, #4]
 800e1f2:	609d      	str	r5, [r3, #8]
 800e1f4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e1f8:	60d3      	str	r3, [r2, #12]
 800e1fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1fe:	6110      	str	r0, [r2, #16]
 800e200:	6153      	str	r3, [r2, #20]
 800e202:	e727      	b.n	800e054 <__kernel_rem_pio2+0x4e4>
 800e204:	41700000 	.word	0x41700000
 800e208:	3e700000 	.word	0x3e700000
 800e20c:	00000000 	.word	0x00000000

0800e210 <scalbn>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	ec55 4b10 	vmov	r4, r5, d0
 800e216:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e21a:	4606      	mov	r6, r0
 800e21c:	462b      	mov	r3, r5
 800e21e:	b999      	cbnz	r1, 800e248 <scalbn+0x38>
 800e220:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e224:	4323      	orrs	r3, r4
 800e226:	d03f      	beq.n	800e2a8 <scalbn+0x98>
 800e228:	4b35      	ldr	r3, [pc, #212]	; (800e300 <scalbn+0xf0>)
 800e22a:	4629      	mov	r1, r5
 800e22c:	ee10 0a10 	vmov	r0, s0
 800e230:	2200      	movs	r2, #0
 800e232:	f7f2 fa09 	bl	8000648 <__aeabi_dmul>
 800e236:	4b33      	ldr	r3, [pc, #204]	; (800e304 <scalbn+0xf4>)
 800e238:	429e      	cmp	r6, r3
 800e23a:	4604      	mov	r4, r0
 800e23c:	460d      	mov	r5, r1
 800e23e:	da10      	bge.n	800e262 <scalbn+0x52>
 800e240:	a327      	add	r3, pc, #156	; (adr r3, 800e2e0 <scalbn+0xd0>)
 800e242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e246:	e01f      	b.n	800e288 <scalbn+0x78>
 800e248:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e24c:	4291      	cmp	r1, r2
 800e24e:	d10c      	bne.n	800e26a <scalbn+0x5a>
 800e250:	ee10 2a10 	vmov	r2, s0
 800e254:	4620      	mov	r0, r4
 800e256:	4629      	mov	r1, r5
 800e258:	f7f2 f840 	bl	80002dc <__adddf3>
 800e25c:	4604      	mov	r4, r0
 800e25e:	460d      	mov	r5, r1
 800e260:	e022      	b.n	800e2a8 <scalbn+0x98>
 800e262:	460b      	mov	r3, r1
 800e264:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e268:	3936      	subs	r1, #54	; 0x36
 800e26a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e26e:	4296      	cmp	r6, r2
 800e270:	dd0d      	ble.n	800e28e <scalbn+0x7e>
 800e272:	2d00      	cmp	r5, #0
 800e274:	a11c      	add	r1, pc, #112	; (adr r1, 800e2e8 <scalbn+0xd8>)
 800e276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e27a:	da02      	bge.n	800e282 <scalbn+0x72>
 800e27c:	a11c      	add	r1, pc, #112	; (adr r1, 800e2f0 <scalbn+0xe0>)
 800e27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e282:	a319      	add	r3, pc, #100	; (adr r3, 800e2e8 <scalbn+0xd8>)
 800e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e288:	f7f2 f9de 	bl	8000648 <__aeabi_dmul>
 800e28c:	e7e6      	b.n	800e25c <scalbn+0x4c>
 800e28e:	1872      	adds	r2, r6, r1
 800e290:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e294:	428a      	cmp	r2, r1
 800e296:	dcec      	bgt.n	800e272 <scalbn+0x62>
 800e298:	2a00      	cmp	r2, #0
 800e29a:	dd08      	ble.n	800e2ae <scalbn+0x9e>
 800e29c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e2a8:	ec45 4b10 	vmov	d0, r4, r5
 800e2ac:	bd70      	pop	{r4, r5, r6, pc}
 800e2ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e2b2:	da08      	bge.n	800e2c6 <scalbn+0xb6>
 800e2b4:	2d00      	cmp	r5, #0
 800e2b6:	a10a      	add	r1, pc, #40	; (adr r1, 800e2e0 <scalbn+0xd0>)
 800e2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2bc:	dac0      	bge.n	800e240 <scalbn+0x30>
 800e2be:	a10e      	add	r1, pc, #56	; (adr r1, 800e2f8 <scalbn+0xe8>)
 800e2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2c4:	e7bc      	b.n	800e240 <scalbn+0x30>
 800e2c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2ca:	3236      	adds	r2, #54	; 0x36
 800e2cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	4b0c      	ldr	r3, [pc, #48]	; (800e308 <scalbn+0xf8>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	e7d5      	b.n	800e288 <scalbn+0x78>
 800e2dc:	f3af 8000 	nop.w
 800e2e0:	c2f8f359 	.word	0xc2f8f359
 800e2e4:	01a56e1f 	.word	0x01a56e1f
 800e2e8:	8800759c 	.word	0x8800759c
 800e2ec:	7e37e43c 	.word	0x7e37e43c
 800e2f0:	8800759c 	.word	0x8800759c
 800e2f4:	fe37e43c 	.word	0xfe37e43c
 800e2f8:	c2f8f359 	.word	0xc2f8f359
 800e2fc:	81a56e1f 	.word	0x81a56e1f
 800e300:	43500000 	.word	0x43500000
 800e304:	ffff3cb0 	.word	0xffff3cb0
 800e308:	3c900000 	.word	0x3c900000
 800e30c:	00000000 	.word	0x00000000

0800e310 <floor>:
 800e310:	ec51 0b10 	vmov	r0, r1, d0
 800e314:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e320:	2e13      	cmp	r6, #19
 800e322:	ee10 5a10 	vmov	r5, s0
 800e326:	ee10 8a10 	vmov	r8, s0
 800e32a:	460c      	mov	r4, r1
 800e32c:	dc31      	bgt.n	800e392 <floor+0x82>
 800e32e:	2e00      	cmp	r6, #0
 800e330:	da14      	bge.n	800e35c <floor+0x4c>
 800e332:	a333      	add	r3, pc, #204	; (adr r3, 800e400 <floor+0xf0>)
 800e334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e338:	f7f1 ffd0 	bl	80002dc <__adddf3>
 800e33c:	2200      	movs	r2, #0
 800e33e:	2300      	movs	r3, #0
 800e340:	f7f2 fc12 	bl	8000b68 <__aeabi_dcmpgt>
 800e344:	b138      	cbz	r0, 800e356 <floor+0x46>
 800e346:	2c00      	cmp	r4, #0
 800e348:	da53      	bge.n	800e3f2 <floor+0xe2>
 800e34a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e34e:	4325      	orrs	r5, r4
 800e350:	d052      	beq.n	800e3f8 <floor+0xe8>
 800e352:	4c2d      	ldr	r4, [pc, #180]	; (800e408 <floor+0xf8>)
 800e354:	2500      	movs	r5, #0
 800e356:	4621      	mov	r1, r4
 800e358:	4628      	mov	r0, r5
 800e35a:	e024      	b.n	800e3a6 <floor+0x96>
 800e35c:	4f2b      	ldr	r7, [pc, #172]	; (800e40c <floor+0xfc>)
 800e35e:	4137      	asrs	r7, r6
 800e360:	ea01 0307 	and.w	r3, r1, r7
 800e364:	4303      	orrs	r3, r0
 800e366:	d01e      	beq.n	800e3a6 <floor+0x96>
 800e368:	a325      	add	r3, pc, #148	; (adr r3, 800e400 <floor+0xf0>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	f7f1 ffb5 	bl	80002dc <__adddf3>
 800e372:	2200      	movs	r2, #0
 800e374:	2300      	movs	r3, #0
 800e376:	f7f2 fbf7 	bl	8000b68 <__aeabi_dcmpgt>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d0eb      	beq.n	800e356 <floor+0x46>
 800e37e:	2c00      	cmp	r4, #0
 800e380:	bfbe      	ittt	lt
 800e382:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e386:	4133      	asrlt	r3, r6
 800e388:	18e4      	addlt	r4, r4, r3
 800e38a:	ea24 0407 	bic.w	r4, r4, r7
 800e38e:	2500      	movs	r5, #0
 800e390:	e7e1      	b.n	800e356 <floor+0x46>
 800e392:	2e33      	cmp	r6, #51	; 0x33
 800e394:	dd0b      	ble.n	800e3ae <floor+0x9e>
 800e396:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e39a:	d104      	bne.n	800e3a6 <floor+0x96>
 800e39c:	ee10 2a10 	vmov	r2, s0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	f7f1 ff9b 	bl	80002dc <__adddf3>
 800e3a6:	ec41 0b10 	vmov	d0, r0, r1
 800e3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e3b2:	f04f 37ff 	mov.w	r7, #4294967295
 800e3b6:	40df      	lsrs	r7, r3
 800e3b8:	4238      	tst	r0, r7
 800e3ba:	d0f4      	beq.n	800e3a6 <floor+0x96>
 800e3bc:	a310      	add	r3, pc, #64	; (adr r3, 800e400 <floor+0xf0>)
 800e3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c2:	f7f1 ff8b 	bl	80002dc <__adddf3>
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f7f2 fbcd 	bl	8000b68 <__aeabi_dcmpgt>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d0c1      	beq.n	800e356 <floor+0x46>
 800e3d2:	2c00      	cmp	r4, #0
 800e3d4:	da0a      	bge.n	800e3ec <floor+0xdc>
 800e3d6:	2e14      	cmp	r6, #20
 800e3d8:	d101      	bne.n	800e3de <floor+0xce>
 800e3da:	3401      	adds	r4, #1
 800e3dc:	e006      	b.n	800e3ec <floor+0xdc>
 800e3de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	40b3      	lsls	r3, r6
 800e3e6:	441d      	add	r5, r3
 800e3e8:	45a8      	cmp	r8, r5
 800e3ea:	d8f6      	bhi.n	800e3da <floor+0xca>
 800e3ec:	ea25 0507 	bic.w	r5, r5, r7
 800e3f0:	e7b1      	b.n	800e356 <floor+0x46>
 800e3f2:	2500      	movs	r5, #0
 800e3f4:	462c      	mov	r4, r5
 800e3f6:	e7ae      	b.n	800e356 <floor+0x46>
 800e3f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e3fc:	e7ab      	b.n	800e356 <floor+0x46>
 800e3fe:	bf00      	nop
 800e400:	8800759c 	.word	0x8800759c
 800e404:	7e37e43c 	.word	0x7e37e43c
 800e408:	bff00000 	.word	0xbff00000
 800e40c:	000fffff 	.word	0x000fffff

0800e410 <_sbrk>:
 800e410:	4a04      	ldr	r2, [pc, #16]	; (800e424 <_sbrk+0x14>)
 800e412:	6811      	ldr	r1, [r2, #0]
 800e414:	4603      	mov	r3, r0
 800e416:	b909      	cbnz	r1, 800e41c <_sbrk+0xc>
 800e418:	4903      	ldr	r1, [pc, #12]	; (800e428 <_sbrk+0x18>)
 800e41a:	6011      	str	r1, [r2, #0]
 800e41c:	6810      	ldr	r0, [r2, #0]
 800e41e:	4403      	add	r3, r0
 800e420:	6013      	str	r3, [r2, #0]
 800e422:	4770      	bx	lr
 800e424:	20001b50 	.word	0x20001b50
 800e428:	20001b58 	.word	0x20001b58

0800e42c <_init>:
 800e42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e42e:	bf00      	nop
 800e430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e432:	bc08      	pop	{r3}
 800e434:	469e      	mov	lr, r3
 800e436:	4770      	bx	lr

0800e438 <_fini>:
 800e438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e43a:	bf00      	nop
 800e43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e43e:	bc08      	pop	{r3}
 800e440:	469e      	mov	lr, r3
 800e442:	4770      	bx	lr
