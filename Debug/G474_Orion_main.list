
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011324  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08011508  08011508  00021508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b90  08011b90  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08011b90  08011b90  00021b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b98  08011b98  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b98  08011b98  00021b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b9c  08011b9c  00021b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011ba0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df4  200001dc  08011d7c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fd0  08011d7c  00030fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024ce2  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ba5  00000000  00000000  00054f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dd8  00000000  00000000  00059ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016fa  00000000  00000000  0005b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf3a  00000000  00000000  0005cfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d64  00000000  00000000  00089ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e2b1  00000000  00000000  000afc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009280  00000000  00000000  001cdefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001d717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080114ec 	.word	0x080114ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	080114ec 	.word	0x080114ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fde:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 f848 	bl	8006080 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	ed97 0a00 	vldr	s0, [r7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f005 f841 	bl	8006080 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 8001002:	7b7b      	ldrb	r3, [r7, #13]
 8001004:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 800100e:	7a3b      	ldrb	r3, [r7, #8]
 8001010:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 8001012:	7a7b      	ldrb	r3, [r7, #9]
 8001014:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 8001016:	7abb      	ldrb	r3, [r7, #10]
 8001018:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	75fb      	strb	r3, [r7, #23]

	can1_send(0x100, senddata_motor);
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4619      	mov	r1, r3
 8001024:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001028:	f000 fc4e 	bl	80018c8 <can1_send>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	ed87 0a01 	vstr	s0, [r7, #4]
 800103e:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	ed97 0a01 	vldr	s0, [r7, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f005 f818 	bl	8006080 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	ed97 0a00 	vldr	s0, [r7]
 8001058:	4618      	mov	r0, r3
 800105a:	f005 f811 	bl	8006080 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 800105e:	7b3b      	ldrb	r3, [r7, #12]
 8001060:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 800106e:	7a3b      	ldrb	r3, [r7, #8]
 8001070:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 8001072:	7a7b      	ldrb	r3, [r7, #9]
 8001074:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 8001076:	7abb      	ldrb	r3, [r7, #10]
 8001078:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	75fb      	strb	r3, [r7, #23]

	can1_send(0x101, senddata_motor);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4619      	mov	r1, r3
 8001084:	f240 1001 	movw	r0, #257	; 0x101
 8001088:	f000 fc1e 	bl	80018c8 <can1_send>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	ed87 0a01 	vstr	s0, [r7, #4]
 800109e:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 ffe8 	bl	8006080 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	ed97 0a00 	vldr	s0, [r7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 ffe1 	bl	8006080 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 80010ce:	7a3b      	ldrb	r3, [r7, #8]
 80010d0:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 80010d2:	7a7b      	ldrb	r3, [r7, #9]
 80010d4:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	75fb      	strb	r3, [r7, #23]

	can2_send(0x102, senddata_motor);
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	4619      	mov	r1, r3
 80010e4:	f44f 7081 	mov.w	r0, #258	; 0x102
 80010e8:	f000 fc4e 	bl	8001988 <can2_send>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80010fe:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	ed97 0a01 	vldr	s0, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f004 ffb8 	bl	8006080 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	ed97 0a00 	vldr	s0, [r7]
 8001118:	4618      	mov	r0, r3
 800111a:	f004 ffb1 	bl	8006080 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 8001122:	7b7b      	ldrb	r3, [r7, #13]
 8001124:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 800112e:	7a3b      	ldrb	r3, [r7, #8]
 8001130:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 8001132:	7a7b      	ldrb	r3, [r7, #9]
 8001134:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 8001136:	7abb      	ldrb	r3, [r7, #10]
 8001138:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	75fb      	strb	r3, [r7, #23]

	can2_send(0x103, senddata_motor);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	f240 1003 	movw	r0, #259	; 0x103
 8001148:	f000 fc1e 	bl	8001988 <can2_send>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a01 	vstr	s0, [r7, #4]
 800115e:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	ed97 0a01 	vldr	s0, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 ff88 	bl	8006080 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	ed97 0a00 	vldr	s0, [r7]
 8001178:	4618      	mov	r0, r3
 800117a:	f004 ff81 	bl	8006080 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 8001182:	7b7b      	ldrb	r3, [r7, #13]
 8001184:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 800118e:	7a3b      	ldrb	r3, [r7, #8]
 8001190:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 8001192:	7a7b      	ldrb	r3, [r7, #9]
 8001194:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 8001196:	7abb      	ldrb	r3, [r7, #10]
 8001198:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	75fb      	strb	r3, [r7, #23]

	can1_send(0x104, senddata_motor);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	f44f 7082 	mov.w	r0, #260	; 0x104
 80011a8:	f000 fb8e 	bl	80018c8 <can1_send>
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 ff5a 	bl	8006080 <float_to_uchar4>

	senddata_kick[0]=0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	743b      	strb	r3, [r7, #16]
	senddata_kick[1]=senddata_voltage[0];
 80011d0:	7b3b      	ldrb	r3, [r7, #12]
 80011d2:	747b      	strb	r3, [r7, #17]
	senddata_kick[2]=senddata_voltage[1];
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	74bb      	strb	r3, [r7, #18]
	senddata_kick[3]=senddata_voltage[2];
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	74fb      	strb	r3, [r7, #19]
	senddata_kick[4]=senddata_voltage[3];
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	753b      	strb	r3, [r7, #20]
	can1_send(0x110, senddata_kick);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 7088 	mov.w	r0, #272	; 0x110
 80011ea:	f000 fb6d 	bl	80018c8 <can1_send>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	460a      	mov	r2, r1
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	4613      	mov	r3, r2
 8001204:	71bb      	strb	r3, [r7, #6]
	/* id 1: 0=>standby   1=>charge
	 * id 2: 0=>straight  1=>chip
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	723b      	strb	r3, [r7, #8]
	senddata_kick[1]=param;
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	727b      	strb	r3, [r7, #9]
	can1_send(0x110, senddata_kick);
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	4619      	mov	r1, r3
 8001214:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001218:	f000 fb56 	bl	80018c8 <can1_send>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 800122e:	2300      	movs	r3, #0
 8001230:	723b      	strb	r3, [r7, #8]
	senddata_power[1]=power_on;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	727b      	strb	r3, [r7, #9]
	can1_send(0x010, senddata_power);
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4619      	mov	r1, r3
 800123c:	2010      	movs	r0, #16
 800123e:	f000 fb43 	bl	80018c8 <can1_send>
}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	ed87 0a00 	vstr	s0, [r7]
 8001256:	71fb      	strb	r3, [r7, #7]
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	ed97 0a00 	vldr	s0, [r7]
 8001260:	4618      	mov	r0, r3
 8001262:	f004 ff0d 	bl	8006080 <float_to_uchar4>
	senddata_power_param[0]=id;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	723b      	strb	r3, [r7, #8]
	senddata_power_param[1]=senddata_power_param_temp[0];
 800126a:	7c3b      	ldrb	r3, [r7, #16]
 800126c:	727b      	strb	r3, [r7, #9]
	senddata_power_param[2]=senddata_power_param_temp[1];
 800126e:	7c7b      	ldrb	r3, [r7, #17]
 8001270:	72bb      	strb	r3, [r7, #10]
	senddata_power_param[3]=senddata_power_param_temp[2];
 8001272:	7cbb      	ldrb	r3, [r7, #18]
 8001274:	72fb      	strb	r3, [r7, #11]
	senddata_power_param[4]=senddata_power_param_temp[3];
 8001276:	7cfb      	ldrb	r3, [r7, #19]
 8001278:	733b      	strb	r3, [r7, #12]

	can1_send(0x010, senddata_power_param);
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4619      	mov	r1, r3
 8001280:	2010      	movs	r0, #16
 8001282:	f000 fb21 	bl	80018c8 <can1_send>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	80fb      	strh	r3, [r7, #6]
 800129c:	4613      	mov	r3, r2
 800129e:	80bb      	strh	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <actuator_buzzer+0x38>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	22fa      	movs	r2, #250	; 0xfa
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(ontime);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 ffc0 	bl	8006230 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <actuator_buzzer+0x38>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 ffb8 	bl	8006230 <HAL_Delay>

}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000b70 	.word	0x20000b70

080012cc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08c      	sub	sp, #48	; 0x30
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2220      	movs	r2, #32
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00d f9a5 	bl	800e634 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <MX_ADC1_Init+0xe8>)
 80012ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <MX_ADC1_Init+0xe8>)
 80012f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <MX_ADC1_Init+0xe8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001300:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <MX_ADC1_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001314:	2204      	movs	r2, #4
 8001316:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <MX_ADC1_Init+0xe8>)
 800131a:	2200      	movs	r2, #0
 800131c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001320:	2201      	movs	r2, #1
 8001322:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001326:	2201      	movs	r2, #1
 8001328:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_ADC1_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_ADC1_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_ADC1_Init+0xe8>)
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001354:	4817      	ldr	r0, [pc, #92]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001356:	f005 f9af 	bl	80066b8 <HAL_ADC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001360:	f004 f834 	bl	80053cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	4811      	ldr	r0, [pc, #68]	; (80013b4 <MX_ADC1_Init+0xe8>)
 8001370:	f006 f9b2 	bl	80076d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800137a:	f004 f827 	bl	80053cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_ADC1_Init+0xec>)
 8001380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001382:	2306      	movs	r3, #6
 8001384:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001386:	2307      	movs	r3, #7
 8001388:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800138a:	237f      	movs	r3, #127	; 0x7f
 800138c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800138e:	2304      	movs	r3, #4
 8001390:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	4619      	mov	r1, r3
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_ADC1_Init+0xe8>)
 800139c:	f005 fc40 	bl	8006c20 <HAL_ADC_ConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013a6:	f004 f811 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001f8 	.word	0x200001f8
 80013b8:	3ef08000 	.word	0x3ef08000

080013bc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2220      	movs	r2, #32
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00d f92d 	bl	800e634 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <MX_ADC3_Init+0xe4>)
 80013dc:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <MX_ADC3_Init+0xe8>)
 80013de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <MX_ADC3_Init+0xe4>)
 80013e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <MX_ADC3_Init+0xe4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_ADC3_Init+0xe4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <MX_ADC3_Init+0xe4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_ADC3_Init+0xe4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001400:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <MX_ADC3_Init+0xe4>)
 8001402:	2204      	movs	r2, #4
 8001404:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <MX_ADC3_Init+0xe4>)
 8001408:	2200      	movs	r2, #0
 800140a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <MX_ADC3_Init+0xe4>)
 800140e:	2201      	movs	r2, #1
 8001410:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001412:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <MX_ADC3_Init+0xe4>)
 8001414:	2201      	movs	r2, #1
 8001416:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_ADC3_Init+0xe4>)
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <MX_ADC3_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_ADC3_Init+0xe4>)
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_ADC3_Init+0xe4>)
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_ADC3_Init+0xe4>)
 8001436:	2200      	movs	r2, #0
 8001438:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_ADC3_Init+0xe4>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001442:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_ADC3_Init+0xe4>)
 8001444:	f005 f938 	bl	80066b8 <HAL_ADC_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800144e:	f003 ffbd 	bl	80053cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <MX_ADC3_Init+0xe4>)
 800145e:	f006 f93b 	bl	80076d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001468:	f003 ffb0 	bl	80053cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_ADC3_Init+0xec>)
 800146e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001470:	2306      	movs	r3, #6
 8001472:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001474:	2307      	movs	r3, #7
 8001476:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001478:	237f      	movs	r3, #127	; 0x7f
 800147a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800147c:	2304      	movs	r3, #4
 800147e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_ADC3_Init+0xe4>)
 800148a:	f005 fbc9 	bl	8006c20 <HAL_ADC_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001494:	f003 ff9a 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	3730      	adds	r7, #48	; 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000264 	.word	0x20000264
 80014a4:	50000400 	.word	0x50000400
 80014a8:	04300002 	.word	0x04300002

080014ac <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2220      	movs	r2, #32
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00d f8bb 	bl	800e634 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80014be:	4b32      	ldr	r3, [pc, #200]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014c0:	4a32      	ldr	r2, [pc, #200]	; (800158c <MX_ADC5_Init+0xe0>)
 80014c2:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014ca:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e4:	4b28      	ldr	r3, [pc, #160]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_ADC5_Init+0xdc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001504:	4b20      	ldr	r3, [pc, #128]	; (8001588 <MX_ADC5_Init+0xdc>)
 8001506:	2200      	movs	r2, #0
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_ADC5_Init+0xdc>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <MX_ADC5_Init+0xdc>)
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_ADC5_Init+0xdc>)
 800151a:	2200      	movs	r2, #0
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_ADC5_Init+0xdc>)
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_ADC5_Init+0xdc>)
 8001528:	2204      	movs	r2, #4
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_ADC5_Init+0xdc>)
 800152e:	2240      	movs	r2, #64	; 0x40
 8001530:	649a      	str	r2, [r3, #72]	; 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_ADC5_Init+0xdc>)
 8001534:	2200      	movs	r2, #0
 8001536:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_ADC5_Init+0xdc>)
 800153a:	2201      	movs	r2, #1
 800153c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800153e:	4812      	ldr	r0, [pc, #72]	; (8001588 <MX_ADC5_Init+0xdc>)
 8001540:	f005 f8ba 	bl	80066b8 <HAL_ADC_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 800154a:	f003 ff3f 	bl	80053cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_ADC5_Init+0xe4>)
 8001550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001552:	2306      	movs	r3, #6
 8001554:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001556:	2307      	movs	r3, #7
 8001558:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800155a:	237f      	movs	r3, #127	; 0x7f
 800155c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800155e:	2304      	movs	r3, #4
 8001560:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSaturation = DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	773b      	strb	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800156a:	463b      	mov	r3, r7
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_ADC5_Init+0xdc>)
 8001570:	f005 fb56 	bl	8006c20 <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC5_Init+0xd2>
  {
    Error_Handler();
 800157a:	f003 ff27 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002d0 	.word	0x200002d0
 800158c:	50000600 	.word	0x50000600
 8001590:	08600004 	.word	0x08600004

08001594 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0a2      	sub	sp, #136	; 0x88
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	2254      	movs	r2, #84	; 0x54
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00d f83d 	bl	800e634 <memset>
  if(adcHandle->Instance==ADC1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c2:	d15f      	bne.n	8001684 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015ce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 fc11 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015e0:	f003 fef4 	bl	80053cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015e4:	4b98      	ldr	r3, [pc, #608]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	4a97      	ldr	r2, [pc, #604]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80015ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f0:	4b95      	ldr	r3, [pc, #596]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	4a91      	ldr	r2, [pc, #580]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001608:	4b8f      	ldr	r3, [pc, #572]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001614:	2301      	movs	r3, #1
 8001616:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001624:	4619      	mov	r1, r3
 8001626:	4889      	ldr	r0, [pc, #548]	; (800184c <HAL_ADC_MspInit+0x2b8>)
 8001628:	f007 fc1c 	bl	8008e64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 800162c:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 800162e:	4a89      	ldr	r2, [pc, #548]	; (8001854 <HAL_ADC_MspInit+0x2c0>)
 8001630:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001632:	4b87      	ldr	r3, [pc, #540]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 8001634:	2205      	movs	r2, #5
 8001636:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001638:	4b85      	ldr	r3, [pc, #532]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800163e:	4b84      	ldr	r3, [pc, #528]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001644:	4b82      	ldr	r3, [pc, #520]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 800164c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001650:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 8001654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001658:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800165a:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 800165c:	2220      	movs	r2, #32
 800165e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001660:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001666:	487a      	ldr	r0, [pc, #488]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 8001668:	f006 fa4e 	bl	8007b08 <HAL_DMA_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8001672:	f003 feab 	bl	80053cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a75      	ldr	r2, [pc, #468]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
 800167c:	4a74      	ldr	r2, [pc, #464]	; (8001850 <HAL_ADC_MspInit+0x2bc>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8001682:	e0dc      	b.n	800183e <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC3)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a73      	ldr	r2, [pc, #460]	; (8001858 <HAL_ADC_MspInit+0x2c4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d168      	bne.n	8001760 <HAL_ADC_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800168e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001692:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001698:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	4618      	mov	r0, r3
 80016a0:	f008 fbac 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80016aa:	f003 fe8f 	bl	80053cc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016ae:	4b6b      	ldr	r3, [pc, #428]	; (800185c <HAL_ADC_MspInit+0x2c8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3301      	adds	r3, #1
 80016b4:	4a69      	ldr	r2, [pc, #420]	; (800185c <HAL_ADC_MspInit+0x2c8>)
 80016b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_ADC_MspInit+0x2c8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10b      	bne.n	80016d8 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016c0:	4b61      	ldr	r3, [pc, #388]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	4a60      	ldr	r2, [pc, #384]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80016c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016cc:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b5b      	ldr	r3, [pc, #364]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	4a5a      	ldr	r2, [pc, #360]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e4:	4b58      	ldr	r3, [pc, #352]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80016f0:	2302      	movs	r3, #2
 80016f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f4:	2303      	movs	r3, #3
 80016f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001700:	4619      	mov	r1, r3
 8001702:	4852      	ldr	r0, [pc, #328]	; (800184c <HAL_ADC_MspInit+0x2b8>)
 8001704:	f007 fbae 	bl	8008e64 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001708:	4b55      	ldr	r3, [pc, #340]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 800170a:	4a56      	ldr	r2, [pc, #344]	; (8001864 <HAL_ADC_MspInit+0x2d0>)
 800170c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800170e:	4b54      	ldr	r3, [pc, #336]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001710:	2225      	movs	r2, #37	; 0x25
 8001712:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001714:	4b52      	ldr	r3, [pc, #328]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001720:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001726:	4b4e      	ldr	r3, [pc, #312]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800172e:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001734:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001738:	2220      	movs	r2, #32
 800173a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800173c:	4b48      	ldr	r3, [pc, #288]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001742:	4847      	ldr	r0, [pc, #284]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001744:	f006 f9e0 	bl	8007b08 <HAL_DMA_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 800174e:	f003 fe3d 	bl	80053cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a42      	ldr	r2, [pc, #264]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 8001756:	655a      	str	r2, [r3, #84]	; 0x54
 8001758:	4a41      	ldr	r2, [pc, #260]	; (8001860 <HAL_ADC_MspInit+0x2cc>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800175e:	e06e      	b.n	800183e <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC5)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a40      	ldr	r2, [pc, #256]	; (8001868 <HAL_ADC_MspInit+0x2d4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d169      	bne.n	800183e <HAL_ADC_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800176a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001774:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	4618      	mov	r0, r3
 800177c:	f008 fb3e 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_ADC_MspInit+0x1f6>
      Error_Handler();
 8001786:	f003 fe21 	bl	80053cc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <HAL_ADC_MspInit+0x2c8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3301      	adds	r3, #1
 8001790:	4a32      	ldr	r2, [pc, #200]	; (800185c <HAL_ADC_MspInit+0x2c8>)
 8001792:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_ADC_MspInit+0x2c8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10b      	bne.n	80017b4 <HAL_ADC_MspInit+0x220>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80017a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a23      	ldr	r2, [pc, #140]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_ADC_MspInit+0x2b4>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017de:	4619      	mov	r1, r3
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e4:	f007 fb3e 	bl	8008e64 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 80017ea:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_ADC_MspInit+0x2dc>)
 80017ec:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 80017f0:	2227      	movs	r2, #39	; 0x27
 80017f2:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 8001808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180c:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 8001810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001814:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 8001818:	2220      	movs	r2, #32
 800181a:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001822:	4812      	ldr	r0, [pc, #72]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 8001824:	f006 f970 	bl	8007b08 <HAL_DMA_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_ADC_MspInit+0x29e>
      Error_Handler();
 800182e:	f003 fdcd 	bl	80053cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_ADC_MspInit+0x2d8>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800183e:	bf00      	nop
 8001840:	3788      	adds	r7, #136	; 0x88
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	48000400 	.word	0x48000400
 8001850:	2000033c 	.word	0x2000033c
 8001854:	40020058 	.word	0x40020058
 8001858:	50000400 	.word	0x50000400
 800185c:	2000045c 	.word	0x2000045c
 8001860:	2000039c 	.word	0x2000039c
 8001864:	40020030 	.word	0x40020030
 8001868:	50000600 	.word	0x50000600
 800186c:	200003fc 	.word	0x200003fc
 8001870:	40020044 	.word	0x40020044

08001874 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001884:	2302      	movs	r3, #2
 8001886:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001888:	2301      	movs	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4619      	mov	r1, r3
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <can1_init_ibis+0x50>)
 800189c:	f006 fdc0 	bl	8008420 <HAL_FDCAN_ConfigFilter>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <can1_init_ibis+0x36>
		  {
			  Error_Handler();
 80018a6:	f003 fd91 	bl	80053cc <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <can1_init_ibis+0x50>)
 80018ac:	f006 fe12 	bl	80084d4 <HAL_FDCAN_Start>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <can1_init_ibis+0x46>
 80018b6:	f003 fd89 	bl	80053cc <Error_Handler>
}
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000460 	.word	0x20000460

080018c8 <can1_send>:

void can1_send(int id, uint8_t senddata[]){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a15      	ldr	r2, [pc, #84]	; (800192c <can1_send+0x64>)
 80018d6:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <can1_send+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <can1_send+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <can1_send+0x64>)
 80018e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018ea:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <can1_send+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <can1_send+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <can1_send+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <can1_send+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <can1_send+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 800190a:	bf00      	nop
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <can1_send+0x68>)
 800190e:	f006 ff27 	bl	8008760 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b03      	cmp	r3, #3
 8001916:	d1f9      	bne.n	800190c <can1_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	4904      	ldr	r1, [pc, #16]	; (800192c <can1_send+0x64>)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <can1_send+0x68>)
 800191e:	f006 fe01 	bl	8008524 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000ad0 	.word	0x20000ad0
 8001930:	20000460 	.word	0x20000460

08001934 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800193c:	2300      	movs	r3, #0
 800193e:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001944:	2302      	movs	r3, #2
 8001946:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001948:	2301      	movs	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001954:	f107 0308 	add.w	r3, r7, #8
 8001958:	4619      	mov	r1, r3
 800195a:	480a      	ldr	r0, [pc, #40]	; (8001984 <can2_init_ibis+0x50>)
 800195c:	f006 fd60 	bl	8008420 <HAL_FDCAN_ConfigFilter>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <can2_init_ibis+0x36>
		  {
			  Error_Handler();
 8001966:	f003 fd31 	bl	80053cc <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <can2_init_ibis+0x50>)
 800196c:	f006 fdb2 	bl	80084d4 <HAL_FDCAN_Start>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <can2_init_ibis+0x46>
 8001976:	f003 fd29 	bl	80053cc <Error_Handler>
}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200004c4 	.word	0x200004c4

08001988 <can2_send>:

void can2_send(int id, uint8_t senddata[]){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a15      	ldr	r2, [pc, #84]	; (80019ec <can2_send+0x64>)
 8001996:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <can2_send+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <can2_send+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <can2_send+0x64>)
 80019a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019aa:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <can2_send+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <can2_send+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <can2_send+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <can2_send+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <can2_send+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 80019ca:	bf00      	nop
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <can2_send+0x68>)
 80019ce:	f006 fec7 	bl	8008760 <HAL_FDCAN_GetTxFifoFreeLevel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d1f9      	bne.n	80019cc <can2_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4904      	ldr	r1, [pc, #16]	; (80019ec <can2_send+0x64>)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <can2_send+0x68>)
 80019de:	f006 fda1 	bl	8008524 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000ad0 	.word	0x20000ad0
 80019f0:	200004c4 	.word	0x200004c4

080019f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MX_DMA_Init+0x90>)
 80019fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <MX_DMA_Init+0x90>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6493      	str	r3, [r2, #72]	; 0x48
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_DMA_Init+0x90>)
 8001a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_DMA_Init+0x90>)
 8001a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <MX_DMA_Init+0x90>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_DMA_Init+0x90>)
 8001a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	200b      	movs	r0, #11
 8001a30:	f006 f835 	bl	8007a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a34:	200b      	movs	r0, #11
 8001a36:	f006 f84c 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	200c      	movs	r0, #12
 8001a40:	f006 f82d 	bl	8007a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a44:	200c      	movs	r0, #12
 8001a46:	f006 f844 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2109      	movs	r1, #9
 8001a4e:	200d      	movs	r0, #13
 8001a50:	f006 f825 	bl	8007a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a54:	200d      	movs	r0, #13
 8001a56:	f006 f83c 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	210a      	movs	r1, #10
 8001a5e:	200e      	movs	r0, #14
 8001a60:	f006 f81d 	bl	8007a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a64:	200e      	movs	r0, #14
 8001a66:	f006 f834 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	210b      	movs	r1, #11
 8001a6e:	200f      	movs	r0, #15
 8001a70:	f006 f815 	bl	8007a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a74:	200f      	movs	r0, #15
 8001a76:	f006 f82c 	bl	8007ad2 <HAL_NVIC_EnableIRQ>

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000

08001a88 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001a8e:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <MX_FDCAN1_Init+0x88>)
 8001a90:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001ab8:	220a      	movs	r2, #10
 8001aba:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001ac4:	220e      	movs	r2, #14
 8001ac6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001aca:	2202      	movs	r2, #2
 8001acc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001adc:	220c      	movs	r2, #12
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_FDCAN1_Init+0x84>)
 8001afa:	f006 fb37 	bl	800816c <HAL_FDCAN_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001b04:	f003 fc62 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000460 	.word	0x20000460
 8001b10:	40006400 	.word	0x40006400

08001b14 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b1a:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <MX_FDCAN2_Init+0x88>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b44:	220a      	movs	r2, #10
 8001b46:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b50:	220e      	movs	r2, #14
 8001b52:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b54:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b56:	2202      	movs	r2, #2
 8001b58:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 10;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b5c:	220a      	movs	r2, #10
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b68:	220c      	movs	r2, #12
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b6e:	2202      	movs	r2, #2
 8001b70:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b84:	4804      	ldr	r0, [pc, #16]	; (8001b98 <MX_FDCAN2_Init+0x84>)
 8001b86:	f006 faf1 	bl	800816c <HAL_FDCAN_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001b90:	f003 fc1c 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200004c4 	.word	0x200004c4
 8001b9c:	40006800 	.word	0x40006800

08001ba0 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0a0      	sub	sp, #128	; 0x80
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	2254      	movs	r2, #84	; 0x54
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f00c fd37 	bl	800e634 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a59      	ldr	r2, [pc, #356]	; (8001d30 <HAL_FDCAN_MspInit+0x190>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d153      	bne.n	8001c78 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bda:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4618      	mov	r0, r3
 8001be2:	f008 f90b 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001bec:	f003 fbee 	bl	80053cc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_FDCAN_MspInit+0x194>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <HAL_FDCAN_MspInit+0x194>)
 8001bf8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001bfa:	4b4e      	ldr	r3, [pc, #312]	; (8001d34 <HAL_FDCAN_MspInit+0x194>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10b      	bne.n	8001c1a <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c02:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a4c      	ldr	r2, [pc, #304]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4a46      	ldr	r2, [pc, #280]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c36:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c44:	2309      	movs	r3, #9
 8001c46:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f007 f907 	bl	8008e64 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2103      	movs	r1, #3
 8001c5a:	2015      	movs	r0, #21
 8001c5c:	f005 ff1f 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c60:	2015      	movs	r0, #21
 8001c62:	f005 ff36 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2104      	movs	r1, #4
 8001c6a:	2016      	movs	r0, #22
 8001c6c:	f005 ff17 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001c70:	2016      	movs	r0, #22
 8001c72:	f005 ff2e 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001c76:	e056      	b.n	8001d26 <HAL_FDCAN_MspInit+0x186>
  else if(fdcanHandle->Instance==FDCAN2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <HAL_FDCAN_MspInit+0x19c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d151      	bne.n	8001d26 <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8e:	f107 0318 	add.w	r3, r7, #24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f008 f8b2 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8001c9e:	f003 fb95 	bl	80053cc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_FDCAN_MspInit+0x194>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a22      	ldr	r2, [pc, #136]	; (8001d34 <HAL_FDCAN_MspInit+0x194>)
 8001caa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_FDCAN_MspInit+0x194>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d10b      	bne.n	8001ccc <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001cba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_FDCAN_MspInit+0x198>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ce4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001cf6:	2309      	movs	r3, #9
 8001cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480f      	ldr	r0, [pc, #60]	; (8001d40 <HAL_FDCAN_MspInit+0x1a0>)
 8001d02:	f007 f8af 	bl	8008e64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2106      	movs	r1, #6
 8001d0a:	2056      	movs	r0, #86	; 0x56
 8001d0c:	f005 fec7 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001d10:	2056      	movs	r0, #86	; 0x56
 8001d12:	f005 fede 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2107      	movs	r1, #7
 8001d1a:	2057      	movs	r0, #87	; 0x57
 8001d1c:	f005 febf 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001d20:	2057      	movs	r0, #87	; 0x57
 8001d22:	f005 fed6 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3780      	adds	r7, #128	; 0x80
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40006400 	.word	0x40006400
 8001d34:	20000528 	.word	0x20000528
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40006800 	.word	0x40006800
 8001d40:	48000400 	.word	0x48000400

08001d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b64      	ldr	r3, [pc, #400]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	4a63      	ldr	r2, [pc, #396]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d66:	4b61      	ldr	r3, [pc, #388]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d78:	f043 0320 	orr.w	r3, r3, #32
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b5b      	ldr	r3, [pc, #364]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b58      	ldr	r3, [pc, #352]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a57      	ldr	r2, [pc, #348]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b55      	ldr	r3, [pc, #340]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b52      	ldr	r3, [pc, #328]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	4a51      	ldr	r2, [pc, #324]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dae:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <MX_GPIO_Init+0x1a8>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f246 0121 	movw	r1, #24609	; 0x6021
 8001dd8:	4845      	ldr	r0, [pc, #276]	; (8001ef0 <MX_GPIO_Init+0x1ac>)
 8001dda:	f007 f9dd 	bl	8009198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f248 0110 	movw	r1, #32784	; 0x8010
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f007 f9d6 	bl	8009198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f244 4184 	movw	r1, #17540	; 0x4484
 8001df2:	4840      	ldr	r0, [pc, #256]	; (8001ef4 <MX_GPIO_Init+0x1b0>)
 8001df4:	f007 f9d0 	bl	8009198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
 8001df8:	f246 0321 	movw	r3, #24609	; 0x6021
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4837      	ldr	r0, [pc, #220]	; (8001ef0 <MX_GPIO_Init+0x1ac>)
 8001e12:	f007 f827 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001e16:	f248 0310 	movw	r3, #32784	; 0x8010
 8001e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e32:	f007 f817 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e36:	2310      	movs	r3, #16
 8001e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4829      	ldr	r0, [pc, #164]	; (8001ef0 <MX_GPIO_Init+0x1ac>)
 8001e4a:	f007 f80b 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001e4e:	f244 4384 	movw	r3, #17540	; 0x4484
 8001e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <MX_GPIO_Init+0x1b0>)
 8001e68:	f006 fffc 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e84:	f006 ffee 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4817      	ldr	r0, [pc, #92]	; (8001ef8 <MX_GPIO_Init+0x1b4>)
 8001e9c:	f006 ffe2 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ea0:	2360      	movs	r3, #96	; 0x60
 8001ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4810      	ldr	r0, [pc, #64]	; (8001ef4 <MX_GPIO_Init+0x1b0>)
 8001eb4:	f006 ffd6 	bl	8008e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <MX_GPIO_Init+0x1b0>)
 8001ed0:	f006 ffc8 	bl	8008e64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	2017      	movs	r0, #23
 8001eda:	f005 fde0 	bl	8007a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ede:	2017      	movs	r0, #23
 8001ee0:	f005 fdf7 	bl	8007ad2 <HAL_NVIC_EnableIRQ>

}
 8001ee4:	bf00      	nop
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48000400 	.word	0x48000400
 8001ef8:	48000c00 	.word	0x48000c00

08001efc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f00:	f3bf 8f4f 	dsb	sy
}
 8001f04:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <__NVIC_SystemReset+0x24>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f0e:	4904      	ldr	r1, [pc, #16]	; (8001f20 <__NVIC_SystemReset+0x24>)
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_SystemReset+0x28>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f16:	f3bf 8f4f 	dsb	sy
}
 8001f1a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <__NVIC_SystemReset+0x20>
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	05fa0004 	.word	0x05fa0004

08001f28 <ICM20602_writeByte>:
int Gscale = GFS_1000DPS;



void ICM20602_writeByte(uint8_t reg, uint8_t data)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460a      	mov	r2, r1
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	4613      	mov	r3, r2
 8001f36:	71bb      	strb	r3, [r7, #6]
	uint8_t send_data[1];
	uint8_t RxBuffer[1];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f007 f92a 	bl	8009198 <HAL_GPIO_WritePin>

	send_data[0]=reg & 0x7F;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f4e:	f107 0208 	add.w	r2, r7, #8
 8001f52:	f107 010c 	add.w	r1, r7, #12
 8001f56:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	480d      	ldr	r0, [pc, #52]	; (8001f94 <ICM20602_writeByte+0x6c>)
 8001f60:	f008 fa45 	bl	800a3ee <HAL_SPI_TransmitReceive>

	send_data[0]=data;
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	f107 010c 	add.w	r1, r7, #12
 8001f70:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2301      	movs	r3, #1
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <ICM20602_writeByte+0x6c>)
 8001f7a:	f008 fa38 	bl	800a3ee <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2110      	movs	r1, #16
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f007 f907 	bl	8009198 <HAL_GPIO_WritePin>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000b0c 	.word	0x20000b0c

08001f98 <ICM20602_readByte>:

uint8_t ICM20602_readByte(uint8_t reg)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    uint8_t send_data[1];
    uint8_t RxBuffer[1];
    
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001faa:	f007 f8f5 	bl	8009198 <HAL_GPIO_WritePin>

    send_data[0]= reg | 0x80;
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fb8:	f107 0208 	add.w	r2, r7, #8
 8001fbc:	f107 010c 	add.w	r1, r7, #12
 8001fc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	480e      	ldr	r0, [pc, #56]	; (8002004 <ICM20602_readByte+0x6c>)
 8001fca:	f008 fa10 	bl	800a3ee <HAL_SPI_TransmitReceive>

    send_data[0]=0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fd2:	f107 0208 	add.w	r2, r7, #8
 8001fd6:	f107 010c 	add.w	r1, r7, #12
 8001fda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	4808      	ldr	r0, [pc, #32]	; (8002004 <ICM20602_readByte+0x6c>)
 8001fe4:	f008 fa03 	bl	800a3ee <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001fe8:	7a3b      	ldrb	r3, [r7, #8]
 8001fea:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fec:	2201      	movs	r2, #1
 8001fee:	2110      	movs	r1, #16
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff4:	f007 f8d0 	bl	8009198 <HAL_GPIO_WritePin>
    
    return (val);
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000b0c 	.word	0x20000b0c

08002008 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 800200c:	2201      	movs	r2, #1
 800200e:	2120      	movs	r1, #32
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <ICM20602_init+0x40>)
 8002012:	f007 f8c1 	bl	8009198 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
 8002016:	2100      	movs	r1, #0
 8002018:	206b      	movs	r0, #107	; 0x6b
 800201a:	f7ff ff85 	bl	8001f28 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
 800201e:	2107      	movs	r1, #7
 8002020:	2019      	movs	r0, #25
 8002022:	f7ff ff81 	bl	8001f28 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03
 8002026:	2101      	movs	r1, #1
 8002028:	201a      	movs	r0, #26
 800202a:	f7ff ff7d 	bl	8001f28 <ICM20602_writeByte>

	ICM20602_setAccRange(Ascale);
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <ICM20602_init+0x44>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8b6 	bl	80021a4 <ICM20602_setAccRange>
	ICM20602_setGyroRange(Gscale);
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <ICM20602_init+0x48>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f8eb 	bl	8002218 <ICM20602_setGyroRange>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	48000800 	.word	0x48000800
 800204c:	200005a0 	.word	0x200005a0
 8002050:	20000004 	.word	0x20000004

08002054 <ICM20602_getAccXvalue>:

int16_t ICM20602_getAccXvalue()
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_L); // read Accelerometer X_Low  value
 800205a:	203c      	movs	r0, #60	; 0x3c
 800205c:	f7ff ff9c 	bl	8001f98 <ICM20602_readByte>
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_H); // read Accelerometer X_High value
 8002064:	203b      	movs	r0, #59	; 0x3b
 8002066:	f7ff ff97 	bl	8001f98 <ICM20602_readByte>
 800206a:	4603      	mov	r3, r0
 800206c:	71bb      	strb	r3, [r7, #6]
    return((HiByte<<8) | LoByte);
 800206e:	79bb      	ldrb	r3, [r7, #6]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	b21a      	sxth	r2, r3
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	b21b      	sxth	r3, r3
 8002078:	4313      	orrs	r3, r2
 800207a:	b21b      	sxth	r3, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <ICM20602_getAccYvalue>:

int16_t ICM20602_getAccYvalue()
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_L); // read Accelerometer X_Low  value
 800208a:	203e      	movs	r0, #62	; 0x3e
 800208c:	f7ff ff84 	bl	8001f98 <ICM20602_readByte>
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_H); // read Accelerometer X_High value
 8002094:	203d      	movs	r0, #61	; 0x3d
 8002096:	f7ff ff7f 	bl	8001f98 <ICM20602_readByte>
 800209a:	4603      	mov	r3, r0
 800209c:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b21b      	sxth	r3, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <ICM20602_getAccZvalue>:

int16_t ICM20602_getAccZvalue()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_L); // read Accelerometer X_Low  value
 80020ba:	2040      	movs	r0, #64	; 0x40
 80020bc:	f7ff ff6c 	bl	8001f98 <ICM20602_readByte>
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_H); // read Accelerometer X_High value
 80020c4:	203f      	movs	r0, #63	; 0x3f
 80020c6:	f7ff ff67 	bl	8001f98 <ICM20602_readByte>
 80020ca:	4603      	mov	r3, r0
 80020cc:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21b      	sxth	r3, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <ICM20602_getGyrXvalue>:

int16_t ICM20602_getGyrXvalue()
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_XOUT_L); // read Accelerometer X_Low  value
 80020ea:	2044      	movs	r0, #68	; 0x44
 80020ec:	f7ff ff54 	bl	8001f98 <ICM20602_readByte>
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_XOUT_H); // read Accelerometer X_High value
 80020f4:	2043      	movs	r0, #67	; 0x43
 80020f6:	f7ff ff4f 	bl	8001f98 <ICM20602_readByte>
 80020fa:	4603      	mov	r3, r0
 80020fc:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020fe:	79bb      	ldrb	r3, [r7, #6]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21a      	sxth	r2, r3
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	b21b      	sxth	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b21b      	sxth	r3, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <ICM20602_getGyrYvalue>:

int16_t ICM20602_getGyrYvalue()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_YOUT_L); // read Accelerometer X_Low  value
 800211a:	2046      	movs	r0, #70	; 0x46
 800211c:	f7ff ff3c 	bl	8001f98 <ICM20602_readByte>
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_YOUT_H); // read Accelerometer X_High value
 8002124:	2045      	movs	r0, #69	; 0x45
 8002126:	f7ff ff37 	bl	8001f98 <ICM20602_readByte>
 800212a:	4603      	mov	r3, r0
 800212c:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800212e:	79bb      	ldrb	r3, [r7, #6]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	b21a      	sxth	r2, r3
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21b      	sxth	r3, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <ICM20602_getGyrZvalue>:

int16_t ICM20602_getGyrZvalue()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_L); // read Accelerometer X_Low  value
 800214a:	2048      	movs	r0, #72	; 0x48
 800214c:	f7ff ff24 	bl	8001f98 <ICM20602_readByte>
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_H); // read Accelerometer X_High value
 8002154:	2047      	movs	r0, #71	; 0x47
 8002156:	f7ff ff1f 	bl	8001f98 <ICM20602_readByte>
 800215a:	4603      	mov	r3, r0
 800215c:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	b21b      	sxth	r3, r3
 8002168:	4313      	orrs	r3, r2
 800216a:	b21b      	sxth	r3, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <ICM20602_getIMUTemp>:

int16_t ICM20602_getIMUTemp()
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_TEMP_OUT_L); // read Accelerometer X_Low  value
 800217a:	2042      	movs	r0, #66	; 0x42
 800217c:	f7ff ff0c 	bl	8001f98 <ICM20602_readByte>
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_TEMP_OUT_H); // read Accelerometer X_High value
 8002184:	2041      	movs	r0, #65	; 0x41
 8002186:	f7ff ff07 	bl	8001f98 <ICM20602_readByte>
 800218a:	4603      	mov	r3, r0
 800218c:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	b21a      	sxth	r2, r3
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	b21b      	sxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b21b      	sxth	r3, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <ICM20602_setAccRange>:


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    switch(Ascale)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d81e      	bhi.n	80021f0 <ICM20602_setAccRange+0x4c>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <ICM20602_setAccRange+0x14>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021d3 	.word	0x080021d3
 80021c0:	080021dd 	.word	0x080021dd
 80021c4:	080021e7 	.word	0x080021e7
    {
        case AFS_2G:
            aRes = 2.0/32768.0;
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <ICM20602_setAccRange+0x70>)
 80021ca:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80021ce:	601a      	str	r2, [r3, #0]
            break;
 80021d0:	e00e      	b.n	80021f0 <ICM20602_setAccRange+0x4c>
        case AFS_4G:
            aRes = 4.0/32768.0;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <ICM20602_setAccRange+0x70>)
 80021d4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80021d8:	601a      	str	r2, [r3, #0]
            break;
 80021da:	e009      	b.n	80021f0 <ICM20602_setAccRange+0x4c>
        case AFS_8G:
            aRes = 8.0/32768.0;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <ICM20602_setAccRange+0x70>)
 80021de:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80021e2:	601a      	str	r2, [r3, #0]
            break;
 80021e4:	e004      	b.n	80021f0 <ICM20602_setAccRange+0x4c>
        case AFS_16G:
            aRes = 16.0/32768.0;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <ICM20602_setAccRange+0x70>)
 80021e8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80021ec:	601a      	str	r2, [r3, #0]
            break;         
 80021ee:	bf00      	nop
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	201c      	movs	r0, #28
 80021fc:	f7ff fe94 	bl	8001f28 <ICM20602_writeByte>
    
    return aRes;
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <ICM20602_setAccRange+0x70>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	ee07 3a90 	vmov	s15, r3
}
 8002208:	eeb0 0a67 	vmov.f32	s0, s15
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000598 	.word	0x20000598

08002218 <ICM20602_setGyroRange>:

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    switch(Gscale)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b03      	cmp	r3, #3
 8002224:	d81a      	bhi.n	800225c <ICM20602_setGyroRange+0x44>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <ICM20602_setGyroRange+0x14>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	0800223d 	.word	0x0800223d
 8002230:	08002245 	.word	0x08002245
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002255 	.word	0x08002255
    {
        case GFS_250DPS:
            gRes = 250.0/32768.0;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <ICM20602_setGyroRange+0x68>)
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <ICM20602_setGyroRange+0x6c>)
 8002240:	601a      	str	r2, [r3, #0]
            break;
 8002242:	e00b      	b.n	800225c <ICM20602_setGyroRange+0x44>
        case GFS_500DPS:
            gRes = 500.0/32768.0;
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <ICM20602_setGyroRange+0x68>)
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <ICM20602_setGyroRange+0x70>)
 8002248:	601a      	str	r2, [r3, #0]
            break;
 800224a:	e007      	b.n	800225c <ICM20602_setGyroRange+0x44>
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <ICM20602_setGyroRange+0x68>)
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <ICM20602_setGyroRange+0x74>)
 8002250:	601a      	str	r2, [r3, #0]
            break;
 8002252:	e003      	b.n	800225c <ICM20602_setGyroRange+0x44>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <ICM20602_setGyroRange+0x68>)
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <ICM20602_setGyroRange+0x78>)
 8002258:	601a      	str	r2, [r3, #0]
            break;
 800225a:	bf00      	nop
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	201b      	movs	r0, #27
 8002268:	f7ff fe5e 	bl	8001f28 <ICM20602_writeByte>
    
    return gRes;
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <ICM20602_setGyroRange+0x68>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	ee07 3a90 	vmov	s15, r3
}
 8002274:	eeb0 0a67 	vmov.f32	s0, s15
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000059c 	.word	0x2000059c
 8002284:	3bfa0000 	.word	0x3bfa0000
 8002288:	3c7a0000 	.word	0x3c7a0000
 800228c:	3cfa0000 	.word	0x3cfa0000
 8002290:	3d7a0000 	.word	0x3d7a0000

08002294 <ICM20602_read_IMU_data>:
    Gscale = (Gscale & 0x18) >> 3;

    return Gscale;
}

void ICM20602_read_IMU_data() {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002298:	f7ff fedc 	bl	8002054 <ICM20602_getAccXvalue>
 800229c:	4603      	mov	r3, r0
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002498 <ICM20602_read_IMU_data+0x204>
 80022aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ae:	4b7b      	ldr	r3, [pc, #492]	; (800249c <ICM20602_read_IMU_data+0x208>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <ICM20602_read_IMU_data+0x20c>)
 80022ba:	edc3 7a00 	vstr	s15, [r3]
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80022be:	f7ff fee1 	bl	8002084 <ICM20602_getAccYvalue>
 80022c2:	4603      	mov	r3, r0
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022cc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002498 <ICM20602_read_IMU_data+0x204>
 80022d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022d4:	4b71      	ldr	r3, [pc, #452]	; (800249c <ICM20602_read_IMU_data+0x208>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <ICM20602_read_IMU_data+0x20c>)
 80022e0:	edc3 7a01 	vstr	s15, [r3, #4]
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80022e4:	f7ff fee6 	bl	80020b4 <ICM20602_getAccZvalue>
 80022e8:	4603      	mov	r3, r0
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002498 <ICM20602_read_IMU_data+0x204>
 80022f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022fa:	4b68      	ldr	r3, [pc, #416]	; (800249c <ICM20602_read_IMU_data+0x208>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002304:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <ICM20602_read_IMU_data+0x20c>)
 8002306:	edc3 7a02 	vstr	s15, [r3, #8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800230a:	f7ff feeb 	bl	80020e4 <ICM20602_getGyrXvalue>
 800230e:	4603      	mov	r3, r0
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002318:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <ICM20602_read_IMU_data+0x210>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	4b61      	ldr	r3, [pc, #388]	; (80024a8 <ICM20602_read_IMU_data+0x214>)
 8002324:	edc3 7a00 	vstr	s15, [r3]
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002328:	f7ff fef4 	bl	8002114 <ICM20602_getGyrYvalue>
 800232c:	4603      	mov	r3, r0
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002336:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <ICM20602_read_IMU_data+0x210>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <ICM20602_read_IMU_data+0x214>)
 8002342:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002346:	f7ff fefd 	bl	8002144 <ICM20602_getGyrZvalue>
 800234a:	4603      	mov	r3, r0
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002354:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <ICM20602_read_IMU_data+0x210>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <ICM20602_read_IMU_data+0x214>)
 8002360:	edc3 7a02 	vstr	s15, [r3, #8]

    ICM20602_medianFilter();
 8002364:	f000 f926 	bl	80025b4 <ICM20602_medianFilter>

    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002368:	f7ff ff04 	bl	8002174 <ICM20602_getIMUTemp>
 800236c:	4603      	mov	r3, r0
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002376:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80024ac <ICM20602_read_IMU_data+0x218>
 800237a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800237e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <ICM20602_read_IMU_data+0x21c>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
    ICM20602_IMU_compensate();
 800238c:	f000 fd40 	bl	8002e10 <ICM20602_IMU_compensate>

    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt);//とりあえず変えておく
 8002390:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <ICM20602_read_IMU_data+0x220>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <ICM20602_read_IMU_data+0x224>)
 8002398:	ed93 7a00 	vldr	s14, [r3]
 800239c:	4b47      	ldr	r3, [pc, #284]	; (80024bc <ICM20602_read_IMU_data+0x228>)
 800239e:	edd3 6a00 	vldr	s13, [r3]
 80023a2:	eeb0 1a66 	vmov.f32	s2, s13
 80023a6:	eef0 0a47 	vmov.f32	s1, s14
 80023aa:	eeb0 0a67 	vmov.f32	s0, s15
 80023ae:	f000 f88d 	bl	80024cc <ICM20602_integral>
 80023b2:	eeb0 7a40 	vmov.f32	s14, s0
 80023b6:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <ICM20602_read_IMU_data+0x22c>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <ICM20602_read_IMU_data+0x22c>)
 80023c2:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt);
 80023c6:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <ICM20602_read_IMU_data+0x220>)
 80023c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80023cc:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <ICM20602_read_IMU_data+0x224>)
 80023ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80023d2:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <ICM20602_read_IMU_data+0x228>)
 80023d4:	edd3 6a00 	vldr	s13, [r3]
 80023d8:	eeb0 1a66 	vmov.f32	s2, s13
 80023dc:	eef0 0a47 	vmov.f32	s1, s14
 80023e0:	eeb0 0a67 	vmov.f32	s0, s15
 80023e4:	f000 f872 	bl	80024cc <ICM20602_integral>
 80023e8:	eeb0 7a40 	vmov.f32	s14, s0
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <ICM20602_read_IMU_data+0x230>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f6:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <ICM20602_read_IMU_data+0x230>)
 80023f8:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt);
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <ICM20602_read_IMU_data+0x220>)
 80023fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <ICM20602_read_IMU_data+0x224>)
 8002404:	ed93 7a02 	vldr	s14, [r3, #8]
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <ICM20602_read_IMU_data+0x228>)
 800240a:	edd3 6a00 	vldr	s13, [r3]
 800240e:	eeb0 1a66 	vmov.f32	s2, s13
 8002412:	eef0 0a47 	vmov.f32	s1, s14
 8002416:	eeb0 0a67 	vmov.f32	s0, s15
 800241a:	f000 f857 	bl	80024cc <ICM20602_integral>
 800241e:	eeb0 7a40 	vmov.f32	s14, s0
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <ICM20602_read_IMU_data+0x234>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242c:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <ICM20602_read_IMU_data+0x234>)
 800242e:	edc3 7a00 	vstr	s15, [r3]

    pitchAngle = ICM20602_normAngle(pitchAngle);
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <ICM20602_read_IMU_data+0x22c>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eeb0 0a67 	vmov.f32	s0, s15
 800243c:	f000 f880 	bl	8002540 <ICM20602_normAngle>
 8002440:	eef0 7a40 	vmov.f32	s15, s0
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <ICM20602_read_IMU_data+0x22c>)
 8002446:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = ICM20602_normAngle(rollAngle);
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <ICM20602_read_IMU_data+0x230>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	f000 f874 	bl	8002540 <ICM20602_normAngle>
 8002458:	eef0 7a40 	vmov.f32	s15, s0
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <ICM20602_read_IMU_data+0x230>)
 800245e:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = ICM20602_normAngle(yawAngle);
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <ICM20602_read_IMU_data+0x234>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	eeb0 0a67 	vmov.f32	s0, s15
 800246c:	f000 f868 	bl	8002540 <ICM20602_normAngle>
 8002470:	eef0 7a40 	vmov.f32	s15, s0
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <ICM20602_read_IMU_data+0x234>)
 8002476:	edc3 7a00 	vstr	s15, [r3]

    gyro_prv[0] = gyro_comp[0];
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <ICM20602_read_IMU_data+0x220>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <ICM20602_read_IMU_data+0x224>)
 8002480:	6013      	str	r3, [r2, #0]
    gyro_prv[1] = gyro_comp[1];
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <ICM20602_read_IMU_data+0x220>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <ICM20602_read_IMU_data+0x224>)
 8002488:	6053      	str	r3, [r2, #4]
    gyro_prv[2] = gyro_comp[2];
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <ICM20602_read_IMU_data+0x220>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <ICM20602_read_IMU_data+0x224>)
 8002490:	6093      	str	r3, [r2, #8]
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	411ce80a 	.word	0x411ce80a
 800249c:	20000598 	.word	0x20000598
 80024a0:	200005e0 	.word	0x200005e0
 80024a4:	2000059c 	.word	0x2000059c
 80024a8:	200005ec 	.word	0x200005ec
 80024ac:	43a36666 	.word	0x43a36666
 80024b0:	20000610 	.word	0x20000610
 80024b4:	20000604 	.word	0x20000604
 80024b8:	2000052c 	.word	0x2000052c
 80024bc:	20000000 	.word	0x20000000
 80024c0:	200005d0 	.word	0x200005d0
 80024c4:	200005d4 	.word	0x200005d4
 80024c8:	200005d8 	.word	0x200005d8

080024cc <ICM20602_integral>:



float ICM20602_integral(float val, float val_prv, float dt)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80024d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80024da:	ed87 1a01 	vstr	s2, [r7, #4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024de:	ed97 7a03 	vldr	s14, [r7, #12]
 80024e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80024f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80024fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <ICM20602_clearAngle>:

void ICM20602_clearAngle(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
    pitchAngle = 0.0f;
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <ICM20602_clearAngle+0x28>)
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
    rollAngle  = 0.0f;
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <ICM20602_clearAngle+0x2c>)
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
    yawAngle   = 0.0f;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <ICM20602_clearAngle+0x30>)
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200005d0 	.word	0x200005d0
 8002538:	200005d4 	.word	0x200005d4
 800253c:	200005d8 	.word	0x200005d8

08002540 <ICM20602_normAngle>:
    rollAngle  = roll;
    yawAngle   = yaw;
}

float ICM20602_normAngle(float deg)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	ed87 0a01 	vstr	s0, [r7, #4]
    while (deg < -180.0f) deg += 360.0f;
 800254a:	e007      	b.n	800255c <ICM20602_normAngle+0x1c>
 800254c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002550:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025a8 <ICM20602_normAngle+0x68>
 8002554:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002558:	edc7 7a01 	vstr	s15, [r7, #4]
 800255c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002560:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80025ac <ICM20602_normAngle+0x6c>
 8002564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d4ee      	bmi.n	800254c <ICM20602_normAngle+0xc>
    while (deg >= 180.0f) deg -= 360.0f;
 800256e:	e007      	b.n	8002580 <ICM20602_normAngle+0x40>
 8002570:	edd7 7a01 	vldr	s15, [r7, #4]
 8002574:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025a8 <ICM20602_normAngle+0x68>
 8002578:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800257c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002580:	edd7 7a01 	vldr	s15, [r7, #4]
 8002584:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80025b0 <ICM20602_normAngle+0x70>
 8002588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	daee      	bge.n	8002570 <ICM20602_normAngle+0x30>

    return deg;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	ee07 3a90 	vmov	s15, r3
}
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	43b40000 	.word	0x43b40000
 80025ac:	c3340000 	.word	0xc3340000
 80025b0:	43340000 	.word	0x43340000

080025b4 <ICM20602_medianFilter>:
    return yawAngle;
}

// filter length : 3-only
void ICM20602_medianFilter(void)
{
 80025b4:	b490      	push	{r4, r7}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {
 80025ba:	2300      	movs	r3, #0
 80025bc:	71fb      	strb	r3, [r7, #7]
 80025be:	e123      	b.n	8002808 <ICM20602_medianFilter+0x254>

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 80025c0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025c8:	4895      	ldr	r0, [pc, #596]	; (8002820 <ICM20602_medianFilter+0x26c>)
 80025ca:	460b      	mov	r3, r1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	440b      	add	r3, r1
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4403      	add	r3, r0
 80025d4:	3304      	adds	r3, #4
 80025d6:	6819      	ldr	r1, [r3, #0]
 80025d8:	4891      	ldr	r0, [pc, #580]	; (8002820 <ICM20602_medianFilter+0x26c>)
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4403      	add	r3, r0
 80025e4:	3308      	adds	r3, #8
 80025e6:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 80025e8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025ec:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025f0:	488b      	ldr	r0, [pc, #556]	; (8002820 <ICM20602_medianFilter+0x26c>)
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4403      	add	r3, r0
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	4888      	ldr	r0, [pc, #544]	; (8002820 <ICM20602_medianFilter+0x26c>)
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4403      	add	r3, r0
 800260a:	3304      	adds	r3, #4
 800260c:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][0] = gyro[i];
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002616:	4983      	ldr	r1, [pc, #524]	; (8002824 <ICM20602_medianFilter+0x270>)
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	4880      	ldr	r0, [pc, #512]	; (8002820 <ICM20602_medianFilter+0x26c>)
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4403      	add	r3, r0
 800262a:	6019      	str	r1, [r3, #0]

    	acc_mdat[i][2]  = acc_mdat[i][1];
 800262c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002630:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002634:	487c      	ldr	r0, [pc, #496]	; (8002828 <ICM20602_medianFilter+0x274>)
 8002636:	460b      	mov	r3, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	440b      	add	r3, r1
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4403      	add	r3, r0
 8002640:	3304      	adds	r3, #4
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	4878      	ldr	r0, [pc, #480]	; (8002828 <ICM20602_medianFilter+0x274>)
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4403      	add	r3, r0
 8002650:	3308      	adds	r3, #8
 8002652:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8002654:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002658:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800265c:	4872      	ldr	r0, [pc, #456]	; (8002828 <ICM20602_medianFilter+0x274>)
 800265e:	460b      	mov	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4403      	add	r3, r0
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	486f      	ldr	r0, [pc, #444]	; (8002828 <ICM20602_medianFilter+0x274>)
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4403      	add	r3, r0
 8002676:	3304      	adds	r3, #4
 8002678:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][0]  = acc[i];
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002682:	496a      	ldr	r1, [pc, #424]	; (800282c <ICM20602_medianFilter+0x278>)
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	4867      	ldr	r0, [pc, #412]	; (8002828 <ICM20602_medianFilter+0x274>)
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4403      	add	r3, r0
 8002696:	6019      	str	r1, [r3, #0]

    	for (j = 0; j < 3; j ++){
 8002698:	2300      	movs	r3, #0
 800269a:	71bb      	strb	r3, [r7, #6]
 800269c:	e029      	b.n	80026f2 <ICM20602_medianFilter+0x13e>
    		gyro_tmp[j] = gyro_mdat[i][j];
 800269e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026a2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026a6:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026aa:	4c5d      	ldr	r4, [pc, #372]	; (8002820 <ICM20602_medianFilter+0x26c>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	4403      	add	r3, r0
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4423      	add	r3, r4
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	485d      	ldr	r0, [pc, #372]	; (8002830 <ICM20602_medianFilter+0x27c>)
 80026bc:	008b      	lsls	r3, r1, #2
 80026be:	4403      	add	r3, r0
 80026c0:	601a      	str	r2, [r3, #0]
    		acc_tmp[j]  = acc_mdat[i][j];
 80026c2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026c6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026ca:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026ce:	4c56      	ldr	r4, [pc, #344]	; (8002828 <ICM20602_medianFilter+0x274>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	4403      	add	r3, r0
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4423      	add	r3, r4
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4855      	ldr	r0, [pc, #340]	; (8002834 <ICM20602_medianFilter+0x280>)
 80026e0:	008b      	lsls	r3, r1, #2
 80026e2:	4403      	add	r3, r0
 80026e4:	601a      	str	r2, [r3, #0]
    	for (j = 0; j < 3; j ++){
 80026e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	71bb      	strb	r3, [r7, #6]
 80026f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	ddd1      	ble.n	800269e <ICM20602_medianFilter+0xea>
    	}

    	a = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	717b      	strb	r3, [r7, #5]
    	b = 2;
 80026fe:	2302      	movs	r3, #2
 8002700:	713b      	strb	r3, [r7, #4]

    	for (j = 2; j >= 0; j--) {
 8002702:	2302      	movs	r3, #2
 8002704:	71bb      	strb	r3, [r7, #6]
 8002706:	e065      	b.n	80027d4 <ICM20602_medianFilter+0x220>
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8002708:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800270c:	4a48      	ldr	r2, [pc, #288]	; (8002830 <ICM20602_medianFilter+0x27c>)
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	ed93 7a00 	vldr	s14, [r3]
 8002716:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800271a:	4a45      	ldr	r2, [pc, #276]	; (8002830 <ICM20602_medianFilter+0x27c>)
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272c:	dd19      	ble.n	8002762 <ICM20602_medianFilter+0x1ae>
    			tmp         = gyro_tmp[a];
 800272e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002732:	4a3f      	ldr	r2, [pc, #252]	; (8002830 <ICM20602_medianFilter+0x27c>)
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	603b      	str	r3, [r7, #0]
    			gyro_tmp[a] = gyro_tmp[b];
 800273c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8002740:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002744:	493a      	ldr	r1, [pc, #232]	; (8002830 <ICM20602_medianFilter+0x27c>)
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	440a      	add	r2, r1
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	4938      	ldr	r1, [pc, #224]	; (8002830 <ICM20602_medianFilter+0x27c>)
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	601a      	str	r2, [r3, #0]
    			gyro_tmp[b] = tmp;
 8002754:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002758:	4a35      	ldr	r2, [pc, #212]	; (8002830 <ICM20602_medianFilter+0x27c>)
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	601a      	str	r2, [r3, #0]
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8002762:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002766:	4a33      	ldr	r2, [pc, #204]	; (8002834 <ICM20602_medianFilter+0x280>)
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002774:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <ICM20602_medianFilter+0x280>)
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	dd19      	ble.n	80027bc <ICM20602_medianFilter+0x208>
				tmp         = acc_tmp[a];
 8002788:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800278c:	4a29      	ldr	r2, [pc, #164]	; (8002834 <ICM20602_medianFilter+0x280>)
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	603b      	str	r3, [r7, #0]
				acc_tmp[a]  = acc_tmp[b];
 8002796:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800279a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800279e:	4925      	ldr	r1, [pc, #148]	; (8002834 <ICM20602_medianFilter+0x280>)
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	440a      	add	r2, r1
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	4923      	ldr	r1, [pc, #140]	; (8002834 <ICM20602_medianFilter+0x280>)
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	601a      	str	r2, [r3, #0]
				acc_tmp[b]  = tmp;
 80027ae:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <ICM20602_medianFilter+0x280>)
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	601a      	str	r2, [r3, #0]
			}
    		a = j-1;
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	3b01      	subs	r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	717b      	strb	r3, [r7, #5]
    		b = j;
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	713b      	strb	r3, [r7, #4]
    	for (j = 2; j >= 0; j--) {
 80027c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	71bb      	strb	r3, [r7, #6]
 80027d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da95      	bge.n	8002708 <ICM20602_medianFilter+0x154>
    	}
    	gyro[i] = gyro_tmp[1];
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4a13      	ldr	r2, [pc, #76]	; (8002830 <ICM20602_medianFilter+0x27c>)
 80027e2:	6852      	ldr	r2, [r2, #4]
 80027e4:	490f      	ldr	r1, [pc, #60]	; (8002824 <ICM20602_medianFilter+0x270>)
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	601a      	str	r2, [r3, #0]
    	acc[i]  = acc_tmp[1];
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4a10      	ldr	r2, [pc, #64]	; (8002834 <ICM20602_medianFilter+0x280>)
 80027f2:	6852      	ldr	r2, [r2, #4]
 80027f4:	490d      	ldr	r1, [pc, #52]	; (800282c <ICM20602_medianFilter+0x278>)
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i ++) {
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	71fb      	strb	r3, [r7, #7]
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b02      	cmp	r3, #2
 800280e:	f77f aed7 	ble.w	80025c0 <ICM20602_medianFilter+0xc>
    }
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bc90      	pop	{r4, r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000538 	.word	0x20000538
 8002824:	200005ec 	.word	0x200005ec
 8002828:	2000055c 	.word	0x2000055c
 800282c:	200005e0 	.word	0x200005e0
 8002830:	20000580 	.word	0x20000580
 8002834:	2000058c 	.word	0x2000058c

08002838 <ICM20602_IMU_calibration2>:
    	gyro_off[j] = gyro_sum[j] / cal_len;
    }
}

void ICM20602_IMU_calibration2(void)
{
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8002840:	af00      	add	r7, sp, #0
	int i,j;
    double cal_len = 0.0f;
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
    double acc_sum[3]={0};
 800284e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	611a      	str	r2, [r3, #16]
 800285e:	615a      	str	r2, [r3, #20]
    double gyro_sum[3]={0};
 8002860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
 8002870:	615a      	str	r2, [r3, #20]

    double acc_ave[3][10] = {{0.0}};
 8002872:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800287a:	4618      	mov	r0, r3
 800287c:	23f0      	movs	r3, #240	; 0xf0
 800287e:	461a      	mov	r2, r3
 8002880:	2100      	movs	r1, #0
 8002882:	f00b fed7 	bl	800e634 <memset>
    double gyro_ave[3][10] = {{0.0}};
 8002886:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800288a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800288e:	4618      	mov	r0, r3
 8002890:	23f0      	movs	r3, #240	; 0xf0
 8002892:	461a      	mov	r2, r3
 8002894:	2100      	movs	r1, #0
 8002896:	f00b fecd 	bl	800e634 <memset>

    printf("put the IMU still!\n");
 800289a:	4886      	ldr	r0, [pc, #536]	; (8002ab4 <ICM20602_IMU_calibration2+0x27c>)
 800289c:	f00b fd34 	bl	800e308 <puts>
    HAL_Delay(1000);
 80028a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a4:	f003 fcc4 	bl	8006230 <HAL_Delay>

    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80028a8:	e183      	b.n	8002bb2 <ICM20602_IMU_calibration2+0x37a>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
		|| cal_len < 500.0
		){

    	printf("cal_len=%f\r\n",cal_len);
 80028aa:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80028ae:	4882      	ldr	r0, [pc, #520]	; (8002ab8 <ICM20602_IMU_calibration2+0x280>)
 80028b0:	f00b fcc4 	bl	800e23c <iprintf>
    	for(j = 0; j < 3; j++){
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80028ba:	e15f      	b.n	8002b7c <ICM20602_IMU_calibration2+0x344>
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028bc:	f7ff fbca 	bl	8002054 <ICM20602_getAccXvalue>
 80028c0:	4603      	mov	r3, r0
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ca:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002abc <ICM20602_IMU_calibration2+0x284>
 80028ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d2:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <ICM20602_IMU_calibration2+0x288>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028dc:	4b79      	ldr	r3, [pc, #484]	; (8002ac4 <ICM20602_IMU_calibration2+0x28c>)
 80028de:	edc3 7a00 	vstr	s15, [r3]
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028e2:	f7ff fbcf 	bl	8002084 <ICM20602_getAccYvalue>
 80028e6:	4603      	mov	r3, r0
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002abc <ICM20602_IMU_calibration2+0x284>
 80028f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028f8:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <ICM20602_IMU_calibration2+0x288>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	4b70      	ldr	r3, [pc, #448]	; (8002ac4 <ICM20602_IMU_calibration2+0x28c>)
 8002904:	edc3 7a01 	vstr	s15, [r3, #4]
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002908:	f7ff fbd4 	bl	80020b4 <ICM20602_getAccZvalue>
 800290c:	4603      	mov	r3, r0
 800290e:	ee07 3a90 	vmov	s15, r3
 8002912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002916:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002abc <ICM20602_IMU_calibration2+0x284>
 800291a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800291e:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <ICM20602_IMU_calibration2+0x288>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002928:	4b66      	ldr	r3, [pc, #408]	; (8002ac4 <ICM20602_IMU_calibration2+0x28c>)
 800292a:	edc3 7a02 	vstr	s15, [r3, #8]
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800292e:	f7ff fbd9 	bl	80020e4 <ICM20602_getGyrXvalue>
 8002932:	4603      	mov	r3, r0
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800293c:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <ICM20602_IMU_calibration2+0x290>)
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <ICM20602_IMU_calibration2+0x294>)
 8002948:	edc3 7a00 	vstr	s15, [r3]
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800294c:	f7ff fbe2 	bl	8002114 <ICM20602_getGyrYvalue>
 8002950:	4603      	mov	r3, r0
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800295a:	4b5b      	ldr	r3, [pc, #364]	; (8002ac8 <ICM20602_IMU_calibration2+0x290>)
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002964:	4b59      	ldr	r3, [pc, #356]	; (8002acc <ICM20602_IMU_calibration2+0x294>)
 8002966:	edc3 7a01 	vstr	s15, [r3, #4]
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800296a:	f7ff fbeb 	bl	8002144 <ICM20602_getGyrZvalue>
 800296e:	4603      	mov	r3, r0
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <ICM20602_IMU_calibration2+0x290>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002982:	4b52      	ldr	r3, [pc, #328]	; (8002acc <ICM20602_IMU_calibration2+0x294>)
 8002984:	edc3 7a02 	vstr	s15, [r3, #8]

    		acc_sum[j]  += acc[j];
 8002988:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002992:	f107 0220 	add.w	r2, r7, #32
 8002996:	4413      	add	r3, r2
 8002998:	3b28      	subs	r3, #40	; 0x28
 800299a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800299e:	4a49      	ldr	r2, [pc, #292]	; (8002ac4 <ICM20602_IMU_calibration2+0x28c>)
 80029a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fdf4 	bl	8000598 <__aeabi_f2d>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4620      	mov	r0, r4
 80029b6:	4629      	mov	r1, r5
 80029b8:	f7fd fc90 	bl	80002dc <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029ce:	f107 0220 	add.w	r2, r7, #32
 80029d2:	4413      	add	r3, r2
 80029d4:	3b28      	subs	r3, #40	; 0x28
 80029d6:	e9c3 0100 	strd	r0, r1, [r3]
    		gyro_sum[j] += gyro[j];
 80029da:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029e4:	f107 0220 	add.w	r2, r7, #32
 80029e8:	4413      	add	r3, r2
 80029ea:	3b40      	subs	r3, #64	; 0x40
 80029ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029f0:	4a36      	ldr	r2, [pc, #216]	; (8002acc <ICM20602_IMU_calibration2+0x294>)
 80029f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fdcb 	bl	8000598 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fd fc67 	bl	80002dc <__adddf3>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a20:	f107 0220 	add.w	r2, r7, #32
 8002a24:	4413      	add	r3, r2
 8002a26:	3b40      	subs	r3, #64	; 0x40
 8002a28:	e9c3 0100 	strd	r0, r1, [r3]

    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a2c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a36:	f107 0220 	add.w	r2, r7, #32
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b28      	subs	r3, #40	; 0x28
 8002a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a42:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a46:	f7fd ff29 	bl	800089c <__aeabi_ddiv>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4614      	mov	r4, r2
 8002a50:	461d      	mov	r5, r3
 8002a52:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a56:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8002a5a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	440b      	add	r3, r1
 8002a68:	e9c3 4500 	strd	r4, r5, [r3]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a6c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a76:	f107 0220 	add.w	r2, r7, #32
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b40      	subs	r3, #64	; 0x40
 8002a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a82:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a86:	f7fd ff09 	bl	800089c <__aeabi_ddiv>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4614      	mov	r4, r2
 8002a90:	461d      	mov	r5, r3
 8002a92:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a96:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 8002a9a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	440b      	add	r3, r1
 8002aa8:	e9c3 4500 	strd	r4, r5, [r3]

    		for(i = 9; i > 0; i --){
 8002aac:	2309      	movs	r3, #9
 8002aae:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002ab2:	e05a      	b.n	8002b6a <ICM20602_IMU_calibration2+0x332>
 8002ab4:	08011508 	.word	0x08011508
 8002ab8:	0801151c 	.word	0x0801151c
 8002abc:	411ce80a 	.word	0x411ce80a
 8002ac0:	20000598 	.word	0x20000598
 8002ac4:	200005e0 	.word	0x200005e0
 8002ac8:	2000059c 	.word	0x2000059c
 8002acc:	200005ec 	.word	0x200005ec
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002ad0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002ad4:	1e59      	subs	r1, r3, #1
 8002ad6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ada:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002ade:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	440b      	add	r3, r1
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4403      	add	r3, r0
 8002af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002af8:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 8002afc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b00:	461a      	mov	r2, r3
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	441a      	add	r2, r3
 8002b06:	0053      	lsls	r3, r2, #1
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4423      	add	r3, r4
 8002b14:	e9c3 0100 	strd	r0, r1, [r3]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002b18:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b1c:	1e59      	subs	r1, r3, #1
 8002b1e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b22:	f5a3 7008 	sub.w	r0, r3, #544	; 0x220
 8002b26:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	440b      	add	r3, r1
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4403      	add	r3, r0
 8002b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b3c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b40:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 8002b44:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b48:	461a      	mov	r2, r3
 8002b4a:	0092      	lsls	r2, r2, #2
 8002b4c:	441a      	add	r2, r3
 8002b4e:	0053      	lsls	r3, r2, #1
 8002b50:	461a      	mov	r2, r3
 8002b52:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4423      	add	r3, r4
 8002b5c:	e9c3 0100 	strd	r0, r1, [r3]
    		for(i = 9; i > 0; i --){
 8002b60:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b64:	3b01      	subs	r3, #1
 8002b66:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002b6a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	dcae      	bgt.n	8002ad0 <ICM20602_IMU_calibration2+0x298>
    	for(j = 0; j < 3; j++){
 8002b72:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b76:	3301      	adds	r3, #1
 8002b78:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002b7c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	f77f ae9b 	ble.w	80028bc <ICM20602_IMU_calibration2+0x84>
    		}
    	}
    	cal_len ++;
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	4b9d      	ldr	r3, [pc, #628]	; (8002e00 <ICM20602_IMU_calibration2+0x5c8>)
 8002b8c:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002b90:	f7fd fba4 	bl	80002dc <__adddf3>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230

    	if(cal_len>5000){break;}
 8002b9c:	a394      	add	r3, pc, #592	; (adr r3, 8002df0 <ICM20602_IMU_calibration2+0x5b8>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002ba6:	f7fd ffdf 	bl	8000b68 <__aeabi_dcmpgt>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 80c4 	bne.w	8002d3a <ICM20602_IMU_calibration2+0x502>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002bb2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bba:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002bbe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fb85 	bl	80002d8 <__aeabi_dsub>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4690      	mov	r8, r2
 8002bd4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
		|| cal_len < 500.0
 8002bd8:	a387      	add	r3, pc, #540	; (adr r3, 8002df8 <ICM20602_IMU_calibration2+0x5c0>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	4640      	mov	r0, r8
 8002be0:	4649      	mov	r1, r9
 8002be2:	f7fd ffc1 	bl	8000b68 <__aeabi_dcmpgt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f ae5e 	bne.w	80028aa <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002bee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bf6:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002bfa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c02:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002c06:	f7fd fb67 	bl	80002d8 <__aeabi_dsub>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4692      	mov	sl, r2
 8002c10:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002c14:	a378      	add	r3, pc, #480	; (adr r3, 8002df8 <ICM20602_IMU_calibration2+0x5c0>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	4650      	mov	r0, sl
 8002c1c:	4659      	mov	r1, fp
 8002c1e:	f7fd ffa3 	bl	8000b68 <__aeabi_dcmpgt>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f ae40 	bne.w	80028aa <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 8002c2a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c32:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002c36:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c3e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c42:	f7fd fb49 	bl	80002d8 <__aeabi_dsub>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	61ba      	str	r2, [r7, #24]
 8002c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	a369      	add	r3, pc, #420	; (adr r3, 8002df8 <ICM20602_IMU_calibration2+0x5c0>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c5c:	f7fd ff84 	bl	8000b68 <__aeabi_dcmpgt>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f ae21 	bne.w	80028aa <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 8002c68:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c6c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c70:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c74:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c78:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fb2a 	bl	80002d8 <__aeabi_dsub>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	613a      	str	r2, [r7, #16]
 8002c8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	a359      	add	r3, pc, #356	; (adr r3, 8002df8 <ICM20602_IMU_calibration2+0x5c0>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c9a:	f7fd ff65 	bl	8000b68 <__aeabi_dcmpgt>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f ae02 	bne.w	80028aa <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 8002ca6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002caa:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cae:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002cb2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cb6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cba:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002cbe:	f7fd fb0b 	bl	80002d8 <__aeabi_dsub>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	60ba      	str	r2, [r7, #8]
 8002cc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	a34a      	add	r3, pc, #296	; (adr r3, 8002df8 <ICM20602_IMU_calibration2+0x5c0>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cd8:	f7fd ff46 	bl	8000b68 <__aeabi_dcmpgt>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f ade3 	bne.w	80028aa <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002ce4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ce8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cec:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002cf0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cf4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cf8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002cfc:	f7fd faec 	bl	80002d8 <__aeabi_dsub>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	603a      	str	r2, [r7, #0]
 8002d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	a33a      	add	r3, pc, #232	; (adr r3, 8002df8 <ICM20602_IMU_calibration2+0x5c0>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d16:	f7fd ff27 	bl	8000b68 <__aeabi_dcmpgt>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f adc4 	bne.w	80028aa <ICM20602_IMU_calibration2+0x72>
		|| cal_len < 500.0
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <ICM20602_IMU_calibration2+0x5cc>)
 8002d28:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d2c:	f7fd fefe 	bl	8000b2c <__aeabi_dcmplt>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f47f adb9 	bne.w	80028aa <ICM20602_IMU_calibration2+0x72>
 8002d38:	e000      	b.n	8002d3c <ICM20602_IMU_calibration2+0x504>
    	if(cal_len>5000){break;}
 8002d3a:	bf00      	nop
    }

    if(cal_len==500){NVIC_SystemReset();}
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <ICM20602_IMU_calibration2+0x5cc>)
 8002d42:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d46:	f7fd fee7 	bl	8000b18 <__aeabi_dcmpeq>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <ICM20602_IMU_calibration2+0x51c>
 8002d50:	f7ff f8d4 	bl	8001efc <__NVIC_SystemReset>

    for(j = 0; j < 3; j++){
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002d5a:	e03c      	b.n	8002dd6 <ICM20602_IMU_calibration2+0x59e>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d5c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d66:	f107 0220 	add.w	r2, r7, #32
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b28      	subs	r3, #40	; 0x28
 8002d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d72:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002d76:	f7fd fd91 	bl	800089c <__aeabi_ddiv>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd ff59 	bl	8000c38 <__aeabi_d2f>
 8002d86:	4602      	mov	r2, r0
 8002d88:	491f      	ldr	r1, [pc, #124]	; (8002e08 <ICM20602_IMU_calibration2+0x5d0>)
 8002d8a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	601a      	str	r2, [r3, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d94:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d9e:	f107 0220 	add.w	r2, r7, #32
 8002da2:	4413      	add	r3, r2
 8002da4:	3b40      	subs	r3, #64	; 0x40
 8002da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002daa:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002dae:	f7fd fd75 	bl	800089c <__aeabi_ddiv>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd ff3d 	bl	8000c38 <__aeabi_d2f>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4912      	ldr	r1, [pc, #72]	; (8002e0c <ICM20602_IMU_calibration2+0x5d4>)
 8002dc2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 3; j++){
 8002dcc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002dd6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	ddbe      	ble.n	8002d5c <ICM20602_IMU_calibration2+0x524>
    }
}
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
 8002de2:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8002de6:	46bd      	mov	sp, r7
 8002de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dec:	f3af 8000 	nop.w
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40b38800 	.word	0x40b38800
 8002df8:	eb1c432d 	.word	0xeb1c432d
 8002dfc:	3f2a36e2 	.word	0x3f2a36e2
 8002e00:	3ff00000 	.word	0x3ff00000
 8002e04:	407f4000 	.word	0x407f4000
 8002e08:	20000614 	.word	0x20000614
 8002e0c:	20000620 	.word	0x20000620

08002e10 <ICM20602_IMU_compensate>:

void ICM20602_IMU_compensate(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
    int k;
    for(k=0;k<3;k++){
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	e02a      	b.n	8002e72 <ICM20602_IMU_compensate+0x62>
        acc_comp[k] = acc[k] - acc_off[k];
 8002e1c:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <ICM20602_IMU_compensate+0x78>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <ICM20602_IMU_compensate+0x7c>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <ICM20602_IMU_compensate+0x80>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edc3 7a00 	vstr	s15, [r3]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002e44:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <ICM20602_IMU_compensate+0x84>)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	ed93 7a00 	vldr	s14, [r3]
 8002e50:	4a11      	ldr	r2, [pc, #68]	; (8002e98 <ICM20602_IMU_compensate+0x88>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <ICM20602_IMU_compensate+0x8c>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	edc3 7a00 	vstr	s15, [r3]
    for(k=0;k<3;k++){
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	ddd1      	ble.n	8002e1c <ICM20602_IMU_compensate+0xc>
    }

}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	200005e0 	.word	0x200005e0
 8002e8c:	20000614 	.word	0x20000614
 8002e90:	200005f8 	.word	0x200005f8
 8002e94:	200005ec 	.word	0x200005ec
 8002e98:	20000620 	.word	0x20000620
 8002e9c:	20000604 	.word	0x20000604

08002ea0 <__NVIC_SystemReset>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002ea4:	f3bf 8f4f 	dsb	sy
}
 8002ea8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <__NVIC_SystemReset+0x24>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002eb2:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <__NVIC_SystemReset+0x24>)
 8002eb4:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <__NVIC_SystemReset+0x28>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eba:	f3bf 8f4f 	dsb	sy
}
 8002ebe:	bf00      	nop
    __NOP();
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <__NVIC_SystemReset+0x20>
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	05fa0004 	.word	0x05fa0004

08002ecc <_write>:
void __io_putchar(uint8_t ch)
{
	HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
}*/
int _write(int file, char *ptr, int len)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, 100); // 2ms
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	2364      	movs	r3, #100	; 0x64
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	4803      	ldr	r0, [pc, #12]	; (8002ef0 <_write+0x24>)
 8002ee2:	f009 f815 	bl	800bf10 <HAL_UART_Transmit>
	return len;
 8002ee6:	687b      	ldr	r3, [r7, #4]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000c08 	.word	0x20000c08

08002ef4 <HAL_GetTick>:
void maintask_state_stop();
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2);
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	return uwTick;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_GetTick+0x14>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	20000e7c 	.word	0x20000e7c

08002f0c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f12:	f003 f928 	bl	8006166 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f16:	f000 f959 	bl	80031cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f1a:	f7fe ff13 	bl	8001d44 <MX_GPIO_Init>
	MX_DMA_Init();
 8002f1e:	f7fe fd69 	bl	80019f4 <MX_DMA_Init>
	MX_FDCAN1_Init();
 8002f22:	f7fe fdb1 	bl	8001a88 <MX_FDCAN1_Init>
	MX_LPUART1_UART_Init();
 8002f26:	f002 fe67 	bl	8005bf8 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8002f2a:	f002 feb3 	bl	8005c94 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002f2e:	f002 ff01 	bl	8005d34 <MX_USART3_UART_Init>
	MX_SPI1_Init();
 8002f32:	f002 fb81 	bl	8005638 <MX_SPI1_Init>
	MX_TIM5_Init();
 8002f36:	f002 fd51 	bl	80059dc <MX_TIM5_Init>
	MX_TIM7_Init();
 8002f3a:	f002 fda9 	bl	8005a90 <MX_TIM7_Init>
	MX_ADC5_Init();
 8002f3e:	f7fe fab5 	bl	80014ac <MX_ADC5_Init>
	MX_ADC3_Init();
 8002f42:	f7fe fa3b 	bl	80013bc <MX_ADC3_Init>
	MX_FDCAN2_Init();
 8002f46:	f7fe fde5 	bl	8001b14 <MX_FDCAN2_Init>
	MX_ADC1_Init();
 8002f4a:	f7fe f9bf 	bl	80012cc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	check_motor1 = 0;
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	; (800314c <main+0x240>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
	check_motor2 = 0;
 8002f54:	4b7e      	ldr	r3, [pc, #504]	; (8003150 <main+0x244>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
	check_motor3 = 0;
 8002f5a:	4b7e      	ldr	r3, [pc, #504]	; (8003154 <main+0x248>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
	check_motor4 = 0;
 8002f60:	4b7d      	ldr	r3, [pc, #500]	; (8003158 <main+0x24c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
	check_power = 0;
 8002f66:	4b7d      	ldr	r3, [pc, #500]	; (800315c <main+0x250>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
	check_FC = 0;
 8002f6c:	4b7c      	ldr	r3, [pc, #496]	; (8003160 <main+0x254>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
	kick_state = 0;
 8002f72:	4b7c      	ldr	r3, [pc, #496]	; (8003164 <main+0x258>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002f78:	2104      	movs	r1, #4
 8002f7a:	487b      	ldr	r0, [pc, #492]	; (8003168 <main+0x25c>)
 8002f7c:	f007 fed6 	bl	800ad2c <HAL_TIM_PWM_Start>
	for (int i = 0; i < 3; i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e006      	b.n	8002f94 <main+0x88>
	{
		actuator_buzzer(20, 20);
 8002f86:	2114      	movs	r1, #20
 8002f88:	2014      	movs	r0, #20
 8002f8a:	f7fe f981 	bl	8001290 <actuator_buzzer>
	for (int i = 0; i < 3; i++)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3301      	adds	r3, #1
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	ddf5      	ble.n	8002f86 <main+0x7a>
	}
	setbuf(stdout, NULL);
 8002f9a:	4b74      	ldr	r3, [pc, #464]	; (800316c <main+0x260>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f00b f9b8 	bl	800e318 <setbuf>
	printf("start\r\n");
 8002fa8:	4871      	ldr	r0, [pc, #452]	; (8003170 <main+0x264>)
 8002faa:	f00b f9ad 	bl	800e308 <puts>
	can1_init_ibis(&hfdcan1);
 8002fae:	4871      	ldr	r0, [pc, #452]	; (8003174 <main+0x268>)
 8002fb0:	f7fe fc60 	bl	8001874 <can1_init_ibis>
	can2_init_ibis(&hfdcan2);
 8002fb4:	4870      	ldr	r0, [pc, #448]	; (8003178 <main+0x26c>)
 8002fb6:	f7fe fcbd 	bl	8001934 <can2_init_ibis>

	HAL_FDCAN_Start(&hfdcan1);
 8002fba:	486e      	ldr	r0, [pc, #440]	; (8003174 <main+0x268>)
 8002fbc:	f005 fa8a 	bl	80084d4 <HAL_FDCAN_Start>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	486b      	ldr	r0, [pc, #428]	; (8003174 <main+0x268>)
 8002fc6:	f005 fbdd 	bl	8008784 <HAL_FDCAN_ActivateNotification>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <main+0xc8>
	{
		Error_Handler();
 8002fd0:	f002 f9fc 	bl	80053cc <Error_Handler>
	}

	HAL_FDCAN_Start(&hfdcan2);
 8002fd4:	4868      	ldr	r0, [pc, #416]	; (8003178 <main+0x26c>)
 8002fd6:	f005 fa7d 	bl	80084d4 <HAL_FDCAN_Start>
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4866      	ldr	r0, [pc, #408]	; (8003178 <main+0x26c>)
 8002fe0:	f005 fbd0 	bl	8008784 <HAL_FDCAN_ActivateNotification>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <main+0xe2>
	{
		Error_Handler();
 8002fea:	f002 f9ef 	bl	80053cc <Error_Handler>
	}

	HAL_UART_Init(&hlpuart1);
 8002fee:	4863      	ldr	r0, [pc, #396]	; (800317c <main+0x270>)
 8002ff0:	f008 ff3e 	bl	800be70 <HAL_UART_Init>
	xprintf_init(&hlpuart1);
 8002ff4:	4861      	ldr	r0, [pc, #388]	; (800317c <main+0x270>)
 8002ff6:	f003 f861 	bl	80060bc <xprintf_init>

	HAL_UART_Init(&huart2);
 8002ffa:	4861      	ldr	r0, [pc, #388]	; (8003180 <main+0x274>)
 8002ffc:	f008 ff38 	bl	800be70 <HAL_UART_Init>
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)Rxbuf_from_Ether, Rxbufsize_from_Ether);
 8003000:	220e      	movs	r2, #14
 8003002:	4960      	ldr	r1, [pc, #384]	; (8003184 <main+0x278>)
 8003004:	485e      	ldr	r0, [pc, #376]	; (8003180 <main+0x274>)
 8003006:	f009 f819 	bl	800c03c <HAL_UART_Receive_DMA>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense, 1);
 800300a:	2201      	movs	r2, #1
 800300c:	495e      	ldr	r1, [pc, #376]	; (8003188 <main+0x27c>)
 800300e:	485f      	ldr	r0, [pc, #380]	; (800318c <main+0x280>)
 8003010:	f003 fd14 	bl	8006a3c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense, 1);
 8003014:	2201      	movs	r2, #1
 8003016:	495e      	ldr	r1, [pc, #376]	; (8003190 <main+0x284>)
 8003018:	485e      	ldr	r0, [pc, #376]	; (8003194 <main+0x288>)
 800301a:	f003 fd0f 	bl	8006a3c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata, 1);
 800301e:	2201      	movs	r2, #1
 8003020:	495d      	ldr	r1, [pc, #372]	; (8003198 <main+0x28c>)
 8003022:	485e      	ldr	r0, [pc, #376]	; (800319c <main+0x290>)
 8003024:	f003 fd0a 	bl	8006a3c <HAL_ADC_Start_DMA>
	// if(HAL_GetTick()>1000){
	//	Error_Handler();
	// }
	// }

	actuator_power_ONOFF(0);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe f8fb 	bl	8001224 <actuator_power_ONOFF>
	HAL_Delay(20);
 800302e:	2014      	movs	r0, #20
 8003030:	f003 f8fe 	bl	8006230 <HAL_Delay>

	actuator_motor1(0.0, 0.0);
 8003034:	eddf 0a5a 	vldr	s1, [pc, #360]	; 80031a0 <main+0x294>
 8003038:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80031a0 <main+0x294>
 800303c:	f7fd ffca 	bl	8000fd4 <actuator_motor1>
	actuator_motor2(0.0, 0.0);
 8003040:	eddf 0a57 	vldr	s1, [pc, #348]	; 80031a0 <main+0x294>
 8003044:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80031a0 <main+0x294>
 8003048:	f7fd fff4 	bl	8001034 <actuator_motor2>
	actuator_motor3(0.0, 0.0);
 800304c:	eddf 0a54 	vldr	s1, [pc, #336]	; 80031a0 <main+0x294>
 8003050:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80031a0 <main+0x294>
 8003054:	f7fe f81e 	bl	8001094 <actuator_motor3>
	actuator_motor4(0.0, 0.0);
 8003058:	eddf 0a51 	vldr	s1, [pc, #324]	; 80031a0 <main+0x294>
 800305c:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80031a0 <main+0x294>
 8003060:	f7fe f848 	bl	80010f4 <actuator_motor4>
	actuator_motor5(0.0, 0.0);
 8003064:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80031a0 <main+0x294>
 8003068:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80031a0 <main+0x294>
 800306c:	f7fe f872 	bl	8001154 <actuator_motor5>

	actuator_kicker(1, 1);
 8003070:	2101      	movs	r1, #1
 8003072:	2001      	movs	r0, #1
 8003074:	f7fe f8bf 	bl	80011f6 <actuator_kicker>
	actuator_kicker_voltage(250.0);
 8003078:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80031a4 <main+0x298>
 800307c:	f7fe f89a 	bl	80011b4 <actuator_kicker_voltage>
	actuator_power_param(1, 15.0); // min voltage
 8003080:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003084:	2001      	movs	r0, #1
 8003086:	f7fe f8e0 	bl	800124a <actuator_power_param>
	actuator_power_param(2, 35.0); // max voltage
 800308a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80031a8 <main+0x29c>
 800308e:	2002      	movs	r0, #2
 8003090:	f7fe f8db 	bl	800124a <actuator_power_param>
	actuator_power_param(3, 50.0); // max current
 8003094:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80031ac <main+0x2a0>
 8003098:	2003      	movs	r0, #3
 800309a:	f7fe f8d6 	bl	800124a <actuator_power_param>
	actuator_power_param(4, 90.0); // max temp(fet)
 800309e:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80031b0 <main+0x2a4>
 80030a2:	2004      	movs	r0, #4
 80030a4:	f7fe f8d1 	bl	800124a <actuator_power_param>
	actuator_power_param(5, 90.0); // max temp(solenoid)
 80030a8:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80031b0 <main+0x2a4>
 80030ac:	2005      	movs	r0, #5
 80030ae:	f7fe f8cc 	bl	800124a <actuator_power_param>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80030b2:	2201      	movs	r2, #1
 80030b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030b8:	483e      	ldr	r0, [pc, #248]	; (80031b4 <main+0x2a8>)
 80030ba:	f006 f86d 	bl	8009198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80030be:	2201      	movs	r2, #1
 80030c0:	2101      	movs	r1, #1
 80030c2:	483c      	ldr	r0, [pc, #240]	; (80031b4 <main+0x2a8>)
 80030c4:	f006 f868 	bl	8009198 <HAL_GPIO_WritePin>
	ICM20602_init();
 80030c8:	f7fe ff9e 	bl	8002008 <ICM20602_init>
	ICM20602_IMU_calibration2();
 80030cc:	f7ff fbb4 	bl	8002838 <ICM20602_IMU_calibration2>
	ICM20602_clearAngle();
 80030d0:	f7ff fa1c 	bl	800250c <ICM20602_clearAngle>

	// uint8_t senddata_calib[8];
	// can1_send(0x340, senddata_calib);
	// can2_send(0x340, senddata_calib);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030da:	4836      	ldr	r0, [pc, #216]	; (80031b4 <main+0x2a8>)
 80030dc:	f006 f85c 	bl	8009198 <HAL_GPIO_WritePin>
	actuator_power_ONOFF(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7fe f89f 	bl	8001224 <actuator_power_ONOFF>

	for (int i = 0; i < 3; i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	e006      	b.n	80030fa <main+0x1ee>
	{
		actuator_buzzer(40, 40);
 80030ec:	2128      	movs	r1, #40	; 0x28
 80030ee:	2028      	movs	r0, #40	; 0x28
 80030f0:	f7fe f8ce 	bl	8001290 <actuator_buzzer>
	for (int i = 0; i < 3; i++)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	ddf5      	ble.n	80030ec <main+0x1e0>
	}

	data_from_ether[Rxbufsize_from_Ether - 3] = 0;
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <main+0x2ac>)
 8003102:	2200      	movs	r2, #0
 8003104:	72da      	strb	r2, [r3, #11]
	HAL_Delay(500);
 8003106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800310a:	f003 f891 	bl	8006230 <HAL_Delay>
	omni_odom[0] = 0;
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <main+0x2b0>)
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
	omni_odom[1] = 0;
 8003116:	4b29      	ldr	r3, [pc, #164]	; (80031bc <main+0x2b0>)
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	e00c      	b.n	800313e <main+0x232>
	{
		pre_motor_enc_angle[i] = motor_enc_angle[i];
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <main+0x2b4>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4925      	ldr	r1, [pc, #148]	; (80031c4 <main+0x2b8>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3301      	adds	r3, #1
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b03      	cmp	r3, #3
 8003142:	ddef      	ble.n	8003124 <main+0x218>
	}
	HAL_TIM_Base_Start_IT(&htim7);
 8003144:	4820      	ldr	r0, [pc, #128]	; (80031c8 <main+0x2bc>)
 8003146:	f007 fd21 	bl	800ab8c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800314a:	e7fe      	b.n	800314a <main+0x23e>
 800314c:	20000ac9 	.word	0x20000ac9
 8003150:	20000aca 	.word	0x20000aca
 8003154:	20000acb 	.word	0x20000acb
 8003158:	20000acc 	.word	0x20000acc
 800315c:	20000acd 	.word	0x20000acd
 8003160:	20000ace 	.word	0x20000ace
 8003164:	2000062c 	.word	0x2000062c
 8003168:	20000b70 	.word	0x20000b70
 800316c:	2000006c 	.word	0x2000006c
 8003170:	0801152c 	.word	0x0801152c
 8003174:	20000460 	.word	0x20000460
 8003178:	200004c4 	.word	0x200004c4
 800317c:	20000c08 	.word	0x20000c08
 8003180:	20000c98 	.word	0x20000c98
 8003184:	200005a4 	.word	0x200005a4
 8003188:	20000654 	.word	0x20000654
 800318c:	200001f8 	.word	0x200001f8
 8003190:	20000650 	.word	0x20000650
 8003194:	20000264 	.word	0x20000264
 8003198:	20000658 	.word	0x20000658
 800319c:	200002d0 	.word	0x200002d0
 80031a0:	00000000 	.word	0x00000000
 80031a4:	437a0000 	.word	0x437a0000
 80031a8:	420c0000 	.word	0x420c0000
 80031ac:	42480000 	.word	0x42480000
 80031b0:	42b40000 	.word	0x42b40000
 80031b4:	48000800 	.word	0x48000800
 80031b8:	20000634 	.word	0x20000634
 80031bc:	20000778 	.word	0x20000778
 80031c0:	200006b8 	.word	0x200006b8
 80031c4:	200006cc 	.word	0x200006cc
 80031c8:	20000bbc 	.word	0x20000bbc

080031cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b094      	sub	sp, #80	; 0x50
 80031d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031d2:	f107 0318 	add.w	r3, r7, #24
 80031d6:	2238      	movs	r2, #56	; 0x38
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f00b fa2a 	bl	800e634 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f006 f81c 	bl	800922c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031fc:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031fe:	2302      	movs	r3, #2
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003202:	2303      	movs	r3, #3
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003206:	2302      	movs	r3, #2
 8003208:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800320a:	2355      	movs	r3, #85	; 0x55
 800320c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800320e:	2302      	movs	r3, #2
 8003210:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003212:	2302      	movs	r3, #2
 8003214:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003216:	2302      	movs	r3, #2
 8003218:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800321a:	f107 0318 	add.w	r3, r7, #24
 800321e:	4618      	mov	r0, r3
 8003220:	f006 f8b8 	bl	8009394 <HAL_RCC_OscConfig>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <SystemClock_Config+0x62>
	{
		Error_Handler();
 800322a:	f002 f8cf 	bl	80053cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800322e:	230f      	movs	r3, #15
 8003230:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003232:	2303      	movs	r3, #3
 8003234:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	2104      	movs	r1, #4
 8003246:	4618      	mov	r0, r3
 8003248:	f006 fbbc 	bl	80099c4 <HAL_RCC_ClockConfig>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8003252:	f002 f8bb 	bl	80053cc <Error_Handler>
	}
}
 8003256:	bf00      	nop
 8003258:	3750      	adds	r7, #80	; 0x50
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af02      	add	r7, sp, #8
 8003266:	6078      	str	r0, [r7, #4]
	ICM20602_read_IMU_data();
 8003268:	f7ff f814 	bl	8002294 <ICM20602_read_IMU_data>
	sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 800326c:	2120      	movs	r1, #32
 800326e:	48ca      	ldr	r0, [pc, #808]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003270:	f005 ff7a 	bl	8009168 <HAL_GPIO_ReadPin>
 8003274:	4603      	mov	r3, r0
 8003276:	461c      	mov	r4, r3
 8003278:	2140      	movs	r1, #64	; 0x40
 800327a:	48c7      	ldr	r0, [pc, #796]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800327c:	f005 ff74 	bl	8009168 <HAL_GPIO_ReadPin>
 8003280:	4603      	mov	r3, r0
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	4423      	add	r3, r4
 8003288:	b2dc      	uxtb	r4, r3
 800328a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800328e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003292:	f005 ff69 	bl	8009168 <HAL_GPIO_ReadPin>
 8003296:	4603      	mov	r3, r0
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	4423      	add	r3, r4
 800329e:	b2dc      	uxtb	r4, r3
 80032a0:	2104      	movs	r1, #4
 80032a2:	48be      	ldr	r0, [pc, #760]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80032a4:	f005 ff60 	bl	8009168 <HAL_GPIO_ReadPin>
 80032a8:	4603      	mov	r3, r0
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4423      	add	r3, r4
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f1c3 030f 	rsb	r3, r3, #15
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	4bb9      	ldr	r3, [pc, #740]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80032ba:	701a      	strb	r2, [r3, #0]

	switch (sw_mode)
 80032bc:	4bb8      	ldr	r3, [pc, #736]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	f200 82db 	bhi.w	800387c <HAL_TIM_PeriodElapsedCallback+0x61c>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	080032e9 	.word	0x080032e9
 80032d0:	08003461 	.word	0x08003461
 80032d4:	0800349f 	.word	0x0800349f
 80032d8:	0800350b 	.word	0x0800350b
 80032dc:	08003699 	.word	0x08003699
 80032e0:	080036f5 	.word	0x080036f5
 80032e4:	080037b9 	.word	0x080037b9
	{
	case 0: // main without debug
		omni_odom[0] = 0;
 80032e8:	4bae      	ldr	r3, [pc, #696]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
		omni_odom[1] = 0;
 80032f0:	4bac      	ldr	r3, [pc, #688]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
		if (ether_connect == 1)
 80032f8:	4bab      	ldr	r3, [pc, #684]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d157      	bne.n	80033b0 <HAL_TIM_PeriodElapsedCallback+0x150>
		{
			yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
 8003300:	4baa      	ldr	r3, [pc, #680]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f947 	bl	8000598 <__aeabi_f2d>
 800330a:	a39b      	add	r3, pc, #620	; (adr r3, 8003578 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd f99a 	bl	8000648 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4614      	mov	r4, r2
 800331a:	461d      	mov	r5, r3
 800331c:	4ba4      	ldr	r3, [pc, #656]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd f939 	bl	8000598 <__aeabi_f2d>
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	4ba2      	ldr	r3, [pc, #648]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800332c:	f7fd f98c 	bl	8000648 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	a391      	add	r3, pc, #580	; (adr r3, 8003580 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f7fd faad 	bl	800089c <__aeabi_ddiv>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	a38f      	add	r3, pc, #572	; (adr r3, 8003588 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f7fd f97a 	bl	8000648 <__aeabi_dmul>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4620      	mov	r0, r4
 800335a:	4629      	mov	r1, r5
 800335c:	f7fc ffbe 	bl	80002dc <__adddf3>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	f7fd fc66 	bl	8000c38 <__aeabi_d2f>
 800336c:	4603      	mov	r3, r0
 800336e:	4a8f      	ldr	r2, [pc, #572]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003370:	6013      	str	r3, [r2, #0]
			yaw_angle_rad = yawAngle * M_PI / 180;
 8003372:	4b8e      	ldr	r3, [pc, #568]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f90e 	bl	8000598 <__aeabi_f2d>
 800337c:	a384      	add	r3, pc, #528	; (adr r3, 8003590 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f7fd f961 	bl	8000648 <__aeabi_dmul>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003394:	f7fd fa82 	bl	800089c <__aeabi_ddiv>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	f7fd fc4a 	bl	8000c38 <__aeabi_d2f>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4a84      	ldr	r2, [pc, #528]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80033a8:	6013      	str	r3, [r2, #0]
			maintask_run();
 80033aa:	f000 fef9 	bl	80041a0 <maintask_run>
		{
			yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
			yaw_angle_rad = yawAngle * M_PI / 180;
			maintask_state_stop();
		}
		break;
 80033ae:	e268      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>
			yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
 80033b0:	4b7e      	ldr	r3, [pc, #504]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd f8ef 	bl	8000598 <__aeabi_f2d>
 80033ba:	a36f      	add	r3, pc, #444	; (adr r3, 8003578 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f7fd f942 	bl	8000648 <__aeabi_dmul>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4614      	mov	r4, r2
 80033ca:	461d      	mov	r5, r3
 80033cc:	4b78      	ldr	r3, [pc, #480]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f8e1 	bl	8000598 <__aeabi_f2d>
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80033dc:	f7fd f934 	bl	8000648 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	a365      	add	r3, pc, #404	; (adr r3, 8003580 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd fa55 	bl	800089c <__aeabi_ddiv>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	a363      	add	r3, pc, #396	; (adr r3, 8003588 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f7fd f922 	bl	8000648 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4620      	mov	r0, r4
 800340a:	4629      	mov	r1, r5
 800340c:	f7fc ff66 	bl	80002dc <__adddf3>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f7fd fc0e 	bl	8000c38 <__aeabi_d2f>
 800341c:	4603      	mov	r3, r0
 800341e:	4a63      	ldr	r2, [pc, #396]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003420:	6013      	str	r3, [r2, #0]
			yaw_angle_rad = yawAngle * M_PI / 180;
 8003422:	4b62      	ldr	r3, [pc, #392]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fd f8b6 	bl	8000598 <__aeabi_f2d>
 800342c:	a358      	add	r3, pc, #352	; (adr r3, 8003590 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003432:	f7fd f909 	bl	8000648 <__aeabi_dmul>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	4b5c      	ldr	r3, [pc, #368]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003444:	f7fd fa2a 	bl	800089c <__aeabi_ddiv>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f7fd fbf2 	bl	8000c38 <__aeabi_d2f>
 8003454:	4603      	mov	r3, r0
 8003456:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003458:	6013      	str	r3, [r2, #0]
			maintask_state_stop();
 800345a:	f001 fc5f 	bl	8004d1c <maintask_state_stop>
		break;
 800345e:	e210      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>

	case 1: // main debug
		// yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
		yaw_angle_rad = yawAngle * M_PI / 180;
 8003460:	4b52      	ldr	r3, [pc, #328]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f897 	bl	8000598 <__aeabi_f2d>
 800346a:	a349      	add	r3, pc, #292	; (adr r3, 8003590 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f8ea 	bl	8000648 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003482:	f7fd fa0b 	bl	800089c <__aeabi_ddiv>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	f7fd fbd3 	bl	8000c38 <__aeabi_d2f>
 8003492:	4603      	mov	r3, r0
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003496:	6013      	str	r3, [r2, #0]
		maintask_run();
 8003498:	f000 fe82 	bl	80041a0 <maintask_run>
		break;
 800349c:	e1f1      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>

	case 2: // calibration motor
		if (decode_SW(SWdata[0]) & 0b00010000)
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fde0 	bl	8005068 <decode_SW>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_TIM_PeriodElapsedCallback+0x27c>
		{
			uint8_t senddata_calib[8];
			can1_send(0x310, senddata_calib); // calibration
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	f44f 7044 	mov.w	r0, #784	; 0x310
 80034bc:	f7fe fa04 	bl	80018c8 <can1_send>
			can2_send(0x310, senddata_calib); // calibration
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	f44f 7044 	mov.w	r0, #784	; 0x310
 80034ca:	f7fe fa5d 	bl	8001988 <can2_send>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80034ce:	2201      	movs	r2, #1
 80034d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034d4:	483a      	ldr	r0, [pc, #232]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80034d6:	f005 fe5f 	bl	8009198 <HAL_GPIO_WritePin>
		{
			omni_move(0.0, 0.0, 0.0, 0.0);
			actuator_motor5(0.0, 0.0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
		}
		break;
 80034da:	e1d2      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>
			omni_move(0.0, 0.0, 0.0, 0.0);
 80034dc:	eddf 1a39 	vldr	s3, [pc, #228]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 80034e0:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 80034e4:	eddf 0a37 	vldr	s1, [pc, #220]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 80034e8:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 80034ec:	f001 ffd0 	bl	8005490 <omni_move>
			actuator_motor5(0.0, 0.0);
 80034f0:	eddf 0a34 	vldr	s1, [pc, #208]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 80034f4:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 80034f8:	f7fd fe2c 	bl	8001154 <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003502:	482f      	ldr	r0, [pc, #188]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003504:	f005 fe48 	bl	8009198 <HAL_GPIO_WritePin>
		break;
 8003508:	e1bb      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>

	case 3: // motor test
		if (decode_SW(SWdata[0]) & 0b00000001)
 800350a:	4b2c      	ldr	r3, [pc, #176]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fdaa 	bl	8005068 <decode_SW>
 8003514:	4603      	mov	r3, r0
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <HAL_TIM_PeriodElapsedCallback+0x2e0>
		{
			omni_move(1.0, 0.0, 0.0, 1.0); // fwd
 800351e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003522:	ed9f 1a28 	vldr	s2, [pc, #160]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 8003526:	eddf 0a27 	vldr	s1, [pc, #156]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 800352a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800352e:	f001 ffaf 	bl	8005490 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003532:	2201      	movs	r2, #1
 8003534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003538:	4821      	ldr	r0, [pc, #132]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800353a:	f005 fe2d 	bl	8009198 <HAL_GPIO_WritePin>
 800353e:	e0a4      	b.n	800368a <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else if (decode_SW(SWdata[0]) & 0b00000010)
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f001 fd8f 	bl	8005068 <decode_SW>
 800354a:	4603      	mov	r3, r0
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d039      	beq.n	80035c8 <HAL_TIM_PeriodElapsedCallback+0x368>
		{
			omni_move(-1.0, 0.0, 0.0, 1.0); // back
 8003554:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003558:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 800355c:	eddf 0a19 	vldr	s1, [pc, #100]	; 80035c4 <HAL_TIM_PeriodElapsedCallback+0x364>
 8003560:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003564:	f001 ff94 	bl	8005490 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003568:	2201      	movs	r2, #1
 800356a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800356e:	4814      	ldr	r0, [pc, #80]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003570:	f005 fe12 	bl	8009198 <HAL_GPIO_WritePin>
 8003574:	e089      	b.n	800368a <HAL_TIM_PeriodElapsedCallback+0x42a>
 8003576:	bf00      	nop
 8003578:	d916872b 	.word	0xd916872b
 800357c:	3feff7ce 	.word	0x3feff7ce
 8003580:	60000000 	.word	0x60000000
 8003584:	400921fb 	.word	0x400921fb
 8003588:	d2f1a9fc 	.word	0xd2f1a9fc
 800358c:	3f50624d 	.word	0x3f50624d
 8003590:	54442d18 	.word	0x54442d18
 8003594:	400921fb 	.word	0x400921fb
 8003598:	48000400 	.word	0x48000400
 800359c:	48000c00 	.word	0x48000c00
 80035a0:	200005c6 	.word	0x200005c6
 80035a4:	20000778 	.word	0x20000778
 80035a8:	200005c1 	.word	0x200005c1
 80035ac:	200005d8 	.word	0x200005d8
 80035b0:	2000075c 	.word	0x2000075c
 80035b4:	40668000 	.word	0x40668000
 80035b8:	200005dc 	.word	0x200005dc
 80035bc:	20000658 	.word	0x20000658
 80035c0:	48000800 	.word	0x48000800
 80035c4:	00000000 	.word	0x00000000
		}
		else if (decode_SW(SWdata[0]) & 0b00000100)
 80035c8:	4bb8      	ldr	r3, [pc, #736]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f001 fd4b 	bl	8005068 <decode_SW>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_TIM_PeriodElapsedCallback+0x39e>
		{
			omni_move(0.0, -1.0, 0.0, 1.0); // left
 80035dc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80035e0:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80035e4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80035e8:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80035ec:	f001 ff50 	bl	8005490 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80035f0:	2201      	movs	r2, #1
 80035f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035f6:	48af      	ldr	r0, [pc, #700]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80035f8:	f005 fdce 	bl	8009198 <HAL_GPIO_WritePin>
 80035fc:	e045      	b.n	800368a <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else if (decode_SW(SWdata[0]) & 0b00001000)
 80035fe:	4bab      	ldr	r3, [pc, #684]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fd30 	bl	8005068 <decode_SW>
 8003608:	4603      	mov	r3, r0
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_TIM_PeriodElapsedCallback+0x3d4>
		{
			omni_move(0.0, 1.0, 0.0, 1.0); // right
 8003612:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003616:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800361a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800361e:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003622:	f001 ff35 	bl	8005490 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003626:	2201      	movs	r2, #1
 8003628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800362c:	48a1      	ldr	r0, [pc, #644]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 800362e:	f005 fdb3 	bl	8009198 <HAL_GPIO_WritePin>
 8003632:	e02a      	b.n	800368a <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else if (decode_SW(SWdata[0]) & 0b00010000)
 8003634:	4b9d      	ldr	r3, [pc, #628]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fd15 	bl	8005068 <decode_SW>
 800363e:	4603      	mov	r3, r0
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <HAL_TIM_PeriodElapsedCallback+0x40a>
		{
			omni_move(0.0, 0.0, 7.0, 1.0); // spin
 8003648:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800364c:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003650:	eddf 0a97 	vldr	s1, [pc, #604]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003654:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003658:	f001 ff1a 	bl	8005490 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800365c:	2201      	movs	r2, #1
 800365e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003662:	4894      	ldr	r0, [pc, #592]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003664:	f005 fd98 	bl	8009198 <HAL_GPIO_WritePin>
 8003668:	e00f      	b.n	800368a <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else
		{
			omni_move(0.0, 0.0, 0.0, 0.0);
 800366a:	eddf 1a91 	vldr	s3, [pc, #580]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800366e:	ed9f 1a90 	vldr	s2, [pc, #576]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003672:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003676:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800367a:	f001 ff09 	bl	8005490 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003684:	488b      	ldr	r0, [pc, #556]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003686:	f005 fd87 	bl	8009198 <HAL_GPIO_WritePin>
		}
		actuator_motor5(0.0, 0.0);
 800368a:	eddf 0a89 	vldr	s1, [pc, #548]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800368e:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003692:	f7fd fd5f 	bl	8001154 <actuator_motor5>
		break;
 8003696:	e0f4      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>

	case 4: // drible test
		if (decode_SW(SWdata[0]) & 0b00010000)
 8003698:	4b84      	ldr	r3, [pc, #528]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fce3 	bl	8005068 <decode_SW>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00c      	beq.n	80036c6 <HAL_TIM_PeriodElapsedCallback+0x466>
		{
			actuator_motor5(0.5, 1.0);
 80036ac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80036b0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80036b4:	f7fd fd4e 	bl	8001154 <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80036b8:	2201      	movs	r2, #1
 80036ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036be:	487d      	ldr	r0, [pc, #500]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80036c0:	f005 fd6a 	bl	8009198 <HAL_GPIO_WritePin>
 80036c4:	e00b      	b.n	80036de <HAL_TIM_PeriodElapsedCallback+0x47e>
		}
		else
		{
			actuator_motor5(0.0, 0.0);
 80036c6:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036ca:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036ce:	f7fd fd41 	bl	8001154 <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80036d2:	2200      	movs	r2, #0
 80036d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036d8:	4876      	ldr	r0, [pc, #472]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80036da:	f005 fd5d 	bl	8009198 <HAL_GPIO_WritePin>
		}

		omni_move(0.0, 0.0, 0.0, 0.0);
 80036de:	eddf 1a74 	vldr	s3, [pc, #464]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036e2:	ed9f 1a73 	vldr	s2, [pc, #460]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036e6:	eddf 0a72 	vldr	s1, [pc, #456]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036ea:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036ee:	f001 fecf 	bl	8005490 <omni_move>

		break;
 80036f2:	e0c6      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>

	case 5:
		if (decode_SW(SWdata[0]) & 0b00010000)
 80036f4:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fcb5 	bl	8005068 <decode_SW>
 80036fe:	4603      	mov	r3, r0
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d02e      	beq.n	8003766 <HAL_TIM_PeriodElapsedCallback+0x506>
		{
			actuator_motor5(0.5, 1.0);
 8003708:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800370c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003710:	f7fd fd20 	bl	8001154 <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003714:	2201      	movs	r2, #1
 8003716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800371a:	4866      	ldr	r0, [pc, #408]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 800371c:	f005 fd3c 	bl	8009198 <HAL_GPIO_WritePin>
			if (ball[0] == 1)
 8003720:	4b65      	ldr	r3, [pc, #404]	; (80038b8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d10a      	bne.n	800373e <HAL_TIM_PeriodElapsedCallback+0x4de>
			{
				if (kick_state == 0)
 8003728:	4b64      	ldr	r3, [pc, #400]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <HAL_TIM_PeriodElapsedCallback+0x4de>
				{
					actuator_kicker(3, 100);
 8003730:	2164      	movs	r1, #100	; 0x64
 8003732:	2003      	movs	r0, #3
 8003734:	f7fd fd5f 	bl	80011f6 <actuator_kicker>
					kick_state = 1;
 8003738:	4b60      	ldr	r3, [pc, #384]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
				}
			}
			if (kick_state == 1)
 800373e:	4b5f      	ldr	r3, [pc, #380]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d12d      	bne.n	80037a2 <HAL_TIM_PeriodElapsedCallback+0x542>
			{
				kick_time++;
 8003746:	4b5e      	ldr	r3, [pc, #376]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	4a5c      	ldr	r2, [pc, #368]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800374e:	6013      	str	r3, [r2, #0]
				if (kick_time > 100)
 8003750:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b64      	cmp	r3, #100	; 0x64
 8003756:	dd24      	ble.n	80037a2 <HAL_TIM_PeriodElapsedCallback+0x542>
				{
					kick_state = 0;
 8003758:	4b58      	ldr	r3, [pc, #352]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
					kick_time = 0;
 800375e:	4b58      	ldr	r3, [pc, #352]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e01d      	b.n	80037a2 <HAL_TIM_PeriodElapsedCallback+0x542>
				}
			}
		}
		else
		{
			actuator_motor5(0.0, 0.0);
 8003766:	eddf 0a52 	vldr	s1, [pc, #328]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800376a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800376e:	f7fd fcf1 	bl	8001154 <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003778:	484e      	ldr	r0, [pc, #312]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 800377a:	f005 fd0d 	bl	8009198 <HAL_GPIO_WritePin>
			actuator_kicker(1, 1);
 800377e:	2101      	movs	r1, #1
 8003780:	2001      	movs	r0, #1
 8003782:	f7fd fd38 	bl	80011f6 <actuator_kicker>
			actuator_kicker(2, 0);
 8003786:	2100      	movs	r1, #0
 8003788:	2002      	movs	r0, #2
 800378a:	f7fd fd34 	bl	80011f6 <actuator_kicker>
			actuator_kicker_voltage(250.0);
 800378e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80038c4 <HAL_TIM_PeriodElapsedCallback+0x664>
 8003792:	f7fd fd0f 	bl	80011b4 <actuator_kicker_voltage>
			kick_state = 0;
 8003796:	4b49      	ldr	r3, [pc, #292]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
			kick_time = 0;
 800379c:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
		}
		omni_move(0.0, 0.0, 0.0, 0.0);
 80037a2:	eddf 1a43 	vldr	s3, [pc, #268]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037a6:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037aa:	eddf 0a41 	vldr	s1, [pc, #260]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037ae:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037b2:	f001 fe6d 	bl	8005490 <omni_move>
		break;
 80037b6:	e064      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>

	case 6:
		if (decode_SW(SWdata[0]) & 0b00010000)
 80037b8:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fc53 	bl	8005068 <decode_SW>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02e      	beq.n	800382a <HAL_TIM_PeriodElapsedCallback+0x5ca>
		{
			actuator_motor5(0.5, 1.0);
 80037cc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037d0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80037d4:	f7fd fcbe 	bl	8001154 <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80037d8:	2201      	movs	r2, #1
 80037da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037de:	4835      	ldr	r0, [pc, #212]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80037e0:	f005 fcda 	bl	8009198 <HAL_GPIO_WritePin>
			if (ball[0] == 1)
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10a      	bne.n	8003802 <HAL_TIM_PeriodElapsedCallback+0x5a2>
			{
				if (kick_state == 0)
 80037ec:	4b33      	ldr	r3, [pc, #204]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d106      	bne.n	8003802 <HAL_TIM_PeriodElapsedCallback+0x5a2>
				{
					actuator_kicker(3, 100);
 80037f4:	2164      	movs	r1, #100	; 0x64
 80037f6:	2003      	movs	r0, #3
 80037f8:	f7fd fcfd 	bl	80011f6 <actuator_kicker>
					kick_state = 1;
 80037fc:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
				}
			}
			if (kick_state == 1)
 8003802:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d12d      	bne.n	8003866 <HAL_TIM_PeriodElapsedCallback+0x606>
			{
				kick_time++;
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003812:	6013      	str	r3, [r2, #0]
				if (kick_time > 100)
 8003814:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b64      	cmp	r3, #100	; 0x64
 800381a:	dd24      	ble.n	8003866 <HAL_TIM_PeriodElapsedCallback+0x606>
				{
					kick_state = 0;
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
					kick_time = 0;
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e01d      	b.n	8003866 <HAL_TIM_PeriodElapsedCallback+0x606>
				}
			}
		}
		else
		{
			actuator_motor5(0.0, 0.0);
 800382a:	eddf 0a21 	vldr	s1, [pc, #132]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800382e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003832:	f7fd fc8f 	bl	8001154 <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003836:	2200      	movs	r2, #0
 8003838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800383c:	481d      	ldr	r0, [pc, #116]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 800383e:	f005 fcab 	bl	8009198 <HAL_GPIO_WritePin>
			actuator_kicker(1, 1);
 8003842:	2101      	movs	r1, #1
 8003844:	2001      	movs	r0, #1
 8003846:	f7fd fcd6 	bl	80011f6 <actuator_kicker>
			actuator_kicker(2, 1);
 800384a:	2101      	movs	r1, #1
 800384c:	2002      	movs	r0, #2
 800384e:	f7fd fcd2 	bl	80011f6 <actuator_kicker>
			actuator_kicker_voltage(0.0);
 8003852:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003856:	f7fd fcad 	bl	80011b4 <actuator_kicker_voltage>
			kick_state = 0;
 800385a:	4b18      	ldr	r3, [pc, #96]	; (80038bc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
			kick_time = 0;
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
		}
		omni_move(0.0, 0.0, 0.0, 0.0);
 8003866:	eddf 1a12 	vldr	s3, [pc, #72]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800386a:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 800386e:	eddf 0a10 	vldr	s1, [pc, #64]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003872:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80038b0 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003876:	f001 fe0b 	bl	8005490 <omni_move>
		break;
 800387a:	e002      	b.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x622>

	default:
		maintask_stop();
 800387c:	f001 faae 	bl	8004ddc <maintask_stop>
		break;
 8003880:	bf00      	nop
	}

	if (cnt_time_tim > 50)
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x668>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	2b32      	cmp	r3, #50	; 0x32
 8003888:	d936      	bls.n	80038f8 <HAL_TIM_PeriodElapsedCallback+0x698>
	{
		if (ether_connect_check != data_from_ether[Rxbufsize_from_Ether - 3])
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800388c:	7ada      	ldrb	r2, [r3, #11]
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x670>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d020      	beq.n	80038d8 <HAL_TIM_PeriodElapsedCallback+0x678>
		{
			ether_connect = 1;
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x674>)
 8003898:	2201      	movs	r2, #1
 800389a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800389c:	2201      	movs	r2, #1
 800389e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038a2:	4804      	ldr	r0, [pc, #16]	; (80038b4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 80038a4:	f005 fc78 	bl	8009198 <HAL_GPIO_WritePin>
 80038a8:	e01f      	b.n	80038ea <HAL_TIM_PeriodElapsedCallback+0x68a>
 80038aa:	bf00      	nop
 80038ac:	20000658 	.word	0x20000658
 80038b0:	00000000 	.word	0x00000000
 80038b4:	48000800 	.word	0x48000800
 80038b8:	20000768 	.word	0x20000768
 80038bc:	2000062c 	.word	0x2000062c
 80038c0:	20000630 	.word	0x20000630
 80038c4:	437a0000 	.word	0x437a0000
 80038c8:	200005c4 	.word	0x200005c4
 80038cc:	20000634 	.word	0x20000634
 80038d0:	200005c2 	.word	0x200005c2
 80038d4:	200005c1 	.word	0x200005c1
		}
		else
		{
			ether_connect = 0;
 80038d8:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x854>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038e4:	4874      	ldr	r0, [pc, #464]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80038e6:	f005 fc57 	bl	8009198 <HAL_GPIO_WritePin>
		}
		ether_connect_check = data_from_ether[Rxbufsize_from_Ether - 3];
 80038ea:	4b74      	ldr	r3, [pc, #464]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x85c>)
 80038ec:	7ada      	ldrb	r2, [r3, #11]
 80038ee:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80038f0:	701a      	strb	r2, [r3, #0]
		cnt_time_tim = 0;
 80038f2:	4b74      	ldr	r3, [pc, #464]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	801a      	strh	r2, [r3, #0]
	}

	if (cnt_time_50Hz > 10)
 80038f8:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x868>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	2b0a      	cmp	r3, #10
 80038fe:	f240 80b7 	bls.w	8003a70 <HAL_TIM_PeriodElapsedCallback+0x810>
	{
		if (sw_mode > 0)
 8003902:	4b72      	ldr	r3, [pc, #456]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80ab 	beq.w	8003a62 <HAL_TIM_PeriodElapsedCallback+0x802>
		{
			// printf(" kicktime=%d, state=%d ",kick_time,kick_state);
			// printf("data: acc0=%f,acc1=%f,acc2=%f,gyro0=%f,gyro1=%f,gyro2=%f,tmp=%f",acc[0],acc[1],acc[2],gyro[0],gyro[1],gyro[2],IMU_tmp);
			// printf(" pich=%f roll=%f yaw=%f",pitchAngle,rollAngle,yawAngle);
			printf("yaw=%+4.1f ", yaw_angle_rad);
 800390c:	4b70      	ldr	r3, [pc, #448]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x870>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fe41 	bl	8000598 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	486e      	ldr	r0, [pc, #440]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x874>)
 800391c:	f00a fc8e 	bl	800e23c <iprintf>
			// printf("ENC %+4.1f %+4.1f %+4.1f %+4.1f ", motor_enc_angle[0], motor_enc_angle[1], motor_enc_angle[2], motor_enc_angle[3]);
			// printf("Diff %+4.1f %+4.1f %+4.1f %+4.1f ", omni_angle_diff[0], omni_angle_diff[1], omni_angle_diff[2], omni_angle_diff[3]);
			// printf("Sin %+4.1f %+4.1f", sin(yaw_angle_rad + M_PI * 3 / 4), sin(yaw_angle_rad + M_PI * 5 / 4));
			// printf("Adj %+5.3f TT %+5.3f ", robot_rotation_adj * 1000, (omni_travel[0] + omni_travel[1]) * 1000);
			// printf("travel %+6.2f %+6.2f ", omni_travel[0] * 1000, omni_travel[1] * 1000);
			printf("omni X%+8.3f Y%+8.3f ", omni_odom[0], omni_odom[1]);
 8003920:	4b6d      	ldr	r3, [pc, #436]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fe37 	bl	8000598 <__aeabi_f2d>
 800392a:	4604      	mov	r4, r0
 800392c:	460d      	mov	r5, r1
 800392e:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fe30 	bl	8000598 <__aeabi_f2d>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	e9cd 2300 	strd	r2, r3, [sp]
 8003940:	4622      	mov	r2, r4
 8003942:	462b      	mov	r3, r5
 8003944:	4865      	ldr	r0, [pc, #404]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8003946:	f00a fc79 	bl	800e23c <iprintf>
			// printf("imu %+5.2f result %+5.2f ", rotation_integral,spin_adjusted_result);
			printf("tarPos X%+8.3f Y%+8.3f ", tar_pos[0], tar_pos[1]);
 800394a:	4b65      	ldr	r3, [pc, #404]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x880>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fc fe22 	bl	8000598 <__aeabi_f2d>
 8003954:	4604      	mov	r4, r0
 8003956:	460d      	mov	r5, r1
 8003958:	4b61      	ldr	r3, [pc, #388]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x880>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fe1b 	bl	8000598 <__aeabi_f2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	e9cd 2300 	strd	r2, r3, [sp]
 800396a:	4622      	mov	r2, r4
 800396c:	462b      	mov	r3, r5
 800396e:	485d      	ldr	r0, [pc, #372]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8003970:	f00a fc64 	bl	800e23c <iprintf>
			printf("tarVel X%+4.3f Y%+4.3f ", tar_vel[0], tar_vel[1]);
 8003974:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fe0d 	bl	8000598 <__aeabi_f2d>
 800397e:	4604      	mov	r4, r0
 8003980:	460d      	mov	r5, r1
 8003982:	4b59      	ldr	r3, [pc, #356]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fc fe06 	bl	8000598 <__aeabi_f2d>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	e9cd 2300 	strd	r2, r3, [sp]
 8003994:	4622      	mov	r2, r4
 8003996:	462b      	mov	r3, r5
 8003998:	4854      	ldr	r0, [pc, #336]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800399a:	f00a fc4f 	bl	800e23c <iprintf>
			// printf("tar %+7.1f real %+7.2f %+7.2f ", target_move_speed*500, omni_odom_speed[0], omni_odom_speed[1]);
			printf("real %+4.2f %+4.2f ", omni_odom_speed[0], omni_odom_speed[1]);
 800399e:	4b54      	ldr	r3, [pc, #336]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fdf8 	bl	8000598 <__aeabi_f2d>
 80039a8:	4604      	mov	r4, r0
 80039aa:	460d      	mov	r5, r1
 80039ac:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdf1 	bl	8000598 <__aeabi_f2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	e9cd 2300 	strd	r2, r3, [sp]
 80039be:	4622      	mov	r2, r4
 80039c0:	462b      	mov	r3, r5
 80039c2:	484c      	ldr	r0, [pc, #304]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 80039c4:	f00a fc3a 	bl	800e23c <iprintf>

			float odom_log_sum[2] = {0};
 80039c8:	f107 030c 	add.w	r3, r7, #12
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]

			for (int i = 0; i < SPEED_LOG_BUF_SIZE; i++)
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	e01b      	b.n	8003a10 <HAL_TIM_PeriodElapsedCallback+0x7b0>
			{
				odom_log_sum[0] += omni_odom_speed_log[0][i];
 80039d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80039dc:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	edd3 7a00 	vldr	s15, [r3]
 80039e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ec:	edc7 7a03 	vstr	s15, [r7, #12]
				odom_log_sum[1] += omni_odom_speed_log[1][i];
 80039f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80039f4:	4a40      	ldr	r2, [pc, #256]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3364      	adds	r3, #100	; 0x64
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a06:	edc7 7a04 	vstr	s15, [r7, #16]
			for (int i = 0; i < SPEED_LOG_BUF_SIZE; i++)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b63      	cmp	r3, #99	; 0x63
 8003a14:	dde0      	ble.n	80039d8 <HAL_TIM_PeriodElapsedCallback+0x778>
			}
			odom_log_sum[0] /= SPEED_LOG_BUF_SIZE;
 8003a16:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003afc <HAL_TIM_PeriodElapsedCallback+0x89c>
 8003a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a22:	edc7 7a03 	vstr	s15, [r7, #12]
			odom_log_sum[1] /= SPEED_LOG_BUF_SIZE;
 8003a26:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a2a:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003afc <HAL_TIM_PeriodElapsedCallback+0x89c>
 8003a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a32:	edc7 7a04 	vstr	s15, [r7, #16]
			printf("log %8.2f %8.2f", odom_log_sum[0], odom_log_sum[1]);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fdad 	bl	8000598 <__aeabi_f2d>
 8003a3e:	4604      	mov	r4, r0
 8003a40:	460d      	mov	r5, r1
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fc fda7 	bl	8000598 <__aeabi_f2d>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8003a52:	4622      	mov	r2, r4
 8003a54:	462b      	mov	r3, r5
 8003a56:	482a      	ldr	r0, [pc, #168]	; (8003b00 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8003a58:	f00a fbf0 	bl	800e23c <iprintf>
			//   printf("robot X%+8.0f Y%+8.0f ", robot_pos_diff[0], robot_pos_diff[1]);

			// printf(" ball:0=%d",ball[0]);
			// printf("%+2d %+2d ",mouse[0],mouse[1]);
			// printf(" mouse:x=%+6ld, y=%+6ld", -mouse_odom[0], -mouse_odom[1]);
			printf("\r\n");
 8003a5c:	4829      	ldr	r0, [pc, #164]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8003a5e:	f00a fc53 	bl	800e308 <puts>
		}

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	4828      	ldr	r0, [pc, #160]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 8003a66:	f005 fbaf 	bl	80091c8 <HAL_GPIO_TogglePin>
		cnt_time_50Hz = 0;
 8003a6a:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	801a      	strh	r2, [r3, #0]
	}
	actuator_power_ONOFF(1);
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7fd fbd7 	bl	8001224 <actuator_power_ONOFF>

	cnt_time_50Hz++;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8003a80:	801a      	strh	r2, [r3, #0]
	cnt_time_tim++;
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003a8c:	801a      	strh	r2, [r3, #0]

	if (Power_voltage[4] < 22.0)
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8003a90:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a94:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8003a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	d400      	bmi.n	8003aa4 <HAL_TIM_PeriodElapsedCallback+0x844>
	{
		actuator_buzzer(100, 100);
	}
}
 8003aa2:	e003      	b.n	8003aac <HAL_TIM_PeriodElapsedCallback+0x84c>
		actuator_buzzer(100, 100);
 8003aa4:	2164      	movs	r1, #100	; 0x64
 8003aa6:	2064      	movs	r0, #100	; 0x64
 8003aa8:	f7fd fbf2 	bl	8001290 <actuator_buzzer>
}
 8003aac:	bf00      	nop
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab4:	200005c1 	.word	0x200005c1
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	20000634 	.word	0x20000634
 8003ac0:	200005c2 	.word	0x200005c2
 8003ac4:	200005c4 	.word	0x200005c4
 8003ac8:	200005cc 	.word	0x200005cc
 8003acc:	200005c6 	.word	0x200005c6
 8003ad0:	200005dc 	.word	0x200005dc
 8003ad4:	08011534 	.word	0x08011534
 8003ad8:	20000778 	.word	0x20000778
 8003adc:	08011540 	.word	0x08011540
 8003ae0:	20000680 	.word	0x20000680
 8003ae4:	08011558 	.word	0x08011558
 8003ae8:	20000688 	.word	0x20000688
 8003aec:	08011570 	.word	0x08011570
 8003af0:	20000788 	.word	0x20000788
 8003af4:	08011588 	.word	0x08011588
 8003af8:	20000790 	.word	0x20000790
 8003afc:	42c80000 	.word	0x42c80000
 8003b00:	0801159c 	.word	0x0801159c
 8003b04:	080115ac 	.word	0x080115ac
 8003b08:	48000400 	.word	0x48000400
 8003b0c:	20000704 	.word	0x20000704

08003b10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
	if (HAL_GetTick() > 2000)
 8003b1a:	f7ff f9eb 	bl	8002ef4 <HAL_GetTick>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b24:	d934      	bls.n	8003b90 <HAL_GPIO_EXTI_Callback+0x80>
	{
		uint8_t cnt = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
		while (cnt < 100)
 8003b2a:	e00d      	b.n	8003b48 <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1)
 8003b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b30:	4819      	ldr	r0, [pc, #100]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x88>)
 8003b32:	f005 fb19 	bl	8009168 <HAL_GPIO_ReadPin>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d109      	bne.n	8003b50 <HAL_GPIO_EXTI_Callback+0x40>
			{
				cnt++;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
				delayUs(1);
 8003b42:	2001      	movs	r0, #1
 8003b44:	f001 fc8c 	bl	8005460 <delayUs>
		while (cnt < 100)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b63      	cmp	r3, #99	; 0x63
 8003b4c:	d9ee      	bls.n	8003b2c <HAL_GPIO_EXTI_Callback+0x1c>
 8003b4e:	e000      	b.n	8003b52 <HAL_GPIO_EXTI_Callback+0x42>
			}
			else
			{
				break;
 8003b50:	bf00      	nop
			}
		}

		if (cnt >= 100)
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b63      	cmp	r3, #99	; 0x63
 8003b56:	d918      	bls.n	8003b8a <HAL_GPIO_EXTI_Callback+0x7a>
		{
			Emargency = 1;
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 8003b5e:	4810      	ldr	r0, [pc, #64]	; (8003ba0 <HAL_GPIO_EXTI_Callback+0x90>)
 8003b60:	f00a fb6c 	bl	800e23c <iprintf>
			for (int i = 0; i < 50; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	e004      	b.n	8003b74 <HAL_GPIO_EXTI_Callback+0x64>
			{
				maintask_emargency();
 8003b6a:	f001 f871 	bl	8004c50 <maintask_emargency>
			for (int i = 0; i < 50; i++)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b31      	cmp	r3, #49	; 0x31
 8003b78:	ddf7      	ble.n	8003b6a <HAL_GPIO_EXTI_Callback+0x5a>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b80:	4805      	ldr	r0, [pc, #20]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x88>)
 8003b82:	f005 fb09 	bl	8009198 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8003b86:	f7ff f98b 	bl	8002ea0 <__NVIC_SystemReset>
			Emargency = 0;
		}
		else
		{
			Emargency = 0;
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	48000400 	.word	0x48000400
 8003b9c:	2000065a 	.word	0x2000065a
 8003ba0:	080115b0 	.word	0x080115b0

08003ba4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b09c      	sub	sp, #112	; 0x70
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[can_RX_data];
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 82d8 	beq.w	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bc2:	2140      	movs	r1, #64	; 0x40
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f004 fcf1 	bl	80085ac <HAL_FDCAN_GetRxMessage>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_FDCAN_RxFifo0Callback+0x30>
		{
			Error_Handler();
 8003bd0:	f001 fbfc 	bl	80053cc <Error_Handler>
		}
		switch (RxHeader.Identifier)
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd6:	f240 4201 	movw	r2, #1025	; 0x401
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	f000 810c 	beq.w	8003df8 <HAL_FDCAN_RxFifo0Callback+0x254>
 8003be0:	f240 4201 	movw	r2, #1025	; 0x401
 8003be4:	4293      	cmp	r3, r2
 8003be6:	f200 82c0 	bhi.w	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	f200 809e 	bhi.w	8003d2c <HAL_FDCAN_RxFifo0Callback+0x188>
 8003bf0:	e08c      	b.n	8003d0c <HAL_FDCAN_RxFifo0Callback+0x168>
 8003bf2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003bf6:	2b41      	cmp	r3, #65	; 0x41
 8003bf8:	f200 82b7 	bhi.w	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003ebd 	.word	0x08003ebd
 8003c08:	08003f13 	.word	0x08003f13
 8003c0c:	08003f69 	.word	0x08003f69
 8003c10:	08003fbf 	.word	0x08003fbf
 8003c14:	08004061 	.word	0x08004061
 8003c18:	0800416b 	.word	0x0800416b
 8003c1c:	0800416b 	.word	0x0800416b
 8003c20:	0800416b 	.word	0x0800416b
 8003c24:	0800416b 	.word	0x0800416b
 8003c28:	0800416b 	.word	0x0800416b
 8003c2c:	0800416b 	.word	0x0800416b
 8003c30:	0800416b 	.word	0x0800416b
 8003c34:	0800416b 	.word	0x0800416b
 8003c38:	0800416b 	.word	0x0800416b
 8003c3c:	0800416b 	.word	0x0800416b
 8003c40:	0800416b 	.word	0x0800416b
 8003c44:	08003d85 	.word	0x08003d85
 8003c48:	0800416b 	.word	0x0800416b
 8003c4c:	0800416b 	.word	0x0800416b
 8003c50:	0800416b 	.word	0x0800416b
 8003c54:	0800416b 	.word	0x0800416b
 8003c58:	08003d9b 	.word	0x08003d9b
 8003c5c:	0800416b 	.word	0x0800416b
 8003c60:	0800416b 	.word	0x0800416b
 8003c64:	0800416b 	.word	0x0800416b
 8003c68:	0800416b 	.word	0x0800416b
 8003c6c:	0800416b 	.word	0x0800416b
 8003c70:	0800416b 	.word	0x0800416b
 8003c74:	0800416b 	.word	0x0800416b
 8003c78:	0800416b 	.word	0x0800416b
 8003c7c:	0800416b 	.word	0x0800416b
 8003c80:	0800416b 	.word	0x0800416b
 8003c84:	080040a1 	.word	0x080040a1
 8003c88:	080040b7 	.word	0x080040b7
 8003c8c:	080040cd 	.word	0x080040cd
 8003c90:	080040e3 	.word	0x080040e3
 8003c94:	08003db1 	.word	0x08003db1
 8003c98:	08003dc7 	.word	0x08003dc7
 8003c9c:	0800416b 	.word	0x0800416b
 8003ca0:	0800416b 	.word	0x0800416b
 8003ca4:	0800416b 	.word	0x0800416b
 8003ca8:	0800416b 	.word	0x0800416b
 8003cac:	0800416b 	.word	0x0800416b
 8003cb0:	0800416b 	.word	0x0800416b
 8003cb4:	0800416b 	.word	0x0800416b
 8003cb8:	0800416b 	.word	0x0800416b
 8003cbc:	0800416b 	.word	0x0800416b
 8003cc0:	0800416b 	.word	0x0800416b
 8003cc4:	080040f9 	.word	0x080040f9
 8003cc8:	08004115 	.word	0x08004115
 8003ccc:	08004131 	.word	0x08004131
 8003cd0:	0800414d 	.word	0x0800414d
 8003cd4:	08003ddd 	.word	0x08003ddd
 8003cd8:	0800416b 	.word	0x0800416b
 8003cdc:	0800416b 	.word	0x0800416b
 8003ce0:	0800416b 	.word	0x0800416b
 8003ce4:	0800416b 	.word	0x0800416b
 8003ce8:	0800416b 	.word	0x0800416b
 8003cec:	0800416b 	.word	0x0800416b
 8003cf0:	0800416b 	.word	0x0800416b
 8003cf4:	0800416b 	.word	0x0800416b
 8003cf8:	0800416b 	.word	0x0800416b
 8003cfc:	0800416b 	.word	0x0800416b
 8003d00:	0800416b 	.word	0x0800416b
 8003d04:	08003d65 	.word	0x08003d65
 8003d08:	08003e77 	.word	0x08003e77
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	f200 822c 	bhi.w	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <HAL_FDCAN_RxFifo0Callback+0x174>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d53 	.word	0x08003d53
 8003d20:	08004169 	.word	0x08004169
 8003d24:	08004169 	.word	0x08004169
 8003d28:	08004169 	.word	0x08004169
 8003d2c:	f240 2241 	movw	r2, #577	; 0x241
 8003d30:	4293      	cmp	r3, r2
 8003d32:	f200 821a 	bhi.w	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
 8003d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3a:	f4bf af5a 	bcs.w	8003bf2 <HAL_FDCAN_RxFifo0Callback+0x4e>
			amplitude[3] = uchar4_to_float(RxData);
			check_motor4 = 1;
			break;
		}
	}
}
 8003d3e:	e214      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			error_No[0] = RxData[0];
 8003d40:	7a3a      	ldrb	r2, [r7, #8]
 8003d42:	4bb4      	ldr	r3, [pc, #720]	; (8004014 <HAL_FDCAN_RxFifo0Callback+0x470>)
 8003d44:	701a      	strb	r2, [r3, #0]
			error_No[1] = RxData[1];
 8003d46:	7a7a      	ldrb	r2, [r7, #9]
 8003d48:	4bb2      	ldr	r3, [pc, #712]	; (8004014 <HAL_FDCAN_RxFifo0Callback+0x470>)
 8003d4a:	705a      	strb	r2, [r3, #1]
			Error_Handler();
 8003d4c:	f001 fb3e 	bl	80053cc <Error_Handler>
			break;
 8003d50:	e20b      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			error_No[0] = RxData[0];
 8003d52:	7a3a      	ldrb	r2, [r7, #8]
 8003d54:	4baf      	ldr	r3, [pc, #700]	; (8004014 <HAL_FDCAN_RxFifo0Callback+0x470>)
 8003d56:	701a      	strb	r2, [r3, #0]
			error_No[1] = RxData[1];
 8003d58:	7a7a      	ldrb	r2, [r7, #9]
 8003d5a:	4bae      	ldr	r3, [pc, #696]	; (8004014 <HAL_FDCAN_RxFifo0Callback+0x470>)
 8003d5c:	705a      	strb	r2, [r3, #1]
			maintask_stop();
 8003d5e:	f001 f83d 	bl	8004ddc <maintask_stop>
			break;
 8003d62:	e202      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			ball[0] = RxData[0];
 8003d64:	7a3a      	ldrb	r2, [r7, #8]
 8003d66:	4bac      	ldr	r3, [pc, #688]	; (8004018 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8003d68:	701a      	strb	r2, [r3, #0]
			ball[1] = RxData[1];
 8003d6a:	7a7a      	ldrb	r2, [r7, #9]
 8003d6c:	4baa      	ldr	r3, [pc, #680]	; (8004018 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8003d6e:	705a      	strb	r2, [r3, #1]
			ball[2] = RxData[2];
 8003d70:	7aba      	ldrb	r2, [r7, #10]
 8003d72:	4ba9      	ldr	r3, [pc, #676]	; (8004018 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8003d74:	709a      	strb	r2, [r3, #2]
			ball[3] = RxData[3];
 8003d76:	7afa      	ldrb	r2, [r7, #11]
 8003d78:	4ba7      	ldr	r3, [pc, #668]	; (8004018 <HAL_FDCAN_RxFifo0Callback+0x474>)
 8003d7a:	70da      	strb	r2, [r3, #3]
			check_FC = 1;
 8003d7c:	4ba7      	ldr	r3, [pc, #668]	; (800401c <HAL_FDCAN_RxFifo0Callback+0x478>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]
			break;
 8003d82:	e1f2      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			Power_voltage[4] = uchar4_to_float(RxData);
 8003d84:	f107 0308 	add.w	r3, r7, #8
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f002 f95f 	bl	800604c <uchar4_to_float>
 8003d8e:	eef0 7a40 	vmov.f32	s15, s0
 8003d92:	4ba3      	ldr	r3, [pc, #652]	; (8004020 <HAL_FDCAN_RxFifo0Callback+0x47c>)
 8003d94:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d98:	e1e7      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			Power_voltage[5] = uchar4_to_float(RxData);
 8003d9a:	f107 0308 	add.w	r3, r7, #8
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 f954 	bl	800604c <uchar4_to_float>
 8003da4:	eef0 7a40 	vmov.f32	s15, s0
 8003da8:	4b9d      	ldr	r3, [pc, #628]	; (8004020 <HAL_FDCAN_RxFifo0Callback+0x47c>)
 8003daa:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
 8003dae:	e1dc      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			tempercher[4] = uchar4_to_float(RxData);
 8003db0:	f107 0308 	add.w	r3, r7, #8
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 f949 	bl	800604c <uchar4_to_float>
 8003dba:	eef0 7a40 	vmov.f32	s15, s0
 8003dbe:	4b99      	ldr	r3, [pc, #612]	; (8004024 <HAL_FDCAN_RxFifo0Callback+0x480>)
 8003dc0:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003dc4:	e1d1      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			tempercher[5] = uchar4_to_float(RxData);
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 f93e 	bl	800604c <uchar4_to_float>
 8003dd0:	eef0 7a40 	vmov.f32	s15, s0
 8003dd4:	4b93      	ldr	r3, [pc, #588]	; (8004024 <HAL_FDCAN_RxFifo0Callback+0x480>)
 8003dd6:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
 8003dda:	e1c6      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			amplitude[4] = uchar4_to_float(RxData);
 8003ddc:	f107 0308 	add.w	r3, r7, #8
 8003de0:	4618      	mov	r0, r3
 8003de2:	f002 f933 	bl	800604c <uchar4_to_float>
 8003de6:	eef0 7a40 	vmov.f32	s15, s0
 8003dea:	4b8f      	ldr	r3, [pc, #572]	; (8004028 <HAL_FDCAN_RxFifo0Callback+0x484>)
 8003dec:	edc3 7a04 	vstr	s15, [r3, #16]
			check_power = 1;
 8003df0:	4b8e      	ldr	r3, [pc, #568]	; (800402c <HAL_FDCAN_RxFifo0Callback+0x488>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
			break;
 8003df6:	e1b8      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			data_from_ether[8] = RxData[0];
 8003df8:	7a3a      	ldrb	r2, [r7, #8]
 8003dfa:	4b8d      	ldr	r3, [pc, #564]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003dfc:	721a      	strb	r2, [r3, #8]
			data_from_ether[9] = RxData[1];
 8003dfe:	7a7a      	ldrb	r2, [r7, #9]
 8003e00:	4b8b      	ldr	r3, [pc, #556]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e02:	725a      	strb	r2, [r3, #9]
			data_from_ether[10] = RxData[2];
 8003e04:	7aba      	ldrb	r2, [r7, #10]
 8003e06:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e08:	729a      	strb	r2, [r3, #10]
			data_from_ether[11] = RxData[3];
 8003e0a:	7afa      	ldrb	r2, [r7, #11]
 8003e0c:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e0e:	72da      	strb	r2, [r3, #11]
			data_from_ether[12] = RxData[4];
 8003e10:	7b3a      	ldrb	r2, [r7, #12]
 8003e12:	4b87      	ldr	r3, [pc, #540]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e14:	731a      	strb	r2, [r3, #12]
			if (data_from_ether[8] > 100)
 8003e16:	4b86      	ldr	r3, [pc, #536]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e18:	7a1b      	ldrb	r3, [r3, #8]
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d909      	bls.n	8003e32 <HAL_FDCAN_RxFifo0Callback+0x28e>
				chipEN = 1;
 8003e1e:	4b85      	ldr	r3, [pc, #532]	; (8004034 <HAL_FDCAN_RxFifo0Callback+0x490>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
				data_from_ether[8] = data_from_ether[8] - 100;
 8003e24:	4b82      	ldr	r3, [pc, #520]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e26:	7a1b      	ldrb	r3, [r3, #8]
 8003e28:	3b64      	subs	r3, #100	; 0x64
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	4b80      	ldr	r3, [pc, #512]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e2e:	721a      	strb	r2, [r3, #8]
 8003e30:	e002      	b.n	8003e38 <HAL_FDCAN_RxFifo0Callback+0x294>
				chipEN = 0;
 8003e32:	4b80      	ldr	r3, [pc, #512]	; (8004034 <HAL_FDCAN_RxFifo0Callback+0x490>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
			kick_power = (float32_t)data_from_ether[8] / 20.0;
 8003e38:	4b7d      	ldr	r3, [pc, #500]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e3a:	7a1b      	ldrb	r3, [r3, #8]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e44:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e4c:	4b7a      	ldr	r3, [pc, #488]	; (8004038 <HAL_FDCAN_RxFifo0Callback+0x494>)
 8003e4e:	edc3 7a00 	vstr	s15, [r3]
			drible_power = (float32_t)data_from_ether[9] / 20.0;
 8003e52:	4b77      	ldr	r3, [pc, #476]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e54:	7a5b      	ldrb	r3, [r3, #9]
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e5e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e66:	4b75      	ldr	r3, [pc, #468]	; (800403c <HAL_FDCAN_RxFifo0Callback+0x498>)
 8003e68:	edc3 7a00 	vstr	s15, [r3]
			keeper_EN = data_from_ether[10];
 8003e6c:	4b70      	ldr	r3, [pc, #448]	; (8004030 <HAL_FDCAN_RxFifo0Callback+0x48c>)
 8003e6e:	7a9a      	ldrb	r2, [r3, #10]
 8003e70:	4b73      	ldr	r3, [pc, #460]	; (8004040 <HAL_FDCAN_RxFifo0Callback+0x49c>)
 8003e72:	701a      	strb	r2, [r3, #0]
			break;
 8003e74:	e179      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			mouse[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8003e76:	7a7b      	ldrb	r3, [r7, #9]
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	b21a      	sxth	r2, r3
 8003e7c:	7a3b      	ldrb	r3, [r7, #8]
 8003e7e:	b21b      	sxth	r3, r3
 8003e80:	4313      	orrs	r3, r2
 8003e82:	b21a      	sxth	r2, r3
 8003e84:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 8003e86:	801a      	strh	r2, [r3, #0]
			mouse[1] = (int16_t)((RxData[3] << 8) | RxData[2]);
 8003e88:	7afb      	ldrb	r3, [r7, #11]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	b21a      	sxth	r2, r3
 8003e8e:	7abb      	ldrb	r3, [r7, #10]
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	4313      	orrs	r3, r2
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 8003e98:	805a      	strh	r2, [r3, #2]
			mouse_odom[0] += mouse[0];
 8003e9a:	4b6b      	ldr	r3, [pc, #428]	; (8004048 <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a69      	ldr	r2, [pc, #420]	; (8004044 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 8003ea0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a68      	ldr	r2, [pc, #416]	; (8004048 <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 8003ea8:	6013      	str	r3, [r2, #0]
			mouse_odom[1] += mouse[1];
 8003eaa:	4b67      	ldr	r3, [pc, #412]	; (8004048 <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_FDCAN_RxFifo0Callback+0x4a0>)
 8003eb0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	4a64      	ldr	r2, [pc, #400]	; (8004048 <HAL_FDCAN_RxFifo0Callback+0x4a4>)
 8003eb8:	6053      	str	r3, [r2, #4]
			break;
 8003eba:	e156      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			motor_enc_angle[0] = uchar4_to_float(&RxData[4]);
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 f8c2 	bl	800604c <uchar4_to_float>
 8003ec8:	eef0 7a40 	vmov.f32	s15, s0
 8003ecc:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_FDCAN_RxFifo0Callback+0x4a8>)
 8003ece:	edc3 7a00 	vstr	s15, [r3]
			motor_feedback[0] = uchar4_to_float(RxData);
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 f8b8 	bl	800604c <uchar4_to_float>
 8003edc:	eef0 7a40 	vmov.f32	s15, s0
 8003ee0:	4b5b      	ldr	r3, [pc, #364]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003ee2:	edc3 7a00 	vstr	s15, [r3]
			motor_feedback_velocity[0] = motor_feedback[0] * OMNI_DIR_LENGTH;
 8003ee6:	4b5a      	ldr	r3, [pc, #360]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004054 <HAL_FDCAN_RxFifo0Callback+0x4b0>
 8003ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ef4:	4b58      	ldr	r3, [pc, #352]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003ef6:	edc3 7a00 	vstr	s15, [r3]
			motor_integral[0] += motor_feedback_velocity[0];
 8003efa:	4b58      	ldr	r3, [pc, #352]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003efc:	ed93 7a00 	vldr	s14, [r3]
 8003f00:	4b55      	ldr	r3, [pc, #340]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f0a:	4b54      	ldr	r3, [pc, #336]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f0c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003f10:	e12b      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			motor_enc_angle[1] = uchar4_to_float(&RxData[4]);
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	3304      	adds	r3, #4
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f002 f897 	bl	800604c <uchar4_to_float>
 8003f1e:	eef0 7a40 	vmov.f32	s15, s0
 8003f22:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_FDCAN_RxFifo0Callback+0x4a8>)
 8003f24:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_feedback[1] = uchar4_to_float(RxData);
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 f88d 	bl	800604c <uchar4_to_float>
 8003f32:	eef0 7a40 	vmov.f32	s15, s0
 8003f36:	4b46      	ldr	r3, [pc, #280]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003f38:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_feedback_velocity[1] = motor_feedback[1] * OMNI_DIR_LENGTH;
 8003f3c:	4b44      	ldr	r3, [pc, #272]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f42:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004054 <HAL_FDCAN_RxFifo0Callback+0x4b0>
 8003f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f4a:	4b43      	ldr	r3, [pc, #268]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f4c:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_integral[1] += motor_feedback_velocity[1];
 8003f50:	4b42      	ldr	r3, [pc, #264]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f52:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f56:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003f58:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003f62:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8003f66:	e100      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			motor_enc_angle[2] = uchar4_to_float(&RxData[4]);
 8003f68:	f107 0308 	add.w	r3, r7, #8
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f002 f86c 	bl	800604c <uchar4_to_float>
 8003f74:	eef0 7a40 	vmov.f32	s15, s0
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_FDCAN_RxFifo0Callback+0x4a8>)
 8003f7a:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_feedback[2] = uchar4_to_float(RxData);
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f002 f862 	bl	800604c <uchar4_to_float>
 8003f88:	eef0 7a40 	vmov.f32	s15, s0
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003f8e:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_feedback_velocity[2] = motor_feedback[2] * OMNI_DIR_LENGTH;
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003f94:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f98:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004054 <HAL_FDCAN_RxFifo0Callback+0x4b0>
 8003f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa0:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003fa2:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_integral[2] += motor_feedback_velocity[2];
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003fa8:	ed93 7a02 	vldr	s14, [r3, #8]
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003fae:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003fb8:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8003fbc:	e0d5      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			motor_enc_angle[3] = uchar4_to_float(&RxData[4]);
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f002 f841 	bl	800604c <uchar4_to_float>
 8003fca:	eef0 7a40 	vmov.f32	s15, s0
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <HAL_FDCAN_RxFifo0Callback+0x4a8>)
 8003fd0:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_feedback[3] = uchar4_to_float(RxData);
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 f837 	bl	800604c <uchar4_to_float>
 8003fde:	eef0 7a40 	vmov.f32	s15, s0
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003fe4:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_feedback_velocity[3] = motor_feedback[3] * OMNI_DIR_LENGTH;
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_FDCAN_RxFifo0Callback+0x4ac>)
 8003fea:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004054 <HAL_FDCAN_RxFifo0Callback+0x4b0>
 8003ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8003ff8:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_integral[3] += motor_feedback_velocity[03];
 8003ffc:	4b17      	ldr	r3, [pc, #92]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 8003ffe:	ed93 7a03 	vldr	s14, [r3, #12]
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <HAL_FDCAN_RxFifo0Callback+0x4b4>)
 8004004:	edd3 7a03 	vldr	s15, [r3, #12]
 8004008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_FDCAN_RxFifo0Callback+0x4b8>)
 800400e:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8004012:	e0aa      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
 8004014:	20000ab0 	.word	0x20000ab0
 8004018:	20000768 	.word	0x20000768
 800401c:	20000ace 	.word	0x20000ace
 8004020:	20000704 	.word	0x20000704
 8004024:	2000071c 	.word	0x2000071c
 8004028:	20000734 	.word	0x20000734
 800402c:	20000acd 	.word	0x20000acd
 8004030:	20000634 	.word	0x20000634
 8004034:	20000764 	.word	0x20000764
 8004038:	20000758 	.word	0x20000758
 800403c:	20000754 	.word	0x20000754
 8004040:	20000ac8 	.word	0x20000ac8
 8004044:	2000076c 	.word	0x2000076c
 8004048:	20000770 	.word	0x20000770
 800404c:	200006b8 	.word	0x200006b8
 8004050:	20000690 	.word	0x20000690
 8004054:	3e3426c8 	.word	0x3e3426c8
 8004058:	200006a4 	.word	0x200006a4
 800405c:	200006f0 	.word	0x200006f0
			motor_enc_angle[4] = uchar4_to_float(&RxData[4]);
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fff0 	bl	800604c <uchar4_to_float>
 800406c:	eef0 7a40 	vmov.f32	s15, s0
 8004070:	4b40      	ldr	r3, [pc, #256]	; (8004174 <HAL_FDCAN_RxFifo0Callback+0x5d0>)
 8004072:	edc3 7a04 	vstr	s15, [r3, #16]
			motor_feedback[4] = uchar4_to_float(RxData);
 8004076:	f107 0308 	add.w	r3, r7, #8
 800407a:	4618      	mov	r0, r3
 800407c:	f001 ffe6 	bl	800604c <uchar4_to_float>
 8004080:	eef0 7a40 	vmov.f32	s15, s0
 8004084:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <HAL_FDCAN_RxFifo0Callback+0x5d4>)
 8004086:	edc3 7a04 	vstr	s15, [r3, #16]
			motor_feedback_velocity[4] = motor_feedback[3] * OMNI_DIR_LENGTH;
 800408a:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_FDCAN_RxFifo0Callback+0x5d4>)
 800408c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004090:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800417c <HAL_FDCAN_RxFifo0Callback+0x5d8>
 8004094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004098:	4b39      	ldr	r3, [pc, #228]	; (8004180 <HAL_FDCAN_RxFifo0Callback+0x5dc>)
 800409a:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 800409e:	e064      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			tempercher[0] = uchar4_to_float(RxData);
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 ffd1 	bl	800604c <uchar4_to_float>
 80040aa:	eef0 7a40 	vmov.f32	s15, s0
 80040ae:	4b35      	ldr	r3, [pc, #212]	; (8004184 <HAL_FDCAN_RxFifo0Callback+0x5e0>)
 80040b0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80040b4:	e059      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			tempercher[1] = uchar4_to_float(RxData);
 80040b6:	f107 0308 	add.w	r3, r7, #8
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 ffc6 	bl	800604c <uchar4_to_float>
 80040c0:	eef0 7a40 	vmov.f32	s15, s0
 80040c4:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_FDCAN_RxFifo0Callback+0x5e0>)
 80040c6:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 80040ca:	e04e      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			tempercher[2] = uchar4_to_float(RxData);
 80040cc:	f107 0308 	add.w	r3, r7, #8
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 ffbb 	bl	800604c <uchar4_to_float>
 80040d6:	eef0 7a40 	vmov.f32	s15, s0
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_FDCAN_RxFifo0Callback+0x5e0>)
 80040dc:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 80040e0:	e043      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			tempercher[3] = uchar4_to_float(RxData);
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 ffb0 	bl	800604c <uchar4_to_float>
 80040ec:	eef0 7a40 	vmov.f32	s15, s0
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_FDCAN_RxFifo0Callback+0x5e0>)
 80040f2:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 80040f6:	e038      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			amplitude[0] = uchar4_to_float(RxData);
 80040f8:	f107 0308 	add.w	r3, r7, #8
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 ffa5 	bl	800604c <uchar4_to_float>
 8004102:	eef0 7a40 	vmov.f32	s15, s0
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_FDCAN_RxFifo0Callback+0x5e4>)
 8004108:	edc3 7a00 	vstr	s15, [r3]
			check_motor1 = 1;
 800410c:	4b1f      	ldr	r3, [pc, #124]	; (800418c <HAL_FDCAN_RxFifo0Callback+0x5e8>)
 800410e:	2201      	movs	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
			break;
 8004112:	e02a      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			amplitude[1] = uchar4_to_float(RxData);
 8004114:	f107 0308 	add.w	r3, r7, #8
 8004118:	4618      	mov	r0, r3
 800411a:	f001 ff97 	bl	800604c <uchar4_to_float>
 800411e:	eef0 7a40 	vmov.f32	s15, s0
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_FDCAN_RxFifo0Callback+0x5e4>)
 8004124:	edc3 7a01 	vstr	s15, [r3, #4]
			check_motor2 = 1;
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_FDCAN_RxFifo0Callback+0x5ec>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
			break;
 800412e:	e01c      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			amplitude[2] = uchar4_to_float(RxData);
 8004130:	f107 0308 	add.w	r3, r7, #8
 8004134:	4618      	mov	r0, r3
 8004136:	f001 ff89 	bl	800604c <uchar4_to_float>
 800413a:	eef0 7a40 	vmov.f32	s15, s0
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_FDCAN_RxFifo0Callback+0x5e4>)
 8004140:	edc3 7a02 	vstr	s15, [r3, #8]
			check_motor3 = 1;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_FDCAN_RxFifo0Callback+0x5f0>)
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
			break;
 800414a:	e00e      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			amplitude[3] = uchar4_to_float(RxData);
 800414c:	f107 0308 	add.w	r3, r7, #8
 8004150:	4618      	mov	r0, r3
 8004152:	f001 ff7b 	bl	800604c <uchar4_to_float>
 8004156:	eef0 7a40 	vmov.f32	s15, s0
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_FDCAN_RxFifo0Callback+0x5e4>)
 800415c:	edc3 7a03 	vstr	s15, [r3, #12]
			check_motor4 = 1;
 8004160:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_FDCAN_RxFifo0Callback+0x5f4>)
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
			break;
 8004166:	e000      	b.n	800416a <HAL_FDCAN_RxFifo0Callback+0x5c6>
			break;
 8004168:	bf00      	nop
}
 800416a:	bf00      	nop
 800416c:	3770      	adds	r7, #112	; 0x70
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	200006b8 	.word	0x200006b8
 8004178:	20000690 	.word	0x20000690
 800417c:	3e3426c8 	.word	0x3e3426c8
 8004180:	200006a4 	.word	0x200006a4
 8004184:	2000071c 	.word	0x2000071c
 8004188:	20000734 	.word	0x20000734
 800418c:	20000ac9 	.word	0x20000ac9
 8004190:	20000aca 	.word	0x20000aca
 8004194:	20000acb 	.word	0x20000acb
 8004198:	20000acc 	.word	0x20000acc
 800419c:	00000000 	.word	0x00000000

080041a0 <maintask_run>:

void maintask_run()
{
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	ed2d 8b02 	vpush	{d8}
 80041a8:	b08b      	sub	sp, #44	; 0x2c
 80041aa:	af00      	add	r7, sp, #0
	static uint32_t moving_timeout = 0;
	theta_target = 0.0;
 80041ac:	4b66      	ldr	r3, [pc, #408]	; (8004348 <maintask_run+0x1a8>)
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
	static uint32_t run_cnt = 0;
	static float32_t pre_yaw_angle_rad = 0;
	omega = (getAngleDiff(theta_target, (yawAngle / 180.0 * M_PI)) * 60.0) - (getAngleDiff((yawAngle / 180.0 * M_PI), (pre_yaw_angle / 180.0 * M_PI)) * 1600);
 80041b4:	4b64      	ldr	r3, [pc, #400]	; (8004348 <maintask_run+0x1a8>)
 80041b6:	ed93 8a00 	vldr	s16, [r3]
 80041ba:	4b64      	ldr	r3, [pc, #400]	; (800434c <maintask_run+0x1ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f9ea 	bl	8000598 <__aeabi_f2d>
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	4b61      	ldr	r3, [pc, #388]	; (8004350 <maintask_run+0x1b0>)
 80041ca:	f7fc fb67 	bl	800089c <__aeabi_ddiv>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	a356      	add	r3, pc, #344	; (adr r3, 8004330 <maintask_run+0x190>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc fa34 	bl	8000648 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	f7fc fd26 	bl	8000c38 <__aeabi_d2f>
 80041ec:	4603      	mov	r3, r0
 80041ee:	ee00 3a90 	vmov	s1, r3
 80041f2:	eeb0 0a48 	vmov.f32	s0, s16
 80041f6:	f000 febf 	bl	8004f78 <getAngleDiff>
 80041fa:	ee10 3a10 	vmov	r3, s0
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fc f9ca 	bl	8000598 <__aeabi_f2d>
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	4b52      	ldr	r3, [pc, #328]	; (8004354 <maintask_run+0x1b4>)
 800420a:	f7fc fa1d 	bl	8000648 <__aeabi_dmul>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4614      	mov	r4, r2
 8004214:	461d      	mov	r5, r3
 8004216:	4b4d      	ldr	r3, [pc, #308]	; (800434c <maintask_run+0x1ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fc f9bc 	bl	8000598 <__aeabi_f2d>
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	4b4a      	ldr	r3, [pc, #296]	; (8004350 <maintask_run+0x1b0>)
 8004226:	f7fc fb39 	bl	800089c <__aeabi_ddiv>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	a33f      	add	r3, pc, #252	; (adr r3, 8004330 <maintask_run+0x190>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f7fc fa06 	bl	8000648 <__aeabi_dmul>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	f7fc fcf8 	bl	8000c38 <__aeabi_d2f>
 8004248:	4606      	mov	r6, r0
 800424a:	4b43      	ldr	r3, [pc, #268]	; (8004358 <maintask_run+0x1b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7fc f9a2 	bl	8000598 <__aeabi_f2d>
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <maintask_run+0x1b0>)
 800425a:	f7fc fb1f 	bl	800089c <__aeabi_ddiv>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	a332      	add	r3, pc, #200	; (adr r3, 8004330 <maintask_run+0x190>)
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f7fc f9ec 	bl	8000648 <__aeabi_dmul>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	f7fc fcde 	bl	8000c38 <__aeabi_d2f>
 800427c:	4603      	mov	r3, r0
 800427e:	ee00 3a90 	vmov	s1, r3
 8004282:	ee00 6a10 	vmov	s0, r6
 8004286:	f000 fe77 	bl	8004f78 <getAngleDiff>
 800428a:	eef0 7a40 	vmov.f32	s15, s0
 800428e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800435c <maintask_run+0x1bc>
 8004292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004296:	ee17 0a90 	vmov	r0, s15
 800429a:	f7fc f97d 	bl	8000598 <__aeabi_f2d>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4620      	mov	r0, r4
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc f817 	bl	80002d8 <__aeabi_dsub>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	f7fc fcc1 	bl	8000c38 <__aeabi_d2f>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <maintask_run+0x1c0>)
 80042ba:	6013      	str	r3, [r2, #0]
	if (omega > 6 * M_PI)
 80042bc:	4b28      	ldr	r3, [pc, #160]	; (8004360 <maintask_run+0x1c0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f969 	bl	8000598 <__aeabi_f2d>
 80042c6:	a31c      	add	r3, pc, #112	; (adr r3, 8004338 <maintask_run+0x198>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fc fc4c 	bl	8000b68 <__aeabi_dcmpgt>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <maintask_run+0x13c>
	{
		omega = 6 * M_PI;
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <maintask_run+0x1c0>)
 80042d8:	4a22      	ldr	r2, [pc, #136]	; (8004364 <maintask_run+0x1c4>)
 80042da:	601a      	str	r2, [r3, #0]
	}
	if (omega < -6 * M_PI)
 80042dc:	4b20      	ldr	r3, [pc, #128]	; (8004360 <maintask_run+0x1c0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f959 	bl	8000598 <__aeabi_f2d>
 80042e6:	a316      	add	r3, pc, #88	; (adr r3, 8004340 <maintask_run+0x1a0>)
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f7fc fc1e 	bl	8000b2c <__aeabi_dcmplt>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <maintask_run+0x15c>
	{
		omega = -6 * M_PI;
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <maintask_run+0x1c0>)
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <maintask_run+0x1c8>)
 80042fa:	601a      	str	r2, [r3, #0]
	}
	// omega = 0;

	static int32_t pre_mouse_odom[2] = {0, 0};
	float mouse_vel[2];
	mouse_vel[0] = mouse_odom[0] - pre_mouse_odom[0];
 80042fc:	4b1b      	ldr	r3, [pc, #108]	; (800436c <maintask_run+0x1cc>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b1b      	ldr	r3, [pc, #108]	; (8004370 <maintask_run+0x1d0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800430e:	edc7 7a03 	vstr	s15, [r7, #12]
	mouse_vel[1] = mouse_odom[1] - pre_mouse_odom[1];
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <maintask_run+0x1cc>)
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <maintask_run+0x1d0>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004324:	edc7 7a04 	vstr	s15, [r7, #16]

	// 半回転3.14
	//

	for (int i = 0; i < 4; i++)
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	e049      	b.n	80043c2 <maintask_run+0x222>
 800432e:	bf00      	nop
 8004330:	54442d18 	.word	0x54442d18
 8004334:	400921fb 	.word	0x400921fb
 8004338:	7f3321d2 	.word	0x7f3321d2
 800433c:	4032d97c 	.word	0x4032d97c
 8004340:	7f3321d2 	.word	0x7f3321d2
 8004344:	c032d97c 	.word	0xc032d97c
 8004348:	20000760 	.word	0x20000760
 800434c:	200005d8 	.word	0x200005d8
 8004350:	40668000 	.word	0x40668000
 8004354:	404e0000 	.word	0x404e0000
 8004358:	200005c8 	.word	0x200005c8
 800435c:	44c80000 	.word	0x44c80000
 8004360:	20000750 	.word	0x20000750
 8004364:	4196cbe4 	.word	0x4196cbe4
 8004368:	c196cbe4 	.word	0xc196cbe4
 800436c:	20000770 	.word	0x20000770
 8004370:	20000af8 	.word	0x20000af8
	{
		omni_angle_diff[i] = getAngleDiff(motor_enc_angle[i], pre_motor_enc_angle[i]);
 8004374:	4ace      	ldr	r2, [pc, #824]	; (80046b0 <maintask_run+0x510>)
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	edd3 7a00 	vldr	s15, [r3]
 8004380:	4acc      	ldr	r2, [pc, #816]	; (80046b4 <maintask_run+0x514>)
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	ed93 7a00 	vldr	s14, [r3]
 800438c:	eef0 0a47 	vmov.f32	s1, s14
 8004390:	eeb0 0a67 	vmov.f32	s0, s15
 8004394:	f000 fdf0 	bl	8004f78 <getAngleDiff>
 8004398:	eef0 7a40 	vmov.f32	s15, s0
 800439c:	4ac6      	ldr	r2, [pc, #792]	; (80046b8 <maintask_run+0x518>)
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	edc3 7a00 	vstr	s15, [r3]
		pre_motor_enc_angle[i] = motor_enc_angle[i];
 80043a8:	4ac1      	ldr	r2, [pc, #772]	; (80046b0 <maintask_run+0x510>)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	49c0      	ldr	r1, [pc, #768]	; (80046b4 <maintask_run+0x514>)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	3301      	adds	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	ddd5      	ble.n	8004374 <maintask_run+0x1d4>
	}

	robot_rotation_adj = normalizeAngle(yaw_angle_rad - pre_yaw_angle_rad) * OMNI_ROTATION_LENGTH; // mm
 80043c8:	4bbc      	ldr	r3, [pc, #752]	; (80046bc <maintask_run+0x51c>)
 80043ca:	ed93 7a00 	vldr	s14, [r3]
 80043ce:	4bbc      	ldr	r3, [pc, #752]	; (80046c0 <maintask_run+0x520>)
 80043d0:	edd3 7a00 	vldr	s15, [r3]
 80043d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d8:	eeb0 0a67 	vmov.f32	s0, s15
 80043dc:	f000 fd78 	bl	8004ed0 <normalizeAngle>
 80043e0:	eef0 7a40 	vmov.f32	s15, s0
 80043e4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80046c4 <maintask_run+0x524>
 80043e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ec:	4bb6      	ldr	r3, [pc, #728]	; (80046c8 <maintask_run+0x528>)
 80043ee:	edc3 7a00 	vstr	s15, [r3]
	rotation_integral += robot_rotation_adj;
 80043f2:	4bb6      	ldr	r3, [pc, #728]	; (80046cc <maintask_run+0x52c>)
 80043f4:	ed93 7a00 	vldr	s14, [r3]
 80043f8:	4bb3      	ldr	r3, [pc, #716]	; (80046c8 <maintask_run+0x528>)
 80043fa:	edd3 7a00 	vldr	s15, [r3]
 80043fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004402:	4bb2      	ldr	r3, [pc, #712]	; (80046cc <maintask_run+0x52c>)
 8004404:	edc3 7a00 	vstr	s15, [r3]
	//

	// angleはradなので直径そのままかければいい
	omni_travel[0] = omni_angle_diff[1] * omni_diameter + robot_rotation_adj * 2;
 8004408:	4bab      	ldr	r3, [pc, #684]	; (80046b8 <maintask_run+0x518>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc f8c3 	bl	8000598 <__aeabi_f2d>
 8004412:	a3a1      	add	r3, pc, #644	; (adr r3, 8004698 <maintask_run+0x4f8>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fc f916 	bl	8000648 <__aeabi_dmul>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4614      	mov	r4, r2
 8004422:	461d      	mov	r5, r3
 8004424:	4ba8      	ldr	r3, [pc, #672]	; (80046c8 <maintask_run+0x528>)
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800442e:	ee17 0a90 	vmov	r0, s15
 8004432:	f7fc f8b1 	bl	8000598 <__aeabi_f2d>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4620      	mov	r0, r4
 800443c:	4629      	mov	r1, r5
 800443e:	f7fb ff4d 	bl	80002dc <__adddf3>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	f7fc fbf5 	bl	8000c38 <__aeabi_d2f>
 800444e:	4603      	mov	r3, r0
 8004450:	4a9f      	ldr	r2, [pc, #636]	; (80046d0 <maintask_run+0x530>)
 8004452:	6013      	str	r3, [r2, #0]
	omni_travel[1] = omni_angle_diff[2] * omni_diameter + robot_rotation_adj * 2;
 8004454:	4b98      	ldr	r3, [pc, #608]	; (80046b8 <maintask_run+0x518>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc f89d 	bl	8000598 <__aeabi_f2d>
 800445e:	a38e      	add	r3, pc, #568	; (adr r3, 8004698 <maintask_run+0x4f8>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f7fc f8f0 	bl	8000648 <__aeabi_dmul>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4614      	mov	r4, r2
 800446e:	461d      	mov	r5, r3
 8004470:	4b95      	ldr	r3, [pc, #596]	; (80046c8 <maintask_run+0x528>)
 8004472:	edd3 7a00 	vldr	s15, [r3]
 8004476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800447a:	ee17 0a90 	vmov	r0, s15
 800447e:	f7fc f88b 	bl	8000598 <__aeabi_f2d>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4620      	mov	r0, r4
 8004488:	4629      	mov	r1, r5
 800448a:	f7fb ff27 	bl	80002dc <__adddf3>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	f7fc fbcf 	bl	8000c38 <__aeabi_d2f>
 800449a:	4603      	mov	r3, r0
 800449c:	4a8c      	ldr	r2, [pc, #560]	; (80046d0 <maintask_run+0x530>)
 800449e:	6053      	str	r3, [r2, #4]
	spin_adjusted_result += (omni_travel[0] + omni_travel[1]) / 2;
 80044a0:	4b8b      	ldr	r3, [pc, #556]	; (80046d0 <maintask_run+0x530>)
 80044a2:	ed93 7a00 	vldr	s14, [r3]
 80044a6:	4b8a      	ldr	r3, [pc, #552]	; (80046d0 <maintask_run+0x530>)
 80044a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80044ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80044b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044b8:	4b86      	ldr	r3, [pc, #536]	; (80046d4 <maintask_run+0x534>)
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044c2:	4b84      	ldr	r3, [pc, #528]	; (80046d4 <maintask_run+0x534>)
 80044c4:	edc3 7a00 	vstr	s15, [r3]

	pre_omni_odom[0] = omni_odom[0];
 80044c8:	4b83      	ldr	r3, [pc, #524]	; (80046d8 <maintask_run+0x538>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a83      	ldr	r2, [pc, #524]	; (80046dc <maintask_run+0x53c>)
 80044ce:	6013      	str	r3, [r2, #0]
	pre_omni_odom[1] = omni_odom[1];
 80044d0:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <maintask_run+0x538>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a81      	ldr	r2, [pc, #516]	; (80046dc <maintask_run+0x53c>)
 80044d6:	6053      	str	r3, [r2, #4]
	// pre_yaw_angle_rad
	// 500Hzなので500で割る
	omni_odom[0] += (omni_travel[0] * cos(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * cos(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 80044d8:	4b7f      	ldr	r3, [pc, #508]	; (80046d8 <maintask_run+0x538>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fc f85b 	bl	8000598 <__aeabi_f2d>
 80044e2:	4604      	mov	r4, r0
 80044e4:	460d      	mov	r5, r1
 80044e6:	4b7a      	ldr	r3, [pc, #488]	; (80046d0 <maintask_run+0x530>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fc f854 	bl	8000598 <__aeabi_f2d>
 80044f0:	4680      	mov	r8, r0
 80044f2:	4689      	mov	r9, r1
 80044f4:	4b71      	ldr	r3, [pc, #452]	; (80046bc <maintask_run+0x51c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fc f84d 	bl	8000598 <__aeabi_f2d>
 80044fe:	a368      	add	r3, pc, #416	; (adr r3, 80046a0 <maintask_run+0x500>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fb feea 	bl	80002dc <__adddf3>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	ec43 2b17 	vmov	d7, r2, r3
 8004510:	eeb0 0a47 	vmov.f32	s0, s14
 8004514:	eef0 0a67 	vmov.f32	s1, s15
 8004518:	f00b ff46 	bl	80103a8 <cos>
 800451c:	ec53 2b10 	vmov	r2, r3, d0
 8004520:	4640      	mov	r0, r8
 8004522:	4649      	mov	r1, r9
 8004524:	f7fc f890 	bl	8000648 <__aeabi_dmul>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4692      	mov	sl, r2
 800452e:	469b      	mov	fp, r3
 8004530:	4b67      	ldr	r3, [pc, #412]	; (80046d0 <maintask_run+0x530>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc f82f 	bl	8000598 <__aeabi_f2d>
 800453a:	4680      	mov	r8, r0
 800453c:	4689      	mov	r9, r1
 800453e:	4b5f      	ldr	r3, [pc, #380]	; (80046bc <maintask_run+0x51c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc f828 	bl	8000598 <__aeabi_f2d>
 8004548:	a357      	add	r3, pc, #348	; (adr r3, 80046a8 <maintask_run+0x508>)
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f7fb fec5 	bl	80002dc <__adddf3>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	ec43 2b17 	vmov	d7, r2, r3
 800455a:	eeb0 0a47 	vmov.f32	s0, s14
 800455e:	eef0 0a67 	vmov.f32	s1, s15
 8004562:	f00b ff21 	bl	80103a8 <cos>
 8004566:	ec53 2b10 	vmov	r2, r3, d0
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fc f86b 	bl	8000648 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4650      	mov	r0, sl
 8004578:	4659      	mov	r1, fp
 800457a:	f7fb fead 	bl	80002d8 <__aeabi_dsub>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800458e:	f7fc f985 	bl	800089c <__aeabi_ddiv>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4620      	mov	r0, r4
 8004598:	4629      	mov	r1, r5
 800459a:	f7fb fe9f 	bl	80002dc <__adddf3>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fc fb47 	bl	8000c38 <__aeabi_d2f>
 80045aa:	4603      	mov	r3, r0
 80045ac:	4a4a      	ldr	r2, [pc, #296]	; (80046d8 <maintask_run+0x538>)
 80045ae:	6013      	str	r3, [r2, #0]
	omni_odom[1] += (omni_travel[0] * sin(yaw_angle_rad + M_PI * 3 / 4) - omni_travel[1] * sin(yaw_angle_rad + M_PI * 5 / 4)) / 2;
 80045b0:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <maintask_run+0x538>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb ffef 	bl	8000598 <__aeabi_f2d>
 80045ba:	4604      	mov	r4, r0
 80045bc:	460d      	mov	r5, r1
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <maintask_run+0x530>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fb ffe8 	bl	8000598 <__aeabi_f2d>
 80045c8:	4680      	mov	r8, r0
 80045ca:	4689      	mov	r9, r1
 80045cc:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <maintask_run+0x51c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ffe1 	bl	8000598 <__aeabi_f2d>
 80045d6:	a332      	add	r3, pc, #200	; (adr r3, 80046a0 <maintask_run+0x500>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f7fb fe7e 	bl	80002dc <__adddf3>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	ec43 2b17 	vmov	d7, r2, r3
 80045e8:	eeb0 0a47 	vmov.f32	s0, s14
 80045ec:	eef0 0a67 	vmov.f32	s1, s15
 80045f0:	f00b ff2e 	bl	8010450 <sin>
 80045f4:	ec53 2b10 	vmov	r2, r3, d0
 80045f8:	4640      	mov	r0, r8
 80045fa:	4649      	mov	r1, r9
 80045fc:	f7fc f824 	bl	8000648 <__aeabi_dmul>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4692      	mov	sl, r2
 8004606:	469b      	mov	fp, r3
 8004608:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <maintask_run+0x530>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fb ffc3 	bl	8000598 <__aeabi_f2d>
 8004612:	4680      	mov	r8, r0
 8004614:	4689      	mov	r9, r1
 8004616:	4b29      	ldr	r3, [pc, #164]	; (80046bc <maintask_run+0x51c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7fb ffbc 	bl	8000598 <__aeabi_f2d>
 8004620:	a321      	add	r3, pc, #132	; (adr r3, 80046a8 <maintask_run+0x508>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f7fb fe59 	bl	80002dc <__adddf3>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	ec43 2b17 	vmov	d7, r2, r3
 8004632:	eeb0 0a47 	vmov.f32	s0, s14
 8004636:	eef0 0a67 	vmov.f32	s1, s15
 800463a:	f00b ff09 	bl	8010450 <sin>
 800463e:	ec53 2b10 	vmov	r2, r3, d0
 8004642:	4640      	mov	r0, r8
 8004644:	4649      	mov	r1, r9
 8004646:	f7fb ffff 	bl	8000648 <__aeabi_dmul>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4650      	mov	r0, sl
 8004650:	4659      	mov	r1, fp
 8004652:	f7fb fe41 	bl	80002d8 <__aeabi_dsub>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004666:	f7fc f919 	bl	800089c <__aeabi_ddiv>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4620      	mov	r0, r4
 8004670:	4629      	mov	r1, r5
 8004672:	f7fb fe33 	bl	80002dc <__adddf3>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	f7fc fadb 	bl	8000c38 <__aeabi_d2f>
 8004682:	4603      	mov	r3, r0
 8004684:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <maintask_run+0x538>)
 8004686:	6053      	str	r3, [r2, #4]

	omni_odom_speed[0] = (omni_odom[0] - pre_omni_odom[0]);
 8004688:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <maintask_run+0x538>)
 800468a:	ed93 7a00 	vldr	s14, [r3]
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <maintask_run+0x53c>)
 8004690:	edd3 7a00 	vldr	s15, [r3]
 8004694:	e024      	b.n	80046e0 <maintask_run+0x540>
 8004696:	bf00      	nop
 8004698:	3126e979 	.word	0x3126e979
 800469c:	3facac08 	.word	0x3facac08
 80046a0:	7f3321d2 	.word	0x7f3321d2
 80046a4:	4002d97c 	.word	0x4002d97c
 80046a8:	2955385e 	.word	0x2955385e
 80046ac:	400f6a7a 	.word	0x400f6a7a
 80046b0:	200006b8 	.word	0x200006b8
 80046b4:	200006cc 	.word	0x200006cc
 80046b8:	200006e0 	.word	0x200006e0
 80046bc:	200005dc 	.word	0x200005dc
 80046c0:	20000b00 	.word	0x20000b00
 80046c4:	3d9b22d1 	.word	0x3d9b22d1
 80046c8:	2000067c 	.word	0x2000067c
 80046cc:	2000065c 	.word	0x2000065c
 80046d0:	20000664 	.word	0x20000664
 80046d4:	20000660 	.word	0x20000660
 80046d8:	20000778 	.word	0x20000778
 80046dc:	20000780 	.word	0x20000780
 80046e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e4:	4bbb      	ldr	r3, [pc, #748]	; (80049d4 <maintask_run+0x834>)
 80046e6:	edc3 7a00 	vstr	s15, [r3]
	omni_odom_speed[1] = (omni_odom[1] - pre_omni_odom[1]);
 80046ea:	4bbb      	ldr	r3, [pc, #748]	; (80049d8 <maintask_run+0x838>)
 80046ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80046f0:	4bba      	ldr	r3, [pc, #744]	; (80049dc <maintask_run+0x83c>)
 80046f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80046f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fa:	4bb6      	ldr	r3, [pc, #728]	; (80049d4 <maintask_run+0x834>)
 80046fc:	edc3 7a01 	vstr	s15, [r3, #4]

	static uint32_t odom_speed_index = 0;
	odom_speed_index++;
 8004700:	4bb7      	ldr	r3, [pc, #732]	; (80049e0 <maintask_run+0x840>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	4ab6      	ldr	r2, [pc, #728]	; (80049e0 <maintask_run+0x840>)
 8004708:	6013      	str	r3, [r2, #0]
	if (odom_speed_index > SPEED_LOG_BUF_SIZE)
 800470a:	4bb5      	ldr	r3, [pc, #724]	; (80049e0 <maintask_run+0x840>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d902      	bls.n	8004718 <maintask_run+0x578>
	{
		odom_speed_index = 0;
 8004712:	4bb3      	ldr	r3, [pc, #716]	; (80049e0 <maintask_run+0x840>)
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
	}
	omni_odom_speed_log[0][odom_speed_index] = omni_odom_speed[0];
 8004718:	4bb1      	ldr	r3, [pc, #708]	; (80049e0 <maintask_run+0x840>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4aad      	ldr	r2, [pc, #692]	; (80049d4 <maintask_run+0x834>)
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	49b0      	ldr	r1, [pc, #704]	; (80049e4 <maintask_run+0x844>)
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	601a      	str	r2, [r3, #0]
	omni_odom_speed_log[1][odom_speed_index] = omni_odom_speed[1];
 8004728:	4bad      	ldr	r3, [pc, #692]	; (80049e0 <maintask_run+0x840>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4aa9      	ldr	r2, [pc, #676]	; (80049d4 <maintask_run+0x834>)
 800472e:	6852      	ldr	r2, [r2, #4]
 8004730:	49ac      	ldr	r1, [pc, #688]	; (80049e4 <maintask_run+0x844>)
 8004732:	3364      	adds	r3, #100	; 0x64
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	601a      	str	r2, [r3, #0]

	// 500Hz, m/s -> m / cycle
	tar_vel[0] = 0.05;
 800473a:	4bab      	ldr	r3, [pc, #684]	; (80049e8 <maintask_run+0x848>)
 800473c:	4aab      	ldr	r2, [pc, #684]	; (80049ec <maintask_run+0x84c>)
 800473e:	601a      	str	r2, [r3, #0]
	tar_pos[0] += tar_vel[0] / 500;
 8004740:	4bab      	ldr	r3, [pc, #684]	; (80049f0 <maintask_run+0x850>)
 8004742:	ed93 7a00 	vldr	s14, [r3]
 8004746:	4ba8      	ldr	r3, [pc, #672]	; (80049e8 <maintask_run+0x848>)
 8004748:	edd3 6a00 	vldr	s13, [r3]
 800474c:	ed9f 6aa9 	vldr	s12, [pc, #676]	; 80049f4 <maintask_run+0x854>
 8004750:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004758:	4ba5      	ldr	r3, [pc, #660]	; (80049f0 <maintask_run+0x850>)
 800475a:	edc3 7a00 	vstr	s15, [r3]
	tar_pos[1] += tar_vel[1] / 500;
 800475e:	4ba4      	ldr	r3, [pc, #656]	; (80049f0 <maintask_run+0x850>)
 8004760:	ed93 7a01 	vldr	s14, [r3, #4]
 8004764:	4ba0      	ldr	r3, [pc, #640]	; (80049e8 <maintask_run+0x848>)
 8004766:	edd3 6a01 	vldr	s13, [r3, #4]
 800476a:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 80049f4 <maintask_run+0x854>
 800476e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004776:	4b9e      	ldr	r3, [pc, #632]	; (80049f0 <maintask_run+0x850>)
 8004778:	edc3 7a01 	vstr	s15, [r3, #4]

	// 絶対座標系
	floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 800477c:	4b96      	ldr	r3, [pc, #600]	; (80049d8 <maintask_run+0x838>)
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	4b9b      	ldr	r3, [pc, #620]	; (80049f0 <maintask_run+0x850>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800478c:	4b9a      	ldr	r3, [pc, #616]	; (80049f8 <maintask_run+0x858>)
 800478e:	edc3 7a00 	vstr	s15, [r3]
	floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 8004792:	4b91      	ldr	r3, [pc, #580]	; (80049d8 <maintask_run+0x838>)
 8004794:	ed93 7a01 	vldr	s14, [r3, #4]
 8004798:	4b95      	ldr	r3, [pc, #596]	; (80049f0 <maintask_run+0x850>)
 800479a:	edd3 7a01 	vldr	s15, [r3, #4]
 800479e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a2:	4b95      	ldr	r3, [pc, #596]	; (80049f8 <maintask_run+0x858>)
 80047a4:	edc3 7a01 	vstr	s15, [r3, #4]

	// ロボット座標系
	// X
	robot_pos_diff[0] = floor_odom_diff[0] * cos(yaw_angle_rad) + floor_odom_diff[1] * sin(yaw_angle_rad);
 80047a8:	4b93      	ldr	r3, [pc, #588]	; (80049f8 <maintask_run+0x858>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fb fef3 	bl	8000598 <__aeabi_f2d>
 80047b2:	4604      	mov	r4, r0
 80047b4:	460d      	mov	r5, r1
 80047b6:	4b91      	ldr	r3, [pc, #580]	; (80049fc <maintask_run+0x85c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fb feec 	bl	8000598 <__aeabi_f2d>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	ec43 2b10 	vmov	d0, r2, r3
 80047c8:	f00b fdee 	bl	80103a8 <cos>
 80047cc:	ec53 2b10 	vmov	r2, r3, d0
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fb ff38 	bl	8000648 <__aeabi_dmul>
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4690      	mov	r8, r2
 80047de:	4699      	mov	r9, r3
 80047e0:	4b85      	ldr	r3, [pc, #532]	; (80049f8 <maintask_run+0x858>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fb fed7 	bl	8000598 <__aeabi_f2d>
 80047ea:	4604      	mov	r4, r0
 80047ec:	460d      	mov	r5, r1
 80047ee:	4b83      	ldr	r3, [pc, #524]	; (80049fc <maintask_run+0x85c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fb fed0 	bl	8000598 <__aeabi_f2d>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	ec43 2b10 	vmov	d0, r2, r3
 8004800:	f00b fe26 	bl	8010450 <sin>
 8004804:	ec53 2b10 	vmov	r2, r3, d0
 8004808:	4620      	mov	r0, r4
 800480a:	4629      	mov	r1, r5
 800480c:	f7fb ff1c 	bl	8000648 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4640      	mov	r0, r8
 8004816:	4649      	mov	r1, r9
 8004818:	f7fb fd60 	bl	80002dc <__adddf3>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4610      	mov	r0, r2
 8004822:	4619      	mov	r1, r3
 8004824:	f7fc fa08 	bl	8000c38 <__aeabi_d2f>
 8004828:	4603      	mov	r3, r0
 800482a:	4a75      	ldr	r2, [pc, #468]	; (8004a00 <maintask_run+0x860>)
 800482c:	6013      	str	r3, [r2, #0]
	// Y
	robot_pos_diff[1] = floor_odom_diff[0] * sin(yaw_angle_rad) + floor_odom_diff[1] * cos(yaw_angle_rad);
 800482e:	4b72      	ldr	r3, [pc, #456]	; (80049f8 <maintask_run+0x858>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fb feb0 	bl	8000598 <__aeabi_f2d>
 8004838:	4604      	mov	r4, r0
 800483a:	460d      	mov	r5, r1
 800483c:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <maintask_run+0x85c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7fb fea9 	bl	8000598 <__aeabi_f2d>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	ec43 2b10 	vmov	d0, r2, r3
 800484e:	f00b fdff 	bl	8010450 <sin>
 8004852:	ec53 2b10 	vmov	r2, r3, d0
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fb fef5 	bl	8000648 <__aeabi_dmul>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4690      	mov	r8, r2
 8004864:	4699      	mov	r9, r3
 8004866:	4b64      	ldr	r3, [pc, #400]	; (80049f8 <maintask_run+0x858>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4618      	mov	r0, r3
 800486c:	f7fb fe94 	bl	8000598 <__aeabi_f2d>
 8004870:	4604      	mov	r4, r0
 8004872:	460d      	mov	r5, r1
 8004874:	4b61      	ldr	r3, [pc, #388]	; (80049fc <maintask_run+0x85c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7fb fe8d 	bl	8000598 <__aeabi_f2d>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	ec43 2b10 	vmov	d0, r2, r3
 8004886:	f00b fd8f 	bl	80103a8 <cos>
 800488a:	ec53 2b10 	vmov	r2, r3, d0
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fed9 	bl	8000648 <__aeabi_dmul>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4640      	mov	r0, r8
 800489c:	4649      	mov	r1, r9
 800489e:	f7fb fd1d 	bl	80002dc <__adddf3>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7fc f9c5 	bl	8000c38 <__aeabi_d2f>
 80048ae:	4603      	mov	r3, r0
 80048b0:	4a53      	ldr	r2, [pc, #332]	; (8004a00 <maintask_run+0x860>)
 80048b2:	6053      	str	r3, [r2, #4]
	float output_vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN * 1000;
 80048b4:	4b52      	ldr	r3, [pc, #328]	; (8004a00 <maintask_run+0x860>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fb fe6d 	bl	8000598 <__aeabi_f2d>
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <maintask_run+0x864>)
 80048c4:	f7fb fec0 	bl	8000648 <__aeabi_dmul>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	4b4c      	ldr	r3, [pc, #304]	; (8004a08 <maintask_run+0x868>)
 80048d6:	f7fb feb7 	bl	8000648 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	f7fc f9a9 	bl	8000c38 <__aeabi_d2f>
 80048e6:	4603      	mov	r3, r0
 80048e8:	623b      	str	r3, [r7, #32]
	float output_vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN * 1000;
 80048ea:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <maintask_run+0x860>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fb fe52 	bl	8000598 <__aeabi_f2d>
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	4b42      	ldr	r3, [pc, #264]	; (8004a04 <maintask_run+0x864>)
 80048fa:	f7fb fea5 	bl	8000648 <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <maintask_run+0x868>)
 800490c:	f7fb fe9c 	bl	8000648 <__aeabi_dmul>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	f7fc f98e 	bl	8000c38 <__aeabi_d2f>
 800491c:	4603      	mov	r3, r0
 800491e:	61fb      	str	r3, [r7, #28]
	//+target_move_speed * 2;

	float limit_gain = 0;
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
	if (output_vel_surge > OMNI_OUTPUT_LIMIT)
 8004926:	edd7 7a08 	vldr	s15, [r7, #32]
 800492a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800492e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004936:	dd13      	ble.n	8004960 <maintask_run+0x7c0>
	{
		limit_gain = output_vel_surge / OMNI_OUTPUT_LIMIT;
 8004938:	ed97 7a08 	vldr	s14, [r7, #32]
 800493c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004944:	edc7 7a06 	vstr	s15, [r7, #24]
		output_vel_surge = OMNI_OUTPUT_LIMIT;
 8004948:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800494c:	623b      	str	r3, [r7, #32]
		output_vel_sway /= limit_gain;
 800494e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004952:	ed97 7a06 	vldr	s14, [r7, #24]
 8004956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495a:	edc7 7a07 	vstr	s15, [r7, #28]
 800495e:	e01c      	b.n	800499a <maintask_run+0x7fa>
	}
	else if (output_vel_surge < -OMNI_OUTPUT_LIMIT)
 8004960:	edd7 7a08 	vldr	s15, [r7, #32]
 8004964:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8004968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800496c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004970:	d513      	bpl.n	800499a <maintask_run+0x7fa>
	{
		limit_gain = -output_vel_surge / OMNI_OUTPUT_LIMIT;
 8004972:	edd7 7a08 	vldr	s15, [r7, #32]
 8004976:	eeb1 7a67 	vneg.f32	s14, s15
 800497a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800497e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004982:	edc7 7a06 	vstr	s15, [r7, #24]
		output_vel_surge = -OMNI_OUTPUT_LIMIT;
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <maintask_run+0x86c>)
 8004988:	623b      	str	r3, [r7, #32]
		output_vel_sway /= limit_gain;
 800498a:	edd7 6a07 	vldr	s13, [r7, #28]
 800498e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if (output_vel_sway > OMNI_OUTPUT_LIMIT)
 800499a:	edd7 7a07 	vldr	s15, [r7, #28]
 800499e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80049a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	dd31      	ble.n	8004a10 <maintask_run+0x870>
	{
		limit_gain = output_vel_sway / OMNI_OUTPUT_LIMIT;
 80049ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80049b0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80049b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049b8:	edc7 7a06 	vstr	s15, [r7, #24]
		output_vel_sway = OMNI_OUTPUT_LIMIT;
 80049bc:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80049c0:	61fb      	str	r3, [r7, #28]
		output_vel_surge /= limit_gain;
 80049c2:	edd7 6a08 	vldr	s13, [r7, #32]
 80049c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80049ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ce:	edc7 7a08 	vstr	s15, [r7, #32]
 80049d2:	e03a      	b.n	8004a4a <maintask_run+0x8aa>
 80049d4:	20000788 	.word	0x20000788
 80049d8:	20000778 	.word	0x20000778
 80049dc:	20000780 	.word	0x20000780
 80049e0:	20000b04 	.word	0x20000b04
 80049e4:	20000790 	.word	0x20000790
 80049e8:	20000688 	.word	0x20000688
 80049ec:	3d4ccccd 	.word	0x3d4ccccd
 80049f0:	20000680 	.word	0x20000680
 80049f4:	43fa0000 	.word	0x43fa0000
 80049f8:	2000066c 	.word	0x2000066c
 80049fc:	200005dc 	.word	0x200005dc
 8004a00:	20000674 	.word	0x20000674
 8004a04:	bfe00000 	.word	0xbfe00000
 8004a08:	408f4000 	.word	0x408f4000
 8004a0c:	c0800000 	.word	0xc0800000
	}
	else if (output_vel_sway < -OMNI_OUTPUT_LIMIT)
 8004a10:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a14:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8004a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	d513      	bpl.n	8004a4a <maintask_run+0x8aa>
	{
		limit_gain = -output_vel_sway / OMNI_OUTPUT_LIMIT;
 8004a22:	edd7 7a07 	vldr	s15, [r7, #28]
 8004a26:	eeb1 7a67 	vneg.f32	s14, s15
 8004a2a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a32:	edc7 7a06 	vstr	s15, [r7, #24]
		output_vel_sway = -OMNI_OUTPUT_LIMIT;
 8004a36:	4b72      	ldr	r3, [pc, #456]	; (8004c00 <maintask_run+0xa60>)
 8004a38:	61fb      	str	r3, [r7, #28]
		output_vel_surge /= limit_gain;
 8004a3a:	edd7 6a08 	vldr	s13, [r7, #32]
 8004a3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a46:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	pre_mouse_odom[0] = mouse_odom[0];
 8004a4a:	4b6e      	ldr	r3, [pc, #440]	; (8004c04 <maintask_run+0xa64>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a6e      	ldr	r2, [pc, #440]	; (8004c08 <maintask_run+0xa68>)
 8004a50:	6013      	str	r3, [r2, #0]
	pre_mouse_odom[1] = mouse_odom[1];
 8004a52:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <maintask_run+0xa64>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	4a6c      	ldr	r2, [pc, #432]	; (8004c08 <maintask_run+0xa68>)
 8004a58:	6053      	str	r3, [r2, #4]
	pre_yaw_angle_rad = yaw_angle_rad;
 8004a5a:	4b6c      	ldr	r3, [pc, #432]	; (8004c0c <maintask_run+0xa6c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6c      	ldr	r2, [pc, #432]	; (8004c10 <maintask_run+0xa70>)
 8004a60:	6013      	str	r3, [r2, #0]
	moving_timeout++;
 8004a62:	4b6c      	ldr	r3, [pc, #432]	; (8004c14 <maintask_run+0xa74>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	4a6a      	ldr	r2, [pc, #424]	; (8004c14 <maintask_run+0xa74>)
 8004a6a:	6013      	str	r3, [r2, #0]
	if (moving_timeout < 5000)
 8004a6c:	4b69      	ldr	r3, [pc, #420]	; (8004c14 <maintask_run+0xa74>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f241 3287 	movw	r2, #4999	; 0x1387
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d80d      	bhi.n	8004a94 <maintask_run+0x8f4>
	{
		omni_move(output_vel_surge, output_vel_sway, omega, 1.0);
 8004a78:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <maintask_run+0xa78>)
 8004a7a:	edd3 7a00 	vldr	s15, [r3]
 8004a7e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004a82:	eeb0 1a67 	vmov.f32	s2, s15
 8004a86:	edd7 0a07 	vldr	s1, [r7, #28]
 8004a8a:	ed97 0a08 	vldr	s0, [r7, #32]
 8004a8e:	f000 fcff 	bl	8005490 <omni_move>
 8004a92:	e009      	b.n	8004aa8 <maintask_run+0x908>
	}
	else
	{

		omni_move(0, 0, 0, 1.0);
 8004a94:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004a98:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8004c1c <maintask_run+0xa7c>
 8004a9c:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8004c1c <maintask_run+0xa7c>
 8004aa0:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8004c1c <maintask_run+0xa7c>
 8004aa4:	f000 fcf4 	bl	8005490 <omni_move>
	}
	if (kick_power > 0)
 8004aa8:	4b5d      	ldr	r3, [pc, #372]	; (8004c20 <maintask_run+0xa80>)
 8004aaa:	edd3 7a00 	vldr	s15, [r3]
 8004aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab6:	dd39      	ble.n	8004b2c <maintask_run+0x98c>
	{
		if (ball[0] == 1)
 8004ab8:	4b5a      	ldr	r3, [pc, #360]	; (8004c24 <maintask_run+0xa84>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d122      	bne.n	8004b06 <maintask_run+0x966>
		{
			if (kick_state == 0)
 8004ac0:	4b59      	ldr	r3, [pc, #356]	; (8004c28 <maintask_run+0xa88>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11e      	bne.n	8004b06 <maintask_run+0x966>
			{
				uint8_t kick_power_param = (float)kick_power * 255.0;
 8004ac8:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <maintask_run+0xa80>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fb fd63 	bl	8000598 <__aeabi_f2d>
 8004ad2:	a349      	add	r3, pc, #292	; (adr r3, 8004bf8 <maintask_run+0xa58>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fdb6 	bl	8000648 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	f7fc f888 	bl	8000bf8 <__aeabi_d2uiz>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	75fb      	strb	r3, [r7, #23]
				printf(" kick=%d\r\n", kick_power_param);
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	4619      	mov	r1, r3
 8004af0:	484e      	ldr	r0, [pc, #312]	; (8004c2c <maintask_run+0xa8c>)
 8004af2:	f009 fba3 	bl	800e23c <iprintf>
				actuator_kicker(3, (uint8_t)kick_power_param);
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	4619      	mov	r1, r3
 8004afa:	2003      	movs	r0, #3
 8004afc:	f7fc fb7b 	bl	80011f6 <actuator_kicker>
				kick_state = 1;
 8004b00:	4b49      	ldr	r3, [pc, #292]	; (8004c28 <maintask_run+0xa88>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
			}
		}
		if (kick_state == 1)
 8004b06:	4b48      	ldr	r3, [pc, #288]	; (8004c28 <maintask_run+0xa88>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10e      	bne.n	8004b2c <maintask_run+0x98c>
		{
			kick_time++;
 8004b0e:	4b48      	ldr	r3, [pc, #288]	; (8004c30 <maintask_run+0xa90>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a46      	ldr	r2, [pc, #280]	; (8004c30 <maintask_run+0xa90>)
 8004b16:	6013      	str	r3, [r2, #0]
			if (kick_time > 100)
 8004b18:	4b45      	ldr	r3, [pc, #276]	; (8004c30 <maintask_run+0xa90>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b64      	cmp	r3, #100	; 0x64
 8004b1e:	dd05      	ble.n	8004b2c <maintask_run+0x98c>
			{
				kick_state = 0;
 8004b20:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <maintask_run+0xa88>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
				kick_time = 0;
 8004b26:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <maintask_run+0xa90>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if (chipEN == 1)
 8004b2c:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <maintask_run+0xa94>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d104      	bne.n	8004b3e <maintask_run+0x99e>
	{
		actuator_kicker(2, 1);
 8004b34:	2101      	movs	r1, #1
 8004b36:	2002      	movs	r0, #2
 8004b38:	f7fc fb5d 	bl	80011f6 <actuator_kicker>
 8004b3c:	e003      	b.n	8004b46 <maintask_run+0x9a6>
	}
	else
	{
		actuator_kicker(2, 0);
 8004b3e:	2100      	movs	r1, #0
 8004b40:	2002      	movs	r0, #2
 8004b42:	f7fc fb58 	bl	80011f6 <actuator_kicker>
	}
	actuator_kicker(1, 1);
 8004b46:	2101      	movs	r1, #1
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f7fc fb54 	bl	80011f6 <actuator_kicker>
	actuator_kicker_voltage(250.0);
 8004b4e:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8004c38 <maintask_run+0xa98>
 8004b52:	f7fc fb2f 	bl	80011b4 <actuator_kicker_voltage>

	actuator_motor5(drible_power, 1.0);
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <maintask_run+0xa9c>)
 8004b58:	edd3 7a00 	vldr	s15, [r3]
 8004b5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004b60:	eeb0 0a67 	vmov.f32	s0, s15
 8004b64:	f7fc faf6 	bl	8001154 <actuator_motor5>

	uint8_t yawAngle_send_low = ((int)yawAngle + 360) & 0x00FF;
 8004b68:	4b35      	ldr	r3, [pc, #212]	; (8004c40 <maintask_run+0xaa0>)
 8004b6a:	edd3 7a00 	vldr	s15, [r3]
 8004b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b72:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b76:	793b      	ldrb	r3, [r7, #4]
 8004b78:	3368      	adds	r3, #104	; 0x68
 8004b7a:	75bb      	strb	r3, [r7, #22]
	uint8_t yawAngle_send_high = (((int)yawAngle + 360) & 0xFF00) >> 8;
 8004b7c:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <maintask_run+0xaa0>)
 8004b7e:	edd3 7a00 	vldr	s15, [r3]
 8004b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b86:	ee17 3a90 	vmov	r3, s15
 8004b8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b8e:	121b      	asrs	r3, r3, #8
 8004b90:	757b      	strb	r3, [r7, #21]

	TX_data_UART[0] = 254;
 8004b92:	4b2c      	ldr	r3, [pc, #176]	; (8004c44 <maintask_run+0xaa4>)
 8004b94:	22fe      	movs	r2, #254	; 0xfe
 8004b96:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = (uint8_t)yawAngle_send_low;
 8004b98:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <maintask_run+0xaa4>)
 8004b9a:	7dbb      	ldrb	r3, [r7, #22]
 8004b9c:	7053      	strb	r3, [r2, #1]
	TX_data_UART[2] = (uint8_t)yawAngle_send_high;
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <maintask_run+0xaa4>)
 8004ba0:	7d7b      	ldrb	r3, [r7, #21]
 8004ba2:	7093      	strb	r3, [r2, #2]
	TX_data_UART[3] = ball[0];
 8004ba4:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <maintask_run+0xa84>)
 8004ba6:	781a      	ldrb	r2, [r3, #0]
 8004ba8:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <maintask_run+0xaa4>)
 8004baa:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = ball[1];
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <maintask_run+0xa84>)
 8004bae:	785a      	ldrb	r2, [r3, #1]
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <maintask_run+0xaa4>)
 8004bb2:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = chipEN;
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <maintask_run+0xa94>)
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <maintask_run+0xaa4>)
 8004bba:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = kick_state;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <maintask_run+0xa88>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <maintask_run+0xaa4>)
 8004bc4:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = (uint8_t)Power_voltage[4];
 8004bc6:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <maintask_run+0xaa8>)
 8004bc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8004bd4:	793b      	ldrb	r3, [r7, #4]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <maintask_run+0xaa4>)
 8004bda:	71da      	strb	r2, [r3, #7]
	// HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);

	pre_yaw_angle = yawAngle;
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <maintask_run+0xaa0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <maintask_run+0xaac>)
 8004be2:	6013      	str	r3, [r2, #0]
}
 8004be4:	bf00      	nop
 8004be6:	372c      	adds	r7, #44	; 0x2c
 8004be8:	46bd      	mov	sp, r7
 8004bea:	ecbd 8b02 	vpop	{d8}
 8004bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf2:	bf00      	nop
 8004bf4:	f3af 8000 	nop.w
 8004bf8:	00000000 	.word	0x00000000
 8004bfc:	406fe000 	.word	0x406fe000
 8004c00:	c0800000 	.word	0xc0800000
 8004c04:	20000770 	.word	0x20000770
 8004c08:	20000af8 	.word	0x20000af8
 8004c0c:	200005dc 	.word	0x200005dc
 8004c10:	20000b00 	.word	0x20000b00
 8004c14:	20000b08 	.word	0x20000b08
 8004c18:	20000750 	.word	0x20000750
 8004c1c:	00000000 	.word	0x00000000
 8004c20:	20000758 	.word	0x20000758
 8004c24:	20000768 	.word	0x20000768
 8004c28:	2000062c 	.word	0x2000062c
 8004c2c:	080115d0 	.word	0x080115d0
 8004c30:	20000630 	.word	0x20000630
 8004c34:	20000764 	.word	0x20000764
 8004c38:	437a0000 	.word	0x437a0000
 8004c3c:	20000754 	.word	0x20000754
 8004c40:	200005d8 	.word	0x200005d8
 8004c44:	20000644 	.word	0x20000644
 8004c48:	20000704 	.word	0x20000704
 8004c4c:	200005c8 	.word	0x200005c8

08004c50 <maintask_emargency>:

void maintask_emargency()
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
	actuator_motor1(0.0, 0.0);
 8004c56:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8004d0c <maintask_emargency+0xbc>
 8004c5a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004d0c <maintask_emargency+0xbc>
 8004c5e:	f7fc f9b9 	bl	8000fd4 <actuator_motor1>
	actuator_motor2(0.0, 0.0);
 8004c62:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8004d0c <maintask_emargency+0xbc>
 8004c66:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8004d0c <maintask_emargency+0xbc>
 8004c6a:	f7fc f9e3 	bl	8001034 <actuator_motor2>
	actuator_motor3(0.0, 0.0);
 8004c6e:	eddf 0a27 	vldr	s1, [pc, #156]	; 8004d0c <maintask_emargency+0xbc>
 8004c72:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8004d0c <maintask_emargency+0xbc>
 8004c76:	f7fc fa0d 	bl	8001094 <actuator_motor3>
	actuator_motor4(0.0, 0.0);
 8004c7a:	eddf 0a24 	vldr	s1, [pc, #144]	; 8004d0c <maintask_emargency+0xbc>
 8004c7e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004d0c <maintask_emargency+0xbc>
 8004c82:	f7fc fa37 	bl	80010f4 <actuator_motor4>
	actuator_motor5(0.0, 0.0);
 8004c86:	eddf 0a21 	vldr	s1, [pc, #132]	; 8004d0c <maintask_emargency+0xbc>
 8004c8a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004d0c <maintask_emargency+0xbc>
 8004c8e:	f7fc fa61 	bl	8001154 <actuator_motor5>

	TX_data_UART[0] = 254;
 8004c92:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <maintask_emargency+0xc0>)
 8004c94:	22fe      	movs	r2, #254	; 0xfe
 8004c96:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = error_No[0];
 8004c98:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <maintask_emargency+0xc4>)
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <maintask_emargency+0xc0>)
 8004c9e:	705a      	strb	r2, [r3, #1]
	TX_data_UART[2] = error_No[1];
 8004ca0:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <maintask_emargency+0xc4>)
 8004ca2:	785a      	ldrb	r2, [r3, #1]
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <maintask_emargency+0xc0>)
 8004ca6:	709a      	strb	r2, [r3, #2]
	TX_data_UART[3] = error_No[2];
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <maintask_emargency+0xc4>)
 8004caa:	789a      	ldrb	r2, [r3, #2]
 8004cac:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <maintask_emargency+0xc0>)
 8004cae:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = error_No[3];
 8004cb0:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <maintask_emargency+0xc4>)
 8004cb2:	78da      	ldrb	r2, [r3, #3]
 8004cb4:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <maintask_emargency+0xc0>)
 8004cb6:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = 252;
 8004cb8:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <maintask_emargency+0xc0>)
 8004cba:	22fc      	movs	r2, #252	; 0xfc
 8004cbc:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = 122;
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <maintask_emargency+0xc0>)
 8004cc0:	227a      	movs	r2, #122	; 0x7a
 8004cc2:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = 200;
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <maintask_emargency+0xc0>)
 8004cc6:	22c8      	movs	r2, #200	; 0xc8
 8004cc8:	71da      	strb	r2, [r3, #7]
	// HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);

	actuator_buzzer(150, 150);
 8004cca:	2196      	movs	r1, #150	; 0x96
 8004ccc:	2096      	movs	r0, #150	; 0x96
 8004cce:	f7fc fadf 	bl	8001290 <actuator_buzzer>

	uint8_t senddata_error[8];

	can1_send(0x000, senddata_error);
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f7fc fdf6 	bl	80018c8 <can1_send>
	can2_send(0x000, senddata_error);
 8004cdc:	463b      	mov	r3, r7
 8004cde:	4619      	mov	r1, r3
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7fc fe51 	bl	8001988 <can2_send>

	actuator_kicker(1, 0);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	2001      	movs	r0, #1
 8004cea:	f7fc fa84 	bl	80011f6 <actuator_kicker>
	actuator_kicker_voltage(0.0);
 8004cee:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004d0c <maintask_emargency+0xbc>
 8004cf2:	f7fc fa5f 	bl	80011b4 <actuator_kicker_voltage>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cfc:	4806      	ldr	r0, [pc, #24]	; (8004d18 <maintask_emargency+0xc8>)
 8004cfe:	f004 fa4b 	bl	8009198 <HAL_GPIO_WritePin>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	20000644 	.word	0x20000644
 8004d14:	20000ab0 	.word	0x20000ab0
 8004d18:	48000400 	.word	0x48000400

08004d1c <maintask_state_stop>:

void maintask_state_stop()
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0

	uint8_t yawAngle_send_low = ((int)yawAngle + 360) & 0x00FF;
 8004d22:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <maintask_state_stop+0xac>)
 8004d24:	edd3 7a00 	vldr	s15, [r3]
 8004d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004d30:	793b      	ldrb	r3, [r7, #4]
 8004d32:	3368      	adds	r3, #104	; 0x68
 8004d34:	73fb      	strb	r3, [r7, #15]
	uint8_t yawAngle_send_high = (((int)yawAngle + 360) & 0xFF00) >> 8;
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <maintask_state_stop+0xac>)
 8004d38:	edd3 7a00 	vldr	s15, [r3]
 8004d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d40:	ee17 3a90 	vmov	r3, s15
 8004d44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d48:	121b      	asrs	r3, r3, #8
 8004d4a:	73bb      	strb	r3, [r7, #14]

	omni_move(0.0, 0.0, 0.0, 0.0);
 8004d4c:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8004dcc <maintask_state_stop+0xb0>
 8004d50:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004dcc <maintask_state_stop+0xb0>
 8004d54:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004dcc <maintask_state_stop+0xb0>
 8004d58:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8004dcc <maintask_state_stop+0xb0>
 8004d5c:	f000 fb98 	bl	8005490 <omni_move>
	actuator_motor5(0.0, 0.0);
 8004d60:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8004dcc <maintask_state_stop+0xb0>
 8004d64:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8004dcc <maintask_state_stop+0xb0>
 8004d68:	f7fc f9f4 	bl	8001154 <actuator_motor5>

	TX_data_UART[0] = 254;
 8004d6c:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004d6e:	22fe      	movs	r2, #254	; 0xfe
 8004d70:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = (uint8_t)yawAngle_send_low;
 8004d72:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	7053      	strb	r3, [r2, #1]
	TX_data_UART[2] = (uint8_t)yawAngle_send_high;
 8004d78:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004d7a:	7bbb      	ldrb	r3, [r7, #14]
 8004d7c:	7093      	strb	r3, [r2, #2]
	TX_data_UART[3] = error_No[0];
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <maintask_state_stop+0xb8>)
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004d84:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = error_No[1];
 8004d86:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <maintask_state_stop+0xb8>)
 8004d88:	785a      	ldrb	r2, [r3, #1]
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004d8c:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = 1;
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = 1;
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = (uint8_t)Power_voltage[4];
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <maintask_state_stop+0xbc>)
 8004d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da4:	edc7 7a01 	vstr	s15, [r7, #4]
 8004da8:	793b      	ldrb	r3, [r7, #4]
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <maintask_state_stop+0xb4>)
 8004dae:	71da      	strb	r2, [r3, #7]
	// HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);

	actuator_kicker(1, 0);
 8004db0:	2100      	movs	r1, #0
 8004db2:	2001      	movs	r0, #1
 8004db4:	f7fc fa1f 	bl	80011f6 <actuator_kicker>
	actuator_kicker_voltage(0.0);
 8004db8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004dcc <maintask_state_stop+0xb0>
 8004dbc:	f7fc f9fa 	bl	80011b4 <actuator_kicker_voltage>
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200005d8 	.word	0x200005d8
 8004dcc:	00000000 	.word	0x00000000
 8004dd0:	20000644 	.word	0x20000644
 8004dd4:	20000ab0 	.word	0x20000ab0
 8004dd8:	20000704 	.word	0x20000704

08004ddc <maintask_stop>:

void maintask_stop()
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
	omni_move(0.0, 0.0, 0.0, 0.0);
 8004de2:	eddf 1a34 	vldr	s3, [pc, #208]	; 8004eb4 <maintask_stop+0xd8>
 8004de6:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004eb4 <maintask_stop+0xd8>
 8004dea:	eddf 0a32 	vldr	s1, [pc, #200]	; 8004eb4 <maintask_stop+0xd8>
 8004dee:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004eb4 <maintask_stop+0xd8>
 8004df2:	f000 fb4d 	bl	8005490 <omni_move>
	actuator_motor5(0.0, 0.0);
 8004df6:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8004eb4 <maintask_stop+0xd8>
 8004dfa:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004eb4 <maintask_stop+0xd8>
 8004dfe:	f7fc f9a9 	bl	8001154 <actuator_motor5>

	uint8_t yawAngle_send_low = ((int)yawAngle + 360) & 0x00FF;
 8004e02:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <maintask_stop+0xdc>)
 8004e04:	edd3 7a00 	vldr	s15, [r3]
 8004e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004e10:	793b      	ldrb	r3, [r7, #4]
 8004e12:	3368      	adds	r3, #104	; 0x68
 8004e14:	73fb      	strb	r3, [r7, #15]
	uint8_t yawAngle_send_high = (((int)yawAngle + 360) & 0xFF00) >> 8;
 8004e16:	4b28      	ldr	r3, [pc, #160]	; (8004eb8 <maintask_stop+0xdc>)
 8004e18:	edd3 7a00 	vldr	s15, [r3]
 8004e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e20:	ee17 3a90 	vmov	r3, s15
 8004e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e28:	121b      	asrs	r3, r3, #8
 8004e2a:	73bb      	strb	r3, [r7, #14]

	omni_move(0.0, 0.0, 0.0, 0.0);
 8004e2c:	eddf 1a21 	vldr	s3, [pc, #132]	; 8004eb4 <maintask_stop+0xd8>
 8004e30:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8004eb4 <maintask_stop+0xd8>
 8004e34:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004eb4 <maintask_stop+0xd8>
 8004e38:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004eb4 <maintask_stop+0xd8>
 8004e3c:	f000 fb28 	bl	8005490 <omni_move>
	actuator_motor5(0.0, 0.0);
 8004e40:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004eb4 <maintask_stop+0xd8>
 8004e44:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8004eb4 <maintask_stop+0xd8>
 8004e48:	f7fc f984 	bl	8001154 <actuator_motor5>

	TX_data_UART[0] = 254;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <maintask_stop+0xe0>)
 8004e4e:	22fe      	movs	r2, #254	; 0xfe
 8004e50:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = (uint8_t)yawAngle_send_low;
 8004e52:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <maintask_stop+0xe0>)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	7053      	strb	r3, [r2, #1]
	TX_data_UART[2] = (uint8_t)yawAngle_send_high;
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <maintask_stop+0xe0>)
 8004e5a:	7bbb      	ldrb	r3, [r7, #14]
 8004e5c:	7093      	strb	r3, [r2, #2]
	TX_data_UART[3] = error_No[0];
 8004e5e:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <maintask_stop+0xe4>)
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <maintask_stop+0xe0>)
 8004e64:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = error_No[1];
 8004e66:	4b16      	ldr	r3, [pc, #88]	; (8004ec0 <maintask_stop+0xe4>)
 8004e68:	785a      	ldrb	r2, [r3, #1]
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <maintask_stop+0xe0>)
 8004e6c:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = 0;
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <maintask_stop+0xe0>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = 0;
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <maintask_stop+0xe0>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = (uint8_t)Power_voltage[4];
 8004e7a:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <maintask_stop+0xe8>)
 8004e7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e84:	edc7 7a01 	vstr	s15, [r7, #4]
 8004e88:	793b      	ldrb	r3, [r7, #4]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <maintask_stop+0xe0>)
 8004e8e:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);
 8004e90:	23ff      	movs	r3, #255	; 0xff
 8004e92:	2208      	movs	r2, #8
 8004e94:	4909      	ldr	r1, [pc, #36]	; (8004ebc <maintask_stop+0xe0>)
 8004e96:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <maintask_stop+0xec>)
 8004e98:	f007 f83a 	bl	800bf10 <HAL_UART_Transmit>

	actuator_kicker(1, 0);
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f7fc f9a9 	bl	80011f6 <actuator_kicker>
	actuator_kicker_voltage(0.0);
 8004ea4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004eb4 <maintask_stop+0xd8>
 8004ea8:	f7fc f984 	bl	80011b4 <actuator_kicker_voltage>
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	00000000 	.word	0x00000000
 8004eb8:	200005d8 	.word	0x200005d8
 8004ebc:	20000644 	.word	0x20000644
 8004ec0:	20000ab0 	.word	0x20000ab0
 8004ec4:	20000704 	.word	0x20000704
 8004ec8:	20000c98 	.word	0x20000c98
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <normalizeAngle>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float normalizeAngle(float angle_rad)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	ed87 0a01 	vstr	s0, [r7, #4]
	while (angle_rad > M_PI)
 8004eda:	e00f      	b.n	8004efc <normalizeAngle+0x2c>
	{
		angle_rad -= 2.0f * M_PI;
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7fb fb5b 	bl	8000598 <__aeabi_f2d>
 8004ee2:	a31f      	add	r3, pc, #124	; (adr r3, 8004f60 <normalizeAngle+0x90>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f7fb f9f6 	bl	80002d8 <__aeabi_dsub>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	f7fb fea0 	bl	8000c38 <__aeabi_d2f>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	607b      	str	r3, [r7, #4]
	while (angle_rad > M_PI)
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fb fb4b 	bl	8000598 <__aeabi_f2d>
 8004f02:	a319      	add	r3, pc, #100	; (adr r3, 8004f68 <normalizeAngle+0x98>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f7fb fe2e 	bl	8000b68 <__aeabi_dcmpgt>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e4      	bne.n	8004edc <normalizeAngle+0xc>
	}
	while (angle_rad < -M_PI)
 8004f12:	e00f      	b.n	8004f34 <normalizeAngle+0x64>
	{
		angle_rad += 2.0f * M_PI;
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fb fb3f 	bl	8000598 <__aeabi_f2d>
 8004f1a:	a311      	add	r3, pc, #68	; (adr r3, 8004f60 <normalizeAngle+0x90>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f7fb f9dc 	bl	80002dc <__adddf3>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	f7fb fe84 	bl	8000c38 <__aeabi_d2f>
 8004f30:	4603      	mov	r3, r0
 8004f32:	607b      	str	r3, [r7, #4]
	while (angle_rad < -M_PI)
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fb fb2f 	bl	8000598 <__aeabi_f2d>
 8004f3a:	a30d      	add	r3, pc, #52	; (adr r3, 8004f70 <normalizeAngle+0xa0>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb fdf4 	bl	8000b2c <__aeabi_dcmplt>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e4      	bne.n	8004f14 <normalizeAngle+0x44>
	}
	return angle_rad;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	ee07 3a90 	vmov	s15, r3
}
 8004f50:	eeb0 0a67 	vmov.f32	s0, s15
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	f3af 8000 	nop.w
 8004f60:	54442d18 	.word	0x54442d18
 8004f64:	401921fb 	.word	0x401921fb
 8004f68:	54442d18 	.word	0x54442d18
 8004f6c:	400921fb 	.word	0x400921fb
 8004f70:	54442d18 	.word	0x54442d18
 8004f74:	c00921fb 	.word	0xc00921fb

08004f78 <getAngleDiff>:

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8004f78:	b5b0      	push	{r4, r5, r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004f82:	edc7 0a00 	vstr	s1, [r7]
	angle_rad1 = normalizeAngle(angle_rad1);
 8004f86:	ed97 0a01 	vldr	s0, [r7, #4]
 8004f8a:	f7ff ffa1 	bl	8004ed0 <normalizeAngle>
 8004f8e:	ed87 0a01 	vstr	s0, [r7, #4]
	angle_rad2 = normalizeAngle(angle_rad2);
 8004f92:	ed97 0a00 	vldr	s0, [r7]
 8004f96:	f7ff ff9b 	bl	8004ed0 <normalizeAngle>
 8004f9a:	ed87 0a00 	vstr	s0, [r7]
	if (abs(angle_rad1 - angle_rad2) > M_PI)
 8004f9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004fa2:	edd7 7a00 	vldr	s15, [r7]
 8004fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fae:	ee17 3a90 	vmov	r3, s15
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bfb8      	it	lt
 8004fb6:	425b      	neglt	r3, r3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	dd40      	ble.n	800503e <getAngleDiff+0xc6>
	{
		if (angle_rad1 > angle_rad2)
 8004fbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004fc0:	edd7 7a00 	vldr	s15, [r7]
 8004fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fcc:	dd1a      	ble.n	8005004 <getAngleDiff+0x8c>
		{
			return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fb fae2 	bl	8000598 <__aeabi_f2d>
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	460d      	mov	r5, r1
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	f7fb fadd 	bl	8000598 <__aeabi_f2d>
 8004fde:	a320      	add	r3, pc, #128	; (adr r3, 8005060 <getAngleDiff+0xe8>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb f97a 	bl	80002dc <__adddf3>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4620      	mov	r0, r4
 8004fee:	4629      	mov	r1, r5
 8004ff0:	f7fb f972 	bl	80002d8 <__aeabi_dsub>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f7fb fe1c 	bl	8000c38 <__aeabi_d2f>
 8005000:	4603      	mov	r3, r0
 8005002:	e024      	b.n	800504e <getAngleDiff+0xd6>
		}
		else
		{
			return (angle_rad1 + 2 * M_PI) - angle_rad2;
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fb fac7 	bl	8000598 <__aeabi_f2d>
 800500a:	a315      	add	r3, pc, #84	; (adr r3, 8005060 <getAngleDiff+0xe8>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb f964 	bl	80002dc <__adddf3>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4614      	mov	r4, r2
 800501a:	461d      	mov	r5, r3
 800501c:	6838      	ldr	r0, [r7, #0]
 800501e:	f7fb fabb 	bl	8000598 <__aeabi_f2d>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f7fb f955 	bl	80002d8 <__aeabi_dsub>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4610      	mov	r0, r2
 8005034:	4619      	mov	r1, r3
 8005036:	f7fb fdff 	bl	8000c38 <__aeabi_d2f>
 800503a:	4603      	mov	r3, r0
 800503c:	e007      	b.n	800504e <getAngleDiff+0xd6>
		}
	}
	else
	{
		return angle_rad1 - angle_rad2;
 800503e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005042:	edd7 7a00 	vldr	s15, [r7]
 8005046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800504a:	ee17 3a90 	vmov	r3, s15
	}
}
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eeb0 0a67 	vmov.f32	s0, s15
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bdb0      	pop	{r4, r5, r7, pc}
 800505c:	f3af 8000 	nop.w
 8005060:	54442d18 	.word	0x54442d18
 8005064:	401921fb 	.word	0x401921fb

08005068 <decode_SW>:

uint8_t decode_SW(uint16_t SW_data)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
	int data;
	if (SW_data < 100)
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	2b63      	cmp	r3, #99	; 0x63
 8005076:	d802      	bhi.n	800507e <decode_SW+0x16>
	{
		data = 0b00010000; // C
 8005078:	2310      	movs	r3, #16
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e02e      	b.n	80050dc <decode_SW+0x74>
	}
	else if (SW_data < 500 && SW_data > 100)
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005084:	d205      	bcs.n	8005092 <decode_SW+0x2a>
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	2b64      	cmp	r3, #100	; 0x64
 800508a:	d902      	bls.n	8005092 <decode_SW+0x2a>
	{
		data = 0b00000010; // B
 800508c:	2302      	movs	r3, #2
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e024      	b.n	80050dc <decode_SW+0x74>
	}
	else if (SW_data < 2000 && SW_data > 500)
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005098:	d206      	bcs.n	80050a8 <decode_SW+0x40>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050a0:	d902      	bls.n	80050a8 <decode_SW+0x40>
	{
		data = 0b00000100; // R
 80050a2:	2304      	movs	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e019      	b.n	80050dc <decode_SW+0x74>
	}
	else if (SW_data < 3000 && SW_data > 2000)
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d806      	bhi.n	80050c0 <decode_SW+0x58>
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050b8:	d902      	bls.n	80050c0 <decode_SW+0x58>
	{
		data = 0b00000001; // F
 80050ba:	2301      	movs	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e00d      	b.n	80050dc <decode_SW+0x74>
	}
	else if (SW_data < 4000 && SW_data > 3000)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80050c6:	d207      	bcs.n	80050d8 <decode_SW+0x70>
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d902      	bls.n	80050d8 <decode_SW+0x70>
	{
		data = 0b00001000; // L
 80050d2:	2308      	movs	r3, #8
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e001      	b.n	80050dc <decode_SW+0x74>
	}
	else
	{
		data = 0b00000000;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	b2db      	uxtb	r3, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	0000      	movs	r0, r0
	...

080050f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_Ether[j] != 254 && j < sizeof(Rxbuf_from_Ether))
 80050fc:	e002      	b.n	8005104 <HAL_UART_RxCpltCallback+0x14>
	{
		j++;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	3301      	adds	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_Ether[j] != 254 && j < sizeof(Rxbuf_from_Ether))
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	4aa4      	ldr	r2, [pc, #656]	; (8005398 <HAL_UART_RxCpltCallback+0x2a8>)
 8005108:	5cd3      	ldrb	r3, [r2, r3]
 800510a:	2bfe      	cmp	r3, #254	; 0xfe
 800510c:	d002      	beq.n	8005114 <HAL_UART_RxCpltCallback+0x24>
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b0d      	cmp	r3, #13
 8005112:	d9f4      	bls.n	80050fe <HAL_UART_RxCpltCallback+0xe>
	}
	if (j >= sizeof(Rxbuf_from_Ether))
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b0d      	cmp	r3, #13
 8005118:	d90d      	bls.n	8005136 <HAL_UART_RxCpltCallback+0x46>
	{
		for (uint8_t k = 0; k < (sizeof(data_from_ether)); k++)
 800511a:	2300      	movs	r3, #0
 800511c:	73bb      	strb	r3, [r7, #14]
 800511e:	e006      	b.n	800512e <HAL_UART_RxCpltCallback+0x3e>
		{
			data_from_ether[k] = 0;
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	4a9e      	ldr	r2, [pc, #632]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 8005124:	2100      	movs	r1, #0
 8005126:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < (sizeof(data_from_ether)); k++)
 8005128:	7bbb      	ldrb	r3, [r7, #14]
 800512a:	3301      	adds	r3, #1
 800512c:	73bb      	strb	r3, [r7, #14]
 800512e:	7bbb      	ldrb	r3, [r7, #14]
 8005130:	2b0c      	cmp	r3, #12
 8005132:	d9f5      	bls.n	8005120 <HAL_UART_RxCpltCallback+0x30>
 8005134:	e021      	b.n	800517a <HAL_UART_RxCpltCallback+0x8a>
		}
	}
	else
	{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8005136:	2300      	movs	r3, #0
 8005138:	737b      	strb	r3, [r7, #13]
 800513a:	e01b      	b.n	8005174 <HAL_UART_RxCpltCallback+0x84>
		{
			if ((j + k) >= sizeof(data_from_ether))
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	7b7b      	ldrb	r3, [r7, #13]
 8005140:	4413      	add	r3, r2
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d90a      	bls.n	800515c <HAL_UART_RxCpltCallback+0x6c>
			{
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8005146:	7b7a      	ldrb	r2, [r7, #13]
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	4413      	add	r3, r2
 800514c:	f1a3 020d 	sub.w	r2, r3, #13
 8005150:	7b7b      	ldrb	r3, [r7, #13]
 8005152:	4991      	ldr	r1, [pc, #580]	; (8005398 <HAL_UART_RxCpltCallback+0x2a8>)
 8005154:	5c89      	ldrb	r1, [r1, r2]
 8005156:	4a91      	ldr	r2, [pc, #580]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 8005158:	54d1      	strb	r1, [r2, r3]
 800515a:	e008      	b.n	800516e <HAL_UART_RxCpltCallback+0x7e>
			}
			else
			{
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	7b7b      	ldrb	r3, [r7, #13]
 8005160:	4413      	add	r3, r2
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	7b7b      	ldrb	r3, [r7, #13]
 8005166:	498c      	ldr	r1, [pc, #560]	; (8005398 <HAL_UART_RxCpltCallback+0x2a8>)
 8005168:	5c89      	ldrb	r1, [r1, r2]
 800516a:	4a8c      	ldr	r2, [pc, #560]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800516c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 800516e:	7b7b      	ldrb	r3, [r7, #13]
 8005170:	3301      	adds	r3, #1
 8005172:	737b      	strb	r3, [r7, #13]
 8005174:	7b7b      	ldrb	r3, [r7, #13]
 8005176:	2b0c      	cmp	r3, #12
 8005178:	d9e0      	bls.n	800513c <HAL_UART_RxCpltCallback+0x4c>
			}
		}
	}
	if (data_from_ether[sizeof(data_from_ether) - 1] == 253)
 800517a:	4b88      	ldr	r3, [pc, #544]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800517c:	7b1b      	ldrb	r3, [r3, #12]
 800517e:	2bfd      	cmp	r3, #253	; 0xfd
 8005180:	d10f      	bne.n	80051a2 <HAL_UART_RxCpltCallback+0xb2>
	{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8005182:	2300      	movs	r3, #0
 8005184:	733b      	strb	r3, [r7, #12]
 8005186:	e008      	b.n	800519a <HAL_UART_RxCpltCallback+0xaa>
		{
			Rxbuf_from_Ether_temp[k] = data_from_ether[k];
 8005188:	7b3a      	ldrb	r2, [r7, #12]
 800518a:	7b3b      	ldrb	r3, [r7, #12]
 800518c:	4983      	ldr	r1, [pc, #524]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800518e:	5c89      	ldrb	r1, [r1, r2]
 8005190:	4a83      	ldr	r2, [pc, #524]	; (80053a0 <HAL_UART_RxCpltCallback+0x2b0>)
 8005192:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8005194:	7b3b      	ldrb	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	733b      	strb	r3, [r7, #12]
 800519a:	7b3b      	ldrb	r3, [r7, #12]
 800519c:	2b0c      	cmp	r3, #12
 800519e:	d9f3      	bls.n	8005188 <HAL_UART_RxCpltCallback+0x98>
 80051a0:	e00e      	b.n	80051c0 <HAL_UART_RxCpltCallback+0xd0>
		}
	}
	else
	{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	72fb      	strb	r3, [r7, #11]
 80051a6:	e008      	b.n	80051ba <HAL_UART_RxCpltCallback+0xca>
		{
			data_from_ether[k] = Rxbuf_from_Ether_temp[k];
 80051a8:	7afa      	ldrb	r2, [r7, #11]
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	497c      	ldr	r1, [pc, #496]	; (80053a0 <HAL_UART_RxCpltCallback+0x2b0>)
 80051ae:	5c89      	ldrb	r1, [r1, r2]
 80051b0:	4a7a      	ldr	r2, [pc, #488]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 80051b2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	3301      	adds	r3, #1
 80051b8:	72fb      	strb	r3, [r7, #11]
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d9f3      	bls.n	80051a8 <HAL_UART_RxCpltCallback+0xb8>
		}
	}

	vel_surge = ((float32_t)(data_from_ether[0] << 8 | data_from_ether[1]) - 32767.0) / 32767.0 * 7.0;
 80051c0:	4b76      	ldr	r3, [pc, #472]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4a75      	ldr	r2, [pc, #468]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 80051c8:	7852      	ldrb	r2, [r2, #1]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051d4:	ee17 0a90 	vmov	r0, s15
 80051d8:	f7fb f9de 	bl	8000598 <__aeabi_f2d>
 80051dc:	a36a      	add	r3, pc, #424	; (adr r3, 8005388 <HAL_UART_RxCpltCallback+0x298>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb f879 	bl	80002d8 <__aeabi_dsub>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4610      	mov	r0, r2
 80051ec:	4619      	mov	r1, r3
 80051ee:	a366      	add	r3, pc, #408	; (adr r3, 8005388 <HAL_UART_RxCpltCallback+0x298>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb fb52 	bl	800089c <__aeabi_ddiv>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4610      	mov	r0, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	4b67      	ldr	r3, [pc, #412]	; (80053a4 <HAL_UART_RxCpltCallback+0x2b4>)
 8005206:	f7fb fa1f 	bl	8000648 <__aeabi_dmul>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	f7fb fd11 	bl	8000c38 <__aeabi_d2f>
 8005216:	4603      	mov	r3, r0
 8005218:	4a63      	ldr	r2, [pc, #396]	; (80053a8 <HAL_UART_RxCpltCallback+0x2b8>)
 800521a:	6013      	str	r3, [r2, #0]
	vel_sway = ((float32_t)(data_from_ether[2] << 8 | data_from_ether[3]) - 32767.0) / 32767.0 * 7.0;
 800521c:	4b5f      	ldr	r3, [pc, #380]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800521e:	789b      	ldrb	r3, [r3, #2]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	4a5e      	ldr	r2, [pc, #376]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 8005224:	78d2      	ldrb	r2, [r2, #3]
 8005226:	4313      	orrs	r3, r2
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005230:	ee17 0a90 	vmov	r0, s15
 8005234:	f7fb f9b0 	bl	8000598 <__aeabi_f2d>
 8005238:	a353      	add	r3, pc, #332	; (adr r3, 8005388 <HAL_UART_RxCpltCallback+0x298>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fb f84b 	bl	80002d8 <__aeabi_dsub>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	a34f      	add	r3, pc, #316	; (adr r3, 8005388 <HAL_UART_RxCpltCallback+0x298>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb fb24 	bl	800089c <__aeabi_ddiv>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <HAL_UART_RxCpltCallback+0x2b4>)
 8005262:	f7fb f9f1 	bl	8000648 <__aeabi_dmul>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	f7fb fce3 	bl	8000c38 <__aeabi_d2f>
 8005272:	4603      	mov	r3, r0
 8005274:	4a4d      	ldr	r2, [pc, #308]	; (80053ac <HAL_UART_RxCpltCallback+0x2bc>)
 8005276:	6013      	str	r3, [r2, #0]
	theta_vision = ((float32_t)(data_from_ether[4] << 8 | data_from_ether[5]) - 32767) / 32767.0 * M_PI;
 8005278:	4b48      	ldr	r3, [pc, #288]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800527a:	791b      	ldrb	r3, [r3, #4]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	4a47      	ldr	r2, [pc, #284]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 8005280:	7952      	ldrb	r2, [r2, #5]
 8005282:	4313      	orrs	r3, r2
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80053b0 <HAL_UART_RxCpltCallback+0x2c0>
 8005290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005294:	ee17 0a90 	vmov	r0, s15
 8005298:	f7fb f97e 	bl	8000598 <__aeabi_f2d>
 800529c:	a33a      	add	r3, pc, #232	; (adr r3, 8005388 <HAL_UART_RxCpltCallback+0x298>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fb fafb 	bl	800089c <__aeabi_ddiv>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	a338      	add	r3, pc, #224	; (adr r3, 8005390 <HAL_UART_RxCpltCallback+0x2a0>)
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f7fb f9c8 	bl	8000648 <__aeabi_dmul>
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	f7fb fcba 	bl	8000c38 <__aeabi_d2f>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4a3b      	ldr	r2, [pc, #236]	; (80053b4 <HAL_UART_RxCpltCallback+0x2c4>)
 80052c8:	6013      	str	r3, [r2, #0]
	theta_target = ((float32_t)(data_from_ether[6] << 8 | data_from_ether[7]) - 32767) / 32767.0 * M_PI;
 80052ca:	4b34      	ldr	r3, [pc, #208]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 80052cc:	799b      	ldrb	r3, [r3, #6]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	4a32      	ldr	r2, [pc, #200]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 80052d2:	79d2      	ldrb	r2, [r2, #7]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052de:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80053b0 <HAL_UART_RxCpltCallback+0x2c0>
 80052e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052e6:	ee17 0a90 	vmov	r0, s15
 80052ea:	f7fb f955 	bl	8000598 <__aeabi_f2d>
 80052ee:	a326      	add	r3, pc, #152	; (adr r3, 8005388 <HAL_UART_RxCpltCallback+0x298>)
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f7fb fad2 	bl	800089c <__aeabi_ddiv>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	a323      	add	r3, pc, #140	; (adr r3, 8005390 <HAL_UART_RxCpltCallback+0x2a0>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fb f99f 	bl	8000648 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	f7fb fc91 	bl	8000c38 <__aeabi_d2f>
 8005316:	4603      	mov	r3, r0
 8005318:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <HAL_UART_RxCpltCallback+0x2c8>)
 800531a:	6013      	str	r3, [r2, #0]

	if (data_from_ether[8] > 100)
 800531c:	4b1f      	ldr	r3, [pc, #124]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800531e:	7a1b      	ldrb	r3, [r3, #8]
 8005320:	2b64      	cmp	r3, #100	; 0x64
 8005322:	d909      	bls.n	8005338 <HAL_UART_RxCpltCallback+0x248>
	{
		chipEN = 1;
 8005324:	4b25      	ldr	r3, [pc, #148]	; (80053bc <HAL_UART_RxCpltCallback+0x2cc>)
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
		data_from_ether[8] = data_from_ether[8] - 100;
 800532a:	4b1c      	ldr	r3, [pc, #112]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800532c:	7a1b      	ldrb	r3, [r3, #8]
 800532e:	3b64      	subs	r3, #100	; 0x64
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 8005334:	721a      	strb	r2, [r3, #8]
 8005336:	e002      	b.n	800533e <HAL_UART_RxCpltCallback+0x24e>
	}
	else
	{
		chipEN = 0;
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <HAL_UART_RxCpltCallback+0x2cc>)
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
	}
	kick_power = (float32_t)data_from_ether[8] / 20.0;
 800533e:	4b17      	ldr	r3, [pc, #92]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 8005340:	7a1b      	ldrb	r3, [r3, #8]
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800534a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800534e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <HAL_UART_RxCpltCallback+0x2d0>)
 8005354:	edc3 7a00 	vstr	s15, [r3]
	drible_power = (float32_t)data_from_ether[9] / 20.0;
 8005358:	4b10      	ldr	r3, [pc, #64]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 800535a:	7a5b      	ldrb	r3, [r3, #9]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005364:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <HAL_UART_RxCpltCallback+0x2d4>)
 800536e:	edc3 7a00 	vstr	s15, [r3]

	keeper_EN = data_from_ether[10];
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <HAL_UART_RxCpltCallback+0x2ac>)
 8005374:	7a9a      	ldrb	r2, [r3, #10]
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <HAL_UART_RxCpltCallback+0x2d8>)
 8005378:	701a      	strb	r2, [r3, #0]
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	f3af 8000 	nop.w
 8005388:	00000000 	.word	0x00000000
 800538c:	40dfffc0 	.word	0x40dfffc0
 8005390:	54442d18 	.word	0x54442d18
 8005394:	400921fb 	.word	0x400921fb
 8005398:	200005a4 	.word	0x200005a4
 800539c:	20000634 	.word	0x20000634
 80053a0:	200005b4 	.word	0x200005b4
 80053a4:	401c0000 	.word	0x401c0000
 80053a8:	20000748 	.word	0x20000748
 80053ac:	2000074c 	.word	0x2000074c
 80053b0:	46fffe00 	.word	0x46fffe00
 80053b4:	2000075c 	.word	0x2000075c
 80053b8:	20000760 	.word	0x20000760
 80053bc:	20000764 	.word	0x20000764
 80053c0:	20000758 	.word	0x20000758
 80053c4:	20000754 	.word	0x20000754
 80053c8:	20000ac8 	.word	0x20000ac8

080053cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error : %3d %3d\n", error_No[0], error_No[1]);
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <Error_Handler+0x30>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	4619      	mov	r1, r3
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <Error_Handler+0x30>)
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	461a      	mov	r2, r3
 80053dc:	4808      	ldr	r0, [pc, #32]	; (8005400 <Error_Handler+0x34>)
 80053de:	f008 ff2d 	bl	800e23c <iprintf>
	while (1)
	{
		maintask_emargency();
 80053e2:	f7ff fc35 	bl	8004c50 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80053e6:	2201      	movs	r2, #1
 80053e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053ec:	4805      	ldr	r0, [pc, #20]	; (8005404 <Error_Handler+0x38>)
 80053ee:	f003 fed3 	bl	8009198 <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 80053f2:	21c8      	movs	r1, #200	; 0xc8
 80053f4:	20c8      	movs	r0, #200	; 0xc8
 80053f6:	f7fb ff4b 	bl	8001290 <actuator_buzzer>
		maintask_emargency();
 80053fa:	e7f2      	b.n	80053e2 <Error_Handler+0x16>
 80053fc:	20000ab0 	.word	0x20000ab0
 8005400:	080115dc 	.word	0x080115dc
 8005404:	48000400 	.word	0x48000400

08005408 <getUs>:
 */
#include "microsectimer.h"



uint32_t getUs(void) {
 8005408:	b5b0      	push	{r4, r5, r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 800540e:	f004 fc15 	bl	8009c3c <HAL_RCC_GetSysClockFreq>
 8005412:	4603      	mov	r3, r0
 8005414:	4a10      	ldr	r2, [pc, #64]	; (8005458 <getUs+0x50>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0c9b      	lsrs	r3, r3, #18
 800541c:	607b      	str	r3, [r7, #4]
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
 800541e:	f7fd fd69 	bl	8002ef4 <HAL_GetTick>
 8005422:	4604      	mov	r4, r0
cycle_cnt = SysTick->VAL;
 8005424:	4b0d      	ldr	r3, [pc, #52]	; (800545c <getUs+0x54>)
 8005426:	689d      	ldr	r5, [r3, #8]
} while (ms != HAL_GetTick());
 8005428:	f7fd fd64 	bl	8002ef4 <HAL_GetTick>
 800542c:	4603      	mov	r3, r0
 800542e:	429c      	cmp	r4, r3
 8005430:	d1f5      	bne.n	800541e <getUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8005432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005436:	fb03 f204 	mul.w	r2, r3, r4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	1b59      	subs	r1, r3, r5
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	fbb1 f3f3 	udiv	r3, r1, r3
 800544c:	4413      	add	r3, r2
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bdb0      	pop	{r4, r5, r7, pc}
 8005456:	bf00      	nop
 8005458:	431bde83 	.word	0x431bde83
 800545c:	e000e010 	.word	0xe000e010

08005460 <delayUs>:

void delayUs(uint16_t micros) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	80fb      	strh	r3, [r7, #6]
uint32_t start = getUs();
 800546a:	f7ff ffcd 	bl	8005408 <getUs>
 800546e:	60f8      	str	r0, [r7, #12]
while (getUs()-start < (uint32_t) micros) {
 8005470:	e000      	b.n	8005474 <delayUs+0x14>
	asm("nop");
 8005472:	bf00      	nop
while (getUs()-start < (uint32_t) micros) {
 8005474:	f7ff ffc8 	bl	8005408 <getUs>
 8005478:	4602      	mov	r2, r0
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad2      	subs	r2, r2, r3
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	429a      	cmp	r2, r3
 8005482:	d3f6      	bcc.n	8005472 <delayUs+0x12>
}
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	ed87 0a03 	vstr	s0, [r7, #12]
 800549a:	edc7 0a02 	vstr	s1, [r7, #8]
 800549e:	ed87 1a01 	vstr	s2, [r7, #4]
 80054a2:	edc7 1a00 	vstr	s3, [r7]
	v_round=robot_radius*omega_omni;
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fb f876 	bl	8000598 <__aeabi_f2d>
 80054ac:	a360      	add	r3, pc, #384	; (adr r3, 8005630 <omni_move+0x1a0>)
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f7fb f8c9 	bl	8000648 <__aeabi_dmul>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4610      	mov	r0, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	f7fb fbbb 	bl	8000c38 <__aeabi_d2f>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a50      	ldr	r2, [pc, #320]	; (8005608 <omni_move+0x178>)
 80054c6:	6013      	str	r3, [r2, #0]

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 80054c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80054d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054d4:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800560c <omni_move+0x17c>
 80054d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80054dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054e4:	4b48      	ldr	r3, [pc, #288]	; (8005608 <omni_move+0x178>)
 80054e6:	edd3 7a00 	vldr	s15, [r3]
 80054ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005610 <omni_move+0x180>
 80054f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054fe:	4b45      	ldr	r3, [pc, #276]	; (8005614 <omni_move+0x184>)
 8005500:	edc3 7a00 	vstr	s15, [r3]
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8005504:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8005618 <omni_move+0x188>
 8005508:	edd7 7a02 	vldr	s15, [r7, #8]
 800550c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005510:	eddf 6a42 	vldr	s13, [pc, #264]	; 800561c <omni_move+0x18c>
 8005514:	edd7 7a03 	vldr	s15, [r7, #12]
 8005518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800551c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005520:	4b39      	ldr	r3, [pc, #228]	; (8005608 <omni_move+0x178>)
 8005522:	edd3 7a00 	vldr	s15, [r3]
 8005526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800552a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8005610 <omni_move+0x180>
 800552e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <omni_move+0x190>)
 800553c:	edc3 7a00 	vstr	s15, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8005540:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8005618 <omni_move+0x188>
 8005544:	edd7 7a02 	vldr	s15, [r7, #8]
 8005548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800554c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005618 <omni_move+0x188>
 8005550:	edd7 7a03 	vldr	s15, [r7, #12]
 8005554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800555c:	4b2a      	ldr	r3, [pc, #168]	; (8005608 <omni_move+0x178>)
 800555e:	edd3 7a00 	vldr	s15, [r3]
 8005562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005566:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005610 <omni_move+0x180>
 800556a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800556e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005576:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <omni_move+0x194>)
 8005578:	edc3 7a00 	vstr	s15, [r3]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 800557c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005580:	edd7 7a02 	vldr	s15, [r7, #8]
 8005584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005588:	eddf 6a27 	vldr	s13, [pc, #156]	; 8005628 <omni_move+0x198>
 800558c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <omni_move+0x178>)
 800559a:	edd3 7a00 	vldr	s15, [r3]
 800559e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055a2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8005610 <omni_move+0x180>
 80055a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055b2:	4b1e      	ldr	r3, [pc, #120]	; (800562c <omni_move+0x19c>)
 80055b4:	edc3 7a00 	vstr	s15, [r3]

	actuator_motor1(m1,duty_Limit);
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <omni_move+0x184>)
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	edd7 0a00 	vldr	s1, [r7]
 80055c2:	eeb0 0a67 	vmov.f32	s0, s15
 80055c6:	f7fb fd05 	bl	8000fd4 <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <omni_move+0x190>)
 80055cc:	edd3 7a00 	vldr	s15, [r3]
 80055d0:	edd7 0a00 	vldr	s1, [r7]
 80055d4:	eeb0 0a67 	vmov.f32	s0, s15
 80055d8:	f7fb fd2c 	bl	8001034 <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 80055dc:	4b11      	ldr	r3, [pc, #68]	; (8005624 <omni_move+0x194>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	edd7 0a00 	vldr	s1, [r7]
 80055e6:	eeb0 0a67 	vmov.f32	s0, s15
 80055ea:	f7fb fd53 	bl	8001094 <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <omni_move+0x19c>)
 80055f0:	edd3 7a00 	vldr	s15, [r3]
 80055f4:	edd7 0a00 	vldr	s1, [r7]
 80055f8:	eeb0 0a67 	vmov.f32	s0, s15
 80055fc:	f7fb fd7a 	bl	80010f4 <actuator_motor4>

		cnt_motor=0;
		stall=0;
	}*/

}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000ac4 	.word	0x20000ac4
 800560c:	3f5db3d7 	.word	0x3f5db3d7
 8005610:	3e3426c8 	.word	0x3e3426c8
 8005614:	20000ab4 	.word	0x20000ab4
 8005618:	bf3504f3 	.word	0xbf3504f3
 800561c:	3f3504f3 	.word	0x3f3504f3
 8005620:	20000ab8 	.word	0x20000ab8
 8005624:	20000abc 	.word	0x20000abc
 8005628:	bf5db3d7 	.word	0xbf5db3d7
 800562c:	20000ac0 	.word	0x20000ac0
 8005630:	47ae147b 	.word	0x47ae147b
 8005634:	3fb47ae1 	.word	0x3fb47ae1

08005638 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800563c:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <MX_SPI1_Init+0x74>)
 800563e:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <MX_SPI1_Init+0x78>)
 8005640:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005642:	4b1a      	ldr	r3, [pc, #104]	; (80056ac <MX_SPI1_Init+0x74>)
 8005644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005648:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800564a:	4b18      	ldr	r3, [pc, #96]	; (80056ac <MX_SPI1_Init+0x74>)
 800564c:	2200      	movs	r2, #0
 800564e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005650:	4b16      	ldr	r3, [pc, #88]	; (80056ac <MX_SPI1_Init+0x74>)
 8005652:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005656:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005658:	4b14      	ldr	r3, [pc, #80]	; (80056ac <MX_SPI1_Init+0x74>)
 800565a:	2200      	movs	r2, #0
 800565c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <MX_SPI1_Init+0x74>)
 8005660:	2200      	movs	r2, #0
 8005662:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005664:	4b11      	ldr	r3, [pc, #68]	; (80056ac <MX_SPI1_Init+0x74>)
 8005666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800566a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800566c:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <MX_SPI1_Init+0x74>)
 800566e:	2230      	movs	r2, #48	; 0x30
 8005670:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005672:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <MX_SPI1_Init+0x74>)
 8005674:	2200      	movs	r2, #0
 8005676:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <MX_SPI1_Init+0x74>)
 800567a:	2200      	movs	r2, #0
 800567c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800567e:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <MX_SPI1_Init+0x74>)
 8005680:	2200      	movs	r2, #0
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005684:	4b09      	ldr	r3, [pc, #36]	; (80056ac <MX_SPI1_Init+0x74>)
 8005686:	2207      	movs	r2, #7
 8005688:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800568a:	4b08      	ldr	r3, [pc, #32]	; (80056ac <MX_SPI1_Init+0x74>)
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <MX_SPI1_Init+0x74>)
 8005692:	2208      	movs	r2, #8
 8005694:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005696:	4805      	ldr	r0, [pc, #20]	; (80056ac <MX_SPI1_Init+0x74>)
 8005698:	f004 fdfe 	bl	800a298 <HAL_SPI_Init>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80056a2:	f7ff fe93 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000b0c 	.word	0x20000b0c
 80056b0:	40013000 	.word	0x40013000

080056b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056bc:	f107 0314 	add.w	r3, r7, #20
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <HAL_SPI_MspInit+0x7c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d128      	bne.n	8005728 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056d6:	4b17      	ldr	r3, [pc, #92]	; (8005734 <HAL_SPI_MspInit+0x80>)
 80056d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056da:	4a16      	ldr	r2, [pc, #88]	; (8005734 <HAL_SPI_MspInit+0x80>)
 80056dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056e0:	6613      	str	r3, [r2, #96]	; 0x60
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <HAL_SPI_MspInit+0x80>)
 80056e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <HAL_SPI_MspInit+0x80>)
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <HAL_SPI_MspInit+0x80>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056fa:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <HAL_SPI_MspInit+0x80>)
 80056fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005706:	23e0      	movs	r3, #224	; 0xe0
 8005708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800570a:	2302      	movs	r3, #2
 800570c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005712:	2300      	movs	r3, #0
 8005714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005716:	2305      	movs	r3, #5
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800571a:	f107 0314 	add.w	r3, r7, #20
 800571e:	4619      	mov	r1, r3
 8005720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005724:	f003 fb9e 	bl	8008e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005728:	bf00      	nop
 800572a:	3728      	adds	r7, #40	; 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40013000 	.word	0x40013000
 8005734:	40021000 	.word	0x40021000

08005738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800573e:	4b0f      	ldr	r3, [pc, #60]	; (800577c <HAL_MspInit+0x44>)
 8005740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005742:	4a0e      	ldr	r2, [pc, #56]	; (800577c <HAL_MspInit+0x44>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	6613      	str	r3, [r2, #96]	; 0x60
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_MspInit+0x44>)
 800574c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_MspInit+0x44>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575a:	4a08      	ldr	r2, [pc, #32]	; (800577c <HAL_MspInit+0x44>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6593      	str	r3, [r2, #88]	; 0x58
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_MspInit+0x44>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800576e:	f003 fe01 	bl	8009374 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000

08005780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800578e:	b480      	push	{r7}
 8005790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005792:	e7fe      	b.n	8005792 <HardFault_Handler+0x4>

08005794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005798:	e7fe      	b.n	8005798 <MemManage_Handler+0x4>

0800579a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800579e:	e7fe      	b.n	800579e <BusFault_Handler+0x4>

080057a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057a4:	e7fe      	b.n	80057a4 <UsageFault_Handler+0x4>

080057a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057a6:	b480      	push	{r7}
 80057a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057b8:	bf00      	nop
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057c2:	b480      	push	{r7}
 80057c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057d4:	f000 fd1a 	bl	800620c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057d8:	bf00      	nop
 80057da:	bd80      	pop	{r7, pc}

080057dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80057e0:	4802      	ldr	r0, [pc, #8]	; (80057ec <DMA1_Channel1_IRQHandler+0x10>)
 80057e2:	f002 fb74 	bl	8007ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000db8 	.word	0x20000db8

080057f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80057f4:	4802      	ldr	r0, [pc, #8]	; (8005800 <DMA1_Channel2_IRQHandler+0x10>)
 80057f6:	f002 fb6a 	bl	8007ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000e18 	.word	0x20000e18

08005804 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8005808:	4802      	ldr	r0, [pc, #8]	; (8005814 <DMA1_Channel3_IRQHandler+0x10>)
 800580a:	f002 fb60 	bl	8007ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	2000039c 	.word	0x2000039c

08005818 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800581c:	4802      	ldr	r0, [pc, #8]	; (8005828 <DMA1_Channel4_IRQHandler+0x10>)
 800581e:	f002 fb56 	bl	8007ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	200003fc 	.word	0x200003fc

0800582c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005830:	4802      	ldr	r0, [pc, #8]	; (800583c <DMA1_Channel5_IRQHandler+0x10>)
 8005832:	f002 fb4c 	bl	8007ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	2000033c 	.word	0x2000033c

08005840 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005844:	4802      	ldr	r0, [pc, #8]	; (8005850 <FDCAN1_IT0_IRQHandler+0x10>)
 8005846:	f003 f883 	bl	8008950 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000460 	.word	0x20000460

08005854 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005858:	4802      	ldr	r0, [pc, #8]	; (8005864 <FDCAN1_IT1_IRQHandler+0x10>)
 800585a:	f003 f879 	bl	8008950 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20000460 	.word	0x20000460

08005868 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 800586c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005870:	f003 fcc4 	bl	80091fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005874:	bf00      	nop
 8005876:	bd80      	pop	{r7, pc}

08005878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800587c:	4802      	ldr	r0, [pc, #8]	; (8005888 <USART2_IRQHandler+0x10>)
 800587e:	f006 fc33 	bl	800c0e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	20000c98 	.word	0x20000c98

0800588c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005890:	4802      	ldr	r0, [pc, #8]	; (800589c <TIM7_DAC_IRQHandler+0x10>)
 8005892:	f005 fb5d 	bl	800af50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000bbc 	.word	0x20000bbc

080058a0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80058a4:	4802      	ldr	r0, [pc, #8]	; (80058b0 <FDCAN2_IT0_IRQHandler+0x10>)
 80058a6:	f003 f853 	bl	8008950 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	200004c4 	.word	0x200004c4

080058b4 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80058b8:	4802      	ldr	r0, [pc, #8]	; (80058c4 <FDCAN2_IT1_IRQHandler+0x10>)
 80058ba:	f003 f849 	bl	8008950 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 80058be:	bf00      	nop
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	200004c4 	.word	0x200004c4

080058c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
	return 1;
 80058cc:	2301      	movs	r3, #1
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <_kill>:

int _kill(int pid, int sig)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80058e2:	f008 fef9 	bl	800e6d8 <__errno>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2216      	movs	r2, #22
 80058ea:	601a      	str	r2, [r3, #0]
	return -1;
 80058ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <_exit>:

void _exit (int status)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005900:	f04f 31ff 	mov.w	r1, #4294967295
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff ffe7 	bl	80058d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800590a:	e7fe      	b.n	800590a <_exit+0x12>

0800590c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e00a      	b.n	8005934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800591e:	f3af 8000 	nop.w
 8005922:	4601      	mov	r1, r0
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	60ba      	str	r2, [r7, #8]
 800592a:	b2ca      	uxtb	r2, r1
 800592c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	3301      	adds	r3, #1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	dbf0      	blt.n	800591e <_read+0x12>
	}

return len;
 800593c:	687b      	ldr	r3, [r7, #4]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
	return -1;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800596e:	605a      	str	r2, [r3, #4]
	return 0;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <_isatty>:

int _isatty(int file)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
	return 1;
 8005986:	2301      	movs	r3, #1
}
 8005988:	4618      	mov	r0, r3
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
	return 0;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80059b4:	4b08      	ldr	r3, [pc, #32]	; (80059d8 <SystemInit+0x28>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	4a07      	ldr	r2, [pc, #28]	; (80059d8 <SystemInit+0x28>)
 80059bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <SystemInit+0x28>)
 80059c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059ca:	609a      	str	r2, [r3, #8]
#endif
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059e2:	f107 031c 	add.w	r3, r7, #28
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059ee:	463b      	mov	r3, r7
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	611a      	str	r2, [r3, #16]
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a02:	4a22      	ldr	r2, [pc, #136]	; (8005a8c <MX_TIM5_Init+0xb0>)
 8005a04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170;
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a08:	22aa      	movs	r2, #170	; 0xaa
 8005a0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500;
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005a26:	4818      	ldr	r0, [pc, #96]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a28:	f005 f928 	bl	800ac7c <HAL_TIM_PWM_Init>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8005a32:	f7ff fccb 	bl	80053cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005a3e:	f107 031c 	add.w	r3, r7, #28
 8005a42:	4619      	mov	r1, r3
 8005a44:	4810      	ldr	r0, [pc, #64]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a46:	f006 f937 	bl	800bcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8005a50:	f7ff fcbc 	bl	80053cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a54:	2360      	movs	r3, #96	; 0x60
 8005a56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a64:	463b      	mov	r3, r7
 8005a66:	2204      	movs	r2, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4807      	ldr	r0, [pc, #28]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a6c:	f005 fbf0 	bl	800b250 <HAL_TIM_PWM_ConfigChannel>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8005a76:	f7ff fca9 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005a7a:	4803      	ldr	r0, [pc, #12]	; (8005a88 <MX_TIM5_Init+0xac>)
 8005a7c:	f000 f884 	bl	8005b88 <HAL_TIM_MspPostInit>

}
 8005a80:	bf00      	nop
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000b70 	.word	0x20000b70
 8005a8c:	40000c00 	.word	0x40000c00

08005a90 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a96:	1d3b      	adds	r3, r7, #4
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005aa0:	4b14      	ldr	r3, [pc, #80]	; (8005af4 <MX_TIM7_Init+0x64>)
 8005aa2:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <MX_TIM7_Init+0x68>)
 8005aa4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170;
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <MX_TIM7_Init+0x64>)
 8005aa8:	22aa      	movs	r2, #170	; 0xaa
 8005aaa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aac:	4b11      	ldr	r3, [pc, #68]	; (8005af4 <MX_TIM7_Init+0x64>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <MX_TIM7_Init+0x64>)
 8005ab4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005ab8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <MX_TIM7_Init+0x64>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005ac0:	480c      	ldr	r0, [pc, #48]	; (8005af4 <MX_TIM7_Init+0x64>)
 8005ac2:	f005 f80b 	bl	800aadc <HAL_TIM_Base_Init>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005acc:	f7ff fc7e 	bl	80053cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005ad8:	1d3b      	adds	r3, r7, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4805      	ldr	r0, [pc, #20]	; (8005af4 <MX_TIM7_Init+0x64>)
 8005ade:	f006 f8eb 	bl	800bcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005ae8:	f7ff fc70 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005aec:	bf00      	nop
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000bbc 	.word	0x20000bbc
 8005af8:	40001400 	.word	0x40001400

08005afc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <HAL_TIM_PWM_MspInit+0x38>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10b      	bne.n	8005b26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_TIM_PWM_MspInit+0x3c>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	4a09      	ldr	r2, [pc, #36]	; (8005b38 <HAL_TIM_PWM_MspInit+0x3c>)
 8005b14:	f043 0308 	orr.w	r3, r3, #8
 8005b18:	6593      	str	r3, [r2, #88]	; 0x58
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <HAL_TIM_PWM_MspInit+0x3c>)
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40000c00 	.word	0x40000c00
 8005b38:	40021000 	.word	0x40021000

08005b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <HAL_TIM_Base_MspInit+0x44>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d113      	bne.n	8005b76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <HAL_TIM_Base_MspInit+0x48>)
 8005b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b52:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <HAL_TIM_Base_MspInit+0x48>)
 8005b54:	f043 0320 	orr.w	r3, r3, #32
 8005b58:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <HAL_TIM_Base_MspInit+0x48>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8005b66:	2200      	movs	r2, #0
 8005b68:	2108      	movs	r1, #8
 8005b6a:	2037      	movs	r0, #55	; 0x37
 8005b6c:	f001 ff97 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005b70:	2037      	movs	r0, #55	; 0x37
 8005b72:	f001 ffae 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40001400 	.word	0x40001400
 8005b84:	40021000 	.word	0x40021000

08005b88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 030c 	add.w	r3, r7, #12
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <HAL_TIM_MspPostInit+0x64>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d11c      	bne.n	8005be4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <HAL_TIM_MspPostInit+0x68>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <HAL_TIM_MspPostInit+0x68>)
 8005bb0:	f043 0304 	orr.w	r3, r3, #4
 8005bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <HAL_TIM_MspPostInit+0x68>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8005bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4805      	ldr	r0, [pc, #20]	; (8005bf4 <HAL_TIM_MspPostInit+0x6c>)
 8005be0:	f003 f940 	bl	8008e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8005be4:	bf00      	nop
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	48000800 	.word	0x48000800

08005bf8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005bfc:	4b22      	ldr	r3, [pc, #136]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005bfe:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <MX_LPUART1_UART_Init+0x94>)
 8005c00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8005c02:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c04:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <MX_LPUART1_UART_Init+0x98>)
 8005c06:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c08:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005c0e:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005c14:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c1c:	220c      	movs	r2, #12
 8005c1e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c20:	4b19      	ldr	r3, [pc, #100]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c26:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c2c:	4b16      	ldr	r3, [pc, #88]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c34:	2220      	movs	r2, #32
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005c38:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c3e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005c40:	4811      	ldr	r0, [pc, #68]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c42:	f006 f915 	bl	800be70 <HAL_UART_Init>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8005c4c:	f7ff fbbe 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c50:	2100      	movs	r1, #0
 8005c52:	480d      	ldr	r0, [pc, #52]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c54:	f007 fd12 	bl	800d67c <HAL_UARTEx_SetTxFifoThreshold>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005c5e:	f7ff fbb5 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c62:	2100      	movs	r1, #0
 8005c64:	4808      	ldr	r0, [pc, #32]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c66:	f007 fd47 	bl	800d6f8 <HAL_UARTEx_SetRxFifoThreshold>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005c70:	f7ff fbac 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005c74:	4804      	ldr	r0, [pc, #16]	; (8005c88 <MX_LPUART1_UART_Init+0x90>)
 8005c76:	f007 fcc8 	bl	800d60a <HAL_UARTEx_DisableFifoMode>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005c80:	f7ff fba4 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005c84:	bf00      	nop
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000c08 	.word	0x20000c08
 8005c8c:	40008000 	.word	0x40008000
 8005c90:	001e8480 	.word	0x001e8480

08005c94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c98:	4b24      	ldr	r3, [pc, #144]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005c9a:	4a25      	ldr	r2, [pc, #148]	; (8005d30 <MX_USART2_UART_Init+0x9c>)
 8005c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8005c9e:	4b23      	ldr	r3, [pc, #140]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005ca0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ca6:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005cac:	4b1f      	ldr	r3, [pc, #124]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005cb2:	4b1e      	ldr	r3, [pc, #120]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cba:	220c      	movs	r2, #12
 8005cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cbe:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cc4:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005cca:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005cd0:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cd8:	2208      	movs	r2, #8
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005cdc:	4b13      	ldr	r3, [pc, #76]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ce4:	4811      	ldr	r0, [pc, #68]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005ce6:	f006 f8c3 	bl	800be70 <HAL_UART_Init>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8005cf0:	f7ff fb6c 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	480d      	ldr	r0, [pc, #52]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005cf8:	f007 fcc0 	bl	800d67c <HAL_UARTEx_SetTxFifoThreshold>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8005d02:	f7ff fb63 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d06:	2100      	movs	r1, #0
 8005d08:	4808      	ldr	r0, [pc, #32]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005d0a:	f007 fcf5 	bl	800d6f8 <HAL_UARTEx_SetRxFifoThreshold>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8005d14:	f7ff fb5a 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005d18:	4804      	ldr	r0, [pc, #16]	; (8005d2c <MX_USART2_UART_Init+0x98>)
 8005d1a:	f007 fc76 	bl	800d60a <HAL_UARTEx_DisableFifoMode>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8005d24:	f7ff fb52 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d28:	bf00      	nop
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000c98 	.word	0x20000c98
 8005d30:	40004400 	.word	0x40004400

08005d34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005d38:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d3a:	4a23      	ldr	r2, [pc, #140]	; (8005dc8 <MX_USART3_UART_Init+0x94>)
 8005d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005d3e:	4b21      	ldr	r3, [pc, #132]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d46:	4b1f      	ldr	r3, [pc, #124]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d52:	4b1c      	ldr	r3, [pc, #112]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d58:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d5a:	220c      	movs	r2, #12
 8005d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d5e:	4b19      	ldr	r3, [pc, #100]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d64:	4b17      	ldr	r3, [pc, #92]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d6a:	4b16      	ldr	r3, [pc, #88]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d76:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d7c:	4811      	ldr	r0, [pc, #68]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d7e:	f006 f877 	bl	800be70 <HAL_UART_Init>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005d88:	f7ff fb20 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	480d      	ldr	r0, [pc, #52]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005d90:	f007 fc74 	bl	800d67c <HAL_UARTEx_SetTxFifoThreshold>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005d9a:	f7ff fb17 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4808      	ldr	r0, [pc, #32]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005da2:	f007 fca9 	bl	800d6f8 <HAL_UARTEx_SetRxFifoThreshold>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005dac:	f7ff fb0e 	bl	80053cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005db0:	4804      	ldr	r0, [pc, #16]	; (8005dc4 <MX_USART3_UART_Init+0x90>)
 8005db2:	f007 fc2a 	bl	800d60a <HAL_UARTEx_DisableFifoMode>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005dbc:	f7ff fb06 	bl	80053cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005dc0:	bf00      	nop
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000d28 	.word	0x20000d28
 8005dc8:	40004800 	.word	0x40004800

08005dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0a2      	sub	sp, #136	; 0x88
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005de4:	f107 0320 	add.w	r3, r7, #32
 8005de8:	2254      	movs	r2, #84	; 0x54
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f008 fc21 	bl	800e634 <memset>
  if(uartHandle->Instance==LPUART1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a8b      	ldr	r2, [pc, #556]	; (8006024 <HAL_UART_MspInit+0x258>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d139      	bne.n	8005e70 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005e00:	2300      	movs	r3, #0
 8005e02:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e04:	f107 0320 	add.w	r3, r7, #32
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f003 fff7 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005e14:	f7ff fada 	bl	80053cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005e18:	4b83      	ldr	r3, [pc, #524]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1c:	4a82      	ldr	r2, [pc, #520]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005e24:	4b80      	ldr	r3, [pc, #512]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e30:	4b7d      	ldr	r3, [pc, #500]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e34:	4a7c      	ldr	r2, [pc, #496]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e3c:	4b7a      	ldr	r3, [pc, #488]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e48:	230c      	movs	r3, #12
 8005e4a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e54:	2300      	movs	r3, #0
 8005e56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005e64:	4619      	mov	r1, r3
 8005e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e6a:	f002 fffb 	bl	8008e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005e6e:	e0d5      	b.n	800601c <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6d      	ldr	r2, [pc, #436]	; (800602c <HAL_UART_MspInit+0x260>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d169      	bne.n	8005f4e <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e82:	f107 0320 	add.w	r3, r7, #32
 8005e86:	4618      	mov	r0, r3
 8005e88:	f003 ffb8 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8005e92:	f7ff fa9b 	bl	80053cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e96:	4b64      	ldr	r3, [pc, #400]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9a:	4a63      	ldr	r2, [pc, #396]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ea2:	4b61      	ldr	r3, [pc, #388]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eae:	4b5e      	ldr	r3, [pc, #376]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb2:	4a5d      	ldr	r2, [pc, #372]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eba:	4b5b      	ldr	r3, [pc, #364]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 8005ec6:	2318      	movs	r3, #24
 8005ec8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ed8:	2307      	movs	r3, #7
 8005eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ede:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4852      	ldr	r0, [pc, #328]	; (8006030 <HAL_UART_MspInit+0x264>)
 8005ee6:	f002 ffbd 	bl	8008e64 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005eea:	4b52      	ldr	r3, [pc, #328]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005eec:	4a52      	ldr	r2, [pc, #328]	; (8006038 <HAL_UART_MspInit+0x26c>)
 8005eee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005ef2:	221a      	movs	r2, #26
 8005ef4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ef6:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005efc:	4b4d      	ldr	r3, [pc, #308]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f02:	4b4c      	ldr	r3, [pc, #304]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f08:	4b4a      	ldr	r3, [pc, #296]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f0e:	4b49      	ldr	r3, [pc, #292]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005f14:	4b47      	ldr	r3, [pc, #284]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f16:	2220      	movs	r2, #32
 8005f18:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f1a:	4b46      	ldr	r3, [pc, #280]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005f20:	4844      	ldr	r0, [pc, #272]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f22:	f001 fdf1 	bl	8007b08 <HAL_DMA_Init>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8005f2c:	f7ff fa4e 	bl	80053cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a40      	ldr	r2, [pc, #256]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f34:	67da      	str	r2, [r3, #124]	; 0x7c
 8005f36:	4a3f      	ldr	r2, [pc, #252]	; (8006034 <HAL_UART_MspInit+0x268>)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	210c      	movs	r1, #12
 8005f40:	2026      	movs	r0, #38	; 0x26
 8005f42:	f001 fdac 	bl	8007a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f46:	2026      	movs	r0, #38	; 0x26
 8005f48:	f001 fdc3 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
}
 8005f4c:	e066      	b.n	800601c <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART3)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a3a      	ldr	r2, [pc, #232]	; (800603c <HAL_UART_MspInit+0x270>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d161      	bne.n	800601c <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005f58:	2304      	movs	r3, #4
 8005f5a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f60:	f107 0320 	add.w	r3, r7, #32
 8005f64:	4618      	mov	r0, r3
 8005f66:	f003 ff49 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8005f70:	f7ff fa2c 	bl	80053cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005f74:	4b2c      	ldr	r3, [pc, #176]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	4a2b      	ldr	r2, [pc, #172]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f80:	4b29      	ldr	r3, [pc, #164]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f8c:	4b26      	ldr	r3, [pc, #152]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f90:	4a25      	ldr	r2, [pc, #148]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005f92:	f043 0304 	orr.w	r3, r3, #4
 8005f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f98:	4b23      	ldr	r3, [pc, #140]	; (8006028 <HAL_UART_MspInit+0x25c>)
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8005fa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fa8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005faa:	2302      	movs	r3, #2
 8005fac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005fb8:	2307      	movs	r3, #7
 8005fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fbe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	481e      	ldr	r0, [pc, #120]	; (8006040 <HAL_UART_MspInit+0x274>)
 8005fc6:	f002 ff4d 	bl	8008e64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8005fca:	4b1e      	ldr	r3, [pc, #120]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005fcc:	4a1e      	ldr	r2, [pc, #120]	; (8006048 <HAL_UART_MspInit+0x27c>)
 8005fce:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005fd2:	221c      	movs	r2, #28
 8005fd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fd6:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005fe4:	2280      	movs	r2, #128	; 0x80
 8005fe6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fe8:	4b16      	ldr	r3, [pc, #88]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <HAL_UART_MspInit+0x278>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006000:	4810      	ldr	r0, [pc, #64]	; (8006044 <HAL_UART_MspInit+0x278>)
 8006002:	f001 fd81 	bl	8007b08 <HAL_DMA_Init>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_UART_MspInit+0x244>
      Error_Handler();
 800600c:	f7ff f9de 	bl	80053cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a0c      	ldr	r2, [pc, #48]	; (8006044 <HAL_UART_MspInit+0x278>)
 8006014:	67da      	str	r2, [r3, #124]	; 0x7c
 8006016:	4a0b      	ldr	r2, [pc, #44]	; (8006044 <HAL_UART_MspInit+0x278>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800601c:	bf00      	nop
 800601e:	3788      	adds	r7, #136	; 0x88
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40008000 	.word	0x40008000
 8006028:	40021000 	.word	0x40021000
 800602c:	40004400 	.word	0x40004400
 8006030:	48000400 	.word	0x48000400
 8006034:	20000db8 	.word	0x20000db8
 8006038:	40020008 	.word	0x40020008
 800603c:	40004800 	.word	0x40004800
 8006040:	48000800 	.word	0x48000800
 8006044:	20000e18 	.word	0x20000e18
 8006048:	4002001c 	.word	0x4002001c

0800604c <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	789b      	ldrb	r3, [r3, #2]
 8006064:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	78db      	ldrb	r3, [r3, #3]
 800606a:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	ee07 3a90 	vmov	s15, r3
}
 8006072:	eeb0 0a67 	vmov.f32	s0, s15
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	ed87 0a00 	vstr	s0, [r7]
    Float_char4 tmp;
    tmp.float_value=float_value;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	60fb      	str	r3, [r7, #12]
    value[0]=tmp.char4_value[0];
 8006090:	7b3a      	ldrb	r2, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	701a      	strb	r2, [r3, #0]
    value[1]=tmp.char4_value[1];
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3301      	adds	r3, #1
 800609a:	7b7a      	ldrb	r2, [r7, #13]
 800609c:	701a      	strb	r2, [r3, #0]
    value[2]=tmp.char4_value[2];
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3302      	adds	r3, #2
 80060a2:	7bba      	ldrb	r2, [r7, #14]
 80060a4:	701a      	strb	r2, [r3, #0]
    value[3]=tmp.char4_value[3];
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3303      	adds	r3, #3
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	701a      	strb	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
	...

080060bc <xprintf_init>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/


void xprintf_init(UART_HandleTypeDef *handler){
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	huart_xprintf = handler;
 80060c4:	4a05      	ldr	r2, [pc, #20]	; (80060dc <xprintf_init+0x20>)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6013      	str	r3, [r2, #0]
	xdev_out(uart_putc);
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <xprintf_init+0x24>)
 80060cc:	4a05      	ldr	r2, [pc, #20]	; (80060e4 <xprintf_init+0x28>)
 80060ce:	601a      	str	r2, [r3, #0]
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20000af4 	.word	0x20000af4
 80060e0:	20000e78 	.word	0x20000e78
 80060e4:	080060e9 	.word	0x080060e9

080060e8 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
	 char buf[1];
	 buf[0] = c;
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <uart_putc+0x28>)
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	f107 010c 	add.w	r1, r7, #12
 80060fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006102:	2201      	movs	r2, #1
 8006104:	f005 ff04 	bl	800bf10 <HAL_UART_Transmit>
	}
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000af4 	.word	0x20000af4

08006114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006114:	480d      	ldr	r0, [pc, #52]	; (800614c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006116:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006118:	480d      	ldr	r0, [pc, #52]	; (8006150 <LoopForever+0x6>)
  ldr r1, =_edata
 800611a:	490e      	ldr	r1, [pc, #56]	; (8006154 <LoopForever+0xa>)
  ldr r2, =_sidata
 800611c:	4a0e      	ldr	r2, [pc, #56]	; (8006158 <LoopForever+0xe>)
  movs r3, #0
 800611e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006120:	e002      	b.n	8006128 <LoopCopyDataInit>

08006122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006126:	3304      	adds	r3, #4

08006128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800612a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800612c:	d3f9      	bcc.n	8006122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800612e:	4a0b      	ldr	r2, [pc, #44]	; (800615c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006130:	4c0b      	ldr	r4, [pc, #44]	; (8006160 <LoopForever+0x16>)
  movs r3, #0
 8006132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006134:	e001      	b.n	800613a <LoopFillZerobss>

08006136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006138:	3204      	adds	r2, #4

0800613a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800613a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800613c:	d3fb      	bcc.n	8006136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800613e:	f7ff fc37 	bl	80059b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006142:	f008 facf 	bl	800e6e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006146:	f7fc fee1 	bl	8002f0c <main>

0800614a <LoopForever>:

LoopForever:
    b LoopForever
 800614a:	e7fe      	b.n	800614a <LoopForever>
  ldr   r0, =_estack
 800614c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006154:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8006158:	08011ba0 	.word	0x08011ba0
  ldr r2, =_sbss
 800615c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8006160:	20000fd0 	.word	0x20000fd0

08006164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006164:	e7fe      	b.n	8006164 <ADC1_2_IRQHandler>

08006166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006170:	2003      	movs	r0, #3
 8006172:	f001 fc89 	bl	8007a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006176:	2000      	movs	r0, #0
 8006178:	f000 f80e 	bl	8006198 <HAL_InitTick>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	71fb      	strb	r3, [r7, #7]
 8006186:	e001      	b.n	800618c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006188:	f7ff fad6 	bl	8005738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800618c:	79fb      	ldrb	r3, [r7, #7]

}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80061a4:	4b16      	ldr	r3, [pc, #88]	; (8006200 <HAL_InitTick+0x68>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d022      	beq.n	80061f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80061ac:	4b15      	ldr	r3, [pc, #84]	; (8006204 <HAL_InitTick+0x6c>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b13      	ldr	r3, [pc, #76]	; (8006200 <HAL_InitTick+0x68>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fc94 	bl	8007aee <HAL_SYSTICK_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10f      	bne.n	80061ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	d809      	bhi.n	80061e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061d2:	2200      	movs	r2, #0
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	f04f 30ff 	mov.w	r0, #4294967295
 80061da:	f001 fc60 	bl	8007a9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061de:	4a0a      	ldr	r2, [pc, #40]	; (8006208 <HAL_InitTick+0x70>)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e007      	b.n	80061f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	e004      	b.n	80061f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
 80061f0:	e001      	b.n	80061f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20000010 	.word	0x20000010
 8006204:	20000008 	.word	0x20000008
 8006208:	2000000c 	.word	0x2000000c

0800620c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_IncTick+0x1c>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_IncTick+0x20>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4413      	add	r3, r2
 800621a:	4a03      	ldr	r2, [pc, #12]	; (8006228 <HAL_IncTick+0x1c>)
 800621c:	6013      	str	r3, [r2, #0]
}
 800621e:	bf00      	nop
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000e7c 	.word	0x20000e7c
 800622c:	20000010 	.word	0x20000010

08006230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006238:	f7fc fe5c 	bl	8002ef4 <HAL_GetTick>
 800623c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d004      	beq.n	8006254 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <HAL_Delay+0x40>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006254:	bf00      	nop
 8006256:	f7fc fe4d 	bl	8002ef4 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	429a      	cmp	r2, r3
 8006264:	d8f7      	bhi.n	8006256 <HAL_Delay+0x26>
  {
  }
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000010 	.word	0x20000010

08006274 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	609a      	str	r2, [r3, #8]
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	609a      	str	r2, [r3, #8]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3360      	adds	r3, #96	; 0x60
 80062ee:	461a      	mov	r2, r3
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4b08      	ldr	r3, [pc, #32]	; (8006320 <LL_ADC_SetOffset+0x44>)
 80062fe:	4013      	ands	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	4313      	orrs	r3, r2
 800630c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	03fff000 	.word	0x03fff000

08006324 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3360      	adds	r3, #96	; 0x60
 8006332:	461a      	mov	r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3360      	adds	r3, #96	; 0x60
 8006360:	461a      	mov	r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	431a      	orrs	r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3360      	adds	r3, #96	; 0x60
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3360      	adds	r3, #96	; 0x60
 80063cc:	461a      	mov	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	615a      	str	r2, [r3, #20]
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800643e:	b480      	push	{r7}
 8006440:	b087      	sub	sp, #28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3330      	adds	r3, #48	; 0x30
 800644e:	461a      	mov	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	4413      	add	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	211f      	movs	r1, #31
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	43db      	mvns	r3, r3
 8006470:	401a      	ands	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	0e9b      	lsrs	r3, r3, #26
 8006476:	f003 011f 	and.w	r1, r3, #31
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	431a      	orrs	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006496:	b480      	push	{r7}
 8006498:	b087      	sub	sp, #28
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3314      	adds	r3, #20
 80064a6:	461a      	mov	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	0e5b      	lsrs	r3, r3, #25
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	4413      	add	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	0d1b      	lsrs	r3, r3, #20
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2107      	movs	r1, #7
 80064c4:	fa01 f303 	lsl.w	r3, r1, r3
 80064c8:	43db      	mvns	r3, r3
 80064ca:	401a      	ands	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	0d1b      	lsrs	r3, r3, #20
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	fa01 f303 	lsl.w	r3, r1, r3
 80064da:	431a      	orrs	r2, r3
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a0f      	ldr	r2, [pc, #60]	; (8006538 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10a      	bne.n	8006516 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650c:	431a      	orrs	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8006514:	e00a      	b.n	800652c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006522:	43db      	mvns	r3, r3
 8006524:	401a      	ands	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800652c:	bf00      	nop
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	407f0000 	.word	0x407f0000

0800653c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 031f 	and.w	r3, r3, #31
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6093      	str	r3, [r2, #8]
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800658c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006590:	d101      	bne.n	8006596 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80065b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e0:	d101      	bne.n	80065e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006608:	f043 0201 	orr.w	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <LL_ADC_IsEnabled+0x18>
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <LL_ADC_IsEnabled+0x1a>
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006652:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006656:	f043 0204 	orr.w	r2, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b04      	cmp	r3, #4
 800667c:	d101      	bne.n	8006682 <LL_ADC_REG_IsConversionOngoing+0x18>
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 0308 	and.w	r3, r3, #8
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d101      	bne.n	80066a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80066b8:	b590      	push	{r4, r7, lr}
 80066ba:	b089      	sub	sp, #36	; 0x24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e1af      	b.n	8006a32 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fa ff57 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff ff3f 	bl	800657c <LL_ADC_IsDeepPowerDownEnabled>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ff25 	bl	8006558 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff ff5a 	bl	80065cc <LL_ADC_IsInternalRegulatorEnabled>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d115      	bne.n	800674a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ff3e 	bl	80065a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006728:	4b9f      	ldr	r3, [pc, #636]	; (80069a8 <HAL_ADC_Init+0x2f0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	099b      	lsrs	r3, r3, #6
 800672e:	4a9f      	ldr	r2, [pc, #636]	; (80069ac <HAL_ADC_Init+0x2f4>)
 8006730:	fba2 2303 	umull	r2, r3, r2, r3
 8006734:	099b      	lsrs	r3, r3, #6
 8006736:	3301      	adds	r3, #1
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800673c:	e002      	b.n	8006744 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	3b01      	subs	r3, #1
 8006742:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f9      	bne.n	800673e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff ff3c 	bl	80065cc <LL_ADC_IsInternalRegulatorEnabled>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675e:	f043 0210 	orr.w	r2, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676a:	f043 0201 	orr.w	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff ff75 	bl	800666a <LL_ADC_REG_IsConversionOngoing>
 8006780:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 8148 	bne.w	8006a20 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f040 8144 	bne.w	8006a20 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80067a0:	f043 0202 	orr.w	r2, r3, #2
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff ff35 	bl	800661c <LL_ADC_IsEnabled>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d141      	bne.n	800683c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c0:	d004      	beq.n	80067cc <HAL_ADC_Init+0x114>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7a      	ldr	r2, [pc, #488]	; (80069b0 <HAL_ADC_Init+0x2f8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d10f      	bne.n	80067ec <HAL_ADC_Init+0x134>
 80067cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80067d0:	f7ff ff24 	bl	800661c <LL_ADC_IsEnabled>
 80067d4:	4604      	mov	r4, r0
 80067d6:	4876      	ldr	r0, [pc, #472]	; (80069b0 <HAL_ADC_Init+0x2f8>)
 80067d8:	f7ff ff20 	bl	800661c <LL_ADC_IsEnabled>
 80067dc:	4603      	mov	r3, r0
 80067de:	4323      	orrs	r3, r4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e012      	b.n	8006812 <HAL_ADC_Init+0x15a>
 80067ec:	4871      	ldr	r0, [pc, #452]	; (80069b4 <HAL_ADC_Init+0x2fc>)
 80067ee:	f7ff ff15 	bl	800661c <LL_ADC_IsEnabled>
 80067f2:	4604      	mov	r4, r0
 80067f4:	4870      	ldr	r0, [pc, #448]	; (80069b8 <HAL_ADC_Init+0x300>)
 80067f6:	f7ff ff11 	bl	800661c <LL_ADC_IsEnabled>
 80067fa:	4603      	mov	r3, r0
 80067fc:	431c      	orrs	r4, r3
 80067fe:	486f      	ldr	r0, [pc, #444]	; (80069bc <HAL_ADC_Init+0x304>)
 8006800:	f7ff ff0c 	bl	800661c <LL_ADC_IsEnabled>
 8006804:	4603      	mov	r3, r0
 8006806:	4323      	orrs	r3, r4
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf0c      	ite	eq
 800680c:	2301      	moveq	r3, #1
 800680e:	2300      	movne	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d012      	beq.n	800683c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800681e:	d004      	beq.n	800682a <HAL_ADC_Init+0x172>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a62      	ldr	r2, [pc, #392]	; (80069b0 <HAL_ADC_Init+0x2f8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d101      	bne.n	800682e <HAL_ADC_Init+0x176>
 800682a:	4a65      	ldr	r2, [pc, #404]	; (80069c0 <HAL_ADC_Init+0x308>)
 800682c:	e000      	b.n	8006830 <HAL_ADC_Init+0x178>
 800682e:	4a65      	ldr	r2, [pc, #404]	; (80069c4 <HAL_ADC_Init+0x30c>)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f7ff fd1c 	bl	8006274 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	7f5b      	ldrb	r3, [r3, #29]
 8006840:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006846:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800684c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006852:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800685a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006866:	2b01      	cmp	r3, #1
 8006868:	d106      	bne.n	8006878 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	3b01      	subs	r3, #1
 8006870:	045b      	lsls	r3, r3, #17
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4313      	orrs	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <HAL_ADC_Init+0x310>)
 800689c:	4013      	ands	r3, r2
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	69b9      	ldr	r1, [r7, #24]
 80068a4:	430b      	orrs	r3, r1
 80068a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fed1 	bl	800666a <LL_ADC_REG_IsConversionOngoing>
 80068c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff fede 	bl	8006690 <LL_ADC_INJ_IsConversionOngoing>
 80068d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d17f      	bne.n	80069dc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d17c      	bne.n	80069dc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80068e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068ee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80068f0:	4313      	orrs	r3, r2
 80068f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068fe:	f023 0302 	bic.w	r3, r3, #2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	69b9      	ldr	r1, [r7, #24]
 8006908:	430b      	orrs	r3, r1
 800690a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d017      	beq.n	8006944 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006922:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800692c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6911      	ldr	r1, [r2, #16]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	430b      	orrs	r3, r1
 800693e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006942:	e013      	b.n	800696c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006952:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006968:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006972:	2b01      	cmp	r3, #1
 8006974:	d12a      	bne.n	80069cc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006980:	f023 0304 	bic.w	r3, r3, #4
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800698c:	4311      	orrs	r1, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006992:	4311      	orrs	r1, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006998:	430a      	orrs	r2, r1
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	611a      	str	r2, [r3, #16]
 80069a6:	e019      	b.n	80069dc <HAL_ADC_Init+0x324>
 80069a8:	20000008 	.word	0x20000008
 80069ac:	053e2d63 	.word	0x053e2d63
 80069b0:	50000100 	.word	0x50000100
 80069b4:	50000400 	.word	0x50000400
 80069b8:	50000500 	.word	0x50000500
 80069bc:	50000600 	.word	0x50000600
 80069c0:	50000300 	.word	0x50000300
 80069c4:	50000700 	.word	0x50000700
 80069c8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0201 	bic.w	r2, r2, #1
 80069da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d10c      	bne.n	80069fe <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	f023 010f 	bic.w	r1, r3, #15
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	1e5a      	subs	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
 80069fc:	e007      	b.n	8006a0e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 020f 	bic.w	r2, r2, #15
 8006a0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	f043 0201 	orr.w	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a1e:	e007      	b.n	8006a30 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	f043 0210 	orr.w	r2, r3, #16
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3724      	adds	r7, #36	; 0x24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd90      	pop	{r4, r7, pc}
 8006a3a:	bf00      	nop

08006a3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a50:	d004      	beq.n	8006a5c <HAL_ADC_Start_DMA+0x20>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a5a      	ldr	r2, [pc, #360]	; (8006bc0 <HAL_ADC_Start_DMA+0x184>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d101      	bne.n	8006a60 <HAL_ADC_Start_DMA+0x24>
 8006a5c:	4b59      	ldr	r3, [pc, #356]	; (8006bc4 <HAL_ADC_Start_DMA+0x188>)
 8006a5e:	e000      	b.n	8006a62 <HAL_ADC_Start_DMA+0x26>
 8006a60:	4b59      	ldr	r3, [pc, #356]	; (8006bc8 <HAL_ADC_Start_DMA+0x18c>)
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fd6a 	bl	800653c <LL_ADC_GetMultimode>
 8006a68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff fdfb 	bl	800666a <LL_ADC_REG_IsConversionOngoing>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 809b 	bne.w	8006bb2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_ADC_Start_DMA+0x4e>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e096      	b.n	8006bb8 <HAL_ADC_Start_DMA+0x17c>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a4d      	ldr	r2, [pc, #308]	; (8006bcc <HAL_ADC_Start_DMA+0x190>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d008      	beq.n	8006aae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d002      	beq.n	8006aae <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	2b09      	cmp	r3, #9
 8006aac:	d17a      	bne.n	8006ba4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fcf6 	bl	80074a0 <ADC_Enable>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d16d      	bne.n	8006b9a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a3a      	ldr	r2, [pc, #232]	; (8006bc0 <HAL_ADC_Start_DMA+0x184>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_ADC_Start_DMA+0xb4>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a3b      	ldr	r2, [pc, #236]	; (8006bd0 <HAL_ADC_Start_DMA+0x194>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d002      	beq.n	8006aec <HAL_ADC_Start_DMA+0xb0>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	e003      	b.n	8006af4 <HAL_ADC_Start_DMA+0xb8>
 8006aec:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <HAL_ADC_Start_DMA+0x198>)
 8006aee:	e001      	b.n	8006af4 <HAL_ADC_Start_DMA+0xb8>
 8006af0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d002      	beq.n	8006b02 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	f023 0206 	bic.w	r2, r3, #6
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60
 8006b26:	e002      	b.n	8006b2e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <HAL_ADC_Start_DMA+0x19c>)
 8006b34:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3a:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <HAL_ADC_Start_DMA+0x1a0>)
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <HAL_ADC_Start_DMA+0x1a4>)
 8006b44:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	221c      	movs	r2, #28
 8006b4c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0210 	orr.w	r2, r2, #16
 8006b64:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3340      	adds	r3, #64	; 0x40
 8006b80:	4619      	mov	r1, r3
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f001 f867 	bl	8007c58 <HAL_DMA_Start_IT>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fd55 	bl	8006642 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006b98:	e00d      	b.n	8006bb6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006ba2:	e008      	b.n	8006bb6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006bb0:	e001      	b.n	8006bb6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	50000100 	.word	0x50000100
 8006bc4:	50000300 	.word	0x50000300
 8006bc8:	50000700 	.word	0x50000700
 8006bcc:	50000600 	.word	0x50000600
 8006bd0:	50000500 	.word	0x50000500
 8006bd4:	50000400 	.word	0x50000400
 8006bd8:	08007565 	.word	0x08007565
 8006bdc:	0800763d 	.word	0x0800763d
 8006be0:	08007659 	.word	0x08007659

08006be4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b0b6      	sub	sp, #216	; 0xd8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d102      	bne.n	8006c44 <HAL_ADC_ConfigChannel+0x24>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	f000 bc13 	b.w	800746a <HAL_ADC_ConfigChannel+0x84a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fd0a 	bl	800666a <LL_ADC_REG_IsConversionOngoing>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 83f3 	bne.w	8007444 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7ff fbe7 	bl	800643e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fcf8 	bl	800666a <LL_ADC_REG_IsConversionOngoing>
 8006c7a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fd04 	bl	8006690 <LL_ADC_INJ_IsConversionOngoing>
 8006c88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f040 81d9 	bne.w	8007048 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	f040 81d4 	bne.w	8007048 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca8:	d10f      	bne.n	8006cca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f7ff fbee 	bl	8006496 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fb95 	bl	80063f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8006cc8:	e00e      	b.n	8006ce8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6819      	ldr	r1, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	f7ff fbdd 	bl	8006496 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff fb85 	bl	80063f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	08db      	lsrs	r3, r3, #3
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d022      	beq.n	8006d50 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6919      	ldr	r1, [r3, #16]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d1a:	f7ff fadf 	bl	80062dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6919      	ldr	r1, [r3, #16]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f7ff fb2b 	bl	8006386 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	6919      	ldr	r1, [r3, #16]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	7f1b      	ldrb	r3, [r3, #28]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d102      	bne.n	8006d46 <HAL_ADC_ConfigChannel+0x126>
 8006d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d44:	e000      	b.n	8006d48 <HAL_ADC_ConfigChannel+0x128>
 8006d46:	2300      	movs	r3, #0
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f7ff fb37 	bl	80063bc <LL_ADC_SetOffsetSaturation>
 8006d4e:	e17b      	b.n	8007048 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fae4 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <HAL_ADC_ConfigChannel+0x15c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fad9 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006d72:	4603      	mov	r3, r0
 8006d74:	0e9b      	lsrs	r3, r3, #26
 8006d76:	f003 021f 	and.w	r2, r3, #31
 8006d7a:	e01e      	b.n	8006dba <HAL_ADC_ConfigChannel+0x19a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff face 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d92:	fa93 f3a3 	rbit	r3, r3
 8006d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006da2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006daa:	2320      	movs	r3, #32
 8006dac:	e004      	b.n	8006db8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006db2:	fab3 f383 	clz	r3, r3
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d105      	bne.n	8006dd2 <HAL_ADC_ConfigChannel+0x1b2>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	0e9b      	lsrs	r3, r3, #26
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	e018      	b.n	8006e04 <HAL_ADC_ConfigChannel+0x1e4>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dde:	fa93 f3a3 	rbit	r3, r3
 8006de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006dee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006df6:	2320      	movs	r3, #32
 8006df8:	e004      	b.n	8006e04 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dfe:	fab3 f383 	clz	r3, r3
 8006e02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d106      	bne.n	8006e16 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fa9d 	bl	8006350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff fa81 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <HAL_ADC_ConfigChannel+0x222>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2101      	movs	r1, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fa76 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	0e9b      	lsrs	r3, r3, #26
 8006e3c:	f003 021f 	and.w	r2, r3, #31
 8006e40:	e01e      	b.n	8006e80 <HAL_ADC_ConfigChannel+0x260>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2101      	movs	r1, #1
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff fa6b 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e58:	fa93 f3a3 	rbit	r3, r3
 8006e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006e60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006e70:	2320      	movs	r3, #32
 8006e72:	e004      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e78:	fab3 f383 	clz	r3, r3
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d105      	bne.n	8006e98 <HAL_ADC_ConfigChannel+0x278>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	0e9b      	lsrs	r3, r3, #26
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	e018      	b.n	8006eca <HAL_ADC_ConfigChannel+0x2aa>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ea4:	fa93 f3a3 	rbit	r3, r3
 8006ea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006eac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006ebc:	2320      	movs	r3, #32
 8006ebe:	e004      	b.n	8006eca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ec4:	fab3 f383 	clz	r3, r3
 8006ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d106      	bne.n	8006edc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fa3a 	bl	8006350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2102      	movs	r1, #2
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fa1e 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x2e8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2102      	movs	r1, #2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fa13 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006efe:	4603      	mov	r3, r0
 8006f00:	0e9b      	lsrs	r3, r3, #26
 8006f02:	f003 021f 	and.w	r2, r3, #31
 8006f06:	e01e      	b.n	8006f46 <HAL_ADC_ConfigChannel+0x326>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff fa08 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f1e:	fa93 f3a3 	rbit	r3, r3
 8006f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006f36:	2320      	movs	r3, #32
 8006f38:	e004      	b.n	8006f44 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f3e:	fab3 f383 	clz	r3, r3
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d105      	bne.n	8006f5e <HAL_ADC_ConfigChannel+0x33e>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	0e9b      	lsrs	r3, r3, #26
 8006f58:	f003 031f 	and.w	r3, r3, #31
 8006f5c:	e016      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x36c>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f6a:	fa93 f3a3 	rbit	r3, r3
 8006f6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006f7e:	2320      	movs	r3, #32
 8006f80:	e004      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f86:	fab3 f383 	clz	r3, r3
 8006f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d106      	bne.n	8006f9e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2200      	movs	r2, #0
 8006f96:	2102      	movs	r1, #2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff f9d9 	bl	8006350 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2103      	movs	r1, #3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff f9bd 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <HAL_ADC_ConfigChannel+0x3aa>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2103      	movs	r1, #3
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff f9b2 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	0e9b      	lsrs	r3, r3, #26
 8006fc4:	f003 021f 	and.w	r2, r3, #31
 8006fc8:	e017      	b.n	8006ffa <HAL_ADC_ConfigChannel+0x3da>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2103      	movs	r1, #3
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff f9a7 	bl	8006324 <LL_ADC_GetOffsetChannel>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fdc:	fa93 f3a3 	rbit	r3, r3
 8006fe0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fe4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006fec:	2320      	movs	r3, #32
 8006fee:	e003      	b.n	8006ff8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ff2:	fab3 f383 	clz	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007002:	2b00      	cmp	r3, #0
 8007004:	d105      	bne.n	8007012 <HAL_ADC_ConfigChannel+0x3f2>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	0e9b      	lsrs	r3, r3, #26
 800700c:	f003 031f 	and.w	r3, r3, #31
 8007010:	e011      	b.n	8007036 <HAL_ADC_ConfigChannel+0x416>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800701a:	fa93 f3a3 	rbit	r3, r3
 800701e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007022:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800702a:	2320      	movs	r3, #32
 800702c:	e003      	b.n	8007036 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800702e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007030:	fab3 f383 	clz	r3, r3
 8007034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007036:	429a      	cmp	r2, r3
 8007038:	d106      	bne.n	8007048 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	2103      	movs	r1, #3
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff f984 	bl	8006350 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fae5 	bl	800661c <LL_ADC_IsEnabled>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	f040 813d 	bne.w	80072d4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	461a      	mov	r2, r3
 8007068:	f7ff fa40 	bl	80064ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	4aa2      	ldr	r2, [pc, #648]	; (80072fc <HAL_ADC_ConfigChannel+0x6dc>)
 8007072:	4293      	cmp	r3, r2
 8007074:	f040 812e 	bne.w	80072d4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10b      	bne.n	80070a0 <HAL_ADC_ConfigChannel+0x480>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	0e9b      	lsrs	r3, r3, #26
 800708e:	3301      	adds	r3, #1
 8007090:	f003 031f 	and.w	r3, r3, #31
 8007094:	2b09      	cmp	r3, #9
 8007096:	bf94      	ite	ls
 8007098:	2301      	movls	r3, #1
 800709a:	2300      	movhi	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	e019      	b.n	80070d4 <HAL_ADC_ConfigChannel+0x4b4>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a8:	fa93 f3a3 	rbit	r3, r3
 80070ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80070ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80070b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80070b8:	2320      	movs	r3, #32
 80070ba:	e003      	b.n	80070c4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80070bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070be:	fab3 f383 	clz	r3, r3
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	3301      	adds	r3, #1
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	bf94      	ite	ls
 80070ce:	2301      	movls	r3, #1
 80070d0:	2300      	movhi	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d079      	beq.n	80071cc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d107      	bne.n	80070f4 <HAL_ADC_ConfigChannel+0x4d4>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	0e9b      	lsrs	r3, r3, #26
 80070ea:	3301      	adds	r3, #1
 80070ec:	069b      	lsls	r3, r3, #26
 80070ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070f2:	e015      	b.n	8007120 <HAL_ADC_ConfigChannel+0x500>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fc:	fa93 f3a3 	rbit	r3, r3
 8007100:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007104:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800710c:	2320      	movs	r3, #32
 800710e:	e003      	b.n	8007118 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007112:	fab3 f383 	clz	r3, r3
 8007116:	b2db      	uxtb	r3, r3
 8007118:	3301      	adds	r3, #1
 800711a:	069b      	lsls	r3, r3, #26
 800711c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <HAL_ADC_ConfigChannel+0x520>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	0e9b      	lsrs	r3, r3, #26
 8007132:	3301      	adds	r3, #1
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	2101      	movs	r1, #1
 800713a:	fa01 f303 	lsl.w	r3, r1, r3
 800713e:	e017      	b.n	8007170 <HAL_ADC_ConfigChannel+0x550>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007148:	fa93 f3a3 	rbit	r3, r3
 800714c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800714e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007150:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007158:	2320      	movs	r3, #32
 800715a:	e003      	b.n	8007164 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800715c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715e:	fab3 f383 	clz	r3, r3
 8007162:	b2db      	uxtb	r3, r3
 8007164:	3301      	adds	r3, #1
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2101      	movs	r1, #1
 800716c:	fa01 f303 	lsl.w	r3, r1, r3
 8007170:	ea42 0103 	orr.w	r1, r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <HAL_ADC_ConfigChannel+0x576>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	0e9b      	lsrs	r3, r3, #26
 8007186:	3301      	adds	r3, #1
 8007188:	f003 021f 	and.w	r2, r3, #31
 800718c:	4613      	mov	r3, r2
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	4413      	add	r3, r2
 8007192:	051b      	lsls	r3, r3, #20
 8007194:	e018      	b.n	80071c8 <HAL_ADC_ConfigChannel+0x5a8>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	fa93 f3a3 	rbit	r3, r3
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80071ae:	2320      	movs	r3, #32
 80071b0:	e003      	b.n	80071ba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	fab3 f383 	clz	r3, r3
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	3301      	adds	r3, #1
 80071bc:	f003 021f 	and.w	r2, r3, #31
 80071c0:	4613      	mov	r3, r2
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	4413      	add	r3, r2
 80071c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071c8:	430b      	orrs	r3, r1
 80071ca:	e07e      	b.n	80072ca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d107      	bne.n	80071e8 <HAL_ADC_ConfigChannel+0x5c8>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	0e9b      	lsrs	r3, r3, #26
 80071de:	3301      	adds	r3, #1
 80071e0:	069b      	lsls	r3, r3, #26
 80071e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80071e6:	e015      	b.n	8007214 <HAL_ADC_ConfigChannel+0x5f4>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	fa93 f3a3 	rbit	r3, r3
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007200:	2320      	movs	r3, #32
 8007202:	e003      	b.n	800720c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	fab3 f383 	clz	r3, r3
 800720a:	b2db      	uxtb	r3, r3
 800720c:	3301      	adds	r3, #1
 800720e:	069b      	lsls	r3, r3, #26
 8007210:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <HAL_ADC_ConfigChannel+0x614>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	0e9b      	lsrs	r3, r3, #26
 8007226:	3301      	adds	r3, #1
 8007228:	f003 031f 	and.w	r3, r3, #31
 800722c:	2101      	movs	r1, #1
 800722e:	fa01 f303 	lsl.w	r3, r1, r3
 8007232:	e017      	b.n	8007264 <HAL_ADC_ConfigChannel+0x644>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	fa93 f3a3 	rbit	r3, r3
 8007240:	61fb      	str	r3, [r7, #28]
  return result;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800724c:	2320      	movs	r3, #32
 800724e:	e003      	b.n	8007258 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	fab3 f383 	clz	r3, r3
 8007256:	b2db      	uxtb	r3, r3
 8007258:	3301      	adds	r3, #1
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	2101      	movs	r1, #1
 8007260:	fa01 f303 	lsl.w	r3, r1, r3
 8007264:	ea42 0103 	orr.w	r1, r2, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <HAL_ADC_ConfigChannel+0x670>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	0e9b      	lsrs	r3, r3, #26
 800727a:	3301      	adds	r3, #1
 800727c:	f003 021f 	and.w	r2, r3, #31
 8007280:	4613      	mov	r3, r2
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	4413      	add	r3, r2
 8007286:	3b1e      	subs	r3, #30
 8007288:	051b      	lsls	r3, r3, #20
 800728a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800728e:	e01b      	b.n	80072c8 <HAL_ADC_ConfigChannel+0x6a8>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	fa93 f3a3 	rbit	r3, r3
 800729c:	613b      	str	r3, [r7, #16]
  return result;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80072a8:	2320      	movs	r3, #32
 80072aa:	e003      	b.n	80072b4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	fab3 f383 	clz	r3, r3
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	3301      	adds	r3, #1
 80072b6:	f003 021f 	and.w	r2, r3, #31
 80072ba:	4613      	mov	r3, r2
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4413      	add	r3, r2
 80072c0:	3b1e      	subs	r3, #30
 80072c2:	051b      	lsls	r3, r3, #20
 80072c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072c8:	430b      	orrs	r3, r1
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	6892      	ldr	r2, [r2, #8]
 80072ce:	4619      	mov	r1, r3
 80072d0:	f7ff f8e1 	bl	8006496 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	4b09      	ldr	r3, [pc, #36]	; (8007300 <HAL_ADC_ConfigChannel+0x6e0>)
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80be 	beq.w	800745e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ea:	d004      	beq.n	80072f6 <HAL_ADC_ConfigChannel+0x6d6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a04      	ldr	r2, [pc, #16]	; (8007304 <HAL_ADC_ConfigChannel+0x6e4>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d10a      	bne.n	800730c <HAL_ADC_ConfigChannel+0x6ec>
 80072f6:	4b04      	ldr	r3, [pc, #16]	; (8007308 <HAL_ADC_ConfigChannel+0x6e8>)
 80072f8:	e009      	b.n	800730e <HAL_ADC_ConfigChannel+0x6ee>
 80072fa:	bf00      	nop
 80072fc:	407f0000 	.word	0x407f0000
 8007300:	80080000 	.word	0x80080000
 8007304:	50000100 	.word	0x50000100
 8007308:	50000300 	.word	0x50000300
 800730c:	4b59      	ldr	r3, [pc, #356]	; (8007474 <HAL_ADC_ConfigChannel+0x854>)
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe ffd6 	bl	80062c0 <LL_ADC_GetCommonPathInternalCh>
 8007314:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a56      	ldr	r2, [pc, #344]	; (8007478 <HAL_ADC_ConfigChannel+0x858>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <HAL_ADC_ConfigChannel+0x70c>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a55      	ldr	r2, [pc, #340]	; (800747c <HAL_ADC_ConfigChannel+0x85c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d13a      	bne.n	80073a2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800732c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007330:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d134      	bne.n	80073a2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007340:	d005      	beq.n	800734e <HAL_ADC_ConfigChannel+0x72e>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a4e      	ldr	r2, [pc, #312]	; (8007480 <HAL_ADC_ConfigChannel+0x860>)
 8007348:	4293      	cmp	r3, r2
 800734a:	f040 8085 	bne.w	8007458 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007356:	d004      	beq.n	8007362 <HAL_ADC_ConfigChannel+0x742>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a49      	ldr	r2, [pc, #292]	; (8007484 <HAL_ADC_ConfigChannel+0x864>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <HAL_ADC_ConfigChannel+0x746>
 8007362:	4a49      	ldr	r2, [pc, #292]	; (8007488 <HAL_ADC_ConfigChannel+0x868>)
 8007364:	e000      	b.n	8007368 <HAL_ADC_ConfigChannel+0x748>
 8007366:	4a43      	ldr	r2, [pc, #268]	; (8007474 <HAL_ADC_ConfigChannel+0x854>)
 8007368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800736c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7fe ff91 	bl	800629a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007378:	4b44      	ldr	r3, [pc, #272]	; (800748c <HAL_ADC_ConfigChannel+0x86c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	099b      	lsrs	r3, r3, #6
 800737e:	4a44      	ldr	r2, [pc, #272]	; (8007490 <HAL_ADC_ConfigChannel+0x870>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	099b      	lsrs	r3, r3, #6
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	4613      	mov	r3, r2
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007392:	e002      	b.n	800739a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3b01      	subs	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f9      	bne.n	8007394 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073a0:	e05a      	b.n	8007458 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a3b      	ldr	r2, [pc, #236]	; (8007494 <HAL_ADC_ConfigChannel+0x874>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d125      	bne.n	80073f8 <HAL_ADC_ConfigChannel+0x7d8>
 80073ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11f      	bne.n	80073f8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a31      	ldr	r2, [pc, #196]	; (8007484 <HAL_ADC_ConfigChannel+0x864>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d104      	bne.n	80073cc <HAL_ADC_ConfigChannel+0x7ac>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a34      	ldr	r2, [pc, #208]	; (8007498 <HAL_ADC_ConfigChannel+0x878>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d047      	beq.n	800745c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073d4:	d004      	beq.n	80073e0 <HAL_ADC_ConfigChannel+0x7c0>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <HAL_ADC_ConfigChannel+0x864>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d101      	bne.n	80073e4 <HAL_ADC_ConfigChannel+0x7c4>
 80073e0:	4a29      	ldr	r2, [pc, #164]	; (8007488 <HAL_ADC_ConfigChannel+0x868>)
 80073e2:	e000      	b.n	80073e6 <HAL_ADC_ConfigChannel+0x7c6>
 80073e4:	4a23      	ldr	r2, [pc, #140]	; (8007474 <HAL_ADC_ConfigChannel+0x854>)
 80073e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ee:	4619      	mov	r1, r3
 80073f0:	4610      	mov	r0, r2
 80073f2:	f7fe ff52 	bl	800629a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073f6:	e031      	b.n	800745c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a27      	ldr	r2, [pc, #156]	; (800749c <HAL_ADC_ConfigChannel+0x87c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d12d      	bne.n	800745e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d127      	bne.n	800745e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1c      	ldr	r2, [pc, #112]	; (8007484 <HAL_ADC_ConfigChannel+0x864>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d022      	beq.n	800745e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007420:	d004      	beq.n	800742c <HAL_ADC_ConfigChannel+0x80c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a17      	ldr	r2, [pc, #92]	; (8007484 <HAL_ADC_ConfigChannel+0x864>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d101      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x810>
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <HAL_ADC_ConfigChannel+0x868>)
 800742e:	e000      	b.n	8007432 <HAL_ADC_ConfigChannel+0x812>
 8007430:	4a10      	ldr	r2, [pc, #64]	; (8007474 <HAL_ADC_ConfigChannel+0x854>)
 8007432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f7fe ff2c 	bl	800629a <LL_ADC_SetCommonPathInternalCh>
 8007442:	e00c      	b.n	800745e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007448:	f043 0220 	orr.w	r2, r3, #32
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007456:	e002      	b.n	800745e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007458:	bf00      	nop
 800745a:	e000      	b.n	800745e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800745c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007466:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800746a:	4618      	mov	r0, r3
 800746c:	37d8      	adds	r7, #216	; 0xd8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	50000700 	.word	0x50000700
 8007478:	c3210000 	.word	0xc3210000
 800747c:	90c00010 	.word	0x90c00010
 8007480:	50000600 	.word	0x50000600
 8007484:	50000100 	.word	0x50000100
 8007488:	50000300 	.word	0x50000300
 800748c:	20000008 	.word	0x20000008
 8007490:	053e2d63 	.word	0x053e2d63
 8007494:	c7520000 	.word	0xc7520000
 8007498:	50000500 	.word	0x50000500
 800749c:	cb840000 	.word	0xcb840000

080074a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff f8b5 	bl	800661c <LL_ADC_IsEnabled>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d14d      	bne.n	8007554 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	4b28      	ldr	r3, [pc, #160]	; (8007560 <ADC_Enable+0xc0>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ca:	f043 0210 	orr.w	r2, r3, #16
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d6:	f043 0201 	orr.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e039      	b.n	8007556 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff f884 	bl	80065f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80074ec:	f7fb fd02 	bl	8002ef4 <HAL_GetTick>
 80074f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80074f2:	e028      	b.n	8007546 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff f88f 	bl	800661c <LL_ADC_IsEnabled>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff f873 	bl	80065f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800750e:	f7fb fcf1 	bl	8002ef4 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d914      	bls.n	8007546 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b01      	cmp	r3, #1
 8007528:	d00d      	beq.n	8007546 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800752e:	f043 0210 	orr.w	r2, r3, #16
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753a:	f043 0201 	orr.w	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e007      	b.n	8007556 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d1cf      	bne.n	80074f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	8000003f 	.word	0x8000003f

08007564 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007570:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007576:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800757a:	2b00      	cmp	r3, #0
 800757c:	d14b      	bne.n	8007616 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007582:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b00      	cmp	r3, #0
 8007596:	d021      	beq.n	80075dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe ff3b 	bl	8006418 <LL_ADC_REG_IsTriggerSourceSWStart>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d032      	beq.n	800760e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d12b      	bne.n	800760e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d11f      	bne.n	800760e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d2:	f043 0201 	orr.w	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80075da:	e018      	b.n	800760e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d111      	bne.n	800760e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d105      	bne.n	800760e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007606:	f043 0201 	orr.w	r2, r3, #1
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fae8 	bl	8006be4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007614:	e00e      	b.n	8007634 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff faf2 	bl	8006c0c <HAL_ADC_ErrorCallback>
}
 8007628:	e004      	b.n	8007634 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
}
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007648:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fad4 	bl	8006bf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007676:	f043 0204 	orr.w	r2, r3, #4
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff fac4 	bl	8006c0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <LL_ADC_IsEnabled>:
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <LL_ADC_IsEnabled+0x18>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e000      	b.n	80076a6 <LL_ADC_IsEnabled+0x1a>
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d101      	bne.n	80076ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80076d8:	b590      	push	{r4, r7, lr}
 80076da:	b0a1      	sub	sp, #132	; 0x84
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e0e7      	b.n	80078c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80076fe:	2300      	movs	r3, #0
 8007700:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8007702:	2300      	movs	r3, #0
 8007704:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800770e:	d102      	bne.n	8007716 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007710:	4b6f      	ldr	r3, [pc, #444]	; (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	e009      	b.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a6e      	ldr	r2, [pc, #440]	; (80078d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d102      	bne.n	8007726 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007720:	4b6d      	ldr	r3, [pc, #436]	; (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	e001      	b.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007726:	2300      	movs	r3, #0
 8007728:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10b      	bne.n	8007748 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007734:	f043 0220 	orr.w	r2, r3, #32
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0be      	b.n	80078c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff ffb1 	bl	80076b2 <LL_ADC_REG_IsConversionOngoing>
 8007750:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff ffab 	bl	80076b2 <LL_ADC_REG_IsConversionOngoing>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 80a0 	bne.w	80078a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 809c 	bne.w	80078a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007774:	d004      	beq.n	8007780 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a55      	ldr	r2, [pc, #340]	; (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d101      	bne.n	8007784 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007780:	4b56      	ldr	r3, [pc, #344]	; (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007782:	e000      	b.n	8007786 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007784:	4b56      	ldr	r3, [pc, #344]	; (80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007786:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d04b      	beq.n	8007828 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	6859      	ldr	r1, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077a2:	035b      	lsls	r3, r3, #13
 80077a4:	430b      	orrs	r3, r1
 80077a6:	431a      	orrs	r2, r3
 80077a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077b4:	d004      	beq.n	80077c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a45      	ldr	r2, [pc, #276]	; (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10f      	bne.n	80077e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80077c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80077c4:	f7ff ff62 	bl	800768c <LL_ADC_IsEnabled>
 80077c8:	4604      	mov	r4, r0
 80077ca:	4841      	ldr	r0, [pc, #260]	; (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80077cc:	f7ff ff5e 	bl	800768c <LL_ADC_IsEnabled>
 80077d0:	4603      	mov	r3, r0
 80077d2:	4323      	orrs	r3, r4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e012      	b.n	8007806 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80077e0:	483c      	ldr	r0, [pc, #240]	; (80078d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80077e2:	f7ff ff53 	bl	800768c <LL_ADC_IsEnabled>
 80077e6:	4604      	mov	r4, r0
 80077e8:	483b      	ldr	r0, [pc, #236]	; (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80077ea:	f7ff ff4f 	bl	800768c <LL_ADC_IsEnabled>
 80077ee:	4603      	mov	r3, r0
 80077f0:	431c      	orrs	r4, r3
 80077f2:	483c      	ldr	r0, [pc, #240]	; (80078e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80077f4:	f7ff ff4a 	bl	800768c <LL_ADC_IsEnabled>
 80077f8:	4603      	mov	r3, r0
 80077fa:	4323      	orrs	r3, r4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	bf0c      	ite	eq
 8007800:	2301      	moveq	r3, #1
 8007802:	2300      	movne	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d056      	beq.n	80078b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800780a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007812:	f023 030f 	bic.w	r3, r3, #15
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	6811      	ldr	r1, [r2, #0]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	6892      	ldr	r2, [r2, #8]
 800781e:	430a      	orrs	r2, r1
 8007820:	431a      	orrs	r2, r3
 8007822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007824:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007826:	e047      	b.n	80078b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007832:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800783c:	d004      	beq.n	8007848 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a23      	ldr	r2, [pc, #140]	; (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d10f      	bne.n	8007868 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007848:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800784c:	f7ff ff1e 	bl	800768c <LL_ADC_IsEnabled>
 8007850:	4604      	mov	r4, r0
 8007852:	481f      	ldr	r0, [pc, #124]	; (80078d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007854:	f7ff ff1a 	bl	800768c <LL_ADC_IsEnabled>
 8007858:	4603      	mov	r3, r0
 800785a:	4323      	orrs	r3, r4
 800785c:	2b00      	cmp	r3, #0
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	e012      	b.n	800788e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007868:	481a      	ldr	r0, [pc, #104]	; (80078d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800786a:	f7ff ff0f 	bl	800768c <LL_ADC_IsEnabled>
 800786e:	4604      	mov	r4, r0
 8007870:	4819      	ldr	r0, [pc, #100]	; (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007872:	f7ff ff0b 	bl	800768c <LL_ADC_IsEnabled>
 8007876:	4603      	mov	r3, r0
 8007878:	431c      	orrs	r4, r3
 800787a:	481a      	ldr	r0, [pc, #104]	; (80078e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800787c:	f7ff ff06 	bl	800768c <LL_ADC_IsEnabled>
 8007880:	4603      	mov	r3, r0
 8007882:	4323      	orrs	r3, r4
 8007884:	2b00      	cmp	r3, #0
 8007886:	bf0c      	ite	eq
 8007888:	2301      	moveq	r3, #1
 800788a:	2300      	movne	r3, #0
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d012      	beq.n	80078b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800789a:	f023 030f 	bic.w	r3, r3, #15
 800789e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80078a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078a2:	e009      	b.n	80078b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a8:	f043 0220 	orr.w	r2, r3, #32
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80078b6:	e000      	b.n	80078ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80078c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3784      	adds	r7, #132	; 0x84
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	50000100 	.word	0x50000100
 80078d4:	50000400 	.word	0x50000400
 80078d8:	50000500 	.word	0x50000500
 80078dc:	50000300 	.word	0x50000300
 80078e0:	50000700 	.word	0x50000700
 80078e4:	50000600 	.word	0x50000600

080078e8 <__NVIC_SetPriorityGrouping>:
{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <__NVIC_SetPriorityGrouping+0x44>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007904:	4013      	ands	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800791a:	4a04      	ldr	r2, [pc, #16]	; (800792c <__NVIC_SetPriorityGrouping+0x44>)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	60d3      	str	r3, [r2, #12]
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <__NVIC_GetPriorityGrouping>:
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <__NVIC_GetPriorityGrouping+0x18>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	0a1b      	lsrs	r3, r3, #8
 800793a:	f003 0307 	and.w	r3, r3, #7
}
 800793e:	4618      	mov	r0, r3
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	e000ed00 	.word	0xe000ed00

0800794c <__NVIC_EnableIRQ>:
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795a:	2b00      	cmp	r3, #0
 800795c:	db0b      	blt.n	8007976 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	f003 021f 	and.w	r2, r3, #31
 8007964:	4907      	ldr	r1, [pc, #28]	; (8007984 <__NVIC_EnableIRQ+0x38>)
 8007966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	2001      	movs	r0, #1
 800796e:	fa00 f202 	lsl.w	r2, r0, r2
 8007972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	e000e100 	.word	0xe000e100

08007988 <__NVIC_SetPriority>:
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	6039      	str	r1, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007998:	2b00      	cmp	r3, #0
 800799a:	db0a      	blt.n	80079b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	490c      	ldr	r1, [pc, #48]	; (80079d4 <__NVIC_SetPriority+0x4c>)
 80079a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a6:	0112      	lsls	r2, r2, #4
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	440b      	add	r3, r1
 80079ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079b0:	e00a      	b.n	80079c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	4908      	ldr	r1, [pc, #32]	; (80079d8 <__NVIC_SetPriority+0x50>)
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	3b04      	subs	r3, #4
 80079c0:	0112      	lsls	r2, r2, #4
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	440b      	add	r3, r1
 80079c6:	761a      	strb	r2, [r3, #24]
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	e000e100 	.word	0xe000e100
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <NVIC_EncodePriority>:
{
 80079dc:	b480      	push	{r7}
 80079de:	b089      	sub	sp, #36	; 0x24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f1c3 0307 	rsb	r3, r3, #7
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf28      	it	cs
 80079fa:	2304      	movcs	r3, #4
 80079fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2b06      	cmp	r3, #6
 8007a04:	d902      	bls.n	8007a0c <NVIC_EncodePriority+0x30>
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	3b03      	subs	r3, #3
 8007a0a:	e000      	b.n	8007a0e <NVIC_EncodePriority+0x32>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	401a      	ands	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a24:	f04f 31ff 	mov.w	r1, #4294967295
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	43d9      	mvns	r1, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a34:	4313      	orrs	r3, r2
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3724      	adds	r7, #36	; 0x24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a54:	d301      	bcc.n	8007a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a56:	2301      	movs	r3, #1
 8007a58:	e00f      	b.n	8007a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a5a:	4a0a      	ldr	r2, [pc, #40]	; (8007a84 <SysTick_Config+0x40>)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a62:	210f      	movs	r1, #15
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	f7ff ff8e 	bl	8007988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <SysTick_Config+0x40>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a72:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <SysTick_Config+0x40>)
 8007a74:	2207      	movs	r2, #7
 8007a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	e000e010 	.word	0xe000e010

08007a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7ff ff29 	bl	80078e8 <__NVIC_SetPriorityGrouping>
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007aac:	f7ff ff40 	bl	8007930 <__NVIC_GetPriorityGrouping>
 8007ab0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	6978      	ldr	r0, [r7, #20]
 8007ab8:	f7ff ff90 	bl	80079dc <NVIC_EncodePriority>
 8007abc:	4602      	mov	r2, r0
 8007abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff ff5f 	bl	8007988 <__NVIC_SetPriority>
}
 8007aca:	bf00      	nop
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	4603      	mov	r3, r0
 8007ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff ff33 	bl	800794c <__NVIC_EnableIRQ>
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff ffa4 	bl	8007a44 <SysTick_Config>
 8007afc:	4603      	mov	r3, r0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e08d      	b.n	8007c36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	4b47      	ldr	r3, [pc, #284]	; (8007c40 <HAL_DMA_Init+0x138>)
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d80f      	bhi.n	8007b46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4b45      	ldr	r3, [pc, #276]	; (8007c44 <HAL_DMA_Init+0x13c>)
 8007b2e:	4413      	add	r3, r2
 8007b30:	4a45      	ldr	r2, [pc, #276]	; (8007c48 <HAL_DMA_Init+0x140>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	091b      	lsrs	r3, r3, #4
 8007b38:	009a      	lsls	r2, r3, #2
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a42      	ldr	r2, [pc, #264]	; (8007c4c <HAL_DMA_Init+0x144>)
 8007b42:	641a      	str	r2, [r3, #64]	; 0x40
 8007b44:	e00e      	b.n	8007b64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <HAL_DMA_Init+0x148>)
 8007b4e:	4413      	add	r3, r2
 8007b50:	4a3d      	ldr	r2, [pc, #244]	; (8007c48 <HAL_DMA_Init+0x140>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	091b      	lsrs	r3, r3, #4
 8007b58:	009a      	lsls	r2, r3, #2
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a3c      	ldr	r2, [pc, #240]	; (8007c54 <HAL_DMA_Init+0x14c>)
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa76 	bl	80080a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc4:	d102      	bne.n	8007bcc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007be0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d010      	beq.n	8007c0c <HAL_DMA_Init+0x104>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d80c      	bhi.n	8007c0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa96 	bl	8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	e008      	b.n	8007c1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40020407 	.word	0x40020407
 8007c44:	bffdfff8 	.word	0xbffdfff8
 8007c48:	cccccccd 	.word	0xcccccccd
 8007c4c:	40020000 	.word	0x40020000
 8007c50:	bffdfbf8 	.word	0xbffdfbf8
 8007c54:	40020400 	.word	0x40020400

08007c58 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_DMA_Start_IT+0x20>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e066      	b.n	8007d46 <HAL_DMA_Start_IT+0xee>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d155      	bne.n	8007d38 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0201 	bic.w	r2, r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f9bb 	bl	800802c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f042 020e 	orr.w	r2, r2, #14
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e00f      	b.n	8007cf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0204 	bic.w	r2, r2, #4
 8007cde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 020a 	orr.w	r2, r2, #10
 8007cee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d0c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d24:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0201 	orr.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e005      	b.n	8007d44 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007d40:	2302      	movs	r3, #2
 8007d42:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d005      	beq.n	8007d72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	73fb      	strb	r3, [r7, #15]
 8007d70:	e037      	b.n	8007de2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 020e 	bic.w	r2, r2, #14
 8007d80:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d90:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	f003 021f 	and.w	r2, r3, #31
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	2101      	movs	r1, #1
 8007db0:	fa01 f202 	lsl.w	r2, r1, r2
 8007db4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007dbe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00c      	beq.n	8007de2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dd6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007de0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d00d      	beq.n	8007e34 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e047      	b.n	8007ec4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 020e 	bic.w	r2, r2, #14
 8007e42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0201 	bic.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e68:	f003 021f 	and.w	r2, r3, #31
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	2101      	movs	r1, #1
 8007e72:	fa01 f202 	lsl.w	r2, r1, r2
 8007e76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00c      	beq.n	8007ea4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007ea2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
    }
  }
  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eea:	f003 031f 	and.w	r3, r3, #31
 8007eee:	2204      	movs	r2, #4
 8007ef0:	409a      	lsls	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d026      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x7a>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f003 0304 	and.w	r3, r3, #4
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d021      	beq.n	8007f48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d107      	bne.n	8007f22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0204 	bic.w	r2, r2, #4
 8007f20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	f003 021f 	and.w	r2, r3, #31
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	2104      	movs	r1, #4
 8007f30:	fa01 f202 	lsl.w	r2, r1, r2
 8007f34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d071      	beq.n	8008022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f46:	e06c      	b.n	8008022 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	2202      	movs	r2, #2
 8007f52:	409a      	lsls	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4013      	ands	r3, r2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d02e      	beq.n	8007fba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d029      	beq.n	8007fba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10b      	bne.n	8007f8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 020a 	bic.w	r2, r2, #10
 8007f82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f90:	f003 021f 	and.w	r2, r3, #31
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	2102      	movs	r1, #2
 8007f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8007f9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d038      	beq.n	8008022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007fb8:	e033      	b.n	8008022 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2208      	movs	r2, #8
 8007fc4:	409a      	lsls	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d02a      	beq.n	8008024 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d025      	beq.n	8008024 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 020e 	bic.w	r2, r2, #14
 8007fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fec:	f003 021f 	and.w	r2, r3, #31
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8007ffa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008022:	bf00      	nop
 8008024:	bf00      	nop
}
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008042:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008054:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	f003 021f 	and.w	r2, r3, #31
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	2101      	movs	r1, #1
 8008064:	fa01 f202 	lsl.w	r2, r1, r2
 8008068:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	2b10      	cmp	r3, #16
 8008078:	d108      	bne.n	800808c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800808a:	e007      	b.n	800809c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	60da      	str	r2, [r3, #12]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	4b16      	ldr	r3, [pc, #88]	; (8008110 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d802      	bhi.n	80080c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80080bc:	4b15      	ldr	r3, [pc, #84]	; (8008114 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	e001      	b.n	80080c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80080c4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	3b08      	subs	r3, #8
 80080d2:	4a12      	ldr	r2, [pc, #72]	; (800811c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80080d4:	fba2 2303 	umull	r2, r3, r2, r3
 80080d8:	091b      	lsrs	r3, r3, #4
 80080da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e0:	089b      	lsrs	r3, r3, #2
 80080e2:	009a      	lsls	r2, r3, #2
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	4413      	add	r3, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a0b      	ldr	r2, [pc, #44]	; (8008120 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2201      	movs	r2, #1
 80080fc:	409a      	lsls	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	40020407 	.word	0x40020407
 8008114:	40020800 	.word	0x40020800
 8008118:	40020820 	.word	0x40020820
 800811c:	cccccccd 	.word	0xcccccccd
 8008120:	40020880 	.word	0x40020880

08008124 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a08      	ldr	r2, [pc, #32]	; (8008168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008146:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b01      	subs	r3, #1
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	2201      	movs	r2, #1
 8008152:	409a      	lsls	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008158:	bf00      	nop
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	1000823f 	.word	0x1000823f
 8008168:	40020940 	.word	0x40020940

0800816c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e147      	b.n	800840e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7f9 fd04 	bl	8001ba0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0210 	bic.w	r2, r2, #16
 80081a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80081a8:	f7fa fea4 	bl	8002ef4 <HAL_GetTick>
 80081ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80081ae:	e012      	b.n	80081d6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80081b0:	f7fa fea0 	bl	8002ef4 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b0a      	cmp	r3, #10
 80081bc:	d90b      	bls.n	80081d6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c2:	f043 0201 	orr.w	r2, r3, #1
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2203      	movs	r2, #3
 80081ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e11b      	b.n	800840e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d0e5      	beq.n	80081b0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80081f4:	f7fa fe7e 	bl	8002ef4 <HAL_GetTick>
 80081f8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80081fa:	e012      	b.n	8008222 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80081fc:	f7fa fe7a 	bl	8002ef4 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b0a      	cmp	r3, #10
 8008208:	d90b      	bls.n	8008222 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820e:	f043 0201 	orr.w	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2203      	movs	r2, #3
 800821a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e0f5      	b.n	800840e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0e5      	beq.n	80081fc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0202 	orr.w	r2, r2, #2
 800823e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a74      	ldr	r2, [pc, #464]	; (8008418 <HAL_FDCAN_Init+0x2ac>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d103      	bne.n	8008252 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800824a:	4a74      	ldr	r2, [pc, #464]	; (800841c <HAL_FDCAN_Init+0x2b0>)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7c1b      	ldrb	r3, [r3, #16]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d108      	bne.n	800826c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008268:	619a      	str	r2, [r3, #24]
 800826a:	e007      	b.n	800827c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800827a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7c5b      	ldrb	r3, [r3, #17]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d108      	bne.n	8008296 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008292:	619a      	str	r2, [r3, #24]
 8008294:	e007      	b.n	80082a6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699a      	ldr	r2, [r3, #24]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	7c9b      	ldrb	r3, [r3, #18]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d108      	bne.n	80082c0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699a      	ldr	r2, [r3, #24]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80082bc:	619a      	str	r2, [r3, #24]
 80082be:	e007      	b.n	80082d0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80082ce:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	430a      	orrs	r2, r1
 80082e4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699a      	ldr	r2, [r3, #24]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80082f4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0210 	bic.w	r2, r2, #16
 8008304:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d108      	bne.n	8008320 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	699a      	ldr	r2, [r3, #24]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0204 	orr.w	r2, r2, #4
 800831c:	619a      	str	r2, [r3, #24]
 800831e:	e02c      	b.n	800837a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d028      	beq.n	800837a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d01c      	beq.n	800836a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699a      	ldr	r2, [r3, #24]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800833e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0210 	orr.w	r2, r2, #16
 800834e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	2b03      	cmp	r3, #3
 8008356:	d110      	bne.n	800837a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0220 	orr.w	r2, r2, #32
 8008366:	619a      	str	r2, [r3, #24]
 8008368:	e007      	b.n	800837a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0220 	orr.w	r2, r2, #32
 8008378:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	3b01      	subs	r3, #1
 8008380:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	3b01      	subs	r3, #1
 8008388:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800838a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008392:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	3b01      	subs	r3, #1
 800839c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80083a2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80083a4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ae:	d115      	bne.n	80083dc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	3b01      	subs	r3, #1
 80083bc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80083be:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c4:	3b01      	subs	r3, #1
 80083c6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80083c8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	3b01      	subs	r3, #1
 80083d2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80083d8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80083da:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fc4e 	bl	8008c94 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	40006400 	.word	0x40006400
 800841c:	40006500 	.word	0x40006500

08008420 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008430:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d002      	beq.n	800843e <HAL_FDCAN_ConfigFilter+0x1e>
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d13d      	bne.n	80084ba <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d119      	bne.n	800847a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008452:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800845a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008460:	4313      	orrs	r3, r2
 8008462:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	601a      	str	r2, [r3, #0]
 8008478:	e01d      	b.n	80084b6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	075a      	lsls	r2, r3, #29
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	079a      	lsls	r2, r3, #30
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4413      	add	r3, r2
 80084a2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	3304      	adds	r3, #4
 80084ae:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e006      	b.n	80084c8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084be:	f043 0202 	orr.w	r2, r3, #2
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
  }
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d110      	bne.n	800850a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0201 	bic.w	r2, r2, #1
 80084fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	e006      	b.n	8008518 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850e:	f043 0204 	orr.w	r2, r3, #4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
  }
}
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d12c      	bne.n	8008596 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008550:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e023      	b.n	80085a4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008564:	0c1b      	lsrs	r3, r3, #16
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	68b9      	ldr	r1, [r7, #8]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fbfa 	bl	8008d6c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2101      	movs	r1, #1
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	fa01 f202 	lsl.w	r2, r1, r2
 8008584:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008588:	2201      	movs	r2, #1
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	409a      	lsls	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	e006      	b.n	80085a4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859a:	f043 0208 	orr.w	r2, r3, #8
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
  }
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b08b      	sub	sp, #44	; 0x2c
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085c0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80085c2:	7efb      	ldrb	r3, [r7, #27]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	f040 80bc 	bne.w	8008742 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b40      	cmp	r3, #64	; 0x40
 80085ce:	d121      	bne.n	8008614 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d107      	bne.n	80085f0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e0af      	b.n	8008750 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f8:	0a1b      	lsrs	r3, r3, #8
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	4613      	mov	r3, r2
 8008608:	00db      	lsls	r3, r3, #3
 800860a:	4413      	add	r3, r2
 800860c:	00db      	lsls	r3, r3, #3
 800860e:	440b      	add	r3, r1
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
 8008612:	e020      	b.n	8008656 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	2b00      	cmp	r3, #0
 8008622:	d107      	bne.n	8008634 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008628:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e08d      	b.n	8008750 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800863c:	0a1b      	lsrs	r3, r3, #8
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008648:	69fa      	ldr	r2, [r7, #28]
 800864a:	4613      	mov	r3, r2
 800864c:	00db      	lsls	r3, r3, #3
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d107      	bne.n	800867a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	0c9b      	lsrs	r3, r3, #18
 8008670:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e005      	b.n	8008686 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	3304      	adds	r3, #4
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	0e1b      	lsrs	r3, r3, #24
 80086d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	0fda      	lsrs	r2, r3, #31
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	3304      	adds	r3, #4
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80086f4:	2300      	movs	r3, #0
 80086f6:	623b      	str	r3, [r7, #32]
 80086f8:	e00a      	b.n	8008710 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	441a      	add	r2, r3
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	440b      	add	r3, r1
 8008706:	7812      	ldrb	r2, [r2, #0]
 8008708:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	3301      	adds	r3, #1
 800870e:	623b      	str	r3, [r7, #32]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	0c1b      	lsrs	r3, r3, #16
 8008716:	4a11      	ldr	r2, [pc, #68]	; (800875c <HAL_FDCAN_GetRxMessage+0x1b0>)
 8008718:	5cd3      	ldrb	r3, [r2, r3]
 800871a:	461a      	mov	r2, r3
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	4293      	cmp	r3, r2
 8008720:	d3eb      	bcc.n	80086fa <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2b40      	cmp	r3, #64	; 0x40
 8008726:	d105      	bne.n	8008734 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008732:	e004      	b.n	800873e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e006      	b.n	8008750 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008746:	f043 0208 	orr.w	r2, r3, #8
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
  }
}
 8008750:	4618      	mov	r0, r3
 8008752:	372c      	adds	r7, #44	; 0x2c
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	08011608 	.word	0x08011608

08008760 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8008776:	68fb      	ldr	r3, [r7, #12]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008796:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d003      	beq.n	80087a6 <HAL_FDCAN_ActivateNotification+0x22>
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	f040 80c8 	bne.w	8008936 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ac:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d03b      	beq.n	800883a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d004      	beq.n	80087d6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d031      	beq.n	800883a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d004      	beq.n	80087ea <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d027      	beq.n	800883a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d004      	beq.n	80087fe <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f003 0308 	and.w	r3, r3, #8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d01d      	beq.n	800883a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b00      	cmp	r3, #0
 8008810:	d013      	beq.n	800883a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f003 0320 	and.w	r3, r3, #32
 8008822:	2b00      	cmp	r3, #0
 8008824:	d009      	beq.n	800883a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00c      	beq.n	800884a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	d107      	bne.n	800884a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f042 0201 	orr.w	r2, r2, #1
 8008848:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	f003 0307 	and.w	r3, r3, #7
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d13b      	bne.n	80088d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d131      	bne.n	80088d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d127      	bne.n	80088d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f003 0308 	and.w	r3, r3, #8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d11d      	bne.n	80088d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	f003 0310 	and.w	r3, r3, #16
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d113      	bne.n	80088d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00c      	beq.n	80088e6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d007      	beq.n	80088e6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0202 	orr.w	r2, r2, #2
 80088e4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d009      	beq.n	8008904 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	430a      	orrs	r2, r1
 8008900:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	430a      	orrs	r2, r1
 800891e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	430a      	orrs	r2, r1
 8008930:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	e006      	b.n	8008944 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893a:	f043 0202 	orr.w	r2, r3, #2
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
  }
}
 8008944:	4618      	mov	r0, r3
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08a      	sub	sp, #40	; 0x28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896c:	4013      	ands	r3, r2
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	6a3a      	ldr	r2, [r7, #32]
 8008984:	4013      	ands	r3, r2
 8008986:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008992:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	4013      	ands	r3, r2
 800899e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80089aa:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	4013      	ands	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80089c2:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	4013      	ands	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00d      	beq.n	80089fa <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d006      	beq.n	80089fa <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2240      	movs	r2, #64	; 0x40
 80089f2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f92e 	bl	8008c56 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01b      	beq.n	8008a40 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d014      	beq.n	8008a40 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a1e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a36:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008a38:	6939      	ldr	r1, [r7, #16]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f8ec 	bl	8008c18 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d007      	beq.n	8008a56 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f8b6 	bl	8008bc2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6a3a      	ldr	r2, [r7, #32]
 8008a62:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008a64:	6a39      	ldr	r1, [r7, #32]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fb f89c 	bl	8003ba4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008a7a:	69f9      	ldr	r1, [r7, #28]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f8ab 	bl	8008bd8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00e      	beq.n	8008aae <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aa6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f8a0 	bl	8008bee <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d01a      	beq.n	8008af2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d013      	beq.n	8008af2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008ad2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2280      	movs	r2, #128	; 0x80
 8008ae8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f888 	bl	8008c02 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d007      	beq.n	8008b1e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b16:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f888 	bl	8008c2e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00e      	beq.n	8008b4a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b42:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f87c 	bl	8008c42 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d011      	beq.n	8008b7c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d007      	beq.n	8008b92 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008b8a:	6979      	ldr	r1, [r7, #20]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f876 	bl	8008c7e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d009      	beq.n	8008bac <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f858 	bl	8008c6a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008bba:	bf00      	nop
 8008bbc:	3728      	adds	r7, #40	; 0x28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008c9c:	4b30      	ldr	r3, [pc, #192]	; (8008d60 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008c9e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a2f      	ldr	r2, [pc, #188]	; (8008d64 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d103      	bne.n	8008cb2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008cb0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a2c      	ldr	r2, [pc, #176]	; (8008d68 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d103      	bne.n	8008cc4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008cc2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cd2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cda:	041a      	lsls	r2, r3, #16
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cf8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	061a      	lsls	r2, r3, #24
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	60fb      	str	r3, [r7, #12]
 8008d38:	e005      	b.n	8008d46 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3304      	adds	r3, #4
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d3f3      	bcc.n	8008d3a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	4000a400 	.word	0x4000a400
 8008d64:	40006800 	.word	0x40006800
 8008d68:	40006c00 	.word	0x40006c00

08008d6c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b089      	sub	sp, #36	; 0x24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008d8a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008d92:	4313      	orrs	r3, r2
 8008d94:	61fb      	str	r3, [r7, #28]
 8008d96:	e00a      	b.n	8008dae <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008da0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008da6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dac:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008db8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008dbe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008dc4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4413      	add	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	440b      	add	r3, r1
 8008dde:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	3304      	adds	r3, #4
 8008dea:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	3304      	adds	r3, #4
 8008df6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e020      	b.n	8008e40 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	3303      	adds	r3, #3
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	4413      	add	r3, r2
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	440b      	add	r3, r1
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008e16:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	6879      	ldr	r1, [r7, #4]
 8008e1e:	440b      	add	r3, r1
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008e24:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008e2e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	3304      	adds	r3, #4
 8008e38:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	4a06      	ldr	r2, [pc, #24]	; (8008e60 <FDCAN_CopyMessageToRAM+0xf4>)
 8008e48:	5cd3      	ldrb	r3, [r2, r3]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d3d5      	bcc.n	8008dfe <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8008e52:	bf00      	nop
 8008e54:	bf00      	nop
 8008e56:	3724      	adds	r7, #36	; 0x24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	08011608 	.word	0x08011608

08008e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008e72:	e15a      	b.n	800912a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	2101      	movs	r1, #1
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e80:	4013      	ands	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 814c 	beq.w	8009124 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d005      	beq.n	8008ea4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d130      	bne.n	8008f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	2203      	movs	r2, #3
 8008eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008eda:	2201      	movs	r2, #1
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	43db      	mvns	r3, r3
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	091b      	lsrs	r3, r3, #4
 8008ef0:	f003 0201 	and.w	r2, r3, #1
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d017      	beq.n	8008f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f22:	43db      	mvns	r3, r3
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	4013      	ands	r3, r2
 8008f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d123      	bne.n	8008f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	08da      	lsrs	r2, r3, #3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3208      	adds	r2, #8
 8008f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	220f      	movs	r2, #15
 8008f66:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	4013      	ands	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	08da      	lsrs	r2, r3, #3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3208      	adds	r2, #8
 8008f90:	6939      	ldr	r1, [r7, #16]
 8008f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	2203      	movs	r2, #3
 8008fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa6:	43db      	mvns	r3, r3
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	4013      	ands	r3, r2
 8008fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f003 0203 	and.w	r2, r3, #3
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80a6 	beq.w	8009124 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fd8:	4b5b      	ldr	r3, [pc, #364]	; (8009148 <HAL_GPIO_Init+0x2e4>)
 8008fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fdc:	4a5a      	ldr	r2, [pc, #360]	; (8009148 <HAL_GPIO_Init+0x2e4>)
 8008fde:	f043 0301 	orr.w	r3, r3, #1
 8008fe2:	6613      	str	r3, [r2, #96]	; 0x60
 8008fe4:	4b58      	ldr	r3, [pc, #352]	; (8009148 <HAL_GPIO_Init+0x2e4>)
 8008fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	60bb      	str	r3, [r7, #8]
 8008fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ff0:	4a56      	ldr	r2, [pc, #344]	; (800914c <HAL_GPIO_Init+0x2e8>)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	089b      	lsrs	r3, r3, #2
 8008ff6:	3302      	adds	r3, #2
 8008ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	220f      	movs	r2, #15
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	4013      	ands	r3, r2
 8009012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800901a:	d01f      	beq.n	800905c <HAL_GPIO_Init+0x1f8>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a4c      	ldr	r2, [pc, #304]	; (8009150 <HAL_GPIO_Init+0x2ec>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d019      	beq.n	8009058 <HAL_GPIO_Init+0x1f4>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a4b      	ldr	r2, [pc, #300]	; (8009154 <HAL_GPIO_Init+0x2f0>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d013      	beq.n	8009054 <HAL_GPIO_Init+0x1f0>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a4a      	ldr	r2, [pc, #296]	; (8009158 <HAL_GPIO_Init+0x2f4>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d00d      	beq.n	8009050 <HAL_GPIO_Init+0x1ec>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a49      	ldr	r2, [pc, #292]	; (800915c <HAL_GPIO_Init+0x2f8>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d007      	beq.n	800904c <HAL_GPIO_Init+0x1e8>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a48      	ldr	r2, [pc, #288]	; (8009160 <HAL_GPIO_Init+0x2fc>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d101      	bne.n	8009048 <HAL_GPIO_Init+0x1e4>
 8009044:	2305      	movs	r3, #5
 8009046:	e00a      	b.n	800905e <HAL_GPIO_Init+0x1fa>
 8009048:	2306      	movs	r3, #6
 800904a:	e008      	b.n	800905e <HAL_GPIO_Init+0x1fa>
 800904c:	2304      	movs	r3, #4
 800904e:	e006      	b.n	800905e <HAL_GPIO_Init+0x1fa>
 8009050:	2303      	movs	r3, #3
 8009052:	e004      	b.n	800905e <HAL_GPIO_Init+0x1fa>
 8009054:	2302      	movs	r3, #2
 8009056:	e002      	b.n	800905e <HAL_GPIO_Init+0x1fa>
 8009058:	2301      	movs	r3, #1
 800905a:	e000      	b.n	800905e <HAL_GPIO_Init+0x1fa>
 800905c:	2300      	movs	r3, #0
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	f002 0203 	and.w	r2, r2, #3
 8009064:	0092      	lsls	r2, r2, #2
 8009066:	4093      	lsls	r3, r2
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800906e:	4937      	ldr	r1, [pc, #220]	; (800914c <HAL_GPIO_Init+0x2e8>)
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	089b      	lsrs	r3, r3, #2
 8009074:	3302      	adds	r3, #2
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800907c:	4b39      	ldr	r3, [pc, #228]	; (8009164 <HAL_GPIO_Init+0x300>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	43db      	mvns	r3, r3
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	4013      	ands	r3, r2
 800908a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	4313      	orrs	r3, r2
 800909e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80090a0:	4a30      	ldr	r2, [pc, #192]	; (8009164 <HAL_GPIO_Init+0x300>)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80090a6:	4b2f      	ldr	r3, [pc, #188]	; (8009164 <HAL_GPIO_Init+0x300>)
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	43db      	mvns	r3, r3
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4013      	ands	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80090ca:	4a26      	ldr	r2, [pc, #152]	; (8009164 <HAL_GPIO_Init+0x300>)
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80090d0:	4b24      	ldr	r3, [pc, #144]	; (8009164 <HAL_GPIO_Init+0x300>)
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	43db      	mvns	r3, r3
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4013      	ands	r3, r2
 80090de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80090f4:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <HAL_GPIO_Init+0x300>)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80090fa:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <HAL_GPIO_Init+0x300>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	43db      	mvns	r3, r3
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4013      	ands	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800911e:	4a11      	ldr	r2, [pc, #68]	; (8009164 <HAL_GPIO_Init+0x300>)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	3301      	adds	r3, #1
 8009128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	fa22 f303 	lsr.w	r3, r2, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	f47f ae9d 	bne.w	8008e74 <HAL_GPIO_Init+0x10>
  }
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	371c      	adds	r7, #28
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	40021000 	.word	0x40021000
 800914c:	40010000 	.word	0x40010000
 8009150:	48000400 	.word	0x48000400
 8009154:	48000800 	.word	0x48000800
 8009158:	48000c00 	.word	0x48000c00
 800915c:	48001000 	.word	0x48001000
 8009160:	48001400 	.word	0x48001400
 8009164:	40010400 	.word	0x40010400

08009168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691a      	ldr	r2, [r3, #16]
 8009178:	887b      	ldrh	r3, [r7, #2]
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009180:	2301      	movs	r3, #1
 8009182:	73fb      	strb	r3, [r7, #15]
 8009184:	e001      	b.n	800918a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	807b      	strh	r3, [r7, #2]
 80091a4:	4613      	mov	r3, r2
 80091a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091a8:	787b      	ldrb	r3, [r7, #1]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80091ae:	887a      	ldrh	r2, [r7, #2]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80091b4:	e002      	b.n	80091bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80091b6:	887a      	ldrh	r2, [r7, #2]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091da:	887a      	ldrh	r2, [r7, #2]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4013      	ands	r3, r2
 80091e0:	041a      	lsls	r2, r3, #16
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	43d9      	mvns	r1, r3
 80091e6:	887b      	ldrh	r3, [r7, #2]
 80091e8:	400b      	ands	r3, r1
 80091ea:	431a      	orrs	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	619a      	str	r2, [r3, #24]
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009206:	4b08      	ldr	r3, [pc, #32]	; (8009228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009208:	695a      	ldr	r2, [r3, #20]
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	4013      	ands	r3, r2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d006      	beq.n	8009220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009212:	4a05      	ldr	r2, [pc, #20]	; (8009228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	4618      	mov	r0, r3
 800921c:	f7fa fc78 	bl	8003b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40010400 	.word	0x40010400

0800922c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d141      	bne.n	80092be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800923a:	4b4b      	ldr	r3, [pc, #300]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009246:	d131      	bne.n	80092ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009248:	4b47      	ldr	r3, [pc, #284]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800924a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800924e:	4a46      	ldr	r2, [pc, #280]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009258:	4b43      	ldr	r3, [pc, #268]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009260:	4a41      	ldr	r2, [pc, #260]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009268:	4b40      	ldr	r3, [pc, #256]	; (800936c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2232      	movs	r2, #50	; 0x32
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	4a3f      	ldr	r2, [pc, #252]	; (8009370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009274:	fba2 2303 	umull	r2, r3, r2, r3
 8009278:	0c9b      	lsrs	r3, r3, #18
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800927e:	e002      	b.n	8009286 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3b01      	subs	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009286:	4b38      	ldr	r3, [pc, #224]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800928e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009292:	d102      	bne.n	800929a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f2      	bne.n	8009280 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800929a:	4b33      	ldr	r3, [pc, #204]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a6:	d158      	bne.n	800935a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e057      	b.n	800935c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092ac:	4b2e      	ldr	r3, [pc, #184]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b2:	4a2d      	ldr	r2, [pc, #180]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80092bc:	e04d      	b.n	800935a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c4:	d141      	bne.n	800934a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80092c6:	4b28      	ldr	r3, [pc, #160]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092d2:	d131      	bne.n	8009338 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092d4:	4b24      	ldr	r3, [pc, #144]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092da:	4a23      	ldr	r2, [pc, #140]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80092e4:	4b20      	ldr	r3, [pc, #128]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80092ec:	4a1e      	ldr	r2, [pc, #120]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80092f4:	4b1d      	ldr	r3, [pc, #116]	; (800936c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2232      	movs	r2, #50	; 0x32
 80092fa:	fb02 f303 	mul.w	r3, r2, r3
 80092fe:	4a1c      	ldr	r2, [pc, #112]	; (8009370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	0c9b      	lsrs	r3, r3, #18
 8009306:	3301      	adds	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800930a:	e002      	b.n	8009312 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3b01      	subs	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009312:	4b15      	ldr	r3, [pc, #84]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800931a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800931e:	d102      	bne.n	8009326 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1f2      	bne.n	800930c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009326:	4b10      	ldr	r3, [pc, #64]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800932e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009332:	d112      	bne.n	800935a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e011      	b.n	800935c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009338:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800933a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800933e:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009348:	e007      	b.n	800935a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009352:	4a05      	ldr	r2, [pc, #20]	; (8009368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009358:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40007000 	.word	0x40007000
 800936c:	20000008 	.word	0x20000008
 8009370:	431bde83 	.word	0x431bde83

08009374 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009378:	4b05      	ldr	r3, [pc, #20]	; (8009390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	4a04      	ldr	r2, [pc, #16]	; (8009390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800937e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009382:	6093      	str	r3, [r2, #8]
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40007000 	.word	0x40007000

08009394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e306      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d075      	beq.n	800949e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093b2:	4b97      	ldr	r3, [pc, #604]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f003 030c 	and.w	r3, r3, #12
 80093ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80093bc:	4b94      	ldr	r3, [pc, #592]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b0c      	cmp	r3, #12
 80093ca:	d102      	bne.n	80093d2 <HAL_RCC_OscConfig+0x3e>
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d002      	beq.n	80093d8 <HAL_RCC_OscConfig+0x44>
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d10b      	bne.n	80093f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093d8:	4b8d      	ldr	r3, [pc, #564]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d05b      	beq.n	800949c <HAL_RCC_OscConfig+0x108>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d157      	bne.n	800949c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e2e1      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f8:	d106      	bne.n	8009408 <HAL_RCC_OscConfig+0x74>
 80093fa:	4b85      	ldr	r3, [pc, #532]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a84      	ldr	r2, [pc, #528]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	e01d      	b.n	8009444 <HAL_RCC_OscConfig+0xb0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009410:	d10c      	bne.n	800942c <HAL_RCC_OscConfig+0x98>
 8009412:	4b7f      	ldr	r3, [pc, #508]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a7e      	ldr	r2, [pc, #504]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	4b7c      	ldr	r3, [pc, #496]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a7b      	ldr	r2, [pc, #492]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009428:	6013      	str	r3, [r2, #0]
 800942a:	e00b      	b.n	8009444 <HAL_RCC_OscConfig+0xb0>
 800942c:	4b78      	ldr	r3, [pc, #480]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a77      	ldr	r2, [pc, #476]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	4b75      	ldr	r3, [pc, #468]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a74      	ldr	r2, [pc, #464]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 800943e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d013      	beq.n	8009474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944c:	f7f9 fd52 	bl	8002ef4 <HAL_GetTick>
 8009450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009454:	f7f9 fd4e 	bl	8002ef4 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b64      	cmp	r3, #100	; 0x64
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e2a6      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009466:	4b6a      	ldr	r3, [pc, #424]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0f0      	beq.n	8009454 <HAL_RCC_OscConfig+0xc0>
 8009472:	e014      	b.n	800949e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009474:	f7f9 fd3e 	bl	8002ef4 <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800947a:	e008      	b.n	800948e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800947c:	f7f9 fd3a 	bl	8002ef4 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b64      	cmp	r3, #100	; 0x64
 8009488:	d901      	bls.n	800948e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e292      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800948e:	4b60      	ldr	r3, [pc, #384]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f0      	bne.n	800947c <HAL_RCC_OscConfig+0xe8>
 800949a:	e000      	b.n	800949e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800949c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d075      	beq.n	8009596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094aa:	4b59      	ldr	r3, [pc, #356]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f003 030c 	and.w	r3, r3, #12
 80094b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80094b4:	4b56      	ldr	r3, [pc, #344]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f003 0303 	and.w	r3, r3, #3
 80094bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	2b0c      	cmp	r3, #12
 80094c2:	d102      	bne.n	80094ca <HAL_RCC_OscConfig+0x136>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d002      	beq.n	80094d0 <HAL_RCC_OscConfig+0x13c>
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d11f      	bne.n	8009510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094d0:	4b4f      	ldr	r3, [pc, #316]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <HAL_RCC_OscConfig+0x154>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e265      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094e8:	4b49      	ldr	r3, [pc, #292]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	061b      	lsls	r3, r3, #24
 80094f6:	4946      	ldr	r1, [pc, #280]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80094fc:	4b45      	ldr	r3, [pc, #276]	; (8009614 <HAL_RCC_OscConfig+0x280>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4618      	mov	r0, r3
 8009502:	f7fc fe49 	bl	8006198 <HAL_InitTick>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d043      	beq.n	8009594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e251      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d023      	beq.n	8009560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009518:	4b3d      	ldr	r3, [pc, #244]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a3c      	ldr	r2, [pc, #240]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 800951e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009524:	f7f9 fce6 	bl	8002ef4 <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800952c:	f7f9 fce2 	bl	8002ef4 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e23a      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800953e:	4b34      	ldr	r3, [pc, #208]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800954a:	4b31      	ldr	r3, [pc, #196]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	061b      	lsls	r3, r3, #24
 8009558:	492d      	ldr	r1, [pc, #180]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 800955a:	4313      	orrs	r3, r2
 800955c:	604b      	str	r3, [r1, #4]
 800955e:	e01a      	b.n	8009596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009560:	4b2b      	ldr	r3, [pc, #172]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a2a      	ldr	r2, [pc, #168]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800956a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7f9 fcc2 	bl	8002ef4 <HAL_GetTick>
 8009570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009574:	f7f9 fcbe 	bl	8002ef4 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e216      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009586:	4b22      	ldr	r3, [pc, #136]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f0      	bne.n	8009574 <HAL_RCC_OscConfig+0x1e0>
 8009592:	e000      	b.n	8009596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0308 	and.w	r3, r3, #8
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d041      	beq.n	8009626 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d01c      	beq.n	80095e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095aa:	4b19      	ldr	r3, [pc, #100]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80095ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095b0:	4a17      	ldr	r2, [pc, #92]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ba:	f7f9 fc9b 	bl	8002ef4 <HAL_GetTick>
 80095be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095c0:	e008      	b.n	80095d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095c2:	f7f9 fc97 	bl	8002ef4 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e1ef      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095d4:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80095d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0ef      	beq.n	80095c2 <HAL_RCC_OscConfig+0x22e>
 80095e2:	e020      	b.n	8009626 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095e4:	4b0a      	ldr	r3, [pc, #40]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80095e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ea:	4a09      	ldr	r2, [pc, #36]	; (8009610 <HAL_RCC_OscConfig+0x27c>)
 80095ec:	f023 0301 	bic.w	r3, r3, #1
 80095f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095f4:	f7f9 fc7e 	bl	8002ef4 <HAL_GetTick>
 80095f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095fa:	e00d      	b.n	8009618 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095fc:	f7f9 fc7a 	bl	8002ef4 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	2b02      	cmp	r3, #2
 8009608:	d906      	bls.n	8009618 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e1d2      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
 800960e:	bf00      	nop
 8009610:	40021000 	.word	0x40021000
 8009614:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009618:	4b8c      	ldr	r3, [pc, #560]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 800961a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1ea      	bne.n	80095fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 80a6 	beq.w	8009780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009634:	2300      	movs	r3, #0
 8009636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009638:	4b84      	ldr	r3, [pc, #528]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d101      	bne.n	8009648 <HAL_RCC_OscConfig+0x2b4>
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <HAL_RCC_OscConfig+0x2b6>
 8009648:	2300      	movs	r3, #0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00d      	beq.n	800966a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800964e:	4b7f      	ldr	r3, [pc, #508]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009652:	4a7e      	ldr	r2, [pc, #504]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009658:	6593      	str	r3, [r2, #88]	; 0x58
 800965a:	4b7c      	ldr	r3, [pc, #496]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 800965c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009666:	2301      	movs	r3, #1
 8009668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800966a:	4b79      	ldr	r3, [pc, #484]	; (8009850 <HAL_RCC_OscConfig+0x4bc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009672:	2b00      	cmp	r3, #0
 8009674:	d118      	bne.n	80096a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009676:	4b76      	ldr	r3, [pc, #472]	; (8009850 <HAL_RCC_OscConfig+0x4bc>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a75      	ldr	r2, [pc, #468]	; (8009850 <HAL_RCC_OscConfig+0x4bc>)
 800967c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009682:	f7f9 fc37 	bl	8002ef4 <HAL_GetTick>
 8009686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009688:	e008      	b.n	800969c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800968a:	f7f9 fc33 	bl	8002ef4 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	2b02      	cmp	r3, #2
 8009696:	d901      	bls.n	800969c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	e18b      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800969c:	4b6c      	ldr	r3, [pc, #432]	; (8009850 <HAL_RCC_OscConfig+0x4bc>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d0f0      	beq.n	800968a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d108      	bne.n	80096c2 <HAL_RCC_OscConfig+0x32e>
 80096b0:	4b66      	ldr	r3, [pc, #408]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b6:	4a65      	ldr	r2, [pc, #404]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096b8:	f043 0301 	orr.w	r3, r3, #1
 80096bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096c0:	e024      	b.n	800970c <HAL_RCC_OscConfig+0x378>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2b05      	cmp	r3, #5
 80096c8:	d110      	bne.n	80096ec <HAL_RCC_OscConfig+0x358>
 80096ca:	4b60      	ldr	r3, [pc, #384]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d0:	4a5e      	ldr	r2, [pc, #376]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096d2:	f043 0304 	orr.w	r3, r3, #4
 80096d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096da:	4b5c      	ldr	r3, [pc, #368]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e0:	4a5a      	ldr	r2, [pc, #360]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096e2:	f043 0301 	orr.w	r3, r3, #1
 80096e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096ea:	e00f      	b.n	800970c <HAL_RCC_OscConfig+0x378>
 80096ec:	4b57      	ldr	r3, [pc, #348]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f2:	4a56      	ldr	r2, [pc, #344]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096f4:	f023 0301 	bic.w	r3, r3, #1
 80096f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096fc:	4b53      	ldr	r3, [pc, #332]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80096fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009702:	4a52      	ldr	r2, [pc, #328]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009704:	f023 0304 	bic.w	r3, r3, #4
 8009708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d016      	beq.n	8009742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009714:	f7f9 fbee 	bl	8002ef4 <HAL_GetTick>
 8009718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800971a:	e00a      	b.n	8009732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800971c:	f7f9 fbea 	bl	8002ef4 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	f241 3288 	movw	r2, #5000	; 0x1388
 800972a:	4293      	cmp	r3, r2
 800972c:	d901      	bls.n	8009732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e140      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009732:	4b46      	ldr	r3, [pc, #280]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0ed      	beq.n	800971c <HAL_RCC_OscConfig+0x388>
 8009740:	e015      	b.n	800976e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009742:	f7f9 fbd7 	bl	8002ef4 <HAL_GetTick>
 8009746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009748:	e00a      	b.n	8009760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800974a:	f7f9 fbd3 	bl	8002ef4 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	f241 3288 	movw	r2, #5000	; 0x1388
 8009758:	4293      	cmp	r3, r2
 800975a:	d901      	bls.n	8009760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e129      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009760:	4b3a      	ldr	r3, [pc, #232]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1ed      	bne.n	800974a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800976e:	7ffb      	ldrb	r3, [r7, #31]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d105      	bne.n	8009780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009774:	4b35      	ldr	r3, [pc, #212]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009778:	4a34      	ldr	r2, [pc, #208]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 800977a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800977e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0320 	and.w	r3, r3, #32
 8009788:	2b00      	cmp	r3, #0
 800978a:	d03c      	beq.n	8009806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01c      	beq.n	80097ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009794:	4b2d      	ldr	r3, [pc, #180]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800979a:	4a2c      	ldr	r2, [pc, #176]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 800979c:	f043 0301 	orr.w	r3, r3, #1
 80097a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097a4:	f7f9 fba6 	bl	8002ef4 <HAL_GetTick>
 80097a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097aa:	e008      	b.n	80097be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097ac:	f7f9 fba2 	bl	8002ef4 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d901      	bls.n	80097be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e0fa      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80097be:	4b23      	ldr	r3, [pc, #140]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80097c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0ef      	beq.n	80097ac <HAL_RCC_OscConfig+0x418>
 80097cc:	e01b      	b.n	8009806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80097ce:	4b1f      	ldr	r3, [pc, #124]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80097d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097d4:	4a1d      	ldr	r2, [pc, #116]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80097d6:	f023 0301 	bic.w	r3, r3, #1
 80097da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097de:	f7f9 fb89 	bl	8002ef4 <HAL_GetTick>
 80097e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097e4:	e008      	b.n	80097f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097e6:	f7f9 fb85 	bl	8002ef4 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e0dd      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097f8:	4b14      	ldr	r3, [pc, #80]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 80097fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1ef      	bne.n	80097e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 80d1 	beq.w	80099b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009810:	4b0e      	ldr	r3, [pc, #56]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f003 030c 	and.w	r3, r3, #12
 8009818:	2b0c      	cmp	r3, #12
 800981a:	f000 808b 	beq.w	8009934 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	2b02      	cmp	r3, #2
 8009824:	d15e      	bne.n	80098e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009826:	4b09      	ldr	r3, [pc, #36]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a08      	ldr	r2, [pc, #32]	; (800984c <HAL_RCC_OscConfig+0x4b8>)
 800982c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009832:	f7f9 fb5f 	bl	8002ef4 <HAL_GetTick>
 8009836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009838:	e00c      	b.n	8009854 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800983a:	f7f9 fb5b 	bl	8002ef4 <HAL_GetTick>
 800983e:	4602      	mov	r2, r0
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	2b02      	cmp	r3, #2
 8009846:	d905      	bls.n	8009854 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e0b3      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
 800984c:	40021000 	.word	0x40021000
 8009850:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009854:	4b59      	ldr	r3, [pc, #356]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1ec      	bne.n	800983a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009860:	4b56      	ldr	r3, [pc, #344]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	4b56      	ldr	r3, [pc, #344]	; (80099c0 <HAL_RCC_OscConfig+0x62c>)
 8009866:	4013      	ands	r3, r2
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6a11      	ldr	r1, [r2, #32]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009870:	3a01      	subs	r2, #1
 8009872:	0112      	lsls	r2, r2, #4
 8009874:	4311      	orrs	r1, r2
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800987a:	0212      	lsls	r2, r2, #8
 800987c:	4311      	orrs	r1, r2
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009882:	0852      	lsrs	r2, r2, #1
 8009884:	3a01      	subs	r2, #1
 8009886:	0552      	lsls	r2, r2, #21
 8009888:	4311      	orrs	r1, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800988e:	0852      	lsrs	r2, r2, #1
 8009890:	3a01      	subs	r2, #1
 8009892:	0652      	lsls	r2, r2, #25
 8009894:	4311      	orrs	r1, r2
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800989a:	06d2      	lsls	r2, r2, #27
 800989c:	430a      	orrs	r2, r1
 800989e:	4947      	ldr	r1, [pc, #284]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098a4:	4b45      	ldr	r3, [pc, #276]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a44      	ldr	r2, [pc, #272]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80098b0:	4b42      	ldr	r3, [pc, #264]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	4a41      	ldr	r2, [pc, #260]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098bc:	f7f9 fb1a 	bl	8002ef4 <HAL_GetTick>
 80098c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098c2:	e008      	b.n	80098d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098c4:	f7f9 fb16 	bl	8002ef4 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d901      	bls.n	80098d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e06e      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80098d6:	4b39      	ldr	r3, [pc, #228]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0f0      	beq.n	80098c4 <HAL_RCC_OscConfig+0x530>
 80098e2:	e066      	b.n	80099b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098e4:	4b35      	ldr	r3, [pc, #212]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a34      	ldr	r2, [pc, #208]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80098f0:	4b32      	ldr	r3, [pc, #200]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	4a31      	ldr	r2, [pc, #196]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098f6:	f023 0303 	bic.w	r3, r3, #3
 80098fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80098fc:	4b2f      	ldr	r3, [pc, #188]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	4a2e      	ldr	r2, [pc, #184]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 8009902:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800990a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990c:	f7f9 faf2 	bl	8002ef4 <HAL_GetTick>
 8009910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009914:	f7f9 faee 	bl	8002ef4 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e046      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009926:	4b25      	ldr	r3, [pc, #148]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1f0      	bne.n	8009914 <HAL_RCC_OscConfig+0x580>
 8009932:	e03e      	b.n	80099b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e039      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009940:	4b1e      	ldr	r3, [pc, #120]	; (80099bc <HAL_RCC_OscConfig+0x628>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f003 0203 	and.w	r2, r3, #3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	429a      	cmp	r2, r3
 8009952:	d12c      	bne.n	80099ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995e:	3b01      	subs	r3, #1
 8009960:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009962:	429a      	cmp	r2, r3
 8009964:	d123      	bne.n	80099ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009972:	429a      	cmp	r2, r3
 8009974:	d11b      	bne.n	80099ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009980:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009982:	429a      	cmp	r2, r3
 8009984:	d113      	bne.n	80099ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009990:	085b      	lsrs	r3, r3, #1
 8009992:	3b01      	subs	r3, #1
 8009994:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009996:	429a      	cmp	r2, r3
 8009998:	d109      	bne.n	80099ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	3b01      	subs	r3, #1
 80099a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d001      	beq.n	80099b2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e000      	b.n	80099b4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	40021000 	.word	0x40021000
 80099c0:	019f800c 	.word	0x019f800c

080099c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e11e      	b.n	8009c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099dc:	4b91      	ldr	r3, [pc, #580]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d910      	bls.n	8009a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ea:	4b8e      	ldr	r3, [pc, #568]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f023 020f 	bic.w	r2, r3, #15
 80099f2:	498c      	ldr	r1, [pc, #560]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099fa:	4b8a      	ldr	r3, [pc, #552]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 030f 	and.w	r3, r3, #15
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d001      	beq.n	8009a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e106      	b.n	8009c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0301 	and.w	r3, r3, #1
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d073      	beq.n	8009b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d129      	bne.n	8009a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009a20:	4b81      	ldr	r3, [pc, #516]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e0f4      	b.n	8009c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009a30:	f000 f99e 	bl	8009d70 <RCC_GetSysClockFreqFromPLLSource>
 8009a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	4a7c      	ldr	r2, [pc, #496]	; (8009c2c <HAL_RCC_ClockConfig+0x268>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d93f      	bls.n	8009abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a3e:	4b7a      	ldr	r3, [pc, #488]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d009      	beq.n	8009a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d033      	beq.n	8009abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d12f      	bne.n	8009abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a5e:	4b72      	ldr	r3, [pc, #456]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a66:	4a70      	ldr	r2, [pc, #448]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009a6e:	2380      	movs	r3, #128	; 0x80
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	e024      	b.n	8009abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d107      	bne.n	8009a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a7c:	4b6a      	ldr	r3, [pc, #424]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e0c6      	b.n	8009c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a8c:	4b66      	ldr	r3, [pc, #408]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0be      	b.n	8009c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009a9c:	f000 f8ce 	bl	8009c3c <HAL_RCC_GetSysClockFreq>
 8009aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	4a61      	ldr	r2, [pc, #388]	; (8009c2c <HAL_RCC_ClockConfig+0x268>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d909      	bls.n	8009abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009aaa:	4b5f      	ldr	r3, [pc, #380]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ab2:	4a5d      	ldr	r2, [pc, #372]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009aba:	2380      	movs	r3, #128	; 0x80
 8009abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009abe:	4b5a      	ldr	r3, [pc, #360]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f023 0203 	bic.w	r2, r3, #3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	4957      	ldr	r1, [pc, #348]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ad0:	f7f9 fa10 	bl	8002ef4 <HAL_GetTick>
 8009ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ad6:	e00a      	b.n	8009aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ad8:	f7f9 fa0c 	bl	8002ef4 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d901      	bls.n	8009aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e095      	b.n	8009c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aee:	4b4e      	ldr	r3, [pc, #312]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f003 020c 	and.w	r2, r3, #12
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d1eb      	bne.n	8009ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0302 	and.w	r3, r3, #2
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d023      	beq.n	8009b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d005      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b18:	4b43      	ldr	r3, [pc, #268]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	4a42      	ldr	r2, [pc, #264]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0308 	and.w	r3, r3, #8
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d007      	beq.n	8009b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009b30:	4b3d      	ldr	r3, [pc, #244]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b38:	4a3b      	ldr	r2, [pc, #236]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b40:	4b39      	ldr	r3, [pc, #228]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	4936      	ldr	r1, [pc, #216]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	608b      	str	r3, [r1, #8]
 8009b52:	e008      	b.n	8009b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b80      	cmp	r3, #128	; 0x80
 8009b58:	d105      	bne.n	8009b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009b5a:	4b33      	ldr	r3, [pc, #204]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	4a32      	ldr	r2, [pc, #200]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b66:	4b2f      	ldr	r3, [pc, #188]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 030f 	and.w	r3, r3, #15
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d21d      	bcs.n	8009bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b74:	4b2b      	ldr	r3, [pc, #172]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f023 020f 	bic.w	r2, r3, #15
 8009b7c:	4929      	ldr	r1, [pc, #164]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009b84:	f7f9 f9b6 	bl	8002ef4 <HAL_GetTick>
 8009b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b8a:	e00a      	b.n	8009ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b8c:	f7f9 f9b2 	bl	8002ef4 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d901      	bls.n	8009ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e03b      	b.n	8009c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ba2:	4b20      	ldr	r3, [pc, #128]	; (8009c24 <HAL_RCC_ClockConfig+0x260>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d1ed      	bne.n	8009b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	4917      	ldr	r1, [pc, #92]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 0308 	and.w	r3, r3, #8
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	490f      	ldr	r1, [pc, #60]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009bee:	f000 f825 	bl	8009c3c <HAL_RCC_GetSysClockFreq>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <HAL_RCC_ClockConfig+0x264>)
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	091b      	lsrs	r3, r3, #4
 8009bfa:	f003 030f 	and.w	r3, r3, #15
 8009bfe:	490c      	ldr	r1, [pc, #48]	; (8009c30 <HAL_RCC_ClockConfig+0x26c>)
 8009c00:	5ccb      	ldrb	r3, [r1, r3]
 8009c02:	f003 031f 	and.w	r3, r3, #31
 8009c06:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0a:	4a0a      	ldr	r2, [pc, #40]	; (8009c34 <HAL_RCC_ClockConfig+0x270>)
 8009c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <HAL_RCC_ClockConfig+0x274>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fc fac0 	bl	8006198 <HAL_InitTick>
 8009c18:	4603      	mov	r3, r0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	40022000 	.word	0x40022000
 8009c28:	40021000 	.word	0x40021000
 8009c2c:	04c4b400 	.word	0x04c4b400
 8009c30:	080115f0 	.word	0x080115f0
 8009c34:	20000008 	.word	0x20000008
 8009c38:	2000000c 	.word	0x2000000c

08009c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009c42:	4b2c      	ldr	r3, [pc, #176]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f003 030c 	and.w	r3, r3, #12
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d102      	bne.n	8009c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c4e:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	e047      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009c54:	4b27      	ldr	r3, [pc, #156]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	f003 030c 	and.w	r3, r3, #12
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d102      	bne.n	8009c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c60:	4b26      	ldr	r3, [pc, #152]	; (8009cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009c62:	613b      	str	r3, [r7, #16]
 8009c64:	e03e      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009c66:	4b23      	ldr	r3, [pc, #140]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f003 030c 	and.w	r3, r3, #12
 8009c6e:	2b0c      	cmp	r3, #12
 8009c70:	d136      	bne.n	8009ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c72:	4b20      	ldr	r3, [pc, #128]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f003 0303 	and.w	r3, r3, #3
 8009c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c7c:	4b1d      	ldr	r3, [pc, #116]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	091b      	lsrs	r3, r3, #4
 8009c82:	f003 030f 	and.w	r3, r3, #15
 8009c86:	3301      	adds	r3, #1
 8009c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d10c      	bne.n	8009caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c90:	4a1a      	ldr	r2, [pc, #104]	; (8009cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c98:	4a16      	ldr	r2, [pc, #88]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c9a:	68d2      	ldr	r2, [r2, #12]
 8009c9c:	0a12      	lsrs	r2, r2, #8
 8009c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ca2:	fb02 f303 	mul.w	r3, r2, r3
 8009ca6:	617b      	str	r3, [r7, #20]
      break;
 8009ca8:	e00c      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009caa:	4a13      	ldr	r2, [pc, #76]	; (8009cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb2:	4a10      	ldr	r2, [pc, #64]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cb4:	68d2      	ldr	r2, [r2, #12]
 8009cb6:	0a12      	lsrs	r2, r2, #8
 8009cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009cbc:	fb02 f303 	mul.w	r3, r2, r3
 8009cc0:	617b      	str	r3, [r7, #20]
      break;
 8009cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	0e5b      	lsrs	r3, r3, #25
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	3301      	adds	r3, #1
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cdc:	613b      	str	r3, [r7, #16]
 8009cde:	e001      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009ce4:	693b      	ldr	r3, [r7, #16]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	371c      	adds	r7, #28
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40021000 	.word	0x40021000
 8009cf8:	00f42400 	.word	0x00f42400
 8009cfc:	007a1200 	.word	0x007a1200

08009d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d00:	b480      	push	{r7}
 8009d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d04:	4b03      	ldr	r3, [pc, #12]	; (8009d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d06:	681b      	ldr	r3, [r3, #0]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	20000008 	.word	0x20000008

08009d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009d1c:	f7ff fff0 	bl	8009d00 <HAL_RCC_GetHCLKFreq>
 8009d20:	4602      	mov	r2, r0
 8009d22:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	0a1b      	lsrs	r3, r3, #8
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	4904      	ldr	r1, [pc, #16]	; (8009d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d2e:	5ccb      	ldrb	r3, [r1, r3]
 8009d30:	f003 031f 	and.w	r3, r3, #31
 8009d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	40021000 	.word	0x40021000
 8009d40:	08011600 	.word	0x08011600

08009d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009d48:	f7ff ffda 	bl	8009d00 <HAL_RCC_GetHCLKFreq>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	0adb      	lsrs	r3, r3, #11
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	4904      	ldr	r1, [pc, #16]	; (8009d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d5a:	5ccb      	ldrb	r3, [r1, r3]
 8009d5c:	f003 031f 	and.w	r3, r3, #31
 8009d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	40021000 	.word	0x40021000
 8009d6c:	08011600 	.word	0x08011600

08009d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009d76:	4b1e      	ldr	r3, [pc, #120]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f003 0303 	and.w	r3, r3, #3
 8009d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009d80:	4b1b      	ldr	r3, [pc, #108]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	091b      	lsrs	r3, r3, #4
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b03      	cmp	r3, #3
 8009d92:	d10c      	bne.n	8009dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d94:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9c:	4a14      	ldr	r2, [pc, #80]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d9e:	68d2      	ldr	r2, [r2, #12]
 8009da0:	0a12      	lsrs	r2, r2, #8
 8009da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
 8009daa:	617b      	str	r3, [r7, #20]
    break;
 8009dac:	e00c      	b.n	8009dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009dae:	4a12      	ldr	r2, [pc, #72]	; (8009df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db6:	4a0e      	ldr	r2, [pc, #56]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009db8:	68d2      	ldr	r2, [r2, #12]
 8009dba:	0a12      	lsrs	r2, r2, #8
 8009dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	617b      	str	r3, [r7, #20]
    break;
 8009dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009dc8:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	0e5b      	lsrs	r3, r3, #25
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009de2:	687b      	ldr	r3, [r7, #4]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	40021000 	.word	0x40021000
 8009df4:	007a1200 	.word	0x007a1200
 8009df8:	00f42400 	.word	0x00f42400

08009dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e04:	2300      	movs	r3, #0
 8009e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e08:	2300      	movs	r3, #0
 8009e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 8098 	beq.w	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e1e:	4b43      	ldr	r3, [pc, #268]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10d      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e2a:	4b40      	ldr	r3, [pc, #256]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2e:	4a3f      	ldr	r2, [pc, #252]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e34:	6593      	str	r3, [r2, #88]	; 0x58
 8009e36:	4b3d      	ldr	r3, [pc, #244]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e3e:	60bb      	str	r3, [r7, #8]
 8009e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e42:	2301      	movs	r3, #1
 8009e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e46:	4b3a      	ldr	r3, [pc, #232]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a39      	ldr	r2, [pc, #228]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e52:	f7f9 f84f 	bl	8002ef4 <HAL_GetTick>
 8009e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e58:	e009      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e5a:	f7f9 f84b 	bl	8002ef4 <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d902      	bls.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8009e6c:	e005      	b.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e6e:	4b30      	ldr	r3, [pc, #192]	; (8009f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0ef      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009e7a:	7cfb      	ldrb	r3, [r7, #19]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d159      	bne.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009e80:	4b2a      	ldr	r3, [pc, #168]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01e      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d019      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009e9c:	4b23      	ldr	r3, [pc, #140]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ea8:	4b20      	ldr	r3, [pc, #128]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eae:	4a1f      	ldr	r2, [pc, #124]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009eb8:	4b1c      	ldr	r3, [pc, #112]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ebe:	4a1b      	ldr	r2, [pc, #108]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ec8:	4a18      	ldr	r2, [pc, #96]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d016      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eda:	f7f9 f80b 	bl	8002ef4 <HAL_GetTick>
 8009ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ee0:	e00b      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ee2:	f7f9 f807 	bl	8002ef4 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d902      	bls.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8009ef8:	e006      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009efa:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d0ec      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009f08:	7cfb      	ldrb	r3, [r7, #19]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10b      	bne.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f0e:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1c:	4903      	ldr	r1, [pc, #12]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009f24:	e008      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f26:	7cfb      	ldrb	r3, [r7, #19]
 8009f28:	74bb      	strb	r3, [r7, #18]
 8009f2a:	e005      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f34:	7cfb      	ldrb	r3, [r7, #19]
 8009f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f38:	7c7b      	ldrb	r3, [r7, #17]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d105      	bne.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f3e:	4ba7      	ldr	r3, [pc, #668]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f42:	4aa6      	ldr	r2, [pc, #664]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009f56:	4ba1      	ldr	r3, [pc, #644]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5c:	f023 0203 	bic.w	r2, r3, #3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	499d      	ldr	r1, [pc, #628]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00a      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009f78:	4b98      	ldr	r3, [pc, #608]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7e:	f023 020c 	bic.w	r2, r3, #12
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	4995      	ldr	r1, [pc, #596]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0304 	and.w	r3, r3, #4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f9a:	4b90      	ldr	r3, [pc, #576]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	498c      	ldr	r1, [pc, #560]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0308 	and.w	r3, r3, #8
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00a      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009fbc:	4b87      	ldr	r3, [pc, #540]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	4984      	ldr	r1, [pc, #528]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0310 	and.w	r3, r3, #16
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009fde:	4b7f      	ldr	r3, [pc, #508]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	695b      	ldr	r3, [r3, #20]
 8009fec:	497b      	ldr	r1, [pc, #492]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0320 	and.w	r3, r3, #32
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00a      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a000:	4b76      	ldr	r3, [pc, #472]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a006:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	4973      	ldr	r1, [pc, #460]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a010:	4313      	orrs	r3, r2
 800a012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00a      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a022:	4b6e      	ldr	r3, [pc, #440]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a028:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	496a      	ldr	r1, [pc, #424]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a032:	4313      	orrs	r3, r2
 800a034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00a      	beq.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a044:	4b65      	ldr	r3, [pc, #404]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	4962      	ldr	r1, [pc, #392]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a054:	4313      	orrs	r3, r2
 800a056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a066:	4b5d      	ldr	r3, [pc, #372]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	4959      	ldr	r1, [pc, #356]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a076:	4313      	orrs	r3, r2
 800a078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a088:	4b54      	ldr	r3, [pc, #336]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a08a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a08e:	f023 0203 	bic.w	r2, r3, #3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	4951      	ldr	r1, [pc, #324]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a0aa:	4b4c      	ldr	r3, [pc, #304]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	4948      	ldr	r1, [pc, #288]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d015      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0cc:	4b43      	ldr	r3, [pc, #268]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0da:	4940      	ldr	r1, [pc, #256]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0ea:	d105      	bne.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0ec:	4b3b      	ldr	r3, [pc, #236]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	4a3a      	ldr	r2, [pc, #232]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a100:	2b00      	cmp	r3, #0
 800a102:	d015      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a104:	4b35      	ldr	r3, [pc, #212]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a112:	4932      	ldr	r1, [pc, #200]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a114:	4313      	orrs	r3, r2
 800a116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a122:	d105      	bne.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a124:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	4a2c      	ldr	r2, [pc, #176]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a12a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a12e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d015      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a13c:	4b27      	ldr	r3, [pc, #156]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14a:	4924      	ldr	r1, [pc, #144]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a15a:	d105      	bne.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a15c:	4b1f      	ldr	r3, [pc, #124]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	4a1e      	ldr	r2, [pc, #120]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a166:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d015      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a174:	4b19      	ldr	r3, [pc, #100]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a182:	4916      	ldr	r1, [pc, #88]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a184:	4313      	orrs	r3, r2
 800a186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a192:	d105      	bne.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a194:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	4a10      	ldr	r2, [pc, #64]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a19a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a19e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d019      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1ac:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	4908      	ldr	r1, [pc, #32]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1ca:	d109      	bne.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1cc:	4b03      	ldr	r3, [pc, #12]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	4a02      	ldr	r2, [pc, #8]	; (800a1dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a1d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1d6:	60d3      	str	r3, [r2, #12]
 800a1d8:	e002      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a1da:	bf00      	nop
 800a1dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d015      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a1ec:	4b29      	ldr	r3, [pc, #164]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fa:	4926      	ldr	r1, [pc, #152]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a20a:	d105      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a20c:	4b21      	ldr	r3, [pc, #132]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	4a20      	ldr	r2, [pc, #128]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a216:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d015      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a224:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a232:	4918      	ldr	r1, [pc, #96]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a234:	4313      	orrs	r3, r2
 800a236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a242:	d105      	bne.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a244:	4b13      	ldr	r3, [pc, #76]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	4a12      	ldr	r2, [pc, #72]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a24a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a24e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d015      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a25c:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a25e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26a:	490a      	ldr	r1, [pc, #40]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a27a:	d105      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	4a04      	ldr	r2, [pc, #16]	; (800a294 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a286:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a288:	7cbb      	ldrb	r3, [r7, #18]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	40021000 	.word	0x40021000

0800a298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e09d      	b.n	800a3e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d108      	bne.n	800a2c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2ba:	d009      	beq.n	800a2d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	61da      	str	r2, [r3, #28]
 800a2c2:	e005      	b.n	800a2d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7fb f9e2 	bl	80056b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a306:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a310:	d902      	bls.n	800a318 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
 800a316:	e002      	b.n	800a31e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a31c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a326:	d007      	beq.n	800a338 <HAL_SPI_Init+0xa0>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a330:	d002      	beq.n	800a338 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	431a      	orrs	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	431a      	orrs	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a366:	431a      	orrs	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a370:	431a      	orrs	r2, r3
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37a:	ea42 0103 	orr.w	r1, r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a382:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	0c1b      	lsrs	r3, r3, #16
 800a394:	f003 0204 	and.w	r2, r3, #4
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a6:	f003 0308 	and.w	r3, r3, #8
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a3b4:	ea42 0103 	orr.w	r1, r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	69da      	ldr	r2, [r3, #28]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b08a      	sub	sp, #40	; 0x28
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	60f8      	str	r0, [r7, #12]
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	607a      	str	r2, [r7, #4]
 800a3fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d101      	bne.n	800a414 <HAL_SPI_TransmitReceive+0x26>
 800a410:	2302      	movs	r3, #2
 800a412:	e1fb      	b.n	800a80c <HAL_SPI_TransmitReceive+0x41e>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a41c:	f7f8 fd6a 	bl	8002ef4 <HAL_GetTick>
 800a420:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a428:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a430:	887b      	ldrh	r3, [r7, #2]
 800a432:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a434:	887b      	ldrh	r3, [r7, #2]
 800a436:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a438:	7efb      	ldrb	r3, [r7, #27]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d00e      	beq.n	800a45c <HAL_SPI_TransmitReceive+0x6e>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a444:	d106      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x66>
 800a44e:	7efb      	ldrb	r3, [r7, #27]
 800a450:	2b04      	cmp	r3, #4
 800a452:	d003      	beq.n	800a45c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a454:	2302      	movs	r3, #2
 800a456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a45a:	e1cd      	b.n	800a7f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d005      	beq.n	800a46e <HAL_SPI_TransmitReceive+0x80>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <HAL_SPI_TransmitReceive+0x80>
 800a468:	887b      	ldrh	r3, [r7, #2]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d103      	bne.n	800a476 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a474:	e1c0      	b.n	800a7f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d003      	beq.n	800a48a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2205      	movs	r2, #5
 800a486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	887a      	ldrh	r2, [r7, #2]
 800a49a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	887a      	ldrh	r2, [r7, #2]
 800a4a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	887a      	ldrh	r2, [r7, #2]
 800a4b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	887a      	ldrh	r2, [r7, #2]
 800a4b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a4cc:	d802      	bhi.n	800a4d4 <HAL_SPI_TransmitReceive+0xe6>
 800a4ce:	8a3b      	ldrh	r3, [r7, #16]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d908      	bls.n	800a4e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a4e2:	605a      	str	r2, [r3, #4]
 800a4e4:	e007      	b.n	800a4f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a4f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a500:	2b40      	cmp	r3, #64	; 0x40
 800a502:	d007      	beq.n	800a514 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a512:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a51c:	d97c      	bls.n	800a618 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <HAL_SPI_TransmitReceive+0x13e>
 800a526:	8a7b      	ldrh	r3, [r7, #18]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d169      	bne.n	800a600 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a530:	881a      	ldrh	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53c:	1c9a      	adds	r2, r3, #2
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a546:	b29b      	uxth	r3, r3
 800a548:	3b01      	subs	r3, #1
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a550:	e056      	b.n	800a600 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d11b      	bne.n	800a598 <HAL_SPI_TransmitReceive+0x1aa>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a564:	b29b      	uxth	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d016      	beq.n	800a598 <HAL_SPI_TransmitReceive+0x1aa>
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d113      	bne.n	800a598 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	881a      	ldrh	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	1c9a      	adds	r2, r3, #2
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	3b01      	subs	r3, #1
 800a58e:	b29a      	uxth	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d11c      	bne.n	800a5e0 <HAL_SPI_TransmitReceive+0x1f2>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d016      	beq.n	800a5e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68da      	ldr	r2, [r3, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5bc:	b292      	uxth	r2, r2
 800a5be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c4:	1c9a      	adds	r2, r3, #2
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a5e0:	f7f8 fc88 	bl	8002ef4 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d807      	bhi.n	800a600 <HAL_SPI_TransmitReceive+0x212>
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f6:	d003      	beq.n	800a600 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a5fe:	e0fb      	b.n	800a7f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a604:	b29b      	uxth	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1a3      	bne.n	800a552 <HAL_SPI_TransmitReceive+0x164>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a610:	b29b      	uxth	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	d19d      	bne.n	800a552 <HAL_SPI_TransmitReceive+0x164>
 800a616:	e0df      	b.n	800a7d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <HAL_SPI_TransmitReceive+0x23a>
 800a620:	8a7b      	ldrh	r3, [r7, #18]
 800a622:	2b01      	cmp	r3, #1
 800a624:	f040 80cb 	bne.w	800a7be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d912      	bls.n	800a658 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a636:	881a      	ldrh	r2, [r3, #0]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	1c9a      	adds	r2, r3, #2
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	3b02      	subs	r3, #2
 800a650:	b29a      	uxth	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a656:	e0b2      	b.n	800a7be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	330c      	adds	r3, #12
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a674:	b29b      	uxth	r3, r3
 800a676:	3b01      	subs	r3, #1
 800a678:	b29a      	uxth	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a67e:	e09e      	b.n	800a7be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d134      	bne.n	800a6f8 <HAL_SPI_TransmitReceive+0x30a>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a692:	b29b      	uxth	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d02f      	beq.n	800a6f8 <HAL_SPI_TransmitReceive+0x30a>
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d12c      	bne.n	800a6f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d912      	bls.n	800a6ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ac:	881a      	ldrh	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	1c9a      	adds	r2, r3, #2
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	3b02      	subs	r3, #2
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6cc:	e012      	b.n	800a6f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	330c      	adds	r3, #12
 800a6d8:	7812      	ldrb	r2, [r2, #0]
 800a6da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b01      	cmp	r3, #1
 800a704:	d148      	bne.n	800a798 <HAL_SPI_TransmitReceive+0x3aa>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d042      	beq.n	800a798 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a718:	b29b      	uxth	r3, r3
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d923      	bls.n	800a766 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	68da      	ldr	r2, [r3, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a728:	b292      	uxth	r2, r2
 800a72a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a730:	1c9a      	adds	r2, r3, #2
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	3b02      	subs	r3, #2
 800a740:	b29a      	uxth	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a74e:	b29b      	uxth	r3, r3
 800a750:	2b01      	cmp	r3, #1
 800a752:	d81f      	bhi.n	800a794 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a762:	605a      	str	r2, [r3, #4]
 800a764:	e016      	b.n	800a794 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f103 020c 	add.w	r2, r3, #12
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	7812      	ldrb	r2, [r2, #0]
 800a774:	b2d2      	uxtb	r2, r2
 800a776:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a794:	2301      	movs	r3, #1
 800a796:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a798:	f7f8 fbac 	bl	8002ef4 <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d803      	bhi.n	800a7b0 <HAL_SPI_TransmitReceive+0x3c2>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ae:	d102      	bne.n	800a7b6 <HAL_SPI_TransmitReceive+0x3c8>
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d103      	bne.n	800a7be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a7bc:	e01c      	b.n	800a7f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f47f af5b 	bne.w	800a680 <HAL_SPI_TransmitReceive+0x292>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f47f af54 	bne.w	800a680 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a7d8:	69fa      	ldr	r2, [r7, #28]
 800a7da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 f937 	bl	800aa50 <SPI_EndRxTxTransaction>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d006      	beq.n	800a7f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	661a      	str	r2, [r3, #96]	; 0x60
 800a7f4:	e000      	b.n	800a7f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a7f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3728      	adds	r7, #40	; 0x28
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	603b      	str	r3, [r7, #0]
 800a820:	4613      	mov	r3, r2
 800a822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a824:	f7f8 fb66 	bl	8002ef4 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82c:	1a9b      	subs	r3, r3, r2
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	4413      	add	r3, r2
 800a832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a834:	f7f8 fb5e 	bl	8002ef4 <HAL_GetTick>
 800a838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a83a:	4b39      	ldr	r3, [pc, #228]	; (800a920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	015b      	lsls	r3, r3, #5
 800a840:	0d1b      	lsrs	r3, r3, #20
 800a842:	69fa      	ldr	r2, [r7, #28]
 800a844:	fb02 f303 	mul.w	r3, r2, r3
 800a848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a84a:	e054      	b.n	800a8f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	d050      	beq.n	800a8f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a854:	f7f8 fb4e 	bl	8002ef4 <HAL_GetTick>
 800a858:	4602      	mov	r2, r0
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	69fa      	ldr	r2, [r7, #28]
 800a860:	429a      	cmp	r2, r3
 800a862:	d902      	bls.n	800a86a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d13d      	bne.n	800a8e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a882:	d111      	bne.n	800a8a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a88c:	d004      	beq.n	800a898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a896:	d107      	bne.n	800a8a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8b0:	d10f      	bne.n	800a8d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8c0:	601a      	str	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	e017      	b.n	800a916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689a      	ldr	r2, [r3, #8]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	4013      	ands	r3, r2
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	429a      	cmp	r2, r3
 800a904:	bf0c      	ite	eq
 800a906:	2301      	moveq	r3, #1
 800a908:	2300      	movne	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	461a      	mov	r2, r3
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	429a      	cmp	r2, r3
 800a912:	d19b      	bne.n	800a84c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000008 	.word	0x20000008

0800a924 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	; 0x28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
 800a930:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a936:	f7f8 fadd 	bl	8002ef4 <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	1a9b      	subs	r3, r3, r2
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	4413      	add	r3, r2
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a946:	f7f8 fad5 	bl	8002ef4 <HAL_GetTick>
 800a94a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	330c      	adds	r3, #12
 800a952:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a954:	4b3d      	ldr	r3, [pc, #244]	; (800aa4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	4613      	mov	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	00da      	lsls	r2, r3, #3
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	0d1b      	lsrs	r3, r3, #20
 800a964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a966:	fb02 f303 	mul.w	r3, r2, r3
 800a96a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a96c:	e060      	b.n	800aa30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a974:	d107      	bne.n	800a986 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d104      	bne.n	800a986 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	b2db      	uxtb	r3, r3
 800a982:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a984:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d050      	beq.n	800aa30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a98e:	f7f8 fab1 	bl	8002ef4 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d902      	bls.n	800a9a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d13d      	bne.n	800aa20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a9b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9bc:	d111      	bne.n	800a9e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9c6:	d004      	beq.n	800a9d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d0:	d107      	bne.n	800a9e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9ea:	d10f      	bne.n	800aa0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e010      	b.n	800aa42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689a      	ldr	r2, [r3, #8]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d196      	bne.n	800a96e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3728      	adds	r7, #40	; 0x28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20000008 	.word	0x20000008

0800aa50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af02      	add	r7, sp, #8
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7ff ff5b 	bl	800a924 <SPI_WaitFifoStateUntilTimeout>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa78:	f043 0220 	orr.w	r2, r3, #32
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e027      	b.n	800aad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2180      	movs	r1, #128	; 0x80
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f7ff fec0 	bl	800a814 <SPI_WaitFlagStateUntilTimeout>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d007      	beq.n	800aaaa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa9e:	f043 0220 	orr.w	r2, r3, #32
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e014      	b.n	800aad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7ff ff34 	bl	800a924 <SPI_WaitFifoStateUntilTimeout>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aac6:	f043 0220 	orr.w	r2, r3, #32
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e000      	b.n	800aad4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aad2:	2300      	movs	r3, #0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e049      	b.n	800ab82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d106      	bne.n	800ab08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7fb f81a 	bl	8005b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3304      	adds	r3, #4
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f000 fcd4 	bl	800b4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d001      	beq.n	800aba4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e054      	b.n	800ac4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0201 	orr.w	r2, r2, #1
 800abba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a26      	ldr	r2, [pc, #152]	; (800ac5c <HAL_TIM_Base_Start_IT+0xd0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d022      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x80>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abce:	d01d      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x80>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a22      	ldr	r2, [pc, #136]	; (800ac60 <HAL_TIM_Base_Start_IT+0xd4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d018      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x80>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a21      	ldr	r2, [pc, #132]	; (800ac64 <HAL_TIM_Base_Start_IT+0xd8>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d013      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x80>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a1f      	ldr	r2, [pc, #124]	; (800ac68 <HAL_TIM_Base_Start_IT+0xdc>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d00e      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x80>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a1e      	ldr	r2, [pc, #120]	; (800ac6c <HAL_TIM_Base_Start_IT+0xe0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d009      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x80>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a1c      	ldr	r2, [pc, #112]	; (800ac70 <HAL_TIM_Base_Start_IT+0xe4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d004      	beq.n	800ac0c <HAL_TIM_Base_Start_IT+0x80>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1b      	ldr	r2, [pc, #108]	; (800ac74 <HAL_TIM_Base_Start_IT+0xe8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d115      	bne.n	800ac38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689a      	ldr	r2, [r3, #8]
 800ac12:	4b19      	ldr	r3, [pc, #100]	; (800ac78 <HAL_TIM_Base_Start_IT+0xec>)
 800ac14:	4013      	ands	r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b06      	cmp	r3, #6
 800ac1c:	d015      	beq.n	800ac4a <HAL_TIM_Base_Start_IT+0xbe>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac24:	d011      	beq.n	800ac4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f042 0201 	orr.w	r2, r2, #1
 800ac34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac36:	e008      	b.n	800ac4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f042 0201 	orr.w	r2, r2, #1
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	e000      	b.n	800ac4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	40012c00 	.word	0x40012c00
 800ac60:	40000400 	.word	0x40000400
 800ac64:	40000800 	.word	0x40000800
 800ac68:	40000c00 	.word	0x40000c00
 800ac6c:	40013400 	.word	0x40013400
 800ac70:	40014000 	.word	0x40014000
 800ac74:	40015000 	.word	0x40015000
 800ac78:	00010007 	.word	0x00010007

0800ac7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e049      	b.n	800ad22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d106      	bne.n	800aca8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7fa ff2a 	bl	8005afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3304      	adds	r3, #4
 800acb8:	4619      	mov	r1, r3
 800acba:	4610      	mov	r0, r2
 800acbc:	f000 fc04 	bl	800b4c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2201      	movs	r2, #1
 800acdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
	...

0800ad2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d109      	bne.n	800ad50 <HAL_TIM_PWM_Start+0x24>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	bf14      	ite	ne
 800ad48:	2301      	movne	r3, #1
 800ad4a:	2300      	moveq	r3, #0
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	e03c      	b.n	800adca <HAL_TIM_PWM_Start+0x9e>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	d109      	bne.n	800ad6a <HAL_TIM_PWM_Start+0x3e>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	bf14      	ite	ne
 800ad62:	2301      	movne	r3, #1
 800ad64:	2300      	moveq	r3, #0
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	e02f      	b.n	800adca <HAL_TIM_PWM_Start+0x9e>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2b08      	cmp	r3, #8
 800ad6e:	d109      	bne.n	800ad84 <HAL_TIM_PWM_Start+0x58>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	bf14      	ite	ne
 800ad7c:	2301      	movne	r3, #1
 800ad7e:	2300      	moveq	r3, #0
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	e022      	b.n	800adca <HAL_TIM_PWM_Start+0x9e>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b0c      	cmp	r3, #12
 800ad88:	d109      	bne.n	800ad9e <HAL_TIM_PWM_Start+0x72>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	bf14      	ite	ne
 800ad96:	2301      	movne	r3, #1
 800ad98:	2300      	moveq	r3, #0
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	e015      	b.n	800adca <HAL_TIM_PWM_Start+0x9e>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2b10      	cmp	r3, #16
 800ada2:	d109      	bne.n	800adb8 <HAL_TIM_PWM_Start+0x8c>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b01      	cmp	r3, #1
 800adae:	bf14      	ite	ne
 800adb0:	2301      	movne	r3, #1
 800adb2:	2300      	moveq	r3, #0
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	e008      	b.n	800adca <HAL_TIM_PWM_Start+0x9e>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	bf14      	ite	ne
 800adc4:	2301      	movne	r3, #1
 800adc6:	2300      	moveq	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e0a6      	b.n	800af20 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d104      	bne.n	800ade2 <HAL_TIM_PWM_Start+0xb6>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2202      	movs	r2, #2
 800addc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ade0:	e023      	b.n	800ae2a <HAL_TIM_PWM_Start+0xfe>
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	d104      	bne.n	800adf2 <HAL_TIM_PWM_Start+0xc6>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2202      	movs	r2, #2
 800adec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adf0:	e01b      	b.n	800ae2a <HAL_TIM_PWM_Start+0xfe>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b08      	cmp	r3, #8
 800adf6:	d104      	bne.n	800ae02 <HAL_TIM_PWM_Start+0xd6>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae00:	e013      	b.n	800ae2a <HAL_TIM_PWM_Start+0xfe>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b0c      	cmp	r3, #12
 800ae06:	d104      	bne.n	800ae12 <HAL_TIM_PWM_Start+0xe6>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae10:	e00b      	b.n	800ae2a <HAL_TIM_PWM_Start+0xfe>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b10      	cmp	r3, #16
 800ae16:	d104      	bne.n	800ae22 <HAL_TIM_PWM_Start+0xf6>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae20:	e003      	b.n	800ae2a <HAL_TIM_PWM_Start+0xfe>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2202      	movs	r2, #2
 800ae26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 ff1a 	bl	800bc6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a3a      	ldr	r2, [pc, #232]	; (800af28 <HAL_TIM_PWM_Start+0x1fc>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d018      	beq.n	800ae74 <HAL_TIM_PWM_Start+0x148>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a39      	ldr	r2, [pc, #228]	; (800af2c <HAL_TIM_PWM_Start+0x200>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d013      	beq.n	800ae74 <HAL_TIM_PWM_Start+0x148>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a37      	ldr	r2, [pc, #220]	; (800af30 <HAL_TIM_PWM_Start+0x204>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00e      	beq.n	800ae74 <HAL_TIM_PWM_Start+0x148>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a36      	ldr	r2, [pc, #216]	; (800af34 <HAL_TIM_PWM_Start+0x208>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d009      	beq.n	800ae74 <HAL_TIM_PWM_Start+0x148>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a34      	ldr	r2, [pc, #208]	; (800af38 <HAL_TIM_PWM_Start+0x20c>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d004      	beq.n	800ae74 <HAL_TIM_PWM_Start+0x148>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a33      	ldr	r2, [pc, #204]	; (800af3c <HAL_TIM_PWM_Start+0x210>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d101      	bne.n	800ae78 <HAL_TIM_PWM_Start+0x14c>
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <HAL_TIM_PWM_Start+0x14e>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d007      	beq.n	800ae8e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a25      	ldr	r2, [pc, #148]	; (800af28 <HAL_TIM_PWM_Start+0x1fc>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d022      	beq.n	800aede <HAL_TIM_PWM_Start+0x1b2>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea0:	d01d      	beq.n	800aede <HAL_TIM_PWM_Start+0x1b2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a26      	ldr	r2, [pc, #152]	; (800af40 <HAL_TIM_PWM_Start+0x214>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d018      	beq.n	800aede <HAL_TIM_PWM_Start+0x1b2>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a24      	ldr	r2, [pc, #144]	; (800af44 <HAL_TIM_PWM_Start+0x218>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d013      	beq.n	800aede <HAL_TIM_PWM_Start+0x1b2>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a23      	ldr	r2, [pc, #140]	; (800af48 <HAL_TIM_PWM_Start+0x21c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00e      	beq.n	800aede <HAL_TIM_PWM_Start+0x1b2>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a19      	ldr	r2, [pc, #100]	; (800af2c <HAL_TIM_PWM_Start+0x200>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d009      	beq.n	800aede <HAL_TIM_PWM_Start+0x1b2>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a18      	ldr	r2, [pc, #96]	; (800af30 <HAL_TIM_PWM_Start+0x204>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d004      	beq.n	800aede <HAL_TIM_PWM_Start+0x1b2>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a18      	ldr	r2, [pc, #96]	; (800af3c <HAL_TIM_PWM_Start+0x210>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d115      	bne.n	800af0a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	689a      	ldr	r2, [r3, #8]
 800aee4:	4b19      	ldr	r3, [pc, #100]	; (800af4c <HAL_TIM_PWM_Start+0x220>)
 800aee6:	4013      	ands	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b06      	cmp	r3, #6
 800aeee:	d015      	beq.n	800af1c <HAL_TIM_PWM_Start+0x1f0>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef6:	d011      	beq.n	800af1c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f042 0201 	orr.w	r2, r2, #1
 800af06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af08:	e008      	b.n	800af1c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f042 0201 	orr.w	r2, r2, #1
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e000      	b.n	800af1e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	40012c00 	.word	0x40012c00
 800af2c:	40013400 	.word	0x40013400
 800af30:	40014000 	.word	0x40014000
 800af34:	40014400 	.word	0x40014400
 800af38:	40014800 	.word	0x40014800
 800af3c:	40015000 	.word	0x40015000
 800af40:	40000400 	.word	0x40000400
 800af44:	40000800 	.word	0x40000800
 800af48:	40000c00 	.word	0x40000c00
 800af4c:	00010007 	.word	0x00010007

0800af50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b02      	cmp	r3, #2
 800af64:	d122      	bne.n	800afac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f003 0302 	and.w	r3, r3, #2
 800af70:	2b02      	cmp	r3, #2
 800af72:	d11b      	bne.n	800afac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f06f 0202 	mvn.w	r2, #2
 800af7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fa7a 	bl	800b48c <HAL_TIM_IC_CaptureCallback>
 800af98:	e005      	b.n	800afa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa6c 	bl	800b478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fa7d 	bl	800b4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	f003 0304 	and.w	r3, r3, #4
 800afb6:	2b04      	cmp	r3, #4
 800afb8:	d122      	bne.n	800b000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f003 0304 	and.w	r3, r3, #4
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d11b      	bne.n	800b000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f06f 0204 	mvn.w	r2, #4
 800afd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2202      	movs	r2, #2
 800afd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fa50 	bl	800b48c <HAL_TIM_IC_CaptureCallback>
 800afec:	e005      	b.n	800affa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fa42 	bl	800b478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fa53 	bl	800b4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d122      	bne.n	800b054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0308 	and.w	r3, r3, #8
 800b018:	2b08      	cmp	r3, #8
 800b01a:	d11b      	bne.n	800b054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f06f 0208 	mvn.w	r2, #8
 800b024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2204      	movs	r2, #4
 800b02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fa26 	bl	800b48c <HAL_TIM_IC_CaptureCallback>
 800b040:	e005      	b.n	800b04e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fa18 	bl	800b478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fa29 	bl	800b4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	f003 0310 	and.w	r3, r3, #16
 800b05e:	2b10      	cmp	r3, #16
 800b060:	d122      	bne.n	800b0a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b10      	cmp	r3, #16
 800b06e:	d11b      	bne.n	800b0a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f06f 0210 	mvn.w	r2, #16
 800b078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2208      	movs	r2, #8
 800b07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f9fc 	bl	800b48c <HAL_TIM_IC_CaptureCallback>
 800b094:	e005      	b.n	800b0a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f9ee 	bl	800b478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f9ff 	bl	800b4a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d10e      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d107      	bne.n	800b0d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f06f 0201 	mvn.w	r2, #1
 800b0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7f8 f8c6 	bl	8003260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	691b      	ldr	r3, [r3, #16]
 800b0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	d10e      	bne.n	800b100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ec:	2b80      	cmp	r3, #128	; 0x80
 800b0ee:	d107      	bne.n	800b100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fe7c 	bl	800bdf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b10a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b10e:	d10e      	bne.n	800b12e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b11a:	2b80      	cmp	r3, #128	; 0x80
 800b11c:	d107      	bne.n	800b12e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 fe6f 	bl	800be0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b138:	2b40      	cmp	r3, #64	; 0x40
 800b13a:	d10e      	bne.n	800b15a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b146:	2b40      	cmp	r3, #64	; 0x40
 800b148:	d107      	bne.n	800b15a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f9ad 	bl	800b4b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	f003 0320 	and.w	r3, r3, #32
 800b164:	2b20      	cmp	r3, #32
 800b166:	d10e      	bne.n	800b186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f003 0320 	and.w	r3, r3, #32
 800b172:	2b20      	cmp	r3, #32
 800b174:	d107      	bne.n	800b186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f06f 0220 	mvn.w	r2, #32
 800b17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fe2f 	bl	800bde4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b194:	d10f      	bne.n	800b1b6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1a4:	d107      	bne.n	800b1b6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fe35 	bl	800be20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1c4:	d10f      	bne.n	800b1e6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1d4:	d107      	bne.n	800b1e6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fe27 	bl	800be34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1f4:	d10f      	bne.n	800b216 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b204:	d107      	bne.n	800b216 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fe19 	bl	800be48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b224:	d10f      	bne.n	800b246 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b234:	d107      	bne.n	800b246 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fe0b 	bl	800be5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b266:	2b01      	cmp	r3, #1
 800b268:	d101      	bne.n	800b26e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b26a:	2302      	movs	r3, #2
 800b26c:	e0ff      	b.n	800b46e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b14      	cmp	r3, #20
 800b27a:	f200 80f0 	bhi.w	800b45e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b27e:	a201      	add	r2, pc, #4	; (adr r2, 800b284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b284:	0800b2d9 	.word	0x0800b2d9
 800b288:	0800b45f 	.word	0x0800b45f
 800b28c:	0800b45f 	.word	0x0800b45f
 800b290:	0800b45f 	.word	0x0800b45f
 800b294:	0800b319 	.word	0x0800b319
 800b298:	0800b45f 	.word	0x0800b45f
 800b29c:	0800b45f 	.word	0x0800b45f
 800b2a0:	0800b45f 	.word	0x0800b45f
 800b2a4:	0800b35b 	.word	0x0800b35b
 800b2a8:	0800b45f 	.word	0x0800b45f
 800b2ac:	0800b45f 	.word	0x0800b45f
 800b2b0:	0800b45f 	.word	0x0800b45f
 800b2b4:	0800b39b 	.word	0x0800b39b
 800b2b8:	0800b45f 	.word	0x0800b45f
 800b2bc:	0800b45f 	.word	0x0800b45f
 800b2c0:	0800b45f 	.word	0x0800b45f
 800b2c4:	0800b3dd 	.word	0x0800b3dd
 800b2c8:	0800b45f 	.word	0x0800b45f
 800b2cc:	0800b45f 	.word	0x0800b45f
 800b2d0:	0800b45f 	.word	0x0800b45f
 800b2d4:	0800b41d 	.word	0x0800b41d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 f99a 	bl	800b618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	699a      	ldr	r2, [r3, #24]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f042 0208 	orr.w	r2, r2, #8
 800b2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	699a      	ldr	r2, [r3, #24]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f022 0204 	bic.w	r2, r2, #4
 800b302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6999      	ldr	r1, [r3, #24]
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	691a      	ldr	r2, [r3, #16]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	430a      	orrs	r2, r1
 800b314:	619a      	str	r2, [r3, #24]
      break;
 800b316:	e0a5      	b.n	800b464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68b9      	ldr	r1, [r7, #8]
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fa14 	bl	800b74c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	699a      	ldr	r2, [r3, #24]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	699a      	ldr	r2, [r3, #24]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6999      	ldr	r1, [r3, #24]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	021a      	lsls	r2, r3, #8
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	430a      	orrs	r2, r1
 800b356:	619a      	str	r2, [r3, #24]
      break;
 800b358:	e084      	b.n	800b464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68b9      	ldr	r1, [r7, #8]
 800b360:	4618      	mov	r0, r3
 800b362:	f000 fa87 	bl	800b874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	69da      	ldr	r2, [r3, #28]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f042 0208 	orr.w	r2, r2, #8
 800b374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	69da      	ldr	r2, [r3, #28]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 0204 	bic.w	r2, r2, #4
 800b384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	69d9      	ldr	r1, [r3, #28]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	691a      	ldr	r2, [r3, #16]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	430a      	orrs	r2, r1
 800b396:	61da      	str	r2, [r3, #28]
      break;
 800b398:	e064      	b.n	800b464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 faf9 	bl	800b998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	69da      	ldr	r2, [r3, #28]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	69da      	ldr	r2, [r3, #28]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	69d9      	ldr	r1, [r3, #28]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	021a      	lsls	r2, r3, #8
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	61da      	str	r2, [r3, #28]
      break;
 800b3da:	e043      	b.n	800b464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 fb6c 	bl	800bac0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f042 0208 	orr.w	r2, r2, #8
 800b3f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 0204 	bic.w	r2, r2, #4
 800b406:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	691a      	ldr	r2, [r3, #16]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b41a:	e023      	b.n	800b464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fbb6 	bl	800bb94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b436:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b446:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	021a      	lsls	r2, r3, #8
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	430a      	orrs	r2, r1
 800b45a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b45c:	e002      	b.n	800b464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	75fb      	strb	r3, [r7, #23]
      break;
 800b462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3718      	adds	r7, #24
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop

0800b478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	4a46      	ldr	r2, [pc, #280]	; (800b5f4 <TIM_Base_SetConfig+0x12c>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d017      	beq.n	800b510 <TIM_Base_SetConfig+0x48>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4e6:	d013      	beq.n	800b510 <TIM_Base_SetConfig+0x48>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a43      	ldr	r2, [pc, #268]	; (800b5f8 <TIM_Base_SetConfig+0x130>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d00f      	beq.n	800b510 <TIM_Base_SetConfig+0x48>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a42      	ldr	r2, [pc, #264]	; (800b5fc <TIM_Base_SetConfig+0x134>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00b      	beq.n	800b510 <TIM_Base_SetConfig+0x48>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a41      	ldr	r2, [pc, #260]	; (800b600 <TIM_Base_SetConfig+0x138>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d007      	beq.n	800b510 <TIM_Base_SetConfig+0x48>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a40      	ldr	r2, [pc, #256]	; (800b604 <TIM_Base_SetConfig+0x13c>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d003      	beq.n	800b510 <TIM_Base_SetConfig+0x48>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a3f      	ldr	r2, [pc, #252]	; (800b608 <TIM_Base_SetConfig+0x140>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d108      	bne.n	800b522 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	4313      	orrs	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a33      	ldr	r2, [pc, #204]	; (800b5f4 <TIM_Base_SetConfig+0x12c>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d023      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b530:	d01f      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a30      	ldr	r2, [pc, #192]	; (800b5f8 <TIM_Base_SetConfig+0x130>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d01b      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4a2f      	ldr	r2, [pc, #188]	; (800b5fc <TIM_Base_SetConfig+0x134>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d017      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a2e      	ldr	r2, [pc, #184]	; (800b600 <TIM_Base_SetConfig+0x138>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d013      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <TIM_Base_SetConfig+0x13c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d00f      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a2d      	ldr	r2, [pc, #180]	; (800b60c <TIM_Base_SetConfig+0x144>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d00b      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a2c      	ldr	r2, [pc, #176]	; (800b610 <TIM_Base_SetConfig+0x148>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d007      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a2b      	ldr	r2, [pc, #172]	; (800b614 <TIM_Base_SetConfig+0x14c>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d003      	beq.n	800b572 <TIM_Base_SetConfig+0xaa>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a26      	ldr	r2, [pc, #152]	; (800b608 <TIM_Base_SetConfig+0x140>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d108      	bne.n	800b584 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	4313      	orrs	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	4313      	orrs	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a12      	ldr	r2, [pc, #72]	; (800b5f4 <TIM_Base_SetConfig+0x12c>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d013      	beq.n	800b5d8 <TIM_Base_SetConfig+0x110>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a14      	ldr	r2, [pc, #80]	; (800b604 <TIM_Base_SetConfig+0x13c>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00f      	beq.n	800b5d8 <TIM_Base_SetConfig+0x110>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a14      	ldr	r2, [pc, #80]	; (800b60c <TIM_Base_SetConfig+0x144>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d00b      	beq.n	800b5d8 <TIM_Base_SetConfig+0x110>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a13      	ldr	r2, [pc, #76]	; (800b610 <TIM_Base_SetConfig+0x148>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d007      	beq.n	800b5d8 <TIM_Base_SetConfig+0x110>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a12      	ldr	r2, [pc, #72]	; (800b614 <TIM_Base_SetConfig+0x14c>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d003      	beq.n	800b5d8 <TIM_Base_SetConfig+0x110>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a0d      	ldr	r2, [pc, #52]	; (800b608 <TIM_Base_SetConfig+0x140>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d103      	bne.n	800b5e0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	691a      	ldr	r2, [r3, #16]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	615a      	str	r2, [r3, #20]
}
 800b5e6:	bf00      	nop
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	40012c00 	.word	0x40012c00
 800b5f8:	40000400 	.word	0x40000400
 800b5fc:	40000800 	.word	0x40000800
 800b600:	40000c00 	.word	0x40000c00
 800b604:	40013400 	.word	0x40013400
 800b608:	40015000 	.word	0x40015000
 800b60c:	40014000 	.word	0x40014000
 800b610:	40014400 	.word	0x40014400
 800b614:	40014800 	.word	0x40014800

0800b618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b618:	b480      	push	{r7}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	f023 0201 	bic.w	r2, r3, #1
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b64a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f023 0303 	bic.w	r3, r3, #3
 800b652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f023 0302 	bic.w	r3, r3, #2
 800b664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a30      	ldr	r2, [pc, #192]	; (800b734 <TIM_OC1_SetConfig+0x11c>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d013      	beq.n	800b6a0 <TIM_OC1_SetConfig+0x88>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a2f      	ldr	r2, [pc, #188]	; (800b738 <TIM_OC1_SetConfig+0x120>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00f      	beq.n	800b6a0 <TIM_OC1_SetConfig+0x88>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a2e      	ldr	r2, [pc, #184]	; (800b73c <TIM_OC1_SetConfig+0x124>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d00b      	beq.n	800b6a0 <TIM_OC1_SetConfig+0x88>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a2d      	ldr	r2, [pc, #180]	; (800b740 <TIM_OC1_SetConfig+0x128>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d007      	beq.n	800b6a0 <TIM_OC1_SetConfig+0x88>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a2c      	ldr	r2, [pc, #176]	; (800b744 <TIM_OC1_SetConfig+0x12c>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d003      	beq.n	800b6a0 <TIM_OC1_SetConfig+0x88>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a2b      	ldr	r2, [pc, #172]	; (800b748 <TIM_OC1_SetConfig+0x130>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d10c      	bne.n	800b6ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f023 0308 	bic.w	r3, r3, #8
 800b6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f023 0304 	bic.w	r3, r3, #4
 800b6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a1d      	ldr	r2, [pc, #116]	; (800b734 <TIM_OC1_SetConfig+0x11c>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d013      	beq.n	800b6ea <TIM_OC1_SetConfig+0xd2>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a1c      	ldr	r2, [pc, #112]	; (800b738 <TIM_OC1_SetConfig+0x120>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d00f      	beq.n	800b6ea <TIM_OC1_SetConfig+0xd2>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a1b      	ldr	r2, [pc, #108]	; (800b73c <TIM_OC1_SetConfig+0x124>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d00b      	beq.n	800b6ea <TIM_OC1_SetConfig+0xd2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a1a      	ldr	r2, [pc, #104]	; (800b740 <TIM_OC1_SetConfig+0x128>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d007      	beq.n	800b6ea <TIM_OC1_SetConfig+0xd2>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4a19      	ldr	r2, [pc, #100]	; (800b744 <TIM_OC1_SetConfig+0x12c>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d003      	beq.n	800b6ea <TIM_OC1_SetConfig+0xd2>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	4a18      	ldr	r2, [pc, #96]	; (800b748 <TIM_OC1_SetConfig+0x130>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d111      	bne.n	800b70e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	4313      	orrs	r3, r2
 800b702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	697a      	ldr	r2, [r7, #20]
 800b726:	621a      	str	r2, [r3, #32]
}
 800b728:	bf00      	nop
 800b72a:	371c      	adds	r7, #28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	40012c00 	.word	0x40012c00
 800b738:	40013400 	.word	0x40013400
 800b73c:	40014000 	.word	0x40014000
 800b740:	40014400 	.word	0x40014400
 800b744:	40014800 	.word	0x40014800
 800b748:	40015000 	.word	0x40015000

0800b74c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	f023 0210 	bic.w	r2, r3, #16
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b77a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	021b      	lsls	r3, r3, #8
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4313      	orrs	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f023 0320 	bic.w	r3, r3, #32
 800b79a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	011b      	lsls	r3, r3, #4
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a2c      	ldr	r2, [pc, #176]	; (800b85c <TIM_OC2_SetConfig+0x110>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d007      	beq.n	800b7c0 <TIM_OC2_SetConfig+0x74>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4a2b      	ldr	r2, [pc, #172]	; (800b860 <TIM_OC2_SetConfig+0x114>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d003      	beq.n	800b7c0 <TIM_OC2_SetConfig+0x74>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a2a      	ldr	r2, [pc, #168]	; (800b864 <TIM_OC2_SetConfig+0x118>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d10d      	bne.n	800b7dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	011b      	lsls	r3, r3, #4
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a1f      	ldr	r2, [pc, #124]	; (800b85c <TIM_OC2_SetConfig+0x110>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d013      	beq.n	800b80c <TIM_OC2_SetConfig+0xc0>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a1e      	ldr	r2, [pc, #120]	; (800b860 <TIM_OC2_SetConfig+0x114>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d00f      	beq.n	800b80c <TIM_OC2_SetConfig+0xc0>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a1e      	ldr	r2, [pc, #120]	; (800b868 <TIM_OC2_SetConfig+0x11c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d00b      	beq.n	800b80c <TIM_OC2_SetConfig+0xc0>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a1d      	ldr	r2, [pc, #116]	; (800b86c <TIM_OC2_SetConfig+0x120>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d007      	beq.n	800b80c <TIM_OC2_SetConfig+0xc0>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a1c      	ldr	r2, [pc, #112]	; (800b870 <TIM_OC2_SetConfig+0x124>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d003      	beq.n	800b80c <TIM_OC2_SetConfig+0xc0>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a17      	ldr	r2, [pc, #92]	; (800b864 <TIM_OC2_SetConfig+0x118>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d113      	bne.n	800b834 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b81a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	695b      	ldr	r3, [r3, #20]
 800b820:	009b      	lsls	r3, r3, #2
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	4313      	orrs	r3, r2
 800b826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	4313      	orrs	r3, r2
 800b832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	621a      	str	r2, [r3, #32]
}
 800b84e:	bf00      	nop
 800b850:	371c      	adds	r7, #28
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40012c00 	.word	0x40012c00
 800b860:	40013400 	.word	0x40013400
 800b864:	40015000 	.word	0x40015000
 800b868:	40014000 	.word	0x40014000
 800b86c:	40014400 	.word	0x40014400
 800b870:	40014800 	.word	0x40014800

0800b874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b874:	b480      	push	{r7}
 800b876:	b087      	sub	sp, #28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 0303 	bic.w	r3, r3, #3
 800b8ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b8c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	021b      	lsls	r3, r3, #8
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4a2b      	ldr	r2, [pc, #172]	; (800b980 <TIM_OC3_SetConfig+0x10c>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d007      	beq.n	800b8e6 <TIM_OC3_SetConfig+0x72>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a2a      	ldr	r2, [pc, #168]	; (800b984 <TIM_OC3_SetConfig+0x110>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d003      	beq.n	800b8e6 <TIM_OC3_SetConfig+0x72>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a29      	ldr	r2, [pc, #164]	; (800b988 <TIM_OC3_SetConfig+0x114>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d10d      	bne.n	800b902 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	021b      	lsls	r3, r3, #8
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a1e      	ldr	r2, [pc, #120]	; (800b980 <TIM_OC3_SetConfig+0x10c>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d013      	beq.n	800b932 <TIM_OC3_SetConfig+0xbe>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a1d      	ldr	r2, [pc, #116]	; (800b984 <TIM_OC3_SetConfig+0x110>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d00f      	beq.n	800b932 <TIM_OC3_SetConfig+0xbe>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a1d      	ldr	r2, [pc, #116]	; (800b98c <TIM_OC3_SetConfig+0x118>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d00b      	beq.n	800b932 <TIM_OC3_SetConfig+0xbe>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a1c      	ldr	r2, [pc, #112]	; (800b990 <TIM_OC3_SetConfig+0x11c>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d007      	beq.n	800b932 <TIM_OC3_SetConfig+0xbe>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a1b      	ldr	r2, [pc, #108]	; (800b994 <TIM_OC3_SetConfig+0x120>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d003      	beq.n	800b932 <TIM_OC3_SetConfig+0xbe>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a16      	ldr	r2, [pc, #88]	; (800b988 <TIM_OC3_SetConfig+0x114>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d113      	bne.n	800b95a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	011b      	lsls	r3, r3, #4
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	4313      	orrs	r3, r2
 800b958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	621a      	str	r2, [r3, #32]
}
 800b974:	bf00      	nop
 800b976:	371c      	adds	r7, #28
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	40012c00 	.word	0x40012c00
 800b984:	40013400 	.word	0x40013400
 800b988:	40015000 	.word	0x40015000
 800b98c:	40014000 	.word	0x40014000
 800b990:	40014400 	.word	0x40014400
 800b994:	40014800 	.word	0x40014800

0800b998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b998:	b480      	push	{r7}
 800b99a:	b087      	sub	sp, #28
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	69db      	ldr	r3, [r3, #28]
 800b9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	031b      	lsls	r3, r3, #12
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a2c      	ldr	r2, [pc, #176]	; (800baa8 <TIM_OC4_SetConfig+0x110>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d007      	beq.n	800ba0c <TIM_OC4_SetConfig+0x74>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a2b      	ldr	r2, [pc, #172]	; (800baac <TIM_OC4_SetConfig+0x114>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d003      	beq.n	800ba0c <TIM_OC4_SetConfig+0x74>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a2a      	ldr	r2, [pc, #168]	; (800bab0 <TIM_OC4_SetConfig+0x118>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d10d      	bne.n	800ba28 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	031b      	lsls	r3, r3, #12
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a1f      	ldr	r2, [pc, #124]	; (800baa8 <TIM_OC4_SetConfig+0x110>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d013      	beq.n	800ba58 <TIM_OC4_SetConfig+0xc0>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a1e      	ldr	r2, [pc, #120]	; (800baac <TIM_OC4_SetConfig+0x114>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d00f      	beq.n	800ba58 <TIM_OC4_SetConfig+0xc0>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a1e      	ldr	r2, [pc, #120]	; (800bab4 <TIM_OC4_SetConfig+0x11c>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00b      	beq.n	800ba58 <TIM_OC4_SetConfig+0xc0>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a1d      	ldr	r2, [pc, #116]	; (800bab8 <TIM_OC4_SetConfig+0x120>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d007      	beq.n	800ba58 <TIM_OC4_SetConfig+0xc0>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a1c      	ldr	r2, [pc, #112]	; (800babc <TIM_OC4_SetConfig+0x124>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d003      	beq.n	800ba58 <TIM_OC4_SetConfig+0xc0>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a17      	ldr	r2, [pc, #92]	; (800bab0 <TIM_OC4_SetConfig+0x118>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d113      	bne.n	800ba80 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	695b      	ldr	r3, [r3, #20]
 800ba6c:	019b      	lsls	r3, r3, #6
 800ba6e:	693a      	ldr	r2, [r7, #16]
 800ba70:	4313      	orrs	r3, r2
 800ba72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	019b      	lsls	r3, r3, #6
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	621a      	str	r2, [r3, #32]
}
 800ba9a:	bf00      	nop
 800ba9c:	371c      	adds	r7, #28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	40012c00 	.word	0x40012c00
 800baac:	40013400 	.word	0x40013400
 800bab0:	40015000 	.word	0x40015000
 800bab4:	40014000 	.word	0x40014000
 800bab8:	40014400 	.word	0x40014400
 800babc:	40014800 	.word	0x40014800

0800bac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800baee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bb04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	041b      	lsls	r3, r3, #16
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a19      	ldr	r2, [pc, #100]	; (800bb7c <TIM_OC5_SetConfig+0xbc>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d013      	beq.n	800bb42 <TIM_OC5_SetConfig+0x82>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a18      	ldr	r2, [pc, #96]	; (800bb80 <TIM_OC5_SetConfig+0xc0>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00f      	beq.n	800bb42 <TIM_OC5_SetConfig+0x82>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a17      	ldr	r2, [pc, #92]	; (800bb84 <TIM_OC5_SetConfig+0xc4>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d00b      	beq.n	800bb42 <TIM_OC5_SetConfig+0x82>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a16      	ldr	r2, [pc, #88]	; (800bb88 <TIM_OC5_SetConfig+0xc8>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d007      	beq.n	800bb42 <TIM_OC5_SetConfig+0x82>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a15      	ldr	r2, [pc, #84]	; (800bb8c <TIM_OC5_SetConfig+0xcc>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d003      	beq.n	800bb42 <TIM_OC5_SetConfig+0x82>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a14      	ldr	r2, [pc, #80]	; (800bb90 <TIM_OC5_SetConfig+0xd0>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d109      	bne.n	800bb56 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	021b      	lsls	r3, r3, #8
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	685a      	ldr	r2, [r3, #4]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	621a      	str	r2, [r3, #32]
}
 800bb70:	bf00      	nop
 800bb72:	371c      	adds	r7, #28
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	40012c00 	.word	0x40012c00
 800bb80:	40013400 	.word	0x40013400
 800bb84:	40014000 	.word	0x40014000
 800bb88:	40014400 	.word	0x40014400
 800bb8c:	40014800 	.word	0x40014800
 800bb90:	40015000 	.word	0x40015000

0800bb94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	021b      	lsls	r3, r3, #8
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	051b      	lsls	r3, r3, #20
 800bbe2:	693a      	ldr	r2, [r7, #16]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a1a      	ldr	r2, [pc, #104]	; (800bc54 <TIM_OC6_SetConfig+0xc0>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d013      	beq.n	800bc18 <TIM_OC6_SetConfig+0x84>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a19      	ldr	r2, [pc, #100]	; (800bc58 <TIM_OC6_SetConfig+0xc4>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d00f      	beq.n	800bc18 <TIM_OC6_SetConfig+0x84>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a18      	ldr	r2, [pc, #96]	; (800bc5c <TIM_OC6_SetConfig+0xc8>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d00b      	beq.n	800bc18 <TIM_OC6_SetConfig+0x84>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a17      	ldr	r2, [pc, #92]	; (800bc60 <TIM_OC6_SetConfig+0xcc>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d007      	beq.n	800bc18 <TIM_OC6_SetConfig+0x84>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a16      	ldr	r2, [pc, #88]	; (800bc64 <TIM_OC6_SetConfig+0xd0>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d003      	beq.n	800bc18 <TIM_OC6_SetConfig+0x84>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a15      	ldr	r2, [pc, #84]	; (800bc68 <TIM_OC6_SetConfig+0xd4>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d109      	bne.n	800bc2c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	029b      	lsls	r3, r3, #10
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	621a      	str	r2, [r3, #32]
}
 800bc46:	bf00      	nop
 800bc48:	371c      	adds	r7, #28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	40012c00 	.word	0x40012c00
 800bc58:	40013400 	.word	0x40013400
 800bc5c:	40014000 	.word	0x40014000
 800bc60:	40014400 	.word	0x40014400
 800bc64:	40014800 	.word	0x40014800
 800bc68:	40015000 	.word	0x40015000

0800bc6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f003 031f 	and.w	r3, r3, #31
 800bc7e:	2201      	movs	r2, #1
 800bc80:	fa02 f303 	lsl.w	r3, r2, r3
 800bc84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6a1a      	ldr	r2, [r3, #32]
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	43db      	mvns	r3, r3
 800bc8e:	401a      	ands	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6a1a      	ldr	r2, [r3, #32]
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f003 031f 	and.w	r3, r3, #31
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	fa01 f303 	lsl.w	r3, r1, r3
 800bca4:	431a      	orrs	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	621a      	str	r2, [r3, #32]
}
 800bcaa:	bf00      	nop
 800bcac:	371c      	adds	r7, #28
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
	...

0800bcb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d101      	bne.n	800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bccc:	2302      	movs	r3, #2
 800bcce:	e074      	b.n	800bdba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2202      	movs	r2, #2
 800bcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a34      	ldr	r2, [pc, #208]	; (800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d009      	beq.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a33      	ldr	r2, [pc, #204]	; (800bdcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d004      	beq.n	800bd0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a31      	ldr	r2, [pc, #196]	; (800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d108      	bne.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bd14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a21      	ldr	r2, [pc, #132]	; (800bdc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d022      	beq.n	800bd8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd50:	d01d      	beq.n	800bd8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a1f      	ldr	r2, [pc, #124]	; (800bdd4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d018      	beq.n	800bd8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a1d      	ldr	r2, [pc, #116]	; (800bdd8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d013      	beq.n	800bd8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a1c      	ldr	r2, [pc, #112]	; (800bddc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d00e      	beq.n	800bd8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a15      	ldr	r2, [pc, #84]	; (800bdcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d009      	beq.n	800bd8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a18      	ldr	r2, [pc, #96]	; (800bde0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d004      	beq.n	800bd8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a11      	ldr	r2, [pc, #68]	; (800bdd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d10c      	bne.n	800bda8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	40012c00 	.word	0x40012c00
 800bdcc:	40013400 	.word	0x40013400
 800bdd0:	40015000 	.word	0x40015000
 800bdd4:	40000400 	.word	0x40000400
 800bdd8:	40000800 	.word	0x40000800
 800bddc:	40000c00 	.word	0x40000c00
 800bde0:	40014000 	.word	0x40014000

0800bde4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e042      	b.n	800bf08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d106      	bne.n	800be9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7f9 ff99 	bl	8005dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2224      	movs	r2, #36	; 0x24
 800be9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f022 0201 	bic.w	r2, r2, #1
 800beb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fc5a 	bl	800c76c <UART_SetConfig>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e022      	b.n	800bf08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 ff4a 	bl	800cd64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800beee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f042 0201 	orr.w	r2, r2, #1
 800befe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 ffd1 	bl	800cea8 <UART_CheckIdleState>
 800bf06:	4603      	mov	r3, r0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08a      	sub	sp, #40	; 0x28
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf26:	2b20      	cmp	r3, #32
 800bf28:	f040 8083 	bne.w	800c032 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <HAL_UART_Transmit+0x28>
 800bf32:	88fb      	ldrh	r3, [r7, #6]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e07b      	b.n	800c034 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d101      	bne.n	800bf4a <HAL_UART_Transmit+0x3a>
 800bf46:	2302      	movs	r3, #2
 800bf48:	e074      	b.n	800c034 <HAL_UART_Transmit+0x124>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2221      	movs	r2, #33	; 0x21
 800bf5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf62:	f7f6 ffc7 	bl	8002ef4 <HAL_GetTick>
 800bf66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	88fa      	ldrh	r2, [r7, #6]
 800bf6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	88fa      	ldrh	r2, [r7, #6]
 800bf74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf80:	d108      	bne.n	800bf94 <HAL_UART_Transmit+0x84>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d104      	bne.n	800bf94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	61bb      	str	r3, [r7, #24]
 800bf92:	e003      	b.n	800bf9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bfa4:	e02c      	b.n	800c000 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2200      	movs	r2, #0
 800bfae:	2180      	movs	r1, #128	; 0x80
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f000 ffc4 	bl	800cf3e <UART_WaitOnFlagUntilTimeout>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	e039      	b.n	800c034 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10b      	bne.n	800bfde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	3302      	adds	r3, #2
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	e007      	b.n	800bfee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	781a      	ldrb	r2, [r3, #0]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	3301      	adds	r3, #1
 800bfec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	3b01      	subs	r3, #1
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c006:	b29b      	uxth	r3, r3
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1cc      	bne.n	800bfa6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	2200      	movs	r2, #0
 800c014:	2140      	movs	r1, #64	; 0x40
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f000 ff91 	bl	800cf3e <UART_WaitOnFlagUntilTimeout>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e006      	b.n	800c034 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2220      	movs	r2, #32
 800c02a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	e000      	b.n	800c034 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c032:	2302      	movs	r3, #2
  }
}
 800c034:	4618      	mov	r0, r3
 800c036:	3720      	adds	r7, #32
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08a      	sub	sp, #40	; 0x28
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	4613      	mov	r3, r2
 800c048:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c050:	2b20      	cmp	r3, #32
 800c052:	d142      	bne.n	800c0da <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d002      	beq.n	800c060 <HAL_UART_Receive_DMA+0x24>
 800c05a:	88fb      	ldrh	r3, [r7, #6]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e03b      	b.n	800c0dc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d101      	bne.n	800c072 <HAL_UART_Receive_DMA+0x36>
 800c06e:	2302      	movs	r3, #2
 800c070:	e034      	b.n	800c0dc <HAL_UART_Receive_DMA+0xa0>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2201      	movs	r2, #1
 800c076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a17      	ldr	r2, [pc, #92]	; (800c0e4 <HAL_UART_Receive_DMA+0xa8>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d01f      	beq.n	800c0ca <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c094:	2b00      	cmp	r3, #0
 800c096:	d018      	beq.n	800c0ca <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	623b      	str	r3, [r7, #32]
 800c0b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	69f9      	ldr	r1, [r7, #28]
 800c0bc:	6a3a      	ldr	r2, [r7, #32]
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e6      	bne.n	800c098 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c0ca:	88fb      	ldrh	r3, [r7, #6]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	68b9      	ldr	r1, [r7, #8]
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 fffd 	bl	800d0d0 <UART_Start_Receive_DMA>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	e000      	b.n	800c0dc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c0da:	2302      	movs	r3, #2
  }
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3728      	adds	r7, #40	; 0x28
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	40008000 	.word	0x40008000

0800c0e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b0ba      	sub	sp, #232	; 0xe8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	69db      	ldr	r3, [r3, #28]
 800c0f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c10e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c112:	f640 030f 	movw	r3, #2063	; 0x80f
 800c116:	4013      	ands	r3, r2
 800c118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c11c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c120:	2b00      	cmp	r3, #0
 800c122:	d11b      	bne.n	800c15c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c128:	f003 0320 	and.w	r3, r3, #32
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d015      	beq.n	800c15c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c134:	f003 0320 	and.w	r3, r3, #32
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d105      	bne.n	800c148 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c13c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d009      	beq.n	800c15c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f000 82d6 	beq.w	800c6fe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	4798      	blx	r3
      }
      return;
 800c15a:	e2d0      	b.n	800c6fe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c15c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 811f 	beq.w	800c3a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c166:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c16a:	4b8b      	ldr	r3, [pc, #556]	; (800c398 <HAL_UART_IRQHandler+0x2b0>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d106      	bne.n	800c180 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c172:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c176:	4b89      	ldr	r3, [pc, #548]	; (800c39c <HAL_UART_IRQHandler+0x2b4>)
 800c178:	4013      	ands	r3, r2
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f000 8112 	beq.w	800c3a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d011      	beq.n	800c1b0 <HAL_UART_IRQHandler+0xc8>
 800c18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00b      	beq.n	800c1b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2201      	movs	r2, #1
 800c19e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1a6:	f043 0201 	orr.w	r2, r3, #1
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b4:	f003 0302 	and.w	r3, r3, #2
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d011      	beq.n	800c1e0 <HAL_UART_IRQHandler+0xf8>
 800c1bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1c0:	f003 0301 	and.w	r3, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00b      	beq.n	800c1e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d6:	f043 0204 	orr.w	r2, r3, #4
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d011      	beq.n	800c210 <HAL_UART_IRQHandler+0x128>
 800c1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00b      	beq.n	800c210 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2204      	movs	r2, #4
 800c1fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c206:	f043 0202 	orr.w	r2, r3, #2
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c214:	f003 0308 	and.w	r3, r3, #8
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d017      	beq.n	800c24c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c21c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c220:	f003 0320 	and.w	r3, r3, #32
 800c224:	2b00      	cmp	r3, #0
 800c226:	d105      	bne.n	800c234 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c228:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c22c:	4b5a      	ldr	r3, [pc, #360]	; (800c398 <HAL_UART_IRQHandler+0x2b0>)
 800c22e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00b      	beq.n	800c24c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2208      	movs	r2, #8
 800c23a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c242:	f043 0208 	orr.w	r2, r3, #8
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c254:	2b00      	cmp	r3, #0
 800c256:	d012      	beq.n	800c27e <HAL_UART_IRQHandler+0x196>
 800c258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c25c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00c      	beq.n	800c27e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c26c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c274:	f043 0220 	orr.w	r2, r3, #32
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 823c 	beq.w	800c702 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b00      	cmp	r3, #0
 800c294:	d013      	beq.n	800c2be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c29a:	f003 0320 	and.w	r3, r3, #32
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d105      	bne.n	800c2ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d007      	beq.n	800c2be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d2:	2b40      	cmp	r3, #64	; 0x40
 800c2d4:	d005      	beq.n	800c2e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c2d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d04f      	beq.n	800c382 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 ffdd 	bl	800d2a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	689b      	ldr	r3, [r3, #8]
 800c2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f2:	2b40      	cmp	r3, #64	; 0x40
 800c2f4:	d141      	bne.n	800c37a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c30c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c314:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c322:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c32e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c33a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1d9      	bne.n	800c2f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d013      	beq.n	800c372 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c34e:	4a14      	ldr	r2, [pc, #80]	; (800c3a0 <HAL_UART_IRQHandler+0x2b8>)
 800c350:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c356:	4618      	mov	r0, r3
 800c358:	f7fb fd52 	bl	8007e00 <HAL_DMA_Abort_IT>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d017      	beq.n	800c392 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c370:	e00f      	b.n	800c392 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f9e4 	bl	800c740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c378:	e00b      	b.n	800c392 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f9e0 	bl	800c740 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c380:	e007      	b.n	800c392 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f9dc 	bl	800c740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c390:	e1b7      	b.n	800c702 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c392:	bf00      	nop
    return;
 800c394:	e1b5      	b.n	800c702 <HAL_UART_IRQHandler+0x61a>
 800c396:	bf00      	nop
 800c398:	10000001 	.word	0x10000001
 800c39c:	04000120 	.word	0x04000120
 800c3a0:	0800d54d 	.word	0x0800d54d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	f040 814a 	bne.w	800c642 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3b2:	f003 0310 	and.w	r3, r3, #16
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 8143 	beq.w	800c642 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3c0:	f003 0310 	and.w	r3, r3, #16
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 813c 	beq.w	800c642 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2210      	movs	r2, #16
 800c3d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3dc:	2b40      	cmp	r3, #64	; 0x40
 800c3de:	f040 80b5 	bne.w	800c54c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c3ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 8187 	beq.w	800c706 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c402:	429a      	cmp	r2, r3
 800c404:	f080 817f 	bcs.w	800c706 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c40e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	f040 8086 	bne.w	800c530 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c43c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	461a      	mov	r2, r3
 800c44a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c44e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c452:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c45a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c45e:	e841 2300 	strex	r3, r2, [r1]
 800c462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1da      	bne.n	800c424 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c478:	e853 3f00 	ldrex	r3, [r3]
 800c47c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c47e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c480:	f023 0301 	bic.w	r3, r3, #1
 800c484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3308      	adds	r3, #8
 800c48e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c49a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c49e:	e841 2300 	strex	r3, r2, [r1]
 800c4a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1e1      	bne.n	800c46e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4b4:	e853 3f00 	ldrex	r3, [r3]
 800c4b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c4ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c4d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c4d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c4d6:	e841 2300 	strex	r3, r2, [r1]
 800c4da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c4dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1e3      	bne.n	800c4aa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2220      	movs	r2, #32
 800c4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4f8:	e853 3f00 	ldrex	r3, [r3]
 800c4fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c500:	f023 0310 	bic.w	r3, r3, #16
 800c504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	461a      	mov	r2, r3
 800c50e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c512:	65bb      	str	r3, [r7, #88]	; 0x58
 800c514:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e4      	bne.n	800c4f0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fb fc0f 	bl	8007d4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	1ad3      	subs	r3, r2, r3
 800c540:	b29b      	uxth	r3, r3
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f905 	bl	800c754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c54a:	e0dc      	b.n	800c706 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c558:	b29b      	uxth	r3, r3
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c566:	b29b      	uxth	r3, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 80ce 	beq.w	800c70a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c56e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c572:	2b00      	cmp	r3, #0
 800c574:	f000 80c9 	beq.w	800c70a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c58c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	461a      	mov	r2, r3
 800c596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c59a:	647b      	str	r3, [r7, #68]	; 0x44
 800c59c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e4      	bne.n	800c578 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	3308      	adds	r3, #8
 800c5b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5c4:	f023 0301 	bic.w	r3, r3, #1
 800c5c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c5d6:	633a      	str	r2, [r7, #48]	; 0x30
 800c5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1e1      	bne.n	800c5ae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2220      	movs	r2, #32
 800c5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 0310 	bic.w	r3, r3, #16
 800c612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	461a      	mov	r2, r3
 800c61c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c620:	61fb      	str	r3, [r7, #28]
 800c622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	69b9      	ldr	r1, [r7, #24]
 800c626:	69fa      	ldr	r2, [r7, #28]
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	617b      	str	r3, [r7, #20]
   return(result);
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e4      	bne.n	800c5fe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f88a 	bl	800c754 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c640:	e063      	b.n	800c70a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00e      	beq.n	800c66c <HAL_UART_IRQHandler+0x584>
 800c64e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c656:	2b00      	cmp	r3, #0
 800c658:	d008      	beq.n	800c66c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 ffb2 	bl	800d5ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c66a:	e051      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c674:	2b00      	cmp	r3, #0
 800c676:	d014      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c680:	2b00      	cmp	r3, #0
 800c682:	d105      	bne.n	800c690 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d008      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c694:	2b00      	cmp	r3, #0
 800c696:	d03a      	beq.n	800c70e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	4798      	blx	r3
    }
    return;
 800c6a0:	e035      	b.n	800c70e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c6a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d009      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x5da>
 800c6ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 ff5c 	bl	800d578 <UART_EndTransmit_IT>
    return;
 800c6c0:	e026      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d009      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x5fa>
 800c6ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 ff8b 	bl	800d5f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6e0:	e016      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d010      	beq.n	800c710 <HAL_UART_IRQHandler+0x628>
 800c6ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da0c      	bge.n	800c710 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 ff73 	bl	800d5e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6fc:	e008      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
      return;
 800c6fe:	bf00      	nop
 800c700:	e006      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
    return;
 800c702:	bf00      	nop
 800c704:	e004      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
      return;
 800c706:	bf00      	nop
 800c708:	e002      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
      return;
 800c70a:	bf00      	nop
 800c70c:	e000      	b.n	800c710 <HAL_UART_IRQHandler+0x628>
    return;
 800c70e:	bf00      	nop
  }
}
 800c710:	37e8      	adds	r7, #232	; 0xe8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop

0800c718 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c734:	bf00      	nop
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c76c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c770:	b08c      	sub	sp, #48	; 0x30
 800c772:	af00      	add	r7, sp, #0
 800c774:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	689a      	ldr	r2, [r3, #8]
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	431a      	orrs	r2, r3
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	4313      	orrs	r3, r2
 800c792:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	4baa      	ldr	r3, [pc, #680]	; (800ca44 <UART_SetConfig+0x2d8>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	6812      	ldr	r2, [r2, #0]
 800c7a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	68da      	ldr	r2, [r3, #12]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a9f      	ldr	r2, [pc, #636]	; (800ca48 <UART_SetConfig+0x2dc>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d004      	beq.n	800c7d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c7e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	6812      	ldr	r2, [r2, #0]
 800c7ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7ec:	430b      	orrs	r3, r1
 800c7ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f6:	f023 010f 	bic.w	r1, r3, #15
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	430a      	orrs	r2, r1
 800c804:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a90      	ldr	r2, [pc, #576]	; (800ca4c <UART_SetConfig+0x2e0>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d125      	bne.n	800c85c <UART_SetConfig+0xf0>
 800c810:	4b8f      	ldr	r3, [pc, #572]	; (800ca50 <UART_SetConfig+0x2e4>)
 800c812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c816:	f003 0303 	and.w	r3, r3, #3
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d81a      	bhi.n	800c854 <UART_SetConfig+0xe8>
 800c81e:	a201      	add	r2, pc, #4	; (adr r2, 800c824 <UART_SetConfig+0xb8>)
 800c820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c824:	0800c835 	.word	0x0800c835
 800c828:	0800c845 	.word	0x0800c845
 800c82c:	0800c83d 	.word	0x0800c83d
 800c830:	0800c84d 	.word	0x0800c84d
 800c834:	2301      	movs	r3, #1
 800c836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c83a:	e116      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c83c:	2302      	movs	r3, #2
 800c83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c842:	e112      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c844:	2304      	movs	r3, #4
 800c846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c84a:	e10e      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c84c:	2308      	movs	r3, #8
 800c84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c852:	e10a      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c854:	2310      	movs	r3, #16
 800c856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c85a:	e106      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a7c      	ldr	r2, [pc, #496]	; (800ca54 <UART_SetConfig+0x2e8>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d138      	bne.n	800c8d8 <UART_SetConfig+0x16c>
 800c866:	4b7a      	ldr	r3, [pc, #488]	; (800ca50 <UART_SetConfig+0x2e4>)
 800c868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c86c:	f003 030c 	and.w	r3, r3, #12
 800c870:	2b0c      	cmp	r3, #12
 800c872:	d82d      	bhi.n	800c8d0 <UART_SetConfig+0x164>
 800c874:	a201      	add	r2, pc, #4	; (adr r2, 800c87c <UART_SetConfig+0x110>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c8b1 	.word	0x0800c8b1
 800c880:	0800c8d1 	.word	0x0800c8d1
 800c884:	0800c8d1 	.word	0x0800c8d1
 800c888:	0800c8d1 	.word	0x0800c8d1
 800c88c:	0800c8c1 	.word	0x0800c8c1
 800c890:	0800c8d1 	.word	0x0800c8d1
 800c894:	0800c8d1 	.word	0x0800c8d1
 800c898:	0800c8d1 	.word	0x0800c8d1
 800c89c:	0800c8b9 	.word	0x0800c8b9
 800c8a0:	0800c8d1 	.word	0x0800c8d1
 800c8a4:	0800c8d1 	.word	0x0800c8d1
 800c8a8:	0800c8d1 	.word	0x0800c8d1
 800c8ac:	0800c8c9 	.word	0x0800c8c9
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8b6:	e0d8      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8be:	e0d4      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c8c0:	2304      	movs	r3, #4
 800c8c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8c6:	e0d0      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c8c8:	2308      	movs	r3, #8
 800c8ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8ce:	e0cc      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c8d0:	2310      	movs	r3, #16
 800c8d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c8d6:	e0c8      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a5e      	ldr	r2, [pc, #376]	; (800ca58 <UART_SetConfig+0x2ec>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d125      	bne.n	800c92e <UART_SetConfig+0x1c2>
 800c8e2:	4b5b      	ldr	r3, [pc, #364]	; (800ca50 <UART_SetConfig+0x2e4>)
 800c8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c8ec:	2b30      	cmp	r3, #48	; 0x30
 800c8ee:	d016      	beq.n	800c91e <UART_SetConfig+0x1b2>
 800c8f0:	2b30      	cmp	r3, #48	; 0x30
 800c8f2:	d818      	bhi.n	800c926 <UART_SetConfig+0x1ba>
 800c8f4:	2b20      	cmp	r3, #32
 800c8f6:	d00a      	beq.n	800c90e <UART_SetConfig+0x1a2>
 800c8f8:	2b20      	cmp	r3, #32
 800c8fa:	d814      	bhi.n	800c926 <UART_SetConfig+0x1ba>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <UART_SetConfig+0x19a>
 800c900:	2b10      	cmp	r3, #16
 800c902:	d008      	beq.n	800c916 <UART_SetConfig+0x1aa>
 800c904:	e00f      	b.n	800c926 <UART_SetConfig+0x1ba>
 800c906:	2300      	movs	r3, #0
 800c908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c90c:	e0ad      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c90e:	2302      	movs	r3, #2
 800c910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c914:	e0a9      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c916:	2304      	movs	r3, #4
 800c918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c91c:	e0a5      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c91e:	2308      	movs	r3, #8
 800c920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c924:	e0a1      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c926:	2310      	movs	r3, #16
 800c928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c92c:	e09d      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a4a      	ldr	r2, [pc, #296]	; (800ca5c <UART_SetConfig+0x2f0>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d125      	bne.n	800c984 <UART_SetConfig+0x218>
 800c938:	4b45      	ldr	r3, [pc, #276]	; (800ca50 <UART_SetConfig+0x2e4>)
 800c93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c93e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c942:	2bc0      	cmp	r3, #192	; 0xc0
 800c944:	d016      	beq.n	800c974 <UART_SetConfig+0x208>
 800c946:	2bc0      	cmp	r3, #192	; 0xc0
 800c948:	d818      	bhi.n	800c97c <UART_SetConfig+0x210>
 800c94a:	2b80      	cmp	r3, #128	; 0x80
 800c94c:	d00a      	beq.n	800c964 <UART_SetConfig+0x1f8>
 800c94e:	2b80      	cmp	r3, #128	; 0x80
 800c950:	d814      	bhi.n	800c97c <UART_SetConfig+0x210>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d002      	beq.n	800c95c <UART_SetConfig+0x1f0>
 800c956:	2b40      	cmp	r3, #64	; 0x40
 800c958:	d008      	beq.n	800c96c <UART_SetConfig+0x200>
 800c95a:	e00f      	b.n	800c97c <UART_SetConfig+0x210>
 800c95c:	2300      	movs	r3, #0
 800c95e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c962:	e082      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c964:	2302      	movs	r3, #2
 800c966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c96a:	e07e      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c972:	e07a      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c97a:	e076      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c982:	e072      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a35      	ldr	r2, [pc, #212]	; (800ca60 <UART_SetConfig+0x2f4>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d12a      	bne.n	800c9e4 <UART_SetConfig+0x278>
 800c98e:	4b30      	ldr	r3, [pc, #192]	; (800ca50 <UART_SetConfig+0x2e4>)
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c99c:	d01a      	beq.n	800c9d4 <UART_SetConfig+0x268>
 800c99e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9a2:	d81b      	bhi.n	800c9dc <UART_SetConfig+0x270>
 800c9a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9a8:	d00c      	beq.n	800c9c4 <UART_SetConfig+0x258>
 800c9aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9ae:	d815      	bhi.n	800c9dc <UART_SetConfig+0x270>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <UART_SetConfig+0x250>
 800c9b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b8:	d008      	beq.n	800c9cc <UART_SetConfig+0x260>
 800c9ba:	e00f      	b.n	800c9dc <UART_SetConfig+0x270>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9c2:	e052      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9ca:	e04e      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c9cc:	2304      	movs	r3, #4
 800c9ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9d2:	e04a      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c9d4:	2308      	movs	r3, #8
 800c9d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9da:	e046      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c9dc:	2310      	movs	r3, #16
 800c9de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9e2:	e042      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a17      	ldr	r2, [pc, #92]	; (800ca48 <UART_SetConfig+0x2dc>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d13a      	bne.n	800ca64 <UART_SetConfig+0x2f8>
 800c9ee:	4b18      	ldr	r3, [pc, #96]	; (800ca50 <UART_SetConfig+0x2e4>)
 800c9f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c9f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9fc:	d01a      	beq.n	800ca34 <UART_SetConfig+0x2c8>
 800c9fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca02:	d81b      	bhi.n	800ca3c <UART_SetConfig+0x2d0>
 800ca04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca08:	d00c      	beq.n	800ca24 <UART_SetConfig+0x2b8>
 800ca0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca0e:	d815      	bhi.n	800ca3c <UART_SetConfig+0x2d0>
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <UART_SetConfig+0x2b0>
 800ca14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca18:	d008      	beq.n	800ca2c <UART_SetConfig+0x2c0>
 800ca1a:	e00f      	b.n	800ca3c <UART_SetConfig+0x2d0>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca22:	e022      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800ca24:	2302      	movs	r3, #2
 800ca26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca2a:	e01e      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800ca2c:	2304      	movs	r3, #4
 800ca2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca32:	e01a      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800ca34:	2308      	movs	r3, #8
 800ca36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca3a:	e016      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800ca3c:	2310      	movs	r3, #16
 800ca3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca42:	e012      	b.n	800ca6a <UART_SetConfig+0x2fe>
 800ca44:	cfff69f3 	.word	0xcfff69f3
 800ca48:	40008000 	.word	0x40008000
 800ca4c:	40013800 	.word	0x40013800
 800ca50:	40021000 	.word	0x40021000
 800ca54:	40004400 	.word	0x40004400
 800ca58:	40004800 	.word	0x40004800
 800ca5c:	40004c00 	.word	0x40004c00
 800ca60:	40005000 	.word	0x40005000
 800ca64:	2310      	movs	r3, #16
 800ca66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4aae      	ldr	r2, [pc, #696]	; (800cd28 <UART_SetConfig+0x5bc>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	f040 8097 	bne.w	800cba4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca7a:	2b08      	cmp	r3, #8
 800ca7c:	d823      	bhi.n	800cac6 <UART_SetConfig+0x35a>
 800ca7e:	a201      	add	r2, pc, #4	; (adr r2, 800ca84 <UART_SetConfig+0x318>)
 800ca80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca84:	0800caa9 	.word	0x0800caa9
 800ca88:	0800cac7 	.word	0x0800cac7
 800ca8c:	0800cab1 	.word	0x0800cab1
 800ca90:	0800cac7 	.word	0x0800cac7
 800ca94:	0800cab7 	.word	0x0800cab7
 800ca98:	0800cac7 	.word	0x0800cac7
 800ca9c:	0800cac7 	.word	0x0800cac7
 800caa0:	0800cac7 	.word	0x0800cac7
 800caa4:	0800cabf 	.word	0x0800cabf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caa8:	f7fd f936 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800caac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800caae:	e010      	b.n	800cad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cab0:	4b9e      	ldr	r3, [pc, #632]	; (800cd2c <UART_SetConfig+0x5c0>)
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cab4:	e00d      	b.n	800cad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cab6:	f7fd f8c1 	bl	8009c3c <HAL_RCC_GetSysClockFreq>
 800caba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cabc:	e009      	b.n	800cad2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cabe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cac4:	e005      	b.n	800cad2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cac6:	2300      	movs	r3, #0
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cad0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8130 	beq.w	800cd3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cade:	4a94      	ldr	r2, [pc, #592]	; (800cd30 <UART_SetConfig+0x5c4>)
 800cae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae4:	461a      	mov	r2, r3
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	fbb3 f3f2 	udiv	r3, r3, r2
 800caec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	685a      	ldr	r2, [r3, #4]
 800caf2:	4613      	mov	r3, r2
 800caf4:	005b      	lsls	r3, r3, #1
 800caf6:	4413      	add	r3, r2
 800caf8:	69ba      	ldr	r2, [r7, #24]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d305      	bcc.n	800cb0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cb04:	69ba      	ldr	r2, [r7, #24]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d903      	bls.n	800cb12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cb10:	e113      	b.n	800cd3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	2200      	movs	r2, #0
 800cb16:	60bb      	str	r3, [r7, #8]
 800cb18:	60fa      	str	r2, [r7, #12]
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1e:	4a84      	ldr	r2, [pc, #528]	; (800cd30 <UART_SetConfig+0x5c4>)
 800cb20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	2200      	movs	r2, #0
 800cb28:	603b      	str	r3, [r7, #0]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cb34:	f7f4 f8d0 	bl	8000cd8 <__aeabi_uldivmod>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	4619      	mov	r1, r3
 800cb40:	f04f 0200 	mov.w	r2, #0
 800cb44:	f04f 0300 	mov.w	r3, #0
 800cb48:	020b      	lsls	r3, r1, #8
 800cb4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb4e:	0202      	lsls	r2, r0, #8
 800cb50:	6979      	ldr	r1, [r7, #20]
 800cb52:	6849      	ldr	r1, [r1, #4]
 800cb54:	0849      	lsrs	r1, r1, #1
 800cb56:	2000      	movs	r0, #0
 800cb58:	460c      	mov	r4, r1
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	eb12 0804 	adds.w	r8, r2, r4
 800cb60:	eb43 0905 	adc.w	r9, r3, r5
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	469a      	mov	sl, r3
 800cb6c:	4693      	mov	fp, r2
 800cb6e:	4652      	mov	r2, sl
 800cb70:	465b      	mov	r3, fp
 800cb72:	4640      	mov	r0, r8
 800cb74:	4649      	mov	r1, r9
 800cb76:	f7f4 f8af 	bl	8000cd8 <__aeabi_uldivmod>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	4613      	mov	r3, r2
 800cb80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb82:	6a3b      	ldr	r3, [r7, #32]
 800cb84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb88:	d308      	bcc.n	800cb9c <UART_SetConfig+0x430>
 800cb8a:	6a3b      	ldr	r3, [r7, #32]
 800cb8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb90:	d204      	bcs.n	800cb9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6a3a      	ldr	r2, [r7, #32]
 800cb98:	60da      	str	r2, [r3, #12]
 800cb9a:	e0ce      	b.n	800cd3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cba2:	e0ca      	b.n	800cd3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	69db      	ldr	r3, [r3, #28]
 800cba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbac:	d166      	bne.n	800cc7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cbae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbb2:	2b08      	cmp	r3, #8
 800cbb4:	d827      	bhi.n	800cc06 <UART_SetConfig+0x49a>
 800cbb6:	a201      	add	r2, pc, #4	; (adr r2, 800cbbc <UART_SetConfig+0x450>)
 800cbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbc:	0800cbe1 	.word	0x0800cbe1
 800cbc0:	0800cbe9 	.word	0x0800cbe9
 800cbc4:	0800cbf1 	.word	0x0800cbf1
 800cbc8:	0800cc07 	.word	0x0800cc07
 800cbcc:	0800cbf7 	.word	0x0800cbf7
 800cbd0:	0800cc07 	.word	0x0800cc07
 800cbd4:	0800cc07 	.word	0x0800cc07
 800cbd8:	0800cc07 	.word	0x0800cc07
 800cbdc:	0800cbff 	.word	0x0800cbff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbe0:	f7fd f89a 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800cbe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbe6:	e014      	b.n	800cc12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbe8:	f7fd f8ac 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800cbec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbee:	e010      	b.n	800cc12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbf0:	4b4e      	ldr	r3, [pc, #312]	; (800cd2c <UART_SetConfig+0x5c0>)
 800cbf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cbf4:	e00d      	b.n	800cc12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbf6:	f7fd f821 	bl	8009c3c <HAL_RCC_GetSysClockFreq>
 800cbfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbfc:	e009      	b.n	800cc12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc04:	e005      	b.n	800cc12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cc06:	2300      	movs	r3, #0
 800cc08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cc10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f000 8090 	beq.w	800cd3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1e:	4a44      	ldr	r2, [pc, #272]	; (800cd30 <UART_SetConfig+0x5c4>)
 800cc20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc24:	461a      	mov	r2, r3
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc2c:	005a      	lsls	r2, r3, #1
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	085b      	lsrs	r3, r3, #1
 800cc34:	441a      	add	r2, r3
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc40:	6a3b      	ldr	r3, [r7, #32]
 800cc42:	2b0f      	cmp	r3, #15
 800cc44:	d916      	bls.n	800cc74 <UART_SetConfig+0x508>
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc4c:	d212      	bcs.n	800cc74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	f023 030f 	bic.w	r3, r3, #15
 800cc56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	085b      	lsrs	r3, r3, #1
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	f003 0307 	and.w	r3, r3, #7
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	8bfb      	ldrh	r3, [r7, #30]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	8bfa      	ldrh	r2, [r7, #30]
 800cc70:	60da      	str	r2, [r3, #12]
 800cc72:	e062      	b.n	800cd3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cc7a:	e05e      	b.n	800cd3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc80:	2b08      	cmp	r3, #8
 800cc82:	d828      	bhi.n	800ccd6 <UART_SetConfig+0x56a>
 800cc84:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <UART_SetConfig+0x520>)
 800cc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8a:	bf00      	nop
 800cc8c:	0800ccb1 	.word	0x0800ccb1
 800cc90:	0800ccb9 	.word	0x0800ccb9
 800cc94:	0800ccc1 	.word	0x0800ccc1
 800cc98:	0800ccd7 	.word	0x0800ccd7
 800cc9c:	0800ccc7 	.word	0x0800ccc7
 800cca0:	0800ccd7 	.word	0x0800ccd7
 800cca4:	0800ccd7 	.word	0x0800ccd7
 800cca8:	0800ccd7 	.word	0x0800ccd7
 800ccac:	0800cccf 	.word	0x0800cccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ccb0:	f7fd f832 	bl	8009d18 <HAL_RCC_GetPCLK1Freq>
 800ccb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccb6:	e014      	b.n	800cce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ccb8:	f7fd f844 	bl	8009d44 <HAL_RCC_GetPCLK2Freq>
 800ccbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ccbe:	e010      	b.n	800cce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	; (800cd2c <UART_SetConfig+0x5c0>)
 800ccc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ccc4:	e00d      	b.n	800cce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ccc6:	f7fc ffb9 	bl	8009c3c <HAL_RCC_GetSysClockFreq>
 800ccca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cccc:	e009      	b.n	800cce2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ccd4:	e005      	b.n	800cce2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cce0:	bf00      	nop
    }

    if (pclk != 0U)
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d028      	beq.n	800cd3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccec:	4a10      	ldr	r2, [pc, #64]	; (800cd30 <UART_SetConfig+0x5c4>)
 800ccee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	085b      	lsrs	r3, r3, #1
 800cd00:	441a      	add	r2, r3
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	2b0f      	cmp	r3, #15
 800cd10:	d910      	bls.n	800cd34 <UART_SetConfig+0x5c8>
 800cd12:	6a3b      	ldr	r3, [r7, #32]
 800cd14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd18:	d20c      	bcs.n	800cd34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	60da      	str	r2, [r3, #12]
 800cd24:	e009      	b.n	800cd3a <UART_SetConfig+0x5ce>
 800cd26:	bf00      	nop
 800cd28:	40008000 	.word	0x40008000
 800cd2c:	00f42400 	.word	0x00f42400
 800cd30:	08011618 	.word	0x08011618
      }
      else
      {
        ret = HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2200      	movs	r2, #0
 800cd54:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cd56:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3730      	adds	r7, #48	; 0x30
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cd64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00a      	beq.n	800cd8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	430a      	orrs	r2, r1
 800cd8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd92:	f003 0302 	and.w	r3, r3, #2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	430a      	orrs	r2, r1
 800cdae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb4:	f003 0304 	and.w	r3, r3, #4
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00a      	beq.n	800cdd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	430a      	orrs	r2, r1
 800cdd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd6:	f003 0308 	and.w	r3, r3, #8
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00a      	beq.n	800cdf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	430a      	orrs	r2, r1
 800cdf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf8:	f003 0310 	and.w	r3, r3, #16
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00a      	beq.n	800ce16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	430a      	orrs	r2, r1
 800ce14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1a:	f003 0320 	and.w	r3, r3, #32
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d01a      	beq.n	800ce7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	430a      	orrs	r2, r1
 800ce58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce62:	d10a      	bne.n	800ce7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00a      	beq.n	800ce9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	430a      	orrs	r2, r1
 800ce9a:	605a      	str	r2, [r3, #4]
  }
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af02      	add	r7, sp, #8
 800ceae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ceb8:	f7f6 f81c 	bl	8002ef4 <HAL_GetTick>
 800cebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f003 0308 	and.w	r3, r3, #8
 800cec8:	2b08      	cmp	r3, #8
 800ceca:	d10e      	bne.n	800ceea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f82f 	bl	800cf3e <UART_WaitOnFlagUntilTimeout>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d001      	beq.n	800ceea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cee6:	2303      	movs	r3, #3
 800cee8:	e025      	b.n	800cf36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f003 0304 	and.w	r3, r3, #4
 800cef4:	2b04      	cmp	r3, #4
 800cef6:	d10e      	bne.n	800cf16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f819 	bl	800cf3e <UART_WaitOnFlagUntilTimeout>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e00f      	b.n	800cf36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2220      	movs	r2, #32
 800cf1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2220      	movs	r2, #32
 800cf22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b09c      	sub	sp, #112	; 0x70
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	60f8      	str	r0, [r7, #12]
 800cf46:	60b9      	str	r1, [r7, #8]
 800cf48:	603b      	str	r3, [r7, #0]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf4e:	e0a9      	b.n	800d0a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf56:	f000 80a5 	beq.w	800d0a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf5a:	f7f5 ffcb 	bl	8002ef4 <HAL_GetTick>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d302      	bcc.n	800cf70 <UART_WaitOnFlagUntilTimeout+0x32>
 800cf6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d140      	bne.n	800cff2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf78:	e853 3f00 	ldrex	r3, [r3]
 800cf7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf84:	667b      	str	r3, [r7, #100]	; 0x64
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf96:	e841 2300 	strex	r3, r2, [r1]
 800cf9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cf9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1e6      	bne.n	800cf70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3308      	adds	r3, #8
 800cfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	f023 0301 	bic.w	r3, r3, #1
 800cfb8:	663b      	str	r3, [r7, #96]	; 0x60
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfc2:	64ba      	str	r2, [r7, #72]	; 0x48
 800cfc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e5      	bne.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2220      	movs	r2, #32
 800cfe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cfee:	2303      	movs	r3, #3
 800cff0:	e069      	b.n	800d0c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 0304 	and.w	r3, r3, #4
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d051      	beq.n	800d0a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d00a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d00e:	d149      	bne.n	800d0a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d018:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	e853 3f00 	ldrex	r3, [r3]
 800d026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d02e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	461a      	mov	r2, r3
 800d036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d038:	637b      	str	r3, [r7, #52]	; 0x34
 800d03a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d03e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d040:	e841 2300 	strex	r3, r2, [r1]
 800d044:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1e6      	bne.n	800d01a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	3308      	adds	r3, #8
 800d052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	e853 3f00 	ldrex	r3, [r3]
 800d05a:	613b      	str	r3, [r7, #16]
   return(result);
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	f023 0301 	bic.w	r3, r3, #1
 800d062:	66bb      	str	r3, [r7, #104]	; 0x68
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3308      	adds	r3, #8
 800d06a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d06c:	623a      	str	r2, [r7, #32]
 800d06e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d070:	69f9      	ldr	r1, [r7, #28]
 800d072:	6a3a      	ldr	r2, [r7, #32]
 800d074:	e841 2300 	strex	r3, r2, [r1]
 800d078:	61bb      	str	r3, [r7, #24]
   return(result);
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1e5      	bne.n	800d04c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2220      	movs	r2, #32
 800d084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2220      	movs	r2, #32
 800d08c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2220      	movs	r2, #32
 800d094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d0a0:	2303      	movs	r3, #3
 800d0a2:	e010      	b.n	800d0c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	69da      	ldr	r2, [r3, #28]
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	4013      	ands	r3, r2
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	bf0c      	ite	eq
 800d0b4:	2301      	moveq	r3, #1
 800d0b6:	2300      	movne	r3, #0
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	f43f af46 	beq.w	800cf50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0c4:	2300      	movs	r3, #0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3770      	adds	r7, #112	; 0x70
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
	...

0800d0d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b096      	sub	sp, #88	; 0x58
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	88fa      	ldrh	r2, [r7, #6]
 800d0e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2222      	movs	r2, #34	; 0x22
 800d0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d100:	2b00      	cmp	r3, #0
 800d102:	d02c      	beq.n	800d15e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d108:	4a42      	ldr	r2, [pc, #264]	; (800d214 <UART_Start_Receive_DMA+0x144>)
 800d10a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d110:	4a41      	ldr	r2, [pc, #260]	; (800d218 <UART_Start_Receive_DMA+0x148>)
 800d112:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d118:	4a40      	ldr	r2, [pc, #256]	; (800d21c <UART_Start_Receive_DMA+0x14c>)
 800d11a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d120:	2200      	movs	r2, #0
 800d122:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	3324      	adds	r3, #36	; 0x24
 800d12e:	4619      	mov	r1, r3
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d134:	461a      	mov	r2, r3
 800d136:	88fb      	ldrh	r3, [r7, #6]
 800d138:	f7fa fd8e 	bl	8007c58 <HAL_DMA_Start_IT>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00d      	beq.n	800d15e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2210      	movs	r2, #16
 800d146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2220      	movs	r2, #32
 800d156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e055      	b.n	800d20a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2200      	movs	r2, #0
 800d162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d018      	beq.n	800d1a0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d176:	e853 3f00 	ldrex	r3, [r3]
 800d17a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d182:	657b      	str	r3, [r7, #84]	; 0x54
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	461a      	mov	r2, r3
 800d18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d18c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d18e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d190:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d194:	e841 2300 	strex	r3, r2, [r1]
 800d198:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d19a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1e6      	bne.n	800d16e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3308      	adds	r3, #8
 800d1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	e853 3f00 	ldrex	r3, [r3]
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	f043 0301 	orr.w	r3, r3, #1
 800d1b6:	653b      	str	r3, [r7, #80]	; 0x50
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3308      	adds	r3, #8
 800d1be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1c0:	637a      	str	r2, [r7, #52]	; 0x34
 800d1c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1c8:	e841 2300 	strex	r3, r2, [r1]
 800d1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1e5      	bne.n	800d1a0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3308      	adds	r3, #8
 800d1da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	e853 3f00 	ldrex	r3, [r3]
 800d1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	3308      	adds	r3, #8
 800d1f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1f4:	623a      	str	r2, [r7, #32]
 800d1f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f8:	69f9      	ldr	r1, [r7, #28]
 800d1fa:	6a3a      	ldr	r2, [r7, #32]
 800d1fc:	e841 2300 	strex	r3, r2, [r1]
 800d200:	61bb      	str	r3, [r7, #24]
   return(result);
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1e5      	bne.n	800d1d4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d208:	2300      	movs	r3, #0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3758      	adds	r7, #88	; 0x58
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	0800d36f 	.word	0x0800d36f
 800d218:	0800d495 	.word	0x0800d495
 800d21c:	0800d4cd 	.word	0x0800d4cd

0800d220 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d220:	b480      	push	{r7}
 800d222:	b08f      	sub	sp, #60	; 0x3c
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	e853 3f00 	ldrex	r3, [r3]
 800d234:	61fb      	str	r3, [r7, #28]
   return(result);
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d23c:	637b      	str	r3, [r7, #52]	; 0x34
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	461a      	mov	r2, r3
 800d244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d246:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d248:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d24c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d24e:	e841 2300 	strex	r3, r2, [r1]
 800d252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1e6      	bne.n	800d228 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3308      	adds	r3, #8
 800d260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	e853 3f00 	ldrex	r3, [r3]
 800d268:	60bb      	str	r3, [r7, #8]
   return(result);
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d270:	633b      	str	r3, [r7, #48]	; 0x30
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	3308      	adds	r3, #8
 800d278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d27a:	61ba      	str	r2, [r7, #24]
 800d27c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27e:	6979      	ldr	r1, [r7, #20]
 800d280:	69ba      	ldr	r2, [r7, #24]
 800d282:	e841 2300 	strex	r3, r2, [r1]
 800d286:	613b      	str	r3, [r7, #16]
   return(result);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1e5      	bne.n	800d25a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2220      	movs	r2, #32
 800d292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d296:	bf00      	nop
 800d298:	373c      	adds	r7, #60	; 0x3c
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b095      	sub	sp, #84	; 0x54
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2b2:	e853 3f00 	ldrex	r3, [r3]
 800d2b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c8:	643b      	str	r3, [r7, #64]	; 0x40
 800d2ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d2ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d2d0:	e841 2300 	strex	r3, r2, [r1]
 800d2d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1e6      	bne.n	800d2aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e4:	6a3b      	ldr	r3, [r7, #32]
 800d2e6:	e853 3f00 	ldrex	r3, [r3]
 800d2ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2f2:	f023 0301 	bic.w	r3, r3, #1
 800d2f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d300:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d308:	e841 2300 	strex	r3, r2, [r1]
 800d30c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1e3      	bne.n	800d2dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d118      	bne.n	800d34e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	e853 3f00 	ldrex	r3, [r3]
 800d328:	60bb      	str	r3, [r7, #8]
   return(result);
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	f023 0310 	bic.w	r3, r3, #16
 800d330:	647b      	str	r3, [r7, #68]	; 0x44
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d33a:	61bb      	str	r3, [r7, #24]
 800d33c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33e:	6979      	ldr	r1, [r7, #20]
 800d340:	69ba      	ldr	r2, [r7, #24]
 800d342:	e841 2300 	strex	r3, r2, [r1]
 800d346:	613b      	str	r3, [r7, #16]
   return(result);
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1e6      	bne.n	800d31c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2220      	movs	r2, #32
 800d352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d362:	bf00      	nop
 800d364:	3754      	adds	r7, #84	; 0x54
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr

0800d36e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b09c      	sub	sp, #112	; 0x70
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 0320 	and.w	r3, r3, #32
 800d386:	2b00      	cmp	r3, #0
 800d388:	d171      	bne.n	800d46e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d38c:	2200      	movs	r2, #0
 800d38e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d39a:	e853 3f00 	ldrex	r3, [r3]
 800d39e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800d3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3b8:	e841 2300 	strex	r3, r2, [r1]
 800d3bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1e6      	bne.n	800d392 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	e853 3f00 	ldrex	r3, [r3]
 800d3d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d6:	f023 0301 	bic.w	r3, r3, #1
 800d3da:	667b      	str	r3, [r7, #100]	; 0x64
 800d3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3e4:	647a      	str	r2, [r7, #68]	; 0x44
 800d3e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d3ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e5      	bne.n	800d3c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	623b      	str	r3, [r7, #32]
   return(result);
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d40e:	663b      	str	r3, [r7, #96]	; 0x60
 800d410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3308      	adds	r3, #8
 800d416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d418:	633a      	str	r2, [r7, #48]	; 0x30
 800d41a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d420:	e841 2300 	strex	r3, r2, [r1]
 800d424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e5      	bne.n	800d3f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d42e:	2220      	movs	r2, #32
 800d430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d118      	bne.n	800d46e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	e853 3f00 	ldrex	r3, [r3]
 800d448:	60fb      	str	r3, [r7, #12]
   return(result);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f023 0310 	bic.w	r3, r3, #16
 800d450:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	461a      	mov	r2, r3
 800d458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d45a:	61fb      	str	r3, [r7, #28]
 800d45c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45e:	69b9      	ldr	r1, [r7, #24]
 800d460:	69fa      	ldr	r2, [r7, #28]
 800d462:	e841 2300 	strex	r3, r2, [r1]
 800d466:	617b      	str	r3, [r7, #20]
   return(result);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1e6      	bne.n	800d43c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d472:	2b01      	cmp	r3, #1
 800d474:	d107      	bne.n	800d486 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d47c:	4619      	mov	r1, r3
 800d47e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d480:	f7ff f968 	bl	800c754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d484:	e002      	b.n	800d48c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d486:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d488:	f7f7 fe32 	bl	80050f0 <HAL_UART_RxCpltCallback>
}
 800d48c:	bf00      	nop
 800d48e:	3770      	adds	r7, #112	; 0x70
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d109      	bne.n	800d4be <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4b0:	085b      	lsrs	r3, r3, #1
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f7ff f94c 	bl	800c754 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4bc:	e002      	b.n	800d4c4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f7ff f934 	bl	800c72c <HAL_UART_RxHalfCpltCallback>
}
 800d4c4:	bf00      	nop
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4f4:	2b80      	cmp	r3, #128	; 0x80
 800d4f6:	d109      	bne.n	800d50c <UART_DMAError+0x40>
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2b21      	cmp	r3, #33	; 0x21
 800d4fc:	d106      	bne.n	800d50c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2200      	movs	r2, #0
 800d502:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d506:	6978      	ldr	r0, [r7, #20]
 800d508:	f7ff fe8a 	bl	800d220 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d516:	2b40      	cmp	r3, #64	; 0x40
 800d518:	d109      	bne.n	800d52e <UART_DMAError+0x62>
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2b22      	cmp	r3, #34	; 0x22
 800d51e:	d106      	bne.n	800d52e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	2200      	movs	r2, #0
 800d524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d528:	6978      	ldr	r0, [r7, #20]
 800d52a:	f7ff feba 	bl	800d2a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d534:	f043 0210 	orr.w	r2, r3, #16
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d53e:	6978      	ldr	r0, [r7, #20]
 800d540:	f7ff f8fe 	bl	800c740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d544:	bf00      	nop
 800d546:	3718      	adds	r7, #24
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f7ff f8e8 	bl	800c740 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d570:	bf00      	nop
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b088      	sub	sp, #32
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	e853 3f00 	ldrex	r3, [r3]
 800d58c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d594:	61fb      	str	r3, [r7, #28]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	461a      	mov	r2, r3
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	61bb      	str	r3, [r7, #24]
 800d5a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a2:	6979      	ldr	r1, [r7, #20]
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	e841 2300 	strex	r3, r2, [r1]
 800d5aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1e6      	bne.n	800d580 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2220      	movs	r2, #32
 800d5b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7ff f8a9 	bl	800c718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5c6:	bf00      	nop
 800d5c8:	3720      	adds	r7, #32
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d5d6:	bf00      	nop
 800d5d8:	370c      	adds	r7, #12
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b083      	sub	sp, #12
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d5ea:	bf00      	nop
 800d5ec:	370c      	adds	r7, #12
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr

0800d5f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d5fe:	bf00      	nop
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b085      	sub	sp, #20
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d101      	bne.n	800d620 <HAL_UARTEx_DisableFifoMode+0x16>
 800d61c:	2302      	movs	r3, #2
 800d61e:	e027      	b.n	800d670 <HAL_UARTEx_DisableFifoMode+0x66>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2224      	movs	r2, #36	; 0x24
 800d62c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f022 0201 	bic.w	r2, r2, #1
 800d646:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d64e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2220      	movs	r2, #32
 800d662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3714      	adds	r7, #20
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d101      	bne.n	800d694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d690:	2302      	movs	r3, #2
 800d692:	e02d      	b.n	800d6f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2224      	movs	r2, #36	; 0x24
 800d6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f022 0201 	bic.w	r2, r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f84f 	bl	800d774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2220      	movs	r2, #32
 800d6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d101      	bne.n	800d710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d70c:	2302      	movs	r3, #2
 800d70e:	e02d      	b.n	800d76c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2224      	movs	r2, #36	; 0x24
 800d71c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f022 0201 	bic.w	r2, r2, #1
 800d736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	430a      	orrs	r2, r1
 800d74a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 f811 	bl	800d774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2220      	movs	r2, #32
 800d75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d780:	2b00      	cmp	r3, #0
 800d782:	d108      	bne.n	800d796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d794:	e031      	b.n	800d7fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d796:	2308      	movs	r3, #8
 800d798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d79a:	2308      	movs	r3, #8
 800d79c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	0e5b      	lsrs	r3, r3, #25
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	f003 0307 	and.w	r3, r3, #7
 800d7ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	0f5b      	lsrs	r3, r3, #29
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f003 0307 	and.w	r3, r3, #7
 800d7bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7be:	7bbb      	ldrb	r3, [r7, #14]
 800d7c0:	7b3a      	ldrb	r2, [r7, #12]
 800d7c2:	4911      	ldr	r1, [pc, #68]	; (800d808 <UARTEx_SetNbDataToProcess+0x94>)
 800d7c4:	5c8a      	ldrb	r2, [r1, r2]
 800d7c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d7ca:	7b3a      	ldrb	r2, [r7, #12]
 800d7cc:	490f      	ldr	r1, [pc, #60]	; (800d80c <UARTEx_SetNbDataToProcess+0x98>)
 800d7ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	7b7a      	ldrb	r2, [r7, #13]
 800d7e0:	4909      	ldr	r1, [pc, #36]	; (800d808 <UARTEx_SetNbDataToProcess+0x94>)
 800d7e2:	5c8a      	ldrb	r2, [r1, r2]
 800d7e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d7e8:	7b7a      	ldrb	r2, [r7, #13]
 800d7ea:	4908      	ldr	r1, [pc, #32]	; (800d80c <UARTEx_SetNbDataToProcess+0x98>)
 800d7ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d7fa:	bf00      	nop
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	08011630 	.word	0x08011630
 800d80c:	08011638 	.word	0x08011638

0800d810 <__cvt>:
 800d810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d814:	ec55 4b10 	vmov	r4, r5, d0
 800d818:	2d00      	cmp	r5, #0
 800d81a:	460e      	mov	r6, r1
 800d81c:	4619      	mov	r1, r3
 800d81e:	462b      	mov	r3, r5
 800d820:	bfbb      	ittet	lt
 800d822:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d826:	461d      	movlt	r5, r3
 800d828:	2300      	movge	r3, #0
 800d82a:	232d      	movlt	r3, #45	; 0x2d
 800d82c:	700b      	strb	r3, [r1, #0]
 800d82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d830:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d834:	4691      	mov	r9, r2
 800d836:	f023 0820 	bic.w	r8, r3, #32
 800d83a:	bfbc      	itt	lt
 800d83c:	4622      	movlt	r2, r4
 800d83e:	4614      	movlt	r4, r2
 800d840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d844:	d005      	beq.n	800d852 <__cvt+0x42>
 800d846:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d84a:	d100      	bne.n	800d84e <__cvt+0x3e>
 800d84c:	3601      	adds	r6, #1
 800d84e:	2102      	movs	r1, #2
 800d850:	e000      	b.n	800d854 <__cvt+0x44>
 800d852:	2103      	movs	r1, #3
 800d854:	ab03      	add	r3, sp, #12
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	ab02      	add	r3, sp, #8
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	ec45 4b10 	vmov	d0, r4, r5
 800d860:	4653      	mov	r3, sl
 800d862:	4632      	mov	r2, r6
 800d864:	f000 ffec 	bl	800e840 <_dtoa_r>
 800d868:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d86c:	4607      	mov	r7, r0
 800d86e:	d102      	bne.n	800d876 <__cvt+0x66>
 800d870:	f019 0f01 	tst.w	r9, #1
 800d874:	d022      	beq.n	800d8bc <__cvt+0xac>
 800d876:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d87a:	eb07 0906 	add.w	r9, r7, r6
 800d87e:	d110      	bne.n	800d8a2 <__cvt+0x92>
 800d880:	783b      	ldrb	r3, [r7, #0]
 800d882:	2b30      	cmp	r3, #48	; 0x30
 800d884:	d10a      	bne.n	800d89c <__cvt+0x8c>
 800d886:	2200      	movs	r2, #0
 800d888:	2300      	movs	r3, #0
 800d88a:	4620      	mov	r0, r4
 800d88c:	4629      	mov	r1, r5
 800d88e:	f7f3 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800d892:	b918      	cbnz	r0, 800d89c <__cvt+0x8c>
 800d894:	f1c6 0601 	rsb	r6, r6, #1
 800d898:	f8ca 6000 	str.w	r6, [sl]
 800d89c:	f8da 3000 	ldr.w	r3, [sl]
 800d8a0:	4499      	add	r9, r3
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f3 f935 	bl	8000b18 <__aeabi_dcmpeq>
 800d8ae:	b108      	cbz	r0, 800d8b4 <__cvt+0xa4>
 800d8b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d8b4:	2230      	movs	r2, #48	; 0x30
 800d8b6:	9b03      	ldr	r3, [sp, #12]
 800d8b8:	454b      	cmp	r3, r9
 800d8ba:	d307      	bcc.n	800d8cc <__cvt+0xbc>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8c0:	1bdb      	subs	r3, r3, r7
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	6013      	str	r3, [r2, #0]
 800d8c6:	b004      	add	sp, #16
 800d8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8cc:	1c59      	adds	r1, r3, #1
 800d8ce:	9103      	str	r1, [sp, #12]
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	e7f0      	b.n	800d8b6 <__cvt+0xa6>

0800d8d4 <__exponent>:
 800d8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2900      	cmp	r1, #0
 800d8da:	bfb8      	it	lt
 800d8dc:	4249      	neglt	r1, r1
 800d8de:	f803 2b02 	strb.w	r2, [r3], #2
 800d8e2:	bfb4      	ite	lt
 800d8e4:	222d      	movlt	r2, #45	; 0x2d
 800d8e6:	222b      	movge	r2, #43	; 0x2b
 800d8e8:	2909      	cmp	r1, #9
 800d8ea:	7042      	strb	r2, [r0, #1]
 800d8ec:	dd2a      	ble.n	800d944 <__exponent+0x70>
 800d8ee:	f10d 0207 	add.w	r2, sp, #7
 800d8f2:	4617      	mov	r7, r2
 800d8f4:	260a      	movs	r6, #10
 800d8f6:	4694      	mov	ip, r2
 800d8f8:	fb91 f5f6 	sdiv	r5, r1, r6
 800d8fc:	fb06 1415 	mls	r4, r6, r5, r1
 800d900:	3430      	adds	r4, #48	; 0x30
 800d902:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d906:	460c      	mov	r4, r1
 800d908:	2c63      	cmp	r4, #99	; 0x63
 800d90a:	f102 32ff 	add.w	r2, r2, #4294967295
 800d90e:	4629      	mov	r1, r5
 800d910:	dcf1      	bgt.n	800d8f6 <__exponent+0x22>
 800d912:	3130      	adds	r1, #48	; 0x30
 800d914:	f1ac 0402 	sub.w	r4, ip, #2
 800d918:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d91c:	1c41      	adds	r1, r0, #1
 800d91e:	4622      	mov	r2, r4
 800d920:	42ba      	cmp	r2, r7
 800d922:	d30a      	bcc.n	800d93a <__exponent+0x66>
 800d924:	f10d 0209 	add.w	r2, sp, #9
 800d928:	eba2 020c 	sub.w	r2, r2, ip
 800d92c:	42bc      	cmp	r4, r7
 800d92e:	bf88      	it	hi
 800d930:	2200      	movhi	r2, #0
 800d932:	4413      	add	r3, r2
 800d934:	1a18      	subs	r0, r3, r0
 800d936:	b003      	add	sp, #12
 800d938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d93a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d93e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d942:	e7ed      	b.n	800d920 <__exponent+0x4c>
 800d944:	2330      	movs	r3, #48	; 0x30
 800d946:	3130      	adds	r1, #48	; 0x30
 800d948:	7083      	strb	r3, [r0, #2]
 800d94a:	70c1      	strb	r1, [r0, #3]
 800d94c:	1d03      	adds	r3, r0, #4
 800d94e:	e7f1      	b.n	800d934 <__exponent+0x60>

0800d950 <_printf_float>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	ed2d 8b02 	vpush	{d8}
 800d958:	b08d      	sub	sp, #52	; 0x34
 800d95a:	460c      	mov	r4, r1
 800d95c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d960:	4616      	mov	r6, r2
 800d962:	461f      	mov	r7, r3
 800d964:	4605      	mov	r5, r0
 800d966:	f000 fe6d 	bl	800e644 <_localeconv_r>
 800d96a:	f8d0 a000 	ldr.w	sl, [r0]
 800d96e:	4650      	mov	r0, sl
 800d970:	f7f2 fca6 	bl	80002c0 <strlen>
 800d974:	2300      	movs	r3, #0
 800d976:	930a      	str	r3, [sp, #40]	; 0x28
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	9305      	str	r3, [sp, #20]
 800d97c:	f8d8 3000 	ldr.w	r3, [r8]
 800d980:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d984:	3307      	adds	r3, #7
 800d986:	f023 0307 	bic.w	r3, r3, #7
 800d98a:	f103 0208 	add.w	r2, r3, #8
 800d98e:	f8c8 2000 	str.w	r2, [r8]
 800d992:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d996:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d99a:	9307      	str	r3, [sp, #28]
 800d99c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d9a0:	ee08 0a10 	vmov	s16, r0
 800d9a4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9ac:	4b9e      	ldr	r3, [pc, #632]	; (800dc28 <_printf_float+0x2d8>)
 800d9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b2:	f7f3 f8e3 	bl	8000b7c <__aeabi_dcmpun>
 800d9b6:	bb88      	cbnz	r0, 800da1c <_printf_float+0xcc>
 800d9b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9bc:	4b9a      	ldr	r3, [pc, #616]	; (800dc28 <_printf_float+0x2d8>)
 800d9be:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c2:	f7f3 f8bd 	bl	8000b40 <__aeabi_dcmple>
 800d9c6:	bb48      	cbnz	r0, 800da1c <_printf_float+0xcc>
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	4649      	mov	r1, r9
 800d9d0:	f7f3 f8ac 	bl	8000b2c <__aeabi_dcmplt>
 800d9d4:	b110      	cbz	r0, 800d9dc <_printf_float+0x8c>
 800d9d6:	232d      	movs	r3, #45	; 0x2d
 800d9d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9dc:	4a93      	ldr	r2, [pc, #588]	; (800dc2c <_printf_float+0x2dc>)
 800d9de:	4b94      	ldr	r3, [pc, #592]	; (800dc30 <_printf_float+0x2e0>)
 800d9e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d9e4:	bf94      	ite	ls
 800d9e6:	4690      	movls	r8, r2
 800d9e8:	4698      	movhi	r8, r3
 800d9ea:	2303      	movs	r3, #3
 800d9ec:	6123      	str	r3, [r4, #16]
 800d9ee:	9b05      	ldr	r3, [sp, #20]
 800d9f0:	f023 0304 	bic.w	r3, r3, #4
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	f04f 0900 	mov.w	r9, #0
 800d9fa:	9700      	str	r7, [sp, #0]
 800d9fc:	4633      	mov	r3, r6
 800d9fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800da00:	4621      	mov	r1, r4
 800da02:	4628      	mov	r0, r5
 800da04:	f000 f9da 	bl	800ddbc <_printf_common>
 800da08:	3001      	adds	r0, #1
 800da0a:	f040 8090 	bne.w	800db2e <_printf_float+0x1de>
 800da0e:	f04f 30ff 	mov.w	r0, #4294967295
 800da12:	b00d      	add	sp, #52	; 0x34
 800da14:	ecbd 8b02 	vpop	{d8}
 800da18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1c:	4642      	mov	r2, r8
 800da1e:	464b      	mov	r3, r9
 800da20:	4640      	mov	r0, r8
 800da22:	4649      	mov	r1, r9
 800da24:	f7f3 f8aa 	bl	8000b7c <__aeabi_dcmpun>
 800da28:	b140      	cbz	r0, 800da3c <_printf_float+0xec>
 800da2a:	464b      	mov	r3, r9
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	bfbc      	itt	lt
 800da30:	232d      	movlt	r3, #45	; 0x2d
 800da32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800da36:	4a7f      	ldr	r2, [pc, #508]	; (800dc34 <_printf_float+0x2e4>)
 800da38:	4b7f      	ldr	r3, [pc, #508]	; (800dc38 <_printf_float+0x2e8>)
 800da3a:	e7d1      	b.n	800d9e0 <_printf_float+0x90>
 800da3c:	6863      	ldr	r3, [r4, #4]
 800da3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800da42:	9206      	str	r2, [sp, #24]
 800da44:	1c5a      	adds	r2, r3, #1
 800da46:	d13f      	bne.n	800dac8 <_printf_float+0x178>
 800da48:	2306      	movs	r3, #6
 800da4a:	6063      	str	r3, [r4, #4]
 800da4c:	9b05      	ldr	r3, [sp, #20]
 800da4e:	6861      	ldr	r1, [r4, #4]
 800da50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800da54:	2300      	movs	r3, #0
 800da56:	9303      	str	r3, [sp, #12]
 800da58:	ab0a      	add	r3, sp, #40	; 0x28
 800da5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800da5e:	ab09      	add	r3, sp, #36	; 0x24
 800da60:	ec49 8b10 	vmov	d0, r8, r9
 800da64:	9300      	str	r3, [sp, #0]
 800da66:	6022      	str	r2, [r4, #0]
 800da68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800da6c:	4628      	mov	r0, r5
 800da6e:	f7ff fecf 	bl	800d810 <__cvt>
 800da72:	9b06      	ldr	r3, [sp, #24]
 800da74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da76:	2b47      	cmp	r3, #71	; 0x47
 800da78:	4680      	mov	r8, r0
 800da7a:	d108      	bne.n	800da8e <_printf_float+0x13e>
 800da7c:	1cc8      	adds	r0, r1, #3
 800da7e:	db02      	blt.n	800da86 <_printf_float+0x136>
 800da80:	6863      	ldr	r3, [r4, #4]
 800da82:	4299      	cmp	r1, r3
 800da84:	dd41      	ble.n	800db0a <_printf_float+0x1ba>
 800da86:	f1ab 0302 	sub.w	r3, fp, #2
 800da8a:	fa5f fb83 	uxtb.w	fp, r3
 800da8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800da92:	d820      	bhi.n	800dad6 <_printf_float+0x186>
 800da94:	3901      	subs	r1, #1
 800da96:	465a      	mov	r2, fp
 800da98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da9c:	9109      	str	r1, [sp, #36]	; 0x24
 800da9e:	f7ff ff19 	bl	800d8d4 <__exponent>
 800daa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800daa4:	1813      	adds	r3, r2, r0
 800daa6:	2a01      	cmp	r2, #1
 800daa8:	4681      	mov	r9, r0
 800daaa:	6123      	str	r3, [r4, #16]
 800daac:	dc02      	bgt.n	800dab4 <_printf_float+0x164>
 800daae:	6822      	ldr	r2, [r4, #0]
 800dab0:	07d2      	lsls	r2, r2, #31
 800dab2:	d501      	bpl.n	800dab8 <_printf_float+0x168>
 800dab4:	3301      	adds	r3, #1
 800dab6:	6123      	str	r3, [r4, #16]
 800dab8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d09c      	beq.n	800d9fa <_printf_float+0xaa>
 800dac0:	232d      	movs	r3, #45	; 0x2d
 800dac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dac6:	e798      	b.n	800d9fa <_printf_float+0xaa>
 800dac8:	9a06      	ldr	r2, [sp, #24]
 800daca:	2a47      	cmp	r2, #71	; 0x47
 800dacc:	d1be      	bne.n	800da4c <_printf_float+0xfc>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1bc      	bne.n	800da4c <_printf_float+0xfc>
 800dad2:	2301      	movs	r3, #1
 800dad4:	e7b9      	b.n	800da4a <_printf_float+0xfa>
 800dad6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dada:	d118      	bne.n	800db0e <_printf_float+0x1be>
 800dadc:	2900      	cmp	r1, #0
 800dade:	6863      	ldr	r3, [r4, #4]
 800dae0:	dd0b      	ble.n	800dafa <_printf_float+0x1aa>
 800dae2:	6121      	str	r1, [r4, #16]
 800dae4:	b913      	cbnz	r3, 800daec <_printf_float+0x19c>
 800dae6:	6822      	ldr	r2, [r4, #0]
 800dae8:	07d0      	lsls	r0, r2, #31
 800daea:	d502      	bpl.n	800daf2 <_printf_float+0x1a2>
 800daec:	3301      	adds	r3, #1
 800daee:	440b      	add	r3, r1
 800daf0:	6123      	str	r3, [r4, #16]
 800daf2:	65a1      	str	r1, [r4, #88]	; 0x58
 800daf4:	f04f 0900 	mov.w	r9, #0
 800daf8:	e7de      	b.n	800dab8 <_printf_float+0x168>
 800dafa:	b913      	cbnz	r3, 800db02 <_printf_float+0x1b2>
 800dafc:	6822      	ldr	r2, [r4, #0]
 800dafe:	07d2      	lsls	r2, r2, #31
 800db00:	d501      	bpl.n	800db06 <_printf_float+0x1b6>
 800db02:	3302      	adds	r3, #2
 800db04:	e7f4      	b.n	800daf0 <_printf_float+0x1a0>
 800db06:	2301      	movs	r3, #1
 800db08:	e7f2      	b.n	800daf0 <_printf_float+0x1a0>
 800db0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800db0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db10:	4299      	cmp	r1, r3
 800db12:	db05      	blt.n	800db20 <_printf_float+0x1d0>
 800db14:	6823      	ldr	r3, [r4, #0]
 800db16:	6121      	str	r1, [r4, #16]
 800db18:	07d8      	lsls	r0, r3, #31
 800db1a:	d5ea      	bpl.n	800daf2 <_printf_float+0x1a2>
 800db1c:	1c4b      	adds	r3, r1, #1
 800db1e:	e7e7      	b.n	800daf0 <_printf_float+0x1a0>
 800db20:	2900      	cmp	r1, #0
 800db22:	bfd4      	ite	le
 800db24:	f1c1 0202 	rsble	r2, r1, #2
 800db28:	2201      	movgt	r2, #1
 800db2a:	4413      	add	r3, r2
 800db2c:	e7e0      	b.n	800daf0 <_printf_float+0x1a0>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	055a      	lsls	r2, r3, #21
 800db32:	d407      	bmi.n	800db44 <_printf_float+0x1f4>
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	4642      	mov	r2, r8
 800db38:	4631      	mov	r1, r6
 800db3a:	4628      	mov	r0, r5
 800db3c:	47b8      	blx	r7
 800db3e:	3001      	adds	r0, #1
 800db40:	d12c      	bne.n	800db9c <_printf_float+0x24c>
 800db42:	e764      	b.n	800da0e <_printf_float+0xbe>
 800db44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800db48:	f240 80e0 	bls.w	800dd0c <_printf_float+0x3bc>
 800db4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800db50:	2200      	movs	r2, #0
 800db52:	2300      	movs	r3, #0
 800db54:	f7f2 ffe0 	bl	8000b18 <__aeabi_dcmpeq>
 800db58:	2800      	cmp	r0, #0
 800db5a:	d034      	beq.n	800dbc6 <_printf_float+0x276>
 800db5c:	4a37      	ldr	r2, [pc, #220]	; (800dc3c <_printf_float+0x2ec>)
 800db5e:	2301      	movs	r3, #1
 800db60:	4631      	mov	r1, r6
 800db62:	4628      	mov	r0, r5
 800db64:	47b8      	blx	r7
 800db66:	3001      	adds	r0, #1
 800db68:	f43f af51 	beq.w	800da0e <_printf_float+0xbe>
 800db6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db70:	429a      	cmp	r2, r3
 800db72:	db02      	blt.n	800db7a <_printf_float+0x22a>
 800db74:	6823      	ldr	r3, [r4, #0]
 800db76:	07d8      	lsls	r0, r3, #31
 800db78:	d510      	bpl.n	800db9c <_printf_float+0x24c>
 800db7a:	ee18 3a10 	vmov	r3, s16
 800db7e:	4652      	mov	r2, sl
 800db80:	4631      	mov	r1, r6
 800db82:	4628      	mov	r0, r5
 800db84:	47b8      	blx	r7
 800db86:	3001      	adds	r0, #1
 800db88:	f43f af41 	beq.w	800da0e <_printf_float+0xbe>
 800db8c:	f04f 0800 	mov.w	r8, #0
 800db90:	f104 091a 	add.w	r9, r4, #26
 800db94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db96:	3b01      	subs	r3, #1
 800db98:	4543      	cmp	r3, r8
 800db9a:	dc09      	bgt.n	800dbb0 <_printf_float+0x260>
 800db9c:	6823      	ldr	r3, [r4, #0]
 800db9e:	079b      	lsls	r3, r3, #30
 800dba0:	f100 8107 	bmi.w	800ddb2 <_printf_float+0x462>
 800dba4:	68e0      	ldr	r0, [r4, #12]
 800dba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dba8:	4298      	cmp	r0, r3
 800dbaa:	bfb8      	it	lt
 800dbac:	4618      	movlt	r0, r3
 800dbae:	e730      	b.n	800da12 <_printf_float+0xc2>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	464a      	mov	r2, r9
 800dbb4:	4631      	mov	r1, r6
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	47b8      	blx	r7
 800dbba:	3001      	adds	r0, #1
 800dbbc:	f43f af27 	beq.w	800da0e <_printf_float+0xbe>
 800dbc0:	f108 0801 	add.w	r8, r8, #1
 800dbc4:	e7e6      	b.n	800db94 <_printf_float+0x244>
 800dbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	dc39      	bgt.n	800dc40 <_printf_float+0x2f0>
 800dbcc:	4a1b      	ldr	r2, [pc, #108]	; (800dc3c <_printf_float+0x2ec>)
 800dbce:	2301      	movs	r3, #1
 800dbd0:	4631      	mov	r1, r6
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	47b8      	blx	r7
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	f43f af19 	beq.w	800da0e <_printf_float+0xbe>
 800dbdc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	d102      	bne.n	800dbea <_printf_float+0x29a>
 800dbe4:	6823      	ldr	r3, [r4, #0]
 800dbe6:	07d9      	lsls	r1, r3, #31
 800dbe8:	d5d8      	bpl.n	800db9c <_printf_float+0x24c>
 800dbea:	ee18 3a10 	vmov	r3, s16
 800dbee:	4652      	mov	r2, sl
 800dbf0:	4631      	mov	r1, r6
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	47b8      	blx	r7
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	f43f af09 	beq.w	800da0e <_printf_float+0xbe>
 800dbfc:	f04f 0900 	mov.w	r9, #0
 800dc00:	f104 0a1a 	add.w	sl, r4, #26
 800dc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc06:	425b      	negs	r3, r3
 800dc08:	454b      	cmp	r3, r9
 800dc0a:	dc01      	bgt.n	800dc10 <_printf_float+0x2c0>
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0e:	e792      	b.n	800db36 <_printf_float+0x1e6>
 800dc10:	2301      	movs	r3, #1
 800dc12:	4652      	mov	r2, sl
 800dc14:	4631      	mov	r1, r6
 800dc16:	4628      	mov	r0, r5
 800dc18:	47b8      	blx	r7
 800dc1a:	3001      	adds	r0, #1
 800dc1c:	f43f aef7 	beq.w	800da0e <_printf_float+0xbe>
 800dc20:	f109 0901 	add.w	r9, r9, #1
 800dc24:	e7ee      	b.n	800dc04 <_printf_float+0x2b4>
 800dc26:	bf00      	nop
 800dc28:	7fefffff 	.word	0x7fefffff
 800dc2c:	08011640 	.word	0x08011640
 800dc30:	08011644 	.word	0x08011644
 800dc34:	08011648 	.word	0x08011648
 800dc38:	0801164c 	.word	0x0801164c
 800dc3c:	08011650 	.word	0x08011650
 800dc40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc44:	429a      	cmp	r2, r3
 800dc46:	bfa8      	it	ge
 800dc48:	461a      	movge	r2, r3
 800dc4a:	2a00      	cmp	r2, #0
 800dc4c:	4691      	mov	r9, r2
 800dc4e:	dc37      	bgt.n	800dcc0 <_printf_float+0x370>
 800dc50:	f04f 0b00 	mov.w	fp, #0
 800dc54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc58:	f104 021a 	add.w	r2, r4, #26
 800dc5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	eba3 0309 	sub.w	r3, r3, r9
 800dc64:	455b      	cmp	r3, fp
 800dc66:	dc33      	bgt.n	800dcd0 <_printf_float+0x380>
 800dc68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	db3b      	blt.n	800dce8 <_printf_float+0x398>
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	07da      	lsls	r2, r3, #31
 800dc74:	d438      	bmi.n	800dce8 <_printf_float+0x398>
 800dc76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dc7a:	eba2 0903 	sub.w	r9, r2, r3
 800dc7e:	9b05      	ldr	r3, [sp, #20]
 800dc80:	1ad2      	subs	r2, r2, r3
 800dc82:	4591      	cmp	r9, r2
 800dc84:	bfa8      	it	ge
 800dc86:	4691      	movge	r9, r2
 800dc88:	f1b9 0f00 	cmp.w	r9, #0
 800dc8c:	dc35      	bgt.n	800dcfa <_printf_float+0x3aa>
 800dc8e:	f04f 0800 	mov.w	r8, #0
 800dc92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc96:	f104 0a1a 	add.w	sl, r4, #26
 800dc9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc9e:	1a9b      	subs	r3, r3, r2
 800dca0:	eba3 0309 	sub.w	r3, r3, r9
 800dca4:	4543      	cmp	r3, r8
 800dca6:	f77f af79 	ble.w	800db9c <_printf_float+0x24c>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	4652      	mov	r2, sl
 800dcae:	4631      	mov	r1, r6
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	47b8      	blx	r7
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	f43f aeaa 	beq.w	800da0e <_printf_float+0xbe>
 800dcba:	f108 0801 	add.w	r8, r8, #1
 800dcbe:	e7ec      	b.n	800dc9a <_printf_float+0x34a>
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	4631      	mov	r1, r6
 800dcc4:	4642      	mov	r2, r8
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	47b8      	blx	r7
 800dcca:	3001      	adds	r0, #1
 800dccc:	d1c0      	bne.n	800dc50 <_printf_float+0x300>
 800dcce:	e69e      	b.n	800da0e <_printf_float+0xbe>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	9205      	str	r2, [sp, #20]
 800dcd8:	47b8      	blx	r7
 800dcda:	3001      	adds	r0, #1
 800dcdc:	f43f ae97 	beq.w	800da0e <_printf_float+0xbe>
 800dce0:	9a05      	ldr	r2, [sp, #20]
 800dce2:	f10b 0b01 	add.w	fp, fp, #1
 800dce6:	e7b9      	b.n	800dc5c <_printf_float+0x30c>
 800dce8:	ee18 3a10 	vmov	r3, s16
 800dcec:	4652      	mov	r2, sl
 800dcee:	4631      	mov	r1, r6
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	47b8      	blx	r7
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d1be      	bne.n	800dc76 <_printf_float+0x326>
 800dcf8:	e689      	b.n	800da0e <_printf_float+0xbe>
 800dcfa:	9a05      	ldr	r2, [sp, #20]
 800dcfc:	464b      	mov	r3, r9
 800dcfe:	4442      	add	r2, r8
 800dd00:	4631      	mov	r1, r6
 800dd02:	4628      	mov	r0, r5
 800dd04:	47b8      	blx	r7
 800dd06:	3001      	adds	r0, #1
 800dd08:	d1c1      	bne.n	800dc8e <_printf_float+0x33e>
 800dd0a:	e680      	b.n	800da0e <_printf_float+0xbe>
 800dd0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd0e:	2a01      	cmp	r2, #1
 800dd10:	dc01      	bgt.n	800dd16 <_printf_float+0x3c6>
 800dd12:	07db      	lsls	r3, r3, #31
 800dd14:	d53a      	bpl.n	800dd8c <_printf_float+0x43c>
 800dd16:	2301      	movs	r3, #1
 800dd18:	4642      	mov	r2, r8
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	47b8      	blx	r7
 800dd20:	3001      	adds	r0, #1
 800dd22:	f43f ae74 	beq.w	800da0e <_printf_float+0xbe>
 800dd26:	ee18 3a10 	vmov	r3, s16
 800dd2a:	4652      	mov	r2, sl
 800dd2c:	4631      	mov	r1, r6
 800dd2e:	4628      	mov	r0, r5
 800dd30:	47b8      	blx	r7
 800dd32:	3001      	adds	r0, #1
 800dd34:	f43f ae6b 	beq.w	800da0e <_printf_float+0xbe>
 800dd38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2300      	movs	r3, #0
 800dd40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dd44:	f7f2 fee8 	bl	8000b18 <__aeabi_dcmpeq>
 800dd48:	b9d8      	cbnz	r0, 800dd82 <_printf_float+0x432>
 800dd4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dd4e:	f108 0201 	add.w	r2, r8, #1
 800dd52:	4631      	mov	r1, r6
 800dd54:	4628      	mov	r0, r5
 800dd56:	47b8      	blx	r7
 800dd58:	3001      	adds	r0, #1
 800dd5a:	d10e      	bne.n	800dd7a <_printf_float+0x42a>
 800dd5c:	e657      	b.n	800da0e <_printf_float+0xbe>
 800dd5e:	2301      	movs	r3, #1
 800dd60:	4652      	mov	r2, sl
 800dd62:	4631      	mov	r1, r6
 800dd64:	4628      	mov	r0, r5
 800dd66:	47b8      	blx	r7
 800dd68:	3001      	adds	r0, #1
 800dd6a:	f43f ae50 	beq.w	800da0e <_printf_float+0xbe>
 800dd6e:	f108 0801 	add.w	r8, r8, #1
 800dd72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd74:	3b01      	subs	r3, #1
 800dd76:	4543      	cmp	r3, r8
 800dd78:	dcf1      	bgt.n	800dd5e <_printf_float+0x40e>
 800dd7a:	464b      	mov	r3, r9
 800dd7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dd80:	e6da      	b.n	800db38 <_printf_float+0x1e8>
 800dd82:	f04f 0800 	mov.w	r8, #0
 800dd86:	f104 0a1a 	add.w	sl, r4, #26
 800dd8a:	e7f2      	b.n	800dd72 <_printf_float+0x422>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	4642      	mov	r2, r8
 800dd90:	e7df      	b.n	800dd52 <_printf_float+0x402>
 800dd92:	2301      	movs	r3, #1
 800dd94:	464a      	mov	r2, r9
 800dd96:	4631      	mov	r1, r6
 800dd98:	4628      	mov	r0, r5
 800dd9a:	47b8      	blx	r7
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	f43f ae36 	beq.w	800da0e <_printf_float+0xbe>
 800dda2:	f108 0801 	add.w	r8, r8, #1
 800dda6:	68e3      	ldr	r3, [r4, #12]
 800dda8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddaa:	1a5b      	subs	r3, r3, r1
 800ddac:	4543      	cmp	r3, r8
 800ddae:	dcf0      	bgt.n	800dd92 <_printf_float+0x442>
 800ddb0:	e6f8      	b.n	800dba4 <_printf_float+0x254>
 800ddb2:	f04f 0800 	mov.w	r8, #0
 800ddb6:	f104 0919 	add.w	r9, r4, #25
 800ddba:	e7f4      	b.n	800dda6 <_printf_float+0x456>

0800ddbc <_printf_common>:
 800ddbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	4616      	mov	r6, r2
 800ddc2:	4699      	mov	r9, r3
 800ddc4:	688a      	ldr	r2, [r1, #8]
 800ddc6:	690b      	ldr	r3, [r1, #16]
 800ddc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	bfb8      	it	lt
 800ddd0:	4613      	movlt	r3, r2
 800ddd2:	6033      	str	r3, [r6, #0]
 800ddd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ddd8:	4607      	mov	r7, r0
 800ddda:	460c      	mov	r4, r1
 800dddc:	b10a      	cbz	r2, 800dde2 <_printf_common+0x26>
 800ddde:	3301      	adds	r3, #1
 800dde0:	6033      	str	r3, [r6, #0]
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	0699      	lsls	r1, r3, #26
 800dde6:	bf42      	ittt	mi
 800dde8:	6833      	ldrmi	r3, [r6, #0]
 800ddea:	3302      	addmi	r3, #2
 800ddec:	6033      	strmi	r3, [r6, #0]
 800ddee:	6825      	ldr	r5, [r4, #0]
 800ddf0:	f015 0506 	ands.w	r5, r5, #6
 800ddf4:	d106      	bne.n	800de04 <_printf_common+0x48>
 800ddf6:	f104 0a19 	add.w	sl, r4, #25
 800ddfa:	68e3      	ldr	r3, [r4, #12]
 800ddfc:	6832      	ldr	r2, [r6, #0]
 800ddfe:	1a9b      	subs	r3, r3, r2
 800de00:	42ab      	cmp	r3, r5
 800de02:	dc26      	bgt.n	800de52 <_printf_common+0x96>
 800de04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800de08:	1e13      	subs	r3, r2, #0
 800de0a:	6822      	ldr	r2, [r4, #0]
 800de0c:	bf18      	it	ne
 800de0e:	2301      	movne	r3, #1
 800de10:	0692      	lsls	r2, r2, #26
 800de12:	d42b      	bmi.n	800de6c <_printf_common+0xb0>
 800de14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800de18:	4649      	mov	r1, r9
 800de1a:	4638      	mov	r0, r7
 800de1c:	47c0      	blx	r8
 800de1e:	3001      	adds	r0, #1
 800de20:	d01e      	beq.n	800de60 <_printf_common+0xa4>
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	6922      	ldr	r2, [r4, #16]
 800de26:	f003 0306 	and.w	r3, r3, #6
 800de2a:	2b04      	cmp	r3, #4
 800de2c:	bf02      	ittt	eq
 800de2e:	68e5      	ldreq	r5, [r4, #12]
 800de30:	6833      	ldreq	r3, [r6, #0]
 800de32:	1aed      	subeq	r5, r5, r3
 800de34:	68a3      	ldr	r3, [r4, #8]
 800de36:	bf0c      	ite	eq
 800de38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800de3c:	2500      	movne	r5, #0
 800de3e:	4293      	cmp	r3, r2
 800de40:	bfc4      	itt	gt
 800de42:	1a9b      	subgt	r3, r3, r2
 800de44:	18ed      	addgt	r5, r5, r3
 800de46:	2600      	movs	r6, #0
 800de48:	341a      	adds	r4, #26
 800de4a:	42b5      	cmp	r5, r6
 800de4c:	d11a      	bne.n	800de84 <_printf_common+0xc8>
 800de4e:	2000      	movs	r0, #0
 800de50:	e008      	b.n	800de64 <_printf_common+0xa8>
 800de52:	2301      	movs	r3, #1
 800de54:	4652      	mov	r2, sl
 800de56:	4649      	mov	r1, r9
 800de58:	4638      	mov	r0, r7
 800de5a:	47c0      	blx	r8
 800de5c:	3001      	adds	r0, #1
 800de5e:	d103      	bne.n	800de68 <_printf_common+0xac>
 800de60:	f04f 30ff 	mov.w	r0, #4294967295
 800de64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de68:	3501      	adds	r5, #1
 800de6a:	e7c6      	b.n	800ddfa <_printf_common+0x3e>
 800de6c:	18e1      	adds	r1, r4, r3
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	2030      	movs	r0, #48	; 0x30
 800de72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de76:	4422      	add	r2, r4
 800de78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de80:	3302      	adds	r3, #2
 800de82:	e7c7      	b.n	800de14 <_printf_common+0x58>
 800de84:	2301      	movs	r3, #1
 800de86:	4622      	mov	r2, r4
 800de88:	4649      	mov	r1, r9
 800de8a:	4638      	mov	r0, r7
 800de8c:	47c0      	blx	r8
 800de8e:	3001      	adds	r0, #1
 800de90:	d0e6      	beq.n	800de60 <_printf_common+0xa4>
 800de92:	3601      	adds	r6, #1
 800de94:	e7d9      	b.n	800de4a <_printf_common+0x8e>
	...

0800de98 <_printf_i>:
 800de98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de9c:	7e0f      	ldrb	r7, [r1, #24]
 800de9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dea0:	2f78      	cmp	r7, #120	; 0x78
 800dea2:	4691      	mov	r9, r2
 800dea4:	4680      	mov	r8, r0
 800dea6:	460c      	mov	r4, r1
 800dea8:	469a      	mov	sl, r3
 800deaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800deae:	d807      	bhi.n	800dec0 <_printf_i+0x28>
 800deb0:	2f62      	cmp	r7, #98	; 0x62
 800deb2:	d80a      	bhi.n	800deca <_printf_i+0x32>
 800deb4:	2f00      	cmp	r7, #0
 800deb6:	f000 80d4 	beq.w	800e062 <_printf_i+0x1ca>
 800deba:	2f58      	cmp	r7, #88	; 0x58
 800debc:	f000 80c0 	beq.w	800e040 <_printf_i+0x1a8>
 800dec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dec8:	e03a      	b.n	800df40 <_printf_i+0xa8>
 800deca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dece:	2b15      	cmp	r3, #21
 800ded0:	d8f6      	bhi.n	800dec0 <_printf_i+0x28>
 800ded2:	a101      	add	r1, pc, #4	; (adr r1, 800ded8 <_printf_i+0x40>)
 800ded4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ded8:	0800df31 	.word	0x0800df31
 800dedc:	0800df45 	.word	0x0800df45
 800dee0:	0800dec1 	.word	0x0800dec1
 800dee4:	0800dec1 	.word	0x0800dec1
 800dee8:	0800dec1 	.word	0x0800dec1
 800deec:	0800dec1 	.word	0x0800dec1
 800def0:	0800df45 	.word	0x0800df45
 800def4:	0800dec1 	.word	0x0800dec1
 800def8:	0800dec1 	.word	0x0800dec1
 800defc:	0800dec1 	.word	0x0800dec1
 800df00:	0800dec1 	.word	0x0800dec1
 800df04:	0800e049 	.word	0x0800e049
 800df08:	0800df71 	.word	0x0800df71
 800df0c:	0800e003 	.word	0x0800e003
 800df10:	0800dec1 	.word	0x0800dec1
 800df14:	0800dec1 	.word	0x0800dec1
 800df18:	0800e06b 	.word	0x0800e06b
 800df1c:	0800dec1 	.word	0x0800dec1
 800df20:	0800df71 	.word	0x0800df71
 800df24:	0800dec1 	.word	0x0800dec1
 800df28:	0800dec1 	.word	0x0800dec1
 800df2c:	0800e00b 	.word	0x0800e00b
 800df30:	682b      	ldr	r3, [r5, #0]
 800df32:	1d1a      	adds	r2, r3, #4
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	602a      	str	r2, [r5, #0]
 800df38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df40:	2301      	movs	r3, #1
 800df42:	e09f      	b.n	800e084 <_printf_i+0x1ec>
 800df44:	6820      	ldr	r0, [r4, #0]
 800df46:	682b      	ldr	r3, [r5, #0]
 800df48:	0607      	lsls	r7, r0, #24
 800df4a:	f103 0104 	add.w	r1, r3, #4
 800df4e:	6029      	str	r1, [r5, #0]
 800df50:	d501      	bpl.n	800df56 <_printf_i+0xbe>
 800df52:	681e      	ldr	r6, [r3, #0]
 800df54:	e003      	b.n	800df5e <_printf_i+0xc6>
 800df56:	0646      	lsls	r6, r0, #25
 800df58:	d5fb      	bpl.n	800df52 <_printf_i+0xba>
 800df5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800df5e:	2e00      	cmp	r6, #0
 800df60:	da03      	bge.n	800df6a <_printf_i+0xd2>
 800df62:	232d      	movs	r3, #45	; 0x2d
 800df64:	4276      	negs	r6, r6
 800df66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df6a:	485a      	ldr	r0, [pc, #360]	; (800e0d4 <_printf_i+0x23c>)
 800df6c:	230a      	movs	r3, #10
 800df6e:	e012      	b.n	800df96 <_printf_i+0xfe>
 800df70:	682b      	ldr	r3, [r5, #0]
 800df72:	6820      	ldr	r0, [r4, #0]
 800df74:	1d19      	adds	r1, r3, #4
 800df76:	6029      	str	r1, [r5, #0]
 800df78:	0605      	lsls	r5, r0, #24
 800df7a:	d501      	bpl.n	800df80 <_printf_i+0xe8>
 800df7c:	681e      	ldr	r6, [r3, #0]
 800df7e:	e002      	b.n	800df86 <_printf_i+0xee>
 800df80:	0641      	lsls	r1, r0, #25
 800df82:	d5fb      	bpl.n	800df7c <_printf_i+0xe4>
 800df84:	881e      	ldrh	r6, [r3, #0]
 800df86:	4853      	ldr	r0, [pc, #332]	; (800e0d4 <_printf_i+0x23c>)
 800df88:	2f6f      	cmp	r7, #111	; 0x6f
 800df8a:	bf0c      	ite	eq
 800df8c:	2308      	moveq	r3, #8
 800df8e:	230a      	movne	r3, #10
 800df90:	2100      	movs	r1, #0
 800df92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df96:	6865      	ldr	r5, [r4, #4]
 800df98:	60a5      	str	r5, [r4, #8]
 800df9a:	2d00      	cmp	r5, #0
 800df9c:	bfa2      	ittt	ge
 800df9e:	6821      	ldrge	r1, [r4, #0]
 800dfa0:	f021 0104 	bicge.w	r1, r1, #4
 800dfa4:	6021      	strge	r1, [r4, #0]
 800dfa6:	b90e      	cbnz	r6, 800dfac <_printf_i+0x114>
 800dfa8:	2d00      	cmp	r5, #0
 800dfaa:	d04b      	beq.n	800e044 <_printf_i+0x1ac>
 800dfac:	4615      	mov	r5, r2
 800dfae:	fbb6 f1f3 	udiv	r1, r6, r3
 800dfb2:	fb03 6711 	mls	r7, r3, r1, r6
 800dfb6:	5dc7      	ldrb	r7, [r0, r7]
 800dfb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dfbc:	4637      	mov	r7, r6
 800dfbe:	42bb      	cmp	r3, r7
 800dfc0:	460e      	mov	r6, r1
 800dfc2:	d9f4      	bls.n	800dfae <_printf_i+0x116>
 800dfc4:	2b08      	cmp	r3, #8
 800dfc6:	d10b      	bne.n	800dfe0 <_printf_i+0x148>
 800dfc8:	6823      	ldr	r3, [r4, #0]
 800dfca:	07de      	lsls	r6, r3, #31
 800dfcc:	d508      	bpl.n	800dfe0 <_printf_i+0x148>
 800dfce:	6923      	ldr	r3, [r4, #16]
 800dfd0:	6861      	ldr	r1, [r4, #4]
 800dfd2:	4299      	cmp	r1, r3
 800dfd4:	bfde      	ittt	le
 800dfd6:	2330      	movle	r3, #48	; 0x30
 800dfd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dfdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dfe0:	1b52      	subs	r2, r2, r5
 800dfe2:	6122      	str	r2, [r4, #16]
 800dfe4:	f8cd a000 	str.w	sl, [sp]
 800dfe8:	464b      	mov	r3, r9
 800dfea:	aa03      	add	r2, sp, #12
 800dfec:	4621      	mov	r1, r4
 800dfee:	4640      	mov	r0, r8
 800dff0:	f7ff fee4 	bl	800ddbc <_printf_common>
 800dff4:	3001      	adds	r0, #1
 800dff6:	d14a      	bne.n	800e08e <_printf_i+0x1f6>
 800dff8:	f04f 30ff 	mov.w	r0, #4294967295
 800dffc:	b004      	add	sp, #16
 800dffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	f043 0320 	orr.w	r3, r3, #32
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	4833      	ldr	r0, [pc, #204]	; (800e0d8 <_printf_i+0x240>)
 800e00c:	2778      	movs	r7, #120	; 0x78
 800e00e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	6829      	ldr	r1, [r5, #0]
 800e016:	061f      	lsls	r7, r3, #24
 800e018:	f851 6b04 	ldr.w	r6, [r1], #4
 800e01c:	d402      	bmi.n	800e024 <_printf_i+0x18c>
 800e01e:	065f      	lsls	r7, r3, #25
 800e020:	bf48      	it	mi
 800e022:	b2b6      	uxthmi	r6, r6
 800e024:	07df      	lsls	r7, r3, #31
 800e026:	bf48      	it	mi
 800e028:	f043 0320 	orrmi.w	r3, r3, #32
 800e02c:	6029      	str	r1, [r5, #0]
 800e02e:	bf48      	it	mi
 800e030:	6023      	strmi	r3, [r4, #0]
 800e032:	b91e      	cbnz	r6, 800e03c <_printf_i+0x1a4>
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	f023 0320 	bic.w	r3, r3, #32
 800e03a:	6023      	str	r3, [r4, #0]
 800e03c:	2310      	movs	r3, #16
 800e03e:	e7a7      	b.n	800df90 <_printf_i+0xf8>
 800e040:	4824      	ldr	r0, [pc, #144]	; (800e0d4 <_printf_i+0x23c>)
 800e042:	e7e4      	b.n	800e00e <_printf_i+0x176>
 800e044:	4615      	mov	r5, r2
 800e046:	e7bd      	b.n	800dfc4 <_printf_i+0x12c>
 800e048:	682b      	ldr	r3, [r5, #0]
 800e04a:	6826      	ldr	r6, [r4, #0]
 800e04c:	6961      	ldr	r1, [r4, #20]
 800e04e:	1d18      	adds	r0, r3, #4
 800e050:	6028      	str	r0, [r5, #0]
 800e052:	0635      	lsls	r5, r6, #24
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	d501      	bpl.n	800e05c <_printf_i+0x1c4>
 800e058:	6019      	str	r1, [r3, #0]
 800e05a:	e002      	b.n	800e062 <_printf_i+0x1ca>
 800e05c:	0670      	lsls	r0, r6, #25
 800e05e:	d5fb      	bpl.n	800e058 <_printf_i+0x1c0>
 800e060:	8019      	strh	r1, [r3, #0]
 800e062:	2300      	movs	r3, #0
 800e064:	6123      	str	r3, [r4, #16]
 800e066:	4615      	mov	r5, r2
 800e068:	e7bc      	b.n	800dfe4 <_printf_i+0x14c>
 800e06a:	682b      	ldr	r3, [r5, #0]
 800e06c:	1d1a      	adds	r2, r3, #4
 800e06e:	602a      	str	r2, [r5, #0]
 800e070:	681d      	ldr	r5, [r3, #0]
 800e072:	6862      	ldr	r2, [r4, #4]
 800e074:	2100      	movs	r1, #0
 800e076:	4628      	mov	r0, r5
 800e078:	f7f2 f8d2 	bl	8000220 <memchr>
 800e07c:	b108      	cbz	r0, 800e082 <_printf_i+0x1ea>
 800e07e:	1b40      	subs	r0, r0, r5
 800e080:	6060      	str	r0, [r4, #4]
 800e082:	6863      	ldr	r3, [r4, #4]
 800e084:	6123      	str	r3, [r4, #16]
 800e086:	2300      	movs	r3, #0
 800e088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e08c:	e7aa      	b.n	800dfe4 <_printf_i+0x14c>
 800e08e:	6923      	ldr	r3, [r4, #16]
 800e090:	462a      	mov	r2, r5
 800e092:	4649      	mov	r1, r9
 800e094:	4640      	mov	r0, r8
 800e096:	47d0      	blx	sl
 800e098:	3001      	adds	r0, #1
 800e09a:	d0ad      	beq.n	800dff8 <_printf_i+0x160>
 800e09c:	6823      	ldr	r3, [r4, #0]
 800e09e:	079b      	lsls	r3, r3, #30
 800e0a0:	d413      	bmi.n	800e0ca <_printf_i+0x232>
 800e0a2:	68e0      	ldr	r0, [r4, #12]
 800e0a4:	9b03      	ldr	r3, [sp, #12]
 800e0a6:	4298      	cmp	r0, r3
 800e0a8:	bfb8      	it	lt
 800e0aa:	4618      	movlt	r0, r3
 800e0ac:	e7a6      	b.n	800dffc <_printf_i+0x164>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	4632      	mov	r2, r6
 800e0b2:	4649      	mov	r1, r9
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	47d0      	blx	sl
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	d09d      	beq.n	800dff8 <_printf_i+0x160>
 800e0bc:	3501      	adds	r5, #1
 800e0be:	68e3      	ldr	r3, [r4, #12]
 800e0c0:	9903      	ldr	r1, [sp, #12]
 800e0c2:	1a5b      	subs	r3, r3, r1
 800e0c4:	42ab      	cmp	r3, r5
 800e0c6:	dcf2      	bgt.n	800e0ae <_printf_i+0x216>
 800e0c8:	e7eb      	b.n	800e0a2 <_printf_i+0x20a>
 800e0ca:	2500      	movs	r5, #0
 800e0cc:	f104 0619 	add.w	r6, r4, #25
 800e0d0:	e7f5      	b.n	800e0be <_printf_i+0x226>
 800e0d2:	bf00      	nop
 800e0d4:	08011652 	.word	0x08011652
 800e0d8:	08011663 	.word	0x08011663

0800e0dc <std>:
 800e0dc:	2300      	movs	r3, #0
 800e0de:	b510      	push	{r4, lr}
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	e9c0 3300 	strd	r3, r3, [r0]
 800e0e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0ea:	6083      	str	r3, [r0, #8]
 800e0ec:	8181      	strh	r1, [r0, #12]
 800e0ee:	6643      	str	r3, [r0, #100]	; 0x64
 800e0f0:	81c2      	strh	r2, [r0, #14]
 800e0f2:	6183      	str	r3, [r0, #24]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	2208      	movs	r2, #8
 800e0f8:	305c      	adds	r0, #92	; 0x5c
 800e0fa:	f000 fa9b 	bl	800e634 <memset>
 800e0fe:	4b05      	ldr	r3, [pc, #20]	; (800e114 <std+0x38>)
 800e100:	6263      	str	r3, [r4, #36]	; 0x24
 800e102:	4b05      	ldr	r3, [pc, #20]	; (800e118 <std+0x3c>)
 800e104:	62a3      	str	r3, [r4, #40]	; 0x28
 800e106:	4b05      	ldr	r3, [pc, #20]	; (800e11c <std+0x40>)
 800e108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e10a:	4b05      	ldr	r3, [pc, #20]	; (800e120 <std+0x44>)
 800e10c:	6224      	str	r4, [r4, #32]
 800e10e:	6323      	str	r3, [r4, #48]	; 0x30
 800e110:	bd10      	pop	{r4, pc}
 800e112:	bf00      	nop
 800e114:	0800e485 	.word	0x0800e485
 800e118:	0800e4a7 	.word	0x0800e4a7
 800e11c:	0800e4df 	.word	0x0800e4df
 800e120:	0800e503 	.word	0x0800e503

0800e124 <stdio_exit_handler>:
 800e124:	4a02      	ldr	r2, [pc, #8]	; (800e130 <stdio_exit_handler+0xc>)
 800e126:	4903      	ldr	r1, [pc, #12]	; (800e134 <stdio_exit_handler+0x10>)
 800e128:	4803      	ldr	r0, [pc, #12]	; (800e138 <stdio_exit_handler+0x14>)
 800e12a:	f000 b869 	b.w	800e200 <_fwalk_sglue>
 800e12e:	bf00      	nop
 800e130:	20000014 	.word	0x20000014
 800e134:	080100b1 	.word	0x080100b1
 800e138:	20000020 	.word	0x20000020

0800e13c <cleanup_stdio>:
 800e13c:	6841      	ldr	r1, [r0, #4]
 800e13e:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <cleanup_stdio+0x34>)
 800e140:	4299      	cmp	r1, r3
 800e142:	b510      	push	{r4, lr}
 800e144:	4604      	mov	r4, r0
 800e146:	d001      	beq.n	800e14c <cleanup_stdio+0x10>
 800e148:	f001 ffb2 	bl	80100b0 <_fflush_r>
 800e14c:	68a1      	ldr	r1, [r4, #8]
 800e14e:	4b09      	ldr	r3, [pc, #36]	; (800e174 <cleanup_stdio+0x38>)
 800e150:	4299      	cmp	r1, r3
 800e152:	d002      	beq.n	800e15a <cleanup_stdio+0x1e>
 800e154:	4620      	mov	r0, r4
 800e156:	f001 ffab 	bl	80100b0 <_fflush_r>
 800e15a:	68e1      	ldr	r1, [r4, #12]
 800e15c:	4b06      	ldr	r3, [pc, #24]	; (800e178 <cleanup_stdio+0x3c>)
 800e15e:	4299      	cmp	r1, r3
 800e160:	d004      	beq.n	800e16c <cleanup_stdio+0x30>
 800e162:	4620      	mov	r0, r4
 800e164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e168:	f001 bfa2 	b.w	80100b0 <_fflush_r>
 800e16c:	bd10      	pop	{r4, pc}
 800e16e:	bf00      	nop
 800e170:	20000e80 	.word	0x20000e80
 800e174:	20000ee8 	.word	0x20000ee8
 800e178:	20000f50 	.word	0x20000f50

0800e17c <global_stdio_init.part.0>:
 800e17c:	b510      	push	{r4, lr}
 800e17e:	4b0b      	ldr	r3, [pc, #44]	; (800e1ac <global_stdio_init.part.0+0x30>)
 800e180:	4c0b      	ldr	r4, [pc, #44]	; (800e1b0 <global_stdio_init.part.0+0x34>)
 800e182:	4a0c      	ldr	r2, [pc, #48]	; (800e1b4 <global_stdio_init.part.0+0x38>)
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	4620      	mov	r0, r4
 800e188:	2200      	movs	r2, #0
 800e18a:	2104      	movs	r1, #4
 800e18c:	f7ff ffa6 	bl	800e0dc <std>
 800e190:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e194:	2201      	movs	r2, #1
 800e196:	2109      	movs	r1, #9
 800e198:	f7ff ffa0 	bl	800e0dc <std>
 800e19c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1a6:	2112      	movs	r1, #18
 800e1a8:	f7ff bf98 	b.w	800e0dc <std>
 800e1ac:	20000fb8 	.word	0x20000fb8
 800e1b0:	20000e80 	.word	0x20000e80
 800e1b4:	0800e125 	.word	0x0800e125

0800e1b8 <__sfp_lock_acquire>:
 800e1b8:	4801      	ldr	r0, [pc, #4]	; (800e1c0 <__sfp_lock_acquire+0x8>)
 800e1ba:	f000 bab7 	b.w	800e72c <__retarget_lock_acquire_recursive>
 800e1be:	bf00      	nop
 800e1c0:	20000fc1 	.word	0x20000fc1

0800e1c4 <__sfp_lock_release>:
 800e1c4:	4801      	ldr	r0, [pc, #4]	; (800e1cc <__sfp_lock_release+0x8>)
 800e1c6:	f000 bab2 	b.w	800e72e <__retarget_lock_release_recursive>
 800e1ca:	bf00      	nop
 800e1cc:	20000fc1 	.word	0x20000fc1

0800e1d0 <__sinit>:
 800e1d0:	b510      	push	{r4, lr}
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	f7ff fff0 	bl	800e1b8 <__sfp_lock_acquire>
 800e1d8:	6a23      	ldr	r3, [r4, #32]
 800e1da:	b11b      	cbz	r3, 800e1e4 <__sinit+0x14>
 800e1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e0:	f7ff bff0 	b.w	800e1c4 <__sfp_lock_release>
 800e1e4:	4b04      	ldr	r3, [pc, #16]	; (800e1f8 <__sinit+0x28>)
 800e1e6:	6223      	str	r3, [r4, #32]
 800e1e8:	4b04      	ldr	r3, [pc, #16]	; (800e1fc <__sinit+0x2c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1f5      	bne.n	800e1dc <__sinit+0xc>
 800e1f0:	f7ff ffc4 	bl	800e17c <global_stdio_init.part.0>
 800e1f4:	e7f2      	b.n	800e1dc <__sinit+0xc>
 800e1f6:	bf00      	nop
 800e1f8:	0800e13d 	.word	0x0800e13d
 800e1fc:	20000fb8 	.word	0x20000fb8

0800e200 <_fwalk_sglue>:
 800e200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e204:	4607      	mov	r7, r0
 800e206:	4688      	mov	r8, r1
 800e208:	4614      	mov	r4, r2
 800e20a:	2600      	movs	r6, #0
 800e20c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e210:	f1b9 0901 	subs.w	r9, r9, #1
 800e214:	d505      	bpl.n	800e222 <_fwalk_sglue+0x22>
 800e216:	6824      	ldr	r4, [r4, #0]
 800e218:	2c00      	cmp	r4, #0
 800e21a:	d1f7      	bne.n	800e20c <_fwalk_sglue+0xc>
 800e21c:	4630      	mov	r0, r6
 800e21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e222:	89ab      	ldrh	r3, [r5, #12]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d907      	bls.n	800e238 <_fwalk_sglue+0x38>
 800e228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e22c:	3301      	adds	r3, #1
 800e22e:	d003      	beq.n	800e238 <_fwalk_sglue+0x38>
 800e230:	4629      	mov	r1, r5
 800e232:	4638      	mov	r0, r7
 800e234:	47c0      	blx	r8
 800e236:	4306      	orrs	r6, r0
 800e238:	3568      	adds	r5, #104	; 0x68
 800e23a:	e7e9      	b.n	800e210 <_fwalk_sglue+0x10>

0800e23c <iprintf>:
 800e23c:	b40f      	push	{r0, r1, r2, r3}
 800e23e:	b507      	push	{r0, r1, r2, lr}
 800e240:	4906      	ldr	r1, [pc, #24]	; (800e25c <iprintf+0x20>)
 800e242:	ab04      	add	r3, sp, #16
 800e244:	6808      	ldr	r0, [r1, #0]
 800e246:	f853 2b04 	ldr.w	r2, [r3], #4
 800e24a:	6881      	ldr	r1, [r0, #8]
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	f001 fd8f 	bl	800fd70 <_vfiprintf_r>
 800e252:	b003      	add	sp, #12
 800e254:	f85d eb04 	ldr.w	lr, [sp], #4
 800e258:	b004      	add	sp, #16
 800e25a:	4770      	bx	lr
 800e25c:	2000006c 	.word	0x2000006c

0800e260 <_puts_r>:
 800e260:	6a03      	ldr	r3, [r0, #32]
 800e262:	b570      	push	{r4, r5, r6, lr}
 800e264:	6884      	ldr	r4, [r0, #8]
 800e266:	4605      	mov	r5, r0
 800e268:	460e      	mov	r6, r1
 800e26a:	b90b      	cbnz	r3, 800e270 <_puts_r+0x10>
 800e26c:	f7ff ffb0 	bl	800e1d0 <__sinit>
 800e270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e272:	07db      	lsls	r3, r3, #31
 800e274:	d405      	bmi.n	800e282 <_puts_r+0x22>
 800e276:	89a3      	ldrh	r3, [r4, #12]
 800e278:	0598      	lsls	r0, r3, #22
 800e27a:	d402      	bmi.n	800e282 <_puts_r+0x22>
 800e27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e27e:	f000 fa55 	bl	800e72c <__retarget_lock_acquire_recursive>
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	0719      	lsls	r1, r3, #28
 800e286:	d513      	bpl.n	800e2b0 <_puts_r+0x50>
 800e288:	6923      	ldr	r3, [r4, #16]
 800e28a:	b18b      	cbz	r3, 800e2b0 <_puts_r+0x50>
 800e28c:	3e01      	subs	r6, #1
 800e28e:	68a3      	ldr	r3, [r4, #8]
 800e290:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e294:	3b01      	subs	r3, #1
 800e296:	60a3      	str	r3, [r4, #8]
 800e298:	b9e9      	cbnz	r1, 800e2d6 <_puts_r+0x76>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	da2e      	bge.n	800e2fc <_puts_r+0x9c>
 800e29e:	4622      	mov	r2, r4
 800e2a0:	210a      	movs	r1, #10
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f000 f931 	bl	800e50a <__swbuf_r>
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	d007      	beq.n	800e2bc <_puts_r+0x5c>
 800e2ac:	250a      	movs	r5, #10
 800e2ae:	e007      	b.n	800e2c0 <_puts_r+0x60>
 800e2b0:	4621      	mov	r1, r4
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f000 f966 	bl	800e584 <__swsetup_r>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	d0e7      	beq.n	800e28c <_puts_r+0x2c>
 800e2bc:	f04f 35ff 	mov.w	r5, #4294967295
 800e2c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2c2:	07da      	lsls	r2, r3, #31
 800e2c4:	d405      	bmi.n	800e2d2 <_puts_r+0x72>
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	059b      	lsls	r3, r3, #22
 800e2ca:	d402      	bmi.n	800e2d2 <_puts_r+0x72>
 800e2cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2ce:	f000 fa2e 	bl	800e72e <__retarget_lock_release_recursive>
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	bd70      	pop	{r4, r5, r6, pc}
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	da04      	bge.n	800e2e4 <_puts_r+0x84>
 800e2da:	69a2      	ldr	r2, [r4, #24]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	dc06      	bgt.n	800e2ee <_puts_r+0x8e>
 800e2e0:	290a      	cmp	r1, #10
 800e2e2:	d004      	beq.n	800e2ee <_puts_r+0x8e>
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	1c5a      	adds	r2, r3, #1
 800e2e8:	6022      	str	r2, [r4, #0]
 800e2ea:	7019      	strb	r1, [r3, #0]
 800e2ec:	e7cf      	b.n	800e28e <_puts_r+0x2e>
 800e2ee:	4622      	mov	r2, r4
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f000 f90a 	bl	800e50a <__swbuf_r>
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	d1c9      	bne.n	800e28e <_puts_r+0x2e>
 800e2fa:	e7df      	b.n	800e2bc <_puts_r+0x5c>
 800e2fc:	6823      	ldr	r3, [r4, #0]
 800e2fe:	250a      	movs	r5, #10
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	6022      	str	r2, [r4, #0]
 800e304:	701d      	strb	r5, [r3, #0]
 800e306:	e7db      	b.n	800e2c0 <_puts_r+0x60>

0800e308 <puts>:
 800e308:	4b02      	ldr	r3, [pc, #8]	; (800e314 <puts+0xc>)
 800e30a:	4601      	mov	r1, r0
 800e30c:	6818      	ldr	r0, [r3, #0]
 800e30e:	f7ff bfa7 	b.w	800e260 <_puts_r>
 800e312:	bf00      	nop
 800e314:	2000006c 	.word	0x2000006c

0800e318 <setbuf>:
 800e318:	fab1 f281 	clz	r2, r1
 800e31c:	0952      	lsrs	r2, r2, #5
 800e31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e322:	0052      	lsls	r2, r2, #1
 800e324:	f000 b800 	b.w	800e328 <setvbuf>

0800e328 <setvbuf>:
 800e328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e32c:	461d      	mov	r5, r3
 800e32e:	4b54      	ldr	r3, [pc, #336]	; (800e480 <setvbuf+0x158>)
 800e330:	681f      	ldr	r7, [r3, #0]
 800e332:	4604      	mov	r4, r0
 800e334:	460e      	mov	r6, r1
 800e336:	4690      	mov	r8, r2
 800e338:	b127      	cbz	r7, 800e344 <setvbuf+0x1c>
 800e33a:	6a3b      	ldr	r3, [r7, #32]
 800e33c:	b913      	cbnz	r3, 800e344 <setvbuf+0x1c>
 800e33e:	4638      	mov	r0, r7
 800e340:	f7ff ff46 	bl	800e1d0 <__sinit>
 800e344:	f1b8 0f02 	cmp.w	r8, #2
 800e348:	d006      	beq.n	800e358 <setvbuf+0x30>
 800e34a:	f1b8 0f01 	cmp.w	r8, #1
 800e34e:	f200 8094 	bhi.w	800e47a <setvbuf+0x152>
 800e352:	2d00      	cmp	r5, #0
 800e354:	f2c0 8091 	blt.w	800e47a <setvbuf+0x152>
 800e358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e35a:	07da      	lsls	r2, r3, #31
 800e35c:	d405      	bmi.n	800e36a <setvbuf+0x42>
 800e35e:	89a3      	ldrh	r3, [r4, #12]
 800e360:	059b      	lsls	r3, r3, #22
 800e362:	d402      	bmi.n	800e36a <setvbuf+0x42>
 800e364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e366:	f000 f9e1 	bl	800e72c <__retarget_lock_acquire_recursive>
 800e36a:	4621      	mov	r1, r4
 800e36c:	4638      	mov	r0, r7
 800e36e:	f001 fe9f 	bl	80100b0 <_fflush_r>
 800e372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e374:	b141      	cbz	r1, 800e388 <setvbuf+0x60>
 800e376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e37a:	4299      	cmp	r1, r3
 800e37c:	d002      	beq.n	800e384 <setvbuf+0x5c>
 800e37e:	4638      	mov	r0, r7
 800e380:	f001 f850 	bl	800f424 <_free_r>
 800e384:	2300      	movs	r3, #0
 800e386:	6363      	str	r3, [r4, #52]	; 0x34
 800e388:	2300      	movs	r3, #0
 800e38a:	61a3      	str	r3, [r4, #24]
 800e38c:	6063      	str	r3, [r4, #4]
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	0618      	lsls	r0, r3, #24
 800e392:	d503      	bpl.n	800e39c <setvbuf+0x74>
 800e394:	6921      	ldr	r1, [r4, #16]
 800e396:	4638      	mov	r0, r7
 800e398:	f001 f844 	bl	800f424 <_free_r>
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e3a2:	f023 0303 	bic.w	r3, r3, #3
 800e3a6:	f1b8 0f02 	cmp.w	r8, #2
 800e3aa:	81a3      	strh	r3, [r4, #12]
 800e3ac:	d05f      	beq.n	800e46e <setvbuf+0x146>
 800e3ae:	ab01      	add	r3, sp, #4
 800e3b0:	466a      	mov	r2, sp
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	4638      	mov	r0, r7
 800e3b6:	f001 fea3 	bl	8010100 <__swhatbuf_r>
 800e3ba:	89a3      	ldrh	r3, [r4, #12]
 800e3bc:	4318      	orrs	r0, r3
 800e3be:	81a0      	strh	r0, [r4, #12]
 800e3c0:	bb2d      	cbnz	r5, 800e40e <setvbuf+0xe6>
 800e3c2:	9d00      	ldr	r5, [sp, #0]
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f001 f879 	bl	800f4bc <malloc>
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	d150      	bne.n	800e472 <setvbuf+0x14a>
 800e3d0:	f8dd 9000 	ldr.w	r9, [sp]
 800e3d4:	45a9      	cmp	r9, r5
 800e3d6:	d13e      	bne.n	800e456 <setvbuf+0x12e>
 800e3d8:	f04f 35ff 	mov.w	r5, #4294967295
 800e3dc:	2200      	movs	r2, #0
 800e3de:	60a2      	str	r2, [r4, #8]
 800e3e0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e3e4:	6022      	str	r2, [r4, #0]
 800e3e6:	6122      	str	r2, [r4, #16]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ee:	6162      	str	r2, [r4, #20]
 800e3f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e3f2:	f043 0302 	orr.w	r3, r3, #2
 800e3f6:	07d1      	lsls	r1, r2, #31
 800e3f8:	81a3      	strh	r3, [r4, #12]
 800e3fa:	d404      	bmi.n	800e406 <setvbuf+0xde>
 800e3fc:	059b      	lsls	r3, r3, #22
 800e3fe:	d402      	bmi.n	800e406 <setvbuf+0xde>
 800e400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e402:	f000 f994 	bl	800e72e <__retarget_lock_release_recursive>
 800e406:	4628      	mov	r0, r5
 800e408:	b003      	add	sp, #12
 800e40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e40e:	2e00      	cmp	r6, #0
 800e410:	d0d8      	beq.n	800e3c4 <setvbuf+0x9c>
 800e412:	6a3b      	ldr	r3, [r7, #32]
 800e414:	b913      	cbnz	r3, 800e41c <setvbuf+0xf4>
 800e416:	4638      	mov	r0, r7
 800e418:	f7ff feda 	bl	800e1d0 <__sinit>
 800e41c:	f1b8 0f01 	cmp.w	r8, #1
 800e420:	bf08      	it	eq
 800e422:	89a3      	ldrheq	r3, [r4, #12]
 800e424:	6026      	str	r6, [r4, #0]
 800e426:	bf04      	itt	eq
 800e428:	f043 0301 	orreq.w	r3, r3, #1
 800e42c:	81a3      	strheq	r3, [r4, #12]
 800e42e:	89a3      	ldrh	r3, [r4, #12]
 800e430:	f013 0208 	ands.w	r2, r3, #8
 800e434:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e438:	d01d      	beq.n	800e476 <setvbuf+0x14e>
 800e43a:	07da      	lsls	r2, r3, #31
 800e43c:	bf41      	itttt	mi
 800e43e:	2200      	movmi	r2, #0
 800e440:	426d      	negmi	r5, r5
 800e442:	60a2      	strmi	r2, [r4, #8]
 800e444:	61a5      	strmi	r5, [r4, #24]
 800e446:	bf58      	it	pl
 800e448:	60a5      	strpl	r5, [r4, #8]
 800e44a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e44c:	f015 0501 	ands.w	r5, r5, #1
 800e450:	d0d4      	beq.n	800e3fc <setvbuf+0xd4>
 800e452:	2500      	movs	r5, #0
 800e454:	e7d7      	b.n	800e406 <setvbuf+0xde>
 800e456:	4648      	mov	r0, r9
 800e458:	f001 f830 	bl	800f4bc <malloc>
 800e45c:	4606      	mov	r6, r0
 800e45e:	2800      	cmp	r0, #0
 800e460:	d0ba      	beq.n	800e3d8 <setvbuf+0xb0>
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e468:	81a3      	strh	r3, [r4, #12]
 800e46a:	464d      	mov	r5, r9
 800e46c:	e7d1      	b.n	800e412 <setvbuf+0xea>
 800e46e:	2500      	movs	r5, #0
 800e470:	e7b4      	b.n	800e3dc <setvbuf+0xb4>
 800e472:	46a9      	mov	r9, r5
 800e474:	e7f5      	b.n	800e462 <setvbuf+0x13a>
 800e476:	60a2      	str	r2, [r4, #8]
 800e478:	e7e7      	b.n	800e44a <setvbuf+0x122>
 800e47a:	f04f 35ff 	mov.w	r5, #4294967295
 800e47e:	e7c2      	b.n	800e406 <setvbuf+0xde>
 800e480:	2000006c 	.word	0x2000006c

0800e484 <__sread>:
 800e484:	b510      	push	{r4, lr}
 800e486:	460c      	mov	r4, r1
 800e488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e48c:	f000 f900 	bl	800e690 <_read_r>
 800e490:	2800      	cmp	r0, #0
 800e492:	bfab      	itete	ge
 800e494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e496:	89a3      	ldrhlt	r3, [r4, #12]
 800e498:	181b      	addge	r3, r3, r0
 800e49a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e49e:	bfac      	ite	ge
 800e4a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4a2:	81a3      	strhlt	r3, [r4, #12]
 800e4a4:	bd10      	pop	{r4, pc}

0800e4a6 <__swrite>:
 800e4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4aa:	461f      	mov	r7, r3
 800e4ac:	898b      	ldrh	r3, [r1, #12]
 800e4ae:	05db      	lsls	r3, r3, #23
 800e4b0:	4605      	mov	r5, r0
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	4616      	mov	r6, r2
 800e4b6:	d505      	bpl.n	800e4c4 <__swrite+0x1e>
 800e4b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4bc:	2302      	movs	r3, #2
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f000 f8d4 	bl	800e66c <_lseek_r>
 800e4c4:	89a3      	ldrh	r3, [r4, #12]
 800e4c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4ce:	81a3      	strh	r3, [r4, #12]
 800e4d0:	4632      	mov	r2, r6
 800e4d2:	463b      	mov	r3, r7
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4da:	f000 b8eb 	b.w	800e6b4 <_write_r>

0800e4de <__sseek>:
 800e4de:	b510      	push	{r4, lr}
 800e4e0:	460c      	mov	r4, r1
 800e4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4e6:	f000 f8c1 	bl	800e66c <_lseek_r>
 800e4ea:	1c43      	adds	r3, r0, #1
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	bf15      	itete	ne
 800e4f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4fa:	81a3      	strheq	r3, [r4, #12]
 800e4fc:	bf18      	it	ne
 800e4fe:	81a3      	strhne	r3, [r4, #12]
 800e500:	bd10      	pop	{r4, pc}

0800e502 <__sclose>:
 800e502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e506:	f000 b8a1 	b.w	800e64c <_close_r>

0800e50a <__swbuf_r>:
 800e50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50c:	460e      	mov	r6, r1
 800e50e:	4614      	mov	r4, r2
 800e510:	4605      	mov	r5, r0
 800e512:	b118      	cbz	r0, 800e51c <__swbuf_r+0x12>
 800e514:	6a03      	ldr	r3, [r0, #32]
 800e516:	b90b      	cbnz	r3, 800e51c <__swbuf_r+0x12>
 800e518:	f7ff fe5a 	bl	800e1d0 <__sinit>
 800e51c:	69a3      	ldr	r3, [r4, #24]
 800e51e:	60a3      	str	r3, [r4, #8]
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	071a      	lsls	r2, r3, #28
 800e524:	d525      	bpl.n	800e572 <__swbuf_r+0x68>
 800e526:	6923      	ldr	r3, [r4, #16]
 800e528:	b31b      	cbz	r3, 800e572 <__swbuf_r+0x68>
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	6922      	ldr	r2, [r4, #16]
 800e52e:	1a98      	subs	r0, r3, r2
 800e530:	6963      	ldr	r3, [r4, #20]
 800e532:	b2f6      	uxtb	r6, r6
 800e534:	4283      	cmp	r3, r0
 800e536:	4637      	mov	r7, r6
 800e538:	dc04      	bgt.n	800e544 <__swbuf_r+0x3a>
 800e53a:	4621      	mov	r1, r4
 800e53c:	4628      	mov	r0, r5
 800e53e:	f001 fdb7 	bl	80100b0 <_fflush_r>
 800e542:	b9e0      	cbnz	r0, 800e57e <__swbuf_r+0x74>
 800e544:	68a3      	ldr	r3, [r4, #8]
 800e546:	3b01      	subs	r3, #1
 800e548:	60a3      	str	r3, [r4, #8]
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	1c5a      	adds	r2, r3, #1
 800e54e:	6022      	str	r2, [r4, #0]
 800e550:	701e      	strb	r6, [r3, #0]
 800e552:	6962      	ldr	r2, [r4, #20]
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	429a      	cmp	r2, r3
 800e558:	d004      	beq.n	800e564 <__swbuf_r+0x5a>
 800e55a:	89a3      	ldrh	r3, [r4, #12]
 800e55c:	07db      	lsls	r3, r3, #31
 800e55e:	d506      	bpl.n	800e56e <__swbuf_r+0x64>
 800e560:	2e0a      	cmp	r6, #10
 800e562:	d104      	bne.n	800e56e <__swbuf_r+0x64>
 800e564:	4621      	mov	r1, r4
 800e566:	4628      	mov	r0, r5
 800e568:	f001 fda2 	bl	80100b0 <_fflush_r>
 800e56c:	b938      	cbnz	r0, 800e57e <__swbuf_r+0x74>
 800e56e:	4638      	mov	r0, r7
 800e570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e572:	4621      	mov	r1, r4
 800e574:	4628      	mov	r0, r5
 800e576:	f000 f805 	bl	800e584 <__swsetup_r>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d0d5      	beq.n	800e52a <__swbuf_r+0x20>
 800e57e:	f04f 37ff 	mov.w	r7, #4294967295
 800e582:	e7f4      	b.n	800e56e <__swbuf_r+0x64>

0800e584 <__swsetup_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4b2a      	ldr	r3, [pc, #168]	; (800e630 <__swsetup_r+0xac>)
 800e588:	4605      	mov	r5, r0
 800e58a:	6818      	ldr	r0, [r3, #0]
 800e58c:	460c      	mov	r4, r1
 800e58e:	b118      	cbz	r0, 800e598 <__swsetup_r+0x14>
 800e590:	6a03      	ldr	r3, [r0, #32]
 800e592:	b90b      	cbnz	r3, 800e598 <__swsetup_r+0x14>
 800e594:	f7ff fe1c 	bl	800e1d0 <__sinit>
 800e598:	89a3      	ldrh	r3, [r4, #12]
 800e59a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e59e:	0718      	lsls	r0, r3, #28
 800e5a0:	d422      	bmi.n	800e5e8 <__swsetup_r+0x64>
 800e5a2:	06d9      	lsls	r1, r3, #27
 800e5a4:	d407      	bmi.n	800e5b6 <__swsetup_r+0x32>
 800e5a6:	2309      	movs	r3, #9
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b4:	e034      	b.n	800e620 <__swsetup_r+0x9c>
 800e5b6:	0758      	lsls	r0, r3, #29
 800e5b8:	d512      	bpl.n	800e5e0 <__swsetup_r+0x5c>
 800e5ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5bc:	b141      	cbz	r1, 800e5d0 <__swsetup_r+0x4c>
 800e5be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5c2:	4299      	cmp	r1, r3
 800e5c4:	d002      	beq.n	800e5cc <__swsetup_r+0x48>
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f000 ff2c 	bl	800f424 <_free_r>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	6363      	str	r3, [r4, #52]	; 0x34
 800e5d0:	89a3      	ldrh	r3, [r4, #12]
 800e5d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5d6:	81a3      	strh	r3, [r4, #12]
 800e5d8:	2300      	movs	r3, #0
 800e5da:	6063      	str	r3, [r4, #4]
 800e5dc:	6923      	ldr	r3, [r4, #16]
 800e5de:	6023      	str	r3, [r4, #0]
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	f043 0308 	orr.w	r3, r3, #8
 800e5e6:	81a3      	strh	r3, [r4, #12]
 800e5e8:	6923      	ldr	r3, [r4, #16]
 800e5ea:	b94b      	cbnz	r3, 800e600 <__swsetup_r+0x7c>
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5f6:	d003      	beq.n	800e600 <__swsetup_r+0x7c>
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f001 fda6 	bl	801014c <__smakebuf_r>
 800e600:	89a0      	ldrh	r0, [r4, #12]
 800e602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e606:	f010 0301 	ands.w	r3, r0, #1
 800e60a:	d00a      	beq.n	800e622 <__swsetup_r+0x9e>
 800e60c:	2300      	movs	r3, #0
 800e60e:	60a3      	str	r3, [r4, #8]
 800e610:	6963      	ldr	r3, [r4, #20]
 800e612:	425b      	negs	r3, r3
 800e614:	61a3      	str	r3, [r4, #24]
 800e616:	6923      	ldr	r3, [r4, #16]
 800e618:	b943      	cbnz	r3, 800e62c <__swsetup_r+0xa8>
 800e61a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e61e:	d1c4      	bne.n	800e5aa <__swsetup_r+0x26>
 800e620:	bd38      	pop	{r3, r4, r5, pc}
 800e622:	0781      	lsls	r1, r0, #30
 800e624:	bf58      	it	pl
 800e626:	6963      	ldrpl	r3, [r4, #20]
 800e628:	60a3      	str	r3, [r4, #8]
 800e62a:	e7f4      	b.n	800e616 <__swsetup_r+0x92>
 800e62c:	2000      	movs	r0, #0
 800e62e:	e7f7      	b.n	800e620 <__swsetup_r+0x9c>
 800e630:	2000006c 	.word	0x2000006c

0800e634 <memset>:
 800e634:	4402      	add	r2, r0
 800e636:	4603      	mov	r3, r0
 800e638:	4293      	cmp	r3, r2
 800e63a:	d100      	bne.n	800e63e <memset+0xa>
 800e63c:	4770      	bx	lr
 800e63e:	f803 1b01 	strb.w	r1, [r3], #1
 800e642:	e7f9      	b.n	800e638 <memset+0x4>

0800e644 <_localeconv_r>:
 800e644:	4800      	ldr	r0, [pc, #0]	; (800e648 <_localeconv_r+0x4>)
 800e646:	4770      	bx	lr
 800e648:	20000160 	.word	0x20000160

0800e64c <_close_r>:
 800e64c:	b538      	push	{r3, r4, r5, lr}
 800e64e:	4d06      	ldr	r5, [pc, #24]	; (800e668 <_close_r+0x1c>)
 800e650:	2300      	movs	r3, #0
 800e652:	4604      	mov	r4, r0
 800e654:	4608      	mov	r0, r1
 800e656:	602b      	str	r3, [r5, #0]
 800e658:	f7f7 f975 	bl	8005946 <_close>
 800e65c:	1c43      	adds	r3, r0, #1
 800e65e:	d102      	bne.n	800e666 <_close_r+0x1a>
 800e660:	682b      	ldr	r3, [r5, #0]
 800e662:	b103      	cbz	r3, 800e666 <_close_r+0x1a>
 800e664:	6023      	str	r3, [r4, #0]
 800e666:	bd38      	pop	{r3, r4, r5, pc}
 800e668:	20000fbc 	.word	0x20000fbc

0800e66c <_lseek_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d07      	ldr	r5, [pc, #28]	; (800e68c <_lseek_r+0x20>)
 800e670:	4604      	mov	r4, r0
 800e672:	4608      	mov	r0, r1
 800e674:	4611      	mov	r1, r2
 800e676:	2200      	movs	r2, #0
 800e678:	602a      	str	r2, [r5, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	f7f7 f98a 	bl	8005994 <_lseek>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d102      	bne.n	800e68a <_lseek_r+0x1e>
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	b103      	cbz	r3, 800e68a <_lseek_r+0x1e>
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	20000fbc 	.word	0x20000fbc

0800e690 <_read_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4d07      	ldr	r5, [pc, #28]	; (800e6b0 <_read_r+0x20>)
 800e694:	4604      	mov	r4, r0
 800e696:	4608      	mov	r0, r1
 800e698:	4611      	mov	r1, r2
 800e69a:	2200      	movs	r2, #0
 800e69c:	602a      	str	r2, [r5, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	f7f7 f934 	bl	800590c <_read>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_read_r+0x1e>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_read_r+0x1e>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	20000fbc 	.word	0x20000fbc

0800e6b4 <_write_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4d07      	ldr	r5, [pc, #28]	; (800e6d4 <_write_r+0x20>)
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	4608      	mov	r0, r1
 800e6bc:	4611      	mov	r1, r2
 800e6be:	2200      	movs	r2, #0
 800e6c0:	602a      	str	r2, [r5, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f7f4 fc02 	bl	8002ecc <_write>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	d102      	bne.n	800e6d2 <_write_r+0x1e>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	b103      	cbz	r3, 800e6d2 <_write_r+0x1e>
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	20000fbc 	.word	0x20000fbc

0800e6d8 <__errno>:
 800e6d8:	4b01      	ldr	r3, [pc, #4]	; (800e6e0 <__errno+0x8>)
 800e6da:	6818      	ldr	r0, [r3, #0]
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	2000006c 	.word	0x2000006c

0800e6e4 <__libc_init_array>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	4d0d      	ldr	r5, [pc, #52]	; (800e71c <__libc_init_array+0x38>)
 800e6e8:	4c0d      	ldr	r4, [pc, #52]	; (800e720 <__libc_init_array+0x3c>)
 800e6ea:	1b64      	subs	r4, r4, r5
 800e6ec:	10a4      	asrs	r4, r4, #2
 800e6ee:	2600      	movs	r6, #0
 800e6f0:	42a6      	cmp	r6, r4
 800e6f2:	d109      	bne.n	800e708 <__libc_init_array+0x24>
 800e6f4:	4d0b      	ldr	r5, [pc, #44]	; (800e724 <__libc_init_array+0x40>)
 800e6f6:	4c0c      	ldr	r4, [pc, #48]	; (800e728 <__libc_init_array+0x44>)
 800e6f8:	f002 fef8 	bl	80114ec <_init>
 800e6fc:	1b64      	subs	r4, r4, r5
 800e6fe:	10a4      	asrs	r4, r4, #2
 800e700:	2600      	movs	r6, #0
 800e702:	42a6      	cmp	r6, r4
 800e704:	d105      	bne.n	800e712 <__libc_init_array+0x2e>
 800e706:	bd70      	pop	{r4, r5, r6, pc}
 800e708:	f855 3b04 	ldr.w	r3, [r5], #4
 800e70c:	4798      	blx	r3
 800e70e:	3601      	adds	r6, #1
 800e710:	e7ee      	b.n	800e6f0 <__libc_init_array+0xc>
 800e712:	f855 3b04 	ldr.w	r3, [r5], #4
 800e716:	4798      	blx	r3
 800e718:	3601      	adds	r6, #1
 800e71a:	e7f2      	b.n	800e702 <__libc_init_array+0x1e>
 800e71c:	08011b98 	.word	0x08011b98
 800e720:	08011b98 	.word	0x08011b98
 800e724:	08011b98 	.word	0x08011b98
 800e728:	08011b9c 	.word	0x08011b9c

0800e72c <__retarget_lock_acquire_recursive>:
 800e72c:	4770      	bx	lr

0800e72e <__retarget_lock_release_recursive>:
 800e72e:	4770      	bx	lr

0800e730 <quorem>:
 800e730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e734:	6903      	ldr	r3, [r0, #16]
 800e736:	690c      	ldr	r4, [r1, #16]
 800e738:	42a3      	cmp	r3, r4
 800e73a:	4607      	mov	r7, r0
 800e73c:	db7e      	blt.n	800e83c <quorem+0x10c>
 800e73e:	3c01      	subs	r4, #1
 800e740:	f101 0814 	add.w	r8, r1, #20
 800e744:	f100 0514 	add.w	r5, r0, #20
 800e748:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e74c:	9301      	str	r3, [sp, #4]
 800e74e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e756:	3301      	adds	r3, #1
 800e758:	429a      	cmp	r2, r3
 800e75a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e75e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e762:	fbb2 f6f3 	udiv	r6, r2, r3
 800e766:	d331      	bcc.n	800e7cc <quorem+0x9c>
 800e768:	f04f 0e00 	mov.w	lr, #0
 800e76c:	4640      	mov	r0, r8
 800e76e:	46ac      	mov	ip, r5
 800e770:	46f2      	mov	sl, lr
 800e772:	f850 2b04 	ldr.w	r2, [r0], #4
 800e776:	b293      	uxth	r3, r2
 800e778:	fb06 e303 	mla	r3, r6, r3, lr
 800e77c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e780:	0c1a      	lsrs	r2, r3, #16
 800e782:	b29b      	uxth	r3, r3
 800e784:	ebaa 0303 	sub.w	r3, sl, r3
 800e788:	f8dc a000 	ldr.w	sl, [ip]
 800e78c:	fa13 f38a 	uxtah	r3, r3, sl
 800e790:	fb06 220e 	mla	r2, r6, lr, r2
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	9b00      	ldr	r3, [sp, #0]
 800e798:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e79c:	b292      	uxth	r2, r2
 800e79e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7a6:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7aa:	4581      	cmp	r9, r0
 800e7ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7b0:	f84c 3b04 	str.w	r3, [ip], #4
 800e7b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7b8:	d2db      	bcs.n	800e772 <quorem+0x42>
 800e7ba:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7be:	b92b      	cbnz	r3, 800e7cc <quorem+0x9c>
 800e7c0:	9b01      	ldr	r3, [sp, #4]
 800e7c2:	3b04      	subs	r3, #4
 800e7c4:	429d      	cmp	r5, r3
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	d32c      	bcc.n	800e824 <quorem+0xf4>
 800e7ca:	613c      	str	r4, [r7, #16]
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f001 f9a5 	bl	800fb1c <__mcmp>
 800e7d2:	2800      	cmp	r0, #0
 800e7d4:	db22      	blt.n	800e81c <quorem+0xec>
 800e7d6:	3601      	adds	r6, #1
 800e7d8:	4629      	mov	r1, r5
 800e7da:	2000      	movs	r0, #0
 800e7dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7e0:	f8d1 c000 	ldr.w	ip, [r1]
 800e7e4:	b293      	uxth	r3, r2
 800e7e6:	1ac3      	subs	r3, r0, r3
 800e7e8:	0c12      	lsrs	r2, r2, #16
 800e7ea:	fa13 f38c 	uxtah	r3, r3, ip
 800e7ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e7f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7fc:	45c1      	cmp	r9, r8
 800e7fe:	f841 3b04 	str.w	r3, [r1], #4
 800e802:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e806:	d2e9      	bcs.n	800e7dc <quorem+0xac>
 800e808:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e80c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e810:	b922      	cbnz	r2, 800e81c <quorem+0xec>
 800e812:	3b04      	subs	r3, #4
 800e814:	429d      	cmp	r5, r3
 800e816:	461a      	mov	r2, r3
 800e818:	d30a      	bcc.n	800e830 <quorem+0x100>
 800e81a:	613c      	str	r4, [r7, #16]
 800e81c:	4630      	mov	r0, r6
 800e81e:	b003      	add	sp, #12
 800e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e824:	6812      	ldr	r2, [r2, #0]
 800e826:	3b04      	subs	r3, #4
 800e828:	2a00      	cmp	r2, #0
 800e82a:	d1ce      	bne.n	800e7ca <quorem+0x9a>
 800e82c:	3c01      	subs	r4, #1
 800e82e:	e7c9      	b.n	800e7c4 <quorem+0x94>
 800e830:	6812      	ldr	r2, [r2, #0]
 800e832:	3b04      	subs	r3, #4
 800e834:	2a00      	cmp	r2, #0
 800e836:	d1f0      	bne.n	800e81a <quorem+0xea>
 800e838:	3c01      	subs	r4, #1
 800e83a:	e7eb      	b.n	800e814 <quorem+0xe4>
 800e83c:	2000      	movs	r0, #0
 800e83e:	e7ee      	b.n	800e81e <quorem+0xee>

0800e840 <_dtoa_r>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	ed2d 8b04 	vpush	{d8-d9}
 800e848:	69c5      	ldr	r5, [r0, #28]
 800e84a:	b093      	sub	sp, #76	; 0x4c
 800e84c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e850:	ec57 6b10 	vmov	r6, r7, d0
 800e854:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e858:	9107      	str	r1, [sp, #28]
 800e85a:	4604      	mov	r4, r0
 800e85c:	920a      	str	r2, [sp, #40]	; 0x28
 800e85e:	930d      	str	r3, [sp, #52]	; 0x34
 800e860:	b975      	cbnz	r5, 800e880 <_dtoa_r+0x40>
 800e862:	2010      	movs	r0, #16
 800e864:	f000 fe2a 	bl	800f4bc <malloc>
 800e868:	4602      	mov	r2, r0
 800e86a:	61e0      	str	r0, [r4, #28]
 800e86c:	b920      	cbnz	r0, 800e878 <_dtoa_r+0x38>
 800e86e:	4bae      	ldr	r3, [pc, #696]	; (800eb28 <_dtoa_r+0x2e8>)
 800e870:	21ef      	movs	r1, #239	; 0xef
 800e872:	48ae      	ldr	r0, [pc, #696]	; (800eb2c <_dtoa_r+0x2ec>)
 800e874:	f001 fce6 	bl	8010244 <__assert_func>
 800e878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e87c:	6005      	str	r5, [r0, #0]
 800e87e:	60c5      	str	r5, [r0, #12]
 800e880:	69e3      	ldr	r3, [r4, #28]
 800e882:	6819      	ldr	r1, [r3, #0]
 800e884:	b151      	cbz	r1, 800e89c <_dtoa_r+0x5c>
 800e886:	685a      	ldr	r2, [r3, #4]
 800e888:	604a      	str	r2, [r1, #4]
 800e88a:	2301      	movs	r3, #1
 800e88c:	4093      	lsls	r3, r2
 800e88e:	608b      	str	r3, [r1, #8]
 800e890:	4620      	mov	r0, r4
 800e892:	f000 ff07 	bl	800f6a4 <_Bfree>
 800e896:	69e3      	ldr	r3, [r4, #28]
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	1e3b      	subs	r3, r7, #0
 800e89e:	bfbb      	ittet	lt
 800e8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e8a4:	9303      	strlt	r3, [sp, #12]
 800e8a6:	2300      	movge	r3, #0
 800e8a8:	2201      	movlt	r2, #1
 800e8aa:	bfac      	ite	ge
 800e8ac:	f8c8 3000 	strge.w	r3, [r8]
 800e8b0:	f8c8 2000 	strlt.w	r2, [r8]
 800e8b4:	4b9e      	ldr	r3, [pc, #632]	; (800eb30 <_dtoa_r+0x2f0>)
 800e8b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e8ba:	ea33 0308 	bics.w	r3, r3, r8
 800e8be:	d11b      	bne.n	800e8f8 <_dtoa_r+0xb8>
 800e8c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8c6:	6013      	str	r3, [r2, #0]
 800e8c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e8cc:	4333      	orrs	r3, r6
 800e8ce:	f000 8593 	beq.w	800f3f8 <_dtoa_r+0xbb8>
 800e8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8d4:	b963      	cbnz	r3, 800e8f0 <_dtoa_r+0xb0>
 800e8d6:	4b97      	ldr	r3, [pc, #604]	; (800eb34 <_dtoa_r+0x2f4>)
 800e8d8:	e027      	b.n	800e92a <_dtoa_r+0xea>
 800e8da:	4b97      	ldr	r3, [pc, #604]	; (800eb38 <_dtoa_r+0x2f8>)
 800e8dc:	9300      	str	r3, [sp, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8e2:	6013      	str	r3, [r2, #0]
 800e8e4:	9800      	ldr	r0, [sp, #0]
 800e8e6:	b013      	add	sp, #76	; 0x4c
 800e8e8:	ecbd 8b04 	vpop	{d8-d9}
 800e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f0:	4b90      	ldr	r3, [pc, #576]	; (800eb34 <_dtoa_r+0x2f4>)
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	3303      	adds	r3, #3
 800e8f6:	e7f3      	b.n	800e8e0 <_dtoa_r+0xa0>
 800e8f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	ec51 0b17 	vmov	r0, r1, d7
 800e902:	eeb0 8a47 	vmov.f32	s16, s14
 800e906:	eef0 8a67 	vmov.f32	s17, s15
 800e90a:	2300      	movs	r3, #0
 800e90c:	f7f2 f904 	bl	8000b18 <__aeabi_dcmpeq>
 800e910:	4681      	mov	r9, r0
 800e912:	b160      	cbz	r0, 800e92e <_dtoa_r+0xee>
 800e914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e916:	2301      	movs	r3, #1
 800e918:	6013      	str	r3, [r2, #0]
 800e91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 8568 	beq.w	800f3f2 <_dtoa_r+0xbb2>
 800e922:	4b86      	ldr	r3, [pc, #536]	; (800eb3c <_dtoa_r+0x2fc>)
 800e924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e926:	6013      	str	r3, [r2, #0]
 800e928:	3b01      	subs	r3, #1
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	e7da      	b.n	800e8e4 <_dtoa_r+0xa4>
 800e92e:	aa10      	add	r2, sp, #64	; 0x40
 800e930:	a911      	add	r1, sp, #68	; 0x44
 800e932:	4620      	mov	r0, r4
 800e934:	eeb0 0a48 	vmov.f32	s0, s16
 800e938:	eef0 0a68 	vmov.f32	s1, s17
 800e93c:	f001 f994 	bl	800fc68 <__d2b>
 800e940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e944:	4682      	mov	sl, r0
 800e946:	2d00      	cmp	r5, #0
 800e948:	d07f      	beq.n	800ea4a <_dtoa_r+0x20a>
 800e94a:	ee18 3a90 	vmov	r3, s17
 800e94e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e952:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e956:	ec51 0b18 	vmov	r0, r1, d8
 800e95a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e95e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e962:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e966:	4619      	mov	r1, r3
 800e968:	2200      	movs	r2, #0
 800e96a:	4b75      	ldr	r3, [pc, #468]	; (800eb40 <_dtoa_r+0x300>)
 800e96c:	f7f1 fcb4 	bl	80002d8 <__aeabi_dsub>
 800e970:	a367      	add	r3, pc, #412	; (adr r3, 800eb10 <_dtoa_r+0x2d0>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	f7f1 fe67 	bl	8000648 <__aeabi_dmul>
 800e97a:	a367      	add	r3, pc, #412	; (adr r3, 800eb18 <_dtoa_r+0x2d8>)
 800e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e980:	f7f1 fcac 	bl	80002dc <__adddf3>
 800e984:	4606      	mov	r6, r0
 800e986:	4628      	mov	r0, r5
 800e988:	460f      	mov	r7, r1
 800e98a:	f7f1 fdf3 	bl	8000574 <__aeabi_i2d>
 800e98e:	a364      	add	r3, pc, #400	; (adr r3, 800eb20 <_dtoa_r+0x2e0>)
 800e990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e994:	f7f1 fe58 	bl	8000648 <__aeabi_dmul>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	4630      	mov	r0, r6
 800e99e:	4639      	mov	r1, r7
 800e9a0:	f7f1 fc9c 	bl	80002dc <__adddf3>
 800e9a4:	4606      	mov	r6, r0
 800e9a6:	460f      	mov	r7, r1
 800e9a8:	f7f2 f8fe 	bl	8000ba8 <__aeabi_d2iz>
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	4683      	mov	fp, r0
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	f7f2 f8b9 	bl	8000b2c <__aeabi_dcmplt>
 800e9ba:	b148      	cbz	r0, 800e9d0 <_dtoa_r+0x190>
 800e9bc:	4658      	mov	r0, fp
 800e9be:	f7f1 fdd9 	bl	8000574 <__aeabi_i2d>
 800e9c2:	4632      	mov	r2, r6
 800e9c4:	463b      	mov	r3, r7
 800e9c6:	f7f2 f8a7 	bl	8000b18 <__aeabi_dcmpeq>
 800e9ca:	b908      	cbnz	r0, 800e9d0 <_dtoa_r+0x190>
 800e9cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9d0:	f1bb 0f16 	cmp.w	fp, #22
 800e9d4:	d857      	bhi.n	800ea86 <_dtoa_r+0x246>
 800e9d6:	4b5b      	ldr	r3, [pc, #364]	; (800eb44 <_dtoa_r+0x304>)
 800e9d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	ec51 0b18 	vmov	r0, r1, d8
 800e9e4:	f7f2 f8a2 	bl	8000b2c <__aeabi_dcmplt>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d04e      	beq.n	800ea8a <_dtoa_r+0x24a>
 800e9ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	930c      	str	r3, [sp, #48]	; 0x30
 800e9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9f6:	1b5b      	subs	r3, r3, r5
 800e9f8:	1e5a      	subs	r2, r3, #1
 800e9fa:	bf45      	ittet	mi
 800e9fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800ea00:	9305      	strmi	r3, [sp, #20]
 800ea02:	2300      	movpl	r3, #0
 800ea04:	2300      	movmi	r3, #0
 800ea06:	9206      	str	r2, [sp, #24]
 800ea08:	bf54      	ite	pl
 800ea0a:	9305      	strpl	r3, [sp, #20]
 800ea0c:	9306      	strmi	r3, [sp, #24]
 800ea0e:	f1bb 0f00 	cmp.w	fp, #0
 800ea12:	db3c      	blt.n	800ea8e <_dtoa_r+0x24e>
 800ea14:	9b06      	ldr	r3, [sp, #24]
 800ea16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ea1a:	445b      	add	r3, fp
 800ea1c:	9306      	str	r3, [sp, #24]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	9308      	str	r3, [sp, #32]
 800ea22:	9b07      	ldr	r3, [sp, #28]
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	d868      	bhi.n	800eafa <_dtoa_r+0x2ba>
 800ea28:	2b05      	cmp	r3, #5
 800ea2a:	bfc4      	itt	gt
 800ea2c:	3b04      	subgt	r3, #4
 800ea2e:	9307      	strgt	r3, [sp, #28]
 800ea30:	9b07      	ldr	r3, [sp, #28]
 800ea32:	f1a3 0302 	sub.w	r3, r3, #2
 800ea36:	bfcc      	ite	gt
 800ea38:	2500      	movgt	r5, #0
 800ea3a:	2501      	movle	r5, #1
 800ea3c:	2b03      	cmp	r3, #3
 800ea3e:	f200 8085 	bhi.w	800eb4c <_dtoa_r+0x30c>
 800ea42:	e8df f003 	tbb	[pc, r3]
 800ea46:	3b2e      	.short	0x3b2e
 800ea48:	5839      	.short	0x5839
 800ea4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea4e:	441d      	add	r5, r3
 800ea50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea54:	2b20      	cmp	r3, #32
 800ea56:	bfc1      	itttt	gt
 800ea58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea5c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ea60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ea64:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ea68:	bfd6      	itet	le
 800ea6a:	f1c3 0320 	rsble	r3, r3, #32
 800ea6e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ea72:	fa06 f003 	lslle.w	r0, r6, r3
 800ea76:	f7f1 fd6d 	bl	8000554 <__aeabi_ui2d>
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ea80:	3d01      	subs	r5, #1
 800ea82:	920e      	str	r2, [sp, #56]	; 0x38
 800ea84:	e76f      	b.n	800e966 <_dtoa_r+0x126>
 800ea86:	2301      	movs	r3, #1
 800ea88:	e7b3      	b.n	800e9f2 <_dtoa_r+0x1b2>
 800ea8a:	900c      	str	r0, [sp, #48]	; 0x30
 800ea8c:	e7b2      	b.n	800e9f4 <_dtoa_r+0x1b4>
 800ea8e:	9b05      	ldr	r3, [sp, #20]
 800ea90:	eba3 030b 	sub.w	r3, r3, fp
 800ea94:	9305      	str	r3, [sp, #20]
 800ea96:	f1cb 0300 	rsb	r3, fp, #0
 800ea9a:	9308      	str	r3, [sp, #32]
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaa0:	e7bf      	b.n	800ea22 <_dtoa_r+0x1e2>
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	9309      	str	r3, [sp, #36]	; 0x24
 800eaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	dc52      	bgt.n	800eb52 <_dtoa_r+0x312>
 800eaac:	2301      	movs	r3, #1
 800eaae:	9301      	str	r3, [sp, #4]
 800eab0:	9304      	str	r3, [sp, #16]
 800eab2:	461a      	mov	r2, r3
 800eab4:	920a      	str	r2, [sp, #40]	; 0x28
 800eab6:	e00b      	b.n	800ead0 <_dtoa_r+0x290>
 800eab8:	2301      	movs	r3, #1
 800eaba:	e7f3      	b.n	800eaa4 <_dtoa_r+0x264>
 800eabc:	2300      	movs	r3, #0
 800eabe:	9309      	str	r3, [sp, #36]	; 0x24
 800eac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eac2:	445b      	add	r3, fp
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	3301      	adds	r3, #1
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	bfb8      	it	lt
 800eace:	2301      	movlt	r3, #1
 800ead0:	69e0      	ldr	r0, [r4, #28]
 800ead2:	2100      	movs	r1, #0
 800ead4:	2204      	movs	r2, #4
 800ead6:	f102 0614 	add.w	r6, r2, #20
 800eada:	429e      	cmp	r6, r3
 800eadc:	d93d      	bls.n	800eb5a <_dtoa_r+0x31a>
 800eade:	6041      	str	r1, [r0, #4]
 800eae0:	4620      	mov	r0, r4
 800eae2:	f000 fd9f 	bl	800f624 <_Balloc>
 800eae6:	9000      	str	r0, [sp, #0]
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d139      	bne.n	800eb60 <_dtoa_r+0x320>
 800eaec:	4b16      	ldr	r3, [pc, #88]	; (800eb48 <_dtoa_r+0x308>)
 800eaee:	4602      	mov	r2, r0
 800eaf0:	f240 11af 	movw	r1, #431	; 0x1af
 800eaf4:	e6bd      	b.n	800e872 <_dtoa_r+0x32>
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	e7e1      	b.n	800eabe <_dtoa_r+0x27e>
 800eafa:	2501      	movs	r5, #1
 800eafc:	2300      	movs	r3, #0
 800eafe:	9307      	str	r3, [sp, #28]
 800eb00:	9509      	str	r5, [sp, #36]	; 0x24
 800eb02:	f04f 33ff 	mov.w	r3, #4294967295
 800eb06:	9301      	str	r3, [sp, #4]
 800eb08:	9304      	str	r3, [sp, #16]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	2312      	movs	r3, #18
 800eb0e:	e7d1      	b.n	800eab4 <_dtoa_r+0x274>
 800eb10:	636f4361 	.word	0x636f4361
 800eb14:	3fd287a7 	.word	0x3fd287a7
 800eb18:	8b60c8b3 	.word	0x8b60c8b3
 800eb1c:	3fc68a28 	.word	0x3fc68a28
 800eb20:	509f79fb 	.word	0x509f79fb
 800eb24:	3fd34413 	.word	0x3fd34413
 800eb28:	08011681 	.word	0x08011681
 800eb2c:	08011698 	.word	0x08011698
 800eb30:	7ff00000 	.word	0x7ff00000
 800eb34:	0801167d 	.word	0x0801167d
 800eb38:	08011674 	.word	0x08011674
 800eb3c:	08011651 	.word	0x08011651
 800eb40:	3ff80000 	.word	0x3ff80000
 800eb44:	08011788 	.word	0x08011788
 800eb48:	080116f0 	.word	0x080116f0
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb50:	e7d7      	b.n	800eb02 <_dtoa_r+0x2c2>
 800eb52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	9304      	str	r3, [sp, #16]
 800eb58:	e7ba      	b.n	800ead0 <_dtoa_r+0x290>
 800eb5a:	3101      	adds	r1, #1
 800eb5c:	0052      	lsls	r2, r2, #1
 800eb5e:	e7ba      	b.n	800ead6 <_dtoa_r+0x296>
 800eb60:	69e3      	ldr	r3, [r4, #28]
 800eb62:	9a00      	ldr	r2, [sp, #0]
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	9b04      	ldr	r3, [sp, #16]
 800eb68:	2b0e      	cmp	r3, #14
 800eb6a:	f200 80a8 	bhi.w	800ecbe <_dtoa_r+0x47e>
 800eb6e:	2d00      	cmp	r5, #0
 800eb70:	f000 80a5 	beq.w	800ecbe <_dtoa_r+0x47e>
 800eb74:	f1bb 0f00 	cmp.w	fp, #0
 800eb78:	dd38      	ble.n	800ebec <_dtoa_r+0x3ac>
 800eb7a:	4bc0      	ldr	r3, [pc, #768]	; (800ee7c <_dtoa_r+0x63c>)
 800eb7c:	f00b 020f 	and.w	r2, fp, #15
 800eb80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800eb88:	e9d3 6700 	ldrd	r6, r7, [r3]
 800eb8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800eb90:	d019      	beq.n	800ebc6 <_dtoa_r+0x386>
 800eb92:	4bbb      	ldr	r3, [pc, #748]	; (800ee80 <_dtoa_r+0x640>)
 800eb94:	ec51 0b18 	vmov	r0, r1, d8
 800eb98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb9c:	f7f1 fe7e 	bl	800089c <__aeabi_ddiv>
 800eba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eba4:	f008 080f 	and.w	r8, r8, #15
 800eba8:	2503      	movs	r5, #3
 800ebaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ee80 <_dtoa_r+0x640>
 800ebae:	f1b8 0f00 	cmp.w	r8, #0
 800ebb2:	d10a      	bne.n	800ebca <_dtoa_r+0x38a>
 800ebb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebb8:	4632      	mov	r2, r6
 800ebba:	463b      	mov	r3, r7
 800ebbc:	f7f1 fe6e 	bl	800089c <__aeabi_ddiv>
 800ebc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebc4:	e02b      	b.n	800ec1e <_dtoa_r+0x3de>
 800ebc6:	2502      	movs	r5, #2
 800ebc8:	e7ef      	b.n	800ebaa <_dtoa_r+0x36a>
 800ebca:	f018 0f01 	tst.w	r8, #1
 800ebce:	d008      	beq.n	800ebe2 <_dtoa_r+0x3a2>
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ebd8:	f7f1 fd36 	bl	8000648 <__aeabi_dmul>
 800ebdc:	3501      	adds	r5, #1
 800ebde:	4606      	mov	r6, r0
 800ebe0:	460f      	mov	r7, r1
 800ebe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ebe6:	f109 0908 	add.w	r9, r9, #8
 800ebea:	e7e0      	b.n	800ebae <_dtoa_r+0x36e>
 800ebec:	f000 809f 	beq.w	800ed2e <_dtoa_r+0x4ee>
 800ebf0:	f1cb 0600 	rsb	r6, fp, #0
 800ebf4:	4ba1      	ldr	r3, [pc, #644]	; (800ee7c <_dtoa_r+0x63c>)
 800ebf6:	4fa2      	ldr	r7, [pc, #648]	; (800ee80 <_dtoa_r+0x640>)
 800ebf8:	f006 020f 	and.w	r2, r6, #15
 800ebfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	ec51 0b18 	vmov	r0, r1, d8
 800ec08:	f7f1 fd1e 	bl	8000648 <__aeabi_dmul>
 800ec0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec10:	1136      	asrs	r6, r6, #4
 800ec12:	2300      	movs	r3, #0
 800ec14:	2502      	movs	r5, #2
 800ec16:	2e00      	cmp	r6, #0
 800ec18:	d17e      	bne.n	800ed18 <_dtoa_r+0x4d8>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1d0      	bne.n	800ebc0 <_dtoa_r+0x380>
 800ec1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f000 8084 	beq.w	800ed32 <_dtoa_r+0x4f2>
 800ec2a:	4b96      	ldr	r3, [pc, #600]	; (800ee84 <_dtoa_r+0x644>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	4640      	mov	r0, r8
 800ec30:	4649      	mov	r1, r9
 800ec32:	f7f1 ff7b 	bl	8000b2c <__aeabi_dcmplt>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d07b      	beq.n	800ed32 <_dtoa_r+0x4f2>
 800ec3a:	9b04      	ldr	r3, [sp, #16]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d078      	beq.n	800ed32 <_dtoa_r+0x4f2>
 800ec40:	9b01      	ldr	r3, [sp, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	dd39      	ble.n	800ecba <_dtoa_r+0x47a>
 800ec46:	4b90      	ldr	r3, [pc, #576]	; (800ee88 <_dtoa_r+0x648>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	4649      	mov	r1, r9
 800ec4e:	f7f1 fcfb 	bl	8000648 <__aeabi_dmul>
 800ec52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec56:	9e01      	ldr	r6, [sp, #4]
 800ec58:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ec5c:	3501      	adds	r5, #1
 800ec5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ec62:	4628      	mov	r0, r5
 800ec64:	f7f1 fc86 	bl	8000574 <__aeabi_i2d>
 800ec68:	4642      	mov	r2, r8
 800ec6a:	464b      	mov	r3, r9
 800ec6c:	f7f1 fcec 	bl	8000648 <__aeabi_dmul>
 800ec70:	4b86      	ldr	r3, [pc, #536]	; (800ee8c <_dtoa_r+0x64c>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	f7f1 fb32 	bl	80002dc <__adddf3>
 800ec78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ec7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec80:	9303      	str	r3, [sp, #12]
 800ec82:	2e00      	cmp	r6, #0
 800ec84:	d158      	bne.n	800ed38 <_dtoa_r+0x4f8>
 800ec86:	4b82      	ldr	r3, [pc, #520]	; (800ee90 <_dtoa_r+0x650>)
 800ec88:	2200      	movs	r2, #0
 800ec8a:	4640      	mov	r0, r8
 800ec8c:	4649      	mov	r1, r9
 800ec8e:	f7f1 fb23 	bl	80002d8 <__aeabi_dsub>
 800ec92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec96:	4680      	mov	r8, r0
 800ec98:	4689      	mov	r9, r1
 800ec9a:	f7f1 ff65 	bl	8000b68 <__aeabi_dcmpgt>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	f040 8296 	bne.w	800f1d0 <_dtoa_r+0x990>
 800eca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eca8:	4640      	mov	r0, r8
 800ecaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecae:	4649      	mov	r1, r9
 800ecb0:	f7f1 ff3c 	bl	8000b2c <__aeabi_dcmplt>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	f040 8289 	bne.w	800f1cc <_dtoa_r+0x98c>
 800ecba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ecbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f2c0 814e 	blt.w	800ef62 <_dtoa_r+0x722>
 800ecc6:	f1bb 0f0e 	cmp.w	fp, #14
 800ecca:	f300 814a 	bgt.w	800ef62 <_dtoa_r+0x722>
 800ecce:	4b6b      	ldr	r3, [pc, #428]	; (800ee7c <_dtoa_r+0x63c>)
 800ecd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ecd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ecd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f280 80dc 	bge.w	800ee98 <_dtoa_r+0x658>
 800ece0:	9b04      	ldr	r3, [sp, #16]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f300 80d8 	bgt.w	800ee98 <_dtoa_r+0x658>
 800ece8:	f040 826f 	bne.w	800f1ca <_dtoa_r+0x98a>
 800ecec:	4b68      	ldr	r3, [pc, #416]	; (800ee90 <_dtoa_r+0x650>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	4640      	mov	r0, r8
 800ecf2:	4649      	mov	r1, r9
 800ecf4:	f7f1 fca8 	bl	8000648 <__aeabi_dmul>
 800ecf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecfc:	f7f1 ff2a 	bl	8000b54 <__aeabi_dcmpge>
 800ed00:	9e04      	ldr	r6, [sp, #16]
 800ed02:	4637      	mov	r7, r6
 800ed04:	2800      	cmp	r0, #0
 800ed06:	f040 8245 	bne.w	800f194 <_dtoa_r+0x954>
 800ed0a:	9d00      	ldr	r5, [sp, #0]
 800ed0c:	2331      	movs	r3, #49	; 0x31
 800ed0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ed12:	f10b 0b01 	add.w	fp, fp, #1
 800ed16:	e241      	b.n	800f19c <_dtoa_r+0x95c>
 800ed18:	07f2      	lsls	r2, r6, #31
 800ed1a:	d505      	bpl.n	800ed28 <_dtoa_r+0x4e8>
 800ed1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed20:	f7f1 fc92 	bl	8000648 <__aeabi_dmul>
 800ed24:	3501      	adds	r5, #1
 800ed26:	2301      	movs	r3, #1
 800ed28:	1076      	asrs	r6, r6, #1
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	e773      	b.n	800ec16 <_dtoa_r+0x3d6>
 800ed2e:	2502      	movs	r5, #2
 800ed30:	e775      	b.n	800ec1e <_dtoa_r+0x3de>
 800ed32:	9e04      	ldr	r6, [sp, #16]
 800ed34:	465f      	mov	r7, fp
 800ed36:	e792      	b.n	800ec5e <_dtoa_r+0x41e>
 800ed38:	9900      	ldr	r1, [sp, #0]
 800ed3a:	4b50      	ldr	r3, [pc, #320]	; (800ee7c <_dtoa_r+0x63c>)
 800ed3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed40:	4431      	add	r1, r6
 800ed42:	9102      	str	r1, [sp, #8]
 800ed44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed46:	eeb0 9a47 	vmov.f32	s18, s14
 800ed4a:	eef0 9a67 	vmov.f32	s19, s15
 800ed4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed56:	2900      	cmp	r1, #0
 800ed58:	d044      	beq.n	800ede4 <_dtoa_r+0x5a4>
 800ed5a:	494e      	ldr	r1, [pc, #312]	; (800ee94 <_dtoa_r+0x654>)
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	f7f1 fd9d 	bl	800089c <__aeabi_ddiv>
 800ed62:	ec53 2b19 	vmov	r2, r3, d9
 800ed66:	f7f1 fab7 	bl	80002d8 <__aeabi_dsub>
 800ed6a:	9d00      	ldr	r5, [sp, #0]
 800ed6c:	ec41 0b19 	vmov	d9, r0, r1
 800ed70:	4649      	mov	r1, r9
 800ed72:	4640      	mov	r0, r8
 800ed74:	f7f1 ff18 	bl	8000ba8 <__aeabi_d2iz>
 800ed78:	4606      	mov	r6, r0
 800ed7a:	f7f1 fbfb 	bl	8000574 <__aeabi_i2d>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4640      	mov	r0, r8
 800ed84:	4649      	mov	r1, r9
 800ed86:	f7f1 faa7 	bl	80002d8 <__aeabi_dsub>
 800ed8a:	3630      	adds	r6, #48	; 0x30
 800ed8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ed90:	ec53 2b19 	vmov	r2, r3, d9
 800ed94:	4680      	mov	r8, r0
 800ed96:	4689      	mov	r9, r1
 800ed98:	f7f1 fec8 	bl	8000b2c <__aeabi_dcmplt>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	d164      	bne.n	800ee6a <_dtoa_r+0x62a>
 800eda0:	4642      	mov	r2, r8
 800eda2:	464b      	mov	r3, r9
 800eda4:	4937      	ldr	r1, [pc, #220]	; (800ee84 <_dtoa_r+0x644>)
 800eda6:	2000      	movs	r0, #0
 800eda8:	f7f1 fa96 	bl	80002d8 <__aeabi_dsub>
 800edac:	ec53 2b19 	vmov	r2, r3, d9
 800edb0:	f7f1 febc 	bl	8000b2c <__aeabi_dcmplt>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	f040 80b6 	bne.w	800ef26 <_dtoa_r+0x6e6>
 800edba:	9b02      	ldr	r3, [sp, #8]
 800edbc:	429d      	cmp	r5, r3
 800edbe:	f43f af7c 	beq.w	800ecba <_dtoa_r+0x47a>
 800edc2:	4b31      	ldr	r3, [pc, #196]	; (800ee88 <_dtoa_r+0x648>)
 800edc4:	ec51 0b19 	vmov	r0, r1, d9
 800edc8:	2200      	movs	r2, #0
 800edca:	f7f1 fc3d 	bl	8000648 <__aeabi_dmul>
 800edce:	4b2e      	ldr	r3, [pc, #184]	; (800ee88 <_dtoa_r+0x648>)
 800edd0:	ec41 0b19 	vmov	d9, r0, r1
 800edd4:	2200      	movs	r2, #0
 800edd6:	4640      	mov	r0, r8
 800edd8:	4649      	mov	r1, r9
 800edda:	f7f1 fc35 	bl	8000648 <__aeabi_dmul>
 800edde:	4680      	mov	r8, r0
 800ede0:	4689      	mov	r9, r1
 800ede2:	e7c5      	b.n	800ed70 <_dtoa_r+0x530>
 800ede4:	ec51 0b17 	vmov	r0, r1, d7
 800ede8:	f7f1 fc2e 	bl	8000648 <__aeabi_dmul>
 800edec:	9b02      	ldr	r3, [sp, #8]
 800edee:	9d00      	ldr	r5, [sp, #0]
 800edf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800edf2:	ec41 0b19 	vmov	d9, r0, r1
 800edf6:	4649      	mov	r1, r9
 800edf8:	4640      	mov	r0, r8
 800edfa:	f7f1 fed5 	bl	8000ba8 <__aeabi_d2iz>
 800edfe:	4606      	mov	r6, r0
 800ee00:	f7f1 fbb8 	bl	8000574 <__aeabi_i2d>
 800ee04:	3630      	adds	r6, #48	; 0x30
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	f7f1 fa63 	bl	80002d8 <__aeabi_dsub>
 800ee12:	f805 6b01 	strb.w	r6, [r5], #1
 800ee16:	9b02      	ldr	r3, [sp, #8]
 800ee18:	429d      	cmp	r5, r3
 800ee1a:	4680      	mov	r8, r0
 800ee1c:	4689      	mov	r9, r1
 800ee1e:	f04f 0200 	mov.w	r2, #0
 800ee22:	d124      	bne.n	800ee6e <_dtoa_r+0x62e>
 800ee24:	4b1b      	ldr	r3, [pc, #108]	; (800ee94 <_dtoa_r+0x654>)
 800ee26:	ec51 0b19 	vmov	r0, r1, d9
 800ee2a:	f7f1 fa57 	bl	80002dc <__adddf3>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	4640      	mov	r0, r8
 800ee34:	4649      	mov	r1, r9
 800ee36:	f7f1 fe97 	bl	8000b68 <__aeabi_dcmpgt>
 800ee3a:	2800      	cmp	r0, #0
 800ee3c:	d173      	bne.n	800ef26 <_dtoa_r+0x6e6>
 800ee3e:	ec53 2b19 	vmov	r2, r3, d9
 800ee42:	4914      	ldr	r1, [pc, #80]	; (800ee94 <_dtoa_r+0x654>)
 800ee44:	2000      	movs	r0, #0
 800ee46:	f7f1 fa47 	bl	80002d8 <__aeabi_dsub>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	4640      	mov	r0, r8
 800ee50:	4649      	mov	r1, r9
 800ee52:	f7f1 fe6b 	bl	8000b2c <__aeabi_dcmplt>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	f43f af2f 	beq.w	800ecba <_dtoa_r+0x47a>
 800ee5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee5e:	1e6b      	subs	r3, r5, #1
 800ee60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee66:	2b30      	cmp	r3, #48	; 0x30
 800ee68:	d0f8      	beq.n	800ee5c <_dtoa_r+0x61c>
 800ee6a:	46bb      	mov	fp, r7
 800ee6c:	e04a      	b.n	800ef04 <_dtoa_r+0x6c4>
 800ee6e:	4b06      	ldr	r3, [pc, #24]	; (800ee88 <_dtoa_r+0x648>)
 800ee70:	f7f1 fbea 	bl	8000648 <__aeabi_dmul>
 800ee74:	4680      	mov	r8, r0
 800ee76:	4689      	mov	r9, r1
 800ee78:	e7bd      	b.n	800edf6 <_dtoa_r+0x5b6>
 800ee7a:	bf00      	nop
 800ee7c:	08011788 	.word	0x08011788
 800ee80:	08011760 	.word	0x08011760
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	40240000 	.word	0x40240000
 800ee8c:	401c0000 	.word	0x401c0000
 800ee90:	40140000 	.word	0x40140000
 800ee94:	3fe00000 	.word	0x3fe00000
 800ee98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ee9c:	9d00      	ldr	r5, [sp, #0]
 800ee9e:	4642      	mov	r2, r8
 800eea0:	464b      	mov	r3, r9
 800eea2:	4630      	mov	r0, r6
 800eea4:	4639      	mov	r1, r7
 800eea6:	f7f1 fcf9 	bl	800089c <__aeabi_ddiv>
 800eeaa:	f7f1 fe7d 	bl	8000ba8 <__aeabi_d2iz>
 800eeae:	9001      	str	r0, [sp, #4]
 800eeb0:	f7f1 fb60 	bl	8000574 <__aeabi_i2d>
 800eeb4:	4642      	mov	r2, r8
 800eeb6:	464b      	mov	r3, r9
 800eeb8:	f7f1 fbc6 	bl	8000648 <__aeabi_dmul>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	f7f1 fa08 	bl	80002d8 <__aeabi_dsub>
 800eec8:	9e01      	ldr	r6, [sp, #4]
 800eeca:	9f04      	ldr	r7, [sp, #16]
 800eecc:	3630      	adds	r6, #48	; 0x30
 800eece:	f805 6b01 	strb.w	r6, [r5], #1
 800eed2:	9e00      	ldr	r6, [sp, #0]
 800eed4:	1bae      	subs	r6, r5, r6
 800eed6:	42b7      	cmp	r7, r6
 800eed8:	4602      	mov	r2, r0
 800eeda:	460b      	mov	r3, r1
 800eedc:	d134      	bne.n	800ef48 <_dtoa_r+0x708>
 800eede:	f7f1 f9fd 	bl	80002dc <__adddf3>
 800eee2:	4642      	mov	r2, r8
 800eee4:	464b      	mov	r3, r9
 800eee6:	4606      	mov	r6, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	f7f1 fe3d 	bl	8000b68 <__aeabi_dcmpgt>
 800eeee:	b9c8      	cbnz	r0, 800ef24 <_dtoa_r+0x6e4>
 800eef0:	4642      	mov	r2, r8
 800eef2:	464b      	mov	r3, r9
 800eef4:	4630      	mov	r0, r6
 800eef6:	4639      	mov	r1, r7
 800eef8:	f7f1 fe0e 	bl	8000b18 <__aeabi_dcmpeq>
 800eefc:	b110      	cbz	r0, 800ef04 <_dtoa_r+0x6c4>
 800eefe:	9b01      	ldr	r3, [sp, #4]
 800ef00:	07db      	lsls	r3, r3, #31
 800ef02:	d40f      	bmi.n	800ef24 <_dtoa_r+0x6e4>
 800ef04:	4651      	mov	r1, sl
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 fbcc 	bl	800f6a4 <_Bfree>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef10:	702b      	strb	r3, [r5, #0]
 800ef12:	f10b 0301 	add.w	r3, fp, #1
 800ef16:	6013      	str	r3, [r2, #0]
 800ef18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f43f ace2 	beq.w	800e8e4 <_dtoa_r+0xa4>
 800ef20:	601d      	str	r5, [r3, #0]
 800ef22:	e4df      	b.n	800e8e4 <_dtoa_r+0xa4>
 800ef24:	465f      	mov	r7, fp
 800ef26:	462b      	mov	r3, r5
 800ef28:	461d      	mov	r5, r3
 800ef2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef2e:	2a39      	cmp	r2, #57	; 0x39
 800ef30:	d106      	bne.n	800ef40 <_dtoa_r+0x700>
 800ef32:	9a00      	ldr	r2, [sp, #0]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d1f7      	bne.n	800ef28 <_dtoa_r+0x6e8>
 800ef38:	9900      	ldr	r1, [sp, #0]
 800ef3a:	2230      	movs	r2, #48	; 0x30
 800ef3c:	3701      	adds	r7, #1
 800ef3e:	700a      	strb	r2, [r1, #0]
 800ef40:	781a      	ldrb	r2, [r3, #0]
 800ef42:	3201      	adds	r2, #1
 800ef44:	701a      	strb	r2, [r3, #0]
 800ef46:	e790      	b.n	800ee6a <_dtoa_r+0x62a>
 800ef48:	4ba3      	ldr	r3, [pc, #652]	; (800f1d8 <_dtoa_r+0x998>)
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f7f1 fb7c 	bl	8000648 <__aeabi_dmul>
 800ef50:	2200      	movs	r2, #0
 800ef52:	2300      	movs	r3, #0
 800ef54:	4606      	mov	r6, r0
 800ef56:	460f      	mov	r7, r1
 800ef58:	f7f1 fdde 	bl	8000b18 <__aeabi_dcmpeq>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d09e      	beq.n	800ee9e <_dtoa_r+0x65e>
 800ef60:	e7d0      	b.n	800ef04 <_dtoa_r+0x6c4>
 800ef62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	f000 80ca 	beq.w	800f0fe <_dtoa_r+0x8be>
 800ef6a:	9a07      	ldr	r2, [sp, #28]
 800ef6c:	2a01      	cmp	r2, #1
 800ef6e:	f300 80ad 	bgt.w	800f0cc <_dtoa_r+0x88c>
 800ef72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef74:	2a00      	cmp	r2, #0
 800ef76:	f000 80a5 	beq.w	800f0c4 <_dtoa_r+0x884>
 800ef7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef7e:	9e08      	ldr	r6, [sp, #32]
 800ef80:	9d05      	ldr	r5, [sp, #20]
 800ef82:	9a05      	ldr	r2, [sp, #20]
 800ef84:	441a      	add	r2, r3
 800ef86:	9205      	str	r2, [sp, #20]
 800ef88:	9a06      	ldr	r2, [sp, #24]
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	441a      	add	r2, r3
 800ef8e:	4620      	mov	r0, r4
 800ef90:	9206      	str	r2, [sp, #24]
 800ef92:	f000 fc3d 	bl	800f810 <__i2b>
 800ef96:	4607      	mov	r7, r0
 800ef98:	b165      	cbz	r5, 800efb4 <_dtoa_r+0x774>
 800ef9a:	9b06      	ldr	r3, [sp, #24]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	dd09      	ble.n	800efb4 <_dtoa_r+0x774>
 800efa0:	42ab      	cmp	r3, r5
 800efa2:	9a05      	ldr	r2, [sp, #20]
 800efa4:	bfa8      	it	ge
 800efa6:	462b      	movge	r3, r5
 800efa8:	1ad2      	subs	r2, r2, r3
 800efaa:	9205      	str	r2, [sp, #20]
 800efac:	9a06      	ldr	r2, [sp, #24]
 800efae:	1aed      	subs	r5, r5, r3
 800efb0:	1ad3      	subs	r3, r2, r3
 800efb2:	9306      	str	r3, [sp, #24]
 800efb4:	9b08      	ldr	r3, [sp, #32]
 800efb6:	b1f3      	cbz	r3, 800eff6 <_dtoa_r+0x7b6>
 800efb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 80a3 	beq.w	800f106 <_dtoa_r+0x8c6>
 800efc0:	2e00      	cmp	r6, #0
 800efc2:	dd10      	ble.n	800efe6 <_dtoa_r+0x7a6>
 800efc4:	4639      	mov	r1, r7
 800efc6:	4632      	mov	r2, r6
 800efc8:	4620      	mov	r0, r4
 800efca:	f000 fce1 	bl	800f990 <__pow5mult>
 800efce:	4652      	mov	r2, sl
 800efd0:	4601      	mov	r1, r0
 800efd2:	4607      	mov	r7, r0
 800efd4:	4620      	mov	r0, r4
 800efd6:	f000 fc31 	bl	800f83c <__multiply>
 800efda:	4651      	mov	r1, sl
 800efdc:	4680      	mov	r8, r0
 800efde:	4620      	mov	r0, r4
 800efe0:	f000 fb60 	bl	800f6a4 <_Bfree>
 800efe4:	46c2      	mov	sl, r8
 800efe6:	9b08      	ldr	r3, [sp, #32]
 800efe8:	1b9a      	subs	r2, r3, r6
 800efea:	d004      	beq.n	800eff6 <_dtoa_r+0x7b6>
 800efec:	4651      	mov	r1, sl
 800efee:	4620      	mov	r0, r4
 800eff0:	f000 fcce 	bl	800f990 <__pow5mult>
 800eff4:	4682      	mov	sl, r0
 800eff6:	2101      	movs	r1, #1
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 fc09 	bl	800f810 <__i2b>
 800effe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f000:	2b00      	cmp	r3, #0
 800f002:	4606      	mov	r6, r0
 800f004:	f340 8081 	ble.w	800f10a <_dtoa_r+0x8ca>
 800f008:	461a      	mov	r2, r3
 800f00a:	4601      	mov	r1, r0
 800f00c:	4620      	mov	r0, r4
 800f00e:	f000 fcbf 	bl	800f990 <__pow5mult>
 800f012:	9b07      	ldr	r3, [sp, #28]
 800f014:	2b01      	cmp	r3, #1
 800f016:	4606      	mov	r6, r0
 800f018:	dd7a      	ble.n	800f110 <_dtoa_r+0x8d0>
 800f01a:	f04f 0800 	mov.w	r8, #0
 800f01e:	6933      	ldr	r3, [r6, #16]
 800f020:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f024:	6918      	ldr	r0, [r3, #16]
 800f026:	f000 fba5 	bl	800f774 <__hi0bits>
 800f02a:	f1c0 0020 	rsb	r0, r0, #32
 800f02e:	9b06      	ldr	r3, [sp, #24]
 800f030:	4418      	add	r0, r3
 800f032:	f010 001f 	ands.w	r0, r0, #31
 800f036:	f000 8094 	beq.w	800f162 <_dtoa_r+0x922>
 800f03a:	f1c0 0320 	rsb	r3, r0, #32
 800f03e:	2b04      	cmp	r3, #4
 800f040:	f340 8085 	ble.w	800f14e <_dtoa_r+0x90e>
 800f044:	9b05      	ldr	r3, [sp, #20]
 800f046:	f1c0 001c 	rsb	r0, r0, #28
 800f04a:	4403      	add	r3, r0
 800f04c:	9305      	str	r3, [sp, #20]
 800f04e:	9b06      	ldr	r3, [sp, #24]
 800f050:	4403      	add	r3, r0
 800f052:	4405      	add	r5, r0
 800f054:	9306      	str	r3, [sp, #24]
 800f056:	9b05      	ldr	r3, [sp, #20]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dd05      	ble.n	800f068 <_dtoa_r+0x828>
 800f05c:	4651      	mov	r1, sl
 800f05e:	461a      	mov	r2, r3
 800f060:	4620      	mov	r0, r4
 800f062:	f000 fcef 	bl	800fa44 <__lshift>
 800f066:	4682      	mov	sl, r0
 800f068:	9b06      	ldr	r3, [sp, #24]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	dd05      	ble.n	800f07a <_dtoa_r+0x83a>
 800f06e:	4631      	mov	r1, r6
 800f070:	461a      	mov	r2, r3
 800f072:	4620      	mov	r0, r4
 800f074:	f000 fce6 	bl	800fa44 <__lshift>
 800f078:	4606      	mov	r6, r0
 800f07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d072      	beq.n	800f166 <_dtoa_r+0x926>
 800f080:	4631      	mov	r1, r6
 800f082:	4650      	mov	r0, sl
 800f084:	f000 fd4a 	bl	800fb1c <__mcmp>
 800f088:	2800      	cmp	r0, #0
 800f08a:	da6c      	bge.n	800f166 <_dtoa_r+0x926>
 800f08c:	2300      	movs	r3, #0
 800f08e:	4651      	mov	r1, sl
 800f090:	220a      	movs	r2, #10
 800f092:	4620      	mov	r0, r4
 800f094:	f000 fb28 	bl	800f6e8 <__multadd>
 800f098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f09e:	4682      	mov	sl, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 81b0 	beq.w	800f406 <_dtoa_r+0xbc6>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	4639      	mov	r1, r7
 800f0aa:	220a      	movs	r2, #10
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f000 fb1b 	bl	800f6e8 <__multadd>
 800f0b2:	9b01      	ldr	r3, [sp, #4]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	4607      	mov	r7, r0
 800f0b8:	f300 8096 	bgt.w	800f1e8 <_dtoa_r+0x9a8>
 800f0bc:	9b07      	ldr	r3, [sp, #28]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	dc59      	bgt.n	800f176 <_dtoa_r+0x936>
 800f0c2:	e091      	b.n	800f1e8 <_dtoa_r+0x9a8>
 800f0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f0ca:	e758      	b.n	800ef7e <_dtoa_r+0x73e>
 800f0cc:	9b04      	ldr	r3, [sp, #16]
 800f0ce:	1e5e      	subs	r6, r3, #1
 800f0d0:	9b08      	ldr	r3, [sp, #32]
 800f0d2:	42b3      	cmp	r3, r6
 800f0d4:	bfbf      	itttt	lt
 800f0d6:	9b08      	ldrlt	r3, [sp, #32]
 800f0d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f0da:	9608      	strlt	r6, [sp, #32]
 800f0dc:	1af3      	sublt	r3, r6, r3
 800f0de:	bfb4      	ite	lt
 800f0e0:	18d2      	addlt	r2, r2, r3
 800f0e2:	1b9e      	subge	r6, r3, r6
 800f0e4:	9b04      	ldr	r3, [sp, #16]
 800f0e6:	bfbc      	itt	lt
 800f0e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f0ea:	2600      	movlt	r6, #0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bfb7      	itett	lt
 800f0f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f0f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f0f8:	1a9d      	sublt	r5, r3, r2
 800f0fa:	2300      	movlt	r3, #0
 800f0fc:	e741      	b.n	800ef82 <_dtoa_r+0x742>
 800f0fe:	9e08      	ldr	r6, [sp, #32]
 800f100:	9d05      	ldr	r5, [sp, #20]
 800f102:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f104:	e748      	b.n	800ef98 <_dtoa_r+0x758>
 800f106:	9a08      	ldr	r2, [sp, #32]
 800f108:	e770      	b.n	800efec <_dtoa_r+0x7ac>
 800f10a:	9b07      	ldr	r3, [sp, #28]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	dc19      	bgt.n	800f144 <_dtoa_r+0x904>
 800f110:	9b02      	ldr	r3, [sp, #8]
 800f112:	b9bb      	cbnz	r3, 800f144 <_dtoa_r+0x904>
 800f114:	9b03      	ldr	r3, [sp, #12]
 800f116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f11a:	b99b      	cbnz	r3, 800f144 <_dtoa_r+0x904>
 800f11c:	9b03      	ldr	r3, [sp, #12]
 800f11e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f122:	0d1b      	lsrs	r3, r3, #20
 800f124:	051b      	lsls	r3, r3, #20
 800f126:	b183      	cbz	r3, 800f14a <_dtoa_r+0x90a>
 800f128:	9b05      	ldr	r3, [sp, #20]
 800f12a:	3301      	adds	r3, #1
 800f12c:	9305      	str	r3, [sp, #20]
 800f12e:	9b06      	ldr	r3, [sp, #24]
 800f130:	3301      	adds	r3, #1
 800f132:	9306      	str	r3, [sp, #24]
 800f134:	f04f 0801 	mov.w	r8, #1
 800f138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f47f af6f 	bne.w	800f01e <_dtoa_r+0x7de>
 800f140:	2001      	movs	r0, #1
 800f142:	e774      	b.n	800f02e <_dtoa_r+0x7ee>
 800f144:	f04f 0800 	mov.w	r8, #0
 800f148:	e7f6      	b.n	800f138 <_dtoa_r+0x8f8>
 800f14a:	4698      	mov	r8, r3
 800f14c:	e7f4      	b.n	800f138 <_dtoa_r+0x8f8>
 800f14e:	d082      	beq.n	800f056 <_dtoa_r+0x816>
 800f150:	9a05      	ldr	r2, [sp, #20]
 800f152:	331c      	adds	r3, #28
 800f154:	441a      	add	r2, r3
 800f156:	9205      	str	r2, [sp, #20]
 800f158:	9a06      	ldr	r2, [sp, #24]
 800f15a:	441a      	add	r2, r3
 800f15c:	441d      	add	r5, r3
 800f15e:	9206      	str	r2, [sp, #24]
 800f160:	e779      	b.n	800f056 <_dtoa_r+0x816>
 800f162:	4603      	mov	r3, r0
 800f164:	e7f4      	b.n	800f150 <_dtoa_r+0x910>
 800f166:	9b04      	ldr	r3, [sp, #16]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	dc37      	bgt.n	800f1dc <_dtoa_r+0x99c>
 800f16c:	9b07      	ldr	r3, [sp, #28]
 800f16e:	2b02      	cmp	r3, #2
 800f170:	dd34      	ble.n	800f1dc <_dtoa_r+0x99c>
 800f172:	9b04      	ldr	r3, [sp, #16]
 800f174:	9301      	str	r3, [sp, #4]
 800f176:	9b01      	ldr	r3, [sp, #4]
 800f178:	b963      	cbnz	r3, 800f194 <_dtoa_r+0x954>
 800f17a:	4631      	mov	r1, r6
 800f17c:	2205      	movs	r2, #5
 800f17e:	4620      	mov	r0, r4
 800f180:	f000 fab2 	bl	800f6e8 <__multadd>
 800f184:	4601      	mov	r1, r0
 800f186:	4606      	mov	r6, r0
 800f188:	4650      	mov	r0, sl
 800f18a:	f000 fcc7 	bl	800fb1c <__mcmp>
 800f18e:	2800      	cmp	r0, #0
 800f190:	f73f adbb 	bgt.w	800ed0a <_dtoa_r+0x4ca>
 800f194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f196:	9d00      	ldr	r5, [sp, #0]
 800f198:	ea6f 0b03 	mvn.w	fp, r3
 800f19c:	f04f 0800 	mov.w	r8, #0
 800f1a0:	4631      	mov	r1, r6
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f000 fa7e 	bl	800f6a4 <_Bfree>
 800f1a8:	2f00      	cmp	r7, #0
 800f1aa:	f43f aeab 	beq.w	800ef04 <_dtoa_r+0x6c4>
 800f1ae:	f1b8 0f00 	cmp.w	r8, #0
 800f1b2:	d005      	beq.n	800f1c0 <_dtoa_r+0x980>
 800f1b4:	45b8      	cmp	r8, r7
 800f1b6:	d003      	beq.n	800f1c0 <_dtoa_r+0x980>
 800f1b8:	4641      	mov	r1, r8
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f000 fa72 	bl	800f6a4 <_Bfree>
 800f1c0:	4639      	mov	r1, r7
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f000 fa6e 	bl	800f6a4 <_Bfree>
 800f1c8:	e69c      	b.n	800ef04 <_dtoa_r+0x6c4>
 800f1ca:	2600      	movs	r6, #0
 800f1cc:	4637      	mov	r7, r6
 800f1ce:	e7e1      	b.n	800f194 <_dtoa_r+0x954>
 800f1d0:	46bb      	mov	fp, r7
 800f1d2:	4637      	mov	r7, r6
 800f1d4:	e599      	b.n	800ed0a <_dtoa_r+0x4ca>
 800f1d6:	bf00      	nop
 800f1d8:	40240000 	.word	0x40240000
 800f1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f000 80c8 	beq.w	800f374 <_dtoa_r+0xb34>
 800f1e4:	9b04      	ldr	r3, [sp, #16]
 800f1e6:	9301      	str	r3, [sp, #4]
 800f1e8:	2d00      	cmp	r5, #0
 800f1ea:	dd05      	ble.n	800f1f8 <_dtoa_r+0x9b8>
 800f1ec:	4639      	mov	r1, r7
 800f1ee:	462a      	mov	r2, r5
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fc27 	bl	800fa44 <__lshift>
 800f1f6:	4607      	mov	r7, r0
 800f1f8:	f1b8 0f00 	cmp.w	r8, #0
 800f1fc:	d05b      	beq.n	800f2b6 <_dtoa_r+0xa76>
 800f1fe:	6879      	ldr	r1, [r7, #4]
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fa0f 	bl	800f624 <_Balloc>
 800f206:	4605      	mov	r5, r0
 800f208:	b928      	cbnz	r0, 800f216 <_dtoa_r+0x9d6>
 800f20a:	4b83      	ldr	r3, [pc, #524]	; (800f418 <_dtoa_r+0xbd8>)
 800f20c:	4602      	mov	r2, r0
 800f20e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f212:	f7ff bb2e 	b.w	800e872 <_dtoa_r+0x32>
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	3202      	adds	r2, #2
 800f21a:	0092      	lsls	r2, r2, #2
 800f21c:	f107 010c 	add.w	r1, r7, #12
 800f220:	300c      	adds	r0, #12
 800f222:	f001 f801 	bl	8010228 <memcpy>
 800f226:	2201      	movs	r2, #1
 800f228:	4629      	mov	r1, r5
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 fc0a 	bl	800fa44 <__lshift>
 800f230:	9b00      	ldr	r3, [sp, #0]
 800f232:	3301      	adds	r3, #1
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f23a:	4413      	add	r3, r2
 800f23c:	9308      	str	r3, [sp, #32]
 800f23e:	9b02      	ldr	r3, [sp, #8]
 800f240:	f003 0301 	and.w	r3, r3, #1
 800f244:	46b8      	mov	r8, r7
 800f246:	9306      	str	r3, [sp, #24]
 800f248:	4607      	mov	r7, r0
 800f24a:	9b04      	ldr	r3, [sp, #16]
 800f24c:	4631      	mov	r1, r6
 800f24e:	3b01      	subs	r3, #1
 800f250:	4650      	mov	r0, sl
 800f252:	9301      	str	r3, [sp, #4]
 800f254:	f7ff fa6c 	bl	800e730 <quorem>
 800f258:	4641      	mov	r1, r8
 800f25a:	9002      	str	r0, [sp, #8]
 800f25c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f260:	4650      	mov	r0, sl
 800f262:	f000 fc5b 	bl	800fb1c <__mcmp>
 800f266:	463a      	mov	r2, r7
 800f268:	9005      	str	r0, [sp, #20]
 800f26a:	4631      	mov	r1, r6
 800f26c:	4620      	mov	r0, r4
 800f26e:	f000 fc71 	bl	800fb54 <__mdiff>
 800f272:	68c2      	ldr	r2, [r0, #12]
 800f274:	4605      	mov	r5, r0
 800f276:	bb02      	cbnz	r2, 800f2ba <_dtoa_r+0xa7a>
 800f278:	4601      	mov	r1, r0
 800f27a:	4650      	mov	r0, sl
 800f27c:	f000 fc4e 	bl	800fb1c <__mcmp>
 800f280:	4602      	mov	r2, r0
 800f282:	4629      	mov	r1, r5
 800f284:	4620      	mov	r0, r4
 800f286:	9209      	str	r2, [sp, #36]	; 0x24
 800f288:	f000 fa0c 	bl	800f6a4 <_Bfree>
 800f28c:	9b07      	ldr	r3, [sp, #28]
 800f28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f290:	9d04      	ldr	r5, [sp, #16]
 800f292:	ea43 0102 	orr.w	r1, r3, r2
 800f296:	9b06      	ldr	r3, [sp, #24]
 800f298:	4319      	orrs	r1, r3
 800f29a:	d110      	bne.n	800f2be <_dtoa_r+0xa7e>
 800f29c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f2a0:	d029      	beq.n	800f2f6 <_dtoa_r+0xab6>
 800f2a2:	9b05      	ldr	r3, [sp, #20]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dd02      	ble.n	800f2ae <_dtoa_r+0xa6e>
 800f2a8:	9b02      	ldr	r3, [sp, #8]
 800f2aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	f883 9000 	strb.w	r9, [r3]
 800f2b4:	e774      	b.n	800f1a0 <_dtoa_r+0x960>
 800f2b6:	4638      	mov	r0, r7
 800f2b8:	e7ba      	b.n	800f230 <_dtoa_r+0x9f0>
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	e7e1      	b.n	800f282 <_dtoa_r+0xa42>
 800f2be:	9b05      	ldr	r3, [sp, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	db04      	blt.n	800f2ce <_dtoa_r+0xa8e>
 800f2c4:	9907      	ldr	r1, [sp, #28]
 800f2c6:	430b      	orrs	r3, r1
 800f2c8:	9906      	ldr	r1, [sp, #24]
 800f2ca:	430b      	orrs	r3, r1
 800f2cc:	d120      	bne.n	800f310 <_dtoa_r+0xad0>
 800f2ce:	2a00      	cmp	r2, #0
 800f2d0:	dded      	ble.n	800f2ae <_dtoa_r+0xa6e>
 800f2d2:	4651      	mov	r1, sl
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f000 fbb4 	bl	800fa44 <__lshift>
 800f2dc:	4631      	mov	r1, r6
 800f2de:	4682      	mov	sl, r0
 800f2e0:	f000 fc1c 	bl	800fb1c <__mcmp>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	dc03      	bgt.n	800f2f0 <_dtoa_r+0xab0>
 800f2e8:	d1e1      	bne.n	800f2ae <_dtoa_r+0xa6e>
 800f2ea:	f019 0f01 	tst.w	r9, #1
 800f2ee:	d0de      	beq.n	800f2ae <_dtoa_r+0xa6e>
 800f2f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f2f4:	d1d8      	bne.n	800f2a8 <_dtoa_r+0xa68>
 800f2f6:	9a01      	ldr	r2, [sp, #4]
 800f2f8:	2339      	movs	r3, #57	; 0x39
 800f2fa:	7013      	strb	r3, [r2, #0]
 800f2fc:	462b      	mov	r3, r5
 800f2fe:	461d      	mov	r5, r3
 800f300:	3b01      	subs	r3, #1
 800f302:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f306:	2a39      	cmp	r2, #57	; 0x39
 800f308:	d06c      	beq.n	800f3e4 <_dtoa_r+0xba4>
 800f30a:	3201      	adds	r2, #1
 800f30c:	701a      	strb	r2, [r3, #0]
 800f30e:	e747      	b.n	800f1a0 <_dtoa_r+0x960>
 800f310:	2a00      	cmp	r2, #0
 800f312:	dd07      	ble.n	800f324 <_dtoa_r+0xae4>
 800f314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f318:	d0ed      	beq.n	800f2f6 <_dtoa_r+0xab6>
 800f31a:	9a01      	ldr	r2, [sp, #4]
 800f31c:	f109 0301 	add.w	r3, r9, #1
 800f320:	7013      	strb	r3, [r2, #0]
 800f322:	e73d      	b.n	800f1a0 <_dtoa_r+0x960>
 800f324:	9b04      	ldr	r3, [sp, #16]
 800f326:	9a08      	ldr	r2, [sp, #32]
 800f328:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d043      	beq.n	800f3b8 <_dtoa_r+0xb78>
 800f330:	4651      	mov	r1, sl
 800f332:	2300      	movs	r3, #0
 800f334:	220a      	movs	r2, #10
 800f336:	4620      	mov	r0, r4
 800f338:	f000 f9d6 	bl	800f6e8 <__multadd>
 800f33c:	45b8      	cmp	r8, r7
 800f33e:	4682      	mov	sl, r0
 800f340:	f04f 0300 	mov.w	r3, #0
 800f344:	f04f 020a 	mov.w	r2, #10
 800f348:	4641      	mov	r1, r8
 800f34a:	4620      	mov	r0, r4
 800f34c:	d107      	bne.n	800f35e <_dtoa_r+0xb1e>
 800f34e:	f000 f9cb 	bl	800f6e8 <__multadd>
 800f352:	4680      	mov	r8, r0
 800f354:	4607      	mov	r7, r0
 800f356:	9b04      	ldr	r3, [sp, #16]
 800f358:	3301      	adds	r3, #1
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	e775      	b.n	800f24a <_dtoa_r+0xa0a>
 800f35e:	f000 f9c3 	bl	800f6e8 <__multadd>
 800f362:	4639      	mov	r1, r7
 800f364:	4680      	mov	r8, r0
 800f366:	2300      	movs	r3, #0
 800f368:	220a      	movs	r2, #10
 800f36a:	4620      	mov	r0, r4
 800f36c:	f000 f9bc 	bl	800f6e8 <__multadd>
 800f370:	4607      	mov	r7, r0
 800f372:	e7f0      	b.n	800f356 <_dtoa_r+0xb16>
 800f374:	9b04      	ldr	r3, [sp, #16]
 800f376:	9301      	str	r3, [sp, #4]
 800f378:	9d00      	ldr	r5, [sp, #0]
 800f37a:	4631      	mov	r1, r6
 800f37c:	4650      	mov	r0, sl
 800f37e:	f7ff f9d7 	bl	800e730 <quorem>
 800f382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f386:	9b00      	ldr	r3, [sp, #0]
 800f388:	f805 9b01 	strb.w	r9, [r5], #1
 800f38c:	1aea      	subs	r2, r5, r3
 800f38e:	9b01      	ldr	r3, [sp, #4]
 800f390:	4293      	cmp	r3, r2
 800f392:	dd07      	ble.n	800f3a4 <_dtoa_r+0xb64>
 800f394:	4651      	mov	r1, sl
 800f396:	2300      	movs	r3, #0
 800f398:	220a      	movs	r2, #10
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 f9a4 	bl	800f6e8 <__multadd>
 800f3a0:	4682      	mov	sl, r0
 800f3a2:	e7ea      	b.n	800f37a <_dtoa_r+0xb3a>
 800f3a4:	9b01      	ldr	r3, [sp, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	bfc8      	it	gt
 800f3aa:	461d      	movgt	r5, r3
 800f3ac:	9b00      	ldr	r3, [sp, #0]
 800f3ae:	bfd8      	it	le
 800f3b0:	2501      	movle	r5, #1
 800f3b2:	441d      	add	r5, r3
 800f3b4:	f04f 0800 	mov.w	r8, #0
 800f3b8:	4651      	mov	r1, sl
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f000 fb41 	bl	800fa44 <__lshift>
 800f3c2:	4631      	mov	r1, r6
 800f3c4:	4682      	mov	sl, r0
 800f3c6:	f000 fba9 	bl	800fb1c <__mcmp>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	dc96      	bgt.n	800f2fc <_dtoa_r+0xabc>
 800f3ce:	d102      	bne.n	800f3d6 <_dtoa_r+0xb96>
 800f3d0:	f019 0f01 	tst.w	r9, #1
 800f3d4:	d192      	bne.n	800f2fc <_dtoa_r+0xabc>
 800f3d6:	462b      	mov	r3, r5
 800f3d8:	461d      	mov	r5, r3
 800f3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3de:	2a30      	cmp	r2, #48	; 0x30
 800f3e0:	d0fa      	beq.n	800f3d8 <_dtoa_r+0xb98>
 800f3e2:	e6dd      	b.n	800f1a0 <_dtoa_r+0x960>
 800f3e4:	9a00      	ldr	r2, [sp, #0]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d189      	bne.n	800f2fe <_dtoa_r+0xabe>
 800f3ea:	f10b 0b01 	add.w	fp, fp, #1
 800f3ee:	2331      	movs	r3, #49	; 0x31
 800f3f0:	e796      	b.n	800f320 <_dtoa_r+0xae0>
 800f3f2:	4b0a      	ldr	r3, [pc, #40]	; (800f41c <_dtoa_r+0xbdc>)
 800f3f4:	f7ff ba99 	b.w	800e92a <_dtoa_r+0xea>
 800f3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f47f aa6d 	bne.w	800e8da <_dtoa_r+0x9a>
 800f400:	4b07      	ldr	r3, [pc, #28]	; (800f420 <_dtoa_r+0xbe0>)
 800f402:	f7ff ba92 	b.w	800e92a <_dtoa_r+0xea>
 800f406:	9b01      	ldr	r3, [sp, #4]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	dcb5      	bgt.n	800f378 <_dtoa_r+0xb38>
 800f40c:	9b07      	ldr	r3, [sp, #28]
 800f40e:	2b02      	cmp	r3, #2
 800f410:	f73f aeb1 	bgt.w	800f176 <_dtoa_r+0x936>
 800f414:	e7b0      	b.n	800f378 <_dtoa_r+0xb38>
 800f416:	bf00      	nop
 800f418:	080116f0 	.word	0x080116f0
 800f41c:	08011650 	.word	0x08011650
 800f420:	08011674 	.word	0x08011674

0800f424 <_free_r>:
 800f424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f426:	2900      	cmp	r1, #0
 800f428:	d044      	beq.n	800f4b4 <_free_r+0x90>
 800f42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f42e:	9001      	str	r0, [sp, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	f1a1 0404 	sub.w	r4, r1, #4
 800f436:	bfb8      	it	lt
 800f438:	18e4      	addlt	r4, r4, r3
 800f43a:	f000 f8e7 	bl	800f60c <__malloc_lock>
 800f43e:	4a1e      	ldr	r2, [pc, #120]	; (800f4b8 <_free_r+0x94>)
 800f440:	9801      	ldr	r0, [sp, #4]
 800f442:	6813      	ldr	r3, [r2, #0]
 800f444:	b933      	cbnz	r3, 800f454 <_free_r+0x30>
 800f446:	6063      	str	r3, [r4, #4]
 800f448:	6014      	str	r4, [r2, #0]
 800f44a:	b003      	add	sp, #12
 800f44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f450:	f000 b8e2 	b.w	800f618 <__malloc_unlock>
 800f454:	42a3      	cmp	r3, r4
 800f456:	d908      	bls.n	800f46a <_free_r+0x46>
 800f458:	6825      	ldr	r5, [r4, #0]
 800f45a:	1961      	adds	r1, r4, r5
 800f45c:	428b      	cmp	r3, r1
 800f45e:	bf01      	itttt	eq
 800f460:	6819      	ldreq	r1, [r3, #0]
 800f462:	685b      	ldreq	r3, [r3, #4]
 800f464:	1949      	addeq	r1, r1, r5
 800f466:	6021      	streq	r1, [r4, #0]
 800f468:	e7ed      	b.n	800f446 <_free_r+0x22>
 800f46a:	461a      	mov	r2, r3
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	b10b      	cbz	r3, 800f474 <_free_r+0x50>
 800f470:	42a3      	cmp	r3, r4
 800f472:	d9fa      	bls.n	800f46a <_free_r+0x46>
 800f474:	6811      	ldr	r1, [r2, #0]
 800f476:	1855      	adds	r5, r2, r1
 800f478:	42a5      	cmp	r5, r4
 800f47a:	d10b      	bne.n	800f494 <_free_r+0x70>
 800f47c:	6824      	ldr	r4, [r4, #0]
 800f47e:	4421      	add	r1, r4
 800f480:	1854      	adds	r4, r2, r1
 800f482:	42a3      	cmp	r3, r4
 800f484:	6011      	str	r1, [r2, #0]
 800f486:	d1e0      	bne.n	800f44a <_free_r+0x26>
 800f488:	681c      	ldr	r4, [r3, #0]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	6053      	str	r3, [r2, #4]
 800f48e:	440c      	add	r4, r1
 800f490:	6014      	str	r4, [r2, #0]
 800f492:	e7da      	b.n	800f44a <_free_r+0x26>
 800f494:	d902      	bls.n	800f49c <_free_r+0x78>
 800f496:	230c      	movs	r3, #12
 800f498:	6003      	str	r3, [r0, #0]
 800f49a:	e7d6      	b.n	800f44a <_free_r+0x26>
 800f49c:	6825      	ldr	r5, [r4, #0]
 800f49e:	1961      	adds	r1, r4, r5
 800f4a0:	428b      	cmp	r3, r1
 800f4a2:	bf04      	itt	eq
 800f4a4:	6819      	ldreq	r1, [r3, #0]
 800f4a6:	685b      	ldreq	r3, [r3, #4]
 800f4a8:	6063      	str	r3, [r4, #4]
 800f4aa:	bf04      	itt	eq
 800f4ac:	1949      	addeq	r1, r1, r5
 800f4ae:	6021      	streq	r1, [r4, #0]
 800f4b0:	6054      	str	r4, [r2, #4]
 800f4b2:	e7ca      	b.n	800f44a <_free_r+0x26>
 800f4b4:	b003      	add	sp, #12
 800f4b6:	bd30      	pop	{r4, r5, pc}
 800f4b8:	20000fc4 	.word	0x20000fc4

0800f4bc <malloc>:
 800f4bc:	4b02      	ldr	r3, [pc, #8]	; (800f4c8 <malloc+0xc>)
 800f4be:	4601      	mov	r1, r0
 800f4c0:	6818      	ldr	r0, [r3, #0]
 800f4c2:	f000 b823 	b.w	800f50c <_malloc_r>
 800f4c6:	bf00      	nop
 800f4c8:	2000006c 	.word	0x2000006c

0800f4cc <sbrk_aligned>:
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	4e0e      	ldr	r6, [pc, #56]	; (800f508 <sbrk_aligned+0x3c>)
 800f4d0:	460c      	mov	r4, r1
 800f4d2:	6831      	ldr	r1, [r6, #0]
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	b911      	cbnz	r1, 800f4de <sbrk_aligned+0x12>
 800f4d8:	f000 fe96 	bl	8010208 <_sbrk_r>
 800f4dc:	6030      	str	r0, [r6, #0]
 800f4de:	4621      	mov	r1, r4
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f000 fe91 	bl	8010208 <_sbrk_r>
 800f4e6:	1c43      	adds	r3, r0, #1
 800f4e8:	d00a      	beq.n	800f500 <sbrk_aligned+0x34>
 800f4ea:	1cc4      	adds	r4, r0, #3
 800f4ec:	f024 0403 	bic.w	r4, r4, #3
 800f4f0:	42a0      	cmp	r0, r4
 800f4f2:	d007      	beq.n	800f504 <sbrk_aligned+0x38>
 800f4f4:	1a21      	subs	r1, r4, r0
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f000 fe86 	bl	8010208 <_sbrk_r>
 800f4fc:	3001      	adds	r0, #1
 800f4fe:	d101      	bne.n	800f504 <sbrk_aligned+0x38>
 800f500:	f04f 34ff 	mov.w	r4, #4294967295
 800f504:	4620      	mov	r0, r4
 800f506:	bd70      	pop	{r4, r5, r6, pc}
 800f508:	20000fc8 	.word	0x20000fc8

0800f50c <_malloc_r>:
 800f50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f510:	1ccd      	adds	r5, r1, #3
 800f512:	f025 0503 	bic.w	r5, r5, #3
 800f516:	3508      	adds	r5, #8
 800f518:	2d0c      	cmp	r5, #12
 800f51a:	bf38      	it	cc
 800f51c:	250c      	movcc	r5, #12
 800f51e:	2d00      	cmp	r5, #0
 800f520:	4607      	mov	r7, r0
 800f522:	db01      	blt.n	800f528 <_malloc_r+0x1c>
 800f524:	42a9      	cmp	r1, r5
 800f526:	d905      	bls.n	800f534 <_malloc_r+0x28>
 800f528:	230c      	movs	r3, #12
 800f52a:	603b      	str	r3, [r7, #0]
 800f52c:	2600      	movs	r6, #0
 800f52e:	4630      	mov	r0, r6
 800f530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f608 <_malloc_r+0xfc>
 800f538:	f000 f868 	bl	800f60c <__malloc_lock>
 800f53c:	f8d8 3000 	ldr.w	r3, [r8]
 800f540:	461c      	mov	r4, r3
 800f542:	bb5c      	cbnz	r4, 800f59c <_malloc_r+0x90>
 800f544:	4629      	mov	r1, r5
 800f546:	4638      	mov	r0, r7
 800f548:	f7ff ffc0 	bl	800f4cc <sbrk_aligned>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	4604      	mov	r4, r0
 800f550:	d155      	bne.n	800f5fe <_malloc_r+0xf2>
 800f552:	f8d8 4000 	ldr.w	r4, [r8]
 800f556:	4626      	mov	r6, r4
 800f558:	2e00      	cmp	r6, #0
 800f55a:	d145      	bne.n	800f5e8 <_malloc_r+0xdc>
 800f55c:	2c00      	cmp	r4, #0
 800f55e:	d048      	beq.n	800f5f2 <_malloc_r+0xe6>
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	4631      	mov	r1, r6
 800f564:	4638      	mov	r0, r7
 800f566:	eb04 0903 	add.w	r9, r4, r3
 800f56a:	f000 fe4d 	bl	8010208 <_sbrk_r>
 800f56e:	4581      	cmp	r9, r0
 800f570:	d13f      	bne.n	800f5f2 <_malloc_r+0xe6>
 800f572:	6821      	ldr	r1, [r4, #0]
 800f574:	1a6d      	subs	r5, r5, r1
 800f576:	4629      	mov	r1, r5
 800f578:	4638      	mov	r0, r7
 800f57a:	f7ff ffa7 	bl	800f4cc <sbrk_aligned>
 800f57e:	3001      	adds	r0, #1
 800f580:	d037      	beq.n	800f5f2 <_malloc_r+0xe6>
 800f582:	6823      	ldr	r3, [r4, #0]
 800f584:	442b      	add	r3, r5
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	f8d8 3000 	ldr.w	r3, [r8]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d038      	beq.n	800f602 <_malloc_r+0xf6>
 800f590:	685a      	ldr	r2, [r3, #4]
 800f592:	42a2      	cmp	r2, r4
 800f594:	d12b      	bne.n	800f5ee <_malloc_r+0xe2>
 800f596:	2200      	movs	r2, #0
 800f598:	605a      	str	r2, [r3, #4]
 800f59a:	e00f      	b.n	800f5bc <_malloc_r+0xb0>
 800f59c:	6822      	ldr	r2, [r4, #0]
 800f59e:	1b52      	subs	r2, r2, r5
 800f5a0:	d41f      	bmi.n	800f5e2 <_malloc_r+0xd6>
 800f5a2:	2a0b      	cmp	r2, #11
 800f5a4:	d917      	bls.n	800f5d6 <_malloc_r+0xca>
 800f5a6:	1961      	adds	r1, r4, r5
 800f5a8:	42a3      	cmp	r3, r4
 800f5aa:	6025      	str	r5, [r4, #0]
 800f5ac:	bf18      	it	ne
 800f5ae:	6059      	strne	r1, [r3, #4]
 800f5b0:	6863      	ldr	r3, [r4, #4]
 800f5b2:	bf08      	it	eq
 800f5b4:	f8c8 1000 	streq.w	r1, [r8]
 800f5b8:	5162      	str	r2, [r4, r5]
 800f5ba:	604b      	str	r3, [r1, #4]
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f104 060b 	add.w	r6, r4, #11
 800f5c2:	f000 f829 	bl	800f618 <__malloc_unlock>
 800f5c6:	f026 0607 	bic.w	r6, r6, #7
 800f5ca:	1d23      	adds	r3, r4, #4
 800f5cc:	1af2      	subs	r2, r6, r3
 800f5ce:	d0ae      	beq.n	800f52e <_malloc_r+0x22>
 800f5d0:	1b9b      	subs	r3, r3, r6
 800f5d2:	50a3      	str	r3, [r4, r2]
 800f5d4:	e7ab      	b.n	800f52e <_malloc_r+0x22>
 800f5d6:	42a3      	cmp	r3, r4
 800f5d8:	6862      	ldr	r2, [r4, #4]
 800f5da:	d1dd      	bne.n	800f598 <_malloc_r+0x8c>
 800f5dc:	f8c8 2000 	str.w	r2, [r8]
 800f5e0:	e7ec      	b.n	800f5bc <_malloc_r+0xb0>
 800f5e2:	4623      	mov	r3, r4
 800f5e4:	6864      	ldr	r4, [r4, #4]
 800f5e6:	e7ac      	b.n	800f542 <_malloc_r+0x36>
 800f5e8:	4634      	mov	r4, r6
 800f5ea:	6876      	ldr	r6, [r6, #4]
 800f5ec:	e7b4      	b.n	800f558 <_malloc_r+0x4c>
 800f5ee:	4613      	mov	r3, r2
 800f5f0:	e7cc      	b.n	800f58c <_malloc_r+0x80>
 800f5f2:	230c      	movs	r3, #12
 800f5f4:	603b      	str	r3, [r7, #0]
 800f5f6:	4638      	mov	r0, r7
 800f5f8:	f000 f80e 	bl	800f618 <__malloc_unlock>
 800f5fc:	e797      	b.n	800f52e <_malloc_r+0x22>
 800f5fe:	6025      	str	r5, [r4, #0]
 800f600:	e7dc      	b.n	800f5bc <_malloc_r+0xb0>
 800f602:	605b      	str	r3, [r3, #4]
 800f604:	deff      	udf	#255	; 0xff
 800f606:	bf00      	nop
 800f608:	20000fc4 	.word	0x20000fc4

0800f60c <__malloc_lock>:
 800f60c:	4801      	ldr	r0, [pc, #4]	; (800f614 <__malloc_lock+0x8>)
 800f60e:	f7ff b88d 	b.w	800e72c <__retarget_lock_acquire_recursive>
 800f612:	bf00      	nop
 800f614:	20000fc0 	.word	0x20000fc0

0800f618 <__malloc_unlock>:
 800f618:	4801      	ldr	r0, [pc, #4]	; (800f620 <__malloc_unlock+0x8>)
 800f61a:	f7ff b888 	b.w	800e72e <__retarget_lock_release_recursive>
 800f61e:	bf00      	nop
 800f620:	20000fc0 	.word	0x20000fc0

0800f624 <_Balloc>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	69c6      	ldr	r6, [r0, #28]
 800f628:	4604      	mov	r4, r0
 800f62a:	460d      	mov	r5, r1
 800f62c:	b976      	cbnz	r6, 800f64c <_Balloc+0x28>
 800f62e:	2010      	movs	r0, #16
 800f630:	f7ff ff44 	bl	800f4bc <malloc>
 800f634:	4602      	mov	r2, r0
 800f636:	61e0      	str	r0, [r4, #28]
 800f638:	b920      	cbnz	r0, 800f644 <_Balloc+0x20>
 800f63a:	4b18      	ldr	r3, [pc, #96]	; (800f69c <_Balloc+0x78>)
 800f63c:	4818      	ldr	r0, [pc, #96]	; (800f6a0 <_Balloc+0x7c>)
 800f63e:	216b      	movs	r1, #107	; 0x6b
 800f640:	f000 fe00 	bl	8010244 <__assert_func>
 800f644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f648:	6006      	str	r6, [r0, #0]
 800f64a:	60c6      	str	r6, [r0, #12]
 800f64c:	69e6      	ldr	r6, [r4, #28]
 800f64e:	68f3      	ldr	r3, [r6, #12]
 800f650:	b183      	cbz	r3, 800f674 <_Balloc+0x50>
 800f652:	69e3      	ldr	r3, [r4, #28]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f65a:	b9b8      	cbnz	r0, 800f68c <_Balloc+0x68>
 800f65c:	2101      	movs	r1, #1
 800f65e:	fa01 f605 	lsl.w	r6, r1, r5
 800f662:	1d72      	adds	r2, r6, #5
 800f664:	0092      	lsls	r2, r2, #2
 800f666:	4620      	mov	r0, r4
 800f668:	f000 fe0a 	bl	8010280 <_calloc_r>
 800f66c:	b160      	cbz	r0, 800f688 <_Balloc+0x64>
 800f66e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f672:	e00e      	b.n	800f692 <_Balloc+0x6e>
 800f674:	2221      	movs	r2, #33	; 0x21
 800f676:	2104      	movs	r1, #4
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 fe01 	bl	8010280 <_calloc_r>
 800f67e:	69e3      	ldr	r3, [r4, #28]
 800f680:	60f0      	str	r0, [r6, #12]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d1e4      	bne.n	800f652 <_Balloc+0x2e>
 800f688:	2000      	movs	r0, #0
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	6802      	ldr	r2, [r0, #0]
 800f68e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f692:	2300      	movs	r3, #0
 800f694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f698:	e7f7      	b.n	800f68a <_Balloc+0x66>
 800f69a:	bf00      	nop
 800f69c:	08011681 	.word	0x08011681
 800f6a0:	08011701 	.word	0x08011701

0800f6a4 <_Bfree>:
 800f6a4:	b570      	push	{r4, r5, r6, lr}
 800f6a6:	69c6      	ldr	r6, [r0, #28]
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	b976      	cbnz	r6, 800f6cc <_Bfree+0x28>
 800f6ae:	2010      	movs	r0, #16
 800f6b0:	f7ff ff04 	bl	800f4bc <malloc>
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	61e8      	str	r0, [r5, #28]
 800f6b8:	b920      	cbnz	r0, 800f6c4 <_Bfree+0x20>
 800f6ba:	4b09      	ldr	r3, [pc, #36]	; (800f6e0 <_Bfree+0x3c>)
 800f6bc:	4809      	ldr	r0, [pc, #36]	; (800f6e4 <_Bfree+0x40>)
 800f6be:	218f      	movs	r1, #143	; 0x8f
 800f6c0:	f000 fdc0 	bl	8010244 <__assert_func>
 800f6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6c8:	6006      	str	r6, [r0, #0]
 800f6ca:	60c6      	str	r6, [r0, #12]
 800f6cc:	b13c      	cbz	r4, 800f6de <_Bfree+0x3a>
 800f6ce:	69eb      	ldr	r3, [r5, #28]
 800f6d0:	6862      	ldr	r2, [r4, #4]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6d8:	6021      	str	r1, [r4, #0]
 800f6da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	08011681 	.word	0x08011681
 800f6e4:	08011701 	.word	0x08011701

0800f6e8 <__multadd>:
 800f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ec:	690d      	ldr	r5, [r1, #16]
 800f6ee:	4607      	mov	r7, r0
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	461e      	mov	r6, r3
 800f6f4:	f101 0c14 	add.w	ip, r1, #20
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	f8dc 3000 	ldr.w	r3, [ip]
 800f6fe:	b299      	uxth	r1, r3
 800f700:	fb02 6101 	mla	r1, r2, r1, r6
 800f704:	0c1e      	lsrs	r6, r3, #16
 800f706:	0c0b      	lsrs	r3, r1, #16
 800f708:	fb02 3306 	mla	r3, r2, r6, r3
 800f70c:	b289      	uxth	r1, r1
 800f70e:	3001      	adds	r0, #1
 800f710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f714:	4285      	cmp	r5, r0
 800f716:	f84c 1b04 	str.w	r1, [ip], #4
 800f71a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f71e:	dcec      	bgt.n	800f6fa <__multadd+0x12>
 800f720:	b30e      	cbz	r6, 800f766 <__multadd+0x7e>
 800f722:	68a3      	ldr	r3, [r4, #8]
 800f724:	42ab      	cmp	r3, r5
 800f726:	dc19      	bgt.n	800f75c <__multadd+0x74>
 800f728:	6861      	ldr	r1, [r4, #4]
 800f72a:	4638      	mov	r0, r7
 800f72c:	3101      	adds	r1, #1
 800f72e:	f7ff ff79 	bl	800f624 <_Balloc>
 800f732:	4680      	mov	r8, r0
 800f734:	b928      	cbnz	r0, 800f742 <__multadd+0x5a>
 800f736:	4602      	mov	r2, r0
 800f738:	4b0c      	ldr	r3, [pc, #48]	; (800f76c <__multadd+0x84>)
 800f73a:	480d      	ldr	r0, [pc, #52]	; (800f770 <__multadd+0x88>)
 800f73c:	21ba      	movs	r1, #186	; 0xba
 800f73e:	f000 fd81 	bl	8010244 <__assert_func>
 800f742:	6922      	ldr	r2, [r4, #16]
 800f744:	3202      	adds	r2, #2
 800f746:	f104 010c 	add.w	r1, r4, #12
 800f74a:	0092      	lsls	r2, r2, #2
 800f74c:	300c      	adds	r0, #12
 800f74e:	f000 fd6b 	bl	8010228 <memcpy>
 800f752:	4621      	mov	r1, r4
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff ffa5 	bl	800f6a4 <_Bfree>
 800f75a:	4644      	mov	r4, r8
 800f75c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f760:	3501      	adds	r5, #1
 800f762:	615e      	str	r6, [r3, #20]
 800f764:	6125      	str	r5, [r4, #16]
 800f766:	4620      	mov	r0, r4
 800f768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f76c:	080116f0 	.word	0x080116f0
 800f770:	08011701 	.word	0x08011701

0800f774 <__hi0bits>:
 800f774:	0c03      	lsrs	r3, r0, #16
 800f776:	041b      	lsls	r3, r3, #16
 800f778:	b9d3      	cbnz	r3, 800f7b0 <__hi0bits+0x3c>
 800f77a:	0400      	lsls	r0, r0, #16
 800f77c:	2310      	movs	r3, #16
 800f77e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f782:	bf04      	itt	eq
 800f784:	0200      	lsleq	r0, r0, #8
 800f786:	3308      	addeq	r3, #8
 800f788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f78c:	bf04      	itt	eq
 800f78e:	0100      	lsleq	r0, r0, #4
 800f790:	3304      	addeq	r3, #4
 800f792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f796:	bf04      	itt	eq
 800f798:	0080      	lsleq	r0, r0, #2
 800f79a:	3302      	addeq	r3, #2
 800f79c:	2800      	cmp	r0, #0
 800f79e:	db05      	blt.n	800f7ac <__hi0bits+0x38>
 800f7a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7a4:	f103 0301 	add.w	r3, r3, #1
 800f7a8:	bf08      	it	eq
 800f7aa:	2320      	moveq	r3, #32
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	4770      	bx	lr
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	e7e4      	b.n	800f77e <__hi0bits+0xa>

0800f7b4 <__lo0bits>:
 800f7b4:	6803      	ldr	r3, [r0, #0]
 800f7b6:	f013 0207 	ands.w	r2, r3, #7
 800f7ba:	d00c      	beq.n	800f7d6 <__lo0bits+0x22>
 800f7bc:	07d9      	lsls	r1, r3, #31
 800f7be:	d422      	bmi.n	800f806 <__lo0bits+0x52>
 800f7c0:	079a      	lsls	r2, r3, #30
 800f7c2:	bf49      	itett	mi
 800f7c4:	085b      	lsrmi	r3, r3, #1
 800f7c6:	089b      	lsrpl	r3, r3, #2
 800f7c8:	6003      	strmi	r3, [r0, #0]
 800f7ca:	2201      	movmi	r2, #1
 800f7cc:	bf5c      	itt	pl
 800f7ce:	6003      	strpl	r3, [r0, #0]
 800f7d0:	2202      	movpl	r2, #2
 800f7d2:	4610      	mov	r0, r2
 800f7d4:	4770      	bx	lr
 800f7d6:	b299      	uxth	r1, r3
 800f7d8:	b909      	cbnz	r1, 800f7de <__lo0bits+0x2a>
 800f7da:	0c1b      	lsrs	r3, r3, #16
 800f7dc:	2210      	movs	r2, #16
 800f7de:	b2d9      	uxtb	r1, r3
 800f7e0:	b909      	cbnz	r1, 800f7e6 <__lo0bits+0x32>
 800f7e2:	3208      	adds	r2, #8
 800f7e4:	0a1b      	lsrs	r3, r3, #8
 800f7e6:	0719      	lsls	r1, r3, #28
 800f7e8:	bf04      	itt	eq
 800f7ea:	091b      	lsreq	r3, r3, #4
 800f7ec:	3204      	addeq	r2, #4
 800f7ee:	0799      	lsls	r1, r3, #30
 800f7f0:	bf04      	itt	eq
 800f7f2:	089b      	lsreq	r3, r3, #2
 800f7f4:	3202      	addeq	r2, #2
 800f7f6:	07d9      	lsls	r1, r3, #31
 800f7f8:	d403      	bmi.n	800f802 <__lo0bits+0x4e>
 800f7fa:	085b      	lsrs	r3, r3, #1
 800f7fc:	f102 0201 	add.w	r2, r2, #1
 800f800:	d003      	beq.n	800f80a <__lo0bits+0x56>
 800f802:	6003      	str	r3, [r0, #0]
 800f804:	e7e5      	b.n	800f7d2 <__lo0bits+0x1e>
 800f806:	2200      	movs	r2, #0
 800f808:	e7e3      	b.n	800f7d2 <__lo0bits+0x1e>
 800f80a:	2220      	movs	r2, #32
 800f80c:	e7e1      	b.n	800f7d2 <__lo0bits+0x1e>
	...

0800f810 <__i2b>:
 800f810:	b510      	push	{r4, lr}
 800f812:	460c      	mov	r4, r1
 800f814:	2101      	movs	r1, #1
 800f816:	f7ff ff05 	bl	800f624 <_Balloc>
 800f81a:	4602      	mov	r2, r0
 800f81c:	b928      	cbnz	r0, 800f82a <__i2b+0x1a>
 800f81e:	4b05      	ldr	r3, [pc, #20]	; (800f834 <__i2b+0x24>)
 800f820:	4805      	ldr	r0, [pc, #20]	; (800f838 <__i2b+0x28>)
 800f822:	f240 1145 	movw	r1, #325	; 0x145
 800f826:	f000 fd0d 	bl	8010244 <__assert_func>
 800f82a:	2301      	movs	r3, #1
 800f82c:	6144      	str	r4, [r0, #20]
 800f82e:	6103      	str	r3, [r0, #16]
 800f830:	bd10      	pop	{r4, pc}
 800f832:	bf00      	nop
 800f834:	080116f0 	.word	0x080116f0
 800f838:	08011701 	.word	0x08011701

0800f83c <__multiply>:
 800f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f840:	4691      	mov	r9, r2
 800f842:	690a      	ldr	r2, [r1, #16]
 800f844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f848:	429a      	cmp	r2, r3
 800f84a:	bfb8      	it	lt
 800f84c:	460b      	movlt	r3, r1
 800f84e:	460c      	mov	r4, r1
 800f850:	bfbc      	itt	lt
 800f852:	464c      	movlt	r4, r9
 800f854:	4699      	movlt	r9, r3
 800f856:	6927      	ldr	r7, [r4, #16]
 800f858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f85c:	68a3      	ldr	r3, [r4, #8]
 800f85e:	6861      	ldr	r1, [r4, #4]
 800f860:	eb07 060a 	add.w	r6, r7, sl
 800f864:	42b3      	cmp	r3, r6
 800f866:	b085      	sub	sp, #20
 800f868:	bfb8      	it	lt
 800f86a:	3101      	addlt	r1, #1
 800f86c:	f7ff feda 	bl	800f624 <_Balloc>
 800f870:	b930      	cbnz	r0, 800f880 <__multiply+0x44>
 800f872:	4602      	mov	r2, r0
 800f874:	4b44      	ldr	r3, [pc, #272]	; (800f988 <__multiply+0x14c>)
 800f876:	4845      	ldr	r0, [pc, #276]	; (800f98c <__multiply+0x150>)
 800f878:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f87c:	f000 fce2 	bl	8010244 <__assert_func>
 800f880:	f100 0514 	add.w	r5, r0, #20
 800f884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f888:	462b      	mov	r3, r5
 800f88a:	2200      	movs	r2, #0
 800f88c:	4543      	cmp	r3, r8
 800f88e:	d321      	bcc.n	800f8d4 <__multiply+0x98>
 800f890:	f104 0314 	add.w	r3, r4, #20
 800f894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f898:	f109 0314 	add.w	r3, r9, #20
 800f89c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f8a0:	9202      	str	r2, [sp, #8]
 800f8a2:	1b3a      	subs	r2, r7, r4
 800f8a4:	3a15      	subs	r2, #21
 800f8a6:	f022 0203 	bic.w	r2, r2, #3
 800f8aa:	3204      	adds	r2, #4
 800f8ac:	f104 0115 	add.w	r1, r4, #21
 800f8b0:	428f      	cmp	r7, r1
 800f8b2:	bf38      	it	cc
 800f8b4:	2204      	movcc	r2, #4
 800f8b6:	9201      	str	r2, [sp, #4]
 800f8b8:	9a02      	ldr	r2, [sp, #8]
 800f8ba:	9303      	str	r3, [sp, #12]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d80c      	bhi.n	800f8da <__multiply+0x9e>
 800f8c0:	2e00      	cmp	r6, #0
 800f8c2:	dd03      	ble.n	800f8cc <__multiply+0x90>
 800f8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d05b      	beq.n	800f984 <__multiply+0x148>
 800f8cc:	6106      	str	r6, [r0, #16]
 800f8ce:	b005      	add	sp, #20
 800f8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d4:	f843 2b04 	str.w	r2, [r3], #4
 800f8d8:	e7d8      	b.n	800f88c <__multiply+0x50>
 800f8da:	f8b3 a000 	ldrh.w	sl, [r3]
 800f8de:	f1ba 0f00 	cmp.w	sl, #0
 800f8e2:	d024      	beq.n	800f92e <__multiply+0xf2>
 800f8e4:	f104 0e14 	add.w	lr, r4, #20
 800f8e8:	46a9      	mov	r9, r5
 800f8ea:	f04f 0c00 	mov.w	ip, #0
 800f8ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f8f2:	f8d9 1000 	ldr.w	r1, [r9]
 800f8f6:	fa1f fb82 	uxth.w	fp, r2
 800f8fa:	b289      	uxth	r1, r1
 800f8fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f904:	f8d9 2000 	ldr.w	r2, [r9]
 800f908:	4461      	add	r1, ip
 800f90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f90e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f916:	b289      	uxth	r1, r1
 800f918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f91c:	4577      	cmp	r7, lr
 800f91e:	f849 1b04 	str.w	r1, [r9], #4
 800f922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f926:	d8e2      	bhi.n	800f8ee <__multiply+0xb2>
 800f928:	9a01      	ldr	r2, [sp, #4]
 800f92a:	f845 c002 	str.w	ip, [r5, r2]
 800f92e:	9a03      	ldr	r2, [sp, #12]
 800f930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f934:	3304      	adds	r3, #4
 800f936:	f1b9 0f00 	cmp.w	r9, #0
 800f93a:	d021      	beq.n	800f980 <__multiply+0x144>
 800f93c:	6829      	ldr	r1, [r5, #0]
 800f93e:	f104 0c14 	add.w	ip, r4, #20
 800f942:	46ae      	mov	lr, r5
 800f944:	f04f 0a00 	mov.w	sl, #0
 800f948:	f8bc b000 	ldrh.w	fp, [ip]
 800f94c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f950:	fb09 220b 	mla	r2, r9, fp, r2
 800f954:	4452      	add	r2, sl
 800f956:	b289      	uxth	r1, r1
 800f958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f95c:	f84e 1b04 	str.w	r1, [lr], #4
 800f960:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f964:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f968:	f8be 1000 	ldrh.w	r1, [lr]
 800f96c:	fb09 110a 	mla	r1, r9, sl, r1
 800f970:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f974:	4567      	cmp	r7, ip
 800f976:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f97a:	d8e5      	bhi.n	800f948 <__multiply+0x10c>
 800f97c:	9a01      	ldr	r2, [sp, #4]
 800f97e:	50a9      	str	r1, [r5, r2]
 800f980:	3504      	adds	r5, #4
 800f982:	e799      	b.n	800f8b8 <__multiply+0x7c>
 800f984:	3e01      	subs	r6, #1
 800f986:	e79b      	b.n	800f8c0 <__multiply+0x84>
 800f988:	080116f0 	.word	0x080116f0
 800f98c:	08011701 	.word	0x08011701

0800f990 <__pow5mult>:
 800f990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f994:	4615      	mov	r5, r2
 800f996:	f012 0203 	ands.w	r2, r2, #3
 800f99a:	4606      	mov	r6, r0
 800f99c:	460f      	mov	r7, r1
 800f99e:	d007      	beq.n	800f9b0 <__pow5mult+0x20>
 800f9a0:	4c25      	ldr	r4, [pc, #148]	; (800fa38 <__pow5mult+0xa8>)
 800f9a2:	3a01      	subs	r2, #1
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9aa:	f7ff fe9d 	bl	800f6e8 <__multadd>
 800f9ae:	4607      	mov	r7, r0
 800f9b0:	10ad      	asrs	r5, r5, #2
 800f9b2:	d03d      	beq.n	800fa30 <__pow5mult+0xa0>
 800f9b4:	69f4      	ldr	r4, [r6, #28]
 800f9b6:	b97c      	cbnz	r4, 800f9d8 <__pow5mult+0x48>
 800f9b8:	2010      	movs	r0, #16
 800f9ba:	f7ff fd7f 	bl	800f4bc <malloc>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	61f0      	str	r0, [r6, #28]
 800f9c2:	b928      	cbnz	r0, 800f9d0 <__pow5mult+0x40>
 800f9c4:	4b1d      	ldr	r3, [pc, #116]	; (800fa3c <__pow5mult+0xac>)
 800f9c6:	481e      	ldr	r0, [pc, #120]	; (800fa40 <__pow5mult+0xb0>)
 800f9c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f9cc:	f000 fc3a 	bl	8010244 <__assert_func>
 800f9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9d4:	6004      	str	r4, [r0, #0]
 800f9d6:	60c4      	str	r4, [r0, #12]
 800f9d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9e0:	b94c      	cbnz	r4, 800f9f6 <__pow5mult+0x66>
 800f9e2:	f240 2171 	movw	r1, #625	; 0x271
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f7ff ff12 	bl	800f810 <__i2b>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	6003      	str	r3, [r0, #0]
 800f9f6:	f04f 0900 	mov.w	r9, #0
 800f9fa:	07eb      	lsls	r3, r5, #31
 800f9fc:	d50a      	bpl.n	800fa14 <__pow5mult+0x84>
 800f9fe:	4639      	mov	r1, r7
 800fa00:	4622      	mov	r2, r4
 800fa02:	4630      	mov	r0, r6
 800fa04:	f7ff ff1a 	bl	800f83c <__multiply>
 800fa08:	4639      	mov	r1, r7
 800fa0a:	4680      	mov	r8, r0
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f7ff fe49 	bl	800f6a4 <_Bfree>
 800fa12:	4647      	mov	r7, r8
 800fa14:	106d      	asrs	r5, r5, #1
 800fa16:	d00b      	beq.n	800fa30 <__pow5mult+0xa0>
 800fa18:	6820      	ldr	r0, [r4, #0]
 800fa1a:	b938      	cbnz	r0, 800fa2c <__pow5mult+0x9c>
 800fa1c:	4622      	mov	r2, r4
 800fa1e:	4621      	mov	r1, r4
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7ff ff0b 	bl	800f83c <__multiply>
 800fa26:	6020      	str	r0, [r4, #0]
 800fa28:	f8c0 9000 	str.w	r9, [r0]
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	e7e4      	b.n	800f9fa <__pow5mult+0x6a>
 800fa30:	4638      	mov	r0, r7
 800fa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa36:	bf00      	nop
 800fa38:	08011850 	.word	0x08011850
 800fa3c:	08011681 	.word	0x08011681
 800fa40:	08011701 	.word	0x08011701

0800fa44 <__lshift>:
 800fa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa48:	460c      	mov	r4, r1
 800fa4a:	6849      	ldr	r1, [r1, #4]
 800fa4c:	6923      	ldr	r3, [r4, #16]
 800fa4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa52:	68a3      	ldr	r3, [r4, #8]
 800fa54:	4607      	mov	r7, r0
 800fa56:	4691      	mov	r9, r2
 800fa58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa5c:	f108 0601 	add.w	r6, r8, #1
 800fa60:	42b3      	cmp	r3, r6
 800fa62:	db0b      	blt.n	800fa7c <__lshift+0x38>
 800fa64:	4638      	mov	r0, r7
 800fa66:	f7ff fddd 	bl	800f624 <_Balloc>
 800fa6a:	4605      	mov	r5, r0
 800fa6c:	b948      	cbnz	r0, 800fa82 <__lshift+0x3e>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	4b28      	ldr	r3, [pc, #160]	; (800fb14 <__lshift+0xd0>)
 800fa72:	4829      	ldr	r0, [pc, #164]	; (800fb18 <__lshift+0xd4>)
 800fa74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800fa78:	f000 fbe4 	bl	8010244 <__assert_func>
 800fa7c:	3101      	adds	r1, #1
 800fa7e:	005b      	lsls	r3, r3, #1
 800fa80:	e7ee      	b.n	800fa60 <__lshift+0x1c>
 800fa82:	2300      	movs	r3, #0
 800fa84:	f100 0114 	add.w	r1, r0, #20
 800fa88:	f100 0210 	add.w	r2, r0, #16
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	4553      	cmp	r3, sl
 800fa90:	db33      	blt.n	800fafa <__lshift+0xb6>
 800fa92:	6920      	ldr	r0, [r4, #16]
 800fa94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa98:	f104 0314 	add.w	r3, r4, #20
 800fa9c:	f019 091f 	ands.w	r9, r9, #31
 800faa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800faa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800faa8:	d02b      	beq.n	800fb02 <__lshift+0xbe>
 800faaa:	f1c9 0e20 	rsb	lr, r9, #32
 800faae:	468a      	mov	sl, r1
 800fab0:	2200      	movs	r2, #0
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	fa00 f009 	lsl.w	r0, r0, r9
 800fab8:	4310      	orrs	r0, r2
 800faba:	f84a 0b04 	str.w	r0, [sl], #4
 800fabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fac2:	459c      	cmp	ip, r3
 800fac4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fac8:	d8f3      	bhi.n	800fab2 <__lshift+0x6e>
 800faca:	ebac 0304 	sub.w	r3, ip, r4
 800face:	3b15      	subs	r3, #21
 800fad0:	f023 0303 	bic.w	r3, r3, #3
 800fad4:	3304      	adds	r3, #4
 800fad6:	f104 0015 	add.w	r0, r4, #21
 800fada:	4584      	cmp	ip, r0
 800fadc:	bf38      	it	cc
 800fade:	2304      	movcc	r3, #4
 800fae0:	50ca      	str	r2, [r1, r3]
 800fae2:	b10a      	cbz	r2, 800fae8 <__lshift+0xa4>
 800fae4:	f108 0602 	add.w	r6, r8, #2
 800fae8:	3e01      	subs	r6, #1
 800faea:	4638      	mov	r0, r7
 800faec:	612e      	str	r6, [r5, #16]
 800faee:	4621      	mov	r1, r4
 800faf0:	f7ff fdd8 	bl	800f6a4 <_Bfree>
 800faf4:	4628      	mov	r0, r5
 800faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800fafe:	3301      	adds	r3, #1
 800fb00:	e7c5      	b.n	800fa8e <__lshift+0x4a>
 800fb02:	3904      	subs	r1, #4
 800fb04:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb08:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb0c:	459c      	cmp	ip, r3
 800fb0e:	d8f9      	bhi.n	800fb04 <__lshift+0xc0>
 800fb10:	e7ea      	b.n	800fae8 <__lshift+0xa4>
 800fb12:	bf00      	nop
 800fb14:	080116f0 	.word	0x080116f0
 800fb18:	08011701 	.word	0x08011701

0800fb1c <__mcmp>:
 800fb1c:	b530      	push	{r4, r5, lr}
 800fb1e:	6902      	ldr	r2, [r0, #16]
 800fb20:	690c      	ldr	r4, [r1, #16]
 800fb22:	1b12      	subs	r2, r2, r4
 800fb24:	d10e      	bne.n	800fb44 <__mcmp+0x28>
 800fb26:	f100 0314 	add.w	r3, r0, #20
 800fb2a:	3114      	adds	r1, #20
 800fb2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb3c:	42a5      	cmp	r5, r4
 800fb3e:	d003      	beq.n	800fb48 <__mcmp+0x2c>
 800fb40:	d305      	bcc.n	800fb4e <__mcmp+0x32>
 800fb42:	2201      	movs	r2, #1
 800fb44:	4610      	mov	r0, r2
 800fb46:	bd30      	pop	{r4, r5, pc}
 800fb48:	4283      	cmp	r3, r0
 800fb4a:	d3f3      	bcc.n	800fb34 <__mcmp+0x18>
 800fb4c:	e7fa      	b.n	800fb44 <__mcmp+0x28>
 800fb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb52:	e7f7      	b.n	800fb44 <__mcmp+0x28>

0800fb54 <__mdiff>:
 800fb54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb58:	460c      	mov	r4, r1
 800fb5a:	4606      	mov	r6, r0
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4690      	mov	r8, r2
 800fb62:	f7ff ffdb 	bl	800fb1c <__mcmp>
 800fb66:	1e05      	subs	r5, r0, #0
 800fb68:	d110      	bne.n	800fb8c <__mdiff+0x38>
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	f7ff fd59 	bl	800f624 <_Balloc>
 800fb72:	b930      	cbnz	r0, 800fb82 <__mdiff+0x2e>
 800fb74:	4b3a      	ldr	r3, [pc, #232]	; (800fc60 <__mdiff+0x10c>)
 800fb76:	4602      	mov	r2, r0
 800fb78:	f240 2137 	movw	r1, #567	; 0x237
 800fb7c:	4839      	ldr	r0, [pc, #228]	; (800fc64 <__mdiff+0x110>)
 800fb7e:	f000 fb61 	bl	8010244 <__assert_func>
 800fb82:	2301      	movs	r3, #1
 800fb84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb8c:	bfa4      	itt	ge
 800fb8e:	4643      	movge	r3, r8
 800fb90:	46a0      	movge	r8, r4
 800fb92:	4630      	mov	r0, r6
 800fb94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fb98:	bfa6      	itte	ge
 800fb9a:	461c      	movge	r4, r3
 800fb9c:	2500      	movge	r5, #0
 800fb9e:	2501      	movlt	r5, #1
 800fba0:	f7ff fd40 	bl	800f624 <_Balloc>
 800fba4:	b920      	cbnz	r0, 800fbb0 <__mdiff+0x5c>
 800fba6:	4b2e      	ldr	r3, [pc, #184]	; (800fc60 <__mdiff+0x10c>)
 800fba8:	4602      	mov	r2, r0
 800fbaa:	f240 2145 	movw	r1, #581	; 0x245
 800fbae:	e7e5      	b.n	800fb7c <__mdiff+0x28>
 800fbb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fbb4:	6926      	ldr	r6, [r4, #16]
 800fbb6:	60c5      	str	r5, [r0, #12]
 800fbb8:	f104 0914 	add.w	r9, r4, #20
 800fbbc:	f108 0514 	add.w	r5, r8, #20
 800fbc0:	f100 0e14 	add.w	lr, r0, #20
 800fbc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fbc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fbcc:	f108 0210 	add.w	r2, r8, #16
 800fbd0:	46f2      	mov	sl, lr
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fbdc:	fa11 f88b 	uxtah	r8, r1, fp
 800fbe0:	b299      	uxth	r1, r3
 800fbe2:	0c1b      	lsrs	r3, r3, #16
 800fbe4:	eba8 0801 	sub.w	r8, r8, r1
 800fbe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fbec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fbf0:	fa1f f888 	uxth.w	r8, r8
 800fbf4:	1419      	asrs	r1, r3, #16
 800fbf6:	454e      	cmp	r6, r9
 800fbf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fbfc:	f84a 3b04 	str.w	r3, [sl], #4
 800fc00:	d8e8      	bhi.n	800fbd4 <__mdiff+0x80>
 800fc02:	1b33      	subs	r3, r6, r4
 800fc04:	3b15      	subs	r3, #21
 800fc06:	f023 0303 	bic.w	r3, r3, #3
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	3415      	adds	r4, #21
 800fc0e:	42a6      	cmp	r6, r4
 800fc10:	bf38      	it	cc
 800fc12:	2304      	movcc	r3, #4
 800fc14:	441d      	add	r5, r3
 800fc16:	4473      	add	r3, lr
 800fc18:	469e      	mov	lr, r3
 800fc1a:	462e      	mov	r6, r5
 800fc1c:	4566      	cmp	r6, ip
 800fc1e:	d30e      	bcc.n	800fc3e <__mdiff+0xea>
 800fc20:	f10c 0203 	add.w	r2, ip, #3
 800fc24:	1b52      	subs	r2, r2, r5
 800fc26:	f022 0203 	bic.w	r2, r2, #3
 800fc2a:	3d03      	subs	r5, #3
 800fc2c:	45ac      	cmp	ip, r5
 800fc2e:	bf38      	it	cc
 800fc30:	2200      	movcc	r2, #0
 800fc32:	4413      	add	r3, r2
 800fc34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc38:	b17a      	cbz	r2, 800fc5a <__mdiff+0x106>
 800fc3a:	6107      	str	r7, [r0, #16]
 800fc3c:	e7a4      	b.n	800fb88 <__mdiff+0x34>
 800fc3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800fc42:	fa11 f288 	uxtah	r2, r1, r8
 800fc46:	1414      	asrs	r4, r2, #16
 800fc48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fc4c:	b292      	uxth	r2, r2
 800fc4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fc52:	f84e 2b04 	str.w	r2, [lr], #4
 800fc56:	1421      	asrs	r1, r4, #16
 800fc58:	e7e0      	b.n	800fc1c <__mdiff+0xc8>
 800fc5a:	3f01      	subs	r7, #1
 800fc5c:	e7ea      	b.n	800fc34 <__mdiff+0xe0>
 800fc5e:	bf00      	nop
 800fc60:	080116f0 	.word	0x080116f0
 800fc64:	08011701 	.word	0x08011701

0800fc68 <__d2b>:
 800fc68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc6c:	460f      	mov	r7, r1
 800fc6e:	2101      	movs	r1, #1
 800fc70:	ec59 8b10 	vmov	r8, r9, d0
 800fc74:	4616      	mov	r6, r2
 800fc76:	f7ff fcd5 	bl	800f624 <_Balloc>
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	b930      	cbnz	r0, 800fc8c <__d2b+0x24>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	4b24      	ldr	r3, [pc, #144]	; (800fd14 <__d2b+0xac>)
 800fc82:	4825      	ldr	r0, [pc, #148]	; (800fd18 <__d2b+0xb0>)
 800fc84:	f240 310f 	movw	r1, #783	; 0x30f
 800fc88:	f000 fadc 	bl	8010244 <__assert_func>
 800fc8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fc90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc94:	bb2d      	cbnz	r5, 800fce2 <__d2b+0x7a>
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	f1b8 0300 	subs.w	r3, r8, #0
 800fc9c:	d026      	beq.n	800fcec <__d2b+0x84>
 800fc9e:	4668      	mov	r0, sp
 800fca0:	9300      	str	r3, [sp, #0]
 800fca2:	f7ff fd87 	bl	800f7b4 <__lo0bits>
 800fca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fcaa:	b1e8      	cbz	r0, 800fce8 <__d2b+0x80>
 800fcac:	f1c0 0320 	rsb	r3, r0, #32
 800fcb0:	fa02 f303 	lsl.w	r3, r2, r3
 800fcb4:	430b      	orrs	r3, r1
 800fcb6:	40c2      	lsrs	r2, r0
 800fcb8:	6163      	str	r3, [r4, #20]
 800fcba:	9201      	str	r2, [sp, #4]
 800fcbc:	9b01      	ldr	r3, [sp, #4]
 800fcbe:	61a3      	str	r3, [r4, #24]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	bf14      	ite	ne
 800fcc4:	2202      	movne	r2, #2
 800fcc6:	2201      	moveq	r2, #1
 800fcc8:	6122      	str	r2, [r4, #16]
 800fcca:	b1bd      	cbz	r5, 800fcfc <__d2b+0x94>
 800fccc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fcd0:	4405      	add	r5, r0
 800fcd2:	603d      	str	r5, [r7, #0]
 800fcd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcd8:	6030      	str	r0, [r6, #0]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	b003      	add	sp, #12
 800fcde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fce6:	e7d6      	b.n	800fc96 <__d2b+0x2e>
 800fce8:	6161      	str	r1, [r4, #20]
 800fcea:	e7e7      	b.n	800fcbc <__d2b+0x54>
 800fcec:	a801      	add	r0, sp, #4
 800fcee:	f7ff fd61 	bl	800f7b4 <__lo0bits>
 800fcf2:	9b01      	ldr	r3, [sp, #4]
 800fcf4:	6163      	str	r3, [r4, #20]
 800fcf6:	3020      	adds	r0, #32
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	e7e5      	b.n	800fcc8 <__d2b+0x60>
 800fcfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd04:	6038      	str	r0, [r7, #0]
 800fd06:	6918      	ldr	r0, [r3, #16]
 800fd08:	f7ff fd34 	bl	800f774 <__hi0bits>
 800fd0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd10:	e7e2      	b.n	800fcd8 <__d2b+0x70>
 800fd12:	bf00      	nop
 800fd14:	080116f0 	.word	0x080116f0
 800fd18:	08011701 	.word	0x08011701

0800fd1c <__sfputc_r>:
 800fd1c:	6893      	ldr	r3, [r2, #8]
 800fd1e:	3b01      	subs	r3, #1
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	b410      	push	{r4}
 800fd24:	6093      	str	r3, [r2, #8]
 800fd26:	da08      	bge.n	800fd3a <__sfputc_r+0x1e>
 800fd28:	6994      	ldr	r4, [r2, #24]
 800fd2a:	42a3      	cmp	r3, r4
 800fd2c:	db01      	blt.n	800fd32 <__sfputc_r+0x16>
 800fd2e:	290a      	cmp	r1, #10
 800fd30:	d103      	bne.n	800fd3a <__sfputc_r+0x1e>
 800fd32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd36:	f7fe bbe8 	b.w	800e50a <__swbuf_r>
 800fd3a:	6813      	ldr	r3, [r2, #0]
 800fd3c:	1c58      	adds	r0, r3, #1
 800fd3e:	6010      	str	r0, [r2, #0]
 800fd40:	7019      	strb	r1, [r3, #0]
 800fd42:	4608      	mov	r0, r1
 800fd44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd48:	4770      	bx	lr

0800fd4a <__sfputs_r>:
 800fd4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4c:	4606      	mov	r6, r0
 800fd4e:	460f      	mov	r7, r1
 800fd50:	4614      	mov	r4, r2
 800fd52:	18d5      	adds	r5, r2, r3
 800fd54:	42ac      	cmp	r4, r5
 800fd56:	d101      	bne.n	800fd5c <__sfputs_r+0x12>
 800fd58:	2000      	movs	r0, #0
 800fd5a:	e007      	b.n	800fd6c <__sfputs_r+0x22>
 800fd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd60:	463a      	mov	r2, r7
 800fd62:	4630      	mov	r0, r6
 800fd64:	f7ff ffda 	bl	800fd1c <__sfputc_r>
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	d1f3      	bne.n	800fd54 <__sfputs_r+0xa>
 800fd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd70 <_vfiprintf_r>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	460d      	mov	r5, r1
 800fd76:	b09d      	sub	sp, #116	; 0x74
 800fd78:	4614      	mov	r4, r2
 800fd7a:	4698      	mov	r8, r3
 800fd7c:	4606      	mov	r6, r0
 800fd7e:	b118      	cbz	r0, 800fd88 <_vfiprintf_r+0x18>
 800fd80:	6a03      	ldr	r3, [r0, #32]
 800fd82:	b90b      	cbnz	r3, 800fd88 <_vfiprintf_r+0x18>
 800fd84:	f7fe fa24 	bl	800e1d0 <__sinit>
 800fd88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd8a:	07d9      	lsls	r1, r3, #31
 800fd8c:	d405      	bmi.n	800fd9a <_vfiprintf_r+0x2a>
 800fd8e:	89ab      	ldrh	r3, [r5, #12]
 800fd90:	059a      	lsls	r2, r3, #22
 800fd92:	d402      	bmi.n	800fd9a <_vfiprintf_r+0x2a>
 800fd94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd96:	f7fe fcc9 	bl	800e72c <__retarget_lock_acquire_recursive>
 800fd9a:	89ab      	ldrh	r3, [r5, #12]
 800fd9c:	071b      	lsls	r3, r3, #28
 800fd9e:	d501      	bpl.n	800fda4 <_vfiprintf_r+0x34>
 800fda0:	692b      	ldr	r3, [r5, #16]
 800fda2:	b99b      	cbnz	r3, 800fdcc <_vfiprintf_r+0x5c>
 800fda4:	4629      	mov	r1, r5
 800fda6:	4630      	mov	r0, r6
 800fda8:	f7fe fbec 	bl	800e584 <__swsetup_r>
 800fdac:	b170      	cbz	r0, 800fdcc <_vfiprintf_r+0x5c>
 800fdae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdb0:	07dc      	lsls	r4, r3, #31
 800fdb2:	d504      	bpl.n	800fdbe <_vfiprintf_r+0x4e>
 800fdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb8:	b01d      	add	sp, #116	; 0x74
 800fdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	0598      	lsls	r0, r3, #22
 800fdc2:	d4f7      	bmi.n	800fdb4 <_vfiprintf_r+0x44>
 800fdc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdc6:	f7fe fcb2 	bl	800e72e <__retarget_lock_release_recursive>
 800fdca:	e7f3      	b.n	800fdb4 <_vfiprintf_r+0x44>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9309      	str	r3, [sp, #36]	; 0x24
 800fdd0:	2320      	movs	r3, #32
 800fdd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fdd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdda:	2330      	movs	r3, #48	; 0x30
 800fddc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ff90 <_vfiprintf_r+0x220>
 800fde0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fde4:	f04f 0901 	mov.w	r9, #1
 800fde8:	4623      	mov	r3, r4
 800fdea:	469a      	mov	sl, r3
 800fdec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdf0:	b10a      	cbz	r2, 800fdf6 <_vfiprintf_r+0x86>
 800fdf2:	2a25      	cmp	r2, #37	; 0x25
 800fdf4:	d1f9      	bne.n	800fdea <_vfiprintf_r+0x7a>
 800fdf6:	ebba 0b04 	subs.w	fp, sl, r4
 800fdfa:	d00b      	beq.n	800fe14 <_vfiprintf_r+0xa4>
 800fdfc:	465b      	mov	r3, fp
 800fdfe:	4622      	mov	r2, r4
 800fe00:	4629      	mov	r1, r5
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7ff ffa1 	bl	800fd4a <__sfputs_r>
 800fe08:	3001      	adds	r0, #1
 800fe0a:	f000 80a9 	beq.w	800ff60 <_vfiprintf_r+0x1f0>
 800fe0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe10:	445a      	add	r2, fp
 800fe12:	9209      	str	r2, [sp, #36]	; 0x24
 800fe14:	f89a 3000 	ldrb.w	r3, [sl]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 80a1 	beq.w	800ff60 <_vfiprintf_r+0x1f0>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f04f 32ff 	mov.w	r2, #4294967295
 800fe24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe28:	f10a 0a01 	add.w	sl, sl, #1
 800fe2c:	9304      	str	r3, [sp, #16]
 800fe2e:	9307      	str	r3, [sp, #28]
 800fe30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe34:	931a      	str	r3, [sp, #104]	; 0x68
 800fe36:	4654      	mov	r4, sl
 800fe38:	2205      	movs	r2, #5
 800fe3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe3e:	4854      	ldr	r0, [pc, #336]	; (800ff90 <_vfiprintf_r+0x220>)
 800fe40:	f7f0 f9ee 	bl	8000220 <memchr>
 800fe44:	9a04      	ldr	r2, [sp, #16]
 800fe46:	b9d8      	cbnz	r0, 800fe80 <_vfiprintf_r+0x110>
 800fe48:	06d1      	lsls	r1, r2, #27
 800fe4a:	bf44      	itt	mi
 800fe4c:	2320      	movmi	r3, #32
 800fe4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe52:	0713      	lsls	r3, r2, #28
 800fe54:	bf44      	itt	mi
 800fe56:	232b      	movmi	r3, #43	; 0x2b
 800fe58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe5c:	f89a 3000 	ldrb.w	r3, [sl]
 800fe60:	2b2a      	cmp	r3, #42	; 0x2a
 800fe62:	d015      	beq.n	800fe90 <_vfiprintf_r+0x120>
 800fe64:	9a07      	ldr	r2, [sp, #28]
 800fe66:	4654      	mov	r4, sl
 800fe68:	2000      	movs	r0, #0
 800fe6a:	f04f 0c0a 	mov.w	ip, #10
 800fe6e:	4621      	mov	r1, r4
 800fe70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe74:	3b30      	subs	r3, #48	; 0x30
 800fe76:	2b09      	cmp	r3, #9
 800fe78:	d94d      	bls.n	800ff16 <_vfiprintf_r+0x1a6>
 800fe7a:	b1b0      	cbz	r0, 800feaa <_vfiprintf_r+0x13a>
 800fe7c:	9207      	str	r2, [sp, #28]
 800fe7e:	e014      	b.n	800feaa <_vfiprintf_r+0x13a>
 800fe80:	eba0 0308 	sub.w	r3, r0, r8
 800fe84:	fa09 f303 	lsl.w	r3, r9, r3
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	9304      	str	r3, [sp, #16]
 800fe8c:	46a2      	mov	sl, r4
 800fe8e:	e7d2      	b.n	800fe36 <_vfiprintf_r+0xc6>
 800fe90:	9b03      	ldr	r3, [sp, #12]
 800fe92:	1d19      	adds	r1, r3, #4
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	9103      	str	r1, [sp, #12]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	bfbb      	ittet	lt
 800fe9c:	425b      	neglt	r3, r3
 800fe9e:	f042 0202 	orrlt.w	r2, r2, #2
 800fea2:	9307      	strge	r3, [sp, #28]
 800fea4:	9307      	strlt	r3, [sp, #28]
 800fea6:	bfb8      	it	lt
 800fea8:	9204      	strlt	r2, [sp, #16]
 800feaa:	7823      	ldrb	r3, [r4, #0]
 800feac:	2b2e      	cmp	r3, #46	; 0x2e
 800feae:	d10c      	bne.n	800feca <_vfiprintf_r+0x15a>
 800feb0:	7863      	ldrb	r3, [r4, #1]
 800feb2:	2b2a      	cmp	r3, #42	; 0x2a
 800feb4:	d134      	bne.n	800ff20 <_vfiprintf_r+0x1b0>
 800feb6:	9b03      	ldr	r3, [sp, #12]
 800feb8:	1d1a      	adds	r2, r3, #4
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	9203      	str	r2, [sp, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	bfb8      	it	lt
 800fec2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fec6:	3402      	adds	r4, #2
 800fec8:	9305      	str	r3, [sp, #20]
 800feca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ffa0 <_vfiprintf_r+0x230>
 800fece:	7821      	ldrb	r1, [r4, #0]
 800fed0:	2203      	movs	r2, #3
 800fed2:	4650      	mov	r0, sl
 800fed4:	f7f0 f9a4 	bl	8000220 <memchr>
 800fed8:	b138      	cbz	r0, 800feea <_vfiprintf_r+0x17a>
 800feda:	9b04      	ldr	r3, [sp, #16]
 800fedc:	eba0 000a 	sub.w	r0, r0, sl
 800fee0:	2240      	movs	r2, #64	; 0x40
 800fee2:	4082      	lsls	r2, r0
 800fee4:	4313      	orrs	r3, r2
 800fee6:	3401      	adds	r4, #1
 800fee8:	9304      	str	r3, [sp, #16]
 800feea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feee:	4829      	ldr	r0, [pc, #164]	; (800ff94 <_vfiprintf_r+0x224>)
 800fef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fef4:	2206      	movs	r2, #6
 800fef6:	f7f0 f993 	bl	8000220 <memchr>
 800fefa:	2800      	cmp	r0, #0
 800fefc:	d03f      	beq.n	800ff7e <_vfiprintf_r+0x20e>
 800fefe:	4b26      	ldr	r3, [pc, #152]	; (800ff98 <_vfiprintf_r+0x228>)
 800ff00:	bb1b      	cbnz	r3, 800ff4a <_vfiprintf_r+0x1da>
 800ff02:	9b03      	ldr	r3, [sp, #12]
 800ff04:	3307      	adds	r3, #7
 800ff06:	f023 0307 	bic.w	r3, r3, #7
 800ff0a:	3308      	adds	r3, #8
 800ff0c:	9303      	str	r3, [sp, #12]
 800ff0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff10:	443b      	add	r3, r7
 800ff12:	9309      	str	r3, [sp, #36]	; 0x24
 800ff14:	e768      	b.n	800fde8 <_vfiprintf_r+0x78>
 800ff16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	2001      	movs	r0, #1
 800ff1e:	e7a6      	b.n	800fe6e <_vfiprintf_r+0xfe>
 800ff20:	2300      	movs	r3, #0
 800ff22:	3401      	adds	r4, #1
 800ff24:	9305      	str	r3, [sp, #20]
 800ff26:	4619      	mov	r1, r3
 800ff28:	f04f 0c0a 	mov.w	ip, #10
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff32:	3a30      	subs	r2, #48	; 0x30
 800ff34:	2a09      	cmp	r2, #9
 800ff36:	d903      	bls.n	800ff40 <_vfiprintf_r+0x1d0>
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d0c6      	beq.n	800feca <_vfiprintf_r+0x15a>
 800ff3c:	9105      	str	r1, [sp, #20]
 800ff3e:	e7c4      	b.n	800feca <_vfiprintf_r+0x15a>
 800ff40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff44:	4604      	mov	r4, r0
 800ff46:	2301      	movs	r3, #1
 800ff48:	e7f0      	b.n	800ff2c <_vfiprintf_r+0x1bc>
 800ff4a:	ab03      	add	r3, sp, #12
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	462a      	mov	r2, r5
 800ff50:	4b12      	ldr	r3, [pc, #72]	; (800ff9c <_vfiprintf_r+0x22c>)
 800ff52:	a904      	add	r1, sp, #16
 800ff54:	4630      	mov	r0, r6
 800ff56:	f7fd fcfb 	bl	800d950 <_printf_float>
 800ff5a:	4607      	mov	r7, r0
 800ff5c:	1c78      	adds	r0, r7, #1
 800ff5e:	d1d6      	bne.n	800ff0e <_vfiprintf_r+0x19e>
 800ff60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff62:	07d9      	lsls	r1, r3, #31
 800ff64:	d405      	bmi.n	800ff72 <_vfiprintf_r+0x202>
 800ff66:	89ab      	ldrh	r3, [r5, #12]
 800ff68:	059a      	lsls	r2, r3, #22
 800ff6a:	d402      	bmi.n	800ff72 <_vfiprintf_r+0x202>
 800ff6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff6e:	f7fe fbde 	bl	800e72e <__retarget_lock_release_recursive>
 800ff72:	89ab      	ldrh	r3, [r5, #12]
 800ff74:	065b      	lsls	r3, r3, #25
 800ff76:	f53f af1d 	bmi.w	800fdb4 <_vfiprintf_r+0x44>
 800ff7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff7c:	e71c      	b.n	800fdb8 <_vfiprintf_r+0x48>
 800ff7e:	ab03      	add	r3, sp, #12
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	462a      	mov	r2, r5
 800ff84:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <_vfiprintf_r+0x22c>)
 800ff86:	a904      	add	r1, sp, #16
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f7fd ff85 	bl	800de98 <_printf_i>
 800ff8e:	e7e4      	b.n	800ff5a <_vfiprintf_r+0x1ea>
 800ff90:	0801185c 	.word	0x0801185c
 800ff94:	08011866 	.word	0x08011866
 800ff98:	0800d951 	.word	0x0800d951
 800ff9c:	0800fd4b 	.word	0x0800fd4b
 800ffa0:	08011862 	.word	0x08011862

0800ffa4 <__sflush_r>:
 800ffa4:	898a      	ldrh	r2, [r1, #12]
 800ffa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffaa:	4605      	mov	r5, r0
 800ffac:	0710      	lsls	r0, r2, #28
 800ffae:	460c      	mov	r4, r1
 800ffb0:	d458      	bmi.n	8010064 <__sflush_r+0xc0>
 800ffb2:	684b      	ldr	r3, [r1, #4]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	dc05      	bgt.n	800ffc4 <__sflush_r+0x20>
 800ffb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	dc02      	bgt.n	800ffc4 <__sflush_r+0x20>
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffc6:	2e00      	cmp	r6, #0
 800ffc8:	d0f9      	beq.n	800ffbe <__sflush_r+0x1a>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ffd0:	682f      	ldr	r7, [r5, #0]
 800ffd2:	6a21      	ldr	r1, [r4, #32]
 800ffd4:	602b      	str	r3, [r5, #0]
 800ffd6:	d032      	beq.n	801003e <__sflush_r+0x9a>
 800ffd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	075a      	lsls	r2, r3, #29
 800ffde:	d505      	bpl.n	800ffec <__sflush_r+0x48>
 800ffe0:	6863      	ldr	r3, [r4, #4]
 800ffe2:	1ac0      	subs	r0, r0, r3
 800ffe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ffe6:	b10b      	cbz	r3, 800ffec <__sflush_r+0x48>
 800ffe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffea:	1ac0      	subs	r0, r0, r3
 800ffec:	2300      	movs	r3, #0
 800ffee:	4602      	mov	r2, r0
 800fff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fff2:	6a21      	ldr	r1, [r4, #32]
 800fff4:	4628      	mov	r0, r5
 800fff6:	47b0      	blx	r6
 800fff8:	1c43      	adds	r3, r0, #1
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	d106      	bne.n	801000c <__sflush_r+0x68>
 800fffe:	6829      	ldr	r1, [r5, #0]
 8010000:	291d      	cmp	r1, #29
 8010002:	d82b      	bhi.n	801005c <__sflush_r+0xb8>
 8010004:	4a29      	ldr	r2, [pc, #164]	; (80100ac <__sflush_r+0x108>)
 8010006:	410a      	asrs	r2, r1
 8010008:	07d6      	lsls	r6, r2, #31
 801000a:	d427      	bmi.n	801005c <__sflush_r+0xb8>
 801000c:	2200      	movs	r2, #0
 801000e:	6062      	str	r2, [r4, #4]
 8010010:	04d9      	lsls	r1, r3, #19
 8010012:	6922      	ldr	r2, [r4, #16]
 8010014:	6022      	str	r2, [r4, #0]
 8010016:	d504      	bpl.n	8010022 <__sflush_r+0x7e>
 8010018:	1c42      	adds	r2, r0, #1
 801001a:	d101      	bne.n	8010020 <__sflush_r+0x7c>
 801001c:	682b      	ldr	r3, [r5, #0]
 801001e:	b903      	cbnz	r3, 8010022 <__sflush_r+0x7e>
 8010020:	6560      	str	r0, [r4, #84]	; 0x54
 8010022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010024:	602f      	str	r7, [r5, #0]
 8010026:	2900      	cmp	r1, #0
 8010028:	d0c9      	beq.n	800ffbe <__sflush_r+0x1a>
 801002a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801002e:	4299      	cmp	r1, r3
 8010030:	d002      	beq.n	8010038 <__sflush_r+0x94>
 8010032:	4628      	mov	r0, r5
 8010034:	f7ff f9f6 	bl	800f424 <_free_r>
 8010038:	2000      	movs	r0, #0
 801003a:	6360      	str	r0, [r4, #52]	; 0x34
 801003c:	e7c0      	b.n	800ffc0 <__sflush_r+0x1c>
 801003e:	2301      	movs	r3, #1
 8010040:	4628      	mov	r0, r5
 8010042:	47b0      	blx	r6
 8010044:	1c41      	adds	r1, r0, #1
 8010046:	d1c8      	bne.n	800ffda <__sflush_r+0x36>
 8010048:	682b      	ldr	r3, [r5, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d0c5      	beq.n	800ffda <__sflush_r+0x36>
 801004e:	2b1d      	cmp	r3, #29
 8010050:	d001      	beq.n	8010056 <__sflush_r+0xb2>
 8010052:	2b16      	cmp	r3, #22
 8010054:	d101      	bne.n	801005a <__sflush_r+0xb6>
 8010056:	602f      	str	r7, [r5, #0]
 8010058:	e7b1      	b.n	800ffbe <__sflush_r+0x1a>
 801005a:	89a3      	ldrh	r3, [r4, #12]
 801005c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010060:	81a3      	strh	r3, [r4, #12]
 8010062:	e7ad      	b.n	800ffc0 <__sflush_r+0x1c>
 8010064:	690f      	ldr	r7, [r1, #16]
 8010066:	2f00      	cmp	r7, #0
 8010068:	d0a9      	beq.n	800ffbe <__sflush_r+0x1a>
 801006a:	0793      	lsls	r3, r2, #30
 801006c:	680e      	ldr	r6, [r1, #0]
 801006e:	bf08      	it	eq
 8010070:	694b      	ldreq	r3, [r1, #20]
 8010072:	600f      	str	r7, [r1, #0]
 8010074:	bf18      	it	ne
 8010076:	2300      	movne	r3, #0
 8010078:	eba6 0807 	sub.w	r8, r6, r7
 801007c:	608b      	str	r3, [r1, #8]
 801007e:	f1b8 0f00 	cmp.w	r8, #0
 8010082:	dd9c      	ble.n	800ffbe <__sflush_r+0x1a>
 8010084:	6a21      	ldr	r1, [r4, #32]
 8010086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010088:	4643      	mov	r3, r8
 801008a:	463a      	mov	r2, r7
 801008c:	4628      	mov	r0, r5
 801008e:	47b0      	blx	r6
 8010090:	2800      	cmp	r0, #0
 8010092:	dc06      	bgt.n	80100a2 <__sflush_r+0xfe>
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	e78e      	b.n	800ffc0 <__sflush_r+0x1c>
 80100a2:	4407      	add	r7, r0
 80100a4:	eba8 0800 	sub.w	r8, r8, r0
 80100a8:	e7e9      	b.n	801007e <__sflush_r+0xda>
 80100aa:	bf00      	nop
 80100ac:	dfbffffe 	.word	0xdfbffffe

080100b0 <_fflush_r>:
 80100b0:	b538      	push	{r3, r4, r5, lr}
 80100b2:	690b      	ldr	r3, [r1, #16]
 80100b4:	4605      	mov	r5, r0
 80100b6:	460c      	mov	r4, r1
 80100b8:	b913      	cbnz	r3, 80100c0 <_fflush_r+0x10>
 80100ba:	2500      	movs	r5, #0
 80100bc:	4628      	mov	r0, r5
 80100be:	bd38      	pop	{r3, r4, r5, pc}
 80100c0:	b118      	cbz	r0, 80100ca <_fflush_r+0x1a>
 80100c2:	6a03      	ldr	r3, [r0, #32]
 80100c4:	b90b      	cbnz	r3, 80100ca <_fflush_r+0x1a>
 80100c6:	f7fe f883 	bl	800e1d0 <__sinit>
 80100ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d0f3      	beq.n	80100ba <_fflush_r+0xa>
 80100d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80100d4:	07d0      	lsls	r0, r2, #31
 80100d6:	d404      	bmi.n	80100e2 <_fflush_r+0x32>
 80100d8:	0599      	lsls	r1, r3, #22
 80100da:	d402      	bmi.n	80100e2 <_fflush_r+0x32>
 80100dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100de:	f7fe fb25 	bl	800e72c <__retarget_lock_acquire_recursive>
 80100e2:	4628      	mov	r0, r5
 80100e4:	4621      	mov	r1, r4
 80100e6:	f7ff ff5d 	bl	800ffa4 <__sflush_r>
 80100ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100ec:	07da      	lsls	r2, r3, #31
 80100ee:	4605      	mov	r5, r0
 80100f0:	d4e4      	bmi.n	80100bc <_fflush_r+0xc>
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	059b      	lsls	r3, r3, #22
 80100f6:	d4e1      	bmi.n	80100bc <_fflush_r+0xc>
 80100f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100fa:	f7fe fb18 	bl	800e72e <__retarget_lock_release_recursive>
 80100fe:	e7dd      	b.n	80100bc <_fflush_r+0xc>

08010100 <__swhatbuf_r>:
 8010100:	b570      	push	{r4, r5, r6, lr}
 8010102:	460c      	mov	r4, r1
 8010104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010108:	2900      	cmp	r1, #0
 801010a:	b096      	sub	sp, #88	; 0x58
 801010c:	4615      	mov	r5, r2
 801010e:	461e      	mov	r6, r3
 8010110:	da0d      	bge.n	801012e <__swhatbuf_r+0x2e>
 8010112:	89a3      	ldrh	r3, [r4, #12]
 8010114:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010118:	f04f 0100 	mov.w	r1, #0
 801011c:	bf0c      	ite	eq
 801011e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010122:	2340      	movne	r3, #64	; 0x40
 8010124:	2000      	movs	r0, #0
 8010126:	6031      	str	r1, [r6, #0]
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	b016      	add	sp, #88	; 0x58
 801012c:	bd70      	pop	{r4, r5, r6, pc}
 801012e:	466a      	mov	r2, sp
 8010130:	f000 f848 	bl	80101c4 <_fstat_r>
 8010134:	2800      	cmp	r0, #0
 8010136:	dbec      	blt.n	8010112 <__swhatbuf_r+0x12>
 8010138:	9901      	ldr	r1, [sp, #4]
 801013a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801013e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010142:	4259      	negs	r1, r3
 8010144:	4159      	adcs	r1, r3
 8010146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801014a:	e7eb      	b.n	8010124 <__swhatbuf_r+0x24>

0801014c <__smakebuf_r>:
 801014c:	898b      	ldrh	r3, [r1, #12]
 801014e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010150:	079d      	lsls	r5, r3, #30
 8010152:	4606      	mov	r6, r0
 8010154:	460c      	mov	r4, r1
 8010156:	d507      	bpl.n	8010168 <__smakebuf_r+0x1c>
 8010158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801015c:	6023      	str	r3, [r4, #0]
 801015e:	6123      	str	r3, [r4, #16]
 8010160:	2301      	movs	r3, #1
 8010162:	6163      	str	r3, [r4, #20]
 8010164:	b002      	add	sp, #8
 8010166:	bd70      	pop	{r4, r5, r6, pc}
 8010168:	ab01      	add	r3, sp, #4
 801016a:	466a      	mov	r2, sp
 801016c:	f7ff ffc8 	bl	8010100 <__swhatbuf_r>
 8010170:	9900      	ldr	r1, [sp, #0]
 8010172:	4605      	mov	r5, r0
 8010174:	4630      	mov	r0, r6
 8010176:	f7ff f9c9 	bl	800f50c <_malloc_r>
 801017a:	b948      	cbnz	r0, 8010190 <__smakebuf_r+0x44>
 801017c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010180:	059a      	lsls	r2, r3, #22
 8010182:	d4ef      	bmi.n	8010164 <__smakebuf_r+0x18>
 8010184:	f023 0303 	bic.w	r3, r3, #3
 8010188:	f043 0302 	orr.w	r3, r3, #2
 801018c:	81a3      	strh	r3, [r4, #12]
 801018e:	e7e3      	b.n	8010158 <__smakebuf_r+0xc>
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	6020      	str	r0, [r4, #0]
 8010194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010198:	81a3      	strh	r3, [r4, #12]
 801019a:	9b00      	ldr	r3, [sp, #0]
 801019c:	6163      	str	r3, [r4, #20]
 801019e:	9b01      	ldr	r3, [sp, #4]
 80101a0:	6120      	str	r0, [r4, #16]
 80101a2:	b15b      	cbz	r3, 80101bc <__smakebuf_r+0x70>
 80101a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101a8:	4630      	mov	r0, r6
 80101aa:	f000 f81d 	bl	80101e8 <_isatty_r>
 80101ae:	b128      	cbz	r0, 80101bc <__smakebuf_r+0x70>
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	f023 0303 	bic.w	r3, r3, #3
 80101b6:	f043 0301 	orr.w	r3, r3, #1
 80101ba:	81a3      	strh	r3, [r4, #12]
 80101bc:	89a3      	ldrh	r3, [r4, #12]
 80101be:	431d      	orrs	r5, r3
 80101c0:	81a5      	strh	r5, [r4, #12]
 80101c2:	e7cf      	b.n	8010164 <__smakebuf_r+0x18>

080101c4 <_fstat_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4d07      	ldr	r5, [pc, #28]	; (80101e4 <_fstat_r+0x20>)
 80101c8:	2300      	movs	r3, #0
 80101ca:	4604      	mov	r4, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	4611      	mov	r1, r2
 80101d0:	602b      	str	r3, [r5, #0]
 80101d2:	f7f5 fbc4 	bl	800595e <_fstat>
 80101d6:	1c43      	adds	r3, r0, #1
 80101d8:	d102      	bne.n	80101e0 <_fstat_r+0x1c>
 80101da:	682b      	ldr	r3, [r5, #0]
 80101dc:	b103      	cbz	r3, 80101e0 <_fstat_r+0x1c>
 80101de:	6023      	str	r3, [r4, #0]
 80101e0:	bd38      	pop	{r3, r4, r5, pc}
 80101e2:	bf00      	nop
 80101e4:	20000fbc 	.word	0x20000fbc

080101e8 <_isatty_r>:
 80101e8:	b538      	push	{r3, r4, r5, lr}
 80101ea:	4d06      	ldr	r5, [pc, #24]	; (8010204 <_isatty_r+0x1c>)
 80101ec:	2300      	movs	r3, #0
 80101ee:	4604      	mov	r4, r0
 80101f0:	4608      	mov	r0, r1
 80101f2:	602b      	str	r3, [r5, #0]
 80101f4:	f7f5 fbc3 	bl	800597e <_isatty>
 80101f8:	1c43      	adds	r3, r0, #1
 80101fa:	d102      	bne.n	8010202 <_isatty_r+0x1a>
 80101fc:	682b      	ldr	r3, [r5, #0]
 80101fe:	b103      	cbz	r3, 8010202 <_isatty_r+0x1a>
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	bd38      	pop	{r3, r4, r5, pc}
 8010204:	20000fbc 	.word	0x20000fbc

08010208 <_sbrk_r>:
 8010208:	b538      	push	{r3, r4, r5, lr}
 801020a:	4d06      	ldr	r5, [pc, #24]	; (8010224 <_sbrk_r+0x1c>)
 801020c:	2300      	movs	r3, #0
 801020e:	4604      	mov	r4, r0
 8010210:	4608      	mov	r0, r1
 8010212:	602b      	str	r3, [r5, #0]
 8010214:	f001 f95c 	bl	80114d0 <_sbrk>
 8010218:	1c43      	adds	r3, r0, #1
 801021a:	d102      	bne.n	8010222 <_sbrk_r+0x1a>
 801021c:	682b      	ldr	r3, [r5, #0]
 801021e:	b103      	cbz	r3, 8010222 <_sbrk_r+0x1a>
 8010220:	6023      	str	r3, [r4, #0]
 8010222:	bd38      	pop	{r3, r4, r5, pc}
 8010224:	20000fbc 	.word	0x20000fbc

08010228 <memcpy>:
 8010228:	440a      	add	r2, r1
 801022a:	4291      	cmp	r1, r2
 801022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010230:	d100      	bne.n	8010234 <memcpy+0xc>
 8010232:	4770      	bx	lr
 8010234:	b510      	push	{r4, lr}
 8010236:	f811 4b01 	ldrb.w	r4, [r1], #1
 801023a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801023e:	4291      	cmp	r1, r2
 8010240:	d1f9      	bne.n	8010236 <memcpy+0xe>
 8010242:	bd10      	pop	{r4, pc}

08010244 <__assert_func>:
 8010244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010246:	4614      	mov	r4, r2
 8010248:	461a      	mov	r2, r3
 801024a:	4b09      	ldr	r3, [pc, #36]	; (8010270 <__assert_func+0x2c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	4605      	mov	r5, r0
 8010250:	68d8      	ldr	r0, [r3, #12]
 8010252:	b14c      	cbz	r4, 8010268 <__assert_func+0x24>
 8010254:	4b07      	ldr	r3, [pc, #28]	; (8010274 <__assert_func+0x30>)
 8010256:	9100      	str	r1, [sp, #0]
 8010258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801025c:	4906      	ldr	r1, [pc, #24]	; (8010278 <__assert_func+0x34>)
 801025e:	462b      	mov	r3, r5
 8010260:	f000 f844 	bl	80102ec <fiprintf>
 8010264:	f000 f854 	bl	8010310 <abort>
 8010268:	4b04      	ldr	r3, [pc, #16]	; (801027c <__assert_func+0x38>)
 801026a:	461c      	mov	r4, r3
 801026c:	e7f3      	b.n	8010256 <__assert_func+0x12>
 801026e:	bf00      	nop
 8010270:	2000006c 	.word	0x2000006c
 8010274:	08011877 	.word	0x08011877
 8010278:	08011884 	.word	0x08011884
 801027c:	080118b2 	.word	0x080118b2

08010280 <_calloc_r>:
 8010280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010282:	fba1 2402 	umull	r2, r4, r1, r2
 8010286:	b94c      	cbnz	r4, 801029c <_calloc_r+0x1c>
 8010288:	4611      	mov	r1, r2
 801028a:	9201      	str	r2, [sp, #4]
 801028c:	f7ff f93e 	bl	800f50c <_malloc_r>
 8010290:	9a01      	ldr	r2, [sp, #4]
 8010292:	4605      	mov	r5, r0
 8010294:	b930      	cbnz	r0, 80102a4 <_calloc_r+0x24>
 8010296:	4628      	mov	r0, r5
 8010298:	b003      	add	sp, #12
 801029a:	bd30      	pop	{r4, r5, pc}
 801029c:	220c      	movs	r2, #12
 801029e:	6002      	str	r2, [r0, #0]
 80102a0:	2500      	movs	r5, #0
 80102a2:	e7f8      	b.n	8010296 <_calloc_r+0x16>
 80102a4:	4621      	mov	r1, r4
 80102a6:	f7fe f9c5 	bl	800e634 <memset>
 80102aa:	e7f4      	b.n	8010296 <_calloc_r+0x16>

080102ac <__ascii_mbtowc>:
 80102ac:	b082      	sub	sp, #8
 80102ae:	b901      	cbnz	r1, 80102b2 <__ascii_mbtowc+0x6>
 80102b0:	a901      	add	r1, sp, #4
 80102b2:	b142      	cbz	r2, 80102c6 <__ascii_mbtowc+0x1a>
 80102b4:	b14b      	cbz	r3, 80102ca <__ascii_mbtowc+0x1e>
 80102b6:	7813      	ldrb	r3, [r2, #0]
 80102b8:	600b      	str	r3, [r1, #0]
 80102ba:	7812      	ldrb	r2, [r2, #0]
 80102bc:	1e10      	subs	r0, r2, #0
 80102be:	bf18      	it	ne
 80102c0:	2001      	movne	r0, #1
 80102c2:	b002      	add	sp, #8
 80102c4:	4770      	bx	lr
 80102c6:	4610      	mov	r0, r2
 80102c8:	e7fb      	b.n	80102c2 <__ascii_mbtowc+0x16>
 80102ca:	f06f 0001 	mvn.w	r0, #1
 80102ce:	e7f8      	b.n	80102c2 <__ascii_mbtowc+0x16>

080102d0 <__ascii_wctomb>:
 80102d0:	b149      	cbz	r1, 80102e6 <__ascii_wctomb+0x16>
 80102d2:	2aff      	cmp	r2, #255	; 0xff
 80102d4:	bf85      	ittet	hi
 80102d6:	238a      	movhi	r3, #138	; 0x8a
 80102d8:	6003      	strhi	r3, [r0, #0]
 80102da:	700a      	strbls	r2, [r1, #0]
 80102dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80102e0:	bf98      	it	ls
 80102e2:	2001      	movls	r0, #1
 80102e4:	4770      	bx	lr
 80102e6:	4608      	mov	r0, r1
 80102e8:	4770      	bx	lr
	...

080102ec <fiprintf>:
 80102ec:	b40e      	push	{r1, r2, r3}
 80102ee:	b503      	push	{r0, r1, lr}
 80102f0:	4601      	mov	r1, r0
 80102f2:	ab03      	add	r3, sp, #12
 80102f4:	4805      	ldr	r0, [pc, #20]	; (801030c <fiprintf+0x20>)
 80102f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102fa:	6800      	ldr	r0, [r0, #0]
 80102fc:	9301      	str	r3, [sp, #4]
 80102fe:	f7ff fd37 	bl	800fd70 <_vfiprintf_r>
 8010302:	b002      	add	sp, #8
 8010304:	f85d eb04 	ldr.w	lr, [sp], #4
 8010308:	b003      	add	sp, #12
 801030a:	4770      	bx	lr
 801030c:	2000006c 	.word	0x2000006c

08010310 <abort>:
 8010310:	b508      	push	{r3, lr}
 8010312:	2006      	movs	r0, #6
 8010314:	f000 f82c 	bl	8010370 <raise>
 8010318:	2001      	movs	r0, #1
 801031a:	f7f5 faed 	bl	80058f8 <_exit>

0801031e <_raise_r>:
 801031e:	291f      	cmp	r1, #31
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	4604      	mov	r4, r0
 8010324:	460d      	mov	r5, r1
 8010326:	d904      	bls.n	8010332 <_raise_r+0x14>
 8010328:	2316      	movs	r3, #22
 801032a:	6003      	str	r3, [r0, #0]
 801032c:	f04f 30ff 	mov.w	r0, #4294967295
 8010330:	bd38      	pop	{r3, r4, r5, pc}
 8010332:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010334:	b112      	cbz	r2, 801033c <_raise_r+0x1e>
 8010336:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801033a:	b94b      	cbnz	r3, 8010350 <_raise_r+0x32>
 801033c:	4620      	mov	r0, r4
 801033e:	f000 f831 	bl	80103a4 <_getpid_r>
 8010342:	462a      	mov	r2, r5
 8010344:	4601      	mov	r1, r0
 8010346:	4620      	mov	r0, r4
 8010348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801034c:	f000 b818 	b.w	8010380 <_kill_r>
 8010350:	2b01      	cmp	r3, #1
 8010352:	d00a      	beq.n	801036a <_raise_r+0x4c>
 8010354:	1c59      	adds	r1, r3, #1
 8010356:	d103      	bne.n	8010360 <_raise_r+0x42>
 8010358:	2316      	movs	r3, #22
 801035a:	6003      	str	r3, [r0, #0]
 801035c:	2001      	movs	r0, #1
 801035e:	e7e7      	b.n	8010330 <_raise_r+0x12>
 8010360:	2400      	movs	r4, #0
 8010362:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010366:	4628      	mov	r0, r5
 8010368:	4798      	blx	r3
 801036a:	2000      	movs	r0, #0
 801036c:	e7e0      	b.n	8010330 <_raise_r+0x12>
	...

08010370 <raise>:
 8010370:	4b02      	ldr	r3, [pc, #8]	; (801037c <raise+0xc>)
 8010372:	4601      	mov	r1, r0
 8010374:	6818      	ldr	r0, [r3, #0]
 8010376:	f7ff bfd2 	b.w	801031e <_raise_r>
 801037a:	bf00      	nop
 801037c:	2000006c 	.word	0x2000006c

08010380 <_kill_r>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4d07      	ldr	r5, [pc, #28]	; (80103a0 <_kill_r+0x20>)
 8010384:	2300      	movs	r3, #0
 8010386:	4604      	mov	r4, r0
 8010388:	4608      	mov	r0, r1
 801038a:	4611      	mov	r1, r2
 801038c:	602b      	str	r3, [r5, #0]
 801038e:	f7f5 faa3 	bl	80058d8 <_kill>
 8010392:	1c43      	adds	r3, r0, #1
 8010394:	d102      	bne.n	801039c <_kill_r+0x1c>
 8010396:	682b      	ldr	r3, [r5, #0]
 8010398:	b103      	cbz	r3, 801039c <_kill_r+0x1c>
 801039a:	6023      	str	r3, [r4, #0]
 801039c:	bd38      	pop	{r3, r4, r5, pc}
 801039e:	bf00      	nop
 80103a0:	20000fbc 	.word	0x20000fbc

080103a4 <_getpid_r>:
 80103a4:	f7f5 ba90 	b.w	80058c8 <_getpid>

080103a8 <cos>:
 80103a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103aa:	ec53 2b10 	vmov	r2, r3, d0
 80103ae:	4826      	ldr	r0, [pc, #152]	; (8010448 <cos+0xa0>)
 80103b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80103b4:	4281      	cmp	r1, r0
 80103b6:	dc06      	bgt.n	80103c6 <cos+0x1e>
 80103b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010440 <cos+0x98>
 80103bc:	b005      	add	sp, #20
 80103be:	f85d eb04 	ldr.w	lr, [sp], #4
 80103c2:	f000 b89d 	b.w	8010500 <__kernel_cos>
 80103c6:	4821      	ldr	r0, [pc, #132]	; (801044c <cos+0xa4>)
 80103c8:	4281      	cmp	r1, r0
 80103ca:	dd09      	ble.n	80103e0 <cos+0x38>
 80103cc:	ee10 0a10 	vmov	r0, s0
 80103d0:	4619      	mov	r1, r3
 80103d2:	f7ef ff81 	bl	80002d8 <__aeabi_dsub>
 80103d6:	ec41 0b10 	vmov	d0, r0, r1
 80103da:	b005      	add	sp, #20
 80103dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80103e0:	4668      	mov	r0, sp
 80103e2:	f000 fa15 	bl	8010810 <__ieee754_rem_pio2>
 80103e6:	f000 0003 	and.w	r0, r0, #3
 80103ea:	2801      	cmp	r0, #1
 80103ec:	d00b      	beq.n	8010406 <cos+0x5e>
 80103ee:	2802      	cmp	r0, #2
 80103f0:	d016      	beq.n	8010420 <cos+0x78>
 80103f2:	b9e0      	cbnz	r0, 801042e <cos+0x86>
 80103f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103f8:	ed9d 0b00 	vldr	d0, [sp]
 80103fc:	f000 f880 	bl	8010500 <__kernel_cos>
 8010400:	ec51 0b10 	vmov	r0, r1, d0
 8010404:	e7e7      	b.n	80103d6 <cos+0x2e>
 8010406:	ed9d 1b02 	vldr	d1, [sp, #8]
 801040a:	ed9d 0b00 	vldr	d0, [sp]
 801040e:	f000 f93f 	bl	8010690 <__kernel_sin>
 8010412:	ec53 2b10 	vmov	r2, r3, d0
 8010416:	ee10 0a10 	vmov	r0, s0
 801041a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801041e:	e7da      	b.n	80103d6 <cos+0x2e>
 8010420:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010424:	ed9d 0b00 	vldr	d0, [sp]
 8010428:	f000 f86a 	bl	8010500 <__kernel_cos>
 801042c:	e7f1      	b.n	8010412 <cos+0x6a>
 801042e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010432:	ed9d 0b00 	vldr	d0, [sp]
 8010436:	2001      	movs	r0, #1
 8010438:	f000 f92a 	bl	8010690 <__kernel_sin>
 801043c:	e7e0      	b.n	8010400 <cos+0x58>
 801043e:	bf00      	nop
	...
 8010448:	3fe921fb 	.word	0x3fe921fb
 801044c:	7fefffff 	.word	0x7fefffff

08010450 <sin>:
 8010450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010452:	ec53 2b10 	vmov	r2, r3, d0
 8010456:	4828      	ldr	r0, [pc, #160]	; (80104f8 <sin+0xa8>)
 8010458:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801045c:	4281      	cmp	r1, r0
 801045e:	dc07      	bgt.n	8010470 <sin+0x20>
 8010460:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80104f0 <sin+0xa0>
 8010464:	2000      	movs	r0, #0
 8010466:	b005      	add	sp, #20
 8010468:	f85d eb04 	ldr.w	lr, [sp], #4
 801046c:	f000 b910 	b.w	8010690 <__kernel_sin>
 8010470:	4822      	ldr	r0, [pc, #136]	; (80104fc <sin+0xac>)
 8010472:	4281      	cmp	r1, r0
 8010474:	dd09      	ble.n	801048a <sin+0x3a>
 8010476:	ee10 0a10 	vmov	r0, s0
 801047a:	4619      	mov	r1, r3
 801047c:	f7ef ff2c 	bl	80002d8 <__aeabi_dsub>
 8010480:	ec41 0b10 	vmov	d0, r0, r1
 8010484:	b005      	add	sp, #20
 8010486:	f85d fb04 	ldr.w	pc, [sp], #4
 801048a:	4668      	mov	r0, sp
 801048c:	f000 f9c0 	bl	8010810 <__ieee754_rem_pio2>
 8010490:	f000 0003 	and.w	r0, r0, #3
 8010494:	2801      	cmp	r0, #1
 8010496:	d00c      	beq.n	80104b2 <sin+0x62>
 8010498:	2802      	cmp	r0, #2
 801049a:	d011      	beq.n	80104c0 <sin+0x70>
 801049c:	b9f0      	cbnz	r0, 80104dc <sin+0x8c>
 801049e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104a2:	ed9d 0b00 	vldr	d0, [sp]
 80104a6:	2001      	movs	r0, #1
 80104a8:	f000 f8f2 	bl	8010690 <__kernel_sin>
 80104ac:	ec51 0b10 	vmov	r0, r1, d0
 80104b0:	e7e6      	b.n	8010480 <sin+0x30>
 80104b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104b6:	ed9d 0b00 	vldr	d0, [sp]
 80104ba:	f000 f821 	bl	8010500 <__kernel_cos>
 80104be:	e7f5      	b.n	80104ac <sin+0x5c>
 80104c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104c4:	ed9d 0b00 	vldr	d0, [sp]
 80104c8:	2001      	movs	r0, #1
 80104ca:	f000 f8e1 	bl	8010690 <__kernel_sin>
 80104ce:	ec53 2b10 	vmov	r2, r3, d0
 80104d2:	ee10 0a10 	vmov	r0, s0
 80104d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80104da:	e7d1      	b.n	8010480 <sin+0x30>
 80104dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104e0:	ed9d 0b00 	vldr	d0, [sp]
 80104e4:	f000 f80c 	bl	8010500 <__kernel_cos>
 80104e8:	e7f1      	b.n	80104ce <sin+0x7e>
 80104ea:	bf00      	nop
 80104ec:	f3af 8000 	nop.w
	...
 80104f8:	3fe921fb 	.word	0x3fe921fb
 80104fc:	7fefffff 	.word	0x7fefffff

08010500 <__kernel_cos>:
 8010500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	ec57 6b10 	vmov	r6, r7, d0
 8010508:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801050c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010510:	ed8d 1b00 	vstr	d1, [sp]
 8010514:	da07      	bge.n	8010526 <__kernel_cos+0x26>
 8010516:	ee10 0a10 	vmov	r0, s0
 801051a:	4639      	mov	r1, r7
 801051c:	f7f0 fb44 	bl	8000ba8 <__aeabi_d2iz>
 8010520:	2800      	cmp	r0, #0
 8010522:	f000 8088 	beq.w	8010636 <__kernel_cos+0x136>
 8010526:	4632      	mov	r2, r6
 8010528:	463b      	mov	r3, r7
 801052a:	4630      	mov	r0, r6
 801052c:	4639      	mov	r1, r7
 801052e:	f7f0 f88b 	bl	8000648 <__aeabi_dmul>
 8010532:	4b51      	ldr	r3, [pc, #324]	; (8010678 <__kernel_cos+0x178>)
 8010534:	2200      	movs	r2, #0
 8010536:	4604      	mov	r4, r0
 8010538:	460d      	mov	r5, r1
 801053a:	f7f0 f885 	bl	8000648 <__aeabi_dmul>
 801053e:	a340      	add	r3, pc, #256	; (adr r3, 8010640 <__kernel_cos+0x140>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	4682      	mov	sl, r0
 8010546:	468b      	mov	fp, r1
 8010548:	4620      	mov	r0, r4
 801054a:	4629      	mov	r1, r5
 801054c:	f7f0 f87c 	bl	8000648 <__aeabi_dmul>
 8010550:	a33d      	add	r3, pc, #244	; (adr r3, 8010648 <__kernel_cos+0x148>)
 8010552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010556:	f7ef fec1 	bl	80002dc <__adddf3>
 801055a:	4622      	mov	r2, r4
 801055c:	462b      	mov	r3, r5
 801055e:	f7f0 f873 	bl	8000648 <__aeabi_dmul>
 8010562:	a33b      	add	r3, pc, #236	; (adr r3, 8010650 <__kernel_cos+0x150>)
 8010564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010568:	f7ef feb6 	bl	80002d8 <__aeabi_dsub>
 801056c:	4622      	mov	r2, r4
 801056e:	462b      	mov	r3, r5
 8010570:	f7f0 f86a 	bl	8000648 <__aeabi_dmul>
 8010574:	a338      	add	r3, pc, #224	; (adr r3, 8010658 <__kernel_cos+0x158>)
 8010576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057a:	f7ef feaf 	bl	80002dc <__adddf3>
 801057e:	4622      	mov	r2, r4
 8010580:	462b      	mov	r3, r5
 8010582:	f7f0 f861 	bl	8000648 <__aeabi_dmul>
 8010586:	a336      	add	r3, pc, #216	; (adr r3, 8010660 <__kernel_cos+0x160>)
 8010588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058c:	f7ef fea4 	bl	80002d8 <__aeabi_dsub>
 8010590:	4622      	mov	r2, r4
 8010592:	462b      	mov	r3, r5
 8010594:	f7f0 f858 	bl	8000648 <__aeabi_dmul>
 8010598:	a333      	add	r3, pc, #204	; (adr r3, 8010668 <__kernel_cos+0x168>)
 801059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059e:	f7ef fe9d 	bl	80002dc <__adddf3>
 80105a2:	4622      	mov	r2, r4
 80105a4:	462b      	mov	r3, r5
 80105a6:	f7f0 f84f 	bl	8000648 <__aeabi_dmul>
 80105aa:	4622      	mov	r2, r4
 80105ac:	462b      	mov	r3, r5
 80105ae:	f7f0 f84b 	bl	8000648 <__aeabi_dmul>
 80105b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105b6:	4604      	mov	r4, r0
 80105b8:	460d      	mov	r5, r1
 80105ba:	4630      	mov	r0, r6
 80105bc:	4639      	mov	r1, r7
 80105be:	f7f0 f843 	bl	8000648 <__aeabi_dmul>
 80105c2:	460b      	mov	r3, r1
 80105c4:	4602      	mov	r2, r0
 80105c6:	4629      	mov	r1, r5
 80105c8:	4620      	mov	r0, r4
 80105ca:	f7ef fe85 	bl	80002d8 <__aeabi_dsub>
 80105ce:	4b2b      	ldr	r3, [pc, #172]	; (801067c <__kernel_cos+0x17c>)
 80105d0:	4598      	cmp	r8, r3
 80105d2:	4606      	mov	r6, r0
 80105d4:	460f      	mov	r7, r1
 80105d6:	dc10      	bgt.n	80105fa <__kernel_cos+0xfa>
 80105d8:	4602      	mov	r2, r0
 80105da:	460b      	mov	r3, r1
 80105dc:	4650      	mov	r0, sl
 80105de:	4659      	mov	r1, fp
 80105e0:	f7ef fe7a 	bl	80002d8 <__aeabi_dsub>
 80105e4:	460b      	mov	r3, r1
 80105e6:	4926      	ldr	r1, [pc, #152]	; (8010680 <__kernel_cos+0x180>)
 80105e8:	4602      	mov	r2, r0
 80105ea:	2000      	movs	r0, #0
 80105ec:	f7ef fe74 	bl	80002d8 <__aeabi_dsub>
 80105f0:	ec41 0b10 	vmov	d0, r0, r1
 80105f4:	b003      	add	sp, #12
 80105f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105fa:	4b22      	ldr	r3, [pc, #136]	; (8010684 <__kernel_cos+0x184>)
 80105fc:	4920      	ldr	r1, [pc, #128]	; (8010680 <__kernel_cos+0x180>)
 80105fe:	4598      	cmp	r8, r3
 8010600:	bfcc      	ite	gt
 8010602:	4d21      	ldrgt	r5, [pc, #132]	; (8010688 <__kernel_cos+0x188>)
 8010604:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010608:	2400      	movs	r4, #0
 801060a:	4622      	mov	r2, r4
 801060c:	462b      	mov	r3, r5
 801060e:	2000      	movs	r0, #0
 8010610:	f7ef fe62 	bl	80002d8 <__aeabi_dsub>
 8010614:	4622      	mov	r2, r4
 8010616:	4680      	mov	r8, r0
 8010618:	4689      	mov	r9, r1
 801061a:	462b      	mov	r3, r5
 801061c:	4650      	mov	r0, sl
 801061e:	4659      	mov	r1, fp
 8010620:	f7ef fe5a 	bl	80002d8 <__aeabi_dsub>
 8010624:	4632      	mov	r2, r6
 8010626:	463b      	mov	r3, r7
 8010628:	f7ef fe56 	bl	80002d8 <__aeabi_dsub>
 801062c:	4602      	mov	r2, r0
 801062e:	460b      	mov	r3, r1
 8010630:	4640      	mov	r0, r8
 8010632:	4649      	mov	r1, r9
 8010634:	e7da      	b.n	80105ec <__kernel_cos+0xec>
 8010636:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010670 <__kernel_cos+0x170>
 801063a:	e7db      	b.n	80105f4 <__kernel_cos+0xf4>
 801063c:	f3af 8000 	nop.w
 8010640:	be8838d4 	.word	0xbe8838d4
 8010644:	bda8fae9 	.word	0xbda8fae9
 8010648:	bdb4b1c4 	.word	0xbdb4b1c4
 801064c:	3e21ee9e 	.word	0x3e21ee9e
 8010650:	809c52ad 	.word	0x809c52ad
 8010654:	3e927e4f 	.word	0x3e927e4f
 8010658:	19cb1590 	.word	0x19cb1590
 801065c:	3efa01a0 	.word	0x3efa01a0
 8010660:	16c15177 	.word	0x16c15177
 8010664:	3f56c16c 	.word	0x3f56c16c
 8010668:	5555554c 	.word	0x5555554c
 801066c:	3fa55555 	.word	0x3fa55555
 8010670:	00000000 	.word	0x00000000
 8010674:	3ff00000 	.word	0x3ff00000
 8010678:	3fe00000 	.word	0x3fe00000
 801067c:	3fd33332 	.word	0x3fd33332
 8010680:	3ff00000 	.word	0x3ff00000
 8010684:	3fe90000 	.word	0x3fe90000
 8010688:	3fd20000 	.word	0x3fd20000
 801068c:	00000000 	.word	0x00000000

08010690 <__kernel_sin>:
 8010690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010694:	ed2d 8b04 	vpush	{d8-d9}
 8010698:	eeb0 8a41 	vmov.f32	s16, s2
 801069c:	eef0 8a61 	vmov.f32	s17, s3
 80106a0:	ec55 4b10 	vmov	r4, r5, d0
 80106a4:	b083      	sub	sp, #12
 80106a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80106aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80106ae:	9001      	str	r0, [sp, #4]
 80106b0:	da06      	bge.n	80106c0 <__kernel_sin+0x30>
 80106b2:	ee10 0a10 	vmov	r0, s0
 80106b6:	4629      	mov	r1, r5
 80106b8:	f7f0 fa76 	bl	8000ba8 <__aeabi_d2iz>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d051      	beq.n	8010764 <__kernel_sin+0xd4>
 80106c0:	4622      	mov	r2, r4
 80106c2:	462b      	mov	r3, r5
 80106c4:	4620      	mov	r0, r4
 80106c6:	4629      	mov	r1, r5
 80106c8:	f7ef ffbe 	bl	8000648 <__aeabi_dmul>
 80106cc:	4682      	mov	sl, r0
 80106ce:	468b      	mov	fp, r1
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4620      	mov	r0, r4
 80106d6:	4629      	mov	r1, r5
 80106d8:	f7ef ffb6 	bl	8000648 <__aeabi_dmul>
 80106dc:	a341      	add	r3, pc, #260	; (adr r3, 80107e4 <__kernel_sin+0x154>)
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	4680      	mov	r8, r0
 80106e4:	4689      	mov	r9, r1
 80106e6:	4650      	mov	r0, sl
 80106e8:	4659      	mov	r1, fp
 80106ea:	f7ef ffad 	bl	8000648 <__aeabi_dmul>
 80106ee:	a33f      	add	r3, pc, #252	; (adr r3, 80107ec <__kernel_sin+0x15c>)
 80106f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f4:	f7ef fdf0 	bl	80002d8 <__aeabi_dsub>
 80106f8:	4652      	mov	r2, sl
 80106fa:	465b      	mov	r3, fp
 80106fc:	f7ef ffa4 	bl	8000648 <__aeabi_dmul>
 8010700:	a33c      	add	r3, pc, #240	; (adr r3, 80107f4 <__kernel_sin+0x164>)
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	f7ef fde9 	bl	80002dc <__adddf3>
 801070a:	4652      	mov	r2, sl
 801070c:	465b      	mov	r3, fp
 801070e:	f7ef ff9b 	bl	8000648 <__aeabi_dmul>
 8010712:	a33a      	add	r3, pc, #232	; (adr r3, 80107fc <__kernel_sin+0x16c>)
 8010714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010718:	f7ef fdde 	bl	80002d8 <__aeabi_dsub>
 801071c:	4652      	mov	r2, sl
 801071e:	465b      	mov	r3, fp
 8010720:	f7ef ff92 	bl	8000648 <__aeabi_dmul>
 8010724:	a337      	add	r3, pc, #220	; (adr r3, 8010804 <__kernel_sin+0x174>)
 8010726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072a:	f7ef fdd7 	bl	80002dc <__adddf3>
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	4606      	mov	r6, r0
 8010732:	460f      	mov	r7, r1
 8010734:	b9eb      	cbnz	r3, 8010772 <__kernel_sin+0xe2>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4650      	mov	r0, sl
 801073c:	4659      	mov	r1, fp
 801073e:	f7ef ff83 	bl	8000648 <__aeabi_dmul>
 8010742:	a325      	add	r3, pc, #148	; (adr r3, 80107d8 <__kernel_sin+0x148>)
 8010744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010748:	f7ef fdc6 	bl	80002d8 <__aeabi_dsub>
 801074c:	4642      	mov	r2, r8
 801074e:	464b      	mov	r3, r9
 8010750:	f7ef ff7a 	bl	8000648 <__aeabi_dmul>
 8010754:	4602      	mov	r2, r0
 8010756:	460b      	mov	r3, r1
 8010758:	4620      	mov	r0, r4
 801075a:	4629      	mov	r1, r5
 801075c:	f7ef fdbe 	bl	80002dc <__adddf3>
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	ec45 4b10 	vmov	d0, r4, r5
 8010768:	b003      	add	sp, #12
 801076a:	ecbd 8b04 	vpop	{d8-d9}
 801076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010772:	4b1b      	ldr	r3, [pc, #108]	; (80107e0 <__kernel_sin+0x150>)
 8010774:	ec51 0b18 	vmov	r0, r1, d8
 8010778:	2200      	movs	r2, #0
 801077a:	f7ef ff65 	bl	8000648 <__aeabi_dmul>
 801077e:	4632      	mov	r2, r6
 8010780:	ec41 0b19 	vmov	d9, r0, r1
 8010784:	463b      	mov	r3, r7
 8010786:	4640      	mov	r0, r8
 8010788:	4649      	mov	r1, r9
 801078a:	f7ef ff5d 	bl	8000648 <__aeabi_dmul>
 801078e:	4602      	mov	r2, r0
 8010790:	460b      	mov	r3, r1
 8010792:	ec51 0b19 	vmov	r0, r1, d9
 8010796:	f7ef fd9f 	bl	80002d8 <__aeabi_dsub>
 801079a:	4652      	mov	r2, sl
 801079c:	465b      	mov	r3, fp
 801079e:	f7ef ff53 	bl	8000648 <__aeabi_dmul>
 80107a2:	ec53 2b18 	vmov	r2, r3, d8
 80107a6:	f7ef fd97 	bl	80002d8 <__aeabi_dsub>
 80107aa:	a30b      	add	r3, pc, #44	; (adr r3, 80107d8 <__kernel_sin+0x148>)
 80107ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b0:	4606      	mov	r6, r0
 80107b2:	460f      	mov	r7, r1
 80107b4:	4640      	mov	r0, r8
 80107b6:	4649      	mov	r1, r9
 80107b8:	f7ef ff46 	bl	8000648 <__aeabi_dmul>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	4630      	mov	r0, r6
 80107c2:	4639      	mov	r1, r7
 80107c4:	f7ef fd8a 	bl	80002dc <__adddf3>
 80107c8:	4602      	mov	r2, r0
 80107ca:	460b      	mov	r3, r1
 80107cc:	4620      	mov	r0, r4
 80107ce:	4629      	mov	r1, r5
 80107d0:	f7ef fd82 	bl	80002d8 <__aeabi_dsub>
 80107d4:	e7c4      	b.n	8010760 <__kernel_sin+0xd0>
 80107d6:	bf00      	nop
 80107d8:	55555549 	.word	0x55555549
 80107dc:	3fc55555 	.word	0x3fc55555
 80107e0:	3fe00000 	.word	0x3fe00000
 80107e4:	5acfd57c 	.word	0x5acfd57c
 80107e8:	3de5d93a 	.word	0x3de5d93a
 80107ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80107f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80107f4:	57b1fe7d 	.word	0x57b1fe7d
 80107f8:	3ec71de3 	.word	0x3ec71de3
 80107fc:	19c161d5 	.word	0x19c161d5
 8010800:	3f2a01a0 	.word	0x3f2a01a0
 8010804:	1110f8a6 	.word	0x1110f8a6
 8010808:	3f811111 	.word	0x3f811111
 801080c:	00000000 	.word	0x00000000

08010810 <__ieee754_rem_pio2>:
 8010810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010814:	ed2d 8b02 	vpush	{d8}
 8010818:	ec55 4b10 	vmov	r4, r5, d0
 801081c:	4bca      	ldr	r3, [pc, #808]	; (8010b48 <__ieee754_rem_pio2+0x338>)
 801081e:	b08b      	sub	sp, #44	; 0x2c
 8010820:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010824:	4598      	cmp	r8, r3
 8010826:	4682      	mov	sl, r0
 8010828:	9502      	str	r5, [sp, #8]
 801082a:	dc08      	bgt.n	801083e <__ieee754_rem_pio2+0x2e>
 801082c:	2200      	movs	r2, #0
 801082e:	2300      	movs	r3, #0
 8010830:	ed80 0b00 	vstr	d0, [r0]
 8010834:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010838:	f04f 0b00 	mov.w	fp, #0
 801083c:	e028      	b.n	8010890 <__ieee754_rem_pio2+0x80>
 801083e:	4bc3      	ldr	r3, [pc, #780]	; (8010b4c <__ieee754_rem_pio2+0x33c>)
 8010840:	4598      	cmp	r8, r3
 8010842:	dc78      	bgt.n	8010936 <__ieee754_rem_pio2+0x126>
 8010844:	9b02      	ldr	r3, [sp, #8]
 8010846:	4ec2      	ldr	r6, [pc, #776]	; (8010b50 <__ieee754_rem_pio2+0x340>)
 8010848:	2b00      	cmp	r3, #0
 801084a:	ee10 0a10 	vmov	r0, s0
 801084e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010b10 <__ieee754_rem_pio2+0x300>)
 8010850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010854:	4629      	mov	r1, r5
 8010856:	dd39      	ble.n	80108cc <__ieee754_rem_pio2+0xbc>
 8010858:	f7ef fd3e 	bl	80002d8 <__aeabi_dsub>
 801085c:	45b0      	cmp	r8, r6
 801085e:	4604      	mov	r4, r0
 8010860:	460d      	mov	r5, r1
 8010862:	d01b      	beq.n	801089c <__ieee754_rem_pio2+0x8c>
 8010864:	a3ac      	add	r3, pc, #688	; (adr r3, 8010b18 <__ieee754_rem_pio2+0x308>)
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f7ef fd35 	bl	80002d8 <__aeabi_dsub>
 801086e:	4602      	mov	r2, r0
 8010870:	460b      	mov	r3, r1
 8010872:	e9ca 2300 	strd	r2, r3, [sl]
 8010876:	4620      	mov	r0, r4
 8010878:	4629      	mov	r1, r5
 801087a:	f7ef fd2d 	bl	80002d8 <__aeabi_dsub>
 801087e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010b18 <__ieee754_rem_pio2+0x308>)
 8010880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010884:	f7ef fd28 	bl	80002d8 <__aeabi_dsub>
 8010888:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801088c:	f04f 0b01 	mov.w	fp, #1
 8010890:	4658      	mov	r0, fp
 8010892:	b00b      	add	sp, #44	; 0x2c
 8010894:	ecbd 8b02 	vpop	{d8}
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	a3a0      	add	r3, pc, #640	; (adr r3, 8010b20 <__ieee754_rem_pio2+0x310>)
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	f7ef fd19 	bl	80002d8 <__aeabi_dsub>
 80108a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010b28 <__ieee754_rem_pio2+0x318>)
 80108a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ac:	4604      	mov	r4, r0
 80108ae:	460d      	mov	r5, r1
 80108b0:	f7ef fd12 	bl	80002d8 <__aeabi_dsub>
 80108b4:	4602      	mov	r2, r0
 80108b6:	460b      	mov	r3, r1
 80108b8:	e9ca 2300 	strd	r2, r3, [sl]
 80108bc:	4620      	mov	r0, r4
 80108be:	4629      	mov	r1, r5
 80108c0:	f7ef fd0a 	bl	80002d8 <__aeabi_dsub>
 80108c4:	a398      	add	r3, pc, #608	; (adr r3, 8010b28 <__ieee754_rem_pio2+0x318>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	e7db      	b.n	8010884 <__ieee754_rem_pio2+0x74>
 80108cc:	f7ef fd06 	bl	80002dc <__adddf3>
 80108d0:	45b0      	cmp	r8, r6
 80108d2:	4604      	mov	r4, r0
 80108d4:	460d      	mov	r5, r1
 80108d6:	d016      	beq.n	8010906 <__ieee754_rem_pio2+0xf6>
 80108d8:	a38f      	add	r3, pc, #572	; (adr r3, 8010b18 <__ieee754_rem_pio2+0x308>)
 80108da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108de:	f7ef fcfd 	bl	80002dc <__adddf3>
 80108e2:	4602      	mov	r2, r0
 80108e4:	460b      	mov	r3, r1
 80108e6:	e9ca 2300 	strd	r2, r3, [sl]
 80108ea:	4620      	mov	r0, r4
 80108ec:	4629      	mov	r1, r5
 80108ee:	f7ef fcf3 	bl	80002d8 <__aeabi_dsub>
 80108f2:	a389      	add	r3, pc, #548	; (adr r3, 8010b18 <__ieee754_rem_pio2+0x308>)
 80108f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f8:	f7ef fcf0 	bl	80002dc <__adddf3>
 80108fc:	f04f 3bff 	mov.w	fp, #4294967295
 8010900:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010904:	e7c4      	b.n	8010890 <__ieee754_rem_pio2+0x80>
 8010906:	a386      	add	r3, pc, #536	; (adr r3, 8010b20 <__ieee754_rem_pio2+0x310>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7ef fce6 	bl	80002dc <__adddf3>
 8010910:	a385      	add	r3, pc, #532	; (adr r3, 8010b28 <__ieee754_rem_pio2+0x318>)
 8010912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010916:	4604      	mov	r4, r0
 8010918:	460d      	mov	r5, r1
 801091a:	f7ef fcdf 	bl	80002dc <__adddf3>
 801091e:	4602      	mov	r2, r0
 8010920:	460b      	mov	r3, r1
 8010922:	e9ca 2300 	strd	r2, r3, [sl]
 8010926:	4620      	mov	r0, r4
 8010928:	4629      	mov	r1, r5
 801092a:	f7ef fcd5 	bl	80002d8 <__aeabi_dsub>
 801092e:	a37e      	add	r3, pc, #504	; (adr r3, 8010b28 <__ieee754_rem_pio2+0x318>)
 8010930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010934:	e7e0      	b.n	80108f8 <__ieee754_rem_pio2+0xe8>
 8010936:	4b87      	ldr	r3, [pc, #540]	; (8010b54 <__ieee754_rem_pio2+0x344>)
 8010938:	4598      	cmp	r8, r3
 801093a:	f300 80d8 	bgt.w	8010aee <__ieee754_rem_pio2+0x2de>
 801093e:	f000 f96d 	bl	8010c1c <fabs>
 8010942:	ec55 4b10 	vmov	r4, r5, d0
 8010946:	ee10 0a10 	vmov	r0, s0
 801094a:	a379      	add	r3, pc, #484	; (adr r3, 8010b30 <__ieee754_rem_pio2+0x320>)
 801094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010950:	4629      	mov	r1, r5
 8010952:	f7ef fe79 	bl	8000648 <__aeabi_dmul>
 8010956:	4b80      	ldr	r3, [pc, #512]	; (8010b58 <__ieee754_rem_pio2+0x348>)
 8010958:	2200      	movs	r2, #0
 801095a:	f7ef fcbf 	bl	80002dc <__adddf3>
 801095e:	f7f0 f923 	bl	8000ba8 <__aeabi_d2iz>
 8010962:	4683      	mov	fp, r0
 8010964:	f7ef fe06 	bl	8000574 <__aeabi_i2d>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	ec43 2b18 	vmov	d8, r2, r3
 8010970:	a367      	add	r3, pc, #412	; (adr r3, 8010b10 <__ieee754_rem_pio2+0x300>)
 8010972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010976:	f7ef fe67 	bl	8000648 <__aeabi_dmul>
 801097a:	4602      	mov	r2, r0
 801097c:	460b      	mov	r3, r1
 801097e:	4620      	mov	r0, r4
 8010980:	4629      	mov	r1, r5
 8010982:	f7ef fca9 	bl	80002d8 <__aeabi_dsub>
 8010986:	a364      	add	r3, pc, #400	; (adr r3, 8010b18 <__ieee754_rem_pio2+0x308>)
 8010988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098c:	4606      	mov	r6, r0
 801098e:	460f      	mov	r7, r1
 8010990:	ec51 0b18 	vmov	r0, r1, d8
 8010994:	f7ef fe58 	bl	8000648 <__aeabi_dmul>
 8010998:	f1bb 0f1f 	cmp.w	fp, #31
 801099c:	4604      	mov	r4, r0
 801099e:	460d      	mov	r5, r1
 80109a0:	dc0d      	bgt.n	80109be <__ieee754_rem_pio2+0x1ae>
 80109a2:	4b6e      	ldr	r3, [pc, #440]	; (8010b5c <__ieee754_rem_pio2+0x34c>)
 80109a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80109a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ac:	4543      	cmp	r3, r8
 80109ae:	d006      	beq.n	80109be <__ieee754_rem_pio2+0x1ae>
 80109b0:	4622      	mov	r2, r4
 80109b2:	462b      	mov	r3, r5
 80109b4:	4630      	mov	r0, r6
 80109b6:	4639      	mov	r1, r7
 80109b8:	f7ef fc8e 	bl	80002d8 <__aeabi_dsub>
 80109bc:	e00e      	b.n	80109dc <__ieee754_rem_pio2+0x1cc>
 80109be:	462b      	mov	r3, r5
 80109c0:	4622      	mov	r2, r4
 80109c2:	4630      	mov	r0, r6
 80109c4:	4639      	mov	r1, r7
 80109c6:	f7ef fc87 	bl	80002d8 <__aeabi_dsub>
 80109ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80109ce:	9303      	str	r3, [sp, #12]
 80109d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80109d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80109d8:	2b10      	cmp	r3, #16
 80109da:	dc02      	bgt.n	80109e2 <__ieee754_rem_pio2+0x1d2>
 80109dc:	e9ca 0100 	strd	r0, r1, [sl]
 80109e0:	e039      	b.n	8010a56 <__ieee754_rem_pio2+0x246>
 80109e2:	a34f      	add	r3, pc, #316	; (adr r3, 8010b20 <__ieee754_rem_pio2+0x310>)
 80109e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e8:	ec51 0b18 	vmov	r0, r1, d8
 80109ec:	f7ef fe2c 	bl	8000648 <__aeabi_dmul>
 80109f0:	4604      	mov	r4, r0
 80109f2:	460d      	mov	r5, r1
 80109f4:	4602      	mov	r2, r0
 80109f6:	460b      	mov	r3, r1
 80109f8:	4630      	mov	r0, r6
 80109fa:	4639      	mov	r1, r7
 80109fc:	f7ef fc6c 	bl	80002d8 <__aeabi_dsub>
 8010a00:	4602      	mov	r2, r0
 8010a02:	460b      	mov	r3, r1
 8010a04:	4680      	mov	r8, r0
 8010a06:	4689      	mov	r9, r1
 8010a08:	4630      	mov	r0, r6
 8010a0a:	4639      	mov	r1, r7
 8010a0c:	f7ef fc64 	bl	80002d8 <__aeabi_dsub>
 8010a10:	4622      	mov	r2, r4
 8010a12:	462b      	mov	r3, r5
 8010a14:	f7ef fc60 	bl	80002d8 <__aeabi_dsub>
 8010a18:	a343      	add	r3, pc, #268	; (adr r3, 8010b28 <__ieee754_rem_pio2+0x318>)
 8010a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1e:	4604      	mov	r4, r0
 8010a20:	460d      	mov	r5, r1
 8010a22:	ec51 0b18 	vmov	r0, r1, d8
 8010a26:	f7ef fe0f 	bl	8000648 <__aeabi_dmul>
 8010a2a:	4622      	mov	r2, r4
 8010a2c:	462b      	mov	r3, r5
 8010a2e:	f7ef fc53 	bl	80002d8 <__aeabi_dsub>
 8010a32:	4602      	mov	r2, r0
 8010a34:	460b      	mov	r3, r1
 8010a36:	4604      	mov	r4, r0
 8010a38:	460d      	mov	r5, r1
 8010a3a:	4640      	mov	r0, r8
 8010a3c:	4649      	mov	r1, r9
 8010a3e:	f7ef fc4b 	bl	80002d8 <__aeabi_dsub>
 8010a42:	9a03      	ldr	r2, [sp, #12]
 8010a44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	2b31      	cmp	r3, #49	; 0x31
 8010a4c:	dc24      	bgt.n	8010a98 <__ieee754_rem_pio2+0x288>
 8010a4e:	e9ca 0100 	strd	r0, r1, [sl]
 8010a52:	4646      	mov	r6, r8
 8010a54:	464f      	mov	r7, r9
 8010a56:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	4642      	mov	r2, r8
 8010a5e:	464b      	mov	r3, r9
 8010a60:	4639      	mov	r1, r7
 8010a62:	f7ef fc39 	bl	80002d8 <__aeabi_dsub>
 8010a66:	462b      	mov	r3, r5
 8010a68:	4622      	mov	r2, r4
 8010a6a:	f7ef fc35 	bl	80002d8 <__aeabi_dsub>
 8010a6e:	9b02      	ldr	r3, [sp, #8]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010a76:	f6bf af0b 	bge.w	8010890 <__ieee754_rem_pio2+0x80>
 8010a7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010a7e:	f8ca 3004 	str.w	r3, [sl, #4]
 8010a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a86:	f8ca 8000 	str.w	r8, [sl]
 8010a8a:	f8ca 0008 	str.w	r0, [sl, #8]
 8010a8e:	f8ca 300c 	str.w	r3, [sl, #12]
 8010a92:	f1cb 0b00 	rsb	fp, fp, #0
 8010a96:	e6fb      	b.n	8010890 <__ieee754_rem_pio2+0x80>
 8010a98:	a327      	add	r3, pc, #156	; (adr r3, 8010b38 <__ieee754_rem_pio2+0x328>)
 8010a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9e:	ec51 0b18 	vmov	r0, r1, d8
 8010aa2:	f7ef fdd1 	bl	8000648 <__aeabi_dmul>
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	460d      	mov	r5, r1
 8010aaa:	4602      	mov	r2, r0
 8010aac:	460b      	mov	r3, r1
 8010aae:	4640      	mov	r0, r8
 8010ab0:	4649      	mov	r1, r9
 8010ab2:	f7ef fc11 	bl	80002d8 <__aeabi_dsub>
 8010ab6:	4602      	mov	r2, r0
 8010ab8:	460b      	mov	r3, r1
 8010aba:	4606      	mov	r6, r0
 8010abc:	460f      	mov	r7, r1
 8010abe:	4640      	mov	r0, r8
 8010ac0:	4649      	mov	r1, r9
 8010ac2:	f7ef fc09 	bl	80002d8 <__aeabi_dsub>
 8010ac6:	4622      	mov	r2, r4
 8010ac8:	462b      	mov	r3, r5
 8010aca:	f7ef fc05 	bl	80002d8 <__aeabi_dsub>
 8010ace:	a31c      	add	r3, pc, #112	; (adr r3, 8010b40 <__ieee754_rem_pio2+0x330>)
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	460d      	mov	r5, r1
 8010ad8:	ec51 0b18 	vmov	r0, r1, d8
 8010adc:	f7ef fdb4 	bl	8000648 <__aeabi_dmul>
 8010ae0:	4622      	mov	r2, r4
 8010ae2:	462b      	mov	r3, r5
 8010ae4:	f7ef fbf8 	bl	80002d8 <__aeabi_dsub>
 8010ae8:	4604      	mov	r4, r0
 8010aea:	460d      	mov	r5, r1
 8010aec:	e760      	b.n	80109b0 <__ieee754_rem_pio2+0x1a0>
 8010aee:	4b1c      	ldr	r3, [pc, #112]	; (8010b60 <__ieee754_rem_pio2+0x350>)
 8010af0:	4598      	cmp	r8, r3
 8010af2:	dd37      	ble.n	8010b64 <__ieee754_rem_pio2+0x354>
 8010af4:	ee10 2a10 	vmov	r2, s0
 8010af8:	462b      	mov	r3, r5
 8010afa:	4620      	mov	r0, r4
 8010afc:	4629      	mov	r1, r5
 8010afe:	f7ef fbeb 	bl	80002d8 <__aeabi_dsub>
 8010b02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010b06:	e9ca 0100 	strd	r0, r1, [sl]
 8010b0a:	e695      	b.n	8010838 <__ieee754_rem_pio2+0x28>
 8010b0c:	f3af 8000 	nop.w
 8010b10:	54400000 	.word	0x54400000
 8010b14:	3ff921fb 	.word	0x3ff921fb
 8010b18:	1a626331 	.word	0x1a626331
 8010b1c:	3dd0b461 	.word	0x3dd0b461
 8010b20:	1a600000 	.word	0x1a600000
 8010b24:	3dd0b461 	.word	0x3dd0b461
 8010b28:	2e037073 	.word	0x2e037073
 8010b2c:	3ba3198a 	.word	0x3ba3198a
 8010b30:	6dc9c883 	.word	0x6dc9c883
 8010b34:	3fe45f30 	.word	0x3fe45f30
 8010b38:	2e000000 	.word	0x2e000000
 8010b3c:	3ba3198a 	.word	0x3ba3198a
 8010b40:	252049c1 	.word	0x252049c1
 8010b44:	397b839a 	.word	0x397b839a
 8010b48:	3fe921fb 	.word	0x3fe921fb
 8010b4c:	4002d97b 	.word	0x4002d97b
 8010b50:	3ff921fb 	.word	0x3ff921fb
 8010b54:	413921fb 	.word	0x413921fb
 8010b58:	3fe00000 	.word	0x3fe00000
 8010b5c:	080119b4 	.word	0x080119b4
 8010b60:	7fefffff 	.word	0x7fefffff
 8010b64:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010b68:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010b6c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010b70:	4620      	mov	r0, r4
 8010b72:	460d      	mov	r5, r1
 8010b74:	f7f0 f818 	bl	8000ba8 <__aeabi_d2iz>
 8010b78:	f7ef fcfc 	bl	8000574 <__aeabi_i2d>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	460b      	mov	r3, r1
 8010b80:	4620      	mov	r0, r4
 8010b82:	4629      	mov	r1, r5
 8010b84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010b88:	f7ef fba6 	bl	80002d8 <__aeabi_dsub>
 8010b8c:	4b21      	ldr	r3, [pc, #132]	; (8010c14 <__ieee754_rem_pio2+0x404>)
 8010b8e:	2200      	movs	r2, #0
 8010b90:	f7ef fd5a 	bl	8000648 <__aeabi_dmul>
 8010b94:	460d      	mov	r5, r1
 8010b96:	4604      	mov	r4, r0
 8010b98:	f7f0 f806 	bl	8000ba8 <__aeabi_d2iz>
 8010b9c:	f7ef fcea 	bl	8000574 <__aeabi_i2d>
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010bac:	f7ef fb94 	bl	80002d8 <__aeabi_dsub>
 8010bb0:	4b18      	ldr	r3, [pc, #96]	; (8010c14 <__ieee754_rem_pio2+0x404>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f7ef fd48 	bl	8000648 <__aeabi_dmul>
 8010bb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010bbc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010bc0:	2703      	movs	r7, #3
 8010bc2:	2400      	movs	r4, #0
 8010bc4:	2500      	movs	r5, #0
 8010bc6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010bca:	4622      	mov	r2, r4
 8010bcc:	462b      	mov	r3, r5
 8010bce:	46b9      	mov	r9, r7
 8010bd0:	3f01      	subs	r7, #1
 8010bd2:	f7ef ffa1 	bl	8000b18 <__aeabi_dcmpeq>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	d1f5      	bne.n	8010bc6 <__ieee754_rem_pio2+0x3b6>
 8010bda:	4b0f      	ldr	r3, [pc, #60]	; (8010c18 <__ieee754_rem_pio2+0x408>)
 8010bdc:	9301      	str	r3, [sp, #4]
 8010bde:	2302      	movs	r3, #2
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	4632      	mov	r2, r6
 8010be4:	464b      	mov	r3, r9
 8010be6:	4651      	mov	r1, sl
 8010be8:	a804      	add	r0, sp, #16
 8010bea:	f000 f821 	bl	8010c30 <__kernel_rem_pio2>
 8010bee:	9b02      	ldr	r3, [sp, #8]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	4683      	mov	fp, r0
 8010bf4:	f6bf ae4c 	bge.w	8010890 <__ieee754_rem_pio2+0x80>
 8010bf8:	e9da 2100 	ldrd	r2, r1, [sl]
 8010bfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c00:	e9ca 2300 	strd	r2, r3, [sl]
 8010c04:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010c08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c0c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010c10:	e73f      	b.n	8010a92 <__ieee754_rem_pio2+0x282>
 8010c12:	bf00      	nop
 8010c14:	41700000 	.word	0x41700000
 8010c18:	08011a34 	.word	0x08011a34

08010c1c <fabs>:
 8010c1c:	ec51 0b10 	vmov	r0, r1, d0
 8010c20:	ee10 2a10 	vmov	r2, s0
 8010c24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c28:	ec43 2b10 	vmov	d0, r2, r3
 8010c2c:	4770      	bx	lr
	...

08010c30 <__kernel_rem_pio2>:
 8010c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c34:	ed2d 8b02 	vpush	{d8}
 8010c38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010c3c:	f112 0f14 	cmn.w	r2, #20
 8010c40:	9306      	str	r3, [sp, #24]
 8010c42:	9104      	str	r1, [sp, #16]
 8010c44:	4bc2      	ldr	r3, [pc, #776]	; (8010f50 <__kernel_rem_pio2+0x320>)
 8010c46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010c48:	9009      	str	r0, [sp, #36]	; 0x24
 8010c4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	9b06      	ldr	r3, [sp, #24]
 8010c52:	f103 33ff 	add.w	r3, r3, #4294967295
 8010c56:	bfa8      	it	ge
 8010c58:	1ed4      	subge	r4, r2, #3
 8010c5a:	9305      	str	r3, [sp, #20]
 8010c5c:	bfb2      	itee	lt
 8010c5e:	2400      	movlt	r4, #0
 8010c60:	2318      	movge	r3, #24
 8010c62:	fb94 f4f3 	sdivge	r4, r4, r3
 8010c66:	f06f 0317 	mvn.w	r3, #23
 8010c6a:	fb04 3303 	mla	r3, r4, r3, r3
 8010c6e:	eb03 0a02 	add.w	sl, r3, r2
 8010c72:	9b00      	ldr	r3, [sp, #0]
 8010c74:	9a05      	ldr	r2, [sp, #20]
 8010c76:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8010f40 <__kernel_rem_pio2+0x310>
 8010c7a:	eb03 0802 	add.w	r8, r3, r2
 8010c7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010c80:	1aa7      	subs	r7, r4, r2
 8010c82:	ae20      	add	r6, sp, #128	; 0x80
 8010c84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010c88:	2500      	movs	r5, #0
 8010c8a:	4545      	cmp	r5, r8
 8010c8c:	dd13      	ble.n	8010cb6 <__kernel_rem_pio2+0x86>
 8010c8e:	9b06      	ldr	r3, [sp, #24]
 8010c90:	aa20      	add	r2, sp, #128	; 0x80
 8010c92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010c96:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010c9a:	f04f 0800 	mov.w	r8, #0
 8010c9e:	9b00      	ldr	r3, [sp, #0]
 8010ca0:	4598      	cmp	r8, r3
 8010ca2:	dc31      	bgt.n	8010d08 <__kernel_rem_pio2+0xd8>
 8010ca4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8010f40 <__kernel_rem_pio2+0x310>
 8010ca8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010cac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cb0:	462f      	mov	r7, r5
 8010cb2:	2600      	movs	r6, #0
 8010cb4:	e01b      	b.n	8010cee <__kernel_rem_pio2+0xbe>
 8010cb6:	42ef      	cmn	r7, r5
 8010cb8:	d407      	bmi.n	8010cca <__kernel_rem_pio2+0x9a>
 8010cba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010cbe:	f7ef fc59 	bl	8000574 <__aeabi_i2d>
 8010cc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010cc6:	3501      	adds	r5, #1
 8010cc8:	e7df      	b.n	8010c8a <__kernel_rem_pio2+0x5a>
 8010cca:	ec51 0b18 	vmov	r0, r1, d8
 8010cce:	e7f8      	b.n	8010cc2 <__kernel_rem_pio2+0x92>
 8010cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010cd8:	f7ef fcb6 	bl	8000648 <__aeabi_dmul>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	460b      	mov	r3, r1
 8010ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ce4:	f7ef fafa 	bl	80002dc <__adddf3>
 8010ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cec:	3601      	adds	r6, #1
 8010cee:	9b05      	ldr	r3, [sp, #20]
 8010cf0:	429e      	cmp	r6, r3
 8010cf2:	f1a7 0708 	sub.w	r7, r7, #8
 8010cf6:	ddeb      	ble.n	8010cd0 <__kernel_rem_pio2+0xa0>
 8010cf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cfc:	f108 0801 	add.w	r8, r8, #1
 8010d00:	ecab 7b02 	vstmia	fp!, {d7}
 8010d04:	3508      	adds	r5, #8
 8010d06:	e7ca      	b.n	8010c9e <__kernel_rem_pio2+0x6e>
 8010d08:	9b00      	ldr	r3, [sp, #0]
 8010d0a:	aa0c      	add	r2, sp, #48	; 0x30
 8010d0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d12:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010d14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010d18:	9c00      	ldr	r4, [sp, #0]
 8010d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8010d1c:	00e3      	lsls	r3, r4, #3
 8010d1e:	9308      	str	r3, [sp, #32]
 8010d20:	ab98      	add	r3, sp, #608	; 0x260
 8010d22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010d26:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010d2a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010d2e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010d30:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010d34:	46c3      	mov	fp, r8
 8010d36:	46a1      	mov	r9, r4
 8010d38:	f1b9 0f00 	cmp.w	r9, #0
 8010d3c:	f1a5 0508 	sub.w	r5, r5, #8
 8010d40:	dc77      	bgt.n	8010e32 <__kernel_rem_pio2+0x202>
 8010d42:	ec47 6b10 	vmov	d0, r6, r7
 8010d46:	4650      	mov	r0, sl
 8010d48:	f000 fac2 	bl	80112d0 <scalbn>
 8010d4c:	ec57 6b10 	vmov	r6, r7, d0
 8010d50:	2200      	movs	r2, #0
 8010d52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010d56:	ee10 0a10 	vmov	r0, s0
 8010d5a:	4639      	mov	r1, r7
 8010d5c:	f7ef fc74 	bl	8000648 <__aeabi_dmul>
 8010d60:	ec41 0b10 	vmov	d0, r0, r1
 8010d64:	f000 fb34 	bl	80113d0 <floor>
 8010d68:	4b7a      	ldr	r3, [pc, #488]	; (8010f54 <__kernel_rem_pio2+0x324>)
 8010d6a:	ec51 0b10 	vmov	r0, r1, d0
 8010d6e:	2200      	movs	r2, #0
 8010d70:	f7ef fc6a 	bl	8000648 <__aeabi_dmul>
 8010d74:	4602      	mov	r2, r0
 8010d76:	460b      	mov	r3, r1
 8010d78:	4630      	mov	r0, r6
 8010d7a:	4639      	mov	r1, r7
 8010d7c:	f7ef faac 	bl	80002d8 <__aeabi_dsub>
 8010d80:	460f      	mov	r7, r1
 8010d82:	4606      	mov	r6, r0
 8010d84:	f7ef ff10 	bl	8000ba8 <__aeabi_d2iz>
 8010d88:	9002      	str	r0, [sp, #8]
 8010d8a:	f7ef fbf3 	bl	8000574 <__aeabi_i2d>
 8010d8e:	4602      	mov	r2, r0
 8010d90:	460b      	mov	r3, r1
 8010d92:	4630      	mov	r0, r6
 8010d94:	4639      	mov	r1, r7
 8010d96:	f7ef fa9f 	bl	80002d8 <__aeabi_dsub>
 8010d9a:	f1ba 0f00 	cmp.w	sl, #0
 8010d9e:	4606      	mov	r6, r0
 8010da0:	460f      	mov	r7, r1
 8010da2:	dd6d      	ble.n	8010e80 <__kernel_rem_pio2+0x250>
 8010da4:	1e61      	subs	r1, r4, #1
 8010da6:	ab0c      	add	r3, sp, #48	; 0x30
 8010da8:	9d02      	ldr	r5, [sp, #8]
 8010daa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010dae:	f1ca 0018 	rsb	r0, sl, #24
 8010db2:	fa43 f200 	asr.w	r2, r3, r0
 8010db6:	4415      	add	r5, r2
 8010db8:	4082      	lsls	r2, r0
 8010dba:	1a9b      	subs	r3, r3, r2
 8010dbc:	aa0c      	add	r2, sp, #48	; 0x30
 8010dbe:	9502      	str	r5, [sp, #8]
 8010dc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010dc4:	f1ca 0217 	rsb	r2, sl, #23
 8010dc8:	fa43 fb02 	asr.w	fp, r3, r2
 8010dcc:	f1bb 0f00 	cmp.w	fp, #0
 8010dd0:	dd65      	ble.n	8010e9e <__kernel_rem_pio2+0x26e>
 8010dd2:	9b02      	ldr	r3, [sp, #8]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	9302      	str	r3, [sp, #8]
 8010dda:	4615      	mov	r5, r2
 8010ddc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010de0:	4294      	cmp	r4, r2
 8010de2:	f300 809f 	bgt.w	8010f24 <__kernel_rem_pio2+0x2f4>
 8010de6:	f1ba 0f00 	cmp.w	sl, #0
 8010dea:	dd07      	ble.n	8010dfc <__kernel_rem_pio2+0x1cc>
 8010dec:	f1ba 0f01 	cmp.w	sl, #1
 8010df0:	f000 80c1 	beq.w	8010f76 <__kernel_rem_pio2+0x346>
 8010df4:	f1ba 0f02 	cmp.w	sl, #2
 8010df8:	f000 80c7 	beq.w	8010f8a <__kernel_rem_pio2+0x35a>
 8010dfc:	f1bb 0f02 	cmp.w	fp, #2
 8010e00:	d14d      	bne.n	8010e9e <__kernel_rem_pio2+0x26e>
 8010e02:	4632      	mov	r2, r6
 8010e04:	463b      	mov	r3, r7
 8010e06:	4954      	ldr	r1, [pc, #336]	; (8010f58 <__kernel_rem_pio2+0x328>)
 8010e08:	2000      	movs	r0, #0
 8010e0a:	f7ef fa65 	bl	80002d8 <__aeabi_dsub>
 8010e0e:	4606      	mov	r6, r0
 8010e10:	460f      	mov	r7, r1
 8010e12:	2d00      	cmp	r5, #0
 8010e14:	d043      	beq.n	8010e9e <__kernel_rem_pio2+0x26e>
 8010e16:	4650      	mov	r0, sl
 8010e18:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8010f48 <__kernel_rem_pio2+0x318>
 8010e1c:	f000 fa58 	bl	80112d0 <scalbn>
 8010e20:	4630      	mov	r0, r6
 8010e22:	4639      	mov	r1, r7
 8010e24:	ec53 2b10 	vmov	r2, r3, d0
 8010e28:	f7ef fa56 	bl	80002d8 <__aeabi_dsub>
 8010e2c:	4606      	mov	r6, r0
 8010e2e:	460f      	mov	r7, r1
 8010e30:	e035      	b.n	8010e9e <__kernel_rem_pio2+0x26e>
 8010e32:	4b4a      	ldr	r3, [pc, #296]	; (8010f5c <__kernel_rem_pio2+0x32c>)
 8010e34:	2200      	movs	r2, #0
 8010e36:	4630      	mov	r0, r6
 8010e38:	4639      	mov	r1, r7
 8010e3a:	f7ef fc05 	bl	8000648 <__aeabi_dmul>
 8010e3e:	f7ef feb3 	bl	8000ba8 <__aeabi_d2iz>
 8010e42:	f7ef fb97 	bl	8000574 <__aeabi_i2d>
 8010e46:	4602      	mov	r2, r0
 8010e48:	460b      	mov	r3, r1
 8010e4a:	ec43 2b18 	vmov	d8, r2, r3
 8010e4e:	4b44      	ldr	r3, [pc, #272]	; (8010f60 <__kernel_rem_pio2+0x330>)
 8010e50:	2200      	movs	r2, #0
 8010e52:	f7ef fbf9 	bl	8000648 <__aeabi_dmul>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	f7ef fa3b 	bl	80002d8 <__aeabi_dsub>
 8010e62:	f7ef fea1 	bl	8000ba8 <__aeabi_d2iz>
 8010e66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e6a:	f84b 0b04 	str.w	r0, [fp], #4
 8010e6e:	ec51 0b18 	vmov	r0, r1, d8
 8010e72:	f7ef fa33 	bl	80002dc <__adddf3>
 8010e76:	f109 39ff 	add.w	r9, r9, #4294967295
 8010e7a:	4606      	mov	r6, r0
 8010e7c:	460f      	mov	r7, r1
 8010e7e:	e75b      	b.n	8010d38 <__kernel_rem_pio2+0x108>
 8010e80:	d106      	bne.n	8010e90 <__kernel_rem_pio2+0x260>
 8010e82:	1e63      	subs	r3, r4, #1
 8010e84:	aa0c      	add	r2, sp, #48	; 0x30
 8010e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e8a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010e8e:	e79d      	b.n	8010dcc <__kernel_rem_pio2+0x19c>
 8010e90:	4b34      	ldr	r3, [pc, #208]	; (8010f64 <__kernel_rem_pio2+0x334>)
 8010e92:	2200      	movs	r2, #0
 8010e94:	f7ef fe5e 	bl	8000b54 <__aeabi_dcmpge>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d140      	bne.n	8010f1e <__kernel_rem_pio2+0x2ee>
 8010e9c:	4683      	mov	fp, r0
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	f7ef fe37 	bl	8000b18 <__aeabi_dcmpeq>
 8010eaa:	2800      	cmp	r0, #0
 8010eac:	f000 80c1 	beq.w	8011032 <__kernel_rem_pio2+0x402>
 8010eb0:	1e65      	subs	r5, r4, #1
 8010eb2:	462b      	mov	r3, r5
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	9900      	ldr	r1, [sp, #0]
 8010eb8:	428b      	cmp	r3, r1
 8010eba:	da6d      	bge.n	8010f98 <__kernel_rem_pio2+0x368>
 8010ebc:	2a00      	cmp	r2, #0
 8010ebe:	f000 808a 	beq.w	8010fd6 <__kernel_rem_pio2+0x3a6>
 8010ec2:	ab0c      	add	r3, sp, #48	; 0x30
 8010ec4:	f1aa 0a18 	sub.w	sl, sl, #24
 8010ec8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 80ae 	beq.w	801102e <__kernel_rem_pio2+0x3fe>
 8010ed2:	4650      	mov	r0, sl
 8010ed4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8010f48 <__kernel_rem_pio2+0x318>
 8010ed8:	f000 f9fa 	bl	80112d0 <scalbn>
 8010edc:	1c6b      	adds	r3, r5, #1
 8010ede:	00da      	lsls	r2, r3, #3
 8010ee0:	9205      	str	r2, [sp, #20]
 8010ee2:	ec57 6b10 	vmov	r6, r7, d0
 8010ee6:	aa70      	add	r2, sp, #448	; 0x1c0
 8010ee8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8010f5c <__kernel_rem_pio2+0x32c>
 8010eec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8010ef0:	462c      	mov	r4, r5
 8010ef2:	f04f 0800 	mov.w	r8, #0
 8010ef6:	2c00      	cmp	r4, #0
 8010ef8:	f280 80d4 	bge.w	80110a4 <__kernel_rem_pio2+0x474>
 8010efc:	462c      	mov	r4, r5
 8010efe:	2c00      	cmp	r4, #0
 8010f00:	f2c0 8102 	blt.w	8011108 <__kernel_rem_pio2+0x4d8>
 8010f04:	4b18      	ldr	r3, [pc, #96]	; (8010f68 <__kernel_rem_pio2+0x338>)
 8010f06:	461e      	mov	r6, r3
 8010f08:	ab70      	add	r3, sp, #448	; 0x1c0
 8010f0a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8010f0e:	1b2b      	subs	r3, r5, r4
 8010f10:	f04f 0900 	mov.w	r9, #0
 8010f14:	f04f 0a00 	mov.w	sl, #0
 8010f18:	2700      	movs	r7, #0
 8010f1a:	9306      	str	r3, [sp, #24]
 8010f1c:	e0e6      	b.n	80110ec <__kernel_rem_pio2+0x4bc>
 8010f1e:	f04f 0b02 	mov.w	fp, #2
 8010f22:	e756      	b.n	8010dd2 <__kernel_rem_pio2+0x1a2>
 8010f24:	f8d8 3000 	ldr.w	r3, [r8]
 8010f28:	bb05      	cbnz	r5, 8010f6c <__kernel_rem_pio2+0x33c>
 8010f2a:	b123      	cbz	r3, 8010f36 <__kernel_rem_pio2+0x306>
 8010f2c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010f30:	f8c8 3000 	str.w	r3, [r8]
 8010f34:	2301      	movs	r3, #1
 8010f36:	3201      	adds	r2, #1
 8010f38:	f108 0804 	add.w	r8, r8, #4
 8010f3c:	461d      	mov	r5, r3
 8010f3e:	e74f      	b.n	8010de0 <__kernel_rem_pio2+0x1b0>
	...
 8010f4c:	3ff00000 	.word	0x3ff00000
 8010f50:	08011b80 	.word	0x08011b80
 8010f54:	40200000 	.word	0x40200000
 8010f58:	3ff00000 	.word	0x3ff00000
 8010f5c:	3e700000 	.word	0x3e700000
 8010f60:	41700000 	.word	0x41700000
 8010f64:	3fe00000 	.word	0x3fe00000
 8010f68:	08011b40 	.word	0x08011b40
 8010f6c:	1acb      	subs	r3, r1, r3
 8010f6e:	f8c8 3000 	str.w	r3, [r8]
 8010f72:	462b      	mov	r3, r5
 8010f74:	e7df      	b.n	8010f36 <__kernel_rem_pio2+0x306>
 8010f76:	1e62      	subs	r2, r4, #1
 8010f78:	ab0c      	add	r3, sp, #48	; 0x30
 8010f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010f82:	a90c      	add	r1, sp, #48	; 0x30
 8010f84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010f88:	e738      	b.n	8010dfc <__kernel_rem_pio2+0x1cc>
 8010f8a:	1e62      	subs	r2, r4, #1
 8010f8c:	ab0c      	add	r3, sp, #48	; 0x30
 8010f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f92:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010f96:	e7f4      	b.n	8010f82 <__kernel_rem_pio2+0x352>
 8010f98:	a90c      	add	r1, sp, #48	; 0x30
 8010f9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	430a      	orrs	r2, r1
 8010fa2:	e788      	b.n	8010eb6 <__kernel_rem_pio2+0x286>
 8010fa4:	3301      	adds	r3, #1
 8010fa6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010faa:	2900      	cmp	r1, #0
 8010fac:	d0fa      	beq.n	8010fa4 <__kernel_rem_pio2+0x374>
 8010fae:	9a08      	ldr	r2, [sp, #32]
 8010fb0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8010fb4:	446a      	add	r2, sp
 8010fb6:	3a98      	subs	r2, #152	; 0x98
 8010fb8:	9208      	str	r2, [sp, #32]
 8010fba:	9a06      	ldr	r2, [sp, #24]
 8010fbc:	a920      	add	r1, sp, #128	; 0x80
 8010fbe:	18a2      	adds	r2, r4, r2
 8010fc0:	18e3      	adds	r3, r4, r3
 8010fc2:	f104 0801 	add.w	r8, r4, #1
 8010fc6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8010fca:	9302      	str	r3, [sp, #8]
 8010fcc:	9b02      	ldr	r3, [sp, #8]
 8010fce:	4543      	cmp	r3, r8
 8010fd0:	da04      	bge.n	8010fdc <__kernel_rem_pio2+0x3ac>
 8010fd2:	461c      	mov	r4, r3
 8010fd4:	e6a2      	b.n	8010d1c <__kernel_rem_pio2+0xec>
 8010fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fd8:	2301      	movs	r3, #1
 8010fda:	e7e4      	b.n	8010fa6 <__kernel_rem_pio2+0x376>
 8010fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fde:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010fe2:	f7ef fac7 	bl	8000574 <__aeabi_i2d>
 8010fe6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fec:	46ab      	mov	fp, r5
 8010fee:	461c      	mov	r4, r3
 8010ff0:	f04f 0900 	mov.w	r9, #0
 8010ff4:	2600      	movs	r6, #0
 8010ff6:	2700      	movs	r7, #0
 8010ff8:	9b05      	ldr	r3, [sp, #20]
 8010ffa:	4599      	cmp	r9, r3
 8010ffc:	dd06      	ble.n	801100c <__kernel_rem_pio2+0x3dc>
 8010ffe:	9b08      	ldr	r3, [sp, #32]
 8011000:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011004:	f108 0801 	add.w	r8, r8, #1
 8011008:	9308      	str	r3, [sp, #32]
 801100a:	e7df      	b.n	8010fcc <__kernel_rem_pio2+0x39c>
 801100c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011010:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011014:	f7ef fb18 	bl	8000648 <__aeabi_dmul>
 8011018:	4602      	mov	r2, r0
 801101a:	460b      	mov	r3, r1
 801101c:	4630      	mov	r0, r6
 801101e:	4639      	mov	r1, r7
 8011020:	f7ef f95c 	bl	80002dc <__adddf3>
 8011024:	f109 0901 	add.w	r9, r9, #1
 8011028:	4606      	mov	r6, r0
 801102a:	460f      	mov	r7, r1
 801102c:	e7e4      	b.n	8010ff8 <__kernel_rem_pio2+0x3c8>
 801102e:	3d01      	subs	r5, #1
 8011030:	e747      	b.n	8010ec2 <__kernel_rem_pio2+0x292>
 8011032:	ec47 6b10 	vmov	d0, r6, r7
 8011036:	f1ca 0000 	rsb	r0, sl, #0
 801103a:	f000 f949 	bl	80112d0 <scalbn>
 801103e:	ec57 6b10 	vmov	r6, r7, d0
 8011042:	4ba0      	ldr	r3, [pc, #640]	; (80112c4 <__kernel_rem_pio2+0x694>)
 8011044:	ee10 0a10 	vmov	r0, s0
 8011048:	2200      	movs	r2, #0
 801104a:	4639      	mov	r1, r7
 801104c:	f7ef fd82 	bl	8000b54 <__aeabi_dcmpge>
 8011050:	b1f8      	cbz	r0, 8011092 <__kernel_rem_pio2+0x462>
 8011052:	4b9d      	ldr	r3, [pc, #628]	; (80112c8 <__kernel_rem_pio2+0x698>)
 8011054:	2200      	movs	r2, #0
 8011056:	4630      	mov	r0, r6
 8011058:	4639      	mov	r1, r7
 801105a:	f7ef faf5 	bl	8000648 <__aeabi_dmul>
 801105e:	f7ef fda3 	bl	8000ba8 <__aeabi_d2iz>
 8011062:	4680      	mov	r8, r0
 8011064:	f7ef fa86 	bl	8000574 <__aeabi_i2d>
 8011068:	4b96      	ldr	r3, [pc, #600]	; (80112c4 <__kernel_rem_pio2+0x694>)
 801106a:	2200      	movs	r2, #0
 801106c:	f7ef faec 	bl	8000648 <__aeabi_dmul>
 8011070:	460b      	mov	r3, r1
 8011072:	4602      	mov	r2, r0
 8011074:	4639      	mov	r1, r7
 8011076:	4630      	mov	r0, r6
 8011078:	f7ef f92e 	bl	80002d8 <__aeabi_dsub>
 801107c:	f7ef fd94 	bl	8000ba8 <__aeabi_d2iz>
 8011080:	1c65      	adds	r5, r4, #1
 8011082:	ab0c      	add	r3, sp, #48	; 0x30
 8011084:	f10a 0a18 	add.w	sl, sl, #24
 8011088:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801108c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011090:	e71f      	b.n	8010ed2 <__kernel_rem_pio2+0x2a2>
 8011092:	4630      	mov	r0, r6
 8011094:	4639      	mov	r1, r7
 8011096:	f7ef fd87 	bl	8000ba8 <__aeabi_d2iz>
 801109a:	ab0c      	add	r3, sp, #48	; 0x30
 801109c:	4625      	mov	r5, r4
 801109e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80110a2:	e716      	b.n	8010ed2 <__kernel_rem_pio2+0x2a2>
 80110a4:	ab0c      	add	r3, sp, #48	; 0x30
 80110a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80110aa:	f7ef fa63 	bl	8000574 <__aeabi_i2d>
 80110ae:	4632      	mov	r2, r6
 80110b0:	463b      	mov	r3, r7
 80110b2:	f7ef fac9 	bl	8000648 <__aeabi_dmul>
 80110b6:	4642      	mov	r2, r8
 80110b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80110bc:	464b      	mov	r3, r9
 80110be:	4630      	mov	r0, r6
 80110c0:	4639      	mov	r1, r7
 80110c2:	f7ef fac1 	bl	8000648 <__aeabi_dmul>
 80110c6:	3c01      	subs	r4, #1
 80110c8:	4606      	mov	r6, r0
 80110ca:	460f      	mov	r7, r1
 80110cc:	e713      	b.n	8010ef6 <__kernel_rem_pio2+0x2c6>
 80110ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80110d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80110d6:	f7ef fab7 	bl	8000648 <__aeabi_dmul>
 80110da:	4602      	mov	r2, r0
 80110dc:	460b      	mov	r3, r1
 80110de:	4648      	mov	r0, r9
 80110e0:	4651      	mov	r1, sl
 80110e2:	f7ef f8fb 	bl	80002dc <__adddf3>
 80110e6:	3701      	adds	r7, #1
 80110e8:	4681      	mov	r9, r0
 80110ea:	468a      	mov	sl, r1
 80110ec:	9b00      	ldr	r3, [sp, #0]
 80110ee:	429f      	cmp	r7, r3
 80110f0:	dc02      	bgt.n	80110f8 <__kernel_rem_pio2+0x4c8>
 80110f2:	9b06      	ldr	r3, [sp, #24]
 80110f4:	429f      	cmp	r7, r3
 80110f6:	ddea      	ble.n	80110ce <__kernel_rem_pio2+0x49e>
 80110f8:	9a06      	ldr	r2, [sp, #24]
 80110fa:	ab48      	add	r3, sp, #288	; 0x120
 80110fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011100:	e9c6 9a00 	strd	r9, sl, [r6]
 8011104:	3c01      	subs	r4, #1
 8011106:	e6fa      	b.n	8010efe <__kernel_rem_pio2+0x2ce>
 8011108:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801110a:	2b02      	cmp	r3, #2
 801110c:	dc0b      	bgt.n	8011126 <__kernel_rem_pio2+0x4f6>
 801110e:	2b00      	cmp	r3, #0
 8011110:	dc39      	bgt.n	8011186 <__kernel_rem_pio2+0x556>
 8011112:	d05d      	beq.n	80111d0 <__kernel_rem_pio2+0x5a0>
 8011114:	9b02      	ldr	r3, [sp, #8]
 8011116:	f003 0007 	and.w	r0, r3, #7
 801111a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801111e:	ecbd 8b02 	vpop	{d8}
 8011122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011126:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011128:	2b03      	cmp	r3, #3
 801112a:	d1f3      	bne.n	8011114 <__kernel_rem_pio2+0x4e4>
 801112c:	9b05      	ldr	r3, [sp, #20]
 801112e:	9500      	str	r5, [sp, #0]
 8011130:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011134:	eb0d 0403 	add.w	r4, sp, r3
 8011138:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801113c:	46a2      	mov	sl, r4
 801113e:	9b00      	ldr	r3, [sp, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f1aa 0a08 	sub.w	sl, sl, #8
 8011146:	dc69      	bgt.n	801121c <__kernel_rem_pio2+0x5ec>
 8011148:	46aa      	mov	sl, r5
 801114a:	f1ba 0f01 	cmp.w	sl, #1
 801114e:	f1a4 0408 	sub.w	r4, r4, #8
 8011152:	f300 8083 	bgt.w	801125c <__kernel_rem_pio2+0x62c>
 8011156:	9c05      	ldr	r4, [sp, #20]
 8011158:	ab48      	add	r3, sp, #288	; 0x120
 801115a:	441c      	add	r4, r3
 801115c:	2000      	movs	r0, #0
 801115e:	2100      	movs	r1, #0
 8011160:	2d01      	cmp	r5, #1
 8011162:	f300 809a 	bgt.w	801129a <__kernel_rem_pio2+0x66a>
 8011166:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801116a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801116e:	f1bb 0f00 	cmp.w	fp, #0
 8011172:	f040 8098 	bne.w	80112a6 <__kernel_rem_pio2+0x676>
 8011176:	9b04      	ldr	r3, [sp, #16]
 8011178:	e9c3 7800 	strd	r7, r8, [r3]
 801117c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011180:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011184:	e7c6      	b.n	8011114 <__kernel_rem_pio2+0x4e4>
 8011186:	9e05      	ldr	r6, [sp, #20]
 8011188:	ab48      	add	r3, sp, #288	; 0x120
 801118a:	441e      	add	r6, r3
 801118c:	462c      	mov	r4, r5
 801118e:	2000      	movs	r0, #0
 8011190:	2100      	movs	r1, #0
 8011192:	2c00      	cmp	r4, #0
 8011194:	da33      	bge.n	80111fe <__kernel_rem_pio2+0x5ce>
 8011196:	f1bb 0f00 	cmp.w	fp, #0
 801119a:	d036      	beq.n	801120a <__kernel_rem_pio2+0x5da>
 801119c:	4602      	mov	r2, r0
 801119e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111a2:	9c04      	ldr	r4, [sp, #16]
 80111a4:	e9c4 2300 	strd	r2, r3, [r4]
 80111a8:	4602      	mov	r2, r0
 80111aa:	460b      	mov	r3, r1
 80111ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80111b0:	f7ef f892 	bl	80002d8 <__aeabi_dsub>
 80111b4:	ae4a      	add	r6, sp, #296	; 0x128
 80111b6:	2401      	movs	r4, #1
 80111b8:	42a5      	cmp	r5, r4
 80111ba:	da29      	bge.n	8011210 <__kernel_rem_pio2+0x5e0>
 80111bc:	f1bb 0f00 	cmp.w	fp, #0
 80111c0:	d002      	beq.n	80111c8 <__kernel_rem_pio2+0x598>
 80111c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111c6:	4619      	mov	r1, r3
 80111c8:	9b04      	ldr	r3, [sp, #16]
 80111ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80111ce:	e7a1      	b.n	8011114 <__kernel_rem_pio2+0x4e4>
 80111d0:	9c05      	ldr	r4, [sp, #20]
 80111d2:	ab48      	add	r3, sp, #288	; 0x120
 80111d4:	441c      	add	r4, r3
 80111d6:	2000      	movs	r0, #0
 80111d8:	2100      	movs	r1, #0
 80111da:	2d00      	cmp	r5, #0
 80111dc:	da09      	bge.n	80111f2 <__kernel_rem_pio2+0x5c2>
 80111de:	f1bb 0f00 	cmp.w	fp, #0
 80111e2:	d002      	beq.n	80111ea <__kernel_rem_pio2+0x5ba>
 80111e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111e8:	4619      	mov	r1, r3
 80111ea:	9b04      	ldr	r3, [sp, #16]
 80111ec:	e9c3 0100 	strd	r0, r1, [r3]
 80111f0:	e790      	b.n	8011114 <__kernel_rem_pio2+0x4e4>
 80111f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80111f6:	f7ef f871 	bl	80002dc <__adddf3>
 80111fa:	3d01      	subs	r5, #1
 80111fc:	e7ed      	b.n	80111da <__kernel_rem_pio2+0x5aa>
 80111fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011202:	f7ef f86b 	bl	80002dc <__adddf3>
 8011206:	3c01      	subs	r4, #1
 8011208:	e7c3      	b.n	8011192 <__kernel_rem_pio2+0x562>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	e7c8      	b.n	80111a2 <__kernel_rem_pio2+0x572>
 8011210:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011214:	f7ef f862 	bl	80002dc <__adddf3>
 8011218:	3401      	adds	r4, #1
 801121a:	e7cd      	b.n	80111b8 <__kernel_rem_pio2+0x588>
 801121c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011220:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011224:	9b00      	ldr	r3, [sp, #0]
 8011226:	3b01      	subs	r3, #1
 8011228:	9300      	str	r3, [sp, #0]
 801122a:	4632      	mov	r2, r6
 801122c:	463b      	mov	r3, r7
 801122e:	4640      	mov	r0, r8
 8011230:	4649      	mov	r1, r9
 8011232:	f7ef f853 	bl	80002dc <__adddf3>
 8011236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801123a:	4602      	mov	r2, r0
 801123c:	460b      	mov	r3, r1
 801123e:	4640      	mov	r0, r8
 8011240:	4649      	mov	r1, r9
 8011242:	f7ef f849 	bl	80002d8 <__aeabi_dsub>
 8011246:	4632      	mov	r2, r6
 8011248:	463b      	mov	r3, r7
 801124a:	f7ef f847 	bl	80002dc <__adddf3>
 801124e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011252:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011256:	ed8a 7b00 	vstr	d7, [sl]
 801125a:	e770      	b.n	801113e <__kernel_rem_pio2+0x50e>
 801125c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011260:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011264:	4640      	mov	r0, r8
 8011266:	4632      	mov	r2, r6
 8011268:	463b      	mov	r3, r7
 801126a:	4649      	mov	r1, r9
 801126c:	f7ef f836 	bl	80002dc <__adddf3>
 8011270:	e9cd 0100 	strd	r0, r1, [sp]
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	4640      	mov	r0, r8
 801127a:	4649      	mov	r1, r9
 801127c:	f7ef f82c 	bl	80002d8 <__aeabi_dsub>
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	f7ef f82a 	bl	80002dc <__adddf3>
 8011288:	ed9d 7b00 	vldr	d7, [sp]
 801128c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011290:	ed84 7b00 	vstr	d7, [r4]
 8011294:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011298:	e757      	b.n	801114a <__kernel_rem_pio2+0x51a>
 801129a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801129e:	f7ef f81d 	bl	80002dc <__adddf3>
 80112a2:	3d01      	subs	r5, #1
 80112a4:	e75c      	b.n	8011160 <__kernel_rem_pio2+0x530>
 80112a6:	9b04      	ldr	r3, [sp, #16]
 80112a8:	9a04      	ldr	r2, [sp, #16]
 80112aa:	601f      	str	r7, [r3, #0]
 80112ac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80112b0:	605c      	str	r4, [r3, #4]
 80112b2:	609d      	str	r5, [r3, #8]
 80112b4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80112b8:	60d3      	str	r3, [r2, #12]
 80112ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112be:	6110      	str	r0, [r2, #16]
 80112c0:	6153      	str	r3, [r2, #20]
 80112c2:	e727      	b.n	8011114 <__kernel_rem_pio2+0x4e4>
 80112c4:	41700000 	.word	0x41700000
 80112c8:	3e700000 	.word	0x3e700000
 80112cc:	00000000 	.word	0x00000000

080112d0 <scalbn>:
 80112d0:	b570      	push	{r4, r5, r6, lr}
 80112d2:	ec55 4b10 	vmov	r4, r5, d0
 80112d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80112da:	4606      	mov	r6, r0
 80112dc:	462b      	mov	r3, r5
 80112de:	b999      	cbnz	r1, 8011308 <scalbn+0x38>
 80112e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80112e4:	4323      	orrs	r3, r4
 80112e6:	d03f      	beq.n	8011368 <scalbn+0x98>
 80112e8:	4b35      	ldr	r3, [pc, #212]	; (80113c0 <scalbn+0xf0>)
 80112ea:	4629      	mov	r1, r5
 80112ec:	ee10 0a10 	vmov	r0, s0
 80112f0:	2200      	movs	r2, #0
 80112f2:	f7ef f9a9 	bl	8000648 <__aeabi_dmul>
 80112f6:	4b33      	ldr	r3, [pc, #204]	; (80113c4 <scalbn+0xf4>)
 80112f8:	429e      	cmp	r6, r3
 80112fa:	4604      	mov	r4, r0
 80112fc:	460d      	mov	r5, r1
 80112fe:	da10      	bge.n	8011322 <scalbn+0x52>
 8011300:	a327      	add	r3, pc, #156	; (adr r3, 80113a0 <scalbn+0xd0>)
 8011302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011306:	e01f      	b.n	8011348 <scalbn+0x78>
 8011308:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801130c:	4291      	cmp	r1, r2
 801130e:	d10c      	bne.n	801132a <scalbn+0x5a>
 8011310:	ee10 2a10 	vmov	r2, s0
 8011314:	4620      	mov	r0, r4
 8011316:	4629      	mov	r1, r5
 8011318:	f7ee ffe0 	bl	80002dc <__adddf3>
 801131c:	4604      	mov	r4, r0
 801131e:	460d      	mov	r5, r1
 8011320:	e022      	b.n	8011368 <scalbn+0x98>
 8011322:	460b      	mov	r3, r1
 8011324:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011328:	3936      	subs	r1, #54	; 0x36
 801132a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801132e:	4296      	cmp	r6, r2
 8011330:	dd0d      	ble.n	801134e <scalbn+0x7e>
 8011332:	2d00      	cmp	r5, #0
 8011334:	a11c      	add	r1, pc, #112	; (adr r1, 80113a8 <scalbn+0xd8>)
 8011336:	e9d1 0100 	ldrd	r0, r1, [r1]
 801133a:	da02      	bge.n	8011342 <scalbn+0x72>
 801133c:	a11c      	add	r1, pc, #112	; (adr r1, 80113b0 <scalbn+0xe0>)
 801133e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011342:	a319      	add	r3, pc, #100	; (adr r3, 80113a8 <scalbn+0xd8>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ef f97e 	bl	8000648 <__aeabi_dmul>
 801134c:	e7e6      	b.n	801131c <scalbn+0x4c>
 801134e:	1872      	adds	r2, r6, r1
 8011350:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011354:	428a      	cmp	r2, r1
 8011356:	dcec      	bgt.n	8011332 <scalbn+0x62>
 8011358:	2a00      	cmp	r2, #0
 801135a:	dd08      	ble.n	801136e <scalbn+0x9e>
 801135c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011360:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011364:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011368:	ec45 4b10 	vmov	d0, r4, r5
 801136c:	bd70      	pop	{r4, r5, r6, pc}
 801136e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011372:	da08      	bge.n	8011386 <scalbn+0xb6>
 8011374:	2d00      	cmp	r5, #0
 8011376:	a10a      	add	r1, pc, #40	; (adr r1, 80113a0 <scalbn+0xd0>)
 8011378:	e9d1 0100 	ldrd	r0, r1, [r1]
 801137c:	dac0      	bge.n	8011300 <scalbn+0x30>
 801137e:	a10e      	add	r1, pc, #56	; (adr r1, 80113b8 <scalbn+0xe8>)
 8011380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011384:	e7bc      	b.n	8011300 <scalbn+0x30>
 8011386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801138a:	3236      	adds	r2, #54	; 0x36
 801138c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011390:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011394:	4620      	mov	r0, r4
 8011396:	4b0c      	ldr	r3, [pc, #48]	; (80113c8 <scalbn+0xf8>)
 8011398:	2200      	movs	r2, #0
 801139a:	e7d5      	b.n	8011348 <scalbn+0x78>
 801139c:	f3af 8000 	nop.w
 80113a0:	c2f8f359 	.word	0xc2f8f359
 80113a4:	01a56e1f 	.word	0x01a56e1f
 80113a8:	8800759c 	.word	0x8800759c
 80113ac:	7e37e43c 	.word	0x7e37e43c
 80113b0:	8800759c 	.word	0x8800759c
 80113b4:	fe37e43c 	.word	0xfe37e43c
 80113b8:	c2f8f359 	.word	0xc2f8f359
 80113bc:	81a56e1f 	.word	0x81a56e1f
 80113c0:	43500000 	.word	0x43500000
 80113c4:	ffff3cb0 	.word	0xffff3cb0
 80113c8:	3c900000 	.word	0x3c900000
 80113cc:	00000000 	.word	0x00000000

080113d0 <floor>:
 80113d0:	ec51 0b10 	vmov	r0, r1, d0
 80113d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80113d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113dc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80113e0:	2e13      	cmp	r6, #19
 80113e2:	ee10 5a10 	vmov	r5, s0
 80113e6:	ee10 8a10 	vmov	r8, s0
 80113ea:	460c      	mov	r4, r1
 80113ec:	dc31      	bgt.n	8011452 <floor+0x82>
 80113ee:	2e00      	cmp	r6, #0
 80113f0:	da14      	bge.n	801141c <floor+0x4c>
 80113f2:	a333      	add	r3, pc, #204	; (adr r3, 80114c0 <floor+0xf0>)
 80113f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f8:	f7ee ff70 	bl	80002dc <__adddf3>
 80113fc:	2200      	movs	r2, #0
 80113fe:	2300      	movs	r3, #0
 8011400:	f7ef fbb2 	bl	8000b68 <__aeabi_dcmpgt>
 8011404:	b138      	cbz	r0, 8011416 <floor+0x46>
 8011406:	2c00      	cmp	r4, #0
 8011408:	da53      	bge.n	80114b2 <floor+0xe2>
 801140a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801140e:	4325      	orrs	r5, r4
 8011410:	d052      	beq.n	80114b8 <floor+0xe8>
 8011412:	4c2d      	ldr	r4, [pc, #180]	; (80114c8 <floor+0xf8>)
 8011414:	2500      	movs	r5, #0
 8011416:	4621      	mov	r1, r4
 8011418:	4628      	mov	r0, r5
 801141a:	e024      	b.n	8011466 <floor+0x96>
 801141c:	4f2b      	ldr	r7, [pc, #172]	; (80114cc <floor+0xfc>)
 801141e:	4137      	asrs	r7, r6
 8011420:	ea01 0307 	and.w	r3, r1, r7
 8011424:	4303      	orrs	r3, r0
 8011426:	d01e      	beq.n	8011466 <floor+0x96>
 8011428:	a325      	add	r3, pc, #148	; (adr r3, 80114c0 <floor+0xf0>)
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	f7ee ff55 	bl	80002dc <__adddf3>
 8011432:	2200      	movs	r2, #0
 8011434:	2300      	movs	r3, #0
 8011436:	f7ef fb97 	bl	8000b68 <__aeabi_dcmpgt>
 801143a:	2800      	cmp	r0, #0
 801143c:	d0eb      	beq.n	8011416 <floor+0x46>
 801143e:	2c00      	cmp	r4, #0
 8011440:	bfbe      	ittt	lt
 8011442:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011446:	4133      	asrlt	r3, r6
 8011448:	18e4      	addlt	r4, r4, r3
 801144a:	ea24 0407 	bic.w	r4, r4, r7
 801144e:	2500      	movs	r5, #0
 8011450:	e7e1      	b.n	8011416 <floor+0x46>
 8011452:	2e33      	cmp	r6, #51	; 0x33
 8011454:	dd0b      	ble.n	801146e <floor+0x9e>
 8011456:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801145a:	d104      	bne.n	8011466 <floor+0x96>
 801145c:	ee10 2a10 	vmov	r2, s0
 8011460:	460b      	mov	r3, r1
 8011462:	f7ee ff3b 	bl	80002dc <__adddf3>
 8011466:	ec41 0b10 	vmov	d0, r0, r1
 801146a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801146e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011472:	f04f 37ff 	mov.w	r7, #4294967295
 8011476:	40df      	lsrs	r7, r3
 8011478:	4238      	tst	r0, r7
 801147a:	d0f4      	beq.n	8011466 <floor+0x96>
 801147c:	a310      	add	r3, pc, #64	; (adr r3, 80114c0 <floor+0xf0>)
 801147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011482:	f7ee ff2b 	bl	80002dc <__adddf3>
 8011486:	2200      	movs	r2, #0
 8011488:	2300      	movs	r3, #0
 801148a:	f7ef fb6d 	bl	8000b68 <__aeabi_dcmpgt>
 801148e:	2800      	cmp	r0, #0
 8011490:	d0c1      	beq.n	8011416 <floor+0x46>
 8011492:	2c00      	cmp	r4, #0
 8011494:	da0a      	bge.n	80114ac <floor+0xdc>
 8011496:	2e14      	cmp	r6, #20
 8011498:	d101      	bne.n	801149e <floor+0xce>
 801149a:	3401      	adds	r4, #1
 801149c:	e006      	b.n	80114ac <floor+0xdc>
 801149e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80114a2:	2301      	movs	r3, #1
 80114a4:	40b3      	lsls	r3, r6
 80114a6:	441d      	add	r5, r3
 80114a8:	45a8      	cmp	r8, r5
 80114aa:	d8f6      	bhi.n	801149a <floor+0xca>
 80114ac:	ea25 0507 	bic.w	r5, r5, r7
 80114b0:	e7b1      	b.n	8011416 <floor+0x46>
 80114b2:	2500      	movs	r5, #0
 80114b4:	462c      	mov	r4, r5
 80114b6:	e7ae      	b.n	8011416 <floor+0x46>
 80114b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80114bc:	e7ab      	b.n	8011416 <floor+0x46>
 80114be:	bf00      	nop
 80114c0:	8800759c 	.word	0x8800759c
 80114c4:	7e37e43c 	.word	0x7e37e43c
 80114c8:	bff00000 	.word	0xbff00000
 80114cc:	000fffff 	.word	0x000fffff

080114d0 <_sbrk>:
 80114d0:	4a04      	ldr	r2, [pc, #16]	; (80114e4 <_sbrk+0x14>)
 80114d2:	6811      	ldr	r1, [r2, #0]
 80114d4:	4603      	mov	r3, r0
 80114d6:	b909      	cbnz	r1, 80114dc <_sbrk+0xc>
 80114d8:	4903      	ldr	r1, [pc, #12]	; (80114e8 <_sbrk+0x18>)
 80114da:	6011      	str	r1, [r2, #0]
 80114dc:	6810      	ldr	r0, [r2, #0]
 80114de:	4403      	add	r3, r0
 80114e0:	6013      	str	r3, [r2, #0]
 80114e2:	4770      	bx	lr
 80114e4:	20000fcc 	.word	0x20000fcc
 80114e8:	20000fd0 	.word	0x20000fd0

080114ec <_init>:
 80114ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ee:	bf00      	nop
 80114f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114f2:	bc08      	pop	{r3}
 80114f4:	469e      	mov	lr, r3
 80114f6:	4770      	bx	lr

080114f8 <_fini>:
 80114f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114fa:	bf00      	nop
 80114fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114fe:	bc08      	pop	{r3}
 8011500:	469e      	mov	lr, r3
 8011502:	4770      	bx	lr
