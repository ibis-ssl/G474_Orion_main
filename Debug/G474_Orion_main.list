
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f484  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb0  0800f668  0800f668  0001f668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010318  08010318  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010318  08010318  00020318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010320  08010320  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010320  08010320  00020320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010324  08010324  00020324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08010328  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f24  200001f0  08010518  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  08010518  00031114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00039a6d  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062bb  00000000  00000000  00069cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00016dbd  00000000  00000000  0006ff8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001830  00000000  00000000  00086d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002cef  00000000  00000000  00088578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dccf  00000000  00000000  0008b267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037dd3  00000000  00000000  000b8f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011ec10  00000000  00000000  000f0d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006700  00000000  00000000  0020f91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0021601c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f64c 	.word	0x0800f64c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800f64c 	.word	0x0800f64c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <actuator_motor1>:
  }
  float_to_uchar4(senddata_motor, duty);
  can2_send(motor_id, senddata_motor);
}

void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fd4:	b500      	push	{lr}
  if (duty < -limit) {
 8000fd6:	eef1 7a60 	vneg.f32	s15, s1
 8000fda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 8000fe2:	b083      	sub	sp, #12
  if (duty < -limit) {
 8000fe4:	d408      	bmi.n	8000ff8 <actuator_motor1+0x24>
  } else if (duty > limit) {
 8000fe6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	bf8c      	ite	hi
 8000ff0:	eef0 7a60 	vmovhi.f32	s15, s1
 8000ff4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8000ff8:	4668      	mov	r0, sp
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	f005 f887 	bl	8006110 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001002:	4669      	mov	r1, sp
 8001004:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001008:	f000 fdd0 	bl	8001bac <can1_send>
void actuator_motor1(float duty, float duty_limit) { motor_cmd_can1(0x100, duty, duty_limit); }
 800100c:	b003      	add	sp, #12
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001012:	bf00      	nop

08001014 <actuator_motor2>:
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001014:	b500      	push	{lr}
  if (duty < -limit) {
 8001016:	eef1 7a60 	vneg.f32	s15, s1
 800101a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 8001022:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001024:	d408      	bmi.n	8001038 <actuator_motor2+0x24>
  } else if (duty > limit) {
 8001026:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	bf8c      	ite	hi
 8001030:	eef0 7a60 	vmovhi.f32	s15, s1
 8001034:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001038:	4668      	mov	r0, sp
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	f005 f867 	bl	8006110 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001042:	4669      	mov	r1, sp
 8001044:	f240 1001 	movw	r0, #257	; 0x101
 8001048:	f000 fdb0 	bl	8001bac <can1_send>
void actuator_motor2(float duty, float duty_limit) { motor_cmd_can1(0x101, duty, duty_limit); }
 800104c:	b003      	add	sp, #12
 800104e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001052:	bf00      	nop

08001054 <actuator_motor3>:
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001054:	b500      	push	{lr}
  if (duty < -limit) {
 8001056:	eef1 7a60 	vneg.f32	s15, s1
 800105a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 8001062:	b083      	sub	sp, #12
  if (duty < -limit) {
 8001064:	d408      	bmi.n	8001078 <actuator_motor3+0x24>
  } else if (duty > limit) {
 8001066:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	bf8c      	ite	hi
 8001070:	eef0 7a60 	vmovhi.f32	s15, s1
 8001074:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 8001078:	4668      	mov	r0, sp
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	f005 f847 	bl	8006110 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 8001082:	4669      	mov	r1, sp
 8001084:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001088:	f000 fde0 	bl	8001c4c <can2_send>
void actuator_motor3(float duty, float duty_limit) { motor_cmd_can2(0x102, duty, duty_limit); }
 800108c:	b003      	add	sp, #12
 800108e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001092:	bf00      	nop

08001094 <actuator_motor4>:
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 8001094:	b500      	push	{lr}
  if (duty < -limit) {
 8001096:	eef1 7a60 	vneg.f32	s15, s1
 800109a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010a2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010a4:	d408      	bmi.n	80010b8 <actuator_motor4+0x24>
  } else if (duty > limit) {
 80010a6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	bf8c      	ite	hi
 80010b0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010b4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010b8:	4668      	mov	r0, sp
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	f005 f827 	bl	8006110 <float_to_uchar4>
  can2_send(motor_id, senddata_motor);
 80010c2:	4669      	mov	r1, sp
 80010c4:	f240 1003 	movw	r0, #259	; 0x103
 80010c8:	f000 fdc0 	bl	8001c4c <can2_send>
void actuator_motor4(float duty, float duty_limit) { motor_cmd_can2(0x103, duty, duty_limit); }
 80010cc:	b003      	add	sp, #12
 80010ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d2:	bf00      	nop

080010d4 <actuator_motor5>:
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010d4:	b500      	push	{lr}
  if (duty < -limit) {
 80010d6:	eef1 7a60 	vneg.f32	s15, s1
 80010da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 80010e2:	b083      	sub	sp, #12
  if (duty < -limit) {
 80010e4:	d408      	bmi.n	80010f8 <actuator_motor5+0x24>
  } else if (duty > limit) {
 80010e6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	bf8c      	ite	hi
 80010f0:	eef0 7a60 	vmovhi.f32	s15, s1
 80010f4:	eef0 7a40 	vmovls.f32	s15, s0
  float_to_uchar4(senddata_motor, duty);
 80010f8:	4668      	mov	r0, sp
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	f005 f807 	bl	8006110 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001102:	4669      	mov	r1, sp
 8001104:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001108:	f000 fd50 	bl	8001bac <can1_send>
void actuator_motor5(float duty, float duty_limit) { motor_cmd_can1(0x104, duty, duty_limit); }
 800110c:	b003      	add	sp, #12
 800110e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001112:	bf00      	nop

08001114 <actuator_dribbler_up>:

void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 8001114:	b500      	push	{lr}
 8001116:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 8001118:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001134 <actuator_dribbler_up+0x20>
 800111c:	4668      	mov	r0, sp
 800111e:	f004 fff7 	bl	8006110 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001122:	4669      	mov	r1, sp
 8001124:	f240 1005 	movw	r0, #261	; 0x105
 8001128:	f000 fd40 	bl	8001bac <can1_send>
void actuator_dribbler_up() { motor_cmd_can1(0x105, 0.8, 1.0); }
 800112c:	b003      	add	sp, #12
 800112e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001132:	bf00      	nop
 8001134:	3f4ccccd 	.word	0x3f4ccccd

08001138 <actuator_dribbler_down>:
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001138:	b500      	push	{lr}
 800113a:	b083      	sub	sp, #12
  float_to_uchar4(senddata_motor, duty);
 800113c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001158 <actuator_dribbler_down+0x20>
 8001140:	4668      	mov	r0, sp
 8001142:	f004 ffe5 	bl	8006110 <float_to_uchar4>
  can1_send(motor_id, senddata_motor);
 8001146:	4669      	mov	r1, sp
 8001148:	f240 1005 	movw	r0, #261	; 0x105
 800114c:	f000 fd2e 	bl	8001bac <can1_send>
void actuator_dribbler_down() { motor_cmd_can1(0x105, 0, 1.0); }
 8001150:	b003      	add	sp, #12
 8001152:	f85d fb04 	ldr.w	pc, [sp], #4
 8001156:	bf00      	nop
 8001158:	00000000 	.word	0x00000000

0800115c <actuator_kicker_voltage>:

void actuator_kicker_voltage(float voltage)
{
 800115c:	b500      	push	{lr}
 800115e:	b083      	sub	sp, #12
  uint8_t senddata_kick[8];
  float_to_uchar4(&senddata_kick[4], voltage);
 8001160:	a801      	add	r0, sp, #4
 8001162:	f004 ffd5 	bl	8006110 <float_to_uchar4>

  senddata_kick[0] = 0;
 8001166:	2300      	movs	r3, #0
  can1_send(0x110, senddata_kick);
 8001168:	4669      	mov	r1, sp
 800116a:	f44f 7088 	mov.w	r0, #272	; 0x110
  senddata_kick[0] = 0;
 800116e:	f88d 3000 	strb.w	r3, [sp]
  can1_send(0x110, senddata_kick);
 8001172:	f000 fd1b 	bl	8001bac <can1_send>
}
 8001176:	b003      	add	sp, #12
 8001178:	f85d fb04 	ldr.w	pc, [sp], #4

0800117c <actuator_kicker>:

void actuator_kicker(uint8_t id, uint8_t param)
{
 800117c:	b500      	push	{lr}
 800117e:	b083      	sub	sp, #12
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
  uint8_t senddata_kick[8];
  senddata_kick[0] = id;
  senddata_kick[1] = param;
  can1_send(0x110, senddata_kick);
 8001184:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001188:	4669      	mov	r1, sp
  senddata_kick[0] = id;
 800118a:	f88d 2000 	strb.w	r2, [sp]
  senddata_kick[1] = param;
 800118e:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x110, senddata_kick);
 8001192:	f000 fd0b 	bl	8001bac <can1_send>
  can2_send(0x110, senddata_kick);
 8001196:	4669      	mov	r1, sp
 8001198:	f44f 7088 	mov.w	r0, #272	; 0x110
 800119c:	f000 fd56 	bl	8001c4c <can2_send>
}
 80011a0:	b003      	add	sp, #12
 80011a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a6:	bf00      	nop

080011a8 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on)
{
 80011a8:	b500      	push	{lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	4603      	mov	r3, r0
  /*id 0=>off
	 *   1=>on
	 * */
  uint8_t senddata_power[8];
  senddata_power[0] = 0;
 80011ae:	2200      	movs	r2, #0
  senddata_power[1] = power_on;
  can1_send(0x010, senddata_power);
 80011b0:	4669      	mov	r1, sp
 80011b2:	2010      	movs	r0, #16
  senddata_power[0] = 0;
 80011b4:	f88d 2000 	strb.w	r2, [sp]
  senddata_power[1] = power_on;
 80011b8:	f88d 3001 	strb.w	r3, [sp, #1]
  can1_send(0x010, senddata_power);
 80011bc:	f000 fcf6 	bl	8001bac <can1_send>
  can2_send(0x010, senddata_power);
 80011c0:	4669      	mov	r1, sp
 80011c2:	2010      	movs	r0, #16
 80011c4:	f000 fd42 	bl	8001c4c <can2_send>
}
 80011c8:	b003      	add	sp, #12
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ce:	bf00      	nop

080011d0 <actuator_power_param>:

void actuator_power_param(uint8_t id, float param)
{
 80011d0:	b500      	push	{lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	4603      	mov	r3, r0
 * */

  uint8_t senddata_power_param[8];

  senddata_power_param[0] = id;
  float_to_uchar4(&senddata_power_param[1], param);
 80011d6:	f10d 0001 	add.w	r0, sp, #1
  senddata_power_param[0] = id;
 80011da:	f88d 3000 	strb.w	r3, [sp]
  float_to_uchar4(&senddata_power_param[1], param);
 80011de:	f004 ff97 	bl	8006110 <float_to_uchar4>

  can1_send(0x010, senddata_power_param);
 80011e2:	4669      	mov	r1, sp
 80011e4:	2010      	movs	r0, #16
 80011e6:	f000 fce1 	bl	8001bac <can1_send>
}
 80011ea:	b003      	add	sp, #12
 80011ec:	f85d fb04 	ldr.w	pc, [sp], #4

080011f0 <actuator_buzzer>:
  send_data_param[0] = param5;
  can1_send(0x304, send_data_param);
}

void actuator_buzzer(uint16_t ontime, uint16_t offtime)
{
 80011f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011f2:	4d07      	ldr	r5, [pc, #28]	; (8001210 <actuator_buzzer+0x20>)
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	22fa      	movs	r2, #250	; 0xfa
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
{
 80011fa:	460c      	mov	r4, r1
  HAL_Delay(ontime);
 80011fc:	f005 f930 	bl	8006460 <HAL_Delay>

  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8001200:	682b      	ldr	r3, [r5, #0]
 8001202:	2200      	movs	r2, #0
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(offtime);
 8001206:	4620      	mov	r0, r4
}
 8001208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Delay(offtime);
 800120c:	f005 b928 	b.w	8006460 <HAL_Delay>
 8001210:	20000bf4 	.word	0x20000bf4

08001214 <actuator_buzzer_on>:

void actuator_buzzer_on()
{
  __HAL_TIM_SET_PRESCALER(&htim5, 170);
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <actuator_buzzer_on+0x10>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	21aa      	movs	r1, #170	; 0xaa
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 800121a:	22fa      	movs	r2, #250	; 0xfa
  __HAL_TIM_SET_PRESCALER(&htim5, 170);
 800121c:	6299      	str	r1, [r3, #40]	; 0x28
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000bf4 	.word	0x20000bf4

08001228 <actuator_buzzer_off>:

void actuator_buzzer_off() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); }
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <actuator_buzzer_off+0xc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	639a      	str	r2, [r3, #56]	; 0x38
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000bf4 	.word	0x20000bf4

08001238 <actuator_buzzer_frq>:

void actuator_buzzer_frq_on(float frq)
{
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001238:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001260 <actuator_buzzer_frq+0x28>
 800123c:	eec7 7a00 	vdiv.f32	s15, s14, s0
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
}
void actuator_buzzer_frq(float frq, uint16_t time)
{
 8001240:	b510      	push	{r4, lr}
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001242:	4c08      	ldr	r4, [pc, #32]	; (8001264 <actuator_buzzer_frq+0x2c>)
 8001244:	6823      	ldr	r3, [r4, #0]
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001246:	22fa      	movs	r2, #250	; 0xfa
  __HAL_TIM_SET_PRESCALER(&htim5, 170 * 2000 / frq);
 8001248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
  actuator_buzzer_frq_on(frq);
  HAL_Delay(time);
 8001252:	f005 f905 	bl	8006460 <HAL_Delay>
void actuator_buzzer_off() { __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0); }
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
  actuator_buzzer_off();
}
 800125c:	bd10      	pop	{r4, pc}
 800125e:	bf00      	nop
 8001260:	48a60400 	.word	0x48a60400
 8001264:	20000bf4 	.word	0x20000bf4

08001268 <actuator_motor_calib>:

  HAL_Delay(80);
}

void actuator_motor_calib(int board)
{
 8001268:	b500      	push	{lr}
  uint8_t dummy[8] = {0};
 800126a:	2300      	movs	r3, #0
{
 800126c:	b083      	sub	sp, #12
  uint8_t dummy[8] = {0};
 800126e:	e9cd 3300 	strd	r3, r3, [sp]
  if (board == 0) {
 8001272:	b120      	cbz	r0, 800127e <actuator_motor_calib+0x16>
    can1_send(0x310, dummy);
  } else if (board == 1) {
 8001274:	2801      	cmp	r0, #1
 8001276:	d00a      	beq.n	800128e <actuator_motor_calib+0x26>
    can2_send(0x310, dummy);
  }
}
 8001278:	b003      	add	sp, #12
 800127a:	f85d fb04 	ldr.w	pc, [sp], #4
    can1_send(0x310, dummy);
 800127e:	4669      	mov	r1, sp
 8001280:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001284:	f000 fc92 	bl	8001bac <can1_send>
}
 8001288:	b003      	add	sp, #12
 800128a:	f85d fb04 	ldr.w	pc, [sp], #4
    can2_send(0x310, dummy);
 800128e:	4669      	mov	r1, sp
 8001290:	f44f 7044 	mov.w	r0, #784	; 0x310
 8001294:	f000 fcda 	bl	8001c4c <can2_send>
}
 8001298:	b003      	add	sp, #12
 800129a:	f85d fb04 	ldr.w	pc, [sp], #4
 800129e:	bf00      	nop

080012a0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012a0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a2:	2400      	movs	r4, #0
{
 80012a4:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	2220      	movs	r2, #32
 80012a8:	4621      	mov	r1, r4
 80012aa:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80012ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80012b0:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	f00a fe01 	bl	800beb8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012b6:	4823      	ldr	r0, [pc, #140]	; (8001344 <MX_ADC1_Init+0xa4>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012b8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c0:	2204      	movs	r2, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c2:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ca:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012cc:	8383      	strh	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 80012ce:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.NbrOfConversion = 1;
 80012d0:	2301      	movs	r3, #1
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012d2:	2240      	movs	r2, #64	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012dc:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 80012e0:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ea:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012ec:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc1.Init.OversamplingMode = ENABLE;
 80012ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 80012f2:	6482      	str	r2, [r0, #72]	; 0x48
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012f4:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f6:	f005 f8c5 	bl	8006484 <HAL_ADC_Init>
 80012fa:	b9c8      	cbnz	r0, 8001330 <MX_ADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012fc:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012fe:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_ADC1_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001300:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001302:	a901      	add	r1, sp, #4
 8001304:	f005 fd86 	bl	8006e14 <HAL_ADCEx_MultiModeConfigChannel>
 8001308:	b9c8      	cbnz	r0, 800133e <MX_ADC1_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <MX_ADC1_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800130e:	2306      	movs	r3, #6
 8001310:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001314:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001316:	237f      	movs	r3, #127	; 0x7f
 8001318:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131c:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 800131e:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001322:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	f005 fa23 	bl	8006770 <HAL_ADC_ConfigChannel>
 800132a:	b920      	cbnz	r0, 8001336 <MX_ADC1_Init+0x96>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132c:	b00c      	add	sp, #48	; 0x30
 800132e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001330:	f002 fde0 	bl	8003ef4 <Error_Handler>
 8001334:	e7e2      	b.n	80012fc <MX_ADC1_Init+0x5c>
    Error_Handler();
 8001336:	f002 fddd 	bl	8003ef4 <Error_Handler>
}
 800133a:	b00c      	add	sp, #48	; 0x30
 800133c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800133e:	f002 fdd9 	bl	8003ef4 <Error_Handler>
 8001342:	e7e2      	b.n	800130a <MX_ADC1_Init+0x6a>
 8001344:	20000210 	.word	0x20000210
 8001348:	3ef08000 	.word	0x3ef08000

0800134c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800134c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800134e:	2400      	movs	r4, #0
{
 8001350:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	2220      	movs	r2, #32
 8001354:	4621      	mov	r1, r4
 8001356:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001358:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800135c:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	f00a fdab 	bl	800beb8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <MX_ADC3_Init+0xa4>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001364:	4923      	ldr	r1, [pc, #140]	; (80013f4 <MX_ADC3_Init+0xa8>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001366:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800136a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136e:	2204      	movs	r2, #4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001370:	e9c0 1300 	strd	r1, r3, [r0]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001378:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800137a:	8383      	strh	r3, [r0, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.DMAContinuousRequests = ENABLE;
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc3.Init.OversamplingMode = ENABLE;
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 800137c:	6442      	str	r2, [r0, #68]	; 0x44
  hadc3.Init.NbrOfConversion = 1;
 800137e:	2301      	movs	r3, #1
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001380:	2240      	movs	r2, #64	; 0x40
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001382:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001386:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800138a:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 800138e:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001390:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001394:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001396:	64c4      	str	r4, [r0, #76]	; 0x4c
  hadc3.Init.OversamplingMode = ENABLE;
 8001398:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 800139c:	6482      	str	r2, [r0, #72]	; 0x48
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800139e:	6503      	str	r3, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013a0:	f005 f870 	bl	8006484 <HAL_ADC_Init>
 80013a4:	b9c8      	cbnz	r0, 80013da <MX_ADC3_Init+0x8e>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013a6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_ADC3_Init+0xa4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013aa:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80013ac:	a901      	add	r1, sp, #4
 80013ae:	f005 fd31 	bl	8006e14 <HAL_ADCEx_MultiModeConfigChannel>
 80013b2:	b9c8      	cbnz	r0, 80013e8 <MX_ADC3_Init+0x9c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <MX_ADC3_Init+0xac>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MX_ADC3_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b8:	2306      	movs	r3, #6
 80013ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013be:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c0:	237f      	movs	r3, #127	; 0x7f
 80013c2:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013c6:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80013c8:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013ca:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80013cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013d0:	f005 f9ce 	bl	8006770 <HAL_ADC_ConfigChannel>
 80013d4:	b920      	cbnz	r0, 80013e0 <MX_ADC3_Init+0x94>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013d6:	b00c      	add	sp, #48	; 0x30
 80013d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013da:	f002 fd8b 	bl	8003ef4 <Error_Handler>
 80013de:	e7e2      	b.n	80013a6 <MX_ADC3_Init+0x5a>
    Error_Handler();
 80013e0:	f002 fd88 	bl	8003ef4 <Error_Handler>
}
 80013e4:	b00c      	add	sp, #48	; 0x30
 80013e6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013e8:	f002 fd84 	bl	8003ef4 <Error_Handler>
 80013ec:	e7e2      	b.n	80013b4 <MX_ADC3_Init+0x68>
 80013ee:	bf00      	nop
 80013f0:	2000027c 	.word	0x2000027c
 80013f4:	50000400 	.word	0x50000400
 80013f8:	04300002 	.word	0x04300002

080013fc <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80013fc:	b510      	push	{r4, lr}
 80013fe:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001400:	2220      	movs	r2, #32
 8001402:	2100      	movs	r1, #0
 8001404:	4668      	mov	r0, sp
 8001406:	f00a fd57 	bl	800beb8 <memset>
  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800140a:	4c1e      	ldr	r4, [pc, #120]	; (8001484 <MX_ADC5_Init+0x88>)
  hadc5.Instance = ADC5;
 800140c:	481e      	ldr	r0, [pc, #120]	; (8001488 <MX_ADC5_Init+0x8c>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800140e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001412:	2300      	movs	r3, #0
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001414:	e9c0 4200 	strd	r4, r2, [r0]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001418:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141c:	2104      	movs	r1, #4
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800141e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001422:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001426:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800142a:	8382      	strh	r2, [r0, #28]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 800142c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.NbrOfConversion = 1;
 8001430:	2201      	movs	r2, #1
  hadc5.Init.DMAContinuousRequests = ENABLE;
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001432:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001434:	64c3      	str	r3, [r0, #76]	; 0x4c
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001436:	2340      	movs	r3, #64	; 0x40
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001438:	6181      	str	r1, [r0, #24]
  hadc5.Init.NbrOfConversion = 1;
 800143a:	6202      	str	r2, [r0, #32]
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800143c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.OversamplingMode = ENABLE;
 8001440:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8001444:	6441      	str	r1, [r0, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001446:	6483      	str	r3, [r0, #72]	; 0x48
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001448:	6502      	str	r2, [r0, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800144a:	f005 f81b 	bl	8006484 <HAL_ADC_Init>
 800144e:	b990      	cbnz	r0, 8001476 <MX_ADC5_Init+0x7a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <MX_ADC5_Init+0x90>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_ADC5_Init+0x8c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001454:	2306      	movs	r3, #6
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800145a:	2407      	movs	r4, #7
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145c:	237f      	movs	r3, #127	; 0x7f
 800145e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001462:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001464:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001466:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 8001468:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800146c:	f005 f980 	bl	8006770 <HAL_ADC_ConfigChannel>
 8001470:	b920      	cbnz	r0, 800147c <MX_ADC5_Init+0x80>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001472:	b008      	add	sp, #32
 8001474:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001476:	f002 fd3d 	bl	8003ef4 <Error_Handler>
 800147a:	e7e9      	b.n	8001450 <MX_ADC5_Init+0x54>
    Error_Handler();
 800147c:	f002 fd3a 	bl	8003ef4 <Error_Handler>
}
 8001480:	b008      	add	sp, #32
 8001482:	bd10      	pop	{r4, pc}
 8001484:	50000600 	.word	0x50000600
 8001488:	200002e8 	.word	0x200002e8
 800148c:	08600004 	.word	0x08600004

08001490 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	4604      	mov	r4, r0
 8001494:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001498:	2254      	movs	r2, #84	; 0x54
 800149a:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80014a0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80014a4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a6:	f00a fd07 	bl	800beb8 <memset>
  if(adcHandle->Instance==ADC1)
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b0:	d007      	beq.n	80014c2 <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80014b2:	4a5f      	ldr	r2, [pc, #380]	; (8001630 <HAL_ADC_MspInit+0x1a0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d04a      	beq.n	800154e <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 80014b8:	4a5e      	ldr	r2, [pc, #376]	; (8001634 <HAL_ADC_MspInit+0x1a4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d07a      	beq.n	80015b4 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80014be:	b020      	add	sp, #128	; 0x80
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ca:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014cc:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014ce:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f007 f8bc 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	f040 80a2 	bne.w	800161e <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014dc:	4857      	ldr	r0, [pc, #348]	; (800163c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 80014e0:	4d57      	ldr	r5, [pc, #348]	; (8001640 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014e6:	64da      	str	r2, [r3, #76]	; 0x4c
 80014e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f4:	f042 0202 	orr.w	r2, r2, #2
 80014f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001502:	2201      	movs	r2, #1
 8001504:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001506:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800150a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001512:	f006 fb61 	bl	8007bd8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 8001516:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001518:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800151a:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800151e:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001524:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152c:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800152e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001532:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001536:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800153a:	f005 fd93 	bl	8007064 <HAL_DMA_Init>
 800153e:	b918      	cbnz	r0, 8001548 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8001540:	6565      	str	r5, [r4, #84]	; 0x54
 8001542:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001544:	b020      	add	sp, #128	; 0x80
 8001546:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001548:	f002 fcd4 	bl	8003ef4 <Error_Handler>
 800154c:	e7f8      	b.n	8001540 <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800154e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001552:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001556:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001558:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800155a:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155c:	f007 f876 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8001560:	2800      	cmp	r0, #0
 8001562:	d15f      	bne.n	8001624 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001564:	4a38      	ldr	r2, [pc, #224]	; (8001648 <HAL_ADC_MspInit+0x1b8>)
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800156a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 800156c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800156e:	d109      	bne.n	8001584 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001570:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
 8001572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001578:	64da      	str	r2, [r3, #76]	; 0x4c
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 800158a:	4d30      	ldr	r5, [pc, #192]	; (800164c <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	f042 0202 	orr.w	r2, r2, #2
 8001590:	64da      	str	r2, [r3, #76]	; 0x4c
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 800159a:	2202      	movs	r2, #2
 800159c:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 800159e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80015a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a8:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f006 fb15 	bl	8007bd8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80015b0:	2325      	movs	r3, #37	; 0x25
 80015b2:	e7b2      	b.n	800151a <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015be:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015c0:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c2:	f007 f843 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	2800      	cmp	r0, #0
 80015c8:	d12f      	bne.n	800162a <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <HAL_ADC_MspInit+0x1b8>)
 80015cc:	6813      	ldr	r3, [r2, #0]
 80015ce:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015d0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 80015d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80015d4:	d109      	bne.n	80015ea <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
 80015d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015de:	64da      	str	r2, [r3, #76]	; 0x4c
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	9304      	str	r3, [sp, #16]
 80015e8:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 80015ec:	4d19      	ldr	r5, [pc, #100]	; (8001654 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001602:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800160c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f006 fae0 	bl	8007bd8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800161a:	2327      	movs	r3, #39	; 0x27
 800161c:	e77d      	b.n	800151a <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 800161e:	f002 fc69 	bl	8003ef4 <Error_Handler>
 8001622:	e75a      	b.n	80014da <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8001624:	f002 fc66 	bl	8003ef4 <Error_Handler>
 8001628:	e79c      	b.n	8001564 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 800162a:	f002 fc63 	bl	8003ef4 <Error_Handler>
 800162e:	e7cc      	b.n	80015ca <HAL_ADC_MspInit+0x13a>
 8001630:	50000400 	.word	0x50000400
 8001634:	50000600 	.word	0x50000600
 8001638:	40021000 	.word	0x40021000
 800163c:	48000400 	.word	0x48000400
 8001640:	20000354 	.word	0x20000354
 8001644:	40020058 	.word	0x40020058
 8001648:	2000020c 	.word	0x2000020c
 800164c:	200003b4 	.word	0x200003b4
 8001650:	40020030 	.word	0x40020030
 8001654:	20000414 	.word	0x20000414
 8001658:	40020044 	.word	0x40020044

0800165c <resetAiCmdData>:

#include "util.h"

void resetAiCmdData(ai_cmd_t * ai_cmd)
{
  ai_cmd->local_target_speed[0] = 0;
 800165c:	2300      	movs	r3, #0
  ai_cmd->local_target_speed[1] = 0;
  ai_cmd->global_vision_theta = 0;
  ai_cmd->target_theta = 0;
  ai_cmd->chip_en = false;
 800165e:	2200      	movs	r2, #0
  ai_cmd->ball_local_x = 0;
  ai_cmd->ball_local_y = 0;
  ai_cmd->ball_local_radius = 0;
  ai_cmd->ball_local_FPS = 0;*/

  ai_cmd->vision_lost_flag = true;
 8001660:	2101      	movs	r1, #1
  ai_cmd->local_target_speed[0] = 0;
 8001662:	6143      	str	r3, [r0, #20]
  ai_cmd->local_target_speed[1] = 0;
 8001664:	6183      	str	r3, [r0, #24]
  ai_cmd->global_vision_theta = 0;
 8001666:	6043      	str	r3, [r0, #4]
  ai_cmd->target_theta = 0;
 8001668:	6003      	str	r3, [r0, #0]
  ai_cmd->chip_en = false;
 800166a:	7402      	strb	r2, [r0, #16]
  ai_cmd->kick_power = 0;
 800166c:	60c3      	str	r3, [r0, #12]
  ai_cmd->drible_power = 0;
 800166e:	6083      	str	r3, [r0, #8]
  ai_cmd->allow_local_flags = 0;
 8001670:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  ai_cmd->global_ball_position[0] = 0;
 8001674:	62c3      	str	r3, [r0, #44]	; 0x2c
  ai_cmd->global_ball_position[1] = 0;
 8001676:	6303      	str	r3, [r0, #48]	; 0x30
  ai_cmd->global_robot_position[0] = 0;
 8001678:	61c3      	str	r3, [r0, #28]
  ai_cmd->global_robot_position[1] = 0;
 800167a:	6203      	str	r3, [r0, #32]
  ai_cmd->global_target_position[0] = 0;
 800167c:	6243      	str	r3, [r0, #36]	; 0x24
  ai_cmd->global_target_position[1] = 0;
 800167e:	6283      	str	r3, [r0, #40]	; 0x28
  ai_cmd->vision_lost_flag = true;
 8001680:	6481      	str	r1, [r0, #72]	; 0x48
  ai_cmd->local_vision_en_flag = false;
  ai_cmd->keeper_mode_en_flag = false;
  ai_cmd->stop_request_flag = false;  //
}
 8001682:	4770      	bx	lr
 8001684:	0000      	movs	r0, r0
	...

08001688 <parseRxCmd>:

void parseRxCmd(connection_t * con, system_t * sys, ai_cmd_t * ai_cmd, integration_control_t * integ, uint8_t data[])
{
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	ed2d 8b02 	vpush	{d8}
 800168e:	9e08      	ldr	r6, [sp, #32]
 8001690:	4614      	mov	r4, r2
 8001692:	461f      	mov	r7, r3
  con->check_ver = data[1];
 8001694:	7872      	ldrb	r2, [r6, #1]

  if (con->check_ver != con->check_pre) {
 8001696:	7883      	ldrb	r3, [r0, #2]
  con->check_ver = data[1];
 8001698:	70c2      	strb	r2, [r0, #3]
  if (con->check_ver != con->check_pre) {
 800169a:	4293      	cmp	r3, r2
{
 800169c:	4605      	mov	r5, r0
    con->latest_ai_cmd_update_time = sys->system_time_ms;
 800169e:	694b      	ldr	r3, [r1, #20]
  if (con->check_ver != con->check_pre) {
 80016a0:	d005      	beq.n	80016ae <parseRxCmd+0x26>

    con->pre_vision_update_cycle_cnt = con->vision_update_cycle_cnt;
    con->vision_update_cycle_cnt = 0;

    con->check_pre = con->check_ver;
 80016a2:	7082      	strb	r2, [r0, #2]
    con->pre_vision_update_cycle_cnt = con->vision_update_cycle_cnt;
 80016a4:	6882      	ldr	r2, [r0, #8]
 80016a6:	60c2      	str	r2, [r0, #12]
    con->vision_update_cycle_cnt = 0;
 80016a8:	2200      	movs	r2, #0
    con->latest_ai_cmd_update_time = sys->system_time_ms;
 80016aa:	6103      	str	r3, [r0, #16]
    con->vision_update_cycle_cnt = 0;
 80016ac:	6082      	str	r2, [r0, #8]
  }

  float pre_update_time_ms = con->latest_cm4_cmd_update_time;
 80016ae:	ed95 7a05 	vldr	s14, [r5, #20]
  con->latest_cm4_cmd_update_time = sys->system_time_ms;
  con->cmd_rx_frq = (float)1000 / (con->latest_cm4_cmd_update_time - pre_update_time_ms);
 80016b2:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001908 <parseRxCmd+0x280>
  con->latest_cm4_cmd_update_time = sys->system_time_ms;
 80016b6:	616b      	str	r3, [r5, #20]
  con->cmd_rx_frq = (float)1000 / (con->latest_cm4_cmd_update_time - pre_update_time_ms);
 80016b8:	ee07 3a90 	vmov	s15, r3
  float pre_update_time_ms = con->latest_cm4_cmd_update_time;
 80016bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  con->cmd_rx_frq = (float)1000 / (con->latest_cm4_cmd_update_time - pre_update_time_ms);
 80016c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016cc:	ed85 7a01 	vstr	s14, [r5, #4]

  // aiコマンドに関係なくカメラ情報は入れる(デバッグ用)
  ai_cmd->ball_local_x = data[RX_BUF_SIZE_ETHER - 7] << 8 | data[RX_BUF_SIZE_ETHER - 6];
 80016d0:	f8b6 3039 	ldrh.w	r3, [r6, #57]	; 0x39
 80016d4:	ba5b      	rev16	r3, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	63a3      	str	r3, [r4, #56]	; 0x38
  ai_cmd->ball_local_y = data[RX_BUF_SIZE_ETHER - 5] << 8 | data[RX_BUF_SIZE_ETHER - 4];
 80016da:	f8b6 203b 	ldrh.w	r2, [r6, #59]	; 0x3b
 80016de:	ba52      	rev16	r2, r2
 80016e0:	b292      	uxth	r2, r2
 80016e2:	63e2      	str	r2, [r4, #60]	; 0x3c
  ai_cmd->ball_local_radius = data[RX_BUF_SIZE_ETHER - 3] << 8 | data[RX_BUF_SIZE_ETHER - 2];
 80016e4:	f8b6 203d 	ldrh.w	r2, [r6, #61]	; 0x3d
 80016e8:	ba52      	rev16	r2, r2
 80016ea:	b292      	uxth	r2, r2
 80016ec:	6422      	str	r2, [r4, #64]	; 0x40
  ai_cmd->ball_local_FPS = data[RX_BUF_SIZE_ETHER - 1];

  // time out
  if (con->connected_ai == 0) {
 80016ee:	782a      	ldrb	r2, [r5, #0]
  ai_cmd->ball_local_FPS = data[RX_BUF_SIZE_ETHER - 1];
 80016f0:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
 80016f4:	6463      	str	r3, [r4, #68]	; 0x44
  if (con->connected_ai == 0) {
 80016f6:	b9a2      	cbnz	r2, 8001722 <parseRxCmd+0x9a>
  ai_cmd->allow_local_flags = 0;
 80016f8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  }

  // 目標座標の移動量と更新時間から推測される区間速度
  integ->guess_target_speed[0] = (float)(ai_cmd->global_target_position[0] - integ->pre_global_target_position[0]) / con->pre_vision_update_cycle_cnt;
  integ->guess_target_speed[1] = (float)(ai_cmd->global_target_position[1] - integ->pre_global_target_position[1]) / con->pre_vision_update_cycle_cnt;
}
 80016fc:	ecbd 8b02 	vpop	{d8}
  ai_cmd->local_target_speed[0] = 0;
 8001700:	2300      	movs	r3, #0
  ai_cmd->vision_lost_flag = true;
 8001702:	2101      	movs	r1, #1
  ai_cmd->local_target_speed[0] = 0;
 8001704:	6163      	str	r3, [r4, #20]
  ai_cmd->local_target_speed[1] = 0;
 8001706:	61a3      	str	r3, [r4, #24]
  ai_cmd->global_vision_theta = 0;
 8001708:	6063      	str	r3, [r4, #4]
  ai_cmd->target_theta = 0;
 800170a:	6023      	str	r3, [r4, #0]
  ai_cmd->chip_en = false;
 800170c:	7422      	strb	r2, [r4, #16]
  ai_cmd->kick_power = 0;
 800170e:	60e3      	str	r3, [r4, #12]
  ai_cmd->drible_power = 0;
 8001710:	60a3      	str	r3, [r4, #8]
  ai_cmd->global_ball_position[0] = 0;
 8001712:	62e3      	str	r3, [r4, #44]	; 0x2c
  ai_cmd->global_ball_position[1] = 0;
 8001714:	6323      	str	r3, [r4, #48]	; 0x30
  ai_cmd->global_robot_position[0] = 0;
 8001716:	61e3      	str	r3, [r4, #28]
  ai_cmd->global_robot_position[1] = 0;
 8001718:	6223      	str	r3, [r4, #32]
  ai_cmd->global_target_position[0] = 0;
 800171a:	6263      	str	r3, [r4, #36]	; 0x24
  ai_cmd->global_target_position[1] = 0;
 800171c:	62a3      	str	r3, [r4, #40]	; 0x28
  ai_cmd->vision_lost_flag = true;
 800171e:	64a1      	str	r1, [r4, #72]	; 0x48
}
 8001720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ai_cmd->local_target_speed[0] = two_to_float(&data[2]) * AI_CMD_VEL_MAX_MPS;
 8001722:	1cb0      	adds	r0, r6, #2
 8001724:	f004 fdf8 	bl	8006318 <two_to_float>
 8001728:	eeb1 8a0c 	vmov.f32	s16, #28	; 0x40e00000  7.0
 800172c:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd->local_target_speed[1] = two_to_float(&data[4]) * AI_CMD_VEL_MAX_MPS;
 8001730:	1d30      	adds	r0, r6, #4
  ai_cmd->local_target_speed[0] = two_to_float(&data[2]) * AI_CMD_VEL_MAX_MPS;
 8001732:	ed84 0a05 	vstr	s0, [r4, #20]
  ai_cmd->local_target_speed[1] = two_to_float(&data[4]) * AI_CMD_VEL_MAX_MPS;
 8001736:	f004 fdef 	bl	8006318 <two_to_float>
 800173a:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd->global_vision_theta = two_to_float(&data[6]) * M_PI;
 800173e:	1db0      	adds	r0, r6, #6
  ai_cmd->local_target_speed[1] = two_to_float(&data[4]) * AI_CMD_VEL_MAX_MPS;
 8001740:	ed84 0a06 	vstr	s0, [r4, #24]
  ai_cmd->global_vision_theta = two_to_float(&data[6]) * M_PI;
 8001744:	f004 fde8 	bl	8006318 <two_to_float>
 8001748:	ee10 0a10 	vmov	r0, s0
 800174c:	f7fe ff24 	bl	8000598 <__aeabi_f2d>
 8001750:	a36b      	add	r3, pc, #428	; (adr r3, 8001900 <parseRxCmd+0x278>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe ff77 	bl	8000648 <__aeabi_dmul>
 800175a:	f7ff fa6d 	bl	8000c38 <__aeabi_d2f>
 800175e:	6060      	str	r0, [r4, #4]
  ai_cmd->target_theta = two_to_float(&data[8]) * M_PI;
 8001760:	f106 0008 	add.w	r0, r6, #8
 8001764:	f004 fdd8 	bl	8006318 <two_to_float>
 8001768:	ee10 0a10 	vmov	r0, s0
 800176c:	f7fe ff14 	bl	8000598 <__aeabi_f2d>
 8001770:	a363      	add	r3, pc, #396	; (adr r3, 8001900 <parseRxCmd+0x278>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff67 	bl	8000648 <__aeabi_dmul>
 800177a:	f7ff fa5d 	bl	8000c38 <__aeabi_d2f>
 800177e:	6020      	str	r0, [r4, #0]
  if (data[10] >= 101) {
 8001780:	7ab3      	ldrb	r3, [r6, #10]
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	f240 80ad 	bls.w	80018e2 <parseRxCmd+0x25a>
    ai_cmd->chip_en = true;
 8001788:	2301      	movs	r3, #1
 800178a:	7423      	strb	r3, [r4, #16]
    ai_cmd->kick_power = (float)(data[10] - 101) / 20;
 800178c:	7ab3      	ldrb	r3, [r6, #10]
 800178e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800190c <parseRxCmd+0x284>
 8001792:	3b65      	subs	r3, #101	; 0x65
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a0:	edc4 7a03 	vstr	s15, [r4, #12]
  ai_cmd->drible_power = (float)data[11] / 20;
 80017a4:	7af3      	ldrb	r3, [r6, #11]
 80017a6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800190c <parseRxCmd+0x284>
  ai_cmd->global_ball_position[0] = (float)two_to_int(&data[13]) / 1000;
 80017aa:	ed9f 8a59 	vldr	s16, [pc, #356]	; 8001910 <parseRxCmd+0x288>
  ai_cmd->drible_power = (float)data[11] / 20;
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
  ai_cmd->global_ball_position[0] = (float)two_to_int(&data[13]) / 1000;
 80017b6:	f106 000d 	add.w	r0, r6, #13
  ai_cmd->drible_power = (float)data[11] / 20;
 80017ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017be:	edc4 7a02 	vstr	s15, [r4, #8]
  ai_cmd->allow_local_flags = data[12];
 80017c2:	7b33      	ldrb	r3, [r6, #12]
 80017c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  integ->pre_global_target_position[0] = ai_cmd->global_target_position[0];
 80017c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ca:	623b      	str	r3, [r7, #32]
  integ->pre_global_target_position[1] = ai_cmd->global_target_position[1];
 80017cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  ai_cmd->global_ball_position[0] = (float)two_to_int(&data[13]) / 1000;
 80017d0:	f004 fdc6 	bl	8006360 <two_to_int>
 80017d4:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd->global_ball_position[1] = (float)two_to_int(&data[15]) / 1000;
 80017d8:	f106 000f 	add.w	r0, r6, #15
  ai_cmd->global_ball_position[0] = (float)two_to_int(&data[13]) / 1000;
 80017dc:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
  ai_cmd->global_ball_position[1] = (float)two_to_int(&data[15]) / 1000;
 80017e0:	f004 fdbe 	bl	8006360 <two_to_int>
 80017e4:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd->global_robot_position[0] = (float)two_to_int(&data[17]) / 1000;
 80017e8:	f106 0011 	add.w	r0, r6, #17
  ai_cmd->global_ball_position[1] = (float)two_to_int(&data[15]) / 1000;
 80017ec:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  ai_cmd->global_robot_position[0] = (float)two_to_int(&data[17]) / 1000;
 80017f0:	f004 fdb6 	bl	8006360 <two_to_int>
 80017f4:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd->global_robot_position[1] = (float)two_to_int(&data[19]) / 1000;
 80017f8:	f106 0013 	add.w	r0, r6, #19
  ai_cmd->global_robot_position[0] = (float)two_to_int(&data[17]) / 1000;
 80017fc:	ed84 0a07 	vstr	s0, [r4, #28]
  ai_cmd->global_robot_position[1] = (float)two_to_int(&data[19]) / 1000;
 8001800:	f004 fdae 	bl	8006360 <two_to_int>
 8001804:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd->global_target_position[0] = (float)two_to_int(&data[21]) / 1000;
 8001808:	f106 0015 	add.w	r0, r6, #21
  ai_cmd->global_robot_position[1] = (float)two_to_int(&data[19]) / 1000;
 800180c:	ed84 0a08 	vstr	s0, [r4, #32]
  ai_cmd->global_target_position[0] = (float)two_to_int(&data[21]) / 1000;
 8001810:	f004 fda6 	bl	8006360 <two_to_int>
 8001814:	ee20 0a08 	vmul.f32	s0, s0, s16
  ai_cmd->global_target_position[1] = (float)two_to_int(&data[23]) / 1000;
 8001818:	f106 0017 	add.w	r0, r6, #23
  ai_cmd->global_target_position[0] = (float)two_to_int(&data[21]) / 1000;
 800181c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  ai_cmd->global_target_position[1] = (float)two_to_int(&data[23]) / 1000;
 8001820:	f004 fd9e 	bl	8006360 <two_to_int>
    if (ai_cmd->global_target_position[i] > 30.0 || ai_cmd->global_target_position[i] < -30) {
 8001824:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001828:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
  ai_cmd->global_target_position[1] = (float)two_to_int(&data[23]) / 1000;
 800182c:	ee20 8a08 	vmul.f32	s16, s0, s16
    if (ai_cmd->global_target_position[i] > 30.0 || ai_cmd->global_target_position[i] < -30) {
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  ai_cmd->global_target_position[1] = (float)two_to_int(&data[23]) / 1000;
 8001838:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
    if (ai_cmd->global_target_position[i] > 30.0 || ai_cmd->global_target_position[i] < -30) {
 800183c:	dc4a      	bgt.n	80018d4 <parseRxCmd+0x24c>
 800183e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	d443      	bmi.n	80018d4 <parseRxCmd+0x24c>
 800184c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001914 <parseRxCmd+0x28c>
 8001850:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	dc06      	bgt.n	8001868 <parseRxCmd+0x1e0>
 800185a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001918 <parseRxCmd+0x290>
 800185e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d505      	bpl.n	8001874 <parseRxCmd+0x1ec>
      ai_cmd->global_target_position[i] = 0;
 8001868:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800191c <parseRxCmd+0x294>
 800186c:	eeb0 8a47 	vmov.f32	s16, s14
 8001870:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
  integ->guess_target_speed[0] = (float)(ai_cmd->global_target_position[0] - integ->pre_global_target_position[0]) / con->pre_vision_update_cycle_cnt;
 8001874:	ed95 7a03 	vldr	s14, [r5, #12]
  integ->guess_target_speed[1] = (float)(ai_cmd->global_target_position[1] - integ->pre_global_target_position[1]) / con->pre_vision_update_cycle_cnt;
 8001878:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
  integ->guess_target_speed[0] = (float)(ai_cmd->global_target_position[0] - integ->pre_global_target_position[0]) / con->pre_vision_update_cycle_cnt;
 800187c:	ed97 6a08 	vldr	s12, [r7, #32]
  if ((ai_cmd->allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8001880:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  integ->guess_target_speed[1] = (float)(ai_cmd->global_target_position[1] - integ->pre_global_target_position[1]) / con->pre_vision_update_cycle_cnt;
 8001884:	ee38 8a66 	vsub.f32	s16, s16, s13
  integ->guess_target_speed[0] = (float)(ai_cmd->global_target_position[0] - integ->pre_global_target_position[0]) / con->pre_vision_update_cycle_cnt;
 8001888:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800188c:	ee77 7ac6 	vsub.f32	s15, s15, s12
  if ((ai_cmd->allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8001890:	43d9      	mvns	r1, r3
  integ->guess_target_speed[0] = (float)(ai_cmd->global_target_position[0] - integ->pre_global_target_position[0]) / con->pre_vision_update_cycle_cnt;
 8001892:	eec7 6a87 	vdiv.f32	s13, s15, s14
  if ((ai_cmd->allow_local_flags & FLAG_SSL_VISION_OK) != 0) {
 8001896:	f001 0101 	and.w	r1, r1, #1
 800189a:	2200      	movs	r2, #0
 800189c:	f361 0207 	bfi	r2, r1, #0, #8
  if ((ai_cmd->allow_local_flags & FLAG_ENABLE_LOCAL_VISION) != 0) {
 80018a0:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 80018a4:	f361 220f 	bfi	r2, r1, #8, #8
  if ((ai_cmd->allow_local_flags & FLAG_ENABLE_KEEPER_MODE) != 0) {
 80018a8:	f3c3 0140 	ubfx	r1, r3, #1, #1
 80018ac:	f361 4217 	bfi	r2, r1, #16, #8
  if ((ai_cmd->allow_local_flags & FLAG_STOP_REQUEST) != 0) {
 80018b0:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80018b4:	f361 621f 	bfi	r2, r1, #24, #8
  if ((ai_cmd->allow_local_flags & FLAG_DRIBBLER_UP) != 0) {
 80018b8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80018bc:	64a2      	str	r2, [r4, #72]	; 0x48
 80018be:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  integ->guess_target_speed[1] = (float)(ai_cmd->global_target_position[1] - integ->pre_global_target_position[1]) / con->pre_vision_update_cycle_cnt;
 80018c2:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 80018c6:	ecbd 8b02 	vpop	{d8}
  integ->guess_target_speed[0] = (float)(ai_cmd->global_target_position[0] - integ->pre_global_target_position[0]) / con->pre_vision_update_cycle_cnt;
 80018ca:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
  integ->guess_target_speed[1] = (float)(ai_cmd->global_target_position[1] - integ->pre_global_target_position[1]) / con->pre_vision_update_cycle_cnt;
 80018ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
}
 80018d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ai_cmd->global_target_position[i] = 0;
 80018d4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800191c <parseRxCmd+0x294>
 80018d8:	eef0 7a47 	vmov.f32	s15, s14
 80018dc:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 80018e0:	e7b4      	b.n	800184c <parseRxCmd+0x1c4>
    ai_cmd->kick_power = (float)data[10] / 20;
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800190c <parseRxCmd+0x284>
 80018ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ai_cmd->chip_en = false;
 80018ee:	2300      	movs	r3, #0
    ai_cmd->kick_power = (float)data[10] / 20;
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
    ai_cmd->chip_en = false;
 80018f4:	7423      	strb	r3, [r4, #16]
    ai_cmd->kick_power = (float)data[10] / 20;
 80018f6:	edc4 7a03 	vstr	s15, [r4, #12]
    ai_cmd->chip_en = false;
 80018fa:	e753      	b.n	80017a4 <parseRxCmd+0x11c>
 80018fc:	f3af 8000 	nop.w
 8001900:	54442d18 	.word	0x54442d18
 8001904:	400921fb 	.word	0x400921fb
 8001908:	447a0000 	.word	0x447a0000
 800190c:	3d4ccccd 	.word	0x3d4ccccd
 8001910:	3a83126f 	.word	0x3a83126f
 8001914:	46ea5fff 	.word	0x46ea5fff
 8001918:	c6ea5fff 	.word	0xc6ea5fff
 800191c:	00000000 	.word	0x00000000

08001920 <sendRobotInfo>:

void sendRobotInfo(can_raw_t * can_raw, system_t * sys, imu_t * imu, omni_t * omni, mouse_t * mouse, ai_cmd_t * ai_cmd, connection_t * con)
{
 8001920:	b470      	push	{r4, r5, r6}
 8001922:	9d05      	ldr	r5, [sp, #20]
  ring_counter = con->check_ver;
  char * temp;

  static uint8_t senddata[64];

  senddata[0] = 0xAB;
 8001924:	4c86      	ldr	r4, [pc, #536]	; (8001b40 <sendRobotInfo+0x220>)
  ring_counter = con->check_ver;
 8001926:	78ee      	ldrb	r6, [r5, #3]
  senddata[1] = 0xEA;
  senddata[2] = 10;
  senddata[3] = ring_counter;
 8001928:	70e6      	strb	r6, [r4, #3]
  senddata[0] = 0xAB;
 800192a:	f64e 26ab 	movw	r6, #60075	; 0xeaab
 800192e:	8026      	strh	r6, [r4, #0]
  senddata[2] = 10;
 8001930:	260a      	movs	r6, #10
 8001932:	70a6      	strb	r6, [r4, #2]
  temp = (char *)&imu->yaw_angle;
  senddata[4] = temp[0];
 8001934:	7816      	ldrb	r6, [r2, #0]
 8001936:	7126      	strb	r6, [r4, #4]
  senddata[5] = temp[1];
 8001938:	7856      	ldrb	r6, [r2, #1]
 800193a:	7166      	strb	r6, [r4, #5]
  senddata[10] = temp[2];
  senddata[11] = temp[3];
  senddata[12] = can_raw->ball_detection[0];
  senddata[13] = can_raw->ball_detection[1];
  senddata[14] = can_raw->ball_detection[2];
  senddata[15] = sys->kick_state / 10;
 800193c:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
 8001940:	4e80      	ldr	r6, [pc, #512]	; (8001b44 <sendRobotInfo+0x224>)
 8001942:	fba6 6c0c 	umull	r6, ip, r6, ip
  senddata[6] = temp[2];
 8001946:	7896      	ldrb	r6, [r2, #2]
 8001948:	71a6      	strb	r6, [r4, #6]
  senddata[7] = temp[3];
 800194a:	78d6      	ldrb	r6, [r2, #3]
 800194c:	71e6      	strb	r6, [r4, #7]
  senddata[8] = temp[0];
 800194e:	f890 6044 	ldrb.w	r6, [r0, #68]	; 0x44
 8001952:	7226      	strb	r6, [r4, #8]
  senddata[9] = temp[1];
 8001954:	f890 6045 	ldrb.w	r6, [r0, #69]	; 0x45
 8001958:	7266      	strb	r6, [r4, #9]
  senddata[10] = temp[2];
 800195a:	f890 6046 	ldrb.w	r6, [r0, #70]	; 0x46
 800195e:	72a6      	strb	r6, [r4, #10]
  senddata[11] = temp[3];
 8001960:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
 8001964:	72e6      	strb	r6, [r4, #11]
  senddata[14] = can_raw->ball_detection[2];
 8001966:	f890 607e 	ldrb.w	r6, [r0, #126]	; 0x7e
 800196a:	73a6      	strb	r6, [r4, #14]
  senddata[15] = sys->kick_state / 10;
 800196c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
  senddata[12] = can_raw->ball_detection[0];
 8001970:	f8b0 607c 	ldrh.w	r6, [r0, #124]	; 0x7c
  senddata[15] = sys->kick_state / 10;
 8001974:	f884 c00f 	strb.w	ip, [r4, #15]
  senddata[12] = can_raw->ball_detection[0];
 8001978:	81a6      	strh	r6, [r4, #12]

  senddata[16] = (uint8_t)(sys->error_id & 0xFF);
 800197a:	884e      	ldrh	r6, [r1, #2]
 800197c:	7426      	strb	r6, [r4, #16]
  senddata[17] = (uint8_t)((sys->error_id >> 8) & 0xFF);
 800197e:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8001982:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8001986:	f884 c011 	strb.w	ip, [r4, #17]
  senddata[18] = (uint8_t)(sys->error_info & 0xFF);
 800198a:	888e      	ldrh	r6, [r1, #4]
 800198c:	74a6      	strb	r6, [r4, #18]
  senddata[19] = (uint8_t)((sys->error_info >> 8) & 0xFF);
 800198e:	f8b1 c004 	ldrh.w	ip, [r1, #4]
  senddata[20] = temp[0];
  senddata[21] = temp[1];
  senddata[22] = temp[2];
  senddata[23] = temp[3];

  senddata[24] = (uint8_t)(can_raw->current[0] * 10);
 8001992:	ed90 6a1a 	vldr	s12, [r0, #104]	; 0x68
  senddata[25] = (uint8_t)(can_raw->current[1] * 10);
 8001996:	edd0 6a1b 	vldr	s13, [r0, #108]	; 0x6c
  senddata[26] = (uint8_t)(can_raw->current[2] * 10);
 800199a:	ed90 7a1c 	vldr	s14, [r0, #112]	; 0x70
  senddata[27] = (uint8_t)(can_raw->current[3] * 10);
 800199e:	edd0 7a1d 	vldr	s15, [r0, #116]	; 0x74

  senddata[28] = can_raw->ball_detection[3];

  senddata[29] = (uint8_t)can_raw->temperature[0];
 80019a2:	ed90 3a13 	vldr	s6, [r0, #76]	; 0x4c
  senddata[30] = (uint8_t)can_raw->temperature[1];
 80019a6:	edd0 3a14 	vldr	s7, [r0, #80]	; 0x50
  senddata[31] = (uint8_t)can_raw->temperature[2];
 80019aa:	ed90 4a15 	vldr	s8, [r0, #84]	; 0x54
  senddata[32] = (uint8_t)can_raw->temperature[3];
 80019ae:	edd0 4a16 	vldr	s9, [r0, #88]	; 0x58
  senddata[33] = (uint8_t)can_raw->temperature[4];
 80019b2:	ed90 5a17 	vldr	s10, [r0, #92]	; 0x5c
  senddata[19] = (uint8_t)((sys->error_info >> 8) & 0xFF);
 80019b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80019ba:	f884 c013 	strb.w	ip, [r4, #19]
  senddata[20] = temp[0];
 80019be:	7a0e      	ldrb	r6, [r1, #8]
 80019c0:	7526      	strb	r6, [r4, #20]
  senddata[21] = temp[1];
 80019c2:	7a4e      	ldrb	r6, [r1, #9]
 80019c4:	7566      	strb	r6, [r4, #21]
  senddata[24] = (uint8_t)(can_raw->current[0] * 10);
 80019c6:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 80019ca:	ee26 6a25 	vmul.f32	s12, s12, s11
  senddata[22] = temp[2];
 80019ce:	7a8e      	ldrb	r6, [r1, #10]
 80019d0:	75a6      	strb	r6, [r4, #22]
  senddata[25] = (uint8_t)(can_raw->current[1] * 10);
 80019d2:	ee66 6aa5 	vmul.f32	s13, s13, s11
  senddata[24] = (uint8_t)(can_raw->current[0] * 10);
 80019d6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
  senddata[23] = temp[3];
 80019da:	7ac9      	ldrb	r1, [r1, #11]
 80019dc:	75e1      	strb	r1, [r4, #23]
  senddata[26] = (uint8_t)(can_raw->current[2] * 10);
 80019de:	ee27 7a25 	vmul.f32	s14, s14, s11
  senddata[24] = (uint8_t)(can_raw->current[0] * 10);
 80019e2:	ee16 1a10 	vmov	r1, s12
  senddata[25] = (uint8_t)(can_raw->current[1] * 10);
 80019e6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  senddata[24] = (uint8_t)(can_raw->current[0] * 10);
 80019ea:	7621      	strb	r1, [r4, #24]
  senddata[26] = (uint8_t)(can_raw->current[2] * 10);
 80019ec:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  senddata[25] = (uint8_t)(can_raw->current[1] * 10);
 80019f0:	ee16 1a90 	vmov	r1, s13
  senddata[27] = (uint8_t)(can_raw->current[3] * 10);
 80019f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
  senddata[25] = (uint8_t)(can_raw->current[1] * 10);
 80019f8:	7661      	strb	r1, [r4, #25]
  senddata[27] = (uint8_t)(can_raw->current[3] * 10);
 80019fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  senddata[26] = (uint8_t)(can_raw->current[2] * 10);
 80019fe:	ee17 1a10 	vmov	r1, s14
 8001a02:	76a1      	strb	r1, [r4, #26]
  senddata[27] = (uint8_t)(can_raw->current[3] * 10);
 8001a04:	ee17 1a90 	vmov	r1, s15
  senddata[29] = (uint8_t)can_raw->temperature[0];
 8001a08:	eefc 7ac3 	vcvt.u32.f32	s15, s6
  senddata[27] = (uint8_t)(can_raw->current[3] * 10);
 8001a0c:	76e1      	strb	r1, [r4, #27]
  senddata[29] = (uint8_t)can_raw->temperature[0];
 8001a0e:	ee17 1a90 	vmov	r1, s15
  senddata[30] = (uint8_t)can_raw->temperature[1];
 8001a12:	eefc 7ae3 	vcvt.u32.f32	s15, s7
  senddata[29] = (uint8_t)can_raw->temperature[0];
 8001a16:	7761      	strb	r1, [r4, #29]
  senddata[30] = (uint8_t)can_raw->temperature[1];
 8001a18:	ee17 1a90 	vmov	r1, s15
  senddata[31] = (uint8_t)can_raw->temperature[2];
 8001a1c:	eefc 7ac4 	vcvt.u32.f32	s15, s8
  senddata[30] = (uint8_t)can_raw->temperature[1];
 8001a20:	77a1      	strb	r1, [r4, #30]
  senddata[31] = (uint8_t)can_raw->temperature[2];
 8001a22:	ee17 1a90 	vmov	r1, s15
  senddata[32] = (uint8_t)can_raw->temperature[3];
 8001a26:	eefc 7ae4 	vcvt.u32.f32	s15, s9
  senddata[31] = (uint8_t)can_raw->temperature[2];
 8001a2a:	77e1      	strb	r1, [r4, #31]
  senddata[32] = (uint8_t)can_raw->temperature[3];
 8001a2c:	ee17 1a90 	vmov	r1, s15
  senddata[33] = (uint8_t)can_raw->temperature[4];
 8001a30:	eefc 7ac5 	vcvt.u32.f32	s15, s10
  senddata[32] = (uint8_t)can_raw->temperature[3];
 8001a34:	f884 1020 	strb.w	r1, [r4, #32]
  senddata[33] = (uint8_t)can_raw->temperature[4];
 8001a38:	ee17 1a90 	vmov	r1, s15
 8001a3c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
  senddata[28] = can_raw->ball_detection[3];
 8001a40:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
 8001a44:	7721      	strb	r1, [r4, #28]
  senddata[34] = (uint8_t)can_raw->temperature[5];
 8001a46:	ed90 7a18 	vldr	s14, [r0, #96]	; 0x60
  senddata[35] = (uint8_t)can_raw->temperature[6];
 8001a4a:	edd0 7a19 	vldr	s15, [r0, #100]	; 0x64
  senddata[34] = (uint8_t)can_raw->temperature[5];
 8001a4e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  senddata[35] = (uint8_t)can_raw->temperature[6];
 8001a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  senddata[34] = (uint8_t)can_raw->temperature[5];
 8001a56:	ee17 1a10 	vmov	r1, s14
 8001a5a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
  senddata[35] = (uint8_t)can_raw->temperature[6];
 8001a5e:	ee17 1a90 	vmov	r1, s15
 8001a62:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23

  msg.data.diff_angle = imu->yaw_angle - ai_cmd->global_vision_theta;
 8001a66:	edd2 7a00 	vldr	s15, [r2]
 8001a6a:	9a04      	ldr	r2, [sp, #16]
  senddata[36] = temp[0];
  senddata[37] = temp[1];
  senddata[38] = temp[2];
  senddata[39] = temp[3];
  temp = (char *)&(can_raw->power_voltage[6]);
  senddata[40] = temp[0];
 8001a6c:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
  msg.data.diff_angle = imu->yaw_angle - ai_cmd->global_vision_theta;
 8001a70:	ed92 7a01 	vldr	s14, [r2, #4]
  senddata[40] = temp[0];
 8001a74:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  senddata[36] = temp[0];
 8001a78:	ee77 7ac7 	vsub.f32	s15, s15, s14
  senddata[41] = temp[1];
 8001a7c:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8001a80:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  senddata[36] = temp[0];
 8001a84:	ee17 2a90 	vmov	r2, s15
  senddata[42] = temp[2];
 8001a88:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
 8001a8c:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  senddata[43] = temp[3];
 8001a90:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8001a94:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
  senddata[37] = temp[1];
 8001a98:	f3c2 2107 	ubfx	r1, r2, #8, #8
  senddata[36] = temp[0];
 8001a9c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  senddata[37] = temp[1];
 8001aa0:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
  senddata[38] = temp[2];
 8001aa4:	f3c2 4107 	ubfx	r1, r2, #16, #8
  senddata[39] = temp[3];
 8001aa8:	f3c2 6207 	ubfx	r2, r2, #24, #8
  senddata[38] = temp[2];
 8001aac:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
  senddata[39] = temp[3];
 8001ab0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  temp = (char *)&omni->odom[0];
  senddata[44] = temp[0];
 8001ab4:	7e1a      	ldrb	r2, [r3, #24]
 8001ab6:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  senddata[45] = temp[1];
 8001aba:	7e5a      	ldrb	r2, [r3, #25]
 8001abc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  senddata[46] = temp[2];
 8001ac0:	7e9a      	ldrb	r2, [r3, #26]
 8001ac2:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  senddata[47] = temp[3];
 8001ac6:	7eda      	ldrb	r2, [r3, #27]
 8001ac8:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
  temp = (char *)&omni->odom[1];
  senddata[48] = temp[0];
 8001acc:	7f1a      	ldrb	r2, [r3, #28]
 8001ace:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  senddata[49] = temp[1];
 8001ad2:	7f5a      	ldrb	r2, [r3, #29]
 8001ad4:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  senddata[50] = temp[2];
 8001ad8:	7f9a      	ldrb	r2, [r3, #30]
 8001ada:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
  senddata[51] = temp[3];
 8001ade:	7fda      	ldrb	r2, [r3, #31]
 8001ae0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  temp = (char *)&omni->odom_speed[0];
  //temp = (char *)&integ.vision_based_position[0];
  senddata[52] = temp[0];
 8001ae4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001ae8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  senddata[53] = temp[1];
 8001aec:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001af0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  senddata[54] = temp[2];
 8001af4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8001af8:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
  senddata[55] = temp[3];
 8001afc:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8001b00:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
  temp = (char *)&omni->odom_speed[1];
  //temp = (char *)&integ.vision_based_position[1];
  senddata[56] = temp[0];
 8001b04:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001b08:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  senddata[57] = temp[1];
 8001b0c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001b10:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  senddata[58] = temp[2];
 8001b14:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8001b18:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  senddata[59] = temp[3];
 8001b1c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001b20:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  senddata[60] = con->check_ver;
 8001b24:	78e8      	ldrb	r0, [r5, #3]
 8001b26:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  senddata[61] = 0;
 8001b2a:	2300      	movs	r3, #0
  senddata[62] = 0;
  senddata[63] = 0;

  HAL_UART_Transmit_DMA(&huart2, senddata, sizeof(senddata));
 8001b2c:	4621      	mov	r1, r4
  senddata[61] = 0;
 8001b2e:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
  senddata[63] = 0;
 8001b32:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_UART_Transmit_DMA(&huart2, senddata, sizeof(senddata));
 8001b36:	4804      	ldr	r0, [pc, #16]	; (8001b48 <sendRobotInfo+0x228>)
 8001b38:	bc70      	pop	{r4, r5, r6}
  HAL_UART_Transmit_DMA(&huart2, senddata, sizeof(senddata));
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	f008 b8c4 	b.w	8009cc8 <HAL_UART_Transmit_DMA>
 8001b40:	20000474 	.word	0x20000474
 8001b44:	cccccccd 	.word	0xcccccccd
 8001b48:	20000ea0 	.word	0x20000ea0
 8001b4c:	00000000 	.word	0x00000000

08001b50 <can1_init_ibis>:
FDCAN_TxHeaderTypeDef TxHeader;
FDCAN_FilterTypeDef sFilterConfig;

// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef * handler)
{
 8001b50:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 8001b52:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001ba0 <can1_init_ibis+0x50>
{
 8001b56:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b58:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001b5a:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b5c:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001b5e:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001b60:	4811      	ldr	r0, [pc, #68]	; (8001ba8 <can1_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001b62:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001b64:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 8001b66:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 8001b6a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001b6e:	f005 fdad 	bl	80076cc <HAL_FDCAN_ConfigFilter>
 8001b72:	b930      	cbnz	r0, 8001b82 <can1_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <can1_init_ibis+0x58>)
 8001b76:	f005 fddb 	bl	8007730 <HAL_FDCAN_Start>
 8001b7a:	b948      	cbnz	r0, 8001b90 <can1_init_ibis+0x40>
    Error_Handler();
  }
}
 8001b7c:	b007      	add	sp, #28
 8001b7e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001b82:	f002 f9b7 	bl	8003ef4 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001b86:	4808      	ldr	r0, [pc, #32]	; (8001ba8 <can1_init_ibis+0x58>)
 8001b88:	f005 fdd2 	bl	8007730 <HAL_FDCAN_Start>
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d0f5      	beq.n	8001b7c <can1_init_ibis+0x2c>
    Error_Handler();
 8001b90:	f002 f9b0 	bl	8003ef4 <Error_Handler>
}
 8001b94:	b007      	add	sp, #28
 8001b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w
	...
 8001ba8:	200004dc 	.word	0x200004dc

08001bac <can1_send>:

void can1_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <can1_send+0x38>)
{
 8001bae:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001bb0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001bba:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001bbe:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001bc2:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 8001bc6:	4c08      	ldr	r4, [pc, #32]	; (8001be8 <can1_send+0x3c>)
  TxHeader.MessageMarker = 0;
 8001bc8:	621d      	str	r5, [r3, #32]
{
 8001bca:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f005 feb1 	bl	8007934 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001bd2:	2803      	cmp	r0, #3
 8001bd4:	d1fa      	bne.n	8001bcc <can1_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001bd6:	4632      	mov	r2, r6
 8001bd8:	4902      	ldr	r1, [pc, #8]	; (8001be4 <can1_send+0x38>)
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <can1_send+0x3c>)
}
 8001bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001be0:	f005 bdbe 	b.w	8007760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001be4:	200004b4 	.word	0x200004b4
 8001be8:	200004dc 	.word	0x200004dc
 8001bec:	00000000 	.word	0x00000000

08001bf0 <can2_init_ibis>:

void can2_init_ibis(FDCAN_HandleTypeDef * handler)
{
 8001bf0:	b500      	push	{lr}
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
  sFilterConfig.FilterIndex = 0;
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
  sFilterConfig.FilterID1 = 0x000;
 8001bf2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8001c40 <can2_init_ibis+0x50>
{
 8001bf6:	b087      	sub	sp, #28
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001bf8:	2102      	movs	r1, #2
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001bfa:	2300      	movs	r3, #0
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001bfc:	2201      	movs	r2, #1
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001bfe:	9102      	str	r1, [sp, #8]
  sFilterConfig.FilterID2 = 0x000;
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001c00:	4811      	ldr	r0, [pc, #68]	; (8001c48 <can2_init_ibis+0x58>)
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001c02:	9203      	str	r2, [sp, #12]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001c04:	4669      	mov	r1, sp
  sFilterConfig.FilterIndex = 0;
 8001c06:	e9cd 3300 	strd	r3, r3, [sp]
  sFilterConfig.FilterID1 = 0x000;
 8001c0a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK) {
 8001c0e:	f005 fd5d 	bl	80076cc <HAL_FDCAN_ConfigFilter>
 8001c12:	b930      	cbnz	r0, 8001c22 <can2_init_ibis+0x32>
    Error_Handler();
  }
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <can2_init_ibis+0x58>)
 8001c16:	f005 fd8b 	bl	8007730 <HAL_FDCAN_Start>
 8001c1a:	b948      	cbnz	r0, 8001c30 <can2_init_ibis+0x40>
    Error_Handler();
  }
}
 8001c1c:	b007      	add	sp, #28
 8001c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001c22:	f002 f967 	bl	8003ef4 <Error_Handler>
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK) {
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <can2_init_ibis+0x58>)
 8001c28:	f005 fd82 	bl	8007730 <HAL_FDCAN_Start>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d0f5      	beq.n	8001c1c <can2_init_ibis+0x2c>
    Error_Handler();
 8001c30:	f002 f960 	bl	8003ef4 <Error_Handler>
}
 8001c34:	b007      	add	sp, #28
 8001c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
	...
 8001c48:	20000540 	.word	0x20000540

08001c4c <can2_send>:

void can2_send(int id, uint8_t senddata[])
{
  TxHeader.Identifier = id;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <can2_send+0x38>)
{
 8001c4e:	b570      	push	{r4, r5, r6, lr}
  TxHeader.IdType = FDCAN_STANDARD_ID;
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001c50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8001c54:	2500      	movs	r5, #0
 8001c56:	e9c3 0500 	strd	r0, r5, [r3]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001c5a:	e9c3 5202 	strd	r5, r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001c5e:	e9c3 5504 	strd	r5, r5, [r3, #16]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001c62:	e9c3 5506 	strd	r5, r5, [r3, #24]
  TxHeader.MessageMarker = 0;

  /* Request transmission */
  //if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) == 3) return;
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 8001c66:	4c08      	ldr	r4, [pc, #32]	; (8001c88 <can2_send+0x3c>)
  TxHeader.MessageMarker = 0;
 8001c68:	621d      	str	r5, [r3, #32]
{
 8001c6a:	460e      	mov	r6, r1
  while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f005 fe61 	bl	8007934 <HAL_FDCAN_GetTxFifoFreeLevel>
 8001c72:	2803      	cmp	r0, #3
 8001c74:	d1fa      	bne.n	8001c6c <can2_send+0x20>
  }
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001c76:	4632      	mov	r2, r6
 8001c78:	4902      	ldr	r1, [pc, #8]	; (8001c84 <can2_send+0x38>)
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <can2_send+0x3c>)
}
 8001c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001c80:	f005 bd6e 	b.w	8007760 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001c84:	200004b4 	.word	0x200004b4
 8001c88:	20000540 	.word	0x20000540
 8001c8c:	00000000 	.word	0x00000000

08001c90 <HAL_FDCAN_RxFifo0Callback>:
{
  uint8_t RxData[CAN_RX_DATA_SIZE];
  FDCAN_RxHeaderTypeDef RxHeader;
  uint16_t rx_can_id;

  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8001c90:	07cb      	lsls	r3, r1, #31
 8001c92:	d400      	bmi.n	8001c96 <HAL_FDCAN_RxFifo0Callback+0x6>
 8001c94:	4770      	bx	lr
{
 8001c96:	b530      	push	{r4, r5, lr}
 8001c98:	b08d      	sub	sp, #52	; 0x34
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001c9a:	466b      	mov	r3, sp
 8001c9c:	aa02      	add	r2, sp, #8
 8001c9e:	2140      	movs	r1, #64	; 0x40
 8001ca0:	f005 fdc4 	bl	800782c <HAL_FDCAN_GetRxMessage>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d134      	bne.n	8001d12 <HAL_FDCAN_RxFifo0Callback+0x82>
      Error_Handler();
    }
    rx_can_id = RxHeader.Identifier;
 8001ca8:	9b02      	ldr	r3, [sp, #8]
    switch (rx_can_id) {
 8001caa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cae:	4213      	tst	r3, r2
 8001cb0:	b29d      	uxth	r5, r3
 8001cb2:	f000 80a6 	beq.w	8001e02 <HAL_FDCAN_RxFifo0Callback+0x172>
 8001cb6:	f5a5 7400 	sub.w	r4, r5, #512	; 0x200
 8001cba:	2c41      	cmp	r4, #65	; 0x41
 8001cbc:	d827      	bhi.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
 8001cbe:	2c41      	cmp	r4, #65	; 0x41
 8001cc0:	d825      	bhi.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
 8001cc2:	e8df f004 	tbb	[pc, r4]
 8001cc6:	4a4a      	.short	0x4a4a
 8001cc8:	24704a4a 	.word	0x24704a4a
 8001ccc:	24242424 	.word	0x24242424
 8001cd0:	24242424 	.word	0x24242424
 8001cd4:	29292424 	.word	0x29292424
 8001cd8:	29292929 	.word	0x29292929
 8001cdc:	24242429 	.word	0x24242429
 8001ce0:	24242424 	.word	0x24242424
 8001ce4:	3f3f2424 	.word	0x3f3f2424
 8001ce8:	24843f3f 	.word	0x24843f3f
 8001cec:	24242424 	.word	0x24242424
 8001cf0:	24242424 	.word	0x24242424
 8001cf4:	34342424 	.word	0x34342424
 8001cf8:	24343434 	.word	0x24343434
 8001cfc:	24242424 	.word	0x24242424
 8001d00:	24242424 	.word	0x24242424
 8001d04:	77212424 	.word	0x77212424
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
        break;

      // can_raw.ball_detection
      case 0x240:
        can_raw.ball_detection[0] = RxData[0];
 8001d08:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001d0a:	9a00      	ldr	r2, [sp, #0]
 8001d0c:	67da      	str	r2, [r3, #124]	; 0x7c
      case 0x502:
      case 0x503:
        break;
    }
  }
}
 8001d0e:	b00d      	add	sp, #52	; 0x34
 8001d10:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001d12:	f002 f8ef 	bl	8003ef4 <Error_Handler>
 8001d16:	e7c7      	b.n	8001ca8 <HAL_FDCAN_RxFifo0Callback+0x18>
        can_raw.power_voltage[rx_can_id - 0x210] = uchar4_to_float(RxData);
 8001d18:	4668      	mov	r0, sp
 8001d1a:	f004 f9f5 	bl	8006108 <uchar4_to_float>
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001d20:	f5a5 7501 	sub.w	r5, r5, #516	; 0x204
 8001d24:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001d28:	ed83 0a00 	vstr	s0, [r3]
        break;
 8001d2c:	e7ef      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.current[rx_can_id - 0x230] = uchar4_to_float(RxData);
 8001d2e:	4668      	mov	r0, sp
 8001d30:	f004 f9ea 	bl	8006108 <uchar4_to_float>
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001d36:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 8001d3a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001d3e:	ed83 0a00 	vstr	s0, [r3]
        break;
 8001d42:	e7e4      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[rx_can_id - 0x220] = uchar4_to_float(RxData);
 8001d44:	4668      	mov	r0, sp
 8001d46:	f004 f9df 	bl	8006108 <uchar4_to_float>
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001d4c:	f2a5 250e 	subw	r5, r5, #526	; 0x20e
 8001d50:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001d54:	ed83 0a01 	vstr	s0, [r3, #4]
        break;
 8001d58:	e7d9      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8001d5a:	a801      	add	r0, sp, #4
 8001d5c:	f004 f9d4 	bl	8006108 <uchar4_to_float>
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8001d62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8001d66:	4668      	mov	r0, sp
        motor.enc_angle[rx_can_id - 0x200] = uchar4_to_float(&RxData[4]);
 8001d68:	ed83 0a00 	vstr	s0, [r3]
        can_raw.motor_feedback[rx_can_id - 0x200] = uchar4_to_float(RxData);
 8001d6c:	f004 f9cc 	bl	8006108 <uchar4_to_float>
 8001d70:	4c2d      	ldr	r4, [pc, #180]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001d72:	f5a5 73ff 	sub.w	r3, r5, #510	; 0x1fe
 8001d76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d7a:	ed83 0a00 	vstr	s0, [r3]
        can_raw.motor_feedback_velocity[rx_can_id - 0x200] = uchar4_to_float(RxData) * OMNI_DIAMETER * M_PI;
 8001d7e:	4668      	mov	r0, sp
 8001d80:	f004 f9c2 	bl	8006108 <uchar4_to_float>
 8001d84:	ee10 0a10 	vmov	r0, s0
 8001d88:	f7fe fc06 	bl	8000598 <__aeabi_f2d>
 8001d8c:	a324      	add	r3, pc, #144	; (adr r3, 8001e20 <HAL_FDCAN_RxFifo0Callback+0x190>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fc59 	bl	8000648 <__aeabi_dmul>
 8001d96:	f7fe ff4f 	bl	8000c38 <__aeabi_d2f>
 8001d9a:	f5a5 75fd 	sub.w	r5, r5, #506	; 0x1fa
 8001d9e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8001da2:	6060      	str	r0, [r4, #4]
        break;
 8001da4:	e7b3      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.motor_feedback_velocity[4] = uchar4_to_float(RxData);
 8001da6:	4668      	mov	r0, sp
 8001da8:	f004 f9ae 	bl	8006108 <uchar4_to_float>
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8001dae:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
        break;
 8001db2:	e7ac      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8001db4:	4c1e      	ldr	r4, [pc, #120]	; (8001e30 <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8001db6:	9a00      	ldr	r2, [sp, #0]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 8001db8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        mouse.raw[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8001dbc:	6222      	str	r2, [r4, #32]
        mouse.quality = (uint16_t)((RxData[5] << 8) | RxData[4]);
 8001dbe:	85a3      	strh	r3, [r4, #44]	; 0x2c
        mouseOdometory();
 8001dc0:	f002 ffd6 	bl	8004d70 <mouseOdometory>
        mouse.loop_cnt_debug = mouse.integral_loop_cnt;
 8001dc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
        mouse.integral_loop_cnt = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
}
 8001dcc:	e79f      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.temperature[4] = RxData[0];  // fet
 8001dce:	f89d 3000 	ldrb.w	r3, [sp]
 8001dd2:	ee06 3a90 	vmov	s13, r3
        can_raw.temperature[5] = RxData[1];  // coil 1
 8001dd6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001dda:	ee07 3a10 	vmov	s14, r3
        can_raw.temperature[6] = RxData[2];  // coil 2
 8001dde:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001de2:	ee07 3a90 	vmov	s15, r3
        can_raw.temperature[4] = RxData[0];  // fet
 8001de6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
        can_raw.temperature[5] = RxData[1];  // coil 1
 8001dec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        can_raw.temperature[6] = RxData[2];  // coil 2
 8001df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
        can_raw.temperature[4] = RxData[0];  // fet
 8001df4:	edc3 6a17 	vstr	s13, [r3, #92]	; 0x5c
        can_raw.temperature[5] = RxData[1];  // coil 1
 8001df8:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
        can_raw.temperature[6] = RxData[2];  // coil 2
 8001dfc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
        break;
 8001e00:	e785      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
        can_raw.error_no[0] = RxData[0];
 8001e02:	9b00      	ldr	r3, [sp, #0]
 8001e04:	4908      	ldr	r1, [pc, #32]	; (8001e28 <HAL_FDCAN_RxFifo0Callback+0x198>)
        sys.error_id = (uint16_t)((RxData[1] << 8) | RxData[0]);
 8001e06:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
        can_raw.error_no[0] = RxData[0];
 8001e08:	600b      	str	r3, [r1, #0]
        sys.error_info = (uint16_t)((RxData[3] << 8) | RxData[2]);
 8001e0a:	0c1a      	lsrs	r2, r3, #16
        sys.error_value = uchar4_to_float(&RxData[4]);
 8001e0c:	a801      	add	r0, sp, #4
        sys.error_id = (uint16_t)((RxData[1] << 8) | RxData[0]);
 8001e0e:	8063      	strh	r3, [r4, #2]
        sys.error_info = (uint16_t)((RxData[3] << 8) | RxData[2]);
 8001e10:	80a2      	strh	r2, [r4, #4]
        sys.error_value = uchar4_to_float(&RxData[4]);
 8001e12:	f004 f979 	bl	8006108 <uchar4_to_float>
        sys.error_flag = true;
 8001e16:	2301      	movs	r3, #1
        sys.error_value = uchar4_to_float(&RxData[4]);
 8001e18:	ed84 0a02 	vstr	s0, [r4, #8]
        sys.error_flag = true;
 8001e1c:	7023      	strb	r3, [r4, #0]
        break;
 8001e1e:	e776      	b.n	8001d0e <HAL_FDCAN_RxFifo0Callback+0x7e>
 8001e20:	ffba038a 	.word	0xffba038a
 8001e24:	3fc684d8 	.word	0x3fc684d8
 8001e28:	200006c8 	.word	0x200006c8
 8001e2c:	20000838 	.word	0x20000838
 8001e30:	20000870 	.word	0x20000870
 8001e34:	20000b30 	.word	0x20000b30

08001e38 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <MX_DMA_Init+0xa0>)
{
 8001e3a:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e3c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e3e:	f040 0004 	orr.w	r0, r0, #4
 8001e42:	6498      	str	r0, [r3, #72]	; 0x48
 8001e44:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 8001e46:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e48:	f004 0404 	and.w	r4, r4, #4
 8001e4c:	9400      	str	r4, [sp, #0]
 8001e4e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e50:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001e52:	f044 0401 	orr.w	r4, r4, #1
 8001e56:	649c      	str	r4, [r3, #72]	; 0x48
 8001e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5a:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e62:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001e64:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e66:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001e68:	f005 f896 	bl	8006f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e6c:	200c      	movs	r0, #12
 8001e6e:	f005 f8d1 	bl	8007014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2109      	movs	r1, #9
 8001e76:	200d      	movs	r0, #13
 8001e78:	f005 f88e 	bl	8006f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e7c:	200d      	movs	r0, #13
 8001e7e:	f005 f8c9 	bl	8007014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	210a      	movs	r1, #10
 8001e86:	200e      	movs	r0, #14
 8001e88:	f005 f886 	bl	8006f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e8c:	200e      	movs	r0, #14
 8001e8e:	f005 f8c1 	bl	8007014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	210b      	movs	r1, #11
 8001e96:	200f      	movs	r0, #15
 8001e98:	f005 f87e 	bl	8006f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e9c:	200f      	movs	r0, #15
 8001e9e:	f005 f8b9 	bl	8007014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 14, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	210e      	movs	r1, #14
 8001ea6:	2010      	movs	r0, #16
 8001ea8:	f005 f876 	bl	8006f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001eac:	2010      	movs	r0, #16
 8001eae:	f005 f8b1 	bl	8007014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 15, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	2011      	movs	r0, #17
 8001eb8:	f005 f86e 	bl	8006f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ebc:	2011      	movs	r0, #17
 8001ebe:	f005 f8a9 	bl	8007014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2060      	movs	r0, #96	; 0x60
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	f005 f866 	bl	8006f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 8001ecc:	2060      	movs	r0, #96	; 0x60

}
 8001ece:	b002      	add	sp, #8
 8001ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 8001ed4:	f005 b89e 	b.w	8007014 <HAL_NVIC_EnableIRQ>
 8001ed8:	40021000 	.word	0x40021000

08001edc <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001edc:	4810      	ldr	r0, [pc, #64]	; (8001f20 <MX_FDCAN1_Init+0x44>)
{
 8001ede:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 8001ee0:	4c10      	ldr	r4, [pc, #64]	; (8001f24 <MX_FDCAN1_Init+0x48>)
 8001ee2:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ee4:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 8001ee6:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001ee8:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001eea:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001eec:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001ef0:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 8001ef2:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ef4:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ef6:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ef8:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001efa:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001efe:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f02:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001f06:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f08:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f0a:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001f0c:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f0e:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f10:	f005 fa5e 	bl	80073d0 <HAL_FDCAN_Init>
 8001f14:	b900      	cbnz	r0, 8001f18 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f16:	bd10      	pop	{r4, pc}
 8001f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001f1c:	f001 bfea 	b.w	8003ef4 <Error_Handler>
 8001f20:	200004dc 	.word	0x200004dc
 8001f24:	40006400 	.word	0x40006400

08001f28 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001f28:	4810      	ldr	r0, [pc, #64]	; (8001f6c <MX_FDCAN2_Init+0x44>)
{
 8001f2a:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001f2c:	4c10      	ldr	r4, [pc, #64]	; (8001f70 <MX_FDCAN2_Init+0x48>)
 8001f2e:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001f30:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 8001f32:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001f34:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001f36:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001f38:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001f3c:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 8001f3e:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001f40:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001f42:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001f44:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f46:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001f4a:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001f4e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001f52:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001f54:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001f56:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001f58:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f5a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001f5c:	f005 fa38 	bl	80073d0 <HAL_FDCAN_Init>
 8001f60:	b900      	cbnz	r0, 8001f64 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001f68:	f001 bfc4 	b.w	8003ef4 <Error_Handler>
 8001f6c:	20000540 	.word	0x20000540
 8001f70:	40006800 	.word	0x40006800
 8001f74:	00000000 	.word	0x00000000

08001f78 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f80:	2254      	movs	r2, #84	; 0x54
 8001f82:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001f88:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001f8c:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8e:	f009 ff93 	bl	800beb8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_FDCAN_MspInit+0x168>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 8001f9a:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_FDCAN_MspInit+0x16c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d047      	beq.n	8002030 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001fa0:	b01e      	add	sp, #120	; 0x78
 8001fa2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fac:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001fae:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001fb0:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb2:	f006 fb4b 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d17f      	bne.n	80020ba <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fba:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <HAL_FDCAN_MspInit+0x170>)
 8001fbc:	6813      	ldr	r3, [r2, #0]
 8001fbe:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fc0:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001fc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001fc4:	d109      	bne.n	8001fda <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_FDCAN_MspInit+0x174>)
 8001fc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001fce:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b44      	ldr	r3, [pc, #272]	; (80020ec <HAL_FDCAN_MspInit+0x174>)
 8001fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fde:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 80020c8 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001fee:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80020d0 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001ffa:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002000:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002004:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f005 fde6 	bl	8007bd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2103      	movs	r1, #3
 8002010:	2015      	movs	r0, #21
 8002012:	f004 ffc1 	bl	8006f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002016:	2015      	movs	r0, #21
 8002018:	f004 fffc 	bl	8007014 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2104      	movs	r1, #4
 8002020:	2016      	movs	r0, #22
 8002022:	f004 ffb9 	bl	8006f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002026:	2016      	movs	r0, #22
 8002028:	f004 fff4 	bl	8007014 <HAL_NVIC_EnableIRQ>
}
 800202c:	b01e      	add	sp, #120	; 0x78
 800202e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002038:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800203a:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800203c:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203e:	f006 fb05 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8002042:	2800      	cmp	r0, #0
 8002044:	d13c      	bne.n	80020c0 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002046:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_FDCAN_MspInit+0x170>)
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800204c:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800204e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002050:	d109      	bne.n	8002066 <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_FDCAN_MspInit+0x174>)
 8002054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002056:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800205a:	659a      	str	r2, [r3, #88]	; 0x58
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	4821      	ldr	r0, [pc, #132]	; (80020f0 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800206c:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 80020d8 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	f042 0202 	orr.w	r2, r2, #2
 8002074:	64da      	str	r2, [r3, #76]	; 0x4c
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002078:	ed8d 7b04 	vstr	d7, [sp, #16]
 800207c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80020d0 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002088:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800208a:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800208e:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f005 fda1 	bl	8007bd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2106      	movs	r1, #6
 800209a:	2056      	movs	r0, #86	; 0x56
 800209c:	f004 ff7c 	bl	8006f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80020a0:	2056      	movs	r0, #86	; 0x56
 80020a2:	f004 ffb7 	bl	8007014 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2107      	movs	r1, #7
 80020aa:	2057      	movs	r0, #87	; 0x57
 80020ac:	f004 ff74 	bl	8006f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80020b0:	2057      	movs	r0, #87	; 0x57
 80020b2:	f004 ffaf 	bl	8007014 <HAL_NVIC_EnableIRQ>
}
 80020b6:	b01e      	add	sp, #120	; 0x78
 80020b8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80020ba:	f001 ff1b 	bl	8003ef4 <Error_Handler>
 80020be:	e77c      	b.n	8001fba <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 80020c0:	f001 ff18 	bl	8003ef4 <Error_Handler>
 80020c4:	e7bf      	b.n	8002046 <HAL_FDCAN_MspInit+0xce>
 80020c6:	bf00      	nop
 80020c8:	00001800 	.word	0x00001800
 80020cc:	00000002 	.word	0x00000002
	...
 80020d8:	00003000 	.word	0x00003000
 80020dc:	00000002 	.word	0x00000002
 80020e0:	40006400 	.word	0x40006400
 80020e4:	40006800 	.word	0x40006800
 80020e8:	200004d8 	.word	0x200004d8
 80020ec:	40021000 	.word	0x40021000
 80020f0:	48000400 	.word	0x48000400

080020f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	2400      	movs	r4, #0
{
 80020f8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fa:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80020fe:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	4b46      	ldr	r3, [pc, #280]	; (800221c <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8002108:	4f45      	ldr	r7, [pc, #276]	; (8002220 <MX_GPIO_Init+0x12c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800210a:	4d46      	ldr	r5, [pc, #280]	; (8002224 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210c:	f042 0204 	orr.w	r2, r2, #4
 8002110:	64da      	str	r2, [r3, #76]	; 0x4c
 8002112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002114:	f002 0204 	and.w	r2, r2, #4
 8002118:	9201      	str	r2, [sp, #4]
 800211a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800211c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	64da      	str	r2, [r3, #76]	; 0x4c
 8002124:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002126:	f002 0220 	and.w	r2, r2, #32
 800212a:	9202      	str	r2, [sp, #8]
 800212c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	64da      	str	r2, [r3, #76]	; 0x4c
 8002136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002138:	f002 0201 	and.w	r2, r2, #1
 800213c:	9203      	str	r2, [sp, #12]
 800213e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002142:	f042 0202 	orr.w	r2, r2, #2
 8002146:	64da      	str	r2, [r3, #76]	; 0x4c
 8002148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800214a:	f002 0202 	and.w	r2, r2, #2
 800214e:	9204      	str	r2, [sp, #16]
 8002150:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002154:	f042 0208 	orr.w	r2, r2, #8
 8002158:	64da      	str	r2, [r3, #76]	; 0x4c
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8002162:	4638      	mov	r0, r7
 8002164:	4622      	mov	r2, r4
 8002166:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800216c:	f005 fe34 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002170:	4622      	mov	r2, r4
 8002172:	f248 0110 	movw	r1, #32784	; 0x8010
 8002176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217a:	f005 fe2d 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800217e:	4622      	mov	r2, r4
 8002180:	4628      	mov	r0, r5
 8002182:	f244 4184 	movw	r1, #17540	; 0x4484
 8002186:	f005 fe27 	bl	8007dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2601      	movs	r6, #1
 800218c:	f246 0321 	movw	r3, #24609	; 0x6021
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002190:	a906      	add	r1, sp, #24
 8002192:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f005 fd1c 	bl	8007bd8 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 80021a2:	f248 0310 	movw	r3, #32784	; 0x8010
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 80021aa:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f005 fd11 	bl	8007bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021b6:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	4638      	mov	r0, r7
 80021ba:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021bc:	2300      	movs	r3, #0
 80021be:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c4:	f005 fd08 	bl	8007bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 80021c8:	f244 4384 	movw	r3, #17540	; 0x4484
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021cc:	a906      	add	r1, sp, #24
 80021ce:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 80021d0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	e9cd 6407 	strd	r6, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f005 fcfe 	bl	8007bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	a906      	add	r1, sp, #24
 80021e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f005 fcf3 	bl	8007bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021f2:	2204      	movs	r2, #4
 80021f4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f6:	a906      	add	r1, sp, #24
 80021f8:	480b      	ldr	r0, [pc, #44]	; (8002228 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002200:	f005 fcea 	bl	8007bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002204:	2260      	movs	r2, #96	; 0x60
 8002206:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002208:	a906      	add	r1, sp, #24
 800220a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800220c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f005 fce1 	bl	8007bd8 <HAL_GPIO_Init>

}
 8002216:	b00d      	add	sp, #52	; 0x34
 8002218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	48000800 	.word	0x48000800
 8002224:	48000400 	.word	0x48000400
 8002228:	48000c00 	.word	0x48000c00

0800222c <ICM20602_init>:
{
  return ICM20602_readByte(ICM20602_WHO_AM_I);  // Should return 0x68
}

void ICM20602_init()
{
 800222c:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 800222e:	4870      	ldr	r0, [pc, #448]	; (80023f0 <ICM20602_init+0x1c4>)
{
 8002230:	b085      	sub	sp, #20
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8002232:	2201      	movs	r2, #1
 8002234:	2120      	movs	r1, #32
 8002236:	f005 fdcf 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2110      	movs	r1, #16
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f005 fdc9 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002246:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 800224a:	216b      	movs	r1, #107	; 0x6b
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800224c:	2301      	movs	r3, #1
 800224e:	aa03      	add	r2, sp, #12
  send_data[0] = reg & 0x7F;
 8002250:	f88d 1008 	strb.w	r1, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002254:	9400      	str	r4, [sp, #0]
 8002256:	a902      	add	r1, sp, #8
 8002258:	4866      	ldr	r0, [pc, #408]	; (80023f4 <ICM20602_init+0x1c8>)
 800225a:	f006 fd11 	bl	8008c80 <HAL_SPI_TransmitReceive>
  send_data[0] = data;
 800225e:	2500      	movs	r5, #0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002260:	2301      	movs	r3, #1
 8002262:	9400      	str	r4, [sp, #0]
 8002264:	aa03      	add	r2, sp, #12
 8002266:	a902      	add	r1, sp, #8
 8002268:	4862      	ldr	r0, [pc, #392]	; (80023f4 <ICM20602_init+0x1c8>)
  send_data[0] = data;
 800226a:	f88d 5008 	strb.w	r5, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800226e:	f006 fd07 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002272:	2201      	movs	r2, #1
 8002274:	2110      	movs	r1, #16
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f005 fdad 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800227e:	462a      	mov	r2, r5
 8002280:	2110      	movs	r1, #16
 8002282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002286:	f005 fda7 	bl	8007dd8 <HAL_GPIO_WritePin>
  send_data[0] = reg & 0x7F;
 800228a:	2319      	movs	r3, #25
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800228c:	9400      	str	r4, [sp, #0]
  send_data[0] = reg & 0x7F;
 800228e:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002292:	aa03      	add	r2, sp, #12
 8002294:	2301      	movs	r3, #1
 8002296:	a902      	add	r1, sp, #8
 8002298:	4856      	ldr	r0, [pc, #344]	; (80023f4 <ICM20602_init+0x1c8>)
 800229a:	f006 fcf1 	bl	8008c80 <HAL_SPI_TransmitReceive>
  send_data[0] = data;
 800229e:	2307      	movs	r3, #7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022a0:	9400      	str	r4, [sp, #0]
  send_data[0] = data;
 80022a2:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022a6:	aa03      	add	r2, sp, #12
 80022a8:	2301      	movs	r3, #1
 80022aa:	a902      	add	r1, sp, #8
 80022ac:	4851      	ldr	r0, [pc, #324]	; (80023f4 <ICM20602_init+0x1c8>)
 80022ae:	f006 fce7 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022b2:	2201      	movs	r2, #1
 80022b4:	2110      	movs	r1, #16
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f005 fd8d 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022be:	462a      	mov	r2, r5
 80022c0:	2110      	movs	r1, #16
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c6:	f005 fd87 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022ca:	2301      	movs	r3, #1
  send_data[0] = reg & 0x7F;
 80022cc:	211a      	movs	r1, #26
  send_data[0] = data;
 80022ce:	461d      	mov	r5, r3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022d0:	aa03      	add	r2, sp, #12
  send_data[0] = reg & 0x7F;
 80022d2:	f88d 1008 	strb.w	r1, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022d6:	9400      	str	r4, [sp, #0]
 80022d8:	a902      	add	r1, sp, #8
 80022da:	4846      	ldr	r0, [pc, #280]	; (80023f4 <ICM20602_init+0x1c8>)
 80022dc:	f006 fcd0 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022e0:	462b      	mov	r3, r5
 80022e2:	9400      	str	r4, [sp, #0]
 80022e4:	a902      	add	r1, sp, #8
 80022e6:	aa03      	add	r2, sp, #12
 80022e8:	4842      	ldr	r0, [pc, #264]	; (80023f4 <ICM20602_init+0x1c8>)
  send_data[0] = data;
 80022ea:	f88d 5008 	strb.w	r5, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80022ee:	f006 fcc7 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022f2:	462a      	mov	r2, r5
 80022f4:	2110      	movs	r1, #16
 80022f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fa:	f005 fd6d 	bl	8007dd8 <HAL_GPIO_WritePin>
  ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);  // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
  ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
  ICM20602_writeByte(ICM20602_CONFIG, 0x01);      //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

  ICM20602_setAccRange(Ascale);
 80022fe:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <ICM20602_init+0x1cc>)
 8002300:	681c      	ldr	r4, [r3, #0]
}

// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
  switch (Ascale) {
 8002302:	2c03      	cmp	r4, #3
 8002304:	d807      	bhi.n	8002316 <ICM20602_init+0xea>
 8002306:	e8df f004 	tbb	[pc, r4]
 800230a:	686d      	.short	0x686d
 800230c:	6302      	.short	0x6302
      break;
    case AFS_4G:
      aRes = 4.0 / 32768.0;
      break;
    case AFS_8G:
      aRes = 8.0 / 32768.0;
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <ICM20602_init+0x1d0>)
 8002310:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002314:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2110      	movs	r1, #16
 800231a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800231e:	f005 fd5b 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002322:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8002326:	221c      	movs	r2, #28
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002328:	2301      	movs	r3, #1
  send_data[0] = reg & 0x7F;
 800232a:	f88d 2008 	strb.w	r2, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800232e:	a902      	add	r1, sp, #8
 8002330:	aa03      	add	r2, sp, #12
 8002332:	4830      	ldr	r0, [pc, #192]	; (80023f4 <ICM20602_init+0x1c8>)
 8002334:	9500      	str	r5, [sp, #0]
 8002336:	f006 fca3 	bl	8008c80 <HAL_SPI_TransmitReceive>
    case AFS_16G:
      aRes = 16.0 / 32768.0;
      break;
  }

  ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale << 3);  // bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 800233a:	00e4      	lsls	r4, r4, #3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800233c:	2301      	movs	r3, #1
 800233e:	aa03      	add	r2, sp, #12
 8002340:	a902      	add	r1, sp, #8
 8002342:	482c      	ldr	r0, [pc, #176]	; (80023f4 <ICM20602_init+0x1c8>)
 8002344:	9500      	str	r5, [sp, #0]
  send_data[0] = data;
 8002346:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800234a:	f006 fc99 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800234e:	2201      	movs	r2, #1
 8002350:	2110      	movs	r1, #16
 8002352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002356:	f005 fd3f 	bl	8007dd8 <HAL_GPIO_WritePin>
  ICM20602_setGyroRange(Gscale);
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <ICM20602_init+0x1d4>)
 800235c:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
  switch (Gscale) {
 800235e:	2c03      	cmp	r4, #3
 8002360:	d806      	bhi.n	8002370 <ICM20602_init+0x144>
 8002362:	e8df f004 	tbb	[pc, r4]
 8002366:	2d31      	.short	0x2d31
 8002368:	2902      	.short	0x2902
      break;
    case GFS_500DPS:
      gRes = 500.0 / 32768.0;
      break;
    case GFS_1000DPS:
      gRes = 1000.0 / 32768.0;
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <ICM20602_init+0x1d8>)
 800236c:	4a26      	ldr	r2, [pc, #152]	; (8002408 <ICM20602_init+0x1dc>)
 800236e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2110      	movs	r1, #16
 8002374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002378:	f005 fd2e 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800237c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  send_data[0] = reg & 0x7F;
 8002380:	221b      	movs	r2, #27
 8002382:	f88d 2008 	strb.w	r2, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002386:	a902      	add	r1, sp, #8
 8002388:	aa03      	add	r2, sp, #12
 800238a:	2301      	movs	r3, #1
 800238c:	9500      	str	r5, [sp, #0]
 800238e:	4819      	ldr	r0, [pc, #100]	; (80023f4 <ICM20602_init+0x1c8>)
 8002390:	f006 fc76 	bl	8008c80 <HAL_SPI_TransmitReceive>
    case GFS_2000DPS:
      gRes = 2000.0 / 32768.0;
      break;
  }

  ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale << 3);  // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8002394:	00e4      	lsls	r4, r4, #3
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002396:	aa03      	add	r2, sp, #12
 8002398:	a902      	add	r1, sp, #8
 800239a:	2301      	movs	r3, #1
 800239c:	9500      	str	r5, [sp, #0]
 800239e:	4815      	ldr	r0, [pc, #84]	; (80023f4 <ICM20602_init+0x1c8>)
  send_data[0] = data;
 80023a0:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80023a4:	f006 fc6c 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2110      	movs	r1, #16
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f005 fd12 	bl	8007dd8 <HAL_GPIO_WritePin>
}
 80023b4:	b005      	add	sp, #20
 80023b6:	bd30      	pop	{r4, r5, pc}
      gRes = 2000.0 / 32768.0;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <ICM20602_init+0x1d8>)
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <ICM20602_init+0x1e0>)
 80023bc:	601a      	str	r2, [r3, #0]
      break;
 80023be:	e7d7      	b.n	8002370 <ICM20602_init+0x144>
      gRes = 500.0 / 32768.0;
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <ICM20602_init+0x1d8>)
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <ICM20602_init+0x1e4>)
 80023c4:	601a      	str	r2, [r3, #0]
      break;
 80023c6:	e7d3      	b.n	8002370 <ICM20602_init+0x144>
      gRes = 250.0 / 32768.0;
 80023c8:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <ICM20602_init+0x1d8>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <ICM20602_init+0x1e8>)
 80023cc:	601a      	str	r2, [r3, #0]
      break;
 80023ce:	e7cf      	b.n	8002370 <ICM20602_init+0x144>
      aRes = 16.0 / 32768.0;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <ICM20602_init+0x1d0>)
 80023d2:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80023d6:	601a      	str	r2, [r3, #0]
      break;
 80023d8:	e79d      	b.n	8002316 <ICM20602_init+0xea>
      aRes = 4.0 / 32768.0;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <ICM20602_init+0x1d0>)
 80023dc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80023e0:	601a      	str	r2, [r3, #0]
      break;
 80023e2:	e798      	b.n	8002316 <ICM20602_init+0xea>
      aRes = 2.0 / 32768.0;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <ICM20602_init+0x1d0>)
 80023e6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80023ea:	601a      	str	r2, [r3, #0]
      break;
 80023ec:	e793      	b.n	8002316 <ICM20602_init+0xea>
 80023ee:	bf00      	nop
 80023f0:	48000800 	.word	0x48000800
 80023f4:	20000b88 	.word	0x20000b88
 80023f8:	200005a4 	.word	0x200005a4
 80023fc:	200005a8 	.word	0x200005a8
 8002400:	20000000 	.word	0x20000000
 8002404:	200005f4 	.word	0x200005f4
 8002408:	3cfa0000 	.word	0x3cfa0000
 800240c:	3d7a0000 	.word	0x3d7a0000
 8002410:	3c7a0000 	.word	0x3c7a0000
 8002414:	3bfa0000 	.word	0x3bfa0000

08002418 <ICM20602_clearAngle>:
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
  pitch_angle = 0.0f;
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <ICM20602_clearAngle+0x10>)
  roll_angle = 0.0f;
 800241a:	4904      	ldr	r1, [pc, #16]	; (800242c <ICM20602_clearAngle+0x14>)
  yaw_angle = 0.0f;
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <ICM20602_clearAngle+0x18>)
  pitch_angle = 0.0f;
 800241e:	2300      	movs	r3, #0
 8002420:	6003      	str	r3, [r0, #0]
  roll_angle = 0.0f;
 8002422:	600b      	str	r3, [r1, #0]
  yaw_angle = 0.0f;
 8002424:	6013      	str	r3, [r2, #0]
}
 8002426:	4770      	bx	lr
 8002428:	20000650 	.word	0x20000650
 800242c:	20000654 	.word	0x20000654
 8002430:	20000658 	.word	0x20000658

08002434 <ICM20602_medianFilter>:

  float tmp;
  int8_t i, j, a, b;

  for (i = 0; i < 3; i++) {
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002434:	4a79      	ldr	r2, [pc, #484]	; (800261c <ICM20602_medianFilter+0x1e8>)
    gyro_mdat[i][1] = gyro_mdat[i][0];
    gyro_mdat[i][0] = gyro[i];
 8002436:	487a      	ldr	r0, [pc, #488]	; (8002620 <ICM20602_medianFilter+0x1ec>)

    acc_mdat[i][2] = acc_mdat[i][1];
 8002438:	4b7a      	ldr	r3, [pc, #488]	; (8002624 <ICM20602_medianFilter+0x1f0>)
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800243a:	ed92 6a01 	vldr	s12, [r2, #4]
    gyro_mdat[i][0] = gyro[i];
 800243e:	edd0 5a00 	vldr	s11, [r0]
    acc_mdat[i][1] = acc_mdat[i][0];
    acc_mdat[i][0] = acc[i];
 8002442:	4979      	ldr	r1, [pc, #484]	; (8002628 <ICM20602_medianFilter+0x1f4>)
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8002444:	ed92 7a00 	vldr	s14, [r2]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002448:	ed93 5a01 	vldr	s10, [r3, #4]
    acc_mdat[i][1] = acc_mdat[i][0];
 800244c:	edd3 7a00 	vldr	s15, [r3]
    acc_mdat[i][0] = acc[i];
 8002450:	edd1 6a00 	vldr	s13, [r1]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002454:	ed82 6a02 	vstr	s12, [r2, #8]

    a = 0;
    b = 2;

    for (j = 2; j >= 0; j--) {
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002458:	eef4 5ac6 	vcmpe.f32	s11, s12
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    gyro_mdat[i][1] = gyro_mdat[i][0];
 8002460:	ed82 7a01 	vstr	s14, [r2, #4]
    gyro_mdat[i][0] = gyro[i];
 8002464:	edc2 5a00 	vstr	s11, [r2]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002468:	ed83 5a02 	vstr	s10, [r3, #8]
    acc_mdat[i][1] = acc_mdat[i][0];
 800246c:	edc3 7a01 	vstr	s15, [r3, #4]
    acc_mdat[i][0] = acc[i];
 8002470:	edc3 6a00 	vstr	s13, [r3]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002474:	dc05      	bgt.n	8002482 <ICM20602_medianFilter+0x4e>
 8002476:	eef0 4a46 	vmov.f32	s9, s12
    gyro_mdat[i][0] = gyro[i];
 800247a:	eeb0 6a65 	vmov.f32	s12, s11
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800247e:	eef0 5a64 	vmov.f32	s11, s9
        tmp = gyro_tmp[a];
        gyro_tmp[a] = gyro_tmp[b];
        gyro_tmp[b] = tmp;
      }
      if (acc_tmp[a] > acc_tmp[b]) {
 8002482:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	d405      	bmi.n	8002498 <ICM20602_medianFilter+0x64>
 800248c:	eef0 4a45 	vmov.f32	s9, s10
    acc_mdat[i][0] = acc[i];
 8002490:	eeb0 5a66 	vmov.f32	s10, s13
    acc_mdat[i][2] = acc_mdat[i][1];
 8002494:	eef0 6a64 	vmov.f32	s13, s9
        acc_tmp[b] = tmp;
      }
      a = j - 1;
      b = j;
    }
    gyro[i] = gyro_tmp[1];
 8002498:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	bf88      	it	hi
 80024a2:	eeb0 7a65 	vmovhi.f32	s14, s11
 80024a6:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 80024ae:	eef4 7ae6 	vcmpe.f32	s15, s13
    gyro[i] = gyro_tmp[1];
 80024b2:	bfa8      	it	ge
 80024b4:	eeb0 6a47 	vmovge.f32	s12, s14
    acc[i] = acc_tmp[1];
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	bf98      	it	ls
 80024be:	eef0 6a67 	vmovls.f32	s13, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80024c2:	edd2 5a04 	vldr	s11, [r2, #16]
    gyro_mdat[i][0] = gyro[i];
 80024c6:	ed90 7a01 	vldr	s14, [r0, #4]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 80024ca:	edd2 3a03 	vldr	s7, [r2, #12]
    acc_mdat[i][2] = acc_mdat[i][1];
 80024ce:	ed93 4a04 	vldr	s8, [r3, #16]
    acc_mdat[i][1] = acc_mdat[i][0];
 80024d2:	edd3 4a03 	vldr	s9, [r3, #12]
    acc_mdat[i][0] = acc[i];
 80024d6:	edd1 7a01 	vldr	s15, [r1, #4]
    gyro[i] = gyro_tmp[1];
 80024da:	ed80 6a00 	vstr	s12, [r0]
    acc[i] = acc_tmp[1];
 80024de:	eef4 6ac5 	vcmpe.f32	s13, s10
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (gyro_tmp[a] > gyro_tmp[b]) {
 80024e6:	eef4 5ac7 	vcmpe.f32	s11, s14
    acc[i] = acc_tmp[1];
 80024ea:	bfb8      	it	lt
 80024ec:	eef0 6a45 	vmovlt.f32	s13, s10
      if (gyro_tmp[a] > gyro_tmp[b]) {
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 80024f4:	edc1 6a00 	vstr	s13, [r1]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80024f8:	edc2 5a05 	vstr	s11, [r2, #20]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 80024fc:	edc2 3a04 	vstr	s7, [r2, #16]
    gyro_mdat[i][0] = gyro[i];
 8002500:	ed82 7a03 	vstr	s14, [r2, #12]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002504:	ed83 4a05 	vstr	s8, [r3, #20]
    acc_mdat[i][1] = acc_mdat[i][0];
 8002508:	edc3 4a04 	vstr	s9, [r3, #16]
    acc_mdat[i][0] = acc[i];
 800250c:	edc3 7a03 	vstr	s15, [r3, #12]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002510:	d405      	bmi.n	800251e <ICM20602_medianFilter+0xea>
 8002512:	eef0 6a65 	vmov.f32	s13, s11
    gyro_mdat[i][0] = gyro[i];
 8002516:	eef0 5a47 	vmov.f32	s11, s14
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800251a:	eeb0 7a66 	vmov.f32	s14, s13
      if (acc_tmp[a] > acc_tmp[b]) {
 800251e:	eef4 7ac4 	vcmpe.f32	s15, s8
 8002522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002526:	dc05      	bgt.n	8002534 <ICM20602_medianFilter+0x100>
 8002528:	eef0 6a44 	vmov.f32	s13, s8
    acc_mdat[i][0] = acc[i];
 800252c:	eeb0 4a67 	vmov.f32	s8, s15
    acc_mdat[i][2] = acc_mdat[i][1];
 8002530:	eef0 7a66 	vmov.f32	s15, s13
    gyro[i] = gyro_tmp[1];
 8002534:	eeb4 7ae3 	vcmpe.f32	s14, s7
 8002538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253c:	bf88      	it	hi
 800253e:	eeb0 7a63 	vmovhi.f32	s14, s7
 8002542:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 800254a:	eef4 7ae4 	vcmpe.f32	s15, s9
    gyro[i] = gyro_tmp[1];
 800254e:	bfb4      	ite	lt
 8002550:	eef0 6a65 	vmovlt.f32	s13, s11
 8002554:	eef0 6a47 	vmovge.f32	s13, s14
    acc[i] = acc_tmp[1];
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	bf8c      	ite	hi
 800255e:	eeb0 7a64 	vmovhi.f32	s14, s9
 8002562:	eeb0 7a67 	vmovls.f32	s14, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 8002566:	edd2 4a07 	vldr	s9, [r2, #28]
    gyro_mdat[i][0] = gyro[i];
 800256a:	edd0 7a02 	vldr	s15, [r0, #8]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 800256e:	edd2 3a06 	vldr	s7, [r2, #24]
    acc_mdat[i][2] = acc_mdat[i][1];
 8002572:	edd3 5a07 	vldr	s11, [r3, #28]
    acc_mdat[i][1] = acc_mdat[i][0];
 8002576:	ed93 6a06 	vldr	s12, [r3, #24]
    acc_mdat[i][0] = acc[i];
 800257a:	ed91 5a02 	vldr	s10, [r1, #8]
    gyro[i] = gyro_tmp[1];
 800257e:	edc0 6a01 	vstr	s13, [r0, #4]
    acc[i] = acc_tmp[1];
 8002582:	eeb4 7ac4 	vcmpe.f32	s14, s8
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      if (gyro_tmp[a] > gyro_tmp[b]) {
 800258a:	eef4 7ae4 	vcmpe.f32	s15, s9
    acc[i] = acc_tmp[1];
 800258e:	bfb8      	it	lt
 8002590:	eeb0 7a44 	vmovlt.f32	s14, s8
      if (gyro_tmp[a] > gyro_tmp[b]) {
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 8002598:	ed81 7a01 	vstr	s14, [r1, #4]
    gyro_mdat[i][2] = gyro_mdat[i][1];
 800259c:	edc2 4a08 	vstr	s9, [r2, #32]
    gyro_mdat[i][1] = gyro_mdat[i][0];
 80025a0:	edc2 3a07 	vstr	s7, [r2, #28]
    gyro_mdat[i][0] = gyro[i];
 80025a4:	edc2 7a06 	vstr	s15, [r2, #24]
    acc_mdat[i][2] = acc_mdat[i][1];
 80025a8:	edc3 5a08 	vstr	s11, [r3, #32]
    acc_mdat[i][1] = acc_mdat[i][0];
 80025ac:	ed83 6a07 	vstr	s12, [r3, #28]
    acc_mdat[i][0] = acc[i];
 80025b0:	ed83 5a06 	vstr	s10, [r3, #24]
      if (gyro_tmp[a] > gyro_tmp[b]) {
 80025b4:	dc05      	bgt.n	80025c2 <ICM20602_medianFilter+0x18e>
 80025b6:	eeb0 7a64 	vmov.f32	s14, s9
    gyro_mdat[i][0] = gyro[i];
 80025ba:	eef0 4a67 	vmov.f32	s9, s15
    gyro_mdat[i][2] = gyro_mdat[i][1];
 80025be:	eef0 7a47 	vmov.f32	s15, s14
      if (acc_tmp[a] > acc_tmp[b]) {
 80025c2:	eef4 5ac5 	vcmpe.f32	s11, s10
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	d405      	bmi.n	80025d8 <ICM20602_medianFilter+0x1a4>
 80025cc:	eeb0 7a65 	vmov.f32	s14, s11
    acc_mdat[i][0] = acc[i];
 80025d0:	eef0 5a45 	vmov.f32	s11, s10
    acc_mdat[i][2] = acc_mdat[i][1];
 80025d4:	eeb0 5a47 	vmov.f32	s10, s14
    gyro[i] = gyro_tmp[1];
 80025d8:	eef4 7ae3 	vcmpe.f32	s15, s7
 80025dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e0:	bf88      	it	hi
 80025e2:	eef0 7a63 	vmovhi.f32	s15, s7
 80025e6:	eef4 7ae4 	vcmpe.f32	s15, s9
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acc[i] = acc_tmp[1];
 80025ee:	eeb4 6ac5 	vcmpe.f32	s12, s10
    gyro[i] = gyro_tmp[1];
 80025f2:	bfb8      	it	lt
 80025f4:	eef0 7a64 	vmovlt.f32	s15, s9
    acc[i] = acc_tmp[1];
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	bf88      	it	hi
 80025fe:	eeb0 6a45 	vmovhi.f32	s12, s10
 8002602:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	bfb8      	it	lt
 800260c:	eeb0 6a65 	vmovlt.f32	s12, s11
    gyro[i] = gyro_tmp[1];
 8002610:	edc0 7a02 	vstr	s15, [r0, #8]
    acc[i] = acc_tmp[1];
 8002614:	ed81 6a02 	vstr	s12, [r1, #8]
  }
}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000610 	.word	0x20000610
 8002620:	200005f8 	.word	0x200005f8
 8002624:	200005c4 	.word	0x200005c4
 8002628:	200005ac 	.word	0x200005ac

0800262c <ICM20602_read_IMU_data>:
{
 800262c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002630:	ed2d 8b02 	vpush	{d8}
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002634:	2200      	movs	r2, #0
{
 8002636:	b084      	sub	sp, #16
 8002638:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800263a:	2110      	movs	r1, #16
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8002640:	eeb0 8a40 	vmov.f32	s16, s0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002644:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002648:	f005 fbc6 	bl	8007dd8 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 800264c:	23c8      	movs	r3, #200	; 0xc8
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800264e:	9500      	str	r5, [sp, #0]
  send_data[0] = reg | 0x80;
 8002650:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002654:	aa03      	add	r2, sp, #12
 8002656:	2301      	movs	r3, #1
 8002658:	a902      	add	r1, sp, #8
 800265a:	4889      	ldr	r0, [pc, #548]	; (8002880 <ICM20602_read_IMU_data+0x254>)
 800265c:	f006 fb10 	bl	8008c80 <HAL_SPI_TransmitReceive>
  send_data[0] = 0x00;
 8002660:	2700      	movs	r7, #0
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002662:	2301      	movs	r3, #1
 8002664:	9500      	str	r5, [sp, #0]
 8002666:	aa03      	add	r2, sp, #12
 8002668:	a902      	add	r1, sp, #8
 800266a:	4885      	ldr	r0, [pc, #532]	; (8002880 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 800266c:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002670:	f006 fb06 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002674:	2110      	movs	r1, #16
 8002676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267a:	2201      	movs	r2, #1
  val = RxBuffer[0];
 800267c:	f89d 400c 	ldrb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002680:	f005 fbaa 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002684:	463a      	mov	r2, r7
 8002686:	2110      	movs	r1, #16
 8002688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268c:	f005 fba4 	bl	8007dd8 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 8002690:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002694:	9500      	str	r5, [sp, #0]
 8002696:	2301      	movs	r3, #1
 8002698:	aa03      	add	r2, sp, #12
 800269a:	a902      	add	r1, sp, #8
 800269c:	4878      	ldr	r0, [pc, #480]	; (8002880 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 800269e:	f88d c008 	strb.w	ip, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80026a2:	f006 faed 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80026a6:	2301      	movs	r3, #1
 80026a8:	9500      	str	r5, [sp, #0]
 80026aa:	aa03      	add	r2, sp, #12
 80026ac:	a902      	add	r1, sp, #8
 80026ae:	4874      	ldr	r0, [pc, #464]	; (8002880 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 80026b0:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80026b4:	f006 fae4 	bl	8008c80 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 80026b8:	f89d 800c 	ldrb.w	r8, [sp, #12]
  return ((HiByte << 8) | LoByte);
 80026bc:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80026c0:	2110      	movs	r1, #16
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c6:	2201      	movs	r2, #1
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80026c8:	b224      	sxth	r4, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80026ca:	f005 fb85 	bl	8007dd8 <HAL_GPIO_WritePin>
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <ICM20602_read_IMU_data+0x258>)
 80026d0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80028bc <ICM20602_read_IMU_data+0x290>
 80026d4:	ed93 7a00 	vldr	s14, [r3]
 80026d8:	ee07 4a90 	vmov	s15, r4
 80026dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  send_data[0] = reg | 0x80;
 80026e0:	24c2      	movs	r4, #194	; 0xc2
  gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80026e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e6:	edc8 7a02 	vstr	s15, [r8, #8]
  ICM20602_medianFilter();
 80026ea:	f7ff fea3 	bl	8002434 <ICM20602_medianFilter>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80026ee:	463a      	mov	r2, r7
 80026f0:	2110      	movs	r1, #16
 80026f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f6:	f005 fb6f 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80026fa:	9500      	str	r5, [sp, #0]
 80026fc:	2301      	movs	r3, #1
 80026fe:	aa03      	add	r2, sp, #12
 8002700:	a902      	add	r1, sp, #8
 8002702:	485f      	ldr	r0, [pc, #380]	; (8002880 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 8002704:	f88d 4008 	strb.w	r4, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002708:	f006 faba 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800270c:	2301      	movs	r3, #1
 800270e:	9500      	str	r5, [sp, #0]
 8002710:	aa03      	add	r2, sp, #12
 8002712:	a902      	add	r1, sp, #8
 8002714:	485a      	ldr	r0, [pc, #360]	; (8002880 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 8002716:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800271a:	f006 fab1 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800271e:	2110      	movs	r1, #16
 8002720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002724:	2201      	movs	r2, #1
  val = RxBuffer[0];
 8002726:	f89d 400c 	ldrb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800272a:	f005 fb55 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800272e:	463a      	mov	r2, r7
 8002730:	2110      	movs	r1, #16
 8002732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002736:	f005 fb4f 	bl	8007dd8 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 800273a:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800273e:	9500      	str	r5, [sp, #0]
 8002740:	2301      	movs	r3, #1
 8002742:	aa03      	add	r2, sp, #12
 8002744:	a902      	add	r1, sp, #8
 8002746:	484e      	ldr	r0, [pc, #312]	; (8002880 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = reg | 0x80;
 8002748:	f88d c008 	strb.w	ip, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800274c:	f006 fa98 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002750:	2301      	movs	r3, #1
 8002752:	9500      	str	r5, [sp, #0]
 8002754:	aa03      	add	r2, sp, #12
 8002756:	a902      	add	r1, sp, #8
 8002758:	4849      	ldr	r0, [pc, #292]	; (8002880 <ICM20602_read_IMU_data+0x254>)
  send_data[0] = 0x00;
 800275a:	f88d 7008 	strb.w	r7, [sp, #8]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800275e:	f006 fa8f 	bl	8008c80 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 8002762:	f89d 500c 	ldrb.w	r5, [sp, #12]
  return ((HiByte << 8) | LoByte);
 8002766:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800276a:	2201      	movs	r2, #1
 800276c:	2110      	movs	r1, #16
 800276e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002772:	b224      	sxth	r4, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002774:	f005 fb30 	bl	8007dd8 <HAL_GPIO_WritePin>
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002778:	ee07 4a90 	vmov	s15, r4

void ICM20602_IMU_compensate(void)
{
  int k;
  for (k = 0; k < 3; k++) {
    acc_comp[k] = acc[k] - acc_off[k];
 800277c:	4942      	ldr	r1, [pc, #264]	; (8002888 <ICM20602_read_IMU_data+0x25c>)
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <ICM20602_read_IMU_data+0x260>)
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002780:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002890 <ICM20602_read_IMU_data+0x264>
    acc_comp[k] = acc[k] - acc_off[k];
 8002784:	edd1 4a00 	vldr	s9, [r1]
 8002788:	edd1 5a02 	vldr	s11, [r1, #8]
 800278c:	ed91 5a01 	vldr	s10, [r1, #4]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 8002790:	4940      	ldr	r1, [pc, #256]	; (8002894 <ICM20602_read_IMU_data+0x268>)
    acc_comp[k] = acc[k] - acc_off[k];
 8002792:	ed93 2a01 	vldr	s4, [r3, #4]
 8002796:	ed93 3a02 	vldr	s6, [r3, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 800279a:	edd8 6a02 	vldr	s13, [r8, #8]
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 800279e:	4a3e      	ldr	r2, [pc, #248]	; (8002898 <ICM20602_read_IMU_data+0x26c>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027a0:	edd1 1a00 	vldr	s3, [r1]
 80027a4:	edd1 2a01 	vldr	s5, [r1, #4]
 80027a8:	edd8 3a00 	vldr	s7, [r8]
 80027ac:	ed98 4a01 	vldr	s8, [r8, #4]
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80027b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b4:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 80027b8:	eea7 6a87 	vfma.f32	s12, s15, s14
    acc_comp[k] = acc[k] - acc_off[k];
 80027bc:	edd3 7a00 	vldr	s15, [r3]
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
 80027c0:	ed92 7a02 	vldr	s14, [r2, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027c4:	4b35      	ldr	r3, [pc, #212]	; (800289c <ICM20602_read_IMU_data+0x270>)
    acc_comp[k] = acc[k] - acc_off[k];
 80027c6:	ee74 4ae7 	vsub.f32	s9, s9, s15
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027ca:	edd1 7a02 	vldr	s15, [r1, #8]
    acc_comp[k] = acc[k] - acc_off[k];
 80027ce:	4934      	ldr	r1, [pc, #208]	; (80028a0 <ICM20602_read_IMU_data+0x274>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
    acc_comp[k] = acc[k] - acc_off[k];
 80027d4:	ee35 5a42 	vsub.f32	s10, s10, s4
 80027d8:	ee75 6ac3 	vsub.f32	s13, s11, s6
 80027dc:	edc1 4a00 	vstr	s9, [r1]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027e0:	ee34 4a62 	vsub.f32	s8, s8, s5
    acc_comp[k] = acc[k] - acc_off[k];
 80027e4:	ed81 5a01 	vstr	s10, [r1, #4]
 80027e8:	edc1 6a02 	vstr	s13, [r1, #8]
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027ec:	ee73 3ae1 	vsub.f32	s7, s7, s3
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80027f0:	492c      	ldr	r1, [pc, #176]	; (80028a4 <ICM20602_read_IMU_data+0x278>)
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027f2:	ed83 4a01 	vstr	s8, [r3, #4]
  return (val + val_prv) * dt / 2.0f;  // trapezoidal formula
 80027f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    gyro_comp[k] = gyro[k] - gyro_off[k];
 80027fa:	edc3 3a00 	vstr	s7, [r3]
 80027fe:	edc3 7a02 	vstr	s15, [r3, #8]
  imu_temperature = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002802:	ed81 6a00 	vstr	s12, [r1]
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 8002806:	ee27 7a08 	vmul.f32	s14, s14, s16
 800280a:	edd6 7a00 	vldr	s15, [r6]
  while (deg < -180.0f) deg += 360.0f;
 800280e:	eddf 5a26 	vldr	s11, [pc, #152]	; 80028a8 <ICM20602_read_IMU_data+0x27c>
  *yaw_input = *yaw_input + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt_sec) * 1;
 8002812:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8002816:	eee7 7a04 	vfma.f32	s15, s14, s8
  while (deg < -180.0f) deg += 360.0f;
 800281a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d50c      	bpl.n	800283e <ICM20602_read_IMU_data+0x212>
 8002824:	ed9f 6a21 	vldr	s12, [pc, #132]	; 80028ac <ICM20602_read_IMU_data+0x280>
 8002828:	eddf 6a21 	vldr	s13, [pc, #132]	; 80028b0 <ICM20602_read_IMU_data+0x284>
 800282c:	eeb0 7a67 	vmov.f32	s14, s15
 8002830:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002838:	ee77 7a86 	vadd.f32	s15, s15, s12
 800283c:	d4f6      	bmi.n	800282c <ICM20602_read_IMU_data+0x200>
  while (deg >= 180.0f) deg -= 360.0f;
 800283e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80028b4 <ICM20602_read_IMU_data+0x288>
 8002842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	db0c      	blt.n	8002866 <ICM20602_read_IMU_data+0x23a>
 800284c:	ed9f 6a17 	vldr	s12, [pc, #92]	; 80028ac <ICM20602_read_IMU_data+0x280>
 8002850:	eddf 6a19 	vldr	s13, [pc, #100]	; 80028b8 <ICM20602_read_IMU_data+0x28c>
 8002854:	eeb0 7a67 	vmov.f32	s14, s15
 8002858:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002864:	daf6      	bge.n	8002854 <ICM20602_read_IMU_data+0x228>
  *yaw_input = ICM20602_normAngle(*yaw_input);
 8002866:	edc6 7a00 	vstr	s15, [r6]
  gyro_prv[0] = gyro_comp[0];
 800286a:	6818      	ldr	r0, [r3, #0]
  gyro_prv[1] = gyro_comp[1];
 800286c:	6859      	ldr	r1, [r3, #4]
  gyro_prv[2] = gyro_comp[2];
 800286e:	689b      	ldr	r3, [r3, #8]
  gyro_prv[0] = gyro_comp[0];
 8002870:	6010      	str	r0, [r2, #0]
  gyro_prv[1] = gyro_comp[1];
 8002872:	6051      	str	r1, [r2, #4]
  gyro_prv[2] = gyro_comp[2];
 8002874:	6093      	str	r3, [r2, #8]
}
 8002876:	b004      	add	sp, #16
 8002878:	ecbd 8b02 	vpop	{d8}
 800287c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002880:	20000b88 	.word	0x20000b88
 8002884:	200005f4 	.word	0x200005f4
 8002888:	200005ac 	.word	0x200005ac
 800288c:	200005e8 	.word	0x200005e8
 8002890:	3b4889df 	.word	0x3b4889df
 8002894:	20000634 	.word	0x20000634
 8002898:	20000640 	.word	0x20000640
 800289c:	20000604 	.word	0x20000604
 80028a0:	200005b8 	.word	0x200005b8
 80028a4:	2000064c 	.word	0x2000064c
 80028a8:	c3340000 	.word	0xc3340000
 80028ac:	43b40000 	.word	0x43b40000
 80028b0:	c4070000 	.word	0xc4070000
 80028b4:	43340000 	.word	0x43340000
 80028b8:	44070000 	.word	0x44070000
 80028bc:	200005f8 	.word	0x200005f8

080028c0 <ICM20602_IMU_calibration2>:
{
 80028c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c4:	ed2d 8b02 	vpush	{d8}
 80028c8:	b0d3      	sub	sp, #332	; 0x14c
  double acc_sum[3] = {0};
 80028ca:	2100      	movs	r1, #0
  double gyro_ave[3][10] = {{0.0}};
 80028cc:	22f0      	movs	r2, #240	; 0xf0
 80028ce:	a816      	add	r0, sp, #88	; 0x58
  double acc_sum[3] = {0};
 80028d0:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 80028d4:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 80028d8:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
  double gyro_sum[3] = {0};
 80028dc:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
 80028e0:	e9cd 1112 	strd	r1, r1, [sp, #72]	; 0x48
 80028e4:	e9cd 1114 	strd	r1, r1, [sp, #80]	; 0x50
  int cal_len = 0;
 80028e8:	9105      	str	r1, [sp, #20]
  double gyro_ave[3][10] = {{0.0}};
 80028ea:	f009 fae5 	bl	800beb8 <memset>
  printf("put the IMU still!\n");
 80028ee:	48aa      	ldr	r0, [pc, #680]	; (8002b98 <ICM20602_IMU_calibration2+0x2d8>)
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 80028f0:	4faa      	ldr	r7, [pc, #680]	; (8002b9c <ICM20602_IMU_calibration2+0x2dc>)
  printf("put the IMU still!\n");
 80028f2:	f009 f929 	bl	800bb48 <puts>
  HAL_Delay(200);
 80028f6:	20c8      	movs	r0, #200	; 0xc8
 80028f8:	f003 fdb2 	bl	8006460 <HAL_Delay>
      acc_ave[j][0] = acc_sum[j] / cal_len;
 80028fc:	9805      	ldr	r0, [sp, #20]
 80028fe:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8002bc0 <ICM20602_IMU_calibration2+0x300>
 8002902:	f7fd fe37 	bl	8000574 <__aeabi_i2d>
 8002906:	460b      	mov	r3, r1
 8002908:	4602      	mov	r2, r0
 800290a:	49a5      	ldr	r1, [pc, #660]	; (8002ba0 <ICM20602_IMU_calibration2+0x2e0>)
 800290c:	2000      	movs	r0, #0
 800290e:	f7fd ffc5 	bl	800089c <__aeabi_ddiv>
 8002912:	4ba4      	ldr	r3, [pc, #656]	; (8002ba4 <ICM20602_IMU_calibration2+0x2e4>)
 8002914:	9304      	str	r3, [sp, #16]
 8002916:	ec41 0b18 	vmov	d8, r0, r1
 800291a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800291e:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8002922:	ac16      	add	r4, sp, #88	; 0x58
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002924:	f04f 0a00 	mov.w	sl, #0
 8002928:	2200      	movs	r2, #0
 800292a:	2110      	movs	r1, #16
 800292c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002930:	f005 fa52 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002934:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
  send_data[0] = reg | 0x80;
 8002938:	f06f 0337 	mvn.w	r3, #55	; 0x37
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800293c:	9600      	str	r6, [sp, #0]
  send_data[0] = reg | 0x80;
 800293e:	f88d 3020 	strb.w	r3, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002942:	aa09      	add	r2, sp, #36	; 0x24
 8002944:	2301      	movs	r3, #1
 8002946:	a908      	add	r1, sp, #32
 8002948:	4638      	mov	r0, r7
 800294a:	f006 f999 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800294e:	2301      	movs	r3, #1
 8002950:	9600      	str	r6, [sp, #0]
 8002952:	aa09      	add	r2, sp, #36	; 0x24
 8002954:	a908      	add	r1, sp, #32
 8002956:	4638      	mov	r0, r7
  send_data[0] = 0x00;
 8002958:	f88d a020 	strb.w	sl, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800295c:	f006 f990 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002960:	2201      	movs	r2, #1
 8002962:	2110      	movs	r1, #16
 8002964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  val = RxBuffer[0];
 8002968:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800296c:	f005 fa34 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2110      	movs	r1, #16
 8002974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002978:	f005 fa2e 	bl	8007dd8 <HAL_GPIO_WritePin>
  send_data[0] = reg | 0x80;
 800297c:	20c7      	movs	r0, #199	; 0xc7
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800297e:	9600      	str	r6, [sp, #0]
 8002980:	2301      	movs	r3, #1
 8002982:	aa09      	add	r2, sp, #36	; 0x24
 8002984:	a908      	add	r1, sp, #32
  send_data[0] = reg | 0x80;
 8002986:	f88d 0020 	strb.w	r0, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800298a:	4638      	mov	r0, r7
 800298c:	f006 f978 	bl	8008c80 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 8002990:	2301      	movs	r3, #1
 8002992:	9600      	str	r6, [sp, #0]
 8002994:	aa09      	add	r2, sp, #36	; 0x24
 8002996:	a908      	add	r1, sp, #32
 8002998:	4638      	mov	r0, r7
  send_data[0] = 0x00;
 800299a:	f88d a020 	strb.w	sl, [sp, #32]
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t *)send_data, (uint8_t *)RxBuffer, 1, 2000);
 800299e:	f006 f96f 	bl	8008c80 <HAL_SPI_TransmitReceive>
  val = RxBuffer[0];
 80029a2:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
  return ((HiByte << 8) | LoByte);
 80029a6:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029aa:	2201      	movs	r2, #1
 80029ac:	2110      	movs	r1, #16
 80029ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029b2:	b22d      	sxth	r5, r5
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029b4:	f005 fa10 	bl	8007dd8 <HAL_GPIO_WritePin>
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029b8:	4b7b      	ldr	r3, [pc, #492]	; (8002ba8 <ICM20602_IMU_calibration2+0x2e8>)
      acc_sum[j] += acc[j];
 80029ba:	f85b 0b04 	ldr.w	r0, [fp], #4
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029be:	ed93 7a00 	vldr	s14, [r3]
 80029c2:	4b78      	ldr	r3, [pc, #480]	; (8002ba4 <ICM20602_IMU_calibration2+0x2e4>)
 80029c4:	ee07 5a90 	vmov	s15, r5
 80029c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (j = 0; j < 3; j++) {
 80029cc:	3450      	adds	r4, #80	; 0x50
      gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80029ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d2:	edc3 7a02 	vstr	s15, [r3, #8]
      acc_sum[j] += acc[j];
 80029d6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80029da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029de:	f7fd fddb 	bl	8000598 <__aeabi_f2d>
 80029e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029e6:	f7fd fc79 	bl	80002dc <__adddf3>
      gyro_sum[j] += gyro[j];
 80029ea:	9b04      	ldr	r3, [sp, #16]
      acc_sum[j] += acc[j];
 80029ec:	e8e8 0102 	strd	r0, r1, [r8], #8
      gyro_sum[j] += gyro[j];
 80029f0:	f853 0b04 	ldr.w	r0, [r3], #4
 80029f4:	9304      	str	r3, [sp, #16]
 80029f6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80029fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029fe:	f7fd fdcb 	bl	8000598 <__aeabi_f2d>
 8002a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a06:	f7fd fc69 	bl	80002dc <__adddf3>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	e8e9 2302 	strd	r2, r3, [r9], #8
      gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a12:	ec53 2b18 	vmov	r2, r3, d8
 8002a16:	f7fd fe17 	bl	8000648 <__aeabi_dmul>
        gyro_ave[j][i] = gyro_ave[j][i - 1];
 8002a1a:	e954 2304 	ldrd	r2, r3, [r4, #-16]
 8002a1e:	e944 2302 	strd	r2, r3, [r4, #-8]
 8002a22:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 8002a26:	e944 2304 	strd	r2, r3, [r4, #-16]
 8002a2a:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 8002a2e:	e944 2306 	strd	r2, r3, [r4, #-24]
 8002a32:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8002a36:	e944 2308 	strd	r2, r3, [r4, #-32]
 8002a3a:	e954 230c 	ldrd	r2, r3, [r4, #-48]	; 0x30
 8002a3e:	e944 230a 	strd	r2, r3, [r4, #-40]	; 0x28
 8002a42:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
 8002a46:	e944 230c 	strd	r2, r3, [r4, #-48]	; 0x30
 8002a4a:	e954 2310 	ldrd	r2, r3, [r4, #-64]	; 0x40
 8002a4e:	e944 230e 	strd	r2, r3, [r4, #-56]	; 0x38
 8002a52:	e954 2312 	ldrd	r2, r3, [r4, #-72]	; 0x48
 8002a56:	e944 2310 	strd	r2, r3, [r4, #-64]	; 0x40
    for (j = 0; j < 3; j++) {
 8002a5a:	ab10      	add	r3, sp, #64	; 0x40
 8002a5c:	4598      	cmp	r8, r3
      gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a5e:	e944 0114 	strd	r0, r1, [r4, #-80]	; 0x50
        gyro_ave[j][i] = gyro_ave[j][i - 1];
 8002a62:	e944 0112 	strd	r0, r1, [r4, #-72]	; 0x48
    for (j = 0; j < 3; j++) {
 8002a66:	f47f af5f 	bne.w	8002928 <ICM20602_IMU_calibration2+0x68>
    cal_len++;
 8002a6a:	9c05      	ldr	r4, [sp, #20]
    if ((fabs(gyro_ave[2][9] - gyro_ave[2][0]) < SHRINK_ERROR) && cal_len > 1000) {
 8002a6c:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8002a70:	e9dd 0150 	ldrd	r0, r1, [sp, #320]	; 0x140
    cal_len++;
 8002a74:	3401      	adds	r4, #1
 8002a76:	9405      	str	r4, [sp, #20]
    if ((fabs(gyro_ave[2][9] - gyro_ave[2][0]) < SHRINK_ERROR) && cal_len > 1000) {
 8002a78:	f7fd fc2e 	bl	80002d8 <__aeabi_dsub>
 8002a7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a80:	9307      	str	r3, [sp, #28]
 8002a82:	9006      	str	r0, [sp, #24]
 8002a84:	a342      	add	r3, pc, #264	; (adr r3, 8002b90 <ICM20602_IMU_calibration2+0x2d0>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a8e:	f7fe f84d 	bl	8000b2c <__aeabi_dcmplt>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d05f      	beq.n	8002b56 <ICM20602_IMU_calibration2+0x296>
 8002a96:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002a9a:	f77f af2f 	ble.w	80028fc <ICM20602_IMU_calibration2+0x3c>
  printf("length = %d\n", cal_len);
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	4842      	ldr	r0, [pc, #264]	; (8002bac <ICM20602_IMU_calibration2+0x2ec>)
 8002aa2:	f008 ffeb 	bl	800ba7c <iprintf>
  printf("Gyro Yaw %+8.6f ", fabs(gyro_ave[2][9] - gyro_ave[2][0]));
 8002aa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002aaa:	4841      	ldr	r0, [pc, #260]	; (8002bb0 <ICM20602_IMU_calibration2+0x2f0>)
 8002aac:	f008 ffe6 	bl	800ba7c <iprintf>
  if (cal_len == 5000 || cal_len == 1001) {
 8002ab0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab4:	429c      	cmp	r4, r3
 8002ab6:	4646      	mov	r6, r8
 8002ab8:	d05b      	beq.n	8002b72 <ICM20602_IMU_calibration2+0x2b2>
 8002aba:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002abe:	429c      	cmp	r4, r3
 8002ac0:	d057      	beq.n	8002b72 <ICM20602_IMU_calibration2+0x2b2>
    acc_off[j] = acc_sum[j] / cal_len;
 8002ac2:	9805      	ldr	r0, [sp, #20]
 8002ac4:	4f3b      	ldr	r7, [pc, #236]	; (8002bb4 <ICM20602_IMU_calibration2+0x2f4>)
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002ac6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002bc4 <ICM20602_IMU_calibration2+0x304>
    acc_off[j] = acc_sum[j] / cal_len;
 8002aca:	f7fd fd53 	bl	8000574 <__aeabi_i2d>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	4932      	ldr	r1, [pc, #200]	; (8002ba0 <ICM20602_IMU_calibration2+0x2e0>)
 8002ad6:	f7fd fee1 	bl	800089c <__aeabi_ddiv>
 8002ada:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ade:	4604      	mov	r4, r0
 8002ae0:	460d      	mov	r5, r1
 8002ae2:	f7fd fdb1 	bl	8000648 <__aeabi_dmul>
 8002ae6:	f7fe f8a7 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002aea:	e9d6 2300 	ldrd	r2, r3, [r6]
    acc_off[j] = acc_sum[j] / cal_len;
 8002aee:	6038      	str	r0, [r7, #0]
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002af0:	4629      	mov	r1, r5
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fd fda8 	bl	8000648 <__aeabi_dmul>
 8002af8:	f7fe f89e 	bl	8000c38 <__aeabi_d2f>
    acc_off[j] = acc_sum[j] / cal_len;
 8002afc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002b00:	f8c8 0000 	str.w	r0, [r8]
    acc_off[j] = acc_sum[j] / cal_len;
 8002b04:	4629      	mov	r1, r5
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7fd fd9e 	bl	8000648 <__aeabi_dmul>
 8002b0c:	f7fe f894 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002b10:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
    acc_off[j] = acc_sum[j] / cal_len;
 8002b14:	6078      	str	r0, [r7, #4]
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002b16:	4629      	mov	r1, r5
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7fd fd95 	bl	8000648 <__aeabi_dmul>
 8002b1e:	f7fe f88b 	bl	8000c38 <__aeabi_d2f>
    acc_off[j] = acc_sum[j] / cal_len;
 8002b22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002b26:	f8c8 0004 	str.w	r0, [r8, #4]
    acc_off[j] = acc_sum[j] / cal_len;
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7fd fd8b 	bl	8000648 <__aeabi_dmul>
 8002b32:	f7fe f881 	bl	8000c38 <__aeabi_d2f>
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002b36:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
    acc_off[j] = acc_sum[j] / cal_len;
 8002b3a:	60b8      	str	r0, [r7, #8]
    gyro_off[j] = gyro_sum[j] / cal_len;
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fd fd82 	bl	8000648 <__aeabi_dmul>
 8002b44:	f7fe f878 	bl	8000c38 <__aeabi_d2f>
 8002b48:	f8c8 0008 	str.w	r0, [r8, #8]
}
 8002b4c:	b053      	add	sp, #332	; 0x14c
 8002b4e:	ecbd 8b02 	vpop	{d8}
 8002b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (cal_len < 5000.0) {
 8002b56:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b5a:	429c      	cmp	r4, r3
 8002b5c:	f47f aece 	bne.w	80028fc <ICM20602_IMU_calibration2+0x3c>
  printf("length = %d\n", cal_len);
 8002b60:	9905      	ldr	r1, [sp, #20]
 8002b62:	4812      	ldr	r0, [pc, #72]	; (8002bac <ICM20602_IMU_calibration2+0x2ec>)
 8002b64:	f008 ff8a 	bl	800ba7c <iprintf>
  printf("Gyro Yaw %+8.6f ", fabs(gyro_ave[2][9] - gyro_ave[2][0]));
 8002b68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <ICM20602_IMU_calibration2+0x2f0>)
 8002b6e:	f008 ff85 	bl	800ba7c <iprintf>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b72:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b76:	4910      	ldr	r1, [pc, #64]	; (8002bb8 <ICM20602_IMU_calibration2+0x2f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <ICM20602_IMU_calibration2+0x2fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b7a:	68ca      	ldr	r2, [r1, #12]
 8002b7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
 8002b84:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b88:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002b8a:	e7fd      	b.n	8002b88 <ICM20602_IMU_calibration2+0x2c8>
 8002b8c:	f3af 8000 	nop.w
 8002b90:	eb1c432d 	.word	0xeb1c432d
 8002b94:	3f1a36e2 	.word	0x3f1a36e2
 8002b98:	0800f668 	.word	0x0800f668
 8002b9c:	20000b88 	.word	0x20000b88
 8002ba0:	3ff00000 	.word	0x3ff00000
 8002ba4:	200005f8 	.word	0x200005f8
 8002ba8:	200005f4 	.word	0x200005f4
 8002bac:	0800f67c 	.word	0x0800f67c
 8002bb0:	0800f68c 	.word	0x0800f68c
 8002bb4:	200005e8 	.word	0x200005e8
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	05fa0004 	.word	0x05fa0004
 8002bc0:	200005ac 	.word	0x200005ac
 8002bc4:	20000634 	.word	0x20000634

08002bc8 <HAL_GetTick>:
void send_accutuator_cmd_run();
void send_can_error();
void yawFilter();
void resetLocalSpeedControl();
//void resetAiCmdData();
uint32_t HAL_GetTick(void) { return uwTick; }
 8002bc8:	4b01      	ldr	r3, [pc, #4]	; (8002bd0 <HAL_GetTick+0x8>)
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000fc0 	.word	0x20000fc0

08002bd4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void __io_putchar(uint8_t ch) { HAL_UART_Transmit(&hlpuart1, &ch, 1, 1); }
 8002bd4:	b500      	push	{lr}
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	b083      	sub	sp, #12
 8002bda:	4684      	mov	ip, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f10d 0107 	add.w	r1, sp, #7
 8002be2:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <__io_putchar+0x20>)
 8002be4:	f88d c007 	strb.w	ip, [sp, #7]
 8002be8:	f007 ffa4 	bl	800ab34 <HAL_UART_Transmit>
 8002bec:	b003      	add	sp, #12
 8002bee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bf2:	bf00      	nop
 8002bf4:	20000e10 	.word	0x20000e10

08002bf8 <p>:

void p(const char * format, ...)
{
 8002bf8:	b40f      	push	{r0, r1, r2, r3}
 8002bfa:	b530      	push	{r4, r5, lr}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	ac08      	add	r4, sp, #32
  va_list args;
  va_start(args, format);
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c00:	4d08      	ldr	r5, [pc, #32]	; (8002c24 <p+0x2c>)
{
 8002c02:	f854 1b04 	ldr.w	r1, [r4], #4
 8002c06:	9101      	str	r1, [sp, #4]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c08:	4628      	mov	r0, r5
  va_start(args, format);
 8002c0a:	9403      	str	r4, [sp, #12]
  vsprintf(printf_buffer + strlen(printf_buffer), format, args);
 8002c0c:	f7fd fb58 	bl	80002c0 <strlen>
 8002c10:	9901      	ldr	r1, [sp, #4]
 8002c12:	4622      	mov	r2, r4
 8002c14:	4428      	add	r0, r5
 8002c16:	f009 f8af 	bl	800bd78 <vsiprintf>
  va_end(args);
}
 8002c1a:	b005      	add	sp, #20
 8002c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c20:	b004      	add	sp, #16
 8002c22:	4770      	bx	lr
 8002c24:	20000938 	.word	0x20000938

08002c28 <yawFilter>:
{
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
}

void yawFilter()
{
 8002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  // 静止中に一気にvision角度を合わせるやつ
  static uint32_t yaw_angle_update_cnt = 0;
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002c2a:	4c79      	ldr	r4, [pc, #484]	; (8002e10 <yawFilter+0x1e8>)
  yaw_angle_update_cnt++;
 8002c2c:	4a79      	ldr	r2, [pc, #484]	; (8002e14 <yawFilter+0x1ec>)
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002c2e:	ed94 0a00 	vldr	s0, [r4]
 8002c32:	edd4 7a01 	vldr	s15, [r4, #4]
 8002c36:	ed94 7a04 	vldr	s14, [r4, #16]
  yaw_angle_update_cnt++;
 8002c3a:	6813      	ldr	r3, [r2, #0]
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002c3c:	ee77 7ac0 	vsub.f32	s15, s15, s0
{
 8002c40:	ed2d 8b02 	vpush	{d8}
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002c44:	eef0 7ae7 	vabs.f32	s15, s15
  yaw_angle_update_cnt++;
 8002c48:	3301      	adds	r3, #1
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002c4a:	ee77 7a87 	vadd.f32	s15, s15, s14
  if (yaw_angle_update_cnt > MAIN_LOOP_CYCLE / 2) {  // 2Hz
 8002c4e:	2bfa      	cmp	r3, #250	; 0xfa
{
 8002c50:	b083      	sub	sp, #12
  imu.yaw_angle_diff_integral += fabs(imu.pre_yaw_angle - imu.yaw_angle);
 8002c52:	edc4 7a04 	vstr	s15, [r4, #16]
  yaw_angle_update_cnt++;
 8002c56:	6013      	str	r3, [r2, #0]
  if (yaw_angle_update_cnt > MAIN_LOOP_CYCLE / 2) {  // 2Hz
 8002c58:	d846      	bhi.n	8002ce8 <yawFilter+0xc0>
    if (imu.yaw_angle_diff_integral < 1) {
      // 機体が旋回していないとき
      debug.theta_override_flag = true;

      // visionとの角度差があるときにアプデ
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002c5a:	4d6f      	ldr	r5, [pc, #444]	; (8002e18 <yawFilter+0x1f0>)
 8002c5c:	f895 6048 	ldrb.w	r6, [r5, #72]	; 0x48
      debug.theta_override_flag = false;
    }
    imu.yaw_angle_diff_integral = 0;
  }

  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8002c60:	68a3      	ldr	r3, [r4, #8]
  imu.pre_yaw_angle = imu.yaw_angle;
 8002c62:	ed84 0a01 	vstr	s0, [r4, #4]
  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8002c66:	60e3      	str	r3, [r4, #12]

  // vision更新されたときに強制更新するやつ
  if (ai_cmd.vision_lost_flag == false && ai_cmd.pre_vision_lost_flag == true) {
 8002c68:	b916      	cbnz	r6, 8002c70 <yawFilter+0x48>
 8002c6a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8002c6e:	bb43      	cbnz	r3, 8002cc2 <yawFilter+0x9a>
    imu.yaw_angle = ai_cmd.global_vision_theta * 180 / M_PI;
  }
  ai_cmd.pre_vision_lost_flag = ai_cmd.vision_lost_flag;

  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 8002c70:	4867      	ldr	r0, [pc, #412]	; (8002e10 <yawFilter+0x1e8>)
 8002c72:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8002e1c <yawFilter+0x1f4>
  ai_cmd.pre_vision_lost_flag = ai_cmd.vision_lost_flag;
 8002c76:	f885 604d 	strb.w	r6, [r5, #77]	; 0x4d
  ICM20602_read_IMU_data((float)1.0 / MAIN_LOOP_CYCLE, &(imu.yaw_angle));
 8002c7a:	f7ff fcd7 	bl	800262c <ICM20602_read_IMU_data>

  if (sys.main_mode == MAIN_MODE_CMD_DEBUG_MODE) {
 8002c7e:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <yawFilter+0x1f8>)
 8002c80:	7c1b      	ldrb	r3, [r3, #16]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d056      	beq.n	8002d34 <yawFilter+0x10c>
    // デバッグ用、targetへ補正する
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain

  } else if (ai_cmd.vision_lost_flag || debug.latency_check_enabled) {
 8002c86:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8002c8a:	b173      	cbz	r3, 8002caa <yawFilter+0x82>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002c8c:	6820      	ldr	r0, [r4, #0]

  } else {
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
  }

  imu.yaw_angle_rad = imu.yaw_angle * M_PI / 180;
 8002c8e:	f7fd fc83 	bl	8000598 <__aeabi_f2d>
 8002c92:	a357      	add	r3, pc, #348	; (adr r3, 8002df0 <yawFilter+0x1c8>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fcd6 	bl	8000648 <__aeabi_dmul>
 8002c9c:	f7fd ffcc 	bl	8000c38 <__aeabi_d2f>
 8002ca0:	60a0      	str	r0, [r4, #8]
}
 8002ca2:	b003      	add	sp, #12
 8002ca4:	ecbd 8b02 	vpop	{d8}
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (ai_cmd.vision_lost_flag || debug.latency_check_enabled) {
 8002caa:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <yawFilter+0x1fc>)
 8002cac:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1eb      	bne.n	8002c8c <yawFilter+0x64>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002cb4:	ed94 8a00 	vldr	s16, [r4]
 8002cb8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002e28 <yawFilter+0x200>
 8002cbc:	edd5 0a01 	vldr	s1, [r5, #4]
 8002cc0:	e03e      	b.n	8002d40 <yawFilter+0x118>
    imu.yaw_angle = ai_cmd.global_vision_theta * 180 / M_PI;
 8002cc2:	ed95 7a01 	vldr	s14, [r5, #4]
 8002cc6:	eddf 7a59 	vldr	s15, [pc, #356]	; 8002e2c <yawFilter+0x204>
 8002cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cce:	ee17 0a90 	vmov	r0, s15
 8002cd2:	f7fd fc61 	bl	8000598 <__aeabi_f2d>
 8002cd6:	a348      	add	r3, pc, #288	; (adr r3, 8002df8 <yawFilter+0x1d0>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fcb4 	bl	8000648 <__aeabi_dmul>
 8002ce0:	f7fd ffaa 	bl	8000c38 <__aeabi_d2f>
 8002ce4:	6020      	str	r0, [r4, #0]
 8002ce6:	e7c3      	b.n	8002c70 <yawFilter+0x48>
    if (imu.yaw_angle_diff_integral < 1) {
 8002ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cec:	eef4 7ac7 	vcmpe.f32	s15, s14
    yaw_angle_update_cnt = 0;
 8002cf0:	2300      	movs	r3, #0
    if (imu.yaw_angle_diff_integral < 1) {
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    yaw_angle_update_cnt = 0;
 8002cf6:	6013      	str	r3, [r2, #0]
    if (imu.yaw_angle_diff_integral < 1) {
 8002cf8:	d408      	bmi.n	8002d0c <yawFilter+0xe4>
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002cfa:	4d47      	ldr	r5, [pc, #284]	; (8002e18 <yawFilter+0x1f0>)
      debug.theta_override_flag = false;
 8002cfc:	4a49      	ldr	r2, [pc, #292]	; (8002e24 <yawFilter+0x1fc>)
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002cfe:	f895 6048 	ldrb.w	r6, [r5, #72]	; 0x48
      debug.theta_override_flag = false;
 8002d02:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
    imu.yaw_angle_diff_integral = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	6123      	str	r3, [r4, #16]
 8002d0a:	e7a9      	b.n	8002c60 <yawFilter+0x38>
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002d0c:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <yawFilter+0x208>)
      debug.theta_override_flag = true;
 8002d0e:	4a45      	ldr	r2, [pc, #276]	; (8002e24 <yawFilter+0x1fc>)
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002d10:	4d41      	ldr	r5, [pc, #260]	; (8002e18 <yawFilter+0x1f0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f895 6048 	ldrb.w	r6, [r5, #72]	; 0x48
      debug.theta_override_flag = true;
 8002d18:	2101      	movs	r1, #1
 8002d1a:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f1      	beq.n	8002d06 <yawFilter+0xde>
 8002d22:	2e00      	cmp	r6, #0
 8002d24:	d03b      	beq.n	8002d9e <yawFilter+0x176>
  imu.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8002d26:	68a3      	ldr	r3, [r4, #8]
 8002d28:	60e3      	str	r3, [r4, #12]
    imu.yaw_angle_diff_integral = 0;
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	6122      	str	r2, [r4, #16]
  imu.pre_yaw_angle = imu.yaw_angle;
 8002d2e:	ed84 0a01 	vstr	s0, [r4, #4]
  if (ai_cmd.vision_lost_flag == false && ai_cmd.pre_vision_lost_flag == true) {
 8002d32:	e79d      	b.n	8002c70 <yawFilter+0x48>
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.target_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002d34:	ed94 8a00 	vldr	s16, [r4]
 8002d38:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8002e28 <yawFilter+0x200>
 8002d3c:	edd5 0a00 	vldr	s1, [r5]
    imu.yaw_angle = imu.yaw_angle - (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180.0 / PI) * 0.001;  // 0.001 : gain
 8002d40:	edcd 0a01 	vstr	s1, [sp, #4]
 8002d44:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002d48:	ee17 0a90 	vmov	r0, s15
 8002d4c:	f7fd fc24 	bl	8000598 <__aeabi_f2d>
 8002d50:	a32b      	add	r3, pc, #172	; (adr r3, 8002e00 <yawFilter+0x1d8>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fc77 	bl	8000648 <__aeabi_dmul>
 8002d5a:	f7fd ff6d 	bl	8000c38 <__aeabi_d2f>
 8002d5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002d62:	ee00 0a10 	vmov	s0, r0
 8002d66:	f003 f9d7 	bl	8006118 <getAngleDiff>
 8002d6a:	ee18 0a10 	vmov	r0, s16
 8002d6e:	ee10 5a10 	vmov	r5, s0
 8002d72:	f7fd fc11 	bl	8000598 <__aeabi_f2d>
 8002d76:	4606      	mov	r6, r0
 8002d78:	4628      	mov	r0, r5
 8002d7a:	460f      	mov	r7, r1
 8002d7c:	f7fd fc0c 	bl	8000598 <__aeabi_f2d>
 8002d80:	a321      	add	r3, pc, #132	; (adr r3, 8002e08 <yawFilter+0x1e0>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f7fd fc5f 	bl	8000648 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4630      	mov	r0, r6
 8002d90:	4639      	mov	r1, r7
 8002d92:	f7fd faa1 	bl	80002d8 <__aeabi_dsub>
 8002d96:	f7fd ff4f 	bl	8000c38 <__aeabi_d2f>
 8002d9a:	6020      	str	r0, [r4, #0]
 8002d9c:	e777      	b.n	8002c8e <yawFilter+0x66>
      if (connection.connected_ai && !ai_cmd.vision_lost_flag && getAngleDiff(imu.yaw_angle, ai_cmd.global_vision_theta) > 10) {
 8002d9e:	edd5 0a01 	vldr	s1, [r5, #4]
 8002da2:	f003 f9b9 	bl	8006118 <getAngleDiff>
 8002da6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002daa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	dc04      	bgt.n	8002dbe <yawFilter+0x196>
  imu.pre_yaw_angle = imu.yaw_angle;
 8002db4:	ed94 0a00 	vldr	s0, [r4]
  if (ai_cmd.vision_lost_flag == false && ai_cmd.pre_vision_lost_flag == true) {
 8002db8:	f895 6048 	ldrb.w	r6, [r5, #72]	; 0x48
 8002dbc:	e7a3      	b.n	8002d06 <yawFilter+0xde>
        imu.yaw_angle = ai_cmd.global_vision_theta * 180 / M_PI;
 8002dbe:	ed95 7a01 	vldr	s14, [r5, #4]
 8002dc2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8002e2c <yawFilter+0x204>
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	ee17 0a90 	vmov	r0, s15
 8002dce:	f7fd fbe3 	bl	8000598 <__aeabi_f2d>
 8002dd2:	a309      	add	r3, pc, #36	; (adr r3, 8002df8 <yawFilter+0x1d0>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fc36 	bl	8000648 <__aeabi_dmul>
 8002ddc:	f7fd ff2c 	bl	8000c38 <__aeabi_d2f>
  if (ai_cmd.vision_lost_flag == false && ai_cmd.pre_vision_lost_flag == true) {
 8002de0:	f895 6048 	ldrb.w	r6, [r5, #72]	; 0x48
        imu.yaw_angle = ai_cmd.global_vision_theta * 180 / M_PI;
 8002de4:	6020      	str	r0, [r4, #0]
 8002de6:	ee00 0a10 	vmov	s0, r0
 8002dea:	e78c      	b.n	8002d06 <yawFilter+0xde>
 8002dec:	f3af 8000 	nop.w
 8002df0:	a2529d39 	.word	0xa2529d39
 8002df4:	3f91df46 	.word	0x3f91df46
 8002df8:	6dc9c883 	.word	0x6dc9c883
 8002dfc:	3fd45f30 	.word	0x3fd45f30
 8002e00:	16c16c17 	.word	0x16c16c17
 8002e04:	3f76c16c 	.word	0x3f76c16c
 8002e08:	48b81fe5 	.word	0x48b81fe5
 8002e0c:	3fad55df 	.word	0x3fad55df
 8002e10:	200007e0 	.word	0x200007e0
 8002e14:	20000b84 	.word	0x20000b84
 8002e18:	2000066c 	.word	0x2000066c
 8002e1c:	3b03126f 	.word	0x3b03126f
 8002e20:	20000b30 	.word	0x20000b30
 8002e24:	200007a4 	.word	0x200007a4
 8002e28:	40490fdb 	.word	0x40490fdb
 8002e2c:	43340000 	.word	0x43340000
 8002e30:	2000074c 	.word	0x2000074c
 8002e34:	00000000 	.word	0x00000000

08002e38 <accel_control>:
  }
  //output.omega = 0;
}

void accel_control()
{
 8002e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  target.local_vel[0] = target.velocity[0];
 8002e3c:	f8df a234 	ldr.w	sl, [pc, #564]	; 8003074 <accel_control+0x23c>
  target.local_vel[1] = target.velocity[1];

  // XY -> rad/scalarに変換

  for (int i = 0; i < 2; i++) {
    acc_vel.vel_error_xy[i] = target.local_vel[i] - target.local_vel_now[i];
 8002e40:	f8df b234 	ldr.w	fp, [pc, #564]	; 8003078 <accel_control+0x240>
{
 8002e44:	ed2d 8b06 	vpush	{d8-d10}
  target.local_vel[0] = target.velocity[0];
 8002e48:	ed9a aa02 	vldr	s20, [sl, #8]
    acc_vel.vel_error_xy[i] = target.local_vel[i] - target.local_vel_now[i];
 8002e4c:	edda 8a06 	vldr	s17, [sl, #24]
  target.local_vel[1] = target.velocity[1];
 8002e50:	edda 9a03 	vldr	s19, [sl, #12]
    acc_vel.vel_error_xy[i] = target.local_vel[i] - target.local_vel_now[i];
 8002e54:	edda aa07 	vldr	s21, [sl, #28]
  target.local_vel[0] = target.velocity[0];
 8002e58:	ed8a aa04 	vstr	s20, [sl, #16]
    acc_vel.vel_error_xy[i] = target.local_vel[i] - target.local_vel_now[i];
 8002e5c:	ee3a 8a68 	vsub.f32	s16, s20, s17
 8002e60:	ee39 9aea 	vsub.f32	s18, s19, s21
  }
  acc_vel.vel_error_scalar = pow(pow(acc_vel.vel_error_xy[0], 2) + pow(acc_vel.vel_error_xy[1], 2), 0.5);
 8002e64:	ee18 0a10 	vmov	r0, s16
  target.local_vel[1] = target.velocity[1];
 8002e68:	edca 9a05 	vstr	s19, [sl, #20]
    acc_vel.vel_error_xy[i] = target.local_vel[i] - target.local_vel_now[i];
 8002e6c:	ed8b 8a00 	vstr	s16, [fp]
 8002e70:	ed8b 9a01 	vstr	s18, [fp, #4]
  acc_vel.vel_error_scalar = pow(pow(acc_vel.vel_error_xy[0], 2) + pow(acc_vel.vel_error_xy[1], 2), 0.5);
 8002e74:	f7fd fb90 	bl	8000598 <__aeabi_f2d>
 8002e78:	4604      	mov	r4, r0
 8002e7a:	ee19 0a10 	vmov	r0, s18
 8002e7e:	460d      	mov	r5, r1
 8002e80:	f7fd fb8a 	bl	8000598 <__aeabi_f2d>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4606      	mov	r6, r0
 8002e8a:	460f      	mov	r7, r1
 8002e8c:	f7fd fbdc 	bl	8000648 <__aeabi_dmul>
 8002e90:	4622      	mov	r2, r4
 8002e92:	4680      	mov	r8, r0
 8002e94:	4689      	mov	r9, r1
 8002e96:	462b      	mov	r3, r5
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f7fd fbd4 	bl	8000648 <__aeabi_dmul>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4640      	mov	r0, r8
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	f7fd fa18 	bl	80002dc <__adddf3>
 8002eac:	ec41 0b10 	vmov	d0, r0, r1
 8002eb0:	f00a ffb4 	bl	800de1c <sqrt>
 8002eb4:	ec51 0b10 	vmov	r0, r1, d0
 8002eb8:	f7fd febe 	bl	8000c38 <__aeabi_d2f>
  if (acc_vel.vel_error_xy[0] != 0 || acc_vel.vel_error_xy[1] != 0) {
 8002ebc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  acc_vel.vel_error_scalar = pow(pow(acc_vel.vel_error_xy[0], 2) + pow(acc_vel.vel_error_xy[1], 2), 0.5);
 8002ec4:	4680      	mov	r8, r0
 8002ec6:	f8cb 0008 	str.w	r0, [fp, #8]
  if (acc_vel.vel_error_xy[0] != 0 || acc_vel.vel_error_xy[1] != 0) {
 8002eca:	f040 8085 	bne.w	8002fd8 <accel_control+0x1a0>
 8002ece:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	d17f      	bne.n	8002fd8 <accel_control+0x1a0>
    acc_vel.vel_error_rad = atan2(acc_vel.vel_error_xy[1], acc_vel.vel_error_xy[0]);
  }

  // 目標速度と差が小さい場合は目標速度をそのまま代入する
  // 目標速度が連続的に変化する場合に適切でないかも
  if (acc_vel.vel_error_scalar < ACCEL_LIMIT / MAIN_LOOP_CYCLE) {
 8002ed8:	4640      	mov	r0, r8
 8002eda:	f7fd fb5d 	bl	8000598 <__aeabi_f2d>
 8002ede:	a35e      	add	r3, pc, #376	; (adr r3, 8003058 <accel_control+0x220>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fe22 	bl	8000b2c <__aeabi_dcmplt>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	f040 80a6 	bne.w	800303a <accel_control+0x202>
    output.accel[1] = 0;
    return;
  }

  // スカラは使わず、常に最大加速度
  output.accel[0] = cos(acc_vel.vel_error_rad) * ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002eee:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002ef2:	4c5d      	ldr	r4, [pc, #372]	; (8003068 <accel_control+0x230>)
 8002ef4:	f7fd fb50 	bl	8000598 <__aeabi_f2d>
 8002ef8:	ec41 0b10 	vmov	d0, r0, r1
 8002efc:	ec41 0b19 	vmov	d9, r0, r1
 8002f00:	f00a ffba 	bl	800de78 <cos>
 8002f04:	a354      	add	r3, pc, #336	; (adr r3, 8003058 <accel_control+0x220>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	ec51 0b10 	vmov	r0, r1, d0
 8002f0e:	f7fd fb9b 	bl	8000648 <__aeabi_dmul>
 8002f12:	f7fd fe91 	bl	8000c38 <__aeabi_d2f>
  output.accel[1] = sin(acc_vel.vel_error_rad) * ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002f16:	eeb0 0a49 	vmov.f32	s0, s18
 8002f1a:	eef0 0a69 	vmov.f32	s1, s19
  output.accel[0] = cos(acc_vel.vel_error_rad) * ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002f1e:	61e0      	str	r0, [r4, #28]
  output.accel[1] = sin(acc_vel.vel_error_rad) * ACCEL_LIMIT / MAIN_LOOP_CYCLE;
 8002f20:	f00a fffe 	bl	800df20 <sin>
 8002f24:	a34c      	add	r3, pc, #304	; (adr r3, 8003058 <accel_control+0x220>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	ec51 0b10 	vmov	r0, r1, d0
 8002f2e:	f7fd fb8b 	bl	8000648 <__aeabi_dmul>
 8002f32:	f7fd fe81 	bl	8000c38 <__aeabi_d2f>
 8002f36:	6220      	str	r0, [r4, #32]

  // バック方向だけ加速度制限
  if (output.accel[0] < -(ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE)) {
 8002f38:	69e0      	ldr	r0, [r4, #28]
 8002f3a:	f7fd fb2d 	bl	8000598 <__aeabi_f2d>
 8002f3e:	a348      	add	r3, pc, #288	; (adr r3, 8003060 <accel_control+0x228>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fdf2 	bl	8000b2c <__aeabi_dcmplt>
 8002f48:	b108      	cbz	r0, 8002f4e <accel_control+0x116>
    output.accel[0] = -(ACCEL_LIMIT_BACK / MAIN_LOOP_CYCLE);
 8002f4a:	4b48      	ldr	r3, [pc, #288]	; (800306c <accel_control+0x234>)
 8002f4c:	61e3      	str	r3, [r4, #28]
  }

  // 減速方向は制動力2倍
  for (int i = 0; i < 2; i++) {
    if (target.local_vel_now[i] * output.accel[i] < 0) {
 8002f4e:	edd4 7a07 	vldr	s15, [r4, #28]
 8002f52:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8002f56:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5e:	d455      	bmi.n	800300c <accel_control+0x1d4>
      output.accel[i] *= 2;
    }

    // 目標座標を追い越した場合、加速度を2倍にして追従
    if ((omni.robot_pos_diff[i] > 0 && output.accel[i] > 0) || (omni.robot_pos_diff[i] < 0 && output.accel[i] < 0)) {
 8002f60:	4b43      	ldr	r3, [pc, #268]	; (8003070 <accel_control+0x238>)
 8002f62:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	dd40      	ble.n	8002ff2 <accel_control+0x1ba>
 8002f70:	ed94 7a07 	vldr	s14, [r4, #28]
 8002f74:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	dd39      	ble.n	8002ff2 <accel_control+0x1ba>
      output.accel[i] *= 2;
 8002f7e:	edd4 7a07 	vldr	s15, [r4, #28]
 8002f82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f86:	edc4 7a07 	vstr	s15, [r4, #28]
    if (target.local_vel_now[i] * output.accel[i] < 0) {
 8002f8a:	edd4 7a08 	vldr	s15, [r4, #32]
 8002f8e:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8002f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9a:	d505      	bpl.n	8002fa8 <accel_control+0x170>
      output.accel[i] *= 2;
 8002f9c:	edd4 7a08 	vldr	s15, [r4, #32]
 8002fa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fa4:	edc4 7a08 	vstr	s15, [r4, #32]
    if ((omni.robot_pos_diff[i] > 0 && output.accel[i] > 0) || (omni.robot_pos_diff[i] < 0 && output.accel[i] < 0)) {
 8002fa8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb4:	dd31      	ble.n	800301a <accel_control+0x1e2>
 8002fb6:	ed94 7a08 	vldr	s14, [r4, #32]
 8002fba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8002fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc2:	dd2a      	ble.n	800301a <accel_control+0x1e2>
      output.accel[i] *= 2;
 8002fc4:	edd4 7a08 	vldr	s15, [r4, #32]
 8002fc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fcc:	edc4 7a08 	vstr	s15, [r4, #32]
    }
  }
}
 8002fd0:	ecbd 8b06 	vpop	{d8-d10}
 8002fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acc_vel.vel_error_rad = atan2(acc_vel.vel_error_xy[1], acc_vel.vel_error_xy[0]);
 8002fd8:	ec45 4b11 	vmov	d1, r4, r5
 8002fdc:	ec47 6b10 	vmov	d0, r6, r7
 8002fe0:	f00a ff1a 	bl	800de18 <atan2>
 8002fe4:	ec51 0b10 	vmov	r0, r1, d0
 8002fe8:	f7fd fe26 	bl	8000c38 <__aeabi_d2f>
 8002fec:	f8cb 000c 	str.w	r0, [fp, #12]
 8002ff0:	e772      	b.n	8002ed8 <accel_control+0xa0>
    if ((omni.robot_pos_diff[i] > 0 && output.accel[i] > 0) || (omni.robot_pos_diff[i] < 0 && output.accel[i] < 0)) {
 8002ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	d5c6      	bpl.n	8002f8a <accel_control+0x152>
 8002ffc:	edd4 7a07 	vldr	s15, [r4, #28]
 8003000:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003008:	d5bf      	bpl.n	8002f8a <accel_control+0x152>
 800300a:	e7b8      	b.n	8002f7e <accel_control+0x146>
      output.accel[i] *= 2;
 800300c:	edd4 7a07 	vldr	s15, [r4, #28]
 8003010:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003014:	edc4 7a07 	vstr	s15, [r4, #28]
 8003018:	e7a2      	b.n	8002f60 <accel_control+0x128>
    if ((omni.robot_pos_diff[i] > 0 && output.accel[i] > 0) || (omni.robot_pos_diff[i] < 0 && output.accel[i] < 0)) {
 800301a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d5d5      	bpl.n	8002fd0 <accel_control+0x198>
 8003024:	edd4 7a08 	vldr	s15, [r4, #32]
 8003028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	d4c8      	bmi.n	8002fc4 <accel_control+0x18c>
}
 8003032:	ecbd 8b06 	vpop	{d8-d10}
 8003036:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    target.local_vel_now[0] = target.local_vel[0];
 800303a:	ed8a aa06 	vstr	s20, [sl, #24]
    target.local_vel_now[1] = target.local_vel[1];
 800303e:	edca 9a07 	vstr	s19, [sl, #28]
}
 8003042:	ecbd 8b06 	vpop	{d8-d10}
    output.accel[0] = 0;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <accel_control+0x230>)
 8003048:	2200      	movs	r2, #0
 800304a:	61da      	str	r2, [r3, #28]
    output.accel[1] = 0;
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	47ae147b 	.word	0x47ae147b
 800305c:	3f847ae1 	.word	0x3f847ae1
 8003060:	bc6a7efa 	.word	0xbc6a7efa
 8003064:	bf789374 	.word	0xbf789374
 8003068:	20000900 	.word	0x20000900
 800306c:	bbc49ba6 	.word	0xbbc49ba6
 8003070:	200008b0 	.word	0x200008b0
 8003074:	20000b54 	.word	0x20000b54
 8003078:	2000065c 	.word	0x2000065c

0800307c <speed_control>:

void speed_control()
{
 800307c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // 目標移動位置を追い越してしまっている場合、目標移動位置側を追従させる。
    // 速度ではないのはノイズが多いから
    // ノイズ対策であまりodom情報でアップデートはできないが、最大加速度側を増やして追従する
    // local_velocityに対して追従するlocal_velocity_currentの追従を早める

    target.local_vel_now[i] += output.accel[i];
 8003080:	4cc6      	ldr	r4, [pc, #792]	; (800339c <speed_control+0x320>)
 8003082:	4dc7      	ldr	r5, [pc, #796]	; (80033a0 <speed_control+0x324>)
 8003084:	edd4 6a06 	vldr	s13, [r4, #24]
 8003088:	edd5 7a07 	vldr	s15, [r5, #28]
 800308c:	ed94 7a07 	vldr	s14, [r4, #28]
  // ここから位置制御
  for (int i = 0; i < 2; i++) {
    // targetとodomの差分に上限をつける(吹っ飛び対策)
    // 出力が上限に張り付いたら、出力制限でそれ以上の加速度は出しようがないのでそれに合わせる
    float odom_diff_max = (float)OUTPUT_XY_LIMIT / OMNI_OUTPUT_GAIN_KP;
    if (target.global_pos[i] - omni.odom[i] > odom_diff_max) {
 8003090:	4ec4      	ldr	r6, [pc, #784]	; (80033a4 <speed_control+0x328>)
{
 8003092:	ed2d 8b0e 	vpush	{d8-d14}
    target.local_vel_now[i] += output.accel[i];
 8003096:	ed95 9a08 	vldr	s18, [r5, #32]
 800309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309e:	ee39 9a07 	vadd.f32	s18, s18, s14
  output.global_vel_now[0] = (target.local_vel_now[0]) * cos(imu.yaw_angle_rad) - (target.local_vel_now[1]) * sin(imu.yaw_angle_rad);
 80030a2:	ee17 0a90 	vmov	r0, s15
    target.local_vel_now[i] += output.accel[i];
 80030a6:	edc4 7a06 	vstr	s15, [r4, #24]
 80030aa:	ed84 9a07 	vstr	s18, [r4, #28]
  output.global_vel_now[0] = (target.local_vel_now[0]) * cos(imu.yaw_angle_rad) - (target.local_vel_now[1]) * sin(imu.yaw_angle_rad);
 80030ae:	f7fd fa73 	bl	8000598 <__aeabi_f2d>
 80030b2:	4bbd      	ldr	r3, [pc, #756]	; (80033a8 <speed_control+0x32c>)
 80030b4:	689f      	ldr	r7, [r3, #8]
 80030b6:	ec41 0b1a 	vmov	d10, r0, r1
 80030ba:	ec41 0b1c 	vmov	d12, r0, r1
 80030be:	4638      	mov	r0, r7
 80030c0:	f7fd fa6a 	bl	8000598 <__aeabi_f2d>
 80030c4:	ec41 0b10 	vmov	d0, r0, r1
 80030c8:	ec41 0b18 	vmov	d8, r0, r1
 80030cc:	f00a fed4 	bl	800de78 <cos>
 80030d0:	ee19 0a10 	vmov	r0, s18
 80030d4:	ec5b ab10 	vmov	sl, fp, d0
 80030d8:	f7fd fa5e 	bl	8000598 <__aeabi_f2d>
 80030dc:	eeb0 0a48 	vmov.f32	s0, s16
 80030e0:	eef0 0a68 	vmov.f32	s1, s17
 80030e4:	ec41 0b1d 	vmov	d13, r0, r1
 80030e8:	ec41 0b18 	vmov	d8, r0, r1
 80030ec:	f00a ff18 	bl	800df20 <sin>
 80030f0:	4652      	mov	r2, sl
 80030f2:	465b      	mov	r3, fp
 80030f4:	ec51 0b1a 	vmov	r0, r1, d10
 80030f8:	eeb0 9a40 	vmov.f32	s18, s0
 80030fc:	eef0 9a60 	vmov.f32	s19, s1
 8003100:	eeb0 ea40 	vmov.f32	s28, s0
 8003104:	eef0 ea60 	vmov.f32	s29, s1
 8003108:	f7fd fa9e 	bl	8000648 <__aeabi_dmul>
 800310c:	ec53 2b19 	vmov	r2, r3, d9
 8003110:	4680      	mov	r8, r0
 8003112:	4689      	mov	r9, r1
 8003114:	ec51 0b18 	vmov	r0, r1, d8
 8003118:	f7fd fa96 	bl	8000648 <__aeabi_dmul>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4640      	mov	r0, r8
 8003122:	4649      	mov	r1, r9
 8003124:	f7fd f8d8 	bl	80002d8 <__aeabi_dsub>
 8003128:	f7fd fd86 	bl	8000c38 <__aeabi_d2f>
  output.global_vel_now[1] = (target.local_vel_now[0]) * sin(imu.yaw_angle_rad) + (target.local_vel_now[1]) * cos(imu.yaw_angle_rad);
 800312c:	ec53 2b19 	vmov	r2, r3, d9
  output.global_vel_now[0] = (target.local_vel_now[0]) * cos(imu.yaw_angle_rad) - (target.local_vel_now[1]) * sin(imu.yaw_angle_rad);
 8003130:	60a8      	str	r0, [r5, #8]
  output.global_vel_now[1] = (target.local_vel_now[0]) * sin(imu.yaw_angle_rad) + (target.local_vel_now[1]) * cos(imu.yaw_angle_rad);
 8003132:	ec51 0b1a 	vmov	r0, r1, d10
 8003136:	f7fd fa87 	bl	8000648 <__aeabi_dmul>
 800313a:	ec53 2b18 	vmov	r2, r3, d8
 800313e:	4680      	mov	r8, r0
 8003140:	4689      	mov	r9, r1
 8003142:	4650      	mov	r0, sl
 8003144:	4659      	mov	r1, fp
 8003146:	f7fd fa7f 	bl	8000648 <__aeabi_dmul>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4640      	mov	r0, r8
 8003150:	4649      	mov	r1, r9
 8003152:	f7fd f8c3 	bl	80002dc <__adddf3>
 8003156:	f7fd fd6f 	bl	8000c38 <__aeabi_d2f>
 800315a:	60e8      	str	r0, [r5, #12]
  target.global_pos[0] += output.global_vel_now[0] / MAIN_LOOP_CYCLE;  // speed to position
 800315c:	eddf 7a93 	vldr	s15, [pc, #588]	; 80033ac <speed_control+0x330>
 8003160:	ed95 7a02 	vldr	s14, [r5, #8]
 8003164:	edd4 6a00 	vldr	s13, [r4]
  target.global_pos[1] += output.global_vel_now[1] / MAIN_LOOP_CYCLE;  // speed to position
 8003168:	edd5 5a03 	vldr	s11, [r5, #12]
    if (target.global_pos[i] - omni.odom[i] > odom_diff_max) {
 800316c:	ed96 6a06 	vldr	s12, [r6, #24]
  target.global_pos[0] += output.global_vel_now[0] / MAIN_LOOP_CYCLE;  // speed to position
 8003170:	eee7 6a27 	vfma.f32	s13, s14, s15
  target.global_pos[1] += output.global_vel_now[1] / MAIN_LOOP_CYCLE;  // speed to position
 8003174:	ed94 7a01 	vldr	s14, [r4, #4]
  target.global_pos[0] += output.global_vel_now[0] / MAIN_LOOP_CYCLE;  // speed to position
 8003178:	edc4 6a00 	vstr	s13, [r4]
  target.global_pos[1] += output.global_vel_now[1] / MAIN_LOOP_CYCLE;  // speed to position
 800317c:	eea5 7aa7 	vfma.f32	s14, s11, s15
    if (target.global_pos[i] - omni.odom[i] > odom_diff_max) {
 8003180:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8003184:	eddf 7a8a 	vldr	s15, [pc, #552]	; 80033b0 <speed_control+0x334>
  target.global_pos[1] += output.global_vel_now[1] / MAIN_LOOP_CYCLE;  // speed to position
 8003188:	ed84 7a01 	vstr	s14, [r4, #4]
    if (target.global_pos[i] - omni.odom[i] > odom_diff_max) {
 800318c:	eef4 5ae7 	vcmpe.f32	s11, s15
 8003190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003194:	f300 80eb 	bgt.w	800336e <speed_control+0x2f2>
      target.global_pos[i] = omni.odom[i] + odom_diff_max;
    } else if (target.global_pos[i] - omni.odom[i] < -odom_diff_max) {
 8003198:	ed9f 5a86 	vldr	s10, [pc, #536]	; 80033b4 <speed_control+0x338>
 800319c:	eef4 5ac5 	vcmpe.f32	s11, s10
 80031a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      target.global_pos[i] = omni.odom[i] - odom_diff_max;
    }

    // odom基準の絶対座標系
    omni.global_odom_diff[i] = omni.odom[i] - target.global_pos[i];
 80031a4:	bf54      	ite	pl
 80031a6:	ee76 7a66 	vsubpl.f32	s15, s12, s13
      target.global_pos[i] = omni.odom[i] - odom_diff_max;
 80031aa:	ee36 6a67 	vsubmi.f32	s12, s12, s15
    omni.global_odom_diff[i] = omni.odom[i] - target.global_pos[i];
 80031ae:	ee17 0a90 	vmov	r0, s15
      target.global_pos[i] = omni.odom[i] - odom_diff_max;
 80031b2:	bf48      	it	mi
 80031b4:	ed84 6a00 	vstrmi	s12, [r4]
    if (target.global_pos[i] - omni.odom[i] > odom_diff_max) {
 80031b8:	edd6 7a07 	vldr	s15, [r6, #28]
 80031bc:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80033b0 <speed_control+0x334>
    omni.global_odom_diff[i] = omni.odom[i] - target.global_pos[i];
 80031c0:	60b0      	str	r0, [r6, #8]
    if (target.global_pos[i] - omni.odom[i] > odom_diff_max) {
 80031c2:	ee37 6a67 	vsub.f32	s12, s14, s15
 80031c6:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80031ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ce:	f340 80c0 	ble.w	8003352 <speed_control+0x2d6>
      target.global_pos[i] = omni.odom[i] + odom_diff_max;
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 80033bc <speed_control+0x340>
 80031da:	edc4 7a01 	vstr	s15, [r4, #4]

    // 速度に対する応答性を稼ぐ
    target.local_vel_ff_factor[i] = target.local_vel[i] - omni.local_odom_speed_mvf[i];
 80031de:	edd4 7a04 	vldr	s15, [r4, #16]
 80031e2:	edd6 6a12 	vldr	s13, [r6, #72]	; 0x48
    omni.global_odom_diff[i] = omni.odom[i] - target.global_pos[i];
 80031e6:	f8c6 800c 	str.w	r8, [r6, #12]
    target.local_vel_ff_factor[i] = target.local_vel[i] - omni.local_odom_speed_mvf[i];
 80031ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
    if (target.local_vel_ff_factor[i] > FF_TARGET_FINAL_DIFF_LIMIT) {
 80031ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	dc08      	bgt.n	800320e <speed_control+0x192>
      target.local_vel_ff_factor[i] = FF_TARGET_FINAL_DIFF_LIMIT;
    } else if (target.local_vel_ff_factor[i] < -FF_TARGET_FINAL_DIFF_LIMIT) {
 80031fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    target.local_vel_ff_factor[i] = target.local_vel[i] - omni.local_odom_speed_mvf[i];
 8003200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	bf58      	it	pl
 800320a:	eeb0 7a67 	vmovpl.f32	s14, s15
 800320e:	edd4 7a05 	vldr	s15, [r4, #20]
 8003212:	edd6 6a13 	vldr	s13, [r6, #76]	; 0x4c
 8003216:	ed84 7a08 	vstr	s14, [r4, #32]
 800321a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    if (target.local_vel_ff_factor[i] > FF_TARGET_FINAL_DIFF_LIMIT) {
 800321e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	f340 80ab 	ble.w	8003384 <speed_control+0x308>
      target.local_vel_ff_factor[i] = FF_TARGET_FINAL_DIFF_LIMIT;
 800322e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
      target.local_vel_ff_factor[i] = -FF_TARGET_FINAL_DIFF_LIMIT;
    }
  }

  // グローバル→ローカル座標系
  omni.robot_pos_diff[0] = omni.global_odom_diff[0] * cos(-imu.yaw_angle_rad) - omni.global_odom_diff[1] * sin(-imu.yaw_angle_rad);
 8003232:	f7fd f9b1 	bl	8000598 <__aeabi_f2d>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	f087 4000 	eor.w	r0, r7, #2147483648	; 0x80000000
 800323e:	ec43 2b1a 	vmov	d10, r2, r3
 8003242:	f7fd f9a9 	bl	8000598 <__aeabi_f2d>
 8003246:	ec41 0b10 	vmov	d0, r0, r1
 800324a:	ec41 0b18 	vmov	d8, r0, r1
 800324e:	f00a fe13 	bl	800de78 <cos>
 8003252:	4640      	mov	r0, r8
 8003254:	eeb0 ba40 	vmov.f32	s22, s0
 8003258:	eef0 ba60 	vmov.f32	s23, s1
 800325c:	f7fd f99c 	bl	8000598 <__aeabi_f2d>
 8003260:	ec53 2b1b 	vmov	r2, r3, d11
 8003264:	4682      	mov	sl, r0
 8003266:	468b      	mov	fp, r1
 8003268:	ec51 0b1a 	vmov	r0, r1, d10
 800326c:	f7fd f9ec 	bl	8000648 <__aeabi_dmul>
 8003270:	4652      	mov	r2, sl
 8003272:	4680      	mov	r8, r0
 8003274:	4689      	mov	r9, r1
 8003276:	465b      	mov	r3, fp
 8003278:	ec51 0b1e 	vmov	r0, r1, d14
 800327c:	f7fd f9e4 	bl	8000648 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4640      	mov	r0, r8
 8003286:	4649      	mov	r1, r9
 8003288:	f7fd f828 	bl	80002dc <__adddf3>
 800328c:	f7fd fcd4 	bl	8000c38 <__aeabi_d2f>
  omni.robot_pos_diff[1] = omni.global_odom_diff[0] * sin(-imu.yaw_angle_rad) + omni.global_odom_diff[1] * cos(-imu.yaw_angle_rad);
 8003290:	eeb0 0a48 	vmov.f32	s0, s16
 8003294:	eef0 0a68 	vmov.f32	s1, s17
  omni.robot_pos_diff[0] = omni.global_odom_diff[0] * cos(-imu.yaw_angle_rad) - omni.global_odom_diff[1] * sin(-imu.yaw_angle_rad);
 8003298:	6130      	str	r0, [r6, #16]
 800329a:	ee08 0a90 	vmov	s17, r0
  omni.robot_pos_diff[1] = omni.global_odom_diff[0] * sin(-imu.yaw_angle_rad) + omni.global_odom_diff[1] * cos(-imu.yaw_angle_rad);
 800329e:	f00a fe3f 	bl	800df20 <sin>
 80032a2:	ec51 0b1a 	vmov	r0, r1, d10
 80032a6:	ec53 2b10 	vmov	r2, r3, d0
 80032aa:	f7fd f9cd 	bl	8000648 <__aeabi_dmul>
 80032ae:	4652      	mov	r2, sl
 80032b0:	465b      	mov	r3, fp
 80032b2:	4680      	mov	r8, r0
 80032b4:	4689      	mov	r9, r1
 80032b6:	ec51 0b1b 	vmov	r0, r1, d11
 80032ba:	f7fd f9c5 	bl	8000648 <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4640      	mov	r0, r8
 80032c4:	4649      	mov	r1, r9
 80032c6:	f7fd f809 	bl	80002dc <__adddf3>
 80032ca:	f7fd fcb5 	bl	8000c38 <__aeabi_d2f>
 80032ce:	ee08 0a10 	vmov	s16, r0
 80032d2:	6170      	str	r0, [r6, #20]

  // local_vel_ff_factorに含まれるので要らなくなった
  /*- omni.local_odom_speed[0] * OMNI_OUTPUT_GAIN_KD */
  /*- omni.local_odom_speed[1] * OMNI_OUTPUT_GAIN_KD */

  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP + target.local_vel_now[0] * OMNI_OUTPUT_GAIN_FF_TARGET_NOW + target.local_vel_ff_factor[0] * OMNI_OUTPUT_GAIN_FF_TARGET_FINAL_DIFF;
 80032d4:	6a20      	ldr	r0, [r4, #32]
 80032d6:	ed9f 9a38 	vldr	s18, [pc, #224]	; 80033b8 <speed_control+0x33c>
 80032da:	f7fd f95d 	bl	8000598 <__aeabi_f2d>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	f7fc fffb 	bl	80002dc <__adddf3>
 80032e6:	ec53 2b1c 	vmov	r2, r3, d12
 80032ea:	f7fc fff7 	bl	80002dc <__adddf3>
 80032ee:	ee68 7a89 	vmul.f32	s15, s17, s18
 80032f2:	4606      	mov	r6, r0
 80032f4:	ee17 0a90 	vmov	r0, s15
 80032f8:	460f      	mov	r7, r1
 80032fa:	f7fd f94d 	bl	8000598 <__aeabi_f2d>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4630      	mov	r0, r6
 8003304:	4639      	mov	r1, r7
 8003306:	f7fc ffe9 	bl	80002dc <__adddf3>
 800330a:	f7fd fc95 	bl	8000c38 <__aeabi_d2f>
 800330e:	4603      	mov	r3, r0
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP + target.local_vel_now[1] * OMNI_OUTPUT_GAIN_FF_TARGET_NOW + target.local_vel_ff_factor[1] * OMNI_OUTPUT_GAIN_FF_TARGET_FINAL_DIFF;
 8003310:	6a60      	ldr	r0, [r4, #36]	; 0x24
  output.velocity[0] = -omni.robot_pos_diff[0] * OMNI_OUTPUT_GAIN_KP + target.local_vel_now[0] * OMNI_OUTPUT_GAIN_FF_TARGET_NOW + target.local_vel_ff_factor[0] * OMNI_OUTPUT_GAIN_FF_TARGET_FINAL_DIFF;
 8003312:	602b      	str	r3, [r5, #0]
  output.velocity[1] = -omni.robot_pos_diff[1] * OMNI_OUTPUT_GAIN_KP + target.local_vel_now[1] * OMNI_OUTPUT_GAIN_FF_TARGET_NOW + target.local_vel_ff_factor[1] * OMNI_OUTPUT_GAIN_FF_TARGET_FINAL_DIFF;
 8003314:	f7fd f940 	bl	8000598 <__aeabi_f2d>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	f7fc ffde 	bl	80002dc <__adddf3>
 8003320:	ec53 2b1d 	vmov	r2, r3, d13
 8003324:	f7fc ffda 	bl	80002dc <__adddf3>
 8003328:	ee68 7a09 	vmul.f32	s15, s16, s18
 800332c:	4606      	mov	r6, r0
 800332e:	ee17 0a90 	vmov	r0, s15
 8003332:	460f      	mov	r7, r1
 8003334:	f7fd f930 	bl	8000598 <__aeabi_f2d>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4630      	mov	r0, r6
 800333e:	4639      	mov	r1, r7
 8003340:	f7fc ffcc 	bl	80002dc <__adddf3>
 8003344:	f7fd fc78 	bl	8000c38 <__aeabi_d2f>
 8003348:	6068      	str	r0, [r5, #4]
}
 800334a:	ecbd 8b0e 	vpop	{d8-d14}
 800334e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (target.global_pos[i] - omni.odom[i] < -odom_diff_max) {
 8003352:	eddf 5a18 	vldr	s11, [pc, #96]	; 80033b4 <speed_control+0x338>
 8003356:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d50c      	bpl.n	800337a <speed_control+0x2fe>
      target.global_pos[i] = omni.odom[i] - odom_diff_max;
 8003360:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003364:	ee16 8a90 	vmov	r8, s13
 8003368:	edc4 7a01 	vstr	s15, [r4, #4]
 800336c:	e737      	b.n	80031de <speed_control+0x162>
      target.global_pos[i] = omni.odom[i] + odom_diff_max;
 800336e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003372:	4812      	ldr	r0, [pc, #72]	; (80033bc <speed_control+0x340>)
 8003374:	ed84 6a00 	vstr	s12, [r4]
 8003378:	e71e      	b.n	80031b8 <speed_control+0x13c>
    omni.global_odom_diff[i] = omni.odom[i] - target.global_pos[i];
 800337a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800337e:	ee17 8a90 	vmov	r8, s15
 8003382:	e72c      	b.n	80031de <speed_control+0x162>
    } else if (target.local_vel_ff_factor[i] < -FF_TARGET_FINAL_DIFF_LIMIT) {
 8003384:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    target.local_vel_ff_factor[i] = target.local_vel[i] - omni.local_odom_speed_mvf[i];
 8003388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	bf58      	it	pl
 8003392:	eeb0 7a67 	vmovpl.f32	s14, s15
 8003396:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800339a:	e74a      	b.n	8003232 <speed_control+0x1b6>
 800339c:	20000b54 	.word	0x20000b54
 80033a0:	20000900 	.word	0x20000900
 80033a4:	200008b0 	.word	0x200008b0
 80033a8:	200007e0 	.word	0x200007e0
 80033ac:	3b03126f 	.word	0x3b03126f
 80033b0:	3d888889 	.word	0x3d888889
 80033b4:	bd888889 	.word	0xbd888889
 80033b8:	c3160000 	.word	0xc3160000
 80033bc:	bd888889 	.word	0xbd888889

080033c0 <output_limit>:

void output_limit()
{
  if (debug.acc_step_down_flag) {
 80033c0:	4a3c      	ldr	r2, [pc, #240]	; (80034b4 <output_limit+0xf4>)
 80033c2:	f892 3031 	ldrb.w	r3, [r2, #49]	; 0x31
 80033c6:	b38b      	cbz	r3, 800342c <output_limit+0x6c>
    debug.limited_output = 0;  //スリップしてたら移動出力を0にする(仮)
 80033c8:	2300      	movs	r3, #0
 80033ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  } else {
    debug.limited_output = OUTPUT_XY_LIMIT;
  }

  float limit_gain = 0;
  if (output.velocity[0] > debug.limited_output) {
 80033cc:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <output_limit+0xf8>)
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80033d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	dd48      	ble.n	8003472 <output_limit+0xb2>
    limit_gain = output.velocity[0] / debug.limited_output;
 80033e0:	edd3 6a00 	vldr	s13, [r3]
 80033e4:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
    output.velocity[0] = debug.limited_output;
 80033e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ea:	6019      	str	r1, [r3, #0]
    output.velocity[1] /= limit_gain;
 80033ec:	ed93 6a01 	vldr	s12, [r3, #4]
 80033f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80033f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033f8:	edc3 7a01 	vstr	s15, [r3, #4]
    limit_gain = -output.velocity[0] / debug.limited_output;
    output.velocity[0] = -debug.limited_output;
    output.velocity[1] /= limit_gain;
  }

  if (output.velocity[1] > debug.limited_output) {
 80033fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003400:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8003404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	dd11      	ble.n	8003432 <output_limit+0x72>
    limit_gain = output.velocity[1] / debug.limited_output;
 800340e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003412:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
    output.velocity[1] = debug.limited_output;
 8003416:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003418:	605a      	str	r2, [r3, #4]
    output.velocity[0] /= limit_gain;
 800341a:	ed93 6a00 	vldr	s12, [r3]
 800341e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003426:	edc3 7a00 	vstr	s15, [r3]
 800342a:	4770      	bx	lr
    debug.limited_output = OUTPUT_XY_LIMIT;
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <output_limit+0xfc>)
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003430:	e7cc      	b.n	80033cc <output_limit+0xc>
  } else if (output.velocity[1] < -debug.limited_output) {
 8003432:	ed93 7a01 	vldr	s14, [r3, #4]
 8003436:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800343a:	eef1 7a67 	vneg.f32	s15, s15
 800343e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	d513      	bpl.n	8003470 <output_limit+0xb0>
    limit_gain = -output.velocity[1] / debug.limited_output;
 8003448:	ed93 6a01 	vldr	s12, [r3, #4]
 800344c:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
    output.velocity[1] = -debug.limited_output;
 8003450:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8003454:	eef1 7a67 	vneg.f32	s15, s15
 8003458:	edc3 7a01 	vstr	s15, [r3, #4]
    output.velocity[0] /= limit_gain;
 800345c:	ed93 7a00 	vldr	s14, [r3]
 8003460:	eeb1 7a47 	vneg.f32	s14, s14
 8003464:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8003468:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800346c:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8003470:	4770      	bx	lr
  } else if (output.velocity[0] < -debug.limited_output) {
 8003472:	ed93 7a00 	vldr	s14, [r3]
 8003476:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800347a:	eef1 7a67 	vneg.f32	s15, s15
 800347e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003486:	d5b9      	bpl.n	80033fc <output_limit+0x3c>
    limit_gain = -output.velocity[0] / debug.limited_output;
 8003488:	ed93 6a00 	vldr	s12, [r3]
 800348c:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
    output.velocity[0] = -debug.limited_output;
 8003490:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8003494:	eef1 7a67 	vneg.f32	s15, s15
 8003498:	edc3 7a00 	vstr	s15, [r3]
    output.velocity[1] /= limit_gain;
 800349c:	ed93 7a01 	vldr	s14, [r3, #4]
 80034a0:	eeb1 7a47 	vneg.f32	s14, s14
 80034a4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80034a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ac:	edc3 7a01 	vstr	s15, [r3, #4]
 80034b0:	e7a4      	b.n	80033fc <output_limit+0x3c>
 80034b2:	bf00      	nop
 80034b4:	200007a4 	.word	0x200007a4
 80034b8:	20000900 	.word	0x20000900
 80034bc:	41200000 	.word	0x41200000

080034c0 <send_accutuator_cmd_run>:

  send_accutuator_cmd_run();
}

void send_accutuator_cmd_run()
{
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ai_cmd.kick_power > 0) {
 80034c2:	4c3d      	ldr	r4, [pc, #244]	; (80035b8 <send_accutuator_cmd_run+0xf8>)
 80034c4:	edd4 7a03 	vldr	s15, [r4, #12]
 80034c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	dd07      	ble.n	80034e2 <send_accutuator_cmd_run+0x22>
    if (sys.kick_state == 0) {
 80034d2:	4d3a      	ldr	r5, [pc, #232]	; (80035bc <send_accutuator_cmd_run+0xfc>)
 80034d4:	8bab      	ldrh	r3, [r5, #28]
 80034d6:	b98b      	cbnz	r3, 80034fc <send_accutuator_cmd_run+0x3c>
      if (can_raw.ball_detection[0] == 1) {
 80034d8:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <send_accutuator_cmd_run+0x100>)
 80034da:	f893 607c 	ldrb.w	r6, [r3, #124]	; 0x7c
 80034de:	2e01      	cmp	r6, #1
 80034e0:	d038      	beq.n	8003554 <send_accutuator_cmd_run+0x94>
    }
  }

  static uint8_t can_sending_index = 0;

  can_sending_index++;
 80034e2:	4a38      	ldr	r2, [pc, #224]	; (80035c4 <send_accutuator_cmd_run+0x104>)
 80034e4:	7813      	ldrb	r3, [r2, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	b2db      	uxtb	r3, r3
  switch (can_sending_index) {
 80034ea:	1e59      	subs	r1, r3, #1
  can_sending_index++;
 80034ec:	7013      	strb	r3, [r2, #0]
  switch (can_sending_index) {
 80034ee:	2904      	cmp	r1, #4
 80034f0:	d809      	bhi.n	8003506 <send_accutuator_cmd_run+0x46>
 80034f2:	e8df f001 	tbb	[pc, r1]
 80034f6:	130a      	.short	0x130a
 80034f8:	231d      	.short	0x231d
 80034fa:	0b          	.byte	0x0b
 80034fb:	00          	.byte	0x00
      if (sys.kick_state > MAIN_LOOP_CYCLE / 2) {
 80034fc:	2bfa      	cmp	r3, #250	; 0xfa
 80034fe:	d823      	bhi.n	8003548 <send_accutuator_cmd_run+0x88>
        sys.kick_state++;
 8003500:	3301      	adds	r3, #1
 8003502:	83ab      	strh	r3, [r5, #28]
 8003504:	e7ed      	b.n	80034e2 <send_accutuator_cmd_run+0x22>
    case 5:
      actuator_motor5(ai_cmd.drible_power, 1.0);
      break;

    default:
      can_sending_index = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	7013      	strb	r3, [r2, #0]
      break;
  }
}
 800350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      actuator_motor5(ai_cmd.drible_power, 1.0);
 800350c:	ed94 0a02 	vldr	s0, [r4, #8]
 8003510:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
}
 8003514:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      actuator_motor5(ai_cmd.drible_power, 1.0);
 8003518:	f7fd bddc 	b.w	80010d4 <actuator_motor5>
      if (ai_cmd.chip_en == true || ai_cmd.dribbler_up_flag) {
 800351c:	7c23      	ldrb	r3, [r4, #16]
 800351e:	b91b      	cbnz	r3, 8003528 <send_accutuator_cmd_run+0x68>
 8003520:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03f      	beq.n	80035a8 <send_accutuator_cmd_run+0xe8>
}
 8003528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        actuator_dribbler_up();
 800352c:	f7fd bdf2 	b.w	8001114 <actuator_dribbler_up>
      actuator_kicker(1, 1);
 8003530:	2101      	movs	r1, #1
}
 8003532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      actuator_kicker(1, 1);
 8003536:	4608      	mov	r0, r1
 8003538:	f7fd be20 	b.w	800117c <actuator_kicker>
}
 800353c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      actuator_kicker_voltage(300.0);
 8003540:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80035c8 <send_accutuator_cmd_run+0x108>
 8003544:	f7fd be0a 	b.w	800115c <actuator_kicker_voltage>
        if (can_raw.ball_detection[0] == 0) {
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <send_accutuator_cmd_run+0x100>)
 800354a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1c7      	bne.n	80034e2 <send_accutuator_cmd_run+0x22>
 8003552:	e7d6      	b.n	8003502 <send_accutuator_cmd_run+0x42>
        uint8_t kick_power_param = (float)ai_cmd.kick_power * 255.0;
 8003554:	ee17 0a90 	vmov	r0, s15
 8003558:	f7fd f81e 	bl	8000598 <__aeabi_f2d>
 800355c:	a314      	add	r3, pc, #80	; (adr r3, 80035b0 <send_accutuator_cmd_run+0xf0>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fd f871 	bl	8000648 <__aeabi_dmul>
 8003566:	f7fd fb47 	bl	8000bf8 <__aeabi_d2uiz>
 800356a:	b2c7      	uxtb	r7, r0
        printf(" kick=%d\r\n", kick_power_param);
 800356c:	4639      	mov	r1, r7
 800356e:	4817      	ldr	r0, [pc, #92]	; (80035cc <send_accutuator_cmd_run+0x10c>)
 8003570:	f008 fa84 	bl	800ba7c <iprintf>
        if (ai_cmd.chip_en == true) {
 8003574:	7c21      	ldrb	r1, [r4, #16]
 8003576:	b991      	cbnz	r1, 800359e <send_accutuator_cmd_run+0xde>
          actuator_kicker(2, 0);
 8003578:	2002      	movs	r0, #2
 800357a:	f7fd fdff 	bl	800117c <actuator_kicker>
        actuator_kicker(3, (uint8_t)kick_power_param);
 800357e:	4639      	mov	r1, r7
 8003580:	2003      	movs	r0, #3
 8003582:	f7fd fdfb 	bl	800117c <actuator_kicker>
    target.global_pos[i] = omni.odom[i];
 8003586:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <send_accutuator_cmd_run+0x110>)
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <send_accutuator_cmd_run+0x114>)
 800358a:	6991      	ldr	r1, [r2, #24]
 800358c:	69d2      	ldr	r2, [r2, #28]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	6019      	str	r1, [r3, #0]
        sys.kick_state = 1;
 8003592:	2201      	movs	r2, #1
    ai_cmd.local_target_speed[i] = 0;
 8003594:	2300      	movs	r3, #0
        sys.kick_state = 1;
 8003596:	83aa      	strh	r2, [r5, #28]
    ai_cmd.local_target_speed[i] = 0;
 8003598:	6163      	str	r3, [r4, #20]
 800359a:	61a3      	str	r3, [r4, #24]
        sys.kick_state = 1;
 800359c:	e7a1      	b.n	80034e2 <send_accutuator_cmd_run+0x22>
          actuator_kicker(2, 1);
 800359e:	4631      	mov	r1, r6
 80035a0:	2002      	movs	r0, #2
 80035a2:	f7fd fdeb 	bl	800117c <actuator_kicker>
 80035a6:	e7ea      	b.n	800357e <send_accutuator_cmd_run+0xbe>
}
 80035a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        actuator_dribbler_down();
 80035ac:	f7fd bdc4 	b.w	8001138 <actuator_dribbler_down>
 80035b0:	00000000 	.word	0x00000000
 80035b4:	406fe000 	.word	0x406fe000
 80035b8:	2000066c 	.word	0x2000066c
 80035bc:	20000b30 	.word	0x20000b30
 80035c0:	200006c8 	.word	0x200006c8
 80035c4:	20000748 	.word	0x20000748
 80035c8:	43960000 	.word	0x43960000
 80035cc:	0800f6a0 	.word	0x0800f6a0
 80035d0:	200008b0 	.word	0x200008b0
 80035d4:	20000b54 	.word	0x20000b54

080035d8 <maintask_run>:
{
 80035d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (debug.latency_check_enabled == false) {
 80035dc:	4cd3      	ldr	r4, [pc, #844]	; (800392c <maintask_run+0x354>)
{
 80035de:	ed2d 8b08 	vpush	{d8-d11}
  if (debug.latency_check_enabled == false) {
 80035e2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
{
 80035e6:	b083      	sub	sp, #12
  if (debug.latency_check_enabled == false) {
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8185 	beq.w	80038f8 <maintask_run+0x320>
 80035ee:	4bd0      	ldr	r3, [pc, #832]	; (8003930 <maintask_run+0x358>)
 80035f0:	4ed0      	ldr	r6, [pc, #832]	; (8003934 <maintask_run+0x35c>)
 80035f2:	9301      	str	r3, [sp, #4]
  if (ai_cmd.local_vision_en_flag == false /* && ai_cmd.stop_request_flag == false*/) {
 80035f4:	4dd0      	ldr	r5, [pc, #832]	; (8003938 <maintask_run+0x360>)
 80035f6:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80a6 	beq.w	800374c <maintask_run+0x174>
    target.global_pos[i] = omni.odom[i];
 8003600:	f8df a360 	ldr.w	sl, [pc, #864]	; 8003964 <maintask_run+0x38c>
 8003604:	4acd      	ldr	r2, [pc, #820]	; (800393c <maintask_run+0x364>)
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 8003606:	ed96 9a02 	vldr	s18, [r6, #8]
    ai_cmd.local_target_speed[i] = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	616b      	str	r3, [r5, #20]
 800360e:	61ab      	str	r3, [r5, #24]
    target.velocity[0] = 0;
 8003610:	f8ca 3008 	str.w	r3, [sl, #8]
    target.velocity[1] = 0;
 8003614:	f8ca 300c 	str.w	r3, [sl, #12]
    target.global_pos[i] = omni.odom[i];
 8003618:	6993      	ldr	r3, [r2, #24]
 800361a:	f8ca 3000 	str.w	r3, [sl]
 800361e:	69d3      	ldr	r3, [r2, #28]
 8003620:	f8ca 3004 	str.w	r3, [sl, #4]
  accel_control();
 8003624:	f7ff fc08 	bl	8002e38 <accel_control>
  speed_control();
 8003628:	f7ff fd28 	bl	800307c <speed_control>
  output_limit();
 800362c:	f7ff fec8 	bl	80033c0 <output_limit>
  if (debug.latency_check_enabled) {
 8003630:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 815a 	beq.w	80038ee <maintask_run+0x316>
    if (debug.latency_check_seq_cnt > 0) {
 800363a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800363c:	2b00      	cmp	r3, #0
 800363e:	dd70      	ble.n	8003722 <maintask_run+0x14a>
      debug.latency_check_seq_cnt--;
 8003640:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003642:	3b01      	subs	r3, #1
 8003644:	6363      	str	r3, [r4, #52]	; 0x34
    debug.rotation_target_theta += (float)1 / MAIN_LOOP_CYCLE;  // 1 rad/s
 8003646:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800364a:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8003940 <maintask_run+0x368>
 800364e:	ee77 7a87 	vadd.f32	s15, s15, s14
  output.omega = (getAngleDiff(target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 8003652:	eef0 0a49 	vmov.f32	s1, s18
    debug.rotation_target_theta += (float)1 / MAIN_LOOP_CYCLE;  // 1 rad/s
 8003656:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    theta_control(debug.rotation_target_theta);
 800365a:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
  output.omega = (getAngleDiff(target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 800365e:	f002 fd5b 	bl	8006118 <getAngleDiff>
 8003662:	edd6 0a03 	vldr	s1, [r6, #12]
 8003666:	ee10 4a10 	vmov	r4, s0
 800366a:	ed96 0a02 	vldr	s0, [r6, #8]
 800366e:	f002 fd53 	bl	8006118 <getAngleDiff>
 8003672:	4620      	mov	r0, r4
 8003674:	ee10 4a10 	vmov	r4, s0
 8003678:	f7fc ff8e 	bl	8000598 <__aeabi_f2d>
 800367c:	4bb1      	ldr	r3, [pc, #708]	; (8003944 <maintask_run+0x36c>)
 800367e:	2200      	movs	r2, #0
 8003680:	f7fc ffe2 	bl	8000648 <__aeabi_dmul>
 8003684:	4606      	mov	r6, r0
 8003686:	4620      	mov	r0, r4
 8003688:	460f      	mov	r7, r1
 800368a:	f7fc ff85 	bl	8000598 <__aeabi_f2d>
 800368e:	4bae      	ldr	r3, [pc, #696]	; (8003948 <maintask_run+0x370>)
 8003690:	2200      	movs	r2, #0
 8003692:	f7fc ffd9 	bl	8000648 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4630      	mov	r0, r6
 800369c:	4639      	mov	r1, r7
 800369e:	f7fc fe1b 	bl	80002d8 <__aeabi_dsub>
 80036a2:	f7fd fac9 	bl	8000c38 <__aeabi_d2f>
 80036a6:	4ba9      	ldr	r3, [pc, #676]	; (800394c <maintask_run+0x374>)
  if (sys.main_mode != MAIN_MODE_CMD_DEBUG_MODE && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 80036a8:	9a01      	ldr	r2, [sp, #4]
  output.omega = (getAngleDiff(target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 80036aa:	6118      	str	r0, [r3, #16]
  if (output.omega > OMEGA_LIMIT) {
 80036ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80036b0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80036b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = OMEGA_LIMIT;
 80036bc:	bfc8      	it	gt
 80036be:	edc3 7a04 	vstrgt	s15, [r3, #16]
  if (output.omega < -OMEGA_LIMIT) {
 80036c2:	ed93 7a04 	vldr	s14, [r3, #16]
 80036c6:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 80036ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output.omega = -OMEGA_LIMIT;
 80036d2:	bf48      	it	mi
 80036d4:	edc3 7a04 	vstrmi	s15, [r3, #16]
  if (sys.main_mode != MAIN_MODE_CMD_DEBUG_MODE && (ai_cmd.stop_request_flag || ai_cmd.vision_lost_flag)) {
 80036d8:	7c12      	ldrb	r2, [r2, #16]
 80036da:	2a02      	cmp	r2, #2
 80036dc:	d025      	beq.n	800372a <maintask_run+0x152>
 80036de:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80036e0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80036e4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80036e8:	b1fa      	cbz	r2, 800372a <maintask_run+0x152>
    target.global_pos[i] = omni.odom[i];
 80036ea:	4b94      	ldr	r3, [pc, #592]	; (800393c <maintask_run+0x364>)
    ai_cmd.local_target_speed[i] = 0;
 80036ec:	eddf 1a98 	vldr	s3, [pc, #608]	; 8003950 <maintask_run+0x378>
    target.global_pos[i] = omni.odom[i];
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f8ca 2000 	str.w	r2, [sl]
    omni_move(0.0, 0.0, 0.0, 0.0);
 80036f8:	eeb0 1a61 	vmov.f32	s2, s3
 80036fc:	eef0 0a61 	vmov.f32	s1, s3
 8003700:	eeb0 0a61 	vmov.f32	s0, s3
    target.global_pos[i] = omni.odom[i];
 8003704:	f8ca 3004 	str.w	r3, [sl, #4]
    ai_cmd.local_target_speed[i] = 0;
 8003708:	edc5 1a05 	vstr	s3, [r5, #20]
 800370c:	edc5 1a06 	vstr	s3, [r5, #24]
    omni_move(0.0, 0.0, 0.0, 0.0);
 8003710:	f001 fe7a 	bl	8005408 <omni_move>
}
 8003714:	b003      	add	sp, #12
 8003716:	ecbd 8b08 	vpop	{d8-d11}
 800371a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  send_accutuator_cmd_run();
 800371e:	f7ff becf 	b.w	80034c0 <send_accutuator_cmd_run>
      debug.latency_check_enabled = false;
 8003722:	2300      	movs	r3, #0
 8003724:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 8003728:	e78d      	b.n	8003646 <maintask_run+0x6e>
    omni_move(output.velocity[0], output.velocity[1], output.omega, OMNI_OUTPUT_LIMIT);
 800372a:	ed93 0a00 	vldr	s0, [r3]
 800372e:	edd3 0a01 	vldr	s1, [r3, #4]
 8003732:	ed93 1a04 	vldr	s2, [r3, #16]
 8003736:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 800373a:	f001 fe65 	bl	8005408 <omni_move>
}
 800373e:	b003      	add	sp, #12
 8003740:	ecbd 8b08 	vpop	{d8-d11}
 8003744:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  send_accutuator_cmd_run();
 8003748:	f7ff beba 	b.w	80034c0 <send_accutuator_cmd_run>
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 800374c:	4f81      	ldr	r7, [pc, #516]	; (8003954 <maintask_run+0x37c>)
 800374e:	69b8      	ldr	r0, [r7, #24]
 8003750:	f7fc ff22 	bl	8000598 <__aeabi_f2d>
 8003754:	ed96 9a02 	vldr	s18, [r6, #8]
 8003758:	eef1 7a49 	vneg.f32	s15, s18
 800375c:	4682      	mov	sl, r0
 800375e:	ee17 0a90 	vmov	r0, s15
 8003762:	468b      	mov	fp, r1
 8003764:	f7fc ff18 	bl	8000598 <__aeabi_f2d>
 8003768:	ec41 0b10 	vmov	d0, r0, r1
 800376c:	ec41 0b18 	vmov	d8, r0, r1
 8003770:	f00a fb82 	bl	800de78 <cos>
 8003774:	69f8      	ldr	r0, [r7, #28]
 8003776:	eeb0 ba40 	vmov.f32	s22, s0
 800377a:	eef0 ba60 	vmov.f32	s23, s1
 800377e:	f7fc ff0b 	bl	8000598 <__aeabi_f2d>
 8003782:	ec41 0b1a 	vmov	d10, r0, r1
 8003786:	ee19 0a10 	vmov	r0, s18
 800378a:	f7fc ff05 	bl	8000598 <__aeabi_f2d>
 800378e:	ec41 0b10 	vmov	d0, r0, r1
 8003792:	f00a fbc5 	bl	800df20 <sin>
 8003796:	ec53 2b1b 	vmov	r2, r3, d11
 800379a:	4659      	mov	r1, fp
 800379c:	4650      	mov	r0, sl
 800379e:	ec59 8b10 	vmov	r8, r9, d0
 80037a2:	f7fc ff51 	bl	8000648 <__aeabi_dmul>
 80037a6:	4642      	mov	r2, r8
 80037a8:	464b      	mov	r3, r9
 80037aa:	4680      	mov	r8, r0
 80037ac:	4689      	mov	r9, r1
 80037ae:	ec51 0b1a 	vmov	r0, r1, d10
 80037b2:	f7fc ff49 	bl	8000648 <__aeabi_dmul>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4640      	mov	r0, r8
 80037bc:	4649      	mov	r1, r9
 80037be:	f7fc fd8d 	bl	80002dc <__adddf3>
 80037c2:	f7fd fa39 	bl	8000c38 <__aeabi_d2f>
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 80037c6:	eeb0 0a48 	vmov.f32	s0, s16
 80037ca:	eef0 0a68 	vmov.f32	s1, s17
    integ.local_target_diff[0] = integ.position_diff[0] * cos(-imu.yaw_angle_rad) - integ.position_diff[1] * sin(-imu.yaw_angle_rad);
 80037ce:	63b8      	str	r0, [r7, #56]	; 0x38
 80037d0:	ee08 0a90 	vmov	s17, r0
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 80037d4:	f00a fba4 	bl	800df20 <sin>
 80037d8:	4659      	mov	r1, fp
 80037da:	ec53 2b10 	vmov	r2, r3, d0
 80037de:	4650      	mov	r0, sl
 80037e0:	f7fc ff32 	bl	8000648 <__aeabi_dmul>
 80037e4:	ec53 2b1a 	vmov	r2, r3, d10
 80037e8:	4680      	mov	r8, r0
 80037ea:	4689      	mov	r9, r1
 80037ec:	ec51 0b1b 	vmov	r0, r1, d11
 80037f0:	f7fc ff2a 	bl	8000648 <__aeabi_dmul>
 80037f4:	460b      	mov	r3, r1
 80037f6:	4602      	mov	r2, r0
 80037f8:	4649      	mov	r1, r9
 80037fa:	4640      	mov	r0, r8
 80037fc:	f7fc fd6e 	bl	80002dc <__adddf3>
 8003800:	f7fd fa1a 	bl	8000c38 <__aeabi_d2f>
      if (integ.local_target_diff[i] < CMB_CTRL_DIFF_DEAD_ZONE && integ.local_target_diff[i] > -CMB_CTRL_DIFF_DEAD_ZONE) {
 8003804:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003958 <maintask_run+0x380>
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 8003808:	9b01      	ldr	r3, [sp, #4]
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 800380a:	63f8      	str	r0, [r7, #60]	; 0x3c
      if (integ.local_target_diff[i] < CMB_CTRL_DIFF_DEAD_ZONE && integ.local_target_diff[i] > -CMB_CTRL_DIFF_DEAD_ZONE) {
 800380c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8003810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    integ.local_target_diff[1] = integ.position_diff[0] * sin(-imu.yaw_angle_rad) + integ.position_diff[1] * cos(-imu.yaw_angle_rad);
 8003814:	ee08 0a10 	vmov	s16, r0
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 8003818:	f893 b010 	ldrb.w	fp, [r3, #16]
      if (integ.local_target_diff[i] < CMB_CTRL_DIFF_DEAD_ZONE && integ.local_target_diff[i] > -CMB_CTRL_DIFF_DEAD_ZONE) {
 800381c:	d507      	bpl.n	800382e <maintask_run+0x256>
 800381e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800395c <maintask_run+0x384>
 8003822:	eef4 8ae7 	vcmpe.f32	s17, s15
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	f300 80c7 	bgt.w	80039bc <maintask_run+0x3e4>
      if (integ.local_target_diff[i] < -CMB_CTRL_DIFF_LIMIT) {
 800382e:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800395c <maintask_run+0x384>
 8003832:	eef4 8ae7 	vcmpe.f32	s17, s15
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	f140 80ce 	bpl.w	80039da <maintask_run+0x402>
        integ.local_target_diff[i] = -CMB_CTRL_DIFF_LIMIT;
 800383e:	eef0 8a67 	vmov.f32	s17, s15
 8003842:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 8003846:	f1bb 0f00 	cmp.w	fp, #0
 800384a:	f000 808d 	beq.w	8003968 <maintask_run+0x390>
        if (ai_cmd.local_target_speed[i] * integ.local_target_diff[i] < 0) {                                       // 位置フィードバック項が制動方向の場合
 800384e:	edd5 9a05 	vldr	s19, [r5, #20]
      if (integ.local_target_diff[i] < CMB_CTRL_DIFF_DEAD_ZONE && integ.local_target_diff[i] > -CMB_CTRL_DIFF_DEAD_ZONE) {
 8003852:	eddf 7a41 	vldr	s15, [pc, #260]	; 8003958 <maintask_run+0x380>
          target.velocity[i] = ai_cmd.local_target_speed[i];  // ローカル統合制御なし
 8003856:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8003964 <maintask_run+0x38c>
      if (integ.local_target_diff[i] < CMB_CTRL_DIFF_DEAD_ZONE && integ.local_target_diff[i] > -CMB_CTRL_DIFF_DEAD_ZONE) {
 800385a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          target.velocity[i] = ai_cmd.local_target_speed[i];  // ローカル統合制御なし
 8003862:	edca 9a02 	vstr	s19, [sl, #8]
      if (integ.local_target_diff[i] < CMB_CTRL_DIFF_DEAD_ZONE && integ.local_target_diff[i] > -CMB_CTRL_DIFF_DEAD_ZONE) {
 8003866:	d506      	bpl.n	8003876 <maintask_run+0x29e>
 8003868:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800395c <maintask_run+0x384>
 800386c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003874:	dc34      	bgt.n	80038e0 <maintask_run+0x308>
      if (integ.local_target_diff[i] < -CMB_CTRL_DIFF_LIMIT) {
 8003876:	eddf 7a39 	vldr	s15, [pc, #228]	; 800395c <maintask_run+0x384>
 800387a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	f140 809e 	bpl.w	80039c2 <maintask_run+0x3ea>
        integ.local_target_diff[i] = CMB_CTRL_DIFF_LIMIT;
 8003886:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800388a:	eeb0 8a67 	vmov.f32	s16, s15
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 800388e:	f1bb 0f00 	cmp.w	fp, #0
 8003892:	d127      	bne.n	80038e4 <maintask_run+0x30c>
        if (ai_cmd.local_target_speed[i] * integ.local_target_diff[i] < 0) {                                       // 位置フィードバック項が制動方向の場合
 8003894:	edd5 8a06 	vldr	s17, [r5, #24]
 8003898:	ee68 7a88 	vmul.f32	s15, s17, s16
 800389c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a4:	d520      	bpl.n	80038e8 <maintask_run+0x310>
          target.velocity[i] = ai_cmd.local_target_speed[i] + (integ.local_target_diff[i] * CMB_CTRL_GAIN) * 0.5;  //ローカル統合制御あり
 80038a6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80038aa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80038ae:	ee17 0a90 	vmov	r0, s15
 80038b2:	f7fc fe71 	bl	8000598 <__aeabi_f2d>
 80038b6:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <maintask_run+0x388>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	f7fc fec5 	bl	8000648 <__aeabi_dmul>
 80038be:	4680      	mov	r8, r0
 80038c0:	ee18 0a90 	vmov	r0, s17
 80038c4:	4689      	mov	r9, r1
 80038c6:	f7fc fe67 	bl	8000598 <__aeabi_f2d>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4640      	mov	r0, r8
 80038d0:	4649      	mov	r1, r9
 80038d2:	f7fc fd03 	bl	80002dc <__adddf3>
 80038d6:	f7fd f9af 	bl	8000c38 <__aeabi_d2f>
 80038da:	ee08 0a90 	vmov	s17, r0
 80038de:	e003      	b.n	80038e8 <maintask_run+0x310>
        integ.local_target_diff[i] = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        target.velocity[i] = ai_cmd.local_target_speed[i];  // ローカル統合制御なし
 80038e4:	edd5 8a06 	vldr	s17, [r5, #24]
          target.velocity[i] = ai_cmd.local_target_speed[i];  // ローカル統合制御なし
 80038e8:	edca 8a03 	vstr	s17, [sl, #12]
    for (int i = 0; i < 2; i++) {
 80038ec:	e69a      	b.n	8003624 <maintask_run+0x4c>
  output.omega = (getAngleDiff(target_theta, imu.yaw_angle_rad) * OMEGA_GAIN_KP) - (getAngleDiff(imu.yaw_angle_rad, imu.pre_yaw_angle_rad) * OMEGA_GAIN_KD);
 80038ee:	ed95 0a00 	vldr	s0, [r5]
 80038f2:	eef0 0a49 	vmov.f32	s1, s18
 80038f6:	e6b2      	b.n	800365e <maintask_run+0x86>
    if (decode_SW(sys.sw_data) & 0b00000001) {
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <maintask_run+0x358>)
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	8c18      	ldrh	r0, [r3, #32]
 80038fe:	f002 fce3 	bl	80062c8 <decode_SW>
 8003902:	f010 0001 	ands.w	r0, r0, #1
 8003906:	d056      	beq.n	80039b6 <maintask_run+0x3de>
      debug.latency_check_seq_cnt++;
 8003908:	6b63      	ldr	r3, [r4, #52]	; 0x34
        debug.rotation_target_theta = imu.yaw_angle;
 800390a:	4e0a      	ldr	r6, [pc, #40]	; (8003934 <maintask_run+0x35c>)
      debug.latency_check_seq_cnt++;
 800390c:	3301      	adds	r3, #1
 800390e:	6363      	str	r3, [r4, #52]	; 0x34
      if (debug.latency_check_seq_cnt > 1000) {
 8003910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003916:	f77f ae6d 	ble.w	80035f4 <maintask_run+0x1c>
        debug.rotation_target_theta = imu.yaw_angle;
 800391a:	6833      	ldr	r3, [r6, #0]
        debug.latency_check_enabled = true;
 800391c:	2101      	movs	r1, #1
        debug.latency_check_seq_cnt = MAIN_LOOP_CYCLE * 10;
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
        debug.latency_check_enabled = true;
 8003922:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
        debug.latency_check_seq_cnt = MAIN_LOOP_CYCLE * 10;
 8003926:	6362      	str	r2, [r4, #52]	; 0x34
        debug.rotation_target_theta = imu.yaw_angle;
 8003928:	63a3      	str	r3, [r4, #56]	; 0x38
 800392a:	e663      	b.n	80035f4 <maintask_run+0x1c>
 800392c:	200007a4 	.word	0x200007a4
 8003930:	20000b30 	.word	0x20000b30
 8003934:	200007e0 	.word	0x200007e0
 8003938:	2000066c 	.word	0x2000066c
 800393c:	200008b0 	.word	0x200008b0
 8003940:	3b03126f 	.word	0x3b03126f
 8003944:	40640000 	.word	0x40640000
 8003948:	40af4000 	.word	0x40af4000
 800394c:	20000900 	.word	0x20000900
 8003950:	00000000 	.word	0x00000000
 8003954:	200007f4 	.word	0x200007f4
 8003958:	3e99999a 	.word	0x3e99999a
 800395c:	be99999a 	.word	0xbe99999a
 8003960:	3fe00000 	.word	0x3fe00000
 8003964:	20000b54 	.word	0x20000b54
        if (ai_cmd.local_target_speed[i] * integ.local_target_diff[i] < 0) {                                       // 位置フィードバック項が制動方向の場合
 8003968:	edd5 9a05 	vldr	s19, [r5, #20]
 800396c:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8003970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	f57f af6b 	bpl.w	8003852 <maintask_run+0x27a>
          target.velocity[i] = ai_cmd.local_target_speed[i] + (integ.local_target_diff[i] * CMB_CTRL_GAIN) * 0.5;  //ローカル統合制御あり
 800397c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003980:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003984:	ee17 0a90 	vmov	r0, s15
 8003988:	f7fc fe06 	bl	8000598 <__aeabi_f2d>
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <maintask_run+0x41c>)
 800398e:	2200      	movs	r2, #0
 8003990:	f7fc fe5a 	bl	8000648 <__aeabi_dmul>
 8003994:	4680      	mov	r8, r0
 8003996:	ee19 0a90 	vmov	r0, s19
 800399a:	4689      	mov	r9, r1
 800399c:	f7fc fdfc 	bl	8000598 <__aeabi_f2d>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4640      	mov	r0, r8
 80039a6:	4649      	mov	r1, r9
 80039a8:	f7fc fc98 	bl	80002dc <__adddf3>
 80039ac:	f7fd f944 	bl	8000c38 <__aeabi_d2f>
 80039b0:	ee09 0a90 	vmov	s19, r0
 80039b4:	e74d      	b.n	8003852 <maintask_run+0x27a>
      debug.latency_check_seq_cnt = 0;
 80039b6:	4e10      	ldr	r6, [pc, #64]	; (80039f8 <maintask_run+0x420>)
 80039b8:	6360      	str	r0, [r4, #52]	; 0x34
 80039ba:	e61b      	b.n	80035f4 <maintask_run+0x1c>
        integ.local_target_diff[i] = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 80039c0:	e745      	b.n	800384e <maintask_run+0x276>
      } else if (integ.local_target_diff[i] > CMB_CTRL_DIFF_LIMIT) {
 80039c2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80039fc <maintask_run+0x424>
 80039c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80039ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ce:	f73f af5a 	bgt.w	8003886 <maintask_run+0x2ae>
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 80039d2:	f1bb 0f00 	cmp.w	fp, #0
 80039d6:	d185      	bne.n	80038e4 <maintask_run+0x30c>
 80039d8:	e75c      	b.n	8003894 <maintask_run+0x2bc>
      } else if (integ.local_target_diff[i] > CMB_CTRL_DIFF_LIMIT) {
 80039da:	eddf 7a08 	vldr	s15, [pc, #32]	; 80039fc <maintask_run+0x424>
 80039de:	eef4 8ae7 	vcmpe.f32	s17, s15
 80039e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e6:	f73f af2a 	bgt.w	800383e <maintask_run+0x266>
      if (sys.main_mode == MAIN_MODE_COMBINATION_CONTROL) {
 80039ea:	f1bb 0f00 	cmp.w	fp, #0
 80039ee:	d0bb      	beq.n	8003968 <maintask_run+0x390>
 80039f0:	e72d      	b.n	800384e <maintask_run+0x276>
 80039f2:	bf00      	nop
 80039f4:	3fe00000 	.word	0x3fe00000
 80039f8:	200007e0 	.word	0x200007e0
 80039fc:	3e99999a 	.word	0x3e99999a

08003a00 <HAL_TIM_PeriodElapsedCallback>:
{
 8003a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  mouse.integral_loop_cnt++;
 8003a04:	49b5      	ldr	r1, [pc, #724]	; (8003cdc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003a06:	4db6      	ldr	r5, [pc, #728]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
  mouse.integral_loop_cnt++;
 8003a08:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003a0a:	696a      	ldr	r2, [r5, #20]
  pre_sw_mode = sw_mode;
 8003a0c:	4eb5      	ldr	r6, [pc, #724]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003a0e:	4fb6      	ldr	r7, [pc, #728]	; (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003a10:	48b6      	ldr	r0, [pc, #728]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
  mouse.integral_loop_cnt++;
 8003a12:	3301      	adds	r3, #1
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003a14:	3202      	adds	r2, #2
{
 8003a16:	b082      	sub	sp, #8
  mouse.integral_loop_cnt++;
 8003a18:	630b      	str	r3, [r1, #48]	; 0x30
  pre_sw_mode = sw_mode;
 8003a1a:	7833      	ldrb	r3, [r6, #0]
 8003a1c:	703b      	strb	r3, [r7, #0]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003a1e:	2120      	movs	r1, #32
  sys.system_time_ms += (1000 / MAIN_LOOP_CYCLE);
 8003a20:	616a      	str	r2, [r5, #20]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003a22:	f004 f9d3 	bl	8007dcc <HAL_GPIO_ReadPin>
 8003a26:	2140      	movs	r1, #64	; 0x40
 8003a28:	4604      	mov	r4, r0
 8003a2a:	48b0      	ldr	r0, [pc, #704]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003a2c:	f004 f9ce 	bl	8007dcc <HAL_GPIO_ReadPin>
 8003a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a34:	4680      	mov	r8, r0
 8003a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a3a:	f004 f9c7 	bl	8007dcc <HAL_GPIO_ReadPin>
 8003a3e:	f1c4 040f 	rsb	r4, r4, #15
 8003a42:	eba4 0448 	sub.w	r4, r4, r8, lsl #1
 8003a46:	2104      	movs	r1, #4
 8003a48:	4680      	mov	r8, r0
 8003a4a:	48a9      	ldr	r0, [pc, #676]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003a4c:	f004 f9be 	bl	8007dcc <HAL_GPIO_ReadPin>
 8003a50:	b2e4      	uxtb	r4, r4
 8003a52:	eba4 04c8 	sub.w	r4, r4, r8, lsl #3
 8003a56:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
  if (sys.error_flag) {
 8003a5a:	782b      	ldrb	r3, [r5, #0]
  return 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003a5c:	b2c0      	uxtb	r0, r0
  sw_mode = getModeSwitch();
 8003a5e:	7030      	strb	r0, [r6, #0]
  if (sys.error_flag) {
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d074      	beq.n	8003b4e <HAL_TIM_PeriodElapsedCallback+0x14e>
    if (sys.error_id < 4 && sys.error_info == BLDC_ERROR_OVER_CURRENT && sys.error_resume_cnt < 10) {
 8003a64:	886b      	ldrh	r3, [r5, #2]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d95d      	bls.n	8003b26 <HAL_TIM_PeriodElapsedCallback+0x126>
    target.global_pos[i] = omni.odom[i];
 8003a6a:	48a2      	ldr	r0, [pc, #648]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003a6c:	49a2      	ldr	r1, [pc, #648]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003a6e:	6984      	ldr	r4, [r0, #24]
    ai_cmd.local_target_speed[i] = 0;
 8003a70:	4ba2      	ldr	r3, [pc, #648]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
    target.global_pos[i] = omni.odom[i];
 8003a72:	69c0      	ldr	r0, [r0, #28]
 8003a74:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 8003a76:	2200      	movs	r2, #0
      sys.main_mode = MAIN_MODE_ERROR;
 8003a78:	2409      	movs	r4, #9
 8003a7a:	742c      	strb	r4, [r5, #16]
    ai_cmd.local_target_speed[i] = 0;
 8003a7c:	615a      	str	r2, [r3, #20]
    target.global_pos[i] = omni.odom[i];
 8003a7e:	6048      	str	r0, [r1, #4]
    ai_cmd.local_target_speed[i] = 0;
 8003a80:	619a      	str	r2, [r3, #24]
  if (sys.system_time_ms < sys.stop_flag_request_time) {
 8003a82:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d275      	bcs.n	8003b76 <HAL_TIM_PeriodElapsedCallback+0x176>
    target.global_pos[i] = omni.odom[i];
 8003a8a:	489a      	ldr	r0, [pc, #616]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
    ai_cmd.local_target_speed[i] = 0;
 8003a8c:	4b9b      	ldr	r3, [pc, #620]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
    target.global_pos[i] = omni.odom[i];
 8003a8e:	499a      	ldr	r1, [pc, #616]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003a90:	6984      	ldr	r4, [r0, #24]
 8003a92:	69c0      	ldr	r0, [r0, #28]
 8003a94:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 8003a96:	2200      	movs	r2, #0
 8003a98:	615a      	str	r2, [r3, #20]
 8003a9a:	619a      	str	r2, [r3, #24]
    target.global_pos[i] = omni.odom[i];
 8003a9c:	6048      	str	r0, [r1, #4]
    sys.stop_flag = true;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	706b      	strb	r3, [r5, #1]
  yawFilter();
 8003aa2:	f7ff f8c1 	bl	8002c28 <yawFilter>
  omniOdometory();
 8003aa6:	f001 fa43 	bl	8004f30 <omniOdometory>
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8003aaa:	4b95      	ldr	r3, [pc, #596]	; (8003d00 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003aac:	4c95      	ldr	r4, [pc, #596]	; (8003d04 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8003aae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003ab2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003ab6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 8003aba:	4f93      	ldr	r7, [pc, #588]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x308>)
  switch (sys.main_mode) {
 8003abc:	7c2a      	ldrb	r2, [r5, #16]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8003abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003aca:	ed94 7a08 	vldr	s14, [r4, #32]
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 8003ad2:	edd7 6a02 	vldr	s13, [r7, #8]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8003ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 8003ada:	ed97 7a03 	vldr	s14, [r7, #12]
  debug.true_out_total_spi += output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 8003ade:	edc4 7a08 	vstr	s15, [r4, #32]
  debug.true_fb_toral_spin += can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3];
 8003ae2:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8003ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aea:	edd7 6a04 	vldr	s13, [r7, #16]
 8003aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003af2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003afe:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  debug.true_cycle_cnt++;
 8003b02:	68a3      	ldr	r3, [r4, #8]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60a3      	str	r3, [r4, #8]
  switch (sys.main_mode) {
 8003b08:	2a09      	cmp	r2, #9
 8003b0a:	f200 8113 	bhi.w	8003d34 <HAL_TIM_PeriodElapsedCallback+0x334>
 8003b0e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003b12:	0034      	.short	0x0034
 8003b14:	01090034 	.word	0x01090034
 8003b18:	00ce00df 	.word	0x00ce00df
 8003b1c:	00d800c7 	.word	0x00d800c7
 8003b20:	00d30111 	.word	0x00d30111
 8003b24:	0056      	.short	0x0056
    if (sys.error_id < 4 && sys.error_info == BLDC_ERROR_OVER_CURRENT && sys.error_resume_cnt < 10) {
 8003b26:	88ab      	ldrh	r3, [r5, #4]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d19e      	bne.n	8003a6a <HAL_TIM_PeriodElapsedCallback+0x6a>
 8003b2c:	68eb      	ldr	r3, [r5, #12]
 8003b2e:	2b09      	cmp	r3, #9
 8003b30:	d89b      	bhi.n	8003a6a <HAL_TIM_PeriodElapsedCallback+0x6a>
      sys.stop_flag_request_time = sys.system_time_ms + 3000;
 8003b32:	696a      	ldr	r2, [r5, #20]
      sys.error_flag = 0;
 8003b34:	2000      	movs	r0, #0
      sys.error_value = 0;
 8003b36:	2100      	movs	r1, #0
      sys.error_resume_cnt++;
 8003b38:	3301      	adds	r3, #1
      sys.stop_flag_request_time = sys.system_time_ms + 3000;
 8003b3a:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
      sys.error_flag = 0;
 8003b3e:	7028      	strb	r0, [r5, #0]
      sys.error_info = 0;
 8003b40:	80a8      	strh	r0, [r5, #4]
      sys.error_value = 0;
 8003b42:	60a9      	str	r1, [r5, #8]
      sys.error_resume_cnt++;
 8003b44:	60eb      	str	r3, [r5, #12]
      sys.stop_flag_request_time = sys.system_time_ms + 3000;
 8003b46:	61aa      	str	r2, [r5, #24]
      actuator_power_ONOFF(0);
 8003b48:	f7fd fb2e 	bl	80011a8 <actuator_power_ONOFF>
 8003b4c:	e799      	b.n	8003a82 <HAL_TIM_PeriodElapsedCallback+0x82>
  } else if (sw_mode != pre_sw_mode) {  // reset
 8003b4e:	783b      	ldrb	r3, [r7, #0]
 8003b50:	4283      	cmp	r3, r0
 8003b52:	f000 814f 	beq.w	8003df4 <HAL_TIM_PeriodElapsedCallback+0x3f4>
    ai_cmd.local_target_speed[i] = 0;
 8003b56:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
    target.global_pos[i] = omni.odom[i];
 8003b58:	4866      	ldr	r0, [pc, #408]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8003b5a:	4967      	ldr	r1, [pc, #412]	; (8003cf8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8003b5c:	6984      	ldr	r4, [r0, #24]
 8003b5e:	600c      	str	r4, [r1, #0]
    ai_cmd.local_target_speed[i] = 0;
 8003b60:	2200      	movs	r2, #0
 8003b62:	615a      	str	r2, [r3, #20]
 8003b64:	619a      	str	r2, [r3, #24]
  if (sys.system_time_ms < sys.stop_flag_request_time) {
 8003b66:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
    target.global_pos[i] = omni.odom[i];
 8003b6a:	69c0      	ldr	r0, [r0, #28]
 8003b6c:	6048      	str	r0, [r1, #4]
    sys.main_mode = MAIN_MODE_NONE;
 8003b6e:	2407      	movs	r4, #7
  if (sys.system_time_ms < sys.stop_flag_request_time) {
 8003b70:	429a      	cmp	r2, r3
    sys.main_mode = MAIN_MODE_NONE;
 8003b72:	742c      	strb	r4, [r5, #16]
  if (sys.system_time_ms < sys.stop_flag_request_time) {
 8003b74:	d389      	bcc.n	8003a8a <HAL_TIM_PeriodElapsedCallback+0x8a>
    sys.stop_flag = false;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e792      	b.n	8003aa0 <HAL_TIM_PeriodElapsedCallback+0xa0>
      if (connection.connected_ai == false || sys.stop_flag) {
 8003b7a:	4e64      	ldr	r6, [pc, #400]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003b7c:	7833      	ldrb	r3, [r6, #0]
 8003b7e:	b11b      	cbz	r3, 8003b88 <HAL_TIM_PeriodElapsedCallback+0x188>
 8003b80:	786b      	ldrb	r3, [r5, #1]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80d3 	beq.w	8003d2e <HAL_TIM_PeriodElapsedCallback+0x32e>

void maintask_stop()
{
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003b88:	eddf 1a61 	vldr	s3, [pc, #388]	; 8003d10 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003b8c:	eef0 0a61 	vmov.f32	s1, s3
 8003b90:	eeb0 0a61 	vmov.f32	s0, s3
 8003b94:	eeb0 1a61 	vmov.f32	s2, s3
 8003b98:	f001 fc36 	bl	8005408 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003b9c:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8003d10 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003ba0:	eeb0 0a60 	vmov.f32	s0, s1
 8003ba4:	f7fd fa96 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003ba8:	2100      	movs	r1, #0
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7fd fae6 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003bb0:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8003d10 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003bb4:	f7fd fad2 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003bb8:	f7fd fabe 	bl	8001138 <actuator_dribbler_down>
}
 8003bbc:	e028      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003bbe:	eddf 1a54 	vldr	s3, [pc, #336]	; 8003d10 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003bc2:	4e52      	ldr	r6, [pc, #328]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003bc4:	eef0 0a61 	vmov.f32	s1, s3
 8003bc8:	eeb0 0a61 	vmov.f32	s0, s3
 8003bcc:	eeb0 1a61 	vmov.f32	s2, s3
 8003bd0:	f001 fc1a 	bl	8005408 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003bd4:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8003d10 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003bd8:	eeb0 0a60 	vmov.f32	s0, s1
 8003bdc:	f7fd fa7a 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003be0:	2100      	movs	r1, #0
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fd faca 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003be8:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003d10 <HAL_TIM_PeriodElapsedCallback+0x310>
 8003bec:	f7fd fab6 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003bf0:	f7fd faa2 	bl	8001138 <actuator_dribbler_down>

void send_can_error()
{
  uint8_t senddata_error[8];
  can1_send(0x000, senddata_error);
 8003bf4:	4669      	mov	r1, sp
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fd ffd8 	bl	8001bac <can1_send>
  can2_send(0x000, senddata_error);
 8003bfc:	4669      	mov	r1, sp
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fe f824 	bl	8001c4c <can2_send>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003c04:	4839      	ldr	r0, [pc, #228]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c0c:	f004 f8e4 	bl	8007dd8 <HAL_GPIO_WritePin>
  if (can_raw.power_voltage[5] < LOW_VOLTAGE_LIMIT && can_raw.power_voltage[5] != 0.0) {
 8003c10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003c14:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8003c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	f140 80a4 	bpl.w	8003d6c <HAL_TIM_PeriodElapsedCallback+0x36c>
 8003c24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	f000 809e 	beq.w	8003d6c <HAL_TIM_PeriodElapsedCallback+0x36c>
    buzzer_cnt++;
 8003c30:	4a38      	ldr	r2, [pc, #224]	; (8003d14 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	3301      	adds	r3, #1
    if (buzzer_cnt > 100) {
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	f240 80a0 	bls.w	8003d7c <HAL_TIM_PeriodElapsedCallback+0x37c>
      buzzer_cnt = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6013      	str	r3, [r2, #0]
      if (buzzer_state == false) {
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	f040 80c2 	bne.w	8003dce <HAL_TIM_PeriodElapsedCallback+0x3ce>
        buzzer_state = true;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
        actuator_buzzer_on();
 8003c4e:	f7fd fae1 	bl	8001214 <actuator_buzzer_on>
  if (sys.system_time_ms - connection.latest_ai_cmd_update_time < MAIN_LOOP_CYCLE * 0.5) {  // AI コマンドタイムアウト
 8003c52:	696b      	ldr	r3, [r5, #20]
 8003c54:	6932      	ldr	r2, [r6, #16]
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	2bf9      	cmp	r3, #249	; 0xf9
 8003c5a:	f200 8096 	bhi.w	8003d8a <HAL_TIM_PeriodElapsedCallback+0x38a>
    connection.connected_ai = true;
 8003c5e:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003c60:	482e      	ldr	r0, [pc, #184]	; (8003d1c <HAL_TIM_PeriodElapsedCallback+0x31c>)
    connection.connected_ai = true;
 8003c62:	7032      	strb	r2, [r6, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c68:	f004 f8b6 	bl	8007dd8 <HAL_GPIO_WritePin>
    if (connection.vision_update_cycle_cnt < MAIN_LOOP_CYCLE * 2) {
 8003c6c:	68b2      	ldr	r2, [r6, #8]
 8003c6e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
      connection.vision_update_cycle_cnt++;
 8003c72:	bf37      	itett	cc
 8003c74:	3201      	addcc	r2, #1
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < MAIN_LOOP_CYCLE * 0.2) {  // CM4 コマンドタイムアウト
 8003c76:	696b      	ldrcs	r3, [r5, #20]
 8003c78:	696b      	ldrcc	r3, [r5, #20]
      connection.vision_update_cycle_cnt++;
 8003c7a:	60b2      	strcc	r2, [r6, #8]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < MAIN_LOOP_CYCLE * 0.2) {  // CM4 コマンドタイムアウト
 8003c7c:	6972      	ldr	r2, [r6, #20]
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	2b63      	cmp	r3, #99	; 0x63
 8003c82:	f200 8099 	bhi.w	8003db8 <HAL_TIM_PeriodElapsedCallback+0x3b8>
    connection.connected_cm4 = true;
 8003c86:	2301      	movs	r3, #1
 8003c88:	7073      	strb	r3, [r6, #1]
  cnt_time_50Hz++;
 8003c8a:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003c8c:	8813      	ldrh	r3, [r2, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	b29b      	uxth	r3, r3
  if (cnt_time_50Hz >= 10) {
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	f200 80a0 	bhi.w	8003dd8 <HAL_TIM_PeriodElapsedCallback+0x3d8>
  cnt_time_50Hz++;
 8003c98:	8013      	strh	r3, [r2, #0]
}
 8003c9a:	b002      	add	sp, #8
 8003c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      kicker_test(&sys, &can_raw, false);
 8003ca0:	4919      	ldr	r1, [pc, #100]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003ca2:	480f      	ldr	r0, [pc, #60]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003ca4:	4e19      	ldr	r6, [pc, #100]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f001 fe52 	bl	8005950 <kicker_test>
      break;
 8003cac:	e7b0      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
      dribbler_test(&sys);
 8003cae:	480c      	ldr	r0, [pc, #48]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003cb0:	4e16      	ldr	r6, [pc, #88]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003cb2:	f001 fe1d 	bl	80058f0 <dribbler_test>
      break;
 8003cb6:	e7ab      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
      motor_calibration(&sys);
 8003cb8:	4809      	ldr	r0, [pc, #36]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003cba:	4e14      	ldr	r6, [pc, #80]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003cbc:	f001 fefa 	bl	8005ab4 <motor_calibration>
      break;
 8003cc0:	e7a6      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
      kicker_test(&sys, &can_raw, true);
 8003cc2:	4911      	ldr	r1, [pc, #68]	; (8003d08 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003cc4:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003cc6:	4e11      	ldr	r6, [pc, #68]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f001 fe41 	bl	8005950 <kicker_test>
      break;
 8003cce:	e79f      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
      motor_test(&sys);
 8003cd0:	4803      	ldr	r0, [pc, #12]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003cd2:	4e0e      	ldr	r6, [pc, #56]	; (8003d0c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003cd4:	f001 fd9e 	bl	8005814 <motor_test>
      break;
 8003cd8:	e79a      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
 8003cda:	bf00      	nop
 8003cdc:	20000870 	.word	0x20000870
 8003ce0:	20000b30 	.word	0x20000b30
 8003ce4:	20000b2c 	.word	0x20000b2c
 8003ce8:	20000934 	.word	0x20000934
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48000c00 	.word	0x48000c00
 8003cf4:	200008b0 	.word	0x200008b0
 8003cf8:	20000b54 	.word	0x20000b54
 8003cfc:	2000066c 	.word	0x2000066c
 8003d00:	20000900 	.word	0x20000900
 8003d04:	200007a4 	.word	0x200007a4
 8003d08:	200006c8 	.word	0x200006c8
 8003d0c:	2000074c 	.word	0x2000074c
 8003d10:	00000000 	.word	0x00000000
 8003d14:	200006c0 	.word	0x200006c0
 8003d18:	200006c4 	.word	0x200006c4
 8003d1c:	48000800 	.word	0x48000800
 8003d20:	2000074a 	.word	0x2000074a
      if (sys.stop_flag) {
 8003d24:	786b      	ldrb	r3, [r5, #1]
 8003d26:	4e34      	ldr	r6, [pc, #208]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f47f af2d 	bne.w	8003b88 <HAL_TIM_PeriodElapsedCallback+0x188>
        maintask_run();
 8003d2e:	f7ff fc53 	bl	80035d8 <maintask_run>
 8003d32:	e76d      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003d34:	eddf 1a31 	vldr	s3, [pc, #196]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x3fc>
 8003d38:	4e2f      	ldr	r6, [pc, #188]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8003d3a:	eef0 0a61 	vmov.f32	s1, s3
 8003d3e:	eeb0 0a61 	vmov.f32	s0, s3
 8003d42:	eeb0 1a61 	vmov.f32	s2, s3
 8003d46:	f001 fb5f 	bl	8005408 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003d4a:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x3fc>
 8003d4e:	eeb0 0a60 	vmov.f32	s0, s1
 8003d52:	f7fd f9bf 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003d56:	2100      	movs	r1, #0
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7fd fa0f 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003d5e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x3fc>
 8003d62:	f7fd f9fb 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003d66:	f7fd f9e7 	bl	8001138 <actuator_dribbler_down>
}
 8003d6a:	e751      	b.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0x210>
  } else if (sys.error_flag) {
 8003d6c:	782b      	ldrb	r3, [r5, #0]
 8003d6e:	b34b      	cbz	r3, 8003dc4 <HAL_TIM_PeriodElapsedCallback+0x3c4>
    buzzer_cnt++;
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	3301      	adds	r3, #1
    if (buzzer_cnt > 20) {
 8003d76:	2b14      	cmp	r3, #20
 8003d78:	f63f af60 	bhi.w	8003c3c <HAL_TIM_PeriodElapsedCallback+0x23c>
    buzzer_cnt++;
 8003d7c:	6013      	str	r3, [r2, #0]
  if (sys.system_time_ms - connection.latest_ai_cmd_update_time < MAIN_LOOP_CYCLE * 0.5) {  // AI コマンドタイムアウト
 8003d7e:	696b      	ldr	r3, [r5, #20]
 8003d80:	6932      	ldr	r2, [r6, #16]
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	2bf9      	cmp	r3, #249	; 0xf9
 8003d86:	f67f af6a 	bls.w	8003c5e <HAL_TIM_PeriodElapsedCallback+0x25e>
    connection.connected_ai = false;
 8003d8a:	2700      	movs	r7, #0
    connection.cmd_rx_frq = 0;
 8003d8c:	2300      	movs	r3, #0
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003d8e:	463a      	mov	r2, r7
 8003d90:	481c      	ldr	r0, [pc, #112]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x404>)
    connection.cmd_rx_frq = 0;
 8003d92:	6073      	str	r3, [r6, #4]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    connection.connected_ai = false;
 8003d98:	7037      	strb	r7, [r6, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8003d9a:	f004 f81d 	bl	8007dd8 <HAL_GPIO_WritePin>
    resetAiCmdData(&ai_cmd);
 8003d9e:	481a      	ldr	r0, [pc, #104]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8003da0:	f7fd fc5c 	bl	800165c <resetAiCmdData>
    sys.stop_flag_request_time = sys.system_time_ms + MAIN_LOOP_CYCLE;  // 前回のタイムアウト時から1.0s間は動かさない
 8003da4:	696b      	ldr	r3, [r5, #20]
    connection.vision_update_cycle_cnt = 0;
 8003da6:	60b7      	str	r7, [r6, #8]
    sys.stop_flag_request_time = sys.system_time_ms + MAIN_LOOP_CYCLE;  // 前回のタイムアウト時から1.0s間は動かさない
 8003da8:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8003dac:	61aa      	str	r2, [r5, #24]
  if (sys.system_time_ms - connection.latest_cm4_cmd_update_time < MAIN_LOOP_CYCLE * 0.2) {  // CM4 コマンドタイムアウト
 8003dae:	6972      	ldr	r2, [r6, #20]
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	2b63      	cmp	r3, #99	; 0x63
 8003db4:	f67f af67 	bls.w	8003c86 <HAL_TIM_PeriodElapsedCallback+0x286>
    connection.connected_ai = false;
 8003db8:	2300      	movs	r3, #0
    resetAiCmdData(&ai_cmd);
 8003dba:	4813      	ldr	r0, [pc, #76]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x408>)
    connection.connected_ai = false;
 8003dbc:	8033      	strh	r3, [r6, #0]
    resetAiCmdData(&ai_cmd);
 8003dbe:	f7fd fc4d 	bl	800165c <resetAiCmdData>
 8003dc2:	e762      	b.n	8003c8a <HAL_TIM_PeriodElapsedCallback+0x28a>
  } else if (buzzer_state) {
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	2a00      	cmp	r2, #0
 8003dca:	f43f af42 	beq.w	8003c52 <HAL_TIM_PeriodElapsedCallback+0x252>
        buzzer_state = false;
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
        actuator_buzzer_off();
 8003dd2:	f7fd fa29 	bl	8001228 <actuator_buzzer_off>
 8003dd6:	e73c      	b.n	8003c52 <HAL_TIM_PeriodElapsedCallback+0x252>
    debug.print_flag = true;
 8003dd8:	2001      	movs	r0, #1
    cnt_time_50Hz = 0;
 8003dda:	2300      	movs	r3, #0
    debug.print_flag = true;
 8003ddc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    cnt_time_50Hz = 0;
 8003de0:	8013      	strh	r3, [r2, #0]
    actuator_power_ONOFF(1);
 8003de2:	f7fd f9e1 	bl	80011a8 <actuator_power_ONOFF>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003de6:	480a      	ldr	r0, [pc, #40]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8003de8:	2180      	movs	r1, #128	; 0x80
}
 8003dea:	b002      	add	sp, #8
 8003dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003df0:	f003 bff8 	b.w	8007de4 <HAL_GPIO_TogglePin>
    sys.main_mode = sw_mode;
 8003df4:	742b      	strb	r3, [r5, #16]
 8003df6:	e644      	b.n	8003a82 <HAL_TIM_PeriodElapsedCallback+0x82>
 8003df8:	2000074c 	.word	0x2000074c
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	200006c0 	.word	0x200006c0
 8003e04:	48000800 	.word	0x48000800
 8003e08:	2000066c 	.word	0x2000066c
 8003e0c:	200006c4 	.word	0x200006c4
 8003e10:	48000400 	.word	0x48000400

08003e14 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8003e14:	b570      	push	{r4, r5, r6, lr}
  static int32_t uart_rx_cmd_idx = 0;
  uint8_t rx_data_tmp;

  if (huart->Instance == USART2) {
 8003e16:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <HAL_UART_RxCpltCallback+0xa0>)
 8003e18:	6803      	ldr	r3, [r0, #0]
 8003e1a:	4293      	cmp	r3, r2
{
 8003e1c:	b084      	sub	sp, #16
  if (huart->Instance == USART2) {
 8003e1e:	d005      	beq.n	8003e2c <HAL_UART_RxCpltCallback+0x18>
      parseRxCmd(&connection, &sys, &ai_cmd, &integ, data_from_cm4);
      sendRobotInfo(&can_raw, &sys, &imu, &omni, &mouse, &ai_cmd, &connection);
    }
  }

  if (huart->Instance == hlpuart1.Instance) {
 8003e20:	4825      	ldr	r0, [pc, #148]	; (8003eb8 <HAL_UART_RxCpltCallback+0xa4>)
 8003e22:	6802      	ldr	r2, [r0, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d02e      	beq.n	8003e86 <HAL_UART_RxCpltCallback+0x72>
    debug.print_idx++;
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
  }
}
 8003e28:	b004      	add	sp, #16
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
    rx_data_tmp = uart2_rx_it_buffer;
 8003e2c:	4923      	ldr	r1, [pc, #140]	; (8003ebc <HAL_UART_RxCpltCallback+0xa8>)
 8003e2e:	4604      	mov	r4, r0
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8003e30:	2201      	movs	r2, #1
 8003e32:	4823      	ldr	r0, [pc, #140]	; (8003ec0 <HAL_UART_RxCpltCallback+0xac>)
    rx_data_tmp = uart2_rx_it_buffer;
 8003e34:	780d      	ldrb	r5, [r1, #0]
    HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 8003e36:	f005 fe7b 	bl	8009b30 <HAL_UART_Receive_IT>
    if (uart_rx_cmd_idx >= 0 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 8003e3a:	4922      	ldr	r1, [pc, #136]	; (8003ec4 <HAL_UART_RxCpltCallback+0xb0>)
 8003e3c:	680b      	ldr	r3, [r1, #0]
 8003e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8003e40:	d82c      	bhi.n	8003e9c <HAL_UART_RxCpltCallback+0x88>
      data_from_cm4[uart_rx_cmd_idx] = rx_data_tmp;
 8003e42:	4a21      	ldr	r2, [pc, #132]	; (8003ec8 <HAL_UART_RxCpltCallback+0xb4>)
 8003e44:	54d5      	strb	r5, [r2, r3]
      uart_rx_cmd_idx++;
 8003e46:	3301      	adds	r3, #1
 8003e48:	600b      	str	r3, [r1, #0]
    if (uart_rx_cmd_idx == RX_BUF_SIZE_ETHER) {
 8003e4a:	2b40      	cmp	r3, #64	; 0x40
 8003e4c:	d116      	bne.n	8003e7c <HAL_UART_RxCpltCallback+0x68>
      parseRxCmd(&connection, &sys, &ai_cmd, &integ, data_from_cm4);
 8003e4e:	4d1f      	ldr	r5, [pc, #124]	; (8003ecc <HAL_UART_RxCpltCallback+0xb8>)
 8003e50:	4e1f      	ldr	r6, [pc, #124]	; (8003ed0 <HAL_UART_RxCpltCallback+0xbc>)
 8003e52:	4a1d      	ldr	r2, [pc, #116]	; (8003ec8 <HAL_UART_RxCpltCallback+0xb4>)
 8003e54:	9200      	str	r2, [sp, #0]
      uart_rx_cmd_idx = -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	600b      	str	r3, [r1, #0]
      parseRxCmd(&connection, &sys, &ai_cmd, &integ, data_from_cm4);
 8003e5c:	462a      	mov	r2, r5
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_UART_RxCpltCallback+0xc0>)
 8003e60:	491d      	ldr	r1, [pc, #116]	; (8003ed8 <HAL_UART_RxCpltCallback+0xc4>)
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7fd fc10 	bl	8001688 <parseRxCmd>
      sendRobotInfo(&can_raw, &sys, &imu, &omni, &mouse, &ai_cmd, &connection);
 8003e68:	481c      	ldr	r0, [pc, #112]	; (8003edc <HAL_UART_RxCpltCallback+0xc8>)
 8003e6a:	9000      	str	r0, [sp, #0]
 8003e6c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <HAL_UART_RxCpltCallback+0xcc>)
 8003e72:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <HAL_UART_RxCpltCallback+0xd0>)
 8003e74:	4918      	ldr	r1, [pc, #96]	; (8003ed8 <HAL_UART_RxCpltCallback+0xc4>)
 8003e76:	481c      	ldr	r0, [pc, #112]	; (8003ee8 <HAL_UART_RxCpltCallback+0xd4>)
 8003e78:	f7fd fd52 	bl	8001920 <sendRobotInfo>
  if (huart->Instance == hlpuart1.Instance) {
 8003e7c:	480e      	ldr	r0, [pc, #56]	; (8003eb8 <HAL_UART_RxCpltCallback+0xa4>)
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d1d0      	bne.n	8003e28 <HAL_UART_RxCpltCallback+0x14>
    debug.print_idx++;
 8003e86:	4c19      	ldr	r4, [pc, #100]	; (8003eec <HAL_UART_RxCpltCallback+0xd8>)
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 8003e88:	4919      	ldr	r1, [pc, #100]	; (8003ef0 <HAL_UART_RxCpltCallback+0xdc>)
    debug.print_idx++;
 8003e8a:	6823      	ldr	r3, [r4, #0]
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 8003e8c:	2201      	movs	r2, #1
    debug.print_idx++;
 8003e8e:	4413      	add	r3, r2
 8003e90:	6023      	str	r3, [r4, #0]
}
 8003e92:	b004      	add	sp, #16
 8003e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 8003e98:	f005 be4a 	b.w	8009b30 <HAL_UART_Receive_IT>
    if (uart_rx_cmd_idx == -1 && rx_data_tmp == 254) {
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	d104      	bne.n	8003eaa <HAL_UART_RxCpltCallback+0x96>
 8003ea0:	2dfe      	cmp	r5, #254	; 0xfe
      uart_rx_cmd_idx++;
 8003ea2:	bf04      	itt	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	600b      	streq	r3, [r1, #0]
    if (uart_rx_cmd_idx == RX_BUF_SIZE_ETHER) {
 8003ea8:	e7e8      	b.n	8003e7c <HAL_UART_RxCpltCallback+0x68>
    if (uart_rx_cmd_idx != -1 && uart_rx_cmd_idx < RX_BUF_SIZE_ETHER) {
 8003eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8003eac:	dccd      	bgt.n	8003e4a <HAL_UART_RxCpltCallback+0x36>
      uart_rx_cmd_idx++;
 8003eae:	3301      	adds	r3, #1
 8003eb0:	e7ca      	b.n	8003e48 <HAL_UART_RxCpltCallback+0x34>
 8003eb2:	bf00      	nop
 8003eb4:	40004400 	.word	0x40004400
 8003eb8:	20000e10 	.word	0x20000e10
 8003ebc:	20000b7c 	.word	0x20000b7c
 8003ec0:	20000ea0 	.word	0x20000ea0
 8003ec4:	20000b80 	.word	0x20000b80
 8003ec8:	20000764 	.word	0x20000764
 8003ecc:	2000066c 	.word	0x2000066c
 8003ed0:	2000074c 	.word	0x2000074c
 8003ed4:	200007f4 	.word	0x200007f4
 8003ed8:	20000b30 	.word	0x20000b30
 8003edc:	20000870 	.word	0x20000870
 8003ee0:	200008b0 	.word	0x200008b0
 8003ee4:	200007e0 	.word	0x200007e0
 8003ee8:	200006c8 	.word	0x200006c8
 8003eec:	200007a4 	.word	0x200007a4
 8003ef0:	20000834 	.word	0x20000834

08003ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ef4:	b508      	push	{r3, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003ef6:	ed9f 8a14 	vldr	s16, [pc, #80]	; 8003f48 <Error_Handler+0x54>
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1) {
    maintask_stop(255, 0);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003efa:	4c14      	ldr	r4, [pc, #80]	; (8003f4c <Error_Handler+0x58>)
  omni_move(0.0, 0.0, 0.0, 0.0);
 8003efc:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003f48 <Error_Handler+0x54>
 8003f00:	eef0 1a48 	vmov.f32	s3, s16
 8003f04:	eeb0 0a41 	vmov.f32	s0, s2
 8003f08:	eef0 0a41 	vmov.f32	s1, s2
 8003f0c:	f001 fa7c 	bl	8005408 <omni_move>
  actuator_motor5(0.0, 0.0);
 8003f10:	eef0 0a48 	vmov.f32	s1, s16
 8003f14:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003f48 <Error_Handler+0x54>
 8003f18:	f7fd f8dc 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 0);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7fd f92c 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8003f24:	eeb0 0a48 	vmov.f32	s0, s16
 8003f28:	f7fd f918 	bl	800115c <actuator_kicker_voltage>
  actuator_dribbler_down();
 8003f2c:	f7fd f904 	bl	8001138 <actuator_dribbler_down>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8003f30:	4620      	mov	r0, r4
 8003f32:	2201      	movs	r2, #1
 8003f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f38:	f003 ff4e 	bl	8007dd8 <HAL_GPIO_WritePin>
    actuator_buzzer(200, 200);
 8003f3c:	21c8      	movs	r1, #200	; 0xc8
 8003f3e:	4608      	mov	r0, r1
 8003f40:	f7fd f956 	bl	80011f0 <actuator_buzzer>
  while (1) {
 8003f44:	e7da      	b.n	8003efc <Error_Handler+0x8>
 8003f46:	bf00      	nop
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	48000400 	.word	0x48000400

08003f50 <SystemClock_Config>:
{
 8003f50:	b510      	push	{r4, lr}
 8003f52:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f54:	2238      	movs	r2, #56	; 0x38
 8003f56:	2100      	movs	r1, #0
 8003f58:	a806      	add	r0, sp, #24
 8003f5a:	f007 ffad 	bl	800beb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8003f64:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8003f68:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003f6a:	f003 ff45 	bl	8007df8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f74:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f76:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f7a:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003f7c:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003f7e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f80:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003f84:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f88:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f8c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003f8e:	f003 ffb1 	bl	8007ef4 <HAL_RCC_OscConfig>
 8003f92:	b970      	cbnz	r0, 8003fb2 <SystemClock_Config+0x62>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003f94:	2104      	movs	r1, #4
 8003f96:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f98:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003f9a:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f9e:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fa2:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fa6:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003fa8:	f004 fa28 	bl	80083fc <HAL_RCC_ClockConfig>
 8003fac:	b908      	cbnz	r0, 8003fb2 <SystemClock_Config+0x62>
}
 8003fae:	b014      	add	sp, #80	; 0x50
 8003fb0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003fb2:	f7ff ff9f 	bl	8003ef4 <Error_Handler>
 8003fb6:	bf00      	nop

08003fb8 <main>:
{
 8003fb8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003fbc:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8003fbe:	f002 fa33 	bl	8006428 <HAL_Init>
  SystemClock_Config();
 8003fc2:	f7ff ffc5 	bl	8003f50 <SystemClock_Config>
  MX_GPIO_Init();
 8003fc6:	f7fe f895 	bl	80020f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fca:	f7fd ff35 	bl	8001e38 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8003fce:	f7fd ff85 	bl	8001edc <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8003fd2:	f001 fe6d 	bl	8005cb0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8003fd6:	f001 feb9 	bl	8005d4c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003fda:	f001 feff 	bl	8005ddc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8003fde:	f001 faef 	bl	80055c0 <MX_SPI1_Init>
  MX_TIM5_Init();
 8003fe2:	f001 fd95 	bl	8005b10 <MX_TIM5_Init>
  MX_TIM7_Init();
 8003fe6:	f001 fe01 	bl	8005bec <MX_TIM7_Init>
  MX_ADC5_Init();
 8003fea:	f7fd fa07 	bl	80013fc <MX_ADC5_Init>
  MX_ADC3_Init();
 8003fee:	f7fd f9ad 	bl	800134c <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8003ff2:	f7fd ff99 	bl	8001f28 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8003ff6:	f7fd f953 	bl	80012a0 <MX_ADC1_Init>
  integ.odom_log[0] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 8003ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ffe:	f001 fa7d 	bl	80054fc <initRingBuffer>
 8004002:	4cd7      	ldr	r4, [pc, #860]	; (8004360 <main+0x3a8>)
  omni.local_speed_log[0] = initRingBuffer(SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE);
 8004004:	4dd7      	ldr	r5, [pc, #860]	; (8004364 <main+0x3ac>)
  sys.kick_state = 0;
 8004006:	4ed8      	ldr	r6, [pc, #864]	; (8004368 <main+0x3b0>)
  ai_cmd.latency_time_ms = 100;
 8004008:	4fd8      	ldr	r7, [pc, #864]	; (800436c <main+0x3b4>)
  integ.odom_log[0] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 800400a:	4603      	mov	r3, r0
 800400c:	6023      	str	r3, [r4, #0]
  integ.odom_log[1] = initRingBuffer(SPEED_LOG_BUF_SIZE);
 800400e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004012:	f001 fa73 	bl	80054fc <initRingBuffer>
 8004016:	4603      	mov	r3, r0
 8004018:	6063      	str	r3, [r4, #4]
  omni.local_speed_log[0] = initRingBuffer(SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE);
 800401a:	200a      	movs	r0, #10
 800401c:	f001 fa6e 	bl	80054fc <initRingBuffer>
 8004020:	4603      	mov	r3, r0
 8004022:	642b      	str	r3, [r5, #64]	; 0x40
  omni.local_speed_log[1] = initRingBuffer(SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE);
 8004024:	200a      	movs	r0, #10
 8004026:	f001 fa69 	bl	80054fc <initRingBuffer>
  sys.kick_state = 0;
 800402a:	2400      	movs	r4, #0
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800402c:	2104      	movs	r1, #4
  omni.local_speed_log[1] = initRingBuffer(SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE);
 800402e:	6468      	str	r0, [r5, #68]	; 0x44
  ai_cmd.latency_time_ms = 100;
 8004030:	f04f 0864 	mov.w	r8, #100	; 0x64
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004034:	48ce      	ldr	r0, [pc, #824]	; (8004370 <main+0x3b8>)
  ai_cmd.latency_time_ms = 100;
 8004036:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
  sys.kick_state = 0;
 800403a:	83b4      	strh	r4, [r6, #28]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800403c:	f005 f9fe 	bl	800943c <HAL_TIM_PWM_Start>
  actuator_buzzer_frq(1046, 50);  //C5
 8004040:	ed9f 0acc 	vldr	s0, [pc, #816]	; 8004374 <main+0x3bc>
  setbuf(stdin, NULL);
 8004044:	4dcc      	ldr	r5, [pc, #816]	; (8004378 <main+0x3c0>)
  actuator_buzzer_frq(1046, 50);  //C5
 8004046:	2032      	movs	r0, #50	; 0x32
 8004048:	f7fd f8f6 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 800404c:	ed9f 0acb 	vldr	s0, [pc, #812]	; 800437c <main+0x3c4>
 8004050:	2032      	movs	r0, #50	; 0x32
 8004052:	f7fd f8f1 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1318, 50);  //E5
 8004056:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8004380 <main+0x3c8>
 800405a:	2032      	movs	r0, #50	; 0x32
 800405c:	f7fd f8ec 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1396, 50);  //F5
 8004060:	ed9f 0ac8 	vldr	s0, [pc, #800]	; 8004384 <main+0x3cc>
 8004064:	2032      	movs	r0, #50	; 0x32
 8004066:	f7fd f8e7 	bl	8001238 <actuator_buzzer_frq>
  setbuf(stdin, NULL);
 800406a:	682b      	ldr	r3, [r5, #0]
 800406c:	4621      	mov	r1, r4
 800406e:	6858      	ldr	r0, [r3, #4]
 8004070:	f007 fd72 	bl	800bb58 <setbuf>
  setbuf(stdout, NULL);
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	4621      	mov	r1, r4
 8004078:	6898      	ldr	r0, [r3, #8]
 800407a:	f007 fd6d 	bl	800bb58 <setbuf>
  setbuf(stderr, NULL);
 800407e:	682b      	ldr	r3, [r5, #0]
 8004080:	4621      	mov	r1, r4
 8004082:	68d8      	ldr	r0, [r3, #12]
 8004084:	f007 fd68 	bl	800bb58 <setbuf>
  HAL_UART_Init(&hlpuart1);
 8004088:	48bf      	ldr	r0, [pc, #764]	; (8004388 <main+0x3d0>)
 800408a:	f006 fe19 	bl	800acc0 <HAL_UART_Init>
  HAL_UART_Init(&huart2);
 800408e:	48bf      	ldr	r0, [pc, #764]	; (800438c <main+0x3d4>)
 8004090:	f006 fe16 	bl	800acc0 <HAL_UART_Init>
  printf("orion main start %s %s\r\n", __DATE__, __TIME__);
 8004094:	4abe      	ldr	r2, [pc, #760]	; (8004390 <main+0x3d8>)
 8004096:	49bf      	ldr	r1, [pc, #764]	; (8004394 <main+0x3dc>)
 8004098:	48bf      	ldr	r0, [pc, #764]	; (8004398 <main+0x3e0>)
 800409a:	f007 fcef 	bl	800ba7c <iprintf>
  HAL_UART_Receive_IT(&huart2, &uart2_rx_it_buffer, 1);
 800409e:	49bf      	ldr	r1, [pc, #764]	; (800439c <main+0x3e4>)
 80040a0:	48ba      	ldr	r0, [pc, #744]	; (800438c <main+0x3d4>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	f005 fd44 	bl	8009b30 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&hlpuart1, &lpuart1_rx_it_buffer, 1);
 80040a8:	49bd      	ldr	r1, [pc, #756]	; (80043a0 <main+0x3e8>)
 80040aa:	48b7      	ldr	r0, [pc, #732]	; (8004388 <main+0x3d0>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	f005 fd3f 	bl	8009b30 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc5, &sys.sw_data, 1);
 80040b2:	2201      	movs	r2, #1
 80040b4:	f106 0120 	add.w	r1, r6, #32
 80040b8:	48ba      	ldr	r0, [pc, #744]	; (80043a4 <main+0x3ec>)
 80040ba:	f002 fe21 	bl	8006d00 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80040be:	48ba      	ldr	r0, [pc, #744]	; (80043a8 <main+0x3f0>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040c6:	f003 fe87 	bl	8007dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80040ca:	2201      	movs	r2, #1
 80040cc:	4611      	mov	r1, r2
 80040ce:	48b6      	ldr	r0, [pc, #728]	; (80043a8 <main+0x3f0>)
 80040d0:	f003 fe82 	bl	8007dd8 <HAL_GPIO_WritePin>
  ICM20602_init();
 80040d4:	f7fe f8aa 	bl	800222c <ICM20602_init>
  ICM20602_init();
 80040d8:	f7fe f8a8 	bl	800222c <ICM20602_init>
  ICM20602_IMU_calibration2();
 80040dc:	f7fe fbf0 	bl	80028c0 <ICM20602_IMU_calibration2>
  ICM20602_clearAngle();
 80040e0:	f7fe f99a 	bl	8002418 <ICM20602_clearAngle>
  printf("\n\rcomplete imu init\r\n");
 80040e4:	48b1      	ldr	r0, [pc, #708]	; (80043ac <main+0x3f4>)
 80040e6:	f007 fd2f 	bl	800bb48 <puts>
  can1_init_ibis(&hfdcan1);
 80040ea:	48b1      	ldr	r0, [pc, #708]	; (80043b0 <main+0x3f8>)
 80040ec:	f7fd fd30 	bl	8001b50 <can1_init_ibis>
  can2_init_ibis(&hfdcan2);
 80040f0:	48b0      	ldr	r0, [pc, #704]	; (80043b4 <main+0x3fc>)
 80040f2:	f7fd fd7d 	bl	8001bf0 <can2_init_ibis>
  printf("\n\rstart can1\r\n");
 80040f6:	48b0      	ldr	r0, [pc, #704]	; (80043b8 <main+0x400>)
 80040f8:	f007 fd26 	bl	800bb48 <puts>
  HAL_FDCAN_Start(&hfdcan1);
 80040fc:	48ac      	ldr	r0, [pc, #688]	; (80043b0 <main+0x3f8>)
 80040fe:	f003 fb17 	bl	8007730 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8004102:	48ab      	ldr	r0, [pc, #684]	; (80043b0 <main+0x3f8>)
 8004104:	4622      	mov	r2, r4
 8004106:	2101      	movs	r1, #1
 8004108:	f003 fc1a 	bl	8007940 <HAL_FDCAN_ActivateNotification>
 800410c:	2800      	cmp	r0, #0
 800410e:	f040 8185 	bne.w	800441c <main+0x464>
  printf("\n\rstart can2\r\n");
 8004112:	4604      	mov	r4, r0
 8004114:	48a9      	ldr	r0, [pc, #676]	; (80043bc <main+0x404>)
 8004116:	f007 fd17 	bl	800bb48 <puts>
  HAL_FDCAN_Start(&hfdcan2);
 800411a:	48a6      	ldr	r0, [pc, #664]	; (80043b4 <main+0x3fc>)
 800411c:	f003 fb08 	bl	8007730 <HAL_FDCAN_Start>
  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8004120:	4622      	mov	r2, r4
 8004122:	48a4      	ldr	r0, [pc, #656]	; (80043b4 <main+0x3fc>)
 8004124:	2101      	movs	r1, #1
 8004126:	f003 fc0b 	bl	8007940 <HAL_FDCAN_ActivateNotification>
 800412a:	4604      	mov	r4, r0
 800412c:	2800      	cmp	r0, #0
 800412e:	f040 8175 	bne.w	800441c <main+0x464>
  actuator_power_ONOFF(0);
 8004132:	f7fd f839 	bl	80011a8 <actuator_power_ONOFF>
  HAL_Delay(20);
 8004136:	2014      	movs	r0, #20
 8004138:	f002 f992 	bl	8006460 <HAL_Delay>
  actuator_motor1(0.0, 0.0);
 800413c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80043c0 <main+0x408>
      if (fabs(debug.true_yaw_speed - debug.true_fb_toral_spin) > 100 && fabs(ai_cmd.target_theta - imu.yaw_angle) > 5) {
 8004140:	ed9f 8aa0 	vldr	s16, [pc, #640]	; 80043c4 <main+0x40c>
          p("TPx %+4.1f TPy %+4.1f TW %+6.1f ", ai_cmd.global_target_position[0], ai_cmd.global_target_position[1], ai_cmd.target_theta * 180 / M_PI);
 8004144:	eddf 8aa0 	vldr	s17, [pc, #640]	; 80043c8 <main+0x410>
 8004148:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 80043f0 <main+0x438>
 800414c:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 80043f4 <main+0x43c>
 8004150:	4d9e      	ldr	r5, [pc, #632]	; (80043cc <main+0x414>)
 8004152:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80043f8 <main+0x440>
  actuator_motor1(0.0, 0.0);
 8004156:	eeb0 0a60 	vmov.f32	s0, s1
 800415a:	f7fc ff3b 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(0.0, 0.0);
 800415e:	eddf 0a98 	vldr	s1, [pc, #608]	; 80043c0 <main+0x408>
 8004162:	eeb0 0a60 	vmov.f32	s0, s1
 8004166:	f7fc ff55 	bl	8001014 <actuator_motor2>
  actuator_motor3(0.0, 0.0);
 800416a:	eddf 0a95 	vldr	s1, [pc, #596]	; 80043c0 <main+0x408>
 800416e:	eeb0 0a60 	vmov.f32	s0, s1
 8004172:	f7fc ff6f 	bl	8001054 <actuator_motor3>
  actuator_motor4(0.0, 0.0);
 8004176:	eddf 0a92 	vldr	s1, [pc, #584]	; 80043c0 <main+0x408>
 800417a:	eeb0 0a60 	vmov.f32	s0, s1
 800417e:	f7fc ff89 	bl	8001094 <actuator_motor4>
  actuator_motor5(0.0, 0.0);
 8004182:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80043c0 <main+0x408>
 8004186:	eeb0 0a60 	vmov.f32	s0, s1
 800418a:	f7fc ffa3 	bl	80010d4 <actuator_motor5>
  actuator_kicker(1, 1);
 800418e:	2101      	movs	r1, #1
 8004190:	4608      	mov	r0, r1
 8004192:	f7fc fff3 	bl	800117c <actuator_kicker>
  actuator_kicker_voltage(0.0);
 8004196:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80043c0 <main+0x408>
 800419a:	f7fc ffdf 	bl	800115c <actuator_kicker_voltage>
  actuator_power_param(1, 15.0);  // min voltage
 800419e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80041a2:	2001      	movs	r0, #1
 80041a4:	f7fd f814 	bl	80011d0 <actuator_power_param>
  actuator_power_param(2, 35.0);  // max voltage
 80041a8:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80043d0 <main+0x418>
 80041ac:	2002      	movs	r0, #2
 80041ae:	f7fd f80f 	bl	80011d0 <actuator_power_param>
  actuator_power_param(3, 50.0);  // max can_raw.current
 80041b2:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80043d4 <main+0x41c>
 80041b6:	2003      	movs	r0, #3
 80041b8:	f7fd f80a 	bl	80011d0 <actuator_power_param>
  actuator_power_param(4, 90.0);  // max temp(fet)
 80041bc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80043d8 <main+0x420>
 80041c0:	2004      	movs	r0, #4
 80041c2:	f7fd f805 	bl	80011d0 <actuator_power_param>
  actuator_power_param(5, 90.0);  // max temp(solenoid)
 80041c6:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80043d8 <main+0x420>
 80041ca:	2005      	movs	r0, #5
 80041cc:	f7fd f800 	bl	80011d0 <actuator_power_param>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80041d0:	4622      	mov	r2, r4
 80041d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041d6:	4874      	ldr	r0, [pc, #464]	; (80043a8 <main+0x3f0>)
 80041d8:	f003 fdfe 	bl	8007dd8 <HAL_GPIO_WritePin>
  actuator_power_ONOFF(1);
 80041dc:	2001      	movs	r0, #1
 80041de:	f7fc ffe3 	bl	80011a8 <actuator_power_ONOFF>
  actuator_buzzer_frq(1046, 50);  //C5
 80041e2:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8004374 <main+0x3bc>
 80041e6:	2032      	movs	r0, #50	; 0x32
 80041e8:	f7fd f826 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 80041ec:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800437c <main+0x3c4>
 80041f0:	2032      	movs	r0, #50	; 0x32
 80041f2:	f7fd f821 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1046, 50);  //C5
 80041f6:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8004374 <main+0x3bc>
 80041fa:	2032      	movs	r0, #50	; 0x32
 80041fc:	f7fd f81c 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1174, 50);  //D5
 8004200:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 800437c <main+0x3c4>
 8004204:	2032      	movs	r0, #50	; 0x32
 8004206:	f7fd f817 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1318, 50);  //E5
 800420a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8004380 <main+0x3c8>
 800420e:	2032      	movs	r0, #50	; 0x32
 8004210:	f7fd f812 	bl	8001238 <actuator_buzzer_frq>
  actuator_buzzer_frq(1396, 50);  //F5
 8004214:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8004384 <main+0x3cc>
 8004218:	2032      	movs	r0, #50	; 0x32
 800421a:	f7fd f80d 	bl	8001238 <actuator_buzzer_frq>
  actuator_power_ONOFF(1);
 800421e:	2001      	movs	r0, #1
 8004220:	f7fc ffc2 	bl	80011a8 <actuator_power_ONOFF>
  sys.stop_flag_request_time = 1000;  // !!注意!! TIM7の割り込みがはじまってから1000ms間停止
 8004224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  HAL_Delay(100);
 8004228:	4640      	mov	r0, r8
  sys.stop_flag_request_time = 1000;  // !!注意!! TIM7の割り込みがはじまってから1000ms間停止
 800422a:	61b3      	str	r3, [r6, #24]
  sys.system_time_ms = 0;
 800422c:	6174      	str	r4, [r6, #20]
  HAL_Delay(100);
 800422e:	f002 f917 	bl	8006460 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim7);
 8004232:	486a      	ldr	r0, [pc, #424]	; (80043dc <main+0x424>)
  debug.print_idx = 5;
 8004234:	4c6a      	ldr	r4, [pc, #424]	; (80043e0 <main+0x428>)
 8004236:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80043fc <main+0x444>
  HAL_TIM_Base_Start_IT(&htim7);
 800423a:	f005 f823 	bl	8009284 <HAL_TIM_Base_Start_IT>
  HAL_Delay(500);
 800423e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004242:	f002 f90d 	bl	8006460 <HAL_Delay>
  debug.print_idx = 5;
 8004246:	2305      	movs	r3, #5
 8004248:	6023      	str	r3, [r4, #0]
    debug.main_loop_cnt++;
 800424a:	6863      	ldr	r3, [r4, #4]
 800424c:	3301      	adds	r3, #1
 800424e:	6063      	str	r3, [r4, #4]
    if (debug.print_flag) {
 8004250:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f8      	beq.n	800424a <main+0x292>
      debug.print_flag = false;
 8004258:	2300      	movs	r3, #0
      p("\e[0m");
 800425a:	4862      	ldr	r0, [pc, #392]	; (80043e4 <main+0x42c>)
      debug.print_flag = false;
 800425c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      printf_buffer[0] = 0;
 8004260:	f88a 3000 	strb.w	r3, [sl]
      p("\e[0m");
 8004264:	f7fe fcc8 	bl	8002bf8 <p>
      p("yaw=%+6.1f ", imu.yaw_angle);
 8004268:	f8db 0000 	ldr.w	r0, [fp]
 800426c:	f7fc f994 	bl	8000598 <__aeabi_f2d>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	485c      	ldr	r0, [pc, #368]	; (80043e8 <main+0x430>)
 8004276:	f7fe fcbf 	bl	8002bf8 <p>
      if (can_raw.power_voltage[5] < LOW_VOLTAGE_LIMIT) {
 800427a:	edd5 7a11 	vldr	s15, [r5, #68]	; 0x44
 800427e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8004282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        p("\e[33mBatt=%3.1f\e[37m ", can_raw.power_voltage[5]);
 800428a:	ee17 0a90 	vmov	r0, s15
      if (can_raw.power_voltage[5] < LOW_VOLTAGE_LIMIT) {
 800428e:	f140 84a2 	bpl.w	8004bd6 <main+0xc1e>
        p("\e[33mBatt=%3.1f\e[37m ", can_raw.power_voltage[5]);
 8004292:	f7fc f981 	bl	8000598 <__aeabi_f2d>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4854      	ldr	r0, [pc, #336]	; (80043ec <main+0x434>)
 800429c:	f7fe fcac 	bl	8002bf8 <p>
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80042a0:	edd9 7a09 	vldr	s15, [r9, #36]	; 0x24
 80042a4:	ed99 6a0a 	vldr	s12, [r9, #40]	; 0x28
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80042a8:	edd5 6a03 	vldr	s13, [r5, #12]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80042ac:	edd9 5a0b 	vldr	s11, [r9, #44]	; 0x2c
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80042b0:	ed95 7a02 	vldr	s14, [r5, #8]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80042b4:	ee77 7a86 	vadd.f32	s15, s15, s12
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80042b8:	ee37 7a26 	vadd.f32	s14, s14, s13
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80042bc:	ed99 6a0c 	vldr	s12, [r9, #48]	; 0x30
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80042c0:	edd5 6a04 	vldr	s13, [r5, #16]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80042c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80042c8:	ee37 7a26 	vadd.f32	s14, s14, s13
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80042cc:	ee77 7a86 	vadd.f32	s15, s15, s12
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80042d0:	edd5 6a05 	vldr	s13, [r5, #20]
      debug.out_total_spin = output.motor_voltage[0] + output.motor_voltage[1] + output.motor_voltage[2] + output.motor_voltage[3];
 80042d4:	edc4 7a05 	vstr	s15, [r4, #20]
      debug.fb_total_spin = (can_raw.motor_feedback[0] + can_raw.motor_feedback[1] + can_raw.motor_feedback[2] + can_raw.motor_feedback[3]) / 1.5;
 80042d8:	ee77 7a26 	vadd.f32	s15, s14, s13
 80042dc:	ee17 0a90 	vmov	r0, s15
 80042e0:	f7fc f95a 	bl	8000598 <__aeabi_f2d>
 80042e4:	a31c      	add	r3, pc, #112	; (adr r3, 8004358 <main+0x3a0>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f7fc f9ad 	bl	8000648 <__aeabi_dmul>
 80042ee:	f7fc fca3 	bl	8000c38 <__aeabi_d2f>
 80042f2:	61a0      	str	r0, [r4, #24]
      debug.true_yaw_speed = imu.yaw_angle - debug.pre_yaw_angle;
 80042f4:	edd4 7a07 	vldr	s15, [r4, #28]
 80042f8:	ed9b 7a00 	vldr	s14, [fp]
 80042fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004300:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
      if (fabs(debug.true_yaw_speed - debug.true_fb_toral_spin) > 100 && fabs(ai_cmd.target_theta - imu.yaw_angle) > 5) {
 8004304:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004308:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800430c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004310:	eef0 7ae7 	vabs.f32	s15, s15
 8004314:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	dd0c      	ble.n	8004338 <main+0x380>
 800431e:	edd7 7a00 	vldr	s15, [r7]
 8004322:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004326:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800432a:	eef0 7ae7 	vabs.f32	s15, s15
 800432e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004336:	dc02      	bgt.n	800433e <main+0x386>
        debug.acc_step_down_flag = false;
 8004338:	2300      	movs	r3, #0
 800433a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      if (sys.main_mode == MAIN_MODE_ERROR) {
 800433e:	7c33      	ldrb	r3, [r6, #16]
 8004340:	2b09      	cmp	r3, #9
 8004342:	f000 8455 	beq.w	8004bf0 <main+0xc38>
      if (sys.system_time_ms < sys.stop_flag_request_time) {
 8004346:	e9d6 2305 	ldrd	r2, r3, [r6, #20]
 800434a:	429a      	cmp	r2, r3
 800434c:	f0c0 844c 	bcc.w	8004be8 <main+0xc30>
 8004350:	e056      	b.n	8004400 <main+0x448>
 8004352:	bf00      	nop
 8004354:	f3af 8000 	nop.w
 8004358:	55555555 	.word	0x55555555
 800435c:	3fe55555 	.word	0x3fe55555
 8004360:	200007f4 	.word	0x200007f4
 8004364:	200008b0 	.word	0x200008b0
 8004368:	20000b30 	.word	0x20000b30
 800436c:	2000066c 	.word	0x2000066c
 8004370:	20000bf4 	.word	0x20000bf4
 8004374:	4482c000 	.word	0x4482c000
 8004378:	2000006c 	.word	0x2000006c
 800437c:	4492c000 	.word	0x4492c000
 8004380:	44a4c000 	.word	0x44a4c000
 8004384:	44ae8000 	.word	0x44ae8000
 8004388:	20000e10 	.word	0x20000e10
 800438c:	20000ea0 	.word	0x20000ea0
 8004390:	0800f6ac 	.word	0x0800f6ac
 8004394:	0800f6b8 	.word	0x0800f6b8
 8004398:	0800f6c4 	.word	0x0800f6c4
 800439c:	20000b7c 	.word	0x20000b7c
 80043a0:	20000834 	.word	0x20000834
 80043a4:	200002e8 	.word	0x200002e8
 80043a8:	48000800 	.word	0x48000800
 80043ac:	0800f6e0 	.word	0x0800f6e0
 80043b0:	200004dc 	.word	0x200004dc
 80043b4:	20000540 	.word	0x20000540
 80043b8:	0800f6f8 	.word	0x0800f6f8
 80043bc:	0800f708 	.word	0x0800f708
 80043c0:	00000000 	.word	0x00000000
 80043c4:	42c80000 	.word	0x42c80000
 80043c8:	43340000 	.word	0x43340000
 80043cc:	200006c8 	.word	0x200006c8
 80043d0:	420c0000 	.word	0x420c0000
 80043d4:	42480000 	.word	0x42480000
 80043d8:	42b40000 	.word	0x42b40000
 80043dc:	20000c40 	.word	0x20000c40
 80043e0:	200007a4 	.word	0x200007a4
 80043e4:	0800f718 	.word	0x0800f718
 80043e8:	0800f720 	.word	0x0800f720
 80043ec:	0800f72c 	.word	0x0800f72c
 80043f0:	20000938 	.word	0x20000938
 80043f4:	200007e0 	.word	0x200007e0
 80043f8:	20000900 	.word	0x20000900
 80043fc:	20000870 	.word	0x20000870
      switch (debug.print_idx) {
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	2b07      	cmp	r3, #7
 8004404:	f200 847f 	bhi.w	8004d06 <main+0xd4e>
 8004408:	e8df f013 	tbh	[pc, r3, lsl #1]
 800440c:	02960340 	.word	0x02960340
 8004410:	02350276 	.word	0x02350276
 8004414:	00c7018c 	.word	0x00c7018c
 8004418:	000a0054 	.word	0x000a0054
    Error_Handler();
 800441c:	f7ff fd6a 	bl	8003ef4 <Error_Handler>
          p("LATENCY ");
 8004420:	48a9      	ldr	r0, [pc, #676]	; (80046c8 <main+0x710>)
 8004422:	f7fe fbe9 	bl	8002bf8 <p>
          p("SW0x%4x EN%d cnt %4d target %+5.2f diff %+5.2f", decode_SW(sys.sw_data), debug.latency_check_enabled, debug.latency_check_seq_cnt, debug.rotation_target_theta,
 8004426:	8c30      	ldrh	r0, [r6, #32]
 8004428:	f001 ff4e 	bl	80062c8 <decode_SW>
 800442c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
            getAngleDiff(debug.rotation_target_theta, imu.yaw_angle_rad));
 8004430:	eddb 0a02 	vldr	s1, [fp, #8]
          p("SW0x%4x EN%d cnt %4d target %+5.2f diff %+5.2f", decode_SW(sys.sw_data), debug.latency_check_enabled, debug.latency_check_seq_cnt, debug.rotation_target_theta,
 8004434:	b2da      	uxtb	r2, r3
 8004436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004438:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
            getAngleDiff(debug.rotation_target_theta, imu.yaw_angle_rad));
 800443c:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
          p("SW0x%4x EN%d cnt %4d target %+5.2f diff %+5.2f", decode_SW(sys.sw_data), debug.latency_check_enabled, debug.latency_check_seq_cnt, debug.rotation_target_theta,
 8004440:	920b      	str	r2, [sp, #44]	; 0x2c
 8004442:	9308      	str	r3, [sp, #32]
 8004444:	ee09 0a90 	vmov	s19, r0
            getAngleDiff(debug.rotation_target_theta, imu.yaw_angle_rad));
 8004448:	f001 fe66 	bl	8006118 <getAngleDiff>
 800444c:	ee10 0a10 	vmov	r0, s0
          p("SW0x%4x EN%d cnt %4d target %+5.2f diff %+5.2f", decode_SW(sys.sw_data), debug.latency_check_enabled, debug.latency_check_seq_cnt, debug.rotation_target_theta,
 8004450:	f7fc f8a2 	bl	8000598 <__aeabi_f2d>
 8004454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004458:	ee19 0a10 	vmov	r0, s18
 800445c:	f7fc f89c 	bl	8000598 <__aeabi_f2d>
 8004460:	9b08      	ldr	r3, [sp, #32]
 8004462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004464:	e9cd 0100 	strd	r0, r1, [sp]
 8004468:	ee19 1a90 	vmov	r1, s19
 800446c:	4897      	ldr	r0, [pc, #604]	; (80046cc <main+0x714>)
 800446e:	f7fe fbc3 	bl	8002bf8 <p>
      if (debug.main_loop_cnt < 100000) {
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	4b96      	ldr	r3, [pc, #600]	; (80046d0 <main+0x718>)
 8004476:	429a      	cmp	r2, r3
 8004478:	d807      	bhi.n	800448a <main+0x4d2>
        p("loop %6d", debug.main_loop_cnt / 10);
 800447a:	6861      	ldr	r1, [r4, #4]
 800447c:	4b95      	ldr	r3, [pc, #596]	; (80046d4 <main+0x71c>)
 800447e:	4896      	ldr	r0, [pc, #600]	; (80046d8 <main+0x720>)
 8004480:	fba3 3101 	umull	r3, r1, r3, r1
 8004484:	08c9      	lsrs	r1, r1, #3
 8004486:	f7fe fbb7 	bl	8002bf8 <p>
      p("\n\r");
 800448a:	4894      	ldr	r0, [pc, #592]	; (80046dc <main+0x724>)
 800448c:	f7fe fbb4 	bl	8002bf8 <p>
      HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)printf_buffer, strlen(printf_buffer));
 8004490:	4650      	mov	r0, sl
 8004492:	f7fb ff15 	bl	80002c0 <strlen>
 8004496:	4651      	mov	r1, sl
 8004498:	b282      	uxth	r2, r0
 800449a:	4891      	ldr	r0, [pc, #580]	; (80046e0 <main+0x728>)
 800449c:	f005 fc14 	bl	8009cc8 <HAL_UART_Transmit_DMA>
      debug.true_fb_toral_spin = 0;
 80044a0:	2300      	movs	r3, #0
      debug.main_loop_cnt = 0;
 80044a2:	2200      	movs	r2, #0
      debug.pre_yaw_angle = imu.yaw_angle;
 80044a4:	f8db 1000 	ldr.w	r1, [fp]
      debug.main_loop_cnt = 0;
 80044a8:	6062      	str	r2, [r4, #4]
      debug.pre_yaw_angle = imu.yaw_angle;
 80044aa:	61e1      	str	r1, [r4, #28]
      debug.true_cycle_cnt = 0;
 80044ac:	60a2      	str	r2, [r4, #8]
      debug.true_fb_toral_spin = 0;
 80044ae:	6263      	str	r3, [r4, #36]	; 0x24
      debug.true_out_total_spi = 0;
 80044b0:	6223      	str	r3, [r4, #32]
 80044b2:	e6ca      	b.n	800424a <main+0x292>
          p("CMD-ALL ");
 80044b4:	488b      	ldr	r0, [pc, #556]	; (80046e4 <main+0x72c>)
 80044b6:	f7fe fb9f 	bl	8002bf8 <p>
          p("AIcmd Vx %+4.1f Vy %+4.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1]);
 80044ba:	6978      	ldr	r0, [r7, #20]
 80044bc:	f7fc f86c 	bl	8000598 <__aeabi_f2d>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	69b8      	ldr	r0, [r7, #24]
 80044c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044ca:	f7fc f865 	bl	8000598 <__aeabi_f2d>
 80044ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044d2:	e9cd 0100 	strd	r0, r1, [sp]
 80044d6:	4884      	ldr	r0, [pc, #528]	; (80046e8 <main+0x730>)
 80044d8:	f7fe fb8e 	bl	8002bf8 <p>
          p("TPx %+4.1f TPy %+4.1f TW %+6.1f ", ai_cmd.global_target_position[0], ai_cmd.global_target_position[1], ai_cmd.target_theta * 180 / M_PI);
 80044dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044de:	f7fc f85b 	bl	8000598 <__aeabi_f2d>
 80044e2:	edd7 7a00 	vldr	s15, [r7]
 80044e6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80044ea:	ec41 0b19 	vmov	d9, r0, r1
 80044ee:	ee17 0a90 	vmov	r0, s15
 80044f2:	f7fc f851 	bl	8000598 <__aeabi_f2d>
 80044f6:	a372      	add	r3, pc, #456	; (adr r3, 80046c0 <main+0x708>)
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f7fc f8a4 	bl	8000648 <__aeabi_dmul>
 8004500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004506:	f7fc f847 	bl	8000598 <__aeabi_f2d>
 800450a:	ec53 2b19 	vmov	r2, r3, d9
 800450e:	e9cd 0100 	strd	r0, r1, [sp]
 8004512:	4876      	ldr	r0, [pc, #472]	; (80046ec <main+0x734>)
 8004514:	f7fe fb70 	bl	8002bf8 <p>
          p("Vision Gbrl-robot X %+6.2f Y %+6.2f Theta %+6.1f ", ai_cmd.global_robot_position[0], ai_cmd.global_robot_position[1], ai_cmd.global_vision_theta);
 8004518:	69f8      	ldr	r0, [r7, #28]
 800451a:	f7fc f83d 	bl	8000598 <__aeabi_f2d>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004528:	f7fc f836 	bl	8000598 <__aeabi_f2d>
 800452c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004530:	6a38      	ldr	r0, [r7, #32]
 8004532:	f7fc f831 	bl	8000598 <__aeabi_f2d>
 8004536:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800453a:	e9cd 0100 	strd	r0, r1, [sp]
 800453e:	486c      	ldr	r0, [pc, #432]	; (80046f0 <main+0x738>)
 8004540:	f7fe fb5a 	bl	8002bf8 <p>
          p("Gbrl-ball X %+6.2f Y %+6.2f ", ai_cmd.global_ball_position[0], ai_cmd.global_ball_position[1]);
 8004544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004546:	f7fc f827 	bl	8000598 <__aeabi_f2d>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004550:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004554:	f7fc f820 	bl	8000598 <__aeabi_f2d>
 8004558:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800455c:	e9cd 0100 	strd	r0, r1, [sp]
 8004560:	4864      	ldr	r0, [pc, #400]	; (80046f4 <main+0x73c>)
 8004562:	f7fe fb49 	bl	8002bf8 <p>
          p("lost %d stop %d kic %3.2f chp %d dri %3.2f kpr %d lcl %d ", ai_cmd.vision_lost_flag, ai_cmd.stop_request_flag, ai_cmd.kick_power, ai_cmd.chip_en, ai_cmd.drible_power,
 8004566:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800456a:	9307      	str	r3, [sp, #28]
 800456c:	68b8      	ldr	r0, [r7, #8]
 800456e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004572:	9306      	str	r3, [sp, #24]
 8004574:	f7fc f810 	bl	8000598 <__aeabi_f2d>
 8004578:	7c3b      	ldrb	r3, [r7, #16]
 800457a:	9302      	str	r3, [sp, #8]
 800457c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7fc f809 	bl	8000598 <__aeabi_f2d>
 8004586:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800458a:	e9cd 0100 	strd	r0, r1, [sp]
 800458e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8004592:	4859      	ldr	r0, [pc, #356]	; (80046f8 <main+0x740>)
 8004594:	f7fe fb30 	bl	8002bf8 <p>
          break;
 8004598:	e76b      	b.n	8004472 <main+0x4ba>
          p("ODOM ");
 800459a:	4858      	ldr	r0, [pc, #352]	; (80046fc <main+0x744>)
          p("vel-diff X %+8.2f, Y %+8.2f, ", acc_vel.vel_error_xy[0] * 1000, acc_vel.vel_error_xy[1] * 1000);
 800459c:	ed9f 9a58 	vldr	s18, [pc, #352]	; 8004700 <main+0x748>
          p("ODOM ");
 80045a0:	f7fe fb2a 	bl	8002bf8 <p>
          p("vel-diff X %+8.2f, Y %+8.2f, ", acc_vel.vel_error_xy[0] * 1000, acc_vel.vel_error_xy[1] * 1000);
 80045a4:	4b57      	ldr	r3, [pc, #348]	; (8004704 <main+0x74c>)
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	ee67 7a89 	vmul.f32	s15, s15, s18
 80045ae:	ee17 0a90 	vmov	r0, s15
 80045b2:	f7fb fff1 	bl	8000598 <__aeabi_f2d>
 80045b6:	4b53      	ldr	r3, [pc, #332]	; (8004704 <main+0x74c>)
 80045b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80045bc:	ee67 7a89 	vmul.f32	s15, s15, s18
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	ee17 0a90 	vmov	r0, s15
 80045c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80045cc:	f7fb ffe4 	bl	8000598 <__aeabi_f2d>
 80045d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045d4:	e9cd 0100 	strd	r0, r1, [sp]
 80045d8:	484b      	ldr	r0, [pc, #300]	; (8004708 <main+0x750>)
 80045da:	f7fe fb0d 	bl	8002bf8 <p>
          p("vel-now %+5.2f, %+5.2f, ", target.local_vel_now[0], target.local_vel_now[1]);
 80045de:	4a4b      	ldr	r2, [pc, #300]	; (800470c <main+0x754>)
 80045e0:	6990      	ldr	r0, [r2, #24]
 80045e2:	f7fb ffd9 	bl	8000598 <__aeabi_f2d>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80045ee:	4a47      	ldr	r2, [pc, #284]	; (800470c <main+0x754>)
 80045f0:	69d0      	ldr	r0, [r2, #28]
 80045f2:	f7fb ffd1 	bl	8000598 <__aeabi_f2d>
 80045f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80045fa:	e9cd 0100 	strd	r0, r1, [sp]
 80045fe:	4844      	ldr	r0, [pc, #272]	; (8004710 <main+0x758>)
 8004600:	f7fe fafa 	bl	8002bf8 <p>
          p("rad %+8.2f, scalar %+8.2f, ", acc_vel.vel_error_rad * 180 / M_PI, acc_vel.vel_error_scalar * 1000);
 8004604:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <main+0x74c>)
 8004606:	edd3 7a03 	vldr	s15, [r3, #12]
 800460a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800460e:	ee17 0a90 	vmov	r0, s15
 8004612:	f7fb ffc1 	bl	8000598 <__aeabi_f2d>
 8004616:	a32a      	add	r3, pc, #168	; (adr r3, 80046c0 <main+0x708>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fc f814 	bl	8000648 <__aeabi_dmul>
 8004620:	4b38      	ldr	r3, [pc, #224]	; (8004704 <main+0x74c>)
 8004622:	edd3 7a02 	vldr	s15, [r3, #8]
 8004626:	ee67 7a89 	vmul.f32	s15, s15, s18
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	ee17 0a90 	vmov	r0, s15
 8004632:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004636:	f7fb ffaf 	bl	8000598 <__aeabi_f2d>
 800463a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800463e:	e9cd 0100 	strd	r0, r1, [sp]
 8004642:	4834      	ldr	r0, [pc, #208]	; (8004714 <main+0x75c>)
 8004644:	f7fe fad8 	bl	8002bf8 <p>
          p("acc X %+8.2f, Y %+8.2f, ", output.accel[0] * 1000, output.accel[1] * 1000);
 8004648:	edd9 7a07 	vldr	s15, [r9, #28]
 800464c:	edd9 9a08 	vldr	s19, [r9, #32]
 8004650:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004654:	ee17 0a90 	vmov	r0, s15
 8004658:	f7fb ff9e 	bl	8000598 <__aeabi_f2d>
 800465c:	ee69 7a89 	vmul.f32	s15, s19, s18
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	ee17 0a90 	vmov	r0, s15
 8004668:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800466c:	f7fb ff94 	bl	8000598 <__aeabi_f2d>
 8004670:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004674:	e9cd 0100 	strd	r0, r1, [sp]
 8004678:	4827      	ldr	r0, [pc, #156]	; (8004718 <main+0x760>)
 800467a:	f7fe fabd 	bl	8002bf8 <p>
          p("real-vel X %+8.1f, Y %+8.1f, ", omni.local_odom_speed[0] * 1000, omni.local_odom_speed[1] * 1000);
 800467e:	4b27      	ldr	r3, [pc, #156]	; (800471c <main+0x764>)
 8004680:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8004684:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004688:	ee17 0a90 	vmov	r0, s15
 800468c:	f7fb ff84 	bl	8000598 <__aeabi_f2d>
 8004690:	4b22      	ldr	r3, [pc, #136]	; (800471c <main+0x764>)
 8004692:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004696:	ee67 7a89 	vmul.f32	s15, s15, s18
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	ee17 0a90 	vmov	r0, s15
 80046a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80046a6:	f7fb ff77 	bl	8000598 <__aeabi_f2d>
 80046aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046ae:	e9cd 0100 	strd	r0, r1, [sp]
 80046b2:	481b      	ldr	r0, [pc, #108]	; (8004720 <main+0x768>)
 80046b4:	f7fe faa0 	bl	8002bf8 <p>
          break;
 80046b8:	e6db      	b.n	8004472 <main+0x4ba>
 80046ba:	bf00      	nop
 80046bc:	f3af 8000 	nop.w
 80046c0:	6dc9c883 	.word	0x6dc9c883
 80046c4:	3fd45f30 	.word	0x3fd45f30
 80046c8:	0800fcac 	.word	0x0800fcac
 80046cc:	0800fcb8 	.word	0x0800fcb8
 80046d0:	0001869f 	.word	0x0001869f
 80046d4:	cccccccd 	.word	0xcccccccd
 80046d8:	0800fce8 	.word	0x0800fce8
 80046dc:	0800fcf4 	.word	0x0800fcf4
 80046e0:	20000e10 	.word	0x20000e10
 80046e4:	0800fbd0 	.word	0x0800fbd0
 80046e8:	0800fbdc 	.word	0x0800fbdc
 80046ec:	0800fbf8 	.word	0x0800fbf8
 80046f0:	0800fc1c 	.word	0x0800fc1c
 80046f4:	0800fc50 	.word	0x0800fc50
 80046f8:	0800fc70 	.word	0x0800fc70
 80046fc:	0800fb34 	.word	0x0800fb34
 8004700:	447a0000 	.word	0x447a0000
 8004704:	2000065c 	.word	0x2000065c
 8004708:	0800fb3c 	.word	0x0800fb3c
 800470c:	20000b54 	.word	0x20000b54
 8004710:	0800fb5c 	.word	0x0800fb5c
 8004714:	0800fb78 	.word	0x0800fb78
 8004718:	0800fb94 	.word	0x0800fb94
 800471c:	200008b0 	.word	0x200008b0
 8004720:	0800fbb0 	.word	0x0800fbb0
          p("MOUSE ");
 8004724:	48c0      	ldr	r0, [pc, #768]	; (8004a28 <main+0xa70>)
          p("raw_odom X %+8.3f Y %+8.3f ", -mouse.raw_odom[0] * 1000, -mouse.raw_odom[1] * 1000);
 8004726:	ed9f 9ac1 	vldr	s18, [pc, #772]	; 8004a2c <main+0xa74>
          p("Error X %+8.2f Y %+8.2f ", (omni.odom[0] + mouse.odom[0]) * 1000, (omni.odom[1] + mouse.odom[1]) * 1000);
 800472a:	eddf 9ac1 	vldr	s19, [pc, #772]	; 8004a30 <main+0xa78>
          p("MOUSE ");
 800472e:	f7fe fa63 	bl	8002bf8 <p>
          p("raw_odom X %+8.3f Y %+8.3f ", -mouse.raw_odom[0] * 1000, -mouse.raw_odom[1] * 1000);
 8004732:	edd8 7a02 	vldr	s15, [r8, #8]
 8004736:	ee67 7a89 	vmul.f32	s15, s15, s18
 800473a:	ee17 0a90 	vmov	r0, s15
 800473e:	f7fb ff2b 	bl	8000598 <__aeabi_f2d>
 8004742:	edd8 7a03 	vldr	s15, [r8, #12]
 8004746:	ee67 7a89 	vmul.f32	s15, s15, s18
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	ee17 0a90 	vmov	r0, s15
 8004752:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004756:	f7fb ff1f 	bl	8000598 <__aeabi_f2d>
 800475a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800475e:	e9cd 0100 	strd	r0, r1, [sp]
 8004762:	48b4      	ldr	r0, [pc, #720]	; (8004a34 <main+0xa7c>)
 8004764:	f7fe fa48 	bl	8002bf8 <p>
          p("mouse floor X %+8.3f Y %+8.3f ", -mouse.floor_odom[0] * 1000, -mouse.floor_odom[1] * 1000);
 8004768:	edd8 7a04 	vldr	s15, [r8, #16]
 800476c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004770:	ee17 0a90 	vmov	r0, s15
 8004774:	f7fb ff10 	bl	8000598 <__aeabi_f2d>
 8004778:	edd8 7a05 	vldr	s15, [r8, #20]
 800477c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	ee17 0a90 	vmov	r0, s15
 8004788:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800478c:	f7fb ff04 	bl	8000598 <__aeabi_f2d>
 8004790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004794:	e9cd 0100 	strd	r0, r1, [sp]
 8004798:	48a7      	ldr	r0, [pc, #668]	; (8004a38 <main+0xa80>)
 800479a:	f7fe fa2d 	bl	8002bf8 <p>
          p("mouse X %+8.2f Y %+8.2f ", -mouse.odom[0] * 1000, -mouse.odom[1] * 1000);
 800479e:	edd8 7a06 	vldr	s15, [r8, #24]
 80047a2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80047a6:	ee17 0a90 	vmov	r0, s15
 80047aa:	f7fb fef5 	bl	8000598 <__aeabi_f2d>
 80047ae:	edd8 7a07 	vldr	s15, [r8, #28]
 80047b2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	ee17 0a90 	vmov	r0, s15
 80047be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80047c2:	f7fb fee9 	bl	8000598 <__aeabi_f2d>
 80047c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047ca:	e9cd 0100 	strd	r0, r1, [sp]
 80047ce:	489b      	ldr	r0, [pc, #620]	; (8004a3c <main+0xa84>)
 80047d0:	f7fe fa12 	bl	8002bf8 <p>
          p("Error X %+8.2f Y %+8.2f ", (omni.odom[0] + mouse.odom[0]) * 1000, (omni.odom[1] + mouse.odom[1]) * 1000);
 80047d4:	4b9a      	ldr	r3, [pc, #616]	; (8004a40 <main+0xa88>)
 80047d6:	ed98 7a06 	vldr	s14, [r8, #24]
 80047da:	edd3 7a06 	vldr	s15, [r3, #24]
 80047de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047e2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80047e6:	ee17 0a90 	vmov	r0, s15
 80047ea:	f7fb fed5 	bl	8000598 <__aeabi_f2d>
 80047ee:	4b94      	ldr	r3, [pc, #592]	; (8004a40 <main+0xa88>)
 80047f0:	ed98 7a07 	vldr	s14, [r8, #28]
 80047f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80047f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047fc:	4602      	mov	r2, r0
 80047fe:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004802:	460b      	mov	r3, r1
 8004804:	ee17 0a90 	vmov	r0, s15
 8004808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800480c:	f7fb fec4 	bl	8000598 <__aeabi_f2d>
 8004810:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004814:	e9cd 0100 	strd	r0, r1, [sp]
 8004818:	488a      	ldr	r0, [pc, #552]	; (8004a44 <main+0xa8c>)
 800481a:	f7fe f9ed 	bl	8002bf8 <p>
          p("diff X %+8.2f Y %+8.2f ", mouse.raw_diff[0] * 1000, mouse.raw_diff[1] * 1000);
 800481e:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
 8004822:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004826:	ee17 0a90 	vmov	r0, s15
 800482a:	f7fb feb5 	bl	8000598 <__aeabi_f2d>
 800482e:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
 8004832:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	ee17 0a90 	vmov	r0, s15
 800483e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004842:	f7fb fea9 	bl	8000598 <__aeabi_f2d>
 8004846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800484a:	e9cd 0100 	strd	r0, r1, [sp]
 800484e:	487e      	ldr	r0, [pc, #504]	; (8004a48 <main+0xa90>)
 8004850:	f7fe f9d2 	bl	8002bf8 <p>
          p("mouseRaw X %+8.1f Y %+8.1f ", mouse.raw[0], mouse.raw[1]);
 8004854:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 8004858:	f9b8 1020 	ldrsh.w	r1, [r8, #32]
 800485c:	487b      	ldr	r0, [pc, #492]	; (8004a4c <main+0xa94>)
 800485e:	f7fe f9cb 	bl	8002bf8 <p>
          p("raw X %+4d Y %+4d Q %6d", mouse.raw[0], mouse.raw[1], mouse.quality);
 8004862:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8004866:	f9b8 2022 	ldrsh.w	r2, [r8, #34]	; 0x22
 800486a:	f9b8 1020 	ldrsh.w	r1, [r8, #32]
 800486e:	4878      	ldr	r0, [pc, #480]	; (8004a50 <main+0xa98>)
 8004870:	f7fe f9c2 	bl	8002bf8 <p>
          break;
 8004874:	e5fd      	b.n	8004472 <main+0x4ba>
          p("KICKER ");
 8004876:	4877      	ldr	r0, [pc, #476]	; (8004a54 <main+0xa9c>)
 8004878:	f7fe f9be 	bl	8002bf8 <p>
          p("Batt(Pw) %3.1f Cap=%3.0f BattC %+6.1f Batt(Sub) %3.1f / ", can_raw.power_voltage[5], can_raw.power_voltage[6], can_raw.current[4], can_raw.power_voltage[4]);
 800487c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800487e:	f7fb fe8b 	bl	8000598 <__aeabi_f2d>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004888:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800488c:	f7fb fe84 	bl	8000598 <__aeabi_f2d>
 8004890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004894:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8004896:	f7fb fe7f 	bl	8000598 <__aeabi_f2d>
 800489a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800489e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80048a0:	f7fb fe7a 	bl	8000598 <__aeabi_f2d>
 80048a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048a8:	e9cd 0100 	strd	r0, r1, [sp]
 80048ac:	486a      	ldr	r0, [pc, #424]	; (8004a58 <main+0xaa0>)
 80048ae:	f7fe f9a3 	bl	8002bf8 <p>
          p("FET=%5.1f L1=%5.1f L2=%5.1f / ", can_raw.temperature[4], can_raw.temperature[5], can_raw.temperature[6]);
 80048b2:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80048b4:	f7fb fe70 	bl	8000598 <__aeabi_f2d>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80048be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80048c2:	f7fb fe69 	bl	8000598 <__aeabi_f2d>
 80048c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048ca:	6e28      	ldr	r0, [r5, #96]	; 0x60
 80048cc:	f7fb fe64 	bl	8000598 <__aeabi_f2d>
 80048d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048d4:	e9cd 0100 	strd	r0, r1, [sp]
 80048d8:	4860      	ldr	r0, [pc, #384]	; (8004a5c <main+0xaa4>)
 80048da:	f7fe f98d 	bl	8002bf8 <p>
          p("ball_sensor %d %d / ESC Spd %+5.0f ", can_raw.ball_detection[0], can_raw.ball_detection[1], can_raw.motor_feedback_velocity[4]);
 80048de:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80048e0:	f7fb fe5a 	bl	8000598 <__aeabi_f2d>
 80048e4:	e9cd 0100 	strd	r0, r1, [sp]
 80048e8:	485d      	ldr	r0, [pc, #372]	; (8004a60 <main+0xaa8>)
 80048ea:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 80048ee:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
 80048f2:	f7fe f981 	bl	8002bf8 <p>
          break;
 80048f6:	e5bc      	b.n	8004472 <main+0x4ba>
          p("DRIBBLER ");
 80048f8:	485a      	ldr	r0, [pc, #360]	; (8004a64 <main+0xaac>)
 80048fa:	f7fe f97d 	bl	8002bf8 <p>
          p("Batt(Sub) %3.1f / ", can_raw.power_voltage[4]);
 80048fe:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004900:	f7fb fe4a 	bl	8000598 <__aeabi_f2d>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4857      	ldr	r0, [pc, #348]	; (8004a68 <main+0xab0>)
 800490a:	f7fe f975 	bl	8002bf8 <p>
          p("ball_sensor %d %d / ESC Spd %+5.0f / ", can_raw.ball_detection[0], can_raw.ball_detection[1], can_raw.motor_feedback_velocity[4]);
 800490e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004910:	f7fb fe42 	bl	8000598 <__aeabi_f2d>
 8004914:	e9cd 0100 	strd	r0, r1, [sp]
 8004918:	4854      	ldr	r0, [pc, #336]	; (8004a6c <main+0xab4>)
 800491a:	f895 207d 	ldrb.w	r2, [r5, #125]	; 0x7d
 800491e:	f895 107c 	ldrb.w	r1, [r5, #124]	; 0x7c
 8004922:	f7fe f969 	bl	8002bf8 <p>
          p("local_vision x=%3d y=%3d radius=%3d FPS=%3d ", ai_cmd.ball_local_x, ai_cmd.ball_local_y, ai_cmd.ball_local_radius, ai_cmd.ball_local_FPS);
 8004926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800492c:	4850      	ldr	r0, [pc, #320]	; (8004a70 <main+0xab8>)
 800492e:	e9d7 230f 	ldrd	r2, r3, [r7, #60]	; 0x3c
 8004932:	f7fe f961 	bl	8002bf8 <p>
          break;
 8004936:	e59c      	b.n	8004472 <main+0x4ba>
          p("MOTOR ");
 8004938:	484e      	ldr	r0, [pc, #312]	; (8004a74 <main+0xabc>)
 800493a:	f7fe f95d 	bl	8002bf8 <p>
          p("SW %2d ", decode_SW(sys.sw_data));
 800493e:	8c30      	ldrh	r0, [r6, #32]
 8004940:	f001 fcc2 	bl	80062c8 <decode_SW>
 8004944:	4601      	mov	r1, r0
 8004946:	484c      	ldr	r0, [pc, #304]	; (8004a78 <main+0xac0>)
 8004948:	f7fe f956 	bl	8002bf8 <p>
          p("Spd M0=%+6.1f M1=%+6.1f M2=%+6.1f M3=%+6.1f / ", can_raw.motor_feedback[0], can_raw.motor_feedback[1], can_raw.motor_feedback[2], can_raw.motor_feedback[3]);
 800494c:	68a8      	ldr	r0, [r5, #8]
 800494e:	f7fb fe23 	bl	8000598 <__aeabi_f2d>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	6968      	ldr	r0, [r5, #20]
 8004958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800495c:	f7fb fe1c 	bl	8000598 <__aeabi_f2d>
 8004960:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004964:	6928      	ldr	r0, [r5, #16]
 8004966:	f7fb fe17 	bl	8000598 <__aeabi_f2d>
 800496a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800496e:	68e8      	ldr	r0, [r5, #12]
 8004970:	f7fb fe12 	bl	8000598 <__aeabi_f2d>
 8004974:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004978:	e9cd 0100 	strd	r0, r1, [sp]
 800497c:	483f      	ldr	r0, [pc, #252]	; (8004a7c <main+0xac4>)
 800497e:	f7fe f93b 	bl	8002bf8 <p>
          p("Pw v0=%5.1f v1=%5.1f v2=%5.1f v3=%5.1f / ", can_raw.power_voltage[0], can_raw.power_voltage[1], can_raw.power_voltage[2], can_raw.power_voltage[3]);
 8004982:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004984:	f7fb fe08 	bl	8000598 <__aeabi_f2d>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800498e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004992:	f7fb fe01 	bl	8000598 <__aeabi_f2d>
 8004996:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800499a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800499c:	f7fb fdfc 	bl	8000598 <__aeabi_f2d>
 80049a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80049a6:	f7fb fdf7 	bl	8000598 <__aeabi_f2d>
 80049aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049ae:	e9cd 0100 	strd	r0, r1, [sp]
 80049b2:	4833      	ldr	r0, [pc, #204]	; (8004a80 <main+0xac8>)
 80049b4:	f7fe f920 	bl	8002bf8 <p>
          p("Im i0=%+5.1f i1=%+5.1f i2=%+5.1f i3=%+5.1f / ", can_raw.current[0], can_raw.current[1], can_raw.current[2], can_raw.current[3]);
 80049b8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80049ba:	f7fb fded 	bl	8000598 <__aeabi_f2d>
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	6f68      	ldr	r0, [r5, #116]	; 0x74
 80049c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049c8:	f7fb fde6 	bl	8000598 <__aeabi_f2d>
 80049cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049d0:	6f28      	ldr	r0, [r5, #112]	; 0x70
 80049d2:	f7fb fde1 	bl	8000598 <__aeabi_f2d>
 80049d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049da:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80049dc:	f7fb fddc 	bl	8000598 <__aeabi_f2d>
 80049e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049e4:	e9cd 0100 	strd	r0, r1, [sp]
 80049e8:	4826      	ldr	r0, [pc, #152]	; (8004a84 <main+0xacc>)
 80049ea:	f7fe f905 	bl	8002bf8 <p>
          p("Temp m0=%3.0f m1=%3.0f m2=%3.0f m3=%3.0f ", can_raw.temperature[0], can_raw.temperature[1], can_raw.temperature[2], can_raw.temperature[3]);
 80049ee:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80049f0:	f7fb fdd2 	bl	8000598 <__aeabi_f2d>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049fe:	f7fb fdcb 	bl	8000598 <__aeabi_f2d>
 8004a02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a06:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004a08:	f7fb fdc6 	bl	8000598 <__aeabi_f2d>
 8004a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a10:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004a12:	f7fb fdc1 	bl	8000598 <__aeabi_f2d>
 8004a16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a1a:	e9cd 0100 	strd	r0, r1, [sp]
 8004a1e:	481a      	ldr	r0, [pc, #104]	; (8004a88 <main+0xad0>)
 8004a20:	f7fe f8ea 	bl	8002bf8 <p>
          break;
 8004a24:	e525      	b.n	8004472 <main+0x4ba>
 8004a26:	bf00      	nop
 8004a28:	0800fa6c 	.word	0x0800fa6c
 8004a2c:	c47a0000 	.word	0xc47a0000
 8004a30:	447a0000 	.word	0x447a0000
 8004a34:	0800fa74 	.word	0x0800fa74
 8004a38:	0800fa90 	.word	0x0800fa90
 8004a3c:	0800fab0 	.word	0x0800fab0
 8004a40:	200008b0 	.word	0x200008b0
 8004a44:	0800facc 	.word	0x0800facc
 8004a48:	0800fae8 	.word	0x0800fae8
 8004a4c:	0800fb00 	.word	0x0800fb00
 8004a50:	0800fb1c 	.word	0x0800fb1c
 8004a54:	0800f9e4 	.word	0x0800f9e4
 8004a58:	0800f9ec 	.word	0x0800f9ec
 8004a5c:	0800fa28 	.word	0x0800fa28
 8004a60:	0800fa48 	.word	0x0800fa48
 8004a64:	0800f96c 	.word	0x0800f96c
 8004a68:	0800f978 	.word	0x0800f978
 8004a6c:	0800f98c 	.word	0x0800f98c
 8004a70:	0800f9b4 	.word	0x0800f9b4
 8004a74:	0800f8a4 	.word	0x0800f8a4
 8004a78:	0800f8ac 	.word	0x0800f8ac
 8004a7c:	0800f8b4 	.word	0x0800f8b4
 8004a80:	0800f8e4 	.word	0x0800f8e4
 8004a84:	0800f910 	.word	0x0800f910
 8004a88:	0800f940 	.word	0x0800f940
          p("CMD ");
 8004a8c:	48a4      	ldr	r0, [pc, #656]	; (8004d20 <main+0xd68>)
 8004a8e:	f7fe f8b3 	bl	8002bf8 <p>
          if (connection.connected_ai) {
 8004a92:	4ba4      	ldr	r3, [pc, #656]	; (8004d24 <main+0xd6c>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 80c2 	bne.w	8004c20 <main+0xc68>
          } else if (connection.connected_cm4) {
 8004a9c:	4aa1      	ldr	r2, [pc, #644]	; (8004d24 <main+0xd6c>)
 8004a9e:	7853      	ldrb	r3, [r2, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80b1 	beq.w	8004c08 <main+0xc50>
            p("\e[33m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004aa6:	6850      	ldr	r0, [r2, #4]
 8004aa8:	f7fb fd76 	bl	8000598 <__aeabi_f2d>
 8004aac:	460b      	mov	r3, r1
 8004aae:	499d      	ldr	r1, [pc, #628]	; (8004d24 <main+0xd6c>)
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	78c9      	ldrb	r1, [r1, #3]
 8004ab4:	489c      	ldr	r0, [pc, #624]	; (8004d28 <main+0xd70>)
 8004ab6:	f7fe f89f 	bl	8002bf8 <p>
          p("AIcmd Vx %+4.1f Vy %+4.1f Tw %+6.1f ", ai_cmd.local_target_speed[0], ai_cmd.local_target_speed[1], ai_cmd.target_theta * 180 / M_PI);
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	f7fb fd6c 	bl	8000598 <__aeabi_f2d>
 8004ac0:	edd7 7a00 	vldr	s15, [r7]
 8004ac4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8004ac8:	ec41 0b19 	vmov	d9, r0, r1
 8004acc:	ee17 0a90 	vmov	r0, s15
 8004ad0:	f7fb fd62 	bl	8000598 <__aeabi_f2d>
 8004ad4:	a38e      	add	r3, pc, #568	; (adr r3, 8004d10 <main+0xd58>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7fb fdb5 	bl	8000648 <__aeabi_dmul>
 8004ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ae2:	69b8      	ldr	r0, [r7, #24]
 8004ae4:	f7fb fd58 	bl	8000598 <__aeabi_f2d>
 8004ae8:	ec53 2b19 	vmov	r2, r3, d9
 8004aec:	e9cd 0100 	strd	r0, r1, [sp]
 8004af0:	488e      	ldr	r0, [pc, #568]	; (8004d2c <main+0xd74>)
 8004af2:	f7fe f881 	bl	8002bf8 <p>
          if (sys.main_mode != MAIN_MODE_CMD_DEBUG_MODE) {
 8004af6:	7c33      	ldrb	r3, [r6, #16]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	f000 80a1 	beq.w	8004c40 <main+0xc88>
            if (ai_cmd.vision_lost_flag) {  // SSL-Vision (Robot)
 8004afe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f040 8098 	bne.w	8004c38 <main+0xc80>
            p("Vision X %+6.1f Y %+6.1f W %+4.1f ", ai_cmd.global_robot_position[0] * 1000, ai_cmd.global_robot_position[1] * 1000, ai_cmd.global_vision_theta);
 8004b08:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b0c:	ed9f 9a88 	vldr	s18, [pc, #544]	; 8004d30 <main+0xd78>
 8004b10:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004b14:	ee17 0a90 	vmov	r0, s15
 8004b18:	f7fb fd3e 	bl	8000598 <__aeabi_f2d>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b26:	f7fb fd37 	bl	8000598 <__aeabi_f2d>
 8004b2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b2e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b36:	ee17 0a90 	vmov	r0, s15
 8004b3a:	f7fb fd2d 	bl	8000598 <__aeabi_f2d>
 8004b3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b42:	e9cd 0100 	strd	r0, r1, [sp]
 8004b46:	487b      	ldr	r0, [pc, #492]	; (8004d34 <main+0xd7c>)
 8004b48:	f7fe f856 	bl	8002bf8 <p>
            p("AIcmd X %+6.2f Y %+6.2f ", ai_cmd.global_target_position[0], ai_cmd.global_target_position[1]);
 8004b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b4e:	f7fb fd23 	bl	8000598 <__aeabi_f2d>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b5c:	f7fb fd1c 	bl	8000598 <__aeabi_f2d>
 8004b60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b64:	e9cd 0100 	strd	r0, r1, [sp]
 8004b68:	4873      	ldr	r0, [pc, #460]	; (8004d38 <main+0xd80>)
 8004b6a:	f7fe f845 	bl	8002bf8 <p>
            p("Wdidd %+5.1f", (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180 / M_PI));
 8004b6e:	ed9b 7a00 	vldr	s14, [fp]
 8004b72:	eddf 7a72 	vldr	s15, [pc, #456]	; 8004d3c <main+0xd84>
 8004b76:	edd7 0a01 	vldr	s1, [r7, #4]
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edcd 0a08 	vstr	s1, [sp, #32]
 8004b82:	ee17 0a90 	vmov	r0, s15
 8004b86:	f7fb fd07 	bl	8000598 <__aeabi_f2d>
 8004b8a:	a363      	add	r3, pc, #396	; (adr r3, 8004d18 <main+0xd60>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fd5a 	bl	8000648 <__aeabi_dmul>
 8004b94:	f7fc f850 	bl	8000c38 <__aeabi_d2f>
 8004b98:	eddd 0a08 	vldr	s1, [sp, #32]
 8004b9c:	ee00 0a10 	vmov	s0, r0
 8004ba0:	f001 faba 	bl	8006118 <getAngleDiff>
 8004ba4:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004ba8:	ee17 0a90 	vmov	r0, s15
 8004bac:	f7fb fcf4 	bl	8000598 <__aeabi_f2d>
 8004bb0:	a357      	add	r3, pc, #348	; (adr r3, 8004d10 <main+0xd58>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fd47 	bl	8000648 <__aeabi_dmul>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4860      	ldr	r0, [pc, #384]	; (8004d40 <main+0xd88>)
 8004bc0:	f7fe f81a 	bl	8002bf8 <p>
            p("\e[37m ");  // end color
 8004bc4:	485f      	ldr	r0, [pc, #380]	; (8004d44 <main+0xd8c>)
 8004bc6:	f7fe f817 	bl	8002bf8 <p>
            p("update %d ", debug.theta_override_flag);
 8004bca:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8004bce:	485e      	ldr	r0, [pc, #376]	; (8004d48 <main+0xd90>)
 8004bd0:	f7fe f812 	bl	8002bf8 <p>
 8004bd4:	e44d      	b.n	8004472 <main+0x4ba>
        p("Batt=%3.1f ", can_raw.power_voltage[5]);
 8004bd6:	f7fb fcdf 	bl	8000598 <__aeabi_f2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	485b      	ldr	r0, [pc, #364]	; (8004d4c <main+0xd94>)
 8004be0:	f7fe f80a 	bl	8002bf8 <p>
 8004be4:	f7ff bb5c 	b.w	80042a0 <main+0x2e8>
        p("\e[33m");
 8004be8:	4859      	ldr	r0, [pc, #356]	; (8004d50 <main+0xd98>)
 8004bea:	f7fe f805 	bl	8002bf8 <p>
 8004bee:	e407      	b.n	8004400 <main+0x448>
        p("\e[31m error : ID %5d / Info %5d / Value %+8.3f \e[31m", sys.error_id, sys.error_info, sys.error_value);
 8004bf0:	68b0      	ldr	r0, [r6, #8]
 8004bf2:	f7fb fcd1 	bl	8000598 <__aeabi_f2d>
 8004bf6:	88b2      	ldrh	r2, [r6, #4]
 8004bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8004bfc:	8871      	ldrh	r1, [r6, #2]
 8004bfe:	4855      	ldr	r0, [pc, #340]	; (8004d54 <main+0xd9c>)
 8004c00:	f7fd fffa 	bl	8002bf8 <p>
 8004c04:	f7ff bb9f 	b.w	8004346 <main+0x38e>
            p("\e[31m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004c08:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <main+0xd6c>)
 8004c0a:	6858      	ldr	r0, [r3, #4]
 8004c0c:	f7fb fcc4 	bl	8000598 <__aeabi_f2d>
 8004c10:	460b      	mov	r3, r1
 8004c12:	4944      	ldr	r1, [pc, #272]	; (8004d24 <main+0xd6c>)
 8004c14:	4602      	mov	r2, r0
 8004c16:	78c9      	ldrb	r1, [r1, #3]
 8004c18:	484f      	ldr	r0, [pc, #316]	; (8004d58 <main+0xda0>)
 8004c1a:	f7fd ffed 	bl	8002bf8 <p>
 8004c1e:	e74c      	b.n	8004aba <main+0xb02>
            p("\e[32m%3d,%3.0f\e[37m ", connection.check_ver, connection.cmd_rx_frq);
 8004c20:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <main+0xd6c>)
 8004c22:	6858      	ldr	r0, [r3, #4]
 8004c24:	f7fb fcb8 	bl	8000598 <__aeabi_f2d>
 8004c28:	460b      	mov	r3, r1
 8004c2a:	493e      	ldr	r1, [pc, #248]	; (8004d24 <main+0xd6c>)
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	78c9      	ldrb	r1, [r1, #3]
 8004c30:	484a      	ldr	r0, [pc, #296]	; (8004d5c <main+0xda4>)
 8004c32:	f7fd ffe1 	bl	8002bf8 <p>
 8004c36:	e740      	b.n	8004aba <main+0xb02>
              p("\e[33m");
 8004c38:	4845      	ldr	r0, [pc, #276]	; (8004d50 <main+0xd98>)
 8004c3a:	f7fd ffdd 	bl	8002bf8 <p>
 8004c3e:	e763      	b.n	8004b08 <main+0xb50>
            p("omni X %+8.3f Y %+8.3f ", omni.odom[0] * 1000, omni.odom[1] * 1000);
 8004c40:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <main+0xda8>)
 8004c42:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8004d30 <main+0xd78>
 8004c46:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c4a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004c4e:	ee17 0a90 	vmov	r0, s15
 8004c52:	f7fb fca1 	bl	8000598 <__aeabi_f2d>
 8004c56:	4b42      	ldr	r3, [pc, #264]	; (8004d60 <main+0xda8>)
 8004c58:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c5c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	ee17 0a90 	vmov	r0, s15
 8004c68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c6c:	f7fb fc94 	bl	8000598 <__aeabi_f2d>
 8004c70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c74:	e9cd 0100 	strd	r0, r1, [sp]
 8004c78:	483a      	ldr	r0, [pc, #232]	; (8004d64 <main+0xdac>)
 8004c7a:	f7fd ffbd 	bl	8002bf8 <p>
            p("Wdidd %+5.1f", (getAngleDiff(imu.yaw_angle * PI / 180.0, ai_cmd.global_vision_theta) * 180 / M_PI));
 8004c7e:	ed9b 7a00 	vldr	s14, [fp]
 8004c82:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004d3c <main+0xd84>
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	ee17 0a90 	vmov	r0, s15
 8004c8e:	f7fb fc83 	bl	8000598 <__aeabi_f2d>
 8004c92:	a321      	add	r3, pc, #132	; (adr r3, 8004d18 <main+0xd60>)
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f7fb fcd6 	bl	8000648 <__aeabi_dmul>
 8004c9c:	f7fb ffcc 	bl	8000c38 <__aeabi_d2f>
 8004ca0:	edd7 0a01 	vldr	s1, [r7, #4]
 8004ca4:	ee00 0a10 	vmov	s0, r0
 8004ca8:	f001 fa36 	bl	8006118 <getAngleDiff>
 8004cac:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004cb0:	ee17 0a90 	vmov	r0, s15
 8004cb4:	f7fb fc70 	bl	8000598 <__aeabi_f2d>
 8004cb8:	a315      	add	r3, pc, #84	; (adr r3, 8004d10 <main+0xd58>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fcc3 	bl	8000648 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	481e      	ldr	r0, [pc, #120]	; (8004d40 <main+0xd88>)
 8004cc8:	f7fd ff96 	bl	8002bf8 <p>
            p("Temp %3.0f %3.0f %3.0f %3.0f", can_raw.temperature[0], can_raw.temperature[1], can_raw.temperature[2], can_raw.temperature[3]);
 8004ccc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8004cce:	f7fb fc63 	bl	8000598 <__aeabi_f2d>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cdc:	f7fb fc5c 	bl	8000598 <__aeabi_f2d>
 8004ce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ce4:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004ce6:	f7fb fc57 	bl	8000598 <__aeabi_f2d>
 8004cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cee:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8004cf0:	f7fb fc52 	bl	8000598 <__aeabi_f2d>
 8004cf4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cf8:	e9cd 0100 	strd	r0, r1, [sp]
 8004cfc:	481a      	ldr	r0, [pc, #104]	; (8004d68 <main+0xdb0>)
 8004cfe:	f7fd ff7b 	bl	8002bf8 <p>
 8004d02:	f7ff bbb6 	b.w	8004472 <main+0x4ba>
          debug.print_idx = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	6023      	str	r3, [r4, #0]
          break;
 8004d0a:	f7ff bbb2 	b.w	8004472 <main+0x4ba>
 8004d0e:	bf00      	nop
 8004d10:	6dc9c883 	.word	0x6dc9c883
 8004d14:	3fd45f30 	.word	0x3fd45f30
 8004d18:	16c16c17 	.word	0x16c16c17
 8004d1c:	3f76c16c 	.word	0x3f76c16c
 8004d20:	0800f790 	.word	0x0800f790
 8004d24:	2000074c 	.word	0x2000074c
 8004d28:	0800f7b0 	.word	0x0800f7b0
 8004d2c:	0800f7e0 	.word	0x0800f7e0
 8004d30:	447a0000 	.word	0x447a0000
 8004d34:	0800f808 	.word	0x0800f808
 8004d38:	0800f82c 	.word	0x0800f82c
 8004d3c:	40490fdb 	.word	0x40490fdb
 8004d40:	0800f848 	.word	0x0800f848
 8004d44:	0800f858 	.word	0x0800f858
 8004d48:	0800f860 	.word	0x0800f860
 8004d4c:	0800f744 	.word	0x0800f744
 8004d50:	0800f788 	.word	0x0800f788
 8004d54:	0800f750 	.word	0x0800f750
 8004d58:	0800f7c8 	.word	0x0800f7c8
 8004d5c:	0800f798 	.word	0x0800f798
 8004d60:	200008b0 	.word	0x200008b0
 8004d64:	0800f86c 	.word	0x0800f86c
 8004d68:	0800f884 	.word	0x0800f884
 8004d6c:	00000000 	.word	0x00000000

08004d70 <mouseOdometory>:

#include "management.h"
#include "ring_buffer.h"

void mouseOdometory()
{
 8004d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004d74:	4c68      	ldr	r4, [pc, #416]	; (8004f18 <mouseOdometory+0x1a8>)
 8004d76:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004f1c <mouseOdometory+0x1ac>
 8004d7a:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;

  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004d7e:	edd4 6a02 	vldr	s13, [r4, #8]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004d82:	ee07 3a90 	vmov	s15, r3
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004d86:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
{
 8004d8a:	ed2d 8b04 	vpush	{d8-d9}
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004d8e:	ee08 3a10 	vmov	s16, r3
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004d96:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004d9e:	ee28 8a07 	vmul.f32	s16, s16, s14
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004da2:	ed94 7a03 	vldr	s14, [r4, #12]
  mouse.raw_diff[0] = (float)mouse.raw[0] / 500;
 8004da6:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004daa:	ee37 7a08 	vadd.f32	s14, s14, s16
  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004dae:	ee76 6aa7 	vadd.f32	s13, s13, s15

  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004db2:	ee17 0a90 	vmov	r0, s15
  mouse.raw_odom[0] += mouse.raw_diff[0];
 8004db6:	edc4 6a02 	vstr	s13, [r4, #8]
  mouse.raw_odom[1] += mouse.raw_diff[1];
 8004dba:	ed84 7a03 	vstr	s14, [r4, #12]
  mouse.raw_diff[1] = (float)mouse.raw[1] / 500;
 8004dbe:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004dc2:	f7fb fbe9 	bl	8000598 <__aeabi_f2d>
 8004dc6:	4b56      	ldr	r3, [pc, #344]	; (8004f20 <mouseOdometory+0x1b0>)
 8004dc8:	689d      	ldr	r5, [r3, #8]
 8004dca:	4606      	mov	r6, r0
 8004dcc:	4628      	mov	r0, r5
 8004dce:	460f      	mov	r7, r1
 8004dd0:	f7fb fbe2 	bl	8000598 <__aeabi_f2d>
 8004dd4:	ec41 0b10 	vmov	d0, r0, r1
 8004dd8:	ec41 0b19 	vmov	d9, r0, r1
 8004ddc:	f009 f84c 	bl	800de78 <cos>
 8004de0:	ee18 0a10 	vmov	r0, s16
 8004de4:	ec5b ab10 	vmov	sl, fp, d0
 8004de8:	f7fb fbd6 	bl	8000598 <__aeabi_f2d>
 8004dec:	eeb0 0a49 	vmov.f32	s0, s18
 8004df0:	eef0 0a69 	vmov.f32	s1, s19
 8004df4:	ec41 0b18 	vmov	d8, r0, r1
 8004df8:	f009 f892 	bl	800df20 <sin>
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	465b      	mov	r3, fp
 8004e00:	4630      	mov	r0, r6
 8004e02:	4639      	mov	r1, r7
 8004e04:	eeb0 9a40 	vmov.f32	s18, s0
 8004e08:	eef0 9a60 	vmov.f32	s19, s1
 8004e0c:	f7fb fc1c 	bl	8000648 <__aeabi_dmul>
 8004e10:	ec53 2b19 	vmov	r2, r3, d9
 8004e14:	4680      	mov	r8, r0
 8004e16:	4689      	mov	r9, r1
 8004e18:	ec51 0b18 	vmov	r0, r1, d8
 8004e1c:	f7fb fc14 	bl	8000648 <__aeabi_dmul>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4640      	mov	r0, r8
 8004e26:	4649      	mov	r1, r9
 8004e28:	f7fb fa56 	bl	80002d8 <__aeabi_dsub>
 8004e2c:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <mouseOdometory+0x1b4>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f7fb fc0a 	bl	8000648 <__aeabi_dmul>
 8004e34:	4680      	mov	r8, r0
 8004e36:	6920      	ldr	r0, [r4, #16]
 8004e38:	4689      	mov	r9, r1
 8004e3a:	f7fb fbad 	bl	8000598 <__aeabi_f2d>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4640      	mov	r0, r8
 8004e44:	4649      	mov	r1, r9
 8004e46:	f7fb fa49 	bl	80002dc <__adddf3>
 8004e4a:	f7fb fef5 	bl	8000c38 <__aeabi_d2f>
 8004e4e:	4603      	mov	r3, r0
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004e50:	4639      	mov	r1, r7
 8004e52:	4630      	mov	r0, r6
  mouse.floor_odom[0] += ((float)mouse.raw_diff[0] * cos(imu.yaw_angle_rad) - (float)mouse.raw_diff[1] * sin(imu.yaw_angle_rad)) / 2;
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	461e      	mov	r6, r3
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004e58:	ec53 2b19 	vmov	r2, r3, d9
 8004e5c:	f7fb fbf4 	bl	8000648 <__aeabi_dmul>
 8004e60:	ec53 2b18 	vmov	r2, r3, d8
 8004e64:	4680      	mov	r8, r0
 8004e66:	4689      	mov	r9, r1
 8004e68:	4650      	mov	r0, sl
 8004e6a:	4659      	mov	r1, fp
 8004e6c:	f7fb fbec 	bl	8000648 <__aeabi_dmul>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4640      	mov	r0, r8
 8004e76:	4649      	mov	r1, r9
 8004e78:	f7fb fa30 	bl	80002dc <__adddf3>
 8004e7c:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <mouseOdometory+0x1b4>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f7fb fbe2 	bl	8000648 <__aeabi_dmul>
 8004e84:	4680      	mov	r8, r0
 8004e86:	6960      	ldr	r0, [r4, #20]
 8004e88:	4689      	mov	r9, r1
 8004e8a:	f7fb fb85 	bl	8000598 <__aeabi_f2d>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4640      	mov	r0, r8
 8004e94:	4649      	mov	r1, r9
 8004e96:	f7fb fa21 	bl	80002dc <__adddf3>
 8004e9a:	f7fb fecd 	bl	8000c38 <__aeabi_d2f>

  // 旋回ぶん補正 X方向は誤差に埋もれてしまう。パラメーター調整を省略するために無効化
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 8004e9e:	4652      	mov	r2, sl
 8004ea0:	465b      	mov	r3, fp
  mouse.floor_odom[1] += ((float)mouse.raw_diff[0] * sin(imu.yaw_angle_rad) + (float)mouse.raw_diff[1] * cos(imu.yaw_angle_rad)) / 2;
 8004ea2:	4680      	mov	r8, r0
 8004ea4:	6160      	str	r0, [r4, #20]
  mouse.odom[0] = mouse.floor_odom[0] - (0.066 * cos(imu.yaw_angle_rad) - 0.066);
 8004ea6:	4920      	ldr	r1, [pc, #128]	; (8004f28 <mouseOdometory+0x1b8>)
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f7fb fa15 	bl	80002d8 <__aeabi_dsub>
 8004eae:	a318      	add	r3, pc, #96	; (adr r3, 8004f10 <mouseOdometory+0x1a0>)
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f7fb fbc8 	bl	8000648 <__aeabi_dmul>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	4630      	mov	r0, r6
 8004ebc:	460f      	mov	r7, r1
 8004ebe:	4616      	mov	r6, r2
 8004ec0:	f7fb fb6a 	bl	8000598 <__aeabi_f2d>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4630      	mov	r0, r6
 8004eca:	4639      	mov	r1, r7
 8004ecc:	f7fb fa06 	bl	80002dc <__adddf3>
 8004ed0:	f7fb feb2 	bl	8000c38 <__aeabi_d2f>
 8004ed4:	61a0      	str	r0, [r4, #24]
  //  +(0.009 * sin(imu.yaw_angle_rad));
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	f7fb fb5e 	bl	8000598 <__aeabi_f2d>
 8004edc:	a30c      	add	r3, pc, #48	; (adr r3, 8004f10 <mouseOdometory+0x1a0>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	460f      	mov	r7, r1
 8004ee6:	ec51 0b19 	vmov	r0, r1, d9
 8004eea:	f7fb fbad 	bl	8000648 <__aeabi_dmul>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	f7fb f9ef 	bl	80002d8 <__aeabi_dsub>
 8004efa:	f7fb fe9d 	bl	8000c38 <__aeabi_d2f>
  //  +(0.009 * cos(imu.yaw_angle_rad) - 0.009);

  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
}
 8004efe:	ecbd 8b04 	vpop	{d8-d9}
  mouse.pre_yaw_angle_rad = imu.yaw_angle_rad;
 8004f02:	63a5      	str	r5, [r4, #56]	; 0x38
  mouse.odom[1] = mouse.floor_odom[1] - (0.066 * sin(imu.yaw_angle_rad));
 8004f04:	61e0      	str	r0, [r4, #28]
}
 8004f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w
 8004f10:	4189374c 	.word	0x4189374c
 8004f14:	3fb0e560 	.word	0x3fb0e560
 8004f18:	20000870 	.word	0x20000870
 8004f1c:	3b03126f 	.word	0x3b03126f
 8004f20:	200007e0 	.word	0x200007e0
 8004f24:	3fe00000 	.word	0x3fe00000
 8004f28:	3ff00000 	.word	0x3ff00000
 8004f2c:	00000000 	.word	0x00000000

08004f30 <omniOdometory>:

void omniOdometory()
{
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f34:	ed2d 8b0a 	vpush	{d8-d12}
 8004f38:	4eeb      	ldr	r6, [pc, #940]	; (80052e8 <omniOdometory+0x3b8>)
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	4634      	mov	r4, r6
 8004f3e:	f106 0510 	add.w	r5, r6, #16

  for (int i = 0; i < 4; i++) {
    if (isnan(motor.enc_angle[i])) {
      motor.enc_angle[i] = 0;
    }
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004f42:	ecb4 0a01 	vldmia	r4!, {s0}
 8004f46:	edd4 0a04 	vldr	s1, [r4, #16]
 8004f4a:	f001 f8e5 	bl	8006118 <getAngleDiff>
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 8004f4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    motor.angle_diff[i] = getAngleDiff(motor.enc_angle[i], motor.pre_enc_angle[i]);
 8004f52:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
  for (int i = 0; i < 4; i++) {
 8004f56:	42ac      	cmp	r4, r5
    motor.pre_enc_angle[i] = motor.enc_angle[i];
 8004f58:	6123      	str	r3, [r4, #16]
  for (int i = 0; i < 4; i++) {
 8004f5a:	d1f2      	bne.n	8004f42 <omniOdometory+0x12>
  }

  // float robot_rotation_adj;
  // robot_rotation_adj = normalizeAngle(imu.yaw_angle_rad - imu.pre_yaw_angle_rad) * OMNI_ROTATION_LENGTH;  // mm

  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004f5c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004f5e:	f8df a3b0 	ldr.w	sl, [pc, #944]	; 8005310 <omniOdometory+0x3e0>
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);

  for (int i = 0; i < 2; i++) {
    enqueue(omni.local_speed_log[i], omni.local_odom_speed[i]);
    omni.local_odom_speed_mvf[i] = sumNewestN(omni.local_speed_log[i], SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE) / SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE;
 8004f62:	eddf 9ae2 	vldr	s19, [pc, #904]	; 80052ec <omniOdometory+0x3bc>
  // vision座標だけ更新されているが、vision_update_cycle_cntが0になっていない場合に、1cycleだけpositionが飛ぶ

  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
  for (int i = 0; i < 2; i++) {
    enqueue(integ.odom_log[i], omni.odom_speed[i]);
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8004f66:	ed9f 9ae2 	vldr	s18, [pc, #904]	; 80052f0 <omniOdometory+0x3c0>
 8004f6a:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 8005314 <omniOdometory+0x3e4>
  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004f6e:	f7fb fb13 	bl	8000598 <__aeabi_f2d>
 8004f72:	a3d5      	add	r3, pc, #852	; (adr r3, 80052c8 <omniOdometory+0x398>)
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f7fb fb66 	bl	8000648 <__aeabi_dmul>
 8004f7c:	f7fb fe5c 	bl	8000c38 <__aeabi_d2f>
 8004f80:	4605      	mov	r5, r0
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004f82:	6b30      	ldr	r0, [r6, #48]	; 0x30
  omni.travel_distance[0] = motor.angle_diff[1] * OMNI_DIAMETER;
 8004f84:	f8ca 5000 	str.w	r5, [sl]
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004f88:	f7fb fb06 	bl	8000598 <__aeabi_f2d>
 8004f8c:	a3ce      	add	r3, pc, #824	; (adr r3, 80052c8 <omniOdometory+0x398>)
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f7fb fb59 	bl	8000648 <__aeabi_dmul>
 8004f96:	f7fb fe4f 	bl	8000c38 <__aeabi_d2f>
 8004f9a:	4604      	mov	r4, r0
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 8004f9c:	4628      	mov	r0, r5
  omni.travel_distance[1] = motor.angle_diff[2] * OMNI_DIAMETER;
 8004f9e:	f8ca 4004 	str.w	r4, [sl, #4]
  omni.odom_raw[0] += omni.travel_distance[0] * cos(imu.yaw_angle_rad) + omni.travel_distance[1] * sin(imu.yaw_angle_rad);
 8004fa2:	f7fb faf9 	bl	8000598 <__aeabi_f2d>
 8004fa6:	4bd3      	ldr	r3, [pc, #844]	; (80052f4 <omniOdometory+0x3c4>)
 8004fa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fac:	4680      	mov	r8, r0
 8004fae:	ee17 0a90 	vmov	r0, s15
 8004fb2:	edcd 7a00 	vstr	s15, [sp]
 8004fb6:	4689      	mov	r9, r1
 8004fb8:	f7fb faee 	bl	8000598 <__aeabi_f2d>
 8004fbc:	ec41 0b10 	vmov	d0, r0, r1
 8004fc0:	ec41 0b18 	vmov	d8, r0, r1
 8004fc4:	f008 ff58 	bl	800de78 <cos>
 8004fc8:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 8004fcc:	9304      	str	r3, [sp, #16]
 8004fce:	4bca      	ldr	r3, [pc, #808]	; (80052f8 <omniOdometory+0x3c8>)
 8004fd0:	eeb0 ca40 	vmov.f32	s24, s0
 8004fd4:	eef0 ca60 	vmov.f32	s25, s1
 8004fd8:	f103 021c 	add.w	r2, r3, #28
 8004fdc:	4620      	mov	r0, r4
 8004fde:	9205      	str	r2, [sp, #20]
 8004fe0:	f7fb fada 	bl	8000598 <__aeabi_f2d>
 8004fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8004fe8:	eef0 0a68 	vmov.f32	s1, s17
 8004fec:	4606      	mov	r6, r0
 8004fee:	460f      	mov	r7, r1
 8004ff0:	f008 ff96 	bl	800df20 <sin>
 8004ff4:	ec53 2b1c 	vmov	r2, r3, d12
 8004ff8:	eeb0 ba40 	vmov.f32	s22, s0
 8004ffc:	eef0 ba60 	vmov.f32	s23, s1
 8005000:	4640      	mov	r0, r8
 8005002:	4649      	mov	r1, r9
 8005004:	f7fb fb20 	bl	8000648 <__aeabi_dmul>
 8005008:	ec53 2b1b 	vmov	r2, r3, d11
 800500c:	4604      	mov	r4, r0
 800500e:	460d      	mov	r5, r1
 8005010:	4630      	mov	r0, r6
 8005012:	4639      	mov	r1, r7
 8005014:	f7fb fb18 	bl	8000648 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb f95c 	bl	80002dc <__adddf3>
 8005024:	4604      	mov	r4, r0
 8005026:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 800502a:	460d      	mov	r5, r1
 800502c:	f7fb fab4 	bl	8000598 <__aeabi_f2d>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4620      	mov	r0, r4
 8005036:	4629      	mov	r1, r5
 8005038:	f7fb f950 	bl	80002dc <__adddf3>
 800503c:	f7fb fdfc 	bl	8000c38 <__aeabi_d2f>
 8005040:	9003      	str	r0, [sp, #12]
 8005042:	f8ca 0028 	str.w	r0, [sl, #40]	; 0x28
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8005046:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 800504a:	f7fb faa5 	bl	8000598 <__aeabi_f2d>
 800504e:	ec53 2b1b 	vmov	r2, r3, d11
 8005052:	4604      	mov	r4, r0
 8005054:	460d      	mov	r5, r1
 8005056:	4640      	mov	r0, r8
 8005058:	4649      	mov	r1, r9
 800505a:	f7fb faf5 	bl	8000648 <__aeabi_dmul>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4620      	mov	r0, r4
 8005064:	4629      	mov	r1, r5
 8005066:	f7fb f939 	bl	80002dc <__adddf3>
 800506a:	4632      	mov	r2, r6
 800506c:	463b      	mov	r3, r7
 800506e:	4604      	mov	r4, r0
 8005070:	460d      	mov	r5, r1
 8005072:	ec51 0b1c 	vmov	r0, r1, d12
 8005076:	f7fb fae7 	bl	8000648 <__aeabi_dmul>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb f929 	bl	80002d8 <__aeabi_dsub>
 8005086:	f7fb fdd7 	bl	8000c38 <__aeabi_d2f>
  omni.pre_odom[0] = omni.odom[0];
 800508a:	ed9a aa06 	vldr	s20, [sl, #24]
  omni.pre_odom[1] = omni.odom[1];
 800508e:	edda 8a07 	vldr	s17, [sl, #28]
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8005092:	4604      	mov	r4, r0
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8005094:	9803      	ldr	r0, [sp, #12]
  omni.odom_raw[1] += omni.travel_distance[0] * sin(imu.yaw_angle_rad) - omni.travel_distance[1] * cos(imu.yaw_angle_rad);
 8005096:	f8ca 402c 	str.w	r4, [sl, #44]	; 0x2c
  omni.pre_odom[0] = omni.odom[0];
 800509a:	ed8a aa08 	vstr	s20, [sl, #32]
  omni.pre_odom[1] = omni.odom[1];
 800509e:	edca 8a09 	vstr	s17, [sl, #36]	; 0x24
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 80050a2:	f7fb fa79 	bl	8000598 <__aeabi_f2d>
 80050a6:	4606      	mov	r6, r0
 80050a8:	4620      	mov	r0, r4
 80050aa:	460f      	mov	r7, r1
 80050ac:	f7fb fa74 	bl	8000598 <__aeabi_f2d>
 80050b0:	a387      	add	r3, pc, #540	; (adr r3, 80052d0 <omniOdometory+0x3a0>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	4680      	mov	r8, r0
 80050b8:	4689      	mov	r9, r1
 80050ba:	4630      	mov	r0, r6
 80050bc:	4639      	mov	r1, r7
 80050be:	f7fb fac3 	bl	8000648 <__aeabi_dmul>
 80050c2:	a385      	add	r3, pc, #532	; (adr r3, 80052d8 <omniOdometory+0x3a8>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	4604      	mov	r4, r0
 80050ca:	460d      	mov	r5, r1
 80050cc:	4640      	mov	r0, r8
 80050ce:	4649      	mov	r1, r9
 80050d0:	f7fb faba 	bl	8000648 <__aeabi_dmul>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb f8fc 	bl	80002d8 <__aeabi_dsub>
 80050e0:	4b86      	ldr	r3, [pc, #536]	; (80052fc <omniOdometory+0x3cc>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	f7fb fab0 	bl	8000648 <__aeabi_dmul>
 80050e8:	4b85      	ldr	r3, [pc, #532]	; (8005300 <omniOdometory+0x3d0>)
 80050ea:	4604      	mov	r4, r0
 80050ec:	460d      	mov	r5, r1
 80050ee:	2200      	movs	r2, #0
 80050f0:	ec51 0b1c 	vmov	r0, r1, d12
 80050f4:	f7fb f8f0 	bl	80002d8 <__aeabi_dsub>
 80050f8:	a379      	add	r3, pc, #484	; (adr r3, 80052e0 <omniOdometory+0x3b0>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb faa3 	bl	8000648 <__aeabi_dmul>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	f7fb f8e7 	bl	80002dc <__adddf3>
 800510e:	f7fb fd93 	bl	8000c38 <__aeabi_d2f>
 8005112:	ee08 0a10 	vmov	s16, r0
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8005116:	a370      	add	r3, pc, #448	; (adr r3, 80052d8 <omniOdometory+0x3a8>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	4630      	mov	r0, r6
 800511e:	4639      	mov	r1, r7
  omni.odom[0] = ((omni.odom_raw[0] * cos(M_PI * 3 / 4) - omni.odom_raw[1] * sin(M_PI * 3 / 4)) / 2) + (0.107 * cos(imu.yaw_angle_rad) - 0.107);
 8005120:	ed8a 8a06 	vstr	s16, [sl, #24]
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8005124:	f7fb fa90 	bl	8000648 <__aeabi_dmul>
 8005128:	a369      	add	r3, pc, #420	; (adr r3, 80052d0 <omniOdometory+0x3a0>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	4604      	mov	r4, r0
 8005130:	460d      	mov	r5, r1
 8005132:	4640      	mov	r0, r8
 8005134:	4649      	mov	r1, r9
 8005136:	f7fb fa87 	bl	8000648 <__aeabi_dmul>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4620      	mov	r0, r4
 8005140:	4629      	mov	r1, r5
 8005142:	f7fb f8cb 	bl	80002dc <__adddf3>
 8005146:	4b6d      	ldr	r3, [pc, #436]	; (80052fc <omniOdometory+0x3cc>)
 8005148:	2200      	movs	r2, #0
 800514a:	f7fb fa7d 	bl	8000648 <__aeabi_dmul>
 800514e:	a364      	add	r3, pc, #400	; (adr r3, 80052e0 <omniOdometory+0x3b0>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	4604      	mov	r4, r0
 8005156:	460d      	mov	r5, r1
 8005158:	ec51 0b1b 	vmov	r0, r1, d11
 800515c:	f7fb fa74 	bl	8000648 <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	f7fb f8b8 	bl	80002dc <__adddf3>
 800516c:	f7fb fd64 	bl	8000c38 <__aeabi_d2f>
 8005170:	ee07 0a10 	vmov	s14, r0
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8005174:	eddf 6a63 	vldr	s13, [pc, #396]	; 8005304 <omniOdometory+0x3d4>
  omni.odom[1] = ((omni.odom_raw[0] * sin(M_PI * 3 / 4) + omni.odom_raw[1] * cos(M_PI * 3 / 4)) / 2) + (0.107 * sin(imu.yaw_angle_rad));
 8005178:	f8ca 001c 	str.w	r0, [sl, #28]
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 800517c:	ee78 7a4a 	vsub.f32	s15, s16, s20
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8005180:	ee37 8a68 	vsub.f32	s16, s14, s17
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8005184:	ee67 7aa6 	vmul.f32	s15, s15, s13
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8005188:	ee28 8a26 	vmul.f32	s16, s16, s13
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 800518c:	ee17 0a90 	vmov	r0, s15
  omni.odom_speed[0] = (omni.odom[0] - omni.pre_odom[0]) * MAIN_LOOP_CYCLE;
 8005190:	edca 7a0c 	vstr	s15, [sl, #48]	; 0x30
  omni.odom_speed[1] = (omni.odom[1] - omni.pre_odom[1]) * MAIN_LOOP_CYCLE;
 8005194:	ed8a 8a0d 	vstr	s16, [sl, #52]	; 0x34
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 8005198:	f7fb f9fe 	bl	8000598 <__aeabi_f2d>
 800519c:	460f      	mov	r7, r1
 800519e:	9900      	ldr	r1, [sp, #0]
 80051a0:	4606      	mov	r6, r0
 80051a2:	f081 4000 	eor.w	r0, r1, #2147483648	; 0x80000000
 80051a6:	f7fb f9f7 	bl	8000598 <__aeabi_f2d>
 80051aa:	ec41 0b10 	vmov	d0, r0, r1
 80051ae:	ec41 0b1a 	vmov	d10, r0, r1
 80051b2:	f008 fe61 	bl	800de78 <cos>
 80051b6:	ee18 0a10 	vmov	r0, s16
 80051ba:	eeb0 ca40 	vmov.f32	s24, s0
 80051be:	eef0 ca60 	vmov.f32	s25, s1
 80051c2:	f7fb f9e9 	bl	8000598 <__aeabi_f2d>
 80051c6:	ec53 2b1c 	vmov	r2, r3, d12
 80051ca:	4604      	mov	r4, r0
 80051cc:	460d      	mov	r5, r1
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	f7fb fa39 	bl	8000648 <__aeabi_dmul>
 80051d6:	4622      	mov	r2, r4
 80051d8:	462b      	mov	r3, r5
 80051da:	4680      	mov	r8, r0
 80051dc:	4689      	mov	r9, r1
 80051de:	ec51 0b1b 	vmov	r0, r1, d11
 80051e2:	f7fb fa31 	bl	8000648 <__aeabi_dmul>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4640      	mov	r0, r8
 80051ec:	4649      	mov	r1, r9
 80051ee:	f7fb f875 	bl	80002dc <__adddf3>
 80051f2:	f7fb fd21 	bl	8000c38 <__aeabi_d2f>
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 80051f6:	eeb0 0a4a 	vmov.f32	s0, s20
 80051fa:	eef0 0a6a 	vmov.f32	s1, s21
  omni.local_odom_speed[0] = omni.odom_speed[0] * cos(-imu.yaw_angle_rad) - omni.odom_speed[1] * sin(-imu.yaw_angle_rad);
 80051fe:	ee08 0a10 	vmov	s16, r0
 8005202:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 8005206:	f008 fe8b 	bl	800df20 <sin>
 800520a:	4630      	mov	r0, r6
 800520c:	ec53 2b10 	vmov	r2, r3, d0
 8005210:	4639      	mov	r1, r7
 8005212:	f7fb fa19 	bl	8000648 <__aeabi_dmul>
 8005216:	4622      	mov	r2, r4
 8005218:	462b      	mov	r3, r5
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	ec51 0b1c 	vmov	r0, r1, d12
 8005222:	f7fb fa11 	bl	8000648 <__aeabi_dmul>
 8005226:	460b      	mov	r3, r1
 8005228:	4602      	mov	r2, r0
 800522a:	4629      	mov	r1, r5
 800522c:	4620      	mov	r0, r4
 800522e:	f7fb f855 	bl	80002dc <__adddf3>
 8005232:	f7fb fd01 	bl	8000c38 <__aeabi_d2f>
    enqueue(omni.local_speed_log[i], omni.local_odom_speed[i]);
 8005236:	eeb0 0a48 	vmov.f32	s0, s16
  omni.local_odom_speed[1] = omni.odom_speed[0] * sin(-imu.yaw_angle_rad) + omni.odom_speed[1] * cos(-imu.yaw_angle_rad);
 800523a:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
    enqueue(omni.local_speed_log[i], omni.local_odom_speed[i]);
 800523e:	f8da 0040 	ldr.w	r0, [sl, #64]	; 0x40
 8005242:	f000 f96f 	bl	8005524 <enqueue>
    omni.local_odom_speed_mvf[i] = sumNewestN(omni.local_speed_log[i], SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE) / SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE;
 8005246:	210a      	movs	r1, #10
 8005248:	f8da 0040 	ldr.w	r0, [sl, #64]	; 0x40
 800524c:	f000 f994 	bl	8005578 <sumNewestN>
 8005250:	ee60 7a29 	vmul.f32	s15, s0, s19
    enqueue(omni.local_speed_log[i], omni.local_odom_speed[i]);
 8005254:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 8005258:	ed9a 0a0f 	vldr	s0, [sl, #60]	; 0x3c
    omni.local_odom_speed_mvf[i] = sumNewestN(omni.local_speed_log[i], SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE) / SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE;
 800525c:	edca 7a12 	vstr	s15, [sl, #72]	; 0x48
    enqueue(omni.local_speed_log[i], omni.local_odom_speed[i]);
 8005260:	f000 f960 	bl	8005524 <enqueue>
    omni.local_odom_speed_mvf[i] = sumNewestN(omni.local_speed_log[i], SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE) / SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE;
 8005264:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 8005268:	210a      	movs	r1, #10
 800526a:	f000 f985 	bl	8005578 <sumNewestN>
  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <omniOdometory+0x3c8>)
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	ee07 3a90 	vmov	s15, r3
    omni.local_odom_speed_mvf[i] = sumNewestN(omni.local_speed_log[i], SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE) / SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE;
 8005278:	ee20 0a29 	vmul.f32	s0, s0, s19
  float latency_cycle = ai_cmd.latency_time_ms / (1000 / MAIN_LOOP_CYCLE);
 800527c:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
 8005280:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    omni.local_odom_speed_mvf[i] = sumNewestN(omni.local_speed_log[i], SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE) / SPEED_MOVING_AVERAGE_FILTER_BUF_SIZE;
 8005284:	ed8a 0a13 	vstr	s0, [sl, #76]	; 0x4c
    enqueue(integ.odom_log[i], omni.odom_speed[i]);
 8005288:	ecb5 0a01 	vldmia	r5!, {s0}
 800528c:	f8db 0000 	ldr.w	r0, [fp]
 8005290:	f000 f948 	bl	8005524 <enqueue>
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8005294:	4b1c      	ldr	r3, [pc, #112]	; (8005308 <omniOdometory+0x3d8>)
 8005296:	f85b 0b04 	ldr.w	r0, [fp], #4
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a6:	ee77 7a88 	vadd.f32	s15, s15, s16
 80052aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ae:	ee17 1a90 	vmov	r1, s15
 80052b2:	f000 f961 	bl	8005578 <sumNewestN>
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 80052b6:	ecf4 7a01 	vldmia	r4!, {s15}
  for (int i = 0; i < 2; i++) {
 80052ba:	4b14      	ldr	r3, [pc, #80]	; (800530c <omniOdometory+0x3dc>)
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 80052bc:	ed94 7a01 	vldr	s14, [r4, #4]
 80052c0:	e02a      	b.n	8005318 <omniOdometory+0x3e8>
 80052c2:	bf00      	nop
 80052c4:	f3af 8000 	nop.w
 80052c8:	3126e979 	.word	0x3126e979
 80052cc:	3facac08 	.word	0x3facac08
 80052d0:	667f3bcc 	.word	0x667f3bcc
 80052d4:	bfe6a09e 	.word	0xbfe6a09e
 80052d8:	667f3bcd 	.word	0x667f3bcd
 80052dc:	3fe6a09e 	.word	0x3fe6a09e
 80052e0:	1cac0831 	.word	0x1cac0831
 80052e4:	3fbb645a 	.word	0x3fbb645a
 80052e8:	20000838 	.word	0x20000838
 80052ec:	3dcccccd 	.word	0x3dcccccd
 80052f0:	3b03126f 	.word	0x3b03126f
 80052f4:	200007e0 	.word	0x200007e0
 80052f8:	2000066c 	.word	0x2000066c
 80052fc:	3fe00000 	.word	0x3fe00000
 8005300:	3ff00000 	.word	0x3ff00000
 8005304:	43fa0000 	.word	0x43fa0000
 8005308:	2000074c 	.word	0x2000074c
 800530c:	200007fc 	.word	0x200007fc
 8005310:	200008b0 	.word	0x200008b0
 8005314:	200007f4 	.word	0x200007f4
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8005318:	ee20 0a09 	vmul.f32	s0, s0, s18
  for (int i = 0; i < 2; i++) {
 800531c:	459b      	cmp	fp, r3
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 800531e:	ee70 7a27 	vadd.f32	s15, s0, s15
    integ.global_odom_vision_diff[i] = sumNewestN(integ.odom_log[i], latency_cycle + connection.vision_update_cycle_cnt) / MAIN_LOOP_CYCLE;
 8005322:	ed8b 0a01 	vstr	s0, [fp, #4]
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 8005326:	ee37 7a67 	vsub.f32	s14, s14, s15
    integ.vision_based_position[i] = ai_cmd.global_robot_position[i] + integ.global_odom_vision_diff[i];
 800532a:	edcb 7a03 	vstr	s15, [fp, #12]
    integ.position_diff[i] = ai_cmd.global_target_position[i] - integ.vision_based_position[i];
 800532e:	ed8b 7a05 	vstr	s14, [fp, #20]
  for (int i = 0; i < 2; i++) {
 8005332:	d1a9      	bne.n	8005288 <omniOdometory+0x358>
  }

  float target_diff[2], move_diff[2];
  for (int i = 0; i < 2; i++) {
    target_diff[i] = ai_cmd.global_robot_position[i] - ai_cmd.global_target_position[i];  // Visionが更新された時点での現在地とtargetの距離
 8005334:	4c31      	ldr	r4, [pc, #196]	; (80053fc <omniOdometory+0x4cc>)
 8005336:	ed94 7a07 	vldr	s14, [r4, #28]
 800533a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    move_diff[i] = ai_cmd.global_robot_position[i] - integ.vision_based_position[i];      // Visionとtargetが更新されてからの移動量
  }

  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));
 800533e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005342:	ee17 0a90 	vmov	r0, s15
 8005346:	f7fb f927 	bl	8000598 <__aeabi_f2d>
    target_diff[i] = ai_cmd.global_robot_position[i] - ai_cmd.global_target_position[i];  // Visionが更新された時点での現在地とtargetの距離
 800534a:	ed94 7a08 	vldr	s14, [r4, #32]
 800534e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));
 8005352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	ee17 0a90 	vmov	r0, s15
 800535e:	e9cd 2300 	strd	r2, r3, [sp]
 8005362:	f7fb f919 	bl	8000598 <__aeabi_f2d>
 8005366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800536a:	4606      	mov	r6, r0
 800536c:	460f      	mov	r7, r1
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	f7fb f969 	bl	8000648 <__aeabi_dmul>
 8005376:	4632      	mov	r2, r6
 8005378:	4604      	mov	r4, r0
 800537a:	460d      	mov	r5, r1
 800537c:	463b      	mov	r3, r7
 800537e:	4630      	mov	r0, r6
 8005380:	4639      	mov	r1, r7
 8005382:	f7fb f961 	bl	8000648 <__aeabi_dmul>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ffa5 	bl	80002dc <__adddf3>
 8005392:	ec41 0b10 	vmov	d0, r0, r1
 8005396:	f008 fd41 	bl	800de1c <sqrt>
 800539a:	ec51 0b10 	vmov	r0, r1, d0
 800539e:	f7fb fc4b 	bl	8000c38 <__aeabi_d2f>
  integ.move_dist = sqrt(pow(integ.position_diff[0], 2) + pow(integ.position_diff[1], 2));
 80053a2:	4c17      	ldr	r4, [pc, #92]	; (8005400 <omniOdometory+0x4d0>)
  integ.targed_dist_diff = sqrt(pow(target_diff[0], 2) + pow(target_diff[1], 2));
 80053a4:	4603      	mov	r3, r0
 80053a6:	6363      	str	r3, [r4, #52]	; 0x34
  integ.move_dist = sqrt(pow(integ.position_diff[0], 2) + pow(integ.position_diff[1], 2));
 80053a8:	69a0      	ldr	r0, [r4, #24]
 80053aa:	f7fb f8f5 	bl	8000598 <__aeabi_f2d>
 80053ae:	4606      	mov	r6, r0
 80053b0:	69e0      	ldr	r0, [r4, #28]
 80053b2:	460f      	mov	r7, r1
 80053b4:	f7fb f8f0 	bl	8000598 <__aeabi_f2d>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	f7fb f944 	bl	8000648 <__aeabi_dmul>
 80053c0:	4632      	mov	r2, r6
 80053c2:	4604      	mov	r4, r0
 80053c4:	460d      	mov	r5, r1
 80053c6:	463b      	mov	r3, r7
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	f7fb f93c 	bl	8000648 <__aeabi_dmul>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4620      	mov	r0, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7fa ff80 	bl	80002dc <__adddf3>
 80053dc:	ec41 0b10 	vmov	d0, r0, r1
 80053e0:	f008 fd1c 	bl	800de1c <sqrt>
 80053e4:	ec51 0b10 	vmov	r0, r1, d0
 80053e8:	f7fb fc26 	bl	8000c38 <__aeabi_d2f>
 80053ec:	4c04      	ldr	r4, [pc, #16]	; (8005400 <omniOdometory+0x4d0>)
 80053ee:	6320      	str	r0, [r4, #48]	; 0x30
 80053f0:	b007      	add	sp, #28
 80053f2:	ecbd 8b0a 	vpop	{d8-d12}
 80053f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fa:	bf00      	nop
 80053fc:	2000066c 	.word	0x2000066c
 8005400:	200007f4 	.word	0x200007f4
 8005404:	00000000 	.word	0x00000000

08005408 <omni_move>:

const float sinM4 = sin(150 * M_PI / 180);
const float cosM4 = cos(150 * M_PI / 180);

void omni_move(float vel_y_robot, float vel_x_robot, float omega_roboot, float duty_limit)
{
 8005408:	b510      	push	{r4, lr}
 800540a:	ee11 0a10 	vmov	r0, s2
 800540e:	ed2d 8b04 	vpush	{d8-d9}
 8005412:	eef0 8a61 	vmov.f32	s17, s3
 8005416:	eeb0 8a60 	vmov.f32	s16, s1
 800541a:	eeb0 9a40 	vmov.f32	s18, s0
  float rotation_omega_motor;

  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 800541e:	f7fb f8bb 	bl	8000598 <__aeabi_f2d>
 8005422:	a334      	add	r3, pc, #208	; (adr r3, 80054f4 <omni_move+0xec>)
 8005424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005428:	f7fb f90e 	bl	8000648 <__aeabi_dmul>
 800542c:	f7fb fc04 	bl	8000c38 <__aeabi_d2f>

  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005430:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <omni_move+0xd8>)
 8005432:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80054e4 <omni_move+0xdc>
 8005436:	ed93 7a00 	vldr	s14, [r3]
 800543a:	eddf 4a2b 	vldr	s9, [pc, #172]	; 80054e8 <omni_move+0xe0>
 800543e:	4c2b      	ldr	r4, [pc, #172]	; (80054ec <omni_move+0xe4>)
 8005440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005444:	eec6 5a87 	vdiv.f32	s11, s13, s14
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005448:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80054f0 <omni_move+0xe8>
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 800544c:	ee69 7a27 	vmul.f32	s15, s18, s15
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005450:	ee29 7a07 	vmul.f32	s14, s18, s14
 8005454:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8005458:	eeb0 6a67 	vmov.f32	s12, s15
 800545c:	eea8 7a24 	vfma.f32	s14, s16, s9
 8005460:	eea8 6a05 	vfma.f32	s12, s16, s10
 8005464:	eed8 7a05 	vfnms.f32	s15, s16, s10
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005468:	ee38 0a09 	vadd.f32	s0, s16, s18
 800546c:	ee05 0a10 	vmov	s10, r0
  rotation_omega_motor = ROBOT_RADIUS * omega_roboot;
 8005470:	ee06 0a90 	vmov	s13, r0
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005474:	eea0 5a24 	vfma.f32	s10, s0, s9
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005478:	ee36 6a86 	vadd.f32	s12, s13, s12
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 800547c:	ee36 7a87 	vadd.f32	s14, s13, s14
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 8005480:	ee77 7aa6 	vadd.f32	s15, s15, s13
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005484:	ee27 7a25 	vmul.f32	s14, s14, s11
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005488:	ee66 6a25 	vmul.f32	s13, s12, s11
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 800548c:	ee67 7aa5 	vmul.f32	s15, s15, s11
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 8005490:	ee25 6a25 	vmul.f32	s12, s10, s11
  output.motor_voltage[0] = ((vel_x_robot * sinM1) + (vel_y_robot * cosM1) + rotation_omega_motor) / rotation_length_omni;
 8005494:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
  output.motor_voltage[1] = ((vel_x_robot * sinM2) + (vel_y_robot * cosM2) + rotation_omega_motor) / rotation_length_omni;
 8005498:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
  output.motor_voltage[2] = ((vel_x_robot * sinM3) + (vel_y_robot * cosM3) + rotation_omega_motor) / rotation_length_omni;
 800549c:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
  output.motor_voltage[3] = ((vel_x_robot * sinM4) + (vel_y_robot * cosM4) + rotation_omega_motor) / rotation_length_omni;
 80054a0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30

  actuator_motor1(output.motor_voltage[0], duty_limit);
 80054a4:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 80054a8:	eef0 0a68 	vmov.f32	s1, s17
 80054ac:	f7fb fd92 	bl	8000fd4 <actuator_motor1>
  actuator_motor2(output.motor_voltage[1], duty_limit);
 80054b0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80054b4:	eef0 0a68 	vmov.f32	s1, s17
 80054b8:	f7fb fdac 	bl	8001014 <actuator_motor2>
  actuator_motor3(output.motor_voltage[2], duty_limit);
 80054bc:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80054c0:	eef0 0a68 	vmov.f32	s1, s17
 80054c4:	f7fb fdc6 	bl	8001054 <actuator_motor3>
  actuator_motor4(output.motor_voltage[3], duty_limit);
 80054c8:	eef0 0a68 	vmov.f32	s1, s17
}
 80054cc:	ecbd 8b04 	vpop	{d8-d9}
  actuator_motor4(output.motor_voltage[3], duty_limit);
 80054d0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
}
 80054d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor4(output.motor_voltage[3], duty_limit);
 80054d8:	f7fb bddc 	b.w	8001094 <actuator_motor4>
 80054dc:	f3af 8000 	nop.w
 80054e0:	20000004 	.word	0x20000004
 80054e4:	3f5db3d7 	.word	0x3f5db3d7
 80054e8:	bf3504f3 	.word	0xbf3504f3
 80054ec:	20000900 	.word	0x20000900
 80054f0:	3f3504f3 	.word	0x3f3504f3
 80054f4:	47ae147b 	.word	0x47ae147b
 80054f8:	3fb47ae1 	.word	0x3fb47ae1

080054fc <initRingBuffer>:



// リングバッファの初期化
RingBuffer * initRingBuffer(int size)
{
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4605      	mov	r5, r0
  RingBuffer * rb = (RingBuffer *)malloc(sizeof(RingBuffer));
 8005500:	2014      	movs	r0, #20
 8005502:	f005 fcf1 	bl	800aee8 <malloc>
 8005506:	4604      	mov	r4, r0
  rb->buffer = (float *)malloc(size * sizeof(float));
 8005508:	00a8      	lsls	r0, r5, #2
 800550a:	f005 fced 	bl	800aee8 <malloc>
  rb->size = size;
  rb->front = 0;
 800550e:	2300      	movs	r3, #0
  rb->rear = -1;
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
  rb->size = size;
 8005514:	e9c4 0500 	strd	r0, r5, [r4]
  rb->rear = -1;
 8005518:	e9c4 3202 	strd	r3, r2, [r4, #8]
  rb->count = 0;
 800551c:	6123      	str	r3, [r4, #16]
  return rb;
}
 800551e:	4620      	mov	r0, r4
 8005520:	bd38      	pop	{r3, r4, r5, pc}
 8005522:	bf00      	nop

08005524 <enqueue>:

// リングバッファに要素を追加
void enqueue(RingBuffer * rb, float data)
{
  if (rb->count < rb->size) {
 8005524:	6901      	ldr	r1, [r0, #16]
 8005526:	6843      	ldr	r3, [r0, #4]
 8005528:	4299      	cmp	r1, r3
 800552a:	da0e      	bge.n	800554a <enqueue+0x26>
    rb->rear = (rb->rear + 1) % rb->size;
 800552c:	68c2      	ldr	r2, [r0, #12]
 800552e:	3201      	adds	r2, #1
 8005530:	fb92 fcf3 	sdiv	ip, r2, r3
 8005534:	fb03 231c 	mls	r3, r3, ip, r2
    rb->buffer[rb->rear] = data;
 8005538:	6802      	ldr	r2, [r0, #0]
    rb->rear = (rb->rear + 1) % rb->size;
 800553a:	60c3      	str	r3, [r0, #12]
    rb->count++;
 800553c:	3101      	adds	r1, #1
    rb->buffer[rb->rear] = data;
 800553e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005542:	ed82 0a00 	vstr	s0, [r2]
    rb->count++;
 8005546:	6101      	str	r1, [r0, #16]
 8005548:	4770      	bx	lr
  } else {
    // バッファがいっぱいの場合は古いデータを上書き
    rb->rear = (rb->rear + 1) % rb->size;
    rb->front = (rb->front + 1) % rb->size;
 800554a:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
{
 800554e:	b410      	push	{r4}
    rb->rear = (rb->rear + 1) % rb->size;
 8005550:	3201      	adds	r2, #1
    rb->buffer[rb->rear] = data;
 8005552:	6804      	ldr	r4, [r0, #0]
    rb->rear = (rb->rear + 1) % rb->size;
 8005554:	fb92 fcf3 	sdiv	ip, r2, r3
    rb->front = (rb->front + 1) % rb->size;
 8005558:	3101      	adds	r1, #1
    rb->rear = (rb->rear + 1) % rb->size;
 800555a:	fb03 221c 	mls	r2, r3, ip, r2
 800555e:	60c2      	str	r2, [r0, #12]
    rb->front = (rb->front + 1) % rb->size;
 8005560:	fb91 fcf3 	sdiv	ip, r1, r3
    rb->buffer[rb->rear] = data;
 8005564:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    rb->front = (rb->front + 1) % rb->size;
 8005568:	fb03 111c 	mls	r1, r3, ip, r1
 800556c:	6081      	str	r1, [r0, #8]
  }
}
 800556e:	f85d 4b04 	ldr.w	r4, [sp], #4
    rb->buffer[rb->rear] = data;
 8005572:	ed82 0a00 	vstr	s0, [r2]
}
 8005576:	4770      	bx	lr

08005578 <sumNewestN>:
}

// リングバッファ上のデータを新しい順にn個加算した結果を取得
float sumNewestN(RingBuffer * rb, int n)
{
  if (n <= 0 || n > rb->count) {
 8005578:	2900      	cmp	r1, #0
 800557a:	dd1b      	ble.n	80055b4 <sumNewestN+0x3c>
 800557c:	6903      	ldr	r3, [r0, #16]
 800557e:	428b      	cmp	r3, r1
 8005580:	db18      	blt.n	80055b4 <sumNewestN+0x3c>
{
 8005582:	b410      	push	{r4}
    // 無効なnの値の場合はエラーとして0.0を返す
    return 0.0;
  }

  int index = rb->rear;
 8005584:	68c3      	ldr	r3, [r0, #12]
  float sum = 0.0;
 8005586:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80055bc <sumNewestN+0x44>
  for (int i = 0; i < n; i++) {
    sum += rb->buffer[index];
    index = (index - 1 + rb->size) % rb->size;
 800558a:	e9d0 4000 	ldrd	r4, r0, [r0]
  for (int i = 0; i < n; i++) {
 800558e:	2200      	movs	r2, #0
    sum += rb->buffer[index];
 8005590:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8005594:	eddc 7a00 	vldr	s15, [ip]
    index = (index - 1 + rb->size) % rb->size;
 8005598:	3b01      	subs	r3, #1
  for (int i = 0; i < n; i++) {
 800559a:	3201      	adds	r2, #1
    index = (index - 1 + rb->size) % rb->size;
 800559c:	4403      	add	r3, r0
  for (int i = 0; i < n; i++) {
 800559e:	4291      	cmp	r1, r2
    index = (index - 1 + rb->size) % rb->size;
 80055a0:	fb93 fcf0 	sdiv	ip, r3, r0
    sum += rb->buffer[index];
 80055a4:	ee30 0a27 	vadd.f32	s0, s0, s15
    index = (index - 1 + rb->size) % rb->size;
 80055a8:	fb00 331c 	mls	r3, r0, ip, r3
  for (int i = 0; i < n; i++) {
 80055ac:	d1f0      	bne.n	8005590 <sumNewestN+0x18>
  }
  return sum;
}
 80055ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b2:	4770      	bx	lr
    return 0.0;
 80055b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80055bc <sumNewestN+0x44>
}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	00000000 	.word	0x00000000

080055c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80055c0:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80055c2:	4811      	ldr	r0, [pc, #68]	; (8005608 <MX_SPI1_Init+0x48>)
 80055c4:	4c11      	ldr	r4, [pc, #68]	; (800560c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055c6:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80055ca:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055cc:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055d0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055d4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055d8:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80055dc:	2420      	movs	r4, #32
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055de:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80055e0:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80055e2:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055e8:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ec:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80055f0:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80055f4:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80055f6:	f003 fac5 	bl	8008b84 <HAL_SPI_Init>
 80055fa:	b900      	cbnz	r0, 80055fe <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005602:	f7fe bc77 	b.w	8003ef4 <Error_Handler>
 8005606:	bf00      	nop
 8005608:	20000b88 	.word	0x20000b88
 800560c:	40013000 	.word	0x40013000

08005610 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005610:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <HAL_SPI_MspInit+0x70>)
 8005614:	6801      	ldr	r1, [r0, #0]
{
 8005616:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005618:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 800561a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800561c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005620:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005624:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8005626:	d002      	beq.n	800562e <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005628:	b009      	add	sp, #36	; 0x24
 800562a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800562e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005632:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005636:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005678 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 800563a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800563c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005640:	661a      	str	r2, [r3, #96]	; 0x60
 8005642:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005644:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005648:	9200      	str	r2, [sp, #0]
 800564a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800564c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	64da      	str	r2, [r3, #76]	; 0x4c
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800565e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005664:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005668:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800566a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566c:	f002 fab4 	bl	8007bd8 <HAL_GPIO_Init>
}
 8005670:	b009      	add	sp, #36	; 0x24
 8005672:	f85d fb04 	ldr.w	pc, [sp], #4
 8005676:	bf00      	nop
 8005678:	000000e0 	.word	0x000000e0
 800567c:	00000002 	.word	0x00000002
 8005680:	40013000 	.word	0x40013000

08005684 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005684:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_MspInit+0x30>)
 8005686:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	661a      	str	r2, [r3, #96]	; 0x60
 800568e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8005690:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005692:	f002 0201 	and.w	r2, r2, #1
 8005696:	9200      	str	r2, [sp, #0]
 8005698:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800569a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800569c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056a0:	659a      	str	r2, [r3, #88]	; 0x58
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056ac:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80056ae:	f002 bc19 	b.w	8007ee4 <HAL_PWREx_DisableUCPDDeadBattery>
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000

080056b8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop

080056bc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056bc:	e7fe      	b.n	80056bc <HardFault_Handler>
 80056be:	bf00      	nop

080056c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056c0:	e7fe      	b.n	80056c0 <MemManage_Handler>
 80056c2:	bf00      	nop

080056c4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056c4:	e7fe      	b.n	80056c4 <BusFault_Handler>
 80056c6:	bf00      	nop

080056c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056c8:	e7fe      	b.n	80056c8 <UsageFault_Handler>
 80056ca:	bf00      	nop

080056cc <SVC_Handler>:
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop

080056d0 <DebugMon_Handler>:
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop

080056d4 <PendSV_Handler>:
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop

080056d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056d8:	f000 beb6 	b.w	8006448 <HAL_IncTick>

080056dc <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <DMA1_Channel2_IRQHandler+0x8>)
 80056de:	f001 be29 	b.w	8007334 <HAL_DMA_IRQHandler>
 80056e2:	bf00      	nop
 80056e4:	20000dac 	.word	0x20000dac

080056e8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <DMA1_Channel3_IRQHandler+0x8>)
 80056ea:	f001 be23 	b.w	8007334 <HAL_DMA_IRQHandler>
 80056ee:	bf00      	nop
 80056f0:	200003b4 	.word	0x200003b4

080056f4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <DMA1_Channel4_IRQHandler+0x8>)
 80056f6:	f001 be1d 	b.w	8007334 <HAL_DMA_IRQHandler>
 80056fa:	bf00      	nop
 80056fc:	20000414 	.word	0x20000414

08005700 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005700:	4801      	ldr	r0, [pc, #4]	; (8005708 <DMA1_Channel5_IRQHandler+0x8>)
 8005702:	f001 be17 	b.w	8007334 <HAL_DMA_IRQHandler>
 8005706:	bf00      	nop
 8005708:	20000354 	.word	0x20000354

0800570c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800570c:	4801      	ldr	r0, [pc, #4]	; (8005714 <DMA1_Channel6_IRQHandler+0x8>)
 800570e:	f001 be11 	b.w	8007334 <HAL_DMA_IRQHandler>
 8005712:	bf00      	nop
 8005714:	20000c8c 	.word	0x20000c8c

08005718 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <DMA1_Channel7_IRQHandler+0x8>)
 800571a:	f001 be0b 	b.w	8007334 <HAL_DMA_IRQHandler>
 800571e:	bf00      	nop
 8005720:	20000cec 	.word	0x20000cec

08005724 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <FDCAN1_IT0_IRQHandler+0x8>)
 8005726:	f002 b993 	b.w	8007a50 <HAL_FDCAN_IRQHandler>
 800572a:	bf00      	nop
 800572c:	200004dc 	.word	0x200004dc

08005730 <FDCAN1_IT1_IRQHandler>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <FDCAN1_IT1_IRQHandler+0x8>)
 8005732:	f002 b98d 	b.w	8007a50 <HAL_FDCAN_IRQHandler>
 8005736:	bf00      	nop
 8005738:	200004dc 	.word	0x200004dc

0800573c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <USART2_IRQHandler+0x8>)
 800573e:	f004 bbbf 	b.w	8009ec0 <HAL_UART_IRQHandler>
 8005742:	bf00      	nop
 8005744:	20000ea0 	.word	0x20000ea0

08005748 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <TIM7_DAC_IRQHandler+0x8>)
 800574a:	f003 bf31 	b.w	80095b0 <HAL_TIM_IRQHandler>
 800574e:	bf00      	nop
 8005750:	20000c40 	.word	0x20000c40

08005754 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <FDCAN2_IT0_IRQHandler+0x8>)
 8005756:	f002 b97b 	b.w	8007a50 <HAL_FDCAN_IRQHandler>
 800575a:	bf00      	nop
 800575c:	20000540 	.word	0x20000540

08005760 <FDCAN2_IT1_IRQHandler>:
 8005760:	4801      	ldr	r0, [pc, #4]	; (8005768 <FDCAN2_IT1_IRQHandler+0x8>)
 8005762:	f002 b975 	b.w	8007a50 <HAL_FDCAN_IRQHandler>
 8005766:	bf00      	nop
 8005768:	20000540 	.word	0x20000540

0800576c <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800576c:	4801      	ldr	r0, [pc, #4]	; (8005774 <LPUART1_IRQHandler+0x8>)
 800576e:	f004 bba7 	b.w	8009ec0 <HAL_UART_IRQHandler>
 8005772:	bf00      	nop
 8005774:	20000e10 	.word	0x20000e10

08005778 <DMA1_Channel8_IRQHandler>:
void DMA1_Channel8_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <DMA1_Channel8_IRQHandler+0x8>)
 800577a:	f001 bddb 	b.w	8007334 <HAL_DMA_IRQHandler>
 800577e:	bf00      	nop
 8005780:	20000d4c 	.word	0x20000d4c

08005784 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005784:	2001      	movs	r0, #1
 8005786:	4770      	bx	lr

08005788 <_kill>:

int _kill(int pid, int sig)
{
 8005788:	b508      	push	{r3, lr}
	errno = EINVAL;
 800578a:	f006 fbf7 	bl	800bf7c <__errno>
 800578e:	2316      	movs	r3, #22
 8005790:	6003      	str	r3, [r0, #0]
	return -1;
}
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	bd08      	pop	{r3, pc}

08005798 <_exit>:

void _exit (int status)
{
 8005798:	b508      	push	{r3, lr}
	errno = EINVAL;
 800579a:	f006 fbef 	bl	800bf7c <__errno>
 800579e:	2316      	movs	r3, #22
 80057a0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80057a2:	e7fe      	b.n	80057a2 <_exit+0xa>

080057a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057a6:	1e16      	subs	r6, r2, #0
 80057a8:	dd07      	ble.n	80057ba <_read+0x16>
 80057aa:	460c      	mov	r4, r1
 80057ac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80057ae:	f3af 8000 	nop.w
 80057b2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b6:	42a5      	cmp	r5, r4
 80057b8:	d1f9      	bne.n	80057ae <_read+0xa>
	}

return len;
}
 80057ba:	4630      	mov	r0, r6
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
 80057be:	bf00      	nop

080057c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c2:	1e16      	subs	r6, r2, #0
 80057c4:	dd07      	ble.n	80057d6 <_write+0x16>
 80057c6:	460c      	mov	r4, r1
 80057c8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80057ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80057ce:	f7fd fa01 	bl	8002bd4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057d2:	42ac      	cmp	r4, r5
 80057d4:	d1f9      	bne.n	80057ca <_write+0xa>
	}
	return len;
}
 80057d6:	4630      	mov	r0, r6
 80057d8:	bd70      	pop	{r4, r5, r6, pc}
 80057da:	bf00      	nop

080057dc <_close>:

int _close(int file)
{
	return -1;
}
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop

080057e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80057e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057e8:	604b      	str	r3, [r1, #4]
	return 0;
}
 80057ea:	2000      	movs	r0, #0
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop

080057f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80057f0:	2001      	movs	r0, #1
 80057f2:	4770      	bx	lr

080057f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80057f4:	2000      	movs	r0, #0
 80057f6:	4770      	bx	lr

080057f8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <SystemInit+0x18>)
 80057fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005802:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800580a:	6099      	str	r1, [r3, #8]
#endif
}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	e000ed00 	.word	0xe000ed00

08005814 <motor_test>:
#include "test_func.h"

void motor_test(system_t * sys)
{
 8005814:	b510      	push	{r4, lr}
 8005816:	4604      	mov	r4, r0
  if (decode_SW(sys->sw_data) & 0b00000001) {
 8005818:	8c00      	ldrh	r0, [r0, #32]
 800581a:	f000 fd55 	bl	80062c8 <decode_SW>
 800581e:	07c0      	lsls	r0, r0, #31
 8005820:	d517      	bpl.n	8005852 <motor_test+0x3e>
    omni_move(4.0, 0.0, 0.0, 4.0);  // fwd
 8005822:	ed9f 1a31 	vldr	s2, [pc, #196]	; 80058e8 <motor_test+0xd4>
 8005826:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800582a:	eef0 0a41 	vmov.f32	s1, s2
 800582e:	eeb0 0a61 	vmov.f32	s0, s3
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else if (decode_SW(sys->sw_data) & 0b00000010) {
    omni_move(-4.0, 0.0, 0.0, 4.0);  // back
 8005832:	f7ff fde9 	bl	8005408 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8005836:	482d      	ldr	r0, [pc, #180]	; (80058ec <motor_test+0xd8>)
 8005838:	2201      	movs	r2, #1
 800583a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800583e:	f002 facb 	bl	8007dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
  } else {
    omni_move(0.0, 0.0, 0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
  }
  actuator_motor5(0.0, 0.0);
 8005842:	eddf 0a29 	vldr	s1, [pc, #164]	; 80058e8 <motor_test+0xd4>
}
 8005846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  actuator_motor5(0.0, 0.0);
 800584a:	eeb0 0a60 	vmov.f32	s0, s1
 800584e:	f7fb bc41 	b.w	80010d4 <actuator_motor5>
  } else if (decode_SW(sys->sw_data) & 0b00000010) {
 8005852:	8c20      	ldrh	r0, [r4, #32]
 8005854:	f000 fd38 	bl	80062c8 <decode_SW>
 8005858:	0781      	lsls	r1, r0, #30
 800585a:	d508      	bpl.n	800586e <motor_test+0x5a>
    omni_move(-4.0, 0.0, 0.0, 4.0);  // back
 800585c:	ed9f 1a22 	vldr	s2, [pc, #136]	; 80058e8 <motor_test+0xd4>
 8005860:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 8005864:	eef0 0a41 	vmov.f32	s1, s2
 8005868:	eeb9 0a00 	vmov.f32	s0, #144	; 0xc0800000 -4.0
 800586c:	e7e1      	b.n	8005832 <motor_test+0x1e>
  } else if (decode_SW(sys->sw_data) & 0b00000100) {
 800586e:	8c20      	ldrh	r0, [r4, #32]
 8005870:	f000 fd2a 	bl	80062c8 <decode_SW>
 8005874:	0742      	lsls	r2, r0, #29
 8005876:	d40d      	bmi.n	8005894 <motor_test+0x80>
  } else if (decode_SW(sys->sw_data) & 0b00001000) {
 8005878:	8c20      	ldrh	r0, [r4, #32]
 800587a:	f000 fd25 	bl	80062c8 <decode_SW>
 800587e:	0703      	lsls	r3, r0, #28
 8005880:	d511      	bpl.n	80058a6 <motor_test+0x92>
    omni_move(0.0, 4.0, 0.0, 4.0);  // right
 8005882:	ed9f 1a19 	vldr	s2, [pc, #100]	; 80058e8 <motor_test+0xd4>
 8005886:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800588a:	eef0 0a61 	vmov.f32	s1, s3
 800588e:	eeb0 0a41 	vmov.f32	s0, s2
 8005892:	e7ce      	b.n	8005832 <motor_test+0x1e>
    omni_move(0.0, -4.0, 0.0, 4.0);  // left
 8005894:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80058e8 <motor_test+0xd4>
 8005898:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 800589c:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 80058a0:	eeb0 0a41 	vmov.f32	s0, s2
 80058a4:	e7c5      	b.n	8005832 <motor_test+0x1e>
  } else if (decode_SW(sys->sw_data) & 0b00010000) {
 80058a6:	8c20      	ldrh	r0, [r4, #32]
 80058a8:	f000 fd0e 	bl	80062c8 <decode_SW>
 80058ac:	f010 0410 	ands.w	r4, r0, #16
 80058b0:	d008      	beq.n	80058c4 <motor_test+0xb0>
    omni_move(0.0, 0.0, 20.0, 4.0);  // spin
 80058b2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80058e8 <motor_test+0xd4>
 80058b6:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
 80058ba:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80058be:	eeb0 0a60 	vmov.f32	s0, s1
 80058c2:	e7b6      	b.n	8005832 <motor_test+0x1e>
    omni_move(0.0, 0.0, 0.0, 0.0);
 80058c4:	eddf 1a08 	vldr	s3, [pc, #32]	; 80058e8 <motor_test+0xd4>
 80058c8:	eeb0 1a61 	vmov.f32	s2, s3
 80058cc:	eef0 0a61 	vmov.f32	s1, s3
 80058d0:	eeb0 0a61 	vmov.f32	s0, s3
 80058d4:	f7ff fd98 	bl	8005408 <omni_move>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80058d8:	4804      	ldr	r0, [pc, #16]	; (80058ec <motor_test+0xd8>)
 80058da:	4622      	mov	r2, r4
 80058dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058e0:	f002 fa7a 	bl	8007dd8 <HAL_GPIO_WritePin>
 80058e4:	e7ad      	b.n	8005842 <motor_test+0x2e>
 80058e6:	bf00      	nop
 80058e8:	00000000 	.word	0x00000000
 80058ec:	48000800 	.word	0x48000800

080058f0 <dribbler_test>:

void dribbler_test(system_t * sys)
{
 80058f0:	b510      	push	{r4, lr}
  if (decode_SW(sys->sw_data) & 0b00010000) {
 80058f2:	8c00      	ldrh	r0, [r0, #32]
 80058f4:	f000 fce8 	bl	80062c8 <decode_SW>
 80058f8:	f010 0410 	ands.w	r4, r0, #16
 80058fc:	d017      	beq.n	800592e <dribbler_test+0x3e>
    actuator_motor5(0.5, 1.0);
 80058fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005902:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005906:	f7fb fbe5 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800590a:	480f      	ldr	r0, [pc, #60]	; (8005948 <dribbler_test+0x58>)
 800590c:	2201      	movs	r2, #1
 800590e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005912:	f002 fa61 	bl	8007dd8 <HAL_GPIO_WritePin>
  } else {
    actuator_motor5(0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
 8005916:	eddf 1a0d 	vldr	s3, [pc, #52]	; 800594c <dribbler_test+0x5c>
}
 800591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 800591e:	eeb0 1a61 	vmov.f32	s2, s3
 8005922:	eef0 0a61 	vmov.f32	s1, s3
 8005926:	eeb0 0a61 	vmov.f32	s0, s3
 800592a:	f7ff bd6d 	b.w	8005408 <omni_move>
    actuator_motor5(0.0, 0.0);
 800592e:	eddf 0a07 	vldr	s1, [pc, #28]	; 800594c <dribbler_test+0x5c>
 8005932:	eeb0 0a60 	vmov.f32	s0, s1
 8005936:	f7fb fbcd 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800593a:	4803      	ldr	r0, [pc, #12]	; (8005948 <dribbler_test+0x58>)
 800593c:	4622      	mov	r2, r4
 800593e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005942:	f002 fa49 	bl	8007dd8 <HAL_GPIO_WritePin>
 8005946:	e7e6      	b.n	8005916 <dribbler_test+0x26>
 8005948:	48000800 	.word	0x48000800
 800594c:	00000000 	.word	0x00000000

08005950 <kicker_test>:

void kicker_test(system_t * sys, can_raw_t * can_raw, bool manual_mode)
{
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static bool dribbler_up = false;

  if (sys->kick_state != 0) {
 8005952:	8b83      	ldrh	r3, [r0, #28]
{
 8005954:	4604      	mov	r4, r0
 8005956:	460e      	mov	r6, r1
 8005958:	4617      	mov	r7, r2
  if (sys->kick_state != 0) {
 800595a:	b11b      	cbz	r3, 8005964 <kicker_test+0x14>
    if (sys->kick_state > MAIN_LOOP_CYCLE / 2) {
 800595c:	2bfa      	cmp	r3, #250	; 0xfa
 800595e:	d825      	bhi.n	80059ac <kicker_test+0x5c>
      if (can_raw->ball_detection[0] == 0) {
        sys->kick_state = 0;
      }
    } else {
      sys->kick_state++;
 8005960:	3301      	adds	r3, #1
 8005962:	83a3      	strh	r3, [r4, #28]
    }
  }

  if (dribbler_up == false && decode_SW(sys->sw_data) & 0b00000100) {
 8005964:	4d4f      	ldr	r5, [pc, #316]	; (8005aa4 <kicker_test+0x154>)
 8005966:	782b      	ldrb	r3, [r5, #0]
 8005968:	b343      	cbz	r3, 80059bc <kicker_test+0x6c>
    dribbler_up = true;
    actuator_dribbler_down();
  } else if (dribbler_up == true && decode_SW(sys->sw_data) & 0b00001000) {
 800596a:	8c20      	ldrh	r0, [r4, #32]
 800596c:	f000 fcac 	bl	80062c8 <decode_SW>
 8005970:	0701      	lsls	r1, r0, #28
 8005972:	d45c      	bmi.n	8005a2e <kicker_test+0xde>
    dribbler_up = false;
    actuator_dribbler_up();
  }

  if (decode_SW(sys->sw_data) & 0b00010000) {
 8005974:	8c20      	ldrh	r0, [r4, #32]
 8005976:	f000 fca7 	bl	80062c8 <decode_SW>
 800597a:	06c3      	lsls	r3, r0, #27
 800597c:	d52b      	bpl.n	80059d6 <kicker_test+0x86>
    if (!manual_mode) {
 800597e:	2f00      	cmp	r7, #0
 8005980:	d044      	beq.n	8005a0c <kicker_test+0xbc>
      actuator_motor5(0.5, 1.0);
    }
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8005982:	4849      	ldr	r0, [pc, #292]	; (8005aa8 <kicker_test+0x158>)
 8005984:	2201      	movs	r2, #1
 8005986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800598a:	f002 fa25 	bl	8007dd8 <HAL_GPIO_WritePin>
    if (can_raw->ball_detection[0] == 1 || manual_mode) {
      if (sys->kick_state == 0) {
 800598e:	8ba1      	ldrh	r1, [r4, #28]
 8005990:	2900      	cmp	r1, #0
 8005992:	d062      	beq.n	8005a5a <kicker_test+0x10a>
    actuator_motor5(0.0, 0.0);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
    actuator_kicker(1, 1);  // charge enable
    actuator_kicker_voltage(300.0);
  }
  omni_move(0.0, 0.0, 0.0, 0.0);
 8005994:	eddf 1a45 	vldr	s3, [pc, #276]	; 8005aac <kicker_test+0x15c>
}
 8005998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  omni_move(0.0, 0.0, 0.0, 0.0);
 800599c:	eeb0 1a61 	vmov.f32	s2, s3
 80059a0:	eef0 0a61 	vmov.f32	s1, s3
 80059a4:	eeb0 0a61 	vmov.f32	s0, s3
 80059a8:	f7ff bd2e 	b.w	8005408 <omni_move>
      if (can_raw->ball_detection[0] == 0) {
 80059ac:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0d6      	beq.n	8005962 <kicker_test+0x12>
  if (dribbler_up == false && decode_SW(sys->sw_data) & 0b00000100) {
 80059b4:	4d3b      	ldr	r5, [pc, #236]	; (8005aa4 <kicker_test+0x154>)
 80059b6:	782b      	ldrb	r3, [r5, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1d6      	bne.n	800596a <kicker_test+0x1a>
 80059bc:	8c20      	ldrh	r0, [r4, #32]
 80059be:	f000 fc83 	bl	80062c8 <decode_SW>
 80059c2:	0742      	lsls	r2, r0, #29
 80059c4:	d468      	bmi.n	8005a98 <kicker_test+0x148>
  } else if (dribbler_up == true && decode_SW(sys->sw_data) & 0b00001000) {
 80059c6:	782b      	ldrb	r3, [r5, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ce      	bne.n	800596a <kicker_test+0x1a>
  if (decode_SW(sys->sw_data) & 0b00010000) {
 80059cc:	8c20      	ldrh	r0, [r4, #32]
 80059ce:	f000 fc7b 	bl	80062c8 <decode_SW>
 80059d2:	06c3      	lsls	r3, r0, #27
 80059d4:	d4d3      	bmi.n	800597e <kicker_test+0x2e>
  } else if (decode_SW(sys->sw_data) & 0b00000010) {
 80059d6:	8c20      	ldrh	r0, [r4, #32]
 80059d8:	f000 fc76 	bl	80062c8 <decode_SW>
 80059dc:	f010 0502 	ands.w	r5, r0, #2
 80059e0:	d045      	beq.n	8005a6e <kicker_test+0x11e>
    if (!manual_mode) {
 80059e2:	b34f      	cbz	r7, 8005a38 <kicker_test+0xe8>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80059e4:	4830      	ldr	r0, [pc, #192]	; (8005aa8 <kicker_test+0x158>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059ec:	f002 f9f4 	bl	8007dd8 <HAL_GPIO_WritePin>
      if (sys->kick_state == 0) {
 80059f0:	8ba3      	ldrh	r3, [r4, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1ce      	bne.n	8005994 <kicker_test+0x44>
        actuator_kicker(2, 1);  // chip
 80059f6:	2101      	movs	r1, #1
 80059f8:	2002      	movs	r0, #2
 80059fa:	f7fb fbbf 	bl	800117c <actuator_kicker>
        actuator_kicker(3, 100);
 80059fe:	2164      	movs	r1, #100	; 0x64
 8005a00:	2003      	movs	r0, #3
 8005a02:	f7fb fbbb 	bl	800117c <actuator_kicker>
        sys->kick_state = 1;
 8005a06:	2301      	movs	r3, #1
 8005a08:	83a3      	strh	r3, [r4, #28]
 8005a0a:	e7c3      	b.n	8005994 <kicker_test+0x44>
      actuator_motor5(0.5, 1.0);
 8005a0c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005a10:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005a14:	f7fb fb5e 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8005a18:	4823      	ldr	r0, [pc, #140]	; (8005aa8 <kicker_test+0x158>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a20:	f002 f9da 	bl	8007dd8 <HAL_GPIO_WritePin>
    if (can_raw->ball_detection[0] == 1 || manual_mode) {
 8005a24:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d1b3      	bne.n	8005994 <kicker_test+0x44>
 8005a2c:	e7af      	b.n	800598e <kicker_test+0x3e>
    dribbler_up = false;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	702b      	strb	r3, [r5, #0]
    actuator_dribbler_up();
 8005a32:	f7fb fb6f 	bl	8001114 <actuator_dribbler_up>
 8005a36:	e79d      	b.n	8005974 <kicker_test+0x24>
      actuator_motor5(0.5, 1.0);
 8005a38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005a3c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005a40:	f7fb fb48 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8005a44:	4818      	ldr	r0, [pc, #96]	; (8005aa8 <kicker_test+0x158>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a4c:	f002 f9c4 	bl	8007dd8 <HAL_GPIO_WritePin>
    if (can_raw->ball_detection[0] == 1 || manual_mode) {
 8005a50:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d19d      	bne.n	8005994 <kicker_test+0x44>
 8005a58:	e7ca      	b.n	80059f0 <kicker_test+0xa0>
        actuator_kicker(2, 0);  // straight
 8005a5a:	2002      	movs	r0, #2
 8005a5c:	f7fb fb8e 	bl	800117c <actuator_kicker>
        actuator_kicker(3, 50);
 8005a60:	2132      	movs	r1, #50	; 0x32
 8005a62:	2003      	movs	r0, #3
 8005a64:	f7fb fb8a 	bl	800117c <actuator_kicker>
        sys->kick_state = 1;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	83a3      	strh	r3, [r4, #28]
 8005a6c:	e792      	b.n	8005994 <kicker_test+0x44>
    actuator_motor5(0.0, 0.0);
 8005a6e:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005aac <kicker_test+0x15c>
 8005a72:	eeb0 0a60 	vmov.f32	s0, s1
 8005a76:	f7fb fb2d 	bl	80010d4 <actuator_motor5>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8005a7a:	462a      	mov	r2, r5
 8005a7c:	480a      	ldr	r0, [pc, #40]	; (8005aa8 <kicker_test+0x158>)
 8005a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a82:	f002 f9a9 	bl	8007dd8 <HAL_GPIO_WritePin>
    actuator_kicker(1, 1);  // charge enable
 8005a86:	2101      	movs	r1, #1
 8005a88:	4608      	mov	r0, r1
 8005a8a:	f7fb fb77 	bl	800117c <actuator_kicker>
    actuator_kicker_voltage(300.0);
 8005a8e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005ab0 <kicker_test+0x160>
 8005a92:	f7fb fb63 	bl	800115c <actuator_kicker_voltage>
 8005a96:	e77d      	b.n	8005994 <kicker_test+0x44>
    dribbler_up = true;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	702b      	strb	r3, [r5, #0]
    actuator_dribbler_down();
 8005a9c:	f7fb fb4c 	bl	8001138 <actuator_dribbler_down>
 8005aa0:	e768      	b.n	8005974 <kicker_test+0x24>
 8005aa2:	bf00      	nop
 8005aa4:	20000bf0 	.word	0x20000bf0
 8005aa8:	48000800 	.word	0x48000800
 8005aac:	00000000 	.word	0x00000000
 8005ab0:	43960000 	.word	0x43960000

08005ab4 <motor_calibration>:

void motor_calibration(system_t * sys)
{
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4604      	mov	r4, r0
  static uint32_t calib_start_cnt = 0;
  if (decode_SW(sys->sw_data) & 0b00000100) {
 8005ab8:	8c00      	ldrh	r0, [r0, #32]
 8005aba:	f000 fc05 	bl	80062c8 <decode_SW>
 8005abe:	0743      	lsls	r3, r0, #29
 8005ac0:	d50c      	bpl.n	8005adc <motor_calibration+0x28>
    calib_start_cnt++;
 8005ac2:	4a11      	ldr	r2, [pc, #68]	; (8005b08 <motor_calibration+0x54>)
 8005ac4:	6813      	ldr	r3, [r2, #0]
 8005ac6:	3301      	adds	r3, #1
    if (calib_start_cnt > 1000) {
 8005ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    calib_start_cnt++;
 8005acc:	6013      	str	r3, [r2, #0]
    if (calib_start_cnt > 1000) {
 8005ace:	d800      	bhi.n	8005ad2 <motor_calibration+0x1e>
      actuator_motor_calib(1);
    }
  } else {
    calib_start_cnt = 0;
  }
 8005ad0:	bd10      	pop	{r4, pc}
 8005ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      actuator_motor_calib(0);
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f7fb bbc6 	b.w	8001268 <actuator_motor_calib>
  } else if (decode_SW(sys->sw_data) & 0b00001000) {
 8005adc:	8c20      	ldrh	r0, [r4, #32]
 8005ade:	f000 fbf3 	bl	80062c8 <decode_SW>
 8005ae2:	f010 0008 	ands.w	r0, r0, #8
 8005ae6:	d00b      	beq.n	8005b00 <motor_calibration+0x4c>
    calib_start_cnt++;
 8005ae8:	4a07      	ldr	r2, [pc, #28]	; (8005b08 <motor_calibration+0x54>)
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	3301      	adds	r3, #1
    if (calib_start_cnt > 1000) {
 8005aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    calib_start_cnt++;
 8005af2:	6013      	str	r3, [r2, #0]
    if (calib_start_cnt > 1000) {
 8005af4:	d9ec      	bls.n	8005ad0 <motor_calibration+0x1c>
 8005af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      actuator_motor_calib(1);
 8005afa:	2001      	movs	r0, #1
 8005afc:	f7fb bbb4 	b.w	8001268 <actuator_motor_calib>
    calib_start_cnt = 0;
 8005b00:	4b01      	ldr	r3, [pc, #4]	; (8005b08 <motor_calibration+0x54>)
 8005b02:	6018      	str	r0, [r3, #0]
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	bf00      	nop
 8005b08:	20000bec 	.word	0x20000bec
 8005b0c:	00000000 	.word	0x00000000

08005b10 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005b10:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005b12:	4c33      	ldr	r4, [pc, #204]	; (8005be0 <MX_TIM5_Init+0xd0>)
 8005b14:	4a33      	ldr	r2, [pc, #204]	; (8005be4 <MX_TIM5_Init+0xd4>)
 8005b16:	6022      	str	r2, [r4, #0]
{
 8005b18:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 8005b1a:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b1c:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 8005b1e:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005b20:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 8005b22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b26:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b2a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8005b2e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8005b32:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 8005b36:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b3a:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b3c:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b3e:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b40:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005b42:	f003 fbe1 	bl	8009308 <HAL_TIM_PWM_Init>
 8005b46:	bb00      	cbnz	r0, 8005b8a <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b48:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005b4a:	4825      	ldr	r0, [pc, #148]	; (8005be0 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b4c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005b4e:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b50:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005b52:	f003 ff83 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 8005b56:	b9f0      	cbnz	r0, 8005b96 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b58:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8005bd0 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b5c:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b5e:	4820      	ldr	r0, [pc, #128]	; (8005be0 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b60:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b62:	2204      	movs	r2, #4
 8005b64:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b6a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b6c:	f003 fe6c 	bl	8009848 <HAL_TIM_PWM_ConfigChannel>
 8005b70:	b970      	cbnz	r0, 8005b90 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <MX_TIM5_Init+0xd4>)
 8005b74:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b76:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8005b78:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b7a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005b7e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005b82:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 8005b84:	d00a      	beq.n	8005b9c <MX_TIM5_Init+0x8c>
}
 8005b86:	b012      	add	sp, #72	; 0x48
 8005b88:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005b8a:	f7fe f9b3 	bl	8003ef4 <Error_Handler>
 8005b8e:	e7db      	b.n	8005b48 <MX_TIM5_Init+0x38>
    Error_Handler();
 8005b90:	f7fe f9b0 	bl	8003ef4 <Error_Handler>
 8005b94:	e7ed      	b.n	8005b72 <MX_TIM5_Init+0x62>
    Error_Handler();
 8005b96:	f7fe f9ad 	bl	8003ef4 <Error_Handler>
 8005b9a:	e7dd      	b.n	8005b58 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ba0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8005ba4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8005bd8 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005baa:	480f      	ldr	r0, [pc, #60]	; (8005be8 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bac:	f042 0204 	orr.w	r2, r2, #4
 8005bb0:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005bba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005bbc:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8005bbe:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bc2:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005bc4:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005bc6:	f002 f807 	bl	8007bd8 <HAL_GPIO_Init>
}
 8005bca:	b012      	add	sp, #72	; 0x48
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	bf00      	nop
 8005bd0:	00000060 	.word	0x00000060
 8005bd4:	00000000 	.word	0x00000000
 8005bd8:	00001000 	.word	0x00001000
 8005bdc:	00000002 	.word	0x00000002
 8005be0:	20000bf4 	.word	0x20000bf4
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	48000800 	.word	0x48000800

08005bec <MX_TIM7_Init>:
{
 8005bec:	b500      	push	{lr}
  htim7.Instance = TIM7;
 8005bee:	4812      	ldr	r0, [pc, #72]	; (8005c38 <MX_TIM7_Init+0x4c>)
 8005bf0:	4912      	ldr	r1, [pc, #72]	; (8005c3c <MX_TIM7_Init+0x50>)
{
 8005bf2:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 8005bf4:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf6:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8005bf8:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 2000;
 8005bfc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c00:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 2000;
 8005c04:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c08:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c0a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005c0c:	f003 faa0 	bl	8009150 <HAL_TIM_Base_Init>
 8005c10:	b950      	cbnz	r0, 8005c28 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c12:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c14:	4808      	ldr	r0, [pc, #32]	; (8005c38 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c16:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c18:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c1a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c1c:	f003 ff1e 	bl	8009a5c <HAL_TIMEx_MasterConfigSynchronization>
 8005c20:	b928      	cbnz	r0, 8005c2e <MX_TIM7_Init+0x42>
}
 8005c22:	b005      	add	sp, #20
 8005c24:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8005c28:	f7fe f964 	bl	8003ef4 <Error_Handler>
 8005c2c:	e7f1      	b.n	8005c12 <MX_TIM7_Init+0x26>
    Error_Handler();
 8005c2e:	f7fe f961 	bl	8003ef4 <Error_Handler>
}
 8005c32:	b005      	add	sp, #20
 8005c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c38:	20000c40 	.word	0x20000c40
 8005c3c:	40001400 	.word	0x40001400

08005c40 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_TIM_PWM_MspInit+0x28>)
 8005c42:	6802      	ldr	r2, [r0, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d000      	beq.n	8005c4a <HAL_TIM_PWM_MspInit+0xa>
 8005c48:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c4a:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 8005c4e:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c52:	f042 0208 	orr.w	r2, r2, #8
 8005c56:	659a      	str	r2, [r3, #88]	; 0x58
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	9b01      	ldr	r3, [sp, #4]
}
 8005c62:	b002      	add	sp, #8
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40000c00 	.word	0x40000c00

08005c6c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 8005c6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <HAL_TIM_Base_MspInit+0x3c>)
 8005c6e:	6802      	ldr	r2, [r0, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d000      	beq.n	8005c76 <HAL_TIM_Base_MspInit+0xa>
 8005c74:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c76:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 8005c7a:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c7c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005c7e:	f041 0120 	orr.w	r1, r1, #32
 8005c82:	6599      	str	r1, [r3, #88]	; 0x58
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8005c86:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8005c8e:	2037      	movs	r0, #55	; 0x37
 8005c90:	2200      	movs	r2, #0
 8005c92:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005c94:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8005c96:	f001 f97f 	bl	8006f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005c9a:	2037      	movs	r0, #55	; 0x37
}
 8005c9c:	b003      	add	sp, #12
 8005c9e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005ca2:	f001 b9b7 	b.w	8007014 <HAL_NVIC_EnableIRQ>
 8005ca6:	bf00      	nop
 8005ca8:	40001400 	.word	0x40001400
 8005cac:	00000000 	.word	0x00000000

08005cb0 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005cb0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005d38 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 8005cb4:	4822      	ldr	r0, [pc, #136]	; (8005d40 <MX_LPUART1_UART_Init+0x90>)
 8005cb6:	4923      	ldr	r1, [pc, #140]	; (8005d44 <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 8005cb8:	4a23      	ldr	r2, [pc, #140]	; (8005d48 <MX_LPUART1_UART_Init+0x98>)
{
 8005cba:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cbc:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 8005cbe:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005cc2:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005cc4:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005cca:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005cce:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005cd2:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cd6:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005cd8:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005cda:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005cdc:	f004 fff0 	bl	800acc0 <HAL_UART_Init>
 8005ce0:	b970      	cbnz	r0, 8005d00 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ce2:	4817      	ldr	r0, [pc, #92]	; (8005d40 <MX_LPUART1_UART_Init+0x90>)
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	f005 f87b 	bl	800ade0 <HAL_UARTEx_SetTxFifoThreshold>
 8005cea:	b988      	cbnz	r0, 8005d10 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cec:	4814      	ldr	r0, [pc, #80]	; (8005d40 <MX_LPUART1_UART_Init+0x90>)
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f005 f8b8 	bl	800ae64 <HAL_UARTEx_SetRxFifoThreshold>
 8005cf4:	b9a0      	cbnz	r0, 8005d20 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005cf6:	4812      	ldr	r0, [pc, #72]	; (8005d40 <MX_LPUART1_UART_Init+0x90>)
 8005cf8:	f005 f854 	bl	800ada4 <HAL_UARTEx_DisableFifoMode>
 8005cfc:	b9b8      	cbnz	r0, 8005d2e <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005cfe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005d00:	f7fe f8f8 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d04:	480e      	ldr	r0, [pc, #56]	; (8005d40 <MX_LPUART1_UART_Init+0x90>)
 8005d06:	2100      	movs	r1, #0
 8005d08:	f005 f86a 	bl	800ade0 <HAL_UARTEx_SetTxFifoThreshold>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d0ed      	beq.n	8005cec <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 8005d10:	f7fe f8f0 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d14:	480a      	ldr	r0, [pc, #40]	; (8005d40 <MX_LPUART1_UART_Init+0x90>)
 8005d16:	2100      	movs	r1, #0
 8005d18:	f005 f8a4 	bl	800ae64 <HAL_UARTEx_SetRxFifoThreshold>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d0ea      	beq.n	8005cf6 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 8005d20:	f7fe f8e8 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005d24:	4806      	ldr	r0, [pc, #24]	; (8005d40 <MX_LPUART1_UART_Init+0x90>)
 8005d26:	f005 f83d 	bl	800ada4 <HAL_UARTEx_DisableFifoMode>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d0e7      	beq.n	8005cfe <MX_LPUART1_UART_Init+0x4e>
}
 8005d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005d32:	f7fe b8df 	b.w	8003ef4 <Error_Handler>
 8005d36:	bf00      	nop
	...
 8005d40:	20000e10 	.word	0x20000e10
 8005d44:	40008000 	.word	0x40008000
 8005d48:	001e8480 	.word	0x001e8480

08005d4c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005d4c:	4821      	ldr	r0, [pc, #132]	; (8005dd4 <MX_USART2_UART_Init+0x88>)
 8005d4e:	4922      	ldr	r1, [pc, #136]	; (8005dd8 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 8005d50:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 8005d54:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d56:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 8005d58:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d5c:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005d5e:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005d60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d64:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d68:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d6c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d70:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005d74:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005d76:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d78:	f004 ffa2 	bl	800acc0 <HAL_UART_Init>
 8005d7c:	b970      	cbnz	r0, 8005d9c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d7e:	4815      	ldr	r0, [pc, #84]	; (8005dd4 <MX_USART2_UART_Init+0x88>)
 8005d80:	2100      	movs	r1, #0
 8005d82:	f005 f82d 	bl	800ade0 <HAL_UARTEx_SetTxFifoThreshold>
 8005d86:	b988      	cbnz	r0, 8005dac <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d88:	4812      	ldr	r0, [pc, #72]	; (8005dd4 <MX_USART2_UART_Init+0x88>)
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f005 f86a 	bl	800ae64 <HAL_UARTEx_SetRxFifoThreshold>
 8005d90:	b9a0      	cbnz	r0, 8005dbc <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005d92:	4810      	ldr	r0, [pc, #64]	; (8005dd4 <MX_USART2_UART_Init+0x88>)
 8005d94:	f005 f806 	bl	800ada4 <HAL_UARTEx_DisableFifoMode>
 8005d98:	b9b8      	cbnz	r0, 8005dca <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d9a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005d9c:	f7fe f8aa 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005da0:	480c      	ldr	r0, [pc, #48]	; (8005dd4 <MX_USART2_UART_Init+0x88>)
 8005da2:	2100      	movs	r1, #0
 8005da4:	f005 f81c 	bl	800ade0 <HAL_UARTEx_SetTxFifoThreshold>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d0ed      	beq.n	8005d88 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 8005dac:	f7fe f8a2 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005db0:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <MX_USART2_UART_Init+0x88>)
 8005db2:	2100      	movs	r1, #0
 8005db4:	f005 f856 	bl	800ae64 <HAL_UARTEx_SetRxFifoThreshold>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d0ea      	beq.n	8005d92 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8005dbc:	f7fe f89a 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005dc0:	4804      	ldr	r0, [pc, #16]	; (8005dd4 <MX_USART2_UART_Init+0x88>)
 8005dc2:	f004 ffef 	bl	800ada4 <HAL_UARTEx_DisableFifoMode>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d0e7      	beq.n	8005d9a <MX_USART2_UART_Init+0x4e>
}
 8005dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005dce:	f7fe b891 	b.w	8003ef4 <Error_Handler>
 8005dd2:	bf00      	nop
 8005dd4:	20000ea0 	.word	0x20000ea0
 8005dd8:	40004400 	.word	0x40004400

08005ddc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005ddc:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005dde:	481f      	ldr	r0, [pc, #124]	; (8005e5c <MX_USART3_UART_Init+0x80>)
 8005de0:	4c1f      	ldr	r4, [pc, #124]	; (8005e60 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005de2:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8005de4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005de8:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8005dea:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005dee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005df2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005df6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005dfa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dfe:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e00:	f004 ff5e 	bl	800acc0 <HAL_UART_Init>
 8005e04:	b970      	cbnz	r0, 8005e24 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e06:	4815      	ldr	r0, [pc, #84]	; (8005e5c <MX_USART3_UART_Init+0x80>)
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f004 ffe9 	bl	800ade0 <HAL_UARTEx_SetTxFifoThreshold>
 8005e0e:	b988      	cbnz	r0, 8005e34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e10:	4812      	ldr	r0, [pc, #72]	; (8005e5c <MX_USART3_UART_Init+0x80>)
 8005e12:	2100      	movs	r1, #0
 8005e14:	f005 f826 	bl	800ae64 <HAL_UARTEx_SetRxFifoThreshold>
 8005e18:	b9a0      	cbnz	r0, 8005e44 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005e1a:	4810      	ldr	r0, [pc, #64]	; (8005e5c <MX_USART3_UART_Init+0x80>)
 8005e1c:	f004 ffc2 	bl	800ada4 <HAL_UARTEx_DisableFifoMode>
 8005e20:	b9b8      	cbnz	r0, 8005e52 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005e22:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005e24:	f7fe f866 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e28:	480c      	ldr	r0, [pc, #48]	; (8005e5c <MX_USART3_UART_Init+0x80>)
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f004 ffd8 	bl	800ade0 <HAL_UARTEx_SetTxFifoThreshold>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d0ed      	beq.n	8005e10 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8005e34:	f7fe f85e 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e38:	4808      	ldr	r0, [pc, #32]	; (8005e5c <MX_USART3_UART_Init+0x80>)
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	f005 f812 	bl	800ae64 <HAL_UARTEx_SetRxFifoThreshold>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d0ea      	beq.n	8005e1a <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8005e44:	f7fe f856 	bl	8003ef4 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005e48:	4804      	ldr	r0, [pc, #16]	; (8005e5c <MX_USART3_UART_Init+0x80>)
 8005e4a:	f004 ffab 	bl	800ada4 <HAL_UARTEx_DisableFifoMode>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0e7      	beq.n	8005e22 <MX_USART3_UART_Init+0x46>
}
 8005e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005e56:	f7fe b84d 	b.w	8003ef4 <Error_Handler>
 8005e5a:	bf00      	nop
 8005e5c:	20000f30 	.word	0x20000f30
 8005e60:	40004800 	.word	0x40004800

08005e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4604      	mov	r4, r0
 8005e68:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e6a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e6c:	2254      	movs	r2, #84	; 0x54
 8005e6e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e70:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8005e74:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8005e78:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e7a:	f006 f81d 	bl	800beb8 <memset>
  if(uartHandle->Instance==LPUART1)
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	4a93      	ldr	r2, [pc, #588]	; (80060d0 <HAL_UART_MspInit+0x26c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d008      	beq.n	8005e98 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8005e86:	4a93      	ldr	r2, [pc, #588]	; (80060d4 <HAL_UART_MspInit+0x270>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d067      	beq.n	8005f5c <HAL_UART_MspInit+0xf8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8005e8c:	4a92      	ldr	r2, [pc, #584]	; (80060d8 <HAL_UART_MspInit+0x274>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	f000 80ba 	beq.w	8006008 <HAL_UART_MspInit+0x1a4>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005e94:	b020      	add	sp, #128	; 0x80
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005e98:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e9a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005e9c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e9e:	f002 fbd5 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	f040 8104 	bne.w	80060b0 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005ea8:	4b8c      	ldr	r3, [pc, #560]	; (80060dc <HAL_UART_MspInit+0x278>)
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 8005eaa:	4e8d      	ldr	r6, [pc, #564]	; (80060e0 <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005eb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eb6:	f002 0201 	and.w	r2, r2, #1
 8005eba:	9200      	str	r2, [sp, #0]
 8005ebc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005ece:	220c      	movs	r2, #12
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ed6:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ee0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005ee2:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005ee8:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eea:	f001 fe75 	bl	8007bd8 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005eee:	497d      	ldr	r1, [pc, #500]	; (80060e4 <HAL_UART_MspInit+0x280>)
 8005ef0:	2222      	movs	r2, #34	; 0x22
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ef2:	2300      	movs	r3, #0
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8005ef4:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005ef8:	4630      	mov	r0, r6
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005efa:	2180      	movs	r1, #128	; 0x80
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005efc:	2220      	movs	r2, #32
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005efe:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f02:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005f06:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f0a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005f0c:	f001 f8aa 	bl	8007064 <HAL_DMA_Init>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f040 80ca 	bne.w	80060aa <HAL_UART_MspInit+0x246>
    hdma_lpuart1_tx.Instance = DMA1_Channel7;
 8005f16:	4d74      	ldr	r5, [pc, #464]	; (80060e8 <HAL_UART_MspInit+0x284>)
 8005f18:	4974      	ldr	r1, [pc, #464]	; (80060ec <HAL_UART_MspInit+0x288>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005f1a:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005f1c:	2223      	movs	r2, #35	; 0x23
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f1e:	2300      	movs	r3, #0
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8005f20:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005f24:	4628      	mov	r0, r5
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f26:	2110      	movs	r1, #16
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f28:	2280      	movs	r2, #128	; 0x80
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f2a:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f2e:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f32:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8005f36:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f38:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8005f3a:	f001 f893 	bl	8007064 <HAL_DMA_Init>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f040 80b0 	bne.w	80060a4 <HAL_UART_MspInit+0x240>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005f44:	2200      	movs	r2, #0
 8005f46:	210d      	movs	r1, #13
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005f48:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005f4a:	205b      	movs	r0, #91	; 0x5b
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8005f4c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 13, 0);
 8005f4e:	f001 f823 	bl	8006f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005f52:	205b      	movs	r0, #91	; 0x5b
 8005f54:	f001 f85e 	bl	8007014 <HAL_NVIC_EnableIRQ>
}
 8005f58:	b020      	add	sp, #128	; 0x80
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005f5c:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f5e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005f60:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f62:	f002 fb73 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f040 80a5 	bne.w	80060b6 <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f6c:	4b5b      	ldr	r3, [pc, #364]	; (80060dc <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005f6e:	4860      	ldr	r0, [pc, #384]	; (80060f0 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_tx.Instance = DMA1_Channel8;
 8005f72:	4d60      	ldr	r5, [pc, #384]	; (80060f4 <HAL_UART_MspInit+0x290>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f78:	659a      	str	r2, [r3, #88]	; 0x58
 8005f7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f7c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005f80:	9202      	str	r2, [sp, #8]
 8005f82:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f86:	f042 0202 	orr.w	r2, r2, #2
 8005f8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005f94:	2208      	movs	r2, #8
 8005f96:	2302      	movs	r3, #2
 8005f98:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f9c:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005f9e:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fa0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fa2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005fa4:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005fa6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin;
 8005fa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_TX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005fac:	f001 fe14 	bl	8007bd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005fb8:	484d      	ldr	r0, [pc, #308]	; (80060f0 <HAL_UART_MspInit+0x28c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005fc0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART2_RX_ETH_Pin;
 8005fc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART2_RX_ETH_GPIO_Port, &GPIO_InitStruct);
 8005fc6:	f001 fe07 	bl	8007bd8 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005fca:	494b      	ldr	r1, [pc, #300]	; (80060f8 <HAL_UART_MspInit+0x294>)
 8005fcc:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fce:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005fd0:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005fd4:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fd6:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fd8:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fda:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fde:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005fe2:	e9c5 3307 	strd	r3, r3, [r5, #28]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005fe6:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005fe8:	f001 f83c 	bl	8007064 <HAL_DMA_Init>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d165      	bne.n	80060bc <HAL_UART_MspInit+0x258>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005ff4:	67a5      	str	r5, [r4, #120]	; 0x78
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ff6:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005ff8:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ffa:	f000 ffcd 	bl	8006f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ffe:	2026      	movs	r0, #38	; 0x26
 8006000:	f001 f808 	bl	8007014 <HAL_NVIC_EnableIRQ>
}
 8006004:	b020      	add	sp, #128	; 0x80
 8006006:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006008:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800600a:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800600c:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800600e:	f002 fb1d 	bl	800864c <HAL_RCCEx_PeriphCLKConfig>
 8006012:	2800      	cmp	r0, #0
 8006014:	d158      	bne.n	80060c8 <HAL_UART_MspInit+0x264>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <HAL_UART_MspInit+0x278>)
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8006018:	4838      	ldr	r0, [pc, #224]	; (80060fc <HAL_UART_MspInit+0x298>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800601a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800601c:	4d38      	ldr	r5, [pc, #224]	; (8006100 <HAL_UART_MspInit+0x29c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800601e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006022:	659a      	str	r2, [r3, #88]	; 0x58
 8006024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006026:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800602a:	9204      	str	r2, [sp, #16]
 800602c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800602e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006030:	f042 0204 	orr.w	r2, r2, #4
 8006034:	64da      	str	r2, [r3, #76]	; 0x4c
 8006036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 800603e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006042:	2302      	movs	r3, #2
 8006044:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006048:	2607      	movs	r6, #7
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 800604a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800604c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800604e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8006050:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8006052:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin;
 8006054:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_TX_SBC_GPIO_Port, &GPIO_InitStruct);
 8006058:	f001 fdbe 	bl	8007bd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 800605c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006060:	2302      	movs	r3, #2
 8006062:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8006066:	4825      	ldr	r0, [pc, #148]	; (80060fc <HAL_UART_MspInit+0x298>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006068:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 800606a:	2201      	movs	r2, #1
 800606c:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 800606e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_RX_SBC_Pin;
 8006070:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(UART3_RX_SBC_GPIO_Port, &GPIO_InitStruct);
 8006074:	f001 fdb0 	bl	8007bd8 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006078:	4922      	ldr	r1, [pc, #136]	; (8006104 <HAL_UART_MspInit+0x2a0>)
 800607a:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800607c:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800607e:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006082:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006084:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006086:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006088:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800608c:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006090:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006094:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006096:	f000 ffe5 	bl	8007064 <HAL_DMA_Init>
 800609a:	b990      	cbnz	r0, 80060c2 <HAL_UART_MspInit+0x25e>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800609c:	67e5      	str	r5, [r4, #124]	; 0x7c
 800609e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80060a0:	b020      	add	sp, #128	; 0x80
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80060a4:	f7fd ff26 	bl	8003ef4 <Error_Handler>
 80060a8:	e74c      	b.n	8005f44 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80060aa:	f7fd ff23 	bl	8003ef4 <Error_Handler>
 80060ae:	e732      	b.n	8005f16 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 80060b0:	f7fd ff20 	bl	8003ef4 <Error_Handler>
 80060b4:	e6f8      	b.n	8005ea8 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80060b6:	f7fd ff1d 	bl	8003ef4 <Error_Handler>
 80060ba:	e757      	b.n	8005f6c <HAL_UART_MspInit+0x108>
      Error_Handler();
 80060bc:	f7fd ff1a 	bl	8003ef4 <Error_Handler>
 80060c0:	e796      	b.n	8005ff0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80060c2:	f7fd ff17 	bl	8003ef4 <Error_Handler>
 80060c6:	e7e9      	b.n	800609c <HAL_UART_MspInit+0x238>
      Error_Handler();
 80060c8:	f7fd ff14 	bl	8003ef4 <Error_Handler>
 80060cc:	e7a3      	b.n	8006016 <HAL_UART_MspInit+0x1b2>
 80060ce:	bf00      	nop
 80060d0:	40008000 	.word	0x40008000
 80060d4:	40004400 	.word	0x40004400
 80060d8:	40004800 	.word	0x40004800
 80060dc:	40021000 	.word	0x40021000
 80060e0:	20000c8c 	.word	0x20000c8c
 80060e4:	4002006c 	.word	0x4002006c
 80060e8:	20000cec 	.word	0x20000cec
 80060ec:	40020080 	.word	0x40020080
 80060f0:	48000400 	.word	0x48000400
 80060f4:	20000d4c 	.word	0x20000d4c
 80060f8:	40020094 	.word	0x40020094
 80060fc:	48000800 	.word	0x48000800
 8006100:	20000dac 	.word	0x20000dac
 8006104:	4002001c 	.word	0x4002001c

08006108 <uchar4_to_float>:
  Float_char4 tmp;
  tmp.char4_value[0] = value[0];
  tmp.char4_value[1] = value[1];
  tmp.char4_value[2] = value[2];
  tmp.char4_value[3] = value[3];
  return tmp.float_value;
 8006108:	6803      	ldr	r3, [r0, #0]
 800610a:	ee00 3a10 	vmov	s0, r3
}
 800610e:	4770      	bx	lr

08006110 <float_to_uchar4>:

void float_to_uchar4(unsigned char * value, float float_value)
{
  Float_char4 tmp;
  tmp.float_value = float_value;
  value[0] = tmp.char4_value[0];
 8006110:	ee10 3a10 	vmov	r3, s0
 8006114:	6003      	str	r3, [r0, #0]
  value[1] = tmp.char4_value[1];
  value[2] = tmp.char4_value[2];
  value[3] = tmp.char4_value[3];
}
 8006116:	4770      	bx	lr

08006118 <getAngleDiff>:
  }
  return angle_rad;
}

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8006118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (angle_rad > M_PI) {
 800611c:	ee10 0a10 	vmov	r0, s0
{
 8006120:	ed2d 8b04 	vpush	{d8-d9}
 8006124:	eeb0 8a40 	vmov.f32	s16, s0
 8006128:	eef0 8a60 	vmov.f32	s17, s1
  while (angle_rad > M_PI) {
 800612c:	f7fa fa34 	bl	8000598 <__aeabi_f2d>
 8006130:	a35f      	add	r3, pc, #380	; (adr r3, 80062b0 <getAngleDiff+0x198>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	4606      	mov	r6, r0
 8006138:	460f      	mov	r7, r1
 800613a:	f7fa fd15 	bl	8000b68 <__aeabi_dcmpgt>
 800613e:	b1d0      	cbz	r0, 8006176 <getAngleDiff+0x5e>
    angle_rad -= 2.0f * M_PI;
 8006140:	f20f 1974 	addw	r9, pc, #372	; 0x174
 8006144:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 8006148:	a559      	add	r5, pc, #356	; (adr r5, 80062b0 <getAngleDiff+0x198>)
 800614a:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad -= 2.0f * M_PI;
 800614e:	4642      	mov	r2, r8
 8006150:	464b      	mov	r3, r9
 8006152:	4630      	mov	r0, r6
 8006154:	4639      	mov	r1, r7
 8006156:	f7fa f8bf 	bl	80002d8 <__aeabi_dsub>
 800615a:	f7fa fd6d 	bl	8000c38 <__aeabi_d2f>
 800615e:	ee08 0a10 	vmov	s16, r0
  while (angle_rad > M_PI) {
 8006162:	f7fa fa19 	bl	8000598 <__aeabi_f2d>
 8006166:	4622      	mov	r2, r4
 8006168:	462b      	mov	r3, r5
 800616a:	4606      	mov	r6, r0
 800616c:	460f      	mov	r7, r1
 800616e:	f7fa fcfb 	bl	8000b68 <__aeabi_dcmpgt>
 8006172:	2800      	cmp	r0, #0
 8006174:	d1eb      	bne.n	800614e <getAngleDiff+0x36>
  while (angle_rad < -M_PI) {
 8006176:	a352      	add	r3, pc, #328	; (adr r3, 80062c0 <getAngleDiff+0x1a8>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	4630      	mov	r0, r6
 800617e:	4639      	mov	r1, r7
 8006180:	f7fa fcd4 	bl	8000b2c <__aeabi_dcmplt>
 8006184:	b1d0      	cbz	r0, 80061bc <getAngleDiff+0xa4>
    angle_rad += 2.0f * M_PI;
 8006186:	f20f 1930 	addw	r9, pc, #304	; 0x130
 800618a:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 800618e:	a54c      	add	r5, pc, #304	; (adr r5, 80062c0 <getAngleDiff+0x1a8>)
 8006190:	e9d5 4500 	ldrd	r4, r5, [r5]
    angle_rad += 2.0f * M_PI;
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	f7fa f89e 	bl	80002dc <__adddf3>
 80061a0:	f7fa fd4a 	bl	8000c38 <__aeabi_d2f>
 80061a4:	ee08 0a10 	vmov	s16, r0
  while (angle_rad < -M_PI) {
 80061a8:	f7fa f9f6 	bl	8000598 <__aeabi_f2d>
 80061ac:	4622      	mov	r2, r4
 80061ae:	462b      	mov	r3, r5
 80061b0:	4606      	mov	r6, r0
 80061b2:	460f      	mov	r7, r1
 80061b4:	f7fa fcba 	bl	8000b2c <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d1eb      	bne.n	8006194 <getAngleDiff+0x7c>
  while (angle_rad > M_PI) {
 80061bc:	ee18 0a90 	vmov	r0, s17
 80061c0:	f7fa f9ea 	bl	8000598 <__aeabi_f2d>
 80061c4:	a33a      	add	r3, pc, #232	; (adr r3, 80062b0 <getAngleDiff+0x198>)
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	4604      	mov	r4, r0
 80061cc:	460d      	mov	r5, r1
 80061ce:	f7fa fccb 	bl	8000b68 <__aeabi_dcmpgt>
 80061d2:	b1d8      	cbz	r0, 800620c <getAngleDiff+0xf4>
    angle_rad -= 2.0f * M_PI;
 80061d4:	f20f 09e0 	addw	r9, pc, #224	; 0xe0
 80061d8:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad > M_PI) {
 80061dc:	f20f 0bd0 	addw	fp, pc, #208	; 0xd0
 80061e0:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad -= 2.0f * M_PI;
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	4620      	mov	r0, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	f7fa f874 	bl	80002d8 <__aeabi_dsub>
 80061f0:	f7fa fd22 	bl	8000c38 <__aeabi_d2f>
 80061f4:	ee08 0a90 	vmov	s17, r0
  while (angle_rad > M_PI) {
 80061f8:	f7fa f9ce 	bl	8000598 <__aeabi_f2d>
 80061fc:	4652      	mov	r2, sl
 80061fe:	465b      	mov	r3, fp
 8006200:	4604      	mov	r4, r0
 8006202:	460d      	mov	r5, r1
 8006204:	f7fa fcb0 	bl	8000b68 <__aeabi_dcmpgt>
 8006208:	2800      	cmp	r0, #0
 800620a:	d1eb      	bne.n	80061e4 <getAngleDiff+0xcc>
  while (angle_rad < -M_PI) {
 800620c:	a32c      	add	r3, pc, #176	; (adr r3, 80062c0 <getAngleDiff+0x1a8>)
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	4620      	mov	r0, r4
 8006214:	4629      	mov	r1, r5
 8006216:	f7fa fc89 	bl	8000b2c <__aeabi_dcmplt>
 800621a:	b1d8      	cbz	r0, 8006254 <getAngleDiff+0x13c>
    angle_rad += 2.0f * M_PI;
 800621c:	f20f 0998 	addw	r9, pc, #152	; 0x98
 8006220:	e9d9 8900 	ldrd	r8, r9, [r9]
  while (angle_rad < -M_PI) {
 8006224:	f20f 0b98 	addw	fp, pc, #152	; 0x98
 8006228:	e9db ab00 	ldrd	sl, fp, [fp]
    angle_rad += 2.0f * M_PI;
 800622c:	4642      	mov	r2, r8
 800622e:	464b      	mov	r3, r9
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	f7fa f852 	bl	80002dc <__adddf3>
 8006238:	f7fa fcfe 	bl	8000c38 <__aeabi_d2f>
 800623c:	ee08 0a90 	vmov	s17, r0
  while (angle_rad < -M_PI) {
 8006240:	f7fa f9aa 	bl	8000598 <__aeabi_f2d>
 8006244:	4652      	mov	r2, sl
 8006246:	465b      	mov	r3, fp
 8006248:	4604      	mov	r4, r0
 800624a:	460d      	mov	r5, r1
 800624c:	f7fa fc6e 	bl	8000b2c <__aeabi_dcmplt>
 8006250:	2800      	cmp	r0, #0
 8006252:	d1eb      	bne.n	800622c <getAngleDiff+0x114>
  angle_rad1 = normalizeAngle(angle_rad1);
  angle_rad2 = normalizeAngle(angle_rad2);
  if (fabs(angle_rad1 - angle_rad2) > M_PI) {
 8006254:	ee38 9a68 	vsub.f32	s18, s16, s17
 8006258:	eef0 7ac9 	vabs.f32	s15, s18
 800625c:	ee17 0a90 	vmov	r0, s15
 8006260:	f7fa f99a 	bl	8000598 <__aeabi_f2d>
 8006264:	a312      	add	r3, pc, #72	; (adr r3, 80062b0 <getAngleDiff+0x198>)
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f7fa fc7d 	bl	8000b68 <__aeabi_dcmpgt>
 800626e:	b198      	cbz	r0, 8006298 <getAngleDiff+0x180>
    if (angle_rad1 > angle_rad2) {
 8006270:	eef4 8ac8 	vcmpe.f32	s17, s16
 8006274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8006278:	a30f      	add	r3, pc, #60	; (adr r3, 80062b8 <getAngleDiff+0x1a0>)
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	4630      	mov	r0, r6
 8006280:	4639      	mov	r1, r7
    if (angle_rad1 > angle_rad2) {
 8006282:	d40f      	bmi.n	80062a4 <getAngleDiff+0x18c>
    } else {
      return (angle_rad1 + 2 * M_PI) - angle_rad2;
 8006284:	f7fa f82a 	bl	80002dc <__adddf3>
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	f7fa f824 	bl	80002d8 <__aeabi_dsub>
 8006290:	f7fa fcd2 	bl	8000c38 <__aeabi_d2f>
 8006294:	ee09 0a10 	vmov	s18, r0
    }
  } else {
    return angle_rad1 - angle_rad2;
  }
}
 8006298:	eeb0 0a49 	vmov.f32	s0, s18
 800629c:	ecbd 8b04 	vpop	{d8-d9}
 80062a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return angle_rad1 - (angle_rad2 + 2 * M_PI);
 80062a4:	f7fa f818 	bl	80002d8 <__aeabi_dsub>
 80062a8:	e7ee      	b.n	8006288 <getAngleDiff+0x170>
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w
 80062b0:	54442d18 	.word	0x54442d18
 80062b4:	400921fb 	.word	0x400921fb
 80062b8:	54442d18 	.word	0x54442d18
 80062bc:	401921fb 	.word	0x401921fb
 80062c0:	54442d18 	.word	0x54442d18
 80062c4:	c00921fb 	.word	0xc00921fb

080062c8 <decode_SW>:

uint8_t decode_SW(uint16_t sw_raw_data)
{
  int data;
  sw_raw_data = sw_raw_data & 0xFFFF;
  if (sw_raw_data < 100) {
 80062c8:	2863      	cmp	r0, #99	; 0x63
 80062ca:	d906      	bls.n	80062da <decode_SW+0x12>
    data = 0b00010000;  // C
  } else if (sw_raw_data < 500 && sw_raw_data > 100) {
 80062cc:	f1a0 0365 	sub.w	r3, r0, #101	; 0x65
 80062d0:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80062d4:	d803      	bhi.n	80062de <decode_SW+0x16>
 80062d6:	2002      	movs	r0, #2
 80062d8:	4770      	bx	lr
 80062da:	2010      	movs	r0, #16
 80062dc:	4770      	bx	lr
    data = 0b00000010;  // B
  } else if (sw_raw_data < 2000 && sw_raw_data > 500) {
 80062de:	f46f 72fa 	mvn.w	r2, #500	; 0x1f4
 80062e2:	1883      	adds	r3, r0, r2
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f240 52da 	movw	r2, #1498	; 0x5da
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d910      	bls.n	8006310 <decode_SW+0x48>
    data = 0b00000100;  // R
  } else if (sw_raw_data < 3000 && sw_raw_data > 2000) {
 80062ee:	f46f 63fa 	mvn.w	r3, #2000	; 0x7d0
 80062f2:	18c3      	adds	r3, r0, r3
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f240 32e6 	movw	r2, #998	; 0x3e6
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d90a      	bls.n	8006314 <decode_SW+0x4c>
    data = 0b00000001;  // F
  } else if (sw_raw_data < 4000 && sw_raw_data > 3000) {
 80062fe:	f6a0 30b9 	subw	r0, r0, #3001	; 0xbb9
 8006302:	b280      	uxth	r0, r0
 8006304:	4290      	cmp	r0, r2
 8006306:	bf8c      	ite	hi
 8006308:	2000      	movhi	r0, #0
 800630a:	2001      	movls	r0, #1
    data = 0b00001000;  // L
  } else {
    data = 0b00000000;
  }
  return data;
 800630c:	00c0      	lsls	r0, r0, #3
 800630e:	4770      	bx	lr
 8006310:	2004      	movs	r0, #4
 8006312:	4770      	bx	lr
 8006314:	2001      	movs	r0, #1
}
 8006316:	4770      	bx	lr

08006318 <two_to_float>:

float two_to_float(uint8_t data[2]) { return (float)((data[0] << 8 | data[1]) - 32767.0) / 32767.0; }
 8006318:	b508      	push	{r3, lr}
 800631a:	8800      	ldrh	r0, [r0, #0]
 800631c:	ba40      	rev16	r0, r0
 800631e:	b280      	uxth	r0, r0
 8006320:	f7fa f928 	bl	8000574 <__aeabi_i2d>
 8006324:	a30a      	add	r3, pc, #40	; (adr r3, 8006350 <two_to_float+0x38>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7f9 ffd5 	bl	80002d8 <__aeabi_dsub>
 800632e:	f7fa fc83 	bl	8000c38 <__aeabi_d2f>
 8006332:	f7fa f931 	bl	8000598 <__aeabi_f2d>
 8006336:	a308      	add	r3, pc, #32	; (adr r3, 8006358 <two_to_float+0x40>)
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7fa f984 	bl	8000648 <__aeabi_dmul>
 8006340:	f7fa fc7a 	bl	8000c38 <__aeabi_d2f>
 8006344:	ee00 0a10 	vmov	s0, r0
 8006348:	bd08      	pop	{r3, pc}
 800634a:	bf00      	nop
 800634c:	f3af 8000 	nop.w
 8006350:	00000000 	.word	0x00000000
 8006354:	40dfffc0 	.word	0x40dfffc0
 8006358:	00400080 	.word	0x00400080
 800635c:	3f000020 	.word	0x3f000020

08006360 <two_to_int>:
float two_to_int(uint8_t data[2]) { return ((data[0] << 8 | data[1]) - 32767.0); }
 8006360:	b508      	push	{r3, lr}
 8006362:	8800      	ldrh	r0, [r0, #0]
 8006364:	ba40      	rev16	r0, r0
 8006366:	b280      	uxth	r0, r0
 8006368:	f7fa f904 	bl	8000574 <__aeabi_i2d>
 800636c:	a304      	add	r3, pc, #16	; (adr r3, 8006380 <two_to_int+0x20>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7f9 ffb1 	bl	80002d8 <__aeabi_dsub>
 8006376:	f7fa fc5f 	bl	8000c38 <__aeabi_d2f>
 800637a:	ee00 0a10 	vmov	s0, r0
 800637e:	bd08      	pop	{r3, pc}
 8006380:	00000000 	.word	0x00000000
 8006384:	40dfffc0 	.word	0x40dfffc0

08006388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006388:	480d      	ldr	r0, [pc, #52]	; (80063c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800638a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800638c:	480d      	ldr	r0, [pc, #52]	; (80063c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800638e:	490e      	ldr	r1, [pc, #56]	; (80063c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006390:	4a0e      	ldr	r2, [pc, #56]	; (80063cc <LoopForever+0xe>)
  movs r3, #0
 8006392:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006394:	e002      	b.n	800639c <LoopCopyDataInit>

08006396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800639a:	3304      	adds	r3, #4

0800639c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800639c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800639e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80063a0:	d3f9      	bcc.n	8006396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80063a2:	4a0b      	ldr	r2, [pc, #44]	; (80063d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80063a4:	4c0b      	ldr	r4, [pc, #44]	; (80063d4 <LoopForever+0x16>)
  movs r3, #0
 80063a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80063a8:	e001      	b.n	80063ae <LoopFillZerobss>

080063aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80063aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80063ac:	3204      	adds	r2, #4

080063ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80063ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80063b0:	d3fb      	bcc.n	80063aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80063b2:	f7ff fa21 	bl	80057f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063b6:	f005 fde7 	bl	800bf88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80063ba:	f7fd fdfd 	bl	8003fb8 <main>

080063be <LoopForever>:

LoopForever:
    b LoopForever
 80063be:	e7fe      	b.n	80063be <LoopForever>
  ldr   r0, =_estack
 80063c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063c8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80063cc:	08010328 	.word	0x08010328
  ldr r2, =_sbss
 80063d0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80063d4:	20001114 	.word	0x20001114

080063d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80063d8:	e7fe      	b.n	80063d8 <ADC1_2_IRQHandler>
	...

080063dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <HAL_InitTick+0x40>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	b90b      	cbnz	r3, 80063e8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80063e4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80063e8:	490d      	ldr	r1, [pc, #52]	; (8006420 <HAL_InitTick+0x44>)
 80063ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063ee:	4605      	mov	r5, r0
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	6808      	ldr	r0, [r1, #0]
 80063f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80063fa:	f000 fe19 	bl	8007030 <HAL_SYSTICK_Config>
 80063fe:	4604      	mov	r4, r0
 8006400:	2800      	cmp	r0, #0
 8006402:	d1ef      	bne.n	80063e4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006404:	2d0f      	cmp	r5, #15
 8006406:	d8ed      	bhi.n	80063e4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006408:	4602      	mov	r2, r0
 800640a:	4629      	mov	r1, r5
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	f000 fdc2 	bl	8006f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_InitTick+0x48>)
 8006416:	4620      	mov	r0, r4
 8006418:	601d      	str	r5, [r3, #0]
}
 800641a:	bd38      	pop	{r3, r4, r5, pc}
 800641c:	2000000c 	.word	0x2000000c
 8006420:	20000008 	.word	0x20000008
 8006424:	20000010 	.word	0x20000010

08006428 <HAL_Init>:
{
 8006428:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800642a:	2003      	movs	r0, #3
 800642c:	f000 fda2 	bl	8006f74 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006430:	2000      	movs	r0, #0
 8006432:	f7ff ffd3 	bl	80063dc <HAL_InitTick>
 8006436:	b110      	cbz	r0, 800643e <HAL_Init+0x16>
    status = HAL_ERROR;
 8006438:	2401      	movs	r4, #1
}
 800643a:	4620      	mov	r0, r4
 800643c:	bd10      	pop	{r4, pc}
 800643e:	4604      	mov	r4, r0
    HAL_MspInit();
 8006440:	f7ff f920 	bl	8005684 <HAL_MspInit>
}
 8006444:	4620      	mov	r0, r4
 8006446:	bd10      	pop	{r4, pc}

08006448 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006448:	4a03      	ldr	r2, [pc, #12]	; (8006458 <HAL_IncTick+0x10>)
 800644a:	4904      	ldr	r1, [pc, #16]	; (800645c <HAL_IncTick+0x14>)
 800644c:	6813      	ldr	r3, [r2, #0]
 800644e:	6809      	ldr	r1, [r1, #0]
 8006450:	440b      	add	r3, r1
 8006452:	6013      	str	r3, [r2, #0]
}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20000fc0 	.word	0x20000fc0
 800645c:	2000000c 	.word	0x2000000c

08006460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006464:	f7fc fbb0 	bl	8002bc8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006468:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800646a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800646c:	d002      	beq.n	8006474 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800646e:	4b04      	ldr	r3, [pc, #16]	; (8006480 <HAL_Delay+0x20>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006474:	f7fc fba8 	bl	8002bc8 <HAL_GetTick>
 8006478:	1b43      	subs	r3, r0, r5
 800647a:	42a3      	cmp	r3, r4
 800647c:	d3fa      	bcc.n	8006474 <HAL_Delay+0x14>
  {
  }
}
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	2000000c 	.word	0x2000000c

08006484 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006484:	b530      	push	{r4, r5, lr}
 8006486:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006488:	2300      	movs	r3, #0
 800648a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800648c:	2800      	cmp	r0, #0
 800648e:	f000 80d4 	beq.w	800663a <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006492:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8006494:	4604      	mov	r4, r0
 8006496:	2d00      	cmp	r5, #0
 8006498:	f000 809d 	beq.w	80065d6 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800649c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800649e:	6893      	ldr	r3, [r2, #8]
 80064a0:	009d      	lsls	r5, r3, #2
 80064a2:	d505      	bpl.n	80064b0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80064a4:	6893      	ldr	r3, [r2, #8]
 80064a6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80064aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064ae:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80064b0:	6893      	ldr	r3, [r2, #8]
 80064b2:	00d8      	lsls	r0, r3, #3
 80064b4:	d419      	bmi.n	80064ea <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064b6:	4b7e      	ldr	r3, [pc, #504]	; (80066b0 <HAL_ADC_Init+0x22c>)
 80064b8:	487e      	ldr	r0, [pc, #504]	; (80066b4 <HAL_ADC_Init+0x230>)
 80064ba:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80064bc:	6891      	ldr	r1, [r2, #8]
 80064be:	099b      	lsrs	r3, r3, #6
 80064c0:	fba0 0303 	umull	r0, r3, r0, r3
 80064c4:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80064c8:	099b      	lsrs	r3, r3, #6
 80064ca:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80064ce:	3301      	adds	r3, #1
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80064d6:	6091      	str	r1, [r2, #8]
 80064d8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80064da:	9b01      	ldr	r3, [sp, #4]
 80064dc:	b12b      	cbz	r3, 80064ea <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80064de:	9b01      	ldr	r3, [sp, #4]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f9      	bne.n	80064de <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80064ea:	6893      	ldr	r3, [r2, #8]
 80064ec:	00d9      	lsls	r1, r3, #3
 80064ee:	d464      	bmi.n	80065ba <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80064f2:	f043 0310 	orr.w	r3, r3, #16
 80064f6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064f8:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80064fa:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064fc:	4303      	orrs	r3, r0
 80064fe:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006500:	6893      	ldr	r3, [r2, #8]
 8006502:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006506:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006508:	d15e      	bne.n	80065c8 <HAL_ADC_Init+0x144>
 800650a:	06db      	lsls	r3, r3, #27
 800650c:	d45c      	bmi.n	80065c8 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800650e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006510:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006514:	f043 0302 	orr.w	r3, r3, #2
 8006518:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800651a:	6893      	ldr	r3, [r2, #8]
 800651c:	07dd      	lsls	r5, r3, #31
 800651e:	d419      	bmi.n	8006554 <HAL_ADC_Init+0xd0>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006520:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006524:	4b64      	ldr	r3, [pc, #400]	; (80066b8 <HAL_ADC_Init+0x234>)
 8006526:	f000 80a0 	beq.w	800666a <HAL_ADC_Init+0x1e6>
 800652a:	429a      	cmp	r2, r3
 800652c:	f000 80a5 	beq.w	800667a <HAL_ADC_Init+0x1f6>
 8006530:	4962      	ldr	r1, [pc, #392]	; (80066bc <HAL_ADC_Init+0x238>)
 8006532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006536:	6889      	ldr	r1, [r1, #8]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	430b      	orrs	r3, r1
 800653c:	4960      	ldr	r1, [pc, #384]	; (80066c0 <HAL_ADC_Init+0x23c>)
 800653e:	6889      	ldr	r1, [r1, #8]
 8006540:	430b      	orrs	r3, r1
 8006542:	07d9      	lsls	r1, r3, #31
 8006544:	d406      	bmi.n	8006554 <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006546:	495f      	ldr	r1, [pc, #380]	; (80066c4 <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006548:	688b      	ldr	r3, [r1, #8]
 800654a:	6865      	ldr	r5, [r4, #4]
 800654c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8006550:	432b      	orrs	r3, r5
 8006552:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8006554:	68e5      	ldr	r5, [r4, #12]
 8006556:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006558:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800655c:	432b      	orrs	r3, r5
 800655e:	68a5      	ldr	r5, [r4, #8]
 8006560:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006562:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006564:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8006566:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800656a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800656e:	d05f      	beq.n	8006630 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006570:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006572:	b121      	cbz	r1, 800657e <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8006574:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006576:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800657a:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800657c:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800657e:	68d5      	ldr	r5, [r2, #12]
 8006580:	4951      	ldr	r1, [pc, #324]	; (80066c8 <HAL_ADC_Init+0x244>)
 8006582:	4029      	ands	r1, r5
 8006584:	4319      	orrs	r1, r3
 8006586:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006588:	6913      	ldr	r3, [r2, #16]
 800658a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800658c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006590:	430b      	orrs	r3, r1
 8006592:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006594:	6893      	ldr	r3, [r2, #8]
 8006596:	075b      	lsls	r3, r3, #29
 8006598:	d523      	bpl.n	80065e2 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800659a:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800659c:	6963      	ldr	r3, [r4, #20]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d04e      	beq.n	8006640 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80065a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80065a4:	f023 030f 	bic.w	r3, r3, #15
 80065a8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80065aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80065ac:	f023 0303 	bic.w	r3, r3, #3
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80065b6:	b003      	add	sp, #12
 80065b8:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80065ba:	6893      	ldr	r3, [r2, #8]
 80065bc:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065c0:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80065c6:	d0a0      	beq.n	800650a <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80065ca:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065cc:	f043 0310 	orr.w	r3, r3, #16
 80065d0:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80065d2:	b003      	add	sp, #12
 80065d4:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80065d6:	f7fa ff5b 	bl	8001490 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80065da:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80065dc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80065e0:	e75c      	b.n	800649c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80065e2:	6893      	ldr	r3, [r2, #8]
 80065e4:	071d      	lsls	r5, r3, #28
 80065e6:	d4d9      	bmi.n	800659c <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065e8:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80065ea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065ee:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065f0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80065f4:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065f6:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80065fa:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80065fe:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8006600:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006602:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006604:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8006606:	bb19      	cbnz	r1, 8006650 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800660e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8006612:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006616:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800661a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800661e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006622:	2b01      	cmp	r3, #1
 8006624:	d032      	beq.n	800668c <HAL_ADC_Init+0x208>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006626:	6913      	ldr	r3, [r2, #16]
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	6113      	str	r3, [r2, #16]
 800662e:	e7b5      	b.n	800659c <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006630:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006632:	3901      	subs	r1, #1
 8006634:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8006638:	e79a      	b.n	8006570 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 800663a:	2001      	movs	r0, #1
}
 800663c:	b003      	add	sp, #12
 800663e:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006640:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006642:	6a23      	ldr	r3, [r4, #32]
 8006644:	f021 010f 	bic.w	r1, r1, #15
 8006648:	3b01      	subs	r3, #1
 800664a:	430b      	orrs	r3, r1
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	e7ac      	b.n	80065aa <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006654:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006656:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800665a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800665e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006662:	430b      	orrs	r3, r1
 8006664:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006668:	e7d9      	b.n	800661e <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800666a:	6891      	ldr	r1, [r2, #8]
 800666c:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800666e:	430b      	orrs	r3, r1
 8006670:	07db      	lsls	r3, r3, #31
 8006672:	f53f af6f 	bmi.w	8006554 <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006676:	4915      	ldr	r1, [pc, #84]	; (80066cc <HAL_ADC_Init+0x248>)
 8006678:	e766      	b.n	8006548 <HAL_ADC_Init+0xc4>
 800667a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006682:	430b      	orrs	r3, r1
 8006684:	07d9      	lsls	r1, r3, #31
 8006686:	f53f af65 	bmi.w	8006554 <HAL_ADC_Init+0xd0>
 800668a:	e7f4      	b.n	8006676 <HAL_ADC_Init+0x1f2>
        MODIFY_REG(hadc->Instance->CFGR2,
 800668c:	6911      	ldr	r1, [r2, #16]
 800668e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006690:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8006692:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8006696:	f021 0104 	bic.w	r1, r1, #4
 800669a:	432b      	orrs	r3, r5
 800669c:	430b      	orrs	r3, r1
 800669e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80066a4:	430b      	orrs	r3, r1
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	6113      	str	r3, [r2, #16]
 80066ac:	e776      	b.n	800659c <HAL_ADC_Init+0x118>
 80066ae:	bf00      	nop
 80066b0:	20000008 	.word	0x20000008
 80066b4:	053e2d63 	.word	0x053e2d63
 80066b8:	50000100 	.word	0x50000100
 80066bc:	50000400 	.word	0x50000400
 80066c0:	50000600 	.word	0x50000600
 80066c4:	50000700 	.word	0x50000700
 80066c8:	fff04007 	.word	0xfff04007
 80066cc:	50000300 	.word	0x50000300

080066d0 <HAL_ADC_ConvCpltCallback>:
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop

080066d4 <HAL_ADC_ConvHalfCpltCallback>:
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop

080066d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80066d8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066da:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80066dc:	f7ff fffa 	bl	80066d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066e0:	bd08      	pop	{r3, pc}
 80066e2:	bf00      	nop

080066e4 <HAL_ADC_ErrorCallback>:
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop

080066e8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80066ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066ec:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80066f0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80066f4:	d11d      	bne.n	8006732 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80066f6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fc:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80066fe:	680a      	ldr	r2, [r1, #0]
 8006700:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006704:	68ca      	ldr	r2, [r1, #12]
 8006706:	d01b      	beq.n	8006740 <ADC_DMAConvCplt+0x58>
 8006708:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800670c:	d10d      	bne.n	800672a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800670e:	68ca      	ldr	r2, [r1, #12]
 8006710:	0494      	lsls	r4, r2, #18
 8006712:	d40a      	bmi.n	800672a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006714:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006716:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800671c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800671e:	04d1      	lsls	r1, r2, #19
 8006720:	d403      	bmi.n	800672a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 800672a:	4618      	mov	r0, r3
 800672c:	f7ff ffd0 	bl	80066d0 <HAL_ADC_ConvCpltCallback>
}
 8006730:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006732:	06d2      	lsls	r2, r2, #27
 8006734:	d40a      	bmi.n	800674c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006740:	0790      	lsls	r0, r2, #30
 8006742:	d5e7      	bpl.n	8006714 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff ffc3 	bl	80066d0 <HAL_ADC_ConvCpltCallback>
 800674a:	e7f1      	b.n	8006730 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff ffc9 	bl	80066e4 <HAL_ADC_ErrorCallback>
}
 8006752:	bd10      	pop	{r4, pc}

08006754 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006754:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8006756:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006758:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800675a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800675e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006760:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006762:	f043 0304 	orr.w	r3, r3, #4
 8006766:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006768:	f7ff ffbc 	bl	80066e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800676c:	bd08      	pop	{r3, pc}
 800676e:	bf00      	nop

08006770 <HAL_ADC_ConfigChannel>:
{
 8006770:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8006772:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8006776:	b083      	sub	sp, #12
 8006778:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800677a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800677c:	f04f 0000 	mov.w	r0, #0
 8006780:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8006782:	f000 8174 	beq.w	8006a6e <HAL_ADC_ConfigChannel+0x2fe>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006786:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8006788:	2001      	movs	r0, #1
 800678a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800678e:	6894      	ldr	r4, [r2, #8]
 8006790:	0766      	lsls	r6, r4, #29
 8006792:	d45e      	bmi.n	8006852 <HAL_ADC_ConfigChannel+0xe2>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006794:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006796:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 800679a:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800679e:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80067a2:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80067a4:	f102 0430 	add.w	r4, r2, #48	; 0x30
  MODIFY_REG(*preg,
 80067a8:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80067ac:	f854 500e 	ldr.w	r5, [r4, lr]
 80067b0:	261f      	movs	r6, #31
 80067b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80067b6:	fa06 fc0c 	lsl.w	ip, r6, ip
 80067ba:	ea25 0c0c 	bic.w	ip, r5, ip
 80067be:	ea40 000c 	orr.w	r0, r0, ip
 80067c2:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067c6:	6890      	ldr	r0, [r2, #8]
 80067c8:	0745      	lsls	r5, r0, #29
 80067ca:	d572      	bpl.n	80068b2 <HAL_ADC_ConfigChannel+0x142>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067cc:	6890      	ldr	r0, [r2, #8]
 80067ce:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067d0:	6894      	ldr	r4, [r2, #8]
 80067d2:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80067d6:	4604      	mov	r4, r0
 80067d8:	d10c      	bne.n	80067f4 <HAL_ADC_ConfigChannel+0x84>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80067da:	4dbd      	ldr	r5, [pc, #756]	; (8006ad0 <HAL_ADC_ConfigChannel+0x360>)
 80067dc:	68ce      	ldr	r6, [r1, #12]
 80067de:	42ae      	cmp	r6, r5
 80067e0:	f000 80eb 	beq.w	80069ba <HAL_ADC_ConfigChannel+0x24a>
    CLEAR_BIT(ADCx->DIFSEL,
 80067e4:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80067e8:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80067ec:	ea21 0100 	bic.w	r1, r1, r0
 80067f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80067f4:	49b7      	ldr	r1, [pc, #732]	; (8006ad4 <HAL_ADC_ConfigChannel+0x364>)
 80067f6:	420c      	tst	r4, r1
 80067f8:	d059      	beq.n	80068ae <HAL_ADC_ConfigChannel+0x13e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067fa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80067fe:	f000 8134 	beq.w	8006a6a <HAL_ADC_ConfigChannel+0x2fa>
 8006802:	4db5      	ldr	r5, [pc, #724]	; (8006ad8 <HAL_ADC_ConfigChannel+0x368>)
 8006804:	49b5      	ldr	r1, [pc, #724]	; (8006adc <HAL_ADC_ConfigChannel+0x36c>)
 8006806:	48b6      	ldr	r0, [pc, #728]	; (8006ae0 <HAL_ADC_ConfigChannel+0x370>)
 8006808:	42aa      	cmp	r2, r5
 800680a:	bf18      	it	ne
 800680c:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800680e:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006810:	49b4      	ldr	r1, [pc, #720]	; (8006ae4 <HAL_ADC_ConfigChannel+0x374>)
 8006812:	428c      	cmp	r4, r1
 8006814:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8006818:	d024      	beq.n	8006864 <HAL_ADC_ConfigChannel+0xf4>
 800681a:	49b3      	ldr	r1, [pc, #716]	; (8006ae8 <HAL_ADC_ConfigChannel+0x378>)
 800681c:	428c      	cmp	r4, r1
 800681e:	d021      	beq.n	8006864 <HAL_ADC_ConfigChannel+0xf4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006820:	49b2      	ldr	r1, [pc, #712]	; (8006aec <HAL_ADC_ConfigChannel+0x37c>)
 8006822:	428c      	cmp	r4, r1
 8006824:	f040 8139 	bne.w	8006a9a <HAL_ADC_ConfigChannel+0x32a>
 8006828:	01c4      	lsls	r4, r0, #7
 800682a:	d440      	bmi.n	80068ae <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800682c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006830:	f000 8215 	beq.w	8006c5e <HAL_ADC_ConfigChannel+0x4ee>
 8006834:	4ca8      	ldr	r4, [pc, #672]	; (8006ad8 <HAL_ADC_ConfigChannel+0x368>)
 8006836:	49a9      	ldr	r1, [pc, #676]	; (8006adc <HAL_ADC_ConfigChannel+0x36c>)
 8006838:	48a9      	ldr	r0, [pc, #676]	; (8006ae0 <HAL_ADC_ConfigChannel+0x370>)
 800683a:	42a2      	cmp	r2, r4
 800683c:	bf18      	it	ne
 800683e:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006840:	688a      	ldr	r2, [r1, #8]
 8006842:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006846:	432a      	orrs	r2, r5
 8006848:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800684c:	2000      	movs	r0, #0
 800684e:	608a      	str	r2, [r1, #8]
}
 8006850:	e003      	b.n	800685a <HAL_ADC_ConfigChannel+0xea>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006852:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006854:	f042 0220 	orr.w	r2, r2, #32
 8006858:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8006860:	b003      	add	sp, #12
 8006862:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006864:	0201      	lsls	r1, r0, #8
 8006866:	d422      	bmi.n	80068ae <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006868:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800686c:	f000 8113 	beq.w	8006a96 <HAL_ADC_ConfigChannel+0x326>
 8006870:	499f      	ldr	r1, [pc, #636]	; (8006af0 <HAL_ADC_ConfigChannel+0x380>)
 8006872:	428a      	cmp	r2, r1
 8006874:	d11b      	bne.n	80068ae <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006876:	489a      	ldr	r0, [pc, #616]	; (8006ae0 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006878:	4a9e      	ldr	r2, [pc, #632]	; (8006af4 <HAL_ADC_ConfigChannel+0x384>)
 800687a:	4c9f      	ldr	r4, [pc, #636]	; (8006af8 <HAL_ADC_ConfigChannel+0x388>)
 800687c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800687e:	6881      	ldr	r1, [r0, #8]
 8006880:	0992      	lsrs	r2, r2, #6
 8006882:	fba4 4202 	umull	r4, r2, r4, r2
 8006886:	0992      	lsrs	r2, r2, #6
 8006888:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800688c:	3201      	adds	r2, #1
 800688e:	4329      	orrs	r1, r5
 8006890:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006894:	0092      	lsls	r2, r2, #2
 8006896:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800689a:	6081      	str	r1, [r0, #8]
 800689c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800689e:	9a01      	ldr	r2, [sp, #4]
 80068a0:	b12a      	cbz	r2, 80068ae <HAL_ADC_ConfigChannel+0x13e>
            wait_loop_index--;
 80068a2:	9a01      	ldr	r2, [sp, #4]
 80068a4:	3a01      	subs	r2, #1
 80068a6:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80068a8:	9a01      	ldr	r2, [sp, #4]
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	d1f9      	bne.n	80068a2 <HAL_ADC_ConfigChannel+0x132>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068ae:	2000      	movs	r0, #0
 80068b0:	e7d3      	b.n	800685a <HAL_ADC_ConfigChannel+0xea>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80068b2:	6890      	ldr	r0, [r2, #8]
 80068b4:	0700      	lsls	r0, r0, #28
 80068b6:	d47e      	bmi.n	80069b6 <HAL_ADC_ConfigChannel+0x246>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80068b8:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80068ba:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80068bc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80068c0:	f000 8120 	beq.w	8006b04 <HAL_ADC_ConfigChannel+0x394>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80068c4:	0dee      	lsrs	r6, r5, #23
 80068c6:	f102 0c14 	add.w	ip, r2, #20
 80068ca:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80068ce:	f3c5 5504 	ubfx	r5, r5, #20, #5
 80068d2:	f85c 4006 	ldr.w	r4, [ip, r6]
 80068d6:	2707      	movs	r7, #7
 80068d8:	40a8      	lsls	r0, r5
 80068da:	fa07 f505 	lsl.w	r5, r7, r5
 80068de:	ea24 0405 	bic.w	r4, r4, r5
 80068e2:	4320      	orrs	r0, r4
 80068e4:	f84c 0006 	str.w	r0, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80068e8:	6950      	ldr	r0, [r2, #20]
 80068ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80068ee:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80068f0:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80068f4:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80068f6:	68d0      	ldr	r0, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80068f8:	d02d      	beq.n	8006956 <HAL_ADC_ConfigChannel+0x1e6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068fa:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80068fe:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8006902:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8006904:	f854 c025 	ldr.w	ip, [r4, r5, lsl #2]
 8006908:	4f7c      	ldr	r7, [pc, #496]	; (8006afc <HAL_ADC_ConfigChannel+0x38c>)
 800690a:	4086      	lsls	r6, r0
 800690c:	6808      	ldr	r0, [r1, #0]
 800690e:	ea0c 0707 	and.w	r7, ip, r7
 8006912:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8006916:	4338      	orrs	r0, r7
 8006918:	4330      	orrs	r0, r6
 800691a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800691e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006922:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8006924:	698e      	ldr	r6, [r1, #24]
 8006926:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800692a:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800692e:	4330      	orrs	r0, r6
 8006930:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006934:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006936:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8006938:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800693c:	f1a5 0501 	sub.w	r5, r5, #1
 8006940:	fab5 f585 	clz	r5, r5
 8006944:	096d      	lsrs	r5, r5, #5
 8006946:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 800694a:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 800694e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8006952:	6808      	ldr	r0, [r1, #0]
}
 8006954:	e73c      	b.n	80067d0 <HAL_ADC_ConfigChannel+0x60>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006956:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006958:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800695a:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800695c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006960:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006964:	2d00      	cmp	r5, #0
 8006966:	f040 80df 	bne.w	8006b28 <HAL_ADC_ConfigChannel+0x3b8>
 800696a:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800696e:	42ac      	cmp	r4, r5
 8006970:	f000 813d 	beq.w	8006bee <HAL_ADC_ConfigChannel+0x47e>
 8006974:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8006976:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006978:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800697c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006980:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8006984:	42ae      	cmp	r6, r5
 8006986:	f000 8158 	beq.w	8006c3a <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800698a:	68a6      	ldr	r6, [r4, #8]
 800698c:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800698e:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006992:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006996:	42ae      	cmp	r6, r5
 8006998:	f000 813d 	beq.w	8006c16 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800699c:	68e6      	ldr	r6, [r4, #12]
 800699e:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069a0:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069a4:	f3c6 6484 	ubfx	r4, r6, #26, #5
 80069a8:	42a5      	cmp	r5, r4
 80069aa:	f47f af11 	bne.w	80067d0 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 80069ae:	6838      	ldr	r0, [r7, #0]
 80069b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80069b4:	6038      	str	r0, [r7, #0]
 80069b6:	6808      	ldr	r0, [r1, #0]
}
 80069b8:	e70a      	b.n	80067d0 <HAL_ADC_ConfigChannel+0x60>
    SET_BIT(ADCx->DIFSEL,
 80069ba:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 80069be:	f3c0 0512 	ubfx	r5, r0, #0, #19
 80069c2:	432c      	orrs	r4, r5
 80069c4:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	d053      	beq.n	8006a74 <HAL_ADC_ConfigChannel+0x304>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069cc:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80069d0:	2c00      	cmp	r4, #0
 80069d2:	f000 80e8 	beq.w	8006ba6 <HAL_ADC_ConfigChannel+0x436>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80069d6:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069da:	3401      	adds	r4, #1
 80069dc:	f004 041f 	and.w	r4, r4, #31
 80069e0:	2c09      	cmp	r4, #9
 80069e2:	f240 80e0 	bls.w	8006ba6 <HAL_ADC_ConfigChannel+0x436>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e6:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80069ea:	2c00      	cmp	r4, #0
 80069ec:	f000 813d 	beq.w	8006c6a <HAL_ADC_ConfigChannel+0x4fa>
  return __builtin_clz(value);
 80069f0:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80069f4:	3401      	adds	r4, #1
 80069f6:	06a4      	lsls	r4, r4, #26
 80069f8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006a00:	2d00      	cmp	r5, #0
 8006a02:	f000 8130 	beq.w	8006c66 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006a06:	fab5 f585 	clz	r5, r5
 8006a0a:	3501      	adds	r5, #1
 8006a0c:	f005 051f 	and.w	r5, r5, #31
 8006a10:	2601      	movs	r6, #1
 8006a12:	fa06 f505 	lsl.w	r5, r6, r5
 8006a16:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a18:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f000 8120 	beq.w	8006c62 <HAL_ADC_ConfigChannel+0x4f2>
  return __builtin_clz(value);
 8006a22:	fab0 f080 	clz	r0, r0
 8006a26:	1c45      	adds	r5, r0, #1
 8006a28:	f005 051f 	and.w	r5, r5, #31
 8006a2c:	2003      	movs	r0, #3
 8006a2e:	f06f 061d 	mvn.w	r6, #29
 8006a32:	fb10 6005 	smlabb	r0, r0, r5, r6
 8006a36:	0500      	lsls	r0, r0, #20
 8006a38:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a3c:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006a3e:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8006a40:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006a42:	f005 0504 	and.w	r5, r5, #4
 8006a46:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006a4a:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8006a4e:	fa04 fc00 	lsl.w	ip, r4, r0
 8006a52:	f04f 0e07 	mov.w	lr, #7
 8006a56:	5974      	ldr	r4, [r6, r5]
 8006a58:	fa0e f000 	lsl.w	r0, lr, r0
 8006a5c:	ea24 0000 	bic.w	r0, r4, r0
 8006a60:	ea40 000c 	orr.w	r0, r0, ip
 8006a64:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006a66:	680c      	ldr	r4, [r1, #0]
}
 8006a68:	e6c4      	b.n	80067f4 <HAL_ADC_ConfigChannel+0x84>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a6a:	491c      	ldr	r1, [pc, #112]	; (8006adc <HAL_ADC_ConfigChannel+0x36c>)
 8006a6c:	e6cf      	b.n	800680e <HAL_ADC_ConfigChannel+0x9e>
  __HAL_LOCK(hadc);
 8006a6e:	2002      	movs	r0, #2
}
 8006a70:	b003      	add	sp, #12
 8006a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a74:	0e80      	lsrs	r0, r0, #26
 8006a76:	3001      	adds	r0, #1
 8006a78:	f000 051f 	and.w	r5, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a7c:	2d09      	cmp	r5, #9
 8006a7e:	f200 8084 	bhi.w	8006b8a <HAL_ADC_ConfigChannel+0x41a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a82:	0684      	lsls	r4, r0, #26
 8006a84:	2001      	movs	r0, #1
 8006a86:	40a8      	lsls	r0, r5
 8006a88:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8006a8c:	4304      	orrs	r4, r0
 8006a8e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8006a92:	0500      	lsls	r0, r0, #20
 8006a94:	e7d2      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x2cc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a96:	4811      	ldr	r0, [pc, #68]	; (8006adc <HAL_ADC_ConfigChannel+0x36c>)
 8006a98:	e6ee      	b.n	8006878 <HAL_ADC_ConfigChannel+0x108>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006a9a:	4919      	ldr	r1, [pc, #100]	; (8006b00 <HAL_ADC_ConfigChannel+0x390>)
 8006a9c:	428c      	cmp	r4, r1
 8006a9e:	f47f af06 	bne.w	80068ae <HAL_ADC_ConfigChannel+0x13e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006aa2:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8006aa6:	f47f af02 	bne.w	80068ae <HAL_ADC_ConfigChannel+0x13e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8006aaa:	490b      	ldr	r1, [pc, #44]	; (8006ad8 <HAL_ADC_ConfigChannel+0x368>)
 8006aac:	428a      	cmp	r2, r1
 8006aae:	f43f aefe 	beq.w	80068ae <HAL_ADC_ConfigChannel+0x13e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ab2:	4c0b      	ldr	r4, [pc, #44]	; (8006ae0 <HAL_ADC_ConfigChannel+0x370>)
 8006ab4:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8006ab8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006abc:	bf18      	it	ne
 8006abe:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006ac0:	688a      	ldr	r2, [r1, #8]
 8006ac2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8006ac6:	432a      	orrs	r2, r5
 8006ac8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006acc:	608a      	str	r2, [r1, #8]
}
 8006ace:	e6c4      	b.n	800685a <HAL_ADC_ConfigChannel+0xea>
 8006ad0:	407f0000 	.word	0x407f0000
 8006ad4:	80080000 	.word	0x80080000
 8006ad8:	50000100 	.word	0x50000100
 8006adc:	50000300 	.word	0x50000300
 8006ae0:	50000700 	.word	0x50000700
 8006ae4:	c3210000 	.word	0xc3210000
 8006ae8:	90c00010 	.word	0x90c00010
 8006aec:	c7520000 	.word	0xc7520000
 8006af0:	50000600 	.word	0x50000600
 8006af4:	20000008 	.word	0x20000008
 8006af8:	053e2d63 	.word	0x053e2d63
 8006afc:	03fff000 	.word	0x03fff000
 8006b00:	cb840000 	.word	0xcb840000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b04:	0de8      	lsrs	r0, r5, #23
 8006b06:	f000 0004 	and.w	r0, r0, #4
 8006b0a:	f102 0414 	add.w	r4, r2, #20
  MODIFY_REG(*preg,
 8006b0e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8006b12:	2607      	movs	r6, #7
 8006b14:	40ae      	lsls	r6, r5
 8006b16:	5825      	ldr	r5, [r4, r0]
 8006b18:	ea25 0506 	bic.w	r5, r5, r6
 8006b1c:	5025      	str	r5, [r4, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006b1e:	6950      	ldr	r0, [r2, #20]
 8006b20:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006b24:	6150      	str	r0, [r2, #20]
}
 8006b26:	e6e3      	b.n	80068f0 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b28:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006b2c:	b11d      	cbz	r5, 8006b36 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8006b2e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006b32:	42ac      	cmp	r4, r5
 8006b34:	d05b      	beq.n	8006bee <HAL_ADC_ConfigChannel+0x47e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b36:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8006b38:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b3a:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b3e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006b42:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b46:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006b4a:	b11d      	cbz	r5, 8006b54 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8006b4c:	fab5 f585 	clz	r5, r5
 8006b50:	42ae      	cmp	r6, r5
 8006b52:	d072      	beq.n	8006c3a <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b54:	68a5      	ldr	r5, [r4, #8]
 8006b56:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b58:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006b5c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b60:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006b64:	b11d      	cbz	r5, 8006b6e <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 8006b66:	fab5 f585 	clz	r5, r5
 8006b6a:	42ae      	cmp	r6, r5
 8006b6c:	d053      	beq.n	8006c16 <HAL_ADC_ConfigChannel+0x4a6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b6e:	68e5      	ldr	r5, [r4, #12]
 8006b70:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b72:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006b76:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b7a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006b7e:	2d00      	cmp	r5, #0
 8006b80:	f43f ae26 	beq.w	80067d0 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 8006b84:	fab5 f585 	clz	r5, r5
 8006b88:	e70e      	b.n	80069a8 <HAL_ADC_ConfigChannel+0x238>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006b8a:	0684      	lsls	r4, r0, #26
 8006b8c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8006b90:	381e      	subs	r0, #30
 8006b92:	2601      	movs	r6, #1
 8006b94:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8006b98:	0500      	lsls	r0, r0, #20
 8006b9a:	fa06 f505 	lsl.w	r5, r6, r5
 8006b9e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8006ba2:	432c      	orrs	r4, r5
 8006ba4:	e74a      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x2cc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba6:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006baa:	2c00      	cmp	r4, #0
 8006bac:	d065      	beq.n	8006c7a <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8006bae:	fab4 f484 	clz	r4, r4
 8006bb2:	3401      	adds	r4, #1
 8006bb4:	06a4      	lsls	r4, r4, #26
 8006bb6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bba:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	d059      	beq.n	8006c76 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8006bc2:	fab5 f585 	clz	r5, r5
 8006bc6:	3501      	adds	r5, #1
 8006bc8:	f005 051f 	and.w	r5, r5, #31
 8006bcc:	2601      	movs	r6, #1
 8006bce:	fa06 f505 	lsl.w	r5, r6, r5
 8006bd2:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd4:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d049      	beq.n	8006c70 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8006bdc:	fab0 f080 	clz	r0, r0
 8006be0:	3001      	adds	r0, #1
 8006be2:	f000 001f 	and.w	r0, r0, #31
 8006be6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006bea:	0500      	lsls	r0, r0, #20
 8006bec:	e726      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x2cc>
  MODIFY_REG(*preg,
 8006bee:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006bf6:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006bfa:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006bfc:	6808      	ldr	r0, [r1, #0]
 8006bfe:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8006c00:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c04:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c08:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c0c:	2d00      	cmp	r5, #0
 8006c0e:	d19a      	bne.n	8006b46 <HAL_ADC_ConfigChannel+0x3d6>
 8006c10:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8006c14:	e6b6      	b.n	8006984 <HAL_ADC_ConfigChannel+0x214>
  MODIFY_REG(*preg,
 8006c16:	6838      	ldr	r0, [r7, #0]
 8006c18:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006c1c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c1e:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c20:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c22:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c26:	68e4      	ldr	r4, [r4, #12]
 8006c28:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c2c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c30:	2d00      	cmp	r5, #0
 8006c32:	d1a2      	bne.n	8006b7a <HAL_ADC_ConfigChannel+0x40a>
 8006c34:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8006c38:	e6b6      	b.n	80069a8 <HAL_ADC_ConfigChannel+0x238>
  MODIFY_REG(*preg,
 8006c3a:	6838      	ldr	r0, [r7, #0]
 8006c3c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006c40:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c42:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	68a6      	ldr	r6, [r4, #8]
 8006c48:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c4c:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c50:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	d183      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x3f0>
 8006c58:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8006c5c:	e69b      	b.n	8006996 <HAL_ADC_ConfigChannel+0x226>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c5e:	4908      	ldr	r1, [pc, #32]	; (8006c80 <HAL_ADC_ConfigChannel+0x510>)
 8006c60:	e5ee      	b.n	8006840 <HAL_ADC_ConfigChannel+0xd0>
 8006c62:	4808      	ldr	r0, [pc, #32]	; (8006c84 <HAL_ADC_ConfigChannel+0x514>)
 8006c64:	e6ea      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x2cc>
 8006c66:	2502      	movs	r5, #2
 8006c68:	e6d5      	b.n	8006a16 <HAL_ADC_ConfigChannel+0x2a6>
 8006c6a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006c6e:	e6c5      	b.n	80069fc <HAL_ADC_ConfigChannel+0x28c>
 8006c70:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8006c74:	e6e2      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x2cc>
 8006c76:	2502      	movs	r5, #2
 8006c78:	e7ab      	b.n	8006bd2 <HAL_ADC_ConfigChannel+0x462>
 8006c7a:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8006c7e:	e79c      	b.n	8006bba <HAL_ADC_ConfigChannel+0x44a>
 8006c80:	50000300 	.word	0x50000300
 8006c84:	fe500000 	.word	0xfe500000

08006c88 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c88:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	07d2      	lsls	r2, r2, #31
 8006c8e:	d501      	bpl.n	8006c94 <ADC_Enable+0xc>
  return HAL_OK;
 8006c90:	2000      	movs	r0, #0
}
 8006c92:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006c94:	6899      	ldr	r1, [r3, #8]
 8006c96:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <ADC_Enable+0x70>)
 8006c98:	4211      	tst	r1, r2
{
 8006c9a:	b570      	push	{r4, r5, r6, lr}
 8006c9c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006c9e:	d008      	beq.n	8006cb2 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ca0:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8006ca2:	f043 0310 	orr.w	r3, r3, #16
 8006ca6:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ca8:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8006caa:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cac:	4303      	orrs	r3, r0
 8006cae:	6633      	str	r3, [r6, #96]	; 0x60
}
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	4d11      	ldr	r5, [pc, #68]	; (8006cfc <ADC_Enable+0x74>)
 8006cb6:	402a      	ands	r2, r5
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
 8006cbc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006cbe:	f7fb ff83 	bl	8002bc8 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cc2:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006cc4:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	07d0      	lsls	r0, r2, #31
 8006cca:	d413      	bmi.n	8006cf4 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	07d1      	lsls	r1, r2, #31
 8006cd0:	d404      	bmi.n	8006cdc <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	402a      	ands	r2, r5
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006cdc:	f7fb ff74 	bl	8002bc8 <HAL_GetTick>
 8006ce0:	1b03      	subs	r3, r0, r4
 8006ce2:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ce4:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ce6:	d9ee      	bls.n	8006cc6 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	07d2      	lsls	r2, r2, #31
 8006cec:	d5d8      	bpl.n	8006ca0 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	07d0      	lsls	r0, r2, #31
 8006cf2:	d5eb      	bpl.n	8006ccc <ADC_Enable+0x44>
  return HAL_OK;
 8006cf4:	2000      	movs	r0, #0
}
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	8000003f 	.word	0x8000003f
 8006cfc:	7fffffc0 	.word	0x7fffffc0

08006d00 <HAL_ADC_Start_DMA>:
{
 8006d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d04:	6805      	ldr	r5, [r0, #0]
 8006d06:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
{
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	460e      	mov	r6, r1
 8006d0e:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d10:	d022      	beq.n	8006d58 <HAL_ADC_Start_DMA+0x58>
 8006d12:	4a39      	ldr	r2, [pc, #228]	; (8006df8 <HAL_ADC_Start_DMA+0xf8>)
 8006d14:	4839      	ldr	r0, [pc, #228]	; (8006dfc <HAL_ADC_Start_DMA+0xfc>)
 8006d16:	4b3a      	ldr	r3, [pc, #232]	; (8006e00 <HAL_ADC_Start_DMA+0x100>)
 8006d18:	4295      	cmp	r5, r2
 8006d1a:	bf08      	it	eq
 8006d1c:	4618      	moveq	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006d1e:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006d20:	68ab      	ldr	r3, [r5, #8]
 8006d22:	075b      	lsls	r3, r3, #29
 8006d24:	d415      	bmi.n	8006d52 <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 8006d26:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d011      	beq.n	8006d52 <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006d2e:	4b35      	ldr	r3, [pc, #212]	; (8006e04 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 8006d30:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006d32:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006d34:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 8006d38:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006d3c:	d00e      	beq.n	8006d5c <HAL_ADC_Start_DMA+0x5c>
 8006d3e:	f240 2321 	movw	r3, #545	; 0x221
 8006d42:	fa23 f308 	lsr.w	r3, r3, r8
 8006d46:	4003      	ands	r3, r0
 8006d48:	d108      	bne.n	8006d5c <HAL_ADC_Start_DMA+0x5c>
      __HAL_UNLOCK(hadc);
 8006d4a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8006d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8006d52:	2002      	movs	r0, #2
}
 8006d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d58:	4829      	ldr	r0, [pc, #164]	; (8006e00 <HAL_ADC_Start_DMA+0x100>)
 8006d5a:	e7e0      	b.n	8006d1e <HAL_ADC_Start_DMA+0x1e>
      tmp_hal_status = ADC_Enable(hadc);
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f7ff ff93 	bl	8006c88 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d13f      	bne.n	8006de6 <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 8006d66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d68:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8006d6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d76:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006d78:	4b1f      	ldr	r3, [pc, #124]	; (8006df8 <HAL_ADC_Start_DMA+0xf8>)
 8006d7a:	4299      	cmp	r1, r3
 8006d7c:	d038      	beq.n	8006df0 <HAL_ADC_Start_DMA+0xf0>
 8006d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d82:	4299      	cmp	r1, r3
 8006d84:	d034      	beq.n	8006df0 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006d86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006d88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d8c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006d8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d92:	4d1d      	ldr	r5, [pc, #116]	; (8006e08 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006d94:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d98:	bf1c      	itt	ne
 8006d9a:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8006d9c:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8006da0:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006da2:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006da4:	4d19      	ldr	r5, [pc, #100]	; (8006e0c <HAL_ADC_Start_DMA+0x10c>)
 8006da6:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006da8:	4d19      	ldr	r5, [pc, #100]	; (8006e10 <HAL_ADC_Start_DMA+0x110>)
 8006daa:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006dac:	251c      	movs	r5, #28
 8006dae:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8006db0:	2500      	movs	r5, #0
 8006db2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006db6:	684d      	ldr	r5, [r1, #4]
 8006db8:	f045 0510 	orr.w	r5, r5, #16
 8006dbc:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006dbe:	68cd      	ldr	r5, [r1, #12]
 8006dc0:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006dc8:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006dca:	3140      	adds	r1, #64	; 0x40
 8006dcc:	f000 f9e0 	bl	8007190 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006dd0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8006dd2:	6893      	ldr	r3, [r2, #8]
 8006dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ddc:	f043 0304 	orr.w	r3, r3, #4
 8006de0:	6093      	str	r3, [r2, #8]
}
 8006de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8006de6:	2300      	movs	r3, #0
 8006de8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8006dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006df0:	f1b8 0f00 	cmp.w	r8, #0
 8006df4:	d1cb      	bne.n	8006d8e <HAL_ADC_Start_DMA+0x8e>
 8006df6:	e7c6      	b.n	8006d86 <HAL_ADC_Start_DMA+0x86>
 8006df8:	50000100 	.word	0x50000100
 8006dfc:	50000700 	.word	0x50000700
 8006e00:	50000300 	.word	0x50000300
 8006e04:	50000600 	.word	0x50000600
 8006e08:	080066e9 	.word	0x080066e9
 8006e0c:	080066d9 	.word	0x080066d9
 8006e10:	08006755 	.word	0x08006755

08006e14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e14:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e16:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e1a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006e1c:	2a01      	cmp	r2, #1
{
 8006e1e:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8006e20:	d056      	beq.n	8006ed0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e22:	6802      	ldr	r2, [r0, #0]
 8006e24:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006e26:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8006e28:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e2a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006e2e:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8006e30:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006e34:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e36:	d00b      	beq.n	8006e50 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8006e38:	4d48      	ldr	r5, [pc, #288]	; (8006f5c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006e3a:	42aa      	cmp	r2, r5
 8006e3c:	d046      	beq.n	8006ecc <HAL_ADCEx_MultiModeConfigChannel+0xb8>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e40:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e44:	f042 0220 	orr.w	r2, r2, #32
 8006e48:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006e4a:	b01d      	add	sp, #116	; 0x74
 8006e4c:	bc70      	pop	{r4, r5, r6}
 8006e4e:	4770      	bx	lr
 8006e50:	4843      	ldr	r0, [pc, #268]	; (8006f60 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e52:	6880      	ldr	r0, [r0, #8]
 8006e54:	0740      	lsls	r0, r0, #29
 8006e56:	d50b      	bpl.n	8006e70 <HAL_ADCEx_MultiModeConfigChannel+0x5c>
 8006e58:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e5c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006e60:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e62:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8006e6a:	b01d      	add	sp, #116	; 0x74
 8006e6c:	bc70      	pop	{r4, r5, r6}
 8006e6e:	4770      	bx	lr
 8006e70:	6890      	ldr	r0, [r2, #8]
 8006e72:	0744      	lsls	r4, r0, #29
 8006e74:	d4f1      	bmi.n	8006e5a <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e76:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006e7a:	d02d      	beq.n	8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
 8006e7c:	4838      	ldr	r0, [pc, #224]	; (8006f60 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006e7e:	4282      	cmp	r2, r0
 8006e80:	d02a      	beq.n	8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d058      	beq.n	8006f38 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006e86:	4837      	ldr	r0, [pc, #220]	; (8006f64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006e88:	684c      	ldr	r4, [r1, #4]
 8006e8a:	6882      	ldr	r2, [r0, #8]
 8006e8c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e90:	4322      	orrs	r2, r4
 8006e92:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8006e96:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8006e9a:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e9c:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006e9e:	6894      	ldr	r4, [r2, #8]
 8006ea0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006ea4:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ea6:	4322      	orrs	r2, r4
 8006ea8:	4c2f      	ldr	r4, [pc, #188]	; (8006f68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006eaa:	68a4      	ldr	r4, [r4, #8]
 8006eac:	4322      	orrs	r2, r4
 8006eae:	43d2      	mvns	r2, r2
 8006eb0:	f002 0201 	and.w	r2, r2, #1
 8006eb4:	b142      	cbz	r2, 8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        MODIFY_REG(tmpADC_Common->CCR,
 8006eb6:	6884      	ldr	r4, [r0, #8]
 8006eb8:	688a      	ldr	r2, [r1, #8]
 8006eba:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8006ebe:	4332      	orrs	r2, r6
 8006ec0:	f021 010f 	bic.w	r1, r1, #15
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ec8:	2000      	movs	r0, #0
 8006eca:	e7cb      	b.n	8006e64 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8006ecc:	4827      	ldr	r0, [pc, #156]	; (8006f6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006ece:	e7c0      	b.n	8006e52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8006ed0:	2002      	movs	r0, #2
}
 8006ed2:	b01d      	add	sp, #116	; 0x74
 8006ed4:	bc70      	pop	{r4, r5, r6}
 8006ed6:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ed8:	b1ae      	cbz	r6, 8006f06 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006eda:	4825      	ldr	r0, [pc, #148]	; (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006edc:	684c      	ldr	r4, [r1, #4]
 8006ede:	6882      	ldr	r2, [r0, #8]
 8006ee0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006ee4:	4322      	orrs	r2, r4
 8006ee6:	f893 4038 	ldrb.w	r4, [r3, #56]	; 0x38
 8006eea:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8006eee:	6082      	str	r2, [r0, #8]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006ef2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006ef6:	6880      	ldr	r0, [r0, #8]
 8006ef8:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006efa:	4302      	orrs	r2, r0
 8006efc:	43d2      	mvns	r2, r2
 8006efe:	481c      	ldr	r0, [pc, #112]	; (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006f00:	f002 0201 	and.w	r2, r2, #1
 8006f04:	e7d6      	b.n	8006eb4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006f06:	491a      	ldr	r1, [pc, #104]	; (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006f08:	688a      	ldr	r2, [r1, #8]
 8006f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f0e:	608a      	str	r2, [r1, #8]
 8006f10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006f14:	4a12      	ldr	r2, [pc, #72]	; (8006f60 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006f16:	6880      	ldr	r0, [r0, #8]
 8006f18:	6892      	ldr	r2, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f1a:	4915      	ldr	r1, [pc, #84]	; (8006f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006f1c:	4302      	orrs	r2, r0
 8006f1e:	43d2      	mvns	r2, r2
 8006f20:	f002 0201 	and.w	r2, r2, #1
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	d0cf      	beq.n	8006ec8 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f28:	688a      	ldr	r2, [r1, #8]
 8006f2a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8006f2e:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f32:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f34:	608a      	str	r2, [r1, #8]
 8006f36:	e795      	b.n	8006e64 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006f38:	490a      	ldr	r1, [pc, #40]	; (8006f64 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006f3a:	4808      	ldr	r0, [pc, #32]	; (8006f5c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	4c0b      	ldr	r4, [pc, #44]	; (8006f6c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006f40:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006f44:	608a      	str	r2, [r1, #8]
 8006f46:	6880      	ldr	r0, [r0, #8]
 8006f48:	68a2      	ldr	r2, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f4a:	4302      	orrs	r2, r0
 8006f4c:	4806      	ldr	r0, [pc, #24]	; (8006f68 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006f4e:	6880      	ldr	r0, [r0, #8]
 8006f50:	4302      	orrs	r2, r0
 8006f52:	43d2      	mvns	r2, r2
 8006f54:	f002 0201 	and.w	r2, r2, #1
 8006f58:	e7e4      	b.n	8006f24 <HAL_ADCEx_MultiModeConfigChannel+0x110>
 8006f5a:	bf00      	nop
 8006f5c:	50000400 	.word	0x50000400
 8006f60:	50000100 	.word	0x50000100
 8006f64:	50000700 	.word	0x50000700
 8006f68:	50000600 	.word	0x50000600
 8006f6c:	50000500 	.word	0x50000500
 8006f70:	50000300 	.word	0x50000300

08006f74 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f74:	4907      	ldr	r1, [pc, #28]	; (8006f94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006f76:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f78:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f7a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f82:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f84:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f86:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006f8e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	e000ed00 	.word	0xe000ed00

08006f98 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f98:	4b1c      	ldr	r3, [pc, #112]	; (800700c <HAL_NVIC_SetPriority+0x74>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fa0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fa2:	f1c3 0e07 	rsb	lr, r3, #7
 8006fa6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006faa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fae:	bf28      	it	cs
 8006fb0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fb4:	f1bc 0f06 	cmp.w	ip, #6
 8006fb8:	d91b      	bls.n	8006ff2 <HAL_NVIC_SetPriority+0x5a>
 8006fba:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fbc:	f04f 3cff 	mov.w	ip, #4294967295
 8006fc0:	fa0c fc03 	lsl.w	ip, ip, r3
 8006fc4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fc8:	f04f 3cff 	mov.w	ip, #4294967295
 8006fcc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006fd0:	ea21 010c 	bic.w	r1, r1, ip
 8006fd4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006fd6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fd8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006fdc:	db0c      	blt.n	8006ff8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fde:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006fe2:	0109      	lsls	r1, r1, #4
 8006fe4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006fe8:	b2c9      	uxtb	r1, r1
 8006fea:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ff2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	e7e7      	b.n	8006fc8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff8:	4b05      	ldr	r3, [pc, #20]	; (8007010 <HAL_NVIC_SetPriority+0x78>)
 8006ffa:	f000 000f 	and.w	r0, r0, #15
 8006ffe:	0109      	lsls	r1, r1, #4
 8007000:	4403      	add	r3, r0
 8007002:	b2c9      	uxtb	r1, r1
 8007004:	7619      	strb	r1, [r3, #24]
 8007006:	f85d fb04 	ldr.w	pc, [sp], #4
 800700a:	bf00      	nop
 800700c:	e000ed00 	.word	0xe000ed00
 8007010:	e000ecfc 	.word	0xe000ecfc

08007014 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007014:	2800      	cmp	r0, #0
 8007016:	db07      	blt.n	8007028 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007018:	4a04      	ldr	r2, [pc, #16]	; (800702c <HAL_NVIC_EnableIRQ+0x18>)
 800701a:	0941      	lsrs	r1, r0, #5
 800701c:	2301      	movs	r3, #1
 800701e:	f000 001f 	and.w	r0, r0, #31
 8007022:	4083      	lsls	r3, r0
 8007024:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	e000e100 	.word	0xe000e100

08007030 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007030:	3801      	subs	r0, #1
 8007032:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007036:	d210      	bcs.n	800705a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007038:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800703a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800703e:	4c08      	ldr	r4, [pc, #32]	; (8007060 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007040:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007042:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8007046:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800704a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800704c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800704e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007050:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8007052:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007056:	6119      	str	r1, [r3, #16]
 8007058:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800705a:	2001      	movs	r0, #1
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	e000ed00 	.word	0xe000ed00

08007064 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007064:	2800      	cmp	r0, #0
 8007066:	d078      	beq.n	800715a <HAL_DMA_Init+0xf6>
{
 8007068:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800706a:	4b3d      	ldr	r3, [pc, #244]	; (8007160 <HAL_DMA_Init+0xfc>)
 800706c:	6804      	ldr	r4, [r0, #0]
 800706e:	429c      	cmp	r4, r3
 8007070:	d95f      	bls.n	8007132 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007072:	4a3c      	ldr	r2, [pc, #240]	; (8007164 <HAL_DMA_Init+0x100>)
 8007074:	4b3c      	ldr	r3, [pc, #240]	; (8007168 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8007076:	493d      	ldr	r1, [pc, #244]	; (800716c <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007078:	4422      	add	r2, r4
 800707a:	fba3 3202 	umull	r3, r2, r3, r2
 800707e:	0912      	lsrs	r2, r2, #4
 8007080:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007082:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007084:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007086:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800708a:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800708c:	4e36      	ldr	r6, [pc, #216]	; (8007168 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800708e:	4f34      	ldr	r7, [pc, #208]	; (8007160 <HAL_DMA_Init+0xfc>)
 8007090:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007094:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8007096:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007098:	430b      	orrs	r3, r1
 800709a:	6941      	ldr	r1, [r0, #20]
 800709c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800709e:	6981      	ldr	r1, [r0, #24]
 80070a0:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 80070a2:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80070a4:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070a8:	69c1      	ldr	r1, [r0, #28]
 80070aa:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070ac:	b2e1      	uxtb	r1, r4
 80070ae:	3908      	subs	r1, #8
 80070b0:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80070b4:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80070b6:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80070ba:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80070bc:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 80070c0:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80070c2:	4e2b      	ldr	r6, [pc, #172]	; (8007170 <HAL_DMA_Init+0x10c>)
 80070c4:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070c6:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80070ca:	42bc      	cmp	r4, r7
 80070cc:	bf98      	it	ls
 80070ce:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070d0:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070d4:	4c28      	ldr	r4, [pc, #160]	; (8007178 <HAL_DMA_Init+0x114>)
 80070d6:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070d8:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80070dc:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070de:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070e2:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80070e4:	6484      	str	r4, [r0, #72]	; 0x48
 80070e6:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070ea:	d02b      	beq.n	8007144 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070ec:	6845      	ldr	r5, [r0, #4]
 80070ee:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070f0:	3d01      	subs	r5, #1
 80070f2:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070f8:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070fc:	d828      	bhi.n	8007150 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070fe:	4b1f      	ldr	r3, [pc, #124]	; (800717c <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007100:	4d1f      	ldr	r5, [pc, #124]	; (8007180 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007102:	4a20      	ldr	r2, [pc, #128]	; (8007184 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007104:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007106:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007108:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800710a:	f004 041f 	and.w	r4, r4, #31
 800710e:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007112:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007114:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007118:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800711a:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800711c:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800711e:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8007120:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007122:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8007124:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8007128:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800712c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800712e:	4618      	mov	r0, r3
}
 8007130:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <HAL_DMA_Init+0x124>)
 8007134:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8007136:	4915      	ldr	r1, [pc, #84]	; (800718c <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007138:	4422      	add	r2, r4
 800713a:	fba3 3202 	umull	r3, r2, r3, r2
 800713e:	0912      	lsrs	r2, r2, #4
 8007140:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8007142:	e79e      	b.n	8007082 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007144:	2400      	movs	r4, #0
 8007146:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007148:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800714c:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8007150:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8007152:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007156:	65c3      	str	r3, [r0, #92]	; 0x5c
 8007158:	e7e1      	b.n	800711e <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 800715a:	2001      	movs	r0, #1
}
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40020407 	.word	0x40020407
 8007164:	bffdfbf8 	.word	0xbffdfbf8
 8007168:	cccccccd 	.word	0xcccccccd
 800716c:	40020400 	.word	0x40020400
 8007170:	40020800 	.word	0x40020800
 8007174:	40020820 	.word	0x40020820
 8007178:	40020880 	.word	0x40020880
 800717c:	1000823f 	.word	0x1000823f
 8007180:	40020940 	.word	0x40020940
 8007184:	40020900 	.word	0x40020900
 8007188:	bffdfff8 	.word	0xbffdfff8
 800718c:	40020000 	.word	0x40020000

08007190 <HAL_DMA_Start_IT>:
{
 8007190:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8007192:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8007196:	2c01      	cmp	r4, #1
 8007198:	d051      	beq.n	800723e <HAL_DMA_Start_IT+0xae>
 800719a:	2401      	movs	r4, #1
 800719c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80071a0:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80071a4:	2c01      	cmp	r4, #1
 80071a6:	d005      	beq.n	80071b4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80071a8:	2300      	movs	r3, #0
 80071aa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80071ae:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80071b0:	2002      	movs	r0, #2
}
 80071b2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80071b4:	2402      	movs	r4, #2
 80071b6:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071ba:	2400      	movs	r4, #0
 80071bc:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80071be:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071c0:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 80071c2:	6825      	ldr	r5, [r4, #0]
 80071c4:	f025 0501 	bic.w	r5, r5, #1
 80071c8:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071ca:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 80071ce:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80071d0:	b115      	cbz	r5, 80071d8 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071d2:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 80071d6:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80071d8:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80071da:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80071dc:	f006 0c1f 	and.w	ip, r6, #31
 80071e0:	2601      	movs	r6, #1
 80071e2:	fa06 f60c 	lsl.w	r6, r6, ip
 80071e6:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80071e8:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071ea:	6883      	ldr	r3, [r0, #8]
 80071ec:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80071ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 80071f0:	bf0b      	itete	eq
 80071f2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80071f4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80071f6:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80071f8:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80071fa:	b1bb      	cbz	r3, 800722c <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	f043 030e 	orr.w	r3, r3, #14
 8007202:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007204:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	03d2      	lsls	r2, r2, #15
 800720a:	d503      	bpl.n	8007214 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007212:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8007214:	b11d      	cbz	r5, 800721e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007216:	682b      	ldr	r3, [r5, #0]
 8007218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800721c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8007224:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007226:	6023      	str	r3, [r4, #0]
}
 8007228:	bcf0      	pop	{r4, r5, r6, r7}
 800722a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	f023 0304 	bic.w	r3, r3, #4
 8007232:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	f043 030a 	orr.w	r3, r3, #10
 800723a:	6023      	str	r3, [r4, #0]
 800723c:	e7e2      	b.n	8007204 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 800723e:	2002      	movs	r0, #2
}
 8007240:	bcf0      	pop	{r4, r5, r6, r7}
 8007242:	4770      	bx	lr

08007244 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007244:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8007248:	2a02      	cmp	r2, #2
{
 800724a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800724c:	d009      	beq.n	8007262 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800724e:	2204      	movs	r2, #4
 8007250:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8007252:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8007254:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8007256:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8007258:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800725c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8007260:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007262:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007264:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 8007266:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007268:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800726a:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800726c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800726e:	f020 000e 	bic.w	r0, r0, #14
 8007272:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007274:	6820      	ldr	r0, [r4, #0]
 8007276:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800727a:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 800727c:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800727e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8007280:	f020 0001 	bic.w	r0, r0, #1
 8007284:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007286:	f001 011f 	and.w	r1, r1, #31
 800728a:	2201      	movs	r2, #1
 800728c:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800728e:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007292:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007294:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8007296:	b138      	cbz	r0, 80072a8 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007298:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800729a:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800729e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a2:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072a4:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80072a8:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 80072aa:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 80072ac:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80072b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 80072b4:	bc30      	pop	{r4, r5}
 80072b6:	4770      	bx	lr

080072b8 <HAL_DMA_Abort_IT>:
{
 80072b8:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80072ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d009      	beq.n	80072d6 <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 80072c2:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072c4:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80072c6:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072c8:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80072ca:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80072ce:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 80072d2:	4618      	mov	r0, r3
}
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072d6:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072d8:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072da:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072de:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072e0:	f021 010e 	bic.w	r1, r1, #14
 80072e4:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80072e6:	6819      	ldr	r1, [r3, #0]
 80072e8:	f021 0101 	bic.w	r1, r1, #1
 80072ec:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072ee:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072f0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072f6:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072f8:	f002 021f 	and.w	r2, r2, #31
 80072fc:	2301      	movs	r3, #1
 80072fe:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007300:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007304:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007306:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8007308:	b132      	cbz	r2, 8007318 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800730a:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800730c:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007314:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007316:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8007318:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800731a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800731c:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800731e:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8007322:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8007326:	b113      	cbz	r3, 800732e <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8007328:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	4620      	mov	r0, r4
}
 800732c:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800732e:	4618      	mov	r0, r3
}
 8007330:	bd38      	pop	{r3, r4, r5, pc}
 8007332:	bf00      	nop

08007334 <HAL_DMA_IRQHandler>:
{
 8007334:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007336:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007338:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800733a:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800733c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800733e:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007340:	f003 031f 	and.w	r3, r3, #31
 8007344:	2204      	movs	r2, #4
 8007346:	409a      	lsls	r2, r3
 8007348:	420a      	tst	r2, r1
 800734a:	d00e      	beq.n	800736a <HAL_DMA_IRQHandler+0x36>
 800734c:	f014 0f04 	tst.w	r4, #4
 8007350:	d00b      	beq.n	800736a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	069b      	lsls	r3, r3, #26
 8007356:	d403      	bmi.n	8007360 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	f023 0304 	bic.w	r3, r3, #4
 800735e:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8007360:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007362:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8007364:	b1cb      	cbz	r3, 800739a <HAL_DMA_IRQHandler+0x66>
}
 8007366:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8007368:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800736a:	2202      	movs	r2, #2
 800736c:	409a      	lsls	r2, r3
 800736e:	420a      	tst	r2, r1
 8007370:	d015      	beq.n	800739e <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8007372:	f014 0f02 	tst.w	r4, #2
 8007376:	d012      	beq.n	800739e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	0699      	lsls	r1, r3, #26
 800737c:	d406      	bmi.n	800738c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800737e:	682b      	ldr	r3, [r5, #0]
 8007380:	f023 030a 	bic.w	r3, r3, #10
 8007384:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007386:	2301      	movs	r3, #1
 8007388:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 800738c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800738e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8007390:	2100      	movs	r1, #0
 8007392:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e5      	bne.n	8007366 <HAL_DMA_IRQHandler+0x32>
}
 800739a:	bc70      	pop	{r4, r5, r6}
 800739c:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800739e:	2208      	movs	r2, #8
 80073a0:	409a      	lsls	r2, r3
 80073a2:	420a      	tst	r2, r1
 80073a4:	d0f9      	beq.n	800739a <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 80073a6:	0722      	lsls	r2, r4, #28
 80073a8:	d5f7      	bpl.n	800739a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073aa:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80073ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073ae:	f022 020e 	bic.w	r2, r2, #14
 80073b2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073b4:	2201      	movs	r2, #1
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80073ba:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073bc:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073be:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80073c0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80073c4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 80073c8:	2900      	cmp	r1, #0
 80073ca:	d0e6      	beq.n	800739a <HAL_DMA_IRQHandler+0x66>
}
 80073cc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80073ce:	4708      	bx	r1

080073d0 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80073d0:	2800      	cmp	r0, #0
 80073d2:	f000 814c 	beq.w	800766e <HAL_FDCAN_Init+0x29e>
{
 80073d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80073da:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80073de:	4604      	mov	r4, r0
 80073e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d073      	beq.n	80074d0 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	6993      	ldr	r3, [r2, #24]
 80073ec:	f023 0310 	bic.w	r3, r3, #16
 80073f0:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073f2:	f7fb fbe9 	bl	8002bc8 <HAL_GetTick>
 80073f6:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80073f8:	e004      	b.n	8007404 <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80073fa:	f7fb fbe5 	bl	8002bc8 <HAL_GetTick>
 80073fe:	1b43      	subs	r3, r0, r5
 8007400:	2b0a      	cmp	r3, #10
 8007402:	d85b      	bhi.n	80074bc <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	0711      	lsls	r1, r2, #28
 800740a:	d4f6      	bmi.n	80073fa <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	f042 0201 	orr.w	r2, r2, #1
 8007412:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007414:	f7fb fbd8 	bl	8002bc8 <HAL_GetTick>
 8007418:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800741a:	e004      	b.n	8007426 <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800741c:	f7fb fbd4 	bl	8002bc8 <HAL_GetTick>
 8007420:	1b40      	subs	r0, r0, r5
 8007422:	280a      	cmp	r0, #10
 8007424:	d84a      	bhi.n	80074bc <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	07d2      	lsls	r2, r2, #31
 800742c:	d5f6      	bpl.n	800741c <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800742e:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007430:	4998      	ldr	r1, [pc, #608]	; (8007694 <HAL_FDCAN_Init+0x2c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007432:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8007436:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007438:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 800743a:	f000 8113 	beq.w	8007664 <HAL_FDCAN_Init+0x294>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800743e:	7c22      	ldrb	r2, [r4, #16]
 8007440:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	bf0c      	ite	eq
 8007446:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800744a:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 800744e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007450:	7c62      	ldrb	r2, [r4, #17]
 8007452:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	bf0c      	ite	eq
 8007458:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800745c:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8007460:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007462:	7ca2      	ldrb	r2, [r4, #18]
 8007464:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007466:	699a      	ldr	r2, [r3, #24]
 8007468:	bf0c      	ite	eq
 800746a:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800746e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8007472:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007478:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800747a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800747e:	4302      	orrs	r2, r0
 8007480:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007482:	699a      	ldr	r2, [r3, #24]
 8007484:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007488:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800748a:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800748c:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800748e:	f022 0210 	bic.w	r2, r2, #16
 8007492:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007494:	d021      	beq.n	80074da <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007496:	b321      	cbz	r1, 80074e2 <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007498:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800749a:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800749c:	f000 80f5 	beq.w	800768a <HAL_FDCAN_Init+0x2ba>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80074a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80074a6:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80074a8:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80074aa:	f042 0210 	orr.w	r2, r2, #16
 80074ae:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80074b0:	d117      	bne.n	80074e2 <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	f042 0220 	orr.w	r2, r2, #32
 80074b8:	619a      	str	r2, [r3, #24]
 80074ba:	e012      	b.n	80074e2 <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074bc:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074be:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80074c6:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80074ca:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80074cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80074d0:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80074d4:	f7fa fd50 	bl	8001f78 <HAL_FDCAN_MspInit>
 80074d8:	e786      	b.n	80073e8 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	f042 0204 	orr.w	r2, r2, #4
 80074e0:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074e6:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074e8:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074ea:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074ec:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80074f0:	6a21      	ldr	r1, [r4, #32]
 80074f2:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074f4:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80074f6:	6961      	ldr	r1, [r4, #20]
 80074f8:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80074fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80074fe:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007502:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007504:	d10e      	bne.n	8007524 <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007506:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800750a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800750c:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800750e:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007510:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007512:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007514:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007518:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800751a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800751c:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800751e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007522:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007524:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007528:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800752a:	495b      	ldr	r1, [pc, #364]	; (8007698 <HAL_FDCAN_Init+0x2c8>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800752c:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 800752e:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007530:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 8007534:	f000 809d 	beq.w	8007672 <HAL_FDCAN_Init+0x2a2>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8007538:	4a58      	ldr	r2, [pc, #352]	; (800769c <HAL_FDCAN_Init+0x2cc>)
 800753a:	4e59      	ldr	r6, [pc, #356]	; (80076a0 <HAL_FDCAN_Init+0x2d0>)
 800753c:	4f59      	ldr	r7, [pc, #356]	; (80076a4 <HAL_FDCAN_Init+0x2d4>)
 800753e:	4d5a      	ldr	r5, [pc, #360]	; (80076a8 <HAL_FDCAN_Init+0x2d8>)
 8007540:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007544:	428b      	cmp	r3, r1
 8007546:	bf18      	it	ne
 8007548:	4691      	movne	r9, r2
 800754a:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 800754e:	f1a2 0218 	sub.w	r2, r2, #24
 8007552:	f101 0110 	add.w	r1, r1, #16
 8007556:	bf18      	it	ne
 8007558:	4616      	movne	r6, r2
 800755a:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 800755e:	bf14      	ite	ne
 8007560:	4617      	movne	r7, r2
 8007562:	468e      	moveq	lr, r1
 8007564:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8007568:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 800756c:	bf14      	ite	ne
 800756e:	4696      	movne	lr, r2
 8007570:	4688      	moveq	r8, r1
 8007572:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 8007576:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 800757a:	bf14      	ite	ne
 800757c:	4690      	movne	r8, r2
 800757e:	468c      	moveq	ip, r1
 8007580:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 8007584:	f5a1 611f 	sub.w	r1, r1, #2544	; 0x9f0
 8007588:	bf14      	ite	ne
 800758a:	4694      	movne	ip, r2
 800758c:	46a9      	moveq	r9, r5
 800758e:	f502 7254 	add.w	r2, r2, #848	; 0x350
 8007592:	bf18      	it	ne
 8007594:	460a      	movne	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007596:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800759a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800759c:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800759e:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 80075a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80075a6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80075aa:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80075ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80075b0:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80075b4:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 80075b8:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 80075bc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80075c0:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80075c4:	1a89      	subs	r1, r1, r2
 80075c6:	1c53      	adds	r3, r2, #1
 80075c8:	4563      	cmp	r3, ip
 80075ca:	ea4f 0391 	mov.w	r3, r1, lsr #2
 80075ce:	f103 0301 	add.w	r3, r3, #1
 80075d2:	bf98      	it	ls
 80075d4:	461d      	movls	r5, r3

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80075d6:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80075da:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80075de:	bf88      	it	hi
 80075e0:	2501      	movhi	r5, #1
 80075e2:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80075e6:	d81a      	bhi.n	800761e <HAL_FDCAN_Init+0x24e>
 80075e8:	2917      	cmp	r1, #23
 80075ea:	bf8c      	ite	hi
 80075ec:	2100      	movhi	r1, #0
 80075ee:	2101      	movls	r1, #1
 80075f0:	b9a9      	cbnz	r1, 800761e <HAL_FDCAN_Init+0x24e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80075f2:	4616      	mov	r6, r2
 80075f4:	b10b      	cbz	r3, 80075fa <HAL_FDCAN_Init+0x22a>
 80075f6:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80075fa:	1aed      	subs	r5, r5, r3
 80075fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007600:	086a      	lsrs	r2, r5, #1
 8007602:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007606:	2000      	movs	r0, #0
 8007608:	2100      	movs	r1, #0
 800760a:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800760e:	429a      	cmp	r2, r3
 8007610:	d1fb      	bne.n	800760a <HAL_FDCAN_Init+0x23a>
 8007612:	f025 0301 	bic.w	r3, r5, #1
 8007616:	429d      	cmp	r5, r3
 8007618:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800761c:	d01a      	beq.n	8007654 <HAL_FDCAN_Init+0x284>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800761e:	4611      	mov	r1, r2
 8007620:	2300      	movs	r3, #0
 8007622:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007626:	458c      	cmp	ip, r1
 8007628:	d914      	bls.n	8007654 <HAL_FDCAN_Init+0x284>
 800762a:	f102 0108 	add.w	r1, r2, #8
 800762e:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007630:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007632:	d90f      	bls.n	8007654 <HAL_FDCAN_Init+0x284>
 8007634:	f102 010c 	add.w	r1, r2, #12
 8007638:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800763a:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800763c:	d90a      	bls.n	8007654 <HAL_FDCAN_Init+0x284>
 800763e:	f102 0110 	add.w	r1, r2, #16
 8007642:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007644:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007646:	d905      	bls.n	8007654 <HAL_FDCAN_Init+0x284>
 8007648:	f102 0114 	add.w	r1, r2, #20
 800764c:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800764e:	6113      	str	r3, [r2, #16]
 8007650:	bf88      	it	hi
 8007652:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8007654:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007656:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007658:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800765a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 800765e:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8007660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007664:	4a11      	ldr	r2, [pc, #68]	; (80076ac <HAL_FDCAN_Init+0x2dc>)
 8007666:	6861      	ldr	r1, [r4, #4]
 8007668:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 800766c:	e6e7      	b.n	800743e <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 800766e:	2001      	movs	r0, #1
}
 8007670:	4770      	bx	lr
 8007672:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80076bc <HAL_FDCAN_Init+0x2ec>
 8007676:	4e0e      	ldr	r6, [pc, #56]	; (80076b0 <HAL_FDCAN_Init+0x2e0>)
 8007678:	4f0e      	ldr	r7, [pc, #56]	; (80076b4 <HAL_FDCAN_Init+0x2e4>)
 800767a:	f8df e044 	ldr.w	lr, [pc, #68]	; 80076c0 <HAL_FDCAN_Init+0x2f0>
 800767e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80076c4 <HAL_FDCAN_Init+0x2f4>
 8007682:	f8df c044 	ldr.w	ip, [pc, #68]	; 80076c8 <HAL_FDCAN_Init+0x2f8>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007686:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <HAL_FDCAN_Init+0x2e8>)
 8007688:	e785      	b.n	8007596 <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800768a:	f042 0220 	orr.w	r2, r2, #32
 800768e:	619a      	str	r2, [r3, #24]
 8007690:	e727      	b.n	80074e2 <HAL_FDCAN_Init+0x112>
 8007692:	bf00      	nop
 8007694:	40006400 	.word	0x40006400
 8007698:	40006800 	.word	0x40006800
 800769c:	4000a678 	.word	0x4000a678
 80076a0:	4000ad00 	.word	0x4000ad00
 80076a4:	4000ac28 	.word	0x4000ac28
 80076a8:	4000ad18 	.word	0x4000ad18
 80076ac:	40006000 	.word	0x40006000
 80076b0:	4000a9b0 	.word	0x4000a9b0
 80076b4:	4000a8d8 	.word	0x4000a8d8
 80076b8:	4000a750 	.word	0x4000a750
 80076bc:	4000a9c8 	.word	0x4000a9c8
 80076c0:	4000a800 	.word	0x4000a800
 80076c4:	4000a7c0 	.word	0x4000a7c0
 80076c8:	4000aaa0 	.word	0x4000aaa0

080076cc <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80076cc:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80076d0:	3a01      	subs	r2, #1
 80076d2:	2a01      	cmp	r2, #1
{
 80076d4:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80076d6:	d905      	bls.n	80076e4 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80076d8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80076da:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80076de:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80076e0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80076e2:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80076e4:	6808      	ldr	r0, [r1, #0]
{
 80076e6:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80076e8:	b978      	cbnz	r0, 800770a <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 80076ea:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80076ee:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80076f0:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 80076f4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80076f6:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80076f8:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80076fa:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 80076fc:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80076fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 8007702:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 8007706:	bc30      	pop	{r4, r5}
 8007708:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800770a:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800770c:	688a      	ldr	r2, [r1, #8]
 800770e:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007710:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007712:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007716:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800771a:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800771e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8007722:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8007726:	2000      	movs	r0, #0
}
 8007728:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 800772a:	f8cc 3004 	str.w	r3, [ip, #4]
}
 800772e:	4770      	bx	lr

08007730 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007730:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8007734:	2a01      	cmp	r2, #1
{
 8007736:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007738:	d005      	beq.n	8007746 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800773a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800773c:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8007740:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007742:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007744:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007746:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007748:	2202      	movs	r2, #2
 800774a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800774e:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007750:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007752:	f022 0201 	bic.w	r2, r2, #1
 8007756:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8007758:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800775a:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop

08007760 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8007760:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007762:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8007766:	2b02      	cmp	r3, #2
{
 8007768:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800776a:	d10c      	bne.n	8007786 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800776c:	6805      	ldr	r5, [r0, #0]
 800776e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8007772:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8007776:	d00d      	beq.n	8007794 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007778:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800777a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 800777e:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007780:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8007784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007786:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007788:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 800778c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800778e:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8007792:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007794:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007798:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800779a:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d139      	bne.n	8007816 <HAL_FDCAN_AddMessageToTxFifoQ+0xb6>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 80077a2:	688b      	ldr	r3, [r1, #8]
 80077a4:	690f      	ldr	r7, [r1, #16]
 80077a6:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 80077a8:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80077aa:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80077ae:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 80077b2:	4303      	orrs	r3, r0
 80077b4:	6948      	ldr	r0, [r1, #20]
 80077b6:	6a0c      	ldr	r4, [r1, #32]
 80077b8:	4303      	orrs	r3, r0
 80077ba:	68c8      	ldr	r0, [r1, #12]
 80077bc:	4303      	orrs	r3, r0
 80077be:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80077c2:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 80077c6:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80077ca:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80077ce:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80077d2:	4c15      	ldr	r4, [pc, #84]	; (8007828 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 80077d4:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80077d6:	89cb      	ldrh	r3, [r1, #14]
 80077d8:	5ce3      	ldrb	r3, [r4, r3]
 80077da:	b1a3      	cbz	r3, 8007806 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80077dc:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077de:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80077e0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077e2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 80077e6:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80077e8:	433b      	orrs	r3, r7
 80077ea:	7857      	ldrb	r7, [r2, #1]
 80077ec:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077f0:	eb00 070c 	add.w	r7, r0, ip
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80077f4:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80077f8:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80077fa:	89cb      	ldrh	r3, [r1, #14]
 80077fc:	5ce3      	ldrb	r3, [r4, r3]
 80077fe:	459c      	cmp	ip, r3
 8007800:	f102 0204 	add.w	r2, r2, #4
 8007804:	d3ea      	bcc.n	80077dc <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007806:	2301      	movs	r3, #1
 8007808:	40b3      	lsls	r3, r6
 800780a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
    return HAL_OK;
 800780e:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007810:	f8ce 3058 	str.w	r3, [lr, #88]	; 0x58
}
 8007814:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8007816:	690b      	ldr	r3, [r1, #16]
 8007818:	6808      	ldr	r0, [r1, #0]
 800781a:	ea43 0700 	orr.w	r7, r3, r0
 800781e:	688b      	ldr	r3, [r1, #8]
 8007820:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007822:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8007826:	e7c2      	b.n	80077ae <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8007828:	0800fd10 	.word	0x0800fd10

0800782c <HAL_FDCAN_GetRxMessage>:
{
 800782c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782e:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007830:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8007834:	2802      	cmp	r0, #2
 8007836:	d10d      	bne.n	8007854 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007838:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800783a:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800783e:	d00f      	beq.n	8007860 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007840:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8007844:	0700      	lsls	r0, r0, #28
 8007846:	d160      	bne.n	800790a <HAL_FDCAN_GetRxMessage+0xde>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007848:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800784a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 800784e:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007850:	6623      	str	r3, [r4, #96]	; 0x60
}
 8007852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007854:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007856:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 800785a:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800785c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800785e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007860:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8007864:	0705      	lsls	r5, r0, #28
 8007866:	d0ef      	beq.n	8007848 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007868:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800786c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800786e:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007872:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8007876:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800787a:	6828      	ldr	r0, [r5, #0]
 800787c:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8007880:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007882:	2800      	cmp	r0, #0
 8007884:	d150      	bne.n	8007928 <HAL_FDCAN_GetRxMessage+0xfc>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007886:	6828      	ldr	r0, [r5, #0]
 8007888:	f3c0 408a 	ubfx	r0, r0, #18, #11
 800788c:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800788e:	6828      	ldr	r0, [r5, #0]
 8007890:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8007894:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007896:	6828      	ldr	r0, [r5, #0]
 8007898:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800789c:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800789e:	88a8      	ldrh	r0, [r5, #4]
 80078a0:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80078a2:	6868      	ldr	r0, [r5, #4]
 80078a4:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 80078a8:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80078aa:	686e      	ldr	r6, [r5, #4]
 80078ac:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 80078b0:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80078b2:	686e      	ldr	r6, [r5, #4]
 80078b4:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 80078b8:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80078ba:	79ee      	ldrb	r6, [r5, #7]
 80078bc:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80078c0:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80078c2:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80078c4:	4e1a      	ldr	r6, [pc, #104]	; (8007930 <HAL_FDCAN_GetRxMessage+0x104>)
 80078c6:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80078ca:	6868      	ldr	r0, [r5, #4]
 80078cc:	0fc0      	lsrs	r0, r0, #31
 80078ce:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80078d0:	f1be 0f00 	cmp.w	lr, #0
 80078d4:	d011      	beq.n	80078fa <HAL_FDCAN_GetRxMessage+0xce>
 80078d6:	3b01      	subs	r3, #1
 80078d8:	f105 0e07 	add.w	lr, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80078dc:	46f4      	mov	ip, lr
 80078de:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
 80078e2:	f803 0f01 	strb.w	r0, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80078e6:	89d0      	ldrh	r0, [r2, #14]
 80078e8:	f1ac 0c06 	sub.w	ip, ip, #6
 80078ec:	5c30      	ldrb	r0, [r6, r0]
 80078ee:	ebac 0c05 	sub.w	ip, ip, r5
 80078f2:	4560      	cmp	r0, ip
 80078f4:	d8f2      	bhi.n	80078dc <HAL_FDCAN_GetRxMessage+0xb0>
 80078f6:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80078fa:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 80078fc:	bf0c      	ite	eq
 80078fe:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8007902:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8007906:	2000      	movs	r0, #0
}
 8007908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800790a:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800790e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007910:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007914:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8007918:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800791c:	6828      	ldr	r0, [r5, #0]
 800791e:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8007922:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007924:	2800      	cmp	r0, #0
 8007926:	d0ae      	beq.n	8007886 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007928:	6828      	ldr	r0, [r5, #0]
 800792a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800792e:	e7ad      	b.n	800788c <HAL_FDCAN_GetRxMessage+0x60>
 8007930:	0800fd10 	.word	0x0800fd10

08007934 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8007934:	6803      	ldr	r3, [r0, #0]
 8007936:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 800793a:	f000 0007 	and.w	r0, r0, #7
 800793e:	4770      	bx	lr

08007940 <HAL_FDCAN_ActivateNotification>:
{
 8007940:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007942:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007946:	3801      	subs	r0, #1
 8007948:	2801      	cmp	r0, #1
 800794a:	d905      	bls.n	8007958 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800794c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800794e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8007952:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007954:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007956:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007958:	681b      	ldr	r3, [r3, #0]
{
 800795a:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800795c:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007960:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007962:	d03d      	beq.n	80079e0 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007964:	07c4      	lsls	r4, r0, #31
 8007966:	d43b      	bmi.n	80079e0 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007968:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800796a:	f044 0401 	orr.w	r4, r4, #1
 800796e:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007970:	b1cd      	cbz	r5, 80079a6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007972:	07c5      	lsls	r5, r0, #31
 8007974:	d517      	bpl.n	80079a6 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007976:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8007978:	f040 0002 	orr.w	r0, r0, #2
 800797c:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800797e:	060c      	lsls	r4, r1, #24
 8007980:	d504      	bpl.n	800798c <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007982:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8007986:	4310      	orrs	r0, r2
 8007988:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800798c:	05c8      	lsls	r0, r1, #23
 800798e:	d504      	bpl.n	800799a <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007990:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8007994:	4302      	orrs	r2, r0
 8007996:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800799a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799c:	430a      	orrs	r2, r1
    return HAL_OK;
 800799e:	2000      	movs	r0, #0
}
 80079a0:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80079a2:	655a      	str	r2, [r3, #84]	; 0x54
}
 80079a4:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80079a6:	f011 0f38 	tst.w	r1, #56	; 0x38
 80079aa:	d001      	beq.n	80079b0 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80079ac:	0784      	lsls	r4, r0, #30
 80079ae:	d4e2      	bmi.n	8007976 <HAL_FDCAN_ActivateNotification+0x36>
 80079b0:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80079b4:	d131      	bne.n	8007a1a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80079b6:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80079ba:	d001      	beq.n	80079c0 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80079bc:	0704      	lsls	r4, r0, #28
 80079be:	d4da      	bmi.n	8007976 <HAL_FDCAN_ActivateNotification+0x36>
 80079c0:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80079c4:	d001      	beq.n	80079ca <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80079c6:	06c5      	lsls	r5, r0, #27
 80079c8:	d4d5      	bmi.n	8007976 <HAL_FDCAN_ActivateNotification+0x36>
 80079ca:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 80079ce:	d001      	beq.n	80079d4 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80079d0:	0684      	lsls	r4, r0, #26
 80079d2:	d4d0      	bmi.n	8007976 <HAL_FDCAN_ActivateNotification+0x36>
 80079d4:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 80079d8:	d0d1      	beq.n	800797e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80079da:	0645      	lsls	r5, r0, #25
 80079dc:	d5cf      	bpl.n	800797e <HAL_FDCAN_ActivateNotification+0x3e>
 80079de:	e7ca      	b.n	8007976 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80079e0:	f011 0f38 	tst.w	r1, #56	; 0x38
 80079e4:	d001      	beq.n	80079ea <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80079e6:	0784      	lsls	r4, r0, #30
 80079e8:	d5be      	bpl.n	8007968 <HAL_FDCAN_ActivateNotification+0x28>
 80079ea:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 80079ee:	d117      	bne.n	8007a20 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80079f0:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 80079f4:	d001      	beq.n	80079fa <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80079f6:	0704      	lsls	r4, r0, #28
 80079f8:	d5b6      	bpl.n	8007968 <HAL_FDCAN_ActivateNotification+0x28>
 80079fa:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 80079fe:	d001      	beq.n	8007a04 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007a00:	06c4      	lsls	r4, r0, #27
 8007a02:	d5b1      	bpl.n	8007968 <HAL_FDCAN_ActivateNotification+0x28>
 8007a04:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8007a08:	d001      	beq.n	8007a0e <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007a0a:	0684      	lsls	r4, r0, #26
 8007a0c:	d5ac      	bpl.n	8007968 <HAL_FDCAN_ActivateNotification+0x28>
 8007a0e:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8007a12:	d0ad      	beq.n	8007970 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007a14:	0644      	lsls	r4, r0, #25
 8007a16:	d4ab      	bmi.n	8007970 <HAL_FDCAN_ActivateNotification+0x30>
 8007a18:	e7a6      	b.n	8007968 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007a1a:	0745      	lsls	r5, r0, #29
 8007a1c:	d4ab      	bmi.n	8007976 <HAL_FDCAN_ActivateNotification+0x36>
 8007a1e:	e7ca      	b.n	80079b6 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007a20:	0744      	lsls	r4, r0, #29
 8007a22:	d5a1      	bpl.n	8007968 <HAL_FDCAN_ActivateNotification+0x28>
 8007a24:	e7e4      	b.n	80079f0 <HAL_FDCAN_ActivateNotification+0xb0>
 8007a26:	bf00      	nop

08007a28 <HAL_FDCAN_TxEventFifoCallback>:
}
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <HAL_FDCAN_RxFifo1Callback>:
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop

08007a30 <HAL_FDCAN_TxFifoEmptyCallback>:
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop

08007a34 <HAL_FDCAN_TxBufferCompleteCallback>:
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop

08007a38 <HAL_FDCAN_TxBufferAbortCallback>:
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop

08007a3c <HAL_FDCAN_TimestampWraparoundCallback>:
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop

08007a40 <HAL_FDCAN_TimeoutOccurredCallback>:
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop

08007a44 <HAL_FDCAN_HighPriorityMessageCallback>:
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop

08007a48 <HAL_FDCAN_ErrorCallback>:
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop

08007a4c <HAL_FDCAN_ErrorStatusCallback>:
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <HAL_FDCAN_IRQHandler>:
{
 8007a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007a54:	6803      	ldr	r3, [r0, #0]
 8007a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007a58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a5a:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007a60:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007a62:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007a64:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007a6a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007a6c:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8007a6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007a70:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8007a72:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a76:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a7a:	0652      	lsls	r2, r2, #25
{
 8007a7c:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007a7e:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007a82:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007a86:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8007a8a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007a8e:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007a92:	d502      	bpl.n	8007a9a <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007a94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a96:	0651      	lsls	r1, r2, #25
 8007a98:	d473      	bmi.n	8007b82 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a9c:	05d2      	lsls	r2, r2, #23
 8007a9e:	d502      	bpl.n	8007aa6 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aa2:	05d0      	lsls	r0, r2, #23
 8007aa4:	d45d      	bmi.n	8007b62 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8007aa6:	f1b9 0f00 	cmp.w	r9, #0
 8007aaa:	d14a      	bne.n	8007b42 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8007aac:	f1b8 0f00 	cmp.w	r8, #0
 8007ab0:	d137      	bne.n	8007b22 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8007ab2:	2f00      	cmp	r7, #0
 8007ab4:	d13e      	bne.n	8007b34 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ab8:	0591      	lsls	r1, r2, #22
 8007aba:	d502      	bpl.n	8007ac2 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007abe:	0592      	lsls	r2, r2, #22
 8007ac0:	d475      	bmi.n	8007bae <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ac4:	0617      	lsls	r7, r2, #24
 8007ac6:	d502      	bpl.n	8007ace <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aca:	0610      	lsls	r0, r2, #24
 8007acc:	d477      	bmi.n	8007bbe <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ad0:	0491      	lsls	r1, r2, #18
 8007ad2:	d502      	bpl.n	8007ada <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ad6:	0492      	lsls	r2, r2, #18
 8007ad8:	d459      	bmi.n	8007b8e <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007adc:	0417      	lsls	r7, r2, #16
 8007ade:	d502      	bpl.n	8007ae6 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae2:	0410      	lsls	r0, r2, #16
 8007ae4:	d45b      	bmi.n	8007b9e <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007ae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ae8:	0451      	lsls	r1, r2, #17
 8007aea:	d509      	bpl.n	8007b00 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aee:	0452      	lsls	r2, r2, #17
 8007af0:	d506      	bpl.n	8007b00 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007af6:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007af8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007afa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007afe:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8007b00:	b94e      	cbnz	r6, 8007b16 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8007b02:	b125      	cbz	r5, 8007b0e <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8007b08:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007b0a:	432b      	orrs	r3, r5
 8007b0c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007b0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007b10:	bb13      	cbnz	r3, 8007b58 <HAL_FDCAN_IRQHandler+0x108>
}
 8007b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007b16:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff ff96 	bl	8007a4c <HAL_FDCAN_ErrorStatusCallback>
 8007b20:	e7ef      	b.n	8007b02 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007b22:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007b26:	4641      	mov	r1, r8
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7fa f8b1 	bl	8001c90 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007b2e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	d0c0      	beq.n	8007ab6 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007b34:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007b36:	4639      	mov	r1, r7
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f7ff ff77 	bl	8007a2c <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	e7b9      	b.n	8007ab6 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007b42:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007b46:	4649      	mov	r1, r9
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f7ff ff6d 	bl	8007a28 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007b4e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8007b50:	f1b8 0f00 	cmp.w	r8, #0
 8007b54:	d0ad      	beq.n	8007ab2 <HAL_FDCAN_IRQHandler+0x62>
 8007b56:	e7e4      	b.n	8007b22 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff ff75 	bl	8007a48 <HAL_FDCAN_ErrorCallback>
}
 8007b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007b62:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007b66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007b6a:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b70:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff ff60 	bl	8007a38 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007b78:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8007b7a:	f1b9 0f00 	cmp.w	r9, #0
 8007b7e:	d095      	beq.n	8007aac <HAL_FDCAN_IRQHandler+0x5c>
 8007b80:	e7df      	b.n	8007b42 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007b82:	2240      	movs	r2, #64	; 0x40
 8007b84:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007b86:	f7ff ff5d 	bl	8007a44 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	e785      	b.n	8007a9a <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b92:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff ff51 	bl	8007a3c <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	e79d      	b.n	8007ada <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007b9e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007ba2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f7ff ff4b 	bl	8007a40 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	e79b      	b.n	8007ae6 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7ff ff3b 	bl	8007a30 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	e781      	b.n	8007ac2 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007bbe:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007bc2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007bc6:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007bc8:	2280      	movs	r2, #128	; 0x80
 8007bca:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7ff ff31 	bl	8007a34 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	e77b      	b.n	8007ace <HAL_FDCAN_IRQHandler+0x7e>
 8007bd6:	bf00      	nop

08007bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007bdc:	680c      	ldr	r4, [r1, #0]
{
 8007bde:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007be0:	2c00      	cmp	r4, #0
 8007be2:	d07d      	beq.n	8007ce0 <HAL_GPIO_Init+0x108>
 8007be4:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007be8:	4e71      	ldr	r6, [pc, #452]	; (8007db0 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8007bea:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bec:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bf0:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bf2:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8007bf6:	ea17 0a04 	ands.w	sl, r7, r4
 8007bfa:	d06b      	beq.n	8007cd4 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007bfc:	f8de 1004 	ldr.w	r1, [lr, #4]
 8007c00:	f001 0203 	and.w	r2, r1, #3
 8007c04:	1e55      	subs	r5, r2, #1
 8007c06:	2d01      	cmp	r5, #1
 8007c08:	d96d      	bls.n	8007ce6 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c0a:	2a03      	cmp	r2, #3
 8007c0c:	f040 80b1 	bne.w	8007d72 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c10:	fa02 f20c 	lsl.w	r2, r2, ip
 8007c14:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8007c16:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c18:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c1a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c1c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8007c20:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c22:	d057      	beq.n	8007cd4 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c24:	4d63      	ldr	r5, [pc, #396]	; (8007db4 <HAL_GPIO_Init+0x1dc>)
 8007c26:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007c28:	f042 0201 	orr.w	r2, r2, #1
 8007c2c:	662a      	str	r2, [r5, #96]	; 0x60
 8007c2e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007c30:	f002 0201 	and.w	r2, r2, #1
 8007c34:	9203      	str	r2, [sp, #12]
 8007c36:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007c38:	f023 0203 	bic.w	r2, r3, #3
 8007c3c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007c40:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c44:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8007c48:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c4a:	00bf      	lsls	r7, r7, #2
 8007c4c:	f04f 080f 	mov.w	r8, #15
 8007c50:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c54:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c58:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c5c:	d01a      	beq.n	8007c94 <HAL_GPIO_Init+0xbc>
 8007c5e:	4d56      	ldr	r5, [pc, #344]	; (8007db8 <HAL_GPIO_Init+0x1e0>)
 8007c60:	42a8      	cmp	r0, r5
 8007c62:	f000 8092 	beq.w	8007d8a <HAL_GPIO_Init+0x1b2>
 8007c66:	4d55      	ldr	r5, [pc, #340]	; (8007dbc <HAL_GPIO_Init+0x1e4>)
 8007c68:	42a8      	cmp	r0, r5
 8007c6a:	f000 8093 	beq.w	8007d94 <HAL_GPIO_Init+0x1bc>
 8007c6e:	4d54      	ldr	r5, [pc, #336]	; (8007dc0 <HAL_GPIO_Init+0x1e8>)
 8007c70:	42a8      	cmp	r0, r5
 8007c72:	f000 8083 	beq.w	8007d7c <HAL_GPIO_Init+0x1a4>
 8007c76:	4d53      	ldr	r5, [pc, #332]	; (8007dc4 <HAL_GPIO_Init+0x1ec>)
 8007c78:	42a8      	cmp	r0, r5
 8007c7a:	f000 8092 	beq.w	8007da2 <HAL_GPIO_Init+0x1ca>
 8007c7e:	4d52      	ldr	r5, [pc, #328]	; (8007dc8 <HAL_GPIO_Init+0x1f0>)
 8007c80:	42a8      	cmp	r0, r5
 8007c82:	bf0c      	ite	eq
 8007c84:	f04f 0805 	moveq.w	r8, #5
 8007c88:	f04f 0806 	movne.w	r8, #6
 8007c8c:	fa08 f707 	lsl.w	r7, r8, r7
 8007c90:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c94:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8007c98:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8007c9a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c9e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8007ca0:	bf54      	ite	pl
 8007ca2:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007ca4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8007ca8:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8007caa:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cac:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8007cae:	bf54      	ite	pl
 8007cb0:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007cb2:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8007cb6:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8007cb8:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007cba:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8007cbc:	bf54      	ite	pl
 8007cbe:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007cc0:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8007cc4:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007cc6:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cc8:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8007cca:	bf54      	ite	pl
 8007ccc:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007cce:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8007cd2:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8007cd4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007cd6:	fa34 f203 	lsrs.w	r2, r4, r3
 8007cda:	f10c 0c02 	add.w	ip, ip, #2
 8007cde:	d188      	bne.n	8007bf2 <HAL_GPIO_Init+0x1a>
  }
}
 8007ce0:	b005      	add	sp, #20
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007ce6:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cea:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cee:	f04f 0803 	mov.w	r8, #3
 8007cf2:	fa08 f80c 	lsl.w	r8, r8, ip
 8007cf6:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cfa:	fa05 f50c 	lsl.w	r5, r5, ip
 8007cfe:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8007d02:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d04:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8007d08:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d0c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d10:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8007d14:	409f      	lsls	r7, r3
 8007d16:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8007d1a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8007d1c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d1e:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d22:	f8de 7008 	ldr.w	r7, [lr, #8]
 8007d26:	fa07 f70c 	lsl.w	r7, r7, ip
 8007d2a:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d2e:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8007d30:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d32:	fa02 f20c 	lsl.w	r2, r2, ip
 8007d36:	f47f af6e 	bne.w	8007c16 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8007d3a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8007d3e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d42:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8007d46:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8007d4a:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d4c:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d50:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d54:	fa07 f708 	lsl.w	r7, r7, r8
 8007d58:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d5a:	270f      	movs	r7, #15
 8007d5c:	fa07 f808 	lsl.w	r8, r7, r8
 8007d60:	9f00      	ldr	r7, [sp, #0]
 8007d62:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d66:	9f01      	ldr	r7, [sp, #4]
 8007d68:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8007d6c:	f8c9 7020 	str.w	r7, [r9, #32]
 8007d70:	e751      	b.n	8007c16 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d72:	2503      	movs	r5, #3
 8007d74:	fa05 f50c 	lsl.w	r5, r5, ip
 8007d78:	43ed      	mvns	r5, r5
 8007d7a:	e7cf      	b.n	8007d1c <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d7c:	f04f 0803 	mov.w	r8, #3
 8007d80:	fa08 f707 	lsl.w	r7, r8, r7
 8007d84:	ea49 0907 	orr.w	r9, r9, r7
 8007d88:	e784      	b.n	8007c94 <HAL_GPIO_Init+0xbc>
 8007d8a:	fa0b f707 	lsl.w	r7, fp, r7
 8007d8e:	ea49 0907 	orr.w	r9, r9, r7
 8007d92:	e77f      	b.n	8007c94 <HAL_GPIO_Init+0xbc>
 8007d94:	f04f 0802 	mov.w	r8, #2
 8007d98:	fa08 f707 	lsl.w	r7, r8, r7
 8007d9c:	ea49 0907 	orr.w	r9, r9, r7
 8007da0:	e778      	b.n	8007c94 <HAL_GPIO_Init+0xbc>
 8007da2:	f04f 0804 	mov.w	r8, #4
 8007da6:	fa08 f707 	lsl.w	r7, r8, r7
 8007daa:	ea49 0907 	orr.w	r9, r9, r7
 8007dae:	e771      	b.n	8007c94 <HAL_GPIO_Init+0xbc>
 8007db0:	40010400 	.word	0x40010400
 8007db4:	40021000 	.word	0x40021000
 8007db8:	48000400 	.word	0x48000400
 8007dbc:	48000800 	.word	0x48000800
 8007dc0:	48000c00 	.word	0x48000c00
 8007dc4:	48001000 	.word	0x48001000
 8007dc8:	48001400 	.word	0x48001400

08007dcc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007dcc:	6903      	ldr	r3, [r0, #16]
 8007dce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007dd0:	bf14      	ite	ne
 8007dd2:	2001      	movne	r0, #1
 8007dd4:	2000      	moveq	r0, #0
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dd8:	b10a      	cbz	r2, 8007dde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007dda:	6181      	str	r1, [r0, #24]
 8007ddc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007dde:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop

08007de4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007de4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007de6:	ea01 0203 	and.w	r2, r1, r3
 8007dea:	ea21 0103 	bic.w	r1, r1, r3
 8007dee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007df2:	6181      	str	r1, [r0, #24]
}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop

08007df8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007df8:	4a37      	ldr	r2, [pc, #220]	; (8007ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007dfa:	b960      	cbnz	r0, 8007e16 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007dfc:	6813      	ldr	r3, [r2, #0]
 8007dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e06:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e0a:	d01d      	beq.n	8007e48 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007e14:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e16:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007e1a:	d007      	beq.n	8007e2c <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007e1c:	6813      	ldr	r3, [r2, #0]
 8007e1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007e26:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007e28:	6013      	str	r3, [r2, #0]
}
 8007e2a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e2c:	6813      	ldr	r3, [r2, #0]
 8007e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e36:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e3a:	d02b      	beq.n	8007e94 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8007e40:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007e46:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e50:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e52:	4822      	ldr	r0, [pc, #136]	; (8007edc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007e54:	4922      	ldr	r1, [pc, #136]	; (8007ee0 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e5e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e60:	6803      	ldr	r3, [r0, #0]
 8007e62:	2032      	movs	r0, #50	; 0x32
 8007e64:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e68:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e6a:	fba1 1303 	umull	r1, r3, r1, r3
 8007e6e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e70:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e72:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e76:	d506      	bpl.n	8007e86 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007e78:	e000      	b.n	8007e7c <HAL_PWREx_ControlVoltageScaling+0x84>
 8007e7a:	b123      	cbz	r3, 8007e86 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007e7c:	6951      	ldr	r1, [r2, #20]
 8007e7e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007e80:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e84:	d4f9      	bmi.n	8007e7a <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8007e8c:	bf54      	ite	pl
 8007e8e:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8007e90:	2003      	movmi	r0, #3
 8007e92:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e9c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e9e:	480f      	ldr	r0, [pc, #60]	; (8007edc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8007ea0:	490f      	ldr	r1, [pc, #60]	; (8007ee0 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007eaa:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007eac:	6803      	ldr	r3, [r0, #0]
 8007eae:	2032      	movs	r0, #50	; 0x32
 8007eb0:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eb4:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007eb6:	fba1 1303 	umull	r1, r3, r1, r3
 8007eba:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ebc:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ebe:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ec2:	d5e0      	bpl.n	8007e86 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007ec4:	e001      	b.n	8007eca <HAL_PWREx_ControlVoltageScaling+0xd2>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0dd      	beq.n	8007e86 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007eca:	6951      	ldr	r1, [r2, #20]
 8007ecc:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007ece:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ed2:	d5d8      	bpl.n	8007e86 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8007ed4:	e7f7      	b.n	8007ec6 <HAL_PWREx_ControlVoltageScaling+0xce>
 8007ed6:	bf00      	nop
 8007ed8:	40007000 	.word	0x40007000
 8007edc:	20000008 	.word	0x20000008
 8007ee0:	431bde83 	.word	0x431bde83

08007ee4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ee4:	4a02      	ldr	r2, [pc, #8]	; (8007ef0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007ee6:	6893      	ldr	r3, [r2, #8]
 8007ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eec:	6093      	str	r3, [r2, #8]
}
 8007eee:	4770      	bx	lr
 8007ef0:	40007000 	.word	0x40007000

08007ef4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f000 81c3 	beq.w	8008280 <HAL_RCC_OscConfig+0x38c>
{
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007efe:	6803      	ldr	r3, [r0, #0]
 8007f00:	07d9      	lsls	r1, r3, #31
{
 8007f02:	b082      	sub	sp, #8
 8007f04:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f06:	d52d      	bpl.n	8007f64 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f08:	49a6      	ldr	r1, [pc, #664]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 8007f0a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f0c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f0e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007f12:	2a0c      	cmp	r2, #12
 8007f14:	f000 810a 	beq.w	800812c <HAL_RCC_OscConfig+0x238>
 8007f18:	2a08      	cmp	r2, #8
 8007f1a:	f000 810c 	beq.w	8008136 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f1e:	6863      	ldr	r3, [r4, #4]
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f24:	f000 8133 	beq.w	800818e <HAL_RCC_OscConfig+0x29a>
 8007f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f2c:	f000 819b 	beq.w	8008266 <HAL_RCC_OscConfig+0x372>
 8007f30:	4d9c      	ldr	r5, [pc, #624]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 8007f32:	682a      	ldr	r2, [r5, #0]
 8007f34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	682a      	ldr	r2, [r5, #0]
 8007f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f40:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 8128 	bne.w	8008198 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fa fe3e 	bl	8002bc8 <HAL_GetTick>
 8007f4c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f4e:	e005      	b.n	8007f5c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f50:	f7fa fe3a 	bl	8002bc8 <HAL_GetTick>
 8007f54:	1b80      	subs	r0, r0, r6
 8007f56:	2864      	cmp	r0, #100	; 0x64
 8007f58:	f200 8142 	bhi.w	80081e0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	039f      	lsls	r7, r3, #14
 8007f60:	d4f6      	bmi.n	8007f50 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	079e      	lsls	r6, r3, #30
 8007f66:	d528      	bpl.n	8007fba <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f68:	4a8e      	ldr	r2, [pc, #568]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 8007f6a:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f6c:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f6e:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f72:	2b0c      	cmp	r3, #12
 8007f74:	f000 80ec 	beq.w	8008150 <HAL_RCC_OscConfig+0x25c>
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	f000 80ee 	beq.w	800815a <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f7e:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f80:	4d88      	ldr	r5, [pc, #544]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 811d 	beq.w	80081c2 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f8e:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f90:	f7fa fe1a 	bl	8002bc8 <HAL_GetTick>
 8007f94:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f96:	e005      	b.n	8007fa4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f98:	f7fa fe16 	bl	8002bc8 <HAL_GetTick>
 8007f9c:	1b80      	subs	r0, r0, r6
 8007f9e:	2802      	cmp	r0, #2
 8007fa0:	f200 811e 	bhi.w	80081e0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	0558      	lsls	r0, r3, #21
 8007fa8:	d5f6      	bpl.n	8007f98 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007faa:	686b      	ldr	r3, [r5, #4]
 8007fac:	6922      	ldr	r2, [r4, #16]
 8007fae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007fb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007fb6:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	071a      	lsls	r2, r3, #28
 8007fbc:	d519      	bpl.n	8007ff2 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fbe:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fc0:	4d78      	ldr	r5, [pc, #480]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 809e 	beq.w	8008104 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8007fc8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007fcc:	f043 0301 	orr.w	r3, r3, #1
 8007fd0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd4:	f7fa fdf8 	bl	8002bc8 <HAL_GetTick>
 8007fd8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fda:	e005      	b.n	8007fe8 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fdc:	f7fa fdf4 	bl	8002bc8 <HAL_GetTick>
 8007fe0:	1b80      	subs	r0, r0, r6
 8007fe2:	2802      	cmp	r0, #2
 8007fe4:	f200 80fc 	bhi.w	80081e0 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007fe8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007fec:	079f      	lsls	r7, r3, #30
 8007fee:	d5f5      	bpl.n	8007fdc <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ff0:	6823      	ldr	r3, [r4, #0]
 8007ff2:	0759      	lsls	r1, r3, #29
 8007ff4:	d541      	bpl.n	800807a <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007ff6:	4b6b      	ldr	r3, [pc, #428]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 8007ff8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ffa:	00d2      	lsls	r2, r2, #3
 8007ffc:	f100 80f4 	bmi.w	80081e8 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008000:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008006:	659a      	str	r2, [r3, #88]	; 0x58
 8008008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008012:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008014:	4e64      	ldr	r6, [pc, #400]	; (80081a8 <HAL_RCC_OscConfig+0x2b4>)
 8008016:	6833      	ldr	r3, [r6, #0]
 8008018:	05df      	lsls	r7, r3, #23
 800801a:	f140 8113 	bpl.w	8008244 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	2b01      	cmp	r3, #1
 8008022:	f000 80e3 	beq.w	80081ec <HAL_RCC_OscConfig+0x2f8>
 8008026:	2b05      	cmp	r3, #5
 8008028:	f000 8169 	beq.w	80082fe <HAL_RCC_OscConfig+0x40a>
 800802c:	4e5d      	ldr	r6, [pc, #372]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 800802e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8008032:	f022 0201 	bic.w	r2, r2, #1
 8008036:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800803a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800803e:	f022 0204 	bic.w	r2, r2, #4
 8008042:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008046:	2b00      	cmp	r3, #0
 8008048:	f040 80d7 	bne.w	80081fa <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804c:	f7fa fdbc 	bl	8002bc8 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008050:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008054:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008056:	e005      	b.n	8008064 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008058:	f7fa fdb6 	bl	8002bc8 <HAL_GetTick>
 800805c:	1bc0      	subs	r0, r0, r7
 800805e:	4540      	cmp	r0, r8
 8008060:	f200 80be 	bhi.w	80081e0 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008064:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8008068:	079a      	lsls	r2, r3, #30
 800806a:	d4f5      	bmi.n	8008058 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800806c:	b125      	cbz	r5, 8008078 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800806e:	4a4d      	ldr	r2, [pc, #308]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 8008070:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008076:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	069b      	lsls	r3, r3, #26
 800807c:	d518      	bpl.n	80080b0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800807e:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008080:	4d48      	ldr	r5, [pc, #288]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80ca 	beq.w	800821c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8008088:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008094:	f7fa fd98 	bl	8002bc8 <HAL_GetTick>
 8008098:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800809a:	e005      	b.n	80080a8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800809c:	f7fa fd94 	bl	8002bc8 <HAL_GetTick>
 80080a0:	1b80      	subs	r0, r0, r6
 80080a2:	2802      	cmp	r0, #2
 80080a4:	f200 809c 	bhi.w	80081e0 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080a8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80080ac:	079f      	lsls	r7, r3, #30
 80080ae:	d5f5      	bpl.n	800809c <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080b0:	69e0      	ldr	r0, [r4, #28]
 80080b2:	b318      	cbz	r0, 80080fc <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080b4:	4d3b      	ldr	r5, [pc, #236]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 80080b6:	68ab      	ldr	r3, [r5, #8]
 80080b8:	f003 030c 	and.w	r3, r3, #12
 80080bc:	2b0c      	cmp	r3, #12
 80080be:	f000 812c 	beq.w	800831a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080c4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80080c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ca:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080cc:	f000 80da 	beq.w	8008284 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80080d0:	68eb      	ldr	r3, [r5, #12]
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80080d8:	68eb      	ldr	r3, [r5, #12]
 80080da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80080de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e2:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e4:	f7fa fd70 	bl	8002bc8 <HAL_GetTick>
 80080e8:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080ea:	e004      	b.n	80080f6 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ec:	f7fa fd6c 	bl	8002bc8 <HAL_GetTick>
 80080f0:	1b00      	subs	r0, r0, r4
 80080f2:	2802      	cmp	r0, #2
 80080f4:	d874      	bhi.n	80081e0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080f6:	682b      	ldr	r3, [r5, #0]
 80080f8:	019b      	lsls	r3, r3, #6
 80080fa:	d4f7      	bmi.n	80080ec <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 80080fc:	2000      	movs	r0, #0
}
 80080fe:	b002      	add	sp, #8
 8008100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8008104:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008108:	f023 0301 	bic.w	r3, r3, #1
 800810c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8008110:	f7fa fd5a 	bl	8002bc8 <HAL_GetTick>
 8008114:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008116:	e004      	b.n	8008122 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008118:	f7fa fd56 	bl	8002bc8 <HAL_GetTick>
 800811c:	1b80      	subs	r0, r0, r6
 800811e:	2802      	cmp	r0, #2
 8008120:	d85e      	bhi.n	80081e0 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008122:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8008126:	0798      	lsls	r0, r3, #30
 8008128:	d4f6      	bmi.n	8008118 <HAL_RCC_OscConfig+0x224>
 800812a:	e761      	b.n	8007ff0 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800812c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008130:	2903      	cmp	r1, #3
 8008132:	f47f aef4 	bne.w	8007f1e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008136:	4a1b      	ldr	r2, [pc, #108]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 8008138:	6812      	ldr	r2, [r2, #0]
 800813a:	0392      	lsls	r2, r2, #14
 800813c:	f57f af12 	bpl.w	8007f64 <HAL_RCC_OscConfig+0x70>
 8008140:	6862      	ldr	r2, [r4, #4]
 8008142:	2a00      	cmp	r2, #0
 8008144:	f47f af0e 	bne.w	8007f64 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8008148:	2001      	movs	r0, #1
}
 800814a:	b002      	add	sp, #8
 800814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008150:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008154:	2a02      	cmp	r2, #2
 8008156:	f47f af12 	bne.w	8007f7e <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	055d      	lsls	r5, r3, #21
 8008160:	d502      	bpl.n	8008168 <HAL_RCC_OscConfig+0x274>
 8008162:	68e3      	ldr	r3, [r4, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0ef      	beq.n	8008148 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008168:	4a0e      	ldr	r2, [pc, #56]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 800816a:	6920      	ldr	r0, [r4, #16]
 800816c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800816e:	490f      	ldr	r1, [pc, #60]	; (80081ac <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008170:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008174:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008178:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800817a:	6808      	ldr	r0, [r1, #0]
 800817c:	f7fe f92e 	bl	80063dc <HAL_InitTick>
 8008180:	2800      	cmp	r0, #0
 8008182:	d1e1      	bne.n	8008148 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	071a      	lsls	r2, r3, #28
 8008188:	f57f af33 	bpl.w	8007ff2 <HAL_RCC_OscConfig+0xfe>
 800818c:	e717      	b.n	8007fbe <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800818e:	4a05      	ldr	r2, [pc, #20]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
 8008190:	6813      	ldr	r3, [r2, #0]
 8008192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008196:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008198:	f7fa fd16 	bl	8002bc8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800819c:	4e01      	ldr	r6, [pc, #4]	; (80081a4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800819e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081a0:	e00b      	b.n	80081ba <HAL_RCC_OscConfig+0x2c6>
 80081a2:	bf00      	nop
 80081a4:	40021000 	.word	0x40021000
 80081a8:	40007000 	.word	0x40007000
 80081ac:	20000010 	.word	0x20000010
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081b0:	f7fa fd0a 	bl	8002bc8 <HAL_GetTick>
 80081b4:	1b40      	subs	r0, r0, r5
 80081b6:	2864      	cmp	r0, #100	; 0x64
 80081b8:	d812      	bhi.n	80081e0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081ba:	6833      	ldr	r3, [r6, #0]
 80081bc:	039b      	lsls	r3, r3, #14
 80081be:	d5f7      	bpl.n	80081b0 <HAL_RCC_OscConfig+0x2bc>
 80081c0:	e6cf      	b.n	8007f62 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80081ca:	f7fa fcfd 	bl	8002bc8 <HAL_GetTick>
 80081ce:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	0559      	lsls	r1, r3, #21
 80081d4:	d5d6      	bpl.n	8008184 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081d6:	f7fa fcf7 	bl	8002bc8 <HAL_GetTick>
 80081da:	1b80      	subs	r0, r0, r6
 80081dc:	2802      	cmp	r0, #2
 80081de:	d9f7      	bls.n	80081d0 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 80081e0:	2003      	movs	r0, #3
}
 80081e2:	b002      	add	sp, #8
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80081e8:	2500      	movs	r5, #0
 80081ea:	e713      	b.n	8008014 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ec:	4a65      	ldr	r2, [pc, #404]	; (8008384 <HAL_RCC_OscConfig+0x490>)
 80081ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80081fa:	f7fa fce5 	bl	8002bc8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081fe:	4f61      	ldr	r7, [pc, #388]	; (8008384 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8008200:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008202:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008206:	e004      	b.n	8008212 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008208:	f7fa fcde 	bl	8002bc8 <HAL_GetTick>
 800820c:	1b80      	subs	r0, r0, r6
 800820e:	4540      	cmp	r0, r8
 8008210:	d8e6      	bhi.n	80081e0 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008216:	0799      	lsls	r1, r3, #30
 8008218:	d5f6      	bpl.n	8008208 <HAL_RCC_OscConfig+0x314>
 800821a:	e727      	b.n	800806c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800821c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8008228:	f7fa fcce 	bl	8002bc8 <HAL_GetTick>
 800822c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800822e:	e004      	b.n	800823a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008230:	f7fa fcca 	bl	8002bc8 <HAL_GetTick>
 8008234:	1b80      	subs	r0, r0, r6
 8008236:	2802      	cmp	r0, #2
 8008238:	d8d2      	bhi.n	80081e0 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800823a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800823e:	0798      	lsls	r0, r3, #30
 8008240:	d4f6      	bmi.n	8008230 <HAL_RCC_OscConfig+0x33c>
 8008242:	e735      	b.n	80080b0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008244:	6833      	ldr	r3, [r6, #0]
 8008246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800824c:	f7fa fcbc 	bl	8002bc8 <HAL_GetTick>
 8008250:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008252:	6833      	ldr	r3, [r6, #0]
 8008254:	05d8      	lsls	r0, r3, #23
 8008256:	f53f aee2 	bmi.w	800801e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825a:	f7fa fcb5 	bl	8002bc8 <HAL_GetTick>
 800825e:	1bc0      	subs	r0, r0, r7
 8008260:	2802      	cmp	r0, #2
 8008262:	d9f6      	bls.n	8008252 <HAL_RCC_OscConfig+0x35e>
 8008264:	e7bc      	b.n	80081e0 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800826a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800827c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800827e:	e78b      	b.n	8008198 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8008280:	2001      	movs	r0, #1
}
 8008282:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8008284:	f7fa fca0 	bl	8002bc8 <HAL_GetTick>
 8008288:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800828a:	e004      	b.n	8008296 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800828c:	f7fa fc9c 	bl	8002bc8 <HAL_GetTick>
 8008290:	1b80      	subs	r0, r0, r6
 8008292:	2802      	cmp	r0, #2
 8008294:	d8a4      	bhi.n	80081e0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008296:	682b      	ldr	r3, [r5, #0]
 8008298:	0199      	lsls	r1, r3, #6
 800829a:	d4f7      	bmi.n	800828c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800829c:	68e9      	ldr	r1, [r5, #12]
 800829e:	4b3a      	ldr	r3, [pc, #232]	; (8008388 <HAL_RCC_OscConfig+0x494>)
 80082a0:	6a22      	ldr	r2, [r4, #32]
 80082a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082a4:	4e37      	ldr	r6, [pc, #220]	; (8008384 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082a6:	400b      	ands	r3, r1
 80082a8:	4313      	orrs	r3, r2
 80082aa:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80082ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80082b2:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80082b6:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80082ba:	3801      	subs	r0, #1
 80082bc:	0849      	lsrs	r1, r1, #1
 80082be:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80082c2:	3901      	subs	r1, #1
 80082c4:	0852      	lsrs	r2, r2, #1
 80082c6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80082ca:	3a01      	subs	r2, #1
 80082cc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80082d0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082d8:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082da:	68eb      	ldr	r3, [r5, #12]
 80082dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082e0:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80082e2:	f7fa fc71 	bl	8002bc8 <HAL_GetTick>
 80082e6:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082e8:	e005      	b.n	80082f6 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ea:	f7fa fc6d 	bl	8002bc8 <HAL_GetTick>
 80082ee:	1b00      	subs	r0, r0, r4
 80082f0:	2802      	cmp	r0, #2
 80082f2:	f63f af75 	bhi.w	80081e0 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082f6:	6833      	ldr	r3, [r6, #0]
 80082f8:	019a      	lsls	r2, r3, #6
 80082fa:	d5f6      	bpl.n	80082ea <HAL_RCC_OscConfig+0x3f6>
 80082fc:	e6fe      	b.n	80080fc <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082fe:	4b21      	ldr	r3, [pc, #132]	; (8008384 <HAL_RCC_OscConfig+0x490>)
 8008300:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008304:	f042 0204 	orr.w	r2, r2, #4
 8008308:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800830c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008310:	f042 0201 	orr.w	r2, r2, #1
 8008314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008318:	e76f      	b.n	80081fa <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800831a:	2801      	cmp	r0, #1
 800831c:	f43f aeef 	beq.w	80080fe <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8008320:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008322:	6a22      	ldr	r2, [r4, #32]
 8008324:	f003 0103 	and.w	r1, r3, #3
 8008328:	4291      	cmp	r1, r2
 800832a:	f47f af0d 	bne.w	8008148 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800832e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008330:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008334:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008336:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800833a:	f47f af05 	bne.w	8008148 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800833e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008340:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008344:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008348:	f47f aefe 	bne.w	8008148 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800834c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800834e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008352:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8008356:	f47f aef7 	bne.w	8008148 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800835a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800835c:	0852      	lsrs	r2, r2, #1
 800835e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8008362:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008364:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008368:	f47f aeee 	bne.w	8008148 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800836c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800836e:	0852      	lsrs	r2, r2, #1
 8008370:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008374:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008376:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800837a:	bf14      	ite	ne
 800837c:	2001      	movne	r0, #1
 800837e:	2000      	moveq	r0, #0
 8008380:	e6bd      	b.n	80080fe <HAL_RCC_OscConfig+0x20a>
 8008382:	bf00      	nop
 8008384:	40021000 	.word	0x40021000
 8008388:	019f800c 	.word	0x019f800c

0800838c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800838c:	4b18      	ldr	r3, [pc, #96]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x64>)
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	f002 020c 	and.w	r2, r2, #12
 8008394:	2a04      	cmp	r2, #4
 8008396:	d026      	beq.n	80083e6 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	f002 020c 	and.w	r2, r2, #12
 800839e:	2a08      	cmp	r2, #8
 80083a0:	d023      	beq.n	80083ea <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	f002 020c 	and.w	r2, r2, #12
 80083a8:	2a0c      	cmp	r2, #12
 80083aa:	d001      	beq.n	80083b0 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80083ac:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80083ae:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083b0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083b2:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083b4:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083b6:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80083ba:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083bc:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083c0:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083c4:	bf0c      	ite	eq
 80083c6:	4b0b      	ldreq	r3, [pc, #44]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083c8:	4b0b      	ldrne	r3, [pc, #44]	; (80083f8 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083ca:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80083cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083d0:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <HAL_RCC_GetSysClockFreq+0x64>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80083dc:	3301      	adds	r3, #1
 80083de:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80083e0:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80083e4:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80083e6:	4804      	ldr	r0, [pc, #16]	; (80083f8 <HAL_RCC_GetSysClockFreq+0x6c>)
 80083e8:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80083ea:	4802      	ldr	r0, [pc, #8]	; (80083f4 <HAL_RCC_GetSysClockFreq+0x68>)
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40021000 	.word	0x40021000
 80083f4:	007a1200 	.word	0x007a1200
 80083f8:	00f42400 	.word	0x00f42400

080083fc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80083fc:	2800      	cmp	r0, #0
 80083fe:	f000 80ee 	beq.w	80085de <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008402:	4a78      	ldr	r2, [pc, #480]	; (80085e4 <HAL_RCC_ClockConfig+0x1e8>)
{
 8008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008408:	6813      	ldr	r3, [r2, #0]
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	428b      	cmp	r3, r1
 8008410:	460d      	mov	r5, r1
 8008412:	4604      	mov	r4, r0
 8008414:	d20c      	bcs.n	8008430 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008416:	6813      	ldr	r3, [r2, #0]
 8008418:	f023 030f 	bic.w	r3, r3, #15
 800841c:	430b      	orrs	r3, r1
 800841e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008420:	6813      	ldr	r3, [r2, #0]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	428b      	cmp	r3, r1
 8008428:	d002      	beq.n	8008430 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800842a:	2001      	movs	r0, #1
}
 800842c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	07df      	lsls	r7, r3, #31
 8008434:	d569      	bpl.n	800850a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008436:	6867      	ldr	r7, [r4, #4]
 8008438:	2f03      	cmp	r7, #3
 800843a:	f000 80a0 	beq.w	800857e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800843e:	4b6a      	ldr	r3, [pc, #424]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008440:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008442:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008444:	f000 8097 	beq.w	8008576 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008448:	055b      	lsls	r3, r3, #21
 800844a:	d5ee      	bpl.n	800842a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800844c:	f7ff ff9e 	bl	800838c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8008450:	4b66      	ldr	r3, [pc, #408]	; (80085ec <HAL_RCC_ClockConfig+0x1f0>)
 8008452:	4298      	cmp	r0, r3
 8008454:	f240 80c0 	bls.w	80085d8 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008458:	4a63      	ldr	r2, [pc, #396]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 800845a:	6893      	ldr	r3, [r2, #8]
 800845c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008464:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008466:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800846a:	4e5f      	ldr	r6, [pc, #380]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 800846c:	68b3      	ldr	r3, [r6, #8]
 800846e:	f023 0303 	bic.w	r3, r3, #3
 8008472:	433b      	orrs	r3, r7
 8008474:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008476:	f7fa fba7 	bl	8002bc8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800847a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800847e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008480:	e004      	b.n	800848c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008482:	f7fa fba1 	bl	8002bc8 <HAL_GetTick>
 8008486:	1bc0      	subs	r0, r0, r7
 8008488:	4540      	cmp	r0, r8
 800848a:	d871      	bhi.n	8008570 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800848c:	68b3      	ldr	r3, [r6, #8]
 800848e:	6862      	ldr	r2, [r4, #4]
 8008490:	f003 030c 	and.w	r3, r3, #12
 8008494:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008498:	d1f3      	bne.n	8008482 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	079f      	lsls	r7, r3, #30
 800849e:	d436      	bmi.n	800850e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80084a0:	f1b9 0f00 	cmp.w	r9, #0
 80084a4:	d003      	beq.n	80084ae <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80084a6:	68b3      	ldr	r3, [r6, #8]
 80084a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ac:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084ae:	4e4d      	ldr	r6, [pc, #308]	; (80085e4 <HAL_RCC_ClockConfig+0x1e8>)
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	42ab      	cmp	r3, r5
 80084b8:	d846      	bhi.n	8008548 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ba:	6823      	ldr	r3, [r4, #0]
 80084bc:	075a      	lsls	r2, r3, #29
 80084be:	d506      	bpl.n	80084ce <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084c0:	4949      	ldr	r1, [pc, #292]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 80084c2:	68e0      	ldr	r0, [r4, #12]
 80084c4:	688a      	ldr	r2, [r1, #8]
 80084c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084ca:	4302      	orrs	r2, r0
 80084cc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ce:	071b      	lsls	r3, r3, #28
 80084d0:	d507      	bpl.n	80084e2 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084d2:	4a45      	ldr	r2, [pc, #276]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 80084d4:	6921      	ldr	r1, [r4, #16]
 80084d6:	6893      	ldr	r3, [r2, #8]
 80084d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80084dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80084e0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084e2:	f7ff ff53 	bl	800838c <HAL_RCC_GetSysClockFreq>
 80084e6:	4a40      	ldr	r2, [pc, #256]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 80084e8:	4c41      	ldr	r4, [pc, #260]	; (80085f0 <HAL_RCC_ClockConfig+0x1f4>)
 80084ea:	6892      	ldr	r2, [r2, #8]
 80084ec:	4941      	ldr	r1, [pc, #260]	; (80085f4 <HAL_RCC_ClockConfig+0x1f8>)
 80084ee:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80084f2:	4603      	mov	r3, r0
 80084f4:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80084f6:	4840      	ldr	r0, [pc, #256]	; (80085f8 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084f8:	f002 021f 	and.w	r2, r2, #31
 80084fc:	40d3      	lsrs	r3, r2
 80084fe:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8008500:	6800      	ldr	r0, [r0, #0]
}
 8008502:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8008506:	f7fd bf69 	b.w	80063dc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800850a:	079e      	lsls	r6, r3, #30
 800850c:	d5cf      	bpl.n	80084ae <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800850e:	0758      	lsls	r0, r3, #29
 8008510:	d504      	bpl.n	800851c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008512:	4935      	ldr	r1, [pc, #212]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008514:	688a      	ldr	r2, [r1, #8]
 8008516:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800851a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800851c:	0719      	lsls	r1, r3, #28
 800851e:	d506      	bpl.n	800852e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008520:	4a31      	ldr	r2, [pc, #196]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008522:	6893      	ldr	r3, [r2, #8]
 8008524:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008528:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800852c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800852e:	4a2e      	ldr	r2, [pc, #184]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008530:	68a1      	ldr	r1, [r4, #8]
 8008532:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008534:	4e2b      	ldr	r6, [pc, #172]	; (80085e4 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800853a:	430b      	orrs	r3, r1
 800853c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800853e:	6833      	ldr	r3, [r6, #0]
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	42ab      	cmp	r3, r5
 8008546:	d9b8      	bls.n	80084ba <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008548:	6833      	ldr	r3, [r6, #0]
 800854a:	f023 030f 	bic.w	r3, r3, #15
 800854e:	432b      	orrs	r3, r5
 8008550:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008552:	f7fa fb39 	bl	8002bc8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008556:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800855a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800855c:	6833      	ldr	r3, [r6, #0]
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	42ab      	cmp	r3, r5
 8008564:	d0a9      	beq.n	80084ba <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008566:	f7fa fb2f 	bl	8002bc8 <HAL_GetTick>
 800856a:	1bc0      	subs	r0, r0, r7
 800856c:	4540      	cmp	r0, r8
 800856e:	d9f5      	bls.n	800855c <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8008570:	2003      	movs	r0, #3
}
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008576:	039a      	lsls	r2, r3, #14
 8008578:	f53f af68 	bmi.w	800844c <HAL_RCC_ClockConfig+0x50>
 800857c:	e755      	b.n	800842a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800857e:	4a1a      	ldr	r2, [pc, #104]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
 8008580:	6811      	ldr	r1, [r2, #0]
 8008582:	0188      	lsls	r0, r1, #6
 8008584:	f57f af51 	bpl.w	800842a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008588:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800858a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800858c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800858e:	4e17      	ldr	r6, [pc, #92]	; (80085ec <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008590:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8008594:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008596:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800859a:	bf0c      	ite	eq
 800859c:	4817      	ldreq	r0, [pc, #92]	; (80085fc <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800859e:	4818      	ldrne	r0, [pc, #96]	; (8008600 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80085a0:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085a2:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085a6:	4810      	ldr	r0, [pc, #64]	; (80085e8 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085a8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80085ac:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085b0:	68c1      	ldr	r1, [r0, #12]
 80085b2:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80085b6:	3101      	adds	r1, #1
 80085b8:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 80085ba:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80085be:	42b2      	cmp	r2, r6
 80085c0:	d90a      	bls.n	80085d8 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80085c2:	6882      	ldr	r2, [r0, #8]
 80085c4:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80085c8:	f43f af46 	beq.w	8008458 <HAL_RCC_ClockConfig+0x5c>
 80085cc:	0799      	lsls	r1, r3, #30
 80085ce:	d503      	bpl.n	80085d8 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80085d0:	68a3      	ldr	r3, [r4, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f43f af40 	beq.w	8008458 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80085d8:	f04f 0900 	mov.w	r9, #0
 80085dc:	e745      	b.n	800846a <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80085de:	2001      	movs	r0, #1
}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40022000 	.word	0x40022000
 80085e8:	40021000 	.word	0x40021000
 80085ec:	04c4b400 	.word	0x04c4b400
 80085f0:	0800fcf8 	.word	0x0800fcf8
 80085f4:	20000008 	.word	0x20000008
 80085f8:	20000010 	.word	0x20000010
 80085fc:	007a1200 	.word	0x007a1200
 8008600:	00f42400 	.word	0x00f42400

08008604 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_RCC_GetPCLK1Freq+0x18>)
 8008606:	4a06      	ldr	r2, [pc, #24]	; (8008620 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008608:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800860a:	4906      	ldr	r1, [pc, #24]	; (8008624 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800860c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008610:	6808      	ldr	r0, [r1, #0]
 8008612:	5cd3      	ldrb	r3, [r2, r3]
 8008614:	f003 031f 	and.w	r3, r3, #31
}
 8008618:	40d8      	lsrs	r0, r3
 800861a:	4770      	bx	lr
 800861c:	40021000 	.word	0x40021000
 8008620:	0800fd08 	.word	0x0800fd08
 8008624:	20000008 	.word	0x20000008

08008628 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <HAL_RCC_GetPCLK2Freq+0x18>)
 800862a:	4a06      	ldr	r2, [pc, #24]	; (8008644 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800862c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800862e:	4906      	ldr	r1, [pc, #24]	; (8008648 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008630:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008634:	6808      	ldr	r0, [r1, #0]
 8008636:	5cd3      	ldrb	r3, [r2, r3]
 8008638:	f003 031f 	and.w	r3, r3, #31
}
 800863c:	40d8      	lsrs	r0, r3
 800863e:	4770      	bx	lr
 8008640:	40021000 	.word	0x40021000
 8008644:	0800fd08 	.word	0x0800fd08
 8008648:	20000008 	.word	0x20000008

0800864c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800864c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008650:	6803      	ldr	r3, [r0, #0]
{
 8008652:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008654:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8008658:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800865a:	d056      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800865c:	4bac      	ldr	r3, [pc, #688]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800865e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008660:	00d5      	lsls	r5, r2, #3
 8008662:	f140 813e 	bpl.w	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8008666:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008668:	4daa      	ldr	r5, [pc, #680]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008670:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008672:	f7fa faa9 	bl	8002bc8 <HAL_GetTick>
 8008676:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008678:	e005      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800867a:	f7fa faa5 	bl	8002bc8 <HAL_GetTick>
 800867e:	1b83      	subs	r3, r0, r6
 8008680:	2b02      	cmp	r3, #2
 8008682:	f200 8139 	bhi.w	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008686:	682b      	ldr	r3, [r5, #0]
 8008688:	05d8      	lsls	r0, r3, #23
 800868a:	d5f6      	bpl.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800868c:	4da0      	ldr	r5, [pc, #640]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800868e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008692:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008696:	d027      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8008698:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800869a:	429a      	cmp	r2, r3
 800869c:	d025      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800869e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086a2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80086a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086aa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80086b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086b6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80086ba:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086be:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80086c0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086c4:	f140 8148 	bpl.w	8008958 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c8:	f7fa fa7e 	bl	8002bc8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086cc:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80086d0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086d2:	e005      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086d4:	f7fa fa78 	bl	8002bc8 <HAL_GetTick>
 80086d8:	1b80      	subs	r0, r0, r6
 80086da:	4540      	cmp	r0, r8
 80086dc:	f200 810c 	bhi.w	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086e0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80086e4:	079b      	lsls	r3, r3, #30
 80086e6:	d5f5      	bpl.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086ea:	4989      	ldr	r1, [pc, #548]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80086f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086fa:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086fc:	b127      	cbz	r7, 8008708 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086fe:	4a84      	ldr	r2, [pc, #528]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008700:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008706:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	07dd      	lsls	r5, r3, #31
 800870c:	d508      	bpl.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800870e:	4980      	ldr	r1, [pc, #512]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008710:	6865      	ldr	r5, [r4, #4]
 8008712:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008716:	f022 0203 	bic.w	r2, r2, #3
 800871a:	432a      	orrs	r2, r5
 800871c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008720:	0799      	lsls	r1, r3, #30
 8008722:	d508      	bpl.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008724:	497a      	ldr	r1, [pc, #488]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008726:	68a5      	ldr	r5, [r4, #8]
 8008728:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800872c:	f022 020c 	bic.w	r2, r2, #12
 8008730:	432a      	orrs	r2, r5
 8008732:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008736:	075a      	lsls	r2, r3, #29
 8008738:	d508      	bpl.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800873a:	4975      	ldr	r1, [pc, #468]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800873c:	68e5      	ldr	r5, [r4, #12]
 800873e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008742:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008746:	432a      	orrs	r2, r5
 8008748:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800874c:	071f      	lsls	r7, r3, #28
 800874e:	d508      	bpl.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008750:	496f      	ldr	r1, [pc, #444]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008752:	6925      	ldr	r5, [r4, #16]
 8008754:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008758:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800875c:	432a      	orrs	r2, r5
 800875e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008762:	06de      	lsls	r6, r3, #27
 8008764:	d508      	bpl.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008766:	496a      	ldr	r1, [pc, #424]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008768:	6965      	ldr	r5, [r4, #20]
 800876a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800876e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008772:	432a      	orrs	r2, r5
 8008774:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008778:	069d      	lsls	r5, r3, #26
 800877a:	d508      	bpl.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800877c:	4964      	ldr	r1, [pc, #400]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800877e:	69a5      	ldr	r5, [r4, #24]
 8008780:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008784:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008788:	432a      	orrs	r2, r5
 800878a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800878e:	0659      	lsls	r1, r3, #25
 8008790:	d508      	bpl.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008792:	495f      	ldr	r1, [pc, #380]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008794:	69e5      	ldr	r5, [r4, #28]
 8008796:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800879a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800879e:	432a      	orrs	r2, r5
 80087a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087a4:	061a      	lsls	r2, r3, #24
 80087a6:	d508      	bpl.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80087a8:	4959      	ldr	r1, [pc, #356]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087aa:	6a25      	ldr	r5, [r4, #32]
 80087ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80087b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80087b4:	432a      	orrs	r2, r5
 80087b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087ba:	05df      	lsls	r7, r3, #23
 80087bc:	d508      	bpl.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087be:	4954      	ldr	r1, [pc, #336]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80087c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80087c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80087ca:	432a      	orrs	r2, r5
 80087cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087d0:	039e      	lsls	r6, r3, #14
 80087d2:	d508      	bpl.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087d4:	494e      	ldr	r1, [pc, #312]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087d6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80087d8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80087dc:	f022 0203 	bic.w	r2, r2, #3
 80087e0:	432a      	orrs	r2, r5
 80087e2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087e6:	059d      	lsls	r5, r3, #22
 80087e8:	d508      	bpl.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ea:	4949      	ldr	r1, [pc, #292]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087ec:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80087ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80087f2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80087f6:	432a      	orrs	r2, r5
 80087f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087fc:	0559      	lsls	r1, r3, #21
 80087fe:	d50b      	bpl.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008800:	4943      	ldr	r1, [pc, #268]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008802:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008804:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008808:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800880c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800880e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008812:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008816:	d071      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008818:	051a      	lsls	r2, r3, #20
 800881a:	d50b      	bpl.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800881c:	493c      	ldr	r1, [pc, #240]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800881e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008820:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008824:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008828:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800882a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800882e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008832:	d068      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008834:	04df      	lsls	r7, r3, #19
 8008836:	d50b      	bpl.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008838:	4935      	ldr	r1, [pc, #212]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800883a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800883c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008840:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008844:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008846:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800884a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800884e:	d063      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008850:	049e      	lsls	r6, r3, #18
 8008852:	d50b      	bpl.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008854:	492e      	ldr	r1, [pc, #184]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008856:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8008858:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800885c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008860:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008862:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008866:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800886a:	d05a      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800886c:	045d      	lsls	r5, r3, #17
 800886e:	d50b      	bpl.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008870:	4927      	ldr	r1, [pc, #156]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008872:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8008874:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008878:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800887c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800887e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008882:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008886:	d051      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008888:	0419      	lsls	r1, r3, #16
 800888a:	d50b      	bpl.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800888c:	4920      	ldr	r1, [pc, #128]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800888e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8008890:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8008894:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008898:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800889a:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800889e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80088a2:	d048      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80088a4:	03da      	lsls	r2, r3, #15
 80088a6:	d50b      	bpl.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80088a8:	4919      	ldr	r1, [pc, #100]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80088aa:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80088ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80088b0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80088b4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80088b6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80088ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80088be:	d03f      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088c0:	035b      	lsls	r3, r3, #13
 80088c2:	d50b      	bpl.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80088c4:	4a12      	ldr	r2, [pc, #72]	; (8008910 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80088c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80088c8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80088cc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80088d0:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80088d2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80088d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80088da:	d036      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 80088dc:	b002      	add	sp, #8
 80088de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80088e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80088e8:	659a      	str	r2, [r3, #88]	; 0x58
 80088ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80088f4:	2701      	movs	r7, #1
 80088f6:	e6b7      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 80088f8:	2003      	movs	r0, #3
 80088fa:	e6ff      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088fc:	68ca      	ldr	r2, [r1, #12]
 80088fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008902:	60ca      	str	r2, [r1, #12]
 8008904:	e788      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008906:	68ca      	ldr	r2, [r1, #12]
 8008908:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800890c:	60ca      	str	r2, [r1, #12]
 800890e:	e791      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008910:	40021000 	.word	0x40021000
 8008914:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008918:	68ca      	ldr	r2, [r1, #12]
 800891a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800891e:	60ca      	str	r2, [r1, #12]
 8008920:	e796      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008922:	68ca      	ldr	r2, [r1, #12]
 8008924:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008928:	60ca      	str	r2, [r1, #12]
 800892a:	e79f      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800892c:	68ca      	ldr	r2, [r1, #12]
 800892e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008932:	60ca      	str	r2, [r1, #12]
 8008934:	e7a8      	b.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008936:	68ca      	ldr	r2, [r1, #12]
 8008938:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800893c:	60ca      	str	r2, [r1, #12]
 800893e:	e7b1      	b.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008940:	68ca      	ldr	r2, [r1, #12]
 8008942:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008946:	60ca      	str	r2, [r1, #12]
 8008948:	e7ba      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800894a:	68d3      	ldr	r3, [r2, #12]
 800894c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008950:	60d3      	str	r3, [r2, #12]
}
 8008952:	b002      	add	sp, #8
 8008954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008958:	4613      	mov	r3, r2
 800895a:	e6c6      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x9e>

0800895c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008960:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008962:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8008964:	4617      	mov	r7, r2
 8008966:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8008968:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800896c:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800896e:	f7fa f92b 	bl	8002bc8 <HAL_GetTick>
 8008972:	442f      	add	r7, r5
 8008974:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8008976:	f7fa f927 	bl	8002bc8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800897a:	4b31      	ldr	r3, [pc, #196]	; (8008a40 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800897c:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008984:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008988:	0d1b      	lsrs	r3, r3, #20
 800898a:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 800898e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008990:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8008992:	4622      	mov	r2, r4
 8008994:	1c69      	adds	r1, r5, #1
 8008996:	6893      	ldr	r3, [r2, #8]
 8008998:	d110      	bne.n	80089bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 800899a:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 800899e:	d009      	beq.n	80089b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80089a0:	7b23      	ldrb	r3, [r4, #12]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80089a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80089ac:	6893      	ldr	r3, [r2, #8]
 80089ae:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80089b2:	d1f5      	bne.n	80089a0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 80089b4:	2000      	movs	r0, #0
}
 80089b6:	b002      	add	sp, #8
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 80089bc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 80089c0:	d0f8      	beq.n	80089b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 80089c2:	7b23      	ldrb	r3, [r4, #12]
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80089ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089ce:	f7fa f8fb 	bl	8002bc8 <HAL_GetTick>
 80089d2:	eba0 0008 	sub.w	r0, r0, r8
 80089d6:	42b8      	cmp	r0, r7
 80089d8:	d209      	bcs.n	80089ee <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 80089da:	9b01      	ldr	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089dc:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 80089de:	2b00      	cmp	r3, #0
      count--;
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80089e6:	bf08      	it	eq
 80089e8:	2700      	moveq	r7, #0
      count--;
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	e7d2      	b.n	8008994 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ee:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089f2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089f4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089fc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089fe:	d013      	beq.n	8008a28 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xcc>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a00:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8008a02:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008a06:	d107      	bne.n	8008a18 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
          SPI_RESET_CRC(hspi);
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a16:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008a18:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8008a1a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8008a1c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8008a20:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8008a24:	2003      	movs	r0, #3
 8008a26:	e7c6      	b.n	80089b6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a28:	68b2      	ldr	r2, [r6, #8]
 8008a2a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008a2e:	d002      	beq.n	8008a36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xda>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a30:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008a34:	d1e4      	bne.n	8008a00 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a3c:	601a      	str	r2, [r3, #0]
 8008a3e:	e7df      	b.n	8008a00 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8008a40:	20000008 	.word	0x20000008

08008a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8008a50:	eb01 0902 	add.w	r9, r1, r2
{
 8008a54:	460e      	mov	r6, r1
 8008a56:	4617      	mov	r7, r2
 8008a58:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a5a:	f7fa f8b5 	bl	8002bc8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a5e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8008b80 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008a62:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8008a66:	f7fa f8af 	bl	8002bc8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008a72:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008a76:	0d1b      	lsrs	r3, r3, #20
 8008a78:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 8008a7c:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008a7e:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8008a80:	1c70      	adds	r0, r6, #1
 8008a82:	682c      	ldr	r4, [r5, #0]
 8008a84:	d120      	bne.n	8008ac8 <SPI_EndRxTxTransaction+0x84>
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008a8c:	d1fb      	bne.n	8008a86 <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a8e:	f7fa f89b 	bl	8002bc8 <HAL_GetTick>
 8008a92:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8008a96:	f7fa f897 	bl	8002bc8 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8008aa2:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8008aa6:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008aa8:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008aaa:	1c71      	adds	r1, r6, #1
 8008aac:	682c      	ldr	r4, [r5, #0]
 8008aae:	d11f      	bne.n	8008af0 <SPI_EndRxTxTransaction+0xac>
 8008ab0:	68a3      	ldr	r3, [r4, #8]
 8008ab2:	061a      	lsls	r2, r3, #24
 8008ab4:	d4fc      	bmi.n	8008ab0 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ab6:	463a      	mov	r2, r7
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	f7ff ff4e 	bl	800895c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8008ac0:	bb48      	cbnz	r0, 8008b16 <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8008ac2:	b005      	add	sp, #20
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8008ace:	d0de      	beq.n	8008a8e <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ad0:	f7fa f87a 	bl	8002bc8 <HAL_GetTick>
 8008ad4:	eba0 000b 	sub.w	r0, r0, fp
 8008ad8:	4550      	cmp	r0, sl
 8008ada:	d222      	bcs.n	8008b22 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8008adc:	9a02      	ldr	r2, [sp, #8]
      count--;
 8008ade:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8008ae0:	2a00      	cmp	r2, #0
      count--;
 8008ae2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8008ae6:	bf08      	it	eq
 8008ae8:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8008aec:	9302      	str	r3, [sp, #8]
 8008aee:	e7c7      	b.n	8008a80 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008af0:	68a3      	ldr	r3, [r4, #8]
 8008af2:	061b      	lsls	r3, r3, #24
 8008af4:	d5df      	bpl.n	8008ab6 <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008af6:	f7fa f867 	bl	8002bc8 <HAL_GetTick>
 8008afa:	eba0 0008 	sub.w	r0, r0, r8
 8008afe:	4548      	cmp	r0, r9
 8008b00:	d20f      	bcs.n	8008b22 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8008b02:	9a03      	ldr	r2, [sp, #12]
      count--;
 8008b04:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8008b06:	2a00      	cmp	r2, #0
      count--;
 8008b08:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8008b0c:	bf08      	it	eq
 8008b0e:	f04f 0900 	moveq.w	r9, #0
      count--;
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	e7c9      	b.n	8008aaa <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b16:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8008b18:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8008b1c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b1e:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b20:	e7cf      	b.n	8008ac2 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b22:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b26:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b28:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b30:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b32:	d019      	beq.n	8008b68 <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b34:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8008b36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008b3a:	d107      	bne.n	8008b4c <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b4a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b52:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8008b54:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b56:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8008b5a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8008b5c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b60:	662b      	str	r3, [r5, #96]	; 0x60
}
 8008b62:	b005      	add	sp, #20
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b68:	68aa      	ldr	r2, [r5, #8]
 8008b6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008b6e:	d002      	beq.n	8008b76 <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008b74:	d1de      	bne.n	8008b34 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e7d9      	b.n	8008b34 <SPI_EndRxTxTransaction+0xf0>
 8008b80:	20000008 	.word	0x20000008

08008b84 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d077      	beq.n	8008c78 <HAL_SPI_Init+0xf4>
{
 8008b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b8c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b8e:	4604      	mov	r4, r0
 8008b90:	2e00      	cmp	r6, #0
 8008b92:	d058      	beq.n	8008c46 <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b94:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b9a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ba2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d059      	beq.n	8008c5e <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8008baa:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bac:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8008bae:	2302      	movs	r3, #2
 8008bb0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8008bb4:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bb6:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8008bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bbe:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bc0:	d947      	bls.n	8008c52 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008bc2:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8008bc6:	d159      	bne.n	8008c7c <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bc8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bca:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bcc:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8008bd0:	6862      	ldr	r2, [r4, #4]
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8008bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	6923      	ldr	r3, [r4, #16]
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	4313      	orrs	r3, r2
 8008be6:	6962      	ldr	r2, [r4, #20]
 8008be8:	f002 0201 	and.w	r2, r2, #1
 8008bec:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bf0:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8008bf4:	f003 0308 	and.w	r3, r3, #8
 8008bf8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008bfc:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008bfe:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c02:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8008c06:	69a6      	ldr	r6, [r4, #24]
 8008c08:	6a23      	ldr	r3, [r4, #32]
 8008c0a:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8008c0e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8008c12:	4313      	orrs	r3, r2
 8008c14:	ea43 0308 	orr.w	r3, r3, r8
 8008c18:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c1a:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c1c:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c1e:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c22:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c24:	ea4e 0306 	orr.w	r3, lr, r6
 8008c28:	ea43 030c 	orr.w	r3, r3, ip
 8008c2c:	4303      	orrs	r3, r0
 8008c2e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c30:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c32:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8008c38:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c3a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c3c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c3e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8008c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c46:	6843      	ldr	r3, [r0, #4]
 8008c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c4c:	d0a5      	beq.n	8008b9a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c4e:	61c6      	str	r6, [r0, #28]
 8008c50:	e7a3      	b.n	8008b9a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c52:	d00b      	beq.n	8008c6c <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c58:	2500      	movs	r5, #0
 8008c5a:	62a5      	str	r5, [r4, #40]	; 0x28
 8008c5c:	e7b8      	b.n	8008bd0 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8008c5e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7fc fcd4 	bl	8005610 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c6a:	e79e      	b.n	8008baa <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c6c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c72:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8008c76:	e7ab      	b.n	8008bd0 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8008c78:	2001      	movs	r0, #1
}
 8008c7a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	e7eb      	b.n	8008c58 <HAL_SPI_Init+0xd4>

08008c80 <HAL_SPI_TransmitReceive>:
{
 8008c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c84:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8008c86:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8008c8a:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8008c8c:	2801      	cmp	r0, #1
 8008c8e:	f000 8097 	beq.w	8008dc0 <HAL_SPI_TransmitReceive+0x140>
 8008c92:	461f      	mov	r7, r3
 8008c94:	2301      	movs	r3, #1
 8008c96:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008c9a:	4689      	mov	r9, r1
 8008c9c:	4690      	mov	r8, r2
 8008c9e:	f7f9 ff93 	bl	8002bc8 <HAL_GetTick>
 8008ca2:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8008ca4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8008ca8:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008caa:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8008cac:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008cae:	d010      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x52>
 8008cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cb4:	d008      	beq.n	8008cc8 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8008cb6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008cb8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8008cba:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8008cbc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008cc0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8008cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008cc8:	68a2      	ldr	r2, [r4, #8]
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	d1f3      	bne.n	8008cb6 <HAL_SPI_TransmitReceive+0x36>
 8008cce:	2904      	cmp	r1, #4
 8008cd0:	d1f1      	bne.n	8008cb6 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008cd2:	f1b9 0f00 	cmp.w	r9, #0
 8008cd6:	d076      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x146>
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d073      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x146>
 8008cde:	2f00      	cmp	r7, #0
 8008ce0:	d071      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ce2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008ce6:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ce8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cec:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cee:	bf1c      	itt	ne
 8008cf0:	2205      	movne	r2, #5
 8008cf2:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8008cfa:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cfe:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8008d00:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008d04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 8008d08:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d0a:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 8008d0c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d10:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008d14:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008d16:	d858      	bhi.n	8008dca <HAL_SPI_TransmitReceive+0x14a>
 8008d18:	2f01      	cmp	r7, #1
 8008d1a:	f000 8124 	beq.w	8008f66 <HAL_SPI_TransmitReceive+0x2e6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d1e:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008d22:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d24:	6811      	ldr	r1, [r2, #0]
 8008d26:	0649      	lsls	r1, r1, #25
 8008d28:	f100 80e3 	bmi.w	8008ef2 <HAL_SPI_TransmitReceive+0x272>
    __HAL_SPI_ENABLE(hspi);
 8008d2c:	6811      	ldr	r1, [r2, #0]
 8008d2e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008d32:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80df 	beq.w	8008ef8 <HAL_SPI_TransmitReceive+0x278>
 8008d3a:	2f01      	cmp	r7, #1
 8008d3c:	f000 80dc 	beq.w	8008ef8 <HAL_SPI_TransmitReceive+0x278>
        txallowed = 1U;
 8008d40:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	b92b      	cbnz	r3, 8008d54 <HAL_SPI_TransmitReceive+0xd4>
 8008d48:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 8086 	beq.w	8008e60 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d54:	6822      	ldr	r2, [r4, #0]
 8008d56:	6893      	ldr	r3, [r2, #8]
 8008d58:	0799      	lsls	r1, r3, #30
 8008d5a:	d505      	bpl.n	8008d68 <HAL_SPI_TransmitReceive+0xe8>
 8008d5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	b113      	cbz	r3, 8008d68 <HAL_SPI_TransmitReceive+0xe8>
 8008d62:	2f00      	cmp	r7, #0
 8008d64:	f040 80e4 	bne.w	8008f30 <HAL_SPI_TransmitReceive+0x2b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d68:	6893      	ldr	r3, [r2, #8]
 8008d6a:	f013 0301 	ands.w	r3, r3, #1
 8008d6e:	d01e      	beq.n	8008dae <HAL_SPI_TransmitReceive+0x12e>
 8008d70:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008d74:	b289      	uxth	r1, r1
 8008d76:	b1d1      	cbz	r1, 8008dae <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 8008d78:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008d7c:	b289      	uxth	r1, r1
 8008d7e:	2901      	cmp	r1, #1
 8008d80:	f240 80c8 	bls.w	8008f14 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008d86:	68d0      	ldr	r0, [r2, #12]
 8008d88:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d8c:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008d8e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008d92:	3902      	subs	r1, #2
 8008d94:	b289      	uxth	r1, r1
 8008d96:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008d9a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008d9e:	b289      	uxth	r1, r1
 8008da0:	2901      	cmp	r1, #1
        txallowed = 1U;
 8008da2:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 8008da4:	d803      	bhi.n	8008dae <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008da6:	6853      	ldr	r3, [r2, #4]
 8008da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dac:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dae:	f7f9 ff0b 	bl	8002bc8 <HAL_GetTick>
 8008db2:	1b43      	subs	r3, r0, r5
 8008db4:	42b3      	cmp	r3, r6
 8008db6:	d3c4      	bcc.n	8008d42 <HAL_SPI_TransmitReceive+0xc2>
 8008db8:	1c73      	adds	r3, r6, #1
 8008dba:	d0c2      	beq.n	8008d42 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 8008dbc:	2003      	movs	r0, #3
 8008dbe:	e77b      	b.n	8008cb8 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8008dc0:	2002      	movs	r0, #2
}
 8008dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	e776      	b.n	8008cb8 <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008dca:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008dce:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dd0:	6811      	ldr	r1, [r2, #0]
 8008dd2:	0648      	lsls	r0, r1, #25
 8008dd4:	d403      	bmi.n	8008dde <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_ENABLE(hspi);
 8008dd6:	6811      	ldr	r1, [r2, #0]
 8008dd8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008ddc:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d161      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0x226>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008de2:	4649      	mov	r1, r9
 8008de4:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008de8:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8008dea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dec:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008df4:	1c72      	adds	r2, r6, #1
{
 8008df6:	f04f 0701 	mov.w	r7, #1
 8008dfa:	d028      	beq.n	8008e4e <HAL_SPI_TransmitReceive+0x1ce>
 8008dfc:	e04e      	b.n	8008e9c <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dfe:	6822      	ldr	r2, [r4, #0]
 8008e00:	6893      	ldr	r3, [r2, #8]
 8008e02:	079b      	lsls	r3, r3, #30
 8008e04:	d50d      	bpl.n	8008e22 <HAL_SPI_TransmitReceive+0x1a2>
 8008e06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	b153      	cbz	r3, 8008e22 <HAL_SPI_TransmitReceive+0x1a2>
 8008e0c:	b14f      	cbz	r7, 8008e22 <HAL_SPI_TransmitReceive+0x1a2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e10:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008e14:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8008e16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e18:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008e1e:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008e20:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e22:	6893      	ldr	r3, [r2, #8]
 8008e24:	f013 0301 	ands.w	r3, r3, #1
 8008e28:	d00f      	beq.n	8008e4a <HAL_SPI_TransmitReceive+0x1ca>
 8008e2a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008e2e:	b289      	uxth	r1, r1
 8008e30:	b159      	cbz	r1, 8008e4a <HAL_SPI_TransmitReceive+0x1ca>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e32:	68d1      	ldr	r1, [r2, #12]
 8008e34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e36:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8008e3a:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008e3c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e40:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008e42:	3b01      	subs	r3, #1
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e4a:	f7f9 febd 	bl	8002bc8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1d3      	bne.n	8008dfe <HAL_SPI_TransmitReceive+0x17e>
 8008e56:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1ce      	bne.n	8008dfe <HAL_SPI_TransmitReceive+0x17e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e60:	462a      	mov	r2, r5
 8008e62:	4631      	mov	r1, r6
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7ff fded 	bl	8008a44 <SPI_EndRxTxTransaction>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f43f af24 	beq.w	8008cb8 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e70:	2320      	movs	r3, #32
 8008e72:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008e74:	2001      	movs	r0, #1
 8008e76:	e71f      	b.n	8008cb8 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e78:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0ee      	beq.n	8008e60 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	6893      	ldr	r3, [r2, #8]
 8008e86:	0798      	lsls	r0, r3, #30
 8008e88:	d422      	bmi.n	8008ed0 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e8a:	6893      	ldr	r3, [r2, #8]
 8008e8c:	f013 0301 	ands.w	r3, r3, #1
 8008e90:	d10c      	bne.n	8008eac <HAL_SPI_TransmitReceive+0x22c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e92:	f7f9 fe99 	bl	8002bc8 <HAL_GetTick>
 8008e96:	1b40      	subs	r0, r0, r5
 8008e98:	42b0      	cmp	r0, r6
 8008e9a:	d28f      	bcs.n	8008dbc <HAL_SPI_TransmitReceive+0x13c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1ee      	bne.n	8008e82 <HAL_SPI_TransmitReceive+0x202>
 8008ea4:	e7e8      	b.n	8008e78 <HAL_SPI_TransmitReceive+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ea6:	2f01      	cmp	r7, #1
 8008ea8:	d1a4      	bne.n	8008df4 <HAL_SPI_TransmitReceive+0x174>
 8008eaa:	e79a      	b.n	8008de2 <HAL_SPI_TransmitReceive+0x162>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008eac:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008eb0:	b289      	uxth	r1, r1
 8008eb2:	2900      	cmp	r1, #0
 8008eb4:	d0ed      	beq.n	8008e92 <HAL_SPI_TransmitReceive+0x212>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eb6:	68d1      	ldr	r1, [r2, #12]
 8008eb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008eba:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8008ebe:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008ec0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ec4:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8008ece:	e7e0      	b.n	8008e92 <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ed0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0d8      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x20a>
 8008ed8:	2f00      	cmp	r7, #0
 8008eda:	d0d6      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ede:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008ee2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ee4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008ee6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008eec:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008eee:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008ef0:	e7cb      	b.n	8008e8a <HAL_SPI_TransmitReceive+0x20a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f47f af24 	bne.w	8008d40 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 8008ef8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d93a      	bls.n	8008f76 <HAL_SPI_TransmitReceive+0x2f6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f00:	4649      	mov	r1, r9
 8008f02:	f831 3b02 	ldrh.w	r3, [r1], #2
 8008f06:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8008f08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f0a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008f0c:	3b02      	subs	r3, #2
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008f12:	e715      	b.n	8008d40 <HAL_SPI_TransmitReceive+0xc0>
        txallowed = 1U;
 8008f14:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f18:	7b12      	ldrb	r2, [r2, #12]
 8008f1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8008f22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8008f2e:	e73e      	b.n	8008dae <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 8008f30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8008f38:	d909      	bls.n	8008f4e <HAL_SPI_TransmitReceive+0x2ce>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f3a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008f3e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f40:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008f42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008f44:	3b02      	subs	r3, #2
 8008f46:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008f48:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 8008f4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008f4c:	e70c      	b.n	8008d68 <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8008f52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8008f54:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008f56:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8008f58:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8008f5a:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8008f5c:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008f5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f60:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 8008f62:	2700      	movs	r7, #0
 8008f64:	e700      	b.n	8008d68 <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f66:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008f6a:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f6c:	6811      	ldr	r1, [r2, #0]
 8008f6e:	0649      	lsls	r1, r1, #25
 8008f70:	f57f aedc 	bpl.w	8008d2c <HAL_SPI_TransmitReceive+0xac>
 8008f74:	e7c0      	b.n	8008ef8 <HAL_SPI_TransmitReceive+0x278>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f76:	f899 3000 	ldrb.w	r3, [r9]
 8008f7a:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8008f7c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8008f7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008f80:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8008f82:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8008f84:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8008f86:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008f88:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008f8a:	e6d9      	b.n	8008d40 <HAL_SPI_TransmitReceive+0xc0>

08008f8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f8c:	6a03      	ldr	r3, [r0, #32]
 8008f8e:	f023 0301 	bic.w	r3, r3, #1
 8008f92:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f94:	6a03      	ldr	r3, [r0, #32]
{
 8008f96:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f9a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008fa2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008fa6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fa8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008faa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008fae:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fb0:	4d15      	ldr	r5, [pc, #84]	; (8009008 <TIM_OC1_SetConfig+0x7c>)
 8008fb2:	42a8      	cmp	r0, r5
 8008fb4:	d013      	beq.n	8008fde <TIM_OC1_SetConfig+0x52>
 8008fb6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008fba:	42a8      	cmp	r0, r5
 8008fbc:	d00f      	beq.n	8008fde <TIM_OC1_SetConfig+0x52>
 8008fbe:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008fc2:	42a8      	cmp	r0, r5
 8008fc4:	d00b      	beq.n	8008fde <TIM_OC1_SetConfig+0x52>
 8008fc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008fca:	42a8      	cmp	r0, r5
 8008fcc:	d007      	beq.n	8008fde <TIM_OC1_SetConfig+0x52>
 8008fce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008fd2:	42a8      	cmp	r0, r5
 8008fd4:	d003      	beq.n	8008fde <TIM_OC1_SetConfig+0x52>
 8008fd6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008fda:	42a8      	cmp	r0, r5
 8008fdc:	d10d      	bne.n	8008ffa <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fde:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fe0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008fe4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fe6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fee:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ff2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ff6:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ffa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008ffc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008ffe:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8009000:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8009002:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8009004:	6203      	str	r3, [r0, #32]
}
 8009006:	4770      	bx	lr
 8009008:	40012c00 	.word	0x40012c00

0800900c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800900c:	6a03      	ldr	r3, [r0, #32]
 800900e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009012:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009014:	6a03      	ldr	r3, [r0, #32]
{
 8009016:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800901a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800901c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800901e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009022:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009026:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009028:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800902a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800902e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009032:	4d1c      	ldr	r5, [pc, #112]	; (80090a4 <TIM_OC3_SetConfig+0x98>)
 8009034:	42a8      	cmp	r0, r5
 8009036:	d017      	beq.n	8009068 <TIM_OC3_SetConfig+0x5c>
 8009038:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800903c:	42a8      	cmp	r0, r5
 800903e:	d013      	beq.n	8009068 <TIM_OC3_SetConfig+0x5c>
 8009040:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009044:	42a8      	cmp	r0, r5
 8009046:	d025      	beq.n	8009094 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009048:	4d17      	ldr	r5, [pc, #92]	; (80090a8 <TIM_OC3_SetConfig+0x9c>)
 800904a:	42a8      	cmp	r0, r5
 800904c:	d013      	beq.n	8009076 <TIM_OC3_SetConfig+0x6a>
 800904e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009052:	42a8      	cmp	r0, r5
 8009054:	d00f      	beq.n	8009076 <TIM_OC3_SetConfig+0x6a>
 8009056:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800905a:	42a8      	cmp	r0, r5
 800905c:	d00b      	beq.n	8009076 <TIM_OC3_SetConfig+0x6a>
 800905e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009062:	42a8      	cmp	r0, r5
 8009064:	d10f      	bne.n	8009086 <TIM_OC3_SetConfig+0x7a>
 8009066:	e006      	b.n	8009076 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009068:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800906a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800906e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8009072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009076:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800907a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800907e:	ea46 0c05 	orr.w	ip, r6, r5
 8009082:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009086:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009088:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800908a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800908c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800908e:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8009090:	6203      	str	r3, [r0, #32]
}
 8009092:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009094:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8009096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800909a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800909e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a2:	e7d1      	b.n	8009048 <TIM_OC3_SetConfig+0x3c>
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40014000 	.word	0x40014000

080090ac <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090ac:	6a03      	ldr	r3, [r0, #32]
 80090ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090b4:	6a03      	ldr	r3, [r0, #32]
{
 80090b6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ba:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80090c2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090ca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80090cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090d0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80090d4:	4d1c      	ldr	r5, [pc, #112]	; (8009148 <TIM_OC4_SetConfig+0x9c>)
 80090d6:	42a8      	cmp	r0, r5
 80090d8:	d017      	beq.n	800910a <TIM_OC4_SetConfig+0x5e>
 80090da:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80090de:	42a8      	cmp	r0, r5
 80090e0:	d013      	beq.n	800910a <TIM_OC4_SetConfig+0x5e>
 80090e2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80090e6:	42a8      	cmp	r0, r5
 80090e8:	d025      	beq.n	8009136 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ea:	4d18      	ldr	r5, [pc, #96]	; (800914c <TIM_OC4_SetConfig+0xa0>)
 80090ec:	42a8      	cmp	r0, r5
 80090ee:	d013      	beq.n	8009118 <TIM_OC4_SetConfig+0x6c>
 80090f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80090f4:	42a8      	cmp	r0, r5
 80090f6:	d00f      	beq.n	8009118 <TIM_OC4_SetConfig+0x6c>
 80090f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80090fc:	42a8      	cmp	r0, r5
 80090fe:	d00b      	beq.n	8009118 <TIM_OC4_SetConfig+0x6c>
 8009100:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009104:	42a8      	cmp	r0, r5
 8009106:	d10f      	bne.n	8009128 <TIM_OC4_SetConfig+0x7c>
 8009108:	e006      	b.n	8009118 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800910a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800910c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009110:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8009114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009118:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800911c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009120:	ea46 0c05 	orr.w	ip, r6, r5
 8009124:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009128:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800912a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800912c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800912e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8009130:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8009132:	6203      	str	r3, [r0, #32]
}
 8009134:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009136:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8009138:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800913c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8009140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009144:	e7d1      	b.n	80090ea <TIM_OC4_SetConfig+0x3e>
 8009146:	bf00      	nop
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40014000 	.word	0x40014000

08009150 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009150:	2800      	cmp	r0, #0
 8009152:	f000 808c 	beq.w	800926e <HAL_TIM_Base_Init+0x11e>
{
 8009156:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009158:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800915c:	4604      	mov	r4, r0
 800915e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009162:	2b00      	cmp	r3, #0
 8009164:	d078      	beq.n	8009258 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009166:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009168:	4944      	ldr	r1, [pc, #272]	; (800927c <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800916a:	2302      	movs	r3, #2
 800916c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009170:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8009172:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009174:	d05c      	beq.n	8009230 <HAL_TIM_Base_Init+0xe0>
 8009176:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800917a:	d02c      	beq.n	80091d6 <HAL_TIM_Base_Init+0x86>
 800917c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8009180:	428a      	cmp	r2, r1
 8009182:	d028      	beq.n	80091d6 <HAL_TIM_Base_Init+0x86>
 8009184:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009188:	428a      	cmp	r2, r1
 800918a:	d024      	beq.n	80091d6 <HAL_TIM_Base_Init+0x86>
 800918c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009190:	428a      	cmp	r2, r1
 8009192:	d020      	beq.n	80091d6 <HAL_TIM_Base_Init+0x86>
 8009194:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8009198:	428a      	cmp	r2, r1
 800919a:	d049      	beq.n	8009230 <HAL_TIM_Base_Init+0xe0>
 800919c:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80091a0:	428a      	cmp	r2, r1
 80091a2:	d066      	beq.n	8009272 <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091a4:	4936      	ldr	r1, [pc, #216]	; (8009280 <HAL_TIM_Base_Init+0x130>)
 80091a6:	428a      	cmp	r2, r1
 80091a8:	d05b      	beq.n	8009262 <HAL_TIM_Base_Init+0x112>
 80091aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091ae:	428a      	cmp	r2, r1
 80091b0:	d057      	beq.n	8009262 <HAL_TIM_Base_Init+0x112>
 80091b2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091b6:	428a      	cmp	r2, r1
 80091b8:	d053      	beq.n	8009262 <HAL_TIM_Base_Init+0x112>
 80091ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091be:	428a      	cmp	r2, r1
 80091c0:	d04f      	beq.n	8009262 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091c2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091c4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091ca:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80091cc:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80091ce:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091d0:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80091d2:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091d4:	e010      	b.n	80091f8 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 80091d6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091d8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80091de:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80091e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091e4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091e6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091ec:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091ee:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80091f0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80091f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091f4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80091f6:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80091f8:	2301      	movs	r3, #1
 80091fa:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091fc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009200:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009204:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009208:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800920c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009218:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800921c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009220:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009224:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009228:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800922c:	2000      	movs	r0, #0
}
 800922e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8009230:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009232:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009238:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800923a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800923e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009240:	69a1      	ldr	r1, [r4, #24]
 8009242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009246:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8009248:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800924a:	68e3      	ldr	r3, [r4, #12]
 800924c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800924e:	6863      	ldr	r3, [r4, #4]
 8009250:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009252:	6963      	ldr	r3, [r4, #20]
 8009254:	6313      	str	r3, [r2, #48]	; 0x30
 8009256:	e7cf      	b.n	80091f8 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8009258:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800925c:	f7fc fd06 	bl	8005c6c <HAL_TIM_Base_MspInit>
 8009260:	e781      	b.n	8009166 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009262:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009264:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800926a:	4303      	orrs	r3, r0
 800926c:	e7e9      	b.n	8009242 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 800926e:	2001      	movs	r0, #1
}
 8009270:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009272:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009278:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800927a:	e793      	b.n	80091a4 <HAL_TIM_Base_Init+0x54>
 800927c:	40012c00 	.word	0x40012c00
 8009280:	40014000 	.word	0x40014000

08009284 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009284:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009288:	2b01      	cmp	r3, #1
 800928a:	d132      	bne.n	80092f2 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800928c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800928e:	491b      	ldr	r1, [pc, #108]	; (80092fc <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009290:	2202      	movs	r2, #2
 8009292:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009296:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009298:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800929a:	f042 0201 	orr.w	r2, r2, #1
 800929e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092a0:	d019      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0x52>
 80092a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a6:	d016      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0x52>
 80092a8:	4a15      	ldr	r2, [pc, #84]	; (8009300 <HAL_TIM_Base_Start_IT+0x7c>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d013      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0x52>
 80092ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00f      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0x52>
 80092b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00b      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0x52>
 80092be:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d007      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0x52>
 80092c6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d003      	beq.n	80092d6 <HAL_TIM_Base_Start_IT+0x52>
 80092ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d107      	bne.n	80092e6 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092d6:	6899      	ldr	r1, [r3, #8]
 80092d8:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <HAL_TIM_Base_Start_IT+0x80>)
 80092da:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092dc:	2a06      	cmp	r2, #6
 80092de:	d00a      	beq.n	80092f6 <HAL_TIM_Base_Start_IT+0x72>
 80092e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80092e4:	d007      	beq.n	80092f6 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 80092ec:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	4770      	bx	lr
    return HAL_ERROR;
 80092f2:	2001      	movs	r0, #1
 80092f4:	4770      	bx	lr
  return HAL_OK;
 80092f6:	2000      	movs	r0, #0
}
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	40012c00 	.word	0x40012c00
 8009300:	40000400 	.word	0x40000400
 8009304:	00010007 	.word	0x00010007

08009308 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8009308:	2800      	cmp	r0, #0
 800930a:	f000 808c 	beq.w	8009426 <HAL_TIM_PWM_Init+0x11e>
{
 800930e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009310:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009314:	4604      	mov	r4, r0
 8009316:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800931a:	2b00      	cmp	r3, #0
 800931c:	d078      	beq.n	8009410 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800931e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009320:	4944      	ldr	r1, [pc, #272]	; (8009434 <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009322:	2302      	movs	r3, #2
 8009324:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009328:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800932a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800932c:	d05c      	beq.n	80093e8 <HAL_TIM_PWM_Init+0xe0>
 800932e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009332:	d02c      	beq.n	800938e <HAL_TIM_PWM_Init+0x86>
 8009334:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8009338:	428a      	cmp	r2, r1
 800933a:	d028      	beq.n	800938e <HAL_TIM_PWM_Init+0x86>
 800933c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009340:	428a      	cmp	r2, r1
 8009342:	d024      	beq.n	800938e <HAL_TIM_PWM_Init+0x86>
 8009344:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009348:	428a      	cmp	r2, r1
 800934a:	d020      	beq.n	800938e <HAL_TIM_PWM_Init+0x86>
 800934c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8009350:	428a      	cmp	r2, r1
 8009352:	d049      	beq.n	80093e8 <HAL_TIM_PWM_Init+0xe0>
 8009354:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8009358:	428a      	cmp	r2, r1
 800935a:	d066      	beq.n	800942a <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800935c:	4936      	ldr	r1, [pc, #216]	; (8009438 <HAL_TIM_PWM_Init+0x130>)
 800935e:	428a      	cmp	r2, r1
 8009360:	d05b      	beq.n	800941a <HAL_TIM_PWM_Init+0x112>
 8009362:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009366:	428a      	cmp	r2, r1
 8009368:	d057      	beq.n	800941a <HAL_TIM_PWM_Init+0x112>
 800936a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800936e:	428a      	cmp	r2, r1
 8009370:	d053      	beq.n	800941a <HAL_TIM_PWM_Init+0x112>
 8009372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009376:	428a      	cmp	r2, r1
 8009378:	d04f      	beq.n	800941a <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800937a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800937c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800937e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009382:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8009384:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8009386:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009388:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800938a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800938c:	e010      	b.n	80093b0 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800938e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009390:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009396:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8009398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800939c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800939e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093a4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093a6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80093a8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80093aa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093ac:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80093ae:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80093b0:	2301      	movs	r3, #1
 80093b2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093b4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80093bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80093c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80093c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80093c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80093d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80093dc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80093e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80093e4:	2000      	movs	r0, #0
}
 80093e6:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80093e8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ea:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80093f0:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80093f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093f6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093f8:	69a1      	ldr	r1, [r4, #24]
 80093fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093fe:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8009400:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800940a:	6963      	ldr	r3, [r4, #20]
 800940c:	6313      	str	r3, [r2, #48]	; 0x30
 800940e:	e7cf      	b.n	80093b0 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8009410:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009414:	f7fc fc14 	bl	8005c40 <HAL_TIM_PWM_MspInit>
 8009418:	e781      	b.n	800931e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800941a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800941c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800941e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009422:	4303      	orrs	r3, r0
 8009424:	e7e9      	b.n	80093fa <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 8009426:	2001      	movs	r0, #1
}
 8009428:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800942a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800942c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009430:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009432:	e793      	b.n	800935c <HAL_TIM_PWM_Init+0x54>
 8009434:	40012c00 	.word	0x40012c00
 8009438:	40014000 	.word	0x40014000

0800943c <HAL_TIM_PWM_Start>:
 800943c:	2910      	cmp	r1, #16
 800943e:	d80a      	bhi.n	8009456 <HAL_TIM_PWM_Start+0x1a>
 8009440:	e8df f001 	tbb	[pc, r1]
 8009444:	09090961 	.word	0x09090961
 8009448:	09090967 	.word	0x09090967
 800944c:	0909096f 	.word	0x0909096f
 8009450:	09090974 	.word	0x09090974
 8009454:	7d          	.byte	0x7d
 8009455:	00          	.byte	0x00
 8009456:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800945a:	2b01      	cmp	r3, #1
 800945c:	d157      	bne.n	800950e <HAL_TIM_PWM_Start+0xd2>
 800945e:	2910      	cmp	r1, #16
 8009460:	d80a      	bhi.n	8009478 <HAL_TIM_PWM_Start+0x3c>
 8009462:	e8df f001 	tbb	[pc, r1]
 8009466:	0993      	.short	0x0993
 8009468:	095a0909 	.word	0x095a0909
 800946c:	097c0909 	.word	0x097c0909
 8009470:	09780909 	.word	0x09780909
 8009474:	0909      	.short	0x0909
 8009476:	74          	.byte	0x74
 8009477:	00          	.byte	0x00
 8009478:	2302      	movs	r3, #2
 800947a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800947e:	6803      	ldr	r3, [r0, #0]
 8009480:	2201      	movs	r2, #1
 8009482:	6a18      	ldr	r0, [r3, #32]
 8009484:	f001 011f 	and.w	r1, r1, #31
 8009488:	fa02 f101 	lsl.w	r1, r2, r1
 800948c:	ea20 0001 	bic.w	r0, r0, r1
 8009490:	6218      	str	r0, [r3, #32]
 8009492:	6a18      	ldr	r0, [r3, #32]
 8009494:	4a3f      	ldr	r2, [pc, #252]	; (8009594 <HAL_TIM_PWM_Start+0x158>)
 8009496:	4301      	orrs	r1, r0
 8009498:	4293      	cmp	r3, r2
 800949a:	6219      	str	r1, [r3, #32]
 800949c:	d063      	beq.n	8009566 <HAL_TIM_PWM_Start+0x12a>
 800949e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d06d      	beq.n	8009582 <HAL_TIM_PWM_Start+0x146>
 80094a6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d069      	beq.n	8009582 <HAL_TIM_PWM_Start+0x146>
 80094ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d065      	beq.n	8009582 <HAL_TIM_PWM_Start+0x146>
 80094b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d061      	beq.n	8009582 <HAL_TIM_PWM_Start+0x146>
 80094be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d05d      	beq.n	8009582 <HAL_TIM_PWM_Start+0x146>
 80094c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ca:	d050      	beq.n	800956e <HAL_TIM_PWM_Start+0x132>
 80094cc:	4a32      	ldr	r2, [pc, #200]	; (8009598 <HAL_TIM_PWM_Start+0x15c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d04d      	beq.n	800956e <HAL_TIM_PWM_Start+0x132>
 80094d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d049      	beq.n	800956e <HAL_TIM_PWM_Start+0x132>
 80094da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80094de:	4293      	cmp	r3, r2
 80094e0:	d045      	beq.n	800956e <HAL_TIM_PWM_Start+0x132>
 80094e2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d041      	beq.n	800956e <HAL_TIM_PWM_Start+0x132>
 80094ea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d03d      	beq.n	800956e <HAL_TIM_PWM_Start+0x132>
 80094f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d039      	beq.n	800956e <HAL_TIM_PWM_Start+0x132>
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	f042 0201 	orr.w	r2, r2, #1
 8009500:	2000      	movs	r0, #0
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	4770      	bx	lr
 8009506:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800950a:	2b01      	cmp	r3, #1
 800950c:	d03e      	beq.n	800958c <HAL_TIM_PWM_Start+0x150>
 800950e:	2001      	movs	r0, #1
 8009510:	4770      	bx	lr
 8009512:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8009516:	2b01      	cmp	r3, #1
 8009518:	d1f9      	bne.n	800950e <HAL_TIM_PWM_Start+0xd2>
 800951a:	2302      	movs	r3, #2
 800951c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8009520:	e7ad      	b.n	800947e <HAL_TIM_PWM_Start+0x42>
 8009522:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009526:	2b01      	cmp	r3, #1
 8009528:	d099      	beq.n	800945e <HAL_TIM_PWM_Start+0x22>
 800952a:	e7f0      	b.n	800950e <HAL_TIM_PWM_Start+0xd2>
 800952c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009530:	3b01      	subs	r3, #1
 8009532:	bf18      	it	ne
 8009534:	2301      	movne	r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d091      	beq.n	800945e <HAL_TIM_PWM_Start+0x22>
 800953a:	2001      	movs	r0, #1
 800953c:	4770      	bx	lr
 800953e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009542:	3b01      	subs	r3, #1
 8009544:	bf18      	it	ne
 8009546:	2301      	movne	r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	d088      	beq.n	800945e <HAL_TIM_PWM_Start+0x22>
 800954c:	e7f5      	b.n	800953a <HAL_TIM_PWM_Start+0xfe>
 800954e:	2302      	movs	r3, #2
 8009550:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8009554:	e793      	b.n	800947e <HAL_TIM_PWM_Start+0x42>
 8009556:	2302      	movs	r3, #2
 8009558:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800955c:	e78f      	b.n	800947e <HAL_TIM_PWM_Start+0x42>
 800955e:	2302      	movs	r3, #2
 8009560:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8009564:	e78b      	b.n	800947e <HAL_TIM_PWM_Start+0x42>
 8009566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800956c:	645a      	str	r2, [r3, #68]	; 0x44
 800956e:	6899      	ldr	r1, [r3, #8]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <HAL_TIM_PWM_Start+0x160>)
 8009572:	400a      	ands	r2, r1
 8009574:	2a06      	cmp	r2, #6
 8009576:	d002      	beq.n	800957e <HAL_TIM_PWM_Start+0x142>
 8009578:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800957c:	d1bd      	bne.n	80094fa <HAL_TIM_PWM_Start+0xbe>
 800957e:	2000      	movs	r0, #0
 8009580:	4770      	bx	lr
 8009582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009588:	645a      	str	r2, [r3, #68]	; 0x44
 800958a:	e79c      	b.n	80094c6 <HAL_TIM_PWM_Start+0x8a>
 800958c:	2302      	movs	r3, #2
 800958e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8009592:	e774      	b.n	800947e <HAL_TIM_PWM_Start+0x42>
 8009594:	40012c00 	.word	0x40012c00
 8009598:	40000400 	.word	0x40000400
 800959c:	00010007 	.word	0x00010007

080095a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop

080095a4 <HAL_TIM_IC_CaptureCallback>:
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop

080095a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <HAL_TIM_TriggerCallback>:
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop

080095b0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095b0:	6803      	ldr	r3, [r0, #0]
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	0791      	lsls	r1, r2, #30
{
 80095b6:	b510      	push	{r4, lr}
 80095b8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095ba:	d503      	bpl.n	80095c4 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	0792      	lsls	r2, r2, #30
 80095c0:	f100 808a 	bmi.w	80096d8 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80095c4:	691a      	ldr	r2, [r3, #16]
 80095c6:	0752      	lsls	r2, r2, #29
 80095c8:	d502      	bpl.n	80095d0 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80095ca:	68da      	ldr	r2, [r3, #12]
 80095cc:	0750      	lsls	r0, r2, #29
 80095ce:	d470      	bmi.n	80096b2 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	0711      	lsls	r1, r2, #28
 80095d4:	d502      	bpl.n	80095dc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	0712      	lsls	r2, r2, #28
 80095da:	d458      	bmi.n	800968e <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095dc:	691a      	ldr	r2, [r3, #16]
 80095de:	06d1      	lsls	r1, r2, #27
 80095e0:	d502      	bpl.n	80095e8 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	06d2      	lsls	r2, r2, #27
 80095e6:	d43e      	bmi.n	8009666 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095e8:	691a      	ldr	r2, [r3, #16]
 80095ea:	07d0      	lsls	r0, r2, #31
 80095ec:	d503      	bpl.n	80095f6 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	07d1      	lsls	r1, r2, #31
 80095f2:	f100 808a 	bmi.w	800970a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	0612      	lsls	r2, r2, #24
 80095fa:	d503      	bpl.n	8009604 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	0610      	lsls	r0, r2, #24
 8009600:	f100 808b 	bmi.w	800971a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009604:	691a      	ldr	r2, [r3, #16]
 8009606:	05d1      	lsls	r1, r2, #23
 8009608:	d503      	bpl.n	8009612 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	0612      	lsls	r2, r2, #24
 800960e:	f100 808c 	bmi.w	800972a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009612:	691a      	ldr	r2, [r3, #16]
 8009614:	0650      	lsls	r0, r2, #25
 8009616:	d503      	bpl.n	8009620 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	0651      	lsls	r1, r2, #25
 800961c:	f100 808d 	bmi.w	800973a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009620:	691a      	ldr	r2, [r3, #16]
 8009622:	0692      	lsls	r2, r2, #26
 8009624:	d503      	bpl.n	800962e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	0690      	lsls	r0, r2, #26
 800962a:	f100 808e 	bmi.w	800974a <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	02d1      	lsls	r1, r2, #11
 8009632:	d503      	bpl.n	800963c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009634:	68da      	ldr	r2, [r3, #12]
 8009636:	02d2      	lsls	r2, r2, #11
 8009638:	f100 808f 	bmi.w	800975a <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800963c:	691a      	ldr	r2, [r3, #16]
 800963e:	0290      	lsls	r0, r2, #10
 8009640:	d503      	bpl.n	800964a <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009642:	68da      	ldr	r2, [r3, #12]
 8009644:	0291      	lsls	r1, r2, #10
 8009646:	f100 8090 	bmi.w	800976a <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800964a:	691a      	ldr	r2, [r3, #16]
 800964c:	0252      	lsls	r2, r2, #9
 800964e:	d503      	bpl.n	8009658 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	0250      	lsls	r0, r2, #9
 8009654:	f100 8091 	bmi.w	800977a <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	0211      	lsls	r1, r2, #8
 800965c:	d502      	bpl.n	8009664 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800965e:	68da      	ldr	r2, [r3, #12]
 8009660:	0212      	lsls	r2, r2, #8
 8009662:	d44a      	bmi.n	80096fa <HAL_TIM_IRQHandler+0x14a>
}
 8009664:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009666:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800966a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800966c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800966e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009676:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009678:	f040 8090 	bne.w	800979c <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800967c:	f7ff ff90 	bl	80095a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff ff91 	bl	80095a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009686:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009688:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800968a:	7722      	strb	r2, [r4, #28]
 800968c:	e7ac      	b.n	80095e8 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800968e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009692:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009694:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009696:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800969c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800969e:	d17a      	bne.n	8009796 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a0:	f7ff ff7e 	bl	80095a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7ff ff7f 	bl	80095a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096aa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096ac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ae:	7722      	strb	r2, [r4, #28]
 80096b0:	e794      	b.n	80095dc <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096b2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096b6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096b8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80096c2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096c4:	d164      	bne.n	8009790 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096c6:	f7ff ff6b 	bl	80095a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ca:	4620      	mov	r0, r4
 80096cc:	f7ff ff6c 	bl	80095a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096d2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d4:	7722      	strb	r2, [r4, #28]
 80096d6:	e77b      	b.n	80095d0 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096d8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096dc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096de:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096e0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	0799      	lsls	r1, r3, #30
 80096e6:	d150      	bne.n	800978a <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096e8:	f7ff ff5a 	bl	80095a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ec:	4620      	mov	r0, r4
 80096ee:	f7ff ff5b 	bl	80095a8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096f4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096f6:	7722      	strb	r2, [r4, #28]
 80096f8:	e764      	b.n	80095c4 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80096fa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80096fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009700:	611a      	str	r2, [r3, #16]
}
 8009702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009706:	f000 ba11 	b.w	8009b2c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800970a:	f06f 0201 	mvn.w	r2, #1
 800970e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009710:	4620      	mov	r0, r4
 8009712:	f7fa f975 	bl	8003a00 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	e76d      	b.n	80095f6 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800971a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800971e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009720:	4620      	mov	r0, r4
 8009722:	f000 f9f9 	bl	8009b18 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	e76c      	b.n	8009604 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800972a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800972e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009730:	4620      	mov	r0, r4
 8009732:	f000 f9f3 	bl	8009b1c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	e76b      	b.n	8009612 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800973a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800973e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009740:	4620      	mov	r0, r4
 8009742:	f7ff ff33 	bl	80095ac <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	e76a      	b.n	8009620 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800974a:	f06f 0220 	mvn.w	r2, #32
 800974e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009750:	4620      	mov	r0, r4
 8009752:	f000 f9df 	bl	8009b14 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	e769      	b.n	800962e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800975a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800975e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009760:	4620      	mov	r0, r4
 8009762:	f000 f9dd 	bl	8009b20 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	e768      	b.n	800963c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800976a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800976e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009770:	4620      	mov	r0, r4
 8009772:	f000 f9d7 	bl	8009b24 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	e767      	b.n	800964a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800977a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800977e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8009780:	4620      	mov	r0, r4
 8009782:	f000 f9d1 	bl	8009b28 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	e766      	b.n	8009658 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 800978a:	f7ff ff0b 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 800978e:	e7b0      	b.n	80096f2 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8009790:	f7ff ff08 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 8009794:	e79c      	b.n	80096d0 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8009796:	f7ff ff05 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 800979a:	e786      	b.n	80096aa <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 800979c:	f7ff ff02 	bl	80095a4 <HAL_TIM_IC_CaptureCallback>
 80097a0:	e771      	b.n	8009686 <HAL_TIM_IRQHandler+0xd6>
 80097a2:	bf00      	nop

080097a4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a4:	6a03      	ldr	r3, [r0, #32]
 80097a6:	f023 0310 	bic.w	r3, r3, #16
 80097aa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80097ac:	6a03      	ldr	r3, [r0, #32]
{
 80097ae:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80097b0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80097b2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097b6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80097ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80097c4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097cc:	4d1c      	ldr	r5, [pc, #112]	; (8009840 <TIM_OC2_SetConfig+0x9c>)
 80097ce:	42a8      	cmp	r0, r5
 80097d0:	d017      	beq.n	8009802 <TIM_OC2_SetConfig+0x5e>
 80097d2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80097d6:	42a8      	cmp	r0, r5
 80097d8:	d013      	beq.n	8009802 <TIM_OC2_SetConfig+0x5e>
 80097da:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80097de:	42a8      	cmp	r0, r5
 80097e0:	d025      	beq.n	800982e <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e2:	4d18      	ldr	r5, [pc, #96]	; (8009844 <TIM_OC2_SetConfig+0xa0>)
 80097e4:	42a8      	cmp	r0, r5
 80097e6:	d013      	beq.n	8009810 <TIM_OC2_SetConfig+0x6c>
 80097e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097ec:	42a8      	cmp	r0, r5
 80097ee:	d00f      	beq.n	8009810 <TIM_OC2_SetConfig+0x6c>
 80097f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80097f4:	42a8      	cmp	r0, r5
 80097f6:	d00b      	beq.n	8009810 <TIM_OC2_SetConfig+0x6c>
 80097f8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80097fc:	42a8      	cmp	r0, r5
 80097fe:	d10f      	bne.n	8009820 <TIM_OC2_SetConfig+0x7c>
 8009800:	e006      	b.n	8009810 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009802:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009808:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800980c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009810:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009814:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009818:	ea46 0c05 	orr.w	ip, r6, r5
 800981c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8009820:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009822:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009824:	6182      	str	r2, [r0, #24]
}
 8009826:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8009828:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800982a:	6203      	str	r3, [r0, #32]
}
 800982c:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800982e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009834:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983c:	e7d1      	b.n	80097e2 <TIM_OC2_SetConfig+0x3e>
 800983e:	bf00      	nop
 8009840:	40012c00 	.word	0x40012c00
 8009844:	40014000 	.word	0x40014000

08009848 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8009848:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800984c:	2b01      	cmp	r3, #1
 800984e:	f000 80ff 	beq.w	8009a50 <HAL_TIM_PWM_ConfigChannel+0x208>
 8009852:	2301      	movs	r3, #1
{
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4604      	mov	r4, r0
 8009858:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800985a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800985e:	2a14      	cmp	r2, #20
 8009860:	d80c      	bhi.n	800987c <HAL_TIM_PWM_ConfigChannel+0x34>
 8009862:	e8df f002 	tbb	[pc, r2]
 8009866:	0b59      	.short	0x0b59
 8009868:	0b6e0b0b 	.word	0x0b6e0b0b
 800986c:	0b840b0b 	.word	0x0b840b0b
 8009870:	0b990b0b 	.word	0x0b990b0b
 8009874:	0baf0b0b 	.word	0x0baf0b0b
 8009878:	0b0b      	.short	0x0b0b
 800987a:	11          	.byte	0x11
 800987b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800987c:	2300      	movs	r3, #0
  switch (Channel)
 800987e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8009880:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009884:	4610      	mov	r0, r2
 8009886:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009888:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800988a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800988c:	6a1a      	ldr	r2, [r3, #32]
 800988e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8009892:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8009894:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8009896:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8009898:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800989a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800989e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098a2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098a6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098ac:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098b0:	4e69      	ldr	r6, [pc, #420]	; (8009a58 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80098b2:	42b3      	cmp	r3, r6
 80098b4:	d013      	beq.n	80098de <HAL_TIM_PWM_ConfigChannel+0x96>
 80098b6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80098ba:	42b3      	cmp	r3, r6
 80098bc:	d00f      	beq.n	80098de <HAL_TIM_PWM_ConfigChannel+0x96>
 80098be:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80098c2:	42b3      	cmp	r3, r6
 80098c4:	d00b      	beq.n	80098de <HAL_TIM_PWM_ConfigChannel+0x96>
 80098c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80098ca:	42b3      	cmp	r3, r6
 80098cc:	d007      	beq.n	80098de <HAL_TIM_PWM_ConfigChannel+0x96>
 80098ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80098d2:	42b3      	cmp	r3, r6
 80098d4:	d003      	beq.n	80098de <HAL_TIM_PWM_ConfigChannel+0x96>
 80098d6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80098da:	42b3      	cmp	r3, r6
 80098dc:	d104      	bne.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0xa0>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098de:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80098e0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098e4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e8:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098ea:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098ec:	6869      	ldr	r1, [r5, #4]
 80098ee:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098f4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80098fe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009902:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009904:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009906:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800990a:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800990c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800990e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009910:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009914:	4610      	mov	r0, r2
 8009916:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009918:	6800      	ldr	r0, [r0, #0]
 800991a:	f7ff fb37 	bl	8008f8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800991e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009920:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009922:	f043 0308 	orr.w	r3, r3, #8
 8009926:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009928:	6983      	ldr	r3, [r0, #24]
 800992a:	f023 0304 	bic.w	r3, r3, #4
 800992e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009930:	6983      	ldr	r3, [r0, #24]
 8009932:	430b      	orrs	r3, r1
 8009934:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8009936:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009938:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 800993a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800993e:	4610      	mov	r0, r2
 8009940:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009942:	6800      	ldr	r0, [r0, #0]
 8009944:	f7ff ff2e 	bl	80097a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009948:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800994a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800994c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009950:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009952:	6983      	ldr	r3, [r0, #24]
 8009954:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009958:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800995a:	6983      	ldr	r3, [r0, #24]
 800995c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009960:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8009962:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009964:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009966:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800996a:	4610      	mov	r0, r2
 800996c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800996e:	6800      	ldr	r0, [r0, #0]
 8009970:	f7ff fb4c 	bl	800900c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009974:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009976:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009978:	f043 0308 	orr.w	r3, r3, #8
 800997c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800997e:	69c3      	ldr	r3, [r0, #28]
 8009980:	f023 0304 	bic.w	r3, r3, #4
 8009984:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009986:	69c3      	ldr	r3, [r0, #28]
 8009988:	430b      	orrs	r3, r1
 800998a:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 800998c:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800998e:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009990:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009994:	4610      	mov	r0, r2
 8009996:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009998:	6800      	ldr	r0, [r0, #0]
 800999a:	f7ff fb87 	bl	80090ac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800999e:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099a0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80099a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80099a6:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80099a8:	69c3      	ldr	r3, [r0, #28]
 80099aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099ae:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099b0:	69c3      	ldr	r3, [r0, #28]
 80099b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80099b6:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 80099b8:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 80099ba:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 80099bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80099c0:	4610      	mov	r0, r2
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80099c4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80099c6:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099c8:	6a1a      	ldr	r2, [r3, #32]
 80099ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80099ce:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80099d0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80099d2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80099d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099d6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80099da:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80099de:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099e0:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80099e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099e6:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ea:	4e1b      	ldr	r6, [pc, #108]	; (8009a58 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80099ec:	42b3      	cmp	r3, r6
 80099ee:	d013      	beq.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80099f0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80099f4:	42b3      	cmp	r3, r6
 80099f6:	d00f      	beq.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80099f8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80099fc:	42b3      	cmp	r3, r6
 80099fe:	d00b      	beq.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8009a00:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a04:	42b3      	cmp	r3, r6
 8009a06:	d007      	beq.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8009a08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a0c:	42b3      	cmp	r3, r6
 8009a0e:	d003      	beq.n	8009a18 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8009a10:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8009a14:	42b3      	cmp	r3, r6
 8009a16:	d104      	bne.n	8009a22 <HAL_TIM_PWM_ConfigChannel+0x1da>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a18:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a1a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a1e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8009a22:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8009a24:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8009a26:	6869      	ldr	r1, [r5, #4]
 8009a28:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8009a2a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a2e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009a30:	f042 0208 	orr.w	r2, r2, #8
 8009a34:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009a36:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009a38:	f021 0104 	bic.w	r1, r1, #4
 8009a3c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009a3e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009a40:	4301      	orrs	r1, r0
 8009a42:	6519      	str	r1, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8009a44:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009a46:	2200      	movs	r2, #0
  __HAL_UNLOCK(htim);
 8009a48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8009a50:	2202      	movs	r2, #2
}
 8009a52:	4610      	mov	r0, r2
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40012c00 	.word	0x40012c00

08009a5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d051      	beq.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8009a64:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a66:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a68:	4d28      	ldr	r5, [pc, #160]	; (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a70:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8009a72:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8009a74:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a76:	d03b      	beq.n	8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8009a78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a7c:	42aa      	cmp	r2, r5
 8009a7e:	d032      	beq.n	8009ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8009a80:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8009a84:	42aa      	cmp	r2, r5
 8009a86:	d02e      	beq.n	8009ae6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a88:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a92:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a94:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8009a98:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a9a:	d016      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009a9c:	4b1c      	ldr	r3, [pc, #112]	; (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d013      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d00f      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d00b      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009ab2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d007      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009aba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d003      	beq.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8009ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d104      	bne.n	8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aca:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009acc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ad0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ad2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8009ad4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8009adc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8009ae0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8009ae2:	4618      	mov	r0, r3
}
 8009ae4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ae6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ae8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009aec:	432b      	orrs	r3, r5
 8009aee:	e7cb      	b.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8009af0:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009af2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009af6:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8009af8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009afc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8009afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b02:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8009b04:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b06:	e7e0      	b.n	8009aca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8009b08:	2002      	movs	r0, #2
}
 8009b0a:	4770      	bx	lr
 8009b0c:	40012c00 	.word	0x40012c00
 8009b10:	40000400 	.word	0x40000400

08009b14 <HAL_TIMEx_CommutCallback>:
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop

08009b18 <HAL_TIMEx_BreakCallback>:
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop

08009b1c <HAL_TIMEx_Break2Callback>:
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop

08009b20 <HAL_TIMEx_EncoderIndexCallback>:
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop

08009b24 <HAL_TIMEx_DirectionChangeCallback>:
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop

08009b28 <HAL_TIMEx_IndexErrorCallback>:
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop

08009b2c <HAL_TIMEx_TransitionErrorCallback>:
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop

08009b30 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b30:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	d15f      	bne.n	8009bf8 <HAL_UART_Receive_IT+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	d05b      	beq.n	8009bf4 <HAL_UART_Receive_IT+0xc4>
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	d059      	beq.n	8009bf4 <HAL_UART_Receive_IT+0xc4>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8009b40:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d057      	beq.n	8009bf8 <HAL_UART_Receive_IT+0xc8>
{
 8009b48:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b4a:	6803      	ldr	r3, [r0, #0]
 8009b4c:	4c59      	ldr	r4, [pc, #356]	; (8009cb4 <HAL_UART_Receive_IT+0x184>)
    __HAL_LOCK(huart);
 8009b4e:	2501      	movs	r5, #1
 8009b50:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b54:	42a3      	cmp	r3, r4
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b56:	f04f 0500 	mov.w	r5, #0
 8009b5a:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b5c:	d00a      	beq.n	8009b74 <HAL_UART_Receive_IT+0x44>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b5e:	685c      	ldr	r4, [r3, #4]
 8009b60:	0224      	lsls	r4, r4, #8
 8009b62:	d507      	bpl.n	8009b74 <HAL_UART_Receive_IT+0x44>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	e853 4f00 	ldrex	r4, [r3]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b68:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	e843 4500 	strex	r5, r4, [r3]
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	d1f7      	bne.n	8009b64 <HAL_UART_Receive_IT+0x34>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009b74:	6885      	ldr	r5, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8009b76:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxISR       = NULL;
 8009b78:	2400      	movs	r4, #0
  UART_MASK_COMPUTATION(huart);
 8009b7a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8009b7e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009b82:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009b86:	6704      	str	r4, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8009b88:	d04f      	beq.n	8009c2a <HAL_UART_Receive_IT+0xfa>
 8009b8a:	2d00      	cmp	r5, #0
 8009b8c:	d177      	bne.n	8009c7e <HAL_UART_Receive_IT+0x14e>
 8009b8e:	6901      	ldr	r1, [r0, #16]
 8009b90:	2900      	cmp	r1, #0
 8009b92:	bf14      	ite	ne
 8009b94:	247f      	movne	r4, #127	; 0x7f
 8009b96:	24ff      	moveq	r4, #255	; 0xff

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b98:	2100      	movs	r1, #0
 8009b9a:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b9e:	2122      	movs	r1, #34	; 0x22
  UART_MASK_COMPUTATION(huart);
 8009ba0:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ba4:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	f103 0108 	add.w	r1, r3, #8
 8009bac:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb0:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	f103 0508 	add.w	r5, r3, #8
 8009bb8:	e845 1400 	strex	r4, r1, [r5]
 8009bbc:	2c00      	cmp	r4, #0
 8009bbe:	d1f3      	bne.n	8009ba8 <HAL_UART_Receive_IT+0x78>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009bc0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8009bc2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009bc6:	d037      	beq.n	8009c38 <HAL_UART_Receive_IT+0x108>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc8:	6882      	ldr	r2, [r0, #8]
 8009bca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009bce:	6902      	ldr	r2, [r0, #16]
 8009bd0:	d014      	beq.n	8009bfc <HAL_UART_Receive_IT+0xcc>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009bd2:	4c39      	ldr	r4, [pc, #228]	; (8009cb8 <HAL_UART_Receive_IT+0x188>)
 8009bd4:	6704      	str	r4, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009bdc:	b1a2      	cbz	r2, 8009c08 <HAL_UART_Receive_IT+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009be2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be6:	e843 2100 	strex	r1, r2, [r3]
 8009bea:	2900      	cmp	r1, #0
 8009bec:	d1f7      	bne.n	8009bde <HAL_UART_Receive_IT+0xae>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8009bee:	2000      	movs	r0, #0
}
 8009bf0:	bc30      	pop	{r4, r5}
 8009bf2:	4770      	bx	lr
      return HAL_ERROR;
 8009bf4:	2001      	movs	r0, #1
 8009bf6:	4770      	bx	lr
    return HAL_BUSY;
 8009bf8:	2002      	movs	r0, #2
}
 8009bfa:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d147      	bne.n	8009c90 <HAL_UART_Receive_IT+0x160>
 8009c00:	492e      	ldr	r1, [pc, #184]	; (8009cbc <HAL_UART_Receive_IT+0x18c>)
 8009c02:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009c04:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009c0c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	e843 2100 	strex	r1, r2, [r3]
 8009c14:	2900      	cmp	r1, #0
 8009c16:	d0ea      	beq.n	8009bee <HAL_UART_Receive_IT+0xbe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	e853 2f00 	ldrex	r2, [r3]
 8009c1c:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c20:	e843 2100 	strex	r1, r2, [r3]
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d1ef      	bne.n	8009c08 <HAL_UART_Receive_IT+0xd8>
 8009c28:	e7e1      	b.n	8009bee <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 8009c2a:	6901      	ldr	r1, [r0, #16]
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009c32:	bf18      	it	ne
 8009c34:	24ff      	movne	r4, #255	; 0xff
 8009c36:	e7af      	b.n	8009b98 <HAL_UART_Receive_IT+0x68>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009c38:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8009c3c:	4291      	cmp	r1, r2
 8009c3e:	d8c3      	bhi.n	8009bc8 <HAL_UART_Receive_IT+0x98>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c40:	6882      	ldr	r2, [r0, #8]
 8009c42:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009c46:	6902      	ldr	r2, [r0, #16]
 8009c48:	d028      	beq.n	8009c9c <HAL_UART_Receive_IT+0x16c>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009c4a:	491d      	ldr	r1, [pc, #116]	; (8009cc0 <HAL_UART_Receive_IT+0x190>)
 8009c4c:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009c4e:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009c52:	b13a      	cbz	r2, 8009c64 <HAL_UART_Receive_IT+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	e843 2100 	strex	r1, r2, [r3]
 8009c60:	2900      	cmp	r1, #0
 8009c62:	d1f7      	bne.n	8009c54 <HAL_UART_Receive_IT+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	f103 0208 	add.w	r2, r3, #8
 8009c68:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009c6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	f103 0008 	add.w	r0, r3, #8
 8009c74:	e840 2100 	strex	r1, r2, [r0]
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	d1f3      	bne.n	8009c64 <HAL_UART_Receive_IT+0x134>
 8009c7c:	e7b7      	b.n	8009bee <HAL_UART_Receive_IT+0xbe>
  UART_MASK_COMPUTATION(huart);
 8009c7e:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8009c82:	d189      	bne.n	8009b98 <HAL_UART_Receive_IT+0x68>
 8009c84:	6901      	ldr	r1, [r0, #16]
 8009c86:	2900      	cmp	r1, #0
 8009c88:	bf0c      	ite	eq
 8009c8a:	247f      	moveq	r4, #127	; 0x7f
 8009c8c:	243f      	movne	r4, #63	; 0x3f
 8009c8e:	e783      	b.n	8009b98 <HAL_UART_Receive_IT+0x68>
      huart->RxISR = UART_RxISR_8BIT;
 8009c90:	4909      	ldr	r1, [pc, #36]	; (8009cb8 <HAL_UART_Receive_IT+0x188>)
 8009c92:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009c94:	2200      	movs	r2, #0
 8009c96:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009c9a:	e7a0      	b.n	8009bde <HAL_UART_Receive_IT+0xae>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c9c:	b922      	cbnz	r2, 8009ca8 <HAL_UART_Receive_IT+0x178>
 8009c9e:	4909      	ldr	r1, [pc, #36]	; (8009cc4 <HAL_UART_Receive_IT+0x194>)
 8009ca0:	6701      	str	r1, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009ca2:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009ca6:	e7dd      	b.n	8009c64 <HAL_UART_Receive_IT+0x134>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009ca8:	4a05      	ldr	r2, [pc, #20]	; (8009cc0 <HAL_UART_Receive_IT+0x190>)
 8009caa:	6702      	str	r2, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009cac:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009cb0:	e7d0      	b.n	8009c54 <HAL_UART_Receive_IT+0x124>
 8009cb2:	bf00      	nop
 8009cb4:	40008000 	.word	0x40008000
 8009cb8:	0800a2e5 	.word	0x0800a2e5
 8009cbc:	0800a299 	.word	0x0800a299
 8009cc0:	0800a325 	.word	0x0800a325
 8009cc4:	0800a4d1 	.word	0x0800a4d1

08009cc8 <HAL_UART_Transmit_DMA>:
{
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8009cca:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8009cce:	2e20      	cmp	r6, #32
 8009cd0:	d141      	bne.n	8009d56 <HAL_UART_Transmit_DMA+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8009cd2:	2900      	cmp	r1, #0
 8009cd4:	d03d      	beq.n	8009d52 <HAL_UART_Transmit_DMA+0x8a>
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	d03b      	beq.n	8009d52 <HAL_UART_Transmit_DMA+0x8a>
 8009cda:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8009cdc:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8009ce0:	2801      	cmp	r0, #1
 8009ce2:	d038      	beq.n	8009d56 <HAL_UART_Transmit_DMA+0x8e>
    if (huart->hdmatx != NULL)
 8009ce4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 8009ce6:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cea:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8009cec:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cee:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf0:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 8009cf4:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009cf6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 8009cfa:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cfe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8009d02:	b190      	cbz	r0, 8009d2a <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009d04:	f8df c064 	ldr.w	ip, [pc, #100]	; 8009d6c <HAL_UART_Transmit_DMA+0xa4>
      huart->hdmatx->XferAbortCallback = NULL;
 8009d08:	6387      	str	r7, [r0, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009d0e:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009d12:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8009d70 <HAL_UART_Transmit_DMA+0xa8>
 8009d16:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009d1a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8009d74 <HAL_UART_Transmit_DMA+0xac>
 8009d1e:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009d22:	3228      	adds	r2, #40	; 0x28
 8009d24:	f7fd fa34 	bl	8007190 <HAL_DMA_Start_IT>
 8009d28:	b9b8      	cbnz	r0, 8009d5a <HAL_UART_Transmit_DMA+0x92>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8009d2e:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009d30:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8009d32:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	f102 0308 	add.w	r3, r2, #8
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	f102 0008 	add.w	r0, r2, #8
 8009d46:	e840 3100 	strex	r1, r3, [r0]
 8009d4a:	2900      	cmp	r1, #0
 8009d4c:	d1f3      	bne.n	8009d36 <HAL_UART_Transmit_DMA+0x6e>
    return HAL_OK;
 8009d4e:	2000      	movs	r0, #0
}
 8009d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8009d52:	2001      	movs	r0, #1
}
 8009d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009d56:	2002      	movs	r0, #2
}
 8009d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d5a:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8009d5c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d60:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 8009d64:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8009d66:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8009d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d6c:	08009d7d 	.word	0x08009d7d
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009dd5 	.word	0x08009dd5

08009d78 <HAL_UART_TxCpltCallback>:
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop

08009d7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d7c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009d7e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d80:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f013 0320 	ands.w	r3, r3, #32
 8009d88:	d117      	bne.n	8009dba <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8009d8a:	6802      	ldr	r2, [r0, #0]
 8009d8c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d90:	f102 0308 	add.w	r3, r2, #8
 8009d94:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9c:	f102 0008 	add.w	r0, r2, #8
 8009da0:	e840 3100 	strex	r1, r3, [r0]
 8009da4:	2900      	cmp	r1, #0
 8009da6:	d1f3      	bne.n	8009d90 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da8:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db0:	e842 3100 	strex	r1, r3, [r2]
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d1f7      	bne.n	8009da8 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009db8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8009dba:	f7ff ffdd 	bl	8009d78 <HAL_UART_TxCpltCallback>
}
 8009dbe:	bd08      	pop	{r3, pc}

08009dc0 <HAL_UART_TxHalfCpltCallback>:
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop

08009dc4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009dc4:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009dc6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009dc8:	f7ff fffa 	bl	8009dc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dcc:	bd08      	pop	{r3, pc}
 8009dce:	bf00      	nop

08009dd0 <HAL_UART_ErrorCallback>:
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop

08009dd4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dd4:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009dd6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009dd8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 8009ddc:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009dde:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	0612      	lsls	r2, r2, #24
 8009de6:	d501      	bpl.n	8009dec <UART_DMAError+0x18>
 8009de8:	2921      	cmp	r1, #33	; 0x21
 8009dea:	d00d      	beq.n	8009e08 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	0652      	lsls	r2, r2, #25
 8009df0:	d501      	bpl.n	8009df6 <UART_DMAError+0x22>
 8009df2:	2c22      	cmp	r4, #34	; 0x22
 8009df4:	d023      	beq.n	8009e3e <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009df6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8009dfa:	f043 0310 	orr.w	r3, r3, #16
 8009dfe:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e02:	f7ff ffe5 	bl	8009dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e06:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009e12:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	e843 2100 	strex	r1, r2, [r3]
 8009e1a:	2900      	cmp	r1, #0
 8009e1c:	d1f7      	bne.n	8009e0e <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	f103 0208 	add.w	r2, r3, #8
 8009e22:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009e26:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	f103 0c08 	add.w	ip, r3, #8
 8009e2e:	e84c 2100 	strex	r1, r2, [ip]
 8009e32:	2900      	cmp	r1, #0
 8009e34:	d1f3      	bne.n	8009e1e <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8009e36:	2220      	movs	r2, #32
 8009e38:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8009e3c:	e7d6      	b.n	8009dec <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4c:	e843 2100 	strex	r1, r2, [r3]
 8009e50:	2900      	cmp	r1, #0
 8009e52:	d1f7      	bne.n	8009e44 <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e54:	4c13      	ldr	r4, [pc, #76]	; (8009ea4 <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	f103 0208 	add.w	r2, r3, #8
 8009e5a:	e852 2f00 	ldrex	r2, [r2]
 8009e5e:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e60:	f103 0c08 	add.w	ip, r3, #8
 8009e64:	e84c 2100 	strex	r1, r2, [ip]
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	d1f4      	bne.n	8009e56 <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e6c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8009e6e:	2a01      	cmp	r2, #1
 8009e70:	d006      	beq.n	8009e80 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e72:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009e74:	2220      	movs	r2, #32
 8009e76:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8009e7a:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8009e7e:	e7ba      	b.n	8009df6 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e84:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	e843 2100 	strex	r1, r2, [r3]
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	d0f0      	beq.n	8009e72 <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	e853 2f00 	ldrex	r2, [r3]
 8009e94:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e98:	e843 2100 	strex	r1, r2, [r3]
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	d1ef      	bne.n	8009e80 <UART_DMAError+0xac>
 8009ea0:	e7e7      	b.n	8009e72 <UART_DMAError+0x9e>
 8009ea2:	bf00      	nop
 8009ea4:	effffffe 	.word	0xeffffffe

08009ea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ea8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eaa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009eb2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009eb6:	f7ff ff8b 	bl	8009dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eba:	bd08      	pop	{r3, pc}

08009ebc <HAL_UARTEx_RxEventCallback>:
}
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop

08009ec0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ec0:	6803      	ldr	r3, [r0, #0]
 8009ec2:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ec4:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009ec6:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8009eca:	ea12 0f0c 	tst.w	r2, ip
{
 8009ece:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ed0:	689d      	ldr	r5, [r3, #8]
{
 8009ed2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8009ed4:	f000 80eb 	beq.w	800a0ae <HAL_UART_IRQHandler+0x1ee>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ed8:	489a      	ldr	r0, [pc, #616]	; (800a144 <HAL_UART_IRQHandler+0x284>)
 8009eda:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ede:	489a      	ldr	r0, [pc, #616]	; (800a148 <HAL_UART_IRQHandler+0x288>)
 8009ee0:	4008      	ands	r0, r1
 8009ee2:	ea50 000c 	orrs.w	r0, r0, ip
 8009ee6:	d155      	bne.n	8009f94 <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ee8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009eea:	2801      	cmp	r0, #1
 8009eec:	d022      	beq.n	8009f34 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009eee:	02d6      	lsls	r6, r2, #11
 8009ef0:	d502      	bpl.n	8009ef8 <HAL_UART_IRQHandler+0x38>
 8009ef2:	0268      	lsls	r0, r5, #9
 8009ef4:	f100 8104 	bmi.w	800a100 <HAL_UART_IRQHandler+0x240>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ef8:	0616      	lsls	r6, r2, #24
 8009efa:	d506      	bpl.n	8009f0a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009efc:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009f00:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f04:	4328      	orrs	r0, r5
 8009f06:	f040 80f3 	bne.w	800a0f0 <HAL_UART_IRQHandler+0x230>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f0a:	0650      	lsls	r0, r2, #25
 8009f0c:	d534      	bpl.n	8009f78 <HAL_UART_IRQHandler+0xb8>
 8009f0e:	064e      	lsls	r6, r1, #25
 8009f10:	d532      	bpl.n	8009f78 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f12:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	e843 2100 	strex	r1, r2, [r3]
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d1f7      	bne.n	8009f12 <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f22:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f24:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009f26:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8009f2a:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f7ff ff23 	bl	8009d78 <HAL_UART_TxCpltCallback>
}
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f34:	06d6      	lsls	r6, r2, #27
 8009f36:	d5da      	bpl.n	8009eee <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f38:	06c8      	lsls	r0, r1, #27
 8009f3a:	d5d8      	bpl.n	8009eee <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f3c:	2210      	movs	r2, #16
 8009f3e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	0651      	lsls	r1, r2, #25
 8009f44:	f140 8106 	bpl.w	800a154 <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f48:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009f4a:	6801      	ldr	r1, [r0, #0]
 8009f4c:	684a      	ldr	r2, [r1, #4]
 8009f4e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009f50:	2a00      	cmp	r2, #0
 8009f52:	d0ee      	beq.n	8009f32 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f54:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009f58:	4295      	cmp	r5, r2
 8009f5a:	d9ea      	bls.n	8009f32 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8009f5c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f60:	680a      	ldr	r2, [r1, #0]
 8009f62:	0692      	lsls	r2, r2, #26
 8009f64:	f140 812b 	bpl.w	800a1be <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f68:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009f6c:	1ae9      	subs	r1, r5, r3
 8009f6e:	4620      	mov	r0, r4
 8009f70:	b289      	uxth	r1, r1
 8009f72:	f7ff ffa3 	bl	8009ebc <HAL_UARTEx_RxEventCallback>
}
 8009f76:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f78:	0215      	lsls	r5, r2, #8
 8009f7a:	d502      	bpl.n	8009f82 <HAL_UART_IRQHandler+0xc2>
 8009f7c:	0048      	lsls	r0, r1, #1
 8009f7e:	f100 80dc 	bmi.w	800a13a <HAL_UART_IRQHandler+0x27a>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f82:	01d3      	lsls	r3, r2, #7
 8009f84:	d5d5      	bpl.n	8009f32 <HAL_UART_IRQHandler+0x72>
 8009f86:	2900      	cmp	r1, #0
 8009f88:	dad3      	bge.n	8009f32 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f8a:	4620      	mov	r0, r4
}
 8009f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f90:	f000 bf04 	b.w	800ad9c <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f94:	07d0      	lsls	r0, r2, #31
 8009f96:	d509      	bpl.n	8009fac <HAL_UART_IRQHandler+0xec>
 8009f98:	05ce      	lsls	r6, r1, #23
 8009f9a:	d507      	bpl.n	8009fac <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fa0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009fa4:	f040 0001 	orr.w	r0, r0, #1
 8009fa8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fac:	0790      	lsls	r0, r2, #30
 8009fae:	f140 8090 	bpl.w	800a0d2 <HAL_UART_IRQHandler+0x212>
 8009fb2:	07ee      	lsls	r6, r5, #31
 8009fb4:	d50a      	bpl.n	8009fcc <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fb6:	2002      	movs	r0, #2
 8009fb8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fba:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009fbe:	f040 0004 	orr.w	r0, r0, #4
 8009fc2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fc6:	0750      	lsls	r0, r2, #29
 8009fc8:	f100 8089 	bmi.w	800a0de <HAL_UART_IRQHandler+0x21e>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009fcc:	0716      	lsls	r6, r2, #28
 8009fce:	d50c      	bpl.n	8009fea <HAL_UART_IRQHandler+0x12a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009fd0:	f001 0020 	and.w	r0, r1, #32
 8009fd4:	ea50 000c 	orrs.w	r0, r0, ip
 8009fd8:	d007      	beq.n	8009fea <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009fda:	2008      	movs	r0, #8
 8009fdc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fde:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009fe2:	f040 0008 	orr.w	r0, r0, #8
 8009fe6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009fea:	0510      	lsls	r0, r2, #20
 8009fec:	d50a      	bpl.n	800a004 <HAL_UART_IRQHandler+0x144>
 8009fee:	014e      	lsls	r6, r1, #5
 8009ff0:	d508      	bpl.n	800a004 <HAL_UART_IRQHandler+0x144>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ff2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009ff6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ff8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009ffc:	f040 0020 	orr.w	r0, r0, #32
 800a000:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a004:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a008:	2800      	cmp	r0, #0
 800a00a:	d092      	beq.n	8009f32 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a00c:	0690      	lsls	r0, r2, #26
 800a00e:	d50a      	bpl.n	800a026 <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a010:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a014:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800a018:	4329      	orrs	r1, r5
 800a01a:	d004      	beq.n	800a026 <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 800a01c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a01e:	b112      	cbz	r2, 800a026 <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 800a020:	4620      	mov	r0, r4
 800a022:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a024:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800a026:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a02a:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a02c:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a030:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a034:	ea52 0501 	orrs.w	r5, r2, r1
 800a038:	f000 80f2 	beq.w	800a220 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a040:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	e843 2100 	strex	r1, r2, [r3]
 800a048:	2900      	cmp	r1, #0
 800a04a:	d1f7      	bne.n	800a03c <HAL_UART_IRQHandler+0x17c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a04c:	483f      	ldr	r0, [pc, #252]	; (800a14c <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	f103 0208 	add.w	r2, r3, #8
 800a052:	e852 2f00 	ldrex	r2, [r2]
 800a056:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a058:	f103 0508 	add.w	r5, r3, #8
 800a05c:	e845 2100 	strex	r1, r2, [r5]
 800a060:	2900      	cmp	r1, #0
 800a062:	d1f4      	bne.n	800a04e <HAL_UART_IRQHandler+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a064:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a066:	2a01      	cmp	r2, #1
 800a068:	d052      	beq.n	800a110 <HAL_UART_IRQHandler+0x250>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a06c:	2120      	movs	r1, #32
 800a06e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a072:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a074:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800a076:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a078:	064a      	lsls	r2, r1, #25
 800a07a:	d55a      	bpl.n	800a132 <HAL_UART_IRQHandler+0x272>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07c:	f103 0208 	add.w	r2, r3, #8
 800a080:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	f103 0008 	add.w	r0, r3, #8
 800a08c:	e840 2100 	strex	r1, r2, [r0]
 800a090:	2900      	cmp	r1, #0
 800a092:	d1f3      	bne.n	800a07c <HAL_UART_IRQHandler+0x1bc>
          if (huart->hdmarx != NULL)
 800a094:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a096:	2800      	cmp	r0, #0
 800a098:	d04b      	beq.n	800a132 <HAL_UART_IRQHandler+0x272>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a09a:	4b2d      	ldr	r3, [pc, #180]	; (800a150 <HAL_UART_IRQHandler+0x290>)
 800a09c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a09e:	f7fd f90b 	bl	80072b8 <HAL_DMA_Abort_IT>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f43f af45 	beq.w	8009f32 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0a8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a0aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a0ac:	e00e      	b.n	800a0cc <HAL_UART_IRQHandler+0x20c>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0ae:	0696      	lsls	r6, r2, #26
 800a0b0:	f57f af1a 	bpl.w	8009ee8 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0b4:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0b8:	f005 5e80 	and.w	lr, r5, #268435456	; 0x10000000
 800a0bc:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800a0c0:	f43f af12 	beq.w	8009ee8 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 800a0c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f43f af33 	beq.w	8009f32 <HAL_UART_IRQHandler+0x72>
}
 800a0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0d0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0d2:	0756      	lsls	r6, r2, #29
 800a0d4:	f57f af7a 	bpl.w	8009fcc <HAL_UART_IRQHandler+0x10c>
 800a0d8:	07e8      	lsls	r0, r5, #31
 800a0da:	f57f af77 	bpl.w	8009fcc <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0de:	2004      	movs	r0, #4
 800a0e0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0e2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800a0e6:	f040 0002 	orr.w	r0, r0, #2
 800a0ea:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
 800a0ee:	e76d      	b.n	8009fcc <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 800a0f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f43f af1d 	beq.w	8009f32 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 800a0f8:	4620      	mov	r0, r4
}
 800a0fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800a0fe:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a100:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800a104:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a106:	621a      	str	r2, [r3, #32]
}
 800a108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800a10c:	f000 be44 	b.w	800ad98 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a114:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a118:	e843 2100 	strex	r1, r2, [r3]
 800a11c:	2900      	cmp	r1, #0
 800a11e:	d0a4      	beq.n	800a06a <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a120:	e853 2f00 	ldrex	r2, [r3]
 800a124:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	e843 2100 	strex	r1, r2, [r3]
 800a12c:	2900      	cmp	r1, #0
 800a12e:	d1ef      	bne.n	800a110 <HAL_UART_IRQHandler+0x250>
 800a130:	e79b      	b.n	800a06a <HAL_UART_IRQHandler+0x1aa>
            HAL_UART_ErrorCallback(huart);
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff fe4c 	bl	8009dd0 <HAL_UART_ErrorCallback>
}
 800a138:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a13a:	4620      	mov	r0, r4
}
 800a13c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a140:	f000 be2e 	b.w	800ada0 <HAL_UARTEx_TxFifoEmptyCallback>
 800a144:	10000001 	.word	0x10000001
 800a148:	04000120 	.word	0x04000120
 800a14c:	effffffe 	.word	0xeffffffe
 800a150:	08009ea9 	.word	0x08009ea9
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a154:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800a158:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a15c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800a160:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a162:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800a164:	2a00      	cmp	r2, #0
 800a166:	f43f aee4 	beq.w	8009f32 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a16a:	1a41      	subs	r1, r0, r1
 800a16c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a16e:	2900      	cmp	r1, #0
 800a170:	f43f aedf 	beq.w	8009f32 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a174:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a178:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	e843 2000 	strex	r0, r2, [r3]
 800a180:	2800      	cmp	r0, #0
 800a182:	d1f7      	bne.n	800a174 <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a184:	4d29      	ldr	r5, [pc, #164]	; (800a22c <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	f103 0208 	add.w	r2, r3, #8
 800a18a:	e852 2f00 	ldrex	r2, [r2]
 800a18e:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	f103 0c08 	add.w	ip, r3, #8
 800a194:	e84c 2000 	strex	r0, r2, [ip]
 800a198:	2800      	cmp	r0, #0
 800a19a:	d1f4      	bne.n	800a186 <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 800a19c:	2220      	movs	r2, #32
 800a19e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800a1a2:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1aa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	e843 2000 	strex	r0, r2, [r3]
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d1f7      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7ff fe80 	bl	8009ebc <HAL_UARTEx_RxEventCallback>
}
 800a1bc:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	e843 2100 	strex	r1, r2, [r3]
 800a1ca:	2900      	cmp	r1, #0
 800a1cc:	d1f7      	bne.n	800a1be <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	f103 0208 	add.w	r2, r3, #8
 800a1d2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1da:	f103 0508 	add.w	r5, r3, #8
 800a1de:	e845 2100 	strex	r1, r2, [r5]
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	d1f3      	bne.n	800a1ce <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e6:	f103 0208 	add.w	r2, r3, #8
 800a1ea:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	f103 0508 	add.w	r5, r3, #8
 800a1f6:	e845 2100 	strex	r1, r2, [r5]
 800a1fa:	2900      	cmp	r1, #0
 800a1fc:	d1f3      	bne.n	800a1e6 <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 800a1fe:	2220      	movs	r2, #32
 800a200:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a204:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a20a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	e843 2100 	strex	r1, r2, [r3]
 800a212:	2900      	cmp	r1, #0
 800a214:	d1f7      	bne.n	800a206 <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a216:	f7fd f815 	bl	8007244 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a21a:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 800a21e:	e6a3      	b.n	8009f68 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 800a220:	4620      	mov	r0, r4
 800a222:	f7ff fdd5 	bl	8009dd0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a226:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	effffffe 	.word	0xeffffffe

0800a230 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 800a230:	b508      	push	{r3, lr}
 800a232:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a238:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	e843 2100 	strex	r1, r2, [r3]
 800a240:	2900      	cmp	r1, #0
 800a242:	d1f7      	bne.n	800a234 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a244:	f103 0208 	add.w	r2, r3, #8
 800a248:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a24c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	f103 0c08 	add.w	ip, r3, #8
 800a254:	e84c 2100 	strex	r1, r2, [ip]
 800a258:	2900      	cmp	r1, #0
 800a25a:	d1f3      	bne.n	800a244 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a25c:	2220      	movs	r2, #32
 800a25e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a262:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 800a264:	6701      	str	r1, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a266:	2a01      	cmp	r2, #1
 800a268:	d112      	bne.n	800a290 <UART_RxISR_16BIT.part.0+0x60>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26a:	66c1      	str	r1, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a270:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	e843 2100 	strex	r1, r2, [r3]
 800a278:	2900      	cmp	r1, #0
 800a27a:	d1f7      	bne.n	800a26c <UART_RxISR_16BIT.part.0+0x3c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a27c:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a27e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a282:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a284:	bf44      	itt	mi
 800a286:	2210      	movmi	r2, #16
 800a288:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a28a:	f7ff fe17 	bl	8009ebc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a28e:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800a290:	f7f9 fdc0 	bl	8003e14 <HAL_UART_RxCpltCallback>
}
 800a294:	bd08      	pop	{r3, pc}
 800a296:	bf00      	nop

0800a298 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a298:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 800a29c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2a0:	2922      	cmp	r1, #34	; 0x22
 800a2a2:	d005      	beq.n	800a2b0 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2a4:	6802      	ldr	r2, [r0, #0]
 800a2a6:	6993      	ldr	r3, [r2, #24]
 800a2a8:	f043 0308 	orr.w	r3, r3, #8
 800a2ac:	6193      	str	r3, [r2, #24]
 800a2ae:	4770      	bx	lr
{
 800a2b0:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2b2:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2b4:	6d81      	ldr	r1, [r0, #88]	; 0x58
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2b6:	6a64      	ldr	r4, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2b8:	4022      	ands	r2, r4
 800a2ba:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 800a2be:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 800a2c2:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a2c4:	3a01      	subs	r2, #1
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800a2cc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	b91b      	cbnz	r3, 800a2dc <UART_RxISR_16BIT+0x44>
  }
}
 800a2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2d8:	f7ff bfaa 	b.w	800a230 <UART_RxISR_16BIT.part.0>
 800a2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop

0800a2e4 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2e4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  uint16_t uhMask = huart->Mask;
 800a2e8:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2ec:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2ee:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2f0:	d004      	beq.n	800a2fc <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2f2:	6993      	ldr	r3, [r2, #24]
 800a2f4:	f043 0308 	orr.w	r3, r3, #8
 800a2f8:	6193      	str	r3, [r2, #24]
}
 800a2fa:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a2fe:	400a      	ands	r2, r1
 800a300:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800a302:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800a304:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 800a308:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a30a:	3a01      	subs	r2, #1
 800a30c:	b292      	uxth	r2, r2
 800a30e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800a312:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 800a316:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 800a318:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800a31a:	6581      	str	r1, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	d1ec      	bne.n	800a2fa <UART_RxISR_8BIT+0x16>
 800a320:	f7ff bf86 	b.w	800a230 <UART_RxISR_16BIT.part.0>

0800a324 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a328:	6802      	ldr	r2, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 800a32a:	f8b0 b060 	ldrh.w	fp, [r0, #96]	; 0x60
{
 800a32e:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a330:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a332:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a334:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a336:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a33a:	2922      	cmp	r1, #34	; 0x22
 800a33c:	d006      	beq.n	800a34c <UART_RxISR_8BIT_FIFOEN+0x28>
 800a33e:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a340:	6992      	ldr	r2, [r2, #24]
 800a342:	f042 0208 	orr.w	r2, r2, #8
 800a346:	619a      	str	r2, [r3, #24]
  }
}
 800a348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a34c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 80b5 	beq.w	800a4c0 <UART_RxISR_8BIT_FIFOEN+0x19c>
 800a356:	0685      	lsls	r5, r0, #26
 800a358:	d57b      	bpl.n	800a452 <UART_RxISR_8BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a35a:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a4cc <UART_RxISR_8BIT_FIFOEN+0x1a8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a35e:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a362:	f006 0601 	and.w	r6, r6, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a366:	fa5f fb8b 	uxtb.w	fp, fp
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a36a:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a36e:	f04f 0904 	mov.w	r9, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a372:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a374:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a376:	ea0b 0202 	and.w	r2, fp, r2
 800a37a:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 800a37c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a380:	6823      	ldr	r3, [r4, #0]
      huart->pRxBuffPtr++;
 800a382:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a384:	3901      	subs	r1, #1
 800a386:	b289      	uxth	r1, r1
 800a388:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a38c:	69dd      	ldr	r5, [r3, #28]
      huart->pRxBuffPtr++;
 800a38e:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a390:	0768      	lsls	r0, r5, #29
      huart->pRxBuffPtr++;
 800a392:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a394:	d01a      	beq.n	800a3cc <UART_RxISR_8BIT_FIFOEN+0xa8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a396:	07e9      	lsls	r1, r5, #31
 800a398:	d508      	bpl.n	800a3ac <UART_RxISR_8BIT_FIFOEN+0x88>
 800a39a:	b13f      	cbz	r7, 800a3ac <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a39c:	2201      	movs	r2, #1
 800a39e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3a0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a3a4:	f042 0201 	orr.w	r2, r2, #1
 800a3a8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3ac:	07aa      	lsls	r2, r5, #30
 800a3ae:	d515      	bpl.n	800a3dc <UART_RxISR_8BIT_FIFOEN+0xb8>
 800a3b0:	b14e      	cbz	r6, 800a3c6 <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3b6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3ba:	0768      	lsls	r0, r5, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3bc:	f042 0204 	orr.w	r2, r2, #4
 800a3c0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3c4:	d40e      	bmi.n	800a3e4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a3ca:	b9bb      	cbnz	r3, 800a3fc <UART_RxISR_8BIT_FIFOEN+0xd8>
      if (huart->RxXferCount == 0U)
 800a3cc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	b1eb      	cbz	r3, 800a410 <UART_RxISR_8BIT_FIFOEN+0xec>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3d4:	06ab      	lsls	r3, r5, #26
 800a3d6:	d53c      	bpl.n	800a452 <UART_RxISR_8BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3d8:	6822      	ldr	r2, [r4, #0]
 800a3da:	e7ca      	b.n	800a372 <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3dc:	0769      	lsls	r1, r5, #29
 800a3de:	d5f2      	bpl.n	800a3c6 <UART_RxISR_8BIT_FIFOEN+0xa2>
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	d0f0      	beq.n	800a3c6 <UART_RxISR_8BIT_FIFOEN+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a3e4:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a3ec:	f043 0302 	orr.w	r3, r3, #2
 800a3f0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3f4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d0e7      	beq.n	800a3cc <UART_RxISR_8BIT_FIFOEN+0xa8>
          HAL_UART_ErrorCallback(huart);
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f7ff fce7 	bl	8009dd0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a402:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800a406:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e1      	bne.n	800a3d4 <UART_RxISR_8BIT_FIFOEN+0xb0>
 800a410:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	e843 2100 	strex	r1, r2, [r3]
 800a41e:	2900      	cmp	r1, #0
 800a420:	d1f7      	bne.n	800a412 <UART_RxISR_8BIT_FIFOEN+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	f103 0208 	add.w	r2, r3, #8
 800a426:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a42a:	ea02 020a 	and.w	r2, r2, sl
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	f103 0008 	add.w	r0, r3, #8
 800a432:	e840 2100 	strex	r1, r2, [r0]
 800a436:	2900      	cmp	r1, #0
 800a438:	d1f3      	bne.n	800a422 <UART_RxISR_8BIT_FIFOEN+0xfe>
        huart->RxState = HAL_UART_STATE_READY;
 800a43a:	2220      	movs	r2, #32
 800a43c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a440:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800a442:	6721      	str	r1, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a444:	2a01      	cmp	r2, #1
 800a446:	d027      	beq.n	800a498 <UART_RxISR_8BIT_FIFOEN+0x174>
          HAL_UART_RxCpltCallback(huart);
 800a448:	4620      	mov	r0, r4
 800a44a:	f7f9 fce3 	bl	8003e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a44e:	06ab      	lsls	r3, r5, #26
 800a450:	d4c2      	bmi.n	800a3d8 <UART_RxISR_8BIT_FIFOEN+0xb4>
    rxdatacount = huart->RxXferCount;
 800a452:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a456:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f43f af75 	beq.w	800a348 <UART_RxISR_8BIT_FIFOEN+0x24>
 800a45e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800a462:	429a      	cmp	r2, r3
 800a464:	f67f af70 	bls.w	800a348 <UART_RxISR_8BIT_FIFOEN+0x24>
 800a468:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46a:	f103 0208 	add.w	r2, r3, #8
 800a46e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a472:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	f103 0008 	add.w	r0, r3, #8
 800a47a:	e840 2100 	strex	r1, r2, [r0]
 800a47e:	2900      	cmp	r1, #0
 800a480:	d1f3      	bne.n	800a46a <UART_RxISR_8BIT_FIFOEN+0x146>
      huart->RxISR = UART_RxISR_8BIT;
 800a482:	4a11      	ldr	r2, [pc, #68]	; (800a4c8 <UART_RxISR_8BIT_FIFOEN+0x1a4>)
 800a484:	6722      	str	r2, [r4, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a48a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48e:	e843 2100 	strex	r1, r2, [r3]
 800a492:	2900      	cmp	r1, #0
 800a494:	d1f7      	bne.n	800a486 <UART_RxISR_8BIT_FIFOEN+0x162>
 800a496:	e757      	b.n	800a348 <UART_RxISR_8BIT_FIFOEN+0x24>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a498:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	e843 2100 	strex	r1, r2, [r3]
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d1f7      	bne.n	800a49a <UART_RxISR_8BIT_FIFOEN+0x176>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4aa:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4ac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4b0:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4b2:	bf44      	itt	mi
 800a4b4:	2210      	movmi	r2, #16
 800a4b6:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f7ff fcff 	bl	8009ebc <HAL_UARTEx_RxEventCallback>
 800a4be:	e789      	b.n	800a3d4 <UART_RxISR_8BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 800a4c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a4c4:	e740      	b.n	800a348 <UART_RxISR_8BIT_FIFOEN+0x24>
 800a4c6:	bf00      	nop
 800a4c8:	0800a2e5 	.word	0x0800a2e5
 800a4cc:	effffffe 	.word	0xeffffffe

0800a4d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a4d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a4d4:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 800a4d6:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a4da:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a4dc:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a4de:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4e0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a4e4:	2a22      	cmp	r2, #34	; 0x22
 800a4e6:	d005      	beq.n	800a4f4 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4e8:	699a      	ldr	r2, [r3, #24]
 800a4ea:	f042 0208 	orr.w	r2, r2, #8
 800a4ee:	619a      	str	r2, [r3, #24]
  }
}
 800a4f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4f4:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 800a4f8:	4683      	mov	fp, r0
 800a4fa:	2a00      	cmp	r2, #0
 800a4fc:	f000 80b9 	beq.w	800a672 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800a500:	068c      	lsls	r4, r1, #26
 800a502:	d57c      	bpl.n	800a5fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a504:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800a67c <UART_RxISR_16BIT_FIFOEN+0x1ac>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a508:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a50c:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a510:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a512:	f04f 0804 	mov.w	r8, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800a518:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
 800a51c:	ea0a 0202 	and.w	r2, sl, r2
 800a520:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 800a524:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 800a528:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
 800a52c:	3a01      	subs	r2, #1
 800a52e:	b292      	uxth	r2, r2
 800a530:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a534:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a536:	0760      	lsls	r0, r4, #29
 800a538:	d01a      	beq.n	800a570 <UART_RxISR_16BIT_FIFOEN+0xa0>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a53a:	07e1      	lsls	r1, r4, #31
 800a53c:	d508      	bpl.n	800a550 <UART_RxISR_16BIT_FIFOEN+0x80>
 800a53e:	b13e      	cbz	r6, 800a550 <UART_RxISR_16BIT_FIFOEN+0x80>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a540:	2201      	movs	r2, #1
 800a542:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a544:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
 800a548:	f042 0201 	orr.w	r2, r2, #1
 800a54c:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a550:	07a2      	lsls	r2, r4, #30
 800a552:	d516      	bpl.n	800a582 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a554:	b14d      	cbz	r5, 800a56a <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a556:	2202      	movs	r2, #2
 800a558:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a55a:	f8db 208c 	ldr.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a55e:	0760      	lsls	r0, r4, #29
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a560:	f042 0204 	orr.w	r2, r2, #4
 800a564:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a568:	d40f      	bmi.n	800a58a <UART_RxISR_16BIT_FIFOEN+0xba>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a56a:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800a56e:	b9c3      	cbnz	r3, 800a5a2 <UART_RxISR_16BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800a570:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800a574:	b29b      	uxth	r3, r3
 800a576:	b1f3      	cbz	r3, 800a5b6 <UART_RxISR_16BIT_FIFOEN+0xe6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a578:	06a3      	lsls	r3, r4, #26
 800a57a:	d540      	bpl.n	800a5fe <UART_RxISR_16BIT_FIFOEN+0x12e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a57c:	f8db 3000 	ldr.w	r3, [fp]
 800a580:	e7c9      	b.n	800a516 <UART_RxISR_16BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a582:	0761      	lsls	r1, r4, #29
 800a584:	d5f1      	bpl.n	800a56a <UART_RxISR_16BIT_FIFOEN+0x9a>
 800a586:	2d00      	cmp	r5, #0
 800a588:	d0ef      	beq.n	800a56a <UART_RxISR_16BIT_FIFOEN+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a58a:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a58e:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800a592:	f043 0302 	orr.w	r3, r3, #2
 800a596:	f8cb 308c 	str.w	r3, [fp, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a59a:	f8db 308c 	ldr.w	r3, [fp, #140]	; 0x8c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0e6      	beq.n	800a570 <UART_RxISR_16BIT_FIFOEN+0xa0>
          HAL_UART_ErrorCallback(huart);
 800a5a2:	4658      	mov	r0, fp
 800a5a4:	f7ff fc14 	bl	8009dd0 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a8:	f8cb 708c 	str.w	r7, [fp, #140]	; 0x8c
      if (huart->RxXferCount == 0U)
 800a5ac:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1e0      	bne.n	800a578 <UART_RxISR_16BIT_FIFOEN+0xa8>
 800a5b6:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c2:	e843 2100 	strex	r1, r2, [r3]
 800a5c6:	2900      	cmp	r1, #0
 800a5c8:	d1f7      	bne.n	800a5ba <UART_RxISR_16BIT_FIFOEN+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ca:	f103 0208 	add.w	r2, r3, #8
 800a5ce:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5d2:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	f103 0008 	add.w	r0, r3, #8
 800a5da:	e840 2100 	strex	r1, r2, [r0]
 800a5de:	2900      	cmp	r1, #0
 800a5e0:	d1f3      	bne.n	800a5ca <UART_RxISR_16BIT_FIFOEN+0xfa>
        huart->RxState = HAL_UART_STATE_READY;
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f8cb 2088 	str.w	r2, [fp, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e8:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
        huart->RxISR = NULL;
 800a5ec:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5f0:	2a01      	cmp	r2, #1
 800a5f2:	d029      	beq.n	800a648 <UART_RxISR_16BIT_FIFOEN+0x178>
          HAL_UART_RxCpltCallback(huart);
 800a5f4:	4658      	mov	r0, fp
 800a5f6:	f7f9 fc0d 	bl	8003e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5fa:	06a3      	lsls	r3, r4, #26
 800a5fc:	d4be      	bmi.n	800a57c <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 800a5fe:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800a602:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a604:	2b00      	cmp	r3, #0
 800a606:	f43f af73 	beq.w	800a4f0 <UART_RxISR_16BIT_FIFOEN+0x20>
 800a60a:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
 800a60e:	429a      	cmp	r2, r3
 800a610:	f67f af6e 	bls.w	800a4f0 <UART_RxISR_16BIT_FIFOEN+0x20>
 800a614:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	f103 0208 	add.w	r2, r3, #8
 800a61c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a620:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	f103 0008 	add.w	r0, r3, #8
 800a628:	e840 2100 	strex	r1, r2, [r0]
 800a62c:	2900      	cmp	r1, #0
 800a62e:	d1f3      	bne.n	800a618 <UART_RxISR_16BIT_FIFOEN+0x148>
      huart->RxISR = UART_RxISR_16BIT;
 800a630:	4a11      	ldr	r2, [pc, #68]	; (800a678 <UART_RxISR_16BIT_FIFOEN+0x1a8>)
 800a632:	f8cb 2070 	str.w	r2, [fp, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a63a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	e843 2100 	strex	r1, r2, [r3]
 800a642:	2900      	cmp	r1, #0
 800a644:	d1f7      	bne.n	800a636 <UART_RxISR_16BIT_FIFOEN+0x166>
 800a646:	e753      	b.n	800a4f0 <UART_RxISR_16BIT_FIFOEN+0x20>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a648:	f8cb 106c 	str.w	r1, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a650:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	e843 2100 	strex	r1, r2, [r3]
 800a658:	2900      	cmp	r1, #0
 800a65a:	d1f7      	bne.n	800a64c <UART_RxISR_16BIT_FIFOEN+0x17c>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a65c:	69da      	ldr	r2, [r3, #28]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a65e:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a662:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a664:	bf44      	itt	mi
 800a666:	2210      	movmi	r2, #16
 800a668:	621a      	strmi	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a66a:	4658      	mov	r0, fp
 800a66c:	f7ff fc26 	bl	8009ebc <HAL_UARTEx_RxEventCallback>
 800a670:	e782      	b.n	800a578 <UART_RxISR_16BIT_FIFOEN+0xa8>
    rxdatacount = huart->RxXferCount;
 800a672:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a676:	e73b      	b.n	800a4f0 <UART_RxISR_16BIT_FIFOEN+0x20>
 800a678:	0800a299 	.word	0x0800a299
 800a67c:	effffffe 	.word	0xeffffffe

0800a680 <UART_SetConfig>:
{
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a684:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a686:	6882      	ldr	r2, [r0, #8]
 800a688:	6900      	ldr	r0, [r0, #16]
 800a68a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a68c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a68e:	4302      	orrs	r2, r0
 800a690:	430a      	orrs	r2, r1
 800a692:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a694:	49b2      	ldr	r1, [pc, #712]	; (800a960 <UART_SetConfig+0x2e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a696:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a698:	4029      	ands	r1, r5
 800a69a:	430a      	orrs	r2, r1
 800a69c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	68e1      	ldr	r1, [r4, #12]
 800a6a2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a6a6:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6a8:	49ae      	ldr	r1, [pc, #696]	; (800a964 <UART_SetConfig+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6aa:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6ac:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6ae:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6b0:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6b2:	f000 8081 	beq.w	800a7b8 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 800a6b6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6b8:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a6bc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800a6c0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a6ca:	f022 020f 	bic.w	r2, r2, #15
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6d2:	4aa5      	ldr	r2, [pc, #660]	; (800a968 <UART_SetConfig+0x2e8>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d027      	beq.n	800a728 <UART_SetConfig+0xa8>
 800a6d8:	4aa4      	ldr	r2, [pc, #656]	; (800a96c <UART_SetConfig+0x2ec>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d04b      	beq.n	800a776 <UART_SetConfig+0xf6>
 800a6de:	4aa4      	ldr	r2, [pc, #656]	; (800a970 <UART_SetConfig+0x2f0>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	f000 8111 	beq.w	800a908 <UART_SetConfig+0x288>
 800a6e6:	4aa3      	ldr	r2, [pc, #652]	; (800a974 <UART_SetConfig+0x2f4>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	f000 80b9 	beq.w	800a860 <UART_SetConfig+0x1e0>
 800a6ee:	4aa2      	ldr	r2, [pc, #648]	; (800a978 <UART_SetConfig+0x2f8>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d111      	bne.n	800a718 <UART_SetConfig+0x98>
 800a6f4:	4ba1      	ldr	r3, [pc, #644]	; (800a97c <UART_SetConfig+0x2fc>)
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a702:	f000 8126 	beq.w	800a952 <UART_SetConfig+0x2d2>
 800a706:	f200 80d5 	bhi.w	800a8b4 <UART_SetConfig+0x234>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 80d9 	beq.w	800a8c2 <UART_SetConfig+0x242>
 800a710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a714:	f000 80b0 	beq.w	800a878 <UART_SetConfig+0x1f8>
        ret = HAL_ERROR;
 800a718:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800a71a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800a71c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 800a720:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800a724:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800a726:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a728:	4b94      	ldr	r3, [pc, #592]	; (800a97c <UART_SetConfig+0x2fc>)
 800a72a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	3b01      	subs	r3, #1
 800a734:	2b02      	cmp	r3, #2
 800a736:	f240 808d 	bls.w	800a854 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a73a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a73e:	f000 8103 	beq.w	800a948 <UART_SetConfig+0x2c8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a742:	f7fd ff71 	bl	8008628 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a746:	2800      	cmp	r0, #0
 800a748:	f000 80dc 	beq.w	800a904 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a74c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a74e:	6862      	ldr	r2, [r4, #4]
 800a750:	4b8b      	ldr	r3, [pc, #556]	; (800a980 <UART_SetConfig+0x300>)
 800a752:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800a756:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a75a:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a75e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a762:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a766:	f1a3 0210 	sub.w	r2, r3, #16
 800a76a:	428a      	cmp	r2, r1
 800a76c:	d8d4      	bhi.n	800a718 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	2000      	movs	r0, #0
 800a772:	60d3      	str	r3, [r2, #12]
 800a774:	e7d1      	b.n	800a71a <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a776:	4b81      	ldr	r3, [pc, #516]	; (800a97c <UART_SetConfig+0x2fc>)
 800a778:	4a82      	ldr	r2, [pc, #520]	; (800a984 <UART_SetConfig+0x304>)
 800a77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77e:	f003 030c 	and.w	r3, r3, #12
 800a782:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a784:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a788:	d07c      	beq.n	800a884 <UART_SetConfig+0x204>
    switch (clocksource)
 800a78a:	2b08      	cmp	r3, #8
 800a78c:	d8c4      	bhi.n	800a718 <UART_SetConfig+0x98>
 800a78e:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <UART_SetConfig+0x114>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a8bd 	.word	0x0800a8bd
 800a798:	0800a743 	.word	0x0800a743
 800a79c:	0800a93f 	.word	0x0800a93f
 800a7a0:	0800a719 	.word	0x0800a719
 800a7a4:	0800a87f 	.word	0x0800a87f
 800a7a8:	0800a719 	.word	0x0800a719
 800a7ac:	0800a719 	.word	0x0800a719
 800a7b0:	0800a719 	.word	0x0800a719
 800a7b4:	0800a92f 	.word	0x0800a92f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7b8:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a7bc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a7c0:	4311      	orrs	r1, r2
 800a7c2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7c8:	486c      	ldr	r0, [pc, #432]	; (800a97c <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7ca:	f022 020f 	bic.w	r2, r2, #15
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7d2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a7d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a7da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7de:	f000 80ac 	beq.w	800a93a <UART_SetConfig+0x2ba>
 800a7e2:	d80b      	bhi.n	800a7fc <UART_SetConfig+0x17c>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d038      	beq.n	800a85a <UART_SetConfig+0x1da>
 800a7e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7ec:	d194      	bne.n	800a718 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ee:	f7fd fdcd 	bl	800838c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	f000 8086 	beq.w	800a904 <UART_SetConfig+0x284>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a7f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a7fa:	e004      	b.n	800a806 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a800:	d18a      	bne.n	800a718 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 800a802:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a806:	4b5e      	ldr	r3, [pc, #376]	; (800a980 <UART_SetConfig+0x300>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a808:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a80a:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800a80e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a812:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a816:	4299      	cmp	r1, r3
 800a818:	f63f af7e 	bhi.w	800a718 <UART_SetConfig+0x98>
 800a81c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a820:	f63f af7a 	bhi.w	800a718 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a824:	2300      	movs	r3, #0
 800a826:	4619      	mov	r1, r3
 800a828:	f7f6 fa56 	bl	8000cd8 <__aeabi_uldivmod>
 800a82c:	086a      	lsrs	r2, r5, #1
 800a82e:	0203      	lsls	r3, r0, #8
 800a830:	0209      	lsls	r1, r1, #8
 800a832:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800a836:	1898      	adds	r0, r3, r2
 800a838:	f141 0100 	adc.w	r1, r1, #0
 800a83c:	462a      	mov	r2, r5
 800a83e:	2300      	movs	r3, #0
 800a840:	f7f6 fa4a 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a844:	4a50      	ldr	r2, [pc, #320]	; (800a988 <UART_SetConfig+0x308>)
 800a846:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800a84a:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a84c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a84e:	f63f af63 	bhi.w	800a718 <UART_SetConfig+0x98>
 800a852:	e78c      	b.n	800a76e <UART_SetConfig+0xee>
 800a854:	4a4d      	ldr	r2, [pc, #308]	; (800a98c <UART_SetConfig+0x30c>)
 800a856:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800a858:	e794      	b.n	800a784 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a85a:	f7fd fed3 	bl	8008604 <HAL_RCC_GetPCLK1Freq>
        break;
 800a85e:	e7c8      	b.n	800a7f2 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a860:	4b46      	ldr	r3, [pc, #280]	; (800a97c <UART_SetConfig+0x2fc>)
 800a862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a86a:	2b80      	cmp	r3, #128	; 0x80
 800a86c:	d071      	beq.n	800a952 <UART_SetConfig+0x2d2>
 800a86e:	d861      	bhi.n	800a934 <UART_SetConfig+0x2b4>
 800a870:	b33b      	cbz	r3, 800a8c2 <UART_SetConfig+0x242>
 800a872:	2b40      	cmp	r3, #64	; 0x40
 800a874:	f47f af50 	bne.w	800a718 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a878:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a87c:	d061      	beq.n	800a942 <UART_SetConfig+0x2c2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a87e:	f7fd fd85 	bl	800838c <HAL_RCC_GetSysClockFreq>
        break;
 800a882:	e760      	b.n	800a746 <UART_SetConfig+0xc6>
    switch (clocksource)
 800a884:	2b08      	cmp	r3, #8
 800a886:	f63f af47 	bhi.w	800a718 <UART_SetConfig+0x98>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <UART_SetConfig+0x210>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a8c9 	.word	0x0800a8c9
 800a894:	0800a949 	.word	0x0800a949
 800a898:	0800a94f 	.word	0x0800a94f
 800a89c:	0800a719 	.word	0x0800a719
 800a8a0:	0800a943 	.word	0x0800a943
 800a8a4:	0800a719 	.word	0x0800a719
 800a8a8:	0800a719 	.word	0x0800a719
 800a8ac:	0800a719 	.word	0x0800a719
 800a8b0:	0800a8d1 	.word	0x0800a8d1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8b8:	d036      	beq.n	800a928 <UART_SetConfig+0x2a8>
 800a8ba:	e72d      	b.n	800a718 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8bc:	f7fd fea2 	bl	8008604 <HAL_RCC_GetPCLK1Freq>
        break;
 800a8c0:	e741      	b.n	800a746 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8c2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a8c6:	d1f9      	bne.n	800a8bc <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8c8:	f7fd fe9c 	bl	8008604 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a8cc:	b1d0      	cbz	r0, 800a904 <UART_SetConfig+0x284>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8d0:	6862      	ldr	r2, [r4, #4]
 800a8d2:	4b2b      	ldr	r3, [pc, #172]	; (800a980 <UART_SetConfig+0x300>)
 800a8d4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800a8d8:	fbb0 f0f1 	udiv	r0, r0, r1
 800a8dc:	0853      	lsrs	r3, r2, #1
 800a8de:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8e2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8e6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8ea:	f1a3 0210 	sub.w	r2, r3, #16
 800a8ee:	428a      	cmp	r2, r1
 800a8f0:	f63f af12 	bhi.w	800a718 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8f4:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800a8f8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8fa:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a900:	4313      	orrs	r3, r2
 800a902:	60cb      	str	r3, [r1, #12]
 800a904:	2000      	movs	r0, #0
 800a906:	e708      	b.n	800a71a <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a908:	4b1c      	ldr	r3, [pc, #112]	; (800a97c <UART_SetConfig+0x2fc>)
 800a90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a912:	2b20      	cmp	r3, #32
 800a914:	d01d      	beq.n	800a952 <UART_SetConfig+0x2d2>
 800a916:	d804      	bhi.n	800a922 <UART_SetConfig+0x2a2>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0d2      	beq.n	800a8c2 <UART_SetConfig+0x242>
 800a91c:	2b10      	cmp	r3, #16
 800a91e:	d0ab      	beq.n	800a878 <UART_SetConfig+0x1f8>
 800a920:	e6fa      	b.n	800a718 <UART_SetConfig+0x98>
 800a922:	2b30      	cmp	r3, #48	; 0x30
 800a924:	f47f aef8 	bne.w	800a718 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a928:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a92c:	d0d0      	beq.n	800a8d0 <UART_SetConfig+0x250>
    switch (clocksource)
 800a92e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a932:	e70c      	b.n	800a74e <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a934:	2bc0      	cmp	r3, #192	; 0xc0
 800a936:	d0f7      	beq.n	800a928 <UART_SetConfig+0x2a8>
 800a938:	e6ee      	b.n	800a718 <UART_SetConfig+0x98>
 800a93a:	4815      	ldr	r0, [pc, #84]	; (800a990 <UART_SetConfig+0x310>)
 800a93c:	e763      	b.n	800a806 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 800a93e:	4814      	ldr	r0, [pc, #80]	; (800a990 <UART_SetConfig+0x310>)
 800a940:	e705      	b.n	800a74e <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800a942:	f7fd fd23 	bl	800838c <HAL_RCC_GetSysClockFreq>
        break;
 800a946:	e7c1      	b.n	800a8cc <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a948:	f7fd fe6e 	bl	8008628 <HAL_RCC_GetPCLK2Freq>
        break;
 800a94c:	e7be      	b.n	800a8cc <UART_SetConfig+0x24c>
        pclk = (uint32_t) HSI_VALUE;
 800a94e:	4810      	ldr	r0, [pc, #64]	; (800a990 <UART_SetConfig+0x310>)
 800a950:	e7be      	b.n	800a8d0 <UART_SetConfig+0x250>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a952:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800a956:	480e      	ldr	r0, [pc, #56]	; (800a990 <UART_SetConfig+0x310>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a958:	f47f aef9 	bne.w	800a74e <UART_SetConfig+0xce>
 800a95c:	e7b8      	b.n	800a8d0 <UART_SetConfig+0x250>
 800a95e:	bf00      	nop
 800a960:	cfff69f3 	.word	0xcfff69f3
 800a964:	40008000 	.word	0x40008000
 800a968:	40013800 	.word	0x40013800
 800a96c:	40004400 	.word	0x40004400
 800a970:	40004800 	.word	0x40004800
 800a974:	40004c00 	.word	0x40004c00
 800a978:	40005000 	.word	0x40005000
 800a97c:	40021000 	.word	0x40021000
 800a980:	0800fd34 	.word	0x0800fd34
 800a984:	0800fd24 	.word	0x0800fd24
 800a988:	000ffcff 	.word	0x000ffcff
 800a98c:	0800fd20 	.word	0x0800fd20
 800a990:	00f42400 	.word	0x00f42400

0800a994 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a994:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a996:	07da      	lsls	r2, r3, #31
{
 800a998:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a99a:	d506      	bpl.n	800a9aa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a99c:	6801      	ldr	r1, [r0, #0]
 800a99e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a9a0:	684a      	ldr	r2, [r1, #4]
 800a9a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a9a6:	4322      	orrs	r2, r4
 800a9a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9aa:	079c      	lsls	r4, r3, #30
 800a9ac:	d506      	bpl.n	800a9bc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9ae:	6801      	ldr	r1, [r0, #0]
 800a9b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a9b2:	684a      	ldr	r2, [r1, #4]
 800a9b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a9b8:	4322      	orrs	r2, r4
 800a9ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9bc:	0759      	lsls	r1, r3, #29
 800a9be:	d506      	bpl.n	800a9ce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9c0:	6801      	ldr	r1, [r0, #0]
 800a9c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a9c4:	684a      	ldr	r2, [r1, #4]
 800a9c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a9ca:	4322      	orrs	r2, r4
 800a9cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ce:	071a      	lsls	r2, r3, #28
 800a9d0:	d506      	bpl.n	800a9e0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9d2:	6801      	ldr	r1, [r0, #0]
 800a9d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a9d6:	684a      	ldr	r2, [r1, #4]
 800a9d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9dc:	4322      	orrs	r2, r4
 800a9de:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9e0:	06dc      	lsls	r4, r3, #27
 800a9e2:	d506      	bpl.n	800a9f2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9e4:	6801      	ldr	r1, [r0, #0]
 800a9e6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a9e8:	688a      	ldr	r2, [r1, #8]
 800a9ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a9ee:	4322      	orrs	r2, r4
 800a9f0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9f2:	0699      	lsls	r1, r3, #26
 800a9f4:	d506      	bpl.n	800aa04 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9f6:	6801      	ldr	r1, [r0, #0]
 800a9f8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a9fa:	688a      	ldr	r2, [r1, #8]
 800a9fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa00:	4322      	orrs	r2, r4
 800aa02:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa04:	065a      	lsls	r2, r3, #25
 800aa06:	d509      	bpl.n	800aa1c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa08:	6801      	ldr	r1, [r0, #0]
 800aa0a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800aa0c:	684a      	ldr	r2, [r1, #4]
 800aa0e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800aa12:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa18:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa1a:	d00b      	beq.n	800aa34 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa1c:	061b      	lsls	r3, r3, #24
 800aa1e:	d506      	bpl.n	800aa2e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa20:	6802      	ldr	r2, [r0, #0]
 800aa22:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800aa24:	6853      	ldr	r3, [r2, #4]
 800aa26:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800aa2a:	430b      	orrs	r3, r1
 800aa2c:	6053      	str	r3, [r2, #4]
}
 800aa2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa32:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa34:	684a      	ldr	r2, [r1, #4]
 800aa36:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800aa38:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800aa3c:	4322      	orrs	r2, r4
 800aa3e:	604a      	str	r2, [r1, #4]
 800aa40:	e7ec      	b.n	800aa1c <UART_AdvFeatureConfig+0x88>
 800aa42:	bf00      	nop

0800aa44 <UART_WaitOnFlagUntilTimeout>:
{
 800aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa48:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa4c:	6804      	ldr	r4, [r0, #0]
{
 800aa4e:	4607      	mov	r7, r0
 800aa50:	460e      	mov	r6, r1
 800aa52:	4615      	mov	r5, r2
 800aa54:	4699      	mov	r9, r3
 800aa56:	f1b8 3fff 	cmp.w	r8, #4294967295
 800aa5a:	d10a      	bne.n	800aa72 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa5c:	69e3      	ldr	r3, [r4, #28]
 800aa5e:	ea36 0303 	bics.w	r3, r6, r3
 800aa62:	bf0c      	ite	eq
 800aa64:	2301      	moveq	r3, #1
 800aa66:	2300      	movne	r3, #0
 800aa68:	429d      	cmp	r5, r3
 800aa6a:	d0f7      	beq.n	800aa5c <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800aa6c:	2000      	movs	r0, #0
}
 800aa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa72:	69e2      	ldr	r2, [r4, #28]
 800aa74:	ea36 0202 	bics.w	r2, r6, r2
 800aa78:	bf0c      	ite	eq
 800aa7a:	2301      	moveq	r3, #1
 800aa7c:	2300      	movne	r3, #0
 800aa7e:	42ab      	cmp	r3, r5
 800aa80:	d1f4      	bne.n	800aa6c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa82:	f7f8 f8a1 	bl	8002bc8 <HAL_GetTick>
 800aa86:	eba0 0009 	sub.w	r0, r0, r9
 800aa8a:	4540      	cmp	r0, r8
 800aa8c:	d833      	bhi.n	800aaf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa8e:	f1b8 0f00 	cmp.w	r8, #0
 800aa92:	d030      	beq.n	800aaf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa94:	683c      	ldr	r4, [r7, #0]
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	0758      	lsls	r0, r3, #29
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	d5db      	bpl.n	800aa56 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa9e:	69e3      	ldr	r3, [r4, #28]
 800aaa0:	0519      	lsls	r1, r3, #20
 800aaa2:	d5d8      	bpl.n	800aa56 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aaa8:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaaa:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aaae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	e844 3100 	strex	r1, r3, [r4]
 800aab6:	b139      	cbz	r1, 800aac8 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	e852 3f00 	ldrex	r3, [r2]
 800aabc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac0:	e842 3100 	strex	r1, r3, [r2]
 800aac4:	2900      	cmp	r1, #0
 800aac6:	d1f7      	bne.n	800aab8 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	f102 0308 	add.w	r3, r2, #8
 800aacc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	f102 0008 	add.w	r0, r2, #8
 800aad8:	e840 3100 	strex	r1, r3, [r0]
 800aadc:	2900      	cmp	r1, #0
 800aade:	d1f3      	bne.n	800aac8 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800aae0:	2320      	movs	r3, #32
 800aae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800aae6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800aaea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800aaee:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 800aaf4:	e7bb      	b.n	800aa6e <UART_WaitOnFlagUntilTimeout+0x2a>
 800aaf6:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aafc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	e842 3100 	strex	r1, r3, [r2]
 800ab04:	2900      	cmp	r1, #0
 800ab06:	d1f7      	bne.n	800aaf8 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	f102 0308 	add.w	r3, r2, #8
 800ab0c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	f102 0008 	add.w	r0, r2, #8
 800ab18:	e840 3100 	strex	r1, r3, [r0]
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d1f3      	bne.n	800ab08 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800ab20:	2320      	movs	r3, #32
 800ab22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800ab26:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ab2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800ab2e:	2003      	movs	r0, #3
 800ab30:	e79d      	b.n	800aa6e <UART_WaitOnFlagUntilTimeout+0x2a>
 800ab32:	bf00      	nop

0800ab34 <HAL_UART_Transmit>:
{
 800ab34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab38:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800ab3a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800ab3e:	2820      	cmp	r0, #32
{
 800ab40:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800ab42:	f040 8090 	bne.w	800ac66 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 800ab46:	4689      	mov	r9, r1
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	d048      	beq.n	800abde <HAL_UART_Transmit+0xaa>
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	d045      	beq.n	800abde <HAL_UART_Transmit+0xaa>
 800ab52:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800ab54:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	f000 8084 	beq.w	800ac66 <HAL_UART_Transmit+0x132>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab64:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab68:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab6a:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab6e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 800ab72:	f7f8 f829 	bl	8002bc8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab76:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800ab78:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800ab80:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 800ab84:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab86:	d072      	beq.n	800ac6e <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 800ab88:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 800ab8c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800ab8e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800ab90:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 800ab94:	b1b3      	cbz	r3, 800abc4 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab96:	682c      	ldr	r4, [r5, #0]
 800ab98:	1c71      	adds	r1, r6, #1
 800ab9a:	d124      	bne.n	800abe6 <HAL_UART_Transmit+0xb2>
 800ab9c:	69e2      	ldr	r2, [r4, #28]
 800ab9e:	0612      	lsls	r2, r2, #24
 800aba0:	d5fc      	bpl.n	800ab9c <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 800aba2:	f1b9 0f00 	cmp.w	r9, #0
 800aba6:	d059      	beq.n	800ac5c <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aba8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800abac:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800abae:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800abb2:	3b01      	subs	r3, #1
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800abba:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e9      	bne.n	800ab98 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800abc4:	9600      	str	r6, [sp, #0]
 800abc6:	463b      	mov	r3, r7
 800abc8:	2200      	movs	r2, #0
 800abca:	2140      	movs	r1, #64	; 0x40
 800abcc:	4628      	mov	r0, r5
 800abce:	f7ff ff39 	bl	800aa44 <UART_WaitOnFlagUntilTimeout>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d171      	bne.n	800acba <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 800abd6:	2320      	movs	r3, #32
 800abd8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 800abdc:	e000      	b.n	800abe0 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 800abde:	2001      	movs	r0, #1
}
 800abe0:	b003      	add	sp, #12
 800abe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abe6:	69e3      	ldr	r3, [r4, #28]
 800abe8:	061b      	lsls	r3, r3, #24
 800abea:	d4da      	bmi.n	800aba2 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abec:	f7f7 ffec 	bl	8002bc8 <HAL_GetTick>
 800abf0:	1bc0      	subs	r0, r0, r7
 800abf2:	4286      	cmp	r6, r0
 800abf4:	d341      	bcc.n	800ac7a <HAL_UART_Transmit+0x146>
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	d03f      	beq.n	800ac7a <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abfa:	682c      	ldr	r4, [r5, #0]
 800abfc:	6822      	ldr	r2, [r4, #0]
 800abfe:	0752      	lsls	r2, r2, #29
 800ac00:	4623      	mov	r3, r4
 800ac02:	d5c9      	bpl.n	800ab98 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac04:	69e2      	ldr	r2, [r4, #28]
 800ac06:	0510      	lsls	r0, r2, #20
 800ac08:	d5c6      	bpl.n	800ab98 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac0e:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac10:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	e844 2100 	strex	r1, r2, [r4]
 800ac1c:	b139      	cbz	r1, 800ac2e <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1e:	e853 2f00 	ldrex	r2, [r3]
 800ac22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	e843 2100 	strex	r1, r2, [r3]
 800ac2a:	2900      	cmp	r1, #0
 800ac2c:	d1f7      	bne.n	800ac1e <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2e:	f103 0208 	add.w	r2, r3, #8
 800ac32:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac36:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3a:	f103 0008 	add.w	r0, r3, #8
 800ac3e:	e840 2100 	strex	r1, r2, [r0]
 800ac42:	2900      	cmp	r1, #0
 800ac44:	d1f3      	bne.n	800ac2e <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 800ac46:	2320      	movs	r3, #32
 800ac48:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800ac4c:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ac50:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 800ac54:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac56:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 800ac5a:	e7c1      	b.n	800abe0 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac5c:	f838 3b02 	ldrh.w	r3, [r8], #2
 800ac60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac64:	e7a2      	b.n	800abac <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 800ac66:	2002      	movs	r0, #2
}
 800ac68:	b003      	add	sp, #12
 800ac6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac6e:	692b      	ldr	r3, [r5, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d189      	bne.n	800ab88 <HAL_UART_Transmit+0x54>
 800ac74:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800ac76:	4699      	mov	r9, r3
 800ac78:	e786      	b.n	800ab88 <HAL_UART_Transmit+0x54>
 800ac7a:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	e843 2100 	strex	r1, r2, [r3]
 800ac88:	2900      	cmp	r1, #0
 800ac8a:	d1f7      	bne.n	800ac7c <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8c:	f103 0208 	add.w	r2, r3, #8
 800ac90:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac94:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	f103 0008 	add.w	r0, r3, #8
 800ac9c:	e840 2100 	strex	r1, r2, [r0]
 800aca0:	2900      	cmp	r1, #0
 800aca2:	d1f3      	bne.n	800ac8c <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 800aca4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800aca6:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800aca8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800acac:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800acb0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 800acb4:	b003      	add	sp, #12
 800acb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800acba:	2003      	movs	r0, #3
 800acbc:	e790      	b.n	800abe0 <HAL_UART_Transmit+0xac>
 800acbe:	bf00      	nop

0800acc0 <HAL_UART_Init>:
  if (huart == NULL)
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d066      	beq.n	800ad92 <HAL_UART_Init+0xd2>
{
 800acc4:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800acc6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800acca:	b082      	sub	sp, #8
 800accc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d04c      	beq.n	800ad6c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 800acd2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800acd4:	2324      	movs	r3, #36	; 0x24
 800acd6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800acda:	6813      	ldr	r3, [r2, #0]
 800acdc:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ace0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800ace2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ace4:	f7ff fccc 	bl	800a680 <UART_SetConfig>
 800ace8:	2801      	cmp	r0, #1
 800acea:	d03c      	beq.n	800ad66 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d135      	bne.n	800ad5e <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	6859      	ldr	r1, [r3, #4]
 800acf6:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800acfa:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acfc:	6899      	ldr	r1, [r3, #8]
 800acfe:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800ad02:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800ad04:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad06:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800ad08:	f041 0101 	orr.w	r1, r1, #1
 800ad0c:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad0e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800ad12:	f7f7 ff59 	bl	8002bc8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800ad1c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad1e:	d40e      	bmi.n	800ad3e <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	075b      	lsls	r3, r3, #29
 800ad24:	d427      	bmi.n	800ad76 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad26:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800ad2e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ad32:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800ad36:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad38:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800ad3a:	b002      	add	sp, #8
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	462a      	mov	r2, r5
 800ad46:	4603      	mov	r3, r0
 800ad48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f7ff fe79 	bl	800aa44 <UART_WaitOnFlagUntilTimeout>
 800ad52:	b9e0      	cbnz	r0, 800ad8e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	075b      	lsls	r3, r3, #29
 800ad5a:	d40c      	bmi.n	800ad76 <HAL_UART_Init+0xb6>
 800ad5c:	e7e3      	b.n	800ad26 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f7ff fe18 	bl	800a994 <UART_AdvFeatureConfig>
 800ad64:	e7c5      	b.n	800acf2 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800ad66:	2001      	movs	r0, #1
}
 800ad68:	b002      	add	sp, #8
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800ad6c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800ad70:	f7fb f878 	bl	8005e64 <HAL_UART_MspInit>
 800ad74:	e7ad      	b.n	800acd2 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4633      	mov	r3, r6
 800ad80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad84:	4620      	mov	r0, r4
 800ad86:	f7ff fe5d 	bl	800aa44 <UART_WaitOnFlagUntilTimeout>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d0cb      	beq.n	800ad26 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800ad8e:	2003      	movs	r0, #3
 800ad90:	e7d3      	b.n	800ad3a <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 800ad92:	2001      	movs	r0, #1
}
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop

0800ad98 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop

0800ad9c <HAL_UARTEx_RxFifoFullCallback>:
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop

0800ada0 <HAL_UARTEx_TxFifoEmptyCallback>:
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop

0800ada4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ada4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d017      	beq.n	800addc <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adac:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800adae:	2324      	movs	r3, #36	; 0x24
{
 800adb0:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800adb2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adb6:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb8:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adba:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800adbc:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800adc0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800adc4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adc6:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adc8:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adca:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800adce:	2220      	movs	r2, #32
 800add0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 800add4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800add8:	4618      	mov	r0, r3
}
 800adda:	4770      	bx	lr
  __HAL_LOCK(huart);
 800addc:	2002      	movs	r0, #2
}
 800adde:	4770      	bx	lr

0800ade0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ade0:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800ade4:	2a01      	cmp	r2, #1
 800ade6:	d037      	beq.n	800ae58 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800ade8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adea:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800adec:	2024      	movs	r0, #36	; 0x24
{
 800adee:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800adf0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adf4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adf6:	6810      	ldr	r0, [r2, #0]
 800adf8:	f020 0001 	bic.w	r0, r0, #1
 800adfc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800adfe:	6890      	ldr	r0, [r2, #8]
 800ae00:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800ae04:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae06:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae08:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae0a:	b310      	cbz	r0, 800ae52 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae0c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae0e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae10:	4d12      	ldr	r5, [pc, #72]	; (800ae5c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae12:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae16:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae1a:	4911      	ldr	r1, [pc, #68]	; (800ae60 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800ae1c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae20:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae24:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae28:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae2c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae2e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae30:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae34:	fbb1 f1f5 	udiv	r1, r1, r5
 800ae38:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800ae42:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae44:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800ae46:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800ae4a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800ae4c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800ae50:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800ae52:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800ae54:	4608      	mov	r0, r1
 800ae56:	e7ef      	b.n	800ae38 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800ae58:	2002      	movs	r0, #2
}
 800ae5a:	4770      	bx	lr
 800ae5c:	0800fd4c 	.word	0x0800fd4c
 800ae60:	0800fd54 	.word	0x0800fd54

0800ae64 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800ae64:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800ae68:	2a01      	cmp	r2, #1
 800ae6a:	d037      	beq.n	800aedc <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800ae6c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae6e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ae70:	2024      	movs	r0, #36	; 0x24
{
 800ae72:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800ae74:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae78:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800ae7a:	6810      	ldr	r0, [r2, #0]
 800ae7c:	f020 0001 	bic.w	r0, r0, #1
 800ae80:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae82:	6890      	ldr	r0, [r2, #8]
 800ae84:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800ae88:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae8a:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae8c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae8e:	b310      	cbz	r0, 800aed6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae90:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae92:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae94:	4d12      	ldr	r5, [pc, #72]	; (800aee0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae96:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae9a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae9e:	4911      	ldr	r1, [pc, #68]	; (800aee4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800aea0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aea4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800aea8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800aeac:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aeb0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeb2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aeb4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aeb8:	fbb1 f1f5 	udiv	r1, r1, r5
 800aebc:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800aec0:	2100      	movs	r1, #0
 800aec2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800aec6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800aeca:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800aece:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800aed0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800aed4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800aed6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800aed8:	4608      	mov	r0, r1
 800aeda:	e7ef      	b.n	800aebc <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800aedc:	2002      	movs	r0, #2
}
 800aede:	4770      	bx	lr
 800aee0:	0800fd4c 	.word	0x0800fd4c
 800aee4:	0800fd54 	.word	0x0800fd54

0800aee8 <malloc>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <malloc+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f000 b823 	b.w	800af38 <_malloc_r>
 800aef2:	bf00      	nop
 800aef4:	2000006c 	.word	0x2000006c

0800aef8 <sbrk_aligned>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	4e0e      	ldr	r6, [pc, #56]	; (800af34 <sbrk_aligned+0x3c>)
 800aefc:	460c      	mov	r4, r1
 800aefe:	6831      	ldr	r1, [r6, #0]
 800af00:	4605      	mov	r5, r0
 800af02:	b911      	cbnz	r1, 800af0a <sbrk_aligned+0x12>
 800af04:	f001 f818 	bl	800bf38 <_sbrk_r>
 800af08:	6030      	str	r0, [r6, #0]
 800af0a:	4621      	mov	r1, r4
 800af0c:	4628      	mov	r0, r5
 800af0e:	f001 f813 	bl	800bf38 <_sbrk_r>
 800af12:	1c43      	adds	r3, r0, #1
 800af14:	d00a      	beq.n	800af2c <sbrk_aligned+0x34>
 800af16:	1cc4      	adds	r4, r0, #3
 800af18:	f024 0403 	bic.w	r4, r4, #3
 800af1c:	42a0      	cmp	r0, r4
 800af1e:	d007      	beq.n	800af30 <sbrk_aligned+0x38>
 800af20:	1a21      	subs	r1, r4, r0
 800af22:	4628      	mov	r0, r5
 800af24:	f001 f808 	bl	800bf38 <_sbrk_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	d101      	bne.n	800af30 <sbrk_aligned+0x38>
 800af2c:	f04f 34ff 	mov.w	r4, #4294967295
 800af30:	4620      	mov	r0, r4
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	20000fc8 	.word	0x20000fc8

0800af38 <_malloc_r>:
 800af38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af3c:	1ccd      	adds	r5, r1, #3
 800af3e:	f025 0503 	bic.w	r5, r5, #3
 800af42:	3508      	adds	r5, #8
 800af44:	2d0c      	cmp	r5, #12
 800af46:	bf38      	it	cc
 800af48:	250c      	movcc	r5, #12
 800af4a:	2d00      	cmp	r5, #0
 800af4c:	4607      	mov	r7, r0
 800af4e:	db01      	blt.n	800af54 <_malloc_r+0x1c>
 800af50:	42a9      	cmp	r1, r5
 800af52:	d905      	bls.n	800af60 <_malloc_r+0x28>
 800af54:	230c      	movs	r3, #12
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	2600      	movs	r6, #0
 800af5a:	4630      	mov	r0, r6
 800af5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b034 <_malloc_r+0xfc>
 800af64:	f000 f868 	bl	800b038 <__malloc_lock>
 800af68:	f8d8 3000 	ldr.w	r3, [r8]
 800af6c:	461c      	mov	r4, r3
 800af6e:	bb5c      	cbnz	r4, 800afc8 <_malloc_r+0x90>
 800af70:	4629      	mov	r1, r5
 800af72:	4638      	mov	r0, r7
 800af74:	f7ff ffc0 	bl	800aef8 <sbrk_aligned>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	4604      	mov	r4, r0
 800af7c:	d155      	bne.n	800b02a <_malloc_r+0xf2>
 800af7e:	f8d8 4000 	ldr.w	r4, [r8]
 800af82:	4626      	mov	r6, r4
 800af84:	2e00      	cmp	r6, #0
 800af86:	d145      	bne.n	800b014 <_malloc_r+0xdc>
 800af88:	2c00      	cmp	r4, #0
 800af8a:	d048      	beq.n	800b01e <_malloc_r+0xe6>
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	4631      	mov	r1, r6
 800af90:	4638      	mov	r0, r7
 800af92:	eb04 0903 	add.w	r9, r4, r3
 800af96:	f000 ffcf 	bl	800bf38 <_sbrk_r>
 800af9a:	4581      	cmp	r9, r0
 800af9c:	d13f      	bne.n	800b01e <_malloc_r+0xe6>
 800af9e:	6821      	ldr	r1, [r4, #0]
 800afa0:	1a6d      	subs	r5, r5, r1
 800afa2:	4629      	mov	r1, r5
 800afa4:	4638      	mov	r0, r7
 800afa6:	f7ff ffa7 	bl	800aef8 <sbrk_aligned>
 800afaa:	3001      	adds	r0, #1
 800afac:	d037      	beq.n	800b01e <_malloc_r+0xe6>
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	442b      	add	r3, r5
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	f8d8 3000 	ldr.w	r3, [r8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d038      	beq.n	800b02e <_malloc_r+0xf6>
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	42a2      	cmp	r2, r4
 800afc0:	d12b      	bne.n	800b01a <_malloc_r+0xe2>
 800afc2:	2200      	movs	r2, #0
 800afc4:	605a      	str	r2, [r3, #4]
 800afc6:	e00f      	b.n	800afe8 <_malloc_r+0xb0>
 800afc8:	6822      	ldr	r2, [r4, #0]
 800afca:	1b52      	subs	r2, r2, r5
 800afcc:	d41f      	bmi.n	800b00e <_malloc_r+0xd6>
 800afce:	2a0b      	cmp	r2, #11
 800afd0:	d917      	bls.n	800b002 <_malloc_r+0xca>
 800afd2:	1961      	adds	r1, r4, r5
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	6025      	str	r5, [r4, #0]
 800afd8:	bf18      	it	ne
 800afda:	6059      	strne	r1, [r3, #4]
 800afdc:	6863      	ldr	r3, [r4, #4]
 800afde:	bf08      	it	eq
 800afe0:	f8c8 1000 	streq.w	r1, [r8]
 800afe4:	5162      	str	r2, [r4, r5]
 800afe6:	604b      	str	r3, [r1, #4]
 800afe8:	4638      	mov	r0, r7
 800afea:	f104 060b 	add.w	r6, r4, #11
 800afee:	f000 f829 	bl	800b044 <__malloc_unlock>
 800aff2:	f026 0607 	bic.w	r6, r6, #7
 800aff6:	1d23      	adds	r3, r4, #4
 800aff8:	1af2      	subs	r2, r6, r3
 800affa:	d0ae      	beq.n	800af5a <_malloc_r+0x22>
 800affc:	1b9b      	subs	r3, r3, r6
 800affe:	50a3      	str	r3, [r4, r2]
 800b000:	e7ab      	b.n	800af5a <_malloc_r+0x22>
 800b002:	42a3      	cmp	r3, r4
 800b004:	6862      	ldr	r2, [r4, #4]
 800b006:	d1dd      	bne.n	800afc4 <_malloc_r+0x8c>
 800b008:	f8c8 2000 	str.w	r2, [r8]
 800b00c:	e7ec      	b.n	800afe8 <_malloc_r+0xb0>
 800b00e:	4623      	mov	r3, r4
 800b010:	6864      	ldr	r4, [r4, #4]
 800b012:	e7ac      	b.n	800af6e <_malloc_r+0x36>
 800b014:	4634      	mov	r4, r6
 800b016:	6876      	ldr	r6, [r6, #4]
 800b018:	e7b4      	b.n	800af84 <_malloc_r+0x4c>
 800b01a:	4613      	mov	r3, r2
 800b01c:	e7cc      	b.n	800afb8 <_malloc_r+0x80>
 800b01e:	230c      	movs	r3, #12
 800b020:	603b      	str	r3, [r7, #0]
 800b022:	4638      	mov	r0, r7
 800b024:	f000 f80e 	bl	800b044 <__malloc_unlock>
 800b028:	e797      	b.n	800af5a <_malloc_r+0x22>
 800b02a:	6025      	str	r5, [r4, #0]
 800b02c:	e7dc      	b.n	800afe8 <_malloc_r+0xb0>
 800b02e:	605b      	str	r3, [r3, #4]
 800b030:	deff      	udf	#255	; 0xff
 800b032:	bf00      	nop
 800b034:	20000fc4 	.word	0x20000fc4

0800b038 <__malloc_lock>:
 800b038:	4801      	ldr	r0, [pc, #4]	; (800b040 <__malloc_lock+0x8>)
 800b03a:	f000 bfc9 	b.w	800bfd0 <__retarget_lock_acquire_recursive>
 800b03e:	bf00      	nop
 800b040:	2000110c 	.word	0x2000110c

0800b044 <__malloc_unlock>:
 800b044:	4801      	ldr	r0, [pc, #4]	; (800b04c <__malloc_unlock+0x8>)
 800b046:	f000 bfc4 	b.w	800bfd2 <__retarget_lock_release_recursive>
 800b04a:	bf00      	nop
 800b04c:	2000110c 	.word	0x2000110c

0800b050 <__cvt>:
 800b050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b054:	ec55 4b10 	vmov	r4, r5, d0
 800b058:	2d00      	cmp	r5, #0
 800b05a:	460e      	mov	r6, r1
 800b05c:	4619      	mov	r1, r3
 800b05e:	462b      	mov	r3, r5
 800b060:	bfbb      	ittet	lt
 800b062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b066:	461d      	movlt	r5, r3
 800b068:	2300      	movge	r3, #0
 800b06a:	232d      	movlt	r3, #45	; 0x2d
 800b06c:	700b      	strb	r3, [r1, #0]
 800b06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b074:	4691      	mov	r9, r2
 800b076:	f023 0820 	bic.w	r8, r3, #32
 800b07a:	bfbc      	itt	lt
 800b07c:	4622      	movlt	r2, r4
 800b07e:	4614      	movlt	r4, r2
 800b080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b084:	d005      	beq.n	800b092 <__cvt+0x42>
 800b086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b08a:	d100      	bne.n	800b08e <__cvt+0x3e>
 800b08c:	3601      	adds	r6, #1
 800b08e:	2102      	movs	r1, #2
 800b090:	e000      	b.n	800b094 <__cvt+0x44>
 800b092:	2103      	movs	r1, #3
 800b094:	ab03      	add	r3, sp, #12
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	ab02      	add	r3, sp, #8
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	ec45 4b10 	vmov	d0, r4, r5
 800b0a0:	4653      	mov	r3, sl
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	f001 f820 	bl	800c0e8 <_dtoa_r>
 800b0a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	d102      	bne.n	800b0b6 <__cvt+0x66>
 800b0b0:	f019 0f01 	tst.w	r9, #1
 800b0b4:	d022      	beq.n	800b0fc <__cvt+0xac>
 800b0b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0ba:	eb07 0906 	add.w	r9, r7, r6
 800b0be:	d110      	bne.n	800b0e2 <__cvt+0x92>
 800b0c0:	783b      	ldrb	r3, [r7, #0]
 800b0c2:	2b30      	cmp	r3, #48	; 0x30
 800b0c4:	d10a      	bne.n	800b0dc <__cvt+0x8c>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 fd23 	bl	8000b18 <__aeabi_dcmpeq>
 800b0d2:	b918      	cbnz	r0, 800b0dc <__cvt+0x8c>
 800b0d4:	f1c6 0601 	rsb	r6, r6, #1
 800b0d8:	f8ca 6000 	str.w	r6, [sl]
 800b0dc:	f8da 3000 	ldr.w	r3, [sl]
 800b0e0:	4499      	add	r9, r3
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 fd15 	bl	8000b18 <__aeabi_dcmpeq>
 800b0ee:	b108      	cbz	r0, 800b0f4 <__cvt+0xa4>
 800b0f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0f4:	2230      	movs	r2, #48	; 0x30
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	454b      	cmp	r3, r9
 800b0fa:	d307      	bcc.n	800b10c <__cvt+0xbc>
 800b0fc:	9b03      	ldr	r3, [sp, #12]
 800b0fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b100:	1bdb      	subs	r3, r3, r7
 800b102:	4638      	mov	r0, r7
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	b004      	add	sp, #16
 800b108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10c:	1c59      	adds	r1, r3, #1
 800b10e:	9103      	str	r1, [sp, #12]
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	e7f0      	b.n	800b0f6 <__cvt+0xa6>

0800b114 <__exponent>:
 800b114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b116:	4603      	mov	r3, r0
 800b118:	2900      	cmp	r1, #0
 800b11a:	bfb8      	it	lt
 800b11c:	4249      	neglt	r1, r1
 800b11e:	f803 2b02 	strb.w	r2, [r3], #2
 800b122:	bfb4      	ite	lt
 800b124:	222d      	movlt	r2, #45	; 0x2d
 800b126:	222b      	movge	r2, #43	; 0x2b
 800b128:	2909      	cmp	r1, #9
 800b12a:	7042      	strb	r2, [r0, #1]
 800b12c:	dd2a      	ble.n	800b184 <__exponent+0x70>
 800b12e:	f10d 0207 	add.w	r2, sp, #7
 800b132:	4617      	mov	r7, r2
 800b134:	260a      	movs	r6, #10
 800b136:	4694      	mov	ip, r2
 800b138:	fb91 f5f6 	sdiv	r5, r1, r6
 800b13c:	fb06 1415 	mls	r4, r6, r5, r1
 800b140:	3430      	adds	r4, #48	; 0x30
 800b142:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b146:	460c      	mov	r4, r1
 800b148:	2c63      	cmp	r4, #99	; 0x63
 800b14a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b14e:	4629      	mov	r1, r5
 800b150:	dcf1      	bgt.n	800b136 <__exponent+0x22>
 800b152:	3130      	adds	r1, #48	; 0x30
 800b154:	f1ac 0402 	sub.w	r4, ip, #2
 800b158:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b15c:	1c41      	adds	r1, r0, #1
 800b15e:	4622      	mov	r2, r4
 800b160:	42ba      	cmp	r2, r7
 800b162:	d30a      	bcc.n	800b17a <__exponent+0x66>
 800b164:	f10d 0209 	add.w	r2, sp, #9
 800b168:	eba2 020c 	sub.w	r2, r2, ip
 800b16c:	42bc      	cmp	r4, r7
 800b16e:	bf88      	it	hi
 800b170:	2200      	movhi	r2, #0
 800b172:	4413      	add	r3, r2
 800b174:	1a18      	subs	r0, r3, r0
 800b176:	b003      	add	sp, #12
 800b178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b17e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b182:	e7ed      	b.n	800b160 <__exponent+0x4c>
 800b184:	2330      	movs	r3, #48	; 0x30
 800b186:	3130      	adds	r1, #48	; 0x30
 800b188:	7083      	strb	r3, [r0, #2]
 800b18a:	70c1      	strb	r1, [r0, #3]
 800b18c:	1d03      	adds	r3, r0, #4
 800b18e:	e7f1      	b.n	800b174 <__exponent+0x60>

0800b190 <_printf_float>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	ed2d 8b02 	vpush	{d8}
 800b198:	b08d      	sub	sp, #52	; 0x34
 800b19a:	460c      	mov	r4, r1
 800b19c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	461f      	mov	r7, r3
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	f000 fe8f 	bl	800bec8 <_localeconv_r>
 800b1aa:	f8d0 a000 	ldr.w	sl, [r0]
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	f7f5 f886 	bl	80002c0 <strlen>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	9305      	str	r3, [sp, #20]
 800b1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1c4:	3307      	adds	r3, #7
 800b1c6:	f023 0307 	bic.w	r3, r3, #7
 800b1ca:	f103 0208 	add.w	r2, r3, #8
 800b1ce:	f8c8 2000 	str.w	r2, [r8]
 800b1d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1da:	9307      	str	r3, [sp, #28]
 800b1dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1e0:	ee08 0a10 	vmov	s16, r0
 800b1e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b1e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ec:	4b9e      	ldr	r3, [pc, #632]	; (800b468 <_printf_float+0x2d8>)
 800b1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f2:	f7f5 fcc3 	bl	8000b7c <__aeabi_dcmpun>
 800b1f6:	bb88      	cbnz	r0, 800b25c <_printf_float+0xcc>
 800b1f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1fc:	4b9a      	ldr	r3, [pc, #616]	; (800b468 <_printf_float+0x2d8>)
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	f7f5 fc9d 	bl	8000b40 <__aeabi_dcmple>
 800b206:	bb48      	cbnz	r0, 800b25c <_printf_float+0xcc>
 800b208:	2200      	movs	r2, #0
 800b20a:	2300      	movs	r3, #0
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	f7f5 fc8c 	bl	8000b2c <__aeabi_dcmplt>
 800b214:	b110      	cbz	r0, 800b21c <_printf_float+0x8c>
 800b216:	232d      	movs	r3, #45	; 0x2d
 800b218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b21c:	4a93      	ldr	r2, [pc, #588]	; (800b46c <_printf_float+0x2dc>)
 800b21e:	4b94      	ldr	r3, [pc, #592]	; (800b470 <_printf_float+0x2e0>)
 800b220:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b224:	bf94      	ite	ls
 800b226:	4690      	movls	r8, r2
 800b228:	4698      	movhi	r8, r3
 800b22a:	2303      	movs	r3, #3
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	9b05      	ldr	r3, [sp, #20]
 800b230:	f023 0304 	bic.w	r3, r3, #4
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	f04f 0900 	mov.w	r9, #0
 800b23a:	9700      	str	r7, [sp, #0]
 800b23c:	4633      	mov	r3, r6
 800b23e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f9da 	bl	800b5fc <_printf_common>
 800b248:	3001      	adds	r0, #1
 800b24a:	f040 8090 	bne.w	800b36e <_printf_float+0x1de>
 800b24e:	f04f 30ff 	mov.w	r0, #4294967295
 800b252:	b00d      	add	sp, #52	; 0x34
 800b254:	ecbd 8b02 	vpop	{d8}
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	4642      	mov	r2, r8
 800b25e:	464b      	mov	r3, r9
 800b260:	4640      	mov	r0, r8
 800b262:	4649      	mov	r1, r9
 800b264:	f7f5 fc8a 	bl	8000b7c <__aeabi_dcmpun>
 800b268:	b140      	cbz	r0, 800b27c <_printf_float+0xec>
 800b26a:	464b      	mov	r3, r9
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bfbc      	itt	lt
 800b270:	232d      	movlt	r3, #45	; 0x2d
 800b272:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b276:	4a7f      	ldr	r2, [pc, #508]	; (800b474 <_printf_float+0x2e4>)
 800b278:	4b7f      	ldr	r3, [pc, #508]	; (800b478 <_printf_float+0x2e8>)
 800b27a:	e7d1      	b.n	800b220 <_printf_float+0x90>
 800b27c:	6863      	ldr	r3, [r4, #4]
 800b27e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b282:	9206      	str	r2, [sp, #24]
 800b284:	1c5a      	adds	r2, r3, #1
 800b286:	d13f      	bne.n	800b308 <_printf_float+0x178>
 800b288:	2306      	movs	r3, #6
 800b28a:	6063      	str	r3, [r4, #4]
 800b28c:	9b05      	ldr	r3, [sp, #20]
 800b28e:	6861      	ldr	r1, [r4, #4]
 800b290:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b294:	2300      	movs	r3, #0
 800b296:	9303      	str	r3, [sp, #12]
 800b298:	ab0a      	add	r3, sp, #40	; 0x28
 800b29a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b29e:	ab09      	add	r3, sp, #36	; 0x24
 800b2a0:	ec49 8b10 	vmov	d0, r8, r9
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	6022      	str	r2, [r4, #0]
 800b2a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f7ff fecf 	bl	800b050 <__cvt>
 800b2b2:	9b06      	ldr	r3, [sp, #24]
 800b2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2b6:	2b47      	cmp	r3, #71	; 0x47
 800b2b8:	4680      	mov	r8, r0
 800b2ba:	d108      	bne.n	800b2ce <_printf_float+0x13e>
 800b2bc:	1cc8      	adds	r0, r1, #3
 800b2be:	db02      	blt.n	800b2c6 <_printf_float+0x136>
 800b2c0:	6863      	ldr	r3, [r4, #4]
 800b2c2:	4299      	cmp	r1, r3
 800b2c4:	dd41      	ble.n	800b34a <_printf_float+0x1ba>
 800b2c6:	f1ab 0302 	sub.w	r3, fp, #2
 800b2ca:	fa5f fb83 	uxtb.w	fp, r3
 800b2ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2d2:	d820      	bhi.n	800b316 <_printf_float+0x186>
 800b2d4:	3901      	subs	r1, #1
 800b2d6:	465a      	mov	r2, fp
 800b2d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2dc:	9109      	str	r1, [sp, #36]	; 0x24
 800b2de:	f7ff ff19 	bl	800b114 <__exponent>
 800b2e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e4:	1813      	adds	r3, r2, r0
 800b2e6:	2a01      	cmp	r2, #1
 800b2e8:	4681      	mov	r9, r0
 800b2ea:	6123      	str	r3, [r4, #16]
 800b2ec:	dc02      	bgt.n	800b2f4 <_printf_float+0x164>
 800b2ee:	6822      	ldr	r2, [r4, #0]
 800b2f0:	07d2      	lsls	r2, r2, #31
 800b2f2:	d501      	bpl.n	800b2f8 <_printf_float+0x168>
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	6123      	str	r3, [r4, #16]
 800b2f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d09c      	beq.n	800b23a <_printf_float+0xaa>
 800b300:	232d      	movs	r3, #45	; 0x2d
 800b302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b306:	e798      	b.n	800b23a <_printf_float+0xaa>
 800b308:	9a06      	ldr	r2, [sp, #24]
 800b30a:	2a47      	cmp	r2, #71	; 0x47
 800b30c:	d1be      	bne.n	800b28c <_printf_float+0xfc>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1bc      	bne.n	800b28c <_printf_float+0xfc>
 800b312:	2301      	movs	r3, #1
 800b314:	e7b9      	b.n	800b28a <_printf_float+0xfa>
 800b316:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b31a:	d118      	bne.n	800b34e <_printf_float+0x1be>
 800b31c:	2900      	cmp	r1, #0
 800b31e:	6863      	ldr	r3, [r4, #4]
 800b320:	dd0b      	ble.n	800b33a <_printf_float+0x1aa>
 800b322:	6121      	str	r1, [r4, #16]
 800b324:	b913      	cbnz	r3, 800b32c <_printf_float+0x19c>
 800b326:	6822      	ldr	r2, [r4, #0]
 800b328:	07d0      	lsls	r0, r2, #31
 800b32a:	d502      	bpl.n	800b332 <_printf_float+0x1a2>
 800b32c:	3301      	adds	r3, #1
 800b32e:	440b      	add	r3, r1
 800b330:	6123      	str	r3, [r4, #16]
 800b332:	65a1      	str	r1, [r4, #88]	; 0x58
 800b334:	f04f 0900 	mov.w	r9, #0
 800b338:	e7de      	b.n	800b2f8 <_printf_float+0x168>
 800b33a:	b913      	cbnz	r3, 800b342 <_printf_float+0x1b2>
 800b33c:	6822      	ldr	r2, [r4, #0]
 800b33e:	07d2      	lsls	r2, r2, #31
 800b340:	d501      	bpl.n	800b346 <_printf_float+0x1b6>
 800b342:	3302      	adds	r3, #2
 800b344:	e7f4      	b.n	800b330 <_printf_float+0x1a0>
 800b346:	2301      	movs	r3, #1
 800b348:	e7f2      	b.n	800b330 <_printf_float+0x1a0>
 800b34a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b350:	4299      	cmp	r1, r3
 800b352:	db05      	blt.n	800b360 <_printf_float+0x1d0>
 800b354:	6823      	ldr	r3, [r4, #0]
 800b356:	6121      	str	r1, [r4, #16]
 800b358:	07d8      	lsls	r0, r3, #31
 800b35a:	d5ea      	bpl.n	800b332 <_printf_float+0x1a2>
 800b35c:	1c4b      	adds	r3, r1, #1
 800b35e:	e7e7      	b.n	800b330 <_printf_float+0x1a0>
 800b360:	2900      	cmp	r1, #0
 800b362:	bfd4      	ite	le
 800b364:	f1c1 0202 	rsble	r2, r1, #2
 800b368:	2201      	movgt	r2, #1
 800b36a:	4413      	add	r3, r2
 800b36c:	e7e0      	b.n	800b330 <_printf_float+0x1a0>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	055a      	lsls	r2, r3, #21
 800b372:	d407      	bmi.n	800b384 <_printf_float+0x1f4>
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	4642      	mov	r2, r8
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	47b8      	blx	r7
 800b37e:	3001      	adds	r0, #1
 800b380:	d12c      	bne.n	800b3dc <_printf_float+0x24c>
 800b382:	e764      	b.n	800b24e <_printf_float+0xbe>
 800b384:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b388:	f240 80e0 	bls.w	800b54c <_printf_float+0x3bc>
 800b38c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b390:	2200      	movs	r2, #0
 800b392:	2300      	movs	r3, #0
 800b394:	f7f5 fbc0 	bl	8000b18 <__aeabi_dcmpeq>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d034      	beq.n	800b406 <_printf_float+0x276>
 800b39c:	4a37      	ldr	r2, [pc, #220]	; (800b47c <_printf_float+0x2ec>)
 800b39e:	2301      	movs	r3, #1
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	47b8      	blx	r7
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	f43f af51 	beq.w	800b24e <_printf_float+0xbe>
 800b3ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	db02      	blt.n	800b3ba <_printf_float+0x22a>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	07d8      	lsls	r0, r3, #31
 800b3b8:	d510      	bpl.n	800b3dc <_printf_float+0x24c>
 800b3ba:	ee18 3a10 	vmov	r3, s16
 800b3be:	4652      	mov	r2, sl
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	47b8      	blx	r7
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	f43f af41 	beq.w	800b24e <_printf_float+0xbe>
 800b3cc:	f04f 0800 	mov.w	r8, #0
 800b3d0:	f104 091a 	add.w	r9, r4, #26
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	4543      	cmp	r3, r8
 800b3da:	dc09      	bgt.n	800b3f0 <_printf_float+0x260>
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	079b      	lsls	r3, r3, #30
 800b3e0:	f100 8107 	bmi.w	800b5f2 <_printf_float+0x462>
 800b3e4:	68e0      	ldr	r0, [r4, #12]
 800b3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e8:	4298      	cmp	r0, r3
 800b3ea:	bfb8      	it	lt
 800b3ec:	4618      	movlt	r0, r3
 800b3ee:	e730      	b.n	800b252 <_printf_float+0xc2>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	464a      	mov	r2, r9
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	47b8      	blx	r7
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	f43f af27 	beq.w	800b24e <_printf_float+0xbe>
 800b400:	f108 0801 	add.w	r8, r8, #1
 800b404:	e7e6      	b.n	800b3d4 <_printf_float+0x244>
 800b406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b408:	2b00      	cmp	r3, #0
 800b40a:	dc39      	bgt.n	800b480 <_printf_float+0x2f0>
 800b40c:	4a1b      	ldr	r2, [pc, #108]	; (800b47c <_printf_float+0x2ec>)
 800b40e:	2301      	movs	r3, #1
 800b410:	4631      	mov	r1, r6
 800b412:	4628      	mov	r0, r5
 800b414:	47b8      	blx	r7
 800b416:	3001      	adds	r0, #1
 800b418:	f43f af19 	beq.w	800b24e <_printf_float+0xbe>
 800b41c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b420:	4313      	orrs	r3, r2
 800b422:	d102      	bne.n	800b42a <_printf_float+0x29a>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	07d9      	lsls	r1, r3, #31
 800b428:	d5d8      	bpl.n	800b3dc <_printf_float+0x24c>
 800b42a:	ee18 3a10 	vmov	r3, s16
 800b42e:	4652      	mov	r2, sl
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f af09 	beq.w	800b24e <_printf_float+0xbe>
 800b43c:	f04f 0900 	mov.w	r9, #0
 800b440:	f104 0a1a 	add.w	sl, r4, #26
 800b444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b446:	425b      	negs	r3, r3
 800b448:	454b      	cmp	r3, r9
 800b44a:	dc01      	bgt.n	800b450 <_printf_float+0x2c0>
 800b44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b44e:	e792      	b.n	800b376 <_printf_float+0x1e6>
 800b450:	2301      	movs	r3, #1
 800b452:	4652      	mov	r2, sl
 800b454:	4631      	mov	r1, r6
 800b456:	4628      	mov	r0, r5
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	f43f aef7 	beq.w	800b24e <_printf_float+0xbe>
 800b460:	f109 0901 	add.w	r9, r9, #1
 800b464:	e7ee      	b.n	800b444 <_printf_float+0x2b4>
 800b466:	bf00      	nop
 800b468:	7fefffff 	.word	0x7fefffff
 800b46c:	0800fd5c 	.word	0x0800fd5c
 800b470:	0800fd60 	.word	0x0800fd60
 800b474:	0800fd64 	.word	0x0800fd64
 800b478:	0800fd68 	.word	0x0800fd68
 800b47c:	0800fd6c 	.word	0x0800fd6c
 800b480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b484:	429a      	cmp	r2, r3
 800b486:	bfa8      	it	ge
 800b488:	461a      	movge	r2, r3
 800b48a:	2a00      	cmp	r2, #0
 800b48c:	4691      	mov	r9, r2
 800b48e:	dc37      	bgt.n	800b500 <_printf_float+0x370>
 800b490:	f04f 0b00 	mov.w	fp, #0
 800b494:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b498:	f104 021a 	add.w	r2, r4, #26
 800b49c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b49e:	9305      	str	r3, [sp, #20]
 800b4a0:	eba3 0309 	sub.w	r3, r3, r9
 800b4a4:	455b      	cmp	r3, fp
 800b4a6:	dc33      	bgt.n	800b510 <_printf_float+0x380>
 800b4a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	db3b      	blt.n	800b528 <_printf_float+0x398>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	07da      	lsls	r2, r3, #31
 800b4b4:	d438      	bmi.n	800b528 <_printf_float+0x398>
 800b4b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b4ba:	eba2 0903 	sub.w	r9, r2, r3
 800b4be:	9b05      	ldr	r3, [sp, #20]
 800b4c0:	1ad2      	subs	r2, r2, r3
 800b4c2:	4591      	cmp	r9, r2
 800b4c4:	bfa8      	it	ge
 800b4c6:	4691      	movge	r9, r2
 800b4c8:	f1b9 0f00 	cmp.w	r9, #0
 800b4cc:	dc35      	bgt.n	800b53a <_printf_float+0x3aa>
 800b4ce:	f04f 0800 	mov.w	r8, #0
 800b4d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4d6:	f104 0a1a 	add.w	sl, r4, #26
 800b4da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4de:	1a9b      	subs	r3, r3, r2
 800b4e0:	eba3 0309 	sub.w	r3, r3, r9
 800b4e4:	4543      	cmp	r3, r8
 800b4e6:	f77f af79 	ble.w	800b3dc <_printf_float+0x24c>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f aeaa 	beq.w	800b24e <_printf_float+0xbe>
 800b4fa:	f108 0801 	add.w	r8, r8, #1
 800b4fe:	e7ec      	b.n	800b4da <_printf_float+0x34a>
 800b500:	4613      	mov	r3, r2
 800b502:	4631      	mov	r1, r6
 800b504:	4642      	mov	r2, r8
 800b506:	4628      	mov	r0, r5
 800b508:	47b8      	blx	r7
 800b50a:	3001      	adds	r0, #1
 800b50c:	d1c0      	bne.n	800b490 <_printf_float+0x300>
 800b50e:	e69e      	b.n	800b24e <_printf_float+0xbe>
 800b510:	2301      	movs	r3, #1
 800b512:	4631      	mov	r1, r6
 800b514:	4628      	mov	r0, r5
 800b516:	9205      	str	r2, [sp, #20]
 800b518:	47b8      	blx	r7
 800b51a:	3001      	adds	r0, #1
 800b51c:	f43f ae97 	beq.w	800b24e <_printf_float+0xbe>
 800b520:	9a05      	ldr	r2, [sp, #20]
 800b522:	f10b 0b01 	add.w	fp, fp, #1
 800b526:	e7b9      	b.n	800b49c <_printf_float+0x30c>
 800b528:	ee18 3a10 	vmov	r3, s16
 800b52c:	4652      	mov	r2, sl
 800b52e:	4631      	mov	r1, r6
 800b530:	4628      	mov	r0, r5
 800b532:	47b8      	blx	r7
 800b534:	3001      	adds	r0, #1
 800b536:	d1be      	bne.n	800b4b6 <_printf_float+0x326>
 800b538:	e689      	b.n	800b24e <_printf_float+0xbe>
 800b53a:	9a05      	ldr	r2, [sp, #20]
 800b53c:	464b      	mov	r3, r9
 800b53e:	4442      	add	r2, r8
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	d1c1      	bne.n	800b4ce <_printf_float+0x33e>
 800b54a:	e680      	b.n	800b24e <_printf_float+0xbe>
 800b54c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b54e:	2a01      	cmp	r2, #1
 800b550:	dc01      	bgt.n	800b556 <_printf_float+0x3c6>
 800b552:	07db      	lsls	r3, r3, #31
 800b554:	d53a      	bpl.n	800b5cc <_printf_float+0x43c>
 800b556:	2301      	movs	r3, #1
 800b558:	4642      	mov	r2, r8
 800b55a:	4631      	mov	r1, r6
 800b55c:	4628      	mov	r0, r5
 800b55e:	47b8      	blx	r7
 800b560:	3001      	adds	r0, #1
 800b562:	f43f ae74 	beq.w	800b24e <_printf_float+0xbe>
 800b566:	ee18 3a10 	vmov	r3, s16
 800b56a:	4652      	mov	r2, sl
 800b56c:	4631      	mov	r1, r6
 800b56e:	4628      	mov	r0, r5
 800b570:	47b8      	blx	r7
 800b572:	3001      	adds	r0, #1
 800b574:	f43f ae6b 	beq.w	800b24e <_printf_float+0xbe>
 800b578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b57c:	2200      	movs	r2, #0
 800b57e:	2300      	movs	r3, #0
 800b580:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b584:	f7f5 fac8 	bl	8000b18 <__aeabi_dcmpeq>
 800b588:	b9d8      	cbnz	r0, 800b5c2 <_printf_float+0x432>
 800b58a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b58e:	f108 0201 	add.w	r2, r8, #1
 800b592:	4631      	mov	r1, r6
 800b594:	4628      	mov	r0, r5
 800b596:	47b8      	blx	r7
 800b598:	3001      	adds	r0, #1
 800b59a:	d10e      	bne.n	800b5ba <_printf_float+0x42a>
 800b59c:	e657      	b.n	800b24e <_printf_float+0xbe>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b8      	blx	r7
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f43f ae50 	beq.w	800b24e <_printf_float+0xbe>
 800b5ae:	f108 0801 	add.w	r8, r8, #1
 800b5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	4543      	cmp	r3, r8
 800b5b8:	dcf1      	bgt.n	800b59e <_printf_float+0x40e>
 800b5ba:	464b      	mov	r3, r9
 800b5bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5c0:	e6da      	b.n	800b378 <_printf_float+0x1e8>
 800b5c2:	f04f 0800 	mov.w	r8, #0
 800b5c6:	f104 0a1a 	add.w	sl, r4, #26
 800b5ca:	e7f2      	b.n	800b5b2 <_printf_float+0x422>
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	4642      	mov	r2, r8
 800b5d0:	e7df      	b.n	800b592 <_printf_float+0x402>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	464a      	mov	r2, r9
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	f43f ae36 	beq.w	800b24e <_printf_float+0xbe>
 800b5e2:	f108 0801 	add.w	r8, r8, #1
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ea:	1a5b      	subs	r3, r3, r1
 800b5ec:	4543      	cmp	r3, r8
 800b5ee:	dcf0      	bgt.n	800b5d2 <_printf_float+0x442>
 800b5f0:	e6f8      	b.n	800b3e4 <_printf_float+0x254>
 800b5f2:	f04f 0800 	mov.w	r8, #0
 800b5f6:	f104 0919 	add.w	r9, r4, #25
 800b5fa:	e7f4      	b.n	800b5e6 <_printf_float+0x456>

0800b5fc <_printf_common>:
 800b5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b600:	4616      	mov	r6, r2
 800b602:	4699      	mov	r9, r3
 800b604:	688a      	ldr	r2, [r1, #8]
 800b606:	690b      	ldr	r3, [r1, #16]
 800b608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b60c:	4293      	cmp	r3, r2
 800b60e:	bfb8      	it	lt
 800b610:	4613      	movlt	r3, r2
 800b612:	6033      	str	r3, [r6, #0]
 800b614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b618:	4607      	mov	r7, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	b10a      	cbz	r2, 800b622 <_printf_common+0x26>
 800b61e:	3301      	adds	r3, #1
 800b620:	6033      	str	r3, [r6, #0]
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	0699      	lsls	r1, r3, #26
 800b626:	bf42      	ittt	mi
 800b628:	6833      	ldrmi	r3, [r6, #0]
 800b62a:	3302      	addmi	r3, #2
 800b62c:	6033      	strmi	r3, [r6, #0]
 800b62e:	6825      	ldr	r5, [r4, #0]
 800b630:	f015 0506 	ands.w	r5, r5, #6
 800b634:	d106      	bne.n	800b644 <_printf_common+0x48>
 800b636:	f104 0a19 	add.w	sl, r4, #25
 800b63a:	68e3      	ldr	r3, [r4, #12]
 800b63c:	6832      	ldr	r2, [r6, #0]
 800b63e:	1a9b      	subs	r3, r3, r2
 800b640:	42ab      	cmp	r3, r5
 800b642:	dc26      	bgt.n	800b692 <_printf_common+0x96>
 800b644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b648:	1e13      	subs	r3, r2, #0
 800b64a:	6822      	ldr	r2, [r4, #0]
 800b64c:	bf18      	it	ne
 800b64e:	2301      	movne	r3, #1
 800b650:	0692      	lsls	r2, r2, #26
 800b652:	d42b      	bmi.n	800b6ac <_printf_common+0xb0>
 800b654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b658:	4649      	mov	r1, r9
 800b65a:	4638      	mov	r0, r7
 800b65c:	47c0      	blx	r8
 800b65e:	3001      	adds	r0, #1
 800b660:	d01e      	beq.n	800b6a0 <_printf_common+0xa4>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	6922      	ldr	r2, [r4, #16]
 800b666:	f003 0306 	and.w	r3, r3, #6
 800b66a:	2b04      	cmp	r3, #4
 800b66c:	bf02      	ittt	eq
 800b66e:	68e5      	ldreq	r5, [r4, #12]
 800b670:	6833      	ldreq	r3, [r6, #0]
 800b672:	1aed      	subeq	r5, r5, r3
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	bf0c      	ite	eq
 800b678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b67c:	2500      	movne	r5, #0
 800b67e:	4293      	cmp	r3, r2
 800b680:	bfc4      	itt	gt
 800b682:	1a9b      	subgt	r3, r3, r2
 800b684:	18ed      	addgt	r5, r5, r3
 800b686:	2600      	movs	r6, #0
 800b688:	341a      	adds	r4, #26
 800b68a:	42b5      	cmp	r5, r6
 800b68c:	d11a      	bne.n	800b6c4 <_printf_common+0xc8>
 800b68e:	2000      	movs	r0, #0
 800b690:	e008      	b.n	800b6a4 <_printf_common+0xa8>
 800b692:	2301      	movs	r3, #1
 800b694:	4652      	mov	r2, sl
 800b696:	4649      	mov	r1, r9
 800b698:	4638      	mov	r0, r7
 800b69a:	47c0      	blx	r8
 800b69c:	3001      	adds	r0, #1
 800b69e:	d103      	bne.n	800b6a8 <_printf_common+0xac>
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a8:	3501      	adds	r5, #1
 800b6aa:	e7c6      	b.n	800b63a <_printf_common+0x3e>
 800b6ac:	18e1      	adds	r1, r4, r3
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	2030      	movs	r0, #48	; 0x30
 800b6b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6b6:	4422      	add	r2, r4
 800b6b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6c0:	3302      	adds	r3, #2
 800b6c2:	e7c7      	b.n	800b654 <_printf_common+0x58>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	4622      	mov	r2, r4
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	47c0      	blx	r8
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	d0e6      	beq.n	800b6a0 <_printf_common+0xa4>
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	e7d9      	b.n	800b68a <_printf_common+0x8e>
	...

0800b6d8 <_printf_i>:
 800b6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	7e0f      	ldrb	r7, [r1, #24]
 800b6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6e0:	2f78      	cmp	r7, #120	; 0x78
 800b6e2:	4691      	mov	r9, r2
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	469a      	mov	sl, r3
 800b6ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6ee:	d807      	bhi.n	800b700 <_printf_i+0x28>
 800b6f0:	2f62      	cmp	r7, #98	; 0x62
 800b6f2:	d80a      	bhi.n	800b70a <_printf_i+0x32>
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	f000 80d4 	beq.w	800b8a2 <_printf_i+0x1ca>
 800b6fa:	2f58      	cmp	r7, #88	; 0x58
 800b6fc:	f000 80c0 	beq.w	800b880 <_printf_i+0x1a8>
 800b700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b708:	e03a      	b.n	800b780 <_printf_i+0xa8>
 800b70a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b70e:	2b15      	cmp	r3, #21
 800b710:	d8f6      	bhi.n	800b700 <_printf_i+0x28>
 800b712:	a101      	add	r1, pc, #4	; (adr r1, 800b718 <_printf_i+0x40>)
 800b714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b718:	0800b771 	.word	0x0800b771
 800b71c:	0800b785 	.word	0x0800b785
 800b720:	0800b701 	.word	0x0800b701
 800b724:	0800b701 	.word	0x0800b701
 800b728:	0800b701 	.word	0x0800b701
 800b72c:	0800b701 	.word	0x0800b701
 800b730:	0800b785 	.word	0x0800b785
 800b734:	0800b701 	.word	0x0800b701
 800b738:	0800b701 	.word	0x0800b701
 800b73c:	0800b701 	.word	0x0800b701
 800b740:	0800b701 	.word	0x0800b701
 800b744:	0800b889 	.word	0x0800b889
 800b748:	0800b7b1 	.word	0x0800b7b1
 800b74c:	0800b843 	.word	0x0800b843
 800b750:	0800b701 	.word	0x0800b701
 800b754:	0800b701 	.word	0x0800b701
 800b758:	0800b8ab 	.word	0x0800b8ab
 800b75c:	0800b701 	.word	0x0800b701
 800b760:	0800b7b1 	.word	0x0800b7b1
 800b764:	0800b701 	.word	0x0800b701
 800b768:	0800b701 	.word	0x0800b701
 800b76c:	0800b84b 	.word	0x0800b84b
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	1d1a      	adds	r2, r3, #4
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	602a      	str	r2, [r5, #0]
 800b778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b77c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b780:	2301      	movs	r3, #1
 800b782:	e09f      	b.n	800b8c4 <_printf_i+0x1ec>
 800b784:	6820      	ldr	r0, [r4, #0]
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	0607      	lsls	r7, r0, #24
 800b78a:	f103 0104 	add.w	r1, r3, #4
 800b78e:	6029      	str	r1, [r5, #0]
 800b790:	d501      	bpl.n	800b796 <_printf_i+0xbe>
 800b792:	681e      	ldr	r6, [r3, #0]
 800b794:	e003      	b.n	800b79e <_printf_i+0xc6>
 800b796:	0646      	lsls	r6, r0, #25
 800b798:	d5fb      	bpl.n	800b792 <_printf_i+0xba>
 800b79a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b79e:	2e00      	cmp	r6, #0
 800b7a0:	da03      	bge.n	800b7aa <_printf_i+0xd2>
 800b7a2:	232d      	movs	r3, #45	; 0x2d
 800b7a4:	4276      	negs	r6, r6
 800b7a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7aa:	485a      	ldr	r0, [pc, #360]	; (800b914 <_printf_i+0x23c>)
 800b7ac:	230a      	movs	r3, #10
 800b7ae:	e012      	b.n	800b7d6 <_printf_i+0xfe>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	6820      	ldr	r0, [r4, #0]
 800b7b4:	1d19      	adds	r1, r3, #4
 800b7b6:	6029      	str	r1, [r5, #0]
 800b7b8:	0605      	lsls	r5, r0, #24
 800b7ba:	d501      	bpl.n	800b7c0 <_printf_i+0xe8>
 800b7bc:	681e      	ldr	r6, [r3, #0]
 800b7be:	e002      	b.n	800b7c6 <_printf_i+0xee>
 800b7c0:	0641      	lsls	r1, r0, #25
 800b7c2:	d5fb      	bpl.n	800b7bc <_printf_i+0xe4>
 800b7c4:	881e      	ldrh	r6, [r3, #0]
 800b7c6:	4853      	ldr	r0, [pc, #332]	; (800b914 <_printf_i+0x23c>)
 800b7c8:	2f6f      	cmp	r7, #111	; 0x6f
 800b7ca:	bf0c      	ite	eq
 800b7cc:	2308      	moveq	r3, #8
 800b7ce:	230a      	movne	r3, #10
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7d6:	6865      	ldr	r5, [r4, #4]
 800b7d8:	60a5      	str	r5, [r4, #8]
 800b7da:	2d00      	cmp	r5, #0
 800b7dc:	bfa2      	ittt	ge
 800b7de:	6821      	ldrge	r1, [r4, #0]
 800b7e0:	f021 0104 	bicge.w	r1, r1, #4
 800b7e4:	6021      	strge	r1, [r4, #0]
 800b7e6:	b90e      	cbnz	r6, 800b7ec <_printf_i+0x114>
 800b7e8:	2d00      	cmp	r5, #0
 800b7ea:	d04b      	beq.n	800b884 <_printf_i+0x1ac>
 800b7ec:	4615      	mov	r5, r2
 800b7ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7f2:	fb03 6711 	mls	r7, r3, r1, r6
 800b7f6:	5dc7      	ldrb	r7, [r0, r7]
 800b7f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7fc:	4637      	mov	r7, r6
 800b7fe:	42bb      	cmp	r3, r7
 800b800:	460e      	mov	r6, r1
 800b802:	d9f4      	bls.n	800b7ee <_printf_i+0x116>
 800b804:	2b08      	cmp	r3, #8
 800b806:	d10b      	bne.n	800b820 <_printf_i+0x148>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	07de      	lsls	r6, r3, #31
 800b80c:	d508      	bpl.n	800b820 <_printf_i+0x148>
 800b80e:	6923      	ldr	r3, [r4, #16]
 800b810:	6861      	ldr	r1, [r4, #4]
 800b812:	4299      	cmp	r1, r3
 800b814:	bfde      	ittt	le
 800b816:	2330      	movle	r3, #48	; 0x30
 800b818:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b81c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b820:	1b52      	subs	r2, r2, r5
 800b822:	6122      	str	r2, [r4, #16]
 800b824:	f8cd a000 	str.w	sl, [sp]
 800b828:	464b      	mov	r3, r9
 800b82a:	aa03      	add	r2, sp, #12
 800b82c:	4621      	mov	r1, r4
 800b82e:	4640      	mov	r0, r8
 800b830:	f7ff fee4 	bl	800b5fc <_printf_common>
 800b834:	3001      	adds	r0, #1
 800b836:	d14a      	bne.n	800b8ce <_printf_i+0x1f6>
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
 800b83c:	b004      	add	sp, #16
 800b83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	f043 0320 	orr.w	r3, r3, #32
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	4833      	ldr	r0, [pc, #204]	; (800b918 <_printf_i+0x240>)
 800b84c:	2778      	movs	r7, #120	; 0x78
 800b84e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	6829      	ldr	r1, [r5, #0]
 800b856:	061f      	lsls	r7, r3, #24
 800b858:	f851 6b04 	ldr.w	r6, [r1], #4
 800b85c:	d402      	bmi.n	800b864 <_printf_i+0x18c>
 800b85e:	065f      	lsls	r7, r3, #25
 800b860:	bf48      	it	mi
 800b862:	b2b6      	uxthmi	r6, r6
 800b864:	07df      	lsls	r7, r3, #31
 800b866:	bf48      	it	mi
 800b868:	f043 0320 	orrmi.w	r3, r3, #32
 800b86c:	6029      	str	r1, [r5, #0]
 800b86e:	bf48      	it	mi
 800b870:	6023      	strmi	r3, [r4, #0]
 800b872:	b91e      	cbnz	r6, 800b87c <_printf_i+0x1a4>
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	f023 0320 	bic.w	r3, r3, #32
 800b87a:	6023      	str	r3, [r4, #0]
 800b87c:	2310      	movs	r3, #16
 800b87e:	e7a7      	b.n	800b7d0 <_printf_i+0xf8>
 800b880:	4824      	ldr	r0, [pc, #144]	; (800b914 <_printf_i+0x23c>)
 800b882:	e7e4      	b.n	800b84e <_printf_i+0x176>
 800b884:	4615      	mov	r5, r2
 800b886:	e7bd      	b.n	800b804 <_printf_i+0x12c>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	6826      	ldr	r6, [r4, #0]
 800b88c:	6961      	ldr	r1, [r4, #20]
 800b88e:	1d18      	adds	r0, r3, #4
 800b890:	6028      	str	r0, [r5, #0]
 800b892:	0635      	lsls	r5, r6, #24
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	d501      	bpl.n	800b89c <_printf_i+0x1c4>
 800b898:	6019      	str	r1, [r3, #0]
 800b89a:	e002      	b.n	800b8a2 <_printf_i+0x1ca>
 800b89c:	0670      	lsls	r0, r6, #25
 800b89e:	d5fb      	bpl.n	800b898 <_printf_i+0x1c0>
 800b8a0:	8019      	strh	r1, [r3, #0]
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	6123      	str	r3, [r4, #16]
 800b8a6:	4615      	mov	r5, r2
 800b8a8:	e7bc      	b.n	800b824 <_printf_i+0x14c>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	1d1a      	adds	r2, r3, #4
 800b8ae:	602a      	str	r2, [r5, #0]
 800b8b0:	681d      	ldr	r5, [r3, #0]
 800b8b2:	6862      	ldr	r2, [r4, #4]
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f7f4 fcb2 	bl	8000220 <memchr>
 800b8bc:	b108      	cbz	r0, 800b8c2 <_printf_i+0x1ea>
 800b8be:	1b40      	subs	r0, r0, r5
 800b8c0:	6060      	str	r0, [r4, #4]
 800b8c2:	6863      	ldr	r3, [r4, #4]
 800b8c4:	6123      	str	r3, [r4, #16]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8cc:	e7aa      	b.n	800b824 <_printf_i+0x14c>
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	4640      	mov	r0, r8
 800b8d6:	47d0      	blx	sl
 800b8d8:	3001      	adds	r0, #1
 800b8da:	d0ad      	beq.n	800b838 <_printf_i+0x160>
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	079b      	lsls	r3, r3, #30
 800b8e0:	d413      	bmi.n	800b90a <_printf_i+0x232>
 800b8e2:	68e0      	ldr	r0, [r4, #12]
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	4298      	cmp	r0, r3
 800b8e8:	bfb8      	it	lt
 800b8ea:	4618      	movlt	r0, r3
 800b8ec:	e7a6      	b.n	800b83c <_printf_i+0x164>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4632      	mov	r2, r6
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	47d0      	blx	sl
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d09d      	beq.n	800b838 <_printf_i+0x160>
 800b8fc:	3501      	adds	r5, #1
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	9903      	ldr	r1, [sp, #12]
 800b902:	1a5b      	subs	r3, r3, r1
 800b904:	42ab      	cmp	r3, r5
 800b906:	dcf2      	bgt.n	800b8ee <_printf_i+0x216>
 800b908:	e7eb      	b.n	800b8e2 <_printf_i+0x20a>
 800b90a:	2500      	movs	r5, #0
 800b90c:	f104 0619 	add.w	r6, r4, #25
 800b910:	e7f5      	b.n	800b8fe <_printf_i+0x226>
 800b912:	bf00      	nop
 800b914:	0800fd6e 	.word	0x0800fd6e
 800b918:	0800fd7f 	.word	0x0800fd7f

0800b91c <std>:
 800b91c:	2300      	movs	r3, #0
 800b91e:	b510      	push	{r4, lr}
 800b920:	4604      	mov	r4, r0
 800b922:	e9c0 3300 	strd	r3, r3, [r0]
 800b926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b92a:	6083      	str	r3, [r0, #8]
 800b92c:	8181      	strh	r1, [r0, #12]
 800b92e:	6643      	str	r3, [r0, #100]	; 0x64
 800b930:	81c2      	strh	r2, [r0, #14]
 800b932:	6183      	str	r3, [r0, #24]
 800b934:	4619      	mov	r1, r3
 800b936:	2208      	movs	r2, #8
 800b938:	305c      	adds	r0, #92	; 0x5c
 800b93a:	f000 fabd 	bl	800beb8 <memset>
 800b93e:	4b05      	ldr	r3, [pc, #20]	; (800b954 <std+0x38>)
 800b940:	6263      	str	r3, [r4, #36]	; 0x24
 800b942:	4b05      	ldr	r3, [pc, #20]	; (800b958 <std+0x3c>)
 800b944:	62a3      	str	r3, [r4, #40]	; 0x28
 800b946:	4b05      	ldr	r3, [pc, #20]	; (800b95c <std+0x40>)
 800b948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b94a:	4b05      	ldr	r3, [pc, #20]	; (800b960 <std+0x44>)
 800b94c:	6224      	str	r4, [r4, #32]
 800b94e:	6323      	str	r3, [r4, #48]	; 0x30
 800b950:	bd10      	pop	{r4, pc}
 800b952:	bf00      	nop
 800b954:	0800bcc5 	.word	0x0800bcc5
 800b958:	0800bce7 	.word	0x0800bce7
 800b95c:	0800bd1f 	.word	0x0800bd1f
 800b960:	0800bd43 	.word	0x0800bd43

0800b964 <stdio_exit_handler>:
 800b964:	4a02      	ldr	r2, [pc, #8]	; (800b970 <stdio_exit_handler+0xc>)
 800b966:	4903      	ldr	r1, [pc, #12]	; (800b974 <stdio_exit_handler+0x10>)
 800b968:	4803      	ldr	r0, [pc, #12]	; (800b978 <stdio_exit_handler+0x14>)
 800b96a:	f000 b869 	b.w	800ba40 <_fwalk_sglue>
 800b96e:	bf00      	nop
 800b970:	20000014 	.word	0x20000014
 800b974:	0800daa1 	.word	0x0800daa1
 800b978:	20000020 	.word	0x20000020

0800b97c <cleanup_stdio>:
 800b97c:	6841      	ldr	r1, [r0, #4]
 800b97e:	4b0c      	ldr	r3, [pc, #48]	; (800b9b0 <cleanup_stdio+0x34>)
 800b980:	4299      	cmp	r1, r3
 800b982:	b510      	push	{r4, lr}
 800b984:	4604      	mov	r4, r0
 800b986:	d001      	beq.n	800b98c <cleanup_stdio+0x10>
 800b988:	f002 f88a 	bl	800daa0 <_fflush_r>
 800b98c:	68a1      	ldr	r1, [r4, #8]
 800b98e:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <cleanup_stdio+0x38>)
 800b990:	4299      	cmp	r1, r3
 800b992:	d002      	beq.n	800b99a <cleanup_stdio+0x1e>
 800b994:	4620      	mov	r0, r4
 800b996:	f002 f883 	bl	800daa0 <_fflush_r>
 800b99a:	68e1      	ldr	r1, [r4, #12]
 800b99c:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <cleanup_stdio+0x3c>)
 800b99e:	4299      	cmp	r1, r3
 800b9a0:	d004      	beq.n	800b9ac <cleanup_stdio+0x30>
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a8:	f002 b87a 	b.w	800daa0 <_fflush_r>
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20000fcc 	.word	0x20000fcc
 800b9b4:	20001034 	.word	0x20001034
 800b9b8:	2000109c 	.word	0x2000109c

0800b9bc <global_stdio_init.part.0>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	4b0b      	ldr	r3, [pc, #44]	; (800b9ec <global_stdio_init.part.0+0x30>)
 800b9c0:	4c0b      	ldr	r4, [pc, #44]	; (800b9f0 <global_stdio_init.part.0+0x34>)
 800b9c2:	4a0c      	ldr	r2, [pc, #48]	; (800b9f4 <global_stdio_init.part.0+0x38>)
 800b9c4:	601a      	str	r2, [r3, #0]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2104      	movs	r1, #4
 800b9cc:	f7ff ffa6 	bl	800b91c <std>
 800b9d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	2109      	movs	r1, #9
 800b9d8:	f7ff ffa0 	bl	800b91c <std>
 800b9dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9e6:	2112      	movs	r1, #18
 800b9e8:	f7ff bf98 	b.w	800b91c <std>
 800b9ec:	20001104 	.word	0x20001104
 800b9f0:	20000fcc 	.word	0x20000fcc
 800b9f4:	0800b965 	.word	0x0800b965

0800b9f8 <__sfp_lock_acquire>:
 800b9f8:	4801      	ldr	r0, [pc, #4]	; (800ba00 <__sfp_lock_acquire+0x8>)
 800b9fa:	f000 bae9 	b.w	800bfd0 <__retarget_lock_acquire_recursive>
 800b9fe:	bf00      	nop
 800ba00:	2000110d 	.word	0x2000110d

0800ba04 <__sfp_lock_release>:
 800ba04:	4801      	ldr	r0, [pc, #4]	; (800ba0c <__sfp_lock_release+0x8>)
 800ba06:	f000 bae4 	b.w	800bfd2 <__retarget_lock_release_recursive>
 800ba0a:	bf00      	nop
 800ba0c:	2000110d 	.word	0x2000110d

0800ba10 <__sinit>:
 800ba10:	b510      	push	{r4, lr}
 800ba12:	4604      	mov	r4, r0
 800ba14:	f7ff fff0 	bl	800b9f8 <__sfp_lock_acquire>
 800ba18:	6a23      	ldr	r3, [r4, #32]
 800ba1a:	b11b      	cbz	r3, 800ba24 <__sinit+0x14>
 800ba1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba20:	f7ff bff0 	b.w	800ba04 <__sfp_lock_release>
 800ba24:	4b04      	ldr	r3, [pc, #16]	; (800ba38 <__sinit+0x28>)
 800ba26:	6223      	str	r3, [r4, #32]
 800ba28:	4b04      	ldr	r3, [pc, #16]	; (800ba3c <__sinit+0x2c>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1f5      	bne.n	800ba1c <__sinit+0xc>
 800ba30:	f7ff ffc4 	bl	800b9bc <global_stdio_init.part.0>
 800ba34:	e7f2      	b.n	800ba1c <__sinit+0xc>
 800ba36:	bf00      	nop
 800ba38:	0800b97d 	.word	0x0800b97d
 800ba3c:	20001104 	.word	0x20001104

0800ba40 <_fwalk_sglue>:
 800ba40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba44:	4607      	mov	r7, r0
 800ba46:	4688      	mov	r8, r1
 800ba48:	4614      	mov	r4, r2
 800ba4a:	2600      	movs	r6, #0
 800ba4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba50:	f1b9 0901 	subs.w	r9, r9, #1
 800ba54:	d505      	bpl.n	800ba62 <_fwalk_sglue+0x22>
 800ba56:	6824      	ldr	r4, [r4, #0]
 800ba58:	2c00      	cmp	r4, #0
 800ba5a:	d1f7      	bne.n	800ba4c <_fwalk_sglue+0xc>
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba62:	89ab      	ldrh	r3, [r5, #12]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d907      	bls.n	800ba78 <_fwalk_sglue+0x38>
 800ba68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	d003      	beq.n	800ba78 <_fwalk_sglue+0x38>
 800ba70:	4629      	mov	r1, r5
 800ba72:	4638      	mov	r0, r7
 800ba74:	47c0      	blx	r8
 800ba76:	4306      	orrs	r6, r0
 800ba78:	3568      	adds	r5, #104	; 0x68
 800ba7a:	e7e9      	b.n	800ba50 <_fwalk_sglue+0x10>

0800ba7c <iprintf>:
 800ba7c:	b40f      	push	{r0, r1, r2, r3}
 800ba7e:	b507      	push	{r0, r1, r2, lr}
 800ba80:	4906      	ldr	r1, [pc, #24]	; (800ba9c <iprintf+0x20>)
 800ba82:	ab04      	add	r3, sp, #16
 800ba84:	6808      	ldr	r0, [r1, #0]
 800ba86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8a:	6881      	ldr	r1, [r0, #8]
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	f001 fe67 	bl	800d760 <_vfiprintf_r>
 800ba92:	b003      	add	sp, #12
 800ba94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba98:	b004      	add	sp, #16
 800ba9a:	4770      	bx	lr
 800ba9c:	2000006c 	.word	0x2000006c

0800baa0 <_puts_r>:
 800baa0:	6a03      	ldr	r3, [r0, #32]
 800baa2:	b570      	push	{r4, r5, r6, lr}
 800baa4:	6884      	ldr	r4, [r0, #8]
 800baa6:	4605      	mov	r5, r0
 800baa8:	460e      	mov	r6, r1
 800baaa:	b90b      	cbnz	r3, 800bab0 <_puts_r+0x10>
 800baac:	f7ff ffb0 	bl	800ba10 <__sinit>
 800bab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bab2:	07db      	lsls	r3, r3, #31
 800bab4:	d405      	bmi.n	800bac2 <_puts_r+0x22>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	0598      	lsls	r0, r3, #22
 800baba:	d402      	bmi.n	800bac2 <_puts_r+0x22>
 800babc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800babe:	f000 fa87 	bl	800bfd0 <__retarget_lock_acquire_recursive>
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	0719      	lsls	r1, r3, #28
 800bac6:	d513      	bpl.n	800baf0 <_puts_r+0x50>
 800bac8:	6923      	ldr	r3, [r4, #16]
 800baca:	b18b      	cbz	r3, 800baf0 <_puts_r+0x50>
 800bacc:	3e01      	subs	r6, #1
 800bace:	68a3      	ldr	r3, [r4, #8]
 800bad0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bad4:	3b01      	subs	r3, #1
 800bad6:	60a3      	str	r3, [r4, #8]
 800bad8:	b9e9      	cbnz	r1, 800bb16 <_puts_r+0x76>
 800bada:	2b00      	cmp	r3, #0
 800badc:	da2e      	bge.n	800bb3c <_puts_r+0x9c>
 800bade:	4622      	mov	r2, r4
 800bae0:	210a      	movs	r1, #10
 800bae2:	4628      	mov	r0, r5
 800bae4:	f000 f952 	bl	800bd8c <__swbuf_r>
 800bae8:	3001      	adds	r0, #1
 800baea:	d007      	beq.n	800bafc <_puts_r+0x5c>
 800baec:	250a      	movs	r5, #10
 800baee:	e007      	b.n	800bb00 <_puts_r+0x60>
 800baf0:	4621      	mov	r1, r4
 800baf2:	4628      	mov	r0, r5
 800baf4:	f000 f988 	bl	800be08 <__swsetup_r>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d0e7      	beq.n	800bacc <_puts_r+0x2c>
 800bafc:	f04f 35ff 	mov.w	r5, #4294967295
 800bb00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb02:	07da      	lsls	r2, r3, #31
 800bb04:	d405      	bmi.n	800bb12 <_puts_r+0x72>
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	059b      	lsls	r3, r3, #22
 800bb0a:	d402      	bmi.n	800bb12 <_puts_r+0x72>
 800bb0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb0e:	f000 fa60 	bl	800bfd2 <__retarget_lock_release_recursive>
 800bb12:	4628      	mov	r0, r5
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	da04      	bge.n	800bb24 <_puts_r+0x84>
 800bb1a:	69a2      	ldr	r2, [r4, #24]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	dc06      	bgt.n	800bb2e <_puts_r+0x8e>
 800bb20:	290a      	cmp	r1, #10
 800bb22:	d004      	beq.n	800bb2e <_puts_r+0x8e>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	6022      	str	r2, [r4, #0]
 800bb2a:	7019      	strb	r1, [r3, #0]
 800bb2c:	e7cf      	b.n	800bace <_puts_r+0x2e>
 800bb2e:	4622      	mov	r2, r4
 800bb30:	4628      	mov	r0, r5
 800bb32:	f000 f92b 	bl	800bd8c <__swbuf_r>
 800bb36:	3001      	adds	r0, #1
 800bb38:	d1c9      	bne.n	800bace <_puts_r+0x2e>
 800bb3a:	e7df      	b.n	800bafc <_puts_r+0x5c>
 800bb3c:	6823      	ldr	r3, [r4, #0]
 800bb3e:	250a      	movs	r5, #10
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	6022      	str	r2, [r4, #0]
 800bb44:	701d      	strb	r5, [r3, #0]
 800bb46:	e7db      	b.n	800bb00 <_puts_r+0x60>

0800bb48 <puts>:
 800bb48:	4b02      	ldr	r3, [pc, #8]	; (800bb54 <puts+0xc>)
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	6818      	ldr	r0, [r3, #0]
 800bb4e:	f7ff bfa7 	b.w	800baa0 <_puts_r>
 800bb52:	bf00      	nop
 800bb54:	2000006c 	.word	0x2000006c

0800bb58 <setbuf>:
 800bb58:	fab1 f281 	clz	r2, r1
 800bb5c:	0952      	lsrs	r2, r2, #5
 800bb5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb62:	0052      	lsls	r2, r2, #1
 800bb64:	f000 b800 	b.w	800bb68 <setvbuf>

0800bb68 <setvbuf>:
 800bb68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	461d      	mov	r5, r3
 800bb6e:	4b54      	ldr	r3, [pc, #336]	; (800bcc0 <setvbuf+0x158>)
 800bb70:	681f      	ldr	r7, [r3, #0]
 800bb72:	4604      	mov	r4, r0
 800bb74:	460e      	mov	r6, r1
 800bb76:	4690      	mov	r8, r2
 800bb78:	b127      	cbz	r7, 800bb84 <setvbuf+0x1c>
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	b913      	cbnz	r3, 800bb84 <setvbuf+0x1c>
 800bb7e:	4638      	mov	r0, r7
 800bb80:	f7ff ff46 	bl	800ba10 <__sinit>
 800bb84:	f1b8 0f02 	cmp.w	r8, #2
 800bb88:	d006      	beq.n	800bb98 <setvbuf+0x30>
 800bb8a:	f1b8 0f01 	cmp.w	r8, #1
 800bb8e:	f200 8094 	bhi.w	800bcba <setvbuf+0x152>
 800bb92:	2d00      	cmp	r5, #0
 800bb94:	f2c0 8091 	blt.w	800bcba <setvbuf+0x152>
 800bb98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb9a:	07da      	lsls	r2, r3, #31
 800bb9c:	d405      	bmi.n	800bbaa <setvbuf+0x42>
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	059b      	lsls	r3, r3, #22
 800bba2:	d402      	bmi.n	800bbaa <setvbuf+0x42>
 800bba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bba6:	f000 fa13 	bl	800bfd0 <__retarget_lock_acquire_recursive>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4638      	mov	r0, r7
 800bbae:	f001 ff77 	bl	800daa0 <_fflush_r>
 800bbb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbb4:	b141      	cbz	r1, 800bbc8 <setvbuf+0x60>
 800bbb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	d002      	beq.n	800bbc4 <setvbuf+0x5c>
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	f001 f884 	bl	800cccc <_free_r>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	6363      	str	r3, [r4, #52]	; 0x34
 800bbc8:	2300      	movs	r3, #0
 800bbca:	61a3      	str	r3, [r4, #24]
 800bbcc:	6063      	str	r3, [r4, #4]
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	0618      	lsls	r0, r3, #24
 800bbd2:	d503      	bpl.n	800bbdc <setvbuf+0x74>
 800bbd4:	6921      	ldr	r1, [r4, #16]
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f001 f878 	bl	800cccc <_free_r>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800bbe2:	f023 0303 	bic.w	r3, r3, #3
 800bbe6:	f1b8 0f02 	cmp.w	r8, #2
 800bbea:	81a3      	strh	r3, [r4, #12]
 800bbec:	d05f      	beq.n	800bcae <setvbuf+0x146>
 800bbee:	ab01      	add	r3, sp, #4
 800bbf0:	466a      	mov	r2, sp
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f001 ff7b 	bl	800daf0 <__swhatbuf_r>
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	4318      	orrs	r0, r3
 800bbfe:	81a0      	strh	r0, [r4, #12]
 800bc00:	bb2d      	cbnz	r5, 800bc4e <setvbuf+0xe6>
 800bc02:	9d00      	ldr	r5, [sp, #0]
 800bc04:	4628      	mov	r0, r5
 800bc06:	f7ff f96f 	bl	800aee8 <malloc>
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d150      	bne.n	800bcb2 <setvbuf+0x14a>
 800bc10:	f8dd 9000 	ldr.w	r9, [sp]
 800bc14:	45a9      	cmp	r9, r5
 800bc16:	d13e      	bne.n	800bc96 <setvbuf+0x12e>
 800bc18:	f04f 35ff 	mov.w	r5, #4294967295
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	60a2      	str	r2, [r4, #8]
 800bc20:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800bc24:	6022      	str	r2, [r4, #0]
 800bc26:	6122      	str	r2, [r4, #16]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc2e:	6162      	str	r2, [r4, #20]
 800bc30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc32:	f043 0302 	orr.w	r3, r3, #2
 800bc36:	07d1      	lsls	r1, r2, #31
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	d404      	bmi.n	800bc46 <setvbuf+0xde>
 800bc3c:	059b      	lsls	r3, r3, #22
 800bc3e:	d402      	bmi.n	800bc46 <setvbuf+0xde>
 800bc40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc42:	f000 f9c6 	bl	800bfd2 <__retarget_lock_release_recursive>
 800bc46:	4628      	mov	r0, r5
 800bc48:	b003      	add	sp, #12
 800bc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc4e:	2e00      	cmp	r6, #0
 800bc50:	d0d8      	beq.n	800bc04 <setvbuf+0x9c>
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	b913      	cbnz	r3, 800bc5c <setvbuf+0xf4>
 800bc56:	4638      	mov	r0, r7
 800bc58:	f7ff feda 	bl	800ba10 <__sinit>
 800bc5c:	f1b8 0f01 	cmp.w	r8, #1
 800bc60:	bf08      	it	eq
 800bc62:	89a3      	ldrheq	r3, [r4, #12]
 800bc64:	6026      	str	r6, [r4, #0]
 800bc66:	bf04      	itt	eq
 800bc68:	f043 0301 	orreq.w	r3, r3, #1
 800bc6c:	81a3      	strheq	r3, [r4, #12]
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f013 0208 	ands.w	r2, r3, #8
 800bc74:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800bc78:	d01d      	beq.n	800bcb6 <setvbuf+0x14e>
 800bc7a:	07da      	lsls	r2, r3, #31
 800bc7c:	bf41      	itttt	mi
 800bc7e:	2200      	movmi	r2, #0
 800bc80:	426d      	negmi	r5, r5
 800bc82:	60a2      	strmi	r2, [r4, #8]
 800bc84:	61a5      	strmi	r5, [r4, #24]
 800bc86:	bf58      	it	pl
 800bc88:	60a5      	strpl	r5, [r4, #8]
 800bc8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800bc8c:	f015 0501 	ands.w	r5, r5, #1
 800bc90:	d0d4      	beq.n	800bc3c <setvbuf+0xd4>
 800bc92:	2500      	movs	r5, #0
 800bc94:	e7d7      	b.n	800bc46 <setvbuf+0xde>
 800bc96:	4648      	mov	r0, r9
 800bc98:	f7ff f926 	bl	800aee8 <malloc>
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d0ba      	beq.n	800bc18 <setvbuf+0xb0>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca8:	81a3      	strh	r3, [r4, #12]
 800bcaa:	464d      	mov	r5, r9
 800bcac:	e7d1      	b.n	800bc52 <setvbuf+0xea>
 800bcae:	2500      	movs	r5, #0
 800bcb0:	e7b4      	b.n	800bc1c <setvbuf+0xb4>
 800bcb2:	46a9      	mov	r9, r5
 800bcb4:	e7f5      	b.n	800bca2 <setvbuf+0x13a>
 800bcb6:	60a2      	str	r2, [r4, #8]
 800bcb8:	e7e7      	b.n	800bc8a <setvbuf+0x122>
 800bcba:	f04f 35ff 	mov.w	r5, #4294967295
 800bcbe:	e7c2      	b.n	800bc46 <setvbuf+0xde>
 800bcc0:	2000006c 	.word	0x2000006c

0800bcc4 <__sread>:
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bccc:	f000 f922 	bl	800bf14 <_read_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	bfab      	itete	ge
 800bcd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcd6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcd8:	181b      	addge	r3, r3, r0
 800bcda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcde:	bfac      	ite	ge
 800bce0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bce2:	81a3      	strhlt	r3, [r4, #12]
 800bce4:	bd10      	pop	{r4, pc}

0800bce6 <__swrite>:
 800bce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcea:	461f      	mov	r7, r3
 800bcec:	898b      	ldrh	r3, [r1, #12]
 800bcee:	05db      	lsls	r3, r3, #23
 800bcf0:	4605      	mov	r5, r0
 800bcf2:	460c      	mov	r4, r1
 800bcf4:	4616      	mov	r6, r2
 800bcf6:	d505      	bpl.n	800bd04 <__swrite+0x1e>
 800bcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f000 f8f6 	bl	800bef0 <_lseek_r>
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd0e:	81a3      	strh	r3, [r4, #12]
 800bd10:	4632      	mov	r2, r6
 800bd12:	463b      	mov	r3, r7
 800bd14:	4628      	mov	r0, r5
 800bd16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1a:	f000 b91d 	b.w	800bf58 <_write_r>

0800bd1e <__sseek>:
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	460c      	mov	r4, r1
 800bd22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd26:	f000 f8e3 	bl	800bef0 <_lseek_r>
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	bf15      	itete	ne
 800bd30:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd3a:	81a3      	strheq	r3, [r4, #12]
 800bd3c:	bf18      	it	ne
 800bd3e:	81a3      	strhne	r3, [r4, #12]
 800bd40:	bd10      	pop	{r4, pc}

0800bd42 <__sclose>:
 800bd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd46:	f000 b8c3 	b.w	800bed0 <_close_r>
	...

0800bd4c <_vsiprintf_r>:
 800bd4c:	b500      	push	{lr}
 800bd4e:	b09b      	sub	sp, #108	; 0x6c
 800bd50:	9100      	str	r1, [sp, #0]
 800bd52:	9104      	str	r1, [sp, #16]
 800bd54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd58:	9105      	str	r1, [sp, #20]
 800bd5a:	9102      	str	r1, [sp, #8]
 800bd5c:	4905      	ldr	r1, [pc, #20]	; (800bd74 <_vsiprintf_r+0x28>)
 800bd5e:	9103      	str	r1, [sp, #12]
 800bd60:	4669      	mov	r1, sp
 800bd62:	f001 fbd5 	bl	800d510 <_svfiprintf_r>
 800bd66:	9b00      	ldr	r3, [sp, #0]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	b01b      	add	sp, #108	; 0x6c
 800bd6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd72:	bf00      	nop
 800bd74:	ffff0208 	.word	0xffff0208

0800bd78 <vsiprintf>:
 800bd78:	4613      	mov	r3, r2
 800bd7a:	460a      	mov	r2, r1
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	4802      	ldr	r0, [pc, #8]	; (800bd88 <vsiprintf+0x10>)
 800bd80:	6800      	ldr	r0, [r0, #0]
 800bd82:	f7ff bfe3 	b.w	800bd4c <_vsiprintf_r>
 800bd86:	bf00      	nop
 800bd88:	2000006c 	.word	0x2000006c

0800bd8c <__swbuf_r>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	460e      	mov	r6, r1
 800bd90:	4614      	mov	r4, r2
 800bd92:	4605      	mov	r5, r0
 800bd94:	b118      	cbz	r0, 800bd9e <__swbuf_r+0x12>
 800bd96:	6a03      	ldr	r3, [r0, #32]
 800bd98:	b90b      	cbnz	r3, 800bd9e <__swbuf_r+0x12>
 800bd9a:	f7ff fe39 	bl	800ba10 <__sinit>
 800bd9e:	69a3      	ldr	r3, [r4, #24]
 800bda0:	60a3      	str	r3, [r4, #8]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	071a      	lsls	r2, r3, #28
 800bda6:	d525      	bpl.n	800bdf4 <__swbuf_r+0x68>
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	b31b      	cbz	r3, 800bdf4 <__swbuf_r+0x68>
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	6922      	ldr	r2, [r4, #16]
 800bdb0:	1a98      	subs	r0, r3, r2
 800bdb2:	6963      	ldr	r3, [r4, #20]
 800bdb4:	b2f6      	uxtb	r6, r6
 800bdb6:	4283      	cmp	r3, r0
 800bdb8:	4637      	mov	r7, r6
 800bdba:	dc04      	bgt.n	800bdc6 <__swbuf_r+0x3a>
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f001 fe6e 	bl	800daa0 <_fflush_r>
 800bdc4:	b9e0      	cbnz	r0, 800be00 <__swbuf_r+0x74>
 800bdc6:	68a3      	ldr	r3, [r4, #8]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	60a3      	str	r3, [r4, #8]
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	6022      	str	r2, [r4, #0]
 800bdd2:	701e      	strb	r6, [r3, #0]
 800bdd4:	6962      	ldr	r2, [r4, #20]
 800bdd6:	1c43      	adds	r3, r0, #1
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d004      	beq.n	800bde6 <__swbuf_r+0x5a>
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	07db      	lsls	r3, r3, #31
 800bde0:	d506      	bpl.n	800bdf0 <__swbuf_r+0x64>
 800bde2:	2e0a      	cmp	r6, #10
 800bde4:	d104      	bne.n	800bdf0 <__swbuf_r+0x64>
 800bde6:	4621      	mov	r1, r4
 800bde8:	4628      	mov	r0, r5
 800bdea:	f001 fe59 	bl	800daa0 <_fflush_r>
 800bdee:	b938      	cbnz	r0, 800be00 <__swbuf_r+0x74>
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f000 f806 	bl	800be08 <__swsetup_r>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d0d5      	beq.n	800bdac <__swbuf_r+0x20>
 800be00:	f04f 37ff 	mov.w	r7, #4294967295
 800be04:	e7f4      	b.n	800bdf0 <__swbuf_r+0x64>
	...

0800be08 <__swsetup_r>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	4b2a      	ldr	r3, [pc, #168]	; (800beb4 <__swsetup_r+0xac>)
 800be0c:	4605      	mov	r5, r0
 800be0e:	6818      	ldr	r0, [r3, #0]
 800be10:	460c      	mov	r4, r1
 800be12:	b118      	cbz	r0, 800be1c <__swsetup_r+0x14>
 800be14:	6a03      	ldr	r3, [r0, #32]
 800be16:	b90b      	cbnz	r3, 800be1c <__swsetup_r+0x14>
 800be18:	f7ff fdfa 	bl	800ba10 <__sinit>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be22:	0718      	lsls	r0, r3, #28
 800be24:	d422      	bmi.n	800be6c <__swsetup_r+0x64>
 800be26:	06d9      	lsls	r1, r3, #27
 800be28:	d407      	bmi.n	800be3a <__swsetup_r+0x32>
 800be2a:	2309      	movs	r3, #9
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	e034      	b.n	800bea4 <__swsetup_r+0x9c>
 800be3a:	0758      	lsls	r0, r3, #29
 800be3c:	d512      	bpl.n	800be64 <__swsetup_r+0x5c>
 800be3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be40:	b141      	cbz	r1, 800be54 <__swsetup_r+0x4c>
 800be42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be46:	4299      	cmp	r1, r3
 800be48:	d002      	beq.n	800be50 <__swsetup_r+0x48>
 800be4a:	4628      	mov	r0, r5
 800be4c:	f000 ff3e 	bl	800cccc <_free_r>
 800be50:	2300      	movs	r3, #0
 800be52:	6363      	str	r3, [r4, #52]	; 0x34
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be5a:	81a3      	strh	r3, [r4, #12]
 800be5c:	2300      	movs	r3, #0
 800be5e:	6063      	str	r3, [r4, #4]
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	6023      	str	r3, [r4, #0]
 800be64:	89a3      	ldrh	r3, [r4, #12]
 800be66:	f043 0308 	orr.w	r3, r3, #8
 800be6a:	81a3      	strh	r3, [r4, #12]
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	b94b      	cbnz	r3, 800be84 <__swsetup_r+0x7c>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be7a:	d003      	beq.n	800be84 <__swsetup_r+0x7c>
 800be7c:	4621      	mov	r1, r4
 800be7e:	4628      	mov	r0, r5
 800be80:	f001 fe5c 	bl	800db3c <__smakebuf_r>
 800be84:	89a0      	ldrh	r0, [r4, #12]
 800be86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be8a:	f010 0301 	ands.w	r3, r0, #1
 800be8e:	d00a      	beq.n	800bea6 <__swsetup_r+0x9e>
 800be90:	2300      	movs	r3, #0
 800be92:	60a3      	str	r3, [r4, #8]
 800be94:	6963      	ldr	r3, [r4, #20]
 800be96:	425b      	negs	r3, r3
 800be98:	61a3      	str	r3, [r4, #24]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	b943      	cbnz	r3, 800beb0 <__swsetup_r+0xa8>
 800be9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bea2:	d1c4      	bne.n	800be2e <__swsetup_r+0x26>
 800bea4:	bd38      	pop	{r3, r4, r5, pc}
 800bea6:	0781      	lsls	r1, r0, #30
 800bea8:	bf58      	it	pl
 800beaa:	6963      	ldrpl	r3, [r4, #20]
 800beac:	60a3      	str	r3, [r4, #8]
 800beae:	e7f4      	b.n	800be9a <__swsetup_r+0x92>
 800beb0:	2000      	movs	r0, #0
 800beb2:	e7f7      	b.n	800bea4 <__swsetup_r+0x9c>
 800beb4:	2000006c 	.word	0x2000006c

0800beb8 <memset>:
 800beb8:	4402      	add	r2, r0
 800beba:	4603      	mov	r3, r0
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d100      	bne.n	800bec2 <memset+0xa>
 800bec0:	4770      	bx	lr
 800bec2:	f803 1b01 	strb.w	r1, [r3], #1
 800bec6:	e7f9      	b.n	800bebc <memset+0x4>

0800bec8 <_localeconv_r>:
 800bec8:	4800      	ldr	r0, [pc, #0]	; (800becc <_localeconv_r+0x4>)
 800beca:	4770      	bx	lr
 800becc:	20000160 	.word	0x20000160

0800bed0 <_close_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d06      	ldr	r5, [pc, #24]	; (800beec <_close_r+0x1c>)
 800bed4:	2300      	movs	r3, #0
 800bed6:	4604      	mov	r4, r0
 800bed8:	4608      	mov	r0, r1
 800beda:	602b      	str	r3, [r5, #0]
 800bedc:	f7f9 fc7e 	bl	80057dc <_close>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_close_r+0x1a>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_close_r+0x1a>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	20001108 	.word	0x20001108

0800bef0 <_lseek_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d07      	ldr	r5, [pc, #28]	; (800bf10 <_lseek_r+0x20>)
 800bef4:	4604      	mov	r4, r0
 800bef6:	4608      	mov	r0, r1
 800bef8:	4611      	mov	r1, r2
 800befa:	2200      	movs	r2, #0
 800befc:	602a      	str	r2, [r5, #0]
 800befe:	461a      	mov	r2, r3
 800bf00:	f7f9 fc78 	bl	80057f4 <_lseek>
 800bf04:	1c43      	adds	r3, r0, #1
 800bf06:	d102      	bne.n	800bf0e <_lseek_r+0x1e>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	b103      	cbz	r3, 800bf0e <_lseek_r+0x1e>
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	20001108 	.word	0x20001108

0800bf14 <_read_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4d07      	ldr	r5, [pc, #28]	; (800bf34 <_read_r+0x20>)
 800bf18:	4604      	mov	r4, r0
 800bf1a:	4608      	mov	r0, r1
 800bf1c:	4611      	mov	r1, r2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	602a      	str	r2, [r5, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	f7f9 fc3e 	bl	80057a4 <_read>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_read_r+0x1e>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_read_r+0x1e>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	20001108 	.word	0x20001108

0800bf38 <_sbrk_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d06      	ldr	r5, [pc, #24]	; (800bf54 <_sbrk_r+0x1c>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	602b      	str	r3, [r5, #0]
 800bf44:	f003 fb74 	bl	800f630 <_sbrk>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_sbrk_r+0x1a>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_sbrk_r+0x1a>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	20001108 	.word	0x20001108

0800bf58 <_write_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	4d07      	ldr	r5, [pc, #28]	; (800bf78 <_write_r+0x20>)
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	4608      	mov	r0, r1
 800bf60:	4611      	mov	r1, r2
 800bf62:	2200      	movs	r2, #0
 800bf64:	602a      	str	r2, [r5, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	f7f9 fc2a 	bl	80057c0 <_write>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d102      	bne.n	800bf76 <_write_r+0x1e>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	b103      	cbz	r3, 800bf76 <_write_r+0x1e>
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	20001108 	.word	0x20001108

0800bf7c <__errno>:
 800bf7c:	4b01      	ldr	r3, [pc, #4]	; (800bf84 <__errno+0x8>)
 800bf7e:	6818      	ldr	r0, [r3, #0]
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	2000006c 	.word	0x2000006c

0800bf88 <__libc_init_array>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	4d0d      	ldr	r5, [pc, #52]	; (800bfc0 <__libc_init_array+0x38>)
 800bf8c:	4c0d      	ldr	r4, [pc, #52]	; (800bfc4 <__libc_init_array+0x3c>)
 800bf8e:	1b64      	subs	r4, r4, r5
 800bf90:	10a4      	asrs	r4, r4, #2
 800bf92:	2600      	movs	r6, #0
 800bf94:	42a6      	cmp	r6, r4
 800bf96:	d109      	bne.n	800bfac <__libc_init_array+0x24>
 800bf98:	4d0b      	ldr	r5, [pc, #44]	; (800bfc8 <__libc_init_array+0x40>)
 800bf9a:	4c0c      	ldr	r4, [pc, #48]	; (800bfcc <__libc_init_array+0x44>)
 800bf9c:	f003 fb56 	bl	800f64c <_init>
 800bfa0:	1b64      	subs	r4, r4, r5
 800bfa2:	10a4      	asrs	r4, r4, #2
 800bfa4:	2600      	movs	r6, #0
 800bfa6:	42a6      	cmp	r6, r4
 800bfa8:	d105      	bne.n	800bfb6 <__libc_init_array+0x2e>
 800bfaa:	bd70      	pop	{r4, r5, r6, pc}
 800bfac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb0:	4798      	blx	r3
 800bfb2:	3601      	adds	r6, #1
 800bfb4:	e7ee      	b.n	800bf94 <__libc_init_array+0xc>
 800bfb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfba:	4798      	blx	r3
 800bfbc:	3601      	adds	r6, #1
 800bfbe:	e7f2      	b.n	800bfa6 <__libc_init_array+0x1e>
 800bfc0:	08010320 	.word	0x08010320
 800bfc4:	08010320 	.word	0x08010320
 800bfc8:	08010320 	.word	0x08010320
 800bfcc:	08010324 	.word	0x08010324

0800bfd0 <__retarget_lock_acquire_recursive>:
 800bfd0:	4770      	bx	lr

0800bfd2 <__retarget_lock_release_recursive>:
 800bfd2:	4770      	bx	lr

0800bfd4 <quorem>:
 800bfd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	6903      	ldr	r3, [r0, #16]
 800bfda:	690c      	ldr	r4, [r1, #16]
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	4607      	mov	r7, r0
 800bfe0:	db7e      	blt.n	800c0e0 <quorem+0x10c>
 800bfe2:	3c01      	subs	r4, #1
 800bfe4:	f101 0814 	add.w	r8, r1, #20
 800bfe8:	f100 0514 	add.w	r5, r0, #20
 800bfec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bffa:	3301      	adds	r3, #1
 800bffc:	429a      	cmp	r2, r3
 800bffe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c002:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c006:	fbb2 f6f3 	udiv	r6, r2, r3
 800c00a:	d331      	bcc.n	800c070 <quorem+0x9c>
 800c00c:	f04f 0e00 	mov.w	lr, #0
 800c010:	4640      	mov	r0, r8
 800c012:	46ac      	mov	ip, r5
 800c014:	46f2      	mov	sl, lr
 800c016:	f850 2b04 	ldr.w	r2, [r0], #4
 800c01a:	b293      	uxth	r3, r2
 800c01c:	fb06 e303 	mla	r3, r6, r3, lr
 800c020:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c024:	0c1a      	lsrs	r2, r3, #16
 800c026:	b29b      	uxth	r3, r3
 800c028:	ebaa 0303 	sub.w	r3, sl, r3
 800c02c:	f8dc a000 	ldr.w	sl, [ip]
 800c030:	fa13 f38a 	uxtah	r3, r3, sl
 800c034:	fb06 220e 	mla	r2, r6, lr, r2
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	9b00      	ldr	r3, [sp, #0]
 800c03c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c040:	b292      	uxth	r2, r2
 800c042:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c04a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c04e:	4581      	cmp	r9, r0
 800c050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c054:	f84c 3b04 	str.w	r3, [ip], #4
 800c058:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c05c:	d2db      	bcs.n	800c016 <quorem+0x42>
 800c05e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c062:	b92b      	cbnz	r3, 800c070 <quorem+0x9c>
 800c064:	9b01      	ldr	r3, [sp, #4]
 800c066:	3b04      	subs	r3, #4
 800c068:	429d      	cmp	r5, r3
 800c06a:	461a      	mov	r2, r3
 800c06c:	d32c      	bcc.n	800c0c8 <quorem+0xf4>
 800c06e:	613c      	str	r4, [r7, #16]
 800c070:	4638      	mov	r0, r7
 800c072:	f001 f8f3 	bl	800d25c <__mcmp>
 800c076:	2800      	cmp	r0, #0
 800c078:	db22      	blt.n	800c0c0 <quorem+0xec>
 800c07a:	3601      	adds	r6, #1
 800c07c:	4629      	mov	r1, r5
 800c07e:	2000      	movs	r0, #0
 800c080:	f858 2b04 	ldr.w	r2, [r8], #4
 800c084:	f8d1 c000 	ldr.w	ip, [r1]
 800c088:	b293      	uxth	r3, r2
 800c08a:	1ac3      	subs	r3, r0, r3
 800c08c:	0c12      	lsrs	r2, r2, #16
 800c08e:	fa13 f38c 	uxtah	r3, r3, ip
 800c092:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c096:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a0:	45c1      	cmp	r9, r8
 800c0a2:	f841 3b04 	str.w	r3, [r1], #4
 800c0a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0aa:	d2e9      	bcs.n	800c080 <quorem+0xac>
 800c0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0b4:	b922      	cbnz	r2, 800c0c0 <quorem+0xec>
 800c0b6:	3b04      	subs	r3, #4
 800c0b8:	429d      	cmp	r5, r3
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	d30a      	bcc.n	800c0d4 <quorem+0x100>
 800c0be:	613c      	str	r4, [r7, #16]
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	b003      	add	sp, #12
 800c0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c8:	6812      	ldr	r2, [r2, #0]
 800c0ca:	3b04      	subs	r3, #4
 800c0cc:	2a00      	cmp	r2, #0
 800c0ce:	d1ce      	bne.n	800c06e <quorem+0x9a>
 800c0d0:	3c01      	subs	r4, #1
 800c0d2:	e7c9      	b.n	800c068 <quorem+0x94>
 800c0d4:	6812      	ldr	r2, [r2, #0]
 800c0d6:	3b04      	subs	r3, #4
 800c0d8:	2a00      	cmp	r2, #0
 800c0da:	d1f0      	bne.n	800c0be <quorem+0xea>
 800c0dc:	3c01      	subs	r4, #1
 800c0de:	e7eb      	b.n	800c0b8 <quorem+0xe4>
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	e7ee      	b.n	800c0c2 <quorem+0xee>
 800c0e4:	0000      	movs	r0, r0
	...

0800c0e8 <_dtoa_r>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	ed2d 8b04 	vpush	{d8-d9}
 800c0f0:	69c5      	ldr	r5, [r0, #28]
 800c0f2:	b093      	sub	sp, #76	; 0x4c
 800c0f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c0f8:	ec57 6b10 	vmov	r6, r7, d0
 800c0fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c100:	9107      	str	r1, [sp, #28]
 800c102:	4604      	mov	r4, r0
 800c104:	920a      	str	r2, [sp, #40]	; 0x28
 800c106:	930d      	str	r3, [sp, #52]	; 0x34
 800c108:	b975      	cbnz	r5, 800c128 <_dtoa_r+0x40>
 800c10a:	2010      	movs	r0, #16
 800c10c:	f7fe feec 	bl	800aee8 <malloc>
 800c110:	4602      	mov	r2, r0
 800c112:	61e0      	str	r0, [r4, #28]
 800c114:	b920      	cbnz	r0, 800c120 <_dtoa_r+0x38>
 800c116:	4bae      	ldr	r3, [pc, #696]	; (800c3d0 <_dtoa_r+0x2e8>)
 800c118:	21ef      	movs	r1, #239	; 0xef
 800c11a:	48ae      	ldr	r0, [pc, #696]	; (800c3d4 <_dtoa_r+0x2ec>)
 800c11c:	f001 fd94 	bl	800dc48 <__assert_func>
 800c120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c124:	6005      	str	r5, [r0, #0]
 800c126:	60c5      	str	r5, [r0, #12]
 800c128:	69e3      	ldr	r3, [r4, #28]
 800c12a:	6819      	ldr	r1, [r3, #0]
 800c12c:	b151      	cbz	r1, 800c144 <_dtoa_r+0x5c>
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	604a      	str	r2, [r1, #4]
 800c132:	2301      	movs	r3, #1
 800c134:	4093      	lsls	r3, r2
 800c136:	608b      	str	r3, [r1, #8]
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fe53 	bl	800cde4 <_Bfree>
 800c13e:	69e3      	ldr	r3, [r4, #28]
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	1e3b      	subs	r3, r7, #0
 800c146:	bfbb      	ittet	lt
 800c148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c14c:	9303      	strlt	r3, [sp, #12]
 800c14e:	2300      	movge	r3, #0
 800c150:	2201      	movlt	r2, #1
 800c152:	bfac      	ite	ge
 800c154:	f8c8 3000 	strge.w	r3, [r8]
 800c158:	f8c8 2000 	strlt.w	r2, [r8]
 800c15c:	4b9e      	ldr	r3, [pc, #632]	; (800c3d8 <_dtoa_r+0x2f0>)
 800c15e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c162:	ea33 0308 	bics.w	r3, r3, r8
 800c166:	d11b      	bne.n	800c1a0 <_dtoa_r+0xb8>
 800c168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c16a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c16e:	6013      	str	r3, [r2, #0]
 800c170:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c174:	4333      	orrs	r3, r6
 800c176:	f000 8593 	beq.w	800cca0 <_dtoa_r+0xbb8>
 800c17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c17c:	b963      	cbnz	r3, 800c198 <_dtoa_r+0xb0>
 800c17e:	4b97      	ldr	r3, [pc, #604]	; (800c3dc <_dtoa_r+0x2f4>)
 800c180:	e027      	b.n	800c1d2 <_dtoa_r+0xea>
 800c182:	4b97      	ldr	r3, [pc, #604]	; (800c3e0 <_dtoa_r+0x2f8>)
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	3308      	adds	r3, #8
 800c188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	9800      	ldr	r0, [sp, #0]
 800c18e:	b013      	add	sp, #76	; 0x4c
 800c190:	ecbd 8b04 	vpop	{d8-d9}
 800c194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c198:	4b90      	ldr	r3, [pc, #576]	; (800c3dc <_dtoa_r+0x2f4>)
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	3303      	adds	r3, #3
 800c19e:	e7f3      	b.n	800c188 <_dtoa_r+0xa0>
 800c1a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	ec51 0b17 	vmov	r0, r1, d7
 800c1aa:	eeb0 8a47 	vmov.f32	s16, s14
 800c1ae:	eef0 8a67 	vmov.f32	s17, s15
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f7f4 fcb0 	bl	8000b18 <__aeabi_dcmpeq>
 800c1b8:	4681      	mov	r9, r0
 800c1ba:	b160      	cbz	r0, 800c1d6 <_dtoa_r+0xee>
 800c1bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1be:	2301      	movs	r3, #1
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 8568 	beq.w	800cc9a <_dtoa_r+0xbb2>
 800c1ca:	4b86      	ldr	r3, [pc, #536]	; (800c3e4 <_dtoa_r+0x2fc>)
 800c1cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1ce:	6013      	str	r3, [r2, #0]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	e7da      	b.n	800c18c <_dtoa_r+0xa4>
 800c1d6:	aa10      	add	r2, sp, #64	; 0x40
 800c1d8:	a911      	add	r1, sp, #68	; 0x44
 800c1da:	4620      	mov	r0, r4
 800c1dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c1e0:	eef0 0a68 	vmov.f32	s1, s17
 800c1e4:	f001 f8e0 	bl	800d3a8 <__d2b>
 800c1e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c1ec:	4682      	mov	sl, r0
 800c1ee:	2d00      	cmp	r5, #0
 800c1f0:	d07f      	beq.n	800c2f2 <_dtoa_r+0x20a>
 800c1f2:	ee18 3a90 	vmov	r3, s17
 800c1f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c1fe:	ec51 0b18 	vmov	r0, r1, d8
 800c202:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c20a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c20e:	4619      	mov	r1, r3
 800c210:	2200      	movs	r2, #0
 800c212:	4b75      	ldr	r3, [pc, #468]	; (800c3e8 <_dtoa_r+0x300>)
 800c214:	f7f4 f860 	bl	80002d8 <__aeabi_dsub>
 800c218:	a367      	add	r3, pc, #412	; (adr r3, 800c3b8 <_dtoa_r+0x2d0>)
 800c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21e:	f7f4 fa13 	bl	8000648 <__aeabi_dmul>
 800c222:	a367      	add	r3, pc, #412	; (adr r3, 800c3c0 <_dtoa_r+0x2d8>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	f7f4 f858 	bl	80002dc <__adddf3>
 800c22c:	4606      	mov	r6, r0
 800c22e:	4628      	mov	r0, r5
 800c230:	460f      	mov	r7, r1
 800c232:	f7f4 f99f 	bl	8000574 <__aeabi_i2d>
 800c236:	a364      	add	r3, pc, #400	; (adr r3, 800c3c8 <_dtoa_r+0x2e0>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	f7f4 fa04 	bl	8000648 <__aeabi_dmul>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4630      	mov	r0, r6
 800c246:	4639      	mov	r1, r7
 800c248:	f7f4 f848 	bl	80002dc <__adddf3>
 800c24c:	4606      	mov	r6, r0
 800c24e:	460f      	mov	r7, r1
 800c250:	f7f4 fcaa 	bl	8000ba8 <__aeabi_d2iz>
 800c254:	2200      	movs	r2, #0
 800c256:	4683      	mov	fp, r0
 800c258:	2300      	movs	r3, #0
 800c25a:	4630      	mov	r0, r6
 800c25c:	4639      	mov	r1, r7
 800c25e:	f7f4 fc65 	bl	8000b2c <__aeabi_dcmplt>
 800c262:	b148      	cbz	r0, 800c278 <_dtoa_r+0x190>
 800c264:	4658      	mov	r0, fp
 800c266:	f7f4 f985 	bl	8000574 <__aeabi_i2d>
 800c26a:	4632      	mov	r2, r6
 800c26c:	463b      	mov	r3, r7
 800c26e:	f7f4 fc53 	bl	8000b18 <__aeabi_dcmpeq>
 800c272:	b908      	cbnz	r0, 800c278 <_dtoa_r+0x190>
 800c274:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c278:	f1bb 0f16 	cmp.w	fp, #22
 800c27c:	d857      	bhi.n	800c32e <_dtoa_r+0x246>
 800c27e:	4b5b      	ldr	r3, [pc, #364]	; (800c3ec <_dtoa_r+0x304>)
 800c280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	ec51 0b18 	vmov	r0, r1, d8
 800c28c:	f7f4 fc4e 	bl	8000b2c <__aeabi_dcmplt>
 800c290:	2800      	cmp	r0, #0
 800c292:	d04e      	beq.n	800c332 <_dtoa_r+0x24a>
 800c294:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c298:	2300      	movs	r3, #0
 800c29a:	930c      	str	r3, [sp, #48]	; 0x30
 800c29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c29e:	1b5b      	subs	r3, r3, r5
 800c2a0:	1e5a      	subs	r2, r3, #1
 800c2a2:	bf45      	ittet	mi
 800c2a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2a8:	9305      	strmi	r3, [sp, #20]
 800c2aa:	2300      	movpl	r3, #0
 800c2ac:	2300      	movmi	r3, #0
 800c2ae:	9206      	str	r2, [sp, #24]
 800c2b0:	bf54      	ite	pl
 800c2b2:	9305      	strpl	r3, [sp, #20]
 800c2b4:	9306      	strmi	r3, [sp, #24]
 800c2b6:	f1bb 0f00 	cmp.w	fp, #0
 800c2ba:	db3c      	blt.n	800c336 <_dtoa_r+0x24e>
 800c2bc:	9b06      	ldr	r3, [sp, #24]
 800c2be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c2c2:	445b      	add	r3, fp
 800c2c4:	9306      	str	r3, [sp, #24]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9308      	str	r3, [sp, #32]
 800c2ca:	9b07      	ldr	r3, [sp, #28]
 800c2cc:	2b09      	cmp	r3, #9
 800c2ce:	d868      	bhi.n	800c3a2 <_dtoa_r+0x2ba>
 800c2d0:	2b05      	cmp	r3, #5
 800c2d2:	bfc4      	itt	gt
 800c2d4:	3b04      	subgt	r3, #4
 800c2d6:	9307      	strgt	r3, [sp, #28]
 800c2d8:	9b07      	ldr	r3, [sp, #28]
 800c2da:	f1a3 0302 	sub.w	r3, r3, #2
 800c2de:	bfcc      	ite	gt
 800c2e0:	2500      	movgt	r5, #0
 800c2e2:	2501      	movle	r5, #1
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	f200 8085 	bhi.w	800c3f4 <_dtoa_r+0x30c>
 800c2ea:	e8df f003 	tbb	[pc, r3]
 800c2ee:	3b2e      	.short	0x3b2e
 800c2f0:	5839      	.short	0x5839
 800c2f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c2f6:	441d      	add	r5, r3
 800c2f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2fc:	2b20      	cmp	r3, #32
 800c2fe:	bfc1      	itttt	gt
 800c300:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c304:	fa08 f803 	lslgt.w	r8, r8, r3
 800c308:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c30c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c310:	bfd6      	itet	le
 800c312:	f1c3 0320 	rsble	r3, r3, #32
 800c316:	ea48 0003 	orrgt.w	r0, r8, r3
 800c31a:	fa06 f003 	lslle.w	r0, r6, r3
 800c31e:	f7f4 f919 	bl	8000554 <__aeabi_ui2d>
 800c322:	2201      	movs	r2, #1
 800c324:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c328:	3d01      	subs	r5, #1
 800c32a:	920e      	str	r2, [sp, #56]	; 0x38
 800c32c:	e76f      	b.n	800c20e <_dtoa_r+0x126>
 800c32e:	2301      	movs	r3, #1
 800c330:	e7b3      	b.n	800c29a <_dtoa_r+0x1b2>
 800c332:	900c      	str	r0, [sp, #48]	; 0x30
 800c334:	e7b2      	b.n	800c29c <_dtoa_r+0x1b4>
 800c336:	9b05      	ldr	r3, [sp, #20]
 800c338:	eba3 030b 	sub.w	r3, r3, fp
 800c33c:	9305      	str	r3, [sp, #20]
 800c33e:	f1cb 0300 	rsb	r3, fp, #0
 800c342:	9308      	str	r3, [sp, #32]
 800c344:	2300      	movs	r3, #0
 800c346:	930b      	str	r3, [sp, #44]	; 0x2c
 800c348:	e7bf      	b.n	800c2ca <_dtoa_r+0x1e2>
 800c34a:	2300      	movs	r3, #0
 800c34c:	9309      	str	r3, [sp, #36]	; 0x24
 800c34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c350:	2b00      	cmp	r3, #0
 800c352:	dc52      	bgt.n	800c3fa <_dtoa_r+0x312>
 800c354:	2301      	movs	r3, #1
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	9304      	str	r3, [sp, #16]
 800c35a:	461a      	mov	r2, r3
 800c35c:	920a      	str	r2, [sp, #40]	; 0x28
 800c35e:	e00b      	b.n	800c378 <_dtoa_r+0x290>
 800c360:	2301      	movs	r3, #1
 800c362:	e7f3      	b.n	800c34c <_dtoa_r+0x264>
 800c364:	2300      	movs	r3, #0
 800c366:	9309      	str	r3, [sp, #36]	; 0x24
 800c368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c36a:	445b      	add	r3, fp
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	3301      	adds	r3, #1
 800c370:	2b01      	cmp	r3, #1
 800c372:	9304      	str	r3, [sp, #16]
 800c374:	bfb8      	it	lt
 800c376:	2301      	movlt	r3, #1
 800c378:	69e0      	ldr	r0, [r4, #28]
 800c37a:	2100      	movs	r1, #0
 800c37c:	2204      	movs	r2, #4
 800c37e:	f102 0614 	add.w	r6, r2, #20
 800c382:	429e      	cmp	r6, r3
 800c384:	d93d      	bls.n	800c402 <_dtoa_r+0x31a>
 800c386:	6041      	str	r1, [r0, #4]
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 fceb 	bl	800cd64 <_Balloc>
 800c38e:	9000      	str	r0, [sp, #0]
 800c390:	2800      	cmp	r0, #0
 800c392:	d139      	bne.n	800c408 <_dtoa_r+0x320>
 800c394:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <_dtoa_r+0x308>)
 800c396:	4602      	mov	r2, r0
 800c398:	f240 11af 	movw	r1, #431	; 0x1af
 800c39c:	e6bd      	b.n	800c11a <_dtoa_r+0x32>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e7e1      	b.n	800c366 <_dtoa_r+0x27e>
 800c3a2:	2501      	movs	r5, #1
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9307      	str	r3, [sp, #28]
 800c3a8:	9509      	str	r5, [sp, #36]	; 0x24
 800c3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2312      	movs	r3, #18
 800c3b6:	e7d1      	b.n	800c35c <_dtoa_r+0x274>
 800c3b8:	636f4361 	.word	0x636f4361
 800c3bc:	3fd287a7 	.word	0x3fd287a7
 800c3c0:	8b60c8b3 	.word	0x8b60c8b3
 800c3c4:	3fc68a28 	.word	0x3fc68a28
 800c3c8:	509f79fb 	.word	0x509f79fb
 800c3cc:	3fd34413 	.word	0x3fd34413
 800c3d0:	0800fd9d 	.word	0x0800fd9d
 800c3d4:	0800fdb4 	.word	0x0800fdb4
 800c3d8:	7ff00000 	.word	0x7ff00000
 800c3dc:	0800fd99 	.word	0x0800fd99
 800c3e0:	0800fd90 	.word	0x0800fd90
 800c3e4:	0800fd6d 	.word	0x0800fd6d
 800c3e8:	3ff80000 	.word	0x3ff80000
 800c3ec:	0800fea0 	.word	0x0800fea0
 800c3f0:	0800fe0c 	.word	0x0800fe0c
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f8:	e7d7      	b.n	800c3aa <_dtoa_r+0x2c2>
 800c3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	9304      	str	r3, [sp, #16]
 800c400:	e7ba      	b.n	800c378 <_dtoa_r+0x290>
 800c402:	3101      	adds	r1, #1
 800c404:	0052      	lsls	r2, r2, #1
 800c406:	e7ba      	b.n	800c37e <_dtoa_r+0x296>
 800c408:	69e3      	ldr	r3, [r4, #28]
 800c40a:	9a00      	ldr	r2, [sp, #0]
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	9b04      	ldr	r3, [sp, #16]
 800c410:	2b0e      	cmp	r3, #14
 800c412:	f200 80a8 	bhi.w	800c566 <_dtoa_r+0x47e>
 800c416:	2d00      	cmp	r5, #0
 800c418:	f000 80a5 	beq.w	800c566 <_dtoa_r+0x47e>
 800c41c:	f1bb 0f00 	cmp.w	fp, #0
 800c420:	dd38      	ble.n	800c494 <_dtoa_r+0x3ac>
 800c422:	4bc0      	ldr	r3, [pc, #768]	; (800c724 <_dtoa_r+0x63c>)
 800c424:	f00b 020f 	and.w	r2, fp, #15
 800c428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c42c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c430:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c434:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c438:	d019      	beq.n	800c46e <_dtoa_r+0x386>
 800c43a:	4bbb      	ldr	r3, [pc, #748]	; (800c728 <_dtoa_r+0x640>)
 800c43c:	ec51 0b18 	vmov	r0, r1, d8
 800c440:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c444:	f7f4 fa2a 	bl	800089c <__aeabi_ddiv>
 800c448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c44c:	f008 080f 	and.w	r8, r8, #15
 800c450:	2503      	movs	r5, #3
 800c452:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c728 <_dtoa_r+0x640>
 800c456:	f1b8 0f00 	cmp.w	r8, #0
 800c45a:	d10a      	bne.n	800c472 <_dtoa_r+0x38a>
 800c45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c460:	4632      	mov	r2, r6
 800c462:	463b      	mov	r3, r7
 800c464:	f7f4 fa1a 	bl	800089c <__aeabi_ddiv>
 800c468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c46c:	e02b      	b.n	800c4c6 <_dtoa_r+0x3de>
 800c46e:	2502      	movs	r5, #2
 800c470:	e7ef      	b.n	800c452 <_dtoa_r+0x36a>
 800c472:	f018 0f01 	tst.w	r8, #1
 800c476:	d008      	beq.n	800c48a <_dtoa_r+0x3a2>
 800c478:	4630      	mov	r0, r6
 800c47a:	4639      	mov	r1, r7
 800c47c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c480:	f7f4 f8e2 	bl	8000648 <__aeabi_dmul>
 800c484:	3501      	adds	r5, #1
 800c486:	4606      	mov	r6, r0
 800c488:	460f      	mov	r7, r1
 800c48a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c48e:	f109 0908 	add.w	r9, r9, #8
 800c492:	e7e0      	b.n	800c456 <_dtoa_r+0x36e>
 800c494:	f000 809f 	beq.w	800c5d6 <_dtoa_r+0x4ee>
 800c498:	f1cb 0600 	rsb	r6, fp, #0
 800c49c:	4ba1      	ldr	r3, [pc, #644]	; (800c724 <_dtoa_r+0x63c>)
 800c49e:	4fa2      	ldr	r7, [pc, #648]	; (800c728 <_dtoa_r+0x640>)
 800c4a0:	f006 020f 	and.w	r2, r6, #15
 800c4a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ac:	ec51 0b18 	vmov	r0, r1, d8
 800c4b0:	f7f4 f8ca 	bl	8000648 <__aeabi_dmul>
 800c4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4b8:	1136      	asrs	r6, r6, #4
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	2502      	movs	r5, #2
 800c4be:	2e00      	cmp	r6, #0
 800c4c0:	d17e      	bne.n	800c5c0 <_dtoa_r+0x4d8>
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1d0      	bne.n	800c468 <_dtoa_r+0x380>
 800c4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 8084 	beq.w	800c5da <_dtoa_r+0x4f2>
 800c4d2:	4b96      	ldr	r3, [pc, #600]	; (800c72c <_dtoa_r+0x644>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	4649      	mov	r1, r9
 800c4da:	f7f4 fb27 	bl	8000b2c <__aeabi_dcmplt>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d07b      	beq.n	800c5da <_dtoa_r+0x4f2>
 800c4e2:	9b04      	ldr	r3, [sp, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d078      	beq.n	800c5da <_dtoa_r+0x4f2>
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	dd39      	ble.n	800c562 <_dtoa_r+0x47a>
 800c4ee:	4b90      	ldr	r3, [pc, #576]	; (800c730 <_dtoa_r+0x648>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	f7f4 f8a7 	bl	8000648 <__aeabi_dmul>
 800c4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4fe:	9e01      	ldr	r6, [sp, #4]
 800c500:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c504:	3501      	adds	r5, #1
 800c506:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c50a:	4628      	mov	r0, r5
 800c50c:	f7f4 f832 	bl	8000574 <__aeabi_i2d>
 800c510:	4642      	mov	r2, r8
 800c512:	464b      	mov	r3, r9
 800c514:	f7f4 f898 	bl	8000648 <__aeabi_dmul>
 800c518:	4b86      	ldr	r3, [pc, #536]	; (800c734 <_dtoa_r+0x64c>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	f7f3 fede 	bl	80002dc <__adddf3>
 800c520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c528:	9303      	str	r3, [sp, #12]
 800c52a:	2e00      	cmp	r6, #0
 800c52c:	d158      	bne.n	800c5e0 <_dtoa_r+0x4f8>
 800c52e:	4b82      	ldr	r3, [pc, #520]	; (800c738 <_dtoa_r+0x650>)
 800c530:	2200      	movs	r2, #0
 800c532:	4640      	mov	r0, r8
 800c534:	4649      	mov	r1, r9
 800c536:	f7f3 fecf 	bl	80002d8 <__aeabi_dsub>
 800c53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c53e:	4680      	mov	r8, r0
 800c540:	4689      	mov	r9, r1
 800c542:	f7f4 fb11 	bl	8000b68 <__aeabi_dcmpgt>
 800c546:	2800      	cmp	r0, #0
 800c548:	f040 8296 	bne.w	800ca78 <_dtoa_r+0x990>
 800c54c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c550:	4640      	mov	r0, r8
 800c552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c556:	4649      	mov	r1, r9
 800c558:	f7f4 fae8 	bl	8000b2c <__aeabi_dcmplt>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	f040 8289 	bne.w	800ca74 <_dtoa_r+0x98c>
 800c562:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f2c0 814e 	blt.w	800c80a <_dtoa_r+0x722>
 800c56e:	f1bb 0f0e 	cmp.w	fp, #14
 800c572:	f300 814a 	bgt.w	800c80a <_dtoa_r+0x722>
 800c576:	4b6b      	ldr	r3, [pc, #428]	; (800c724 <_dtoa_r+0x63c>)
 800c578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c57c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c582:	2b00      	cmp	r3, #0
 800c584:	f280 80dc 	bge.w	800c740 <_dtoa_r+0x658>
 800c588:	9b04      	ldr	r3, [sp, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f300 80d8 	bgt.w	800c740 <_dtoa_r+0x658>
 800c590:	f040 826f 	bne.w	800ca72 <_dtoa_r+0x98a>
 800c594:	4b68      	ldr	r3, [pc, #416]	; (800c738 <_dtoa_r+0x650>)
 800c596:	2200      	movs	r2, #0
 800c598:	4640      	mov	r0, r8
 800c59a:	4649      	mov	r1, r9
 800c59c:	f7f4 f854 	bl	8000648 <__aeabi_dmul>
 800c5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5a4:	f7f4 fad6 	bl	8000b54 <__aeabi_dcmpge>
 800c5a8:	9e04      	ldr	r6, [sp, #16]
 800c5aa:	4637      	mov	r7, r6
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f040 8245 	bne.w	800ca3c <_dtoa_r+0x954>
 800c5b2:	9d00      	ldr	r5, [sp, #0]
 800c5b4:	2331      	movs	r3, #49	; 0x31
 800c5b6:	f805 3b01 	strb.w	r3, [r5], #1
 800c5ba:	f10b 0b01 	add.w	fp, fp, #1
 800c5be:	e241      	b.n	800ca44 <_dtoa_r+0x95c>
 800c5c0:	07f2      	lsls	r2, r6, #31
 800c5c2:	d505      	bpl.n	800c5d0 <_dtoa_r+0x4e8>
 800c5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5c8:	f7f4 f83e 	bl	8000648 <__aeabi_dmul>
 800c5cc:	3501      	adds	r5, #1
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	1076      	asrs	r6, r6, #1
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	e773      	b.n	800c4be <_dtoa_r+0x3d6>
 800c5d6:	2502      	movs	r5, #2
 800c5d8:	e775      	b.n	800c4c6 <_dtoa_r+0x3de>
 800c5da:	9e04      	ldr	r6, [sp, #16]
 800c5dc:	465f      	mov	r7, fp
 800c5de:	e792      	b.n	800c506 <_dtoa_r+0x41e>
 800c5e0:	9900      	ldr	r1, [sp, #0]
 800c5e2:	4b50      	ldr	r3, [pc, #320]	; (800c724 <_dtoa_r+0x63c>)
 800c5e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5e8:	4431      	add	r1, r6
 800c5ea:	9102      	str	r1, [sp, #8]
 800c5ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5ee:	eeb0 9a47 	vmov.f32	s18, s14
 800c5f2:	eef0 9a67 	vmov.f32	s19, s15
 800c5f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5fe:	2900      	cmp	r1, #0
 800c600:	d044      	beq.n	800c68c <_dtoa_r+0x5a4>
 800c602:	494e      	ldr	r1, [pc, #312]	; (800c73c <_dtoa_r+0x654>)
 800c604:	2000      	movs	r0, #0
 800c606:	f7f4 f949 	bl	800089c <__aeabi_ddiv>
 800c60a:	ec53 2b19 	vmov	r2, r3, d9
 800c60e:	f7f3 fe63 	bl	80002d8 <__aeabi_dsub>
 800c612:	9d00      	ldr	r5, [sp, #0]
 800c614:	ec41 0b19 	vmov	d9, r0, r1
 800c618:	4649      	mov	r1, r9
 800c61a:	4640      	mov	r0, r8
 800c61c:	f7f4 fac4 	bl	8000ba8 <__aeabi_d2iz>
 800c620:	4606      	mov	r6, r0
 800c622:	f7f3 ffa7 	bl	8000574 <__aeabi_i2d>
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	4640      	mov	r0, r8
 800c62c:	4649      	mov	r1, r9
 800c62e:	f7f3 fe53 	bl	80002d8 <__aeabi_dsub>
 800c632:	3630      	adds	r6, #48	; 0x30
 800c634:	f805 6b01 	strb.w	r6, [r5], #1
 800c638:	ec53 2b19 	vmov	r2, r3, d9
 800c63c:	4680      	mov	r8, r0
 800c63e:	4689      	mov	r9, r1
 800c640:	f7f4 fa74 	bl	8000b2c <__aeabi_dcmplt>
 800c644:	2800      	cmp	r0, #0
 800c646:	d164      	bne.n	800c712 <_dtoa_r+0x62a>
 800c648:	4642      	mov	r2, r8
 800c64a:	464b      	mov	r3, r9
 800c64c:	4937      	ldr	r1, [pc, #220]	; (800c72c <_dtoa_r+0x644>)
 800c64e:	2000      	movs	r0, #0
 800c650:	f7f3 fe42 	bl	80002d8 <__aeabi_dsub>
 800c654:	ec53 2b19 	vmov	r2, r3, d9
 800c658:	f7f4 fa68 	bl	8000b2c <__aeabi_dcmplt>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	f040 80b6 	bne.w	800c7ce <_dtoa_r+0x6e6>
 800c662:	9b02      	ldr	r3, [sp, #8]
 800c664:	429d      	cmp	r5, r3
 800c666:	f43f af7c 	beq.w	800c562 <_dtoa_r+0x47a>
 800c66a:	4b31      	ldr	r3, [pc, #196]	; (800c730 <_dtoa_r+0x648>)
 800c66c:	ec51 0b19 	vmov	r0, r1, d9
 800c670:	2200      	movs	r2, #0
 800c672:	f7f3 ffe9 	bl	8000648 <__aeabi_dmul>
 800c676:	4b2e      	ldr	r3, [pc, #184]	; (800c730 <_dtoa_r+0x648>)
 800c678:	ec41 0b19 	vmov	d9, r0, r1
 800c67c:	2200      	movs	r2, #0
 800c67e:	4640      	mov	r0, r8
 800c680:	4649      	mov	r1, r9
 800c682:	f7f3 ffe1 	bl	8000648 <__aeabi_dmul>
 800c686:	4680      	mov	r8, r0
 800c688:	4689      	mov	r9, r1
 800c68a:	e7c5      	b.n	800c618 <_dtoa_r+0x530>
 800c68c:	ec51 0b17 	vmov	r0, r1, d7
 800c690:	f7f3 ffda 	bl	8000648 <__aeabi_dmul>
 800c694:	9b02      	ldr	r3, [sp, #8]
 800c696:	9d00      	ldr	r5, [sp, #0]
 800c698:	930f      	str	r3, [sp, #60]	; 0x3c
 800c69a:	ec41 0b19 	vmov	d9, r0, r1
 800c69e:	4649      	mov	r1, r9
 800c6a0:	4640      	mov	r0, r8
 800c6a2:	f7f4 fa81 	bl	8000ba8 <__aeabi_d2iz>
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	f7f3 ff64 	bl	8000574 <__aeabi_i2d>
 800c6ac:	3630      	adds	r6, #48	; 0x30
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4640      	mov	r0, r8
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	f7f3 fe0f 	bl	80002d8 <__aeabi_dsub>
 800c6ba:	f805 6b01 	strb.w	r6, [r5], #1
 800c6be:	9b02      	ldr	r3, [sp, #8]
 800c6c0:	429d      	cmp	r5, r3
 800c6c2:	4680      	mov	r8, r0
 800c6c4:	4689      	mov	r9, r1
 800c6c6:	f04f 0200 	mov.w	r2, #0
 800c6ca:	d124      	bne.n	800c716 <_dtoa_r+0x62e>
 800c6cc:	4b1b      	ldr	r3, [pc, #108]	; (800c73c <_dtoa_r+0x654>)
 800c6ce:	ec51 0b19 	vmov	r0, r1, d9
 800c6d2:	f7f3 fe03 	bl	80002dc <__adddf3>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4640      	mov	r0, r8
 800c6dc:	4649      	mov	r1, r9
 800c6de:	f7f4 fa43 	bl	8000b68 <__aeabi_dcmpgt>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d173      	bne.n	800c7ce <_dtoa_r+0x6e6>
 800c6e6:	ec53 2b19 	vmov	r2, r3, d9
 800c6ea:	4914      	ldr	r1, [pc, #80]	; (800c73c <_dtoa_r+0x654>)
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f7f3 fdf3 	bl	80002d8 <__aeabi_dsub>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	4649      	mov	r1, r9
 800c6fa:	f7f4 fa17 	bl	8000b2c <__aeabi_dcmplt>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	f43f af2f 	beq.w	800c562 <_dtoa_r+0x47a>
 800c704:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c706:	1e6b      	subs	r3, r5, #1
 800c708:	930f      	str	r3, [sp, #60]	; 0x3c
 800c70a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c70e:	2b30      	cmp	r3, #48	; 0x30
 800c710:	d0f8      	beq.n	800c704 <_dtoa_r+0x61c>
 800c712:	46bb      	mov	fp, r7
 800c714:	e04a      	b.n	800c7ac <_dtoa_r+0x6c4>
 800c716:	4b06      	ldr	r3, [pc, #24]	; (800c730 <_dtoa_r+0x648>)
 800c718:	f7f3 ff96 	bl	8000648 <__aeabi_dmul>
 800c71c:	4680      	mov	r8, r0
 800c71e:	4689      	mov	r9, r1
 800c720:	e7bd      	b.n	800c69e <_dtoa_r+0x5b6>
 800c722:	bf00      	nop
 800c724:	0800fea0 	.word	0x0800fea0
 800c728:	0800fe78 	.word	0x0800fe78
 800c72c:	3ff00000 	.word	0x3ff00000
 800c730:	40240000 	.word	0x40240000
 800c734:	401c0000 	.word	0x401c0000
 800c738:	40140000 	.word	0x40140000
 800c73c:	3fe00000 	.word	0x3fe00000
 800c740:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c744:	9d00      	ldr	r5, [sp, #0]
 800c746:	4642      	mov	r2, r8
 800c748:	464b      	mov	r3, r9
 800c74a:	4630      	mov	r0, r6
 800c74c:	4639      	mov	r1, r7
 800c74e:	f7f4 f8a5 	bl	800089c <__aeabi_ddiv>
 800c752:	f7f4 fa29 	bl	8000ba8 <__aeabi_d2iz>
 800c756:	9001      	str	r0, [sp, #4]
 800c758:	f7f3 ff0c 	bl	8000574 <__aeabi_i2d>
 800c75c:	4642      	mov	r2, r8
 800c75e:	464b      	mov	r3, r9
 800c760:	f7f3 ff72 	bl	8000648 <__aeabi_dmul>
 800c764:	4602      	mov	r2, r0
 800c766:	460b      	mov	r3, r1
 800c768:	4630      	mov	r0, r6
 800c76a:	4639      	mov	r1, r7
 800c76c:	f7f3 fdb4 	bl	80002d8 <__aeabi_dsub>
 800c770:	9e01      	ldr	r6, [sp, #4]
 800c772:	9f04      	ldr	r7, [sp, #16]
 800c774:	3630      	adds	r6, #48	; 0x30
 800c776:	f805 6b01 	strb.w	r6, [r5], #1
 800c77a:	9e00      	ldr	r6, [sp, #0]
 800c77c:	1bae      	subs	r6, r5, r6
 800c77e:	42b7      	cmp	r7, r6
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	d134      	bne.n	800c7f0 <_dtoa_r+0x708>
 800c786:	f7f3 fda9 	bl	80002dc <__adddf3>
 800c78a:	4642      	mov	r2, r8
 800c78c:	464b      	mov	r3, r9
 800c78e:	4606      	mov	r6, r0
 800c790:	460f      	mov	r7, r1
 800c792:	f7f4 f9e9 	bl	8000b68 <__aeabi_dcmpgt>
 800c796:	b9c8      	cbnz	r0, 800c7cc <_dtoa_r+0x6e4>
 800c798:	4642      	mov	r2, r8
 800c79a:	464b      	mov	r3, r9
 800c79c:	4630      	mov	r0, r6
 800c79e:	4639      	mov	r1, r7
 800c7a0:	f7f4 f9ba 	bl	8000b18 <__aeabi_dcmpeq>
 800c7a4:	b110      	cbz	r0, 800c7ac <_dtoa_r+0x6c4>
 800c7a6:	9b01      	ldr	r3, [sp, #4]
 800c7a8:	07db      	lsls	r3, r3, #31
 800c7aa:	d40f      	bmi.n	800c7cc <_dtoa_r+0x6e4>
 800c7ac:	4651      	mov	r1, sl
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f000 fb18 	bl	800cde4 <_Bfree>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7b8:	702b      	strb	r3, [r5, #0]
 800c7ba:	f10b 0301 	add.w	r3, fp, #1
 800c7be:	6013      	str	r3, [r2, #0]
 800c7c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f43f ace2 	beq.w	800c18c <_dtoa_r+0xa4>
 800c7c8:	601d      	str	r5, [r3, #0]
 800c7ca:	e4df      	b.n	800c18c <_dtoa_r+0xa4>
 800c7cc:	465f      	mov	r7, fp
 800c7ce:	462b      	mov	r3, r5
 800c7d0:	461d      	mov	r5, r3
 800c7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7d6:	2a39      	cmp	r2, #57	; 0x39
 800c7d8:	d106      	bne.n	800c7e8 <_dtoa_r+0x700>
 800c7da:	9a00      	ldr	r2, [sp, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d1f7      	bne.n	800c7d0 <_dtoa_r+0x6e8>
 800c7e0:	9900      	ldr	r1, [sp, #0]
 800c7e2:	2230      	movs	r2, #48	; 0x30
 800c7e4:	3701      	adds	r7, #1
 800c7e6:	700a      	strb	r2, [r1, #0]
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	3201      	adds	r2, #1
 800c7ec:	701a      	strb	r2, [r3, #0]
 800c7ee:	e790      	b.n	800c712 <_dtoa_r+0x62a>
 800c7f0:	4ba3      	ldr	r3, [pc, #652]	; (800ca80 <_dtoa_r+0x998>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f7f3 ff28 	bl	8000648 <__aeabi_dmul>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	460f      	mov	r7, r1
 800c800:	f7f4 f98a 	bl	8000b18 <__aeabi_dcmpeq>
 800c804:	2800      	cmp	r0, #0
 800c806:	d09e      	beq.n	800c746 <_dtoa_r+0x65e>
 800c808:	e7d0      	b.n	800c7ac <_dtoa_r+0x6c4>
 800c80a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	f000 80ca 	beq.w	800c9a6 <_dtoa_r+0x8be>
 800c812:	9a07      	ldr	r2, [sp, #28]
 800c814:	2a01      	cmp	r2, #1
 800c816:	f300 80ad 	bgt.w	800c974 <_dtoa_r+0x88c>
 800c81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	f000 80a5 	beq.w	800c96c <_dtoa_r+0x884>
 800c822:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c826:	9e08      	ldr	r6, [sp, #32]
 800c828:	9d05      	ldr	r5, [sp, #20]
 800c82a:	9a05      	ldr	r2, [sp, #20]
 800c82c:	441a      	add	r2, r3
 800c82e:	9205      	str	r2, [sp, #20]
 800c830:	9a06      	ldr	r2, [sp, #24]
 800c832:	2101      	movs	r1, #1
 800c834:	441a      	add	r2, r3
 800c836:	4620      	mov	r0, r4
 800c838:	9206      	str	r2, [sp, #24]
 800c83a:	f000 fb89 	bl	800cf50 <__i2b>
 800c83e:	4607      	mov	r7, r0
 800c840:	b165      	cbz	r5, 800c85c <_dtoa_r+0x774>
 800c842:	9b06      	ldr	r3, [sp, #24]
 800c844:	2b00      	cmp	r3, #0
 800c846:	dd09      	ble.n	800c85c <_dtoa_r+0x774>
 800c848:	42ab      	cmp	r3, r5
 800c84a:	9a05      	ldr	r2, [sp, #20]
 800c84c:	bfa8      	it	ge
 800c84e:	462b      	movge	r3, r5
 800c850:	1ad2      	subs	r2, r2, r3
 800c852:	9205      	str	r2, [sp, #20]
 800c854:	9a06      	ldr	r2, [sp, #24]
 800c856:	1aed      	subs	r5, r5, r3
 800c858:	1ad3      	subs	r3, r2, r3
 800c85a:	9306      	str	r3, [sp, #24]
 800c85c:	9b08      	ldr	r3, [sp, #32]
 800c85e:	b1f3      	cbz	r3, 800c89e <_dtoa_r+0x7b6>
 800c860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80a3 	beq.w	800c9ae <_dtoa_r+0x8c6>
 800c868:	2e00      	cmp	r6, #0
 800c86a:	dd10      	ble.n	800c88e <_dtoa_r+0x7a6>
 800c86c:	4639      	mov	r1, r7
 800c86e:	4632      	mov	r2, r6
 800c870:	4620      	mov	r0, r4
 800c872:	f000 fc2d 	bl	800d0d0 <__pow5mult>
 800c876:	4652      	mov	r2, sl
 800c878:	4601      	mov	r1, r0
 800c87a:	4607      	mov	r7, r0
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 fb7d 	bl	800cf7c <__multiply>
 800c882:	4651      	mov	r1, sl
 800c884:	4680      	mov	r8, r0
 800c886:	4620      	mov	r0, r4
 800c888:	f000 faac 	bl	800cde4 <_Bfree>
 800c88c:	46c2      	mov	sl, r8
 800c88e:	9b08      	ldr	r3, [sp, #32]
 800c890:	1b9a      	subs	r2, r3, r6
 800c892:	d004      	beq.n	800c89e <_dtoa_r+0x7b6>
 800c894:	4651      	mov	r1, sl
 800c896:	4620      	mov	r0, r4
 800c898:	f000 fc1a 	bl	800d0d0 <__pow5mult>
 800c89c:	4682      	mov	sl, r0
 800c89e:	2101      	movs	r1, #1
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f000 fb55 	bl	800cf50 <__i2b>
 800c8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	f340 8081 	ble.w	800c9b2 <_dtoa_r+0x8ca>
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	4601      	mov	r1, r0
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f000 fc0b 	bl	800d0d0 <__pow5mult>
 800c8ba:	9b07      	ldr	r3, [sp, #28]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	4606      	mov	r6, r0
 800c8c0:	dd7a      	ble.n	800c9b8 <_dtoa_r+0x8d0>
 800c8c2:	f04f 0800 	mov.w	r8, #0
 800c8c6:	6933      	ldr	r3, [r6, #16]
 800c8c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8cc:	6918      	ldr	r0, [r3, #16]
 800c8ce:	f000 faf1 	bl	800ceb4 <__hi0bits>
 800c8d2:	f1c0 0020 	rsb	r0, r0, #32
 800c8d6:	9b06      	ldr	r3, [sp, #24]
 800c8d8:	4418      	add	r0, r3
 800c8da:	f010 001f 	ands.w	r0, r0, #31
 800c8de:	f000 8094 	beq.w	800ca0a <_dtoa_r+0x922>
 800c8e2:	f1c0 0320 	rsb	r3, r0, #32
 800c8e6:	2b04      	cmp	r3, #4
 800c8e8:	f340 8085 	ble.w	800c9f6 <_dtoa_r+0x90e>
 800c8ec:	9b05      	ldr	r3, [sp, #20]
 800c8ee:	f1c0 001c 	rsb	r0, r0, #28
 800c8f2:	4403      	add	r3, r0
 800c8f4:	9305      	str	r3, [sp, #20]
 800c8f6:	9b06      	ldr	r3, [sp, #24]
 800c8f8:	4403      	add	r3, r0
 800c8fa:	4405      	add	r5, r0
 800c8fc:	9306      	str	r3, [sp, #24]
 800c8fe:	9b05      	ldr	r3, [sp, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	dd05      	ble.n	800c910 <_dtoa_r+0x828>
 800c904:	4651      	mov	r1, sl
 800c906:	461a      	mov	r2, r3
 800c908:	4620      	mov	r0, r4
 800c90a:	f000 fc3b 	bl	800d184 <__lshift>
 800c90e:	4682      	mov	sl, r0
 800c910:	9b06      	ldr	r3, [sp, #24]
 800c912:	2b00      	cmp	r3, #0
 800c914:	dd05      	ble.n	800c922 <_dtoa_r+0x83a>
 800c916:	4631      	mov	r1, r6
 800c918:	461a      	mov	r2, r3
 800c91a:	4620      	mov	r0, r4
 800c91c:	f000 fc32 	bl	800d184 <__lshift>
 800c920:	4606      	mov	r6, r0
 800c922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c924:	2b00      	cmp	r3, #0
 800c926:	d072      	beq.n	800ca0e <_dtoa_r+0x926>
 800c928:	4631      	mov	r1, r6
 800c92a:	4650      	mov	r0, sl
 800c92c:	f000 fc96 	bl	800d25c <__mcmp>
 800c930:	2800      	cmp	r0, #0
 800c932:	da6c      	bge.n	800ca0e <_dtoa_r+0x926>
 800c934:	2300      	movs	r3, #0
 800c936:	4651      	mov	r1, sl
 800c938:	220a      	movs	r2, #10
 800c93a:	4620      	mov	r0, r4
 800c93c:	f000 fa74 	bl	800ce28 <__multadd>
 800c940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c942:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c946:	4682      	mov	sl, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 81b0 	beq.w	800ccae <_dtoa_r+0xbc6>
 800c94e:	2300      	movs	r3, #0
 800c950:	4639      	mov	r1, r7
 800c952:	220a      	movs	r2, #10
 800c954:	4620      	mov	r0, r4
 800c956:	f000 fa67 	bl	800ce28 <__multadd>
 800c95a:	9b01      	ldr	r3, [sp, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	4607      	mov	r7, r0
 800c960:	f300 8096 	bgt.w	800ca90 <_dtoa_r+0x9a8>
 800c964:	9b07      	ldr	r3, [sp, #28]
 800c966:	2b02      	cmp	r3, #2
 800c968:	dc59      	bgt.n	800ca1e <_dtoa_r+0x936>
 800c96a:	e091      	b.n	800ca90 <_dtoa_r+0x9a8>
 800c96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c96e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c972:	e758      	b.n	800c826 <_dtoa_r+0x73e>
 800c974:	9b04      	ldr	r3, [sp, #16]
 800c976:	1e5e      	subs	r6, r3, #1
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	42b3      	cmp	r3, r6
 800c97c:	bfbf      	itttt	lt
 800c97e:	9b08      	ldrlt	r3, [sp, #32]
 800c980:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c982:	9608      	strlt	r6, [sp, #32]
 800c984:	1af3      	sublt	r3, r6, r3
 800c986:	bfb4      	ite	lt
 800c988:	18d2      	addlt	r2, r2, r3
 800c98a:	1b9e      	subge	r6, r3, r6
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	bfbc      	itt	lt
 800c990:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c992:	2600      	movlt	r6, #0
 800c994:	2b00      	cmp	r3, #0
 800c996:	bfb7      	itett	lt
 800c998:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c99c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c9a0:	1a9d      	sublt	r5, r3, r2
 800c9a2:	2300      	movlt	r3, #0
 800c9a4:	e741      	b.n	800c82a <_dtoa_r+0x742>
 800c9a6:	9e08      	ldr	r6, [sp, #32]
 800c9a8:	9d05      	ldr	r5, [sp, #20]
 800c9aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c9ac:	e748      	b.n	800c840 <_dtoa_r+0x758>
 800c9ae:	9a08      	ldr	r2, [sp, #32]
 800c9b0:	e770      	b.n	800c894 <_dtoa_r+0x7ac>
 800c9b2:	9b07      	ldr	r3, [sp, #28]
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	dc19      	bgt.n	800c9ec <_dtoa_r+0x904>
 800c9b8:	9b02      	ldr	r3, [sp, #8]
 800c9ba:	b9bb      	cbnz	r3, 800c9ec <_dtoa_r+0x904>
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9c2:	b99b      	cbnz	r3, 800c9ec <_dtoa_r+0x904>
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9ca:	0d1b      	lsrs	r3, r3, #20
 800c9cc:	051b      	lsls	r3, r3, #20
 800c9ce:	b183      	cbz	r3, 800c9f2 <_dtoa_r+0x90a>
 800c9d0:	9b05      	ldr	r3, [sp, #20]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	9305      	str	r3, [sp, #20]
 800c9d6:	9b06      	ldr	r3, [sp, #24]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	9306      	str	r3, [sp, #24]
 800c9dc:	f04f 0801 	mov.w	r8, #1
 800c9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f47f af6f 	bne.w	800c8c6 <_dtoa_r+0x7de>
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	e774      	b.n	800c8d6 <_dtoa_r+0x7ee>
 800c9ec:	f04f 0800 	mov.w	r8, #0
 800c9f0:	e7f6      	b.n	800c9e0 <_dtoa_r+0x8f8>
 800c9f2:	4698      	mov	r8, r3
 800c9f4:	e7f4      	b.n	800c9e0 <_dtoa_r+0x8f8>
 800c9f6:	d082      	beq.n	800c8fe <_dtoa_r+0x816>
 800c9f8:	9a05      	ldr	r2, [sp, #20]
 800c9fa:	331c      	adds	r3, #28
 800c9fc:	441a      	add	r2, r3
 800c9fe:	9205      	str	r2, [sp, #20]
 800ca00:	9a06      	ldr	r2, [sp, #24]
 800ca02:	441a      	add	r2, r3
 800ca04:	441d      	add	r5, r3
 800ca06:	9206      	str	r2, [sp, #24]
 800ca08:	e779      	b.n	800c8fe <_dtoa_r+0x816>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	e7f4      	b.n	800c9f8 <_dtoa_r+0x910>
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	dc37      	bgt.n	800ca84 <_dtoa_r+0x99c>
 800ca14:	9b07      	ldr	r3, [sp, #28]
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	dd34      	ble.n	800ca84 <_dtoa_r+0x99c>
 800ca1a:	9b04      	ldr	r3, [sp, #16]
 800ca1c:	9301      	str	r3, [sp, #4]
 800ca1e:	9b01      	ldr	r3, [sp, #4]
 800ca20:	b963      	cbnz	r3, 800ca3c <_dtoa_r+0x954>
 800ca22:	4631      	mov	r1, r6
 800ca24:	2205      	movs	r2, #5
 800ca26:	4620      	mov	r0, r4
 800ca28:	f000 f9fe 	bl	800ce28 <__multadd>
 800ca2c:	4601      	mov	r1, r0
 800ca2e:	4606      	mov	r6, r0
 800ca30:	4650      	mov	r0, sl
 800ca32:	f000 fc13 	bl	800d25c <__mcmp>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f73f adbb 	bgt.w	800c5b2 <_dtoa_r+0x4ca>
 800ca3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca3e:	9d00      	ldr	r5, [sp, #0]
 800ca40:	ea6f 0b03 	mvn.w	fp, r3
 800ca44:	f04f 0800 	mov.w	r8, #0
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 f9ca 	bl	800cde4 <_Bfree>
 800ca50:	2f00      	cmp	r7, #0
 800ca52:	f43f aeab 	beq.w	800c7ac <_dtoa_r+0x6c4>
 800ca56:	f1b8 0f00 	cmp.w	r8, #0
 800ca5a:	d005      	beq.n	800ca68 <_dtoa_r+0x980>
 800ca5c:	45b8      	cmp	r8, r7
 800ca5e:	d003      	beq.n	800ca68 <_dtoa_r+0x980>
 800ca60:	4641      	mov	r1, r8
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 f9be 	bl	800cde4 <_Bfree>
 800ca68:	4639      	mov	r1, r7
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f000 f9ba 	bl	800cde4 <_Bfree>
 800ca70:	e69c      	b.n	800c7ac <_dtoa_r+0x6c4>
 800ca72:	2600      	movs	r6, #0
 800ca74:	4637      	mov	r7, r6
 800ca76:	e7e1      	b.n	800ca3c <_dtoa_r+0x954>
 800ca78:	46bb      	mov	fp, r7
 800ca7a:	4637      	mov	r7, r6
 800ca7c:	e599      	b.n	800c5b2 <_dtoa_r+0x4ca>
 800ca7e:	bf00      	nop
 800ca80:	40240000 	.word	0x40240000
 800ca84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 80c8 	beq.w	800cc1c <_dtoa_r+0xb34>
 800ca8c:	9b04      	ldr	r3, [sp, #16]
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	2d00      	cmp	r5, #0
 800ca92:	dd05      	ble.n	800caa0 <_dtoa_r+0x9b8>
 800ca94:	4639      	mov	r1, r7
 800ca96:	462a      	mov	r2, r5
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f000 fb73 	bl	800d184 <__lshift>
 800ca9e:	4607      	mov	r7, r0
 800caa0:	f1b8 0f00 	cmp.w	r8, #0
 800caa4:	d05b      	beq.n	800cb5e <_dtoa_r+0xa76>
 800caa6:	6879      	ldr	r1, [r7, #4]
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 f95b 	bl	800cd64 <_Balloc>
 800caae:	4605      	mov	r5, r0
 800cab0:	b928      	cbnz	r0, 800cabe <_dtoa_r+0x9d6>
 800cab2:	4b83      	ldr	r3, [pc, #524]	; (800ccc0 <_dtoa_r+0xbd8>)
 800cab4:	4602      	mov	r2, r0
 800cab6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800caba:	f7ff bb2e 	b.w	800c11a <_dtoa_r+0x32>
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	3202      	adds	r2, #2
 800cac2:	0092      	lsls	r2, r2, #2
 800cac4:	f107 010c 	add.w	r1, r7, #12
 800cac8:	300c      	adds	r0, #12
 800caca:	f001 f8af 	bl	800dc2c <memcpy>
 800cace:	2201      	movs	r2, #1
 800cad0:	4629      	mov	r1, r5
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 fb56 	bl	800d184 <__lshift>
 800cad8:	9b00      	ldr	r3, [sp, #0]
 800cada:	3301      	adds	r3, #1
 800cadc:	9304      	str	r3, [sp, #16]
 800cade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cae2:	4413      	add	r3, r2
 800cae4:	9308      	str	r3, [sp, #32]
 800cae6:	9b02      	ldr	r3, [sp, #8]
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	46b8      	mov	r8, r7
 800caee:	9306      	str	r3, [sp, #24]
 800caf0:	4607      	mov	r7, r0
 800caf2:	9b04      	ldr	r3, [sp, #16]
 800caf4:	4631      	mov	r1, r6
 800caf6:	3b01      	subs	r3, #1
 800caf8:	4650      	mov	r0, sl
 800cafa:	9301      	str	r3, [sp, #4]
 800cafc:	f7ff fa6a 	bl	800bfd4 <quorem>
 800cb00:	4641      	mov	r1, r8
 800cb02:	9002      	str	r0, [sp, #8]
 800cb04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb08:	4650      	mov	r0, sl
 800cb0a:	f000 fba7 	bl	800d25c <__mcmp>
 800cb0e:	463a      	mov	r2, r7
 800cb10:	9005      	str	r0, [sp, #20]
 800cb12:	4631      	mov	r1, r6
 800cb14:	4620      	mov	r0, r4
 800cb16:	f000 fbbd 	bl	800d294 <__mdiff>
 800cb1a:	68c2      	ldr	r2, [r0, #12]
 800cb1c:	4605      	mov	r5, r0
 800cb1e:	bb02      	cbnz	r2, 800cb62 <_dtoa_r+0xa7a>
 800cb20:	4601      	mov	r1, r0
 800cb22:	4650      	mov	r0, sl
 800cb24:	f000 fb9a 	bl	800d25c <__mcmp>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb30:	f000 f958 	bl	800cde4 <_Bfree>
 800cb34:	9b07      	ldr	r3, [sp, #28]
 800cb36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb38:	9d04      	ldr	r5, [sp, #16]
 800cb3a:	ea43 0102 	orr.w	r1, r3, r2
 800cb3e:	9b06      	ldr	r3, [sp, #24]
 800cb40:	4319      	orrs	r1, r3
 800cb42:	d110      	bne.n	800cb66 <_dtoa_r+0xa7e>
 800cb44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb48:	d029      	beq.n	800cb9e <_dtoa_r+0xab6>
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dd02      	ble.n	800cb56 <_dtoa_r+0xa6e>
 800cb50:	9b02      	ldr	r3, [sp, #8]
 800cb52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cb56:	9b01      	ldr	r3, [sp, #4]
 800cb58:	f883 9000 	strb.w	r9, [r3]
 800cb5c:	e774      	b.n	800ca48 <_dtoa_r+0x960>
 800cb5e:	4638      	mov	r0, r7
 800cb60:	e7ba      	b.n	800cad8 <_dtoa_r+0x9f0>
 800cb62:	2201      	movs	r2, #1
 800cb64:	e7e1      	b.n	800cb2a <_dtoa_r+0xa42>
 800cb66:	9b05      	ldr	r3, [sp, #20]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	db04      	blt.n	800cb76 <_dtoa_r+0xa8e>
 800cb6c:	9907      	ldr	r1, [sp, #28]
 800cb6e:	430b      	orrs	r3, r1
 800cb70:	9906      	ldr	r1, [sp, #24]
 800cb72:	430b      	orrs	r3, r1
 800cb74:	d120      	bne.n	800cbb8 <_dtoa_r+0xad0>
 800cb76:	2a00      	cmp	r2, #0
 800cb78:	dded      	ble.n	800cb56 <_dtoa_r+0xa6e>
 800cb7a:	4651      	mov	r1, sl
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f000 fb00 	bl	800d184 <__lshift>
 800cb84:	4631      	mov	r1, r6
 800cb86:	4682      	mov	sl, r0
 800cb88:	f000 fb68 	bl	800d25c <__mcmp>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	dc03      	bgt.n	800cb98 <_dtoa_r+0xab0>
 800cb90:	d1e1      	bne.n	800cb56 <_dtoa_r+0xa6e>
 800cb92:	f019 0f01 	tst.w	r9, #1
 800cb96:	d0de      	beq.n	800cb56 <_dtoa_r+0xa6e>
 800cb98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb9c:	d1d8      	bne.n	800cb50 <_dtoa_r+0xa68>
 800cb9e:	9a01      	ldr	r2, [sp, #4]
 800cba0:	2339      	movs	r3, #57	; 0x39
 800cba2:	7013      	strb	r3, [r2, #0]
 800cba4:	462b      	mov	r3, r5
 800cba6:	461d      	mov	r5, r3
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbae:	2a39      	cmp	r2, #57	; 0x39
 800cbb0:	d06c      	beq.n	800cc8c <_dtoa_r+0xba4>
 800cbb2:	3201      	adds	r2, #1
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e747      	b.n	800ca48 <_dtoa_r+0x960>
 800cbb8:	2a00      	cmp	r2, #0
 800cbba:	dd07      	ble.n	800cbcc <_dtoa_r+0xae4>
 800cbbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbc0:	d0ed      	beq.n	800cb9e <_dtoa_r+0xab6>
 800cbc2:	9a01      	ldr	r2, [sp, #4]
 800cbc4:	f109 0301 	add.w	r3, r9, #1
 800cbc8:	7013      	strb	r3, [r2, #0]
 800cbca:	e73d      	b.n	800ca48 <_dtoa_r+0x960>
 800cbcc:	9b04      	ldr	r3, [sp, #16]
 800cbce:	9a08      	ldr	r2, [sp, #32]
 800cbd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d043      	beq.n	800cc60 <_dtoa_r+0xb78>
 800cbd8:	4651      	mov	r1, sl
 800cbda:	2300      	movs	r3, #0
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 f922 	bl	800ce28 <__multadd>
 800cbe4:	45b8      	cmp	r8, r7
 800cbe6:	4682      	mov	sl, r0
 800cbe8:	f04f 0300 	mov.w	r3, #0
 800cbec:	f04f 020a 	mov.w	r2, #10
 800cbf0:	4641      	mov	r1, r8
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	d107      	bne.n	800cc06 <_dtoa_r+0xb1e>
 800cbf6:	f000 f917 	bl	800ce28 <__multadd>
 800cbfa:	4680      	mov	r8, r0
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	3301      	adds	r3, #1
 800cc02:	9304      	str	r3, [sp, #16]
 800cc04:	e775      	b.n	800caf2 <_dtoa_r+0xa0a>
 800cc06:	f000 f90f 	bl	800ce28 <__multadd>
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	220a      	movs	r2, #10
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 f908 	bl	800ce28 <__multadd>
 800cc18:	4607      	mov	r7, r0
 800cc1a:	e7f0      	b.n	800cbfe <_dtoa_r+0xb16>
 800cc1c:	9b04      	ldr	r3, [sp, #16]
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	9d00      	ldr	r5, [sp, #0]
 800cc22:	4631      	mov	r1, r6
 800cc24:	4650      	mov	r0, sl
 800cc26:	f7ff f9d5 	bl	800bfd4 <quorem>
 800cc2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc2e:	9b00      	ldr	r3, [sp, #0]
 800cc30:	f805 9b01 	strb.w	r9, [r5], #1
 800cc34:	1aea      	subs	r2, r5, r3
 800cc36:	9b01      	ldr	r3, [sp, #4]
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	dd07      	ble.n	800cc4c <_dtoa_r+0xb64>
 800cc3c:	4651      	mov	r1, sl
 800cc3e:	2300      	movs	r3, #0
 800cc40:	220a      	movs	r2, #10
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 f8f0 	bl	800ce28 <__multadd>
 800cc48:	4682      	mov	sl, r0
 800cc4a:	e7ea      	b.n	800cc22 <_dtoa_r+0xb3a>
 800cc4c:	9b01      	ldr	r3, [sp, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	bfc8      	it	gt
 800cc52:	461d      	movgt	r5, r3
 800cc54:	9b00      	ldr	r3, [sp, #0]
 800cc56:	bfd8      	it	le
 800cc58:	2501      	movle	r5, #1
 800cc5a:	441d      	add	r5, r3
 800cc5c:	f04f 0800 	mov.w	r8, #0
 800cc60:	4651      	mov	r1, sl
 800cc62:	2201      	movs	r2, #1
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fa8d 	bl	800d184 <__lshift>
 800cc6a:	4631      	mov	r1, r6
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	f000 faf5 	bl	800d25c <__mcmp>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	dc96      	bgt.n	800cba4 <_dtoa_r+0xabc>
 800cc76:	d102      	bne.n	800cc7e <_dtoa_r+0xb96>
 800cc78:	f019 0f01 	tst.w	r9, #1
 800cc7c:	d192      	bne.n	800cba4 <_dtoa_r+0xabc>
 800cc7e:	462b      	mov	r3, r5
 800cc80:	461d      	mov	r5, r3
 800cc82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc86:	2a30      	cmp	r2, #48	; 0x30
 800cc88:	d0fa      	beq.n	800cc80 <_dtoa_r+0xb98>
 800cc8a:	e6dd      	b.n	800ca48 <_dtoa_r+0x960>
 800cc8c:	9a00      	ldr	r2, [sp, #0]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d189      	bne.n	800cba6 <_dtoa_r+0xabe>
 800cc92:	f10b 0b01 	add.w	fp, fp, #1
 800cc96:	2331      	movs	r3, #49	; 0x31
 800cc98:	e796      	b.n	800cbc8 <_dtoa_r+0xae0>
 800cc9a:	4b0a      	ldr	r3, [pc, #40]	; (800ccc4 <_dtoa_r+0xbdc>)
 800cc9c:	f7ff ba99 	b.w	800c1d2 <_dtoa_r+0xea>
 800cca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f47f aa6d 	bne.w	800c182 <_dtoa_r+0x9a>
 800cca8:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <_dtoa_r+0xbe0>)
 800ccaa:	f7ff ba92 	b.w	800c1d2 <_dtoa_r+0xea>
 800ccae:	9b01      	ldr	r3, [sp, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	dcb5      	bgt.n	800cc20 <_dtoa_r+0xb38>
 800ccb4:	9b07      	ldr	r3, [sp, #28]
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	f73f aeb1 	bgt.w	800ca1e <_dtoa_r+0x936>
 800ccbc:	e7b0      	b.n	800cc20 <_dtoa_r+0xb38>
 800ccbe:	bf00      	nop
 800ccc0:	0800fe0c 	.word	0x0800fe0c
 800ccc4:	0800fd6c 	.word	0x0800fd6c
 800ccc8:	0800fd90 	.word	0x0800fd90

0800cccc <_free_r>:
 800cccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	d044      	beq.n	800cd5c <_free_r+0x90>
 800ccd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd6:	9001      	str	r0, [sp, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f1a1 0404 	sub.w	r4, r1, #4
 800ccde:	bfb8      	it	lt
 800cce0:	18e4      	addlt	r4, r4, r3
 800cce2:	f7fe f9a9 	bl	800b038 <__malloc_lock>
 800cce6:	4a1e      	ldr	r2, [pc, #120]	; (800cd60 <_free_r+0x94>)
 800cce8:	9801      	ldr	r0, [sp, #4]
 800ccea:	6813      	ldr	r3, [r2, #0]
 800ccec:	b933      	cbnz	r3, 800ccfc <_free_r+0x30>
 800ccee:	6063      	str	r3, [r4, #4]
 800ccf0:	6014      	str	r4, [r2, #0]
 800ccf2:	b003      	add	sp, #12
 800ccf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf8:	f7fe b9a4 	b.w	800b044 <__malloc_unlock>
 800ccfc:	42a3      	cmp	r3, r4
 800ccfe:	d908      	bls.n	800cd12 <_free_r+0x46>
 800cd00:	6825      	ldr	r5, [r4, #0]
 800cd02:	1961      	adds	r1, r4, r5
 800cd04:	428b      	cmp	r3, r1
 800cd06:	bf01      	itttt	eq
 800cd08:	6819      	ldreq	r1, [r3, #0]
 800cd0a:	685b      	ldreq	r3, [r3, #4]
 800cd0c:	1949      	addeq	r1, r1, r5
 800cd0e:	6021      	streq	r1, [r4, #0]
 800cd10:	e7ed      	b.n	800ccee <_free_r+0x22>
 800cd12:	461a      	mov	r2, r3
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	b10b      	cbz	r3, 800cd1c <_free_r+0x50>
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d9fa      	bls.n	800cd12 <_free_r+0x46>
 800cd1c:	6811      	ldr	r1, [r2, #0]
 800cd1e:	1855      	adds	r5, r2, r1
 800cd20:	42a5      	cmp	r5, r4
 800cd22:	d10b      	bne.n	800cd3c <_free_r+0x70>
 800cd24:	6824      	ldr	r4, [r4, #0]
 800cd26:	4421      	add	r1, r4
 800cd28:	1854      	adds	r4, r2, r1
 800cd2a:	42a3      	cmp	r3, r4
 800cd2c:	6011      	str	r1, [r2, #0]
 800cd2e:	d1e0      	bne.n	800ccf2 <_free_r+0x26>
 800cd30:	681c      	ldr	r4, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	6053      	str	r3, [r2, #4]
 800cd36:	440c      	add	r4, r1
 800cd38:	6014      	str	r4, [r2, #0]
 800cd3a:	e7da      	b.n	800ccf2 <_free_r+0x26>
 800cd3c:	d902      	bls.n	800cd44 <_free_r+0x78>
 800cd3e:	230c      	movs	r3, #12
 800cd40:	6003      	str	r3, [r0, #0]
 800cd42:	e7d6      	b.n	800ccf2 <_free_r+0x26>
 800cd44:	6825      	ldr	r5, [r4, #0]
 800cd46:	1961      	adds	r1, r4, r5
 800cd48:	428b      	cmp	r3, r1
 800cd4a:	bf04      	itt	eq
 800cd4c:	6819      	ldreq	r1, [r3, #0]
 800cd4e:	685b      	ldreq	r3, [r3, #4]
 800cd50:	6063      	str	r3, [r4, #4]
 800cd52:	bf04      	itt	eq
 800cd54:	1949      	addeq	r1, r1, r5
 800cd56:	6021      	streq	r1, [r4, #0]
 800cd58:	6054      	str	r4, [r2, #4]
 800cd5a:	e7ca      	b.n	800ccf2 <_free_r+0x26>
 800cd5c:	b003      	add	sp, #12
 800cd5e:	bd30      	pop	{r4, r5, pc}
 800cd60:	20000fc4 	.word	0x20000fc4

0800cd64 <_Balloc>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	69c6      	ldr	r6, [r0, #28]
 800cd68:	4604      	mov	r4, r0
 800cd6a:	460d      	mov	r5, r1
 800cd6c:	b976      	cbnz	r6, 800cd8c <_Balloc+0x28>
 800cd6e:	2010      	movs	r0, #16
 800cd70:	f7fe f8ba 	bl	800aee8 <malloc>
 800cd74:	4602      	mov	r2, r0
 800cd76:	61e0      	str	r0, [r4, #28]
 800cd78:	b920      	cbnz	r0, 800cd84 <_Balloc+0x20>
 800cd7a:	4b18      	ldr	r3, [pc, #96]	; (800cddc <_Balloc+0x78>)
 800cd7c:	4818      	ldr	r0, [pc, #96]	; (800cde0 <_Balloc+0x7c>)
 800cd7e:	216b      	movs	r1, #107	; 0x6b
 800cd80:	f000 ff62 	bl	800dc48 <__assert_func>
 800cd84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd88:	6006      	str	r6, [r0, #0]
 800cd8a:	60c6      	str	r6, [r0, #12]
 800cd8c:	69e6      	ldr	r6, [r4, #28]
 800cd8e:	68f3      	ldr	r3, [r6, #12]
 800cd90:	b183      	cbz	r3, 800cdb4 <_Balloc+0x50>
 800cd92:	69e3      	ldr	r3, [r4, #28]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cd9a:	b9b8      	cbnz	r0, 800cdcc <_Balloc+0x68>
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	fa01 f605 	lsl.w	r6, r1, r5
 800cda2:	1d72      	adds	r2, r6, #5
 800cda4:	0092      	lsls	r2, r2, #2
 800cda6:	4620      	mov	r0, r4
 800cda8:	f000 ff6c 	bl	800dc84 <_calloc_r>
 800cdac:	b160      	cbz	r0, 800cdc8 <_Balloc+0x64>
 800cdae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdb2:	e00e      	b.n	800cdd2 <_Balloc+0x6e>
 800cdb4:	2221      	movs	r2, #33	; 0x21
 800cdb6:	2104      	movs	r1, #4
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f000 ff63 	bl	800dc84 <_calloc_r>
 800cdbe:	69e3      	ldr	r3, [r4, #28]
 800cdc0:	60f0      	str	r0, [r6, #12]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1e4      	bne.n	800cd92 <_Balloc+0x2e>
 800cdc8:	2000      	movs	r0, #0
 800cdca:	bd70      	pop	{r4, r5, r6, pc}
 800cdcc:	6802      	ldr	r2, [r0, #0]
 800cdce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdd8:	e7f7      	b.n	800cdca <_Balloc+0x66>
 800cdda:	bf00      	nop
 800cddc:	0800fd9d 	.word	0x0800fd9d
 800cde0:	0800fe1d 	.word	0x0800fe1d

0800cde4 <_Bfree>:
 800cde4:	b570      	push	{r4, r5, r6, lr}
 800cde6:	69c6      	ldr	r6, [r0, #28]
 800cde8:	4605      	mov	r5, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	b976      	cbnz	r6, 800ce0c <_Bfree+0x28>
 800cdee:	2010      	movs	r0, #16
 800cdf0:	f7fe f87a 	bl	800aee8 <malloc>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	61e8      	str	r0, [r5, #28]
 800cdf8:	b920      	cbnz	r0, 800ce04 <_Bfree+0x20>
 800cdfa:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <_Bfree+0x3c>)
 800cdfc:	4809      	ldr	r0, [pc, #36]	; (800ce24 <_Bfree+0x40>)
 800cdfe:	218f      	movs	r1, #143	; 0x8f
 800ce00:	f000 ff22 	bl	800dc48 <__assert_func>
 800ce04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce08:	6006      	str	r6, [r0, #0]
 800ce0a:	60c6      	str	r6, [r0, #12]
 800ce0c:	b13c      	cbz	r4, 800ce1e <_Bfree+0x3a>
 800ce0e:	69eb      	ldr	r3, [r5, #28]
 800ce10:	6862      	ldr	r2, [r4, #4]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce18:	6021      	str	r1, [r4, #0]
 800ce1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce1e:	bd70      	pop	{r4, r5, r6, pc}
 800ce20:	0800fd9d 	.word	0x0800fd9d
 800ce24:	0800fe1d 	.word	0x0800fe1d

0800ce28 <__multadd>:
 800ce28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce2c:	690d      	ldr	r5, [r1, #16]
 800ce2e:	4607      	mov	r7, r0
 800ce30:	460c      	mov	r4, r1
 800ce32:	461e      	mov	r6, r3
 800ce34:	f101 0c14 	add.w	ip, r1, #20
 800ce38:	2000      	movs	r0, #0
 800ce3a:	f8dc 3000 	ldr.w	r3, [ip]
 800ce3e:	b299      	uxth	r1, r3
 800ce40:	fb02 6101 	mla	r1, r2, r1, r6
 800ce44:	0c1e      	lsrs	r6, r3, #16
 800ce46:	0c0b      	lsrs	r3, r1, #16
 800ce48:	fb02 3306 	mla	r3, r2, r6, r3
 800ce4c:	b289      	uxth	r1, r1
 800ce4e:	3001      	adds	r0, #1
 800ce50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce54:	4285      	cmp	r5, r0
 800ce56:	f84c 1b04 	str.w	r1, [ip], #4
 800ce5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce5e:	dcec      	bgt.n	800ce3a <__multadd+0x12>
 800ce60:	b30e      	cbz	r6, 800cea6 <__multadd+0x7e>
 800ce62:	68a3      	ldr	r3, [r4, #8]
 800ce64:	42ab      	cmp	r3, r5
 800ce66:	dc19      	bgt.n	800ce9c <__multadd+0x74>
 800ce68:	6861      	ldr	r1, [r4, #4]
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	3101      	adds	r1, #1
 800ce6e:	f7ff ff79 	bl	800cd64 <_Balloc>
 800ce72:	4680      	mov	r8, r0
 800ce74:	b928      	cbnz	r0, 800ce82 <__multadd+0x5a>
 800ce76:	4602      	mov	r2, r0
 800ce78:	4b0c      	ldr	r3, [pc, #48]	; (800ceac <__multadd+0x84>)
 800ce7a:	480d      	ldr	r0, [pc, #52]	; (800ceb0 <__multadd+0x88>)
 800ce7c:	21ba      	movs	r1, #186	; 0xba
 800ce7e:	f000 fee3 	bl	800dc48 <__assert_func>
 800ce82:	6922      	ldr	r2, [r4, #16]
 800ce84:	3202      	adds	r2, #2
 800ce86:	f104 010c 	add.w	r1, r4, #12
 800ce8a:	0092      	lsls	r2, r2, #2
 800ce8c:	300c      	adds	r0, #12
 800ce8e:	f000 fecd 	bl	800dc2c <memcpy>
 800ce92:	4621      	mov	r1, r4
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7ff ffa5 	bl	800cde4 <_Bfree>
 800ce9a:	4644      	mov	r4, r8
 800ce9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cea0:	3501      	adds	r5, #1
 800cea2:	615e      	str	r6, [r3, #20]
 800cea4:	6125      	str	r5, [r4, #16]
 800cea6:	4620      	mov	r0, r4
 800cea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceac:	0800fe0c 	.word	0x0800fe0c
 800ceb0:	0800fe1d 	.word	0x0800fe1d

0800ceb4 <__hi0bits>:
 800ceb4:	0c03      	lsrs	r3, r0, #16
 800ceb6:	041b      	lsls	r3, r3, #16
 800ceb8:	b9d3      	cbnz	r3, 800cef0 <__hi0bits+0x3c>
 800ceba:	0400      	lsls	r0, r0, #16
 800cebc:	2310      	movs	r3, #16
 800cebe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cec2:	bf04      	itt	eq
 800cec4:	0200      	lsleq	r0, r0, #8
 800cec6:	3308      	addeq	r3, #8
 800cec8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cecc:	bf04      	itt	eq
 800cece:	0100      	lsleq	r0, r0, #4
 800ced0:	3304      	addeq	r3, #4
 800ced2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ced6:	bf04      	itt	eq
 800ced8:	0080      	lsleq	r0, r0, #2
 800ceda:	3302      	addeq	r3, #2
 800cedc:	2800      	cmp	r0, #0
 800cede:	db05      	blt.n	800ceec <__hi0bits+0x38>
 800cee0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cee4:	f103 0301 	add.w	r3, r3, #1
 800cee8:	bf08      	it	eq
 800ceea:	2320      	moveq	r3, #32
 800ceec:	4618      	mov	r0, r3
 800ceee:	4770      	bx	lr
 800cef0:	2300      	movs	r3, #0
 800cef2:	e7e4      	b.n	800cebe <__hi0bits+0xa>

0800cef4 <__lo0bits>:
 800cef4:	6803      	ldr	r3, [r0, #0]
 800cef6:	f013 0207 	ands.w	r2, r3, #7
 800cefa:	d00c      	beq.n	800cf16 <__lo0bits+0x22>
 800cefc:	07d9      	lsls	r1, r3, #31
 800cefe:	d422      	bmi.n	800cf46 <__lo0bits+0x52>
 800cf00:	079a      	lsls	r2, r3, #30
 800cf02:	bf49      	itett	mi
 800cf04:	085b      	lsrmi	r3, r3, #1
 800cf06:	089b      	lsrpl	r3, r3, #2
 800cf08:	6003      	strmi	r3, [r0, #0]
 800cf0a:	2201      	movmi	r2, #1
 800cf0c:	bf5c      	itt	pl
 800cf0e:	6003      	strpl	r3, [r0, #0]
 800cf10:	2202      	movpl	r2, #2
 800cf12:	4610      	mov	r0, r2
 800cf14:	4770      	bx	lr
 800cf16:	b299      	uxth	r1, r3
 800cf18:	b909      	cbnz	r1, 800cf1e <__lo0bits+0x2a>
 800cf1a:	0c1b      	lsrs	r3, r3, #16
 800cf1c:	2210      	movs	r2, #16
 800cf1e:	b2d9      	uxtb	r1, r3
 800cf20:	b909      	cbnz	r1, 800cf26 <__lo0bits+0x32>
 800cf22:	3208      	adds	r2, #8
 800cf24:	0a1b      	lsrs	r3, r3, #8
 800cf26:	0719      	lsls	r1, r3, #28
 800cf28:	bf04      	itt	eq
 800cf2a:	091b      	lsreq	r3, r3, #4
 800cf2c:	3204      	addeq	r2, #4
 800cf2e:	0799      	lsls	r1, r3, #30
 800cf30:	bf04      	itt	eq
 800cf32:	089b      	lsreq	r3, r3, #2
 800cf34:	3202      	addeq	r2, #2
 800cf36:	07d9      	lsls	r1, r3, #31
 800cf38:	d403      	bmi.n	800cf42 <__lo0bits+0x4e>
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	f102 0201 	add.w	r2, r2, #1
 800cf40:	d003      	beq.n	800cf4a <__lo0bits+0x56>
 800cf42:	6003      	str	r3, [r0, #0]
 800cf44:	e7e5      	b.n	800cf12 <__lo0bits+0x1e>
 800cf46:	2200      	movs	r2, #0
 800cf48:	e7e3      	b.n	800cf12 <__lo0bits+0x1e>
 800cf4a:	2220      	movs	r2, #32
 800cf4c:	e7e1      	b.n	800cf12 <__lo0bits+0x1e>
	...

0800cf50 <__i2b>:
 800cf50:	b510      	push	{r4, lr}
 800cf52:	460c      	mov	r4, r1
 800cf54:	2101      	movs	r1, #1
 800cf56:	f7ff ff05 	bl	800cd64 <_Balloc>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	b928      	cbnz	r0, 800cf6a <__i2b+0x1a>
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <__i2b+0x24>)
 800cf60:	4805      	ldr	r0, [pc, #20]	; (800cf78 <__i2b+0x28>)
 800cf62:	f240 1145 	movw	r1, #325	; 0x145
 800cf66:	f000 fe6f 	bl	800dc48 <__assert_func>
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	6144      	str	r4, [r0, #20]
 800cf6e:	6103      	str	r3, [r0, #16]
 800cf70:	bd10      	pop	{r4, pc}
 800cf72:	bf00      	nop
 800cf74:	0800fe0c 	.word	0x0800fe0c
 800cf78:	0800fe1d 	.word	0x0800fe1d

0800cf7c <__multiply>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	4691      	mov	r9, r2
 800cf82:	690a      	ldr	r2, [r1, #16]
 800cf84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	bfb8      	it	lt
 800cf8c:	460b      	movlt	r3, r1
 800cf8e:	460c      	mov	r4, r1
 800cf90:	bfbc      	itt	lt
 800cf92:	464c      	movlt	r4, r9
 800cf94:	4699      	movlt	r9, r3
 800cf96:	6927      	ldr	r7, [r4, #16]
 800cf98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	6861      	ldr	r1, [r4, #4]
 800cfa0:	eb07 060a 	add.w	r6, r7, sl
 800cfa4:	42b3      	cmp	r3, r6
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	bfb8      	it	lt
 800cfaa:	3101      	addlt	r1, #1
 800cfac:	f7ff feda 	bl	800cd64 <_Balloc>
 800cfb0:	b930      	cbnz	r0, 800cfc0 <__multiply+0x44>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	4b44      	ldr	r3, [pc, #272]	; (800d0c8 <__multiply+0x14c>)
 800cfb6:	4845      	ldr	r0, [pc, #276]	; (800d0cc <__multiply+0x150>)
 800cfb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cfbc:	f000 fe44 	bl	800dc48 <__assert_func>
 800cfc0:	f100 0514 	add.w	r5, r0, #20
 800cfc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfc8:	462b      	mov	r3, r5
 800cfca:	2200      	movs	r2, #0
 800cfcc:	4543      	cmp	r3, r8
 800cfce:	d321      	bcc.n	800d014 <__multiply+0x98>
 800cfd0:	f104 0314 	add.w	r3, r4, #20
 800cfd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cfd8:	f109 0314 	add.w	r3, r9, #20
 800cfdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cfe0:	9202      	str	r2, [sp, #8]
 800cfe2:	1b3a      	subs	r2, r7, r4
 800cfe4:	3a15      	subs	r2, #21
 800cfe6:	f022 0203 	bic.w	r2, r2, #3
 800cfea:	3204      	adds	r2, #4
 800cfec:	f104 0115 	add.w	r1, r4, #21
 800cff0:	428f      	cmp	r7, r1
 800cff2:	bf38      	it	cc
 800cff4:	2204      	movcc	r2, #4
 800cff6:	9201      	str	r2, [sp, #4]
 800cff8:	9a02      	ldr	r2, [sp, #8]
 800cffa:	9303      	str	r3, [sp, #12]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d80c      	bhi.n	800d01a <__multiply+0x9e>
 800d000:	2e00      	cmp	r6, #0
 800d002:	dd03      	ble.n	800d00c <__multiply+0x90>
 800d004:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d05b      	beq.n	800d0c4 <__multiply+0x148>
 800d00c:	6106      	str	r6, [r0, #16]
 800d00e:	b005      	add	sp, #20
 800d010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d014:	f843 2b04 	str.w	r2, [r3], #4
 800d018:	e7d8      	b.n	800cfcc <__multiply+0x50>
 800d01a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d01e:	f1ba 0f00 	cmp.w	sl, #0
 800d022:	d024      	beq.n	800d06e <__multiply+0xf2>
 800d024:	f104 0e14 	add.w	lr, r4, #20
 800d028:	46a9      	mov	r9, r5
 800d02a:	f04f 0c00 	mov.w	ip, #0
 800d02e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d032:	f8d9 1000 	ldr.w	r1, [r9]
 800d036:	fa1f fb82 	uxth.w	fp, r2
 800d03a:	b289      	uxth	r1, r1
 800d03c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d040:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d044:	f8d9 2000 	ldr.w	r2, [r9]
 800d048:	4461      	add	r1, ip
 800d04a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d04e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d052:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d056:	b289      	uxth	r1, r1
 800d058:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d05c:	4577      	cmp	r7, lr
 800d05e:	f849 1b04 	str.w	r1, [r9], #4
 800d062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d066:	d8e2      	bhi.n	800d02e <__multiply+0xb2>
 800d068:	9a01      	ldr	r2, [sp, #4]
 800d06a:	f845 c002 	str.w	ip, [r5, r2]
 800d06e:	9a03      	ldr	r2, [sp, #12]
 800d070:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d074:	3304      	adds	r3, #4
 800d076:	f1b9 0f00 	cmp.w	r9, #0
 800d07a:	d021      	beq.n	800d0c0 <__multiply+0x144>
 800d07c:	6829      	ldr	r1, [r5, #0]
 800d07e:	f104 0c14 	add.w	ip, r4, #20
 800d082:	46ae      	mov	lr, r5
 800d084:	f04f 0a00 	mov.w	sl, #0
 800d088:	f8bc b000 	ldrh.w	fp, [ip]
 800d08c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d090:	fb09 220b 	mla	r2, r9, fp, r2
 800d094:	4452      	add	r2, sl
 800d096:	b289      	uxth	r1, r1
 800d098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d09c:	f84e 1b04 	str.w	r1, [lr], #4
 800d0a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d0a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0a8:	f8be 1000 	ldrh.w	r1, [lr]
 800d0ac:	fb09 110a 	mla	r1, r9, sl, r1
 800d0b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d0b4:	4567      	cmp	r7, ip
 800d0b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d0ba:	d8e5      	bhi.n	800d088 <__multiply+0x10c>
 800d0bc:	9a01      	ldr	r2, [sp, #4]
 800d0be:	50a9      	str	r1, [r5, r2]
 800d0c0:	3504      	adds	r5, #4
 800d0c2:	e799      	b.n	800cff8 <__multiply+0x7c>
 800d0c4:	3e01      	subs	r6, #1
 800d0c6:	e79b      	b.n	800d000 <__multiply+0x84>
 800d0c8:	0800fe0c 	.word	0x0800fe0c
 800d0cc:	0800fe1d 	.word	0x0800fe1d

0800d0d0 <__pow5mult>:
 800d0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0d4:	4615      	mov	r5, r2
 800d0d6:	f012 0203 	ands.w	r2, r2, #3
 800d0da:	4606      	mov	r6, r0
 800d0dc:	460f      	mov	r7, r1
 800d0de:	d007      	beq.n	800d0f0 <__pow5mult+0x20>
 800d0e0:	4c25      	ldr	r4, [pc, #148]	; (800d178 <__pow5mult+0xa8>)
 800d0e2:	3a01      	subs	r2, #1
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0ea:	f7ff fe9d 	bl	800ce28 <__multadd>
 800d0ee:	4607      	mov	r7, r0
 800d0f0:	10ad      	asrs	r5, r5, #2
 800d0f2:	d03d      	beq.n	800d170 <__pow5mult+0xa0>
 800d0f4:	69f4      	ldr	r4, [r6, #28]
 800d0f6:	b97c      	cbnz	r4, 800d118 <__pow5mult+0x48>
 800d0f8:	2010      	movs	r0, #16
 800d0fa:	f7fd fef5 	bl	800aee8 <malloc>
 800d0fe:	4602      	mov	r2, r0
 800d100:	61f0      	str	r0, [r6, #28]
 800d102:	b928      	cbnz	r0, 800d110 <__pow5mult+0x40>
 800d104:	4b1d      	ldr	r3, [pc, #116]	; (800d17c <__pow5mult+0xac>)
 800d106:	481e      	ldr	r0, [pc, #120]	; (800d180 <__pow5mult+0xb0>)
 800d108:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d10c:	f000 fd9c 	bl	800dc48 <__assert_func>
 800d110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d114:	6004      	str	r4, [r0, #0]
 800d116:	60c4      	str	r4, [r0, #12]
 800d118:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d11c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d120:	b94c      	cbnz	r4, 800d136 <__pow5mult+0x66>
 800d122:	f240 2171 	movw	r1, #625	; 0x271
 800d126:	4630      	mov	r0, r6
 800d128:	f7ff ff12 	bl	800cf50 <__i2b>
 800d12c:	2300      	movs	r3, #0
 800d12e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d132:	4604      	mov	r4, r0
 800d134:	6003      	str	r3, [r0, #0]
 800d136:	f04f 0900 	mov.w	r9, #0
 800d13a:	07eb      	lsls	r3, r5, #31
 800d13c:	d50a      	bpl.n	800d154 <__pow5mult+0x84>
 800d13e:	4639      	mov	r1, r7
 800d140:	4622      	mov	r2, r4
 800d142:	4630      	mov	r0, r6
 800d144:	f7ff ff1a 	bl	800cf7c <__multiply>
 800d148:	4639      	mov	r1, r7
 800d14a:	4680      	mov	r8, r0
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7ff fe49 	bl	800cde4 <_Bfree>
 800d152:	4647      	mov	r7, r8
 800d154:	106d      	asrs	r5, r5, #1
 800d156:	d00b      	beq.n	800d170 <__pow5mult+0xa0>
 800d158:	6820      	ldr	r0, [r4, #0]
 800d15a:	b938      	cbnz	r0, 800d16c <__pow5mult+0x9c>
 800d15c:	4622      	mov	r2, r4
 800d15e:	4621      	mov	r1, r4
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff ff0b 	bl	800cf7c <__multiply>
 800d166:	6020      	str	r0, [r4, #0]
 800d168:	f8c0 9000 	str.w	r9, [r0]
 800d16c:	4604      	mov	r4, r0
 800d16e:	e7e4      	b.n	800d13a <__pow5mult+0x6a>
 800d170:	4638      	mov	r0, r7
 800d172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d176:	bf00      	nop
 800d178:	0800ff68 	.word	0x0800ff68
 800d17c:	0800fd9d 	.word	0x0800fd9d
 800d180:	0800fe1d 	.word	0x0800fe1d

0800d184 <__lshift>:
 800d184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d188:	460c      	mov	r4, r1
 800d18a:	6849      	ldr	r1, [r1, #4]
 800d18c:	6923      	ldr	r3, [r4, #16]
 800d18e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d192:	68a3      	ldr	r3, [r4, #8]
 800d194:	4607      	mov	r7, r0
 800d196:	4691      	mov	r9, r2
 800d198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d19c:	f108 0601 	add.w	r6, r8, #1
 800d1a0:	42b3      	cmp	r3, r6
 800d1a2:	db0b      	blt.n	800d1bc <__lshift+0x38>
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	f7ff fddd 	bl	800cd64 <_Balloc>
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	b948      	cbnz	r0, 800d1c2 <__lshift+0x3e>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	4b28      	ldr	r3, [pc, #160]	; (800d254 <__lshift+0xd0>)
 800d1b2:	4829      	ldr	r0, [pc, #164]	; (800d258 <__lshift+0xd4>)
 800d1b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d1b8:	f000 fd46 	bl	800dc48 <__assert_func>
 800d1bc:	3101      	adds	r1, #1
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	e7ee      	b.n	800d1a0 <__lshift+0x1c>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	f100 0114 	add.w	r1, r0, #20
 800d1c8:	f100 0210 	add.w	r2, r0, #16
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	4553      	cmp	r3, sl
 800d1d0:	db33      	blt.n	800d23a <__lshift+0xb6>
 800d1d2:	6920      	ldr	r0, [r4, #16]
 800d1d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1d8:	f104 0314 	add.w	r3, r4, #20
 800d1dc:	f019 091f 	ands.w	r9, r9, #31
 800d1e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1e8:	d02b      	beq.n	800d242 <__lshift+0xbe>
 800d1ea:	f1c9 0e20 	rsb	lr, r9, #32
 800d1ee:	468a      	mov	sl, r1
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	6818      	ldr	r0, [r3, #0]
 800d1f4:	fa00 f009 	lsl.w	r0, r0, r9
 800d1f8:	4310      	orrs	r0, r2
 800d1fa:	f84a 0b04 	str.w	r0, [sl], #4
 800d1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d202:	459c      	cmp	ip, r3
 800d204:	fa22 f20e 	lsr.w	r2, r2, lr
 800d208:	d8f3      	bhi.n	800d1f2 <__lshift+0x6e>
 800d20a:	ebac 0304 	sub.w	r3, ip, r4
 800d20e:	3b15      	subs	r3, #21
 800d210:	f023 0303 	bic.w	r3, r3, #3
 800d214:	3304      	adds	r3, #4
 800d216:	f104 0015 	add.w	r0, r4, #21
 800d21a:	4584      	cmp	ip, r0
 800d21c:	bf38      	it	cc
 800d21e:	2304      	movcc	r3, #4
 800d220:	50ca      	str	r2, [r1, r3]
 800d222:	b10a      	cbz	r2, 800d228 <__lshift+0xa4>
 800d224:	f108 0602 	add.w	r6, r8, #2
 800d228:	3e01      	subs	r6, #1
 800d22a:	4638      	mov	r0, r7
 800d22c:	612e      	str	r6, [r5, #16]
 800d22e:	4621      	mov	r1, r4
 800d230:	f7ff fdd8 	bl	800cde4 <_Bfree>
 800d234:	4628      	mov	r0, r5
 800d236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d23e:	3301      	adds	r3, #1
 800d240:	e7c5      	b.n	800d1ce <__lshift+0x4a>
 800d242:	3904      	subs	r1, #4
 800d244:	f853 2b04 	ldr.w	r2, [r3], #4
 800d248:	f841 2f04 	str.w	r2, [r1, #4]!
 800d24c:	459c      	cmp	ip, r3
 800d24e:	d8f9      	bhi.n	800d244 <__lshift+0xc0>
 800d250:	e7ea      	b.n	800d228 <__lshift+0xa4>
 800d252:	bf00      	nop
 800d254:	0800fe0c 	.word	0x0800fe0c
 800d258:	0800fe1d 	.word	0x0800fe1d

0800d25c <__mcmp>:
 800d25c:	b530      	push	{r4, r5, lr}
 800d25e:	6902      	ldr	r2, [r0, #16]
 800d260:	690c      	ldr	r4, [r1, #16]
 800d262:	1b12      	subs	r2, r2, r4
 800d264:	d10e      	bne.n	800d284 <__mcmp+0x28>
 800d266:	f100 0314 	add.w	r3, r0, #20
 800d26a:	3114      	adds	r1, #20
 800d26c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d270:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d274:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d278:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d27c:	42a5      	cmp	r5, r4
 800d27e:	d003      	beq.n	800d288 <__mcmp+0x2c>
 800d280:	d305      	bcc.n	800d28e <__mcmp+0x32>
 800d282:	2201      	movs	r2, #1
 800d284:	4610      	mov	r0, r2
 800d286:	bd30      	pop	{r4, r5, pc}
 800d288:	4283      	cmp	r3, r0
 800d28a:	d3f3      	bcc.n	800d274 <__mcmp+0x18>
 800d28c:	e7fa      	b.n	800d284 <__mcmp+0x28>
 800d28e:	f04f 32ff 	mov.w	r2, #4294967295
 800d292:	e7f7      	b.n	800d284 <__mcmp+0x28>

0800d294 <__mdiff>:
 800d294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	460c      	mov	r4, r1
 800d29a:	4606      	mov	r6, r0
 800d29c:	4611      	mov	r1, r2
 800d29e:	4620      	mov	r0, r4
 800d2a0:	4690      	mov	r8, r2
 800d2a2:	f7ff ffdb 	bl	800d25c <__mcmp>
 800d2a6:	1e05      	subs	r5, r0, #0
 800d2a8:	d110      	bne.n	800d2cc <__mdiff+0x38>
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7ff fd59 	bl	800cd64 <_Balloc>
 800d2b2:	b930      	cbnz	r0, 800d2c2 <__mdiff+0x2e>
 800d2b4:	4b3a      	ldr	r3, [pc, #232]	; (800d3a0 <__mdiff+0x10c>)
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	f240 2137 	movw	r1, #567	; 0x237
 800d2bc:	4839      	ldr	r0, [pc, #228]	; (800d3a4 <__mdiff+0x110>)
 800d2be:	f000 fcc3 	bl	800dc48 <__assert_func>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2cc:	bfa4      	itt	ge
 800d2ce:	4643      	movge	r3, r8
 800d2d0:	46a0      	movge	r8, r4
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d2d8:	bfa6      	itte	ge
 800d2da:	461c      	movge	r4, r3
 800d2dc:	2500      	movge	r5, #0
 800d2de:	2501      	movlt	r5, #1
 800d2e0:	f7ff fd40 	bl	800cd64 <_Balloc>
 800d2e4:	b920      	cbnz	r0, 800d2f0 <__mdiff+0x5c>
 800d2e6:	4b2e      	ldr	r3, [pc, #184]	; (800d3a0 <__mdiff+0x10c>)
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	f240 2145 	movw	r1, #581	; 0x245
 800d2ee:	e7e5      	b.n	800d2bc <__mdiff+0x28>
 800d2f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d2f4:	6926      	ldr	r6, [r4, #16]
 800d2f6:	60c5      	str	r5, [r0, #12]
 800d2f8:	f104 0914 	add.w	r9, r4, #20
 800d2fc:	f108 0514 	add.w	r5, r8, #20
 800d300:	f100 0e14 	add.w	lr, r0, #20
 800d304:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d308:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d30c:	f108 0210 	add.w	r2, r8, #16
 800d310:	46f2      	mov	sl, lr
 800d312:	2100      	movs	r1, #0
 800d314:	f859 3b04 	ldr.w	r3, [r9], #4
 800d318:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d31c:	fa11 f88b 	uxtah	r8, r1, fp
 800d320:	b299      	uxth	r1, r3
 800d322:	0c1b      	lsrs	r3, r3, #16
 800d324:	eba8 0801 	sub.w	r8, r8, r1
 800d328:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d32c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d330:	fa1f f888 	uxth.w	r8, r8
 800d334:	1419      	asrs	r1, r3, #16
 800d336:	454e      	cmp	r6, r9
 800d338:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d33c:	f84a 3b04 	str.w	r3, [sl], #4
 800d340:	d8e8      	bhi.n	800d314 <__mdiff+0x80>
 800d342:	1b33      	subs	r3, r6, r4
 800d344:	3b15      	subs	r3, #21
 800d346:	f023 0303 	bic.w	r3, r3, #3
 800d34a:	3304      	adds	r3, #4
 800d34c:	3415      	adds	r4, #21
 800d34e:	42a6      	cmp	r6, r4
 800d350:	bf38      	it	cc
 800d352:	2304      	movcc	r3, #4
 800d354:	441d      	add	r5, r3
 800d356:	4473      	add	r3, lr
 800d358:	469e      	mov	lr, r3
 800d35a:	462e      	mov	r6, r5
 800d35c:	4566      	cmp	r6, ip
 800d35e:	d30e      	bcc.n	800d37e <__mdiff+0xea>
 800d360:	f10c 0203 	add.w	r2, ip, #3
 800d364:	1b52      	subs	r2, r2, r5
 800d366:	f022 0203 	bic.w	r2, r2, #3
 800d36a:	3d03      	subs	r5, #3
 800d36c:	45ac      	cmp	ip, r5
 800d36e:	bf38      	it	cc
 800d370:	2200      	movcc	r2, #0
 800d372:	4413      	add	r3, r2
 800d374:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d378:	b17a      	cbz	r2, 800d39a <__mdiff+0x106>
 800d37a:	6107      	str	r7, [r0, #16]
 800d37c:	e7a4      	b.n	800d2c8 <__mdiff+0x34>
 800d37e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d382:	fa11 f288 	uxtah	r2, r1, r8
 800d386:	1414      	asrs	r4, r2, #16
 800d388:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d38c:	b292      	uxth	r2, r2
 800d38e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d392:	f84e 2b04 	str.w	r2, [lr], #4
 800d396:	1421      	asrs	r1, r4, #16
 800d398:	e7e0      	b.n	800d35c <__mdiff+0xc8>
 800d39a:	3f01      	subs	r7, #1
 800d39c:	e7ea      	b.n	800d374 <__mdiff+0xe0>
 800d39e:	bf00      	nop
 800d3a0:	0800fe0c 	.word	0x0800fe0c
 800d3a4:	0800fe1d 	.word	0x0800fe1d

0800d3a8 <__d2b>:
 800d3a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	2101      	movs	r1, #1
 800d3b0:	ec59 8b10 	vmov	r8, r9, d0
 800d3b4:	4616      	mov	r6, r2
 800d3b6:	f7ff fcd5 	bl	800cd64 <_Balloc>
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	b930      	cbnz	r0, 800d3cc <__d2b+0x24>
 800d3be:	4602      	mov	r2, r0
 800d3c0:	4b24      	ldr	r3, [pc, #144]	; (800d454 <__d2b+0xac>)
 800d3c2:	4825      	ldr	r0, [pc, #148]	; (800d458 <__d2b+0xb0>)
 800d3c4:	f240 310f 	movw	r1, #783	; 0x30f
 800d3c8:	f000 fc3e 	bl	800dc48 <__assert_func>
 800d3cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d3d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3d4:	bb2d      	cbnz	r5, 800d422 <__d2b+0x7a>
 800d3d6:	9301      	str	r3, [sp, #4]
 800d3d8:	f1b8 0300 	subs.w	r3, r8, #0
 800d3dc:	d026      	beq.n	800d42c <__d2b+0x84>
 800d3de:	4668      	mov	r0, sp
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	f7ff fd87 	bl	800cef4 <__lo0bits>
 800d3e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3ea:	b1e8      	cbz	r0, 800d428 <__d2b+0x80>
 800d3ec:	f1c0 0320 	rsb	r3, r0, #32
 800d3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3f4:	430b      	orrs	r3, r1
 800d3f6:	40c2      	lsrs	r2, r0
 800d3f8:	6163      	str	r3, [r4, #20]
 800d3fa:	9201      	str	r2, [sp, #4]
 800d3fc:	9b01      	ldr	r3, [sp, #4]
 800d3fe:	61a3      	str	r3, [r4, #24]
 800d400:	2b00      	cmp	r3, #0
 800d402:	bf14      	ite	ne
 800d404:	2202      	movne	r2, #2
 800d406:	2201      	moveq	r2, #1
 800d408:	6122      	str	r2, [r4, #16]
 800d40a:	b1bd      	cbz	r5, 800d43c <__d2b+0x94>
 800d40c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d410:	4405      	add	r5, r0
 800d412:	603d      	str	r5, [r7, #0]
 800d414:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d418:	6030      	str	r0, [r6, #0]
 800d41a:	4620      	mov	r0, r4
 800d41c:	b003      	add	sp, #12
 800d41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d426:	e7d6      	b.n	800d3d6 <__d2b+0x2e>
 800d428:	6161      	str	r1, [r4, #20]
 800d42a:	e7e7      	b.n	800d3fc <__d2b+0x54>
 800d42c:	a801      	add	r0, sp, #4
 800d42e:	f7ff fd61 	bl	800cef4 <__lo0bits>
 800d432:	9b01      	ldr	r3, [sp, #4]
 800d434:	6163      	str	r3, [r4, #20]
 800d436:	3020      	adds	r0, #32
 800d438:	2201      	movs	r2, #1
 800d43a:	e7e5      	b.n	800d408 <__d2b+0x60>
 800d43c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d440:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d444:	6038      	str	r0, [r7, #0]
 800d446:	6918      	ldr	r0, [r3, #16]
 800d448:	f7ff fd34 	bl	800ceb4 <__hi0bits>
 800d44c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d450:	e7e2      	b.n	800d418 <__d2b+0x70>
 800d452:	bf00      	nop
 800d454:	0800fe0c 	.word	0x0800fe0c
 800d458:	0800fe1d 	.word	0x0800fe1d

0800d45c <__ssputs_r>:
 800d45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d460:	688e      	ldr	r6, [r1, #8]
 800d462:	461f      	mov	r7, r3
 800d464:	42be      	cmp	r6, r7
 800d466:	680b      	ldr	r3, [r1, #0]
 800d468:	4682      	mov	sl, r0
 800d46a:	460c      	mov	r4, r1
 800d46c:	4690      	mov	r8, r2
 800d46e:	d82c      	bhi.n	800d4ca <__ssputs_r+0x6e>
 800d470:	898a      	ldrh	r2, [r1, #12]
 800d472:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d476:	d026      	beq.n	800d4c6 <__ssputs_r+0x6a>
 800d478:	6965      	ldr	r5, [r4, #20]
 800d47a:	6909      	ldr	r1, [r1, #16]
 800d47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d480:	eba3 0901 	sub.w	r9, r3, r1
 800d484:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d488:	1c7b      	adds	r3, r7, #1
 800d48a:	444b      	add	r3, r9
 800d48c:	106d      	asrs	r5, r5, #1
 800d48e:	429d      	cmp	r5, r3
 800d490:	bf38      	it	cc
 800d492:	461d      	movcc	r5, r3
 800d494:	0553      	lsls	r3, r2, #21
 800d496:	d527      	bpl.n	800d4e8 <__ssputs_r+0x8c>
 800d498:	4629      	mov	r1, r5
 800d49a:	f7fd fd4d 	bl	800af38 <_malloc_r>
 800d49e:	4606      	mov	r6, r0
 800d4a0:	b360      	cbz	r0, 800d4fc <__ssputs_r+0xa0>
 800d4a2:	6921      	ldr	r1, [r4, #16]
 800d4a4:	464a      	mov	r2, r9
 800d4a6:	f000 fbc1 	bl	800dc2c <memcpy>
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4b4:	81a3      	strh	r3, [r4, #12]
 800d4b6:	6126      	str	r6, [r4, #16]
 800d4b8:	6165      	str	r5, [r4, #20]
 800d4ba:	444e      	add	r6, r9
 800d4bc:	eba5 0509 	sub.w	r5, r5, r9
 800d4c0:	6026      	str	r6, [r4, #0]
 800d4c2:	60a5      	str	r5, [r4, #8]
 800d4c4:	463e      	mov	r6, r7
 800d4c6:	42be      	cmp	r6, r7
 800d4c8:	d900      	bls.n	800d4cc <__ssputs_r+0x70>
 800d4ca:	463e      	mov	r6, r7
 800d4cc:	6820      	ldr	r0, [r4, #0]
 800d4ce:	4632      	mov	r2, r6
 800d4d0:	4641      	mov	r1, r8
 800d4d2:	f000 fb6f 	bl	800dbb4 <memmove>
 800d4d6:	68a3      	ldr	r3, [r4, #8]
 800d4d8:	1b9b      	subs	r3, r3, r6
 800d4da:	60a3      	str	r3, [r4, #8]
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	4433      	add	r3, r6
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e8:	462a      	mov	r2, r5
 800d4ea:	f000 fbf3 	bl	800dcd4 <_realloc_r>
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d1e0      	bne.n	800d4b6 <__ssputs_r+0x5a>
 800d4f4:	6921      	ldr	r1, [r4, #16]
 800d4f6:	4650      	mov	r0, sl
 800d4f8:	f7ff fbe8 	bl	800cccc <_free_r>
 800d4fc:	230c      	movs	r3, #12
 800d4fe:	f8ca 3000 	str.w	r3, [sl]
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d508:	81a3      	strh	r3, [r4, #12]
 800d50a:	f04f 30ff 	mov.w	r0, #4294967295
 800d50e:	e7e9      	b.n	800d4e4 <__ssputs_r+0x88>

0800d510 <_svfiprintf_r>:
 800d510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	4698      	mov	r8, r3
 800d516:	898b      	ldrh	r3, [r1, #12]
 800d518:	061b      	lsls	r3, r3, #24
 800d51a:	b09d      	sub	sp, #116	; 0x74
 800d51c:	4607      	mov	r7, r0
 800d51e:	460d      	mov	r5, r1
 800d520:	4614      	mov	r4, r2
 800d522:	d50e      	bpl.n	800d542 <_svfiprintf_r+0x32>
 800d524:	690b      	ldr	r3, [r1, #16]
 800d526:	b963      	cbnz	r3, 800d542 <_svfiprintf_r+0x32>
 800d528:	2140      	movs	r1, #64	; 0x40
 800d52a:	f7fd fd05 	bl	800af38 <_malloc_r>
 800d52e:	6028      	str	r0, [r5, #0]
 800d530:	6128      	str	r0, [r5, #16]
 800d532:	b920      	cbnz	r0, 800d53e <_svfiprintf_r+0x2e>
 800d534:	230c      	movs	r3, #12
 800d536:	603b      	str	r3, [r7, #0]
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e0d0      	b.n	800d6e0 <_svfiprintf_r+0x1d0>
 800d53e:	2340      	movs	r3, #64	; 0x40
 800d540:	616b      	str	r3, [r5, #20]
 800d542:	2300      	movs	r3, #0
 800d544:	9309      	str	r3, [sp, #36]	; 0x24
 800d546:	2320      	movs	r3, #32
 800d548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d550:	2330      	movs	r3, #48	; 0x30
 800d552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d6f8 <_svfiprintf_r+0x1e8>
 800d556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d55a:	f04f 0901 	mov.w	r9, #1
 800d55e:	4623      	mov	r3, r4
 800d560:	469a      	mov	sl, r3
 800d562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d566:	b10a      	cbz	r2, 800d56c <_svfiprintf_r+0x5c>
 800d568:	2a25      	cmp	r2, #37	; 0x25
 800d56a:	d1f9      	bne.n	800d560 <_svfiprintf_r+0x50>
 800d56c:	ebba 0b04 	subs.w	fp, sl, r4
 800d570:	d00b      	beq.n	800d58a <_svfiprintf_r+0x7a>
 800d572:	465b      	mov	r3, fp
 800d574:	4622      	mov	r2, r4
 800d576:	4629      	mov	r1, r5
 800d578:	4638      	mov	r0, r7
 800d57a:	f7ff ff6f 	bl	800d45c <__ssputs_r>
 800d57e:	3001      	adds	r0, #1
 800d580:	f000 80a9 	beq.w	800d6d6 <_svfiprintf_r+0x1c6>
 800d584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d586:	445a      	add	r2, fp
 800d588:	9209      	str	r2, [sp, #36]	; 0x24
 800d58a:	f89a 3000 	ldrb.w	r3, [sl]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 80a1 	beq.w	800d6d6 <_svfiprintf_r+0x1c6>
 800d594:	2300      	movs	r3, #0
 800d596:	f04f 32ff 	mov.w	r2, #4294967295
 800d59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d59e:	f10a 0a01 	add.w	sl, sl, #1
 800d5a2:	9304      	str	r3, [sp, #16]
 800d5a4:	9307      	str	r3, [sp, #28]
 800d5a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5aa:	931a      	str	r3, [sp, #104]	; 0x68
 800d5ac:	4654      	mov	r4, sl
 800d5ae:	2205      	movs	r2, #5
 800d5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5b4:	4850      	ldr	r0, [pc, #320]	; (800d6f8 <_svfiprintf_r+0x1e8>)
 800d5b6:	f7f2 fe33 	bl	8000220 <memchr>
 800d5ba:	9a04      	ldr	r2, [sp, #16]
 800d5bc:	b9d8      	cbnz	r0, 800d5f6 <_svfiprintf_r+0xe6>
 800d5be:	06d0      	lsls	r0, r2, #27
 800d5c0:	bf44      	itt	mi
 800d5c2:	2320      	movmi	r3, #32
 800d5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5c8:	0711      	lsls	r1, r2, #28
 800d5ca:	bf44      	itt	mi
 800d5cc:	232b      	movmi	r3, #43	; 0x2b
 800d5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d5d8:	d015      	beq.n	800d606 <_svfiprintf_r+0xf6>
 800d5da:	9a07      	ldr	r2, [sp, #28]
 800d5dc:	4654      	mov	r4, sl
 800d5de:	2000      	movs	r0, #0
 800d5e0:	f04f 0c0a 	mov.w	ip, #10
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5ea:	3b30      	subs	r3, #48	; 0x30
 800d5ec:	2b09      	cmp	r3, #9
 800d5ee:	d94d      	bls.n	800d68c <_svfiprintf_r+0x17c>
 800d5f0:	b1b0      	cbz	r0, 800d620 <_svfiprintf_r+0x110>
 800d5f2:	9207      	str	r2, [sp, #28]
 800d5f4:	e014      	b.n	800d620 <_svfiprintf_r+0x110>
 800d5f6:	eba0 0308 	sub.w	r3, r0, r8
 800d5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d5fe:	4313      	orrs	r3, r2
 800d600:	9304      	str	r3, [sp, #16]
 800d602:	46a2      	mov	sl, r4
 800d604:	e7d2      	b.n	800d5ac <_svfiprintf_r+0x9c>
 800d606:	9b03      	ldr	r3, [sp, #12]
 800d608:	1d19      	adds	r1, r3, #4
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	9103      	str	r1, [sp, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	bfbb      	ittet	lt
 800d612:	425b      	neglt	r3, r3
 800d614:	f042 0202 	orrlt.w	r2, r2, #2
 800d618:	9307      	strge	r3, [sp, #28]
 800d61a:	9307      	strlt	r3, [sp, #28]
 800d61c:	bfb8      	it	lt
 800d61e:	9204      	strlt	r2, [sp, #16]
 800d620:	7823      	ldrb	r3, [r4, #0]
 800d622:	2b2e      	cmp	r3, #46	; 0x2e
 800d624:	d10c      	bne.n	800d640 <_svfiprintf_r+0x130>
 800d626:	7863      	ldrb	r3, [r4, #1]
 800d628:	2b2a      	cmp	r3, #42	; 0x2a
 800d62a:	d134      	bne.n	800d696 <_svfiprintf_r+0x186>
 800d62c:	9b03      	ldr	r3, [sp, #12]
 800d62e:	1d1a      	adds	r2, r3, #4
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	9203      	str	r2, [sp, #12]
 800d634:	2b00      	cmp	r3, #0
 800d636:	bfb8      	it	lt
 800d638:	f04f 33ff 	movlt.w	r3, #4294967295
 800d63c:	3402      	adds	r4, #2
 800d63e:	9305      	str	r3, [sp, #20]
 800d640:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d708 <_svfiprintf_r+0x1f8>
 800d644:	7821      	ldrb	r1, [r4, #0]
 800d646:	2203      	movs	r2, #3
 800d648:	4650      	mov	r0, sl
 800d64a:	f7f2 fde9 	bl	8000220 <memchr>
 800d64e:	b138      	cbz	r0, 800d660 <_svfiprintf_r+0x150>
 800d650:	9b04      	ldr	r3, [sp, #16]
 800d652:	eba0 000a 	sub.w	r0, r0, sl
 800d656:	2240      	movs	r2, #64	; 0x40
 800d658:	4082      	lsls	r2, r0
 800d65a:	4313      	orrs	r3, r2
 800d65c:	3401      	adds	r4, #1
 800d65e:	9304      	str	r3, [sp, #16]
 800d660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d664:	4825      	ldr	r0, [pc, #148]	; (800d6fc <_svfiprintf_r+0x1ec>)
 800d666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d66a:	2206      	movs	r2, #6
 800d66c:	f7f2 fdd8 	bl	8000220 <memchr>
 800d670:	2800      	cmp	r0, #0
 800d672:	d038      	beq.n	800d6e6 <_svfiprintf_r+0x1d6>
 800d674:	4b22      	ldr	r3, [pc, #136]	; (800d700 <_svfiprintf_r+0x1f0>)
 800d676:	bb1b      	cbnz	r3, 800d6c0 <_svfiprintf_r+0x1b0>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	3307      	adds	r3, #7
 800d67c:	f023 0307 	bic.w	r3, r3, #7
 800d680:	3308      	adds	r3, #8
 800d682:	9303      	str	r3, [sp, #12]
 800d684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d686:	4433      	add	r3, r6
 800d688:	9309      	str	r3, [sp, #36]	; 0x24
 800d68a:	e768      	b.n	800d55e <_svfiprintf_r+0x4e>
 800d68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d690:	460c      	mov	r4, r1
 800d692:	2001      	movs	r0, #1
 800d694:	e7a6      	b.n	800d5e4 <_svfiprintf_r+0xd4>
 800d696:	2300      	movs	r3, #0
 800d698:	3401      	adds	r4, #1
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	4619      	mov	r1, r3
 800d69e:	f04f 0c0a 	mov.w	ip, #10
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6a8:	3a30      	subs	r2, #48	; 0x30
 800d6aa:	2a09      	cmp	r2, #9
 800d6ac:	d903      	bls.n	800d6b6 <_svfiprintf_r+0x1a6>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0c6      	beq.n	800d640 <_svfiprintf_r+0x130>
 800d6b2:	9105      	str	r1, [sp, #20]
 800d6b4:	e7c4      	b.n	800d640 <_svfiprintf_r+0x130>
 800d6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e7f0      	b.n	800d6a2 <_svfiprintf_r+0x192>
 800d6c0:	ab03      	add	r3, sp, #12
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	4b0f      	ldr	r3, [pc, #60]	; (800d704 <_svfiprintf_r+0x1f4>)
 800d6c8:	a904      	add	r1, sp, #16
 800d6ca:	4638      	mov	r0, r7
 800d6cc:	f7fd fd60 	bl	800b190 <_printf_float>
 800d6d0:	1c42      	adds	r2, r0, #1
 800d6d2:	4606      	mov	r6, r0
 800d6d4:	d1d6      	bne.n	800d684 <_svfiprintf_r+0x174>
 800d6d6:	89ab      	ldrh	r3, [r5, #12]
 800d6d8:	065b      	lsls	r3, r3, #25
 800d6da:	f53f af2d 	bmi.w	800d538 <_svfiprintf_r+0x28>
 800d6de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6e0:	b01d      	add	sp, #116	; 0x74
 800d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e6:	ab03      	add	r3, sp, #12
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	462a      	mov	r2, r5
 800d6ec:	4b05      	ldr	r3, [pc, #20]	; (800d704 <_svfiprintf_r+0x1f4>)
 800d6ee:	a904      	add	r1, sp, #16
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7fd fff1 	bl	800b6d8 <_printf_i>
 800d6f6:	e7eb      	b.n	800d6d0 <_svfiprintf_r+0x1c0>
 800d6f8:	0800ff74 	.word	0x0800ff74
 800d6fc:	0800ff7e 	.word	0x0800ff7e
 800d700:	0800b191 	.word	0x0800b191
 800d704:	0800d45d 	.word	0x0800d45d
 800d708:	0800ff7a 	.word	0x0800ff7a

0800d70c <__sfputc_r>:
 800d70c:	6893      	ldr	r3, [r2, #8]
 800d70e:	3b01      	subs	r3, #1
 800d710:	2b00      	cmp	r3, #0
 800d712:	b410      	push	{r4}
 800d714:	6093      	str	r3, [r2, #8]
 800d716:	da08      	bge.n	800d72a <__sfputc_r+0x1e>
 800d718:	6994      	ldr	r4, [r2, #24]
 800d71a:	42a3      	cmp	r3, r4
 800d71c:	db01      	blt.n	800d722 <__sfputc_r+0x16>
 800d71e:	290a      	cmp	r1, #10
 800d720:	d103      	bne.n	800d72a <__sfputc_r+0x1e>
 800d722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d726:	f7fe bb31 	b.w	800bd8c <__swbuf_r>
 800d72a:	6813      	ldr	r3, [r2, #0]
 800d72c:	1c58      	adds	r0, r3, #1
 800d72e:	6010      	str	r0, [r2, #0]
 800d730:	7019      	strb	r1, [r3, #0]
 800d732:	4608      	mov	r0, r1
 800d734:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <__sfputs_r>:
 800d73a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73c:	4606      	mov	r6, r0
 800d73e:	460f      	mov	r7, r1
 800d740:	4614      	mov	r4, r2
 800d742:	18d5      	adds	r5, r2, r3
 800d744:	42ac      	cmp	r4, r5
 800d746:	d101      	bne.n	800d74c <__sfputs_r+0x12>
 800d748:	2000      	movs	r0, #0
 800d74a:	e007      	b.n	800d75c <__sfputs_r+0x22>
 800d74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d750:	463a      	mov	r2, r7
 800d752:	4630      	mov	r0, r6
 800d754:	f7ff ffda 	bl	800d70c <__sfputc_r>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d1f3      	bne.n	800d744 <__sfputs_r+0xa>
 800d75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d760 <_vfiprintf_r>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	460d      	mov	r5, r1
 800d766:	b09d      	sub	sp, #116	; 0x74
 800d768:	4614      	mov	r4, r2
 800d76a:	4698      	mov	r8, r3
 800d76c:	4606      	mov	r6, r0
 800d76e:	b118      	cbz	r0, 800d778 <_vfiprintf_r+0x18>
 800d770:	6a03      	ldr	r3, [r0, #32]
 800d772:	b90b      	cbnz	r3, 800d778 <_vfiprintf_r+0x18>
 800d774:	f7fe f94c 	bl	800ba10 <__sinit>
 800d778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d77a:	07d9      	lsls	r1, r3, #31
 800d77c:	d405      	bmi.n	800d78a <_vfiprintf_r+0x2a>
 800d77e:	89ab      	ldrh	r3, [r5, #12]
 800d780:	059a      	lsls	r2, r3, #22
 800d782:	d402      	bmi.n	800d78a <_vfiprintf_r+0x2a>
 800d784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d786:	f7fe fc23 	bl	800bfd0 <__retarget_lock_acquire_recursive>
 800d78a:	89ab      	ldrh	r3, [r5, #12]
 800d78c:	071b      	lsls	r3, r3, #28
 800d78e:	d501      	bpl.n	800d794 <_vfiprintf_r+0x34>
 800d790:	692b      	ldr	r3, [r5, #16]
 800d792:	b99b      	cbnz	r3, 800d7bc <_vfiprintf_r+0x5c>
 800d794:	4629      	mov	r1, r5
 800d796:	4630      	mov	r0, r6
 800d798:	f7fe fb36 	bl	800be08 <__swsetup_r>
 800d79c:	b170      	cbz	r0, 800d7bc <_vfiprintf_r+0x5c>
 800d79e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a0:	07dc      	lsls	r4, r3, #31
 800d7a2:	d504      	bpl.n	800d7ae <_vfiprintf_r+0x4e>
 800d7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a8:	b01d      	add	sp, #116	; 0x74
 800d7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ae:	89ab      	ldrh	r3, [r5, #12]
 800d7b0:	0598      	lsls	r0, r3, #22
 800d7b2:	d4f7      	bmi.n	800d7a4 <_vfiprintf_r+0x44>
 800d7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7b6:	f7fe fc0c 	bl	800bfd2 <__retarget_lock_release_recursive>
 800d7ba:	e7f3      	b.n	800d7a4 <_vfiprintf_r+0x44>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c0:	2320      	movs	r3, #32
 800d7c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7ca:	2330      	movs	r3, #48	; 0x30
 800d7cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d980 <_vfiprintf_r+0x220>
 800d7d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7d4:	f04f 0901 	mov.w	r9, #1
 800d7d8:	4623      	mov	r3, r4
 800d7da:	469a      	mov	sl, r3
 800d7dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7e0:	b10a      	cbz	r2, 800d7e6 <_vfiprintf_r+0x86>
 800d7e2:	2a25      	cmp	r2, #37	; 0x25
 800d7e4:	d1f9      	bne.n	800d7da <_vfiprintf_r+0x7a>
 800d7e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d7ea:	d00b      	beq.n	800d804 <_vfiprintf_r+0xa4>
 800d7ec:	465b      	mov	r3, fp
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7ff ffa1 	bl	800d73a <__sfputs_r>
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	f000 80a9 	beq.w	800d950 <_vfiprintf_r+0x1f0>
 800d7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d800:	445a      	add	r2, fp
 800d802:	9209      	str	r2, [sp, #36]	; 0x24
 800d804:	f89a 3000 	ldrb.w	r3, [sl]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 80a1 	beq.w	800d950 <_vfiprintf_r+0x1f0>
 800d80e:	2300      	movs	r3, #0
 800d810:	f04f 32ff 	mov.w	r2, #4294967295
 800d814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d818:	f10a 0a01 	add.w	sl, sl, #1
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	9307      	str	r3, [sp, #28]
 800d820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d824:	931a      	str	r3, [sp, #104]	; 0x68
 800d826:	4654      	mov	r4, sl
 800d828:	2205      	movs	r2, #5
 800d82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d82e:	4854      	ldr	r0, [pc, #336]	; (800d980 <_vfiprintf_r+0x220>)
 800d830:	f7f2 fcf6 	bl	8000220 <memchr>
 800d834:	9a04      	ldr	r2, [sp, #16]
 800d836:	b9d8      	cbnz	r0, 800d870 <_vfiprintf_r+0x110>
 800d838:	06d1      	lsls	r1, r2, #27
 800d83a:	bf44      	itt	mi
 800d83c:	2320      	movmi	r3, #32
 800d83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d842:	0713      	lsls	r3, r2, #28
 800d844:	bf44      	itt	mi
 800d846:	232b      	movmi	r3, #43	; 0x2b
 800d848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d84c:	f89a 3000 	ldrb.w	r3, [sl]
 800d850:	2b2a      	cmp	r3, #42	; 0x2a
 800d852:	d015      	beq.n	800d880 <_vfiprintf_r+0x120>
 800d854:	9a07      	ldr	r2, [sp, #28]
 800d856:	4654      	mov	r4, sl
 800d858:	2000      	movs	r0, #0
 800d85a:	f04f 0c0a 	mov.w	ip, #10
 800d85e:	4621      	mov	r1, r4
 800d860:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d864:	3b30      	subs	r3, #48	; 0x30
 800d866:	2b09      	cmp	r3, #9
 800d868:	d94d      	bls.n	800d906 <_vfiprintf_r+0x1a6>
 800d86a:	b1b0      	cbz	r0, 800d89a <_vfiprintf_r+0x13a>
 800d86c:	9207      	str	r2, [sp, #28]
 800d86e:	e014      	b.n	800d89a <_vfiprintf_r+0x13a>
 800d870:	eba0 0308 	sub.w	r3, r0, r8
 800d874:	fa09 f303 	lsl.w	r3, r9, r3
 800d878:	4313      	orrs	r3, r2
 800d87a:	9304      	str	r3, [sp, #16]
 800d87c:	46a2      	mov	sl, r4
 800d87e:	e7d2      	b.n	800d826 <_vfiprintf_r+0xc6>
 800d880:	9b03      	ldr	r3, [sp, #12]
 800d882:	1d19      	adds	r1, r3, #4
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	9103      	str	r1, [sp, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	bfbb      	ittet	lt
 800d88c:	425b      	neglt	r3, r3
 800d88e:	f042 0202 	orrlt.w	r2, r2, #2
 800d892:	9307      	strge	r3, [sp, #28]
 800d894:	9307      	strlt	r3, [sp, #28]
 800d896:	bfb8      	it	lt
 800d898:	9204      	strlt	r2, [sp, #16]
 800d89a:	7823      	ldrb	r3, [r4, #0]
 800d89c:	2b2e      	cmp	r3, #46	; 0x2e
 800d89e:	d10c      	bne.n	800d8ba <_vfiprintf_r+0x15a>
 800d8a0:	7863      	ldrb	r3, [r4, #1]
 800d8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d8a4:	d134      	bne.n	800d910 <_vfiprintf_r+0x1b0>
 800d8a6:	9b03      	ldr	r3, [sp, #12]
 800d8a8:	1d1a      	adds	r2, r3, #4
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	9203      	str	r2, [sp, #12]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	bfb8      	it	lt
 800d8b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8b6:	3402      	adds	r4, #2
 800d8b8:	9305      	str	r3, [sp, #20]
 800d8ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d990 <_vfiprintf_r+0x230>
 800d8be:	7821      	ldrb	r1, [r4, #0]
 800d8c0:	2203      	movs	r2, #3
 800d8c2:	4650      	mov	r0, sl
 800d8c4:	f7f2 fcac 	bl	8000220 <memchr>
 800d8c8:	b138      	cbz	r0, 800d8da <_vfiprintf_r+0x17a>
 800d8ca:	9b04      	ldr	r3, [sp, #16]
 800d8cc:	eba0 000a 	sub.w	r0, r0, sl
 800d8d0:	2240      	movs	r2, #64	; 0x40
 800d8d2:	4082      	lsls	r2, r0
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	3401      	adds	r4, #1
 800d8d8:	9304      	str	r3, [sp, #16]
 800d8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8de:	4829      	ldr	r0, [pc, #164]	; (800d984 <_vfiprintf_r+0x224>)
 800d8e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8e4:	2206      	movs	r2, #6
 800d8e6:	f7f2 fc9b 	bl	8000220 <memchr>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d03f      	beq.n	800d96e <_vfiprintf_r+0x20e>
 800d8ee:	4b26      	ldr	r3, [pc, #152]	; (800d988 <_vfiprintf_r+0x228>)
 800d8f0:	bb1b      	cbnz	r3, 800d93a <_vfiprintf_r+0x1da>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	3307      	adds	r3, #7
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	9303      	str	r3, [sp, #12]
 800d8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d900:	443b      	add	r3, r7
 800d902:	9309      	str	r3, [sp, #36]	; 0x24
 800d904:	e768      	b.n	800d7d8 <_vfiprintf_r+0x78>
 800d906:	fb0c 3202 	mla	r2, ip, r2, r3
 800d90a:	460c      	mov	r4, r1
 800d90c:	2001      	movs	r0, #1
 800d90e:	e7a6      	b.n	800d85e <_vfiprintf_r+0xfe>
 800d910:	2300      	movs	r3, #0
 800d912:	3401      	adds	r4, #1
 800d914:	9305      	str	r3, [sp, #20]
 800d916:	4619      	mov	r1, r3
 800d918:	f04f 0c0a 	mov.w	ip, #10
 800d91c:	4620      	mov	r0, r4
 800d91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d922:	3a30      	subs	r2, #48	; 0x30
 800d924:	2a09      	cmp	r2, #9
 800d926:	d903      	bls.n	800d930 <_vfiprintf_r+0x1d0>
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0c6      	beq.n	800d8ba <_vfiprintf_r+0x15a>
 800d92c:	9105      	str	r1, [sp, #20]
 800d92e:	e7c4      	b.n	800d8ba <_vfiprintf_r+0x15a>
 800d930:	fb0c 2101 	mla	r1, ip, r1, r2
 800d934:	4604      	mov	r4, r0
 800d936:	2301      	movs	r3, #1
 800d938:	e7f0      	b.n	800d91c <_vfiprintf_r+0x1bc>
 800d93a:	ab03      	add	r3, sp, #12
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	462a      	mov	r2, r5
 800d940:	4b12      	ldr	r3, [pc, #72]	; (800d98c <_vfiprintf_r+0x22c>)
 800d942:	a904      	add	r1, sp, #16
 800d944:	4630      	mov	r0, r6
 800d946:	f7fd fc23 	bl	800b190 <_printf_float>
 800d94a:	4607      	mov	r7, r0
 800d94c:	1c78      	adds	r0, r7, #1
 800d94e:	d1d6      	bne.n	800d8fe <_vfiprintf_r+0x19e>
 800d950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d952:	07d9      	lsls	r1, r3, #31
 800d954:	d405      	bmi.n	800d962 <_vfiprintf_r+0x202>
 800d956:	89ab      	ldrh	r3, [r5, #12]
 800d958:	059a      	lsls	r2, r3, #22
 800d95a:	d402      	bmi.n	800d962 <_vfiprintf_r+0x202>
 800d95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d95e:	f7fe fb38 	bl	800bfd2 <__retarget_lock_release_recursive>
 800d962:	89ab      	ldrh	r3, [r5, #12]
 800d964:	065b      	lsls	r3, r3, #25
 800d966:	f53f af1d 	bmi.w	800d7a4 <_vfiprintf_r+0x44>
 800d96a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d96c:	e71c      	b.n	800d7a8 <_vfiprintf_r+0x48>
 800d96e:	ab03      	add	r3, sp, #12
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	462a      	mov	r2, r5
 800d974:	4b05      	ldr	r3, [pc, #20]	; (800d98c <_vfiprintf_r+0x22c>)
 800d976:	a904      	add	r1, sp, #16
 800d978:	4630      	mov	r0, r6
 800d97a:	f7fd fead 	bl	800b6d8 <_printf_i>
 800d97e:	e7e4      	b.n	800d94a <_vfiprintf_r+0x1ea>
 800d980:	0800ff74 	.word	0x0800ff74
 800d984:	0800ff7e 	.word	0x0800ff7e
 800d988:	0800b191 	.word	0x0800b191
 800d98c:	0800d73b 	.word	0x0800d73b
 800d990:	0800ff7a 	.word	0x0800ff7a

0800d994 <__sflush_r>:
 800d994:	898a      	ldrh	r2, [r1, #12]
 800d996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d99a:	4605      	mov	r5, r0
 800d99c:	0710      	lsls	r0, r2, #28
 800d99e:	460c      	mov	r4, r1
 800d9a0:	d458      	bmi.n	800da54 <__sflush_r+0xc0>
 800d9a2:	684b      	ldr	r3, [r1, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	dc05      	bgt.n	800d9b4 <__sflush_r+0x20>
 800d9a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	dc02      	bgt.n	800d9b4 <__sflush_r+0x20>
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9b6:	2e00      	cmp	r6, #0
 800d9b8:	d0f9      	beq.n	800d9ae <__sflush_r+0x1a>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d9c0:	682f      	ldr	r7, [r5, #0]
 800d9c2:	6a21      	ldr	r1, [r4, #32]
 800d9c4:	602b      	str	r3, [r5, #0]
 800d9c6:	d032      	beq.n	800da2e <__sflush_r+0x9a>
 800d9c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d9ca:	89a3      	ldrh	r3, [r4, #12]
 800d9cc:	075a      	lsls	r2, r3, #29
 800d9ce:	d505      	bpl.n	800d9dc <__sflush_r+0x48>
 800d9d0:	6863      	ldr	r3, [r4, #4]
 800d9d2:	1ac0      	subs	r0, r0, r3
 800d9d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d9d6:	b10b      	cbz	r3, 800d9dc <__sflush_r+0x48>
 800d9d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d9da:	1ac0      	subs	r0, r0, r3
 800d9dc:	2300      	movs	r3, #0
 800d9de:	4602      	mov	r2, r0
 800d9e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9e2:	6a21      	ldr	r1, [r4, #32]
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	47b0      	blx	r6
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	d106      	bne.n	800d9fc <__sflush_r+0x68>
 800d9ee:	6829      	ldr	r1, [r5, #0]
 800d9f0:	291d      	cmp	r1, #29
 800d9f2:	d82b      	bhi.n	800da4c <__sflush_r+0xb8>
 800d9f4:	4a29      	ldr	r2, [pc, #164]	; (800da9c <__sflush_r+0x108>)
 800d9f6:	410a      	asrs	r2, r1
 800d9f8:	07d6      	lsls	r6, r2, #31
 800d9fa:	d427      	bmi.n	800da4c <__sflush_r+0xb8>
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	6062      	str	r2, [r4, #4]
 800da00:	04d9      	lsls	r1, r3, #19
 800da02:	6922      	ldr	r2, [r4, #16]
 800da04:	6022      	str	r2, [r4, #0]
 800da06:	d504      	bpl.n	800da12 <__sflush_r+0x7e>
 800da08:	1c42      	adds	r2, r0, #1
 800da0a:	d101      	bne.n	800da10 <__sflush_r+0x7c>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	b903      	cbnz	r3, 800da12 <__sflush_r+0x7e>
 800da10:	6560      	str	r0, [r4, #84]	; 0x54
 800da12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da14:	602f      	str	r7, [r5, #0]
 800da16:	2900      	cmp	r1, #0
 800da18:	d0c9      	beq.n	800d9ae <__sflush_r+0x1a>
 800da1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da1e:	4299      	cmp	r1, r3
 800da20:	d002      	beq.n	800da28 <__sflush_r+0x94>
 800da22:	4628      	mov	r0, r5
 800da24:	f7ff f952 	bl	800cccc <_free_r>
 800da28:	2000      	movs	r0, #0
 800da2a:	6360      	str	r0, [r4, #52]	; 0x34
 800da2c:	e7c0      	b.n	800d9b0 <__sflush_r+0x1c>
 800da2e:	2301      	movs	r3, #1
 800da30:	4628      	mov	r0, r5
 800da32:	47b0      	blx	r6
 800da34:	1c41      	adds	r1, r0, #1
 800da36:	d1c8      	bne.n	800d9ca <__sflush_r+0x36>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d0c5      	beq.n	800d9ca <__sflush_r+0x36>
 800da3e:	2b1d      	cmp	r3, #29
 800da40:	d001      	beq.n	800da46 <__sflush_r+0xb2>
 800da42:	2b16      	cmp	r3, #22
 800da44:	d101      	bne.n	800da4a <__sflush_r+0xb6>
 800da46:	602f      	str	r7, [r5, #0]
 800da48:	e7b1      	b.n	800d9ae <__sflush_r+0x1a>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da50:	81a3      	strh	r3, [r4, #12]
 800da52:	e7ad      	b.n	800d9b0 <__sflush_r+0x1c>
 800da54:	690f      	ldr	r7, [r1, #16]
 800da56:	2f00      	cmp	r7, #0
 800da58:	d0a9      	beq.n	800d9ae <__sflush_r+0x1a>
 800da5a:	0793      	lsls	r3, r2, #30
 800da5c:	680e      	ldr	r6, [r1, #0]
 800da5e:	bf08      	it	eq
 800da60:	694b      	ldreq	r3, [r1, #20]
 800da62:	600f      	str	r7, [r1, #0]
 800da64:	bf18      	it	ne
 800da66:	2300      	movne	r3, #0
 800da68:	eba6 0807 	sub.w	r8, r6, r7
 800da6c:	608b      	str	r3, [r1, #8]
 800da6e:	f1b8 0f00 	cmp.w	r8, #0
 800da72:	dd9c      	ble.n	800d9ae <__sflush_r+0x1a>
 800da74:	6a21      	ldr	r1, [r4, #32]
 800da76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da78:	4643      	mov	r3, r8
 800da7a:	463a      	mov	r2, r7
 800da7c:	4628      	mov	r0, r5
 800da7e:	47b0      	blx	r6
 800da80:	2800      	cmp	r0, #0
 800da82:	dc06      	bgt.n	800da92 <__sflush_r+0xfe>
 800da84:	89a3      	ldrh	r3, [r4, #12]
 800da86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da8a:	81a3      	strh	r3, [r4, #12]
 800da8c:	f04f 30ff 	mov.w	r0, #4294967295
 800da90:	e78e      	b.n	800d9b0 <__sflush_r+0x1c>
 800da92:	4407      	add	r7, r0
 800da94:	eba8 0800 	sub.w	r8, r8, r0
 800da98:	e7e9      	b.n	800da6e <__sflush_r+0xda>
 800da9a:	bf00      	nop
 800da9c:	dfbffffe 	.word	0xdfbffffe

0800daa0 <_fflush_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	690b      	ldr	r3, [r1, #16]
 800daa4:	4605      	mov	r5, r0
 800daa6:	460c      	mov	r4, r1
 800daa8:	b913      	cbnz	r3, 800dab0 <_fflush_r+0x10>
 800daaa:	2500      	movs	r5, #0
 800daac:	4628      	mov	r0, r5
 800daae:	bd38      	pop	{r3, r4, r5, pc}
 800dab0:	b118      	cbz	r0, 800daba <_fflush_r+0x1a>
 800dab2:	6a03      	ldr	r3, [r0, #32]
 800dab4:	b90b      	cbnz	r3, 800daba <_fflush_r+0x1a>
 800dab6:	f7fd ffab 	bl	800ba10 <__sinit>
 800daba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0f3      	beq.n	800daaa <_fflush_r+0xa>
 800dac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dac4:	07d0      	lsls	r0, r2, #31
 800dac6:	d404      	bmi.n	800dad2 <_fflush_r+0x32>
 800dac8:	0599      	lsls	r1, r3, #22
 800daca:	d402      	bmi.n	800dad2 <_fflush_r+0x32>
 800dacc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dace:	f7fe fa7f 	bl	800bfd0 <__retarget_lock_acquire_recursive>
 800dad2:	4628      	mov	r0, r5
 800dad4:	4621      	mov	r1, r4
 800dad6:	f7ff ff5d 	bl	800d994 <__sflush_r>
 800dada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dadc:	07da      	lsls	r2, r3, #31
 800dade:	4605      	mov	r5, r0
 800dae0:	d4e4      	bmi.n	800daac <_fflush_r+0xc>
 800dae2:	89a3      	ldrh	r3, [r4, #12]
 800dae4:	059b      	lsls	r3, r3, #22
 800dae6:	d4e1      	bmi.n	800daac <_fflush_r+0xc>
 800dae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daea:	f7fe fa72 	bl	800bfd2 <__retarget_lock_release_recursive>
 800daee:	e7dd      	b.n	800daac <_fflush_r+0xc>

0800daf0 <__swhatbuf_r>:
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	460c      	mov	r4, r1
 800daf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daf8:	2900      	cmp	r1, #0
 800dafa:	b096      	sub	sp, #88	; 0x58
 800dafc:	4615      	mov	r5, r2
 800dafe:	461e      	mov	r6, r3
 800db00:	da0d      	bge.n	800db1e <__swhatbuf_r+0x2e>
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db08:	f04f 0100 	mov.w	r1, #0
 800db0c:	bf0c      	ite	eq
 800db0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800db12:	2340      	movne	r3, #64	; 0x40
 800db14:	2000      	movs	r0, #0
 800db16:	6031      	str	r1, [r6, #0]
 800db18:	602b      	str	r3, [r5, #0]
 800db1a:	b016      	add	sp, #88	; 0x58
 800db1c:	bd70      	pop	{r4, r5, r6, pc}
 800db1e:	466a      	mov	r2, sp
 800db20:	f000 f862 	bl	800dbe8 <_fstat_r>
 800db24:	2800      	cmp	r0, #0
 800db26:	dbec      	blt.n	800db02 <__swhatbuf_r+0x12>
 800db28:	9901      	ldr	r1, [sp, #4]
 800db2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db32:	4259      	negs	r1, r3
 800db34:	4159      	adcs	r1, r3
 800db36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db3a:	e7eb      	b.n	800db14 <__swhatbuf_r+0x24>

0800db3c <__smakebuf_r>:
 800db3c:	898b      	ldrh	r3, [r1, #12]
 800db3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db40:	079d      	lsls	r5, r3, #30
 800db42:	4606      	mov	r6, r0
 800db44:	460c      	mov	r4, r1
 800db46:	d507      	bpl.n	800db58 <__smakebuf_r+0x1c>
 800db48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	6123      	str	r3, [r4, #16]
 800db50:	2301      	movs	r3, #1
 800db52:	6163      	str	r3, [r4, #20]
 800db54:	b002      	add	sp, #8
 800db56:	bd70      	pop	{r4, r5, r6, pc}
 800db58:	ab01      	add	r3, sp, #4
 800db5a:	466a      	mov	r2, sp
 800db5c:	f7ff ffc8 	bl	800daf0 <__swhatbuf_r>
 800db60:	9900      	ldr	r1, [sp, #0]
 800db62:	4605      	mov	r5, r0
 800db64:	4630      	mov	r0, r6
 800db66:	f7fd f9e7 	bl	800af38 <_malloc_r>
 800db6a:	b948      	cbnz	r0, 800db80 <__smakebuf_r+0x44>
 800db6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db70:	059a      	lsls	r2, r3, #22
 800db72:	d4ef      	bmi.n	800db54 <__smakebuf_r+0x18>
 800db74:	f023 0303 	bic.w	r3, r3, #3
 800db78:	f043 0302 	orr.w	r3, r3, #2
 800db7c:	81a3      	strh	r3, [r4, #12]
 800db7e:	e7e3      	b.n	800db48 <__smakebuf_r+0xc>
 800db80:	89a3      	ldrh	r3, [r4, #12]
 800db82:	6020      	str	r0, [r4, #0]
 800db84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	9b00      	ldr	r3, [sp, #0]
 800db8c:	6163      	str	r3, [r4, #20]
 800db8e:	9b01      	ldr	r3, [sp, #4]
 800db90:	6120      	str	r0, [r4, #16]
 800db92:	b15b      	cbz	r3, 800dbac <__smakebuf_r+0x70>
 800db94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db98:	4630      	mov	r0, r6
 800db9a:	f000 f837 	bl	800dc0c <_isatty_r>
 800db9e:	b128      	cbz	r0, 800dbac <__smakebuf_r+0x70>
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	f023 0303 	bic.w	r3, r3, #3
 800dba6:	f043 0301 	orr.w	r3, r3, #1
 800dbaa:	81a3      	strh	r3, [r4, #12]
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	431d      	orrs	r5, r3
 800dbb0:	81a5      	strh	r5, [r4, #12]
 800dbb2:	e7cf      	b.n	800db54 <__smakebuf_r+0x18>

0800dbb4 <memmove>:
 800dbb4:	4288      	cmp	r0, r1
 800dbb6:	b510      	push	{r4, lr}
 800dbb8:	eb01 0402 	add.w	r4, r1, r2
 800dbbc:	d902      	bls.n	800dbc4 <memmove+0x10>
 800dbbe:	4284      	cmp	r4, r0
 800dbc0:	4623      	mov	r3, r4
 800dbc2:	d807      	bhi.n	800dbd4 <memmove+0x20>
 800dbc4:	1e43      	subs	r3, r0, #1
 800dbc6:	42a1      	cmp	r1, r4
 800dbc8:	d008      	beq.n	800dbdc <memmove+0x28>
 800dbca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbd2:	e7f8      	b.n	800dbc6 <memmove+0x12>
 800dbd4:	4402      	add	r2, r0
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	428a      	cmp	r2, r1
 800dbda:	d100      	bne.n	800dbde <memmove+0x2a>
 800dbdc:	bd10      	pop	{r4, pc}
 800dbde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbe6:	e7f7      	b.n	800dbd8 <memmove+0x24>

0800dbe8 <_fstat_r>:
 800dbe8:	b538      	push	{r3, r4, r5, lr}
 800dbea:	4d07      	ldr	r5, [pc, #28]	; (800dc08 <_fstat_r+0x20>)
 800dbec:	2300      	movs	r3, #0
 800dbee:	4604      	mov	r4, r0
 800dbf0:	4608      	mov	r0, r1
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	602b      	str	r3, [r5, #0]
 800dbf6:	f7f7 fdf5 	bl	80057e4 <_fstat>
 800dbfa:	1c43      	adds	r3, r0, #1
 800dbfc:	d102      	bne.n	800dc04 <_fstat_r+0x1c>
 800dbfe:	682b      	ldr	r3, [r5, #0]
 800dc00:	b103      	cbz	r3, 800dc04 <_fstat_r+0x1c>
 800dc02:	6023      	str	r3, [r4, #0]
 800dc04:	bd38      	pop	{r3, r4, r5, pc}
 800dc06:	bf00      	nop
 800dc08:	20001108 	.word	0x20001108

0800dc0c <_isatty_r>:
 800dc0c:	b538      	push	{r3, r4, r5, lr}
 800dc0e:	4d06      	ldr	r5, [pc, #24]	; (800dc28 <_isatty_r+0x1c>)
 800dc10:	2300      	movs	r3, #0
 800dc12:	4604      	mov	r4, r0
 800dc14:	4608      	mov	r0, r1
 800dc16:	602b      	str	r3, [r5, #0]
 800dc18:	f7f7 fdea 	bl	80057f0 <_isatty>
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	d102      	bne.n	800dc26 <_isatty_r+0x1a>
 800dc20:	682b      	ldr	r3, [r5, #0]
 800dc22:	b103      	cbz	r3, 800dc26 <_isatty_r+0x1a>
 800dc24:	6023      	str	r3, [r4, #0]
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	20001108 	.word	0x20001108

0800dc2c <memcpy>:
 800dc2c:	440a      	add	r2, r1
 800dc2e:	4291      	cmp	r1, r2
 800dc30:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc34:	d100      	bne.n	800dc38 <memcpy+0xc>
 800dc36:	4770      	bx	lr
 800dc38:	b510      	push	{r4, lr}
 800dc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc42:	4291      	cmp	r1, r2
 800dc44:	d1f9      	bne.n	800dc3a <memcpy+0xe>
 800dc46:	bd10      	pop	{r4, pc}

0800dc48 <__assert_func>:
 800dc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc4a:	4614      	mov	r4, r2
 800dc4c:	461a      	mov	r2, r3
 800dc4e:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <__assert_func+0x2c>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4605      	mov	r5, r0
 800dc54:	68d8      	ldr	r0, [r3, #12]
 800dc56:	b14c      	cbz	r4, 800dc6c <__assert_func+0x24>
 800dc58:	4b07      	ldr	r3, [pc, #28]	; (800dc78 <__assert_func+0x30>)
 800dc5a:	9100      	str	r1, [sp, #0]
 800dc5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc60:	4906      	ldr	r1, [pc, #24]	; (800dc7c <__assert_func+0x34>)
 800dc62:	462b      	mov	r3, r5
 800dc64:	f000 f872 	bl	800dd4c <fiprintf>
 800dc68:	f000 f882 	bl	800dd70 <abort>
 800dc6c:	4b04      	ldr	r3, [pc, #16]	; (800dc80 <__assert_func+0x38>)
 800dc6e:	461c      	mov	r4, r3
 800dc70:	e7f3      	b.n	800dc5a <__assert_func+0x12>
 800dc72:	bf00      	nop
 800dc74:	2000006c 	.word	0x2000006c
 800dc78:	0800ff8f 	.word	0x0800ff8f
 800dc7c:	0800ff9c 	.word	0x0800ff9c
 800dc80:	0800ffca 	.word	0x0800ffca

0800dc84 <_calloc_r>:
 800dc84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc86:	fba1 2402 	umull	r2, r4, r1, r2
 800dc8a:	b94c      	cbnz	r4, 800dca0 <_calloc_r+0x1c>
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	9201      	str	r2, [sp, #4]
 800dc90:	f7fd f952 	bl	800af38 <_malloc_r>
 800dc94:	9a01      	ldr	r2, [sp, #4]
 800dc96:	4605      	mov	r5, r0
 800dc98:	b930      	cbnz	r0, 800dca8 <_calloc_r+0x24>
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	b003      	add	sp, #12
 800dc9e:	bd30      	pop	{r4, r5, pc}
 800dca0:	220c      	movs	r2, #12
 800dca2:	6002      	str	r2, [r0, #0]
 800dca4:	2500      	movs	r5, #0
 800dca6:	e7f8      	b.n	800dc9a <_calloc_r+0x16>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	f7fe f905 	bl	800beb8 <memset>
 800dcae:	e7f4      	b.n	800dc9a <_calloc_r+0x16>

0800dcb0 <__ascii_mbtowc>:
 800dcb0:	b082      	sub	sp, #8
 800dcb2:	b901      	cbnz	r1, 800dcb6 <__ascii_mbtowc+0x6>
 800dcb4:	a901      	add	r1, sp, #4
 800dcb6:	b142      	cbz	r2, 800dcca <__ascii_mbtowc+0x1a>
 800dcb8:	b14b      	cbz	r3, 800dcce <__ascii_mbtowc+0x1e>
 800dcba:	7813      	ldrb	r3, [r2, #0]
 800dcbc:	600b      	str	r3, [r1, #0]
 800dcbe:	7812      	ldrb	r2, [r2, #0]
 800dcc0:	1e10      	subs	r0, r2, #0
 800dcc2:	bf18      	it	ne
 800dcc4:	2001      	movne	r0, #1
 800dcc6:	b002      	add	sp, #8
 800dcc8:	4770      	bx	lr
 800dcca:	4610      	mov	r0, r2
 800dccc:	e7fb      	b.n	800dcc6 <__ascii_mbtowc+0x16>
 800dcce:	f06f 0001 	mvn.w	r0, #1
 800dcd2:	e7f8      	b.n	800dcc6 <__ascii_mbtowc+0x16>

0800dcd4 <_realloc_r>:
 800dcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd8:	4680      	mov	r8, r0
 800dcda:	4614      	mov	r4, r2
 800dcdc:	460e      	mov	r6, r1
 800dcde:	b921      	cbnz	r1, 800dcea <_realloc_r+0x16>
 800dce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dce4:	4611      	mov	r1, r2
 800dce6:	f7fd b927 	b.w	800af38 <_malloc_r>
 800dcea:	b92a      	cbnz	r2, 800dcf8 <_realloc_r+0x24>
 800dcec:	f7fe ffee 	bl	800cccc <_free_r>
 800dcf0:	4625      	mov	r5, r4
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf8:	f000 f841 	bl	800dd7e <_malloc_usable_size_r>
 800dcfc:	4284      	cmp	r4, r0
 800dcfe:	4607      	mov	r7, r0
 800dd00:	d802      	bhi.n	800dd08 <_realloc_r+0x34>
 800dd02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd06:	d812      	bhi.n	800dd2e <_realloc_r+0x5a>
 800dd08:	4621      	mov	r1, r4
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	f7fd f914 	bl	800af38 <_malloc_r>
 800dd10:	4605      	mov	r5, r0
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d0ed      	beq.n	800dcf2 <_realloc_r+0x1e>
 800dd16:	42bc      	cmp	r4, r7
 800dd18:	4622      	mov	r2, r4
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	bf28      	it	cs
 800dd1e:	463a      	movcs	r2, r7
 800dd20:	f7ff ff84 	bl	800dc2c <memcpy>
 800dd24:	4631      	mov	r1, r6
 800dd26:	4640      	mov	r0, r8
 800dd28:	f7fe ffd0 	bl	800cccc <_free_r>
 800dd2c:	e7e1      	b.n	800dcf2 <_realloc_r+0x1e>
 800dd2e:	4635      	mov	r5, r6
 800dd30:	e7df      	b.n	800dcf2 <_realloc_r+0x1e>

0800dd32 <__ascii_wctomb>:
 800dd32:	b149      	cbz	r1, 800dd48 <__ascii_wctomb+0x16>
 800dd34:	2aff      	cmp	r2, #255	; 0xff
 800dd36:	bf85      	ittet	hi
 800dd38:	238a      	movhi	r3, #138	; 0x8a
 800dd3a:	6003      	strhi	r3, [r0, #0]
 800dd3c:	700a      	strbls	r2, [r1, #0]
 800dd3e:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd42:	bf98      	it	ls
 800dd44:	2001      	movls	r0, #1
 800dd46:	4770      	bx	lr
 800dd48:	4608      	mov	r0, r1
 800dd4a:	4770      	bx	lr

0800dd4c <fiprintf>:
 800dd4c:	b40e      	push	{r1, r2, r3}
 800dd4e:	b503      	push	{r0, r1, lr}
 800dd50:	4601      	mov	r1, r0
 800dd52:	ab03      	add	r3, sp, #12
 800dd54:	4805      	ldr	r0, [pc, #20]	; (800dd6c <fiprintf+0x20>)
 800dd56:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd5a:	6800      	ldr	r0, [r0, #0]
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	f7ff fcff 	bl	800d760 <_vfiprintf_r>
 800dd62:	b002      	add	sp, #8
 800dd64:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd68:	b003      	add	sp, #12
 800dd6a:	4770      	bx	lr
 800dd6c:	2000006c 	.word	0x2000006c

0800dd70 <abort>:
 800dd70:	b508      	push	{r3, lr}
 800dd72:	2006      	movs	r0, #6
 800dd74:	f000 f834 	bl	800dde0 <raise>
 800dd78:	2001      	movs	r0, #1
 800dd7a:	f7f7 fd0d 	bl	8005798 <_exit>

0800dd7e <_malloc_usable_size_r>:
 800dd7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd82:	1f18      	subs	r0, r3, #4
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	bfbc      	itt	lt
 800dd88:	580b      	ldrlt	r3, [r1, r0]
 800dd8a:	18c0      	addlt	r0, r0, r3
 800dd8c:	4770      	bx	lr

0800dd8e <_raise_r>:
 800dd8e:	291f      	cmp	r1, #31
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4604      	mov	r4, r0
 800dd94:	460d      	mov	r5, r1
 800dd96:	d904      	bls.n	800dda2 <_raise_r+0x14>
 800dd98:	2316      	movs	r3, #22
 800dd9a:	6003      	str	r3, [r0, #0]
 800dd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dda4:	b112      	cbz	r2, 800ddac <_raise_r+0x1e>
 800dda6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddaa:	b94b      	cbnz	r3, 800ddc0 <_raise_r+0x32>
 800ddac:	4620      	mov	r0, r4
 800ddae:	f000 f831 	bl	800de14 <_getpid_r>
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddbc:	f000 b818 	b.w	800ddf0 <_kill_r>
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d00a      	beq.n	800ddda <_raise_r+0x4c>
 800ddc4:	1c59      	adds	r1, r3, #1
 800ddc6:	d103      	bne.n	800ddd0 <_raise_r+0x42>
 800ddc8:	2316      	movs	r3, #22
 800ddca:	6003      	str	r3, [r0, #0]
 800ddcc:	2001      	movs	r0, #1
 800ddce:	e7e7      	b.n	800dda0 <_raise_r+0x12>
 800ddd0:	2400      	movs	r4, #0
 800ddd2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	4798      	blx	r3
 800ddda:	2000      	movs	r0, #0
 800dddc:	e7e0      	b.n	800dda0 <_raise_r+0x12>
	...

0800dde0 <raise>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	; (800ddec <raise+0xc>)
 800dde2:	4601      	mov	r1, r0
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f7ff bfd2 	b.w	800dd8e <_raise_r>
 800ddea:	bf00      	nop
 800ddec:	2000006c 	.word	0x2000006c

0800ddf0 <_kill_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	; (800de10 <_kill_r+0x20>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	f7f7 fcc3 	bl	8005788 <_kill>
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	d102      	bne.n	800de0c <_kill_r+0x1c>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	b103      	cbz	r3, 800de0c <_kill_r+0x1c>
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	bd38      	pop	{r3, r4, r5, pc}
 800de0e:	bf00      	nop
 800de10:	20001108 	.word	0x20001108

0800de14 <_getpid_r>:
 800de14:	f7f7 bcb6 	b.w	8005784 <_getpid>

0800de18 <atan2>:
 800de18:	f000 bb3e 	b.w	800e498 <__ieee754_atan2>

0800de1c <sqrt>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	ed2d 8b02 	vpush	{d8}
 800de22:	ec55 4b10 	vmov	r4, r5, d0
 800de26:	f000 f8d3 	bl	800dfd0 <__ieee754_sqrt>
 800de2a:	4622      	mov	r2, r4
 800de2c:	462b      	mov	r3, r5
 800de2e:	4620      	mov	r0, r4
 800de30:	4629      	mov	r1, r5
 800de32:	eeb0 8a40 	vmov.f32	s16, s0
 800de36:	eef0 8a60 	vmov.f32	s17, s1
 800de3a:	f7f2 fe9f 	bl	8000b7c <__aeabi_dcmpun>
 800de3e:	b990      	cbnz	r0, 800de66 <sqrt+0x4a>
 800de40:	2200      	movs	r2, #0
 800de42:	2300      	movs	r3, #0
 800de44:	4620      	mov	r0, r4
 800de46:	4629      	mov	r1, r5
 800de48:	f7f2 fe70 	bl	8000b2c <__aeabi_dcmplt>
 800de4c:	b158      	cbz	r0, 800de66 <sqrt+0x4a>
 800de4e:	f7fe f895 	bl	800bf7c <__errno>
 800de52:	2321      	movs	r3, #33	; 0x21
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	2200      	movs	r2, #0
 800de58:	2300      	movs	r3, #0
 800de5a:	4610      	mov	r0, r2
 800de5c:	4619      	mov	r1, r3
 800de5e:	f7f2 fd1d 	bl	800089c <__aeabi_ddiv>
 800de62:	ec41 0b18 	vmov	d8, r0, r1
 800de66:	eeb0 0a48 	vmov.f32	s0, s16
 800de6a:	eef0 0a68 	vmov.f32	s1, s17
 800de6e:	ecbd 8b02 	vpop	{d8}
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	0000      	movs	r0, r0
	...

0800de78 <cos>:
 800de78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de7a:	ec53 2b10 	vmov	r2, r3, d0
 800de7e:	4826      	ldr	r0, [pc, #152]	; (800df18 <cos+0xa0>)
 800de80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800de84:	4281      	cmp	r1, r0
 800de86:	dc06      	bgt.n	800de96 <cos+0x1e>
 800de88:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800df10 <cos+0x98>
 800de8c:	b005      	add	sp, #20
 800de8e:	f85d eb04 	ldr.w	lr, [sp], #4
 800de92:	f000 b979 	b.w	800e188 <__kernel_cos>
 800de96:	4821      	ldr	r0, [pc, #132]	; (800df1c <cos+0xa4>)
 800de98:	4281      	cmp	r1, r0
 800de9a:	dd09      	ble.n	800deb0 <cos+0x38>
 800de9c:	ee10 0a10 	vmov	r0, s0
 800dea0:	4619      	mov	r1, r3
 800dea2:	f7f2 fa19 	bl	80002d8 <__aeabi_dsub>
 800dea6:	ec41 0b10 	vmov	d0, r0, r1
 800deaa:	b005      	add	sp, #20
 800deac:	f85d fb04 	ldr.w	pc, [sp], #4
 800deb0:	4668      	mov	r0, sp
 800deb2:	f000 fbb9 	bl	800e628 <__ieee754_rem_pio2>
 800deb6:	f000 0003 	and.w	r0, r0, #3
 800deba:	2801      	cmp	r0, #1
 800debc:	d00b      	beq.n	800ded6 <cos+0x5e>
 800debe:	2802      	cmp	r0, #2
 800dec0:	d016      	beq.n	800def0 <cos+0x78>
 800dec2:	b9e0      	cbnz	r0, 800defe <cos+0x86>
 800dec4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dec8:	ed9d 0b00 	vldr	d0, [sp]
 800decc:	f000 f95c 	bl	800e188 <__kernel_cos>
 800ded0:	ec51 0b10 	vmov	r0, r1, d0
 800ded4:	e7e7      	b.n	800dea6 <cos+0x2e>
 800ded6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800deda:	ed9d 0b00 	vldr	d0, [sp]
 800dede:	f000 fa1b 	bl	800e318 <__kernel_sin>
 800dee2:	ec53 2b10 	vmov	r2, r3, d0
 800dee6:	ee10 0a10 	vmov	r0, s0
 800deea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800deee:	e7da      	b.n	800dea6 <cos+0x2e>
 800def0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800def4:	ed9d 0b00 	vldr	d0, [sp]
 800def8:	f000 f946 	bl	800e188 <__kernel_cos>
 800defc:	e7f1      	b.n	800dee2 <cos+0x6a>
 800defe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df02:	ed9d 0b00 	vldr	d0, [sp]
 800df06:	2001      	movs	r0, #1
 800df08:	f000 fa06 	bl	800e318 <__kernel_sin>
 800df0c:	e7e0      	b.n	800ded0 <cos+0x58>
 800df0e:	bf00      	nop
	...
 800df18:	3fe921fb 	.word	0x3fe921fb
 800df1c:	7fefffff 	.word	0x7fefffff

0800df20 <sin>:
 800df20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df22:	ec53 2b10 	vmov	r2, r3, d0
 800df26:	4828      	ldr	r0, [pc, #160]	; (800dfc8 <sin+0xa8>)
 800df28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800df2c:	4281      	cmp	r1, r0
 800df2e:	dc07      	bgt.n	800df40 <sin+0x20>
 800df30:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800dfc0 <sin+0xa0>
 800df34:	2000      	movs	r0, #0
 800df36:	b005      	add	sp, #20
 800df38:	f85d eb04 	ldr.w	lr, [sp], #4
 800df3c:	f000 b9ec 	b.w	800e318 <__kernel_sin>
 800df40:	4822      	ldr	r0, [pc, #136]	; (800dfcc <sin+0xac>)
 800df42:	4281      	cmp	r1, r0
 800df44:	dd09      	ble.n	800df5a <sin+0x3a>
 800df46:	ee10 0a10 	vmov	r0, s0
 800df4a:	4619      	mov	r1, r3
 800df4c:	f7f2 f9c4 	bl	80002d8 <__aeabi_dsub>
 800df50:	ec41 0b10 	vmov	d0, r0, r1
 800df54:	b005      	add	sp, #20
 800df56:	f85d fb04 	ldr.w	pc, [sp], #4
 800df5a:	4668      	mov	r0, sp
 800df5c:	f000 fb64 	bl	800e628 <__ieee754_rem_pio2>
 800df60:	f000 0003 	and.w	r0, r0, #3
 800df64:	2801      	cmp	r0, #1
 800df66:	d00c      	beq.n	800df82 <sin+0x62>
 800df68:	2802      	cmp	r0, #2
 800df6a:	d011      	beq.n	800df90 <sin+0x70>
 800df6c:	b9f0      	cbnz	r0, 800dfac <sin+0x8c>
 800df6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df72:	ed9d 0b00 	vldr	d0, [sp]
 800df76:	2001      	movs	r0, #1
 800df78:	f000 f9ce 	bl	800e318 <__kernel_sin>
 800df7c:	ec51 0b10 	vmov	r0, r1, d0
 800df80:	e7e6      	b.n	800df50 <sin+0x30>
 800df82:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df86:	ed9d 0b00 	vldr	d0, [sp]
 800df8a:	f000 f8fd 	bl	800e188 <__kernel_cos>
 800df8e:	e7f5      	b.n	800df7c <sin+0x5c>
 800df90:	ed9d 1b02 	vldr	d1, [sp, #8]
 800df94:	ed9d 0b00 	vldr	d0, [sp]
 800df98:	2001      	movs	r0, #1
 800df9a:	f000 f9bd 	bl	800e318 <__kernel_sin>
 800df9e:	ec53 2b10 	vmov	r2, r3, d0
 800dfa2:	ee10 0a10 	vmov	r0, s0
 800dfa6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dfaa:	e7d1      	b.n	800df50 <sin+0x30>
 800dfac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfb0:	ed9d 0b00 	vldr	d0, [sp]
 800dfb4:	f000 f8e8 	bl	800e188 <__kernel_cos>
 800dfb8:	e7f1      	b.n	800df9e <sin+0x7e>
 800dfba:	bf00      	nop
 800dfbc:	f3af 8000 	nop.w
	...
 800dfc8:	3fe921fb 	.word	0x3fe921fb
 800dfcc:	7fefffff 	.word	0x7fefffff

0800dfd0 <__ieee754_sqrt>:
 800dfd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd4:	ec55 4b10 	vmov	r4, r5, d0
 800dfd8:	4e67      	ldr	r6, [pc, #412]	; (800e178 <__ieee754_sqrt+0x1a8>)
 800dfda:	43ae      	bics	r6, r5
 800dfdc:	ee10 0a10 	vmov	r0, s0
 800dfe0:	ee10 2a10 	vmov	r2, s0
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	462b      	mov	r3, r5
 800dfe8:	d10d      	bne.n	800e006 <__ieee754_sqrt+0x36>
 800dfea:	f7f2 fb2d 	bl	8000648 <__aeabi_dmul>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	4620      	mov	r0, r4
 800dff4:	4629      	mov	r1, r5
 800dff6:	f7f2 f971 	bl	80002dc <__adddf3>
 800dffa:	4604      	mov	r4, r0
 800dffc:	460d      	mov	r5, r1
 800dffe:	ec45 4b10 	vmov	d0, r4, r5
 800e002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e006:	2d00      	cmp	r5, #0
 800e008:	dc0b      	bgt.n	800e022 <__ieee754_sqrt+0x52>
 800e00a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e00e:	4326      	orrs	r6, r4
 800e010:	d0f5      	beq.n	800dffe <__ieee754_sqrt+0x2e>
 800e012:	b135      	cbz	r5, 800e022 <__ieee754_sqrt+0x52>
 800e014:	f7f2 f960 	bl	80002d8 <__aeabi_dsub>
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	f7f2 fc3e 	bl	800089c <__aeabi_ddiv>
 800e020:	e7eb      	b.n	800dffa <__ieee754_sqrt+0x2a>
 800e022:	1509      	asrs	r1, r1, #20
 800e024:	f000 808d 	beq.w	800e142 <__ieee754_sqrt+0x172>
 800e028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e02c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e034:	07c9      	lsls	r1, r1, #31
 800e036:	bf5c      	itt	pl
 800e038:	005b      	lslpl	r3, r3, #1
 800e03a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e03e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e042:	bf58      	it	pl
 800e044:	0052      	lslpl	r2, r2, #1
 800e046:	2500      	movs	r5, #0
 800e048:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e04c:	1076      	asrs	r6, r6, #1
 800e04e:	0052      	lsls	r2, r2, #1
 800e050:	f04f 0e16 	mov.w	lr, #22
 800e054:	46ac      	mov	ip, r5
 800e056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e05a:	eb0c 0001 	add.w	r0, ip, r1
 800e05e:	4298      	cmp	r0, r3
 800e060:	bfde      	ittt	le
 800e062:	1a1b      	suble	r3, r3, r0
 800e064:	eb00 0c01 	addle.w	ip, r0, r1
 800e068:	186d      	addle	r5, r5, r1
 800e06a:	005b      	lsls	r3, r3, #1
 800e06c:	f1be 0e01 	subs.w	lr, lr, #1
 800e070:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e074:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e078:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e07c:	d1ed      	bne.n	800e05a <__ieee754_sqrt+0x8a>
 800e07e:	4674      	mov	r4, lr
 800e080:	2720      	movs	r7, #32
 800e082:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e086:	4563      	cmp	r3, ip
 800e088:	eb01 000e 	add.w	r0, r1, lr
 800e08c:	dc02      	bgt.n	800e094 <__ieee754_sqrt+0xc4>
 800e08e:	d113      	bne.n	800e0b8 <__ieee754_sqrt+0xe8>
 800e090:	4290      	cmp	r0, r2
 800e092:	d811      	bhi.n	800e0b8 <__ieee754_sqrt+0xe8>
 800e094:	2800      	cmp	r0, #0
 800e096:	eb00 0e01 	add.w	lr, r0, r1
 800e09a:	da57      	bge.n	800e14c <__ieee754_sqrt+0x17c>
 800e09c:	f1be 0f00 	cmp.w	lr, #0
 800e0a0:	db54      	blt.n	800e14c <__ieee754_sqrt+0x17c>
 800e0a2:	f10c 0801 	add.w	r8, ip, #1
 800e0a6:	eba3 030c 	sub.w	r3, r3, ip
 800e0aa:	4290      	cmp	r0, r2
 800e0ac:	bf88      	it	hi
 800e0ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e0b2:	1a12      	subs	r2, r2, r0
 800e0b4:	440c      	add	r4, r1
 800e0b6:	46c4      	mov	ip, r8
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	3f01      	subs	r7, #1
 800e0bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e0c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e0c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e0c8:	d1dd      	bne.n	800e086 <__ieee754_sqrt+0xb6>
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	d01b      	beq.n	800e106 <__ieee754_sqrt+0x136>
 800e0ce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e17c <__ieee754_sqrt+0x1ac>
 800e0d2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e180 <__ieee754_sqrt+0x1b0>
 800e0d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800e0da:	e9db 2300 	ldrd	r2, r3, [fp]
 800e0de:	f7f2 f8fb 	bl	80002d8 <__aeabi_dsub>
 800e0e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 fd27 	bl	8000b40 <__aeabi_dcmple>
 800e0f2:	b140      	cbz	r0, 800e106 <__ieee754_sqrt+0x136>
 800e0f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e0f8:	e9da 0100 	ldrd	r0, r1, [sl]
 800e0fc:	e9db 2300 	ldrd	r2, r3, [fp]
 800e100:	d126      	bne.n	800e150 <__ieee754_sqrt+0x180>
 800e102:	3501      	adds	r5, #1
 800e104:	463c      	mov	r4, r7
 800e106:	106a      	asrs	r2, r5, #1
 800e108:	0863      	lsrs	r3, r4, #1
 800e10a:	07e9      	lsls	r1, r5, #31
 800e10c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e110:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e114:	bf48      	it	mi
 800e116:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e11a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e11e:	461c      	mov	r4, r3
 800e120:	e76d      	b.n	800dffe <__ieee754_sqrt+0x2e>
 800e122:	0ad3      	lsrs	r3, r2, #11
 800e124:	3815      	subs	r0, #21
 800e126:	0552      	lsls	r2, r2, #21
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0fa      	beq.n	800e122 <__ieee754_sqrt+0x152>
 800e12c:	02dc      	lsls	r4, r3, #11
 800e12e:	d50a      	bpl.n	800e146 <__ieee754_sqrt+0x176>
 800e130:	f1c1 0420 	rsb	r4, r1, #32
 800e134:	fa22 f404 	lsr.w	r4, r2, r4
 800e138:	1e4d      	subs	r5, r1, #1
 800e13a:	408a      	lsls	r2, r1
 800e13c:	4323      	orrs	r3, r4
 800e13e:	1b41      	subs	r1, r0, r5
 800e140:	e772      	b.n	800e028 <__ieee754_sqrt+0x58>
 800e142:	4608      	mov	r0, r1
 800e144:	e7f0      	b.n	800e128 <__ieee754_sqrt+0x158>
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	3101      	adds	r1, #1
 800e14a:	e7ef      	b.n	800e12c <__ieee754_sqrt+0x15c>
 800e14c:	46e0      	mov	r8, ip
 800e14e:	e7aa      	b.n	800e0a6 <__ieee754_sqrt+0xd6>
 800e150:	f7f2 f8c4 	bl	80002dc <__adddf3>
 800e154:	e9da 8900 	ldrd	r8, r9, [sl]
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	4640      	mov	r0, r8
 800e15e:	4649      	mov	r1, r9
 800e160:	f7f2 fce4 	bl	8000b2c <__aeabi_dcmplt>
 800e164:	b120      	cbz	r0, 800e170 <__ieee754_sqrt+0x1a0>
 800e166:	1ca0      	adds	r0, r4, #2
 800e168:	bf08      	it	eq
 800e16a:	3501      	addeq	r5, #1
 800e16c:	3402      	adds	r4, #2
 800e16e:	e7ca      	b.n	800e106 <__ieee754_sqrt+0x136>
 800e170:	3401      	adds	r4, #1
 800e172:	f024 0401 	bic.w	r4, r4, #1
 800e176:	e7c6      	b.n	800e106 <__ieee754_sqrt+0x136>
 800e178:	7ff00000 	.word	0x7ff00000
 800e17c:	200001e0 	.word	0x200001e0
 800e180:	200001e8 	.word	0x200001e8
 800e184:	00000000 	.word	0x00000000

0800e188 <__kernel_cos>:
 800e188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	ec57 6b10 	vmov	r6, r7, d0
 800e190:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e194:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e198:	ed8d 1b00 	vstr	d1, [sp]
 800e19c:	da07      	bge.n	800e1ae <__kernel_cos+0x26>
 800e19e:	ee10 0a10 	vmov	r0, s0
 800e1a2:	4639      	mov	r1, r7
 800e1a4:	f7f2 fd00 	bl	8000ba8 <__aeabi_d2iz>
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	f000 8088 	beq.w	800e2be <__kernel_cos+0x136>
 800e1ae:	4632      	mov	r2, r6
 800e1b0:	463b      	mov	r3, r7
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	f7f2 fa47 	bl	8000648 <__aeabi_dmul>
 800e1ba:	4b51      	ldr	r3, [pc, #324]	; (800e300 <__kernel_cos+0x178>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4604      	mov	r4, r0
 800e1c0:	460d      	mov	r5, r1
 800e1c2:	f7f2 fa41 	bl	8000648 <__aeabi_dmul>
 800e1c6:	a340      	add	r3, pc, #256	; (adr r3, 800e2c8 <__kernel_cos+0x140>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	4682      	mov	sl, r0
 800e1ce:	468b      	mov	fp, r1
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	f7f2 fa38 	bl	8000648 <__aeabi_dmul>
 800e1d8:	a33d      	add	r3, pc, #244	; (adr r3, 800e2d0 <__kernel_cos+0x148>)
 800e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1de:	f7f2 f87d 	bl	80002dc <__adddf3>
 800e1e2:	4622      	mov	r2, r4
 800e1e4:	462b      	mov	r3, r5
 800e1e6:	f7f2 fa2f 	bl	8000648 <__aeabi_dmul>
 800e1ea:	a33b      	add	r3, pc, #236	; (adr r3, 800e2d8 <__kernel_cos+0x150>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f7f2 f872 	bl	80002d8 <__aeabi_dsub>
 800e1f4:	4622      	mov	r2, r4
 800e1f6:	462b      	mov	r3, r5
 800e1f8:	f7f2 fa26 	bl	8000648 <__aeabi_dmul>
 800e1fc:	a338      	add	r3, pc, #224	; (adr r3, 800e2e0 <__kernel_cos+0x158>)
 800e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e202:	f7f2 f86b 	bl	80002dc <__adddf3>
 800e206:	4622      	mov	r2, r4
 800e208:	462b      	mov	r3, r5
 800e20a:	f7f2 fa1d 	bl	8000648 <__aeabi_dmul>
 800e20e:	a336      	add	r3, pc, #216	; (adr r3, 800e2e8 <__kernel_cos+0x160>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	f7f2 f860 	bl	80002d8 <__aeabi_dsub>
 800e218:	4622      	mov	r2, r4
 800e21a:	462b      	mov	r3, r5
 800e21c:	f7f2 fa14 	bl	8000648 <__aeabi_dmul>
 800e220:	a333      	add	r3, pc, #204	; (adr r3, 800e2f0 <__kernel_cos+0x168>)
 800e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e226:	f7f2 f859 	bl	80002dc <__adddf3>
 800e22a:	4622      	mov	r2, r4
 800e22c:	462b      	mov	r3, r5
 800e22e:	f7f2 fa0b 	bl	8000648 <__aeabi_dmul>
 800e232:	4622      	mov	r2, r4
 800e234:	462b      	mov	r3, r5
 800e236:	f7f2 fa07 	bl	8000648 <__aeabi_dmul>
 800e23a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e23e:	4604      	mov	r4, r0
 800e240:	460d      	mov	r5, r1
 800e242:	4630      	mov	r0, r6
 800e244:	4639      	mov	r1, r7
 800e246:	f7f2 f9ff 	bl	8000648 <__aeabi_dmul>
 800e24a:	460b      	mov	r3, r1
 800e24c:	4602      	mov	r2, r0
 800e24e:	4629      	mov	r1, r5
 800e250:	4620      	mov	r0, r4
 800e252:	f7f2 f841 	bl	80002d8 <__aeabi_dsub>
 800e256:	4b2b      	ldr	r3, [pc, #172]	; (800e304 <__kernel_cos+0x17c>)
 800e258:	4598      	cmp	r8, r3
 800e25a:	4606      	mov	r6, r0
 800e25c:	460f      	mov	r7, r1
 800e25e:	dc10      	bgt.n	800e282 <__kernel_cos+0xfa>
 800e260:	4602      	mov	r2, r0
 800e262:	460b      	mov	r3, r1
 800e264:	4650      	mov	r0, sl
 800e266:	4659      	mov	r1, fp
 800e268:	f7f2 f836 	bl	80002d8 <__aeabi_dsub>
 800e26c:	460b      	mov	r3, r1
 800e26e:	4926      	ldr	r1, [pc, #152]	; (800e308 <__kernel_cos+0x180>)
 800e270:	4602      	mov	r2, r0
 800e272:	2000      	movs	r0, #0
 800e274:	f7f2 f830 	bl	80002d8 <__aeabi_dsub>
 800e278:	ec41 0b10 	vmov	d0, r0, r1
 800e27c:	b003      	add	sp, #12
 800e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e282:	4b22      	ldr	r3, [pc, #136]	; (800e30c <__kernel_cos+0x184>)
 800e284:	4920      	ldr	r1, [pc, #128]	; (800e308 <__kernel_cos+0x180>)
 800e286:	4598      	cmp	r8, r3
 800e288:	bfcc      	ite	gt
 800e28a:	4d21      	ldrgt	r5, [pc, #132]	; (800e310 <__kernel_cos+0x188>)
 800e28c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e290:	2400      	movs	r4, #0
 800e292:	4622      	mov	r2, r4
 800e294:	462b      	mov	r3, r5
 800e296:	2000      	movs	r0, #0
 800e298:	f7f2 f81e 	bl	80002d8 <__aeabi_dsub>
 800e29c:	4622      	mov	r2, r4
 800e29e:	4680      	mov	r8, r0
 800e2a0:	4689      	mov	r9, r1
 800e2a2:	462b      	mov	r3, r5
 800e2a4:	4650      	mov	r0, sl
 800e2a6:	4659      	mov	r1, fp
 800e2a8:	f7f2 f816 	bl	80002d8 <__aeabi_dsub>
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	463b      	mov	r3, r7
 800e2b0:	f7f2 f812 	bl	80002d8 <__aeabi_dsub>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	4649      	mov	r1, r9
 800e2bc:	e7da      	b.n	800e274 <__kernel_cos+0xec>
 800e2be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e2f8 <__kernel_cos+0x170>
 800e2c2:	e7db      	b.n	800e27c <__kernel_cos+0xf4>
 800e2c4:	f3af 8000 	nop.w
 800e2c8:	be8838d4 	.word	0xbe8838d4
 800e2cc:	bda8fae9 	.word	0xbda8fae9
 800e2d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e2d4:	3e21ee9e 	.word	0x3e21ee9e
 800e2d8:	809c52ad 	.word	0x809c52ad
 800e2dc:	3e927e4f 	.word	0x3e927e4f
 800e2e0:	19cb1590 	.word	0x19cb1590
 800e2e4:	3efa01a0 	.word	0x3efa01a0
 800e2e8:	16c15177 	.word	0x16c15177
 800e2ec:	3f56c16c 	.word	0x3f56c16c
 800e2f0:	5555554c 	.word	0x5555554c
 800e2f4:	3fa55555 	.word	0x3fa55555
 800e2f8:	00000000 	.word	0x00000000
 800e2fc:	3ff00000 	.word	0x3ff00000
 800e300:	3fe00000 	.word	0x3fe00000
 800e304:	3fd33332 	.word	0x3fd33332
 800e308:	3ff00000 	.word	0x3ff00000
 800e30c:	3fe90000 	.word	0x3fe90000
 800e310:	3fd20000 	.word	0x3fd20000
 800e314:	00000000 	.word	0x00000000

0800e318 <__kernel_sin>:
 800e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31c:	ed2d 8b04 	vpush	{d8-d9}
 800e320:	eeb0 8a41 	vmov.f32	s16, s2
 800e324:	eef0 8a61 	vmov.f32	s17, s3
 800e328:	ec55 4b10 	vmov	r4, r5, d0
 800e32c:	b083      	sub	sp, #12
 800e32e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e332:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e336:	9001      	str	r0, [sp, #4]
 800e338:	da06      	bge.n	800e348 <__kernel_sin+0x30>
 800e33a:	ee10 0a10 	vmov	r0, s0
 800e33e:	4629      	mov	r1, r5
 800e340:	f7f2 fc32 	bl	8000ba8 <__aeabi_d2iz>
 800e344:	2800      	cmp	r0, #0
 800e346:	d051      	beq.n	800e3ec <__kernel_sin+0xd4>
 800e348:	4622      	mov	r2, r4
 800e34a:	462b      	mov	r3, r5
 800e34c:	4620      	mov	r0, r4
 800e34e:	4629      	mov	r1, r5
 800e350:	f7f2 f97a 	bl	8000648 <__aeabi_dmul>
 800e354:	4682      	mov	sl, r0
 800e356:	468b      	mov	fp, r1
 800e358:	4602      	mov	r2, r0
 800e35a:	460b      	mov	r3, r1
 800e35c:	4620      	mov	r0, r4
 800e35e:	4629      	mov	r1, r5
 800e360:	f7f2 f972 	bl	8000648 <__aeabi_dmul>
 800e364:	a341      	add	r3, pc, #260	; (adr r3, 800e46c <__kernel_sin+0x154>)
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	4680      	mov	r8, r0
 800e36c:	4689      	mov	r9, r1
 800e36e:	4650      	mov	r0, sl
 800e370:	4659      	mov	r1, fp
 800e372:	f7f2 f969 	bl	8000648 <__aeabi_dmul>
 800e376:	a33f      	add	r3, pc, #252	; (adr r3, 800e474 <__kernel_sin+0x15c>)
 800e378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37c:	f7f1 ffac 	bl	80002d8 <__aeabi_dsub>
 800e380:	4652      	mov	r2, sl
 800e382:	465b      	mov	r3, fp
 800e384:	f7f2 f960 	bl	8000648 <__aeabi_dmul>
 800e388:	a33c      	add	r3, pc, #240	; (adr r3, 800e47c <__kernel_sin+0x164>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	f7f1 ffa5 	bl	80002dc <__adddf3>
 800e392:	4652      	mov	r2, sl
 800e394:	465b      	mov	r3, fp
 800e396:	f7f2 f957 	bl	8000648 <__aeabi_dmul>
 800e39a:	a33a      	add	r3, pc, #232	; (adr r3, 800e484 <__kernel_sin+0x16c>)
 800e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a0:	f7f1 ff9a 	bl	80002d8 <__aeabi_dsub>
 800e3a4:	4652      	mov	r2, sl
 800e3a6:	465b      	mov	r3, fp
 800e3a8:	f7f2 f94e 	bl	8000648 <__aeabi_dmul>
 800e3ac:	a337      	add	r3, pc, #220	; (adr r3, 800e48c <__kernel_sin+0x174>)
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	f7f1 ff93 	bl	80002dc <__adddf3>
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	4606      	mov	r6, r0
 800e3ba:	460f      	mov	r7, r1
 800e3bc:	b9eb      	cbnz	r3, 800e3fa <__kernel_sin+0xe2>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4650      	mov	r0, sl
 800e3c4:	4659      	mov	r1, fp
 800e3c6:	f7f2 f93f 	bl	8000648 <__aeabi_dmul>
 800e3ca:	a325      	add	r3, pc, #148	; (adr r3, 800e460 <__kernel_sin+0x148>)
 800e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d0:	f7f1 ff82 	bl	80002d8 <__aeabi_dsub>
 800e3d4:	4642      	mov	r2, r8
 800e3d6:	464b      	mov	r3, r9
 800e3d8:	f7f2 f936 	bl	8000648 <__aeabi_dmul>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	4629      	mov	r1, r5
 800e3e4:	f7f1 ff7a 	bl	80002dc <__adddf3>
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	ec45 4b10 	vmov	d0, r4, r5
 800e3f0:	b003      	add	sp, #12
 800e3f2:	ecbd 8b04 	vpop	{d8-d9}
 800e3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3fa:	4b1b      	ldr	r3, [pc, #108]	; (800e468 <__kernel_sin+0x150>)
 800e3fc:	ec51 0b18 	vmov	r0, r1, d8
 800e400:	2200      	movs	r2, #0
 800e402:	f7f2 f921 	bl	8000648 <__aeabi_dmul>
 800e406:	4632      	mov	r2, r6
 800e408:	ec41 0b19 	vmov	d9, r0, r1
 800e40c:	463b      	mov	r3, r7
 800e40e:	4640      	mov	r0, r8
 800e410:	4649      	mov	r1, r9
 800e412:	f7f2 f919 	bl	8000648 <__aeabi_dmul>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	ec51 0b19 	vmov	r0, r1, d9
 800e41e:	f7f1 ff5b 	bl	80002d8 <__aeabi_dsub>
 800e422:	4652      	mov	r2, sl
 800e424:	465b      	mov	r3, fp
 800e426:	f7f2 f90f 	bl	8000648 <__aeabi_dmul>
 800e42a:	ec53 2b18 	vmov	r2, r3, d8
 800e42e:	f7f1 ff53 	bl	80002d8 <__aeabi_dsub>
 800e432:	a30b      	add	r3, pc, #44	; (adr r3, 800e460 <__kernel_sin+0x148>)
 800e434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e438:	4606      	mov	r6, r0
 800e43a:	460f      	mov	r7, r1
 800e43c:	4640      	mov	r0, r8
 800e43e:	4649      	mov	r1, r9
 800e440:	f7f2 f902 	bl	8000648 <__aeabi_dmul>
 800e444:	4602      	mov	r2, r0
 800e446:	460b      	mov	r3, r1
 800e448:	4630      	mov	r0, r6
 800e44a:	4639      	mov	r1, r7
 800e44c:	f7f1 ff46 	bl	80002dc <__adddf3>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4620      	mov	r0, r4
 800e456:	4629      	mov	r1, r5
 800e458:	f7f1 ff3e 	bl	80002d8 <__aeabi_dsub>
 800e45c:	e7c4      	b.n	800e3e8 <__kernel_sin+0xd0>
 800e45e:	bf00      	nop
 800e460:	55555549 	.word	0x55555549
 800e464:	3fc55555 	.word	0x3fc55555
 800e468:	3fe00000 	.word	0x3fe00000
 800e46c:	5acfd57c 	.word	0x5acfd57c
 800e470:	3de5d93a 	.word	0x3de5d93a
 800e474:	8a2b9ceb 	.word	0x8a2b9ceb
 800e478:	3e5ae5e6 	.word	0x3e5ae5e6
 800e47c:	57b1fe7d 	.word	0x57b1fe7d
 800e480:	3ec71de3 	.word	0x3ec71de3
 800e484:	19c161d5 	.word	0x19c161d5
 800e488:	3f2a01a0 	.word	0x3f2a01a0
 800e48c:	1110f8a6 	.word	0x1110f8a6
 800e490:	3f811111 	.word	0x3f811111
 800e494:	00000000 	.word	0x00000000

0800e498 <__ieee754_atan2>:
 800e498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e49c:	ec57 6b11 	vmov	r6, r7, d1
 800e4a0:	4273      	negs	r3, r6
 800e4a2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800e620 <__ieee754_atan2+0x188>
 800e4a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e4aa:	4333      	orrs	r3, r6
 800e4ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e4b0:	4543      	cmp	r3, r8
 800e4b2:	ec51 0b10 	vmov	r0, r1, d0
 800e4b6:	ee11 5a10 	vmov	r5, s2
 800e4ba:	d80a      	bhi.n	800e4d2 <__ieee754_atan2+0x3a>
 800e4bc:	4244      	negs	r4, r0
 800e4be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4c2:	4304      	orrs	r4, r0
 800e4c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e4c8:	4544      	cmp	r4, r8
 800e4ca:	ee10 9a10 	vmov	r9, s0
 800e4ce:	468e      	mov	lr, r1
 800e4d0:	d907      	bls.n	800e4e2 <__ieee754_atan2+0x4a>
 800e4d2:	4632      	mov	r2, r6
 800e4d4:	463b      	mov	r3, r7
 800e4d6:	f7f1 ff01 	bl	80002dc <__adddf3>
 800e4da:	ec41 0b10 	vmov	d0, r0, r1
 800e4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e4e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e4ea:	4334      	orrs	r4, r6
 800e4ec:	d103      	bne.n	800e4f6 <__ieee754_atan2+0x5e>
 800e4ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f2:	f000 baa1 	b.w	800ea38 <atan>
 800e4f6:	17bc      	asrs	r4, r7, #30
 800e4f8:	f004 0402 	and.w	r4, r4, #2
 800e4fc:	ea53 0909 	orrs.w	r9, r3, r9
 800e500:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e504:	d107      	bne.n	800e516 <__ieee754_atan2+0x7e>
 800e506:	2c02      	cmp	r4, #2
 800e508:	d05f      	beq.n	800e5ca <__ieee754_atan2+0x132>
 800e50a:	2c03      	cmp	r4, #3
 800e50c:	d1e5      	bne.n	800e4da <__ieee754_atan2+0x42>
 800e50e:	a140      	add	r1, pc, #256	; (adr r1, 800e610 <__ieee754_atan2+0x178>)
 800e510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e514:	e7e1      	b.n	800e4da <__ieee754_atan2+0x42>
 800e516:	4315      	orrs	r5, r2
 800e518:	d106      	bne.n	800e528 <__ieee754_atan2+0x90>
 800e51a:	f1be 0f00 	cmp.w	lr, #0
 800e51e:	da5f      	bge.n	800e5e0 <__ieee754_atan2+0x148>
 800e520:	a13d      	add	r1, pc, #244	; (adr r1, 800e618 <__ieee754_atan2+0x180>)
 800e522:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e526:	e7d8      	b.n	800e4da <__ieee754_atan2+0x42>
 800e528:	4542      	cmp	r2, r8
 800e52a:	d10f      	bne.n	800e54c <__ieee754_atan2+0xb4>
 800e52c:	4293      	cmp	r3, r2
 800e52e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e532:	d107      	bne.n	800e544 <__ieee754_atan2+0xac>
 800e534:	2c02      	cmp	r4, #2
 800e536:	d84c      	bhi.n	800e5d2 <__ieee754_atan2+0x13a>
 800e538:	4b33      	ldr	r3, [pc, #204]	; (800e608 <__ieee754_atan2+0x170>)
 800e53a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e53e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e542:	e7ca      	b.n	800e4da <__ieee754_atan2+0x42>
 800e544:	2c02      	cmp	r4, #2
 800e546:	d848      	bhi.n	800e5da <__ieee754_atan2+0x142>
 800e548:	4b30      	ldr	r3, [pc, #192]	; (800e60c <__ieee754_atan2+0x174>)
 800e54a:	e7f6      	b.n	800e53a <__ieee754_atan2+0xa2>
 800e54c:	4543      	cmp	r3, r8
 800e54e:	d0e4      	beq.n	800e51a <__ieee754_atan2+0x82>
 800e550:	1a9b      	subs	r3, r3, r2
 800e552:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e556:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e55a:	da1e      	bge.n	800e59a <__ieee754_atan2+0x102>
 800e55c:	2f00      	cmp	r7, #0
 800e55e:	da01      	bge.n	800e564 <__ieee754_atan2+0xcc>
 800e560:	323c      	adds	r2, #60	; 0x3c
 800e562:	db1e      	blt.n	800e5a2 <__ieee754_atan2+0x10a>
 800e564:	4632      	mov	r2, r6
 800e566:	463b      	mov	r3, r7
 800e568:	f7f2 f998 	bl	800089c <__aeabi_ddiv>
 800e56c:	ec41 0b10 	vmov	d0, r0, r1
 800e570:	f000 fc02 	bl	800ed78 <fabs>
 800e574:	f000 fa60 	bl	800ea38 <atan>
 800e578:	ec51 0b10 	vmov	r0, r1, d0
 800e57c:	2c01      	cmp	r4, #1
 800e57e:	d013      	beq.n	800e5a8 <__ieee754_atan2+0x110>
 800e580:	2c02      	cmp	r4, #2
 800e582:	d015      	beq.n	800e5b0 <__ieee754_atan2+0x118>
 800e584:	2c00      	cmp	r4, #0
 800e586:	d0a8      	beq.n	800e4da <__ieee754_atan2+0x42>
 800e588:	a317      	add	r3, pc, #92	; (adr r3, 800e5e8 <__ieee754_atan2+0x150>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	f7f1 fea3 	bl	80002d8 <__aeabi_dsub>
 800e592:	a317      	add	r3, pc, #92	; (adr r3, 800e5f0 <__ieee754_atan2+0x158>)
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	e014      	b.n	800e5c4 <__ieee754_atan2+0x12c>
 800e59a:	a117      	add	r1, pc, #92	; (adr r1, 800e5f8 <__ieee754_atan2+0x160>)
 800e59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5a0:	e7ec      	b.n	800e57c <__ieee754_atan2+0xe4>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	e7e9      	b.n	800e57c <__ieee754_atan2+0xe4>
 800e5a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	e794      	b.n	800e4da <__ieee754_atan2+0x42>
 800e5b0:	a30d      	add	r3, pc, #52	; (adr r3, 800e5e8 <__ieee754_atan2+0x150>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	f7f1 fe8f 	bl	80002d8 <__aeabi_dsub>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	a10c      	add	r1, pc, #48	; (adr r1, 800e5f0 <__ieee754_atan2+0x158>)
 800e5c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5c4:	f7f1 fe88 	bl	80002d8 <__aeabi_dsub>
 800e5c8:	e787      	b.n	800e4da <__ieee754_atan2+0x42>
 800e5ca:	a109      	add	r1, pc, #36	; (adr r1, 800e5f0 <__ieee754_atan2+0x158>)
 800e5cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5d0:	e783      	b.n	800e4da <__ieee754_atan2+0x42>
 800e5d2:	a10b      	add	r1, pc, #44	; (adr r1, 800e600 <__ieee754_atan2+0x168>)
 800e5d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5d8:	e77f      	b.n	800e4da <__ieee754_atan2+0x42>
 800e5da:	2000      	movs	r0, #0
 800e5dc:	2100      	movs	r1, #0
 800e5de:	e77c      	b.n	800e4da <__ieee754_atan2+0x42>
 800e5e0:	a105      	add	r1, pc, #20	; (adr r1, 800e5f8 <__ieee754_atan2+0x160>)
 800e5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5e6:	e778      	b.n	800e4da <__ieee754_atan2+0x42>
 800e5e8:	33145c07 	.word	0x33145c07
 800e5ec:	3ca1a626 	.word	0x3ca1a626
 800e5f0:	54442d18 	.word	0x54442d18
 800e5f4:	400921fb 	.word	0x400921fb
 800e5f8:	54442d18 	.word	0x54442d18
 800e5fc:	3ff921fb 	.word	0x3ff921fb
 800e600:	54442d18 	.word	0x54442d18
 800e604:	3fe921fb 	.word	0x3fe921fb
 800e608:	080100d0 	.word	0x080100d0
 800e60c:	080100e8 	.word	0x080100e8
 800e610:	54442d18 	.word	0x54442d18
 800e614:	c00921fb 	.word	0xc00921fb
 800e618:	54442d18 	.word	0x54442d18
 800e61c:	bff921fb 	.word	0xbff921fb
 800e620:	7ff00000 	.word	0x7ff00000
 800e624:	00000000 	.word	0x00000000

0800e628 <__ieee754_rem_pio2>:
 800e628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	ed2d 8b02 	vpush	{d8}
 800e630:	ec55 4b10 	vmov	r4, r5, d0
 800e634:	4bca      	ldr	r3, [pc, #808]	; (800e960 <__ieee754_rem_pio2+0x338>)
 800e636:	b08b      	sub	sp, #44	; 0x2c
 800e638:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e63c:	4598      	cmp	r8, r3
 800e63e:	4682      	mov	sl, r0
 800e640:	9502      	str	r5, [sp, #8]
 800e642:	dc08      	bgt.n	800e656 <__ieee754_rem_pio2+0x2e>
 800e644:	2200      	movs	r2, #0
 800e646:	2300      	movs	r3, #0
 800e648:	ed80 0b00 	vstr	d0, [r0]
 800e64c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e650:	f04f 0b00 	mov.w	fp, #0
 800e654:	e028      	b.n	800e6a8 <__ieee754_rem_pio2+0x80>
 800e656:	4bc3      	ldr	r3, [pc, #780]	; (800e964 <__ieee754_rem_pio2+0x33c>)
 800e658:	4598      	cmp	r8, r3
 800e65a:	dc78      	bgt.n	800e74e <__ieee754_rem_pio2+0x126>
 800e65c:	9b02      	ldr	r3, [sp, #8]
 800e65e:	4ec2      	ldr	r6, [pc, #776]	; (800e968 <__ieee754_rem_pio2+0x340>)
 800e660:	2b00      	cmp	r3, #0
 800e662:	ee10 0a10 	vmov	r0, s0
 800e666:	a3b0      	add	r3, pc, #704	; (adr r3, 800e928 <__ieee754_rem_pio2+0x300>)
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	4629      	mov	r1, r5
 800e66e:	dd39      	ble.n	800e6e4 <__ieee754_rem_pio2+0xbc>
 800e670:	f7f1 fe32 	bl	80002d8 <__aeabi_dsub>
 800e674:	45b0      	cmp	r8, r6
 800e676:	4604      	mov	r4, r0
 800e678:	460d      	mov	r5, r1
 800e67a:	d01b      	beq.n	800e6b4 <__ieee754_rem_pio2+0x8c>
 800e67c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e930 <__ieee754_rem_pio2+0x308>)
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	f7f1 fe29 	bl	80002d8 <__aeabi_dsub>
 800e686:	4602      	mov	r2, r0
 800e688:	460b      	mov	r3, r1
 800e68a:	e9ca 2300 	strd	r2, r3, [sl]
 800e68e:	4620      	mov	r0, r4
 800e690:	4629      	mov	r1, r5
 800e692:	f7f1 fe21 	bl	80002d8 <__aeabi_dsub>
 800e696:	a3a6      	add	r3, pc, #664	; (adr r3, 800e930 <__ieee754_rem_pio2+0x308>)
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f7f1 fe1c 	bl	80002d8 <__aeabi_dsub>
 800e6a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6a4:	f04f 0b01 	mov.w	fp, #1
 800e6a8:	4658      	mov	r0, fp
 800e6aa:	b00b      	add	sp, #44	; 0x2c
 800e6ac:	ecbd 8b02 	vpop	{d8}
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800e938 <__ieee754_rem_pio2+0x310>)
 800e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ba:	f7f1 fe0d 	bl	80002d8 <__aeabi_dsub>
 800e6be:	a3a0      	add	r3, pc, #640	; (adr r3, 800e940 <__ieee754_rem_pio2+0x318>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	460d      	mov	r5, r1
 800e6c8:	f7f1 fe06 	bl	80002d8 <__aeabi_dsub>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	e9ca 2300 	strd	r2, r3, [sl]
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	f7f1 fdfe 	bl	80002d8 <__aeabi_dsub>
 800e6dc:	a398      	add	r3, pc, #608	; (adr r3, 800e940 <__ieee754_rem_pio2+0x318>)
 800e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e2:	e7db      	b.n	800e69c <__ieee754_rem_pio2+0x74>
 800e6e4:	f7f1 fdfa 	bl	80002dc <__adddf3>
 800e6e8:	45b0      	cmp	r8, r6
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	460d      	mov	r5, r1
 800e6ee:	d016      	beq.n	800e71e <__ieee754_rem_pio2+0xf6>
 800e6f0:	a38f      	add	r3, pc, #572	; (adr r3, 800e930 <__ieee754_rem_pio2+0x308>)
 800e6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f6:	f7f1 fdf1 	bl	80002dc <__adddf3>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	e9ca 2300 	strd	r2, r3, [sl]
 800e702:	4620      	mov	r0, r4
 800e704:	4629      	mov	r1, r5
 800e706:	f7f1 fde7 	bl	80002d8 <__aeabi_dsub>
 800e70a:	a389      	add	r3, pc, #548	; (adr r3, 800e930 <__ieee754_rem_pio2+0x308>)
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	f7f1 fde4 	bl	80002dc <__adddf3>
 800e714:	f04f 3bff 	mov.w	fp, #4294967295
 800e718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e71c:	e7c4      	b.n	800e6a8 <__ieee754_rem_pio2+0x80>
 800e71e:	a386      	add	r3, pc, #536	; (adr r3, 800e938 <__ieee754_rem_pio2+0x310>)
 800e720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e724:	f7f1 fdda 	bl	80002dc <__adddf3>
 800e728:	a385      	add	r3, pc, #532	; (adr r3, 800e940 <__ieee754_rem_pio2+0x318>)
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	4604      	mov	r4, r0
 800e730:	460d      	mov	r5, r1
 800e732:	f7f1 fdd3 	bl	80002dc <__adddf3>
 800e736:	4602      	mov	r2, r0
 800e738:	460b      	mov	r3, r1
 800e73a:	e9ca 2300 	strd	r2, r3, [sl]
 800e73e:	4620      	mov	r0, r4
 800e740:	4629      	mov	r1, r5
 800e742:	f7f1 fdc9 	bl	80002d8 <__aeabi_dsub>
 800e746:	a37e      	add	r3, pc, #504	; (adr r3, 800e940 <__ieee754_rem_pio2+0x318>)
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	e7e0      	b.n	800e710 <__ieee754_rem_pio2+0xe8>
 800e74e:	4b87      	ldr	r3, [pc, #540]	; (800e96c <__ieee754_rem_pio2+0x344>)
 800e750:	4598      	cmp	r8, r3
 800e752:	f300 80d8 	bgt.w	800e906 <__ieee754_rem_pio2+0x2de>
 800e756:	f000 fb0f 	bl	800ed78 <fabs>
 800e75a:	ec55 4b10 	vmov	r4, r5, d0
 800e75e:	ee10 0a10 	vmov	r0, s0
 800e762:	a379      	add	r3, pc, #484	; (adr r3, 800e948 <__ieee754_rem_pio2+0x320>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	4629      	mov	r1, r5
 800e76a:	f7f1 ff6d 	bl	8000648 <__aeabi_dmul>
 800e76e:	4b80      	ldr	r3, [pc, #512]	; (800e970 <__ieee754_rem_pio2+0x348>)
 800e770:	2200      	movs	r2, #0
 800e772:	f7f1 fdb3 	bl	80002dc <__adddf3>
 800e776:	f7f2 fa17 	bl	8000ba8 <__aeabi_d2iz>
 800e77a:	4683      	mov	fp, r0
 800e77c:	f7f1 fefa 	bl	8000574 <__aeabi_i2d>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	ec43 2b18 	vmov	d8, r2, r3
 800e788:	a367      	add	r3, pc, #412	; (adr r3, 800e928 <__ieee754_rem_pio2+0x300>)
 800e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78e:	f7f1 ff5b 	bl	8000648 <__aeabi_dmul>
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	4620      	mov	r0, r4
 800e798:	4629      	mov	r1, r5
 800e79a:	f7f1 fd9d 	bl	80002d8 <__aeabi_dsub>
 800e79e:	a364      	add	r3, pc, #400	; (adr r3, 800e930 <__ieee754_rem_pio2+0x308>)
 800e7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	460f      	mov	r7, r1
 800e7a8:	ec51 0b18 	vmov	r0, r1, d8
 800e7ac:	f7f1 ff4c 	bl	8000648 <__aeabi_dmul>
 800e7b0:	f1bb 0f1f 	cmp.w	fp, #31
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	460d      	mov	r5, r1
 800e7b8:	dc0d      	bgt.n	800e7d6 <__ieee754_rem_pio2+0x1ae>
 800e7ba:	4b6e      	ldr	r3, [pc, #440]	; (800e974 <__ieee754_rem_pio2+0x34c>)
 800e7bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7c4:	4543      	cmp	r3, r8
 800e7c6:	d006      	beq.n	800e7d6 <__ieee754_rem_pio2+0x1ae>
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	4639      	mov	r1, r7
 800e7d0:	f7f1 fd82 	bl	80002d8 <__aeabi_dsub>
 800e7d4:	e00e      	b.n	800e7f4 <__ieee754_rem_pio2+0x1cc>
 800e7d6:	462b      	mov	r3, r5
 800e7d8:	4622      	mov	r2, r4
 800e7da:	4630      	mov	r0, r6
 800e7dc:	4639      	mov	r1, r7
 800e7de:	f7f1 fd7b 	bl	80002d8 <__aeabi_dsub>
 800e7e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e7e6:	9303      	str	r3, [sp, #12]
 800e7e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e7ec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e7f0:	2b10      	cmp	r3, #16
 800e7f2:	dc02      	bgt.n	800e7fa <__ieee754_rem_pio2+0x1d2>
 800e7f4:	e9ca 0100 	strd	r0, r1, [sl]
 800e7f8:	e039      	b.n	800e86e <__ieee754_rem_pio2+0x246>
 800e7fa:	a34f      	add	r3, pc, #316	; (adr r3, 800e938 <__ieee754_rem_pio2+0x310>)
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	ec51 0b18 	vmov	r0, r1, d8
 800e804:	f7f1 ff20 	bl	8000648 <__aeabi_dmul>
 800e808:	4604      	mov	r4, r0
 800e80a:	460d      	mov	r5, r1
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	4630      	mov	r0, r6
 800e812:	4639      	mov	r1, r7
 800e814:	f7f1 fd60 	bl	80002d8 <__aeabi_dsub>
 800e818:	4602      	mov	r2, r0
 800e81a:	460b      	mov	r3, r1
 800e81c:	4680      	mov	r8, r0
 800e81e:	4689      	mov	r9, r1
 800e820:	4630      	mov	r0, r6
 800e822:	4639      	mov	r1, r7
 800e824:	f7f1 fd58 	bl	80002d8 <__aeabi_dsub>
 800e828:	4622      	mov	r2, r4
 800e82a:	462b      	mov	r3, r5
 800e82c:	f7f1 fd54 	bl	80002d8 <__aeabi_dsub>
 800e830:	a343      	add	r3, pc, #268	; (adr r3, 800e940 <__ieee754_rem_pio2+0x318>)
 800e832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e836:	4604      	mov	r4, r0
 800e838:	460d      	mov	r5, r1
 800e83a:	ec51 0b18 	vmov	r0, r1, d8
 800e83e:	f7f1 ff03 	bl	8000648 <__aeabi_dmul>
 800e842:	4622      	mov	r2, r4
 800e844:	462b      	mov	r3, r5
 800e846:	f7f1 fd47 	bl	80002d8 <__aeabi_dsub>
 800e84a:	4602      	mov	r2, r0
 800e84c:	460b      	mov	r3, r1
 800e84e:	4604      	mov	r4, r0
 800e850:	460d      	mov	r5, r1
 800e852:	4640      	mov	r0, r8
 800e854:	4649      	mov	r1, r9
 800e856:	f7f1 fd3f 	bl	80002d8 <__aeabi_dsub>
 800e85a:	9a03      	ldr	r2, [sp, #12]
 800e85c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	2b31      	cmp	r3, #49	; 0x31
 800e864:	dc24      	bgt.n	800e8b0 <__ieee754_rem_pio2+0x288>
 800e866:	e9ca 0100 	strd	r0, r1, [sl]
 800e86a:	4646      	mov	r6, r8
 800e86c:	464f      	mov	r7, r9
 800e86e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e872:	4630      	mov	r0, r6
 800e874:	4642      	mov	r2, r8
 800e876:	464b      	mov	r3, r9
 800e878:	4639      	mov	r1, r7
 800e87a:	f7f1 fd2d 	bl	80002d8 <__aeabi_dsub>
 800e87e:	462b      	mov	r3, r5
 800e880:	4622      	mov	r2, r4
 800e882:	f7f1 fd29 	bl	80002d8 <__aeabi_dsub>
 800e886:	9b02      	ldr	r3, [sp, #8]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e88e:	f6bf af0b 	bge.w	800e6a8 <__ieee754_rem_pio2+0x80>
 800e892:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e896:	f8ca 3004 	str.w	r3, [sl, #4]
 800e89a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e89e:	f8ca 8000 	str.w	r8, [sl]
 800e8a2:	f8ca 0008 	str.w	r0, [sl, #8]
 800e8a6:	f8ca 300c 	str.w	r3, [sl, #12]
 800e8aa:	f1cb 0b00 	rsb	fp, fp, #0
 800e8ae:	e6fb      	b.n	800e6a8 <__ieee754_rem_pio2+0x80>
 800e8b0:	a327      	add	r3, pc, #156	; (adr r3, 800e950 <__ieee754_rem_pio2+0x328>)
 800e8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b6:	ec51 0b18 	vmov	r0, r1, d8
 800e8ba:	f7f1 fec5 	bl	8000648 <__aeabi_dmul>
 800e8be:	4604      	mov	r4, r0
 800e8c0:	460d      	mov	r5, r1
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4640      	mov	r0, r8
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	f7f1 fd05 	bl	80002d8 <__aeabi_dsub>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460f      	mov	r7, r1
 800e8d6:	4640      	mov	r0, r8
 800e8d8:	4649      	mov	r1, r9
 800e8da:	f7f1 fcfd 	bl	80002d8 <__aeabi_dsub>
 800e8de:	4622      	mov	r2, r4
 800e8e0:	462b      	mov	r3, r5
 800e8e2:	f7f1 fcf9 	bl	80002d8 <__aeabi_dsub>
 800e8e6:	a31c      	add	r3, pc, #112	; (adr r3, 800e958 <__ieee754_rem_pio2+0x330>)
 800e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	ec51 0b18 	vmov	r0, r1, d8
 800e8f4:	f7f1 fea8 	bl	8000648 <__aeabi_dmul>
 800e8f8:	4622      	mov	r2, r4
 800e8fa:	462b      	mov	r3, r5
 800e8fc:	f7f1 fcec 	bl	80002d8 <__aeabi_dsub>
 800e900:	4604      	mov	r4, r0
 800e902:	460d      	mov	r5, r1
 800e904:	e760      	b.n	800e7c8 <__ieee754_rem_pio2+0x1a0>
 800e906:	4b1c      	ldr	r3, [pc, #112]	; (800e978 <__ieee754_rem_pio2+0x350>)
 800e908:	4598      	cmp	r8, r3
 800e90a:	dd37      	ble.n	800e97c <__ieee754_rem_pio2+0x354>
 800e90c:	ee10 2a10 	vmov	r2, s0
 800e910:	462b      	mov	r3, r5
 800e912:	4620      	mov	r0, r4
 800e914:	4629      	mov	r1, r5
 800e916:	f7f1 fcdf 	bl	80002d8 <__aeabi_dsub>
 800e91a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e91e:	e9ca 0100 	strd	r0, r1, [sl]
 800e922:	e695      	b.n	800e650 <__ieee754_rem_pio2+0x28>
 800e924:	f3af 8000 	nop.w
 800e928:	54400000 	.word	0x54400000
 800e92c:	3ff921fb 	.word	0x3ff921fb
 800e930:	1a626331 	.word	0x1a626331
 800e934:	3dd0b461 	.word	0x3dd0b461
 800e938:	1a600000 	.word	0x1a600000
 800e93c:	3dd0b461 	.word	0x3dd0b461
 800e940:	2e037073 	.word	0x2e037073
 800e944:	3ba3198a 	.word	0x3ba3198a
 800e948:	6dc9c883 	.word	0x6dc9c883
 800e94c:	3fe45f30 	.word	0x3fe45f30
 800e950:	2e000000 	.word	0x2e000000
 800e954:	3ba3198a 	.word	0x3ba3198a
 800e958:	252049c1 	.word	0x252049c1
 800e95c:	397b839a 	.word	0x397b839a
 800e960:	3fe921fb 	.word	0x3fe921fb
 800e964:	4002d97b 	.word	0x4002d97b
 800e968:	3ff921fb 	.word	0x3ff921fb
 800e96c:	413921fb 	.word	0x413921fb
 800e970:	3fe00000 	.word	0x3fe00000
 800e974:	08010100 	.word	0x08010100
 800e978:	7fefffff 	.word	0x7fefffff
 800e97c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e980:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e984:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e988:	4620      	mov	r0, r4
 800e98a:	460d      	mov	r5, r1
 800e98c:	f7f2 f90c 	bl	8000ba8 <__aeabi_d2iz>
 800e990:	f7f1 fdf0 	bl	8000574 <__aeabi_i2d>
 800e994:	4602      	mov	r2, r0
 800e996:	460b      	mov	r3, r1
 800e998:	4620      	mov	r0, r4
 800e99a:	4629      	mov	r1, r5
 800e99c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e9a0:	f7f1 fc9a 	bl	80002d8 <__aeabi_dsub>
 800e9a4:	4b21      	ldr	r3, [pc, #132]	; (800ea2c <__ieee754_rem_pio2+0x404>)
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f7f1 fe4e 	bl	8000648 <__aeabi_dmul>
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	f7f2 f8fa 	bl	8000ba8 <__aeabi_d2iz>
 800e9b4:	f7f1 fdde 	bl	8000574 <__aeabi_i2d>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	4620      	mov	r0, r4
 800e9be:	4629      	mov	r1, r5
 800e9c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e9c4:	f7f1 fc88 	bl	80002d8 <__aeabi_dsub>
 800e9c8:	4b18      	ldr	r3, [pc, #96]	; (800ea2c <__ieee754_rem_pio2+0x404>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f7f1 fe3c 	bl	8000648 <__aeabi_dmul>
 800e9d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e9d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e9d8:	2703      	movs	r7, #3
 800e9da:	2400      	movs	r4, #0
 800e9dc:	2500      	movs	r5, #0
 800e9de:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e9e2:	4622      	mov	r2, r4
 800e9e4:	462b      	mov	r3, r5
 800e9e6:	46b9      	mov	r9, r7
 800e9e8:	3f01      	subs	r7, #1
 800e9ea:	f7f2 f895 	bl	8000b18 <__aeabi_dcmpeq>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	d1f5      	bne.n	800e9de <__ieee754_rem_pio2+0x3b6>
 800e9f2:	4b0f      	ldr	r3, [pc, #60]	; (800ea30 <__ieee754_rem_pio2+0x408>)
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	4632      	mov	r2, r6
 800e9fc:	464b      	mov	r3, r9
 800e9fe:	4651      	mov	r1, sl
 800ea00:	a804      	add	r0, sp, #16
 800ea02:	f000 f9c5 	bl	800ed90 <__kernel_rem_pio2>
 800ea06:	9b02      	ldr	r3, [sp, #8]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	4683      	mov	fp, r0
 800ea0c:	f6bf ae4c 	bge.w	800e6a8 <__ieee754_rem_pio2+0x80>
 800ea10:	e9da 2100 	ldrd	r2, r1, [sl]
 800ea14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea18:	e9ca 2300 	strd	r2, r3, [sl]
 800ea1c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ea20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea24:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ea28:	e73f      	b.n	800e8aa <__ieee754_rem_pio2+0x282>
 800ea2a:	bf00      	nop
 800ea2c:	41700000 	.word	0x41700000
 800ea30:	08010180 	.word	0x08010180
 800ea34:	00000000 	.word	0x00000000

0800ea38 <atan>:
 800ea38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	ec55 4b10 	vmov	r4, r5, d0
 800ea40:	4bc3      	ldr	r3, [pc, #780]	; (800ed50 <atan+0x318>)
 800ea42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ea46:	429e      	cmp	r6, r3
 800ea48:	46ab      	mov	fp, r5
 800ea4a:	dd18      	ble.n	800ea7e <atan+0x46>
 800ea4c:	4bc1      	ldr	r3, [pc, #772]	; (800ed54 <atan+0x31c>)
 800ea4e:	429e      	cmp	r6, r3
 800ea50:	dc01      	bgt.n	800ea56 <atan+0x1e>
 800ea52:	d109      	bne.n	800ea68 <atan+0x30>
 800ea54:	b144      	cbz	r4, 800ea68 <atan+0x30>
 800ea56:	4622      	mov	r2, r4
 800ea58:	462b      	mov	r3, r5
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	f7f1 fc3d 	bl	80002dc <__adddf3>
 800ea62:	4604      	mov	r4, r0
 800ea64:	460d      	mov	r5, r1
 800ea66:	e006      	b.n	800ea76 <atan+0x3e>
 800ea68:	f1bb 0f00 	cmp.w	fp, #0
 800ea6c:	f300 8131 	bgt.w	800ecd2 <atan+0x29a>
 800ea70:	a59b      	add	r5, pc, #620	; (adr r5, 800ece0 <atan+0x2a8>)
 800ea72:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea76:	ec45 4b10 	vmov	d0, r4, r5
 800ea7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7e:	4bb6      	ldr	r3, [pc, #728]	; (800ed58 <atan+0x320>)
 800ea80:	429e      	cmp	r6, r3
 800ea82:	dc14      	bgt.n	800eaae <atan+0x76>
 800ea84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ea88:	429e      	cmp	r6, r3
 800ea8a:	dc0d      	bgt.n	800eaa8 <atan+0x70>
 800ea8c:	a396      	add	r3, pc, #600	; (adr r3, 800ece8 <atan+0x2b0>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	ee10 0a10 	vmov	r0, s0
 800ea96:	4629      	mov	r1, r5
 800ea98:	f7f1 fc20 	bl	80002dc <__adddf3>
 800ea9c:	4baf      	ldr	r3, [pc, #700]	; (800ed5c <atan+0x324>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f7f2 f862 	bl	8000b68 <__aeabi_dcmpgt>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d1e6      	bne.n	800ea76 <atan+0x3e>
 800eaa8:	f04f 3aff 	mov.w	sl, #4294967295
 800eaac:	e02b      	b.n	800eb06 <atan+0xce>
 800eaae:	f000 f963 	bl	800ed78 <fabs>
 800eab2:	4bab      	ldr	r3, [pc, #684]	; (800ed60 <atan+0x328>)
 800eab4:	429e      	cmp	r6, r3
 800eab6:	ec55 4b10 	vmov	r4, r5, d0
 800eaba:	f300 80bf 	bgt.w	800ec3c <atan+0x204>
 800eabe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eac2:	429e      	cmp	r6, r3
 800eac4:	f300 80a0 	bgt.w	800ec08 <atan+0x1d0>
 800eac8:	ee10 2a10 	vmov	r2, s0
 800eacc:	ee10 0a10 	vmov	r0, s0
 800ead0:	462b      	mov	r3, r5
 800ead2:	4629      	mov	r1, r5
 800ead4:	f7f1 fc02 	bl	80002dc <__adddf3>
 800ead8:	4ba0      	ldr	r3, [pc, #640]	; (800ed5c <atan+0x324>)
 800eada:	2200      	movs	r2, #0
 800eadc:	f7f1 fbfc 	bl	80002d8 <__aeabi_dsub>
 800eae0:	2200      	movs	r2, #0
 800eae2:	4606      	mov	r6, r0
 800eae4:	460f      	mov	r7, r1
 800eae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eaea:	4620      	mov	r0, r4
 800eaec:	4629      	mov	r1, r5
 800eaee:	f7f1 fbf5 	bl	80002dc <__adddf3>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	4639      	mov	r1, r7
 800eafa:	f7f1 fecf 	bl	800089c <__aeabi_ddiv>
 800eafe:	f04f 0a00 	mov.w	sl, #0
 800eb02:	4604      	mov	r4, r0
 800eb04:	460d      	mov	r5, r1
 800eb06:	4622      	mov	r2, r4
 800eb08:	462b      	mov	r3, r5
 800eb0a:	4620      	mov	r0, r4
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	f7f1 fd9b 	bl	8000648 <__aeabi_dmul>
 800eb12:	4602      	mov	r2, r0
 800eb14:	460b      	mov	r3, r1
 800eb16:	4680      	mov	r8, r0
 800eb18:	4689      	mov	r9, r1
 800eb1a:	f7f1 fd95 	bl	8000648 <__aeabi_dmul>
 800eb1e:	a374      	add	r3, pc, #464	; (adr r3, 800ecf0 <atan+0x2b8>)
 800eb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb24:	4606      	mov	r6, r0
 800eb26:	460f      	mov	r7, r1
 800eb28:	f7f1 fd8e 	bl	8000648 <__aeabi_dmul>
 800eb2c:	a372      	add	r3, pc, #456	; (adr r3, 800ecf8 <atan+0x2c0>)
 800eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb32:	f7f1 fbd3 	bl	80002dc <__adddf3>
 800eb36:	4632      	mov	r2, r6
 800eb38:	463b      	mov	r3, r7
 800eb3a:	f7f1 fd85 	bl	8000648 <__aeabi_dmul>
 800eb3e:	a370      	add	r3, pc, #448	; (adr r3, 800ed00 <atan+0x2c8>)
 800eb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb44:	f7f1 fbca 	bl	80002dc <__adddf3>
 800eb48:	4632      	mov	r2, r6
 800eb4a:	463b      	mov	r3, r7
 800eb4c:	f7f1 fd7c 	bl	8000648 <__aeabi_dmul>
 800eb50:	a36d      	add	r3, pc, #436	; (adr r3, 800ed08 <atan+0x2d0>)
 800eb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb56:	f7f1 fbc1 	bl	80002dc <__adddf3>
 800eb5a:	4632      	mov	r2, r6
 800eb5c:	463b      	mov	r3, r7
 800eb5e:	f7f1 fd73 	bl	8000648 <__aeabi_dmul>
 800eb62:	a36b      	add	r3, pc, #428	; (adr r3, 800ed10 <atan+0x2d8>)
 800eb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb68:	f7f1 fbb8 	bl	80002dc <__adddf3>
 800eb6c:	4632      	mov	r2, r6
 800eb6e:	463b      	mov	r3, r7
 800eb70:	f7f1 fd6a 	bl	8000648 <__aeabi_dmul>
 800eb74:	a368      	add	r3, pc, #416	; (adr r3, 800ed18 <atan+0x2e0>)
 800eb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7a:	f7f1 fbaf 	bl	80002dc <__adddf3>
 800eb7e:	4642      	mov	r2, r8
 800eb80:	464b      	mov	r3, r9
 800eb82:	f7f1 fd61 	bl	8000648 <__aeabi_dmul>
 800eb86:	a366      	add	r3, pc, #408	; (adr r3, 800ed20 <atan+0x2e8>)
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	4680      	mov	r8, r0
 800eb8e:	4689      	mov	r9, r1
 800eb90:	4630      	mov	r0, r6
 800eb92:	4639      	mov	r1, r7
 800eb94:	f7f1 fd58 	bl	8000648 <__aeabi_dmul>
 800eb98:	a363      	add	r3, pc, #396	; (adr r3, 800ed28 <atan+0x2f0>)
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	f7f1 fb9b 	bl	80002d8 <__aeabi_dsub>
 800eba2:	4632      	mov	r2, r6
 800eba4:	463b      	mov	r3, r7
 800eba6:	f7f1 fd4f 	bl	8000648 <__aeabi_dmul>
 800ebaa:	a361      	add	r3, pc, #388	; (adr r3, 800ed30 <atan+0x2f8>)
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	f7f1 fb92 	bl	80002d8 <__aeabi_dsub>
 800ebb4:	4632      	mov	r2, r6
 800ebb6:	463b      	mov	r3, r7
 800ebb8:	f7f1 fd46 	bl	8000648 <__aeabi_dmul>
 800ebbc:	a35e      	add	r3, pc, #376	; (adr r3, 800ed38 <atan+0x300>)
 800ebbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc2:	f7f1 fb89 	bl	80002d8 <__aeabi_dsub>
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	463b      	mov	r3, r7
 800ebca:	f7f1 fd3d 	bl	8000648 <__aeabi_dmul>
 800ebce:	a35c      	add	r3, pc, #368	; (adr r3, 800ed40 <atan+0x308>)
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	f7f1 fb80 	bl	80002d8 <__aeabi_dsub>
 800ebd8:	4632      	mov	r2, r6
 800ebda:	463b      	mov	r3, r7
 800ebdc:	f7f1 fd34 	bl	8000648 <__aeabi_dmul>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	f7f1 fb78 	bl	80002dc <__adddf3>
 800ebec:	4622      	mov	r2, r4
 800ebee:	462b      	mov	r3, r5
 800ebf0:	f7f1 fd2a 	bl	8000648 <__aeabi_dmul>
 800ebf4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	d14b      	bne.n	800ec96 <atan+0x25e>
 800ebfe:	4620      	mov	r0, r4
 800ec00:	4629      	mov	r1, r5
 800ec02:	f7f1 fb69 	bl	80002d8 <__aeabi_dsub>
 800ec06:	e72c      	b.n	800ea62 <atan+0x2a>
 800ec08:	ee10 0a10 	vmov	r0, s0
 800ec0c:	4b53      	ldr	r3, [pc, #332]	; (800ed5c <atan+0x324>)
 800ec0e:	2200      	movs	r2, #0
 800ec10:	4629      	mov	r1, r5
 800ec12:	f7f1 fb61 	bl	80002d8 <__aeabi_dsub>
 800ec16:	4b51      	ldr	r3, [pc, #324]	; (800ed5c <atan+0x324>)
 800ec18:	4606      	mov	r6, r0
 800ec1a:	460f      	mov	r7, r1
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	4620      	mov	r0, r4
 800ec20:	4629      	mov	r1, r5
 800ec22:	f7f1 fb5b 	bl	80002dc <__adddf3>
 800ec26:	4602      	mov	r2, r0
 800ec28:	460b      	mov	r3, r1
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	4639      	mov	r1, r7
 800ec2e:	f7f1 fe35 	bl	800089c <__aeabi_ddiv>
 800ec32:	f04f 0a01 	mov.w	sl, #1
 800ec36:	4604      	mov	r4, r0
 800ec38:	460d      	mov	r5, r1
 800ec3a:	e764      	b.n	800eb06 <atan+0xce>
 800ec3c:	4b49      	ldr	r3, [pc, #292]	; (800ed64 <atan+0x32c>)
 800ec3e:	429e      	cmp	r6, r3
 800ec40:	da1d      	bge.n	800ec7e <atan+0x246>
 800ec42:	ee10 0a10 	vmov	r0, s0
 800ec46:	4b48      	ldr	r3, [pc, #288]	; (800ed68 <atan+0x330>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7f1 fb44 	bl	80002d8 <__aeabi_dsub>
 800ec50:	4b45      	ldr	r3, [pc, #276]	; (800ed68 <atan+0x330>)
 800ec52:	4606      	mov	r6, r0
 800ec54:	460f      	mov	r7, r1
 800ec56:	2200      	movs	r2, #0
 800ec58:	4620      	mov	r0, r4
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	f7f1 fcf4 	bl	8000648 <__aeabi_dmul>
 800ec60:	4b3e      	ldr	r3, [pc, #248]	; (800ed5c <atan+0x324>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	f7f1 fb3a 	bl	80002dc <__adddf3>
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	4639      	mov	r1, r7
 800ec70:	f7f1 fe14 	bl	800089c <__aeabi_ddiv>
 800ec74:	f04f 0a02 	mov.w	sl, #2
 800ec78:	4604      	mov	r4, r0
 800ec7a:	460d      	mov	r5, r1
 800ec7c:	e743      	b.n	800eb06 <atan+0xce>
 800ec7e:	462b      	mov	r3, r5
 800ec80:	ee10 2a10 	vmov	r2, s0
 800ec84:	4939      	ldr	r1, [pc, #228]	; (800ed6c <atan+0x334>)
 800ec86:	2000      	movs	r0, #0
 800ec88:	f7f1 fe08 	bl	800089c <__aeabi_ddiv>
 800ec8c:	f04f 0a03 	mov.w	sl, #3
 800ec90:	4604      	mov	r4, r0
 800ec92:	460d      	mov	r5, r1
 800ec94:	e737      	b.n	800eb06 <atan+0xce>
 800ec96:	4b36      	ldr	r3, [pc, #216]	; (800ed70 <atan+0x338>)
 800ec98:	4e36      	ldr	r6, [pc, #216]	; (800ed74 <atan+0x33c>)
 800ec9a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	f7f1 fb19 	bl	80002d8 <__aeabi_dsub>
 800eca6:	4622      	mov	r2, r4
 800eca8:	462b      	mov	r3, r5
 800ecaa:	f7f1 fb15 	bl	80002d8 <__aeabi_dsub>
 800ecae:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ecba:	f7f1 fb0d 	bl	80002d8 <__aeabi_dsub>
 800ecbe:	f1bb 0f00 	cmp.w	fp, #0
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	f6bf aed6 	bge.w	800ea76 <atan+0x3e>
 800ecca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecce:	461d      	mov	r5, r3
 800ecd0:	e6d1      	b.n	800ea76 <atan+0x3e>
 800ecd2:	a51d      	add	r5, pc, #116	; (adr r5, 800ed48 <atan+0x310>)
 800ecd4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ecd8:	e6cd      	b.n	800ea76 <atan+0x3e>
 800ecda:	bf00      	nop
 800ecdc:	f3af 8000 	nop.w
 800ece0:	54442d18 	.word	0x54442d18
 800ece4:	bff921fb 	.word	0xbff921fb
 800ece8:	8800759c 	.word	0x8800759c
 800ecec:	7e37e43c 	.word	0x7e37e43c
 800ecf0:	e322da11 	.word	0xe322da11
 800ecf4:	3f90ad3a 	.word	0x3f90ad3a
 800ecf8:	24760deb 	.word	0x24760deb
 800ecfc:	3fa97b4b 	.word	0x3fa97b4b
 800ed00:	a0d03d51 	.word	0xa0d03d51
 800ed04:	3fb10d66 	.word	0x3fb10d66
 800ed08:	c54c206e 	.word	0xc54c206e
 800ed0c:	3fb745cd 	.word	0x3fb745cd
 800ed10:	920083ff 	.word	0x920083ff
 800ed14:	3fc24924 	.word	0x3fc24924
 800ed18:	5555550d 	.word	0x5555550d
 800ed1c:	3fd55555 	.word	0x3fd55555
 800ed20:	2c6a6c2f 	.word	0x2c6a6c2f
 800ed24:	bfa2b444 	.word	0xbfa2b444
 800ed28:	52defd9a 	.word	0x52defd9a
 800ed2c:	3fadde2d 	.word	0x3fadde2d
 800ed30:	af749a6d 	.word	0xaf749a6d
 800ed34:	3fb3b0f2 	.word	0x3fb3b0f2
 800ed38:	fe231671 	.word	0xfe231671
 800ed3c:	3fbc71c6 	.word	0x3fbc71c6
 800ed40:	9998ebc4 	.word	0x9998ebc4
 800ed44:	3fc99999 	.word	0x3fc99999
 800ed48:	54442d18 	.word	0x54442d18
 800ed4c:	3ff921fb 	.word	0x3ff921fb
 800ed50:	440fffff 	.word	0x440fffff
 800ed54:	7ff00000 	.word	0x7ff00000
 800ed58:	3fdbffff 	.word	0x3fdbffff
 800ed5c:	3ff00000 	.word	0x3ff00000
 800ed60:	3ff2ffff 	.word	0x3ff2ffff
 800ed64:	40038000 	.word	0x40038000
 800ed68:	3ff80000 	.word	0x3ff80000
 800ed6c:	bff00000 	.word	0xbff00000
 800ed70:	080102a8 	.word	0x080102a8
 800ed74:	08010288 	.word	0x08010288

0800ed78 <fabs>:
 800ed78:	ec51 0b10 	vmov	r0, r1, d0
 800ed7c:	ee10 2a10 	vmov	r2, s0
 800ed80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed84:	ec43 2b10 	vmov	d0, r2, r3
 800ed88:	4770      	bx	lr
 800ed8a:	0000      	movs	r0, r0
 800ed8c:	0000      	movs	r0, r0
	...

0800ed90 <__kernel_rem_pio2>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	ed2d 8b02 	vpush	{d8}
 800ed98:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ed9c:	f112 0f14 	cmn.w	r2, #20
 800eda0:	9306      	str	r3, [sp, #24]
 800eda2:	9104      	str	r1, [sp, #16]
 800eda4:	4bc2      	ldr	r3, [pc, #776]	; (800f0b0 <__kernel_rem_pio2+0x320>)
 800eda6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800eda8:	9009      	str	r0, [sp, #36]	; 0x24
 800edaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	9b06      	ldr	r3, [sp, #24]
 800edb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800edb6:	bfa8      	it	ge
 800edb8:	1ed4      	subge	r4, r2, #3
 800edba:	9305      	str	r3, [sp, #20]
 800edbc:	bfb2      	itee	lt
 800edbe:	2400      	movlt	r4, #0
 800edc0:	2318      	movge	r3, #24
 800edc2:	fb94 f4f3 	sdivge	r4, r4, r3
 800edc6:	f06f 0317 	mvn.w	r3, #23
 800edca:	fb04 3303 	mla	r3, r4, r3, r3
 800edce:	eb03 0a02 	add.w	sl, r3, r2
 800edd2:	9b00      	ldr	r3, [sp, #0]
 800edd4:	9a05      	ldr	r2, [sp, #20]
 800edd6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f0a0 <__kernel_rem_pio2+0x310>
 800edda:	eb03 0802 	add.w	r8, r3, r2
 800edde:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ede0:	1aa7      	subs	r7, r4, r2
 800ede2:	ae20      	add	r6, sp, #128	; 0x80
 800ede4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ede8:	2500      	movs	r5, #0
 800edea:	4545      	cmp	r5, r8
 800edec:	dd13      	ble.n	800ee16 <__kernel_rem_pio2+0x86>
 800edee:	9b06      	ldr	r3, [sp, #24]
 800edf0:	aa20      	add	r2, sp, #128	; 0x80
 800edf2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800edf6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800edfa:	f04f 0800 	mov.w	r8, #0
 800edfe:	9b00      	ldr	r3, [sp, #0]
 800ee00:	4598      	cmp	r8, r3
 800ee02:	dc31      	bgt.n	800ee68 <__kernel_rem_pio2+0xd8>
 800ee04:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f0a0 <__kernel_rem_pio2+0x310>
 800ee08:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ee10:	462f      	mov	r7, r5
 800ee12:	2600      	movs	r6, #0
 800ee14:	e01b      	b.n	800ee4e <__kernel_rem_pio2+0xbe>
 800ee16:	42ef      	cmn	r7, r5
 800ee18:	d407      	bmi.n	800ee2a <__kernel_rem_pio2+0x9a>
 800ee1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ee1e:	f7f1 fba9 	bl	8000574 <__aeabi_i2d>
 800ee22:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ee26:	3501      	adds	r5, #1
 800ee28:	e7df      	b.n	800edea <__kernel_rem_pio2+0x5a>
 800ee2a:	ec51 0b18 	vmov	r0, r1, d8
 800ee2e:	e7f8      	b.n	800ee22 <__kernel_rem_pio2+0x92>
 800ee30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ee38:	f7f1 fc06 	bl	8000648 <__aeabi_dmul>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee44:	f7f1 fa4a 	bl	80002dc <__adddf3>
 800ee48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee4c:	3601      	adds	r6, #1
 800ee4e:	9b05      	ldr	r3, [sp, #20]
 800ee50:	429e      	cmp	r6, r3
 800ee52:	f1a7 0708 	sub.w	r7, r7, #8
 800ee56:	ddeb      	ble.n	800ee30 <__kernel_rem_pio2+0xa0>
 800ee58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee5c:	f108 0801 	add.w	r8, r8, #1
 800ee60:	ecab 7b02 	vstmia	fp!, {d7}
 800ee64:	3508      	adds	r5, #8
 800ee66:	e7ca      	b.n	800edfe <__kernel_rem_pio2+0x6e>
 800ee68:	9b00      	ldr	r3, [sp, #0]
 800ee6a:	aa0c      	add	r2, sp, #48	; 0x30
 800ee6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee72:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ee74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ee78:	9c00      	ldr	r4, [sp, #0]
 800ee7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ee7c:	00e3      	lsls	r3, r4, #3
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	ab98      	add	r3, sp, #608	; 0x260
 800ee82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ee8a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ee8e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ee90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ee94:	46c3      	mov	fp, r8
 800ee96:	46a1      	mov	r9, r4
 800ee98:	f1b9 0f00 	cmp.w	r9, #0
 800ee9c:	f1a5 0508 	sub.w	r5, r5, #8
 800eea0:	dc77      	bgt.n	800ef92 <__kernel_rem_pio2+0x202>
 800eea2:	ec47 6b10 	vmov	d0, r6, r7
 800eea6:	4650      	mov	r0, sl
 800eea8:	f000 fac2 	bl	800f430 <scalbn>
 800eeac:	ec57 6b10 	vmov	r6, r7, d0
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800eeb6:	ee10 0a10 	vmov	r0, s0
 800eeba:	4639      	mov	r1, r7
 800eebc:	f7f1 fbc4 	bl	8000648 <__aeabi_dmul>
 800eec0:	ec41 0b10 	vmov	d0, r0, r1
 800eec4:	f000 fb34 	bl	800f530 <floor>
 800eec8:	4b7a      	ldr	r3, [pc, #488]	; (800f0b4 <__kernel_rem_pio2+0x324>)
 800eeca:	ec51 0b10 	vmov	r0, r1, d0
 800eece:	2200      	movs	r2, #0
 800eed0:	f7f1 fbba 	bl	8000648 <__aeabi_dmul>
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	4630      	mov	r0, r6
 800eeda:	4639      	mov	r1, r7
 800eedc:	f7f1 f9fc 	bl	80002d8 <__aeabi_dsub>
 800eee0:	460f      	mov	r7, r1
 800eee2:	4606      	mov	r6, r0
 800eee4:	f7f1 fe60 	bl	8000ba8 <__aeabi_d2iz>
 800eee8:	9002      	str	r0, [sp, #8]
 800eeea:	f7f1 fb43 	bl	8000574 <__aeabi_i2d>
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	4630      	mov	r0, r6
 800eef4:	4639      	mov	r1, r7
 800eef6:	f7f1 f9ef 	bl	80002d8 <__aeabi_dsub>
 800eefa:	f1ba 0f00 	cmp.w	sl, #0
 800eefe:	4606      	mov	r6, r0
 800ef00:	460f      	mov	r7, r1
 800ef02:	dd6d      	ble.n	800efe0 <__kernel_rem_pio2+0x250>
 800ef04:	1e61      	subs	r1, r4, #1
 800ef06:	ab0c      	add	r3, sp, #48	; 0x30
 800ef08:	9d02      	ldr	r5, [sp, #8]
 800ef0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef0e:	f1ca 0018 	rsb	r0, sl, #24
 800ef12:	fa43 f200 	asr.w	r2, r3, r0
 800ef16:	4415      	add	r5, r2
 800ef18:	4082      	lsls	r2, r0
 800ef1a:	1a9b      	subs	r3, r3, r2
 800ef1c:	aa0c      	add	r2, sp, #48	; 0x30
 800ef1e:	9502      	str	r5, [sp, #8]
 800ef20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ef24:	f1ca 0217 	rsb	r2, sl, #23
 800ef28:	fa43 fb02 	asr.w	fp, r3, r2
 800ef2c:	f1bb 0f00 	cmp.w	fp, #0
 800ef30:	dd65      	ble.n	800effe <__kernel_rem_pio2+0x26e>
 800ef32:	9b02      	ldr	r3, [sp, #8]
 800ef34:	2200      	movs	r2, #0
 800ef36:	3301      	adds	r3, #1
 800ef38:	9302      	str	r3, [sp, #8]
 800ef3a:	4615      	mov	r5, r2
 800ef3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ef40:	4294      	cmp	r4, r2
 800ef42:	f300 809f 	bgt.w	800f084 <__kernel_rem_pio2+0x2f4>
 800ef46:	f1ba 0f00 	cmp.w	sl, #0
 800ef4a:	dd07      	ble.n	800ef5c <__kernel_rem_pio2+0x1cc>
 800ef4c:	f1ba 0f01 	cmp.w	sl, #1
 800ef50:	f000 80c1 	beq.w	800f0d6 <__kernel_rem_pio2+0x346>
 800ef54:	f1ba 0f02 	cmp.w	sl, #2
 800ef58:	f000 80c7 	beq.w	800f0ea <__kernel_rem_pio2+0x35a>
 800ef5c:	f1bb 0f02 	cmp.w	fp, #2
 800ef60:	d14d      	bne.n	800effe <__kernel_rem_pio2+0x26e>
 800ef62:	4632      	mov	r2, r6
 800ef64:	463b      	mov	r3, r7
 800ef66:	4954      	ldr	r1, [pc, #336]	; (800f0b8 <__kernel_rem_pio2+0x328>)
 800ef68:	2000      	movs	r0, #0
 800ef6a:	f7f1 f9b5 	bl	80002d8 <__aeabi_dsub>
 800ef6e:	4606      	mov	r6, r0
 800ef70:	460f      	mov	r7, r1
 800ef72:	2d00      	cmp	r5, #0
 800ef74:	d043      	beq.n	800effe <__kernel_rem_pio2+0x26e>
 800ef76:	4650      	mov	r0, sl
 800ef78:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f0a8 <__kernel_rem_pio2+0x318>
 800ef7c:	f000 fa58 	bl	800f430 <scalbn>
 800ef80:	4630      	mov	r0, r6
 800ef82:	4639      	mov	r1, r7
 800ef84:	ec53 2b10 	vmov	r2, r3, d0
 800ef88:	f7f1 f9a6 	bl	80002d8 <__aeabi_dsub>
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	460f      	mov	r7, r1
 800ef90:	e035      	b.n	800effe <__kernel_rem_pio2+0x26e>
 800ef92:	4b4a      	ldr	r3, [pc, #296]	; (800f0bc <__kernel_rem_pio2+0x32c>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	4630      	mov	r0, r6
 800ef98:	4639      	mov	r1, r7
 800ef9a:	f7f1 fb55 	bl	8000648 <__aeabi_dmul>
 800ef9e:	f7f1 fe03 	bl	8000ba8 <__aeabi_d2iz>
 800efa2:	f7f1 fae7 	bl	8000574 <__aeabi_i2d>
 800efa6:	4602      	mov	r2, r0
 800efa8:	460b      	mov	r3, r1
 800efaa:	ec43 2b18 	vmov	d8, r2, r3
 800efae:	4b44      	ldr	r3, [pc, #272]	; (800f0c0 <__kernel_rem_pio2+0x330>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	f7f1 fb49 	bl	8000648 <__aeabi_dmul>
 800efb6:	4602      	mov	r2, r0
 800efb8:	460b      	mov	r3, r1
 800efba:	4630      	mov	r0, r6
 800efbc:	4639      	mov	r1, r7
 800efbe:	f7f1 f98b 	bl	80002d8 <__aeabi_dsub>
 800efc2:	f7f1 fdf1 	bl	8000ba8 <__aeabi_d2iz>
 800efc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800efca:	f84b 0b04 	str.w	r0, [fp], #4
 800efce:	ec51 0b18 	vmov	r0, r1, d8
 800efd2:	f7f1 f983 	bl	80002dc <__adddf3>
 800efd6:	f109 39ff 	add.w	r9, r9, #4294967295
 800efda:	4606      	mov	r6, r0
 800efdc:	460f      	mov	r7, r1
 800efde:	e75b      	b.n	800ee98 <__kernel_rem_pio2+0x108>
 800efe0:	d106      	bne.n	800eff0 <__kernel_rem_pio2+0x260>
 800efe2:	1e63      	subs	r3, r4, #1
 800efe4:	aa0c      	add	r2, sp, #48	; 0x30
 800efe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efea:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800efee:	e79d      	b.n	800ef2c <__kernel_rem_pio2+0x19c>
 800eff0:	4b34      	ldr	r3, [pc, #208]	; (800f0c4 <__kernel_rem_pio2+0x334>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	f7f1 fdae 	bl	8000b54 <__aeabi_dcmpge>
 800eff8:	2800      	cmp	r0, #0
 800effa:	d140      	bne.n	800f07e <__kernel_rem_pio2+0x2ee>
 800effc:	4683      	mov	fp, r0
 800effe:	2200      	movs	r2, #0
 800f000:	2300      	movs	r3, #0
 800f002:	4630      	mov	r0, r6
 800f004:	4639      	mov	r1, r7
 800f006:	f7f1 fd87 	bl	8000b18 <__aeabi_dcmpeq>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	f000 80c1 	beq.w	800f192 <__kernel_rem_pio2+0x402>
 800f010:	1e65      	subs	r5, r4, #1
 800f012:	462b      	mov	r3, r5
 800f014:	2200      	movs	r2, #0
 800f016:	9900      	ldr	r1, [sp, #0]
 800f018:	428b      	cmp	r3, r1
 800f01a:	da6d      	bge.n	800f0f8 <__kernel_rem_pio2+0x368>
 800f01c:	2a00      	cmp	r2, #0
 800f01e:	f000 808a 	beq.w	800f136 <__kernel_rem_pio2+0x3a6>
 800f022:	ab0c      	add	r3, sp, #48	; 0x30
 800f024:	f1aa 0a18 	sub.w	sl, sl, #24
 800f028:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f000 80ae 	beq.w	800f18e <__kernel_rem_pio2+0x3fe>
 800f032:	4650      	mov	r0, sl
 800f034:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f0a8 <__kernel_rem_pio2+0x318>
 800f038:	f000 f9fa 	bl	800f430 <scalbn>
 800f03c:	1c6b      	adds	r3, r5, #1
 800f03e:	00da      	lsls	r2, r3, #3
 800f040:	9205      	str	r2, [sp, #20]
 800f042:	ec57 6b10 	vmov	r6, r7, d0
 800f046:	aa70      	add	r2, sp, #448	; 0x1c0
 800f048:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f0bc <__kernel_rem_pio2+0x32c>
 800f04c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f050:	462c      	mov	r4, r5
 800f052:	f04f 0800 	mov.w	r8, #0
 800f056:	2c00      	cmp	r4, #0
 800f058:	f280 80d4 	bge.w	800f204 <__kernel_rem_pio2+0x474>
 800f05c:	462c      	mov	r4, r5
 800f05e:	2c00      	cmp	r4, #0
 800f060:	f2c0 8102 	blt.w	800f268 <__kernel_rem_pio2+0x4d8>
 800f064:	4b18      	ldr	r3, [pc, #96]	; (800f0c8 <__kernel_rem_pio2+0x338>)
 800f066:	461e      	mov	r6, r3
 800f068:	ab70      	add	r3, sp, #448	; 0x1c0
 800f06a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f06e:	1b2b      	subs	r3, r5, r4
 800f070:	f04f 0900 	mov.w	r9, #0
 800f074:	f04f 0a00 	mov.w	sl, #0
 800f078:	2700      	movs	r7, #0
 800f07a:	9306      	str	r3, [sp, #24]
 800f07c:	e0e6      	b.n	800f24c <__kernel_rem_pio2+0x4bc>
 800f07e:	f04f 0b02 	mov.w	fp, #2
 800f082:	e756      	b.n	800ef32 <__kernel_rem_pio2+0x1a2>
 800f084:	f8d8 3000 	ldr.w	r3, [r8]
 800f088:	bb05      	cbnz	r5, 800f0cc <__kernel_rem_pio2+0x33c>
 800f08a:	b123      	cbz	r3, 800f096 <__kernel_rem_pio2+0x306>
 800f08c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f090:	f8c8 3000 	str.w	r3, [r8]
 800f094:	2301      	movs	r3, #1
 800f096:	3201      	adds	r2, #1
 800f098:	f108 0804 	add.w	r8, r8, #4
 800f09c:	461d      	mov	r5, r3
 800f09e:	e74f      	b.n	800ef40 <__kernel_rem_pio2+0x1b0>
	...
 800f0ac:	3ff00000 	.word	0x3ff00000
 800f0b0:	08010308 	.word	0x08010308
 800f0b4:	40200000 	.word	0x40200000
 800f0b8:	3ff00000 	.word	0x3ff00000
 800f0bc:	3e700000 	.word	0x3e700000
 800f0c0:	41700000 	.word	0x41700000
 800f0c4:	3fe00000 	.word	0x3fe00000
 800f0c8:	080102c8 	.word	0x080102c8
 800f0cc:	1acb      	subs	r3, r1, r3
 800f0ce:	f8c8 3000 	str.w	r3, [r8]
 800f0d2:	462b      	mov	r3, r5
 800f0d4:	e7df      	b.n	800f096 <__kernel_rem_pio2+0x306>
 800f0d6:	1e62      	subs	r2, r4, #1
 800f0d8:	ab0c      	add	r3, sp, #48	; 0x30
 800f0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0e2:	a90c      	add	r1, sp, #48	; 0x30
 800f0e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f0e8:	e738      	b.n	800ef5c <__kernel_rem_pio2+0x1cc>
 800f0ea:	1e62      	subs	r2, r4, #1
 800f0ec:	ab0c      	add	r3, sp, #48	; 0x30
 800f0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f0f6:	e7f4      	b.n	800f0e2 <__kernel_rem_pio2+0x352>
 800f0f8:	a90c      	add	r1, sp, #48	; 0x30
 800f0fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f0fe:	3b01      	subs	r3, #1
 800f100:	430a      	orrs	r2, r1
 800f102:	e788      	b.n	800f016 <__kernel_rem_pio2+0x286>
 800f104:	3301      	adds	r3, #1
 800f106:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f10a:	2900      	cmp	r1, #0
 800f10c:	d0fa      	beq.n	800f104 <__kernel_rem_pio2+0x374>
 800f10e:	9a08      	ldr	r2, [sp, #32]
 800f110:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f114:	446a      	add	r2, sp
 800f116:	3a98      	subs	r2, #152	; 0x98
 800f118:	9208      	str	r2, [sp, #32]
 800f11a:	9a06      	ldr	r2, [sp, #24]
 800f11c:	a920      	add	r1, sp, #128	; 0x80
 800f11e:	18a2      	adds	r2, r4, r2
 800f120:	18e3      	adds	r3, r4, r3
 800f122:	f104 0801 	add.w	r8, r4, #1
 800f126:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f12a:	9302      	str	r3, [sp, #8]
 800f12c:	9b02      	ldr	r3, [sp, #8]
 800f12e:	4543      	cmp	r3, r8
 800f130:	da04      	bge.n	800f13c <__kernel_rem_pio2+0x3ac>
 800f132:	461c      	mov	r4, r3
 800f134:	e6a2      	b.n	800ee7c <__kernel_rem_pio2+0xec>
 800f136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f138:	2301      	movs	r3, #1
 800f13a:	e7e4      	b.n	800f106 <__kernel_rem_pio2+0x376>
 800f13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f13e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f142:	f7f1 fa17 	bl	8000574 <__aeabi_i2d>
 800f146:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f14c:	46ab      	mov	fp, r5
 800f14e:	461c      	mov	r4, r3
 800f150:	f04f 0900 	mov.w	r9, #0
 800f154:	2600      	movs	r6, #0
 800f156:	2700      	movs	r7, #0
 800f158:	9b05      	ldr	r3, [sp, #20]
 800f15a:	4599      	cmp	r9, r3
 800f15c:	dd06      	ble.n	800f16c <__kernel_rem_pio2+0x3dc>
 800f15e:	9b08      	ldr	r3, [sp, #32]
 800f160:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f164:	f108 0801 	add.w	r8, r8, #1
 800f168:	9308      	str	r3, [sp, #32]
 800f16a:	e7df      	b.n	800f12c <__kernel_rem_pio2+0x39c>
 800f16c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f170:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f174:	f7f1 fa68 	bl	8000648 <__aeabi_dmul>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4630      	mov	r0, r6
 800f17e:	4639      	mov	r1, r7
 800f180:	f7f1 f8ac 	bl	80002dc <__adddf3>
 800f184:	f109 0901 	add.w	r9, r9, #1
 800f188:	4606      	mov	r6, r0
 800f18a:	460f      	mov	r7, r1
 800f18c:	e7e4      	b.n	800f158 <__kernel_rem_pio2+0x3c8>
 800f18e:	3d01      	subs	r5, #1
 800f190:	e747      	b.n	800f022 <__kernel_rem_pio2+0x292>
 800f192:	ec47 6b10 	vmov	d0, r6, r7
 800f196:	f1ca 0000 	rsb	r0, sl, #0
 800f19a:	f000 f949 	bl	800f430 <scalbn>
 800f19e:	ec57 6b10 	vmov	r6, r7, d0
 800f1a2:	4ba0      	ldr	r3, [pc, #640]	; (800f424 <__kernel_rem_pio2+0x694>)
 800f1a4:	ee10 0a10 	vmov	r0, s0
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	4639      	mov	r1, r7
 800f1ac:	f7f1 fcd2 	bl	8000b54 <__aeabi_dcmpge>
 800f1b0:	b1f8      	cbz	r0, 800f1f2 <__kernel_rem_pio2+0x462>
 800f1b2:	4b9d      	ldr	r3, [pc, #628]	; (800f428 <__kernel_rem_pio2+0x698>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	f7f1 fa45 	bl	8000648 <__aeabi_dmul>
 800f1be:	f7f1 fcf3 	bl	8000ba8 <__aeabi_d2iz>
 800f1c2:	4680      	mov	r8, r0
 800f1c4:	f7f1 f9d6 	bl	8000574 <__aeabi_i2d>
 800f1c8:	4b96      	ldr	r3, [pc, #600]	; (800f424 <__kernel_rem_pio2+0x694>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f7f1 fa3c 	bl	8000648 <__aeabi_dmul>
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	f7f1 f87e 	bl	80002d8 <__aeabi_dsub>
 800f1dc:	f7f1 fce4 	bl	8000ba8 <__aeabi_d2iz>
 800f1e0:	1c65      	adds	r5, r4, #1
 800f1e2:	ab0c      	add	r3, sp, #48	; 0x30
 800f1e4:	f10a 0a18 	add.w	sl, sl, #24
 800f1e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f1ec:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f1f0:	e71f      	b.n	800f032 <__kernel_rem_pio2+0x2a2>
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	f7f1 fcd7 	bl	8000ba8 <__aeabi_d2iz>
 800f1fa:	ab0c      	add	r3, sp, #48	; 0x30
 800f1fc:	4625      	mov	r5, r4
 800f1fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f202:	e716      	b.n	800f032 <__kernel_rem_pio2+0x2a2>
 800f204:	ab0c      	add	r3, sp, #48	; 0x30
 800f206:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f20a:	f7f1 f9b3 	bl	8000574 <__aeabi_i2d>
 800f20e:	4632      	mov	r2, r6
 800f210:	463b      	mov	r3, r7
 800f212:	f7f1 fa19 	bl	8000648 <__aeabi_dmul>
 800f216:	4642      	mov	r2, r8
 800f218:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f21c:	464b      	mov	r3, r9
 800f21e:	4630      	mov	r0, r6
 800f220:	4639      	mov	r1, r7
 800f222:	f7f1 fa11 	bl	8000648 <__aeabi_dmul>
 800f226:	3c01      	subs	r4, #1
 800f228:	4606      	mov	r6, r0
 800f22a:	460f      	mov	r7, r1
 800f22c:	e713      	b.n	800f056 <__kernel_rem_pio2+0x2c6>
 800f22e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f232:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f236:	f7f1 fa07 	bl	8000648 <__aeabi_dmul>
 800f23a:	4602      	mov	r2, r0
 800f23c:	460b      	mov	r3, r1
 800f23e:	4648      	mov	r0, r9
 800f240:	4651      	mov	r1, sl
 800f242:	f7f1 f84b 	bl	80002dc <__adddf3>
 800f246:	3701      	adds	r7, #1
 800f248:	4681      	mov	r9, r0
 800f24a:	468a      	mov	sl, r1
 800f24c:	9b00      	ldr	r3, [sp, #0]
 800f24e:	429f      	cmp	r7, r3
 800f250:	dc02      	bgt.n	800f258 <__kernel_rem_pio2+0x4c8>
 800f252:	9b06      	ldr	r3, [sp, #24]
 800f254:	429f      	cmp	r7, r3
 800f256:	ddea      	ble.n	800f22e <__kernel_rem_pio2+0x49e>
 800f258:	9a06      	ldr	r2, [sp, #24]
 800f25a:	ab48      	add	r3, sp, #288	; 0x120
 800f25c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f260:	e9c6 9a00 	strd	r9, sl, [r6]
 800f264:	3c01      	subs	r4, #1
 800f266:	e6fa      	b.n	800f05e <__kernel_rem_pio2+0x2ce>
 800f268:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	dc0b      	bgt.n	800f286 <__kernel_rem_pio2+0x4f6>
 800f26e:	2b00      	cmp	r3, #0
 800f270:	dc39      	bgt.n	800f2e6 <__kernel_rem_pio2+0x556>
 800f272:	d05d      	beq.n	800f330 <__kernel_rem_pio2+0x5a0>
 800f274:	9b02      	ldr	r3, [sp, #8]
 800f276:	f003 0007 	and.w	r0, r3, #7
 800f27a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f27e:	ecbd 8b02 	vpop	{d8}
 800f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f286:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f288:	2b03      	cmp	r3, #3
 800f28a:	d1f3      	bne.n	800f274 <__kernel_rem_pio2+0x4e4>
 800f28c:	9b05      	ldr	r3, [sp, #20]
 800f28e:	9500      	str	r5, [sp, #0]
 800f290:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f294:	eb0d 0403 	add.w	r4, sp, r3
 800f298:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f29c:	46a2      	mov	sl, r4
 800f29e:	9b00      	ldr	r3, [sp, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f1aa 0a08 	sub.w	sl, sl, #8
 800f2a6:	dc69      	bgt.n	800f37c <__kernel_rem_pio2+0x5ec>
 800f2a8:	46aa      	mov	sl, r5
 800f2aa:	f1ba 0f01 	cmp.w	sl, #1
 800f2ae:	f1a4 0408 	sub.w	r4, r4, #8
 800f2b2:	f300 8083 	bgt.w	800f3bc <__kernel_rem_pio2+0x62c>
 800f2b6:	9c05      	ldr	r4, [sp, #20]
 800f2b8:	ab48      	add	r3, sp, #288	; 0x120
 800f2ba:	441c      	add	r4, r3
 800f2bc:	2000      	movs	r0, #0
 800f2be:	2100      	movs	r1, #0
 800f2c0:	2d01      	cmp	r5, #1
 800f2c2:	f300 809a 	bgt.w	800f3fa <__kernel_rem_pio2+0x66a>
 800f2c6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f2ca:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f2ce:	f1bb 0f00 	cmp.w	fp, #0
 800f2d2:	f040 8098 	bne.w	800f406 <__kernel_rem_pio2+0x676>
 800f2d6:	9b04      	ldr	r3, [sp, #16]
 800f2d8:	e9c3 7800 	strd	r7, r8, [r3]
 800f2dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f2e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f2e4:	e7c6      	b.n	800f274 <__kernel_rem_pio2+0x4e4>
 800f2e6:	9e05      	ldr	r6, [sp, #20]
 800f2e8:	ab48      	add	r3, sp, #288	; 0x120
 800f2ea:	441e      	add	r6, r3
 800f2ec:	462c      	mov	r4, r5
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	2c00      	cmp	r4, #0
 800f2f4:	da33      	bge.n	800f35e <__kernel_rem_pio2+0x5ce>
 800f2f6:	f1bb 0f00 	cmp.w	fp, #0
 800f2fa:	d036      	beq.n	800f36a <__kernel_rem_pio2+0x5da>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f302:	9c04      	ldr	r4, [sp, #16]
 800f304:	e9c4 2300 	strd	r2, r3, [r4]
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f310:	f7f0 ffe2 	bl	80002d8 <__aeabi_dsub>
 800f314:	ae4a      	add	r6, sp, #296	; 0x128
 800f316:	2401      	movs	r4, #1
 800f318:	42a5      	cmp	r5, r4
 800f31a:	da29      	bge.n	800f370 <__kernel_rem_pio2+0x5e0>
 800f31c:	f1bb 0f00 	cmp.w	fp, #0
 800f320:	d002      	beq.n	800f328 <__kernel_rem_pio2+0x598>
 800f322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f326:	4619      	mov	r1, r3
 800f328:	9b04      	ldr	r3, [sp, #16]
 800f32a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f32e:	e7a1      	b.n	800f274 <__kernel_rem_pio2+0x4e4>
 800f330:	9c05      	ldr	r4, [sp, #20]
 800f332:	ab48      	add	r3, sp, #288	; 0x120
 800f334:	441c      	add	r4, r3
 800f336:	2000      	movs	r0, #0
 800f338:	2100      	movs	r1, #0
 800f33a:	2d00      	cmp	r5, #0
 800f33c:	da09      	bge.n	800f352 <__kernel_rem_pio2+0x5c2>
 800f33e:	f1bb 0f00 	cmp.w	fp, #0
 800f342:	d002      	beq.n	800f34a <__kernel_rem_pio2+0x5ba>
 800f344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f348:	4619      	mov	r1, r3
 800f34a:	9b04      	ldr	r3, [sp, #16]
 800f34c:	e9c3 0100 	strd	r0, r1, [r3]
 800f350:	e790      	b.n	800f274 <__kernel_rem_pio2+0x4e4>
 800f352:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f356:	f7f0 ffc1 	bl	80002dc <__adddf3>
 800f35a:	3d01      	subs	r5, #1
 800f35c:	e7ed      	b.n	800f33a <__kernel_rem_pio2+0x5aa>
 800f35e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f362:	f7f0 ffbb 	bl	80002dc <__adddf3>
 800f366:	3c01      	subs	r4, #1
 800f368:	e7c3      	b.n	800f2f2 <__kernel_rem_pio2+0x562>
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	e7c8      	b.n	800f302 <__kernel_rem_pio2+0x572>
 800f370:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f374:	f7f0 ffb2 	bl	80002dc <__adddf3>
 800f378:	3401      	adds	r4, #1
 800f37a:	e7cd      	b.n	800f318 <__kernel_rem_pio2+0x588>
 800f37c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f380:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f384:	9b00      	ldr	r3, [sp, #0]
 800f386:	3b01      	subs	r3, #1
 800f388:	9300      	str	r3, [sp, #0]
 800f38a:	4632      	mov	r2, r6
 800f38c:	463b      	mov	r3, r7
 800f38e:	4640      	mov	r0, r8
 800f390:	4649      	mov	r1, r9
 800f392:	f7f0 ffa3 	bl	80002dc <__adddf3>
 800f396:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f39a:	4602      	mov	r2, r0
 800f39c:	460b      	mov	r3, r1
 800f39e:	4640      	mov	r0, r8
 800f3a0:	4649      	mov	r1, r9
 800f3a2:	f7f0 ff99 	bl	80002d8 <__aeabi_dsub>
 800f3a6:	4632      	mov	r2, r6
 800f3a8:	463b      	mov	r3, r7
 800f3aa:	f7f0 ff97 	bl	80002dc <__adddf3>
 800f3ae:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f3b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f3b6:	ed8a 7b00 	vstr	d7, [sl]
 800f3ba:	e770      	b.n	800f29e <__kernel_rem_pio2+0x50e>
 800f3bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f3c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f3c4:	4640      	mov	r0, r8
 800f3c6:	4632      	mov	r2, r6
 800f3c8:	463b      	mov	r3, r7
 800f3ca:	4649      	mov	r1, r9
 800f3cc:	f7f0 ff86 	bl	80002dc <__adddf3>
 800f3d0:	e9cd 0100 	strd	r0, r1, [sp]
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	4640      	mov	r0, r8
 800f3da:	4649      	mov	r1, r9
 800f3dc:	f7f0 ff7c 	bl	80002d8 <__aeabi_dsub>
 800f3e0:	4632      	mov	r2, r6
 800f3e2:	463b      	mov	r3, r7
 800f3e4:	f7f0 ff7a 	bl	80002dc <__adddf3>
 800f3e8:	ed9d 7b00 	vldr	d7, [sp]
 800f3ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f3f0:	ed84 7b00 	vstr	d7, [r4]
 800f3f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3f8:	e757      	b.n	800f2aa <__kernel_rem_pio2+0x51a>
 800f3fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f3fe:	f7f0 ff6d 	bl	80002dc <__adddf3>
 800f402:	3d01      	subs	r5, #1
 800f404:	e75c      	b.n	800f2c0 <__kernel_rem_pio2+0x530>
 800f406:	9b04      	ldr	r3, [sp, #16]
 800f408:	9a04      	ldr	r2, [sp, #16]
 800f40a:	601f      	str	r7, [r3, #0]
 800f40c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f410:	605c      	str	r4, [r3, #4]
 800f412:	609d      	str	r5, [r3, #8]
 800f414:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f418:	60d3      	str	r3, [r2, #12]
 800f41a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f41e:	6110      	str	r0, [r2, #16]
 800f420:	6153      	str	r3, [r2, #20]
 800f422:	e727      	b.n	800f274 <__kernel_rem_pio2+0x4e4>
 800f424:	41700000 	.word	0x41700000
 800f428:	3e700000 	.word	0x3e700000
 800f42c:	00000000 	.word	0x00000000

0800f430 <scalbn>:
 800f430:	b570      	push	{r4, r5, r6, lr}
 800f432:	ec55 4b10 	vmov	r4, r5, d0
 800f436:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f43a:	4606      	mov	r6, r0
 800f43c:	462b      	mov	r3, r5
 800f43e:	b999      	cbnz	r1, 800f468 <scalbn+0x38>
 800f440:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f444:	4323      	orrs	r3, r4
 800f446:	d03f      	beq.n	800f4c8 <scalbn+0x98>
 800f448:	4b35      	ldr	r3, [pc, #212]	; (800f520 <scalbn+0xf0>)
 800f44a:	4629      	mov	r1, r5
 800f44c:	ee10 0a10 	vmov	r0, s0
 800f450:	2200      	movs	r2, #0
 800f452:	f7f1 f8f9 	bl	8000648 <__aeabi_dmul>
 800f456:	4b33      	ldr	r3, [pc, #204]	; (800f524 <scalbn+0xf4>)
 800f458:	429e      	cmp	r6, r3
 800f45a:	4604      	mov	r4, r0
 800f45c:	460d      	mov	r5, r1
 800f45e:	da10      	bge.n	800f482 <scalbn+0x52>
 800f460:	a327      	add	r3, pc, #156	; (adr r3, 800f500 <scalbn+0xd0>)
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	e01f      	b.n	800f4a8 <scalbn+0x78>
 800f468:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f46c:	4291      	cmp	r1, r2
 800f46e:	d10c      	bne.n	800f48a <scalbn+0x5a>
 800f470:	ee10 2a10 	vmov	r2, s0
 800f474:	4620      	mov	r0, r4
 800f476:	4629      	mov	r1, r5
 800f478:	f7f0 ff30 	bl	80002dc <__adddf3>
 800f47c:	4604      	mov	r4, r0
 800f47e:	460d      	mov	r5, r1
 800f480:	e022      	b.n	800f4c8 <scalbn+0x98>
 800f482:	460b      	mov	r3, r1
 800f484:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f488:	3936      	subs	r1, #54	; 0x36
 800f48a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f48e:	4296      	cmp	r6, r2
 800f490:	dd0d      	ble.n	800f4ae <scalbn+0x7e>
 800f492:	2d00      	cmp	r5, #0
 800f494:	a11c      	add	r1, pc, #112	; (adr r1, 800f508 <scalbn+0xd8>)
 800f496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f49a:	da02      	bge.n	800f4a2 <scalbn+0x72>
 800f49c:	a11c      	add	r1, pc, #112	; (adr r1, 800f510 <scalbn+0xe0>)
 800f49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4a2:	a319      	add	r3, pc, #100	; (adr r3, 800f508 <scalbn+0xd8>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f1 f8ce 	bl	8000648 <__aeabi_dmul>
 800f4ac:	e7e6      	b.n	800f47c <scalbn+0x4c>
 800f4ae:	1872      	adds	r2, r6, r1
 800f4b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4b4:	428a      	cmp	r2, r1
 800f4b6:	dcec      	bgt.n	800f492 <scalbn+0x62>
 800f4b8:	2a00      	cmp	r2, #0
 800f4ba:	dd08      	ble.n	800f4ce <scalbn+0x9e>
 800f4bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4c8:	ec45 4b10 	vmov	d0, r4, r5
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
 800f4ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f4d2:	da08      	bge.n	800f4e6 <scalbn+0xb6>
 800f4d4:	2d00      	cmp	r5, #0
 800f4d6:	a10a      	add	r1, pc, #40	; (adr r1, 800f500 <scalbn+0xd0>)
 800f4d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4dc:	dac0      	bge.n	800f460 <scalbn+0x30>
 800f4de:	a10e      	add	r1, pc, #56	; (adr r1, 800f518 <scalbn+0xe8>)
 800f4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4e4:	e7bc      	b.n	800f460 <scalbn+0x30>
 800f4e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4ea:	3236      	adds	r2, #54	; 0x36
 800f4ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4b0c      	ldr	r3, [pc, #48]	; (800f528 <scalbn+0xf8>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	e7d5      	b.n	800f4a8 <scalbn+0x78>
 800f4fc:	f3af 8000 	nop.w
 800f500:	c2f8f359 	.word	0xc2f8f359
 800f504:	01a56e1f 	.word	0x01a56e1f
 800f508:	8800759c 	.word	0x8800759c
 800f50c:	7e37e43c 	.word	0x7e37e43c
 800f510:	8800759c 	.word	0x8800759c
 800f514:	fe37e43c 	.word	0xfe37e43c
 800f518:	c2f8f359 	.word	0xc2f8f359
 800f51c:	81a56e1f 	.word	0x81a56e1f
 800f520:	43500000 	.word	0x43500000
 800f524:	ffff3cb0 	.word	0xffff3cb0
 800f528:	3c900000 	.word	0x3c900000
 800f52c:	00000000 	.word	0x00000000

0800f530 <floor>:
 800f530:	ec51 0b10 	vmov	r0, r1, d0
 800f534:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f540:	2e13      	cmp	r6, #19
 800f542:	ee10 5a10 	vmov	r5, s0
 800f546:	ee10 8a10 	vmov	r8, s0
 800f54a:	460c      	mov	r4, r1
 800f54c:	dc31      	bgt.n	800f5b2 <floor+0x82>
 800f54e:	2e00      	cmp	r6, #0
 800f550:	da14      	bge.n	800f57c <floor+0x4c>
 800f552:	a333      	add	r3, pc, #204	; (adr r3, 800f620 <floor+0xf0>)
 800f554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f558:	f7f0 fec0 	bl	80002dc <__adddf3>
 800f55c:	2200      	movs	r2, #0
 800f55e:	2300      	movs	r3, #0
 800f560:	f7f1 fb02 	bl	8000b68 <__aeabi_dcmpgt>
 800f564:	b138      	cbz	r0, 800f576 <floor+0x46>
 800f566:	2c00      	cmp	r4, #0
 800f568:	da53      	bge.n	800f612 <floor+0xe2>
 800f56a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f56e:	4325      	orrs	r5, r4
 800f570:	d052      	beq.n	800f618 <floor+0xe8>
 800f572:	4c2d      	ldr	r4, [pc, #180]	; (800f628 <floor+0xf8>)
 800f574:	2500      	movs	r5, #0
 800f576:	4621      	mov	r1, r4
 800f578:	4628      	mov	r0, r5
 800f57a:	e024      	b.n	800f5c6 <floor+0x96>
 800f57c:	4f2b      	ldr	r7, [pc, #172]	; (800f62c <floor+0xfc>)
 800f57e:	4137      	asrs	r7, r6
 800f580:	ea01 0307 	and.w	r3, r1, r7
 800f584:	4303      	orrs	r3, r0
 800f586:	d01e      	beq.n	800f5c6 <floor+0x96>
 800f588:	a325      	add	r3, pc, #148	; (adr r3, 800f620 <floor+0xf0>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fea5 	bl	80002dc <__adddf3>
 800f592:	2200      	movs	r2, #0
 800f594:	2300      	movs	r3, #0
 800f596:	f7f1 fae7 	bl	8000b68 <__aeabi_dcmpgt>
 800f59a:	2800      	cmp	r0, #0
 800f59c:	d0eb      	beq.n	800f576 <floor+0x46>
 800f59e:	2c00      	cmp	r4, #0
 800f5a0:	bfbe      	ittt	lt
 800f5a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f5a6:	4133      	asrlt	r3, r6
 800f5a8:	18e4      	addlt	r4, r4, r3
 800f5aa:	ea24 0407 	bic.w	r4, r4, r7
 800f5ae:	2500      	movs	r5, #0
 800f5b0:	e7e1      	b.n	800f576 <floor+0x46>
 800f5b2:	2e33      	cmp	r6, #51	; 0x33
 800f5b4:	dd0b      	ble.n	800f5ce <floor+0x9e>
 800f5b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f5ba:	d104      	bne.n	800f5c6 <floor+0x96>
 800f5bc:	ee10 2a10 	vmov	r2, s0
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	f7f0 fe8b 	bl	80002dc <__adddf3>
 800f5c6:	ec41 0b10 	vmov	d0, r0, r1
 800f5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ce:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f5d2:	f04f 37ff 	mov.w	r7, #4294967295
 800f5d6:	40df      	lsrs	r7, r3
 800f5d8:	4238      	tst	r0, r7
 800f5da:	d0f4      	beq.n	800f5c6 <floor+0x96>
 800f5dc:	a310      	add	r3, pc, #64	; (adr r3, 800f620 <floor+0xf0>)
 800f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e2:	f7f0 fe7b 	bl	80002dc <__adddf3>
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	f7f1 fabd 	bl	8000b68 <__aeabi_dcmpgt>
 800f5ee:	2800      	cmp	r0, #0
 800f5f0:	d0c1      	beq.n	800f576 <floor+0x46>
 800f5f2:	2c00      	cmp	r4, #0
 800f5f4:	da0a      	bge.n	800f60c <floor+0xdc>
 800f5f6:	2e14      	cmp	r6, #20
 800f5f8:	d101      	bne.n	800f5fe <floor+0xce>
 800f5fa:	3401      	adds	r4, #1
 800f5fc:	e006      	b.n	800f60c <floor+0xdc>
 800f5fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f602:	2301      	movs	r3, #1
 800f604:	40b3      	lsls	r3, r6
 800f606:	441d      	add	r5, r3
 800f608:	45a8      	cmp	r8, r5
 800f60a:	d8f6      	bhi.n	800f5fa <floor+0xca>
 800f60c:	ea25 0507 	bic.w	r5, r5, r7
 800f610:	e7b1      	b.n	800f576 <floor+0x46>
 800f612:	2500      	movs	r5, #0
 800f614:	462c      	mov	r4, r5
 800f616:	e7ae      	b.n	800f576 <floor+0x46>
 800f618:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f61c:	e7ab      	b.n	800f576 <floor+0x46>
 800f61e:	bf00      	nop
 800f620:	8800759c 	.word	0x8800759c
 800f624:	7e37e43c 	.word	0x7e37e43c
 800f628:	bff00000 	.word	0xbff00000
 800f62c:	000fffff 	.word	0x000fffff

0800f630 <_sbrk>:
 800f630:	4a04      	ldr	r2, [pc, #16]	; (800f644 <_sbrk+0x14>)
 800f632:	6811      	ldr	r1, [r2, #0]
 800f634:	4603      	mov	r3, r0
 800f636:	b909      	cbnz	r1, 800f63c <_sbrk+0xc>
 800f638:	4903      	ldr	r1, [pc, #12]	; (800f648 <_sbrk+0x18>)
 800f63a:	6011      	str	r1, [r2, #0]
 800f63c:	6810      	ldr	r0, [r2, #0]
 800f63e:	4403      	add	r3, r0
 800f640:	6013      	str	r3, [r2, #0]
 800f642:	4770      	bx	lr
 800f644:	20001110 	.word	0x20001110
 800f648:	20001118 	.word	0x20001118

0800f64c <_init>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	bf00      	nop
 800f650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f652:	bc08      	pop	{r3}
 800f654:	469e      	mov	lr, r3
 800f656:	4770      	bx	lr

0800f658 <_fini>:
 800f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65a:	bf00      	nop
 800f65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f65e:	bc08      	pop	{r3}
 800f660:	469e      	mov	lr, r3
 800f662:	4770      	bx	lr
