
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fba0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800fd80  0800fd80  0001fd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080102b4  080102b4  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080102b4  080102b4  000202b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080102bc  080102bc  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080102bc  080102bc  000202bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080102c0  080102c0  000202c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080102c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  200001e4  080104a8  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af0  080104a8  00030af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026348  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a96  00000000  00000000  0005655c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  0005aff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  0005cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d54a  00000000  00000000  0005e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251c4  00000000  00000000  0008bf2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dd6e  00000000  00000000  000b10ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cee5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090e4  00000000  00000000  001ceeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fd68 	.word	0x0800fd68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800fd68 	.word	0x0800fd68

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fe6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fc06 	bl	8005804 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	ed97 0a00 	vldr	s0, [r7]
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fbff 	bl	8005804 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001016:	7a3b      	ldrb	r3, [r7, #8]
 8001018:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800101a:	7a7b      	ldrb	r3, [r7, #9]
 800101c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	75fb      	strb	r3, [r7, #23]

	can2_send(0x100, senddata_motor);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001030:	f000 fca0 	bl	8001974 <can2_send>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
 8001046:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fbd6 	bl	8005804 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	ed97 0a00 	vldr	s0, [r7]
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fbcf 	bl	8005804 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001076:	7a3b      	ldrb	r3, [r7, #8]
 8001078:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800107a:	7a7b      	ldrb	r3, [r7, #9]
 800107c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	75fb      	strb	r3, [r7, #23]

	can2_send(0x101, senddata_motor);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	f240 1001 	movw	r0, #257	; 0x101
 8001090:	f000 fc70 	bl	8001974 <can2_send>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fba6 	bl	8005804 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	ed97 0a00 	vldr	s0, [r7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fb9f 	bl	8005804 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	75fb      	strb	r3, [r7, #23]

	can2_send(0x102, senddata_motor);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	f44f 7081 	mov.w	r0, #258	; 0x102
 80010f0:	f000 fc40 	bl	8001974 <can2_send>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0a01 	vstr	s0, [r7, #4]
 8001106:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fb76 	bl	8005804 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	ed97 0a00 	vldr	s0, [r7]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fb6f 	bl	8005804 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001126:	7b3b      	ldrb	r3, [r7, #12]
 8001128:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001136:	7a3b      	ldrb	r3, [r7, #8]
 8001138:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800113a:	7a7b      	ldrb	r3, [r7, #9]
 800113c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	75fb      	strb	r3, [r7, #23]

	can2_send(0x103, senddata_motor);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	f240 1003 	movw	r0, #259	; 0x103
 8001150:	f000 fc10 	bl	8001974 <can2_send>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	ed87 0a01 	vstr	s0, [r7, #4]
 8001166:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f004 fb46 	bl	8005804 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	ed97 0a00 	vldr	s0, [r7]
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fb3f 	bl	8005804 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800118a:	7b7b      	ldrb	r3, [r7, #13]
 800118c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800119a:	7a7b      	ldrb	r3, [r7, #9]
 800119c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800119e:	7abb      	ldrb	r3, [r7, #10]
 80011a0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	75fb      	strb	r3, [r7, #23]

	can1_send(0x104, senddata_motor);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	f44f 7082 	mov.w	r0, #260	; 0x104
 80011b0:	f000 fb80 	bl	80018b4 <can1_send>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fb18 	bl	8005804 <float_to_uchar4>

	senddata_kick[0]=0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	743b      	strb	r3, [r7, #16]
	senddata_kick[1]=senddata_voltage[0];
 80011d8:	7b3b      	ldrb	r3, [r7, #12]
 80011da:	747b      	strb	r3, [r7, #17]
	senddata_kick[2]=senddata_voltage[1];
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	74bb      	strb	r3, [r7, #18]
	senddata_kick[3]=senddata_voltage[2];
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	74fb      	strb	r3, [r7, #19]
	senddata_kick[4]=senddata_voltage[3];
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	753b      	strb	r3, [r7, #20]
	can1_send(0x110, senddata_kick);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 7088 	mov.w	r0, #272	; 0x110
 80011f2:	f000 fb5f 	bl	80018b4 <can1_send>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	460a      	mov	r2, r1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
	/* id 1: 0=>standby   1=>charge
	 * id 2: 0=>straight  1=>chip
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	723b      	strb	r3, [r7, #8]
	senddata_kick[1]=param;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	727b      	strb	r3, [r7, #9]
	can1_send(0x110, senddata_kick);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001220:	f000 fb48 	bl	80018b4 <can1_send>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 8001236:	2300      	movs	r3, #0
 8001238:	723b      	strb	r3, [r7, #8]
	senddata_power[1]=power_on;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	727b      	strb	r3, [r7, #9]
	can1_send(0x010, senddata_power);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4619      	mov	r1, r3
 8001244:	2010      	movs	r0, #16
 8001246:	f000 fb35 	bl	80018b4 <can1_send>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	ed87 0a00 	vstr	s0, [r7]
 800125e:	71fb      	strb	r3, [r7, #7]
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	ed97 0a00 	vldr	s0, [r7]
 8001268:	4618      	mov	r0, r3
 800126a:	f004 facb 	bl	8005804 <float_to_uchar4>
	senddata_power_param[0]=id;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	723b      	strb	r3, [r7, #8]
	senddata_power_param[1]=senddata_power_param_temp[0];
 8001272:	7c3b      	ldrb	r3, [r7, #16]
 8001274:	727b      	strb	r3, [r7, #9]
	senddata_power_param[2]=senddata_power_param_temp[1];
 8001276:	7c7b      	ldrb	r3, [r7, #17]
 8001278:	72bb      	strb	r3, [r7, #10]
	senddata_power_param[3]=senddata_power_param_temp[2];
 800127a:	7cbb      	ldrb	r3, [r7, #18]
 800127c:	72fb      	strb	r3, [r7, #11]
	senddata_power_param[4]=senddata_power_param_temp[3];
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	733b      	strb	r3, [r7, #12]

	can1_send(0x010, senddata_power_param);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4619      	mov	r1, r3
 8001288:	2010      	movs	r0, #16
 800128a:	f000 fb13 	bl	80018b4 <can1_send>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can2_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <actuator_buzzer+0x38>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	22fa      	movs	r2, #250	; 0xfa
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(ontime);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fb7e 	bl	80059b4 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <actuator_buzzer+0x38>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fb76 	bl	80059b4 <HAL_Delay>

}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200007d0 	.word	0x200007d0

080012d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00b fe7b 	bl	800cfe8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_ADC1_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_ADC1_Init+0xe8>)
 800131c:	2204      	movs	r2, #4
 800131e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001328:	2201      	movs	r2, #1
 800132a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_ADC1_Init+0xe8>)
 800132e:	2201      	movs	r2, #1
 8001330:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_ADC1_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	4817      	ldr	r0, [pc, #92]	; (80013bc <MX_ADC1_Init+0xe8>)
 800135e:	f004 fd6d 	bl	8005e3c <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001368:	f003 fbb8 	bl	8004adc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001378:	f005 fd70 	bl	8006e5c <HAL_ADCEx_MultiModeConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001382:	f003 fbab 	bl	8004adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_ADC1_Init+0xec>)
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	2306      	movs	r3, #6
 800138c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800138e:	2307      	movs	r3, #7
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001392:	237f      	movs	r3, #127	; 0x7f
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001396:	2304      	movs	r3, #4
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_ADC1_Init+0xe8>)
 80013a4:	f004 fffe 	bl	80063a4 <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013ae:	f003 fb95 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000200 	.word	0x20000200
 80013c0:	3ef08000 	.word	0x3ef08000

080013c4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00b fe03 	bl	800cfe8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013e4:	4a31      	ldr	r2, [pc, #196]	; (80014ac <MX_ADC3_Init+0xe8>)
 80013e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800140a:	2204      	movs	r2, #4
 800140c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001410:	2200      	movs	r2, #0
 8001412:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001416:	2201      	movs	r2, #1
 8001418:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800141c:	2201      	movs	r2, #1
 800141e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800144c:	f004 fcf6 	bl	8005e3c <HAL_ADC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001456:	f003 fb41 	bl	8004adc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4810      	ldr	r0, [pc, #64]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001466:	f005 fcf9 	bl	8006e5c <HAL_ADCEx_MultiModeConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001470:	f003 fb34 	bl	8004adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_ADC3_Init+0xec>)
 8001476:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001478:	2306      	movs	r3, #6
 800147a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800147c:	2307      	movs	r3, #7
 800147e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001480:	237f      	movs	r3, #127	; 0x7f
 8001482:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001484:	2304      	movs	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001492:	f004 ff87 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800149c:	f003 fb1e 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000026c 	.word	0x2000026c
 80014ac:	50000400 	.word	0x50000400
 80014b0:	04300002 	.word	0x04300002

080014b4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00b fd91 	bl	800cfe8 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014c8:	4a2b      	ldr	r2, [pc, #172]	; (8001578 <MX_ADC5_Init+0xc4>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_ADC5_Init+0xc0>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001500:	2201      	movs	r2, #1
 8001502:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_ADC5_Init+0xc0>)
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_ADC5_Init+0xc0>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_ADC5_Init+0xc0>)
 8001530:	f004 fc84 	bl	8005e3c <HAL_ADC_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 800153a:	f003 facf 	bl	8004adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_ADC5_Init+0xc8>)
 8001540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001542:	2306      	movs	r3, #6
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001546:	2307      	movs	r3, #7
 8001548:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154a:	237f      	movs	r3, #127	; 0x7f
 800154c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800154e:	2304      	movs	r3, #4
 8001550:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_ADC5_Init+0xc0>)
 800155c:	f004 ff22 	bl	80063a4 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8001566:	f003 fab9 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002d8 	.word	0x200002d8
 8001578:	50000600 	.word	0x50000600
 800157c:	08600004 	.word	0x08600004

08001580 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0a2      	sub	sp, #136	; 0x88
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	2254      	movs	r2, #84	; 0x54
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00b fd21 	bl	800cfe8 <memset>
  if(adcHandle->Instance==ADC1)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ae:	d15f      	bne.n	8001670 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015ba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4618      	mov	r0, r3
 80015c2:	f007 ffdd 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015cc:	f003 fa86 	bl	8004adc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015d0:	4b98      	ldr	r3, [pc, #608]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	4a97      	ldr	r2, [pc, #604]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015dc:	4b95      	ldr	r3, [pc, #596]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	4a91      	ldr	r2, [pc, #580]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f4:	4b8f      	ldr	r3, [pc, #572]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001600:	2301      	movs	r3, #1
 8001602:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001610:	4619      	mov	r1, r3
 8001612:	4889      	ldr	r0, [pc, #548]	; (8001838 <HAL_ADC_MspInit+0x2b8>)
 8001614:	f006 ffe8 	bl	80085e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 8001618:	4b88      	ldr	r3, [pc, #544]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800161a:	4a89      	ldr	r2, [pc, #548]	; (8001840 <HAL_ADC_MspInit+0x2c0>)
 800161c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800161e:	4b87      	ldr	r3, [pc, #540]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001620:	2205      	movs	r2, #5
 8001622:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001624:	4b85      	ldr	r3, [pc, #532]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800162a:	4b84      	ldr	r3, [pc, #528]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001630:	4b82      	ldr	r3, [pc, #520]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001636:	4b81      	ldr	r3, [pc, #516]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800163c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163e:	4b7f      	ldr	r3, [pc, #508]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001644:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001646:	4b7d      	ldr	r3, [pc, #500]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001648:	2220      	movs	r2, #32
 800164a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001652:	487a      	ldr	r0, [pc, #488]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001654:	f005 fe1a 	bl	800728c <HAL_DMA_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800165e:	f003 fa3d 	bl	8004adc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a75      	ldr	r2, [pc, #468]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 8001666:	655a      	str	r2, [r3, #84]	; 0x54
 8001668:	4a74      	ldr	r2, [pc, #464]	; (800183c <HAL_ADC_MspInit+0x2bc>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800166e:	e0dc      	b.n	800182a <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_ADC_MspInit+0x2c4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d168      	bne.n	800174c <HAL_ADC_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800167a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800167e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001684:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	4618      	mov	r0, r3
 800168c:	f007 ff78 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 8001696:	f003 fa21 	bl	8004adc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800169a:	4b6b      	ldr	r3, [pc, #428]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a69      	ldr	r2, [pc, #420]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 80016a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d10b      	bne.n	80016c4 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016ac:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a60      	ldr	r2, [pc, #384]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80016dc:	2302      	movs	r3, #2
 80016de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e0:	2303      	movs	r3, #3
 80016e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ec:	4619      	mov	r1, r3
 80016ee:	4852      	ldr	r0, [pc, #328]	; (8001838 <HAL_ADC_MspInit+0x2b8>)
 80016f0:	f006 ff7a 	bl	80085e8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 80016f6:	4a56      	ldr	r2, [pc, #344]	; (8001850 <HAL_ADC_MspInit+0x2d0>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80016fa:	4b54      	ldr	r3, [pc, #336]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 80016fc:	2225      	movs	r2, #37	; 0x25
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001700:	4b52      	ldr	r3, [pc, #328]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001718:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 800171c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001720:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001722:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001724:	2220      	movs	r2, #32
 8001726:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800172e:	4847      	ldr	r0, [pc, #284]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001730:	f005 fdac 	bl	800728c <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 800173a:	f003 f9cf 	bl	8004adc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a42      	ldr	r2, [pc, #264]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
 8001744:	4a41      	ldr	r2, [pc, #260]	; (800184c <HAL_ADC_MspInit+0x2cc>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6293      	str	r3, [r2, #40]	; 0x28
}
 800174a:	e06e      	b.n	800182a <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC5)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_ADC_MspInit+0x2d4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d169      	bne.n	800182a <HAL_ADC_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800175c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001760:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	4618      	mov	r0, r3
 8001768:	f007 ff0a 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_ADC_MspInit+0x1f6>
      Error_Handler();
 8001772:	f003 f9b3 	bl	8004adc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a32      	ldr	r2, [pc, #200]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 800177e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_ADC_MspInit+0x2c8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10b      	bne.n	80017a0 <HAL_ADC_MspInit+0x220>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	4a29      	ldr	r2, [pc, #164]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 800178e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	4a23      	ldr	r2, [pc, #140]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <HAL_ADC_MspInit+0x2b4>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017bc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017be:	2303      	movs	r3, #3
 80017c0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f006 ff0a 	bl	80085e8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80017d4:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_ADC_MspInit+0x2dc>)
 80017d8:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017dc:	2227      	movs	r2, #39	; 0x27
 80017de:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f8:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 80017fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001800:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001804:	2220      	movs	r2, #32
 8001806:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001810:	f005 fd3c 	bl	800728c <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_ADC_MspInit+0x29e>
      Error_Handler();
 800181a:	f003 f95f 	bl	8004adc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_ADC_MspInit+0x2d8>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6293      	str	r3, [r2, #40]	; 0x28
}
 800182a:	bf00      	nop
 800182c:	3788      	adds	r7, #136	; 0x88
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400
 800183c:	20000344 	.word	0x20000344
 8001840:	40020058 	.word	0x40020058
 8001844:	50000400 	.word	0x50000400
 8001848:	20000464 	.word	0x20000464
 800184c:	200003a4 	.word	0x200003a4
 8001850:	40020030 	.word	0x40020030
 8001854:	50000600 	.word	0x50000600
 8001858:	20000404 	.word	0x20000404
 800185c:	40020044 	.word	0x40020044

08001860 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001874:	2301      	movs	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	480a      	ldr	r0, [pc, #40]	; (80018b0 <can1_init_ibis+0x50>)
 8001888:	f006 f98c 	bl	8007ba4 <HAL_FDCAN_ConfigFilter>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <can1_init_ibis+0x36>
		  {
			  Error_Handler();
 8001892:	f003 f923 	bl	8004adc <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <can1_init_ibis+0x50>)
 8001898:	f006 f9de 	bl	8007c58 <HAL_FDCAN_Start>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <can1_init_ibis+0x46>
 80018a2:	f003 f91b 	bl	8004adc <Error_Handler>
}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000468 	.word	0x20000468

080018b4 <can1_send>:

void can1_send(int id, uint8_t senddata[]){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a15      	ldr	r2, [pc, #84]	; (8001918 <can1_send+0x64>)
 80018c2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <can1_send+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <can1_send+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <can1_send+0x64>)
 80018d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018d6:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <can1_send+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <can1_send+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <can1_send+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <can1_send+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <can1_send+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 80018f6:	bf00      	nop
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <can1_send+0x68>)
 80018fa:	f006 faf3 	bl	8007ee4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b03      	cmp	r3, #3
 8001902:	d1f9      	bne.n	80018f8 <can1_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	4904      	ldr	r1, [pc, #16]	; (8001918 <can1_send+0x64>)
 8001908:	4804      	ldr	r0, [pc, #16]	; (800191c <can1_send+0x68>)
 800190a:	f006 f9cd 	bl	8007ca8 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000718 	.word	0x20000718
 800191c:	20000468 	.word	0x20000468

08001920 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001934:	2301      	movs	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4619      	mov	r1, r3
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <can2_init_ibis+0x50>)
 8001948:	f006 f92c 	bl	8007ba4 <HAL_FDCAN_ConfigFilter>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <can2_init_ibis+0x36>
		  {
			  Error_Handler();
 8001952:	f003 f8c3 	bl	8004adc <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <can2_init_ibis+0x50>)
 8001958:	f006 f97e 	bl	8007c58 <HAL_FDCAN_Start>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <can2_init_ibis+0x46>
 8001962:	f003 f8bb 	bl	8004adc <Error_Handler>
}
 8001966:	bf00      	nop
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200004cc 	.word	0x200004cc

08001974 <can2_send>:

void can2_send(int id, uint8_t senddata[]){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <can2_send+0x64>)
 8001982:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <can2_send+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <can2_send+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <can2_send+0x64>)
 8001992:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001996:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <can2_send+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <can2_send+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <can2_send+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <can2_send+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <can2_send+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 80019b6:	bf00      	nop
 80019b8:	4808      	ldr	r0, [pc, #32]	; (80019dc <can2_send+0x68>)
 80019ba:	f006 fa93 	bl	8007ee4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d1f9      	bne.n	80019b8 <can2_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4904      	ldr	r1, [pc, #16]	; (80019d8 <can2_send+0x64>)
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <can2_send+0x68>)
 80019ca:	f006 f96d 	bl	8007ca8 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000718 	.word	0x20000718
 80019dc:	200004cc 	.word	0x200004cc

080019e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <MX_DMA_Init+0x90>)
 80019e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <MX_DMA_Init+0x90>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6493      	str	r3, [r2, #72]	; 0x48
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <MX_DMA_Init+0x90>)
 80019f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <MX_DMA_Init+0x90>)
 8001a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a02:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <MX_DMA_Init+0x90>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6493      	str	r3, [r2, #72]	; 0x48
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <MX_DMA_Init+0x90>)
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2102      	movs	r1, #2
 8001a1a:	200b      	movs	r0, #11
 8001a1c:	f005 fc01 	bl	8007222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a20:	200b      	movs	r0, #11
 8001a22:	f005 fc18 	bl	8007256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2105      	movs	r1, #5
 8001a2a:	200c      	movs	r0, #12
 8001a2c:	f005 fbf9 	bl	8007222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a30:	200c      	movs	r0, #12
 8001a32:	f005 fc10 	bl	8007256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2109      	movs	r1, #9
 8001a3a:	200d      	movs	r0, #13
 8001a3c:	f005 fbf1 	bl	8007222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a40:	200d      	movs	r0, #13
 8001a42:	f005 fc08 	bl	8007256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	210a      	movs	r1, #10
 8001a4a:	200e      	movs	r0, #14
 8001a4c:	f005 fbe9 	bl	8007222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a50:	200e      	movs	r0, #14
 8001a52:	f005 fc00 	bl	8007256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	210b      	movs	r1, #11
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f005 fbe1 	bl	8007222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a60:	200f      	movs	r0, #15
 8001a62:	f005 fbf8 	bl	8007256 <HAL_NVIC_EnableIRQ>

}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a7a:	4a20      	ldr	r2, [pc, #128]	; (8001afc <MX_FDCAN1_Init+0x88>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001aa4:	220a      	movs	r2, #10
 8001aa6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ab0:	220e      	movs	r2, #14
 8001ab2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001abc:	220a      	movs	r2, #10
 8001abe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ac8:	220c      	movs	r2, #12
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ace:	2202      	movs	r2, #2
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_FDCAN1_Init+0x84>)
 8001ae6:	f005 ff03 	bl	80078f0 <HAL_FDCAN_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001af0:	f002 fff4 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000468 	.word	0x20000468
 8001afc:	40006400 	.word	0x40006400

08001b00 <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b06:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <MX_FDCAN2_Init+0x88>)
 8001b08:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b30:	220a      	movs	r2, #10
 8001b32:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b3c:	220e      	movs	r2, #14
 8001b3e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b42:	2202      	movs	r2, #2
 8001b44:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 10;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b48:	220a      	movs	r2, #10
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001b4c:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b54:	220c      	movs	r2, #12
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_FDCAN2_Init+0x84>)
 8001b72:	f005 febd 	bl	80078f0 <HAL_FDCAN_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001b7c:	f002 ffae 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200004cc 	.word	0x200004cc
 8001b88:	40006800 	.word	0x40006800

08001b8c <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0a0      	sub	sp, #128	; 0x80
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	2254      	movs	r2, #84	; 0x54
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00b fa1b 	bl	800cfe8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a59      	ldr	r2, [pc, #356]	; (8001d1c <HAL_FDCAN_MspInit+0x190>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d153      	bne.n	8001c64 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f007 fcd7 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001bd8:	f002 ff80 	bl	8004adc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001be4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001be6:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d10b      	bne.n	8001c06 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001bee:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c22:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c30:	2309      	movs	r3, #9
 8001c32:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3e:	f006 fcd3 	bl	80085e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2103      	movs	r1, #3
 8001c46:	2015      	movs	r0, #21
 8001c48:	f005 faeb 	bl	8007222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c4c:	2015      	movs	r0, #21
 8001c4e:	f005 fb02 	bl	8007256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2104      	movs	r1, #4
 8001c56:	2016      	movs	r0, #22
 8001c58:	f005 fae3 	bl	8007222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001c5c:	2016      	movs	r0, #22
 8001c5e:	f005 fafa 	bl	8007256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001c62:	e056      	b.n	8001d12 <HAL_FDCAN_MspInit+0x186>
  else if(fdcanHandle->Instance==FDCAN2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_FDCAN_MspInit+0x19c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d151      	bne.n	8001d12 <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7a:	f107 0318 	add.w	r3, r7, #24
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f007 fc7e 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8001c8a:	f002 ff27 	bl	8004adc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001c96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_FDCAN_MspInit+0x194>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001ca6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001caa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_FDCAN_MspInit+0x198>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001ce2:	2309      	movs	r3, #9
 8001ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cea:	4619      	mov	r1, r3
 8001cec:	480f      	ldr	r0, [pc, #60]	; (8001d2c <HAL_FDCAN_MspInit+0x1a0>)
 8001cee:	f006 fc7b 	bl	80085e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2106      	movs	r1, #6
 8001cf6:	2056      	movs	r0, #86	; 0x56
 8001cf8:	f005 fa93 	bl	8007222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001cfc:	2056      	movs	r0, #86	; 0x56
 8001cfe:	f005 faaa 	bl	8007256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2107      	movs	r1, #7
 8001d06:	2057      	movs	r0, #87	; 0x57
 8001d08:	f005 fa8b 	bl	8007222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001d0c:	2057      	movs	r0, #87	; 0x57
 8001d0e:	f005 faa2 	bl	8007256 <HAL_NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3780      	adds	r7, #128	; 0x80
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40006400 	.word	0x40006400
 8001d20:	20000530 	.word	0x20000530
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40006800 	.word	0x40006800
 8001d2c:	48000400 	.word	0x48000400

08001d30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
 8001d44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4a:	4a63      	ldr	r2, [pc, #396]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d52:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	4a5d      	ldr	r2, [pc, #372]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d64:	f043 0320 	orr.w	r3, r3, #32
 8001d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b55      	ldr	r3, [pc, #340]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da6:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a4b      	ldr	r2, [pc, #300]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <MX_GPIO_Init+0x1a8>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f246 0121 	movw	r1, #24609	; 0x6021
 8001dc4:	4845      	ldr	r0, [pc, #276]	; (8001edc <MX_GPIO_Init+0x1ac>)
 8001dc6:	f006 fda9 	bl	800891c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f248 0110 	movw	r1, #32784	; 0x8010
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd4:	f006 fda2 	bl	800891c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f244 4184 	movw	r1, #17540	; 0x4484
 8001dde:	4840      	ldr	r0, [pc, #256]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001de0:	f006 fd9c 	bl	800891c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
 8001de4:	f246 0321 	movw	r3, #24609	; 0x6021
 8001de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4837      	ldr	r0, [pc, #220]	; (8001edc <MX_GPIO_Init+0x1ac>)
 8001dfe:	f006 fbf3 	bl	80085e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001e02:	f248 0310 	movw	r3, #32784	; 0x8010
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f006 fbe3 	bl	80085e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e22:	2310      	movs	r3, #16
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	4829      	ldr	r0, [pc, #164]	; (8001edc <MX_GPIO_Init+0x1ac>)
 8001e36:	f006 fbd7 	bl	80085e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001e3a:	f244 4384 	movw	r3, #17540	; 0x4484
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4823      	ldr	r0, [pc, #140]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001e54:	f006 fbc8 	bl	80085e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f006 fbba 	bl	80085e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e74:	2304      	movs	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <MX_GPIO_Init+0x1b4>)
 8001e88:	f006 fbae 	bl	80085e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e8c:	2360      	movs	r3, #96	; 0x60
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001ea0:	f006 fba2 	bl	80085e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <MX_GPIO_Init+0x1b0>)
 8001ebc:	f006 fb94 	bl	80085e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2017      	movs	r0, #23
 8001ec6:	f005 f9ac 	bl	8007222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eca:	2017      	movs	r0, #23
 8001ecc:	f005 f9c3 	bl	8007256 <HAL_NVIC_EnableIRQ>

}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48000c00 	.word	0x48000c00

08001ee8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <__NVIC_SystemReset+0x24>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001efa:	4904      	ldr	r1, [pc, #16]	; (8001f0c <__NVIC_SystemReset+0x24>)
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_SystemReset+0x28>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f02:	f3bf 8f4f 	dsb	sy
}
 8001f06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <__NVIC_SystemReset+0x20>
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	05fa0004 	.word	0x05fa0004

08001f14 <ICM20602_writeByte>:
int Gscale = GFS_1000DPS;



void ICM20602_writeByte(uint8_t reg, uint8_t data)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
	uint8_t send_data[1];
	uint8_t RxBuffer[1];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2110      	movs	r1, #16
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f2c:	f006 fcf6 	bl	800891c <HAL_GPIO_WritePin>

	send_data[0]=reg & 0x7F;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f3a:	f107 0208 	add.w	r2, r7, #8
 8001f3e:	f107 010c 	add.w	r1, r7, #12
 8001f42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2301      	movs	r3, #1
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <ICM20602_writeByte+0x6c>)
 8001f4c:	f007 fe11 	bl	8009b72 <HAL_SPI_TransmitReceive>

	send_data[0]=data;
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	f107 010c 	add.w	r1, r7, #12
 8001f5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	4806      	ldr	r0, [pc, #24]	; (8001f80 <ICM20602_writeByte+0x6c>)
 8001f66:	f007 fe04 	bl	8009b72 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f006 fcd3 	bl	800891c <HAL_GPIO_WritePin>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000768 	.word	0x20000768

08001f84 <ICM20602_readByte>:

uint8_t ICM20602_readByte(uint8_t reg)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    uint8_t send_data[1];
    uint8_t RxBuffer[1];
    
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2110      	movs	r1, #16
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f006 fcc1 	bl	800891c <HAL_GPIO_WritePin>

    send_data[0]= reg | 0x80;
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fa4:	f107 0208 	add.w	r2, r7, #8
 8001fa8:	f107 010c 	add.w	r1, r7, #12
 8001fac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <ICM20602_readByte+0x6c>)
 8001fb6:	f007 fddc 	bl	8009b72 <HAL_SPI_TransmitReceive>

    send_data[0]=0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fbe:	f107 0208 	add.w	r2, r7, #8
 8001fc2:	f107 010c 	add.w	r1, r7, #12
 8001fc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <ICM20602_readByte+0x6c>)
 8001fd0:	f007 fdcf 	bl	8009b72 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001fd4:	7a3b      	ldrb	r3, [r7, #8]
 8001fd6:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2110      	movs	r1, #16
 8001fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe0:	f006 fc9c 	bl	800891c <HAL_GPIO_WritePin>
    
    return (val);
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000768 	.word	0x20000768

08001ff4 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	480d      	ldr	r0, [pc, #52]	; (8002034 <ICM20602_init+0x40>)
 8001ffe:	f006 fc8d 	bl	800891c <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
 8002002:	2100      	movs	r1, #0
 8002004:	206b      	movs	r0, #107	; 0x6b
 8002006:	f7ff ff85 	bl	8001f14 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
 800200a:	2107      	movs	r1, #7
 800200c:	2019      	movs	r0, #25
 800200e:	f7ff ff81 	bl	8001f14 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03
 8002012:	2101      	movs	r1, #1
 8002014:	201a      	movs	r0, #26
 8002016:	f7ff ff7d 	bl	8001f14 <ICM20602_writeByte>

	ICM20602_setAccRange(Ascale);
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <ICM20602_init+0x44>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f8b6 	bl	8002190 <ICM20602_setAccRange>
	ICM20602_setGyroRange(Gscale);
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <ICM20602_init+0x48>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f8eb 	bl	8002204 <ICM20602_setGyroRange>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	48000800 	.word	0x48000800
 8002038:	200005a8 	.word	0x200005a8
 800203c:	20000004 	.word	0x20000004

08002040 <ICM20602_getAccXvalue>:

int16_t ICM20602_getAccXvalue()
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_L); // read Accelerometer X_Low  value
 8002046:	203c      	movs	r0, #60	; 0x3c
 8002048:	f7ff ff9c 	bl	8001f84 <ICM20602_readByte>
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_H); // read Accelerometer X_High value
 8002050:	203b      	movs	r0, #59	; 0x3b
 8002052:	f7ff ff97 	bl	8001f84 <ICM20602_readByte>
 8002056:	4603      	mov	r3, r0
 8002058:	71bb      	strb	r3, [r7, #6]
    return((HiByte<<8) | LoByte);
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <ICM20602_getAccYvalue>:

int16_t ICM20602_getAccYvalue()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_L); // read Accelerometer X_Low  value
 8002076:	203e      	movs	r0, #62	; 0x3e
 8002078:	f7ff ff84 	bl	8001f84 <ICM20602_readByte>
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_H); // read Accelerometer X_High value
 8002080:	203d      	movs	r0, #61	; 0x3d
 8002082:	f7ff ff7f 	bl	8001f84 <ICM20602_readByte>
 8002086:	4603      	mov	r3, r0
 8002088:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800208a:	79bb      	ldrb	r3, [r7, #6]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	b21b      	sxth	r3, r3
 8002094:	4313      	orrs	r3, r2
 8002096:	b21b      	sxth	r3, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <ICM20602_getAccZvalue>:

int16_t ICM20602_getAccZvalue()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_L); // read Accelerometer X_Low  value
 80020a6:	2040      	movs	r0, #64	; 0x40
 80020a8:	f7ff ff6c 	bl	8001f84 <ICM20602_readByte>
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_H); // read Accelerometer X_High value
 80020b0:	203f      	movs	r0, #63	; 0x3f
 80020b2:	f7ff ff67 	bl	8001f84 <ICM20602_readByte>
 80020b6:	4603      	mov	r3, r0
 80020b8:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	b21a      	sxth	r2, r3
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b21b      	sxth	r3, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <ICM20602_getGyrXvalue>:

int16_t ICM20602_getGyrXvalue()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_XOUT_L); // read Accelerometer X_Low  value
 80020d6:	2044      	movs	r0, #68	; 0x44
 80020d8:	f7ff ff54 	bl	8001f84 <ICM20602_readByte>
 80020dc:	4603      	mov	r3, r0
 80020de:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_XOUT_H); // read Accelerometer X_High value
 80020e0:	2043      	movs	r0, #67	; 0x43
 80020e2:	f7ff ff4f 	bl	8001f84 <ICM20602_readByte>
 80020e6:	4603      	mov	r3, r0
 80020e8:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020ea:	79bb      	ldrb	r3, [r7, #6]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b21b      	sxth	r3, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <ICM20602_getGyrYvalue>:

int16_t ICM20602_getGyrYvalue()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_YOUT_L); // read Accelerometer X_Low  value
 8002106:	2046      	movs	r0, #70	; 0x46
 8002108:	f7ff ff3c 	bl	8001f84 <ICM20602_readByte>
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_YOUT_H); // read Accelerometer X_High value
 8002110:	2045      	movs	r0, #69	; 0x45
 8002112:	f7ff ff37 	bl	8001f84 <ICM20602_readByte>
 8002116:	4603      	mov	r3, r0
 8002118:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800211a:	79bb      	ldrb	r3, [r7, #6]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21a      	sxth	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	b21b      	sxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b21b      	sxth	r3, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <ICM20602_getGyrZvalue>:

int16_t ICM20602_getGyrZvalue()
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_L); // read Accelerometer X_Low  value
 8002136:	2048      	movs	r0, #72	; 0x48
 8002138:	f7ff ff24 	bl	8001f84 <ICM20602_readByte>
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_H); // read Accelerometer X_High value
 8002140:	2047      	movs	r0, #71	; 0x47
 8002142:	f7ff ff1f 	bl	8001f84 <ICM20602_readByte>
 8002146:	4603      	mov	r3, r0
 8002148:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21b      	sxth	r3, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <ICM20602_getIMUTemp>:

int16_t ICM20602_getIMUTemp()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_TEMP_OUT_L); // read Accelerometer X_Low  value
 8002166:	2042      	movs	r0, #66	; 0x42
 8002168:	f7ff ff0c 	bl	8001f84 <ICM20602_readByte>
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_TEMP_OUT_H); // read Accelerometer X_High value
 8002170:	2041      	movs	r0, #65	; 0x41
 8002172:	f7ff ff07 	bl	8001f84 <ICM20602_readByte>
 8002176:	4603      	mov	r3, r0
 8002178:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	b21a      	sxth	r2, r3
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	b21b      	sxth	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b21b      	sxth	r3, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <ICM20602_setAccRange>:


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    switch(Ascale)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d81e      	bhi.n	80021dc <ICM20602_setAccRange+0x4c>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <ICM20602_setAccRange+0x14>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bf 	.word	0x080021bf
 80021ac:	080021c9 	.word	0x080021c9
 80021b0:	080021d3 	.word	0x080021d3
    {
        case AFS_2G:
            aRes = 2.0/32768.0;
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021b6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80021ba:	601a      	str	r2, [r3, #0]
            break;
 80021bc:	e00e      	b.n	80021dc <ICM20602_setAccRange+0x4c>
        case AFS_4G:
            aRes = 4.0/32768.0;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021c0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80021c4:	601a      	str	r2, [r3, #0]
            break;
 80021c6:	e009      	b.n	80021dc <ICM20602_setAccRange+0x4c>
        case AFS_8G:
            aRes = 8.0/32768.0;
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021ca:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80021ce:	601a      	str	r2, [r3, #0]
            break;
 80021d0:	e004      	b.n	80021dc <ICM20602_setAccRange+0x4c>
        case AFS_16G:
            aRes = 16.0/32768.0;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021d4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80021d8:	601a      	str	r2, [r3, #0]
            break;         
 80021da:	bf00      	nop
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	201c      	movs	r0, #28
 80021e8:	f7ff fe94 	bl	8001f14 <ICM20602_writeByte>
    
    return aRes;
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <ICM20602_setAccRange+0x70>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	ee07 3a90 	vmov	s15, r3
}
 80021f4:	eeb0 0a67 	vmov.f32	s0, s15
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200005a0 	.word	0x200005a0

08002204 <ICM20602_setGyroRange>:

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    switch(Gscale)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d81a      	bhi.n	8002248 <ICM20602_setGyroRange+0x44>
 8002212:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <ICM20602_setGyroRange+0x14>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	08002229 	.word	0x08002229
 800221c:	08002231 	.word	0x08002231
 8002220:	08002239 	.word	0x08002239
 8002224:	08002241 	.word	0x08002241
    {
        case GFS_250DPS:
            gRes = 250.0/32768.0;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <ICM20602_setGyroRange+0x68>)
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <ICM20602_setGyroRange+0x6c>)
 800222c:	601a      	str	r2, [r3, #0]
            break;
 800222e:	e00b      	b.n	8002248 <ICM20602_setGyroRange+0x44>
        case GFS_500DPS:
            gRes = 500.0/32768.0;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <ICM20602_setGyroRange+0x68>)
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <ICM20602_setGyroRange+0x70>)
 8002234:	601a      	str	r2, [r3, #0]
            break;
 8002236:	e007      	b.n	8002248 <ICM20602_setGyroRange+0x44>
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <ICM20602_setGyroRange+0x68>)
 800223a:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <ICM20602_setGyroRange+0x74>)
 800223c:	601a      	str	r2, [r3, #0]
            break;
 800223e:	e003      	b.n	8002248 <ICM20602_setGyroRange+0x44>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <ICM20602_setGyroRange+0x68>)
 8002242:	4a0e      	ldr	r2, [pc, #56]	; (800227c <ICM20602_setGyroRange+0x78>)
 8002244:	601a      	str	r2, [r3, #0]
            break;
 8002246:	bf00      	nop
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	201b      	movs	r0, #27
 8002254:	f7ff fe5e 	bl	8001f14 <ICM20602_writeByte>
    
    return gRes;
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <ICM20602_setGyroRange+0x68>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	ee07 3a90 	vmov	s15, r3
}
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200005a4 	.word	0x200005a4
 8002270:	3bfa0000 	.word	0x3bfa0000
 8002274:	3c7a0000 	.word	0x3c7a0000
 8002278:	3cfa0000 	.word	0x3cfa0000
 800227c:	3d7a0000 	.word	0x3d7a0000

08002280 <ICM20602_read_IMU_data>:
    Gscale = (Gscale & 0x18) >> 3;

    return Gscale;
}

void ICM20602_read_IMU_data() {
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8002284:	f7ff fedc 	bl	8002040 <ICM20602_getAccXvalue>
 8002288:	4603      	mov	r3, r0
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002292:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002484 <ICM20602_read_IMU_data+0x204>
 8002296:	ee27 7a87 	vmul.f32	s14, s15, s14
 800229a:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <ICM20602_read_IMU_data+0x208>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a4:	4b79      	ldr	r3, [pc, #484]	; (800248c <ICM20602_read_IMU_data+0x20c>)
 80022a6:	edc3 7a00 	vstr	s15, [r3]
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80022aa:	f7ff fee1 	bl	8002070 <ICM20602_getAccYvalue>
 80022ae:	4603      	mov	r3, r0
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b8:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002484 <ICM20602_read_IMU_data+0x204>
 80022bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022c0:	4b71      	ldr	r3, [pc, #452]	; (8002488 <ICM20602_read_IMU_data+0x208>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	4b70      	ldr	r3, [pc, #448]	; (800248c <ICM20602_read_IMU_data+0x20c>)
 80022cc:	edc3 7a01 	vstr	s15, [r3, #4]
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80022d0:	f7ff fee6 	bl	80020a0 <ICM20602_getAccZvalue>
 80022d4:	4603      	mov	r3, r0
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022de:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002484 <ICM20602_read_IMU_data+0x204>
 80022e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022e6:	4b68      	ldr	r3, [pc, #416]	; (8002488 <ICM20602_read_IMU_data+0x208>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	4b66      	ldr	r3, [pc, #408]	; (800248c <ICM20602_read_IMU_data+0x20c>)
 80022f2:	edc3 7a02 	vstr	s15, [r3, #8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80022f6:	f7ff feeb 	bl	80020d0 <ICM20602_getGyrXvalue>
 80022fa:	4603      	mov	r3, r0
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002304:	4b62      	ldr	r3, [pc, #392]	; (8002490 <ICM20602_read_IMU_data+0x210>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	4b61      	ldr	r3, [pc, #388]	; (8002494 <ICM20602_read_IMU_data+0x214>)
 8002310:	edc3 7a00 	vstr	s15, [r3]
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002314:	f7ff fef4 	bl	8002100 <ICM20602_getGyrYvalue>
 8002318:	4603      	mov	r3, r0
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002322:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <ICM20602_read_IMU_data+0x210>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <ICM20602_read_IMU_data+0x214>)
 800232e:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002332:	f7ff fefd 	bl	8002130 <ICM20602_getGyrZvalue>
 8002336:	4603      	mov	r3, r0
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <ICM20602_read_IMU_data+0x210>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <ICM20602_read_IMU_data+0x214>)
 800234c:	edc3 7a02 	vstr	s15, [r3, #8]

    ICM20602_medianFilter();
 8002350:	f000 f926 	bl	80025a0 <ICM20602_medianFilter>

    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002354:	f7ff ff04 	bl	8002160 <ICM20602_getIMUTemp>
 8002358:	4603      	mov	r3, r0
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002362:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002498 <ICM20602_read_IMU_data+0x218>
 8002366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800236e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <ICM20602_read_IMU_data+0x21c>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
    ICM20602_IMU_compensate();
 8002378:	f000 fd42 	bl	8002e00 <ICM20602_IMU_compensate>

    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt);
 800237c:	4b48      	ldr	r3, [pc, #288]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <ICM20602_read_IMU_data+0x224>)
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <ICM20602_read_IMU_data+0x228>)
 800238a:	edd3 6a00 	vldr	s13, [r3]
 800238e:	eeb0 1a66 	vmov.f32	s2, s13
 8002392:	eef0 0a47 	vmov.f32	s1, s14
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	f000 f88d 	bl	80024b8 <ICM20602_integral>
 800239e:	eeb0 7a40 	vmov.f32	s14, s0
 80023a2:	4b42      	ldr	r3, [pc, #264]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 80023ae:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt);
 80023b2:	4b3b      	ldr	r3, [pc, #236]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 80023b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <ICM20602_read_IMU_data+0x224>)
 80023ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <ICM20602_read_IMU_data+0x228>)
 80023c0:	edd3 6a00 	vldr	s13, [r3]
 80023c4:	eeb0 1a66 	vmov.f32	s2, s13
 80023c8:	eef0 0a47 	vmov.f32	s1, s14
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	f000 f872 	bl	80024b8 <ICM20602_integral>
 80023d4:	eeb0 7a40 	vmov.f32	s14, s0
 80023d8:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 80023e4:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt);
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 80023ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <ICM20602_read_IMU_data+0x224>)
 80023f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <ICM20602_read_IMU_data+0x228>)
 80023f6:	edd3 6a00 	vldr	s13, [r3]
 80023fa:	eeb0 1a66 	vmov.f32	s2, s13
 80023fe:	eef0 0a47 	vmov.f32	s1, s14
 8002402:	eeb0 0a67 	vmov.f32	s0, s15
 8002406:	f000 f857 	bl	80024b8 <ICM20602_integral>
 800240a:	eeb0 7a40 	vmov.f32	s14, s0
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <ICM20602_read_IMU_data+0x234>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002418:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <ICM20602_read_IMU_data+0x234>)
 800241a:	edc3 7a00 	vstr	s15, [r3]

    pitchAngle = ICM20602_normAngle(pitchAngle);
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	eeb0 0a67 	vmov.f32	s0, s15
 8002428:	f000 f880 	bl	800252c <ICM20602_normAngle>
 800242c:	eef0 7a40 	vmov.f32	s15, s0
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <ICM20602_read_IMU_data+0x22c>)
 8002432:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = ICM20602_normAngle(rollAngle);
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	eeb0 0a67 	vmov.f32	s0, s15
 8002440:	f000 f874 	bl	800252c <ICM20602_normAngle>
 8002444:	eef0 7a40 	vmov.f32	s15, s0
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <ICM20602_read_IMU_data+0x230>)
 800244a:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = ICM20602_normAngle(yawAngle);
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <ICM20602_read_IMU_data+0x234>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	eeb0 0a67 	vmov.f32	s0, s15
 8002458:	f000 f868 	bl	800252c <ICM20602_normAngle>
 800245c:	eef0 7a40 	vmov.f32	s15, s0
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <ICM20602_read_IMU_data+0x234>)
 8002462:	edc3 7a00 	vstr	s15, [r3]

    gyro_prv[0] = gyro_comp[0];
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <ICM20602_read_IMU_data+0x224>)
 800246c:	6013      	str	r3, [r2, #0]
    gyro_prv[1] = gyro_comp[1];
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <ICM20602_read_IMU_data+0x224>)
 8002474:	6053      	str	r3, [r2, #4]
    gyro_prv[2] = gyro_comp[2];
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <ICM20602_read_IMU_data+0x220>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <ICM20602_read_IMU_data+0x224>)
 800247c:	6093      	str	r3, [r2, #8]
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	411ce80a 	.word	0x411ce80a
 8002488:	200005a0 	.word	0x200005a0
 800248c:	200005e4 	.word	0x200005e4
 8002490:	200005a4 	.word	0x200005a4
 8002494:	200005f0 	.word	0x200005f0
 8002498:	43a36666 	.word	0x43a36666
 800249c:	20000614 	.word	0x20000614
 80024a0:	20000608 	.word	0x20000608
 80024a4:	20000534 	.word	0x20000534
 80024a8:	20000000 	.word	0x20000000
 80024ac:	200005d8 	.word	0x200005d8
 80024b0:	200005dc 	.word	0x200005dc
 80024b4:	200005e0 	.word	0x200005e0

080024b8 <ICM20602_integral>:



float ICM20602_integral(float val, float val_prv, float dt)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	ed87 0a03 	vstr	s0, [r7, #12]
 80024c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80024c6:	ed87 1a01 	vstr	s2, [r7, #4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80024ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80024e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80024ea:	eeb0 0a67 	vmov.f32	s0, s15
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <ICM20602_clearAngle>:

void ICM20602_clearAngle(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
    pitchAngle = 0.0f;
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <ICM20602_clearAngle+0x28>)
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
    rollAngle  = 0.0f;
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <ICM20602_clearAngle+0x2c>)
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
    yawAngle   = 0.0f;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <ICM20602_clearAngle+0x30>)
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200005d8 	.word	0x200005d8
 8002524:	200005dc 	.word	0x200005dc
 8002528:	200005e0 	.word	0x200005e0

0800252c <ICM20602_normAngle>:
    rollAngle  = roll;
    yawAngle   = yaw;
}

float ICM20602_normAngle(float deg)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	ed87 0a01 	vstr	s0, [r7, #4]
    while (deg < -180.0f) deg += 360.0f;
 8002536:	e007      	b.n	8002548 <ICM20602_normAngle+0x1c>
 8002538:	edd7 7a01 	vldr	s15, [r7, #4]
 800253c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002594 <ICM20602_normAngle+0x68>
 8002540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002544:	edc7 7a01 	vstr	s15, [r7, #4]
 8002548:	edd7 7a01 	vldr	s15, [r7, #4]
 800254c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002598 <ICM20602_normAngle+0x6c>
 8002550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	d4ee      	bmi.n	8002538 <ICM20602_normAngle+0xc>
    while (deg >= 180.0f) deg -= 360.0f;
 800255a:	e007      	b.n	800256c <ICM20602_normAngle+0x40>
 800255c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002560:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002594 <ICM20602_normAngle+0x68>
 8002564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002568:	edc7 7a01 	vstr	s15, [r7, #4]
 800256c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002570:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800259c <ICM20602_normAngle+0x70>
 8002574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	daee      	bge.n	800255c <ICM20602_normAngle+0x30>

    return deg;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	ee07 3a90 	vmov	s15, r3
}
 8002584:	eeb0 0a67 	vmov.f32	s0, s15
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	43b40000 	.word	0x43b40000
 8002598:	c3340000 	.word	0xc3340000
 800259c:	43340000 	.word	0x43340000

080025a0 <ICM20602_medianFilter>:
    return yawAngle;
}

// filter length : 3-only
void ICM20602_medianFilter(void)
{
 80025a0:	b490      	push	{r4, r7}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {
 80025a6:	2300      	movs	r3, #0
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	e123      	b.n	80027f4 <ICM20602_medianFilter+0x254>

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 80025ac:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025b4:	4895      	ldr	r0, [pc, #596]	; (800280c <ICM20602_medianFilter+0x26c>)
 80025b6:	460b      	mov	r3, r1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	440b      	add	r3, r1
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4403      	add	r3, r0
 80025c0:	3304      	adds	r3, #4
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	4891      	ldr	r0, [pc, #580]	; (800280c <ICM20602_medianFilter+0x26c>)
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4403      	add	r3, r0
 80025d0:	3308      	adds	r3, #8
 80025d2:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 80025d4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025dc:	488b      	ldr	r0, [pc, #556]	; (800280c <ICM20602_medianFilter+0x26c>)
 80025de:	460b      	mov	r3, r1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	440b      	add	r3, r1
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	4888      	ldr	r0, [pc, #544]	; (800280c <ICM20602_medianFilter+0x26c>)
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4403      	add	r3, r0
 80025f6:	3304      	adds	r3, #4
 80025f8:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][0] = gyro[i];
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002602:	4983      	ldr	r1, [pc, #524]	; (8002810 <ICM20602_medianFilter+0x270>)
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	4880      	ldr	r0, [pc, #512]	; (800280c <ICM20602_medianFilter+0x26c>)
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4403      	add	r3, r0
 8002616:	6019      	str	r1, [r3, #0]

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8002618:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800261c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002620:	487c      	ldr	r0, [pc, #496]	; (8002814 <ICM20602_medianFilter+0x274>)
 8002622:	460b      	mov	r3, r1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	440b      	add	r3, r1
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4403      	add	r3, r0
 800262c:	3304      	adds	r3, #4
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	4878      	ldr	r0, [pc, #480]	; (8002814 <ICM20602_medianFilter+0x274>)
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4403      	add	r3, r0
 800263c:	3308      	adds	r3, #8
 800263e:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8002640:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002644:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002648:	4872      	ldr	r0, [pc, #456]	; (8002814 <ICM20602_medianFilter+0x274>)
 800264a:	460b      	mov	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	440b      	add	r3, r1
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	486f      	ldr	r0, [pc, #444]	; (8002814 <ICM20602_medianFilter+0x274>)
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4403      	add	r3, r0
 8002662:	3304      	adds	r3, #4
 8002664:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][0]  = acc[i];
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800266e:	496a      	ldr	r1, [pc, #424]	; (8002818 <ICM20602_medianFilter+0x278>)
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	4867      	ldr	r0, [pc, #412]	; (8002814 <ICM20602_medianFilter+0x274>)
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4403      	add	r3, r0
 8002682:	6019      	str	r1, [r3, #0]

    	for (j = 0; j < 3; j ++){
 8002684:	2300      	movs	r3, #0
 8002686:	71bb      	strb	r3, [r7, #6]
 8002688:	e029      	b.n	80026de <ICM20602_medianFilter+0x13e>
    		gyro_tmp[j] = gyro_mdat[i][j];
 800268a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800268e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8002692:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8002696:	4c5d      	ldr	r4, [pc, #372]	; (800280c <ICM20602_medianFilter+0x26c>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	4403      	add	r3, r0
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4423      	add	r3, r4
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	485d      	ldr	r0, [pc, #372]	; (800281c <ICM20602_medianFilter+0x27c>)
 80026a8:	008b      	lsls	r3, r1, #2
 80026aa:	4403      	add	r3, r0
 80026ac:	601a      	str	r2, [r3, #0]
    		acc_tmp[j]  = acc_mdat[i][j];
 80026ae:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026b2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026b6:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026ba:	4c56      	ldr	r4, [pc, #344]	; (8002814 <ICM20602_medianFilter+0x274>)
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	4403      	add	r3, r0
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4423      	add	r3, r4
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4855      	ldr	r0, [pc, #340]	; (8002820 <ICM20602_medianFilter+0x280>)
 80026cc:	008b      	lsls	r3, r1, #2
 80026ce:	4403      	add	r3, r0
 80026d0:	601a      	str	r2, [r3, #0]
    	for (j = 0; j < 3; j ++){
 80026d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	71bb      	strb	r3, [r7, #6]
 80026de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	ddd1      	ble.n	800268a <ICM20602_medianFilter+0xea>
    	}

    	a = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	717b      	strb	r3, [r7, #5]
    	b = 2;
 80026ea:	2302      	movs	r3, #2
 80026ec:	713b      	strb	r3, [r7, #4]

    	for (j = 2; j >= 0; j--) {
 80026ee:	2302      	movs	r3, #2
 80026f0:	71bb      	strb	r3, [r7, #6]
 80026f2:	e065      	b.n	80027c0 <ICM20602_medianFilter+0x220>
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 80026f4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80026f8:	4a48      	ldr	r2, [pc, #288]	; (800281c <ICM20602_medianFilter+0x27c>)
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	ed93 7a00 	vldr	s14, [r3]
 8002702:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002706:	4a45      	ldr	r2, [pc, #276]	; (800281c <ICM20602_medianFilter+0x27c>)
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	dd19      	ble.n	800274e <ICM20602_medianFilter+0x1ae>
    			tmp         = gyro_tmp[a];
 800271a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800271e:	4a3f      	ldr	r2, [pc, #252]	; (800281c <ICM20602_medianFilter+0x27c>)
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	603b      	str	r3, [r7, #0]
    			gyro_tmp[a] = gyro_tmp[b];
 8002728:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800272c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002730:	493a      	ldr	r1, [pc, #232]	; (800281c <ICM20602_medianFilter+0x27c>)
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	440a      	add	r2, r1
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	4938      	ldr	r1, [pc, #224]	; (800281c <ICM20602_medianFilter+0x27c>)
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	601a      	str	r2, [r3, #0]
    			gyro_tmp[b] = tmp;
 8002740:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002744:	4a35      	ldr	r2, [pc, #212]	; (800281c <ICM20602_medianFilter+0x27c>)
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	601a      	str	r2, [r3, #0]
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 800274e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002752:	4a33      	ldr	r2, [pc, #204]	; (8002820 <ICM20602_medianFilter+0x280>)
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	ed93 7a00 	vldr	s14, [r3]
 800275c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002760:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <ICM20602_medianFilter+0x280>)
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	dd19      	ble.n	80027a8 <ICM20602_medianFilter+0x208>
				tmp         = acc_tmp[a];
 8002774:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002778:	4a29      	ldr	r2, [pc, #164]	; (8002820 <ICM20602_medianFilter+0x280>)
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	603b      	str	r3, [r7, #0]
				acc_tmp[a]  = acc_tmp[b];
 8002782:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8002786:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800278a:	4925      	ldr	r1, [pc, #148]	; (8002820 <ICM20602_medianFilter+0x280>)
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	440a      	add	r2, r1
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	4923      	ldr	r1, [pc, #140]	; (8002820 <ICM20602_medianFilter+0x280>)
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	601a      	str	r2, [r3, #0]
				acc_tmp[b]  = tmp;
 800279a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800279e:	4a20      	ldr	r2, [pc, #128]	; (8002820 <ICM20602_medianFilter+0x280>)
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	601a      	str	r2, [r3, #0]
			}
    		a = j-1;
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	717b      	strb	r3, [r7, #5]
    		b = j;
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	713b      	strb	r3, [r7, #4]
    	for (j = 2; j >= 0; j--) {
 80027b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	71bb      	strb	r3, [r7, #6]
 80027c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da95      	bge.n	80026f4 <ICM20602_medianFilter+0x154>
    	}
    	gyro[i] = gyro_tmp[1];
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <ICM20602_medianFilter+0x27c>)
 80027ce:	6852      	ldr	r2, [r2, #4]
 80027d0:	490f      	ldr	r1, [pc, #60]	; (8002810 <ICM20602_medianFilter+0x270>)
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	601a      	str	r2, [r3, #0]
    	acc[i]  = acc_tmp[1];
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4a10      	ldr	r2, [pc, #64]	; (8002820 <ICM20602_medianFilter+0x280>)
 80027de:	6852      	ldr	r2, [r2, #4]
 80027e0:	490d      	ldr	r1, [pc, #52]	; (8002818 <ICM20602_medianFilter+0x278>)
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i ++) {
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	f77f aed7 	ble.w	80025ac <ICM20602_medianFilter+0xc>
    }
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bc90      	pop	{r4, r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20000540 	.word	0x20000540
 8002810:	200005f0 	.word	0x200005f0
 8002814:	20000564 	.word	0x20000564
 8002818:	200005e4 	.word	0x200005e4
 800281c:	20000588 	.word	0x20000588
 8002820:	20000594 	.word	0x20000594
 8002824:	00000000 	.word	0x00000000

08002828 <ICM20602_IMU_calibration2>:
    	gyro_off[j] = gyro_sum[j] / cal_len;
    }
}

void ICM20602_IMU_calibration2(void)
{
 8002828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800282c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8002830:	af00      	add	r7, sp, #0
	int i,j;
    double cal_len = 0.0f;
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
    double acc_sum[3]={0};
 800283e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	615a      	str	r2, [r3, #20]
    double gyro_sum[3]={0};
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
 8002860:	615a      	str	r2, [r3, #20]

    double acc_ave[3][10] = {{0.0}};
 8002862:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800286a:	4618      	mov	r0, r3
 800286c:	23f0      	movs	r3, #240	; 0xf0
 800286e:	461a      	mov	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	f00a fbb9 	bl	800cfe8 <memset>
    double gyro_ave[3][10] = {{0.0}};
 8002876:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800287a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800287e:	4618      	mov	r0, r3
 8002880:	23f0      	movs	r3, #240	; 0xf0
 8002882:	461a      	mov	r2, r3
 8002884:	2100      	movs	r1, #0
 8002886:	f00a fbaf 	bl	800cfe8 <memset>

    printf("put the IMU still!\n");
 800288a:	4886      	ldr	r0, [pc, #536]	; (8002aa4 <ICM20602_IMU_calibration2+0x27c>)
 800288c:	f00b f8a4 	bl	800d9d8 <puts>
    HAL_Delay(1000);
 8002890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002894:	f003 f88e 	bl	80059b4 <HAL_Delay>

    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002898:	e183      	b.n	8002ba2 <ICM20602_IMU_calibration2+0x37a>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
		|| cal_len < 500.0
		){

    	printf("cal_len=%f\r\n",cal_len);
 800289a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800289e:	4882      	ldr	r0, [pc, #520]	; (8002aa8 <ICM20602_IMU_calibration2+0x280>)
 80028a0:	f00b f814 	bl	800d8cc <iprintf>
    	for(j = 0; j < 3; j++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80028aa:	e15f      	b.n	8002b6c <ICM20602_IMU_calibration2+0x344>
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028ac:	f7ff fbc8 	bl	8002040 <ICM20602_getAccXvalue>
 80028b0:	4603      	mov	r3, r0
 80028b2:	ee07 3a90 	vmov	s15, r3
 80028b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ba:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002aac <ICM20602_IMU_calibration2+0x284>
 80028be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028c2:	4b7b      	ldr	r3, [pc, #492]	; (8002ab0 <ICM20602_IMU_calibration2+0x288>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028cc:	4b79      	ldr	r3, [pc, #484]	; (8002ab4 <ICM20602_IMU_calibration2+0x28c>)
 80028ce:	edc3 7a00 	vstr	s15, [r3]
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028d2:	f7ff fbcd 	bl	8002070 <ICM20602_getAccYvalue>
 80028d6:	4603      	mov	r3, r0
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002aac <ICM20602_IMU_calibration2+0x284>
 80028e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028e8:	4b71      	ldr	r3, [pc, #452]	; (8002ab0 <ICM20602_IMU_calibration2+0x288>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f2:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <ICM20602_IMU_calibration2+0x28c>)
 80028f4:	edc3 7a01 	vstr	s15, [r3, #4]
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80028f8:	f7ff fbd2 	bl	80020a0 <ICM20602_getAccZvalue>
 80028fc:	4603      	mov	r3, r0
 80028fe:	ee07 3a90 	vmov	s15, r3
 8002902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002906:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002aac <ICM20602_IMU_calibration2+0x284>
 800290a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800290e:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <ICM20602_IMU_calibration2+0x288>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <ICM20602_IMU_calibration2+0x28c>)
 800291a:	edc3 7a02 	vstr	s15, [r3, #8]
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800291e:	f7ff fbd7 	bl	80020d0 <ICM20602_getGyrXvalue>
 8002922:	4603      	mov	r3, r0
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292c:	4b62      	ldr	r3, [pc, #392]	; (8002ab8 <ICM20602_IMU_calibration2+0x290>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002936:	4b61      	ldr	r3, [pc, #388]	; (8002abc <ICM20602_IMU_calibration2+0x294>)
 8002938:	edc3 7a00 	vstr	s15, [r3]
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800293c:	f7ff fbe0 	bl	8002100 <ICM20602_getGyrYvalue>
 8002940:	4603      	mov	r3, r0
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <ICM20602_IMU_calibration2+0x290>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	4b59      	ldr	r3, [pc, #356]	; (8002abc <ICM20602_IMU_calibration2+0x294>)
 8002956:	edc3 7a01 	vstr	s15, [r3, #4]
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800295a:	f7ff fbe9 	bl	8002130 <ICM20602_getGyrZvalue>
 800295e:	4603      	mov	r3, r0
 8002960:	ee07 3a90 	vmov	s15, r3
 8002964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <ICM20602_IMU_calibration2+0x290>)
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	4b52      	ldr	r3, [pc, #328]	; (8002abc <ICM20602_IMU_calibration2+0x294>)
 8002974:	edc3 7a02 	vstr	s15, [r3, #8]

    		acc_sum[j]  += acc[j];
 8002978:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002982:	f107 0220 	add.w	r2, r7, #32
 8002986:	4413      	add	r3, r2
 8002988:	3b28      	subs	r3, #40	; 0x28
 800298a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800298e:	4a49      	ldr	r2, [pc, #292]	; (8002ab4 <ICM20602_IMU_calibration2+0x28c>)
 8002990:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdfc 	bl	8000598 <__aeabi_f2d>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4620      	mov	r0, r4
 80029a6:	4629      	mov	r1, r5
 80029a8:	f7fd fc98 	bl	80002dc <__adddf3>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029be:	f107 0220 	add.w	r2, r7, #32
 80029c2:	4413      	add	r3, r2
 80029c4:	3b28      	subs	r3, #40	; 0x28
 80029c6:	e9c3 0100 	strd	r0, r1, [r3]
    		gyro_sum[j] += gyro[j];
 80029ca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029d4:	f107 0220 	add.w	r2, r7, #32
 80029d8:	4413      	add	r3, r2
 80029da:	3b40      	subs	r3, #64	; 0x40
 80029dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029e0:	4a36      	ldr	r2, [pc, #216]	; (8002abc <ICM20602_IMU_calibration2+0x294>)
 80029e2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdd3 	bl	8000598 <__aeabi_f2d>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc6f 	bl	80002dc <__adddf3>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a10:	f107 0220 	add.w	r2, r7, #32
 8002a14:	4413      	add	r3, r2
 8002a16:	3b40      	subs	r3, #64	; 0x40
 8002a18:	e9c3 0100 	strd	r0, r1, [r3]

    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a1c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a26:	f107 0220 	add.w	r2, r7, #32
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b28      	subs	r3, #40	; 0x28
 8002a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a32:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a36:	f7fd ff31 	bl	800089c <__aeabi_ddiv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4614      	mov	r4, r2
 8002a40:	461d      	mov	r5, r3
 8002a42:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a46:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8002a4a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	440b      	add	r3, r1
 8002a58:	e9c3 4500 	strd	r4, r5, [r3]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a5c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a66:	f107 0220 	add.w	r2, r7, #32
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b40      	subs	r3, #64	; 0x40
 8002a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a72:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a76:	f7fd ff11 	bl	800089c <__aeabi_ddiv>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4614      	mov	r4, r2
 8002a80:	461d      	mov	r5, r3
 8002a82:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a86:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 8002a8a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	440b      	add	r3, r1
 8002a98:	e9c3 4500 	strd	r4, r5, [r3]

    		for(i = 9; i > 0; i --){
 8002a9c:	2309      	movs	r3, #9
 8002a9e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002aa2:	e05a      	b.n	8002b5a <ICM20602_IMU_calibration2+0x332>
 8002aa4:	0800fd80 	.word	0x0800fd80
 8002aa8:	0800fd94 	.word	0x0800fd94
 8002aac:	411ce80a 	.word	0x411ce80a
 8002ab0:	200005a0 	.word	0x200005a0
 8002ab4:	200005e4 	.word	0x200005e4
 8002ab8:	200005a4 	.word	0x200005a4
 8002abc:	200005f0 	.word	0x200005f0
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002ac0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002ac4:	1e59      	subs	r1, r3, #1
 8002ac6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002aca:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002ace:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4403      	add	r3, r0
 8002ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ae8:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 8002aec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002af0:	461a      	mov	r2, r3
 8002af2:	0092      	lsls	r2, r2, #2
 8002af4:	441a      	add	r2, r3
 8002af6:	0053      	lsls	r3, r2, #1
 8002af8:	461a      	mov	r2, r3
 8002afa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4423      	add	r3, r4
 8002b04:	e9c3 0100 	strd	r0, r1, [r3]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002b08:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b0c:	1e59      	subs	r1, r3, #1
 8002b0e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b12:	f5a3 7008 	sub.w	r0, r3, #544	; 0x220
 8002b16:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	440b      	add	r3, r1
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4403      	add	r3, r0
 8002b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b30:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 8002b34:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b38:	461a      	mov	r2, r3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	0053      	lsls	r3, r2, #1
 8002b40:	461a      	mov	r2, r3
 8002b42:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4423      	add	r3, r4
 8002b4c:	e9c3 0100 	strd	r0, r1, [r3]
    		for(i = 9; i > 0; i --){
 8002b50:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b54:	3b01      	subs	r3, #1
 8002b56:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002b5a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	dcae      	bgt.n	8002ac0 <ICM20602_IMU_calibration2+0x298>
    	for(j = 0; j < 3; j++){
 8002b62:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b66:	3301      	adds	r3, #1
 8002b68:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002b6c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	f77f ae9b 	ble.w	80028ac <ICM20602_IMU_calibration2+0x84>
    		}
    	}
    	cal_len ++;
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	4b9d      	ldr	r3, [pc, #628]	; (8002df0 <ICM20602_IMU_calibration2+0x5c8>)
 8002b7c:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002b80:	f7fd fbac 	bl	80002dc <__adddf3>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230

    	if(cal_len>5000){break;}
 8002b8c:	a394      	add	r3, pc, #592	; (adr r3, 8002de0 <ICM20602_IMU_calibration2+0x5b8>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002b96:	f7fd ffe7 	bl	8000b68 <__aeabi_dcmpgt>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 80c4 	bne.w	8002d2a <ICM20602_IMU_calibration2+0x502>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002ba2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002baa:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002bae:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fb8d 	bl	80002d8 <__aeabi_dsub>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4690      	mov	r8, r2
 8002bc4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002bc8:	a387      	add	r3, pc, #540	; (adr r3, 8002de8 <ICM20602_IMU_calibration2+0x5c0>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	4640      	mov	r0, r8
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	f7fd ffc9 	bl	8000b68 <__aeabi_dcmpgt>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f47f ae5e 	bne.w	800289a <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002bde:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002be6:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002bea:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bf2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002bf6:	f7fd fb6f 	bl	80002d8 <__aeabi_dsub>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4692      	mov	sl, r2
 8002c00:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002c04:	a378      	add	r3, pc, #480	; (adr r3, 8002de8 <ICM20602_IMU_calibration2+0x5c0>)
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	4650      	mov	r0, sl
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	f7fd ffab 	bl	8000b68 <__aeabi_dcmpgt>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f47f ae40 	bne.w	800289a <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 8002c1a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c22:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002c26:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c2e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c32:	f7fd fb51 	bl	80002d8 <__aeabi_dsub>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	61ba      	str	r2, [r7, #24]
 8002c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	a369      	add	r3, pc, #420	; (adr r3, 8002de8 <ICM20602_IMU_calibration2+0x5c0>)
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c4c:	f7fd ff8c 	bl	8000b68 <__aeabi_dcmpgt>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f47f ae21 	bne.w	800289a <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 8002c58:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c5c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c60:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c64:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c68:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f7fd fb32 	bl	80002d8 <__aeabi_dsub>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	613a      	str	r2, [r7, #16]
 8002c7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	a359      	add	r3, pc, #356	; (adr r3, 8002de8 <ICM20602_IMU_calibration2+0x5c0>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c8a:	f7fd ff6d 	bl	8000b68 <__aeabi_dcmpgt>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f ae02 	bne.w	800289a <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 8002c96:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c9a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c9e:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002ca2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ca6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002caa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002cae:	f7fd fb13 	bl	80002d8 <__aeabi_dsub>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	60ba      	str	r2, [r7, #8]
 8002cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	a34a      	add	r3, pc, #296	; (adr r3, 8002de8 <ICM20602_IMU_calibration2+0x5c0>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cc8:	f7fd ff4e 	bl	8000b68 <__aeabi_dcmpgt>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f47f ade3 	bne.w	800289a <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002cd4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cd8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cdc:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002ce0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002ce4:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002ce8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002cec:	f7fd faf4 	bl	80002d8 <__aeabi_dsub>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	603a      	str	r2, [r7, #0]
 8002cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	a33a      	add	r3, pc, #232	; (adr r3, 8002de8 <ICM20602_IMU_calibration2+0x5c0>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d06:	f7fd ff2f 	bl	8000b68 <__aeabi_dcmpgt>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f adc4 	bne.w	800289a <ICM20602_IMU_calibration2+0x72>
		|| cal_len < 500.0
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <ICM20602_IMU_calibration2+0x5cc>)
 8002d18:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d1c:	f7fd ff06 	bl	8000b2c <__aeabi_dcmplt>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f adb9 	bne.w	800289a <ICM20602_IMU_calibration2+0x72>
 8002d28:	e000      	b.n	8002d2c <ICM20602_IMU_calibration2+0x504>
    	if(cal_len>5000){break;}
 8002d2a:	bf00      	nop
    }

    if(cal_len==500){NVIC_SystemReset();}
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <ICM20602_IMU_calibration2+0x5cc>)
 8002d32:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d36:	f7fd feef 	bl	8000b18 <__aeabi_dcmpeq>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <ICM20602_IMU_calibration2+0x51c>
 8002d40:	f7ff f8d2 	bl	8001ee8 <__NVIC_SystemReset>

    for(j = 0; j < 3; j++){
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002d4a:	e03c      	b.n	8002dc6 <ICM20602_IMU_calibration2+0x59e>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d4c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d56:	f107 0220 	add.w	r2, r7, #32
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3b28      	subs	r3, #40	; 0x28
 8002d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d62:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002d66:	f7fd fd99 	bl	800089c <__aeabi_ddiv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff61 	bl	8000c38 <__aeabi_d2f>
 8002d76:	4602      	mov	r2, r0
 8002d78:	491f      	ldr	r1, [pc, #124]	; (8002df8 <ICM20602_IMU_calibration2+0x5d0>)
 8002d7a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	601a      	str	r2, [r3, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d84:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d8e:	f107 0220 	add.w	r2, r7, #32
 8002d92:	4413      	add	r3, r2
 8002d94:	3b40      	subs	r3, #64	; 0x40
 8002d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d9a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002d9e:	f7fd fd7d 	bl	800089c <__aeabi_ddiv>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd ff45 	bl	8000c38 <__aeabi_d2f>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4912      	ldr	r1, [pc, #72]	; (8002dfc <ICM20602_IMU_calibration2+0x5d4>)
 8002db2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 3; j++){
 8002dbc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002dc6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	ddbe      	ble.n	8002d4c <ICM20602_IMU_calibration2+0x524>
    }
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ddc:	f3af 8000 	nop.w
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40b38800 	.word	0x40b38800
 8002de8:	eb1c432d 	.word	0xeb1c432d
 8002dec:	3f1a36e2 	.word	0x3f1a36e2
 8002df0:	3ff00000 	.word	0x3ff00000
 8002df4:	407f4000 	.word	0x407f4000
 8002df8:	20000618 	.word	0x20000618
 8002dfc:	20000624 	.word	0x20000624

08002e00 <ICM20602_IMU_compensate>:

void ICM20602_IMU_compensate(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
    int k;
    for(k=0;k<3;k++){
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	e02a      	b.n	8002e62 <ICM20602_IMU_compensate+0x62>
        acc_comp[k] = acc[k] - acc_off[k];
 8002e0c:	4a1a      	ldr	r2, [pc, #104]	; (8002e78 <ICM20602_IMU_compensate+0x78>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	ed93 7a00 	vldr	s14, [r3]
 8002e18:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <ICM20602_IMU_compensate+0x7c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e28:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <ICM20602_IMU_compensate+0x80>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	edc3 7a00 	vstr	s15, [r3]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <ICM20602_IMU_compensate+0x84>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	ed93 7a00 	vldr	s14, [r3]
 8002e40:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <ICM20602_IMU_compensate+0x88>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e50:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <ICM20602_IMU_compensate+0x8c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	edc3 7a00 	vstr	s15, [r3]
    for(k=0;k<3;k++){
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	ddd1      	ble.n	8002e0c <ICM20602_IMU_compensate+0xc>
    }

}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	200005e4 	.word	0x200005e4
 8002e7c:	20000618 	.word	0x20000618
 8002e80:	200005fc 	.word	0x200005fc
 8002e84:	200005f0 	.word	0x200005f0
 8002e88:	20000624 	.word	0x20000624
 8002e8c:	20000608 	.word	0x20000608

08002e90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e94:	f3bf 8f4f 	dsb	sy
}
 8002e98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <__NVIC_SystemReset+0x24>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ea2:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <__NVIC_SystemReset+0x24>)
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <__NVIC_SystemReset+0x28>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eaa:	f3bf 8f4f 	dsb	sy
}
 8002eae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <__NVIC_SystemReset+0x20>
 8002eb4:	e000ed00 	.word	0xe000ed00
 8002eb8:	05fa0004 	.word	0x05fa0004

08002ebc <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002ec6:	1df9      	adds	r1, r7, #7
 8002ec8:	2301      	movs	r3, #1
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4803      	ldr	r0, [pc, #12]	; (8002edc <__io_putchar+0x20>)
 8002ece:	f008 fbe1 	bl	800b694 <HAL_UART_Transmit>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000868 	.word	0x20000868

08002ee0 <HAL_GetTick>:
void maintask_state_stop();
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2) ;
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
 {
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
   return uwTick;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_GetTick+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 }
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000adc 	.word	0x20000adc

08002ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002efe:	f002 fcf4 	bl	80058ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f02:	f000 f939 	bl	8003178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f06:	f7fe ff13 	bl	8001d30 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f0a:	f7fe fd69 	bl	80019e0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002f0e:	f7fe fdb1 	bl	8001a74 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8002f12:	f002 fa33 	bl	800537c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8002f16:	f002 fa7f 	bl	8005418 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002f1a:	f002 facd 	bl	80054b8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002f1e:	f001 ff05 	bl	8004d2c <MX_SPI1_Init>
  MX_TIM5_Init();
 8002f22:	f002 f91d 	bl	8005160 <MX_TIM5_Init>
  MX_TIM7_Init();
 8002f26:	f002 f975 	bl	8005214 <MX_TIM7_Init>
  MX_ADC5_Init();
 8002f2a:	f7fe fac3 	bl	80014b4 <MX_ADC5_Init>
  MX_ADC3_Init();
 8002f2e:	f7fe fa49 	bl	80013c4 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8002f32:	f7fe fde5 	bl	8001b00 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8002f36:	f7fe f9cd 	bl	80012d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  check_motor1=0;
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <main+0x210>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
  check_motor2=0;
 8002f40:	4b72      	ldr	r3, [pc, #456]	; (800310c <main+0x214>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
  check_motor3=0;
 8002f46:	4b72      	ldr	r3, [pc, #456]	; (8003110 <main+0x218>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
  check_motor4=0;
 8002f4c:	4b71      	ldr	r3, [pc, #452]	; (8003114 <main+0x21c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
  check_power=0;
 8002f52:	4b71      	ldr	r3, [pc, #452]	; (8003118 <main+0x220>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
  check_FC=0;
 8002f58:	4b70      	ldr	r3, [pc, #448]	; (800311c <main+0x224>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002f5e:	2104      	movs	r1, #4
 8002f60:	486f      	ldr	r0, [pc, #444]	; (8003120 <main+0x228>)
 8002f62:	f007 faa5 	bl	800a4b0 <HAL_TIM_PWM_Start>
    for(int i=0;i<3;i++){
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e006      	b.n	8002f7a <main+0x82>
      actuator_buzzer(20, 20);
 8002f6c:	2114      	movs	r1, #20
 8002f6e:	2014      	movs	r0, #20
 8002f70:	f7fe f992 	bl	8001298 <actuator_buzzer>
    for(int i=0;i<3;i++){
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3301      	adds	r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	ddf5      	ble.n	8002f6c <main+0x74>
    }
    setbuf(stdout, NULL);
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <main+0x22c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00a fd2d 	bl	800d9e8 <setbuf>
    printf("start\r\n");
 8002f8e:	4866      	ldr	r0, [pc, #408]	; (8003128 <main+0x230>)
 8002f90:	f00a fd22 	bl	800d9d8 <puts>
    can1_init_ibis(&hfdcan1);
 8002f94:	4865      	ldr	r0, [pc, #404]	; (800312c <main+0x234>)
 8002f96:	f7fe fc63 	bl	8001860 <can1_init_ibis>
    can2_init_ibis(&hfdcan2);
 8002f9a:	4865      	ldr	r0, [pc, #404]	; (8003130 <main+0x238>)
 8002f9c:	f7fe fcc0 	bl	8001920 <can2_init_ibis>

    HAL_FDCAN_Start(&hfdcan1);
 8002fa0:	4862      	ldr	r0, [pc, #392]	; (800312c <main+0x234>)
 8002fa2:	f004 fe59 	bl	8007c58 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4860      	ldr	r0, [pc, #384]	; (800312c <main+0x234>)
 8002fac:	f004 ffac 	bl	8007f08 <HAL_FDCAN_ActivateNotification>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <main+0xc2>
    {
      Error_Handler();
 8002fb6:	f001 fd91 	bl	8004adc <Error_Handler>
    }

    HAL_FDCAN_Start(&hfdcan2);
 8002fba:	485d      	ldr	r0, [pc, #372]	; (8003130 <main+0x238>)
 8002fbc:	f004 fe4c 	bl	8007c58 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	485a      	ldr	r0, [pc, #360]	; (8003130 <main+0x238>)
 8002fc6:	f004 ff9f 	bl	8007f08 <HAL_FDCAN_ActivateNotification>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <main+0xdc>
    {
      Error_Handler();
 8002fd0:	f001 fd84 	bl	8004adc <Error_Handler>
    }

    HAL_UART_Init(&hlpuart1);
 8002fd4:	4857      	ldr	r0, [pc, #348]	; (8003134 <main+0x23c>)
 8002fd6:	f008 fb0d 	bl	800b5f4 <HAL_UART_Init>
    xprintf_init(&hlpuart1);
 8002fda:	4856      	ldr	r0, [pc, #344]	; (8003134 <main+0x23c>)
 8002fdc:	f002 fc30 	bl	8005840 <xprintf_init>


    HAL_UART_Init(&huart2);
 8002fe0:	4855      	ldr	r0, [pc, #340]	; (8003138 <main+0x240>)
 8002fe2:	f008 fb07 	bl	800b5f4 <HAL_UART_Init>
    HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_Ether,Rxbufsize_from_Ether);
 8002fe6:	220e      	movs	r2, #14
 8002fe8:	4954      	ldr	r1, [pc, #336]	; (800313c <main+0x244>)
 8002fea:	4853      	ldr	r0, [pc, #332]	; (8003138 <main+0x240>)
 8002fec:	f008 fbe8 	bl	800b7c0 <HAL_UART_Receive_DMA>


    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense,1);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	4953      	ldr	r1, [pc, #332]	; (8003140 <main+0x248>)
 8002ff4:	4853      	ldr	r0, [pc, #332]	; (8003144 <main+0x24c>)
 8002ff6:	f003 f8e3 	bl	80061c0 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense,1);
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4952      	ldr	r1, [pc, #328]	; (8003148 <main+0x250>)
 8002ffe:	4853      	ldr	r0, [pc, #332]	; (800314c <main+0x254>)
 8003000:	f003 f8de 	bl	80061c0 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata,1);
 8003004:	2201      	movs	r2, #1
 8003006:	4952      	ldr	r1, [pc, #328]	; (8003150 <main+0x258>)
 8003008:	4852      	ldr	r0, [pc, #328]	; (8003154 <main+0x25c>)
 800300a:	f003 f8d9 	bl	80061c0 <HAL_ADC_Start_DMA>
    	//if(HAL_GetTick()>1000){
    	//	Error_Handler();
    	//}
   // }

    actuator_power_ONOFF(0);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fe f90c 	bl	800122c <actuator_power_ONOFF>
    HAL_Delay(20);
 8003014:	2014      	movs	r0, #20
 8003016:	f002 fccd 	bl	80059b4 <HAL_Delay>


    actuator_motor1(0.0,0.0);
 800301a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8003158 <main+0x260>
 800301e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8003158 <main+0x260>
 8003022:	f7fd ffdb 	bl	8000fdc <actuator_motor1>
    actuator_motor2(0.0,0.0);
 8003026:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8003158 <main+0x260>
 800302a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8003158 <main+0x260>
 800302e:	f7fe f805 	bl	800103c <actuator_motor2>
    actuator_motor3(0.0,0.0);
 8003032:	eddf 0a49 	vldr	s1, [pc, #292]	; 8003158 <main+0x260>
 8003036:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003158 <main+0x260>
 800303a:	f7fe f82f 	bl	800109c <actuator_motor3>
    actuator_motor4(0.0,0.0);
 800303e:	eddf 0a46 	vldr	s1, [pc, #280]	; 8003158 <main+0x260>
 8003042:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8003158 <main+0x260>
 8003046:	f7fe f859 	bl	80010fc <actuator_motor4>
    actuator_motor5(0.0,0.0);
 800304a:	eddf 0a43 	vldr	s1, [pc, #268]	; 8003158 <main+0x260>
 800304e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003158 <main+0x260>
 8003052:	f7fe f883 	bl	800115c <actuator_motor5>

    actuator_kicker(1, 1);
 8003056:	2101      	movs	r1, #1
 8003058:	2001      	movs	r0, #1
 800305a:	f7fe f8d0 	bl	80011fe <actuator_kicker>
    actuator_kicker_voltage(250.0);
 800305e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800315c <main+0x264>
 8003062:	f7fe f8ab 	bl	80011bc <actuator_kicker_voltage>
    actuator_power_param(1,15.0);//min voltage
 8003066:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800306a:	2001      	movs	r0, #1
 800306c:	f7fe f8f1 	bl	8001252 <actuator_power_param>
    actuator_power_param(2,35.0);//max voltage
 8003070:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8003160 <main+0x268>
 8003074:	2002      	movs	r0, #2
 8003076:	f7fe f8ec 	bl	8001252 <actuator_power_param>
    actuator_power_param(3,50.0);//max current
 800307a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8003164 <main+0x26c>
 800307e:	2003      	movs	r0, #3
 8003080:	f7fe f8e7 	bl	8001252 <actuator_power_param>
    actuator_power_param(4,90.0);//max temp(fet)
 8003084:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003168 <main+0x270>
 8003088:	2004      	movs	r0, #4
 800308a:	f7fe f8e2 	bl	8001252 <actuator_power_param>
    actuator_power_param(5,90.0);//max temp(solenoid)
 800308e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8003168 <main+0x270>
 8003092:	2005      	movs	r0, #5
 8003094:	f7fe f8dd 	bl	8001252 <actuator_power_param>


    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8003098:	2201      	movs	r2, #1
 800309a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800309e:	4833      	ldr	r0, [pc, #204]	; (800316c <main+0x274>)
 80030a0:	f005 fc3c 	bl	800891c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80030a4:	2201      	movs	r2, #1
 80030a6:	2101      	movs	r1, #1
 80030a8:	4830      	ldr	r0, [pc, #192]	; (800316c <main+0x274>)
 80030aa:	f005 fc37 	bl	800891c <HAL_GPIO_WritePin>
    ICM20602_init();
 80030ae:	f7fe ffa1 	bl	8001ff4 <ICM20602_init>
    ICM20602_IMU_calibration2();
 80030b2:	f7ff fbb9 	bl	8002828 <ICM20602_IMU_calibration2>
    ICM20602_clearAngle();
 80030b6:	f7ff fa1f 	bl	80024f8 <ICM20602_clearAngle>


    uint8_t senddata_calib[8];
    can1_send(0x340, senddata_calib);
 80030ba:	463b      	mov	r3, r7
 80030bc:	4619      	mov	r1, r3
 80030be:	f44f 7050 	mov.w	r0, #832	; 0x340
 80030c2:	f7fe fbf7 	bl	80018b4 <can1_send>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030cc:	4827      	ldr	r0, [pc, #156]	; (800316c <main+0x274>)
 80030ce:	f005 fc25 	bl	800891c <HAL_GPIO_WritePin>
    actuator_power_ONOFF(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7fe f8aa 	bl	800122c <actuator_power_ONOFF>


    for(int i=0;i<3;i++){
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	e006      	b.n	80030ec <main+0x1f4>
    	actuator_buzzer(40, 40);
 80030de:	2128      	movs	r1, #40	; 0x28
 80030e0:	2028      	movs	r0, #40	; 0x28
 80030e2:	f7fe f8d9 	bl	8001298 <actuator_buzzer>
    for(int i=0;i<3;i++){
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	ddf5      	ble.n	80030de <main+0x1e6>
    }

    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <main+0x278>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	72da      	strb	r2, [r3, #11]
    HAL_Delay(500);
 80030f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030fc:	f002 fc5a 	bl	80059b4 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim7);
 8003100:	481c      	ldr	r0, [pc, #112]	; (8003174 <main+0x27c>)
 8003102:	f007 f905 	bl	800a310 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003106:	e7fe      	b.n	8003106 <main+0x20e>
 8003108:	20000711 	.word	0x20000711
 800310c:	20000712 	.word	0x20000712
 8003110:	20000713 	.word	0x20000713
 8003114:	20000714 	.word	0x20000714
 8003118:	20000715 	.word	0x20000715
 800311c:	20000716 	.word	0x20000716
 8003120:	200007d0 	.word	0x200007d0
 8003124:	20000014 	.word	0x20000014
 8003128:	0800fda4 	.word	0x0800fda4
 800312c:	20000468 	.word	0x20000468
 8003130:	200004cc 	.word	0x200004cc
 8003134:	20000868 	.word	0x20000868
 8003138:	200008f8 	.word	0x200008f8
 800313c:	200005ac 	.word	0x200005ac
 8003140:	20000650 	.word	0x20000650
 8003144:	20000200 	.word	0x20000200
 8003148:	2000064c 	.word	0x2000064c
 800314c:	2000026c 	.word	0x2000026c
 8003150:	20000654 	.word	0x20000654
 8003154:	200002d8 	.word	0x200002d8
 8003158:	00000000 	.word	0x00000000
 800315c:	437a0000 	.word	0x437a0000
 8003160:	420c0000 	.word	0x420c0000
 8003164:	42480000 	.word	0x42480000
 8003168:	42b40000 	.word	0x42b40000
 800316c:	48000800 	.word	0x48000800
 8003170:	20000630 	.word	0x20000630
 8003174:	2000081c 	.word	0x2000081c

08003178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b094      	sub	sp, #80	; 0x50
 800317c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317e:	f107 0318 	add.w	r3, r7, #24
 8003182:	2238      	movs	r2, #56	; 0x38
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f009 ff2e 	bl	800cfe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800319a:	2000      	movs	r0, #0
 800319c:	f005 fc08 	bl	80089b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031aa:	2302      	movs	r3, #2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ae:	2303      	movs	r3, #3
 80031b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80031b2:	2302      	movs	r3, #2
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80031b6:	2355      	movs	r3, #85	; 0x55
 80031b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ba:	2302      	movs	r3, #2
 80031bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031be:	2302      	movs	r3, #2
 80031c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031c2:	2302      	movs	r3, #2
 80031c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c6:	f107 0318 	add.w	r3, r7, #24
 80031ca:	4618      	mov	r0, r3
 80031cc:	f005 fca4 	bl	8008b18 <HAL_RCC_OscConfig>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <SystemClock_Config+0x62>
  {
    Error_Handler();
 80031d6:	f001 fc81 	bl	8004adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031da:	230f      	movs	r3, #15
 80031dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031de:	2303      	movs	r3, #3
 80031e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2104      	movs	r1, #4
 80031f2:	4618      	mov	r0, r3
 80031f4:	f005 ffa8 	bl	8009148 <HAL_RCC_ClockConfig>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80031fe:	f001 fc6d 	bl	8004adc <Error_Handler>
  }
}
 8003202:	bf00      	nop
 8003204:	3750      	adds	r7, #80	; 0x50
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003210:	b091      	sub	sp, #68	; 0x44
 8003212:	af0a      	add	r7, sp, #40	; 0x28
 8003214:	60f8      	str	r0, [r7, #12]
	 ICM20602_read_IMU_data();
 8003216:	f7ff f833 	bl	8002280 <ICM20602_read_IMU_data>
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 800321a:	2120      	movs	r1, #32
 800321c:	48c7      	ldr	r0, [pc, #796]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x330>)
 800321e:	f005 fb65 	bl	80088ec <HAL_GPIO_ReadPin>
 8003222:	4603      	mov	r3, r0
 8003224:	461c      	mov	r4, r3
 8003226:	2140      	movs	r1, #64	; 0x40
 8003228:	48c4      	ldr	r0, [pc, #784]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x330>)
 800322a:	f005 fb5f 	bl	80088ec <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4423      	add	r3, r4
 8003236:	b2dc      	uxtb	r4, r3
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 8003238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800323c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003240:	f005 fb54 	bl	80088ec <HAL_GPIO_ReadPin>
 8003244:	4603      	mov	r3, r0
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4423      	add	r3, r4
 800324c:	b2dc      	uxtb	r4, r3
 800324e:	2104      	movs	r1, #4
 8003250:	48bb      	ldr	r0, [pc, #748]	; (8003540 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003252:	f005 fb4b 	bl	80088ec <HAL_GPIO_ReadPin>
 8003256:	4603      	mov	r3, r0
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4423      	add	r3, r4
 800325e:	b2db      	uxtb	r3, r3
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 8003260:	f1c3 030f 	rsb	r3, r3, #15
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4bb7      	ldr	r3, [pc, #732]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003268:	701a      	strb	r2, [r3, #0]

	 switch (sw_mode){
 800326a:	4bb6      	ldr	r3, [pc, #728]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b06      	cmp	r3, #6
 8003270:	f200 81b8 	bhi.w	80035e4 <HAL_TIM_PeriodElapsedCallback+0x3d8>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	08003299 	.word	0x08003299
 8003280:	080032ad 	.word	0x080032ad
 8003284:	080032c1 	.word	0x080032c1
 8003288:	0800331f 	.word	0x0800331f
 800328c:	0800345b 	.word	0x0800345b
 8003290:	080034b7 	.word	0x080034b7
 8003294:	08003561 	.word	0x08003561
	 	 case 0:  //main without debug
	 		if(Ether_connect==1){
 8003298:	4bab      	ldr	r3, [pc, #684]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_TIM_PeriodElapsedCallback+0x9a>
	 			//yawAngle=yawAngle*0.995+theta_vision*0.005;
	 			maintask_run();
 80032a0:	f000 fe62 	bl	8003f68 <maintask_run>
	 		}
	 		else{
	 			//yawAngle=yawAngle*0.995+theta_vision*0.005;
	 			maintask_state_stop();
	 		}
	 		break;
 80032a4:	e1a1      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>
	 			maintask_state_stop();
 80032a6:	f001 f8b5 	bl	8004414 <maintask_state_stop>
	 		break;
 80032aa:	e19e      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>

	 	 case 1:  //main debug
	 		if(Ether_connect==1){
 80032ac:	4ba6      	ldr	r3, [pc, #664]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_TIM_PeriodElapsedCallback+0xae>
	 			//yawAngle=yawAngle*0.995+theta_vision*0.005;
	 			maintask_run();
 80032b4:	f000 fe58 	bl	8003f68 <maintask_run>
	 		else{
	 			//yawAngle=yawAngle*0.995+theta_vision*0.005;
	 			//maintask_run();
	 			maintask_state_stop();
	 		}
	 		break;
 80032b8:	e197      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>
	 			maintask_state_stop();
 80032ba:	f001 f8ab 	bl	8004414 <maintask_state_stop>
	 		break;
 80032be:	e194      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>

	 	 case 2:  //calibration motor
			if(decode_SW(SWdata[0])&0b00010000){
 80032c0:	4ba2      	ldr	r3, [pc, #648]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fa57 	bl	8004778 <decode_SW>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <HAL_TIM_PeriodElapsedCallback+0xe4>
				 uint8_t senddata_calib[8];
				 can2_send(0x310,senddata_calib);//calibration
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	4619      	mov	r1, r3
 80032da:	f44f 7044 	mov.w	r0, #784	; 0x310
 80032de:	f7fe fb49 	bl	8001974 <can2_send>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80032e2:	2201      	movs	r2, #1
 80032e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032e8:	4899      	ldr	r0, [pc, #612]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80032ea:	f005 fb17 	bl	800891c <HAL_GPIO_WritePin>
			else{
				omni_move(0.0, 0.0, 0.0,0.0);
				actuator_motor5(0.0,0.0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
			}
			break;
 80032ee:	e17c      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>
				omni_move(0.0, 0.0, 0.0,0.0);
 80032f0:	eddf 1a98 	vldr	s3, [pc, #608]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80032f4:	ed9f 1a97 	vldr	s2, [pc, #604]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80032f8:	eddf 0a96 	vldr	s1, [pc, #600]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80032fc:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003300:	f001 fc42 	bl	8004b88 <omni_move>
				actuator_motor5(0.0,0.0);
 8003304:	eddf 0a93 	vldr	s1, [pc, #588]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003308:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 800330c:	f7fd ff26 	bl	800115c <actuator_motor5>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003316:	488e      	ldr	r0, [pc, #568]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003318:	f005 fb00 	bl	800891c <HAL_GPIO_WritePin>
			break;
 800331c:	e165      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>

	 	 case 3:  //motor test
			if(decode_SW(SWdata[0])&0b00000001){
 800331e:	4b8b      	ldr	r3, [pc, #556]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f001 fa28 	bl	8004778 <decode_SW>
 8003328:	4603      	mov	r3, r0
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_TIM_PeriodElapsedCallback+0x148>
				 omni_move(1.0, 0.0, 0.0,1.0);//fwd
 8003332:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003336:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 800333a:	eddf 0a86 	vldr	s1, [pc, #536]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 800333e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003342:	f001 fc21 	bl	8004b88 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003346:	2201      	movs	r2, #1
 8003348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800334c:	4880      	ldr	r0, [pc, #512]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800334e:	f005 fae5 	bl	800891c <HAL_GPIO_WritePin>
 8003352:	e07b      	b.n	800344c <HAL_TIM_PeriodElapsedCallback+0x240>
			 }
			else if(decode_SW(SWdata[0])&0b00000010){
 8003354:	4b7d      	ldr	r3, [pc, #500]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f001 fa0d 	bl	8004778 <decode_SW>
 800335e:	4603      	mov	r3, r0
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <HAL_TIM_PeriodElapsedCallback+0x17e>
				 omni_move(-1.0, 0.0, 0.0,1.0);//back
 8003368:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800336c:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003370:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003374:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003378:	f001 fc06 	bl	8004b88 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800337c:	2201      	movs	r2, #1
 800337e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003382:	4873      	ldr	r0, [pc, #460]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003384:	f005 faca 	bl	800891c <HAL_GPIO_WritePin>
 8003388:	e060      	b.n	800344c <HAL_TIM_PeriodElapsedCallback+0x240>
			 }
			else if(decode_SW(SWdata[0])&0b00000100){
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f001 f9f2 	bl	8004778 <decode_SW>
 8003394:	4603      	mov	r3, r0
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				 omni_move(0.0, -1.0, 0.0,1.0);//left
 800339e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80033a2:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80033a6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80033aa:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80033ae:	f001 fbeb 	bl	8004b88 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80033b2:	2201      	movs	r2, #1
 80033b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033b8:	4865      	ldr	r0, [pc, #404]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80033ba:	f005 faaf 	bl	800891c <HAL_GPIO_WritePin>
 80033be:	e045      	b.n	800344c <HAL_TIM_PeriodElapsedCallback+0x240>
			 }
			else if(decode_SW(SWdata[0])&0b00001000){
 80033c0:	4b62      	ldr	r3, [pc, #392]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 f9d7 	bl	8004778 <decode_SW>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_TIM_PeriodElapsedCallback+0x1ea>
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 80033d4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80033d8:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80033dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80033e0:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80033e4:	f001 fbd0 	bl	8004b88 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80033e8:	2201      	movs	r2, #1
 80033ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ee:	4858      	ldr	r0, [pc, #352]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80033f0:	f005 fa94 	bl	800891c <HAL_GPIO_WritePin>
 80033f4:	e02a      	b.n	800344c <HAL_TIM_PeriodElapsedCallback+0x240>
			 }
			else if(decode_SW(SWdata[0])&0b00010000){
 80033f6:	4b55      	ldr	r3, [pc, #340]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 f9bc 	bl	8004778 <decode_SW>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_TIM_PeriodElapsedCallback+0x220>
				 omni_move(0.0, 0.0, 7.0,1.0);//spin
 800340a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800340e:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003412:	eddf 0a50 	vldr	s1, [pc, #320]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003416:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 800341a:	f001 fbb5 	bl	8004b88 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800341e:	2201      	movs	r2, #1
 8003420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003424:	484a      	ldr	r0, [pc, #296]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003426:	f005 fa79 	bl	800891c <HAL_GPIO_WritePin>
 800342a:	e00f      	b.n	800344c <HAL_TIM_PeriodElapsedCallback+0x240>
			 }
			else{
				omni_move(0.0, 0.0, 0.0,0.0);
 800342c:	eddf 1a49 	vldr	s3, [pc, #292]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003430:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003434:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003438:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 800343c:	f001 fba4 	bl	8004b88 <omni_move>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003446:	4842      	ldr	r0, [pc, #264]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003448:	f005 fa68 	bl	800891c <HAL_GPIO_WritePin>
			}
			actuator_motor5(0.0,0.0);
 800344c:	eddf 0a41 	vldr	s1, [pc, #260]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003450:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003454:	f7fd fe82 	bl	800115c <actuator_motor5>
			break;
 8003458:	e0c7      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>

	 	 case 4://drible test
	 		 if(decode_SW(SWdata[0])&0b00010000){
 800345a:	4b3c      	ldr	r3, [pc, #240]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f98a 	bl	8004778 <decode_SW>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_TIM_PeriodElapsedCallback+0x27c>
	 			actuator_motor5(0.5,1.0);
 800346e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003472:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003476:	f7fd fe71 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800347a:	2201      	movs	r2, #1
 800347c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003480:	4833      	ldr	r0, [pc, #204]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003482:	f005 fa4b 	bl	800891c <HAL_GPIO_WritePin>
 8003486:	e00b      	b.n	80034a0 <HAL_TIM_PeriodElapsedCallback+0x294>
			 }
			 else{
				actuator_motor5(0.0,0.0);
 8003488:	eddf 0a32 	vldr	s1, [pc, #200]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 800348c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003490:	f7fd fe64 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800349a:	482d      	ldr	r0, [pc, #180]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800349c:	f005 fa3e 	bl	800891c <HAL_GPIO_WritePin>
			 }
				omni_move(0.0, 0.0, 0.0,0.0);
 80034a0:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80034a4:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80034a8:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80034ac:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80034b0:	f001 fb6a 	bl	8004b88 <omni_move>
	 		 break;
 80034b4:	e099      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>

	 	 case 5:
	 		 if(decode_SW(SWdata[0])&0b00010000){
 80034b6:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x340>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f95c 	bl	8004778 <decode_SW>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d014      	beq.n	80034f4 <HAL_TIM_PeriodElapsedCallback+0x2e8>
		 		actuator_motor5(0.5,1.0);
 80034ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80034ce:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80034d2:	f7fd fe43 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80034d6:	2201      	movs	r2, #1
 80034d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034dc:	481c      	ldr	r0, [pc, #112]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80034de:	f005 fa1d 	bl	800891c <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d11c      	bne.n	8003524 <HAL_TIM_PeriodElapsedCallback+0x318>
	 				actuator_kicker(3, 100);
 80034ea:	2164      	movs	r1, #100	; 0x64
 80034ec:	2003      	movs	r0, #3
 80034ee:	f7fd fe86 	bl	80011fe <actuator_kicker>
 80034f2:	e017      	b.n	8003524 <HAL_TIM_PeriodElapsedCallback+0x318>
	 			}
	 		 }
	 		 else{
				 actuator_motor5(0.0,0.0);
 80034f4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80034f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 80034fc:	f7fd fe2e 	bl	800115c <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003506:	4812      	ldr	r0, [pc, #72]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003508:	f005 fa08 	bl	800891c <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 800350c:	2101      	movs	r1, #1
 800350e:	2001      	movs	r0, #1
 8003510:	f7fd fe75 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker(2, 0);
 8003514:	2100      	movs	r1, #0
 8003516:	2002      	movs	r0, #2
 8003518:	f7fd fe71 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker_voltage(250.0);
 800351c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800355c <HAL_TIM_PeriodElapsedCallback+0x350>
 8003520:	f7fd fe4c 	bl	80011bc <actuator_kicker_voltage>
	 		 }
				omni_move(0.0, 0.0, 0.0,0.0);
 8003524:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003528:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 800352c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003530:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003554 <HAL_TIM_PeriodElapsedCallback+0x348>
 8003534:	f001 fb28 	bl	8004b88 <omni_move>
	 		break;
 8003538:	e057      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>
 800353a:	bf00      	nop
 800353c:	48000400 	.word	0x48000400
 8003540:	48000c00 	.word	0x48000c00
 8003544:	200005ce 	.word	0x200005ce
 8003548:	200005c9 	.word	0x200005c9
 800354c:	20000654 	.word	0x20000654
 8003550:	48000800 	.word	0x48000800
 8003554:	00000000 	.word	0x00000000
 8003558:	200006f0 	.word	0x200006f0
 800355c:	437a0000 	.word	0x437a0000

	 	 case 6:
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003560:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f907 	bl	8004778 <decode_SW>
 800356a:	4603      	mov	r3, r0
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d014      	beq.n	800359e <HAL_TIM_PeriodElapsedCallback+0x392>
	 			actuator_motor5(0.5,1.0);
 8003574:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003578:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800357c:	f7fd fdee 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003580:	2201      	movs	r2, #1
 8003582:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003586:	4889      	ldr	r0, [pc, #548]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003588:	f005 f9c8 	bl	800891c <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 800358c:	4b88      	ldr	r3, [pc, #544]	; (80037b0 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d11c      	bne.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x3c2>
	 				actuator_kicker(3, 100);
 8003594:	2164      	movs	r1, #100	; 0x64
 8003596:	2003      	movs	r0, #3
 8003598:	f7fd fe31 	bl	80011fe <actuator_kicker>
 800359c:	e017      	b.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x3c2>
	 			}
	 		 }
	 		 else{
	 			 actuator_motor5(0.0,0.0);
 800359e:	eddf 0a85 	vldr	s1, [pc, #532]	; 80037b4 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80035a2:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80037b4 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80035a6:	f7fd fdd9 	bl	800115c <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80035aa:	2200      	movs	r2, #0
 80035ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035b0:	487e      	ldr	r0, [pc, #504]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80035b2:	f005 f9b3 	bl	800891c <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 80035b6:	2101      	movs	r1, #1
 80035b8:	2001      	movs	r0, #1
 80035ba:	f7fd fe20 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker(2, 1);
 80035be:	2101      	movs	r1, #1
 80035c0:	2002      	movs	r0, #2
 80035c2:	f7fd fe1c 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker_voltage(0.0);
 80035c6:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80037b4 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80035ca:	f7fd fdf7 	bl	80011bc <actuator_kicker_voltage>
	 		 }
				omni_move(0.0, 0.0, 0.0,0.0);
 80035ce:	eddf 1a79 	vldr	s3, [pc, #484]	; 80037b4 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80035d2:	ed9f 1a78 	vldr	s2, [pc, #480]	; 80037b4 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80035d6:	eddf 0a77 	vldr	s1, [pc, #476]	; 80037b4 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80035da:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80037b4 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80035de:	f001 fad3 	bl	8004b88 <omni_move>
	 		break;
 80035e2:	e002      	b.n	80035ea <HAL_TIM_PeriodElapsedCallback+0x3de>

	 	 default:
	 		maintask_stop();
 80035e4:	f000 ff58 	bl	8004498 <maintask_stop>
	 		 break;
 80035e8:	bf00      	nop
	}

	 if(cnt_time_tim>200){
 80035ea:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	2bc8      	cmp	r3, #200	; 0xc8
 80035f0:	d91f      	bls.n	8003632 <HAL_TIM_PeriodElapsedCallback+0x426>
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 80035f2:	4b72      	ldr	r3, [pc, #456]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80035f4:	7ada      	ldrb	r2, [r3, #11]
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d009      	beq.n	8003612 <HAL_TIM_PeriodElapsedCallback+0x406>
		 Ether_connect=1;
 80035fe:	4b71      	ldr	r3, [pc, #452]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,1);
 8003604:	2201      	movs	r2, #1
 8003606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800360a:	4868      	ldr	r0, [pc, #416]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800360c:	f005 f986 	bl	800891c <HAL_GPIO_WritePin>
 8003610:	e008      	b.n	8003624 <HAL_TIM_PeriodElapsedCallback+0x418>
	 }
	 else{
		 Ether_connect=0;
 8003612:	4b6c      	ldr	r3, [pc, #432]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,0);
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800361e:	4863      	ldr	r0, [pc, #396]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003620:	f005 f97c 	bl	800891c <HAL_GPIO_WritePin>
	 }
	 Ether_connect_check=data_from_ether[Rxbufsize_from_Ether-3];
 8003624:	4b65      	ldr	r3, [pc, #404]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003626:	7ada      	ldrb	r2, [r3, #11]
 8003628:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 800362a:	701a      	strb	r2, [r3, #0]
	 cnt_time_tim=0;
 800362c:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800362e:	2200      	movs	r2, #0
 8003630:	801a      	strh	r2, [r3, #0]

	 }

	 if(cnt_time_50Hz>20){
 8003632:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	2b14      	cmp	r3, #20
 8003638:	f240 80a5 	bls.w	8003786 <HAL_TIM_PeriodElapsedCallback+0x57a>
       if(sw_mode>0){
 800363c:	4b63      	ldr	r3, [pc, #396]	; (80037cc <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8095 	beq.w	8003770 <HAL_TIM_PeriodElapsedCallback+0x564>
		 //printf("data: acc0=%f,acc1=%f,acc2=%f,gyro0=%f,gyro1=%f,gyro2=%f,tmp=%f",acc[0],acc[1],acc[2],gyro[0],gyro[1],gyro[2],IMU_tmp);
		 //printf(" pich=%f roll=%f yaw=%f",pitchAngle,rollAngle,yawAngle);
    	 printf(" yaw=%f",yawAngle);
 8003646:	4b62      	ldr	r3, [pc, #392]	; (80037d0 <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ffa4 	bl	8000598 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	485f      	ldr	r0, [pc, #380]	; (80037d4 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8003656:	f00a f939 	bl	800d8cc <iprintf>
		 //printf(" motor0=%.3f motor1=%.3f motor2=%.3f motor3=%.3f",motor_feedback[0],motor_feedback[1],motor_feedback[2],motor_feedback[3]);
		 //printf(" v0=%.3f v1=%.3f v2=%.3f v3=%.3f",voltage[0],voltage[1],voltage[2],voltage[3]);
		 //printf(" t0=%.3f t1=%.3f t2=%.3f t3=%.3f",tempercher[0],tempercher[1],tempercher[2],tempercher[3]);
		 printf(" A=%.3f",power_amp);
 800365a:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc ff9a 	bl	8000598 <__aeabi_f2d>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	485c      	ldr	r0, [pc, #368]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800366a:	f00a f92f 	bl	800d8cc <iprintf>
		 //printf(" ball=%d",ball[0]);
		 //printf(" yaw=%f",yawAngle/180.0*M_PI);
		 printf(" connect=%d vel_surge=%.4f vel_sway=%.4f ",Ether_connect,vel_surge,vel_sway);
 800366e:	4b55      	ldr	r3, [pc, #340]	; (80037c4 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	461e      	mov	r6, r3
 8003674:	4b5a      	ldr	r3, [pc, #360]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff8d 	bl	8000598 <__aeabi_f2d>
 800367e:	4604      	mov	r4, r0
 8003680:	460d      	mov	r5, r1
 8003682:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff86 	bl	8000598 <__aeabi_f2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	e9cd 2300 	strd	r2, r3, [sp]
 8003694:	4622      	mov	r2, r4
 8003696:	462b      	mov	r3, r5
 8003698:	4631      	mov	r1, r6
 800369a:	4853      	ldr	r0, [pc, #332]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800369c:	f00a f916 	bl	800d8cc <iprintf>
		 printf(" theta_vision=%.4f theta_consai=%.4f drible_power=%.4f",theta_vision,theta_target,drible_power);
 80036a0:	4b52      	ldr	r3, [pc, #328]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff77 	bl	8000598 <__aeabi_f2d>
 80036aa:	4680      	mov	r8, r0
 80036ac:	4689      	mov	r9, r1
 80036ae:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc ff70 	bl	8000598 <__aeabi_f2d>
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc ff69 	bl	8000598 <__aeabi_f2d>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036ce:	e9cd 4500 	strd	r4, r5, [sp]
 80036d2:	4642      	mov	r2, r8
 80036d4:	464b      	mov	r3, r9
 80036d6:	4848      	ldr	r0, [pc, #288]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80036d8:	f00a f8f8 	bl	800d8cc <iprintf>
    	 // printf(" v_charge=%.3f",voltage[5]);
		 //printf(" kick_power=%.4f chip=%d",kick_power,chipEN);
		 //printf(" m1=%.5f m2=%.5f m3=%.5f m4=%.5f", m1,m2,m3,m4);
		  printf(" sw=%d sw=%d",sw_mode,decode_SW(SWdata[0]));
 80036dc:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461c      	mov	r4, r3
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 f846 	bl	8004778 <decode_SW>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	4621      	mov	r1, r4
 80036f2:	4842      	ldr	r0, [pc, #264]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80036f4:	f00a f8ea 	bl	800d8cc <iprintf>
		 //printf(" connect=%d",Ether_connect);
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 80036f8:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	469c      	mov	ip, r3
 80036fe:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	469e      	mov	lr, r3
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003706:	789b      	ldrb	r3, [r3, #2]
 8003708:	4698      	mov	r8, r3
		 	data_from_ether[3],data_from_ether[4], data_from_ether[5],data_from_ether[6],data_from_ether[7],
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800370c:	78db      	ldrb	r3, [r3, #3]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 800370e:	461a      	mov	r2, r3
		 	data_from_ether[3],data_from_ether[4], data_from_ether[5],data_from_ether[6],data_from_ether[7],
 8003710:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003712:	791b      	ldrb	r3, [r3, #4]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 8003714:	4619      	mov	r1, r3
		 	data_from_ether[3],data_from_ether[4], data_from_ether[5],data_from_ether[6],data_from_ether[7],
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003718:	795b      	ldrb	r3, [r3, #5]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 800371a:	4618      	mov	r0, r3
		 	data_from_ether[3],data_from_ether[4], data_from_ether[5],data_from_ether[6],data_from_ether[7],
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800371e:	799b      	ldrb	r3, [r3, #6]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 8003720:	461c      	mov	r4, r3
		 	data_from_ether[3],data_from_ether[4], data_from_ether[5],data_from_ether[6],data_from_ether[7],
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003724:	79db      	ldrb	r3, [r3, #7]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 8003726:	461d      	mov	r5, r3
		 	data_from_ether[8] ,data_from_ether[9],data_from_ether[10],data_from_ether[11],data_from_ether[12]);
 8003728:	4b24      	ldr	r3, [pc, #144]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800372a:	7a1b      	ldrb	r3, [r3, #8]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 800372c:	461e      	mov	r6, r3
		 	data_from_ether[8] ,data_from_ether[9],data_from_ether[10],data_from_ether[11],data_from_ether[12]);
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003730:	7a5b      	ldrb	r3, [r3, #9]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 8003732:	60bb      	str	r3, [r7, #8]
		 	data_from_ether[8] ,data_from_ether[9],data_from_ether[10],data_from_ether[11],data_from_ether[12]);
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003736:	7a9b      	ldrb	r3, [r3, #10]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 8003738:	607b      	str	r3, [r7, #4]
		 	data_from_ether[8] ,data_from_ether[9],data_from_ether[10],data_from_ether[11],data_from_ether[12]);
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800373c:	7adb      	ldrb	r3, [r3, #11]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 800373e:	603b      	str	r3, [r7, #0]
		 	data_from_ether[8] ,data_from_ether[9],data_from_ether[10],data_from_ether[11],data_from_ether[12]);
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8003742:	7b1b      	ldrb	r3, [r3, #12]
		   printf(" AI=%x %x %x %x %x %x %x %x %x %x %x %x %x",data_from_ether[0],data_from_ether[1],data_from_ether[2],
 8003744:	9309      	str	r3, [sp, #36]	; 0x24
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	9308      	str	r3, [sp, #32]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	9307      	str	r3, [sp, #28]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	9306      	str	r3, [sp, #24]
 8003752:	9605      	str	r6, [sp, #20]
 8003754:	9504      	str	r5, [sp, #16]
 8003756:	9403      	str	r4, [sp, #12]
 8003758:	9002      	str	r0, [sp, #8]
 800375a:	9101      	str	r1, [sp, #4]
 800375c:	9200      	str	r2, [sp, #0]
 800375e:	4643      	mov	r3, r8
 8003760:	4672      	mov	r2, lr
 8003762:	4661      	mov	r1, ip
 8003764:	4826      	ldr	r0, [pc, #152]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8003766:	f00a f8b1 	bl	800d8cc <iprintf>
	     //		,Rxbuf_from_Ether[13],Rxbuf_from_Ether[14]);

		// printf(" C=%d V=%d SW=%d",Csense[0],Vsense[0],SWdata[0]);
		 //printf(" A=%f",amplitude[4]);
		 //printf(" ball:0=%d 1=%d 2=%d 3=%d",ball[0],ball[1],ball[2],ball[3]);
		 printf("\r\n");
 800376a:	4826      	ldr	r0, [pc, #152]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800376c:	f00a f934 	bl	800d9d8 <puts>
	 }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003774:	4824      	ldr	r0, [pc, #144]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003776:	f005 f8e9 	bl	800894c <HAL_GPIO_TogglePin>
		  cnt_time_50Hz=0;
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800377c:	2200      	movs	r2, #0
 800377e:	801a      	strh	r2, [r3, #0]

		  actuator_power_ONOFF(1);
 8003780:	2001      	movs	r0, #1
 8003782:	f7fd fd53 	bl	800122c <actuator_power_ONOFF>
	 }
	 cnt_time_50Hz++;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8003790:	801a      	strh	r2, [r3, #0]
	 cnt_time_tim++;
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800379c:	801a      	strh	r2, [r3, #0]

}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037a8:	20000654 	.word	0x20000654
 80037ac:	48000800 	.word	0x48000800
 80037b0:	200006f0 	.word	0x200006f0
 80037b4:	00000000 	.word	0x00000000
 80037b8:	200005cc 	.word	0x200005cc
 80037bc:	20000630 	.word	0x20000630
 80037c0:	200005ca 	.word	0x200005ca
 80037c4:	200005c9 	.word	0x200005c9
 80037c8:	200005d4 	.word	0x200005d4
 80037cc:	200005ce 	.word	0x200005ce
 80037d0:	200005e0 	.word	0x200005e0
 80037d4:	0800fdac 	.word	0x0800fdac
 80037d8:	200006cc 	.word	0x200006cc
 80037dc:	0800fdb4 	.word	0x0800fdb4
 80037e0:	200006d0 	.word	0x200006d0
 80037e4:	200006d4 	.word	0x200006d4
 80037e8:	0800fdbc 	.word	0x0800fdbc
 80037ec:	200006e4 	.word	0x200006e4
 80037f0:	200006e8 	.word	0x200006e8
 80037f4:	200006dc 	.word	0x200006dc
 80037f8:	0800fde8 	.word	0x0800fde8
 80037fc:	0800fe20 	.word	0x0800fe20
 8003800:	0800fe30 	.word	0x0800fe30
 8003804:	0800fe5c 	.word	0x0800fe5c
 8003808:	48000400 	.word	0x48000400

0800380c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	80fb      	strh	r3, [r7, #6]
	if(HAL_GetTick()>2000){
 8003816:	f7ff fb63 	bl	8002ee0 <HAL_GetTick>
 800381a:	4603      	mov	r3, r0
 800381c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003820:	d934      	bls.n	800388c <HAL_GPIO_EXTI_Callback+0x80>
		uint8_t cnt=0;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
		while(cnt<100){
 8003826:	e00d      	b.n	8003844 <HAL_GPIO_EXTI_Callback+0x38>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 8003828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800382c:	4819      	ldr	r0, [pc, #100]	; (8003894 <HAL_GPIO_EXTI_Callback+0x88>)
 800382e:	f005 f85d 	bl	80088ec <HAL_GPIO_ReadPin>
 8003832:	4603      	mov	r3, r0
 8003834:	2b01      	cmp	r3, #1
 8003836:	d109      	bne.n	800384c <HAL_GPIO_EXTI_Callback+0x40>
				cnt++;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	3301      	adds	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
				delayUs(1);
 800383e:	2001      	movs	r0, #1
 8003840:	f001 f98a 	bl	8004b58 <delayUs>
		while(cnt<100){
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b63      	cmp	r3, #99	; 0x63
 8003848:	d9ee      	bls.n	8003828 <HAL_GPIO_EXTI_Callback+0x1c>
 800384a:	e000      	b.n	800384e <HAL_GPIO_EXTI_Callback+0x42>
			}
			else{
				break;
 800384c:	bf00      	nop
			}
		}

		if(cnt>=100){
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b63      	cmp	r3, #99	; 0x63
 8003852:	d918      	bls.n	8003886 <HAL_GPIO_EXTI_Callback+0x7a>
			Emargency=1;
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 800385a:	4810      	ldr	r0, [pc, #64]	; (800389c <HAL_GPIO_EXTI_Callback+0x90>)
 800385c:	f00a f836 	bl	800d8cc <iprintf>
			for(int i=0;i<50;i++){
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	e004      	b.n	8003870 <HAL_GPIO_EXTI_Callback+0x64>
				maintask_emargency();
 8003866:	f000 fd6b 	bl	8004340 <maintask_emargency>
			for(int i=0;i<50;i++){
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b31      	cmp	r3, #49	; 0x31
 8003874:	ddf7      	ble.n	8003866 <HAL_GPIO_EXTI_Callback+0x5a>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8003876:	2200      	movs	r2, #0
 8003878:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800387c:	4805      	ldr	r0, [pc, #20]	; (8003894 <HAL_GPIO_EXTI_Callback+0x88>)
 800387e:	f005 f84d 	bl	800891c <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8003882:	f7ff fb05 	bl	8002e90 <__NVIC_SystemReset>
			Emargency=0;
		}
		else{
			Emargency=0;
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	48000400 	.word	0x48000400
 8003898:	20000656 	.word	0x20000656
 800389c:	0800fe60 	.word	0x0800fe60

080038a0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
   if (hfdcan->Instance == hfdcan1.Instance) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4bac      	ldr	r3, [pc, #688]	; (8003b60 <HAL_FDCAN_RxFifo0Callback+0x2c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	f040 8174 	bne.w	8003ba0 <HAL_FDCAN_RxFifo0Callback+0x300>
	   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 833a 	beq.w	8003f38 <HAL_FDCAN_RxFifo0Callback+0x698>
	   	  {
   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80038c4:	4ba7      	ldr	r3, [pc, #668]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 80038c6:	4aa8      	ldr	r2, [pc, #672]	; (8003b68 <HAL_FDCAN_RxFifo0Callback+0x2c8>)
 80038c8:	2140      	movs	r1, #64	; 0x40
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f004 fa30 	bl	8007d30 <HAL_FDCAN_GetRxMessage>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_FDCAN_RxFifo0Callback+0x3a>
    {
    Error_Handler();
 80038d6:	f001 f901 	bl	8004adc <Error_Handler>
    }
	switch (RxHeader.Identifier){
 80038da:	4ba3      	ldr	r3, [pc, #652]	; (8003b68 <HAL_FDCAN_RxFifo0Callback+0x2c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f240 4201 	movw	r2, #1025	; 0x401
 80038e2:	4293      	cmp	r3, r2
 80038e4:	f000 80f8 	beq.w	8003ad8 <HAL_FDCAN_RxFifo0Callback+0x238>
 80038e8:	f240 4201 	movw	r2, #1025	; 0x401
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f200 832a 	bhi.w	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d874      	bhi.n	80039e0 <HAL_FDCAN_RxFifo0Callback+0x140>
 80038f6:	e063      	b.n	80039c0 <HAL_FDCAN_RxFifo0Callback+0x120>
 80038f8:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80038fc:	2b2d      	cmp	r3, #45	; 0x2d
 80038fe:	f200 8322 	bhi.w	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	08003a47 	.word	0x08003a47
 800390c:	08003a59 	.word	0x08003a59
 8003910:	08003f47 	.word	0x08003f47
 8003914:	08003f47 	.word	0x08003f47
 8003918:	08003f47 	.word	0x08003f47
 800391c:	08003f47 	.word	0x08003f47
 8003920:	08003f47 	.word	0x08003f47
 8003924:	08003f47 	.word	0x08003f47
 8003928:	08003f47 	.word	0x08003f47
 800392c:	08003f47 	.word	0x08003f47
 8003930:	08003f47 	.word	0x08003f47
 8003934:	08003f47 	.word	0x08003f47
 8003938:	08003f47 	.word	0x08003f47
 800393c:	08003f47 	.word	0x08003f47
 8003940:	08003f47 	.word	0x08003f47
 8003944:	08003f47 	.word	0x08003f47
 8003948:	08003a6b 	.word	0x08003a6b
 800394c:	08003a7d 	.word	0x08003a7d
 8003950:	08003f47 	.word	0x08003f47
 8003954:	08003f47 	.word	0x08003f47
 8003958:	08003f47 	.word	0x08003f47
 800395c:	08003f47 	.word	0x08003f47
 8003960:	08003f47 	.word	0x08003f47
 8003964:	08003f47 	.word	0x08003f47
 8003968:	08003f47 	.word	0x08003f47
 800396c:	08003f47 	.word	0x08003f47
 8003970:	08003f47 	.word	0x08003f47
 8003974:	08003f47 	.word	0x08003f47
 8003978:	08003f47 	.word	0x08003f47
 800397c:	08003f47 	.word	0x08003f47
 8003980:	08003f47 	.word	0x08003f47
 8003984:	08003f47 	.word	0x08003f47
 8003988:	08003a8f 	.word	0x08003a8f
 800398c:	08003f47 	.word	0x08003f47
 8003990:	08003f47 	.word	0x08003f47
 8003994:	08003f47 	.word	0x08003f47
 8003998:	08003f47 	.word	0x08003f47
 800399c:	08003f47 	.word	0x08003f47
 80039a0:	08003f47 	.word	0x08003f47
 80039a4:	08003f47 	.word	0x08003f47
 80039a8:	08003f47 	.word	0x08003f47
 80039ac:	08003f47 	.word	0x08003f47
 80039b0:	08003f47 	.word	0x08003f47
 80039b4:	08003f47 	.word	0x08003f47
 80039b8:	08003a1f 	.word	0x08003a1f
 80039bc:	08003aa7 	.word	0x08003aa7
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	f200 82c0 	bhi.w	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 80039c6:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <HAL_FDCAN_RxFifo0Callback+0x12c>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039f3 	.word	0x080039f3
 80039d0:	08003a09 	.word	0x08003a09
 80039d4:	08003f3d 	.word	0x08003f3d
 80039d8:	08003f3d 	.word	0x08003f3d
 80039dc:	08003f3d 	.word	0x08003f3d
 80039e0:	f240 2241 	movw	r2, #577	; 0x241
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f200 82ae 	bhi.w	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 80039ea:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 80039ee:	d283      	bcs.n	80038f8 <HAL_FDCAN_RxFifo0Callback+0x58>

	  }
	}
   }

}
 80039f0:	e2a9      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		error_No[0]=RxData[0];
 80039f2:	4b5c      	ldr	r3, [pc, #368]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 80039f8:	701a      	strb	r2, [r3, #0]
		error_No[1]=RxData[1];
 80039fa:	4b5a      	ldr	r3, [pc, #360]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 80039fc:	785a      	ldrb	r2, [r3, #1]
 80039fe:	4b5b      	ldr	r3, [pc, #364]	; (8003b6c <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8003a00:	705a      	strb	r2, [r3, #1]
		Error_Handler();
 8003a02:	f001 f86b 	bl	8004adc <Error_Handler>
		break;
 8003a06:	e29e      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		error_No[0]=RxData[0];
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	4b57      	ldr	r3, [pc, #348]	; (8003b6c <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8003a0e:	701a      	strb	r2, [r3, #0]
		error_No[1]=RxData[1];
 8003a10:	4b54      	ldr	r3, [pc, #336]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a12:	785a      	ldrb	r2, [r3, #1]
 8003a14:	4b55      	ldr	r3, [pc, #340]	; (8003b6c <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 8003a16:	705a      	strb	r2, [r3, #1]
		maintask_stop();
 8003a18:	f000 fd3e 	bl	8004498 <maintask_stop>
		break;
 8003a1c:	e293      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		ball[0]=RxData[0];
 8003a1e:	4b51      	ldr	r3, [pc, #324]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8003a24:	701a      	strb	r2, [r3, #0]
		ball[1]=RxData[1];
 8003a26:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a28:	785a      	ldrb	r2, [r3, #1]
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8003a2c:	705a      	strb	r2, [r3, #1]
		ball[2]=RxData[2];
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a30:	789a      	ldrb	r2, [r3, #2]
 8003a32:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8003a34:	709a      	strb	r2, [r3, #2]
		ball[3]=RxData[3];
 8003a36:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a38:	78da      	ldrb	r2, [r3, #3]
 8003a3a:	4b4d      	ldr	r3, [pc, #308]	; (8003b70 <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8003a3c:	70da      	strb	r2, [r3, #3]
		check_FC=1;
 8003a3e:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
		break;
 8003a44:	e27f      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		voltage[4]=uchar4_to_float(RxData);
 8003a46:	4847      	ldr	r0, [pc, #284]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a48:	f001 fec2 	bl	80057d0 <uchar4_to_float>
 8003a4c:	eef0 7a40 	vmov.f32	s15, s0
 8003a50:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003a52:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8003a56:	e276      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		voltage[5]=uchar4_to_float(RxData);
 8003a58:	4842      	ldr	r0, [pc, #264]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a5a:	f001 feb9 	bl	80057d0 <uchar4_to_float>
 8003a5e:	eef0 7a40 	vmov.f32	s15, s0
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003a64:	edc3 7a05 	vstr	s15, [r3, #20]
		break;
 8003a68:	e26d      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		tempercher[4]=uchar4_to_float(RxData);
 8003a6a:	483e      	ldr	r0, [pc, #248]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a6c:	f001 feb0 	bl	80057d0 <uchar4_to_float>
 8003a70:	eef0 7a40 	vmov.f32	s15, s0
 8003a74:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003a76:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8003a7a:	e264      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		tempercher[5]=uchar4_to_float(RxData);
 8003a7c:	4839      	ldr	r0, [pc, #228]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a7e:	f001 fea7 	bl	80057d0 <uchar4_to_float>
 8003a82:	eef0 7a40 	vmov.f32	s15, s0
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003a88:	edc3 7a05 	vstr	s15, [r3, #20]
		break;
 8003a8c:	e25b      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		amplitude[4]=uchar4_to_float(RxData);
 8003a8e:	4835      	ldr	r0, [pc, #212]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003a90:	f001 fe9e 	bl	80057d0 <uchar4_to_float>
 8003a94:	eef0 7a40 	vmov.f32	s15, s0
 8003a98:	4b39      	ldr	r3, [pc, #228]	; (8003b80 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003a9a:	edc3 7a04 	vstr	s15, [r3, #16]
		check_power=1;
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <HAL_FDCAN_RxFifo0Callback+0x2e4>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
		break;
 8003aa4:	e24f      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		mouse[0]=(RxData[0]<<8)|RxData[1];
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	b21a      	sxth	r2, r3
 8003aae:	4b2d      	ldr	r3, [pc, #180]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	b21b      	sxth	r3, r3
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	4b33      	ldr	r3, [pc, #204]	; (8003b88 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8003abc:	801a      	strh	r2, [r3, #0]
		mouse[1]=(RxData[2]<<8)|RxData[3];
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003ac0:	789b      	ldrb	r3, [r3, #2]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	b21a      	sxth	r2, r3
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003ac8:	78db      	ldrb	r3, [r3, #3]
 8003aca:	b21b      	sxth	r3, r3
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b21b      	sxth	r3, r3
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8003ad4:	805a      	strh	r2, [r3, #2]
		break;
 8003ad6:	e236      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		data_from_ether[8]=RxData[0];
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003ade:	721a      	strb	r2, [r3, #8]
		data_from_ether[9]=RxData[1];
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003ae2:	785a      	ldrb	r2, [r3, #1]
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003ae6:	725a      	strb	r2, [r3, #9]
		data_from_ether[10]=RxData[2];
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003aea:	789a      	ldrb	r2, [r3, #2]
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003aee:	729a      	strb	r2, [r3, #10]
		data_from_ether[11]=RxData[3];
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003af2:	78da      	ldrb	r2, [r3, #3]
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003af6:	72da      	strb	r2, [r3, #11]
		data_from_ether[12]=RxData[4];
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 8003afa:	791a      	ldrb	r2, [r3, #4]
 8003afc:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003afe:	731a      	strb	r2, [r3, #12]
		if(data_from_ether[8]>100){
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003b02:	7a1b      	ldrb	r3, [r3, #8]
 8003b04:	2b64      	cmp	r3, #100	; 0x64
 8003b06:	d909      	bls.n	8003b1c <HAL_FDCAN_RxFifo0Callback+0x27c>
			chipEN=1;
 8003b08:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
			data_from_ether[8]=data_from_ether[8]-100;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003b10:	7a1b      	ldrb	r3, [r3, #8]
 8003b12:	3b64      	subs	r3, #100	; 0x64
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003b18:	721a      	strb	r2, [r3, #8]
 8003b1a:	e002      	b.n	8003b22 <HAL_FDCAN_RxFifo0Callback+0x282>
			chipEN=0;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
		kick_power=(float32_t)data_from_ether[8]/20.0;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003b24:	7a1b      	ldrb	r3, [r3, #8]
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b2e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b36:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 8003b38:	edc3 7a00 	vstr	s15, [r3]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003b3e:	7a5b      	ldrb	r3, [r3, #9]
 8003b40:	ee07 3a90 	vmov	s15, r3
 8003b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b48:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003b52:	edc3 7a00 	vstr	s15, [r3]
		keeper_EN=data_from_ether[10];
 8003b56:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003b58:	7a9a      	ldrb	r2, [r3, #10]
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_FDCAN_RxFifo0Callback+0x2fc>)
 8003b5c:	701a      	strb	r2, [r3, #0]
	break;
 8003b5e:	e1f2      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 8003b60:	20000468 	.word	0x20000468
 8003b64:	20000658 	.word	0x20000658
 8003b68:	2000073c 	.word	0x2000073c
 8003b6c:	200006f8 	.word	0x200006f8
 8003b70:	200006f0 	.word	0x200006f0
 8003b74:	20000716 	.word	0x20000716
 8003b78:	20000688 	.word	0x20000688
 8003b7c:	200006a0 	.word	0x200006a0
 8003b80:	200006b8 	.word	0x200006b8
 8003b84:	20000715 	.word	0x20000715
 8003b88:	200006f4 	.word	0x200006f4
 8003b8c:	20000630 	.word	0x20000630
 8003b90:	200006ec 	.word	0x200006ec
 8003b94:	200006e0 	.word	0x200006e0
 8003b98:	200006dc 	.word	0x200006dc
 8003b9c:	20000710 	.word	0x20000710
  else if (hfdcan->Instance == hfdcan2.Instance) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4bc7      	ldr	r3, [pc, #796]	; (8003ec4 <HAL_FDCAN_RxFifo0Callback+0x624>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	f040 81c9 	bne.w	8003f40 <HAL_FDCAN_RxFifo0Callback+0x6a0>
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 81c3 	beq.w	8003f40 <HAL_FDCAN_RxFifo0Callback+0x6a0>
	  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8003bba:	4bc3      	ldr	r3, [pc, #780]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003bbc:	4ac3      	ldr	r2, [pc, #780]	; (8003ecc <HAL_FDCAN_RxFifo0Callback+0x62c>)
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f004 f8b5 	bl	8007d30 <HAL_FDCAN_GetRxMessage>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_FDCAN_RxFifo0Callback+0x330>
		Error_Handler();
 8003bcc:	f000 ff86 	bl	8004adc <Error_Handler>
	  switch (RxHeader.Identifier){
 8003bd0:	4bbe      	ldr	r3, [pc, #760]	; (8003ecc <HAL_FDCAN_RxFifo0Callback+0x62c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	f200 8081 	bhi.w	8003cdc <HAL_FDCAN_RxFifo0Callback+0x43c>
 8003bda:	e06f      	b.n	8003cbc <HAL_FDCAN_RxFifo0Callback+0x41c>
 8003bdc:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003be0:	2b33      	cmp	r3, #51	; 0x33
 8003be2:	f200 81b0 	bhi.w	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <HAL_FDCAN_RxFifo0Callback+0x34c>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003d3b 	.word	0x08003d3b
 8003bf0:	08003d61 	.word	0x08003d61
 8003bf4:	08003d87 	.word	0x08003d87
 8003bf8:	08003dad 	.word	0x08003dad
 8003bfc:	08003dd3 	.word	0x08003dd3
 8003c00:	08003f47 	.word	0x08003f47
 8003c04:	08003f47 	.word	0x08003f47
 8003c08:	08003f47 	.word	0x08003f47
 8003c0c:	08003f47 	.word	0x08003f47
 8003c10:	08003f47 	.word	0x08003f47
 8003c14:	08003f47 	.word	0x08003f47
 8003c18:	08003f47 	.word	0x08003f47
 8003c1c:	08003f47 	.word	0x08003f47
 8003c20:	08003f47 	.word	0x08003f47
 8003c24:	08003f47 	.word	0x08003f47
 8003c28:	08003f47 	.word	0x08003f47
 8003c2c:	08003df9 	.word	0x08003df9
 8003c30:	08003e0b 	.word	0x08003e0b
 8003c34:	08003e1d 	.word	0x08003e1d
 8003c38:	08003e2f 	.word	0x08003e2f
 8003c3c:	08003e41 	.word	0x08003e41
 8003c40:	08003e53 	.word	0x08003e53
 8003c44:	08003f47 	.word	0x08003f47
 8003c48:	08003f47 	.word	0x08003f47
 8003c4c:	08003f47 	.word	0x08003f47
 8003c50:	08003f47 	.word	0x08003f47
 8003c54:	08003f47 	.word	0x08003f47
 8003c58:	08003f47 	.word	0x08003f47
 8003c5c:	08003f47 	.word	0x08003f47
 8003c60:	08003f47 	.word	0x08003f47
 8003c64:	08003f47 	.word	0x08003f47
 8003c68:	08003f47 	.word	0x08003f47
 8003c6c:	08003e65 	.word	0x08003e65
 8003c70:	08003e77 	.word	0x08003e77
 8003c74:	08003e89 	.word	0x08003e89
 8003c78:	08003e9b 	.word	0x08003e9b
 8003c7c:	08003f47 	.word	0x08003f47
 8003c80:	08003f47 	.word	0x08003f47
 8003c84:	08003f47 	.word	0x08003f47
 8003c88:	08003f47 	.word	0x08003f47
 8003c8c:	08003f47 	.word	0x08003f47
 8003c90:	08003f47 	.word	0x08003f47
 8003c94:	08003f47 	.word	0x08003f47
 8003c98:	08003f47 	.word	0x08003f47
 8003c9c:	08003f47 	.word	0x08003f47
 8003ca0:	08003f47 	.word	0x08003f47
 8003ca4:	08003f47 	.word	0x08003f47
 8003ca8:	08003f47 	.word	0x08003f47
 8003cac:	08003ead 	.word	0x08003ead
 8003cb0:	08003ef1 	.word	0x08003ef1
 8003cb4:	08003f09 	.word	0x08003f09
 8003cb8:	08003f21 	.word	0x08003f21
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	f200 8142 	bhi.w	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_FDCAN_RxFifo0Callback+0x428>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003cef 	.word	0x08003cef
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003f45 	.word	0x08003f45
 8003cd4:	08003f45 	.word	0x08003f45
 8003cd8:	08003f45 	.word	0x08003f45
 8003cdc:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 8003ce0:	f080 8131 	bcs.w	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 8003ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce8:	f4bf af78 	bcs.w	8003bdc <HAL_FDCAN_RxFifo0Callback+0x33c>
}
 8003cec:	e12b      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  error_No[0]=RxData[0];
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b77      	ldr	r3, [pc, #476]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003cf4:	701a      	strb	r2, [r3, #0]
		  error_No[1]=RxData[1];
 8003cf6:	4b74      	ldr	r3, [pc, #464]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003cf8:	785a      	ldrb	r2, [r3, #1]
 8003cfa:	4b75      	ldr	r3, [pc, #468]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003cfc:	705a      	strb	r2, [r3, #1]
		  error_No[2]=RxData[2];
 8003cfe:	4b72      	ldr	r3, [pc, #456]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d00:	789a      	ldrb	r2, [r3, #2]
 8003d02:	4b73      	ldr	r3, [pc, #460]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003d04:	709a      	strb	r2, [r3, #2]
		  error_No[3]=RxData[3];
 8003d06:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d08:	78da      	ldrb	r2, [r3, #3]
 8003d0a:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003d0c:	70da      	strb	r2, [r3, #3]
		  Error_Handler();
 8003d0e:	f000 fee5 	bl	8004adc <Error_Handler>
		  break;
 8003d12:	e118      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  error_No[0]=RxData[0];
 8003d14:	4b6c      	ldr	r3, [pc, #432]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	4b6d      	ldr	r3, [pc, #436]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003d1a:	701a      	strb	r2, [r3, #0]
		  error_No[1]=RxData[1];
 8003d1c:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d1e:	785a      	ldrb	r2, [r3, #1]
 8003d20:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003d22:	705a      	strb	r2, [r3, #1]
		  error_No[2]=RxData[2];
 8003d24:	4b68      	ldr	r3, [pc, #416]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d26:	789a      	ldrb	r2, [r3, #2]
 8003d28:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003d2a:	709a      	strb	r2, [r3, #2]
		  error_No[3]=RxData[3];
 8003d2c:	4b66      	ldr	r3, [pc, #408]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d2e:	78da      	ldrb	r2, [r3, #3]
 8003d30:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <HAL_FDCAN_RxFifo0Callback+0x630>)
 8003d32:	70da      	strb	r2, [r3, #3]
		  maintask_stop();
 8003d34:	f000 fbb0 	bl	8004498 <maintask_stop>
		  break;
 8003d38:	e105      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  motor_feedback[0]=uchar4_to_float(RxData);
 8003d3a:	4863      	ldr	r0, [pc, #396]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d3c:	f001 fd48 	bl	80057d0 <uchar4_to_float>
 8003d40:	eef0 7a40 	vmov.f32	s15, s0
 8003d44:	4b63      	ldr	r3, [pc, #396]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003d46:	edc3 7a00 	vstr	s15, [r3]
		  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8003d4a:	4b62      	ldr	r3, [pc, #392]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003d4c:	edd3 7a00 	vldr	s15, [r3]
 8003d50:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003ed8 <HAL_FDCAN_RxFifo0Callback+0x638>
 8003d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d58:	4b60      	ldr	r3, [pc, #384]	; (8003edc <HAL_FDCAN_RxFifo0Callback+0x63c>)
 8003d5a:	edc3 7a00 	vstr	s15, [r3]
		  break;
 8003d5e:	e0f2      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  motor_feedback[1]=uchar4_to_float(RxData);
 8003d60:	4859      	ldr	r0, [pc, #356]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d62:	f001 fd35 	bl	80057d0 <uchar4_to_float>
 8003d66:	eef0 7a40 	vmov.f32	s15, s0
 8003d6a:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003d6c:	edc3 7a01 	vstr	s15, [r3, #4]
		  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8003d70:	4b58      	ldr	r3, [pc, #352]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003d72:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d76:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003ed8 <HAL_FDCAN_RxFifo0Callback+0x638>
 8003d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d7e:	4b57      	ldr	r3, [pc, #348]	; (8003edc <HAL_FDCAN_RxFifo0Callback+0x63c>)
 8003d80:	edc3 7a01 	vstr	s15, [r3, #4]
		  break;
 8003d84:	e0df      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  motor_feedback[2]=uchar4_to_float(RxData);
 8003d86:	4850      	ldr	r0, [pc, #320]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003d88:	f001 fd22 	bl	80057d0 <uchar4_to_float>
 8003d8c:	eef0 7a40 	vmov.f32	s15, s0
 8003d90:	4b50      	ldr	r3, [pc, #320]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003d92:	edc3 7a02 	vstr	s15, [r3, #8]
		  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8003d96:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003d98:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d9c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003ed8 <HAL_FDCAN_RxFifo0Callback+0x638>
 8003da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da4:	4b4d      	ldr	r3, [pc, #308]	; (8003edc <HAL_FDCAN_RxFifo0Callback+0x63c>)
 8003da6:	edc3 7a02 	vstr	s15, [r3, #8]
		  break;
 8003daa:	e0cc      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  motor_feedback[3]=uchar4_to_float(RxData);
 8003dac:	4846      	ldr	r0, [pc, #280]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003dae:	f001 fd0f 	bl	80057d0 <uchar4_to_float>
 8003db2:	eef0 7a40 	vmov.f32	s15, s0
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003db8:	edc3 7a03 	vstr	s15, [r3, #12]
		  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8003dbc:	4b45      	ldr	r3, [pc, #276]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003dbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003dc2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003ed8 <HAL_FDCAN_RxFifo0Callback+0x638>
 8003dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dca:	4b44      	ldr	r3, [pc, #272]	; (8003edc <HAL_FDCAN_RxFifo0Callback+0x63c>)
 8003dcc:	edc3 7a03 	vstr	s15, [r3, #12]
		  break;
 8003dd0:	e0b9      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  motor_feedback[4]=uchar4_to_float(RxData);
 8003dd2:	483d      	ldr	r0, [pc, #244]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003dd4:	f001 fcfc 	bl	80057d0 <uchar4_to_float>
 8003dd8:	eef0 7a40 	vmov.f32	s15, s0
 8003ddc:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003dde:	edc3 7a04 	vstr	s15, [r3, #16]
		  motor_feedback_velocity[4]=motor_feedback[3]*rotation_longth;
 8003de2:	4b3c      	ldr	r3, [pc, #240]	; (8003ed4 <HAL_FDCAN_RxFifo0Callback+0x634>)
 8003de4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003de8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003ed8 <HAL_FDCAN_RxFifo0Callback+0x638>
 8003dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df0:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <HAL_FDCAN_RxFifo0Callback+0x63c>)
 8003df2:	edc3 7a04 	vstr	s15, [r3, #16]
		  break;
 8003df6:	e0a6      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  voltage[0]=uchar4_to_float(RxData);
 8003df8:	4833      	ldr	r0, [pc, #204]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003dfa:	f001 fce9 	bl	80057d0 <uchar4_to_float>
 8003dfe:	eef0 7a40 	vmov.f32	s15, s0
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <HAL_FDCAN_RxFifo0Callback+0x640>)
 8003e04:	edc3 7a00 	vstr	s15, [r3]
		  break;
 8003e08:	e09d      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  voltage[1]=uchar4_to_float(RxData);
 8003e0a:	482f      	ldr	r0, [pc, #188]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e0c:	f001 fce0 	bl	80057d0 <uchar4_to_float>
 8003e10:	eef0 7a40 	vmov.f32	s15, s0
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_FDCAN_RxFifo0Callback+0x640>)
 8003e16:	edc3 7a01 	vstr	s15, [r3, #4]
		  break;
 8003e1a:	e094      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  voltage[2]=uchar4_to_float(RxData);
 8003e1c:	482a      	ldr	r0, [pc, #168]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e1e:	f001 fcd7 	bl	80057d0 <uchar4_to_float>
 8003e22:	eef0 7a40 	vmov.f32	s15, s0
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <HAL_FDCAN_RxFifo0Callback+0x640>)
 8003e28:	edc3 7a02 	vstr	s15, [r3, #8]
		  break;
 8003e2c:	e08b      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  voltage[3]=uchar4_to_float(RxData);
 8003e2e:	4826      	ldr	r0, [pc, #152]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e30:	f001 fcce 	bl	80057d0 <uchar4_to_float>
 8003e34:	eef0 7a40 	vmov.f32	s15, s0
 8003e38:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <HAL_FDCAN_RxFifo0Callback+0x640>)
 8003e3a:	edc3 7a03 	vstr	s15, [r3, #12]
		  break;
 8003e3e:	e082      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  voltage[4]=uchar4_to_float(RxData);
 8003e40:	4821      	ldr	r0, [pc, #132]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e42:	f001 fcc5 	bl	80057d0 <uchar4_to_float>
 8003e46:	eef0 7a40 	vmov.f32	s15, s0
 8003e4a:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_FDCAN_RxFifo0Callback+0x640>)
 8003e4c:	edc3 7a04 	vstr	s15, [r3, #16]
		  break;
 8003e50:	e079      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  voltage[5]=uchar4_to_float(RxData);
 8003e52:	481d      	ldr	r0, [pc, #116]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e54:	f001 fcbc 	bl	80057d0 <uchar4_to_float>
 8003e58:	eef0 7a40 	vmov.f32	s15, s0
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_FDCAN_RxFifo0Callback+0x640>)
 8003e5e:	edc3 7a05 	vstr	s15, [r3, #20]
		  break;
 8003e62:	e070      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  tempercher[0]=uchar4_to_float(RxData);
 8003e64:	4818      	ldr	r0, [pc, #96]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e66:	f001 fcb3 	bl	80057d0 <uchar4_to_float>
 8003e6a:	eef0 7a40 	vmov.f32	s15, s0
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_FDCAN_RxFifo0Callback+0x644>)
 8003e70:	edc3 7a00 	vstr	s15, [r3]
		  break;
 8003e74:	e067      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  tempercher[1]=uchar4_to_float(RxData);
 8003e76:	4814      	ldr	r0, [pc, #80]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e78:	f001 fcaa 	bl	80057d0 <uchar4_to_float>
 8003e7c:	eef0 7a40 	vmov.f32	s15, s0
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_FDCAN_RxFifo0Callback+0x644>)
 8003e82:	edc3 7a01 	vstr	s15, [r3, #4]
		  break;
 8003e86:	e05e      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  tempercher[2]=uchar4_to_float(RxData);
 8003e88:	480f      	ldr	r0, [pc, #60]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e8a:	f001 fca1 	bl	80057d0 <uchar4_to_float>
 8003e8e:	eef0 7a40 	vmov.f32	s15, s0
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_FDCAN_RxFifo0Callback+0x644>)
 8003e94:	edc3 7a02 	vstr	s15, [r3, #8]
		  break;
 8003e98:	e055      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  tempercher[3]=uchar4_to_float(RxData);
 8003e9a:	480b      	ldr	r0, [pc, #44]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003e9c:	f001 fc98 	bl	80057d0 <uchar4_to_float>
 8003ea0:	eef0 7a40 	vmov.f32	s15, s0
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_FDCAN_RxFifo0Callback+0x644>)
 8003ea6:	edc3 7a03 	vstr	s15, [r3, #12]
		  break;
 8003eaa:	e04c      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  amplitude[0]=uchar4_to_float(RxData);
 8003eac:	4806      	ldr	r0, [pc, #24]	; (8003ec8 <HAL_FDCAN_RxFifo0Callback+0x628>)
 8003eae:	f001 fc8f 	bl	80057d0 <uchar4_to_float>
 8003eb2:	eef0 7a40 	vmov.f32	s15, s0
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <HAL_FDCAN_RxFifo0Callback+0x648>)
 8003eb8:	edc3 7a00 	vstr	s15, [r3]
		  check_motor1=1;
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_FDCAN_RxFifo0Callback+0x64c>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
		  break;
 8003ec2:	e040      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
 8003ec4:	200004cc 	.word	0x200004cc
 8003ec8:	20000658 	.word	0x20000658
 8003ecc:	2000073c 	.word	0x2000073c
 8003ed0:	200006f8 	.word	0x200006f8
 8003ed4:	20000660 	.word	0x20000660
 8003ed8:	3e3426c8 	.word	0x3e3426c8
 8003edc:	20000674 	.word	0x20000674
 8003ee0:	20000688 	.word	0x20000688
 8003ee4:	200006a0 	.word	0x200006a0
 8003ee8:	200006b8 	.word	0x200006b8
 8003eec:	20000711 	.word	0x20000711
		  amplitude[1]=uchar4_to_float(RxData);
 8003ef0:	4817      	ldr	r0, [pc, #92]	; (8003f50 <HAL_FDCAN_RxFifo0Callback+0x6b0>)
 8003ef2:	f001 fc6d 	bl	80057d0 <uchar4_to_float>
 8003ef6:	eef0 7a40 	vmov.f32	s15, s0
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <HAL_FDCAN_RxFifo0Callback+0x6b4>)
 8003efc:	edc3 7a01 	vstr	s15, [r3, #4]
		  check_motor2=1;
 8003f00:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x6b8>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
		  break;
 8003f06:	e01e      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  amplitude[2]=uchar4_to_float(RxData);
 8003f08:	4811      	ldr	r0, [pc, #68]	; (8003f50 <HAL_FDCAN_RxFifo0Callback+0x6b0>)
 8003f0a:	f001 fc61 	bl	80057d0 <uchar4_to_float>
 8003f0e:	eef0 7a40 	vmov.f32	s15, s0
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_FDCAN_RxFifo0Callback+0x6b4>)
 8003f14:	edc3 7a02 	vstr	s15, [r3, #8]
		  check_motor3=1;
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_FDCAN_RxFifo0Callback+0x6bc>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
		  break;
 8003f1e:	e012      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  amplitude[3]=uchar4_to_float(RxData);
 8003f20:	480b      	ldr	r0, [pc, #44]	; (8003f50 <HAL_FDCAN_RxFifo0Callback+0x6b0>)
 8003f22:	f001 fc55 	bl	80057d0 <uchar4_to_float>
 8003f26:	eef0 7a40 	vmov.f32	s15, s0
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_FDCAN_RxFifo0Callback+0x6b4>)
 8003f2c:	edc3 7a03 	vstr	s15, [r3, #12]
		  check_motor4=1;
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_FDCAN_RxFifo0Callback+0x6c0>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
		  break;
 8003f36:	e006      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
	}
 8003f38:	bf00      	nop
 8003f3a:	e004      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		break;
 8003f3c:	bf00      	nop
 8003f3e:	e002      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
	}
 8003f40:	bf00      	nop
 8003f42:	e000      	b.n	8003f46 <HAL_FDCAN_RxFifo0Callback+0x6a6>
		  break;
 8003f44:	bf00      	nop
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000658 	.word	0x20000658
 8003f54:	200006b8 	.word	0x200006b8
 8003f58:	20000712 	.word	0x20000712
 8003f5c:	20000713 	.word	0x20000713
 8003f60:	20000714 	.word	0x20000714
 8003f64:	00000000 	.word	0x00000000

08003f68 <maintask_run>:


void maintask_run(){
 8003f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6a:	ed2d 8b02 	vpush	{d8}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
	//theta_target=0.0;
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*18.0)
 8003f72:	4bb1      	ldr	r3, [pc, #708]	; (8004238 <maintask_run+0x2d0>)
 8003f74:	ed93 8a00 	vldr	s16, [r3]
 8003f78:	4bb0      	ldr	r3, [pc, #704]	; (800423c <maintask_run+0x2d4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fb0b 	bl	8000598 <__aeabi_f2d>
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	4bae      	ldr	r3, [pc, #696]	; (8004240 <maintask_run+0x2d8>)
 8003f88:	f7fc fc88 	bl	800089c <__aeabi_ddiv>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	a39c      	add	r3, pc, #624	; (adr r3, 8004208 <maintask_run+0x2a0>)
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	f7fc fb55 	bl	8000648 <__aeabi_dmul>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7fc fe47 	bl	8000c38 <__aeabi_d2f>
 8003faa:	4603      	mov	r3, r0
 8003fac:	ee00 3a90 	vmov	s1, r3
 8003fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8003fb4:	f000 fb68 	bl	8004688 <getAngleDiff>
 8003fb8:	ee10 3a10 	vmov	r3, s0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc faeb 	bl	8000598 <__aeabi_f2d>
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	4b9f      	ldr	r3, [pc, #636]	; (8004244 <maintask_run+0x2dc>)
 8003fc8:	f7fc fb3e 	bl	8000648 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	461d      	mov	r5, r3
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*4.5*57.29);
 8003fd4:	4b99      	ldr	r3, [pc, #612]	; (800423c <maintask_run+0x2d4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fc fadd 	bl	8000598 <__aeabi_f2d>
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	4b97      	ldr	r3, [pc, #604]	; (8004240 <maintask_run+0x2d8>)
 8003fe4:	f7fc fc5a 	bl	800089c <__aeabi_ddiv>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	a385      	add	r3, pc, #532	; (adr r3, 8004208 <maintask_run+0x2a0>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc fb27 	bl	8000648 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	f7fc fe19 	bl	8000c38 <__aeabi_d2f>
 8004006:	4606      	mov	r6, r0
 8004008:	4b8f      	ldr	r3, [pc, #572]	; (8004248 <maintask_run+0x2e0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc fac3 	bl	8000598 <__aeabi_f2d>
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	4b8a      	ldr	r3, [pc, #552]	; (8004240 <maintask_run+0x2d8>)
 8004018:	f7fc fc40 	bl	800089c <__aeabi_ddiv>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	a378      	add	r3, pc, #480	; (adr r3, 8004208 <maintask_run+0x2a0>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	f7fc fb0d 	bl	8000648 <__aeabi_dmul>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	f7fc fdff 	bl	8000c38 <__aeabi_d2f>
 800403a:	4603      	mov	r3, r0
 800403c:	ee00 3a90 	vmov	s1, r3
 8004040:	ee00 6a10 	vmov	s0, r6
 8004044:	f000 fb20 	bl	8004688 <getAngleDiff>
 8004048:	ee10 3a10 	vmov	r3, s0
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc faa3 	bl	8000598 <__aeabi_f2d>
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	4b7d      	ldr	r3, [pc, #500]	; (800424c <maintask_run+0x2e4>)
 8004058:	f7fc faf6 	bl	8000648 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	a36a      	add	r3, pc, #424	; (adr r3, 8004210 <maintask_run+0x2a8>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc faed 	bl	8000648 <__aeabi_dmul>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4620      	mov	r0, r4
 8004074:	4629      	mov	r1, r5
 8004076:	f7fc f92f 	bl	80002d8 <__aeabi_dsub>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	f7fc fdd9 	bl	8000c38 <__aeabi_d2f>
 8004086:	4603      	mov	r3, r0
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*18.0)
 8004088:	4a71      	ldr	r2, [pc, #452]	; (8004250 <maintask_run+0x2e8>)
 800408a:	6013      	str	r3, [r2, #0]

	if(omega>6*M_PI){omega=6*M_PI;}
 800408c:	4b70      	ldr	r3, [pc, #448]	; (8004250 <maintask_run+0x2e8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc fa81 	bl	8000598 <__aeabi_f2d>
 8004096:	a360      	add	r3, pc, #384	; (adr r3, 8004218 <maintask_run+0x2b0>)
 8004098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409c:	f7fc fd64 	bl	8000b68 <__aeabi_dcmpgt>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <maintask_run+0x144>
 80040a6:	4b6a      	ldr	r3, [pc, #424]	; (8004250 <maintask_run+0x2e8>)
 80040a8:	4a6a      	ldr	r2, [pc, #424]	; (8004254 <maintask_run+0x2ec>)
 80040aa:	601a      	str	r2, [r3, #0]
	if(omega<-6*M_PI){omega=-6*M_PI;}
 80040ac:	4b68      	ldr	r3, [pc, #416]	; (8004250 <maintask_run+0x2e8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc fa71 	bl	8000598 <__aeabi_f2d>
 80040b6:	a35a      	add	r3, pc, #360	; (adr r3, 8004220 <maintask_run+0x2b8>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f7fc fd36 	bl	8000b2c <__aeabi_dcmplt>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <maintask_run+0x164>
 80040c6:	4b62      	ldr	r3, [pc, #392]	; (8004250 <maintask_run+0x2e8>)
 80040c8:	4a63      	ldr	r2, [pc, #396]	; (8004258 <maintask_run+0x2f0>)
 80040ca:	601a      	str	r2, [r3, #0]

	omni_move(vel_surge, vel_sway, omega,1.0);
 80040cc:	4b63      	ldr	r3, [pc, #396]	; (800425c <maintask_run+0x2f4>)
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <maintask_run+0x2f8>)
 80040d4:	ed93 7a00 	vldr	s14, [r3]
 80040d8:	4b5d      	ldr	r3, [pc, #372]	; (8004250 <maintask_run+0x2e8>)
 80040da:	edd3 6a00 	vldr	s13, [r3]
 80040de:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80040e2:	eeb0 1a66 	vmov.f32	s2, s13
 80040e6:	eef0 0a47 	vmov.f32	s1, s14
 80040ea:	eeb0 0a67 	vmov.f32	s0, s15
 80040ee:	f000 fd4b 	bl	8004b88 <omni_move>
	  if(kick_power>0){
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <maintask_run+0x2fc>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	dd26      	ble.n	8004150 <maintask_run+0x1e8>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8004102:	2201      	movs	r2, #1
 8004104:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004108:	4857      	ldr	r0, [pc, #348]	; (8004268 <maintask_run+0x300>)
 800410a:	f004 fc07 	bl	800891c <HAL_GPIO_WritePin>
			  if(ball[0]==1){
 800410e:	4b57      	ldr	r3, [pc, #348]	; (800426c <maintask_run+0x304>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d137      	bne.n	8004186 <maintask_run+0x21e>
				  uint8_t kick_power_param=(float)kick_power*255.0;
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <maintask_run+0x2fc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fa3c 	bl	8000598 <__aeabi_f2d>
 8004120:	a341      	add	r3, pc, #260	; (adr r3, 8004228 <maintask_run+0x2c0>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	f7fc fa8f 	bl	8000648 <__aeabi_dmul>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f7fc fd61 	bl	8000bf8 <__aeabi_d2uiz>
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
				  printf(" kick=%d\r\n",kick_power_param);
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	4619      	mov	r1, r3
 800413e:	484c      	ldr	r0, [pc, #304]	; (8004270 <maintask_run+0x308>)
 8004140:	f009 fbc4 	bl	800d8cc <iprintf>
				  actuator_kicker(3, (uint8_t)kick_power_param);
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	4619      	mov	r1, r3
 8004148:	2003      	movs	r0, #3
 800414a:	f7fd f858 	bl	80011fe <actuator_kicker>
 800414e:	e01a      	b.n	8004186 <maintask_run+0x21e>
			  }

	  }
	  else{
		  if(chipEN==1){
 8004150:	4b48      	ldr	r3, [pc, #288]	; (8004274 <maintask_run+0x30c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d104      	bne.n	8004162 <maintask_run+0x1fa>
			  actuator_kicker(2, 1);
 8004158:	2101      	movs	r1, #1
 800415a:	2002      	movs	r0, #2
 800415c:	f7fd f84f 	bl	80011fe <actuator_kicker>
 8004160:	e003      	b.n	800416a <maintask_run+0x202>
		  }
		  else{
			  actuator_kicker(2, 0);
 8004162:	2100      	movs	r1, #0
 8004164:	2002      	movs	r0, #2
 8004166:	f7fd f84a 	bl	80011fe <actuator_kicker>
		  }
		actuator_kicker(1, 1);
 800416a:	2101      	movs	r1, #1
 800416c:	2001      	movs	r0, #1
 800416e:	f7fd f846 	bl	80011fe <actuator_kicker>
		actuator_kicker_voltage(250.0);
 8004172:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8004278 <maintask_run+0x310>
 8004176:	f7fd f821 	bl	80011bc <actuator_kicker_voltage>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004180:	4839      	ldr	r0, [pc, #228]	; (8004268 <maintask_run+0x300>)
 8004182:	f004 fbcb 	bl	800891c <HAL_GPIO_WritePin>
	  }
	  actuator_motor5(drible_power,1.0);
 8004186:	4b3d      	ldr	r3, [pc, #244]	; (800427c <maintask_run+0x314>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004190:	eeb0 0a67 	vmov.f32	s0, s15
 8004194:	f7fc ffe2 	bl	800115c <actuator_motor5>

	  if(yawAngle<0){
 8004198:	4b28      	ldr	r3, [pc, #160]	; (800423c <maintask_run+0x2d4>)
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a6:	d56d      	bpl.n	8004284 <maintask_run+0x31c>
		  yawAngle_send=(float)(round((yawAngle+359.0)/2.0));
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <maintask_run+0x2d4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc f9f3 	bl	8000598 <__aeabi_f2d>
 80041b2:	a31f      	add	r3, pc, #124	; (adr r3, 8004230 <maintask_run+0x2c8>)
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f7fc f890 	bl	80002dc <__adddf3>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041cc:	f7fc fb66 	bl	800089c <__aeabi_ddiv>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	ec43 2b17 	vmov	d7, r2, r3
 80041d8:	eeb0 0a47 	vmov.f32	s0, s14
 80041dc:	eef0 0a67 	vmov.f32	s1, s15
 80041e0:	f00b fd7c 	bl	800fcdc <round>
 80041e4:	ec53 2b10 	vmov	r2, r3, d0
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	f7fc fd24 	bl	8000c38 <__aeabi_d2f>
 80041f0:	ee07 0a90 	vmov	s15, r0
 80041f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f8:	ee17 3a90 	vmov	r3, s15
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <maintask_run+0x318>)
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	e063      	b.n	80042cc <maintask_run+0x364>
 8004204:	f3af 8000 	nop.w
 8004208:	54442d18 	.word	0x54442d18
 800420c:	400921fb 	.word	0x400921fb
 8004210:	b851eb85 	.word	0xb851eb85
 8004214:	404ca51e 	.word	0x404ca51e
 8004218:	7f3321d2 	.word	0x7f3321d2
 800421c:	4032d97c 	.word	0x4032d97c
 8004220:	7f3321d2 	.word	0x7f3321d2
 8004224:	c032d97c 	.word	0xc032d97c
 8004228:	00000000 	.word	0x00000000
 800422c:	406fe000 	.word	0x406fe000
 8004230:	00000000 	.word	0x00000000
 8004234:	40767000 	.word	0x40767000
 8004238:	200006e8 	.word	0x200006e8
 800423c:	200005e0 	.word	0x200005e0
 8004240:	40668000 	.word	0x40668000
 8004244:	40320000 	.word	0x40320000
 8004248:	200005d0 	.word	0x200005d0
 800424c:	40120000 	.word	0x40120000
 8004250:	200006d8 	.word	0x200006d8
 8004254:	4196cbe4 	.word	0x4196cbe4
 8004258:	c196cbe4 	.word	0xc196cbe4
 800425c:	200006d0 	.word	0x200006d0
 8004260:	200006d4 	.word	0x200006d4
 8004264:	200006e0 	.word	0x200006e0
 8004268:	48000800 	.word	0x48000800
 800426c:	200006f0 	.word	0x200006f0
 8004270:	0800fe80 	.word	0x0800fe80
 8004274:	200006ec 	.word	0x200006ec
 8004278:	437a0000 	.word	0x437a0000
 800427c:	200006dc 	.word	0x200006dc
 8004280:	200005d6 	.word	0x200005d6
	  }
	  else{
		  yawAngle_send=(float)(round(yawAngle/2.0));
 8004284:	4b29      	ldr	r3, [pc, #164]	; (800432c <maintask_run+0x3c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fc f985 	bl	8000598 <__aeabi_f2d>
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004296:	f7fc fb01 	bl	800089c <__aeabi_ddiv>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	ec43 2b17 	vmov	d7, r2, r3
 80042a2:	eeb0 0a47 	vmov.f32	s0, s14
 80042a6:	eef0 0a67 	vmov.f32	s1, s15
 80042aa:	f00b fd17 	bl	800fcdc <round>
 80042ae:	ec53 2b10 	vmov	r2, r3, d0
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	f7fc fcbf 	bl	8000c38 <__aeabi_d2f>
 80042ba:	ee07 0a90 	vmov	s15, r0
 80042be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c2:	ee17 3a90 	vmov	r3, s15
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <maintask_run+0x3c8>)
 80042ca:	801a      	strh	r2, [r3, #0]
	  }
	  TX_data_UART[0]=254;
 80042cc:	4b19      	ldr	r3, [pc, #100]	; (8004334 <maintask_run+0x3cc>)
 80042ce:	22fe      	movs	r2, #254	; 0xfe
 80042d0:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=(uint8_t)yawAngle_send;
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <maintask_run+0x3c8>)
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	4b16      	ldr	r3, [pc, #88]	; (8004334 <maintask_run+0x3cc>)
 80042da:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=ball[0];
 80042dc:	4b16      	ldr	r3, [pc, #88]	; (8004338 <maintask_run+0x3d0>)
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	4b14      	ldr	r3, [pc, #80]	; (8004334 <maintask_run+0x3cc>)
 80042e2:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=ball[1];
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <maintask_run+0x3d0>)
 80042e6:	785a      	ldrb	r2, [r3, #1]
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <maintask_run+0x3cc>)
 80042ea:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=ball[2];
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <maintask_run+0x3d0>)
 80042ee:	789a      	ldrb	r2, [r3, #2]
 80042f0:	4b10      	ldr	r3, [pc, #64]	; (8004334 <maintask_run+0x3cc>)
 80042f2:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=ball[0];
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <maintask_run+0x3d0>)
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <maintask_run+0x3cc>)
 80042fa:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=ball[1];
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <maintask_run+0x3d0>)
 80042fe:	785a      	ldrb	r2, [r3, #1]
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <maintask_run+0x3cc>)
 8004302:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=ball[2];
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <maintask_run+0x3d0>)
 8004306:	789a      	ldrb	r2, [r3, #2]
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <maintask_run+0x3cc>)
 800430a:	71da      	strb	r2, [r3, #7]
	  can1_send(0x402, TX_data_UART);
 800430c:	4909      	ldr	r1, [pc, #36]	; (8004334 <maintask_run+0x3cc>)
 800430e:	f240 4002 	movw	r0, #1026	; 0x402
 8004312:	f7fd facf 	bl	80018b4 <can1_send>

	  yawAngle_temp=yawAngle;
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <maintask_run+0x3c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <maintask_run+0x3d4>)
 800431c:	6013      	str	r3, [r2, #0]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	ecbd 8b02 	vpop	{d8}
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800432a:	bf00      	nop
 800432c:	200005e0 	.word	0x200005e0
 8004330:	200005d6 	.word	0x200005d6
 8004334:	20000640 	.word	0x20000640
 8004338:	200006f0 	.word	0x200006f0
 800433c:	200005d0 	.word	0x200005d0

08004340 <maintask_emargency>:


void maintask_emargency(){
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
	  actuator_motor1(0.0,0.0);
 8004346:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8004404 <maintask_emargency+0xc4>
 800434a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004404 <maintask_emargency+0xc4>
 800434e:	f7fc fe45 	bl	8000fdc <actuator_motor1>
	  actuator_motor2(0.0,0.0);
 8004352:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8004404 <maintask_emargency+0xc4>
 8004356:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8004404 <maintask_emargency+0xc4>
 800435a:	f7fc fe6f 	bl	800103c <actuator_motor2>
	  actuator_motor3(0.0,0.0);
 800435e:	eddf 0a29 	vldr	s1, [pc, #164]	; 8004404 <maintask_emargency+0xc4>
 8004362:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8004404 <maintask_emargency+0xc4>
 8004366:	f7fc fe99 	bl	800109c <actuator_motor3>
	  actuator_motor4(0.0,0.0);
 800436a:	eddf 0a26 	vldr	s1, [pc, #152]	; 8004404 <maintask_emargency+0xc4>
 800436e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8004404 <maintask_emargency+0xc4>
 8004372:	f7fc fec3 	bl	80010fc <actuator_motor4>
	  actuator_motor5(0.0,0.0);
 8004376:	eddf 0a23 	vldr	s1, [pc, #140]	; 8004404 <maintask_emargency+0xc4>
 800437a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8004404 <maintask_emargency+0xc4>
 800437e:	f7fc feed 	bl	800115c <actuator_motor5>

	  TX_data_UART[0]=254;
 8004382:	4b21      	ldr	r3, [pc, #132]	; (8004408 <maintask_emargency+0xc8>)
 8004384:	22fe      	movs	r2, #254	; 0xfe
 8004386:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=error_No[0];
 8004388:	4b20      	ldr	r3, [pc, #128]	; (800440c <maintask_emargency+0xcc>)
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	4b1e      	ldr	r3, [pc, #120]	; (8004408 <maintask_emargency+0xc8>)
 800438e:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=error_No[1];
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <maintask_emargency+0xcc>)
 8004392:	785a      	ldrb	r2, [r3, #1]
 8004394:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <maintask_emargency+0xc8>)
 8004396:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=error_No[2];
 8004398:	4b1c      	ldr	r3, [pc, #112]	; (800440c <maintask_emargency+0xcc>)
 800439a:	789a      	ldrb	r2, [r3, #2]
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <maintask_emargency+0xc8>)
 800439e:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=error_No[3];
 80043a0:	4b1a      	ldr	r3, [pc, #104]	; (800440c <maintask_emargency+0xcc>)
 80043a2:	78da      	ldrb	r2, [r3, #3]
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <maintask_emargency+0xc8>)
 80043a6:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=252;
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <maintask_emargency+0xc8>)
 80043aa:	22fc      	movs	r2, #252	; 0xfc
 80043ac:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=122;
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <maintask_emargency+0xc8>)
 80043b0:	227a      	movs	r2, #122	; 0x7a
 80043b2:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=200;
 80043b4:	4b14      	ldr	r3, [pc, #80]	; (8004408 <maintask_emargency+0xc8>)
 80043b6:	22c8      	movs	r2, #200	; 0xc8
 80043b8:	71da      	strb	r2, [r3, #7]
	  can1_send(0x402, TX_data_UART);
 80043ba:	4913      	ldr	r1, [pc, #76]	; (8004408 <maintask_emargency+0xc8>)
 80043bc:	f240 4002 	movw	r0, #1026	; 0x402
 80043c0:	f7fd fa78 	bl	80018b4 <can1_send>

	  actuator_buzzer(150, 150);
 80043c4:	2196      	movs	r1, #150	; 0x96
 80043c6:	2096      	movs	r0, #150	; 0x96
 80043c8:	f7fc ff66 	bl	8001298 <actuator_buzzer>

	  uint8_t senddata_error[8];

	  can1_send(0x000, senddata_error);
 80043cc:	463b      	mov	r3, r7
 80043ce:	4619      	mov	r1, r3
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7fd fa6f 	bl	80018b4 <can1_send>
	  can2_send(0x000, senddata_error);
 80043d6:	463b      	mov	r3, r7
 80043d8:	4619      	mov	r1, r3
 80043da:	2000      	movs	r0, #0
 80043dc:	f7fd faca 	bl	8001974 <can2_send>

	  actuator_kicker(1, 0);
 80043e0:	2100      	movs	r1, #0
 80043e2:	2001      	movs	r0, #1
 80043e4:	f7fc ff0b 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80043e8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004404 <maintask_emargency+0xc4>
 80043ec:	f7fc fee6 	bl	80011bc <actuator_kicker_voltage>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80043f0:	2201      	movs	r2, #1
 80043f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043f6:	4806      	ldr	r0, [pc, #24]	; (8004410 <maintask_emargency+0xd0>)
 80043f8:	f004 fa90 	bl	800891c <HAL_GPIO_WritePin>

}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	00000000 	.word	0x00000000
 8004408:	20000640 	.word	0x20000640
 800440c:	200006f8 	.word	0x200006f8
 8004410:	48000400 	.word	0x48000400

08004414 <maintask_state_stop>:


void maintask_state_stop(){
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0

	  omni_move(0.0, 0.0, 0.0,0.0);
 8004418:	eddf 1a1c 	vldr	s3, [pc, #112]	; 800448c <maintask_state_stop+0x78>
 800441c:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800448c <maintask_state_stop+0x78>
 8004420:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800448c <maintask_state_stop+0x78>
 8004424:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800448c <maintask_state_stop+0x78>
 8004428:	f000 fbae 	bl	8004b88 <omni_move>
	  actuator_motor5(0.0,0.0);
 800442c:	eddf 0a17 	vldr	s1, [pc, #92]	; 800448c <maintask_state_stop+0x78>
 8004430:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800448c <maintask_state_stop+0x78>
 8004434:	f7fc fe92 	bl	800115c <actuator_motor5>

	  TX_data_UART[0]=254;
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <maintask_state_stop+0x7c>)
 800443a:	22fe      	movs	r2, #254	; 0xfe
 800443c:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=error_No[0];
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <maintask_state_stop+0x80>)
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <maintask_state_stop+0x7c>)
 8004444:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=error_No[1];
 8004446:	4b13      	ldr	r3, [pc, #76]	; (8004494 <maintask_state_stop+0x80>)
 8004448:	785a      	ldrb	r2, [r3, #1]
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <maintask_state_stop+0x7c>)
 800444c:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=1;
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <maintask_state_stop+0x7c>)
 8004450:	2201      	movs	r2, #1
 8004452:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=1;
 8004454:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <maintask_state_stop+0x7c>)
 8004456:	2201      	movs	r2, #1
 8004458:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=1;
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <maintask_state_stop+0x7c>)
 800445c:	2201      	movs	r2, #1
 800445e:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=1;
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <maintask_state_stop+0x7c>)
 8004462:	2201      	movs	r2, #1
 8004464:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=1;
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <maintask_state_stop+0x7c>)
 8004468:	2201      	movs	r2, #1
 800446a:	71da      	strb	r2, [r3, #7]
	  can1_send(0x402, TX_data_UART);
 800446c:	4908      	ldr	r1, [pc, #32]	; (8004490 <maintask_state_stop+0x7c>)
 800446e:	f240 4002 	movw	r0, #1026	; 0x402
 8004472:	f7fd fa1f 	bl	80018b4 <can1_send>

	  actuator_kicker(1, 0);
 8004476:	2100      	movs	r1, #0
 8004478:	2001      	movs	r0, #1
 800447a:	f7fc fec0 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 800447e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800448c <maintask_state_stop+0x78>
 8004482:	f7fc fe9b 	bl	80011bc <actuator_kicker_voltage>
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	00000000 	.word	0x00000000
 8004490:	20000640 	.word	0x20000640
 8004494:	200006f8 	.word	0x200006f8

08004498 <maintask_stop>:

void maintask_stop(){
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	  omni_move(0.0, 0.0, 0.0,0.0);
 800449c:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80045d0 <maintask_stop+0x138>
 80044a0:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80045d0 <maintask_stop+0x138>
 80044a4:	eddf 0a4a 	vldr	s1, [pc, #296]	; 80045d0 <maintask_stop+0x138>
 80044a8:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80045d0 <maintask_stop+0x138>
 80044ac:	f000 fb6c 	bl	8004b88 <omni_move>
	  actuator_motor5(0.0,0.0);
 80044b0:	eddf 0a47 	vldr	s1, [pc, #284]	; 80045d0 <maintask_stop+0x138>
 80044b4:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80045d0 <maintask_stop+0x138>
 80044b8:	f7fc fe50 	bl	800115c <actuator_motor5>


	  if(yawAngle<0){
 80044bc:	4b45      	ldr	r3, [pc, #276]	; (80045d4 <maintask_stop+0x13c>)
 80044be:	edd3 7a00 	vldr	s15, [r3]
 80044c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ca:	d52d      	bpl.n	8004528 <maintask_stop+0x90>
		  yawAngle_send=(float)(round((yawAngle+359.0)/2.0));
 80044cc:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <maintask_stop+0x13c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc f861 	bl	8000598 <__aeabi_f2d>
 80044d6:	a33c      	add	r3, pc, #240	; (adr r3, 80045c8 <maintask_stop+0x130>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f7fb fefe 	bl	80002dc <__adddf3>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044f0:	f7fc f9d4 	bl	800089c <__aeabi_ddiv>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	ec43 2b17 	vmov	d7, r2, r3
 80044fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004500:	eef0 0a67 	vmov.f32	s1, s15
 8004504:	f00b fbea 	bl	800fcdc <round>
 8004508:	ec53 2b10 	vmov	r2, r3, d0
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	f7fc fb92 	bl	8000c38 <__aeabi_d2f>
 8004514:	ee07 0a90 	vmov	s15, r0
 8004518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451c:	ee17 3a90 	vmov	r3, s15
 8004520:	b29a      	uxth	r2, r3
 8004522:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <maintask_stop+0x140>)
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e023      	b.n	8004570 <maintask_stop+0xd8>
	  }
	  else{
		  yawAngle_send=(float)(round(yawAngle/2.0));
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <maintask_stop+0x13c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc f833 	bl	8000598 <__aeabi_f2d>
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800453a:	f7fc f9af 	bl	800089c <__aeabi_ddiv>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	ec43 2b17 	vmov	d7, r2, r3
 8004546:	eeb0 0a47 	vmov.f32	s0, s14
 800454a:	eef0 0a67 	vmov.f32	s1, s15
 800454e:	f00b fbc5 	bl	800fcdc <round>
 8004552:	ec53 2b10 	vmov	r2, r3, d0
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	f7fc fb6d 	bl	8000c38 <__aeabi_d2f>
 800455e:	ee07 0a90 	vmov	s15, r0
 8004562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004566:	ee17 3a90 	vmov	r3, s15
 800456a:	b29a      	uxth	r2, r3
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <maintask_stop+0x140>)
 800456e:	801a      	strh	r2, [r3, #0]
	  }
	  TX_data_UART[0]=254;
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <maintask_stop+0x144>)
 8004572:	22fe      	movs	r2, #254	; 0xfe
 8004574:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=(uint8_t)yawAngle_send;
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <maintask_stop+0x140>)
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <maintask_stop+0x144>)
 800457e:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=0;
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <maintask_stop+0x144>)
 8004582:	2200      	movs	r2, #0
 8004584:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=0;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <maintask_stop+0x144>)
 8004588:	2200      	movs	r2, #0
 800458a:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=0;
 800458c:	4b13      	ldr	r3, [pc, #76]	; (80045dc <maintask_stop+0x144>)
 800458e:	2200      	movs	r2, #0
 8004590:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=0;
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <maintask_stop+0x144>)
 8004594:	2200      	movs	r2, #0
 8004596:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=0;
 8004598:	4b10      	ldr	r3, [pc, #64]	; (80045dc <maintask_stop+0x144>)
 800459a:	2200      	movs	r2, #0
 800459c:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=0;
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <maintask_stop+0x144>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	71da      	strb	r2, [r3, #7]
	  can1_send(0x402, TX_data_UART);
 80045a4:	490d      	ldr	r1, [pc, #52]	; (80045dc <maintask_stop+0x144>)
 80045a6:	f240 4002 	movw	r0, #1026	; 0x402
 80045aa:	f7fd f983 	bl	80018b4 <can1_send>

	  actuator_kicker(1, 0);
 80045ae:	2100      	movs	r1, #0
 80045b0:	2001      	movs	r0, #1
 80045b2:	f7fc fe24 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80045b6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80045d0 <maintask_stop+0x138>
 80045ba:	f7fc fdff 	bl	80011bc <actuator_kicker_voltage>
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	f3af 8000 	nop.w
 80045c8:	00000000 	.word	0x00000000
 80045cc:	40767000 	.word	0x40767000
 80045d0:	00000000 	.word	0x00000000
 80045d4:	200005e0 	.word	0x200005e0
 80045d8:	200005d6 	.word	0x200005d6
 80045dc:	20000640 	.word	0x20000640

080045e0 <normalizeAngle>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

float normalizeAngle(float angle_rad) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle_rad > M_PI) {
 80045ea:	e00f      	b.n	800460c <normalizeAngle+0x2c>
        angle_rad -= 2.0f * M_PI;
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fb ffd3 	bl	8000598 <__aeabi_f2d>
 80045f2:	a31f      	add	r3, pc, #124	; (adr r3, 8004670 <normalizeAngle+0x90>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fe6e 	bl	80002d8 <__aeabi_dsub>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	f7fc fb18 	bl	8000c38 <__aeabi_d2f>
 8004608:	4603      	mov	r3, r0
 800460a:	607b      	str	r3, [r7, #4]
    while (angle_rad > M_PI) {
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fb ffc3 	bl	8000598 <__aeabi_f2d>
 8004612:	a319      	add	r3, pc, #100	; (adr r3, 8004678 <normalizeAngle+0x98>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f7fc faa6 	bl	8000b68 <__aeabi_dcmpgt>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e4      	bne.n	80045ec <normalizeAngle+0xc>
    }
    while (angle_rad < -M_PI) {
 8004622:	e00f      	b.n	8004644 <normalizeAngle+0x64>
        angle_rad += 2.0f * M_PI;
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fb ffb7 	bl	8000598 <__aeabi_f2d>
 800462a:	a311      	add	r3, pc, #68	; (adr r3, 8004670 <normalizeAngle+0x90>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fb fe54 	bl	80002dc <__adddf3>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f7fc fafc 	bl	8000c38 <__aeabi_d2f>
 8004640:	4603      	mov	r3, r0
 8004642:	607b      	str	r3, [r7, #4]
    while (angle_rad < -M_PI) {
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fb ffa7 	bl	8000598 <__aeabi_f2d>
 800464a:	a30d      	add	r3, pc, #52	; (adr r3, 8004680 <normalizeAngle+0xa0>)
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f7fc fa6c 	bl	8000b2c <__aeabi_dcmplt>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e4      	bne.n	8004624 <normalizeAngle+0x44>
    }
    return angle_rad;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	ee07 3a90 	vmov	s15, r3
}
 8004660:	eeb0 0a67 	vmov.f32	s0, s15
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	f3af 8000 	nop.w
 8004670:	54442d18 	.word	0x54442d18
 8004674:	401921fb 	.word	0x401921fb
 8004678:	54442d18 	.word	0x54442d18
 800467c:	400921fb 	.word	0x400921fb
 8004680:	54442d18 	.word	0x54442d18
 8004684:	c00921fb 	.word	0xc00921fb

08004688 <getAngleDiff>:

float getAngleDiff(float angle_rad1, float angle_rad2){
 8004688:	b5b0      	push	{r4, r5, r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004692:	edc7 0a00 	vstr	s1, [r7]
    angle_rad1 = normalizeAngle(angle_rad1);
 8004696:	ed97 0a01 	vldr	s0, [r7, #4]
 800469a:	f7ff ffa1 	bl	80045e0 <normalizeAngle>
 800469e:	ed87 0a01 	vstr	s0, [r7, #4]
    angle_rad2 = normalizeAngle(angle_rad2);
 80046a2:	ed97 0a00 	vldr	s0, [r7]
 80046a6:	f7ff ff9b 	bl	80045e0 <normalizeAngle>
 80046aa:	ed87 0a00 	vstr	s0, [r7]
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 80046ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80046b2:	edd7 7a00 	vldr	s15, [r7]
 80046b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046be:	ee17 3a90 	vmov	r3, s15
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	bfb8      	it	lt
 80046c6:	425b      	neglt	r3, r3
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	dd40      	ble.n	800474e <getAngleDiff+0xc6>
    	if(angle_rad1 > angle_rad2){
 80046cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80046d0:	edd7 7a00 	vldr	s15, [r7]
 80046d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046dc:	dd1a      	ble.n	8004714 <getAngleDiff+0x8c>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7fb ff5a 	bl	8000598 <__aeabi_f2d>
 80046e4:	4604      	mov	r4, r0
 80046e6:	460d      	mov	r5, r1
 80046e8:	6838      	ldr	r0, [r7, #0]
 80046ea:	f7fb ff55 	bl	8000598 <__aeabi_f2d>
 80046ee:	a320      	add	r3, pc, #128	; (adr r3, 8004770 <getAngleDiff+0xe8>)
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f7fb fdf2 	bl	80002dc <__adddf3>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4620      	mov	r0, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	f7fb fdea 	bl	80002d8 <__aeabi_dsub>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4610      	mov	r0, r2
 800470a:	4619      	mov	r1, r3
 800470c:	f7fc fa94 	bl	8000c38 <__aeabi_d2f>
 8004710:	4603      	mov	r3, r0
 8004712:	e024      	b.n	800475e <getAngleDiff+0xd6>
    	}else{
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7fb ff3f 	bl	8000598 <__aeabi_f2d>
 800471a:	a315      	add	r3, pc, #84	; (adr r3, 8004770 <getAngleDiff+0xe8>)
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	f7fb fddc 	bl	80002dc <__adddf3>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	6838      	ldr	r0, [r7, #0]
 800472e:	f7fb ff33 	bl	8000598 <__aeabi_f2d>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4620      	mov	r0, r4
 8004738:	4629      	mov	r1, r5
 800473a:	f7fb fdcd 	bl	80002d8 <__aeabi_dsub>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f7fc fa77 	bl	8000c38 <__aeabi_d2f>
 800474a:	4603      	mov	r3, r0
 800474c:	e007      	b.n	800475e <getAngleDiff+0xd6>
    	}
    } else {
        return angle_rad1 - angle_rad2;
 800474e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004752:	edd7 7a00 	vldr	s15, [r7]
 8004756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800475a:	ee17 3a90 	vmov	r3, s15
    }
}
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eeb0 0a67 	vmov.f32	s0, s15
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bdb0      	pop	{r4, r5, r7, pc}
 800476c:	f3af 8000 	nop.w
 8004770:	54442d18 	.word	0x54442d18
 8004774:	401921fb 	.word	0x401921fb

08004778 <decode_SW>:

uint8_t decode_SW(uint16_t SW_data){
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	80fb      	strh	r3, [r7, #6]
	int data;
	if(SW_data<100){
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b63      	cmp	r3, #99	; 0x63
 8004786:	d802      	bhi.n	800478e <decode_SW+0x16>
		data=0b00010000;//C
 8004788:	2310      	movs	r3, #16
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e02e      	b.n	80047ec <decode_SW+0x74>
	}
	else if(SW_data<500 && SW_data>100){
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004794:	d205      	bcs.n	80047a2 <decode_SW+0x2a>
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b64      	cmp	r3, #100	; 0x64
 800479a:	d902      	bls.n	80047a2 <decode_SW+0x2a>
		data=0b00000010;//B
 800479c:	2302      	movs	r3, #2
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e024      	b.n	80047ec <decode_SW+0x74>
	}
	else if(SW_data<2000 && SW_data>500){
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047a8:	d206      	bcs.n	80047b8 <decode_SW+0x40>
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047b0:	d902      	bls.n	80047b8 <decode_SW+0x40>
		data=0b00000100;//R
 80047b2:	2304      	movs	r3, #4
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e019      	b.n	80047ec <decode_SW+0x74>
	}
	else if(SW_data<3000 && SW_data>2000){
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80047be:	4293      	cmp	r3, r2
 80047c0:	d806      	bhi.n	80047d0 <decode_SW+0x58>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047c8:	d902      	bls.n	80047d0 <decode_SW+0x58>
		data=0b00000001;//F
 80047ca:	2301      	movs	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e00d      	b.n	80047ec <decode_SW+0x74>
	}
	else if(SW_data<4000 && SW_data>3000){
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80047d6:	d207      	bcs.n	80047e8 <decode_SW+0x70>
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80047de:	4293      	cmp	r3, r2
 80047e0:	d902      	bls.n	80047e8 <decode_SW+0x70>
		data=0b00001000;//L
 80047e2:	2308      	movs	r3, #8
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e001      	b.n	80047ec <decode_SW+0x74>
	}
	else{
		data=0b00000000;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	b2db      	uxtb	r3, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	0000      	movs	r0, r0
	...

08004800 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800480c:	e002      	b.n	8004814 <HAL_UART_RxCpltCallback+0x14>
		j++;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	3301      	adds	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	4aa4      	ldr	r2, [pc, #656]	; (8004aa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8004818:	5cd3      	ldrb	r3, [r2, r3]
 800481a:	2bfe      	cmp	r3, #254	; 0xfe
 800481c:	d002      	beq.n	8004824 <HAL_UART_RxCpltCallback+0x24>
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	2b0d      	cmp	r3, #13
 8004822:	d9f4      	bls.n	800480e <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_from_Ether)){
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b0d      	cmp	r3, #13
 8004828:	d90d      	bls.n	8004846 <HAL_UART_RxCpltCallback+0x46>
		for(uint8_t k=0;k<(sizeof(data_from_ether));k++){
 800482a:	2300      	movs	r3, #0
 800482c:	73bb      	strb	r3, [r7, #14]
 800482e:	e006      	b.n	800483e <HAL_UART_RxCpltCallback+0x3e>
			data_from_ether[k]=0;
 8004830:	7bbb      	ldrb	r3, [r7, #14]
 8004832:	4a9e      	ldr	r2, [pc, #632]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004834:	2100      	movs	r1, #0
 8004836:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_from_ether));k++){
 8004838:	7bbb      	ldrb	r3, [r7, #14]
 800483a:	3301      	adds	r3, #1
 800483c:	73bb      	strb	r3, [r7, #14]
 800483e:	7bbb      	ldrb	r3, [r7, #14]
 8004840:	2b0c      	cmp	r3, #12
 8004842:	d9f5      	bls.n	8004830 <HAL_UART_RxCpltCallback+0x30>
 8004844:	e021      	b.n	800488a <HAL_UART_RxCpltCallback+0x8a>
		}
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 8004846:	2300      	movs	r3, #0
 8004848:	737b      	strb	r3, [r7, #13]
 800484a:	e01b      	b.n	8004884 <HAL_UART_RxCpltCallback+0x84>
			if ((j + k) >= sizeof(data_from_ether)) {
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	7b7b      	ldrb	r3, [r7, #13]
 8004850:	4413      	add	r3, r2
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d90a      	bls.n	800486c <HAL_UART_RxCpltCallback+0x6c>
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004856:	7b7a      	ldrb	r2, [r7, #13]
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	4413      	add	r3, r2
 800485c:	f1a3 020d 	sub.w	r2, r3, #13
 8004860:	7b7b      	ldrb	r3, [r7, #13]
 8004862:	4991      	ldr	r1, [pc, #580]	; (8004aa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8004864:	5c89      	ldrb	r1, [r1, r2]
 8004866:	4a91      	ldr	r2, [pc, #580]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004868:	54d1      	strb	r1, [r2, r3]
 800486a:	e008      	b.n	800487e <HAL_UART_RxCpltCallback+0x7e>
			}
			else {
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800486c:	7bfa      	ldrb	r2, [r7, #15]
 800486e:	7b7b      	ldrb	r3, [r7, #13]
 8004870:	4413      	add	r3, r2
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	7b7b      	ldrb	r3, [r7, #13]
 8004876:	498c      	ldr	r1, [pc, #560]	; (8004aa8 <HAL_UART_RxCpltCallback+0x2a8>)
 8004878:	5c89      	ldrb	r1, [r1, r2]
 800487a:	4a8c      	ldr	r2, [pc, #560]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 800487c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 800487e:	7b7b      	ldrb	r3, [r7, #13]
 8004880:	3301      	adds	r3, #1
 8004882:	737b      	strb	r3, [r7, #13]
 8004884:	7b7b      	ldrb	r3, [r7, #13]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d9e0      	bls.n	800484c <HAL_UART_RxCpltCallback+0x4c>
			}
		}
	}
	if(data_from_ether[sizeof(data_from_ether)-1]==253){
 800488a:	4b88      	ldr	r3, [pc, #544]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 800488c:	7b1b      	ldrb	r3, [r3, #12]
 800488e:	2bfd      	cmp	r3, #253	; 0xfd
 8004890:	d10f      	bne.n	80048b2 <HAL_UART_RxCpltCallback+0xb2>
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004892:	2300      	movs	r3, #0
 8004894:	733b      	strb	r3, [r7, #12]
 8004896:	e008      	b.n	80048aa <HAL_UART_RxCpltCallback+0xaa>
			Rxbuf_from_Ether_temp[k]=data_from_ether[k];
 8004898:	7b3a      	ldrb	r2, [r7, #12]
 800489a:	7b3b      	ldrb	r3, [r7, #12]
 800489c:	4983      	ldr	r1, [pc, #524]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 800489e:	5c89      	ldrb	r1, [r1, r2]
 80048a0:	4a83      	ldr	r2, [pc, #524]	; (8004ab0 <HAL_UART_RxCpltCallback+0x2b0>)
 80048a2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 80048a4:	7b3b      	ldrb	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	733b      	strb	r3, [r7, #12]
 80048aa:	7b3b      	ldrb	r3, [r7, #12]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d9f3      	bls.n	8004898 <HAL_UART_RxCpltCallback+0x98>
 80048b0:	e00e      	b.n	80048d0 <HAL_UART_RxCpltCallback+0xd0>
		}
	}
	else{
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 80048b2:	2300      	movs	r3, #0
 80048b4:	72fb      	strb	r3, [r7, #11]
 80048b6:	e008      	b.n	80048ca <HAL_UART_RxCpltCallback+0xca>
			data_from_ether[k]=Rxbuf_from_Ether_temp[k];
 80048b8:	7afa      	ldrb	r2, [r7, #11]
 80048ba:	7afb      	ldrb	r3, [r7, #11]
 80048bc:	497c      	ldr	r1, [pc, #496]	; (8004ab0 <HAL_UART_RxCpltCallback+0x2b0>)
 80048be:	5c89      	ldrb	r1, [r1, r2]
 80048c0:	4a7a      	ldr	r2, [pc, #488]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 80048c2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 80048c4:	7afb      	ldrb	r3, [r7, #11]
 80048c6:	3301      	adds	r3, #1
 80048c8:	72fb      	strb	r3, [r7, #11]
 80048ca:	7afb      	ldrb	r3, [r7, #11]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d9f3      	bls.n	80048b8 <HAL_UART_RxCpltCallback+0xb8>
		}
	}

	vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 80048d0:	4b76      	ldr	r3, [pc, #472]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	4a75      	ldr	r2, [pc, #468]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 80048d8:	7852      	ldrb	r2, [r2, #1]
 80048da:	4313      	orrs	r3, r2
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e4:	ee17 0a90 	vmov	r0, s15
 80048e8:	f7fb fe56 	bl	8000598 <__aeabi_f2d>
 80048ec:	a36a      	add	r3, pc, #424	; (adr r3, 8004a98 <HAL_UART_RxCpltCallback+0x298>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fb fcf1 	bl	80002d8 <__aeabi_dsub>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	a366      	add	r3, pc, #408	; (adr r3, 8004a98 <HAL_UART_RxCpltCallback+0x298>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb ffca 	bl	800089c <__aeabi_ddiv>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	4b67      	ldr	r3, [pc, #412]	; (8004ab4 <HAL_UART_RxCpltCallback+0x2b4>)
 8004916:	f7fb fe97 	bl	8000648 <__aeabi_dmul>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	f7fc f989 	bl	8000c38 <__aeabi_d2f>
 8004926:	4603      	mov	r3, r0
 8004928:	4a63      	ldr	r2, [pc, #396]	; (8004ab8 <HAL_UART_RxCpltCallback+0x2b8>)
 800492a:	6013      	str	r3, [r2, #0]
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 800492c:	4b5f      	ldr	r3, [pc, #380]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 800492e:	789b      	ldrb	r3, [r3, #2]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	4a5e      	ldr	r2, [pc, #376]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004934:	78d2      	ldrb	r2, [r2, #3]
 8004936:	4313      	orrs	r3, r2
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004940:	ee17 0a90 	vmov	r0, s15
 8004944:	f7fb fe28 	bl	8000598 <__aeabi_f2d>
 8004948:	a353      	add	r3, pc, #332	; (adr r3, 8004a98 <HAL_UART_RxCpltCallback+0x298>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fcc3 	bl	80002d8 <__aeabi_dsub>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	a34f      	add	r3, pc, #316	; (adr r3, 8004a98 <HAL_UART_RxCpltCallback+0x298>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb ff9c 	bl	800089c <__aeabi_ddiv>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	4b50      	ldr	r3, [pc, #320]	; (8004ab4 <HAL_UART_RxCpltCallback+0x2b4>)
 8004972:	f7fb fe69 	bl	8000648 <__aeabi_dmul>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	f7fc f95b 	bl	8000c38 <__aeabi_d2f>
 8004982:	4603      	mov	r3, r0
 8004984:	4a4d      	ldr	r2, [pc, #308]	; (8004abc <HAL_UART_RxCpltCallback+0x2bc>)
 8004986:	6013      	str	r3, [r2, #0]
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004988:	4b48      	ldr	r3, [pc, #288]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 800498a:	791b      	ldrb	r3, [r3, #4]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	4a47      	ldr	r2, [pc, #284]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004990:	7952      	ldrb	r2, [r2, #5]
 8004992:	4313      	orrs	r3, r2
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800499c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004ac0 <HAL_UART_RxCpltCallback+0x2c0>
 80049a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049a4:	ee17 0a90 	vmov	r0, s15
 80049a8:	f7fb fdf6 	bl	8000598 <__aeabi_f2d>
 80049ac:	a33a      	add	r3, pc, #232	; (adr r3, 8004a98 <HAL_UART_RxCpltCallback+0x298>)
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f7fb ff73 	bl	800089c <__aeabi_ddiv>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	a338      	add	r3, pc, #224	; (adr r3, 8004aa0 <HAL_UART_RxCpltCallback+0x2a0>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fe40 	bl	8000648 <__aeabi_dmul>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4610      	mov	r0, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	f7fc f932 	bl	8000c38 <__aeabi_d2f>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4a3b      	ldr	r2, [pc, #236]	; (8004ac4 <HAL_UART_RxCpltCallback+0x2c4>)
 80049d8:	6013      	str	r3, [r2, #0]
	theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 80049da:	4b34      	ldr	r3, [pc, #208]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 80049dc:	799b      	ldrb	r3, [r3, #6]
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	4a32      	ldr	r2, [pc, #200]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 80049e2:	79d2      	ldrb	r2, [r2, #7]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004ac0 <HAL_UART_RxCpltCallback+0x2c0>
 80049f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049f6:	ee17 0a90 	vmov	r0, s15
 80049fa:	f7fb fdcd 	bl	8000598 <__aeabi_f2d>
 80049fe:	a326      	add	r3, pc, #152	; (adr r3, 8004a98 <HAL_UART_RxCpltCallback+0x298>)
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f7fb ff4a 	bl	800089c <__aeabi_ddiv>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	4619      	mov	r1, r3
 8004a10:	a323      	add	r3, pc, #140	; (adr r3, 8004aa0 <HAL_UART_RxCpltCallback+0x2a0>)
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	f7fb fe17 	bl	8000648 <__aeabi_dmul>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4610      	mov	r0, r2
 8004a20:	4619      	mov	r1, r3
 8004a22:	f7fc f909 	bl	8000c38 <__aeabi_d2f>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4a27      	ldr	r2, [pc, #156]	; (8004ac8 <HAL_UART_RxCpltCallback+0x2c8>)
 8004a2a:	6013      	str	r3, [r2, #0]

	if(data_from_ether[8]>100){
 8004a2c:	4b1f      	ldr	r3, [pc, #124]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004a2e:	7a1b      	ldrb	r3, [r3, #8]
 8004a30:	2b64      	cmp	r3, #100	; 0x64
 8004a32:	d909      	bls.n	8004a48 <HAL_UART_RxCpltCallback+0x248>
		chipEN=1;
 8004a34:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_UART_RxCpltCallback+0x2cc>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]
		data_from_ether[8]=data_from_ether[8]-100;
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004a3c:	7a1b      	ldrb	r3, [r3, #8]
 8004a3e:	3b64      	subs	r3, #100	; 0x64
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004a44:	721a      	strb	r2, [r3, #8]
 8004a46:	e002      	b.n	8004a4e <HAL_UART_RxCpltCallback+0x24e>
	}
	else{
		chipEN=0;
 8004a48:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_UART_RxCpltCallback+0x2cc>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
	}
	kick_power=(float32_t)data_from_ether[8]/20.0;
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004a50:	7a1b      	ldrb	r3, [r3, #8]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a5a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a62:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <HAL_UART_RxCpltCallback+0x2d0>)
 8004a64:	edc3 7a00 	vstr	s15, [r3]
	drible_power=(float32_t)data_from_ether[9]/20.0;
 8004a68:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004a6a:	7a5b      	ldrb	r3, [r3, #9]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a74:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a7c:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <HAL_UART_RxCpltCallback+0x2d4>)
 8004a7e:	edc3 7a00 	vstr	s15, [r3]

	keeper_EN=data_from_ether[10];
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_UART_RxCpltCallback+0x2ac>)
 8004a84:	7a9a      	ldrb	r2, [r3, #10]
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_UART_RxCpltCallback+0x2d8>)
 8004a88:	701a      	strb	r2, [r3, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	f3af 8000 	nop.w
 8004a98:	00000000 	.word	0x00000000
 8004a9c:	40dfffc0 	.word	0x40dfffc0
 8004aa0:	54442d18 	.word	0x54442d18
 8004aa4:	400921fb 	.word	0x400921fb
 8004aa8:	200005ac 	.word	0x200005ac
 8004aac:	20000630 	.word	0x20000630
 8004ab0:	200005bc 	.word	0x200005bc
 8004ab4:	401c0000 	.word	0x401c0000
 8004ab8:	200006d0 	.word	0x200006d0
 8004abc:	200006d4 	.word	0x200006d4
 8004ac0:	46fffe00 	.word	0x46fffe00
 8004ac4:	200006e4 	.word	0x200006e4
 8004ac8:	200006e8 	.word	0x200006e8
 8004acc:	200006ec 	.word	0x200006ec
 8004ad0:	200006e0 	.word	0x200006e0
 8004ad4:	200006dc 	.word	0x200006dc
 8004ad8:	20000710 	.word	0x20000710

08004adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		maintask_emargency();
 8004ae0:	f7ff fc2e 	bl	8004340 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004aea:	4804      	ldr	r0, [pc, #16]	; (8004afc <Error_Handler+0x20>)
 8004aec:	f003 ff16 	bl	800891c <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 8004af0:	21c8      	movs	r1, #200	; 0xc8
 8004af2:	20c8      	movs	r0, #200	; 0xc8
 8004af4:	f7fc fbd0 	bl	8001298 <actuator_buzzer>
		maintask_emargency();
 8004af8:	e7f2      	b.n	8004ae0 <Error_Handler+0x4>
 8004afa:	bf00      	nop
 8004afc:	48000400 	.word	0x48000400

08004b00 <getUs>:
 */
#include "microsectimer.h"



uint32_t getUs(void) {
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004b06:	f004 fc5b 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	4a10      	ldr	r2, [pc, #64]	; (8004b50 <getUs+0x50>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	0c9b      	lsrs	r3, r3, #18
 8004b14:	607b      	str	r3, [r7, #4]
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
 8004b16:	f7fe f9e3 	bl	8002ee0 <HAL_GetTick>
 8004b1a:	4604      	mov	r4, r0
cycle_cnt = SysTick->VAL;
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <getUs+0x54>)
 8004b1e:	689d      	ldr	r5, [r3, #8]
} while (ms != HAL_GetTick());
 8004b20:	f7fe f9de 	bl	8002ee0 <HAL_GetTick>
 8004b24:	4603      	mov	r3, r0
 8004b26:	429c      	cmp	r4, r3
 8004b28:	d1f5      	bne.n	8004b16 <getUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b2e:	fb03 f204 	mul.w	r2, r3, r4
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	1b59      	subs	r1, r3, r5
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b44:	4413      	add	r3, r2
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	431bde83 	.word	0x431bde83
 8004b54:	e000e010 	.word	0xe000e010

08004b58 <delayUs>:

void delayUs(uint16_t micros) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	80fb      	strh	r3, [r7, #6]
uint32_t start = getUs();
 8004b62:	f7ff ffcd 	bl	8004b00 <getUs>
 8004b66:	60f8      	str	r0, [r7, #12]
while (getUs()-start < (uint32_t) micros) {
 8004b68:	e000      	b.n	8004b6c <delayUs+0x14>
	asm("nop");
 8004b6a:	bf00      	nop
while (getUs()-start < (uint32_t) micros) {
 8004b6c:	f7ff ffc8 	bl	8004b00 <getUs>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad2      	subs	r2, r2, r3
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d3f6      	bcc.n	8004b6a <delayUs+0x12>
}
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(4.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b92:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b96:	ed87 1a01 	vstr	s2, [r7, #4]
 8004b9a:	edc7 1a00 	vstr	s3, [r7]
	v_round=robot_radius*omega_omni;
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fb fcfa 	bl	8000598 <__aeabi_f2d>
 8004ba4:	a35f      	add	r3, pc, #380	; (adr r3, 8004d24 <omni_move+0x19c>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb fd4d 	bl	8000648 <__aeabi_dmul>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f7fc f83f 	bl	8000c38 <__aeabi_d2f>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4a50      	ldr	r2, [pc, #320]	; (8004d00 <omni_move+0x178>)
 8004bbe:	6013      	str	r3, [r2, #0]

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004bc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004bc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bcc:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8004d04 <omni_move+0x17c>
 8004bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bdc:	4b48      	ldr	r3, [pc, #288]	; (8004d00 <omni_move+0x178>)
 8004bde:	edd3 7a00 	vldr	s15, [r3]
 8004be2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004be6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004d08 <omni_move+0x180>
 8004bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bf6:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <omni_move+0x184>)
 8004bf8:	edc3 7a00 	vstr	s15, [r3]
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004bfc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004d10 <omni_move+0x188>
 8004c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c08:	eddf 6a42 	vldr	s13, [pc, #264]	; 8004d14 <omni_move+0x18c>
 8004c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c18:	4b39      	ldr	r3, [pc, #228]	; (8004d00 <omni_move+0x178>)
 8004c1a:	edd3 7a00 	vldr	s15, [r3]
 8004c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c22:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004d08 <omni_move+0x180>
 8004c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c32:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <omni_move+0x190>)
 8004c34:	edc3 7a00 	vstr	s15, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004c38:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004d10 <omni_move+0x188>
 8004c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c44:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004d10 <omni_move+0x188>
 8004c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c54:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <omni_move+0x178>)
 8004c56:	edd3 7a00 	vldr	s15, [r3]
 8004c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c5e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004d08 <omni_move+0x180>
 8004c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <omni_move+0x194>)
 8004c70:	edc3 7a00 	vstr	s15, [r3]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004c74:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004d04 <omni_move+0x17c>
 8004c78:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c80:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8004c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c90:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <omni_move+0x178>)
 8004c92:	edd3 7a00 	vldr	s15, [r3]
 8004c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c9a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004d08 <omni_move+0x180>
 8004c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <omni_move+0x198>)
 8004cac:	edc3 7a00 	vstr	s15, [r3]

	actuator_motor1(m1,duty_Limit);
 8004cb0:	4b16      	ldr	r3, [pc, #88]	; (8004d0c <omni_move+0x184>)
 8004cb2:	edd3 7a00 	vldr	s15, [r3]
 8004cb6:	edd7 0a00 	vldr	s1, [r7]
 8004cba:	eeb0 0a67 	vmov.f32	s0, s15
 8004cbe:	f7fc f98d 	bl	8000fdc <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <omni_move+0x190>)
 8004cc4:	edd3 7a00 	vldr	s15, [r3]
 8004cc8:	edd7 0a00 	vldr	s1, [r7]
 8004ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8004cd0:	f7fc f9b4 	bl	800103c <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <omni_move+0x194>)
 8004cd6:	edd3 7a00 	vldr	s15, [r3]
 8004cda:	edd7 0a00 	vldr	s1, [r7]
 8004cde:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce2:	f7fc f9db 	bl	800109c <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <omni_move+0x198>)
 8004ce8:	edd3 7a00 	vldr	s15, [r3]
 8004cec:	edd7 0a00 	vldr	s1, [r7]
 8004cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf4:	f7fc fa02 	bl	80010fc <actuator_motor4>

		cnt_motor=0;
		stall=0;
	}*/

}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	2000070c 	.word	0x2000070c
 8004d04:	3f5db3d7 	.word	0x3f5db3d7
 8004d08:	3e3426c8 	.word	0x3e3426c8
 8004d0c:	200006fc 	.word	0x200006fc
 8004d10:	bf3504f3 	.word	0xbf3504f3
 8004d14:	3f3504f3 	.word	0x3f3504f3
 8004d18:	20000700 	.word	0x20000700
 8004d1c:	20000704 	.word	0x20000704
 8004d20:	20000708 	.word	0x20000708
 8004d24:	47ae147b 	.word	0x47ae147b
 8004d28:	3fb47ae1 	.word	0x3fb47ae1

08004d2c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d32:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <MX_SPI1_Init+0x78>)
 8004d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d3e:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d44:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004d4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d4c:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d58:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004d60:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d62:	2230      	movs	r2, #48	; 0x30
 8004d64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004d78:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d86:	2208      	movs	r2, #8
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d8a:	4805      	ldr	r0, [pc, #20]	; (8004da0 <MX_SPI1_Init+0x74>)
 8004d8c:	f004 fe46 	bl	8009a1c <HAL_SPI_Init>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004d96:	f7ff fea1 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000768 	.word	0x20000768
 8004da4:	40013000 	.word	0x40013000

08004da8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	60da      	str	r2, [r3, #12]
 8004dbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_SPI_MspInit+0x7c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d128      	bne.n	8004e1c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004dca:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <HAL_SPI_MspInit+0x80>)
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <HAL_SPI_MspInit+0x80>)
 8004dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <HAL_SPI_MspInit+0x80>)
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_SPI_MspInit+0x80>)
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <HAL_SPI_MspInit+0x80>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dee:	4b0e      	ldr	r3, [pc, #56]	; (8004e28 <HAL_SPI_MspInit+0x80>)
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004dfa:	23e0      	movs	r3, #224	; 0xe0
 8004dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfe:	2302      	movs	r3, #2
 8004e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e06:	2300      	movs	r3, #0
 8004e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e0a:	2305      	movs	r3, #5
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	4619      	mov	r1, r3
 8004e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e18:	f003 fbe6 	bl	80085e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	3728      	adds	r7, #40	; 0x28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40013000 	.word	0x40013000
 8004e28:	40021000 	.word	0x40021000

08004e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e32:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <HAL_MspInit+0x44>)
 8004e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <HAL_MspInit+0x44>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <HAL_MspInit+0x44>)
 8004e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_MspInit+0x44>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4e:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <HAL_MspInit+0x44>)
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6593      	str	r3, [r2, #88]	; 0x58
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_MspInit+0x44>)
 8004e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004e62:	f003 fe49 	bl	8008af8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000

08004e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e82:	b480      	push	{r7}
 8004e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e86:	e7fe      	b.n	8004e86 <HardFault_Handler+0x4>

08004e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e8c:	e7fe      	b.n	8004e8c <MemManage_Handler+0x4>

08004e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e92:	e7fe      	b.n	8004e92 <BusFault_Handler+0x4>

08004e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e98:	e7fe      	b.n	8004e98 <UsageFault_Handler+0x4>

08004e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e9e:	bf00      	nop
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ec8:	f000 fd62 	bl	8005990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ecc:	bf00      	nop
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ed4:	4802      	ldr	r0, [pc, #8]	; (8004ee0 <DMA1_Channel1_IRQHandler+0x10>)
 8004ed6:	f002 fbbc 	bl	8007652 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000a18 	.word	0x20000a18

08004ee4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004ee8:	4802      	ldr	r0, [pc, #8]	; (8004ef4 <DMA1_Channel2_IRQHandler+0x10>)
 8004eea:	f002 fbb2 	bl	8007652 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000a78 	.word	0x20000a78

08004ef8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004efc:	4802      	ldr	r0, [pc, #8]	; (8004f08 <DMA1_Channel3_IRQHandler+0x10>)
 8004efe:	f002 fba8 	bl	8007652 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200003a4 	.word	0x200003a4

08004f0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004f10:	4802      	ldr	r0, [pc, #8]	; (8004f1c <DMA1_Channel4_IRQHandler+0x10>)
 8004f12:	f002 fb9e 	bl	8007652 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000404 	.word	0x20000404

08004f20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f24:	4802      	ldr	r0, [pc, #8]	; (8004f30 <DMA1_Channel5_IRQHandler+0x10>)
 8004f26:	f002 fb94 	bl	8007652 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20000344 	.word	0x20000344

08004f34 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004f38:	4802      	ldr	r0, [pc, #8]	; (8004f44 <FDCAN1_IT0_IRQHandler+0x10>)
 8004f3a:	f003 f8cb 	bl	80080d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000468 	.word	0x20000468

08004f48 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <FDCAN1_IT1_IRQHandler+0x10>)
 8004f4e:	f003 f8c1 	bl	80080d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000468 	.word	0x20000468

08004f5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8004f60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004f64:	f003 fd0c 	bl	8008980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004f68:	bf00      	nop
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f70:	4802      	ldr	r0, [pc, #8]	; (8004f7c <USART2_IRQHandler+0x10>)
 8004f72:	f006 fc7b 	bl	800b86c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200008f8 	.word	0x200008f8

08004f80 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004f84:	4802      	ldr	r0, [pc, #8]	; (8004f90 <TIM7_DAC_IRQHandler+0x10>)
 8004f86:	f005 fba5 	bl	800a6d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000081c 	.word	0x2000081c

08004f94 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004f98:	4802      	ldr	r0, [pc, #8]	; (8004fa4 <FDCAN2_IT0_IRQHandler+0x10>)
 8004f9a:	f003 f89b 	bl	80080d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	200004cc 	.word	0x200004cc

08004fa8 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004fac:	4802      	ldr	r0, [pc, #8]	; (8004fb8 <FDCAN2_IT1_IRQHandler+0x10>)
 8004fae:	f003 f891 	bl	80080d4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200004cc 	.word	0x200004cc

08004fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
	return 1;
 8004fc0:	2301      	movs	r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <_kill>:

int _kill(int pid, int sig)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fd6:	f007 ffdd 	bl	800cf94 <__errno>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2216      	movs	r2, #22
 8004fde:	601a      	str	r2, [r3, #0]
	return -1;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <_exit>:

void _exit (int status)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ffe7 	bl	8004fcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ffe:	e7fe      	b.n	8004ffe <_exit+0x12>

08005000 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e00a      	b.n	8005028 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005012:	f3af 8000 	nop.w
 8005016:	4601      	mov	r1, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	60ba      	str	r2, [r7, #8]
 800501e:	b2ca      	uxtb	r2, r1
 8005020:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	3301      	adds	r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	dbf0      	blt.n	8005012 <_read+0x12>
	}

return len;
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e009      	b.n	8005060 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	60ba      	str	r2, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7fd ff31 	bl	8002ebc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	429a      	cmp	r2, r3
 8005066:	dbf1      	blt.n	800504c <_write+0x12>
	}
	return len;
 8005068:	687b      	ldr	r3, [r7, #4]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <_close>:

int _close(int file)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
	return -1;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800509a:	605a      	str	r2, [r3, #4]
	return 0;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <_isatty>:

int _isatty(int file)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
	return 1;
 80050b2:	2301      	movs	r3, #1
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
	return 0;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <_sbrk+0x50>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <_sbrk+0x16>
		heap_end = &end;
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <_sbrk+0x50>)
 80050ee:	4a10      	ldr	r2, [pc, #64]	; (8005130 <_sbrk+0x54>)
 80050f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <_sbrk+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <_sbrk+0x50>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	466a      	mov	r2, sp
 8005102:	4293      	cmp	r3, r2
 8005104:	d907      	bls.n	8005116 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005106:	f007 ff45 	bl	800cf94 <__errno>
 800510a:	4603      	mov	r3, r0
 800510c:	220c      	movs	r2, #12
 800510e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	e006      	b.n	8005124 <_sbrk+0x48>
	}

	heap_end += incr;
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <_sbrk+0x50>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	4a03      	ldr	r2, [pc, #12]	; (800512c <_sbrk+0x50>)
 8005120:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005122:	68fb      	ldr	r3, [r7, #12]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	200007cc 	.word	0x200007cc
 8005130:	20000af0 	.word	0x20000af0

08005134 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005138:	4b08      	ldr	r3, [pc, #32]	; (800515c <SystemInit+0x28>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513e:	4a07      	ldr	r2, [pc, #28]	; (800515c <SystemInit+0x28>)
 8005140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <SystemInit+0x28>)
 800514a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800514e:	609a      	str	r2, [r3, #8]
#endif
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005166:	f107 031c 	add.w	r3, r7, #28
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005172:	463b      	mov	r3, r7
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	611a      	str	r2, [r3, #16]
 8005180:	615a      	str	r2, [r3, #20]
 8005182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <MX_TIM5_Init+0xac>)
 8005186:	4a22      	ldr	r2, [pc, #136]	; (8005210 <MX_TIM5_Init+0xb0>)
 8005188:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170;
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <MX_TIM5_Init+0xac>)
 800518c:	22aa      	movs	r2, #170	; 0xaa
 800518e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005190:	4b1e      	ldr	r3, [pc, #120]	; (800520c <MX_TIM5_Init+0xac>)
 8005192:	2200      	movs	r2, #0
 8005194:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500;
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <MX_TIM5_Init+0xac>)
 8005198:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800519c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <MX_TIM5_Init+0xac>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <MX_TIM5_Init+0xac>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80051aa:	4818      	ldr	r0, [pc, #96]	; (800520c <MX_TIM5_Init+0xac>)
 80051ac:	f005 f928 	bl	800a400 <HAL_TIM_PWM_Init>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80051b6:	f7ff fc91 	bl	8004adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051be:	2300      	movs	r3, #0
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80051c2:	f107 031c 	add.w	r3, r7, #28
 80051c6:	4619      	mov	r1, r3
 80051c8:	4810      	ldr	r0, [pc, #64]	; (800520c <MX_TIM5_Init+0xac>)
 80051ca:	f006 f937 	bl	800b43c <HAL_TIMEx_MasterConfigSynchronization>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80051d4:	f7ff fc82 	bl	8004adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051d8:	2360      	movs	r3, #96	; 0x60
 80051da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051e8:	463b      	mov	r3, r7
 80051ea:	2204      	movs	r2, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4807      	ldr	r0, [pc, #28]	; (800520c <MX_TIM5_Init+0xac>)
 80051f0:	f005 fbf0 	bl	800a9d4 <HAL_TIM_PWM_ConfigChannel>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80051fa:	f7ff fc6f 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80051fe:	4803      	ldr	r0, [pc, #12]	; (800520c <MX_TIM5_Init+0xac>)
 8005200:	f000 f884 	bl	800530c <HAL_TIM_MspPostInit>

}
 8005204:	bf00      	nop
 8005206:	3728      	adds	r7, #40	; 0x28
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200007d0 	.word	0x200007d0
 8005210:	40000c00 	.word	0x40000c00

08005214 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005224:	4b14      	ldr	r3, [pc, #80]	; (8005278 <MX_TIM7_Init+0x64>)
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <MX_TIM7_Init+0x68>)
 8005228:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170;
 800522a:	4b13      	ldr	r3, [pc, #76]	; (8005278 <MX_TIM7_Init+0x64>)
 800522c:	22aa      	movs	r2, #170	; 0xaa
 800522e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005230:	4b11      	ldr	r3, [pc, #68]	; (8005278 <MX_TIM7_Init+0x64>)
 8005232:	2200      	movs	r2, #0
 8005234:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <MX_TIM7_Init+0x64>)
 8005238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800523c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800523e:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <MX_TIM7_Init+0x64>)
 8005240:	2200      	movs	r2, #0
 8005242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005244:	480c      	ldr	r0, [pc, #48]	; (8005278 <MX_TIM7_Init+0x64>)
 8005246:	f005 f80b 	bl	800a260 <HAL_TIM_Base_Init>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005250:	f7ff fc44 	bl	8004adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005254:	2300      	movs	r3, #0
 8005256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4805      	ldr	r0, [pc, #20]	; (8005278 <MX_TIM7_Init+0x64>)
 8005262:	f006 f8eb 	bl	800b43c <HAL_TIMEx_MasterConfigSynchronization>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800526c:	f7ff fc36 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	2000081c 	.word	0x2000081c
 800527c:	40001400 	.word	0x40001400

08005280 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_TIM_PWM_MspInit+0x38>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10b      	bne.n	80052aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <HAL_TIM_PWM_MspInit+0x3c>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <HAL_TIM_PWM_MspInit+0x3c>)
 8005298:	f043 0308 	orr.w	r3, r3, #8
 800529c:	6593      	str	r3, [r2, #88]	; 0x58
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <HAL_TIM_PWM_MspInit+0x3c>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40000c00 	.word	0x40000c00
 80052bc:	40021000 	.word	0x40021000

080052c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0d      	ldr	r2, [pc, #52]	; (8005304 <HAL_TIM_Base_MspInit+0x44>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d113      	bne.n	80052fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052d2:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <HAL_TIM_Base_MspInit+0x48>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	4a0c      	ldr	r2, [pc, #48]	; (8005308 <HAL_TIM_Base_MspInit+0x48>)
 80052d8:	f043 0320 	orr.w	r3, r3, #32
 80052dc:	6593      	str	r3, [r2, #88]	; 0x58
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_TIM_Base_MspInit+0x48>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2108      	movs	r1, #8
 80052ee:	2037      	movs	r0, #55	; 0x37
 80052f0:	f001 ff97 	bl	8007222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80052f4:	2037      	movs	r0, #55	; 0x37
 80052f6:	f001 ffae 	bl	8007256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40001400 	.word	0x40001400
 8005308:	40021000 	.word	0x40021000

0800530c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005314:	f107 030c 	add.w	r3, r7, #12
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a11      	ldr	r2, [pc, #68]	; (8005370 <HAL_TIM_MspPostInit+0x64>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d11c      	bne.n	8005368 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800532e:	4b11      	ldr	r3, [pc, #68]	; (8005374 <HAL_TIM_MspPostInit+0x68>)
 8005330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005332:	4a10      	ldr	r2, [pc, #64]	; (8005374 <HAL_TIM_MspPostInit+0x68>)
 8005334:	f043 0304 	orr.w	r3, r3, #4
 8005338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800533a:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <HAL_TIM_MspPostInit+0x68>)
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	60bb      	str	r3, [r7, #8]
 8005344:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8005346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800534a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005354:	2300      	movs	r3, #0
 8005356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005358:	2301      	movs	r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800535c:	f107 030c 	add.w	r3, r7, #12
 8005360:	4619      	mov	r1, r3
 8005362:	4805      	ldr	r0, [pc, #20]	; (8005378 <HAL_TIM_MspPostInit+0x6c>)
 8005364:	f003 f940 	bl	80085e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8005368:	bf00      	nop
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40021000 	.word	0x40021000
 8005378:	48000800 	.word	0x48000800

0800537c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005380:	4b23      	ldr	r3, [pc, #140]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 8005382:	4a24      	ldr	r2, [pc, #144]	; (8005414 <MX_LPUART1_UART_Init+0x98>)
 8005384:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 8005388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800538c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800538e:	4b20      	ldr	r3, [pc, #128]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 8005390:	2200      	movs	r2, #0
 8005392:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 8005396:	2200      	movs	r2, #0
 8005398:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800539a:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 800539c:	2200      	movs	r2, #0
 800539e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053a2:	220c      	movs	r2, #12
 80053a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053a6:	4b1a      	ldr	r3, [pc, #104]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ac:	4b18      	ldr	r3, [pc, #96]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053b2:	4b17      	ldr	r3, [pc, #92]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80053b8:	4b15      	ldr	r3, [pc, #84]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053ba:	2220      	movs	r2, #32
 80053bc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80053c6:	4812      	ldr	r0, [pc, #72]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053c8:	f006 f914 	bl	800b5f4 <HAL_UART_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 80053d2:	f7ff fb83 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053d6:	2100      	movs	r1, #0
 80053d8:	480d      	ldr	r0, [pc, #52]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053da:	f007 fd11 	bl	800ce00 <HAL_UARTEx_SetTxFifoThreshold>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 80053e4:	f7ff fb7a 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053e8:	2100      	movs	r1, #0
 80053ea:	4809      	ldr	r0, [pc, #36]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053ec:	f007 fd46 	bl	800ce7c <HAL_UARTEx_SetRxFifoThreshold>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 80053f6:	f7ff fb71 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <MX_LPUART1_UART_Init+0x94>)
 80053fc:	f007 fcc7 	bl	800cd8e <HAL_UARTEx_DisableFifoMode>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8005406:	f7ff fb69 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000868 	.word	0x20000868
 8005414:	40008000 	.word	0x40008000

08005418 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800541c:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800541e:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <MX_USART2_UART_Init+0x9c>)
 8005420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8005422:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 8005424:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800542a:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800542c:	2200      	movs	r2, #0
 800542e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005430:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 8005432:	2200      	movs	r2, #0
 8005434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005436:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 8005438:	2200      	movs	r2, #0
 800543a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800543e:	220c      	movs	r2, #12
 8005440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 8005444:	2200      	movs	r2, #0
 8005446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005448:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800544a:	2200      	movs	r2, #0
 800544c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 8005450:	2200      	movs	r2, #0
 8005452:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005454:	4b16      	ldr	r3, [pc, #88]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 8005456:	2200      	movs	r2, #0
 8005458:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800545c:	2208      	movs	r2, #8
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005460:	4b13      	ldr	r3, [pc, #76]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 8005462:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005468:	4811      	ldr	r0, [pc, #68]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800546a:	f006 f8c3 	bl	800b5f4 <HAL_UART_Init>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8005474:	f7ff fb32 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005478:	2100      	movs	r1, #0
 800547a:	480d      	ldr	r0, [pc, #52]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800547c:	f007 fcc0 	bl	800ce00 <HAL_UARTEx_SetTxFifoThreshold>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8005486:	f7ff fb29 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800548a:	2100      	movs	r1, #0
 800548c:	4808      	ldr	r0, [pc, #32]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800548e:	f007 fcf5 	bl	800ce7c <HAL_UARTEx_SetRxFifoThreshold>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8005498:	f7ff fb20 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800549c:	4804      	ldr	r0, [pc, #16]	; (80054b0 <MX_USART2_UART_Init+0x98>)
 800549e:	f007 fc76 	bl	800cd8e <HAL_UARTEx_DisableFifoMode>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 80054a8:	f7ff fb18 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054ac:	bf00      	nop
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	200008f8 	.word	0x200008f8
 80054b4:	40004400 	.word	0x40004400

080054b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80054bc:	4b22      	ldr	r3, [pc, #136]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054be:	4a23      	ldr	r2, [pc, #140]	; (800554c <MX_USART3_UART_Init+0x94>)
 80054c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80054c2:	4b21      	ldr	r3, [pc, #132]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80054ca:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80054d0:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80054d6:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054d8:	2200      	movs	r2, #0
 80054da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054de:	220c      	movs	r2, #12
 80054e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054e2:	4b19      	ldr	r3, [pc, #100]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80054e8:	4b17      	ldr	r3, [pc, #92]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054ee:	4b16      	ldr	r3, [pc, #88]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054f4:	4b14      	ldr	r3, [pc, #80]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <MX_USART3_UART_Init+0x90>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005500:	4811      	ldr	r0, [pc, #68]	; (8005548 <MX_USART3_UART_Init+0x90>)
 8005502:	f006 f877 	bl	800b5f4 <HAL_UART_Init>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800550c:	f7ff fae6 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005510:	2100      	movs	r1, #0
 8005512:	480d      	ldr	r0, [pc, #52]	; (8005548 <MX_USART3_UART_Init+0x90>)
 8005514:	f007 fc74 	bl	800ce00 <HAL_UARTEx_SetTxFifoThreshold>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800551e:	f7ff fadd 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005522:	2100      	movs	r1, #0
 8005524:	4808      	ldr	r0, [pc, #32]	; (8005548 <MX_USART3_UART_Init+0x90>)
 8005526:	f007 fca9 	bl	800ce7c <HAL_UARTEx_SetRxFifoThreshold>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005530:	f7ff fad4 	bl	8004adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005534:	4804      	ldr	r0, [pc, #16]	; (8005548 <MX_USART3_UART_Init+0x90>)
 8005536:	f007 fc2a 	bl	800cd8e <HAL_UARTEx_DisableFifoMode>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005540:	f7ff facc 	bl	8004adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005544:	bf00      	nop
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000988 	.word	0x20000988
 800554c:	40004800 	.word	0x40004800

08005550 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b0a2      	sub	sp, #136	; 0x88
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005558:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005568:	f107 0320 	add.w	r3, r7, #32
 800556c:	2254      	movs	r2, #84	; 0x54
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f007 fd39 	bl	800cfe8 <memset>
  if(uartHandle->Instance==LPUART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a8b      	ldr	r2, [pc, #556]	; (80057a8 <HAL_UART_MspInit+0x258>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d139      	bne.n	80055f4 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005580:	2320      	movs	r3, #32
 8005582:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005584:	2300      	movs	r3, #0
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005588:	f107 0320 	add.w	r3, r7, #32
 800558c:	4618      	mov	r0, r3
 800558e:	f003 fff7 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005598:	f7ff faa0 	bl	8004adc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800559c:	4b83      	ldr	r3, [pc, #524]	; (80057ac <HAL_UART_MspInit+0x25c>)
 800559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a0:	4a82      	ldr	r2, [pc, #520]	; (80057ac <HAL_UART_MspInit+0x25c>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80055a8:	4b80      	ldr	r3, [pc, #512]	; (80057ac <HAL_UART_MspInit+0x25c>)
 80055aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055b4:	4b7d      	ldr	r3, [pc, #500]	; (80057ac <HAL_UART_MspInit+0x25c>)
 80055b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b8:	4a7c      	ldr	r2, [pc, #496]	; (80057ac <HAL_UART_MspInit+0x25c>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055c0:	4b7a      	ldr	r3, [pc, #488]	; (80057ac <HAL_UART_MspInit+0x25c>)
 80055c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055cc:	230c      	movs	r3, #12
 80055ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80055de:	230c      	movs	r3, #12
 80055e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80055e8:	4619      	mov	r1, r3
 80055ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055ee:	f002 fffb 	bl	80085e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80055f2:	e0d5      	b.n	80057a0 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART2)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a6d      	ldr	r2, [pc, #436]	; (80057b0 <HAL_UART_MspInit+0x260>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d169      	bne.n	80056d2 <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80055fe:	2302      	movs	r3, #2
 8005600:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005602:	2300      	movs	r3, #0
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005606:	f107 0320 	add.w	r3, r7, #32
 800560a:	4618      	mov	r0, r3
 800560c:	f003 ffb8 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8005616:	f7ff fa61 	bl	8004adc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800561a:	4b64      	ldr	r3, [pc, #400]	; (80057ac <HAL_UART_MspInit+0x25c>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	4a63      	ldr	r2, [pc, #396]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005624:	6593      	str	r3, [r2, #88]	; 0x58
 8005626:	4b61      	ldr	r3, [pc, #388]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005632:	4b5e      	ldr	r3, [pc, #376]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005636:	4a5d      	ldr	r2, [pc, #372]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800563e:	4b5b      	ldr	r3, [pc, #364]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 800564a:	2318      	movs	r3, #24
 800564c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564e:	2302      	movs	r3, #2
 8005650:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005656:	2300      	movs	r3, #0
 8005658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800565c:	2307      	movs	r3, #7
 800565e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005662:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005666:	4619      	mov	r1, r3
 8005668:	4852      	ldr	r0, [pc, #328]	; (80057b4 <HAL_UART_MspInit+0x264>)
 800566a:	f002 ffbd 	bl	80085e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800566e:	4b52      	ldr	r3, [pc, #328]	; (80057b8 <HAL_UART_MspInit+0x268>)
 8005670:	4a52      	ldr	r2, [pc, #328]	; (80057bc <HAL_UART_MspInit+0x26c>)
 8005672:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005674:	4b50      	ldr	r3, [pc, #320]	; (80057b8 <HAL_UART_MspInit+0x268>)
 8005676:	221a      	movs	r2, #26
 8005678:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800567a:	4b4f      	ldr	r3, [pc, #316]	; (80057b8 <HAL_UART_MspInit+0x268>)
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005680:	4b4d      	ldr	r3, [pc, #308]	; (80057b8 <HAL_UART_MspInit+0x268>)
 8005682:	2200      	movs	r2, #0
 8005684:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005686:	4b4c      	ldr	r3, [pc, #304]	; (80057b8 <HAL_UART_MspInit+0x268>)
 8005688:	2280      	movs	r2, #128	; 0x80
 800568a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800568c:	4b4a      	ldr	r3, [pc, #296]	; (80057b8 <HAL_UART_MspInit+0x268>)
 800568e:	2200      	movs	r2, #0
 8005690:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005692:	4b49      	ldr	r3, [pc, #292]	; (80057b8 <HAL_UART_MspInit+0x268>)
 8005694:	2200      	movs	r2, #0
 8005696:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005698:	4b47      	ldr	r3, [pc, #284]	; (80057b8 <HAL_UART_MspInit+0x268>)
 800569a:	2220      	movs	r2, #32
 800569c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800569e:	4b46      	ldr	r3, [pc, #280]	; (80057b8 <HAL_UART_MspInit+0x268>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80056a4:	4844      	ldr	r0, [pc, #272]	; (80057b8 <HAL_UART_MspInit+0x268>)
 80056a6:	f001 fdf1 	bl	800728c <HAL_DMA_Init>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_UART_MspInit+0x164>
      Error_Handler();
 80056b0:	f7ff fa14 	bl	8004adc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a40      	ldr	r2, [pc, #256]	; (80057b8 <HAL_UART_MspInit+0x268>)
 80056b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80056ba:	4a3f      	ldr	r2, [pc, #252]	; (80057b8 <HAL_UART_MspInit+0x268>)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 80056c0:	2200      	movs	r2, #0
 80056c2:	210c      	movs	r1, #12
 80056c4:	2026      	movs	r0, #38	; 0x26
 80056c6:	f001 fdac 	bl	8007222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80056ca:	2026      	movs	r0, #38	; 0x26
 80056cc:	f001 fdc3 	bl	8007256 <HAL_NVIC_EnableIRQ>
}
 80056d0:	e066      	b.n	80057a0 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3a      	ldr	r2, [pc, #232]	; (80057c0 <HAL_UART_MspInit+0x270>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d161      	bne.n	80057a0 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80056dc:	2304      	movs	r3, #4
 80056de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80056e0:	2300      	movs	r3, #0
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056e4:	f107 0320 	add.w	r3, r7, #32
 80056e8:	4618      	mov	r0, r3
 80056ea:	f003 ff49 	bl	8009580 <HAL_RCCEx_PeriphCLKConfig>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80056f4:	f7ff f9f2 	bl	8004adc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80056f8:	4b2c      	ldr	r3, [pc, #176]	; (80057ac <HAL_UART_MspInit+0x25c>)
 80056fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fc:	4a2b      	ldr	r2, [pc, #172]	; (80057ac <HAL_UART_MspInit+0x25c>)
 80056fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005702:	6593      	str	r3, [r2, #88]	; 0x58
 8005704:	4b29      	ldr	r3, [pc, #164]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005710:	4b26      	ldr	r3, [pc, #152]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005714:	4a25      	ldr	r2, [pc, #148]	; (80057ac <HAL_UART_MspInit+0x25c>)
 8005716:	f043 0304 	orr.w	r3, r3, #4
 800571a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800571c:	4b23      	ldr	r3, [pc, #140]	; (80057ac <HAL_UART_MspInit+0x25c>)
 800571e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8005728:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800572c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572e:	2302      	movs	r3, #2
 8005730:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005732:	2300      	movs	r3, #0
 8005734:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005736:	2300      	movs	r3, #0
 8005738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800573c:	2307      	movs	r3, #7
 800573e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005742:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005746:	4619      	mov	r1, r3
 8005748:	481e      	ldr	r0, [pc, #120]	; (80057c4 <HAL_UART_MspInit+0x274>)
 800574a:	f002 ff4d 	bl	80085e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 800574e:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_UART_MspInit+0x27c>)
 8005752:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005754:	4b1c      	ldr	r3, [pc, #112]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005756:	221c      	movs	r2, #28
 8005758:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800575a:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <HAL_UART_MspInit+0x278>)
 800575c:	2200      	movs	r2, #0
 800575e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005760:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005762:	2200      	movs	r2, #0
 8005764:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005766:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005768:	2280      	movs	r2, #128	; 0x80
 800576a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800576c:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <HAL_UART_MspInit+0x278>)
 800576e:	2200      	movs	r2, #0
 8005770:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005774:	2200      	movs	r2, #0
 8005776:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <HAL_UART_MspInit+0x278>)
 800577a:	2220      	movs	r2, #32
 800577c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005780:	2200      	movs	r2, #0
 8005782:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005784:	4810      	ldr	r0, [pc, #64]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005786:	f001 fd81 	bl	800728c <HAL_DMA_Init>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_UART_MspInit+0x244>
      Error_Handler();
 8005790:	f7ff f9a4 	bl	8004adc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <HAL_UART_MspInit+0x278>)
 8005798:	67da      	str	r2, [r3, #124]	; 0x7c
 800579a:	4a0b      	ldr	r2, [pc, #44]	; (80057c8 <HAL_UART_MspInit+0x278>)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6293      	str	r3, [r2, #40]	; 0x28
}
 80057a0:	bf00      	nop
 80057a2:	3788      	adds	r7, #136	; 0x88
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	40008000 	.word	0x40008000
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40004400 	.word	0x40004400
 80057b4:	48000400 	.word	0x48000400
 80057b8:	20000a18 	.word	0x20000a18
 80057bc:	40020008 	.word	0x40020008
 80057c0:	40004800 	.word	0x40004800
 80057c4:	48000800 	.word	0x48000800
 80057c8:	20000a78 	.word	0x20000a78
 80057cc:	4002001c 	.word	0x4002001c

080057d0 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	789b      	ldrb	r3, [r3, #2]
 80057e8:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	78db      	ldrb	r3, [r3, #3]
 80057ee:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	ee07 3a90 	vmov	s15, r3
}
 80057f6:	eeb0 0a67 	vmov.f32	s0, s15
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	ed87 0a00 	vstr	s0, [r7]
    Float_char4 tmp;
    tmp.float_value=float_value;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	60fb      	str	r3, [r7, #12]
    value[0]=tmp.char4_value[0];
 8005814:	7b3a      	ldrb	r2, [r7, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	701a      	strb	r2, [r3, #0]
    value[1]=tmp.char4_value[1];
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3301      	adds	r3, #1
 800581e:	7b7a      	ldrb	r2, [r7, #13]
 8005820:	701a      	strb	r2, [r3, #0]
    value[2]=tmp.char4_value[2];
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3302      	adds	r3, #2
 8005826:	7bba      	ldrb	r2, [r7, #14]
 8005828:	701a      	strb	r2, [r3, #0]
    value[3]=tmp.char4_value[3];
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3303      	adds	r3, #3
 800582e:	7bfa      	ldrb	r2, [r7, #15]
 8005830:	701a      	strb	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <xprintf_init>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/


void xprintf_init(UART_HandleTypeDef *handler){
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	huart_xprintf = handler;
 8005848:	4a05      	ldr	r2, [pc, #20]	; (8005860 <xprintf_init+0x20>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6013      	str	r3, [r2, #0]
	xdev_out(uart_putc);
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <xprintf_init+0x24>)
 8005850:	4a05      	ldr	r2, [pc, #20]	; (8005868 <xprintf_init+0x28>)
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	20000764 	.word	0x20000764
 8005864:	20000ad8 	.word	0x20000ad8
 8005868:	0800586d 	.word	0x0800586d

0800586c <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
	 char buf[1];
	 buf[0] = c;
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 800587a:	4b06      	ldr	r3, [pc, #24]	; (8005894 <uart_putc+0x28>)
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	f107 010c 	add.w	r1, r7, #12
 8005882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005886:	2201      	movs	r2, #1
 8005888:	f005 ff04 	bl	800b694 <HAL_UART_Transmit>
	}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000764 	.word	0x20000764

08005898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005898:	480d      	ldr	r0, [pc, #52]	; (80058d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800589a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800589c:	480d      	ldr	r0, [pc, #52]	; (80058d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800589e:	490e      	ldr	r1, [pc, #56]	; (80058d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058a0:	4a0e      	ldr	r2, [pc, #56]	; (80058dc <LoopForever+0xe>)
  movs r3, #0
 80058a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80058a4:	e002      	b.n	80058ac <LoopCopyDataInit>

080058a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058aa:	3304      	adds	r3, #4

080058ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058b0:	d3f9      	bcc.n	80058a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058b2:	4a0b      	ldr	r2, [pc, #44]	; (80058e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058b4:	4c0b      	ldr	r4, [pc, #44]	; (80058e4 <LoopForever+0x16>)
  movs r3, #0
 80058b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058b8:	e001      	b.n	80058be <LoopFillZerobss>

080058ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058bc:	3204      	adds	r2, #4

080058be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058c0:	d3fb      	bcc.n	80058ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058c2:	f7ff fc37 	bl	8005134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058c6:	f007 fb6b 	bl	800cfa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058ca:	f7fd fb15 	bl	8002ef8 <main>

080058ce <LoopForever>:

LoopForever:
    b LoopForever
 80058ce:	e7fe      	b.n	80058ce <LoopForever>
  ldr   r0, =_estack
 80058d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80058d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80058dc:	080102c4 	.word	0x080102c4
  ldr r2, =_sbss
 80058e0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80058e4:	20000af0 	.word	0x20000af0

080058e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058e8:	e7fe      	b.n	80058e8 <ADC1_2_IRQHandler>

080058ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058f4:	2003      	movs	r0, #3
 80058f6:	f001 fc89 	bl	800720c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058fa:	2000      	movs	r0, #0
 80058fc:	f000 f80e 	bl	800591c <HAL_InitTick>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	71fb      	strb	r3, [r7, #7]
 800590a:	e001      	b.n	8005910 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800590c:	f7ff fa8e 	bl	8004e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005910:	79fb      	ldrb	r3, [r7, #7]

}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005928:	4b16      	ldr	r3, [pc, #88]	; (8005984 <HAL_InitTick+0x68>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d022      	beq.n	8005976 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005930:	4b15      	ldr	r3, [pc, #84]	; (8005988 <HAL_InitTick+0x6c>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <HAL_InitTick+0x68>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800593c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	4618      	mov	r0, r3
 8005946:	f001 fc94 	bl	8007272 <HAL_SYSTICK_Config>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10f      	bne.n	8005970 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b0f      	cmp	r3, #15
 8005954:	d809      	bhi.n	800596a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005956:	2200      	movs	r2, #0
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	f04f 30ff 	mov.w	r0, #4294967295
 800595e:	f001 fc60 	bl	8007222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005962:	4a0a      	ldr	r2, [pc, #40]	; (800598c <HAL_InitTick+0x70>)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e007      	b.n	800597a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
 800596e:	e004      	b.n	800597a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e001      	b.n	800597a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000010 	.word	0x20000010
 8005988:	20000008 	.word	0x20000008
 800598c:	2000000c 	.word	0x2000000c

08005990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_IncTick+0x1c>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_IncTick+0x20>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4413      	add	r3, r2
 800599e:	4a03      	ldr	r2, [pc, #12]	; (80059ac <HAL_IncTick+0x1c>)
 80059a0:	6013      	str	r3, [r2, #0]
}
 80059a2:	bf00      	nop
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	20000adc 	.word	0x20000adc
 80059b0:	20000010 	.word	0x20000010

080059b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059bc:	f7fd fa90 	bl	8002ee0 <HAL_GetTick>
 80059c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d004      	beq.n	80059d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <HAL_Delay+0x40>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059d8:	bf00      	nop
 80059da:	f7fd fa81 	bl	8002ee0 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d8f7      	bhi.n	80059da <HAL_Delay+0x26>
  {
  }
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	20000010 	.word	0x20000010

080059f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	609a      	str	r2, [r3, #8]
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3360      	adds	r3, #96	; 0x60
 8005a72:	461a      	mov	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <LL_ADC_SetOffset+0x44>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005a98:	bf00      	nop
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	03fff000 	.word	0x03fff000

08005aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3360      	adds	r3, #96	; 0x60
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3360      	adds	r3, #96	; 0x60
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b087      	sub	sp, #28
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3360      	adds	r3, #96	; 0x60
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005b34:	bf00      	nop
 8005b36:	371c      	adds	r7, #28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3360      	adds	r3, #96	; 0x60
 8005b50:	461a      	mov	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	615a      	str	r2, [r3, #20]
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b087      	sub	sp, #28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3330      	adds	r3, #48	; 0x30
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	f003 030c 	and.w	r3, r3, #12
 8005bde:	4413      	add	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	211f      	movs	r1, #31
 8005bee:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	401a      	ands	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0e9b      	lsrs	r3, r3, #26
 8005bfa:	f003 011f 	and.w	r1, r3, #31
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	0e5b      	lsrs	r3, r3, #25
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	4413      	add	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	0d1b      	lsrs	r3, r3, #20
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2107      	movs	r1, #7
 8005c48:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	0d1b      	lsrs	r3, r3, #20
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005c64:	bf00      	nop
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0f      	ldr	r2, [pc, #60]	; (8005cbc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10a      	bne.n	8005c9a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8005c98:	e00a      	b.n	8005cb0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	401a      	ands	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	407f0000 	.word	0x407f0000

08005cc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 031f 	and.w	r3, r3, #31
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005cec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6093      	str	r3, [r2, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d14:	d101      	bne.n	8005d1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d64:	d101      	bne.n	8005d6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <LL_ADC_IsEnabled+0x18>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <LL_ADC_IsEnabled+0x1a>
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005dda:	f043 0204 	orr.w	r2, r3, #4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d101      	bne.n	8005e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d101      	bne.n	8005e2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e1af      	b.n	80061b6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7fb fb8b 	bl	8001580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff ff3f 	bl	8005d00 <LL_ADC_IsDeepPowerDownEnabled>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff25 	bl	8005cdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff ff5a 	bl	8005d50 <LL_ADC_IsInternalRegulatorEnabled>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d115      	bne.n	8005ece <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff ff3e 	bl	8005d28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005eac:	4b9f      	ldr	r3, [pc, #636]	; (800612c <HAL_ADC_Init+0x2f0>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	4a9f      	ldr	r2, [pc, #636]	; (8006130 <HAL_ADC_Init+0x2f4>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	3301      	adds	r3, #1
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ec0:	e002      	b.n	8005ec8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f9      	bne.n	8005ec2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff ff3c 	bl	8005d50 <LL_ADC_IsInternalRegulatorEnabled>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee2:	f043 0210 	orr.w	r2, r3, #16
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eee:	f043 0201 	orr.w	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff ff75 	bl	8005dee <LL_ADC_REG_IsConversionOngoing>
 8005f04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 8148 	bne.w	80061a4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f040 8144 	bne.w	80061a4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005f24:	f043 0202 	orr.w	r2, r3, #2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff ff35 	bl	8005da0 <LL_ADC_IsEnabled>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d141      	bne.n	8005fc0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f44:	d004      	beq.n	8005f50 <HAL_ADC_Init+0x114>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a7a      	ldr	r2, [pc, #488]	; (8006134 <HAL_ADC_Init+0x2f8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10f      	bne.n	8005f70 <HAL_ADC_Init+0x134>
 8005f50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005f54:	f7ff ff24 	bl	8005da0 <LL_ADC_IsEnabled>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	4876      	ldr	r0, [pc, #472]	; (8006134 <HAL_ADC_Init+0x2f8>)
 8005f5c:	f7ff ff20 	bl	8005da0 <LL_ADC_IsEnabled>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4323      	orrs	r3, r4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e012      	b.n	8005f96 <HAL_ADC_Init+0x15a>
 8005f70:	4871      	ldr	r0, [pc, #452]	; (8006138 <HAL_ADC_Init+0x2fc>)
 8005f72:	f7ff ff15 	bl	8005da0 <LL_ADC_IsEnabled>
 8005f76:	4604      	mov	r4, r0
 8005f78:	4870      	ldr	r0, [pc, #448]	; (800613c <HAL_ADC_Init+0x300>)
 8005f7a:	f7ff ff11 	bl	8005da0 <LL_ADC_IsEnabled>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	431c      	orrs	r4, r3
 8005f82:	486f      	ldr	r0, [pc, #444]	; (8006140 <HAL_ADC_Init+0x304>)
 8005f84:	f7ff ff0c 	bl	8005da0 <LL_ADC_IsEnabled>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	4323      	orrs	r3, r4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d012      	beq.n	8005fc0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fa2:	d004      	beq.n	8005fae <HAL_ADC_Init+0x172>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a62      	ldr	r2, [pc, #392]	; (8006134 <HAL_ADC_Init+0x2f8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d101      	bne.n	8005fb2 <HAL_ADC_Init+0x176>
 8005fae:	4a65      	ldr	r2, [pc, #404]	; (8006144 <HAL_ADC_Init+0x308>)
 8005fb0:	e000      	b.n	8005fb4 <HAL_ADC_Init+0x178>
 8005fb2:	4a65      	ldr	r2, [pc, #404]	; (8006148 <HAL_ADC_Init+0x30c>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f7ff fd1c 	bl	80059f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	7f5b      	ldrb	r3, [r3, #29]
 8005fc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005fca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005fd0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005fd6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fde:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d106      	bne.n	8005ffc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	045b      	lsls	r3, r3, #17
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d009      	beq.n	8006018 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	4b4b      	ldr	r3, [pc, #300]	; (800614c <HAL_ADC_Init+0x310>)
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	430b      	orrs	r3, r1
 800602a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fed1 	bl	8005dee <LL_ADC_REG_IsConversionOngoing>
 800604c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fede 	bl	8005e14 <LL_ADC_INJ_IsConversionOngoing>
 8006058:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d17f      	bne.n	8006160 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d17c      	bne.n	8006160 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800606a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006072:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006074:	4313      	orrs	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006082:	f023 0302 	bic.w	r3, r3, #2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6812      	ldr	r2, [r2, #0]
 800608a:	69b9      	ldr	r1, [r7, #24]
 800608c:	430b      	orrs	r3, r1
 800608e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80060a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6911      	ldr	r1, [r2, #16]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	430b      	orrs	r3, r1
 80060c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80060c6:	e013      	b.n	80060f0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6812      	ldr	r2, [r2, #0]
 80060e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d12a      	bne.n	8006150 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006110:	4311      	orrs	r1, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006116:	4311      	orrs	r1, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800611c:	430a      	orrs	r2, r1
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	611a      	str	r2, [r3, #16]
 800612a:	e019      	b.n	8006160 <HAL_ADC_Init+0x324>
 800612c:	20000008 	.word	0x20000008
 8006130:	053e2d63 	.word	0x053e2d63
 8006134:	50000100 	.word	0x50000100
 8006138:	50000400 	.word	0x50000400
 800613c:	50000500 	.word	0x50000500
 8006140:	50000600 	.word	0x50000600
 8006144:	50000300 	.word	0x50000300
 8006148:	50000700 	.word	0x50000700
 800614c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d10c      	bne.n	8006182 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f023 010f 	bic.w	r1, r3, #15
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	1e5a      	subs	r2, r3, #1
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
 8006180:	e007      	b.n	8006192 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 020f 	bic.w	r2, r2, #15
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80061a2:	e007      	b.n	80061b4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f043 0210 	orr.w	r2, r3, #16
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3724      	adds	r7, #36	; 0x24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd90      	pop	{r4, r7, pc}
 80061be:	bf00      	nop

080061c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061d4:	d004      	beq.n	80061e0 <HAL_ADC_Start_DMA+0x20>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a5a      	ldr	r2, [pc, #360]	; (8006344 <HAL_ADC_Start_DMA+0x184>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_ADC_Start_DMA+0x24>
 80061e0:	4b59      	ldr	r3, [pc, #356]	; (8006348 <HAL_ADC_Start_DMA+0x188>)
 80061e2:	e000      	b.n	80061e6 <HAL_ADC_Start_DMA+0x26>
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <HAL_ADC_Start_DMA+0x18c>)
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff fd6a 	bl	8005cc0 <LL_ADC_GetMultimode>
 80061ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fdfb 	bl	8005dee <LL_ADC_REG_IsConversionOngoing>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 809b 	bne.w	8006336 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_ADC_Start_DMA+0x4e>
 800620a:	2302      	movs	r3, #2
 800620c:	e096      	b.n	800633c <HAL_ADC_Start_DMA+0x17c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a4d      	ldr	r2, [pc, #308]	; (8006350 <HAL_ADC_Start_DMA+0x190>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d008      	beq.n	8006232 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b05      	cmp	r3, #5
 800622a:	d002      	beq.n	8006232 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b09      	cmp	r3, #9
 8006230:	d17a      	bne.n	8006328 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fcf6 	bl	8006c24 <ADC_Enable>
 8006238:	4603      	mov	r3, r0
 800623a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d16d      	bne.n	800631e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3a      	ldr	r2, [pc, #232]	; (8006344 <HAL_ADC_Start_DMA+0x184>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_ADC_Start_DMA+0xb4>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a3b      	ldr	r2, [pc, #236]	; (8006354 <HAL_ADC_Start_DMA+0x194>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d002      	beq.n	8006270 <HAL_ADC_Start_DMA+0xb0>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	e003      	b.n	8006278 <HAL_ADC_Start_DMA+0xb8>
 8006270:	4b39      	ldr	r3, [pc, #228]	; (8006358 <HAL_ADC_Start_DMA+0x198>)
 8006272:	e001      	b.n	8006278 <HAL_ADC_Start_DMA+0xb8>
 8006274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	4293      	cmp	r3, r2
 800627e:	d002      	beq.n	8006286 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d006      	beq.n	80062ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	f023 0206 	bic.w	r2, r3, #6
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
 80062aa:	e002      	b.n	80062b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	4a29      	ldr	r2, [pc, #164]	; (800635c <HAL_ADC_Start_DMA+0x19c>)
 80062b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	4a28      	ldr	r2, [pc, #160]	; (8006360 <HAL_ADC_Start_DMA+0x1a0>)
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	4a27      	ldr	r2, [pc, #156]	; (8006364 <HAL_ADC_Start_DMA+0x1a4>)
 80062c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	221c      	movs	r2, #28
 80062d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0210 	orr.w	r2, r2, #16
 80062e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3340      	adds	r3, #64	; 0x40
 8006304:	4619      	mov	r1, r3
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f001 f867 	bl	80073dc <HAL_DMA_Start_IT>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff fd55 	bl	8005dc6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800631c:	e00d      	b.n	800633a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006326:	e008      	b.n	800633a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006334:	e001      	b.n	800633a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800633a:	7dfb      	ldrb	r3, [r7, #23]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	50000100 	.word	0x50000100
 8006348:	50000300 	.word	0x50000300
 800634c:	50000700 	.word	0x50000700
 8006350:	50000600 	.word	0x50000600
 8006354:	50000500 	.word	0x50000500
 8006358:	50000400 	.word	0x50000400
 800635c:	08006ce9 	.word	0x08006ce9
 8006360:	08006dc1 	.word	0x08006dc1
 8006364:	08006ddd 	.word	0x08006ddd

08006368 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b0b6      	sub	sp, #216	; 0xd8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d102      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x24>
 80063c2:	2302      	movs	r3, #2
 80063c4:	f000 bc13 	b.w	8006bee <HAL_ADC_ConfigChannel+0x84a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fd0a 	bl	8005dee <LL_ADC_REG_IsConversionOngoing>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 83f3 	bne.w	8006bc8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f7ff fbe7 	bl	8005bc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fcf8 	bl	8005dee <LL_ADC_REG_IsConversionOngoing>
 80063fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fd04 	bl	8005e14 <LL_ADC_INJ_IsConversionOngoing>
 800640c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006410:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 81d9 	bne.w	80067cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800641a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 81d4 	bne.w	80067cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800642c:	d10f      	bne.n	800644e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	4619      	mov	r1, r3
 800643a:	f7ff fbee 	bl	8005c1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff fb95 	bl	8005b76 <LL_ADC_SetSamplingTimeCommonConfig>
 800644c:	e00e      	b.n	800646c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6819      	ldr	r1, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	461a      	mov	r2, r3
 800645c:	f7ff fbdd 	bl	8005c1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff fb85 	bl	8005b76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	695a      	ldr	r2, [r3, #20]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d022      	beq.n	80064d4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6919      	ldr	r1, [r3, #16]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800649e:	f7ff fadf 	bl	8005a60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6919      	ldr	r1, [r3, #16]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	461a      	mov	r2, r3
 80064b0:	f7ff fb2b 	bl	8005b0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6919      	ldr	r1, [r3, #16]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	7f1b      	ldrb	r3, [r3, #28]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d102      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x126>
 80064c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064c8:	e000      	b.n	80064cc <HAL_ADC_ConfigChannel+0x128>
 80064ca:	2300      	movs	r3, #0
 80064cc:	461a      	mov	r2, r3
 80064ce:	f7ff fb37 	bl	8005b40 <LL_ADC_SetOffsetSaturation>
 80064d2:	e17b      	b.n	80067cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff fae4 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x15c>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2100      	movs	r1, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fad9 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 80064f6:	4603      	mov	r3, r0
 80064f8:	0e9b      	lsrs	r3, r3, #26
 80064fa:	f003 021f 	and.w	r2, r3, #31
 80064fe:	e01e      	b.n	800653e <HAL_ADC_ConfigChannel+0x19a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2100      	movs	r1, #0
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff face 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 800650c:	4603      	mov	r3, r0
 800650e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006516:	fa93 f3a3 	rbit	r3, r3
 800651a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800651e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800652e:	2320      	movs	r3, #32
 8006530:	e004      	b.n	800653c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006536:	fab3 f383 	clz	r3, r3
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006546:	2b00      	cmp	r3, #0
 8006548:	d105      	bne.n	8006556 <HAL_ADC_ConfigChannel+0x1b2>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	0e9b      	lsrs	r3, r3, #26
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	e018      	b.n	8006588 <HAL_ADC_ConfigChannel+0x1e4>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006562:	fa93 f3a3 	rbit	r3, r3
 8006566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800656a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800656e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800657a:	2320      	movs	r3, #32
 800657c:	e004      	b.n	8006588 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800657e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006582:	fab3 f383 	clz	r3, r3
 8006586:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006588:	429a      	cmp	r2, r3
 800658a:	d106      	bne.n	800659a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff fa9d 	bl	8005ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2101      	movs	r1, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fa81 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <HAL_ADC_ConfigChannel+0x222>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fa76 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 80065bc:	4603      	mov	r3, r0
 80065be:	0e9b      	lsrs	r3, r3, #26
 80065c0:	f003 021f 	and.w	r2, r3, #31
 80065c4:	e01e      	b.n	8006604 <HAL_ADC_ConfigChannel+0x260>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2101      	movs	r1, #1
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff fa6b 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065dc:	fa93 f3a3 	rbit	r3, r3
 80065e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80065e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80065ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80065f4:	2320      	movs	r3, #32
 80065f6:	e004      	b.n	8006602 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80065f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065fc:	fab3 f383 	clz	r3, r3
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <HAL_ADC_ConfigChannel+0x278>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	0e9b      	lsrs	r3, r3, #26
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	e018      	b.n	800664e <HAL_ADC_ConfigChannel+0x2aa>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006628:	fa93 f3a3 	rbit	r3, r3
 800662c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006630:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006640:	2320      	movs	r3, #32
 8006642:	e004      	b.n	800664e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006648:	fab3 f383 	clz	r3, r3
 800664c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800664e:	429a      	cmp	r2, r3
 8006650:	d106      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	2101      	movs	r1, #1
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff fa3a 	bl	8005ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2102      	movs	r1, #2
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fa1e 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 800666c:	4603      	mov	r3, r0
 800666e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <HAL_ADC_ConfigChannel+0x2e8>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2102      	movs	r1, #2
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fa13 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 8006682:	4603      	mov	r3, r0
 8006684:	0e9b      	lsrs	r3, r3, #26
 8006686:	f003 021f 	and.w	r2, r3, #31
 800668a:	e01e      	b.n	80066ca <HAL_ADC_ConfigChannel+0x326>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2102      	movs	r1, #2
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fa08 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 8006698:	4603      	mov	r3, r0
 800669a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066a2:	fa93 f3a3 	rbit	r3, r3
 80066a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80066aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80066b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80066ba:	2320      	movs	r3, #32
 80066bc:	e004      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80066be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066c2:	fab3 f383 	clz	r3, r3
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_ADC_ConfigChannel+0x33e>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	0e9b      	lsrs	r3, r3, #26
 80066dc:	f003 031f 	and.w	r3, r3, #31
 80066e0:	e016      	b.n	8006710 <HAL_ADC_ConfigChannel+0x36c>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066ee:	fa93 f3a3 	rbit	r3, r3
 80066f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80066f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80066fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006702:	2320      	movs	r3, #32
 8006704:	e004      	b.n	8006710 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800670a:	fab3 f383 	clz	r3, r3
 800670e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006710:	429a      	cmp	r2, r3
 8006712:	d106      	bne.n	8006722 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2200      	movs	r2, #0
 800671a:	2102      	movs	r1, #2
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff f9d9 	bl	8005ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2103      	movs	r1, #3
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff f9bd 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 800672e:	4603      	mov	r3, r0
 8006730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <HAL_ADC_ConfigChannel+0x3aa>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2103      	movs	r1, #3
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff f9b2 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 8006744:	4603      	mov	r3, r0
 8006746:	0e9b      	lsrs	r3, r3, #26
 8006748:	f003 021f 	and.w	r2, r3, #31
 800674c:	e017      	b.n	800677e <HAL_ADC_ConfigChannel+0x3da>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2103      	movs	r1, #3
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff f9a7 	bl	8005aa8 <LL_ADC_GetOffsetChannel>
 800675a:	4603      	mov	r3, r0
 800675c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006760:	fa93 f3a3 	rbit	r3, r3
 8006764:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006768:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800676a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006770:	2320      	movs	r3, #32
 8006772:	e003      	b.n	800677c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <HAL_ADC_ConfigChannel+0x3f2>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	0e9b      	lsrs	r3, r3, #26
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	e011      	b.n	80067ba <HAL_ADC_ConfigChannel+0x416>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800679e:	fa93 f3a3 	rbit	r3, r3
 80067a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80067a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80067a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80067ae:	2320      	movs	r3, #32
 80067b0:	e003      	b.n	80067ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80067b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b4:	fab3 f383 	clz	r3, r3
 80067b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d106      	bne.n	80067cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2103      	movs	r1, #3
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff f984 	bl	8005ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff fae5 	bl	8005da0 <LL_ADC_IsEnabled>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f040 813d 	bne.w	8006a58 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6819      	ldr	r1, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f7ff fa40 	bl	8005c70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4aa2      	ldr	r2, [pc, #648]	; (8006a80 <HAL_ADC_ConfigChannel+0x6dc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	f040 812e 	bne.w	8006a58 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10b      	bne.n	8006824 <HAL_ADC_ConfigChannel+0x480>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	0e9b      	lsrs	r3, r3, #26
 8006812:	3301      	adds	r3, #1
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b09      	cmp	r3, #9
 800681a:	bf94      	ite	ls
 800681c:	2301      	movls	r3, #1
 800681e:	2300      	movhi	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	e019      	b.n	8006858 <HAL_ADC_ConfigChannel+0x4b4>
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800682c:	fa93 f3a3 	rbit	r3, r3
 8006830:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006834:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800683c:	2320      	movs	r3, #32
 800683e:	e003      	b.n	8006848 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006842:	fab3 f383 	clz	r3, r3
 8006846:	b2db      	uxtb	r3, r3
 8006848:	3301      	adds	r3, #1
 800684a:	f003 031f 	and.w	r3, r3, #31
 800684e:	2b09      	cmp	r3, #9
 8006850:	bf94      	ite	ls
 8006852:	2301      	movls	r3, #1
 8006854:	2300      	movhi	r3, #0
 8006856:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006858:	2b00      	cmp	r3, #0
 800685a:	d079      	beq.n	8006950 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006864:	2b00      	cmp	r3, #0
 8006866:	d107      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x4d4>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	0e9b      	lsrs	r3, r3, #26
 800686e:	3301      	adds	r3, #1
 8006870:	069b      	lsls	r3, r3, #26
 8006872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006876:	e015      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x500>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006880:	fa93 f3a3 	rbit	r3, r3
 8006884:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006888:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800688a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006890:	2320      	movs	r3, #32
 8006892:	e003      	b.n	800689c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006896:	fab3 f383 	clz	r3, r3
 800689a:	b2db      	uxtb	r3, r3
 800689c:	3301      	adds	r3, #1
 800689e:	069b      	lsls	r3, r3, #26
 80068a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d109      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x520>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	0e9b      	lsrs	r3, r3, #26
 80068b6:	3301      	adds	r3, #1
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	e017      	b.n	80068f4 <HAL_ADC_ConfigChannel+0x550>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068cc:	fa93 f3a3 	rbit	r3, r3
 80068d0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80068d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80068dc:	2320      	movs	r3, #32
 80068de:	e003      	b.n	80068e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80068e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e2:	fab3 f383 	clz	r3, r3
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	3301      	adds	r3, #1
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	2101      	movs	r1, #1
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	ea42 0103 	orr.w	r1, r2, r3
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <HAL_ADC_ConfigChannel+0x576>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	0e9b      	lsrs	r3, r3, #26
 800690a:	3301      	adds	r3, #1
 800690c:	f003 021f 	and.w	r2, r3, #31
 8006910:	4613      	mov	r3, r2
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	4413      	add	r3, r2
 8006916:	051b      	lsls	r3, r3, #20
 8006918:	e018      	b.n	800694c <HAL_ADC_ConfigChannel+0x5a8>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	fa93 f3a3 	rbit	r3, r3
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006932:	2320      	movs	r3, #32
 8006934:	e003      	b.n	800693e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006938:	fab3 f383 	clz	r3, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	3301      	adds	r3, #1
 8006940:	f003 021f 	and.w	r2, r3, #31
 8006944:	4613      	mov	r3, r2
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	4413      	add	r3, r2
 800694a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800694c:	430b      	orrs	r3, r1
 800694e:	e07e      	b.n	8006a4e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <HAL_ADC_ConfigChannel+0x5c8>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	0e9b      	lsrs	r3, r3, #26
 8006962:	3301      	adds	r3, #1
 8006964:	069b      	lsls	r3, r3, #26
 8006966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800696a:	e015      	b.n	8006998 <HAL_ADC_ConfigChannel+0x5f4>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006974:	fa93 f3a3 	rbit	r3, r3
 8006978:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006984:	2320      	movs	r3, #32
 8006986:	e003      	b.n	8006990 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	fab3 f383 	clz	r3, r3
 800698e:	b2db      	uxtb	r3, r3
 8006990:	3301      	adds	r3, #1
 8006992:	069b      	lsls	r3, r3, #26
 8006994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <HAL_ADC_ConfigChannel+0x614>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	0e9b      	lsrs	r3, r3, #26
 80069aa:	3301      	adds	r3, #1
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	2101      	movs	r1, #1
 80069b2:	fa01 f303 	lsl.w	r3, r1, r3
 80069b6:	e017      	b.n	80069e8 <HAL_ADC_ConfigChannel+0x644>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	fa93 f3a3 	rbit	r3, r3
 80069c4:	61fb      	str	r3, [r7, #28]
  return result;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80069d0:	2320      	movs	r3, #32
 80069d2:	e003      	b.n	80069dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	fab3 f383 	clz	r3, r3
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	3301      	adds	r3, #1
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2101      	movs	r1, #1
 80069e4:	fa01 f303 	lsl.w	r3, r1, r3
 80069e8:	ea42 0103 	orr.w	r1, r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10d      	bne.n	8006a14 <HAL_ADC_ConfigChannel+0x670>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	0e9b      	lsrs	r3, r3, #26
 80069fe:	3301      	adds	r3, #1
 8006a00:	f003 021f 	and.w	r2, r3, #31
 8006a04:	4613      	mov	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	4413      	add	r3, r2
 8006a0a:	3b1e      	subs	r3, #30
 8006a0c:	051b      	lsls	r3, r3, #20
 8006a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a12:	e01b      	b.n	8006a4c <HAL_ADC_ConfigChannel+0x6a8>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	fa93 f3a3 	rbit	r3, r3
 8006a20:	613b      	str	r3, [r7, #16]
  return result;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	e003      	b.n	8006a38 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	fab3 f383 	clz	r3, r3
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	3301      	adds	r3, #1
 8006a3a:	f003 021f 	and.w	r2, r3, #31
 8006a3e:	4613      	mov	r3, r2
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	4413      	add	r3, r2
 8006a44:	3b1e      	subs	r3, #30
 8006a46:	051b      	lsls	r3, r3, #20
 8006a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	6892      	ldr	r2, [r2, #8]
 8006a52:	4619      	mov	r1, r3
 8006a54:	f7ff f8e1 	bl	8005c1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_ADC_ConfigChannel+0x6e0>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80be 	beq.w	8006be2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a6e:	d004      	beq.n	8006a7a <HAL_ADC_ConfigChannel+0x6d6>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <HAL_ADC_ConfigChannel+0x6e4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d10a      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x6ec>
 8006a7a:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <HAL_ADC_ConfigChannel+0x6e8>)
 8006a7c:	e009      	b.n	8006a92 <HAL_ADC_ConfigChannel+0x6ee>
 8006a7e:	bf00      	nop
 8006a80:	407f0000 	.word	0x407f0000
 8006a84:	80080000 	.word	0x80080000
 8006a88:	50000100 	.word	0x50000100
 8006a8c:	50000300 	.word	0x50000300
 8006a90:	4b59      	ldr	r3, [pc, #356]	; (8006bf8 <HAL_ADC_ConfigChannel+0x854>)
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe ffd6 	bl	8005a44 <LL_ADC_GetCommonPathInternalCh>
 8006a98:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a56      	ldr	r2, [pc, #344]	; (8006bfc <HAL_ADC_ConfigChannel+0x858>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d004      	beq.n	8006ab0 <HAL_ADC_ConfigChannel+0x70c>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a55      	ldr	r2, [pc, #340]	; (8006c00 <HAL_ADC_ConfigChannel+0x85c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d13a      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d134      	bne.n	8006b26 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ac4:	d005      	beq.n	8006ad2 <HAL_ADC_ConfigChannel+0x72e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a4e      	ldr	r2, [pc, #312]	; (8006c04 <HAL_ADC_ConfigChannel+0x860>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	f040 8085 	bne.w	8006bdc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ada:	d004      	beq.n	8006ae6 <HAL_ADC_ConfigChannel+0x742>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a49      	ldr	r2, [pc, #292]	; (8006c08 <HAL_ADC_ConfigChannel+0x864>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d101      	bne.n	8006aea <HAL_ADC_ConfigChannel+0x746>
 8006ae6:	4a49      	ldr	r2, [pc, #292]	; (8006c0c <HAL_ADC_ConfigChannel+0x868>)
 8006ae8:	e000      	b.n	8006aec <HAL_ADC_ConfigChannel+0x748>
 8006aea:	4a43      	ldr	r2, [pc, #268]	; (8006bf8 <HAL_ADC_ConfigChannel+0x854>)
 8006aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006af0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe ff91 	bl	8005a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006afc:	4b44      	ldr	r3, [pc, #272]	; (8006c10 <HAL_ADC_ConfigChannel+0x86c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	099b      	lsrs	r3, r3, #6
 8006b02:	4a44      	ldr	r2, [pc, #272]	; (8006c14 <HAL_ADC_ConfigChannel+0x870>)
 8006b04:	fba2 2303 	umull	r2, r3, r2, r3
 8006b08:	099b      	lsrs	r3, r3, #6
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006b16:	e002      	b.n	8006b1e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f9      	bne.n	8006b18 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b24:	e05a      	b.n	8006bdc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a3b      	ldr	r2, [pc, #236]	; (8006c18 <HAL_ADC_ConfigChannel+0x874>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d125      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x7d8>
 8006b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d11f      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a31      	ldr	r2, [pc, #196]	; (8006c08 <HAL_ADC_ConfigChannel+0x864>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d104      	bne.n	8006b50 <HAL_ADC_ConfigChannel+0x7ac>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a34      	ldr	r2, [pc, #208]	; (8006c1c <HAL_ADC_ConfigChannel+0x878>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d047      	beq.n	8006be0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b58:	d004      	beq.n	8006b64 <HAL_ADC_ConfigChannel+0x7c0>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a2a      	ldr	r2, [pc, #168]	; (8006c08 <HAL_ADC_ConfigChannel+0x864>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d101      	bne.n	8006b68 <HAL_ADC_ConfigChannel+0x7c4>
 8006b64:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <HAL_ADC_ConfigChannel+0x868>)
 8006b66:	e000      	b.n	8006b6a <HAL_ADC_ConfigChannel+0x7c6>
 8006b68:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <HAL_ADC_ConfigChannel+0x854>)
 8006b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f7fe ff52 	bl	8005a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b7a:	e031      	b.n	8006be0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a27      	ldr	r2, [pc, #156]	; (8006c20 <HAL_ADC_ConfigChannel+0x87c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d12d      	bne.n	8006be2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d127      	bne.n	8006be2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1c      	ldr	r2, [pc, #112]	; (8006c08 <HAL_ADC_ConfigChannel+0x864>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d022      	beq.n	8006be2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ba4:	d004      	beq.n	8006bb0 <HAL_ADC_ConfigChannel+0x80c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <HAL_ADC_ConfigChannel+0x864>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d101      	bne.n	8006bb4 <HAL_ADC_ConfigChannel+0x810>
 8006bb0:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <HAL_ADC_ConfigChannel+0x868>)
 8006bb2:	e000      	b.n	8006bb6 <HAL_ADC_ConfigChannel+0x812>
 8006bb4:	4a10      	ldr	r2, [pc, #64]	; (8006bf8 <HAL_ADC_ConfigChannel+0x854>)
 8006bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f7fe ff2c 	bl	8005a1e <LL_ADC_SetCommonPathInternalCh>
 8006bc6:	e00c      	b.n	8006be2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bcc:	f043 0220 	orr.w	r2, r3, #32
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006bda:	e002      	b.n	8006be2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bdc:	bf00      	nop
 8006bde:	e000      	b.n	8006be2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006be0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006bea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	37d8      	adds	r7, #216	; 0xd8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	50000700 	.word	0x50000700
 8006bfc:	c3210000 	.word	0xc3210000
 8006c00:	90c00010 	.word	0x90c00010
 8006c04:	50000600 	.word	0x50000600
 8006c08:	50000100 	.word	0x50000100
 8006c0c:	50000300 	.word	0x50000300
 8006c10:	20000008 	.word	0x20000008
 8006c14:	053e2d63 	.word	0x053e2d63
 8006c18:	c7520000 	.word	0xc7520000
 8006c1c:	50000500 	.word	0x50000500
 8006c20:	cb840000 	.word	0xcb840000

08006c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff f8b5 	bl	8005da0 <LL_ADC_IsEnabled>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d14d      	bne.n	8006cd8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <ADC_Enable+0xc0>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00d      	beq.n	8006c66 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4e:	f043 0210 	orr.w	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5a:	f043 0201 	orr.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e039      	b.n	8006cda <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff f884 	bl	8005d78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006c70:	f7fc f936 	bl	8002ee0 <HAL_GetTick>
 8006c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c76:	e028      	b.n	8006cca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff f88f 	bl	8005da0 <LL_ADC_IsEnabled>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff f873 	bl	8005d78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c92:	f7fc f925 	bl	8002ee0 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d914      	bls.n	8006cca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d00d      	beq.n	8006cca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	f043 0210 	orr.w	r2, r3, #16
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cbe:	f043 0201 	orr.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e007      	b.n	8006cda <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d1cf      	bne.n	8006c78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	8000003f 	.word	0x8000003f

08006ce8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d14b      	bne.n	8006d9a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d021      	beq.n	8006d60 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe ff3b 	bl	8005b9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d032      	beq.n	8006d92 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d12b      	bne.n	8006d92 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d11f      	bne.n	8006d92 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d56:	f043 0201 	orr.w	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d5e:	e018      	b.n	8006d92 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d111      	bne.n	8006d92 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8a:	f043 0201 	orr.w	r2, r3, #1
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff fae8 	bl	8006368 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d98:	e00e      	b.n	8006db8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9e:	f003 0310 	and.w	r3, r3, #16
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff faf2 	bl	8006390 <HAL_ADC_ErrorCallback>
}
 8006dac:	e004      	b.n	8006db8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	4798      	blx	r3
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f7ff fad4 	bl	800637c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dd4:	bf00      	nop
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfa:	f043 0204 	orr.w	r2, r3, #4
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fac4 	bl	8006390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e08:	bf00      	nop
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <LL_ADC_IsEnabled>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <LL_ADC_IsEnabled+0x18>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <LL_ADC_IsEnabled+0x1a>
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <LL_ADC_REG_IsConversionOngoing>:
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0304 	and.w	r3, r3, #4
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d101      	bne.n	8006e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b0a1      	sub	sp, #132	; 0x84
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e0e7      	b.n	800704a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006e82:	2300      	movs	r3, #0
 8006e84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006e86:	2300      	movs	r3, #0
 8006e88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e92:	d102      	bne.n	8006e9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e94:	4b6f      	ldr	r3, [pc, #444]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006e96:	60bb      	str	r3, [r7, #8]
 8006e98:	e009      	b.n	8006eae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6e      	ldr	r2, [pc, #440]	; (8007058 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d102      	bne.n	8006eaa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006ea4:	4b6d      	ldr	r3, [pc, #436]	; (800705c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006ea6:	60bb      	str	r3, [r7, #8]
 8006ea8:	e001      	b.n	8006eae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0be      	b.n	800704a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff ffb1 	bl	8006e36 <LL_ADC_REG_IsConversionOngoing>
 8006ed4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff ffab 	bl	8006e36 <LL_ADC_REG_IsConversionOngoing>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 80a0 	bne.w	8007028 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f040 809c 	bne.w	8007028 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ef8:	d004      	beq.n	8006f04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a55      	ldr	r2, [pc, #340]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d101      	bne.n	8006f08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006f04:	4b56      	ldr	r3, [pc, #344]	; (8007060 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006f06:	e000      	b.n	8006f0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006f08:	4b56      	ldr	r3, [pc, #344]	; (8007064 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006f0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d04b      	beq.n	8006fac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	6859      	ldr	r1, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f26:	035b      	lsls	r3, r3, #13
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f38:	d004      	beq.n	8006f44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a45      	ldr	r2, [pc, #276]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10f      	bne.n	8006f64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006f44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006f48:	f7ff ff62 	bl	8006e10 <LL_ADC_IsEnabled>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4841      	ldr	r0, [pc, #260]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f50:	f7ff ff5e 	bl	8006e10 <LL_ADC_IsEnabled>
 8006f54:	4603      	mov	r3, r0
 8006f56:	4323      	orrs	r3, r4
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf0c      	ite	eq
 8006f5c:	2301      	moveq	r3, #1
 8006f5e:	2300      	movne	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	e012      	b.n	8006f8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006f64:	483c      	ldr	r0, [pc, #240]	; (8007058 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006f66:	f7ff ff53 	bl	8006e10 <LL_ADC_IsEnabled>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	483b      	ldr	r0, [pc, #236]	; (800705c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006f6e:	f7ff ff4f 	bl	8006e10 <LL_ADC_IsEnabled>
 8006f72:	4603      	mov	r3, r0
 8006f74:	431c      	orrs	r4, r3
 8006f76:	483c      	ldr	r0, [pc, #240]	; (8007068 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006f78:	f7ff ff4a 	bl	8006e10 <LL_ADC_IsEnabled>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	4323      	orrs	r3, r4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d056      	beq.n	800703c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006f96:	f023 030f 	bic.w	r3, r3, #15
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	6811      	ldr	r1, [r2, #0]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	6892      	ldr	r2, [r2, #8]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006faa:	e047      	b.n	800703c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fc0:	d004      	beq.n	8006fcc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a23      	ldr	r2, [pc, #140]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d10f      	bne.n	8006fec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006fcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006fd0:	f7ff ff1e 	bl	8006e10 <LL_ADC_IsEnabled>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	481f      	ldr	r0, [pc, #124]	; (8007054 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fd8:	f7ff ff1a 	bl	8006e10 <LL_ADC_IsEnabled>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	4323      	orrs	r3, r4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	e012      	b.n	8007012 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006fec:	481a      	ldr	r0, [pc, #104]	; (8007058 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006fee:	f7ff ff0f 	bl	8006e10 <LL_ADC_IsEnabled>
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4819      	ldr	r0, [pc, #100]	; (800705c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006ff6:	f7ff ff0b 	bl	8006e10 <LL_ADC_IsEnabled>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	431c      	orrs	r4, r3
 8006ffe:	481a      	ldr	r0, [pc, #104]	; (8007068 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007000:	f7ff ff06 	bl	8006e10 <LL_ADC_IsEnabled>
 8007004:	4603      	mov	r3, r0
 8007006:	4323      	orrs	r3, r4
 8007008:	2b00      	cmp	r3, #0
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d012      	beq.n	800703c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800701e:	f023 030f 	bic.w	r3, r3, #15
 8007022:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007024:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007026:	e009      	b.n	800703c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702c:	f043 0220 	orr.w	r2, r3, #32
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800703a:	e000      	b.n	800703e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800703c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007046:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800704a:	4618      	mov	r0, r3
 800704c:	3784      	adds	r7, #132	; 0x84
 800704e:	46bd      	mov	sp, r7
 8007050:	bd90      	pop	{r4, r7, pc}
 8007052:	bf00      	nop
 8007054:	50000100 	.word	0x50000100
 8007058:	50000400 	.word	0x50000400
 800705c:	50000500 	.word	0x50000500
 8007060:	50000300 	.word	0x50000300
 8007064:	50000700 	.word	0x50000700
 8007068:	50000600 	.word	0x50000600

0800706c <__NVIC_SetPriorityGrouping>:
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800707c:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <__NVIC_SetPriorityGrouping+0x44>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007088:	4013      	ands	r3, r2
 800708a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800709c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800709e:	4a04      	ldr	r2, [pc, #16]	; (80070b0 <__NVIC_SetPriorityGrouping+0x44>)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	60d3      	str	r3, [r2, #12]
}
 80070a4:	bf00      	nop
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <__NVIC_GetPriorityGrouping>:
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <__NVIC_GetPriorityGrouping+0x18>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	f003 0307 	and.w	r3, r3, #7
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	e000ed00 	.word	0xe000ed00

080070d0 <__NVIC_EnableIRQ>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	db0b      	blt.n	80070fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	f003 021f 	and.w	r2, r3, #31
 80070e8:	4907      	ldr	r1, [pc, #28]	; (8007108 <__NVIC_EnableIRQ+0x38>)
 80070ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	2001      	movs	r0, #1
 80070f2:	fa00 f202 	lsl.w	r2, r0, r2
 80070f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	e000e100 	.word	0xe000e100

0800710c <__NVIC_SetPriority>:
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711c:	2b00      	cmp	r3, #0
 800711e:	db0a      	blt.n	8007136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	b2da      	uxtb	r2, r3
 8007124:	490c      	ldr	r1, [pc, #48]	; (8007158 <__NVIC_SetPriority+0x4c>)
 8007126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800712a:	0112      	lsls	r2, r2, #4
 800712c:	b2d2      	uxtb	r2, r2
 800712e:	440b      	add	r3, r1
 8007130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007134:	e00a      	b.n	800714c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	b2da      	uxtb	r2, r3
 800713a:	4908      	ldr	r1, [pc, #32]	; (800715c <__NVIC_SetPriority+0x50>)
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	3b04      	subs	r3, #4
 8007144:	0112      	lsls	r2, r2, #4
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	440b      	add	r3, r1
 800714a:	761a      	strb	r2, [r3, #24]
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	e000e100 	.word	0xe000e100
 800715c:	e000ed00 	.word	0xe000ed00

08007160 <NVIC_EncodePriority>:
{
 8007160:	b480      	push	{r7}
 8007162:	b089      	sub	sp, #36	; 0x24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f1c3 0307 	rsb	r3, r3, #7
 800717a:	2b04      	cmp	r3, #4
 800717c:	bf28      	it	cs
 800717e:	2304      	movcs	r3, #4
 8007180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	3304      	adds	r3, #4
 8007186:	2b06      	cmp	r3, #6
 8007188:	d902      	bls.n	8007190 <NVIC_EncodePriority+0x30>
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	3b03      	subs	r3, #3
 800718e:	e000      	b.n	8007192 <NVIC_EncodePriority+0x32>
 8007190:	2300      	movs	r3, #0
 8007192:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	43da      	mvns	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	401a      	ands	r2, r3
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071a8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	fa01 f303 	lsl.w	r3, r1, r3
 80071b2:	43d9      	mvns	r1, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b8:	4313      	orrs	r3, r2
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3724      	adds	r7, #36	; 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071d8:	d301      	bcc.n	80071de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071da:	2301      	movs	r3, #1
 80071dc:	e00f      	b.n	80071fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071de:	4a0a      	ldr	r2, [pc, #40]	; (8007208 <SysTick_Config+0x40>)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071e6:	210f      	movs	r1, #15
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	f7ff ff8e 	bl	800710c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <SysTick_Config+0x40>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <SysTick_Config+0x40>)
 80071f8:	2207      	movs	r2, #7
 80071fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	e000e010 	.word	0xe000e010

0800720c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff ff29 	bl	800706c <__NVIC_SetPriorityGrouping>
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	4603      	mov	r3, r0
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
 800722e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007230:	f7ff ff40 	bl	80070b4 <__NVIC_GetPriorityGrouping>
 8007234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	6978      	ldr	r0, [r7, #20]
 800723c:	f7ff ff90 	bl	8007160 <NVIC_EncodePriority>
 8007240:	4602      	mov	r2, r0
 8007242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff ff5f 	bl	800710c <__NVIC_SetPriority>
}
 800724e:	bf00      	nop
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	4603      	mov	r3, r0
 800725e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff ff33 	bl	80070d0 <__NVIC_EnableIRQ>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff ffa4 	bl	80071c8 <SysTick_Config>
 8007280:	4603      	mov	r3, r0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e08d      	b.n	80073ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	4b47      	ldr	r3, [pc, #284]	; (80073c4 <HAL_DMA_Init+0x138>)
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d80f      	bhi.n	80072ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <HAL_DMA_Init+0x13c>)
 80072b2:	4413      	add	r3, r2
 80072b4:	4a45      	ldr	r2, [pc, #276]	; (80073cc <HAL_DMA_Init+0x140>)
 80072b6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	009a      	lsls	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a42      	ldr	r2, [pc, #264]	; (80073d0 <HAL_DMA_Init+0x144>)
 80072c6:	641a      	str	r2, [r3, #64]	; 0x40
 80072c8:	e00e      	b.n	80072e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	4b40      	ldr	r3, [pc, #256]	; (80073d4 <HAL_DMA_Init+0x148>)
 80072d2:	4413      	add	r3, r2
 80072d4:	4a3d      	ldr	r2, [pc, #244]	; (80073cc <HAL_DMA_Init+0x140>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	009a      	lsls	r2, r3, #2
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a3c      	ldr	r2, [pc, #240]	; (80073d8 <HAL_DMA_Init+0x14c>)
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007302:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800730c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fa76 	bl	800782c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007348:	d102      	bne.n	8007350 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007364:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d010      	beq.n	8007390 <HAL_DMA_Init+0x104>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b04      	cmp	r3, #4
 8007374:	d80c      	bhi.n	8007390 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa96 	bl	80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800738c:	605a      	str	r2, [r3, #4]
 800738e:	e008      	b.n	80073a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40020407 	.word	0x40020407
 80073c8:	bffdfff8 	.word	0xbffdfff8
 80073cc:	cccccccd 	.word	0xcccccccd
 80073d0:	40020000 	.word	0x40020000
 80073d4:	bffdfbf8 	.word	0xbffdfbf8
 80073d8:	40020400 	.word	0x40020400

080073dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_DMA_Start_IT+0x20>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e066      	b.n	80074ca <HAL_DMA_Start_IT+0xee>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b01      	cmp	r3, #1
 800740e:	d155      	bne.n	80074bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0201 	bic.w	r2, r2, #1
 800742c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f9bb 	bl	80077b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	2b00      	cmp	r3, #0
 8007440:	d008      	beq.n	8007454 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 020e 	orr.w	r2, r2, #14
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e00f      	b.n	8007474 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0204 	bic.w	r2, r2, #4
 8007462:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 020a 	orr.w	r2, r2, #10
 8007472:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800748c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007490:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0201 	orr.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	e005      	b.n	80074c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80074c4:	2302      	movs	r3, #2
 80074c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b085      	sub	sp, #20
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d005      	beq.n	80074f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2204      	movs	r2, #4
 80074ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	e037      	b.n	8007566 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 020e 	bic.w	r2, r2, #14
 8007504:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007514:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	f003 021f 	and.w	r2, r3, #31
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2101      	movs	r1, #1
 8007534:	fa01 f202 	lsl.w	r2, r1, r2
 8007538:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007542:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00c      	beq.n	8007566 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800755a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007564:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d00d      	beq.n	80075b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2204      	movs	r2, #4
 80075a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
 80075b6:	e047      	b.n	8007648 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 020e 	bic.w	r2, r2, #14
 80075c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ec:	f003 021f 	and.w	r2, r3, #31
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2101      	movs	r1, #1
 80075f6:	fa01 f202 	lsl.w	r2, r1, r2
 80075fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007604:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00c      	beq.n	8007628 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800761c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007626:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
    }
  }
  return status;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	2204      	movs	r2, #4
 8007674:	409a      	lsls	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4013      	ands	r3, r2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d026      	beq.n	80076cc <HAL_DMA_IRQHandler+0x7a>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d021      	beq.n	80076cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d107      	bne.n	80076a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0204 	bic.w	r2, r2, #4
 80076a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076aa:	f003 021f 	and.w	r2, r3, #31
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2104      	movs	r1, #4
 80076b4:	fa01 f202 	lsl.w	r2, r1, r2
 80076b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d071      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80076ca:	e06c      	b.n	80077a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d0:	f003 031f 	and.w	r3, r3, #31
 80076d4:	2202      	movs	r2, #2
 80076d6:	409a      	lsls	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02e      	beq.n	800773e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d029      	beq.n	800773e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 020a 	bic.w	r2, r2, #10
 8007706:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007714:	f003 021f 	and.w	r2, r3, #31
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	2102      	movs	r1, #2
 800771e:	fa01 f202 	lsl.w	r2, r1, r2
 8007722:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	2b00      	cmp	r3, #0
 8007732:	d038      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800773c:	e033      	b.n	80077a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	2208      	movs	r2, #8
 8007748:	409a      	lsls	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4013      	ands	r3, r2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d02a      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d025      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 020e 	bic.w	r2, r2, #14
 800776a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007770:	f003 021f 	and.w	r2, r3, #31
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	2101      	movs	r1, #1
 800777a:	fa01 f202 	lsl.w	r2, r1, r2
 800777e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
}
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80077d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	f003 021f 	and.w	r2, r3, #31
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	2101      	movs	r1, #1
 80077e8:	fa01 f202 	lsl.w	r2, r1, r2
 80077ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	2b10      	cmp	r3, #16
 80077fc:	d108      	bne.n	8007810 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800780e:	e007      	b.n	8007820 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	60da      	str	r2, [r3, #12]
}
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	4b16      	ldr	r3, [pc, #88]	; (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800783c:	429a      	cmp	r2, r3
 800783e:	d802      	bhi.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007840:	4b15      	ldr	r3, [pc, #84]	; (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e001      	b.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007846:	4b15      	ldr	r3, [pc, #84]	; (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007848:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	3b08      	subs	r3, #8
 8007856:	4a12      	ldr	r2, [pc, #72]	; (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	091b      	lsrs	r3, r3, #4
 800785e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	009a      	lsls	r2, r3, #2
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	4413      	add	r3, r2
 800786c:	461a      	mov	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a0b      	ldr	r2, [pc, #44]	; (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007876:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2201      	movs	r2, #1
 8007880:	409a      	lsls	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	40020407 	.word	0x40020407
 8007898:	40020800 	.word	0x40020800
 800789c:	40020820 	.word	0x40020820
 80078a0:	cccccccd 	.word	0xcccccccd
 80078a4:	40020880 	.word	0x40020880

080078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4b0b      	ldr	r3, [pc, #44]	; (80078e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	461a      	mov	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a08      	ldr	r2, [pc, #32]	; (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80078ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	2201      	movs	r2, #1
 80078d6:	409a      	lsls	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	1000823f 	.word	0x1000823f
 80078ec:	40020940 	.word	0x40020940

080078f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e147      	b.n	8007b92 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007908:	b2db      	uxtb	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d106      	bne.n	800791c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7fa f938 	bl	8001b8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0210 	bic.w	r2, r2, #16
 800792a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800792c:	f7fb fad8 	bl	8002ee0 <HAL_GetTick>
 8007930:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007932:	e012      	b.n	800795a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007934:	f7fb fad4 	bl	8002ee0 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b0a      	cmp	r3, #10
 8007940:	d90b      	bls.n	800795a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007946:	f043 0201 	orr.w	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2203      	movs	r2, #3
 8007952:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e11b      	b.n	8007b92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b08      	cmp	r3, #8
 8007966:	d0e5      	beq.n	8007934 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699a      	ldr	r2, [r3, #24]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0201 	orr.w	r2, r2, #1
 8007976:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007978:	f7fb fab2 	bl	8002ee0 <HAL_GetTick>
 800797c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800797e:	e012      	b.n	80079a6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007980:	f7fb faae 	bl	8002ee0 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b0a      	cmp	r3, #10
 800798c:	d90b      	bls.n	80079a6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007992:	f043 0201 	orr.w	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2203      	movs	r2, #3
 800799e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e0f5      	b.n	8007b92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0e5      	beq.n	8007980 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0202 	orr.w	r2, r2, #2
 80079c2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a74      	ldr	r2, [pc, #464]	; (8007b9c <HAL_FDCAN_Init+0x2ac>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d103      	bne.n	80079d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80079ce:	4a74      	ldr	r2, [pc, #464]	; (8007ba0 <HAL_FDCAN_Init+0x2b0>)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7c1b      	ldrb	r3, [r3, #16]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d108      	bne.n	80079f0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ec:	619a      	str	r2, [r3, #24]
 80079ee:	e007      	b.n	8007a00 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079fe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	7c5b      	ldrb	r3, [r3, #17]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d108      	bne.n	8007a1a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a16:	619a      	str	r2, [r3, #24]
 8007a18:	e007      	b.n	8007a2a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a28:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	7c9b      	ldrb	r3, [r3, #18]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d108      	bne.n	8007a44 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a40:	619a      	str	r2, [r3, #24]
 8007a42:	e007      	b.n	8007a54 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a52:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007a78:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0210 	bic.w	r2, r2, #16
 8007a88:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d108      	bne.n	8007aa4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0204 	orr.w	r2, r2, #4
 8007aa0:	619a      	str	r2, [r3, #24]
 8007aa2:	e02c      	b.n	8007afe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d028      	beq.n	8007afe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d01c      	beq.n	8007aee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0210 	orr.w	r2, r2, #16
 8007ad2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d110      	bne.n	8007afe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0220 	orr.w	r2, r2, #32
 8007aea:	619a      	str	r2, [r3, #24]
 8007aec:	e007      	b.n	8007afe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699a      	ldr	r2, [r3, #24]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f042 0220 	orr.w	r2, r2, #32
 8007afc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	69db      	ldr	r3, [r3, #28]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b0e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007b16:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007b26:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007b28:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b32:	d115      	bne.n	8007b60 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b42:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007b4c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	3b01      	subs	r3, #1
 8007b56:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007b5c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b5e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fc4e 	bl	8008418 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40006400 	.word	0x40006400
 8007ba0:	40006500 	.word	0x40006500

08007ba4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007bb4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d002      	beq.n	8007bc2 <HAL_FDCAN_ConfigFilter+0x1e>
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d13d      	bne.n	8007c3e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d119      	bne.n	8007bfe <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007bd6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007bde:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e01d      	b.n	8007c3a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	075a      	lsls	r2, r3, #29
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	079a      	lsls	r2, r3, #30
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	3304      	adds	r3, #4
 8007c32:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e006      	b.n	8007c4c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c42:	f043 0202 	orr.w	r2, r3, #2
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
  }
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d110      	bne.n	8007c8e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699a      	ldr	r2, [r3, #24]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0201 	bic.w	r2, r2, #1
 8007c82:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e006      	b.n	8007c9c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c92:	f043 0204 	orr.w	r2, r3, #4
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
  }
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d12c      	bne.n	8007d1a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d007      	beq.n	8007ce0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e023      	b.n	8007d28 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007ce8:	0c1b      	lsrs	r3, r3, #16
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	68b9      	ldr	r1, [r7, #8]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fbfa 	bl	80084f0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2101      	movs	r1, #1
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	fa01 f202 	lsl.w	r2, r1, r2
 8007d08:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	409a      	lsls	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e006      	b.n	8007d28 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1e:	f043 0208 	orr.w	r2, r3, #8
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
  }
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b08b      	sub	sp, #44	; 0x2c
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d44:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007d46:	7efb      	ldrb	r3, [r7, #27]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	f040 80bc 	bne.w	8007ec6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b40      	cmp	r3, #64	; 0x40
 8007d52:	d121      	bne.n	8007d98 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d107      	bne.n	8007d74 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e0af      	b.n	8007ed4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	4413      	add	r3, r2
 8007d90:	00db      	lsls	r3, r3, #3
 8007d92:	440b      	add	r3, r1
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
 8007d96:	e020      	b.n	8007dda <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d107      	bne.n	8007db8 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e08d      	b.n	8007ed4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dc0:	0a1b      	lsrs	r3, r3, #8
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007dcc:	69fa      	ldr	r2, [r7, #28]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	440b      	add	r3, r1
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d107      	bne.n	8007dfe <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	0c9b      	lsrs	r3, r3, #18
 8007df4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	e005      	b.n	8007e0a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	3304      	adds	r3, #4
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	0e1b      	lsrs	r3, r3, #24
 8007e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	0fda      	lsrs	r2, r3, #31
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	3304      	adds	r3, #4
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	623b      	str	r3, [r7, #32]
 8007e7c:	e00a      	b.n	8007e94 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	441a      	add	r2, r3
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	440b      	add	r3, r1
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	3301      	adds	r3, #1
 8007e92:	623b      	str	r3, [r7, #32]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	4a11      	ldr	r2, [pc, #68]	; (8007ee0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007e9c:	5cd3      	ldrb	r3, [r2, r3]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d3eb      	bcc.n	8007e7e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b40      	cmp	r3, #64	; 0x40
 8007eaa:	d105      	bne.n	8007eb8 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007eb6:	e004      	b.n	8007ec2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e006      	b.n	8007ed4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eca:	f043 0208 	orr.w	r2, r3, #8
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
  }
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	372c      	adds	r7, #44	; 0x2c
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	0800fea4 	.word	0x0800fea4

08007ee4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8007efa:	68fb      	ldr	r3, [r7, #12]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f1a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d003      	beq.n	8007f2a <HAL_FDCAN_ActivateNotification+0x22>
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	f040 80c8 	bne.w	80080ba <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f30:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d03b      	beq.n	8007fbe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d031      	beq.n	8007fbe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d027      	beq.n	8007fbe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d01d      	beq.n	8007fbe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f003 0310 	and.w	r3, r3, #16
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d013      	beq.n	8007fbe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00c      	beq.n	8007fce <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d107      	bne.n	8007fce <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d13b      	bne.n	800805a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d131      	bne.n	800805a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d004      	beq.n	800800a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d127      	bne.n	800805a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f003 0308 	and.w	r3, r3, #8
 800801a:	2b00      	cmp	r3, #0
 800801c:	d11d      	bne.n	800805a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f003 0310 	and.w	r3, r3, #16
 800802e:	2b00      	cmp	r3, #0
 8008030:	d113      	bne.n	800805a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0202 	orr.w	r2, r2, #2
 8008068:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008070:	2b00      	cmp	r3, #0
 8008072:	d009      	beq.n	8008088 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	430a      	orrs	r2, r1
 8008084:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e006      	b.n	80080c8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080be:	f043 0202 	orr.w	r2, r3, #2
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
  }
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08a      	sub	sp, #40	; 0x28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80080e6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f0:	4013      	ands	r3, r2
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	6a3a      	ldr	r2, [r7, #32]
 8008108:	4013      	ands	r3, r2
 800810a:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008116:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	4013      	ands	r3, r2
 8008122:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800812e:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	4013      	ands	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008142:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8008146:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4013      	ands	r3, r2
 8008152:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d006      	beq.n	800817e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2240      	movs	r2, #64	; 0x40
 8008176:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f92e 	bl	80083da <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01b      	beq.n	80081c4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	2b00      	cmp	r3, #0
 8008198:	d014      	beq.n	80081c4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80081a2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4013      	ands	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80081bc:	6939      	ldr	r1, [r7, #16]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f8ec 	bl	800839c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d007      	beq.n	80081da <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80081d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 f8b6 	bl	8008346 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d007      	beq.n	80081f0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6a3a      	ldr	r2, [r7, #32]
 80081e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80081e8:	6a39      	ldr	r1, [r7, #32]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fb fb58 	bl	80038a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80081fe:	69f9      	ldr	r1, [r7, #28]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f8ab 	bl	800835c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00e      	beq.n	8008232 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800822a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f8a0 	bl	8008372 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01a      	beq.n	8008276 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008256:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	4013      	ands	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2280      	movs	r2, #128	; 0x80
 800826c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f888 	bl	8008386 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00e      	beq.n	80082a2 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d007      	beq.n	80082a2 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800829a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f888 	bl	80083b2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00e      	beq.n	80082ce <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d007      	beq.n	80082ce <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80082c6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f87c 	bl	80083c6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d011      	beq.n	8008300 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800830e:	6979      	ldr	r1, [r7, #20]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f876 	bl	8008402 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d009      	beq.n	8008330 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f858 	bl	80083ee <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800833e:	bf00      	nop
 8008340:	3728      	adds	r7, #40	; 0x28
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b083      	sub	sp, #12
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008420:	4b30      	ldr	r3, [pc, #192]	; (80084e4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008422:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a2f      	ldr	r2, [pc, #188]	; (80084e8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d103      	bne.n	8008436 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008434:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a2c      	ldr	r2, [pc, #176]	; (80084ec <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d103      	bne.n	8008448 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008446:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008456:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	041a      	lsls	r2, r3, #16
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800847c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	061a      	lsls	r2, r3, #24
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e005      	b.n	80084ca <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3304      	adds	r3, #4
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d3f3      	bcc.n	80084be <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	4000a400 	.word	0x4000a400
 80084e8:	40006800 	.word	0x40006800
 80084ec:	40006c00 	.word	0x40006c00

080084f0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b089      	sub	sp, #36	; 0x24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10a      	bne.n	800851c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800850e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008516:	4313      	orrs	r3, r2
 8008518:	61fb      	str	r3, [r7, #28]
 800851a:	e00a      	b.n	8008532 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008524:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800852a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800852c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008530:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800853c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008542:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008548:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800854e:	4313      	orrs	r3, r2
 8008550:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4613      	mov	r3, r2
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	4413      	add	r3, r2
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	440b      	add	r3, r1
 8008562:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	3304      	adds	r3, #4
 800856e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	3304      	adds	r3, #4
 800857a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	e020      	b.n	80085c4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	3303      	adds	r3, #3
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	3302      	adds	r3, #2
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	440b      	add	r3, r1
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800859a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	3301      	adds	r3, #1
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	440b      	add	r3, r1
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80085a8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	440a      	add	r2, r1
 80085b0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80085b2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	3304      	adds	r3, #4
 80085bc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	3304      	adds	r3, #4
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	0c1b      	lsrs	r3, r3, #16
 80085ca:	4a06      	ldr	r2, [pc, #24]	; (80085e4 <FDCAN_CopyMessageToRAM+0xf4>)
 80085cc:	5cd3      	ldrb	r3, [r2, r3]
 80085ce:	461a      	mov	r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d3d5      	bcc.n	8008582 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80085d6:	bf00      	nop
 80085d8:	bf00      	nop
 80085da:	3724      	adds	r7, #36	; 0x24
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	0800fea4 	.word	0x0800fea4

080085e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80085f6:	e15a      	b.n	80088ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	2101      	movs	r1, #1
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	fa01 f303 	lsl.w	r3, r1, r3
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 814c 	beq.w	80088a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f003 0303 	and.w	r3, r3, #3
 8008618:	2b01      	cmp	r3, #1
 800861a:	d005      	beq.n	8008628 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008624:	2b02      	cmp	r3, #2
 8008626:	d130      	bne.n	800868a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	2203      	movs	r2, #3
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	43db      	mvns	r3, r3
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4013      	ands	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800865e:	2201      	movs	r2, #1
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	43db      	mvns	r3, r3
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	4013      	ands	r3, r2
 800866c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	091b      	lsrs	r3, r3, #4
 8008674:	f003 0201 	and.w	r2, r3, #1
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	fa02 f303 	lsl.w	r3, r2, r3
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b03      	cmp	r3, #3
 8008694:	d017      	beq.n	80086c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	2203      	movs	r2, #3
 80086a2:	fa02 f303 	lsl.w	r3, r2, r3
 80086a6:	43db      	mvns	r3, r3
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4013      	ands	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d123      	bne.n	800871a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	08da      	lsrs	r2, r3, #3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3208      	adds	r2, #8
 80086da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f003 0307 	and.w	r3, r3, #7
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	220f      	movs	r2, #15
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	43db      	mvns	r3, r3
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	4013      	ands	r3, r2
 80086f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	691a      	ldr	r2, [r3, #16]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f003 0307 	and.w	r3, r3, #7
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	08da      	lsrs	r2, r3, #3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3208      	adds	r2, #8
 8008714:	6939      	ldr	r1, [r7, #16]
 8008716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	005b      	lsls	r3, r3, #1
 8008724:	2203      	movs	r2, #3
 8008726:	fa02 f303 	lsl.w	r3, r2, r3
 800872a:	43db      	mvns	r3, r3
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4013      	ands	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f003 0203 	and.w	r2, r3, #3
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	fa02 f303 	lsl.w	r3, r2, r3
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	4313      	orrs	r3, r2
 8008746:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 80a6 	beq.w	80088a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800875c:	4b5b      	ldr	r3, [pc, #364]	; (80088cc <HAL_GPIO_Init+0x2e4>)
 800875e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008760:	4a5a      	ldr	r2, [pc, #360]	; (80088cc <HAL_GPIO_Init+0x2e4>)
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	6613      	str	r3, [r2, #96]	; 0x60
 8008768:	4b58      	ldr	r3, [pc, #352]	; (80088cc <HAL_GPIO_Init+0x2e4>)
 800876a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	60bb      	str	r3, [r7, #8]
 8008772:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008774:	4a56      	ldr	r2, [pc, #344]	; (80088d0 <HAL_GPIO_Init+0x2e8>)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	089b      	lsrs	r3, r3, #2
 800877a:	3302      	adds	r3, #2
 800877c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008780:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	220f      	movs	r2, #15
 800878c:	fa02 f303 	lsl.w	r3, r2, r3
 8008790:	43db      	mvns	r3, r3
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	4013      	ands	r3, r2
 8008796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800879e:	d01f      	beq.n	80087e0 <HAL_GPIO_Init+0x1f8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a4c      	ldr	r2, [pc, #304]	; (80088d4 <HAL_GPIO_Init+0x2ec>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d019      	beq.n	80087dc <HAL_GPIO_Init+0x1f4>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a4b      	ldr	r2, [pc, #300]	; (80088d8 <HAL_GPIO_Init+0x2f0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <HAL_GPIO_Init+0x1f0>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a4a      	ldr	r2, [pc, #296]	; (80088dc <HAL_GPIO_Init+0x2f4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00d      	beq.n	80087d4 <HAL_GPIO_Init+0x1ec>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a49      	ldr	r2, [pc, #292]	; (80088e0 <HAL_GPIO_Init+0x2f8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d007      	beq.n	80087d0 <HAL_GPIO_Init+0x1e8>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a48      	ldr	r2, [pc, #288]	; (80088e4 <HAL_GPIO_Init+0x2fc>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d101      	bne.n	80087cc <HAL_GPIO_Init+0x1e4>
 80087c8:	2305      	movs	r3, #5
 80087ca:	e00a      	b.n	80087e2 <HAL_GPIO_Init+0x1fa>
 80087cc:	2306      	movs	r3, #6
 80087ce:	e008      	b.n	80087e2 <HAL_GPIO_Init+0x1fa>
 80087d0:	2304      	movs	r3, #4
 80087d2:	e006      	b.n	80087e2 <HAL_GPIO_Init+0x1fa>
 80087d4:	2303      	movs	r3, #3
 80087d6:	e004      	b.n	80087e2 <HAL_GPIO_Init+0x1fa>
 80087d8:	2302      	movs	r3, #2
 80087da:	e002      	b.n	80087e2 <HAL_GPIO_Init+0x1fa>
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <HAL_GPIO_Init+0x1fa>
 80087e0:	2300      	movs	r3, #0
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	f002 0203 	and.w	r2, r2, #3
 80087e8:	0092      	lsls	r2, r2, #2
 80087ea:	4093      	lsls	r3, r2
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087f2:	4937      	ldr	r1, [pc, #220]	; (80088d0 <HAL_GPIO_Init+0x2e8>)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	089b      	lsrs	r3, r3, #2
 80087f8:	3302      	adds	r3, #2
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008800:	4b39      	ldr	r3, [pc, #228]	; (80088e8 <HAL_GPIO_Init+0x300>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	43db      	mvns	r3, r3
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4013      	ands	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008824:	4a30      	ldr	r2, [pc, #192]	; (80088e8 <HAL_GPIO_Init+0x300>)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800882a:	4b2f      	ldr	r3, [pc, #188]	; (80088e8 <HAL_GPIO_Init+0x300>)
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	43db      	mvns	r3, r3
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4013      	ands	r3, r2
 8008838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800884e:	4a26      	ldr	r2, [pc, #152]	; (80088e8 <HAL_GPIO_Init+0x300>)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008854:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <HAL_GPIO_Init+0x300>)
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	43db      	mvns	r3, r3
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4013      	ands	r3, r2
 8008862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008878:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <HAL_GPIO_Init+0x300>)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800887e:	4b1a      	ldr	r3, [pc, #104]	; (80088e8 <HAL_GPIO_Init+0x300>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	43db      	mvns	r3, r3
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4013      	ands	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4313      	orrs	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80088a2:	4a11      	ldr	r2, [pc, #68]	; (80088e8 <HAL_GPIO_Init+0x300>)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	3301      	adds	r3, #1
 80088ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	fa22 f303 	lsr.w	r3, r2, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f47f ae9d 	bne.w	80085f8 <HAL_GPIO_Init+0x10>
  }
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	40021000 	.word	0x40021000
 80088d0:	40010000 	.word	0x40010000
 80088d4:	48000400 	.word	0x48000400
 80088d8:	48000800 	.word	0x48000800
 80088dc:	48000c00 	.word	0x48000c00
 80088e0:	48001000 	.word	0x48001000
 80088e4:	48001400 	.word	0x48001400
 80088e8:	40010400 	.word	0x40010400

080088ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691a      	ldr	r2, [r3, #16]
 80088fc:	887b      	ldrh	r3, [r7, #2]
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008904:	2301      	movs	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
 8008908:	e001      	b.n	800890e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800890e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	807b      	strh	r3, [r7, #2]
 8008928:	4613      	mov	r3, r2
 800892a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800892c:	787b      	ldrb	r3, [r7, #1]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008932:	887a      	ldrh	r2, [r7, #2]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008938:	e002      	b.n	8008940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800893a:	887a      	ldrh	r2, [r7, #2]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800895e:	887a      	ldrh	r2, [r7, #2]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4013      	ands	r3, r2
 8008964:	041a      	lsls	r2, r3, #16
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	43d9      	mvns	r1, r3
 800896a:	887b      	ldrh	r3, [r7, #2]
 800896c:	400b      	ands	r3, r1
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	619a      	str	r2, [r3, #24]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	4603      	mov	r3, r0
 8008988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	88fb      	ldrh	r3, [r7, #6]
 8008990:	4013      	ands	r3, r2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d006      	beq.n	80089a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008996:	4a05      	ldr	r2, [pc, #20]	; (80089ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fa ff34 	bl	800380c <HAL_GPIO_EXTI_Callback>
  }
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40010400 	.word	0x40010400

080089b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d141      	bne.n	8008a42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80089be:	4b4b      	ldr	r3, [pc, #300]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ca:	d131      	bne.n	8008a30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089cc:	4b47      	ldr	r3, [pc, #284]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089d2:	4a46      	ldr	r2, [pc, #280]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80089dc:	4b43      	ldr	r3, [pc, #268]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80089e4:	4a41      	ldr	r2, [pc, #260]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80089ec:	4b40      	ldr	r3, [pc, #256]	; (8008af0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2232      	movs	r2, #50	; 0x32
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	4a3f      	ldr	r2, [pc, #252]	; (8008af4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80089f8:	fba2 2303 	umull	r2, r3, r2, r3
 80089fc:	0c9b      	lsrs	r3, r3, #18
 80089fe:	3301      	adds	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a02:	e002      	b.n	8008a0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a0a:	4b38      	ldr	r3, [pc, #224]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a16:	d102      	bne.n	8008a1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1f2      	bne.n	8008a04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a1e:	4b33      	ldr	r3, [pc, #204]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a2a:	d158      	bne.n	8008ade <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e057      	b.n	8008ae0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a30:	4b2e      	ldr	r3, [pc, #184]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a36:	4a2d      	ldr	r2, [pc, #180]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008a40:	e04d      	b.n	8008ade <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a48:	d141      	bne.n	8008ace <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a4a:	4b28      	ldr	r3, [pc, #160]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a56:	d131      	bne.n	8008abc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a58:	4b24      	ldr	r3, [pc, #144]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a5e:	4a23      	ldr	r2, [pc, #140]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a68:	4b20      	ldr	r3, [pc, #128]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a70:	4a1e      	ldr	r2, [pc, #120]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a78:	4b1d      	ldr	r3, [pc, #116]	; (8008af0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2232      	movs	r2, #50	; 0x32
 8008a7e:	fb02 f303 	mul.w	r3, r2, r3
 8008a82:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a84:	fba2 2303 	umull	r2, r3, r2, r3
 8008a88:	0c9b      	lsrs	r3, r3, #18
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a8e:	e002      	b.n	8008a96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a96:	4b15      	ldr	r3, [pc, #84]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aa2:	d102      	bne.n	8008aaa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1f2      	bne.n	8008a90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008aaa:	4b10      	ldr	r3, [pc, #64]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ab6:	d112      	bne.n	8008ade <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e011      	b.n	8008ae0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008abc:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac2:	4a0a      	ldr	r2, [pc, #40]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008acc:	e007      	b.n	8008ade <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ace:	4b07      	ldr	r3, [pc, #28]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ad6:	4a05      	ldr	r2, [pc, #20]	; (8008aec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008adc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	40007000 	.word	0x40007000
 8008af0:	20000008 	.word	0x20000008
 8008af4:	431bde83 	.word	0x431bde83

08008af8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	4a04      	ldr	r2, [pc, #16]	; (8008b14 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b06:	6093      	str	r3, [r2, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	40007000 	.word	0x40007000

08008b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e306      	b.n	8009138 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d075      	beq.n	8008c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b36:	4b97      	ldr	r3, [pc, #604]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f003 030c 	and.w	r3, r3, #12
 8008b3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b40:	4b94      	ldr	r3, [pc, #592]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f003 0303 	and.w	r3, r3, #3
 8008b48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b0c      	cmp	r3, #12
 8008b4e:	d102      	bne.n	8008b56 <HAL_RCC_OscConfig+0x3e>
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d002      	beq.n	8008b5c <HAL_RCC_OscConfig+0x44>
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	d10b      	bne.n	8008b74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b5c:	4b8d      	ldr	r3, [pc, #564]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d05b      	beq.n	8008c20 <HAL_RCC_OscConfig+0x108>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d157      	bne.n	8008c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e2e1      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b7c:	d106      	bne.n	8008b8c <HAL_RCC_OscConfig+0x74>
 8008b7e:	4b85      	ldr	r3, [pc, #532]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a84      	ldr	r2, [pc, #528]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	e01d      	b.n	8008bc8 <HAL_RCC_OscConfig+0xb0>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b94:	d10c      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x98>
 8008b96:	4b7f      	ldr	r3, [pc, #508]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a7e      	ldr	r2, [pc, #504]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	4b7c      	ldr	r3, [pc, #496]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a7b      	ldr	r2, [pc, #492]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	e00b      	b.n	8008bc8 <HAL_RCC_OscConfig+0xb0>
 8008bb0:	4b78      	ldr	r3, [pc, #480]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a77      	ldr	r2, [pc, #476]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	4b75      	ldr	r3, [pc, #468]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a74      	ldr	r2, [pc, #464]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d013      	beq.n	8008bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd0:	f7fa f986 	bl	8002ee0 <HAL_GetTick>
 8008bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008bd6:	e008      	b.n	8008bea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bd8:	f7fa f982 	bl	8002ee0 <HAL_GetTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b64      	cmp	r3, #100	; 0x64
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e2a6      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008bea:	4b6a      	ldr	r3, [pc, #424]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0f0      	beq.n	8008bd8 <HAL_RCC_OscConfig+0xc0>
 8008bf6:	e014      	b.n	8008c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf8:	f7fa f972 	bl	8002ee0 <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c00:	f7fa f96e 	bl	8002ee0 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b64      	cmp	r3, #100	; 0x64
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e292      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c12:	4b60      	ldr	r3, [pc, #384]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1f0      	bne.n	8008c00 <HAL_RCC_OscConfig+0xe8>
 8008c1e:	e000      	b.n	8008c22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d075      	beq.n	8008d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c2e:	4b59      	ldr	r3, [pc, #356]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
 8008c36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c38:	4b56      	ldr	r3, [pc, #344]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b0c      	cmp	r3, #12
 8008c46:	d102      	bne.n	8008c4e <HAL_RCC_OscConfig+0x136>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d002      	beq.n	8008c54 <HAL_RCC_OscConfig+0x13c>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d11f      	bne.n	8008c94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c54:	4b4f      	ldr	r3, [pc, #316]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_RCC_OscConfig+0x154>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e265      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c6c:	4b49      	ldr	r3, [pc, #292]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	061b      	lsls	r3, r3, #24
 8008c7a:	4946      	ldr	r1, [pc, #280]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008c80:	4b45      	ldr	r3, [pc, #276]	; (8008d98 <HAL_RCC_OscConfig+0x280>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fc fe49 	bl	800591c <HAL_InitTick>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d043      	beq.n	8008d18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e251      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d023      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c9c:	4b3d      	ldr	r3, [pc, #244]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a3c      	ldr	r2, [pc, #240]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca8:	f7fa f91a 	bl	8002ee0 <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cb0:	f7fa f916 	bl	8002ee0 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e23a      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cc2:	4b34      	ldr	r3, [pc, #208]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0f0      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cce:	4b31      	ldr	r3, [pc, #196]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	061b      	lsls	r3, r3, #24
 8008cdc:	492d      	ldr	r1, [pc, #180]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	604b      	str	r3, [r1, #4]
 8008ce2:	e01a      	b.n	8008d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ce4:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a2a      	ldr	r2, [pc, #168]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf0:	f7fa f8f6 	bl	8002ee0 <HAL_GetTick>
 8008cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cf8:	f7fa f8f2 	bl	8002ee0 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e216      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d0a:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f0      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x1e0>
 8008d16:	e000      	b.n	8008d1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0308 	and.w	r3, r3, #8
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d041      	beq.n	8008daa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01c      	beq.n	8008d68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d2e:	4b19      	ldr	r3, [pc, #100]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d34:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008d36:	f043 0301 	orr.w	r3, r3, #1
 8008d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d3e:	f7fa f8cf 	bl	8002ee0 <HAL_GetTick>
 8008d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008d44:	e008      	b.n	8008d58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d46:	f7fa f8cb 	bl	8002ee0 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d901      	bls.n	8008d58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e1ef      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008d58:	4b0e      	ldr	r3, [pc, #56]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0ef      	beq.n	8008d46 <HAL_RCC_OscConfig+0x22e>
 8008d66:	e020      	b.n	8008daa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d6e:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <HAL_RCC_OscConfig+0x27c>)
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d78:	f7fa f8b2 	bl	8002ee0 <HAL_GetTick>
 8008d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d7e:	e00d      	b.n	8008d9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d80:	f7fa f8ae 	bl	8002ee0 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d906      	bls.n	8008d9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e1d2      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
 8008d92:	bf00      	nop
 8008d94:	40021000 	.word	0x40021000
 8008d98:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d9c:	4b8c      	ldr	r3, [pc, #560]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1ea      	bne.n	8008d80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0304 	and.w	r3, r3, #4
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 80a6 	beq.w	8008f04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008db8:	2300      	movs	r3, #0
 8008dba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008dbc:	4b84      	ldr	r3, [pc, #528]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <HAL_RCC_OscConfig+0x2b4>
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <HAL_RCC_OscConfig+0x2b6>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00d      	beq.n	8008dee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dd2:	4b7f      	ldr	r3, [pc, #508]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd6:	4a7e      	ldr	r2, [pc, #504]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8008dde:	4b7c      	ldr	r3, [pc, #496]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008dea:	2301      	movs	r3, #1
 8008dec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dee:	4b79      	ldr	r3, [pc, #484]	; (8008fd4 <HAL_RCC_OscConfig+0x4bc>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d118      	bne.n	8008e2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dfa:	4b76      	ldr	r3, [pc, #472]	; (8008fd4 <HAL_RCC_OscConfig+0x4bc>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a75      	ldr	r2, [pc, #468]	; (8008fd4 <HAL_RCC_OscConfig+0x4bc>)
 8008e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e06:	f7fa f86b 	bl	8002ee0 <HAL_GetTick>
 8008e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e0c:	e008      	b.n	8008e20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e0e:	f7fa f867 	bl	8002ee0 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e18b      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e20:	4b6c      	ldr	r3, [pc, #432]	; (8008fd4 <HAL_RCC_OscConfig+0x4bc>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0f0      	beq.n	8008e0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d108      	bne.n	8008e46 <HAL_RCC_OscConfig+0x32e>
 8008e34:	4b66      	ldr	r3, [pc, #408]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3a:	4a65      	ldr	r2, [pc, #404]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e3c:	f043 0301 	orr.w	r3, r3, #1
 8008e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e44:	e024      	b.n	8008e90 <HAL_RCC_OscConfig+0x378>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	2b05      	cmp	r3, #5
 8008e4c:	d110      	bne.n	8008e70 <HAL_RCC_OscConfig+0x358>
 8008e4e:	4b60      	ldr	r3, [pc, #384]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e54:	4a5e      	ldr	r2, [pc, #376]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e56:	f043 0304 	orr.w	r3, r3, #4
 8008e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e5e:	4b5c      	ldr	r3, [pc, #368]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e64:	4a5a      	ldr	r2, [pc, #360]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e66:	f043 0301 	orr.w	r3, r3, #1
 8008e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e6e:	e00f      	b.n	8008e90 <HAL_RCC_OscConfig+0x378>
 8008e70:	4b57      	ldr	r3, [pc, #348]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e76:	4a56      	ldr	r2, [pc, #344]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e78:	f023 0301 	bic.w	r3, r3, #1
 8008e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008e80:	4b53      	ldr	r3, [pc, #332]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e86:	4a52      	ldr	r2, [pc, #328]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008e88:	f023 0304 	bic.w	r3, r3, #4
 8008e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d016      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e98:	f7fa f822 	bl	8002ee0 <HAL_GetTick>
 8008e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e9e:	e00a      	b.n	8008eb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ea0:	f7fa f81e 	bl	8002ee0 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e140      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008eb6:	4b46      	ldr	r3, [pc, #280]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0ed      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x388>
 8008ec4:	e015      	b.n	8008ef2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ec6:	f7fa f80b 	bl	8002ee0 <HAL_GetTick>
 8008eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ecc:	e00a      	b.n	8008ee4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ece:	f7fa f807 	bl	8002ee0 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d901      	bls.n	8008ee4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e129      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ee4:	4b3a      	ldr	r3, [pc, #232]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1ed      	bne.n	8008ece <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ef2:	7ffb      	ldrb	r3, [r7, #31]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d105      	bne.n	8008f04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ef8:	4b35      	ldr	r3, [pc, #212]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efc:	4a34      	ldr	r2, [pc, #208]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0320 	and.w	r3, r3, #32
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d03c      	beq.n	8008f8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01c      	beq.n	8008f52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f18:	4b2d      	ldr	r3, [pc, #180]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f1e:	4a2c      	ldr	r2, [pc, #176]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f28:	f7f9 ffda 	bl	8002ee0 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f30:	f7f9 ffd6 	bl	8002ee0 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e0fa      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f42:	4b23      	ldr	r3, [pc, #140]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0ef      	beq.n	8008f30 <HAL_RCC_OscConfig+0x418>
 8008f50:	e01b      	b.n	8008f8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008f52:	4b1f      	ldr	r3, [pc, #124]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f58:	4a1d      	ldr	r2, [pc, #116]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008f5a:	f023 0301 	bic.w	r3, r3, #1
 8008f5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f62:	f7f9 ffbd 	bl	8002ee0 <HAL_GetTick>
 8008f66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f68:	e008      	b.n	8008f7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f6a:	f7f9 ffb9 	bl	8002ee0 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e0dd      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008f7c:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1ef      	bne.n	8008f6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 80d1 	beq.w	8009136 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f94:	4b0e      	ldr	r3, [pc, #56]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 030c 	and.w	r3, r3, #12
 8008f9c:	2b0c      	cmp	r3, #12
 8008f9e:	f000 808b 	beq.w	80090b8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d15e      	bne.n	8009068 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <HAL_RCC_OscConfig+0x4b8>)
 8008fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fb6:	f7f9 ff93 	bl	8002ee0 <HAL_GetTick>
 8008fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fbc:	e00c      	b.n	8008fd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fbe:	f7f9 ff8f 	bl	8002ee0 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d905      	bls.n	8008fd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e0b3      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
 8008fd0:	40021000 	.word	0x40021000
 8008fd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fd8:	4b59      	ldr	r3, [pc, #356]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1ec      	bne.n	8008fbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008fe4:	4b56      	ldr	r3, [pc, #344]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	4b56      	ldr	r3, [pc, #344]	; (8009144 <HAL_RCC_OscConfig+0x62c>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6a11      	ldr	r1, [r2, #32]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ff4:	3a01      	subs	r2, #1
 8008ff6:	0112      	lsls	r2, r2, #4
 8008ff8:	4311      	orrs	r1, r2
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008ffe:	0212      	lsls	r2, r2, #8
 8009000:	4311      	orrs	r1, r2
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009006:	0852      	lsrs	r2, r2, #1
 8009008:	3a01      	subs	r2, #1
 800900a:	0552      	lsls	r2, r2, #21
 800900c:	4311      	orrs	r1, r2
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009012:	0852      	lsrs	r2, r2, #1
 8009014:	3a01      	subs	r2, #1
 8009016:	0652      	lsls	r2, r2, #25
 8009018:	4311      	orrs	r1, r2
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800901e:	06d2      	lsls	r2, r2, #27
 8009020:	430a      	orrs	r2, r1
 8009022:	4947      	ldr	r1, [pc, #284]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 8009024:	4313      	orrs	r3, r2
 8009026:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009028:	4b45      	ldr	r3, [pc, #276]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a44      	ldr	r2, [pc, #272]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 800902e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009032:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009034:	4b42      	ldr	r3, [pc, #264]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	4a41      	ldr	r2, [pc, #260]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 800903a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800903e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009040:	f7f9 ff4e 	bl	8002ee0 <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009048:	f7f9 ff4a 	bl	8002ee0 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e06e      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800905a:	4b39      	ldr	r3, [pc, #228]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0f0      	beq.n	8009048 <HAL_RCC_OscConfig+0x530>
 8009066:	e066      	b.n	8009136 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009068:	4b35      	ldr	r3, [pc, #212]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a34      	ldr	r2, [pc, #208]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 800906e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009072:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009074:	4b32      	ldr	r3, [pc, #200]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	4a31      	ldr	r2, [pc, #196]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 800907a:	f023 0303 	bic.w	r3, r3, #3
 800907e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009080:	4b2f      	ldr	r3, [pc, #188]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	4a2e      	ldr	r2, [pc, #184]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 8009086:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800908a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800908e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7f9 ff26 	bl	8002ee0 <HAL_GetTick>
 8009094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009098:	f7f9 ff22 	bl	8002ee0 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e046      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090aa:	4b25      	ldr	r3, [pc, #148]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1f0      	bne.n	8009098 <HAL_RCC_OscConfig+0x580>
 80090b6:	e03e      	b.n	8009136 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e039      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80090c4:	4b1e      	ldr	r3, [pc, #120]	; (8009140 <HAL_RCC_OscConfig+0x628>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f003 0203 	and.w	r2, r3, #3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d12c      	bne.n	8009132 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	3b01      	subs	r3, #1
 80090e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d123      	bne.n	8009132 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d11b      	bne.n	8009132 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009106:	429a      	cmp	r2, r3
 8009108:	d113      	bne.n	8009132 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009114:	085b      	lsrs	r3, r3, #1
 8009116:	3b01      	subs	r3, #1
 8009118:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800911a:	429a      	cmp	r2, r3
 800911c:	d109      	bne.n	8009132 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	085b      	lsrs	r3, r3, #1
 800912a:	3b01      	subs	r3, #1
 800912c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800912e:	429a      	cmp	r2, r3
 8009130:	d001      	beq.n	8009136 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3720      	adds	r7, #32
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	40021000 	.word	0x40021000
 8009144:	019f800c 	.word	0x019f800c

08009148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e11e      	b.n	800939e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009160:	4b91      	ldr	r3, [pc, #580]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d910      	bls.n	8009190 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800916e:	4b8e      	ldr	r3, [pc, #568]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f023 020f 	bic.w	r2, r3, #15
 8009176:	498c      	ldr	r1, [pc, #560]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	4313      	orrs	r3, r2
 800917c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800917e:	4b8a      	ldr	r3, [pc, #552]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d001      	beq.n	8009190 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e106      	b.n	800939e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0301 	and.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	d073      	beq.n	8009284 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d129      	bne.n	80091f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091a4:	4b81      	ldr	r3, [pc, #516]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e0f4      	b.n	800939e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80091b4:	f000 f99e 	bl	80094f4 <RCC_GetSysClockFreqFromPLLSource>
 80091b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	4a7c      	ldr	r2, [pc, #496]	; (80093b0 <HAL_RCC_ClockConfig+0x268>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d93f      	bls.n	8009242 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80091c2:	4b7a      	ldr	r3, [pc, #488]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d009      	beq.n	80091e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d033      	beq.n	8009242 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d12f      	bne.n	8009242 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80091e2:	4b72      	ldr	r3, [pc, #456]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ea:	4a70      	ldr	r2, [pc, #448]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80091ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80091f2:	2380      	movs	r3, #128	; 0x80
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	e024      	b.n	8009242 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d107      	bne.n	8009210 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009200:	4b6a      	ldr	r3, [pc, #424]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d109      	bne.n	8009220 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e0c6      	b.n	800939e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009210:	4b66      	ldr	r3, [pc, #408]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e0be      	b.n	800939e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009220:	f000 f8ce 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 8009224:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	4a61      	ldr	r2, [pc, #388]	; (80093b0 <HAL_RCC_ClockConfig+0x268>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d909      	bls.n	8009242 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800922e:	4b5f      	ldr	r3, [pc, #380]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009236:	4a5d      	ldr	r2, [pc, #372]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800923e:	2380      	movs	r3, #128	; 0x80
 8009240:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009242:	4b5a      	ldr	r3, [pc, #360]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f023 0203 	bic.w	r2, r3, #3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	4957      	ldr	r1, [pc, #348]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009250:	4313      	orrs	r3, r2
 8009252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009254:	f7f9 fe44 	bl	8002ee0 <HAL_GetTick>
 8009258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800925a:	e00a      	b.n	8009272 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800925c:	f7f9 fe40 	bl	8002ee0 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	f241 3288 	movw	r2, #5000	; 0x1388
 800926a:	4293      	cmp	r3, r2
 800926c:	d901      	bls.n	8009272 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e095      	b.n	800939e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009272:	4b4e      	ldr	r3, [pc, #312]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f003 020c 	and.w	r2, r3, #12
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	429a      	cmp	r2, r3
 8009282:	d1eb      	bne.n	800925c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d023      	beq.n	80092d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800929c:	4b43      	ldr	r3, [pc, #268]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	4a42      	ldr	r2, [pc, #264]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80092a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80092a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0308 	and.w	r3, r3, #8
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d007      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80092b4:	4b3d      	ldr	r3, [pc, #244]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80092bc:	4a3b      	ldr	r2, [pc, #236]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80092be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80092c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092c4:	4b39      	ldr	r3, [pc, #228]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	4936      	ldr	r1, [pc, #216]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80092d2:	4313      	orrs	r3, r2
 80092d4:	608b      	str	r3, [r1, #8]
 80092d6:	e008      	b.n	80092ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2b80      	cmp	r3, #128	; 0x80
 80092dc:	d105      	bne.n	80092ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80092de:	4b33      	ldr	r3, [pc, #204]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	4a32      	ldr	r2, [pc, #200]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 80092e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092ea:	4b2f      	ldr	r3, [pc, #188]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 030f 	and.w	r3, r3, #15
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d21d      	bcs.n	8009334 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092f8:	4b2b      	ldr	r3, [pc, #172]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f023 020f 	bic.w	r2, r3, #15
 8009300:	4929      	ldr	r1, [pc, #164]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	4313      	orrs	r3, r2
 8009306:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009308:	f7f9 fdea 	bl	8002ee0 <HAL_GetTick>
 800930c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800930e:	e00a      	b.n	8009326 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009310:	f7f9 fde6 	bl	8002ee0 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	f241 3288 	movw	r2, #5000	; 0x1388
 800931e:	4293      	cmp	r3, r2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e03b      	b.n	800939e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009326:	4b20      	ldr	r3, [pc, #128]	; (80093a8 <HAL_RCC_ClockConfig+0x260>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 030f 	and.w	r3, r3, #15
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	429a      	cmp	r2, r3
 8009332:	d1ed      	bne.n	8009310 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d008      	beq.n	8009352 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009340:	4b1a      	ldr	r3, [pc, #104]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4917      	ldr	r1, [pc, #92]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 800934e:	4313      	orrs	r3, r2
 8009350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0308 	and.w	r3, r3, #8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800935e:	4b13      	ldr	r3, [pc, #76]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	490f      	ldr	r1, [pc, #60]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 800936e:	4313      	orrs	r3, r2
 8009370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009372:	f000 f825 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 8009376:	4602      	mov	r2, r0
 8009378:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <HAL_RCC_ClockConfig+0x264>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	091b      	lsrs	r3, r3, #4
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	490c      	ldr	r1, [pc, #48]	; (80093b4 <HAL_RCC_ClockConfig+0x26c>)
 8009384:	5ccb      	ldrb	r3, [r1, r3]
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	fa22 f303 	lsr.w	r3, r2, r3
 800938e:	4a0a      	ldr	r2, [pc, #40]	; (80093b8 <HAL_RCC_ClockConfig+0x270>)
 8009390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009392:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <HAL_RCC_ClockConfig+0x274>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f7fc fac0 	bl	800591c <HAL_InitTick>
 800939c:	4603      	mov	r3, r0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	40022000 	.word	0x40022000
 80093ac:	40021000 	.word	0x40021000
 80093b0:	04c4b400 	.word	0x04c4b400
 80093b4:	0800fe8c 	.word	0x0800fe8c
 80093b8:	20000008 	.word	0x20000008
 80093bc:	2000000c 	.word	0x2000000c

080093c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80093c6:	4b2c      	ldr	r3, [pc, #176]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 030c 	and.w	r3, r3, #12
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d102      	bne.n	80093d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80093d2:	4b2a      	ldr	r3, [pc, #168]	; (800947c <HAL_RCC_GetSysClockFreq+0xbc>)
 80093d4:	613b      	str	r3, [r7, #16]
 80093d6:	e047      	b.n	8009468 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80093d8:	4b27      	ldr	r3, [pc, #156]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 030c 	and.w	r3, r3, #12
 80093e0:	2b08      	cmp	r3, #8
 80093e2:	d102      	bne.n	80093ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80093e4:	4b26      	ldr	r3, [pc, #152]	; (8009480 <HAL_RCC_GetSysClockFreq+0xc0>)
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	e03e      	b.n	8009468 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80093ea:	4b23      	ldr	r3, [pc, #140]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f003 030c 	and.w	r3, r3, #12
 80093f2:	2b0c      	cmp	r3, #12
 80093f4:	d136      	bne.n	8009464 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80093f6:	4b20      	ldr	r3, [pc, #128]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009400:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	091b      	lsrs	r3, r3, #4
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	3301      	adds	r3, #1
 800940c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b03      	cmp	r3, #3
 8009412:	d10c      	bne.n	800942e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009414:	4a1a      	ldr	r2, [pc, #104]	; (8009480 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	fbb2 f3f3 	udiv	r3, r2, r3
 800941c:	4a16      	ldr	r2, [pc, #88]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800941e:	68d2      	ldr	r2, [r2, #12]
 8009420:	0a12      	lsrs	r2, r2, #8
 8009422:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009426:	fb02 f303 	mul.w	r3, r2, r3
 800942a:	617b      	str	r3, [r7, #20]
      break;
 800942c:	e00c      	b.n	8009448 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800942e:	4a13      	ldr	r2, [pc, #76]	; (800947c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	fbb2 f3f3 	udiv	r3, r2, r3
 8009436:	4a10      	ldr	r2, [pc, #64]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009438:	68d2      	ldr	r2, [r2, #12]
 800943a:	0a12      	lsrs	r2, r2, #8
 800943c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009440:	fb02 f303 	mul.w	r3, r2, r3
 8009444:	617b      	str	r3, [r7, #20]
      break;
 8009446:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009448:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	0e5b      	lsrs	r3, r3, #25
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	3301      	adds	r3, #1
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	e001      	b.n	8009468 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009468:	693b      	ldr	r3, [r7, #16]
}
 800946a:	4618      	mov	r0, r3
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	40021000 	.word	0x40021000
 800947c:	00f42400 	.word	0x00f42400
 8009480:	007a1200 	.word	0x007a1200

08009484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009488:	4b03      	ldr	r3, [pc, #12]	; (8009498 <HAL_RCC_GetHCLKFreq+0x14>)
 800948a:	681b      	ldr	r3, [r3, #0]
}
 800948c:	4618      	mov	r0, r3
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000008 	.word	0x20000008

0800949c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80094a0:	f7ff fff0 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 80094a4:	4602      	mov	r2, r0
 80094a6:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	f003 0307 	and.w	r3, r3, #7
 80094b0:	4904      	ldr	r1, [pc, #16]	; (80094c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80094b2:	5ccb      	ldrb	r3, [r1, r3]
 80094b4:	f003 031f 	and.w	r3, r3, #31
 80094b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094bc:	4618      	mov	r0, r3
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	40021000 	.word	0x40021000
 80094c4:	0800fe9c 	.word	0x0800fe9c

080094c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80094cc:	f7ff ffda 	bl	8009484 <HAL_RCC_GetHCLKFreq>
 80094d0:	4602      	mov	r2, r0
 80094d2:	4b06      	ldr	r3, [pc, #24]	; (80094ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	0adb      	lsrs	r3, r3, #11
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	4904      	ldr	r1, [pc, #16]	; (80094f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80094de:	5ccb      	ldrb	r3, [r1, r3]
 80094e0:	f003 031f 	and.w	r3, r3, #31
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	40021000 	.word	0x40021000
 80094f0:	0800fe9c 	.word	0x0800fe9c

080094f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80094fa:	4b1e      	ldr	r3, [pc, #120]	; (8009574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f003 0303 	and.w	r3, r3, #3
 8009502:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009504:	4b1b      	ldr	r3, [pc, #108]	; (8009574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	091b      	lsrs	r3, r3, #4
 800950a:	f003 030f 	and.w	r3, r3, #15
 800950e:	3301      	adds	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b03      	cmp	r3, #3
 8009516:	d10c      	bne.n	8009532 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009518:	4a17      	ldr	r2, [pc, #92]	; (8009578 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009520:	4a14      	ldr	r2, [pc, #80]	; (8009574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009522:	68d2      	ldr	r2, [r2, #12]
 8009524:	0a12      	lsrs	r2, r2, #8
 8009526:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800952a:	fb02 f303 	mul.w	r3, r2, r3
 800952e:	617b      	str	r3, [r7, #20]
    break;
 8009530:	e00c      	b.n	800954c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009532:	4a12      	ldr	r2, [pc, #72]	; (800957c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	fbb2 f3f3 	udiv	r3, r2, r3
 800953a:	4a0e      	ldr	r2, [pc, #56]	; (8009574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800953c:	68d2      	ldr	r2, [r2, #12]
 800953e:	0a12      	lsrs	r2, r2, #8
 8009540:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009544:	fb02 f303 	mul.w	r3, r2, r3
 8009548:	617b      	str	r3, [r7, #20]
    break;
 800954a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	0e5b      	lsrs	r3, r3, #25
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	3301      	adds	r3, #1
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	fbb2 f3f3 	udiv	r3, r2, r3
 8009564:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009566:	687b      	ldr	r3, [r7, #4]
}
 8009568:	4618      	mov	r0, r3
 800956a:	371c      	adds	r7, #28
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	40021000 	.word	0x40021000
 8009578:	007a1200 	.word	0x007a1200
 800957c:	00f42400 	.word	0x00f42400

08009580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009588:	2300      	movs	r3, #0
 800958a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800958c:	2300      	movs	r3, #0
 800958e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 8098 	beq.w	80096ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800959e:	2300      	movs	r3, #0
 80095a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095a2:	4b43      	ldr	r3, [pc, #268]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10d      	bne.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095ae:	4b40      	ldr	r3, [pc, #256]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b2:	4a3f      	ldr	r2, [pc, #252]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6593      	str	r3, [r2, #88]	; 0x58
 80095ba:	4b3d      	ldr	r3, [pc, #244]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095c2:	60bb      	str	r3, [r7, #8]
 80095c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095c6:	2301      	movs	r3, #1
 80095c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095ca:	4b3a      	ldr	r3, [pc, #232]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a39      	ldr	r2, [pc, #228]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80095d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095d6:	f7f9 fc83 	bl	8002ee0 <HAL_GetTick>
 80095da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095dc:	e009      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095de:	f7f9 fc7f 	bl	8002ee0 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d902      	bls.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	74fb      	strb	r3, [r7, #19]
        break;
 80095f0:	e005      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095f2:	4b30      	ldr	r3, [pc, #192]	; (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0ef      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80095fe:	7cfb      	ldrb	r3, [r7, #19]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d159      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009604:	4b2a      	ldr	r3, [pc, #168]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800960e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01e      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	429a      	cmp	r2, r3
 800961e:	d019      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009620:	4b23      	ldr	r3, [pc, #140]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800962a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800962c:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800962e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009632:	4a1f      	ldr	r2, [pc, #124]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800963c:	4b1c      	ldr	r3, [pc, #112]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800963e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009642:	4a1b      	ldr	r2, [pc, #108]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800964c:	4a18      	ldr	r2, [pc, #96]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d016      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800965e:	f7f9 fc3f 	bl	8002ee0 <HAL_GetTick>
 8009662:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009664:	e00b      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009666:	f7f9 fc3b 	bl	8002ee0 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	f241 3288 	movw	r2, #5000	; 0x1388
 8009674:	4293      	cmp	r3, r2
 8009676:	d902      	bls.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009678:	2303      	movs	r3, #3
 800967a:	74fb      	strb	r3, [r7, #19]
            break;
 800967c:	e006      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0ec      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800968c:	7cfb      	ldrb	r3, [r7, #19]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10b      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a0:	4903      	ldr	r1, [pc, #12]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80096a8:	e008      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096aa:	7cfb      	ldrb	r3, [r7, #19]
 80096ac:	74bb      	strb	r3, [r7, #18]
 80096ae:	e005      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80096b0:	40021000 	.word	0x40021000
 80096b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b8:	7cfb      	ldrb	r3, [r7, #19]
 80096ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096bc:	7c7b      	ldrb	r3, [r7, #17]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d105      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096c2:	4ba7      	ldr	r3, [pc, #668]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c6:	4aa6      	ldr	r2, [pc, #664]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096da:	4ba1      	ldr	r3, [pc, #644]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e0:	f023 0203 	bic.w	r2, r3, #3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	499d      	ldr	r1, [pc, #628]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00a      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096fc:	4b98      	ldr	r3, [pc, #608]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009702:	f023 020c 	bic.w	r2, r3, #12
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	4995      	ldr	r1, [pc, #596]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800971e:	4b90      	ldr	r3, [pc, #576]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009724:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	498c      	ldr	r1, [pc, #560]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972e:	4313      	orrs	r3, r2
 8009730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00a      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009740:	4b87      	ldr	r3, [pc, #540]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009746:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	4984      	ldr	r1, [pc, #528]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009750:	4313      	orrs	r3, r2
 8009752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009762:	4b7f      	ldr	r3, [pc, #508]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	497b      	ldr	r1, [pc, #492]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009784:	4b76      	ldr	r3, [pc, #472]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800978a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	4973      	ldr	r1, [pc, #460]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009794:	4313      	orrs	r3, r2
 8009796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097a6:	4b6e      	ldr	r3, [pc, #440]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	496a      	ldr	r1, [pc, #424]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097c8:	4b65      	ldr	r3, [pc, #404]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	4962      	ldr	r1, [pc, #392]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097ea:	4b5d      	ldr	r3, [pc, #372]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	4959      	ldr	r1, [pc, #356]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800980c:	4b54      	ldr	r3, [pc, #336]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800980e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009812:	f023 0203 	bic.w	r2, r3, #3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981a:	4951      	ldr	r1, [pc, #324]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800981c:	4313      	orrs	r3, r2
 800981e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800982e:	4b4c      	ldr	r3, [pc, #304]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009834:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983c:	4948      	ldr	r1, [pc, #288]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800983e:	4313      	orrs	r3, r2
 8009840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800984c:	2b00      	cmp	r3, #0
 800984e:	d015      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009850:	4b43      	ldr	r3, [pc, #268]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985e:	4940      	ldr	r1, [pc, #256]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009860:	4313      	orrs	r3, r2
 8009862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800986e:	d105      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009870:	4b3b      	ldr	r3, [pc, #236]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	4a3a      	ldr	r2, [pc, #232]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800987a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009884:	2b00      	cmp	r3, #0
 8009886:	d015      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009888:	4b35      	ldr	r3, [pc, #212]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800988a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009896:	4932      	ldr	r1, [pc, #200]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009898:	4313      	orrs	r3, r2
 800989a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098a6:	d105      	bne.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098a8:	4b2d      	ldr	r3, [pc, #180]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	4a2c      	ldr	r2, [pc, #176]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d015      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098c0:	4b27      	ldr	r3, [pc, #156]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	4924      	ldr	r1, [pc, #144]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098de:	d105      	bne.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098e0:	4b1f      	ldr	r3, [pc, #124]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	4a1e      	ldr	r2, [pc, #120]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d015      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098f8:	4b19      	ldr	r3, [pc, #100]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009906:	4916      	ldr	r1, [pc, #88]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009908:	4313      	orrs	r3, r2
 800990a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009916:	d105      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009918:	4b11      	ldr	r3, [pc, #68]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	4a10      	ldr	r2, [pc, #64]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800991e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009922:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d019      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009930:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	4908      	ldr	r1, [pc, #32]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009940:	4313      	orrs	r3, r2
 8009942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800994e:	d109      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009950:	4b03      	ldr	r3, [pc, #12]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	4a02      	ldr	r2, [pc, #8]	; (8009960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800995a:	60d3      	str	r3, [r2, #12]
 800995c:	e002      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800995e:	bf00      	nop
 8009960:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d015      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009970:	4b29      	ldr	r3, [pc, #164]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009976:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800997e:	4926      	ldr	r1, [pc, #152]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009980:	4313      	orrs	r3, r2
 8009982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800998e:	d105      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009990:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	4a20      	ldr	r2, [pc, #128]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800999a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d015      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80099a8:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b6:	4918      	ldr	r1, [pc, #96]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099b8:	4313      	orrs	r3, r2
 80099ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c6:	d105      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80099c8:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	4a12      	ldr	r2, [pc, #72]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d015      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099e0:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ee:	490a      	ldr	r1, [pc, #40]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099fe:	d105      	bne.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a00:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4a04      	ldr	r2, [pc, #16]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009a0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	40021000 	.word	0x40021000

08009a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e09d      	b.n	8009b6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d108      	bne.n	8009a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a3e:	d009      	beq.n	8009a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	61da      	str	r2, [r3, #28]
 8009a46:	e005      	b.n	8009a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fb f99a 	bl	8004da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a94:	d902      	bls.n	8009a9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
 8009a9a:	e002      	b.n	8009aa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009aaa:	d007      	beq.n	8009abc <HAL_SPI_Init+0xa0>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ab4:	d002      	beq.n	8009abc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aea:	431a      	orrs	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afe:	ea42 0103 	orr.w	r1, r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	0c1b      	lsrs	r3, r3, #16
 8009b18:	f003 0204 	and.w	r2, r3, #4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	431a      	orrs	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2a:	f003 0308 	and.w	r3, r3, #8
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009b38:	ea42 0103 	orr.w	r1, r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69da      	ldr	r2, [r3, #28]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b08a      	sub	sp, #40	; 0x28
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009b80:	2301      	movs	r3, #1
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d101      	bne.n	8009b98 <HAL_SPI_TransmitReceive+0x26>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e1fb      	b.n	8009f90 <HAL_SPI_TransmitReceive+0x41e>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ba0:	f7f9 f99e 	bl	8002ee0 <HAL_GetTick>
 8009ba4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009bac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009bb4:	887b      	ldrh	r3, [r7, #2]
 8009bb6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009bb8:	887b      	ldrh	r3, [r7, #2]
 8009bba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009bbc:	7efb      	ldrb	r3, [r7, #27]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d00e      	beq.n	8009be0 <HAL_SPI_TransmitReceive+0x6e>
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bc8:	d106      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d102      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x66>
 8009bd2:	7efb      	ldrb	r3, [r7, #27]
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d003      	beq.n	8009be0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009bd8:	2302      	movs	r3, #2
 8009bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009bde:	e1cd      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d005      	beq.n	8009bf2 <HAL_SPI_TransmitReceive+0x80>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <HAL_SPI_TransmitReceive+0x80>
 8009bec:	887b      	ldrh	r3, [r7, #2]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d103      	bne.n	8009bfa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009bf8:	e1c0      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d003      	beq.n	8009c0e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2205      	movs	r2, #5
 8009c0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	887a      	ldrh	r2, [r7, #2]
 8009c1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	887a      	ldrh	r2, [r7, #2]
 8009c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	887a      	ldrh	r2, [r7, #2]
 8009c34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	887a      	ldrh	r2, [r7, #2]
 8009c3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c50:	d802      	bhi.n	8009c58 <HAL_SPI_TransmitReceive+0xe6>
 8009c52:	8a3b      	ldrh	r3, [r7, #16]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d908      	bls.n	8009c6a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c66:	605a      	str	r2, [r3, #4]
 8009c68:	e007      	b.n	8009c7a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c78:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c84:	2b40      	cmp	r3, #64	; 0x40
 8009c86:	d007      	beq.n	8009c98 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ca0:	d97c      	bls.n	8009d9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <HAL_SPI_TransmitReceive+0x13e>
 8009caa:	8a7b      	ldrh	r3, [r7, #18]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d169      	bne.n	8009d84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	881a      	ldrh	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	1c9a      	adds	r2, r3, #2
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cd4:	e056      	b.n	8009d84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d11b      	bne.n	8009d1c <HAL_SPI_TransmitReceive+0x1aa>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d016      	beq.n	8009d1c <HAL_SPI_TransmitReceive+0x1aa>
 8009cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d113      	bne.n	8009d1c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf8:	881a      	ldrh	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	1c9a      	adds	r2, r3, #2
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d11c      	bne.n	8009d64 <HAL_SPI_TransmitReceive+0x1f2>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d016      	beq.n	8009d64 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	b292      	uxth	r2, r2
 8009d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d48:	1c9a      	adds	r2, r3, #2
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d60:	2301      	movs	r3, #1
 8009d62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d64:	f7f9 f8bc 	bl	8002ee0 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d807      	bhi.n	8009d84 <HAL_SPI_TransmitReceive+0x212>
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7a:	d003      	beq.n	8009d84 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009d82:	e0fb      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1a3      	bne.n	8009cd6 <HAL_SPI_TransmitReceive+0x164>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d19d      	bne.n	8009cd6 <HAL_SPI_TransmitReceive+0x164>
 8009d9a:	e0df      	b.n	8009f5c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <HAL_SPI_TransmitReceive+0x23a>
 8009da4:	8a7b      	ldrh	r3, [r7, #18]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	f040 80cb 	bne.w	8009f42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d912      	bls.n	8009ddc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	881a      	ldrh	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	1c9a      	adds	r2, r3, #2
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	3b02      	subs	r3, #2
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dda:	e0b2      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	330c      	adds	r3, #12
 8009de6:	7812      	ldrb	r2, [r2, #0]
 8009de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e02:	e09e      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f003 0302 	and.w	r3, r3, #2
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d134      	bne.n	8009e7c <HAL_SPI_TransmitReceive+0x30a>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d02f      	beq.n	8009e7c <HAL_SPI_TransmitReceive+0x30a>
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d12c      	bne.n	8009e7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d912      	bls.n	8009e52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	881a      	ldrh	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3c:	1c9a      	adds	r2, r3, #2
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	3b02      	subs	r3, #2
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e50:	e012      	b.n	8009e78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	330c      	adds	r3, #12
 8009e5c:	7812      	ldrb	r2, [r2, #0]
 8009e5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	3b01      	subs	r3, #1
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d148      	bne.n	8009f1c <HAL_SPI_TransmitReceive+0x3aa>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d042      	beq.n	8009f1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d923      	bls.n	8009eea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68da      	ldr	r2, [r3, #12]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eac:	b292      	uxth	r2, r2
 8009eae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb4:	1c9a      	adds	r2, r3, #2
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	3b02      	subs	r3, #2
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d81f      	bhi.n	8009f18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ee6:	605a      	str	r2, [r3, #4]
 8009ee8:	e016      	b.n	8009f18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f103 020c 	add.w	r2, r3, #12
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef6:	7812      	ldrb	r2, [r2, #0]
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f1c:	f7f8 ffe0 	bl	8002ee0 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d803      	bhi.n	8009f34 <HAL_SPI_TransmitReceive+0x3c2>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f32:	d102      	bne.n	8009f3a <HAL_SPI_TransmitReceive+0x3c8>
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d103      	bne.n	8009f42 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009f40:	e01c      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f47f af5b 	bne.w	8009e04 <HAL_SPI_TransmitReceive+0x292>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f47f af54 	bne.w	8009e04 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f5c:	69fa      	ldr	r2, [r7, #28]
 8009f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 f937 	bl	800a1d4 <SPI_EndRxTxTransaction>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d006      	beq.n	8009f7a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2220      	movs	r2, #32
 8009f76:	661a      	str	r2, [r3, #96]	; 0x60
 8009f78:	e000      	b.n	8009f7c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009f7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3728      	adds	r7, #40	; 0x28
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fa8:	f7f8 ff9a 	bl	8002ee0 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fb8:	f7f8 ff92 	bl	8002ee0 <HAL_GetTick>
 8009fbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fbe:	4b39      	ldr	r3, [pc, #228]	; (800a0a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	015b      	lsls	r3, r3, #5
 8009fc4:	0d1b      	lsrs	r3, r3, #20
 8009fc6:	69fa      	ldr	r2, [r7, #28]
 8009fc8:	fb02 f303 	mul.w	r3, r2, r3
 8009fcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fce:	e054      	b.n	800a07a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	d050      	beq.n	800a07a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fd8:	f7f8 ff82 	bl	8002ee0 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	69fa      	ldr	r2, [r7, #28]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d902      	bls.n	8009fee <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d13d      	bne.n	800a06a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ffc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a006:	d111      	bne.n	800a02c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a010:	d004      	beq.n	800a01c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a01a:	d107      	bne.n	800a02c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a02a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a034:	d10f      	bne.n	800a056 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a054:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e017      	b.n	800a09a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	3b01      	subs	r3, #1
 800a078:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4013      	ands	r3, r2
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	429a      	cmp	r2, r3
 800a088:	bf0c      	ite	eq
 800a08a:	2301      	moveq	r3, #1
 800a08c:	2300      	movne	r3, #0
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	461a      	mov	r2, r3
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	429a      	cmp	r2, r3
 800a096:	d19b      	bne.n	8009fd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000008 	.word	0x20000008

0800a0a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	; 0x28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a0ba:	f7f8 ff11 	bl	8002ee0 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a0ca:	f7f8 ff09 	bl	8002ee0 <HAL_GetTick>
 800a0ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	330c      	adds	r3, #12
 800a0d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a0d8:	4b3d      	ldr	r3, [pc, #244]	; (800a1d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	00da      	lsls	r2, r3, #3
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	0d1b      	lsrs	r3, r3, #20
 800a0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ea:	fb02 f303 	mul.w	r3, r2, r3
 800a0ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0f0:	e060      	b.n	800a1b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a0f8:	d107      	bne.n	800a10a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d104      	bne.n	800a10a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a108:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d050      	beq.n	800a1b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a112:	f7f8 fee5 	bl	8002ee0 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a11e:	429a      	cmp	r2, r3
 800a120:	d902      	bls.n	800a128 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	d13d      	bne.n	800a1a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a136:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a140:	d111      	bne.n	800a166 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a14a:	d004      	beq.n	800a156 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a154:	d107      	bne.n	800a166 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a164:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a16e:	d10f      	bne.n	800a190 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a17e:	601a      	str	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a18e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e010      	b.n	800a1c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689a      	ldr	r2, [r3, #8]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d196      	bne.n	800a0f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3728      	adds	r7, #40	; 0x28
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000008 	.word	0x20000008

0800a1d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af02      	add	r7, sp, #8
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff ff5b 	bl	800a0a8 <SPI_WaitFifoStateUntilTimeout>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1fc:	f043 0220 	orr.w	r2, r3, #32
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e027      	b.n	800a258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2200      	movs	r2, #0
 800a210:	2180      	movs	r1, #128	; 0x80
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff fec0 	bl	8009f98 <SPI_WaitFlagStateUntilTimeout>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d007      	beq.n	800a22e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a222:	f043 0220 	orr.w	r2, r3, #32
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e014      	b.n	800a258 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2200      	movs	r2, #0
 800a236:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff ff34 	bl	800a0a8 <SPI_WaitFifoStateUntilTimeout>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a24a:	f043 0220 	orr.w	r2, r3, #32
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e000      	b.n	800a258 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e049      	b.n	800a306 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fb f81a 	bl	80052c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f000 fcd4 	bl	800ac4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b01      	cmp	r3, #1
 800a322:	d001      	beq.n	800a328 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e054      	b.n	800a3d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f042 0201 	orr.w	r2, r2, #1
 800a33e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a26      	ldr	r2, [pc, #152]	; (800a3e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d022      	beq.n	800a390 <HAL_TIM_Base_Start_IT+0x80>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a352:	d01d      	beq.n	800a390 <HAL_TIM_Base_Start_IT+0x80>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a22      	ldr	r2, [pc, #136]	; (800a3e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d018      	beq.n	800a390 <HAL_TIM_Base_Start_IT+0x80>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a21      	ldr	r2, [pc, #132]	; (800a3e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d013      	beq.n	800a390 <HAL_TIM_Base_Start_IT+0x80>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a1f      	ldr	r2, [pc, #124]	; (800a3ec <HAL_TIM_Base_Start_IT+0xdc>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d00e      	beq.n	800a390 <HAL_TIM_Base_Start_IT+0x80>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a1e      	ldr	r2, [pc, #120]	; (800a3f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d009      	beq.n	800a390 <HAL_TIM_Base_Start_IT+0x80>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a1c      	ldr	r2, [pc, #112]	; (800a3f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d004      	beq.n	800a390 <HAL_TIM_Base_Start_IT+0x80>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a1b      	ldr	r2, [pc, #108]	; (800a3f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d115      	bne.n	800a3bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	4b19      	ldr	r3, [pc, #100]	; (800a3fc <HAL_TIM_Base_Start_IT+0xec>)
 800a398:	4013      	ands	r3, r2
 800a39a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b06      	cmp	r3, #6
 800a3a0:	d015      	beq.n	800a3ce <HAL_TIM_Base_Start_IT+0xbe>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a8:	d011      	beq.n	800a3ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f042 0201 	orr.w	r2, r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ba:	e008      	b.n	800a3ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f042 0201 	orr.w	r2, r2, #1
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	e000      	b.n	800a3d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40012c00 	.word	0x40012c00
 800a3e4:	40000400 	.word	0x40000400
 800a3e8:	40000800 	.word	0x40000800
 800a3ec:	40000c00 	.word	0x40000c00
 800a3f0:	40013400 	.word	0x40013400
 800a3f4:	40014000 	.word	0x40014000
 800a3f8:	40015000 	.word	0x40015000
 800a3fc:	00010007 	.word	0x00010007

0800a400 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d101      	bne.n	800a412 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e049      	b.n	800a4a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d106      	bne.n	800a42c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7fa ff2a 	bl	8005280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2202      	movs	r2, #2
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3304      	adds	r3, #4
 800a43c:	4619      	mov	r1, r3
 800a43e:	4610      	mov	r0, r2
 800a440:	f000 fc04 	bl	800ac4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d109      	bne.n	800a4d4 <HAL_TIM_PWM_Start+0x24>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	bf14      	ite	ne
 800a4cc:	2301      	movne	r3, #1
 800a4ce:	2300      	moveq	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	e03c      	b.n	800a54e <HAL_TIM_PWM_Start+0x9e>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d109      	bne.n	800a4ee <HAL_TIM_PWM_Start+0x3e>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	bf14      	ite	ne
 800a4e6:	2301      	movne	r3, #1
 800a4e8:	2300      	moveq	r3, #0
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	e02f      	b.n	800a54e <HAL_TIM_PWM_Start+0x9e>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d109      	bne.n	800a508 <HAL_TIM_PWM_Start+0x58>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	bf14      	ite	ne
 800a500:	2301      	movne	r3, #1
 800a502:	2300      	moveq	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	e022      	b.n	800a54e <HAL_TIM_PWM_Start+0x9e>
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	2b0c      	cmp	r3, #12
 800a50c:	d109      	bne.n	800a522 <HAL_TIM_PWM_Start+0x72>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b01      	cmp	r3, #1
 800a518:	bf14      	ite	ne
 800a51a:	2301      	movne	r3, #1
 800a51c:	2300      	moveq	r3, #0
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	e015      	b.n	800a54e <HAL_TIM_PWM_Start+0x9e>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b10      	cmp	r3, #16
 800a526:	d109      	bne.n	800a53c <HAL_TIM_PWM_Start+0x8c>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b01      	cmp	r3, #1
 800a532:	bf14      	ite	ne
 800a534:	2301      	movne	r3, #1
 800a536:	2300      	moveq	r3, #0
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	e008      	b.n	800a54e <HAL_TIM_PWM_Start+0x9e>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b01      	cmp	r3, #1
 800a546:	bf14      	ite	ne
 800a548:	2301      	movne	r3, #1
 800a54a:	2300      	moveq	r3, #0
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e0a6      	b.n	800a6a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d104      	bne.n	800a566 <HAL_TIM_PWM_Start+0xb6>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a564:	e023      	b.n	800a5ae <HAL_TIM_PWM_Start+0xfe>
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b04      	cmp	r3, #4
 800a56a:	d104      	bne.n	800a576 <HAL_TIM_PWM_Start+0xc6>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a574:	e01b      	b.n	800a5ae <HAL_TIM_PWM_Start+0xfe>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d104      	bne.n	800a586 <HAL_TIM_PWM_Start+0xd6>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a584:	e013      	b.n	800a5ae <HAL_TIM_PWM_Start+0xfe>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b0c      	cmp	r3, #12
 800a58a:	d104      	bne.n	800a596 <HAL_TIM_PWM_Start+0xe6>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a594:	e00b      	b.n	800a5ae <HAL_TIM_PWM_Start+0xfe>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d104      	bne.n	800a5a6 <HAL_TIM_PWM_Start+0xf6>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5a4:	e003      	b.n	800a5ae <HAL_TIM_PWM_Start+0xfe>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 ff1a 	bl	800b3f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a3a      	ldr	r2, [pc, #232]	; (800a6ac <HAL_TIM_PWM_Start+0x1fc>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d018      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x148>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a39      	ldr	r2, [pc, #228]	; (800a6b0 <HAL_TIM_PWM_Start+0x200>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d013      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x148>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a37      	ldr	r2, [pc, #220]	; (800a6b4 <HAL_TIM_PWM_Start+0x204>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d00e      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x148>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a36      	ldr	r2, [pc, #216]	; (800a6b8 <HAL_TIM_PWM_Start+0x208>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d009      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x148>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a34      	ldr	r2, [pc, #208]	; (800a6bc <HAL_TIM_PWM_Start+0x20c>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d004      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x148>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a33      	ldr	r2, [pc, #204]	; (800a6c0 <HAL_TIM_PWM_Start+0x210>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d101      	bne.n	800a5fc <HAL_TIM_PWM_Start+0x14c>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <HAL_TIM_PWM_Start+0x14e>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a610:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a25      	ldr	r2, [pc, #148]	; (800a6ac <HAL_TIM_PWM_Start+0x1fc>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d022      	beq.n	800a662 <HAL_TIM_PWM_Start+0x1b2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a624:	d01d      	beq.n	800a662 <HAL_TIM_PWM_Start+0x1b2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a26      	ldr	r2, [pc, #152]	; (800a6c4 <HAL_TIM_PWM_Start+0x214>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d018      	beq.n	800a662 <HAL_TIM_PWM_Start+0x1b2>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a24      	ldr	r2, [pc, #144]	; (800a6c8 <HAL_TIM_PWM_Start+0x218>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d013      	beq.n	800a662 <HAL_TIM_PWM_Start+0x1b2>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a23      	ldr	r2, [pc, #140]	; (800a6cc <HAL_TIM_PWM_Start+0x21c>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00e      	beq.n	800a662 <HAL_TIM_PWM_Start+0x1b2>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a19      	ldr	r2, [pc, #100]	; (800a6b0 <HAL_TIM_PWM_Start+0x200>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d009      	beq.n	800a662 <HAL_TIM_PWM_Start+0x1b2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a18      	ldr	r2, [pc, #96]	; (800a6b4 <HAL_TIM_PWM_Start+0x204>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d004      	beq.n	800a662 <HAL_TIM_PWM_Start+0x1b2>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a18      	ldr	r2, [pc, #96]	; (800a6c0 <HAL_TIM_PWM_Start+0x210>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d115      	bne.n	800a68e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	4b19      	ldr	r3, [pc, #100]	; (800a6d0 <HAL_TIM_PWM_Start+0x220>)
 800a66a:	4013      	ands	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b06      	cmp	r3, #6
 800a672:	d015      	beq.n	800a6a0 <HAL_TIM_PWM_Start+0x1f0>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a67a:	d011      	beq.n	800a6a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a68c:	e008      	b.n	800a6a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f042 0201 	orr.w	r2, r2, #1
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	e000      	b.n	800a6a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	40012c00 	.word	0x40012c00
 800a6b0:	40013400 	.word	0x40013400
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40014400 	.word	0x40014400
 800a6bc:	40014800 	.word	0x40014800
 800a6c0:	40015000 	.word	0x40015000
 800a6c4:	40000400 	.word	0x40000400
 800a6c8:	40000800 	.word	0x40000800
 800a6cc:	40000c00 	.word	0x40000c00
 800a6d0:	00010007 	.word	0x00010007

0800a6d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	f003 0302 	and.w	r3, r3, #2
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d122      	bne.n	800a730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d11b      	bne.n	800a730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f06f 0202 	mvn.w	r2, #2
 800a700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fa7a 	bl	800ac10 <HAL_TIM_IC_CaptureCallback>
 800a71c:	e005      	b.n	800a72a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fa6c 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fa7d 	bl	800ac24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d122      	bne.n	800a784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b04      	cmp	r3, #4
 800a74a:	d11b      	bne.n	800a784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f06f 0204 	mvn.w	r2, #4
 800a754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2202      	movs	r2, #2
 800a75a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fa50 	bl	800ac10 <HAL_TIM_IC_CaptureCallback>
 800a770:	e005      	b.n	800a77e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fa42 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fa53 	bl	800ac24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	f003 0308 	and.w	r3, r3, #8
 800a78e:	2b08      	cmp	r3, #8
 800a790:	d122      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	2b08      	cmp	r3, #8
 800a79e:	d11b      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f06f 0208 	mvn.w	r2, #8
 800a7a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2204      	movs	r2, #4
 800a7ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fa26 	bl	800ac10 <HAL_TIM_IC_CaptureCallback>
 800a7c4:	e005      	b.n	800a7d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fa18 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fa29 	bl	800ac24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	f003 0310 	and.w	r3, r3, #16
 800a7e2:	2b10      	cmp	r3, #16
 800a7e4:	d122      	bne.n	800a82c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f003 0310 	and.w	r3, r3, #16
 800a7f0:	2b10      	cmp	r3, #16
 800a7f2:	d11b      	bne.n	800a82c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0210 	mvn.w	r2, #16
 800a7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2208      	movs	r2, #8
 800a802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f9fc 	bl	800ac10 <HAL_TIM_IC_CaptureCallback>
 800a818:	e005      	b.n	800a826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f9ee 	bl	800abfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f9ff 	bl	800ac24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f003 0301 	and.w	r3, r3, #1
 800a836:	2b01      	cmp	r3, #1
 800a838:	d10e      	bne.n	800a858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0301 	and.w	r3, r3, #1
 800a844:	2b01      	cmp	r3, #1
 800a846:	d107      	bne.n	800a858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0201 	mvn.w	r2, #1
 800a850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7f8 fcda 	bl	800320c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a862:	2b80      	cmp	r3, #128	; 0x80
 800a864:	d10e      	bne.n	800a884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a870:	2b80      	cmp	r3, #128	; 0x80
 800a872:	d107      	bne.n	800a884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a87c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fe7c 	bl	800b57c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a892:	d10e      	bne.n	800a8b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a89e:	2b80      	cmp	r3, #128	; 0x80
 800a8a0:	d107      	bne.n	800a8b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fe6f 	bl	800b590 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8bc:	2b40      	cmp	r3, #64	; 0x40
 800a8be:	d10e      	bne.n	800a8de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ca:	2b40      	cmp	r3, #64	; 0x40
 800a8cc:	d107      	bne.n	800a8de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f9ad 	bl	800ac38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f003 0320 	and.w	r3, r3, #32
 800a8e8:	2b20      	cmp	r3, #32
 800a8ea:	d10e      	bne.n	800a90a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	d107      	bne.n	800a90a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f06f 0220 	mvn.w	r2, #32
 800a902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fe2f 	bl	800b568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a918:	d10f      	bne.n	800a93a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a928:	d107      	bne.n	800a93a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fe35 	bl	800b5a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	691b      	ldr	r3, [r3, #16]
 800a940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a948:	d10f      	bne.n	800a96a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a958:	d107      	bne.n	800a96a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fe27 	bl	800b5b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a978:	d10f      	bne.n	800a99a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a988:	d107      	bne.n	800a99a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fe19 	bl	800b5cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9a8:	d10f      	bne.n	800a9ca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9b8:	d107      	bne.n	800a9ca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fe0b 	bl	800b5e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	e0ff      	b.n	800abf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b14      	cmp	r3, #20
 800a9fe:	f200 80f0 	bhi.w	800abe2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aa02:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aa5d 	.word	0x0800aa5d
 800aa0c:	0800abe3 	.word	0x0800abe3
 800aa10:	0800abe3 	.word	0x0800abe3
 800aa14:	0800abe3 	.word	0x0800abe3
 800aa18:	0800aa9d 	.word	0x0800aa9d
 800aa1c:	0800abe3 	.word	0x0800abe3
 800aa20:	0800abe3 	.word	0x0800abe3
 800aa24:	0800abe3 	.word	0x0800abe3
 800aa28:	0800aadf 	.word	0x0800aadf
 800aa2c:	0800abe3 	.word	0x0800abe3
 800aa30:	0800abe3 	.word	0x0800abe3
 800aa34:	0800abe3 	.word	0x0800abe3
 800aa38:	0800ab1f 	.word	0x0800ab1f
 800aa3c:	0800abe3 	.word	0x0800abe3
 800aa40:	0800abe3 	.word	0x0800abe3
 800aa44:	0800abe3 	.word	0x0800abe3
 800aa48:	0800ab61 	.word	0x0800ab61
 800aa4c:	0800abe3 	.word	0x0800abe3
 800aa50:	0800abe3 	.word	0x0800abe3
 800aa54:	0800abe3 	.word	0x0800abe3
 800aa58:	0800aba1 	.word	0x0800aba1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68b9      	ldr	r1, [r7, #8]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 f99a 	bl	800ad9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	699a      	ldr	r2, [r3, #24]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f042 0208 	orr.w	r2, r2, #8
 800aa76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	699a      	ldr	r2, [r3, #24]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 0204 	bic.w	r2, r2, #4
 800aa86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6999      	ldr	r1, [r3, #24]
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	430a      	orrs	r2, r1
 800aa98:	619a      	str	r2, [r3, #24]
      break;
 800aa9a:	e0a5      	b.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68b9      	ldr	r1, [r7, #8]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 fa14 	bl	800aed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	699a      	ldr	r2, [r3, #24]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6999      	ldr	r1, [r3, #24]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	021a      	lsls	r2, r3, #8
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	430a      	orrs	r2, r1
 800aada:	619a      	str	r2, [r3, #24]
      break;
 800aadc:	e084      	b.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68b9      	ldr	r1, [r7, #8]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fa87 	bl	800aff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69da      	ldr	r2, [r3, #28]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f042 0208 	orr.w	r2, r2, #8
 800aaf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	69da      	ldr	r2, [r3, #28]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f022 0204 	bic.w	r2, r2, #4
 800ab08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	69d9      	ldr	r1, [r3, #28]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	61da      	str	r2, [r3, #28]
      break;
 800ab1c:	e064      	b.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 faf9 	bl	800b11c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	69da      	ldr	r2, [r3, #28]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	69da      	ldr	r2, [r3, #28]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	69d9      	ldr	r1, [r3, #28]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	021a      	lsls	r2, r3, #8
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	61da      	str	r2, [r3, #28]
      break;
 800ab5e:	e043      	b.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68b9      	ldr	r1, [r7, #8]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fb6c 	bl	800b244 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0208 	orr.w	r2, r2, #8
 800ab7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f022 0204 	bic.w	r2, r2, #4
 800ab8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	691a      	ldr	r2, [r3, #16]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ab9e:	e023      	b.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68b9      	ldr	r1, [r7, #8]
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 fbb6 	bl	800b318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	021a      	lsls	r2, r3, #8
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	430a      	orrs	r2, r1
 800abde:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800abe0:	e002      	b.n	800abe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	75fb      	strb	r3, [r7, #23]
      break;
 800abe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop

0800abfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac18:	bf00      	nop
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac2c:	bf00      	nop
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a46      	ldr	r2, [pc, #280]	; (800ad78 <TIM_Base_SetConfig+0x12c>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d017      	beq.n	800ac94 <TIM_Base_SetConfig+0x48>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac6a:	d013      	beq.n	800ac94 <TIM_Base_SetConfig+0x48>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a43      	ldr	r2, [pc, #268]	; (800ad7c <TIM_Base_SetConfig+0x130>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00f      	beq.n	800ac94 <TIM_Base_SetConfig+0x48>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a42      	ldr	r2, [pc, #264]	; (800ad80 <TIM_Base_SetConfig+0x134>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d00b      	beq.n	800ac94 <TIM_Base_SetConfig+0x48>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a41      	ldr	r2, [pc, #260]	; (800ad84 <TIM_Base_SetConfig+0x138>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d007      	beq.n	800ac94 <TIM_Base_SetConfig+0x48>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a40      	ldr	r2, [pc, #256]	; (800ad88 <TIM_Base_SetConfig+0x13c>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d003      	beq.n	800ac94 <TIM_Base_SetConfig+0x48>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a3f      	ldr	r2, [pc, #252]	; (800ad8c <TIM_Base_SetConfig+0x140>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d108      	bne.n	800aca6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a33      	ldr	r2, [pc, #204]	; (800ad78 <TIM_Base_SetConfig+0x12c>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d023      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb4:	d01f      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a30      	ldr	r2, [pc, #192]	; (800ad7c <TIM_Base_SetConfig+0x130>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d01b      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a2f      	ldr	r2, [pc, #188]	; (800ad80 <TIM_Base_SetConfig+0x134>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d017      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a2e      	ldr	r2, [pc, #184]	; (800ad84 <TIM_Base_SetConfig+0x138>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a2d      	ldr	r2, [pc, #180]	; (800ad88 <TIM_Base_SetConfig+0x13c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00f      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a2d      	ldr	r2, [pc, #180]	; (800ad90 <TIM_Base_SetConfig+0x144>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00b      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a2c      	ldr	r2, [pc, #176]	; (800ad94 <TIM_Base_SetConfig+0x148>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d007      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a2b      	ldr	r2, [pc, #172]	; (800ad98 <TIM_Base_SetConfig+0x14c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d003      	beq.n	800acf6 <TIM_Base_SetConfig+0xaa>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a26      	ldr	r2, [pc, #152]	; (800ad8c <TIM_Base_SetConfig+0x140>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d108      	bne.n	800ad08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a12      	ldr	r2, [pc, #72]	; (800ad78 <TIM_Base_SetConfig+0x12c>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d013      	beq.n	800ad5c <TIM_Base_SetConfig+0x110>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <TIM_Base_SetConfig+0x13c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00f      	beq.n	800ad5c <TIM_Base_SetConfig+0x110>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a14      	ldr	r2, [pc, #80]	; (800ad90 <TIM_Base_SetConfig+0x144>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d00b      	beq.n	800ad5c <TIM_Base_SetConfig+0x110>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a13      	ldr	r2, [pc, #76]	; (800ad94 <TIM_Base_SetConfig+0x148>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d007      	beq.n	800ad5c <TIM_Base_SetConfig+0x110>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a12      	ldr	r2, [pc, #72]	; (800ad98 <TIM_Base_SetConfig+0x14c>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d003      	beq.n	800ad5c <TIM_Base_SetConfig+0x110>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a0d      	ldr	r2, [pc, #52]	; (800ad8c <TIM_Base_SetConfig+0x140>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d103      	bne.n	800ad64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	691a      	ldr	r2, [r3, #16]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	615a      	str	r2, [r3, #20]
}
 800ad6a:	bf00      	nop
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	40012c00 	.word	0x40012c00
 800ad7c:	40000400 	.word	0x40000400
 800ad80:	40000800 	.word	0x40000800
 800ad84:	40000c00 	.word	0x40000c00
 800ad88:	40013400 	.word	0x40013400
 800ad8c:	40015000 	.word	0x40015000
 800ad90:	40014000 	.word	0x40014000
 800ad94:	40014400 	.word	0x40014400
 800ad98:	40014800 	.word	0x40014800

0800ad9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b087      	sub	sp, #28
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	f023 0201 	bic.w	r2, r3, #1
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4313      	orrs	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f023 0302 	bic.w	r3, r3, #2
 800ade8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a30      	ldr	r2, [pc, #192]	; (800aeb8 <TIM_OC1_SetConfig+0x11c>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d013      	beq.n	800ae24 <TIM_OC1_SetConfig+0x88>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a2f      	ldr	r2, [pc, #188]	; (800aebc <TIM_OC1_SetConfig+0x120>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d00f      	beq.n	800ae24 <TIM_OC1_SetConfig+0x88>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a2e      	ldr	r2, [pc, #184]	; (800aec0 <TIM_OC1_SetConfig+0x124>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d00b      	beq.n	800ae24 <TIM_OC1_SetConfig+0x88>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a2d      	ldr	r2, [pc, #180]	; (800aec4 <TIM_OC1_SetConfig+0x128>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d007      	beq.n	800ae24 <TIM_OC1_SetConfig+0x88>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a2c      	ldr	r2, [pc, #176]	; (800aec8 <TIM_OC1_SetConfig+0x12c>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d003      	beq.n	800ae24 <TIM_OC1_SetConfig+0x88>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a2b      	ldr	r2, [pc, #172]	; (800aecc <TIM_OC1_SetConfig+0x130>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d10c      	bne.n	800ae3e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	f023 0308 	bic.w	r3, r3, #8
 800ae2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f023 0304 	bic.w	r3, r3, #4
 800ae3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a1d      	ldr	r2, [pc, #116]	; (800aeb8 <TIM_OC1_SetConfig+0x11c>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d013      	beq.n	800ae6e <TIM_OC1_SetConfig+0xd2>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a1c      	ldr	r2, [pc, #112]	; (800aebc <TIM_OC1_SetConfig+0x120>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d00f      	beq.n	800ae6e <TIM_OC1_SetConfig+0xd2>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a1b      	ldr	r2, [pc, #108]	; (800aec0 <TIM_OC1_SetConfig+0x124>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00b      	beq.n	800ae6e <TIM_OC1_SetConfig+0xd2>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a1a      	ldr	r2, [pc, #104]	; (800aec4 <TIM_OC1_SetConfig+0x128>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d007      	beq.n	800ae6e <TIM_OC1_SetConfig+0xd2>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a19      	ldr	r2, [pc, #100]	; (800aec8 <TIM_OC1_SetConfig+0x12c>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d003      	beq.n	800ae6e <TIM_OC1_SetConfig+0xd2>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a18      	ldr	r2, [pc, #96]	; (800aecc <TIM_OC1_SetConfig+0x130>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d111      	bne.n	800ae92 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	621a      	str	r2, [r3, #32]
}
 800aeac:	bf00      	nop
 800aeae:	371c      	adds	r7, #28
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	40012c00 	.word	0x40012c00
 800aebc:	40013400 	.word	0x40013400
 800aec0:	40014000 	.word	0x40014000
 800aec4:	40014400 	.word	0x40014400
 800aec8:	40014800 	.word	0x40014800
 800aecc:	40015000 	.word	0x40015000

0800aed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f023 0210 	bic.w	r2, r3, #16
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aefe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	021b      	lsls	r3, r3, #8
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4313      	orrs	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	f023 0320 	bic.w	r3, r3, #32
 800af1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	011b      	lsls	r3, r3, #4
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	4313      	orrs	r3, r2
 800af2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a2c      	ldr	r2, [pc, #176]	; (800afe0 <TIM_OC2_SetConfig+0x110>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d007      	beq.n	800af44 <TIM_OC2_SetConfig+0x74>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a2b      	ldr	r2, [pc, #172]	; (800afe4 <TIM_OC2_SetConfig+0x114>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d003      	beq.n	800af44 <TIM_OC2_SetConfig+0x74>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a2a      	ldr	r2, [pc, #168]	; (800afe8 <TIM_OC2_SetConfig+0x118>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d10d      	bne.n	800af60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	011b      	lsls	r3, r3, #4
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	4313      	orrs	r3, r2
 800af56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a1f      	ldr	r2, [pc, #124]	; (800afe0 <TIM_OC2_SetConfig+0x110>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d013      	beq.n	800af90 <TIM_OC2_SetConfig+0xc0>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a1e      	ldr	r2, [pc, #120]	; (800afe4 <TIM_OC2_SetConfig+0x114>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00f      	beq.n	800af90 <TIM_OC2_SetConfig+0xc0>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a1e      	ldr	r2, [pc, #120]	; (800afec <TIM_OC2_SetConfig+0x11c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00b      	beq.n	800af90 <TIM_OC2_SetConfig+0xc0>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a1d      	ldr	r2, [pc, #116]	; (800aff0 <TIM_OC2_SetConfig+0x120>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d007      	beq.n	800af90 <TIM_OC2_SetConfig+0xc0>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a1c      	ldr	r2, [pc, #112]	; (800aff4 <TIM_OC2_SetConfig+0x124>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <TIM_OC2_SetConfig+0xc0>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a17      	ldr	r2, [pc, #92]	; (800afe8 <TIM_OC2_SetConfig+0x118>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d113      	bne.n	800afb8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	621a      	str	r2, [r3, #32]
}
 800afd2:	bf00      	nop
 800afd4:	371c      	adds	r7, #28
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	40012c00 	.word	0x40012c00
 800afe4:	40013400 	.word	0x40013400
 800afe8:	40015000 	.word	0x40015000
 800afec:	40014000 	.word	0x40014000
 800aff0:	40014400 	.word	0x40014400
 800aff4:	40014800 	.word	0x40014800

0800aff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f023 0303 	bic.w	r3, r3, #3
 800b032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	021b      	lsls	r3, r3, #8
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	4313      	orrs	r3, r2
 800b050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a2b      	ldr	r2, [pc, #172]	; (800b104 <TIM_OC3_SetConfig+0x10c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d007      	beq.n	800b06a <TIM_OC3_SetConfig+0x72>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a2a      	ldr	r2, [pc, #168]	; (800b108 <TIM_OC3_SetConfig+0x110>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d003      	beq.n	800b06a <TIM_OC3_SetConfig+0x72>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	4a29      	ldr	r2, [pc, #164]	; (800b10c <TIM_OC3_SetConfig+0x114>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d10d      	bne.n	800b086 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	021b      	lsls	r3, r3, #8
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a1e      	ldr	r2, [pc, #120]	; (800b104 <TIM_OC3_SetConfig+0x10c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d013      	beq.n	800b0b6 <TIM_OC3_SetConfig+0xbe>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a1d      	ldr	r2, [pc, #116]	; (800b108 <TIM_OC3_SetConfig+0x110>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00f      	beq.n	800b0b6 <TIM_OC3_SetConfig+0xbe>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a1d      	ldr	r2, [pc, #116]	; (800b110 <TIM_OC3_SetConfig+0x118>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d00b      	beq.n	800b0b6 <TIM_OC3_SetConfig+0xbe>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a1c      	ldr	r2, [pc, #112]	; (800b114 <TIM_OC3_SetConfig+0x11c>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d007      	beq.n	800b0b6 <TIM_OC3_SetConfig+0xbe>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a1b      	ldr	r2, [pc, #108]	; (800b118 <TIM_OC3_SetConfig+0x120>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d003      	beq.n	800b0b6 <TIM_OC3_SetConfig+0xbe>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4a16      	ldr	r2, [pc, #88]	; (800b10c <TIM_OC3_SetConfig+0x114>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d113      	bne.n	800b0de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	621a      	str	r2, [r3, #32]
}
 800b0f8:	bf00      	nop
 800b0fa:	371c      	adds	r7, #28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	40012c00 	.word	0x40012c00
 800b108:	40013400 	.word	0x40013400
 800b10c:	40015000 	.word	0x40015000
 800b110:	40014000 	.word	0x40014000
 800b114:	40014400 	.word	0x40014400
 800b118:	40014800 	.word	0x40014800

0800b11c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b087      	sub	sp, #28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b14a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	021b      	lsls	r3, r3, #8
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b16a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	031b      	lsls	r3, r3, #12
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	4313      	orrs	r3, r2
 800b176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4a2c      	ldr	r2, [pc, #176]	; (800b22c <TIM_OC4_SetConfig+0x110>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d007      	beq.n	800b190 <TIM_OC4_SetConfig+0x74>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a2b      	ldr	r2, [pc, #172]	; (800b230 <TIM_OC4_SetConfig+0x114>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d003      	beq.n	800b190 <TIM_OC4_SetConfig+0x74>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a2a      	ldr	r2, [pc, #168]	; (800b234 <TIM_OC4_SetConfig+0x118>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d10d      	bne.n	800b1ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	031b      	lsls	r3, r3, #12
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a1f      	ldr	r2, [pc, #124]	; (800b22c <TIM_OC4_SetConfig+0x110>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d013      	beq.n	800b1dc <TIM_OC4_SetConfig+0xc0>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <TIM_OC4_SetConfig+0x114>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00f      	beq.n	800b1dc <TIM_OC4_SetConfig+0xc0>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a1e      	ldr	r2, [pc, #120]	; (800b238 <TIM_OC4_SetConfig+0x11c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00b      	beq.n	800b1dc <TIM_OC4_SetConfig+0xc0>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a1d      	ldr	r2, [pc, #116]	; (800b23c <TIM_OC4_SetConfig+0x120>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d007      	beq.n	800b1dc <TIM_OC4_SetConfig+0xc0>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a1c      	ldr	r2, [pc, #112]	; (800b240 <TIM_OC4_SetConfig+0x124>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <TIM_OC4_SetConfig+0xc0>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a17      	ldr	r2, [pc, #92]	; (800b234 <TIM_OC4_SetConfig+0x118>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d113      	bne.n	800b204 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	019b      	lsls	r3, r3, #6
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	019b      	lsls	r3, r3, #6
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	4313      	orrs	r3, r2
 800b202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	697a      	ldr	r2, [r7, #20]
 800b21c:	621a      	str	r2, [r3, #32]
}
 800b21e:	bf00      	nop
 800b220:	371c      	adds	r7, #28
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	40012c00 	.word	0x40012c00
 800b230:	40013400 	.word	0x40013400
 800b234:	40015000 	.word	0x40015000
 800b238:	40014000 	.word	0x40014000
 800b23c:	40014400 	.word	0x40014400
 800b240:	40014800 	.word	0x40014800

0800b244 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b244:	b480      	push	{r7}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a1b      	ldr	r3, [r3, #32]
 800b252:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b288:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	041b      	lsls	r3, r3, #16
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4313      	orrs	r3, r2
 800b294:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a19      	ldr	r2, [pc, #100]	; (800b300 <TIM_OC5_SetConfig+0xbc>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d013      	beq.n	800b2c6 <TIM_OC5_SetConfig+0x82>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a18      	ldr	r2, [pc, #96]	; (800b304 <TIM_OC5_SetConfig+0xc0>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d00f      	beq.n	800b2c6 <TIM_OC5_SetConfig+0x82>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a17      	ldr	r2, [pc, #92]	; (800b308 <TIM_OC5_SetConfig+0xc4>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d00b      	beq.n	800b2c6 <TIM_OC5_SetConfig+0x82>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a16      	ldr	r2, [pc, #88]	; (800b30c <TIM_OC5_SetConfig+0xc8>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d007      	beq.n	800b2c6 <TIM_OC5_SetConfig+0x82>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a15      	ldr	r2, [pc, #84]	; (800b310 <TIM_OC5_SetConfig+0xcc>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d003      	beq.n	800b2c6 <TIM_OC5_SetConfig+0x82>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a14      	ldr	r2, [pc, #80]	; (800b314 <TIM_OC5_SetConfig+0xd0>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d109      	bne.n	800b2da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	021b      	lsls	r3, r3, #8
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	621a      	str	r2, [r3, #32]
}
 800b2f4:	bf00      	nop
 800b2f6:	371c      	adds	r7, #28
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	40012c00 	.word	0x40012c00
 800b304:	40013400 	.word	0x40013400
 800b308:	40014000 	.word	0x40014000
 800b30c:	40014400 	.word	0x40014400
 800b310:	40014800 	.word	0x40014800
 800b314:	40015000 	.word	0x40015000

0800b318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b318:	b480      	push	{r7}
 800b31a:	b087      	sub	sp, #28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4313      	orrs	r3, r2
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b35e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a1a      	ldr	r2, [pc, #104]	; (800b3d8 <TIM_OC6_SetConfig+0xc0>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d013      	beq.n	800b39c <TIM_OC6_SetConfig+0x84>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a19      	ldr	r2, [pc, #100]	; (800b3dc <TIM_OC6_SetConfig+0xc4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00f      	beq.n	800b39c <TIM_OC6_SetConfig+0x84>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a18      	ldr	r2, [pc, #96]	; (800b3e0 <TIM_OC6_SetConfig+0xc8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d00b      	beq.n	800b39c <TIM_OC6_SetConfig+0x84>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a17      	ldr	r2, [pc, #92]	; (800b3e4 <TIM_OC6_SetConfig+0xcc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d007      	beq.n	800b39c <TIM_OC6_SetConfig+0x84>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a16      	ldr	r2, [pc, #88]	; (800b3e8 <TIM_OC6_SetConfig+0xd0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d003      	beq.n	800b39c <TIM_OC6_SetConfig+0x84>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a15      	ldr	r2, [pc, #84]	; (800b3ec <TIM_OC6_SetConfig+0xd4>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d109      	bne.n	800b3b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	695b      	ldr	r3, [r3, #20]
 800b3a8:	029b      	lsls	r3, r3, #10
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	621a      	str	r2, [r3, #32]
}
 800b3ca:	bf00      	nop
 800b3cc:	371c      	adds	r7, #28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	40012c00 	.word	0x40012c00
 800b3dc:	40013400 	.word	0x40013400
 800b3e0:	40014000 	.word	0x40014000
 800b3e4:	40014400 	.word	0x40014400
 800b3e8:	40014800 	.word	0x40014800
 800b3ec:	40015000 	.word	0x40015000

0800b3f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	f003 031f 	and.w	r3, r3, #31
 800b402:	2201      	movs	r2, #1
 800b404:	fa02 f303 	lsl.w	r3, r2, r3
 800b408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a1a      	ldr	r2, [r3, #32]
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	43db      	mvns	r3, r3
 800b412:	401a      	ands	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6a1a      	ldr	r2, [r3, #32]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f003 031f 	and.w	r3, r3, #31
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	fa01 f303 	lsl.w	r3, r1, r3
 800b428:	431a      	orrs	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	621a      	str	r2, [r3, #32]
}
 800b42e:	bf00      	nop
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
	...

0800b43c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d101      	bne.n	800b454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b450:	2302      	movs	r3, #2
 800b452:	e074      	b.n	800b53e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a34      	ldr	r2, [pc, #208]	; (800b54c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d009      	beq.n	800b492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a33      	ldr	r2, [pc, #204]	; (800b550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d004      	beq.n	800b492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a31      	ldr	r2, [pc, #196]	; (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d108      	bne.n	800b4a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a21      	ldr	r2, [pc, #132]	; (800b54c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d022      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4d4:	d01d      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a1f      	ldr	r2, [pc, #124]	; (800b558 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d018      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a1d      	ldr	r2, [pc, #116]	; (800b55c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d013      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a1c      	ldr	r2, [pc, #112]	; (800b560 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d00e      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a15      	ldr	r2, [pc, #84]	; (800b550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d009      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a18      	ldr	r2, [pc, #96]	; (800b564 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d004      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a11      	ldr	r2, [pc, #68]	; (800b554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d10c      	bne.n	800b52c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4313      	orrs	r3, r2
 800b522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	40012c00 	.word	0x40012c00
 800b550:	40013400 	.word	0x40013400
 800b554:	40015000 	.word	0x40015000
 800b558:	40000400 	.word	0x40000400
 800b55c:	40000800 	.word	0x40000800
 800b560:	40000c00 	.word	0x40000c00
 800b564:	40014000 	.word	0x40014000

0800b568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b598:	bf00      	nop
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e042      	b.n	800b68c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d106      	bne.n	800b61e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7f9 ff99 	bl	8005550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2224      	movs	r2, #36	; 0x24
 800b622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f022 0201 	bic.w	r2, r2, #1
 800b634:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fc5a 	bl	800bef0 <UART_SetConfig>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d101      	bne.n	800b646 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e022      	b.n	800b68c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 ff4a 	bl	800c4e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0201 	orr.w	r2, r2, #1
 800b682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 ffd1 	bl	800c62c <UART_CheckIdleState>
 800b68a:	4603      	mov	r3, r0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b08a      	sub	sp, #40	; 0x28
 800b698:	af02      	add	r7, sp, #8
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	f040 8083 	bne.w	800b7b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d002      	beq.n	800b6bc <HAL_UART_Transmit+0x28>
 800b6b6:	88fb      	ldrh	r3, [r7, #6]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e07b      	b.n	800b7b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d101      	bne.n	800b6ce <HAL_UART_Transmit+0x3a>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	e074      	b.n	800b7b8 <HAL_UART_Transmit+0x124>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2221      	movs	r2, #33	; 0x21
 800b6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b6e6:	f7f7 fbfb 	bl	8002ee0 <HAL_GetTick>
 800b6ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	88fa      	ldrh	r2, [r7, #6]
 800b6f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	88fa      	ldrh	r2, [r7, #6]
 800b6f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b704:	d108      	bne.n	800b718 <HAL_UART_Transmit+0x84>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d104      	bne.n	800b718 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	61bb      	str	r3, [r7, #24]
 800b716:	e003      	b.n	800b720 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b71c:	2300      	movs	r3, #0
 800b71e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b728:	e02c      	b.n	800b784 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	2200      	movs	r2, #0
 800b732:	2180      	movs	r1, #128	; 0x80
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f000 ffc4 	bl	800c6c2 <UART_WaitOnFlagUntilTimeout>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b740:	2303      	movs	r3, #3
 800b742:	e039      	b.n	800b7b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10b      	bne.n	800b762 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b758:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	3302      	adds	r3, #2
 800b75e:	61bb      	str	r3, [r7, #24]
 800b760:	e007      	b.n	800b772 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	781a      	ldrb	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	3301      	adds	r3, #1
 800b770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b778:	b29b      	uxth	r3, r3
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1cc      	bne.n	800b72a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2200      	movs	r2, #0
 800b798:	2140      	movs	r1, #64	; 0x40
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 ff91 	bl	800c6c2 <UART_WaitOnFlagUntilTimeout>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e006      	b.n	800b7b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2220      	movs	r2, #32
 800b7ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	e000      	b.n	800b7b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b7b6:	2302      	movs	r3, #2
  }
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3720      	adds	r7, #32
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08a      	sub	sp, #40	; 0x28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7d4:	2b20      	cmp	r3, #32
 800b7d6:	d142      	bne.n	800b85e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <HAL_UART_Receive_DMA+0x24>
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e03b      	b.n	800b860 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d101      	bne.n	800b7f6 <HAL_UART_Receive_DMA+0x36>
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	e034      	b.n	800b860 <HAL_UART_Receive_DMA+0xa0>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a17      	ldr	r2, [pc, #92]	; (800b868 <HAL_UART_Receive_DMA+0xa8>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d01f      	beq.n	800b84e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d018      	beq.n	800b84e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	e853 3f00 	ldrex	r3, [r3]
 800b828:	613b      	str	r3, [r7, #16]
   return(result);
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b830:	627b      	str	r3, [r7, #36]	; 0x24
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	461a      	mov	r2, r3
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	623b      	str	r3, [r7, #32]
 800b83c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83e:	69f9      	ldr	r1, [r7, #28]
 800b840:	6a3a      	ldr	r2, [r7, #32]
 800b842:	e841 2300 	strex	r3, r2, [r1]
 800b846:	61bb      	str	r3, [r7, #24]
   return(result);
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1e6      	bne.n	800b81c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b84e:	88fb      	ldrh	r3, [r7, #6]
 800b850:	461a      	mov	r2, r3
 800b852:	68b9      	ldr	r1, [r7, #8]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fffd 	bl	800c854 <UART_Start_Receive_DMA>
 800b85a:	4603      	mov	r3, r0
 800b85c:	e000      	b.n	800b860 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b85e:	2302      	movs	r3, #2
  }
}
 800b860:	4618      	mov	r0, r3
 800b862:	3728      	adds	r7, #40	; 0x28
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	40008000 	.word	0x40008000

0800b86c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b0ba      	sub	sp, #232	; 0xe8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b892:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b896:	f640 030f 	movw	r3, #2063	; 0x80f
 800b89a:	4013      	ands	r3, r2
 800b89c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b8a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d11b      	bne.n	800b8e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ac:	f003 0320 	and.w	r3, r3, #32
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d015      	beq.n	800b8e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8b8:	f003 0320 	and.w	r3, r3, #32
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d105      	bne.n	800b8cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d009      	beq.n	800b8e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 82d6 	beq.w	800be82 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	4798      	blx	r3
      }
      return;
 800b8de:	e2d0      	b.n	800be82 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 811f 	beq.w	800bb28 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b8ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b8ee:	4b8b      	ldr	r3, [pc, #556]	; (800bb1c <HAL_UART_IRQHandler+0x2b0>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d106      	bne.n	800b904 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b8f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b8fa:	4b89      	ldr	r3, [pc, #548]	; (800bb20 <HAL_UART_IRQHandler+0x2b4>)
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f000 8112 	beq.w	800bb28 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b908:	f003 0301 	and.w	r3, r3, #1
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d011      	beq.n	800b934 <HAL_UART_IRQHandler+0xc8>
 800b910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00b      	beq.n	800b934 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2201      	movs	r2, #1
 800b922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b92a:	f043 0201 	orr.w	r2, r3, #1
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b938:	f003 0302 	and.w	r3, r3, #2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d011      	beq.n	800b964 <HAL_UART_IRQHandler+0xf8>
 800b940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2202      	movs	r2, #2
 800b952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b95a:	f043 0204 	orr.w	r2, r3, #4
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d011      	beq.n	800b994 <HAL_UART_IRQHandler+0x128>
 800b970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00b      	beq.n	800b994 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2204      	movs	r2, #4
 800b982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b98a:	f043 0202 	orr.w	r2, r3, #2
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b998:	f003 0308 	and.w	r3, r3, #8
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d017      	beq.n	800b9d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9a4:	f003 0320 	and.w	r3, r3, #32
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d105      	bne.n	800b9b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b9ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b9b0:	4b5a      	ldr	r3, [pc, #360]	; (800bb1c <HAL_UART_IRQHandler+0x2b0>)
 800b9b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00b      	beq.n	800b9d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2208      	movs	r2, #8
 800b9be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9c6:	f043 0208 	orr.w	r2, r3, #8
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d012      	beq.n	800ba02 <HAL_UART_IRQHandler+0x196>
 800b9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00c      	beq.n	800ba02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9f8:	f043 0220 	orr.w	r2, r3, #32
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 823c 	beq.w	800be86 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba12:	f003 0320 	and.w	r3, r3, #32
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d013      	beq.n	800ba42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba1e:	f003 0320 	and.w	r3, r3, #32
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d105      	bne.n	800ba32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d007      	beq.n	800ba42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba56:	2b40      	cmp	r3, #64	; 0x40
 800ba58:	d005      	beq.n	800ba66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d04f      	beq.n	800bb06 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 ffdd 	bl	800ca26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba76:	2b40      	cmp	r3, #64	; 0x40
 800ba78:	d141      	bne.n	800bafe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3308      	adds	r3, #8
 800ba80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba88:	e853 3f00 	ldrex	r3, [r3]
 800ba8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3308      	adds	r3, #8
 800baa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800baa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800baaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bab6:	e841 2300 	strex	r3, r2, [r1]
 800baba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800babe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1d9      	bne.n	800ba7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d013      	beq.n	800baf6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bad2:	4a14      	ldr	r2, [pc, #80]	; (800bb24 <HAL_UART_IRQHandler+0x2b8>)
 800bad4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bada:	4618      	mov	r0, r3
 800badc:	f7fb fd52 	bl	8007584 <HAL_DMA_Abort_IT>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d017      	beq.n	800bb16 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800baf0:	4610      	mov	r0, r2
 800baf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf4:	e00f      	b.n	800bb16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f9e4 	bl	800bec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bafc:	e00b      	b.n	800bb16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f9e0 	bl	800bec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb04:	e007      	b.n	800bb16 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f9dc 	bl	800bec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bb14:	e1b7      	b.n	800be86 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb16:	bf00      	nop
    return;
 800bb18:	e1b5      	b.n	800be86 <HAL_UART_IRQHandler+0x61a>
 800bb1a:	bf00      	nop
 800bb1c:	10000001 	.word	0x10000001
 800bb20:	04000120 	.word	0x04000120
 800bb24:	0800ccd1 	.word	0x0800ccd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	f040 814a 	bne.w	800bdc6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb36:	f003 0310 	and.w	r3, r3, #16
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 8143 	beq.w	800bdc6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb44:	f003 0310 	and.w	r3, r3, #16
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 813c 	beq.w	800bdc6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2210      	movs	r2, #16
 800bb54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb60:	2b40      	cmp	r3, #64	; 0x40
 800bb62:	f040 80b5 	bne.w	800bcd0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	f000 8187 	beq.w	800be8a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb86:	429a      	cmp	r2, r3
 800bb88:	f080 817f 	bcs.w	800be8a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f040 8086 	bne.w	800bcb4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bbbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbd6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bbde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bbea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1da      	bne.n	800bba8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc04:	f023 0301 	bic.w	r3, r3, #1
 800bc08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3308      	adds	r3, #8
 800bc12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1e1      	bne.n	800bbf2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3308      	adds	r3, #8
 800bc34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc38:	e853 3f00 	ldrex	r3, [r3]
 800bc3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc52:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc5a:	e841 2300 	strex	r3, r2, [r1]
 800bc5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1e3      	bne.n	800bc2e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7c:	e853 3f00 	ldrex	r3, [r3]
 800bc80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc84:	f023 0310 	bic.w	r3, r3, #16
 800bc88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	461a      	mov	r2, r3
 800bc92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc96:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1e4      	bne.n	800bc74 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fb fc0f 	bl	80074d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	1ad3      	subs	r3, r2, r3
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 f905 	bl	800bed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcce:	e0dc      	b.n	800be8a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 80ce 	beq.w	800be8e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bcf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f000 80c9 	beq.w	800be8e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd04:	e853 3f00 	ldrex	r3, [r3]
 800bd08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd1e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd26:	e841 2300 	strex	r3, r2, [r1]
 800bd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1e4      	bne.n	800bcfc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3308      	adds	r3, #8
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	e853 3f00 	ldrex	r3, [r3]
 800bd40:	623b      	str	r3, [r7, #32]
   return(result);
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd48:	f023 0301 	bic.w	r3, r3, #1
 800bd4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3308      	adds	r3, #8
 800bd56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd5a:	633a      	str	r2, [r7, #48]	; 0x30
 800bd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e1      	bne.n	800bd32 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	e853 3f00 	ldrex	r3, [r3]
 800bd8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f023 0310 	bic.w	r3, r3, #16
 800bd96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bda4:	61fb      	str	r3, [r7, #28]
 800bda6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda8:	69b9      	ldr	r1, [r7, #24]
 800bdaa:	69fa      	ldr	r2, [r7, #28]
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	617b      	str	r3, [r7, #20]
   return(result);
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e4      	bne.n	800bd82 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bdb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f88a 	bl	800bed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdc4:	e063      	b.n	800be8e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bdc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00e      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x584>
 800bdd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d008      	beq.n	800bdf0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bde6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 ffb2 	bl	800cd52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdee:	e051      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bdf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d014      	beq.n	800be26 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bdfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be04:	2b00      	cmp	r3, #0
 800be06:	d105      	bne.n	800be14 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d008      	beq.n	800be26 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d03a      	beq.n	800be92 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	4798      	blx	r3
    }
    return;
 800be24:	e035      	b.n	800be92 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <HAL_UART_IRQHandler+0x5da>
 800be32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 ff5c 	bl	800ccfc <UART_EndTransmit_IT>
    return;
 800be44:	e026      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <HAL_UART_IRQHandler+0x5fa>
 800be52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 ff8b 	bl	800cd7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be64:	e016      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800be66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d010      	beq.n	800be94 <HAL_UART_IRQHandler+0x628>
 800be72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be76:	2b00      	cmp	r3, #0
 800be78:	da0c      	bge.n	800be94 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 ff73 	bl	800cd66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be80:	e008      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
      return;
 800be82:	bf00      	nop
 800be84:	e006      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
    return;
 800be86:	bf00      	nop
 800be88:	e004      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
      return;
 800be8a:	bf00      	nop
 800be8c:	e002      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
      return;
 800be8e:	bf00      	nop
 800be90:	e000      	b.n	800be94 <HAL_UART_IRQHandler+0x628>
    return;
 800be92:	bf00      	nop
  }
}
 800be94:	37e8      	adds	r7, #232	; 0xe8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop

0800be9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	460b      	mov	r3, r1
 800bee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bee4:	bf00      	nop
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bef4:	b08c      	sub	sp, #48	; 0x30
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	689a      	ldr	r2, [r3, #8]
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	431a      	orrs	r2, r3
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	69db      	ldr	r3, [r3, #28]
 800bf14:	4313      	orrs	r3, r2
 800bf16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	4baa      	ldr	r3, [pc, #680]	; (800c1c8 <UART_SetConfig+0x2d8>)
 800bf20:	4013      	ands	r3, r2
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	6812      	ldr	r2, [r2, #0]
 800bf26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf28:	430b      	orrs	r3, r1
 800bf2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	68da      	ldr	r2, [r3, #12]
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a9f      	ldr	r2, [pc, #636]	; (800c1cc <UART_SetConfig+0x2dc>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d004      	beq.n	800bf5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bf66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	6812      	ldr	r2, [r2, #0]
 800bf6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf70:	430b      	orrs	r3, r1
 800bf72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7a:	f023 010f 	bic.w	r1, r3, #15
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	430a      	orrs	r2, r1
 800bf88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a90      	ldr	r2, [pc, #576]	; (800c1d0 <UART_SetConfig+0x2e0>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d125      	bne.n	800bfe0 <UART_SetConfig+0xf0>
 800bf94:	4b8f      	ldr	r3, [pc, #572]	; (800c1d4 <UART_SetConfig+0x2e4>)
 800bf96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf9a:	f003 0303 	and.w	r3, r3, #3
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d81a      	bhi.n	800bfd8 <UART_SetConfig+0xe8>
 800bfa2:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <UART_SetConfig+0xb8>)
 800bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa8:	0800bfb9 	.word	0x0800bfb9
 800bfac:	0800bfc9 	.word	0x0800bfc9
 800bfb0:	0800bfc1 	.word	0x0800bfc1
 800bfb4:	0800bfd1 	.word	0x0800bfd1
 800bfb8:	2301      	movs	r3, #1
 800bfba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfbe:	e116      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfc6:	e112      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800bfc8:	2304      	movs	r3, #4
 800bfca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfce:	e10e      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfd6:	e10a      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800bfd8:	2310      	movs	r3, #16
 800bfda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bfde:	e106      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a7c      	ldr	r2, [pc, #496]	; (800c1d8 <UART_SetConfig+0x2e8>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d138      	bne.n	800c05c <UART_SetConfig+0x16c>
 800bfea:	4b7a      	ldr	r3, [pc, #488]	; (800c1d4 <UART_SetConfig+0x2e4>)
 800bfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff0:	f003 030c 	and.w	r3, r3, #12
 800bff4:	2b0c      	cmp	r3, #12
 800bff6:	d82d      	bhi.n	800c054 <UART_SetConfig+0x164>
 800bff8:	a201      	add	r2, pc, #4	; (adr r2, 800c000 <UART_SetConfig+0x110>)
 800bffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffe:	bf00      	nop
 800c000:	0800c035 	.word	0x0800c035
 800c004:	0800c055 	.word	0x0800c055
 800c008:	0800c055 	.word	0x0800c055
 800c00c:	0800c055 	.word	0x0800c055
 800c010:	0800c045 	.word	0x0800c045
 800c014:	0800c055 	.word	0x0800c055
 800c018:	0800c055 	.word	0x0800c055
 800c01c:	0800c055 	.word	0x0800c055
 800c020:	0800c03d 	.word	0x0800c03d
 800c024:	0800c055 	.word	0x0800c055
 800c028:	0800c055 	.word	0x0800c055
 800c02c:	0800c055 	.word	0x0800c055
 800c030:	0800c04d 	.word	0x0800c04d
 800c034:	2300      	movs	r3, #0
 800c036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c03a:	e0d8      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c03c:	2302      	movs	r3, #2
 800c03e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c042:	e0d4      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c044:	2304      	movs	r3, #4
 800c046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c04a:	e0d0      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c04c:	2308      	movs	r3, #8
 800c04e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c052:	e0cc      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c054:	2310      	movs	r3, #16
 800c056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c05a:	e0c8      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a5e      	ldr	r2, [pc, #376]	; (800c1dc <UART_SetConfig+0x2ec>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d125      	bne.n	800c0b2 <UART_SetConfig+0x1c2>
 800c066:	4b5b      	ldr	r3, [pc, #364]	; (800c1d4 <UART_SetConfig+0x2e4>)
 800c068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c06c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c070:	2b30      	cmp	r3, #48	; 0x30
 800c072:	d016      	beq.n	800c0a2 <UART_SetConfig+0x1b2>
 800c074:	2b30      	cmp	r3, #48	; 0x30
 800c076:	d818      	bhi.n	800c0aa <UART_SetConfig+0x1ba>
 800c078:	2b20      	cmp	r3, #32
 800c07a:	d00a      	beq.n	800c092 <UART_SetConfig+0x1a2>
 800c07c:	2b20      	cmp	r3, #32
 800c07e:	d814      	bhi.n	800c0aa <UART_SetConfig+0x1ba>
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <UART_SetConfig+0x19a>
 800c084:	2b10      	cmp	r3, #16
 800c086:	d008      	beq.n	800c09a <UART_SetConfig+0x1aa>
 800c088:	e00f      	b.n	800c0aa <UART_SetConfig+0x1ba>
 800c08a:	2300      	movs	r3, #0
 800c08c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c090:	e0ad      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c092:	2302      	movs	r3, #2
 800c094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c098:	e0a9      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c09a:	2304      	movs	r3, #4
 800c09c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0a0:	e0a5      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c0a2:	2308      	movs	r3, #8
 800c0a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0a8:	e0a1      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c0aa:	2310      	movs	r3, #16
 800c0ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0b0:	e09d      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a4a      	ldr	r2, [pc, #296]	; (800c1e0 <UART_SetConfig+0x2f0>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d125      	bne.n	800c108 <UART_SetConfig+0x218>
 800c0bc:	4b45      	ldr	r3, [pc, #276]	; (800c1d4 <UART_SetConfig+0x2e4>)
 800c0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c0c6:	2bc0      	cmp	r3, #192	; 0xc0
 800c0c8:	d016      	beq.n	800c0f8 <UART_SetConfig+0x208>
 800c0ca:	2bc0      	cmp	r3, #192	; 0xc0
 800c0cc:	d818      	bhi.n	800c100 <UART_SetConfig+0x210>
 800c0ce:	2b80      	cmp	r3, #128	; 0x80
 800c0d0:	d00a      	beq.n	800c0e8 <UART_SetConfig+0x1f8>
 800c0d2:	2b80      	cmp	r3, #128	; 0x80
 800c0d4:	d814      	bhi.n	800c100 <UART_SetConfig+0x210>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d002      	beq.n	800c0e0 <UART_SetConfig+0x1f0>
 800c0da:	2b40      	cmp	r3, #64	; 0x40
 800c0dc:	d008      	beq.n	800c0f0 <UART_SetConfig+0x200>
 800c0de:	e00f      	b.n	800c100 <UART_SetConfig+0x210>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0e6:	e082      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0ee:	e07e      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c0f0:	2304      	movs	r3, #4
 800c0f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0f6:	e07a      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c0f8:	2308      	movs	r3, #8
 800c0fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0fe:	e076      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c100:	2310      	movs	r3, #16
 800c102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c106:	e072      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a35      	ldr	r2, [pc, #212]	; (800c1e4 <UART_SetConfig+0x2f4>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d12a      	bne.n	800c168 <UART_SetConfig+0x278>
 800c112:	4b30      	ldr	r3, [pc, #192]	; (800c1d4 <UART_SetConfig+0x2e4>)
 800c114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c11c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c120:	d01a      	beq.n	800c158 <UART_SetConfig+0x268>
 800c122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c126:	d81b      	bhi.n	800c160 <UART_SetConfig+0x270>
 800c128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c12c:	d00c      	beq.n	800c148 <UART_SetConfig+0x258>
 800c12e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c132:	d815      	bhi.n	800c160 <UART_SetConfig+0x270>
 800c134:	2b00      	cmp	r3, #0
 800c136:	d003      	beq.n	800c140 <UART_SetConfig+0x250>
 800c138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c13c:	d008      	beq.n	800c150 <UART_SetConfig+0x260>
 800c13e:	e00f      	b.n	800c160 <UART_SetConfig+0x270>
 800c140:	2300      	movs	r3, #0
 800c142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c146:	e052      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c148:	2302      	movs	r3, #2
 800c14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c14e:	e04e      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c150:	2304      	movs	r3, #4
 800c152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c156:	e04a      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c158:	2308      	movs	r3, #8
 800c15a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c15e:	e046      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c160:	2310      	movs	r3, #16
 800c162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c166:	e042      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a17      	ldr	r2, [pc, #92]	; (800c1cc <UART_SetConfig+0x2dc>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d13a      	bne.n	800c1e8 <UART_SetConfig+0x2f8>
 800c172:	4b18      	ldr	r3, [pc, #96]	; (800c1d4 <UART_SetConfig+0x2e4>)
 800c174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c178:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c17c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c180:	d01a      	beq.n	800c1b8 <UART_SetConfig+0x2c8>
 800c182:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c186:	d81b      	bhi.n	800c1c0 <UART_SetConfig+0x2d0>
 800c188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c18c:	d00c      	beq.n	800c1a8 <UART_SetConfig+0x2b8>
 800c18e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c192:	d815      	bhi.n	800c1c0 <UART_SetConfig+0x2d0>
 800c194:	2b00      	cmp	r3, #0
 800c196:	d003      	beq.n	800c1a0 <UART_SetConfig+0x2b0>
 800c198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c19c:	d008      	beq.n	800c1b0 <UART_SetConfig+0x2c0>
 800c19e:	e00f      	b.n	800c1c0 <UART_SetConfig+0x2d0>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1a6:	e022      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ae:	e01e      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c1b0:	2304      	movs	r3, #4
 800c1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1b6:	e01a      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c1b8:	2308      	movs	r3, #8
 800c1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1be:	e016      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c1c0:	2310      	movs	r3, #16
 800c1c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1c6:	e012      	b.n	800c1ee <UART_SetConfig+0x2fe>
 800c1c8:	cfff69f3 	.word	0xcfff69f3
 800c1cc:	40008000 	.word	0x40008000
 800c1d0:	40013800 	.word	0x40013800
 800c1d4:	40021000 	.word	0x40021000
 800c1d8:	40004400 	.word	0x40004400
 800c1dc:	40004800 	.word	0x40004800
 800c1e0:	40004c00 	.word	0x40004c00
 800c1e4:	40005000 	.word	0x40005000
 800c1e8:	2310      	movs	r3, #16
 800c1ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4aae      	ldr	r2, [pc, #696]	; (800c4ac <UART_SetConfig+0x5bc>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	f040 8097 	bne.w	800c328 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1fe:	2b08      	cmp	r3, #8
 800c200:	d823      	bhi.n	800c24a <UART_SetConfig+0x35a>
 800c202:	a201      	add	r2, pc, #4	; (adr r2, 800c208 <UART_SetConfig+0x318>)
 800c204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c208:	0800c22d 	.word	0x0800c22d
 800c20c:	0800c24b 	.word	0x0800c24b
 800c210:	0800c235 	.word	0x0800c235
 800c214:	0800c24b 	.word	0x0800c24b
 800c218:	0800c23b 	.word	0x0800c23b
 800c21c:	0800c24b 	.word	0x0800c24b
 800c220:	0800c24b 	.word	0x0800c24b
 800c224:	0800c24b 	.word	0x0800c24b
 800c228:	0800c243 	.word	0x0800c243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c22c:	f7fd f936 	bl	800949c <HAL_RCC_GetPCLK1Freq>
 800c230:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c232:	e010      	b.n	800c256 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c234:	4b9e      	ldr	r3, [pc, #632]	; (800c4b0 <UART_SetConfig+0x5c0>)
 800c236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c238:	e00d      	b.n	800c256 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c23a:	f7fd f8c1 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 800c23e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c240:	e009      	b.n	800c256 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c248:	e005      	b.n	800c256 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c254:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 8130 	beq.w	800c4be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	4a94      	ldr	r2, [pc, #592]	; (800c4b4 <UART_SetConfig+0x5c4>)
 800c264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c268:	461a      	mov	r2, r3
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c270:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	4613      	mov	r3, r2
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	4413      	add	r3, r2
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d305      	bcc.n	800c28e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d903      	bls.n	800c296 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c294:	e113      	b.n	800c4be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c298:	2200      	movs	r2, #0
 800c29a:	60bb      	str	r3, [r7, #8]
 800c29c:	60fa      	str	r2, [r7, #12]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a2:	4a84      	ldr	r2, [pc, #528]	; (800c4b4 <UART_SetConfig+0x5c4>)
 800c2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2b8:	f7f4 fd0e 	bl	8000cd8 <__aeabi_uldivmod>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	f04f 0200 	mov.w	r2, #0
 800c2c8:	f04f 0300 	mov.w	r3, #0
 800c2cc:	020b      	lsls	r3, r1, #8
 800c2ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2d2:	0202      	lsls	r2, r0, #8
 800c2d4:	6979      	ldr	r1, [r7, #20]
 800c2d6:	6849      	ldr	r1, [r1, #4]
 800c2d8:	0849      	lsrs	r1, r1, #1
 800c2da:	2000      	movs	r0, #0
 800c2dc:	460c      	mov	r4, r1
 800c2de:	4605      	mov	r5, r0
 800c2e0:	eb12 0804 	adds.w	r8, r2, r4
 800c2e4:	eb43 0905 	adc.w	r9, r3, r5
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	469a      	mov	sl, r3
 800c2f0:	4693      	mov	fp, r2
 800c2f2:	4652      	mov	r2, sl
 800c2f4:	465b      	mov	r3, fp
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	f7f4 fced 	bl	8000cd8 <__aeabi_uldivmod>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4613      	mov	r3, r2
 800c304:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c30c:	d308      	bcc.n	800c320 <UART_SetConfig+0x430>
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c314:	d204      	bcs.n	800c320 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6a3a      	ldr	r2, [r7, #32]
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	e0ce      	b.n	800c4be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c326:	e0ca      	b.n	800c4be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c330:	d166      	bne.n	800c400 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c336:	2b08      	cmp	r3, #8
 800c338:	d827      	bhi.n	800c38a <UART_SetConfig+0x49a>
 800c33a:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <UART_SetConfig+0x450>)
 800c33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c340:	0800c365 	.word	0x0800c365
 800c344:	0800c36d 	.word	0x0800c36d
 800c348:	0800c375 	.word	0x0800c375
 800c34c:	0800c38b 	.word	0x0800c38b
 800c350:	0800c37b 	.word	0x0800c37b
 800c354:	0800c38b 	.word	0x0800c38b
 800c358:	0800c38b 	.word	0x0800c38b
 800c35c:	0800c38b 	.word	0x0800c38b
 800c360:	0800c383 	.word	0x0800c383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c364:	f7fd f89a 	bl	800949c <HAL_RCC_GetPCLK1Freq>
 800c368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c36a:	e014      	b.n	800c396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c36c:	f7fd f8ac 	bl	80094c8 <HAL_RCC_GetPCLK2Freq>
 800c370:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c372:	e010      	b.n	800c396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c374:	4b4e      	ldr	r3, [pc, #312]	; (800c4b0 <UART_SetConfig+0x5c0>)
 800c376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c378:	e00d      	b.n	800c396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c37a:	f7fd f821 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 800c37e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c380:	e009      	b.n	800c396 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c388:	e005      	b.n	800c396 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c38a:	2300      	movs	r3, #0
 800c38c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 8090 	beq.w	800c4be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a2:	4a44      	ldr	r2, [pc, #272]	; (800c4b4 <UART_SetConfig+0x5c4>)
 800c3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3b0:	005a      	lsls	r2, r3, #1
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	085b      	lsrs	r3, r3, #1
 800c3b8:	441a      	add	r2, r3
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	2b0f      	cmp	r3, #15
 800c3c8:	d916      	bls.n	800c3f8 <UART_SetConfig+0x508>
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3d0:	d212      	bcs.n	800c3f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f023 030f 	bic.w	r3, r3, #15
 800c3da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	085b      	lsrs	r3, r3, #1
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	8bfa      	ldrh	r2, [r7, #30]
 800c3f4:	60da      	str	r2, [r3, #12]
 800c3f6:	e062      	b.n	800c4be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c3fe:	e05e      	b.n	800c4be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c404:	2b08      	cmp	r3, #8
 800c406:	d828      	bhi.n	800c45a <UART_SetConfig+0x56a>
 800c408:	a201      	add	r2, pc, #4	; (adr r2, 800c410 <UART_SetConfig+0x520>)
 800c40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40e:	bf00      	nop
 800c410:	0800c435 	.word	0x0800c435
 800c414:	0800c43d 	.word	0x0800c43d
 800c418:	0800c445 	.word	0x0800c445
 800c41c:	0800c45b 	.word	0x0800c45b
 800c420:	0800c44b 	.word	0x0800c44b
 800c424:	0800c45b 	.word	0x0800c45b
 800c428:	0800c45b 	.word	0x0800c45b
 800c42c:	0800c45b 	.word	0x0800c45b
 800c430:	0800c453 	.word	0x0800c453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c434:	f7fd f832 	bl	800949c <HAL_RCC_GetPCLK1Freq>
 800c438:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c43a:	e014      	b.n	800c466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c43c:	f7fd f844 	bl	80094c8 <HAL_RCC_GetPCLK2Freq>
 800c440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c442:	e010      	b.n	800c466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c444:	4b1a      	ldr	r3, [pc, #104]	; (800c4b0 <UART_SetConfig+0x5c0>)
 800c446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c448:	e00d      	b.n	800c466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c44a:	f7fc ffb9 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 800c44e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c450:	e009      	b.n	800c466 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c458:	e005      	b.n	800c466 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c464:	bf00      	nop
    }

    if (pclk != 0U)
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d028      	beq.n	800c4be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	4a10      	ldr	r2, [pc, #64]	; (800c4b4 <UART_SetConfig+0x5c4>)
 800c472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c476:	461a      	mov	r2, r3
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	085b      	lsrs	r3, r3, #1
 800c484:	441a      	add	r2, r3
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	2b0f      	cmp	r3, #15
 800c494:	d910      	bls.n	800c4b8 <UART_SetConfig+0x5c8>
 800c496:	6a3b      	ldr	r3, [r7, #32]
 800c498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c49c:	d20c      	bcs.n	800c4b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60da      	str	r2, [r3, #12]
 800c4a8:	e009      	b.n	800c4be <UART_SetConfig+0x5ce>
 800c4aa:	bf00      	nop
 800c4ac:	40008000 	.word	0x40008000
 800c4b0:	00f42400 	.word	0x00f42400
 800c4b4:	0800feb4 	.word	0x0800feb4
      }
      else
      {
        ret = HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c4da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3730      	adds	r7, #48	; 0x30
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c4e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00a      	beq.n	800c512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c538:	f003 0304 	and.w	r3, r3, #4
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00a      	beq.n	800c556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	430a      	orrs	r2, r1
 800c554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c55a:	f003 0308 	and.w	r3, r3, #8
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00a      	beq.n	800c578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	430a      	orrs	r2, r1
 800c576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57c:	f003 0310 	and.w	r3, r3, #16
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00a      	beq.n	800c59a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	430a      	orrs	r2, r1
 800c598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59e:	f003 0320 	and.w	r3, r3, #32
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00a      	beq.n	800c5bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	430a      	orrs	r2, r1
 800c5ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d01a      	beq.n	800c5fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	430a      	orrs	r2, r1
 800c5dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5e6:	d10a      	bne.n	800c5fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	430a      	orrs	r2, r1
 800c61e:	605a      	str	r2, [r3, #4]
  }
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af02      	add	r7, sp, #8
 800c632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c63c:	f7f6 fc50 	bl	8002ee0 <HAL_GetTick>
 800c640:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0308 	and.w	r3, r3, #8
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d10e      	bne.n	800c66e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f82f 	bl	800c6c2 <UART_WaitOnFlagUntilTimeout>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	e025      	b.n	800c6ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d10e      	bne.n	800c69a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c67c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 f819 	bl	800c6c2 <UART_WaitOnFlagUntilTimeout>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d001      	beq.n	800c69a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	e00f      	b.n	800c6ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2220      	movs	r2, #32
 800c69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2220      	movs	r2, #32
 800c6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b09c      	sub	sp, #112	; 0x70
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	60f8      	str	r0, [r7, #12]
 800c6ca:	60b9      	str	r1, [r7, #8]
 800c6cc:	603b      	str	r3, [r7, #0]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6d2:	e0a9      	b.n	800c828 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6da:	f000 80a5 	beq.w	800c828 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6de:	f7f6 fbff 	bl	8002ee0 <HAL_GetTick>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d302      	bcc.n	800c6f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c6ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d140      	bne.n	800c776 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6fc:	e853 3f00 	ldrex	r3, [r3]
 800c700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c708:	667b      	str	r3, [r7, #100]	; 0x64
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c712:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c71a:	e841 2300 	strex	r3, r2, [r1]
 800c71e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1e6      	bne.n	800c6f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c730:	e853 3f00 	ldrex	r3, [r3]
 800c734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	f023 0301 	bic.w	r3, r3, #1
 800c73c:	663b      	str	r3, [r7, #96]	; 0x60
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3308      	adds	r3, #8
 800c744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c746:	64ba      	str	r2, [r7, #72]	; 0x48
 800c748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c74e:	e841 2300 	strex	r3, r2, [r1]
 800c752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1e5      	bne.n	800c726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2220      	movs	r2, #32
 800c75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2220      	movs	r2, #32
 800c766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c772:	2303      	movs	r3, #3
 800c774:	e069      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0304 	and.w	r3, r3, #4
 800c780:	2b00      	cmp	r3, #0
 800c782:	d051      	beq.n	800c828 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c78e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c792:	d149      	bne.n	800c828 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c79c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	e853 3f00 	ldrex	r3, [r3]
 800c7aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c7b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c7be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7c4:	e841 2300 	strex	r3, r2, [r1]
 800c7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e6      	bne.n	800c79e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	e853 3f00 	ldrex	r3, [r3]
 800c7de:	613b      	str	r3, [r7, #16]
   return(result);
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	f023 0301 	bic.w	r3, r3, #1
 800c7e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	3308      	adds	r3, #8
 800c7ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c7f0:	623a      	str	r2, [r7, #32]
 800c7f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f4:	69f9      	ldr	r1, [r7, #28]
 800c7f6:	6a3a      	ldr	r2, [r7, #32]
 800c7f8:	e841 2300 	strex	r3, r2, [r1]
 800c7fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1e5      	bne.n	800c7d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2220      	movs	r2, #32
 800c808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2220      	movs	r2, #32
 800c810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2220      	movs	r2, #32
 800c818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e010      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	69da      	ldr	r2, [r3, #28]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	4013      	ands	r3, r2
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	429a      	cmp	r2, r3
 800c836:	bf0c      	ite	eq
 800c838:	2301      	moveq	r3, #1
 800c83a:	2300      	movne	r3, #0
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	461a      	mov	r2, r3
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	429a      	cmp	r2, r3
 800c844:	f43f af46 	beq.w	800c6d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3770      	adds	r7, #112	; 0x70
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b096      	sub	sp, #88	; 0x58
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	4613      	mov	r3, r2
 800c860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	88fa      	ldrh	r2, [r7, #6]
 800c86c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2222      	movs	r2, #34	; 0x22
 800c87c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c884:	2b00      	cmp	r3, #0
 800c886:	d02c      	beq.n	800c8e2 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c88c:	4a42      	ldr	r2, [pc, #264]	; (800c998 <UART_Start_Receive_DMA+0x144>)
 800c88e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c894:	4a41      	ldr	r2, [pc, #260]	; (800c99c <UART_Start_Receive_DMA+0x148>)
 800c896:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c89c:	4a40      	ldr	r2, [pc, #256]	; (800c9a0 <UART_Start_Receive_DMA+0x14c>)
 800c89e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	3324      	adds	r3, #36	; 0x24
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	88fb      	ldrh	r3, [r7, #6]
 800c8bc:	f7fa fd8e 	bl	80073dc <HAL_DMA_Start_IT>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00d      	beq.n	800c8e2 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2210      	movs	r2, #16
 800c8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2220      	movs	r2, #32
 800c8da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e055      	b.n	800c98e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d018      	beq.n	800c924 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fa:	e853 3f00 	ldrex	r3, [r3]
 800c8fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c906:	657b      	str	r3, [r7, #84]	; 0x54
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c910:	64bb      	str	r3, [r7, #72]	; 0x48
 800c912:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c914:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c918:	e841 2300 	strex	r3, r2, [r1]
 800c91c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1e6      	bne.n	800c8f2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3308      	adds	r3, #8
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	e853 3f00 	ldrex	r3, [r3]
 800c932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	f043 0301 	orr.w	r3, r3, #1
 800c93a:	653b      	str	r3, [r7, #80]	; 0x50
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	3308      	adds	r3, #8
 800c942:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c944:	637a      	str	r2, [r7, #52]	; 0x34
 800c946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c94a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c94c:	e841 2300 	strex	r3, r2, [r1]
 800c950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1e5      	bne.n	800c924 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	3308      	adds	r3, #8
 800c95e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	e853 3f00 	ldrex	r3, [r3]
 800c966:	613b      	str	r3, [r7, #16]
   return(result);
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c96e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	3308      	adds	r3, #8
 800c976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c978:	623a      	str	r2, [r7, #32]
 800c97a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97c:	69f9      	ldr	r1, [r7, #28]
 800c97e:	6a3a      	ldr	r2, [r7, #32]
 800c980:	e841 2300 	strex	r3, r2, [r1]
 800c984:	61bb      	str	r3, [r7, #24]
   return(result);
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1e5      	bne.n	800c958 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3758      	adds	r7, #88	; 0x58
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	0800caf3 	.word	0x0800caf3
 800c99c:	0800cc19 	.word	0x0800cc19
 800c9a0:	0800cc51 	.word	0x0800cc51

0800c9a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b08f      	sub	sp, #60	; 0x3c
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b2:	6a3b      	ldr	r3, [r7, #32]
 800c9b4:	e853 3f00 	ldrex	r3, [r3]
 800c9b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c9c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d2:	e841 2300 	strex	r3, r2, [r1]
 800c9d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1e6      	bne.n	800c9ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	3308      	adds	r3, #8
 800c9e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	e853 3f00 	ldrex	r3, [r3]
 800c9ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c9f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3308      	adds	r3, #8
 800c9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9fe:	61ba      	str	r2, [r7, #24]
 800ca00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca02:	6979      	ldr	r1, [r7, #20]
 800ca04:	69ba      	ldr	r2, [r7, #24]
 800ca06:	e841 2300 	strex	r3, r2, [r1]
 800ca0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e5      	bne.n	800c9de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2220      	movs	r2, #32
 800ca16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ca1a:	bf00      	nop
 800ca1c:	373c      	adds	r7, #60	; 0x3c
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca26:	b480      	push	{r7}
 800ca28:	b095      	sub	sp, #84	; 0x54
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca36:	e853 3f00 	ldrex	r3, [r3]
 800ca3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ca4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca54:	e841 2300 	strex	r3, r2, [r1]
 800ca58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1e6      	bne.n	800ca2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3308      	adds	r3, #8
 800ca66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	e853 3f00 	ldrex	r3, [r3]
 800ca6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca76:	f023 0301 	bic.w	r3, r3, #1
 800ca7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	3308      	adds	r3, #8
 800ca82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca8c:	e841 2300 	strex	r3, r2, [r1]
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1e3      	bne.n	800ca60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d118      	bne.n	800cad2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	e853 3f00 	ldrex	r3, [r3]
 800caac:	60bb      	str	r3, [r7, #8]
   return(result);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	f023 0310 	bic.w	r3, r3, #16
 800cab4:	647b      	str	r3, [r7, #68]	; 0x44
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cabe:	61bb      	str	r3, [r7, #24]
 800cac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac2:	6979      	ldr	r1, [r7, #20]
 800cac4:	69ba      	ldr	r2, [r7, #24]
 800cac6:	e841 2300 	strex	r3, r2, [r1]
 800caca:	613b      	str	r3, [r7, #16]
   return(result);
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1e6      	bne.n	800caa0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2220      	movs	r2, #32
 800cad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2200      	movs	r2, #0
 800cade:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cae6:	bf00      	nop
 800cae8:	3754      	adds	r7, #84	; 0x54
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b09c      	sub	sp, #112	; 0x70
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cafe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 0320 	and.w	r3, r3, #32
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d171      	bne.n	800cbf2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800cb0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb10:	2200      	movs	r2, #0
 800cb12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1e:	e853 3f00 	ldrex	r3, [r3]
 800cb22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cb24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	461a      	mov	r2, r3
 800cb32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb34:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb3c:	e841 2300 	strex	r3, r2, [r1]
 800cb40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cb42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1e6      	bne.n	800cb16 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	3308      	adds	r3, #8
 800cb4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	e853 3f00 	ldrex	r3, [r3]
 800cb56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5a:	f023 0301 	bic.w	r3, r3, #1
 800cb5e:	667b      	str	r3, [r7, #100]	; 0x64
 800cb60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	3308      	adds	r3, #8
 800cb66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cb68:	647a      	str	r2, [r7, #68]	; 0x44
 800cb6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb70:	e841 2300 	strex	r3, r2, [r1]
 800cb74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1e5      	bne.n	800cb48 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	3308      	adds	r3, #8
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb86:	e853 3f00 	ldrex	r3, [r3]
 800cb8a:	623b      	str	r3, [r7, #32]
   return(result);
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb92:	663b      	str	r3, [r7, #96]	; 0x60
 800cb94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	3308      	adds	r3, #8
 800cb9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb9c:	633a      	str	r2, [r7, #48]	; 0x30
 800cb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cba4:	e841 2300 	strex	r3, r2, [r1]
 800cba8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e5      	bne.n	800cb7c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cbb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbb2:	2220      	movs	r2, #32
 800cbb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d118      	bne.n	800cbf2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	e853 3f00 	ldrex	r3, [r3]
 800cbcc:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f023 0310 	bic.w	r3, r3, #16
 800cbd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbde:	61fb      	str	r3, [r7, #28]
 800cbe0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe2:	69b9      	ldr	r1, [r7, #24]
 800cbe4:	69fa      	ldr	r2, [r7, #28]
 800cbe6:	e841 2300 	strex	r3, r2, [r1]
 800cbea:	617b      	str	r3, [r7, #20]
   return(result);
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1e6      	bne.n	800cbc0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d107      	bne.n	800cc0a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc00:	4619      	mov	r1, r3
 800cc02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cc04:	f7ff f968 	bl	800bed8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc08:	e002      	b.n	800cc10 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800cc0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cc0c:	f7f7 fdf8 	bl	8004800 <HAL_UART_RxCpltCallback>
}
 800cc10:	bf00      	nop
 800cc12:	3770      	adds	r7, #112	; 0x70
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d109      	bne.n	800cc42 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc34:	085b      	lsrs	r3, r3, #1
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	4619      	mov	r1, r3
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f7ff f94c 	bl	800bed8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cc40:	e002      	b.n	800cc48 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f7ff f934 	bl	800beb0 <HAL_UART_RxHalfCpltCallback>
}
 800cc48:	bf00      	nop
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc64:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc78:	2b80      	cmp	r3, #128	; 0x80
 800cc7a:	d109      	bne.n	800cc90 <UART_DMAError+0x40>
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	2b21      	cmp	r3, #33	; 0x21
 800cc80:	d106      	bne.n	800cc90 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cc8a:	6978      	ldr	r0, [r7, #20]
 800cc8c:	f7ff fe8a 	bl	800c9a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc9a:	2b40      	cmp	r3, #64	; 0x40
 800cc9c:	d109      	bne.n	800ccb2 <UART_DMAError+0x62>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b22      	cmp	r3, #34	; 0x22
 800cca2:	d106      	bne.n	800ccb2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ccac:	6978      	ldr	r0, [r7, #20]
 800ccae:	f7ff feba 	bl	800ca26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccb8:	f043 0210 	orr.w	r2, r3, #16
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccc2:	6978      	ldr	r0, [r7, #20]
 800ccc4:	f7ff f8fe 	bl	800bec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccc8:	bf00      	nop
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff f8e8 	bl	800bec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccf4:	bf00      	nop
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	61bb      	str	r3, [r7, #24]
 800cd24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	6979      	ldr	r1, [r7, #20]
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e6      	bne.n	800cd04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff f8a9 	bl	800be9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd4a:	bf00      	nop
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b083      	sub	sp, #12
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd5a:	bf00      	nop
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b083      	sub	sp, #12
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd6e:	bf00      	nop
 800cd70:	370c      	adds	r7, #12
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd7a:	b480      	push	{r7}
 800cd7c:	b083      	sub	sp, #12
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b085      	sub	sp, #20
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d101      	bne.n	800cda4 <HAL_UARTEx_DisableFifoMode+0x16>
 800cda0:	2302      	movs	r3, #2
 800cda2:	e027      	b.n	800cdf4 <HAL_UARTEx_DisableFifoMode+0x66>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2224      	movs	r2, #36	; 0x24
 800cdb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f022 0201 	bic.w	r2, r2, #1
 800cdca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cdd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2220      	movs	r2, #32
 800cde6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d101      	bne.n	800ce18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce14:	2302      	movs	r3, #2
 800ce16:	e02d      	b.n	800ce74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2224      	movs	r2, #36	; 0x24
 800ce24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f022 0201 	bic.w	r2, r2, #1
 800ce3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	430a      	orrs	r2, r1
 800ce52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f84f 	bl	800cef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2220      	movs	r2, #32
 800ce66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e02d      	b.n	800cef0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2224      	movs	r2, #36	; 0x24
 800cea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0201 	bic.w	r2, r2, #1
 800ceba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	683a      	ldr	r2, [r7, #0]
 800cecc:	430a      	orrs	r2, r1
 800cece:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f811 	bl	800cef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2220      	movs	r2, #32
 800cee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d108      	bne.n	800cf1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cf18:	e031      	b.n	800cf7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cf1a:	2308      	movs	r3, #8
 800cf1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cf1e:	2308      	movs	r3, #8
 800cf20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	0e5b      	lsrs	r3, r3, #25
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f003 0307 	and.w	r3, r3, #7
 800cf30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	0f5b      	lsrs	r3, r3, #29
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
 800cf44:	7b3a      	ldrb	r2, [r7, #12]
 800cf46:	4911      	ldr	r1, [pc, #68]	; (800cf8c <UARTEx_SetNbDataToProcess+0x94>)
 800cf48:	5c8a      	ldrb	r2, [r1, r2]
 800cf4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf4e:	7b3a      	ldrb	r2, [r7, #12]
 800cf50:	490f      	ldr	r1, [pc, #60]	; (800cf90 <UARTEx_SetNbDataToProcess+0x98>)
 800cf52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf54:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
 800cf62:	7b7a      	ldrb	r2, [r7, #13]
 800cf64:	4909      	ldr	r1, [pc, #36]	; (800cf8c <UARTEx_SetNbDataToProcess+0x94>)
 800cf66:	5c8a      	ldrb	r2, [r1, r2]
 800cf68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf6c:	7b7a      	ldrb	r2, [r7, #13]
 800cf6e:	4908      	ldr	r1, [pc, #32]	; (800cf90 <UARTEx_SetNbDataToProcess+0x98>)
 800cf70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf72:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cf7e:	bf00      	nop
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	0800fecc 	.word	0x0800fecc
 800cf90:	0800fed4 	.word	0x0800fed4

0800cf94 <__errno>:
 800cf94:	4b01      	ldr	r3, [pc, #4]	; (800cf9c <__errno+0x8>)
 800cf96:	6818      	ldr	r0, [r3, #0]
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	20000014 	.word	0x20000014

0800cfa0 <__libc_init_array>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	4d0d      	ldr	r5, [pc, #52]	; (800cfd8 <__libc_init_array+0x38>)
 800cfa4:	4c0d      	ldr	r4, [pc, #52]	; (800cfdc <__libc_init_array+0x3c>)
 800cfa6:	1b64      	subs	r4, r4, r5
 800cfa8:	10a4      	asrs	r4, r4, #2
 800cfaa:	2600      	movs	r6, #0
 800cfac:	42a6      	cmp	r6, r4
 800cfae:	d109      	bne.n	800cfc4 <__libc_init_array+0x24>
 800cfb0:	4d0b      	ldr	r5, [pc, #44]	; (800cfe0 <__libc_init_array+0x40>)
 800cfb2:	4c0c      	ldr	r4, [pc, #48]	; (800cfe4 <__libc_init_array+0x44>)
 800cfb4:	f002 fed8 	bl	800fd68 <_init>
 800cfb8:	1b64      	subs	r4, r4, r5
 800cfba:	10a4      	asrs	r4, r4, #2
 800cfbc:	2600      	movs	r6, #0
 800cfbe:	42a6      	cmp	r6, r4
 800cfc0:	d105      	bne.n	800cfce <__libc_init_array+0x2e>
 800cfc2:	bd70      	pop	{r4, r5, r6, pc}
 800cfc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfc8:	4798      	blx	r3
 800cfca:	3601      	adds	r6, #1
 800cfcc:	e7ee      	b.n	800cfac <__libc_init_array+0xc>
 800cfce:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfd2:	4798      	blx	r3
 800cfd4:	3601      	adds	r6, #1
 800cfd6:	e7f2      	b.n	800cfbe <__libc_init_array+0x1e>
 800cfd8:	080102bc 	.word	0x080102bc
 800cfdc:	080102bc 	.word	0x080102bc
 800cfe0:	080102bc 	.word	0x080102bc
 800cfe4:	080102c0 	.word	0x080102c0

0800cfe8 <memset>:
 800cfe8:	4402      	add	r2, r0
 800cfea:	4603      	mov	r3, r0
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d100      	bne.n	800cff2 <memset+0xa>
 800cff0:	4770      	bx	lr
 800cff2:	f803 1b01 	strb.w	r1, [r3], #1
 800cff6:	e7f9      	b.n	800cfec <memset+0x4>

0800cff8 <__cvt>:
 800cff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cffc:	ec55 4b10 	vmov	r4, r5, d0
 800d000:	2d00      	cmp	r5, #0
 800d002:	460e      	mov	r6, r1
 800d004:	4619      	mov	r1, r3
 800d006:	462b      	mov	r3, r5
 800d008:	bfbb      	ittet	lt
 800d00a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d00e:	461d      	movlt	r5, r3
 800d010:	2300      	movge	r3, #0
 800d012:	232d      	movlt	r3, #45	; 0x2d
 800d014:	700b      	strb	r3, [r1, #0]
 800d016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d01c:	4691      	mov	r9, r2
 800d01e:	f023 0820 	bic.w	r8, r3, #32
 800d022:	bfbc      	itt	lt
 800d024:	4622      	movlt	r2, r4
 800d026:	4614      	movlt	r4, r2
 800d028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d02c:	d005      	beq.n	800d03a <__cvt+0x42>
 800d02e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d032:	d100      	bne.n	800d036 <__cvt+0x3e>
 800d034:	3601      	adds	r6, #1
 800d036:	2102      	movs	r1, #2
 800d038:	e000      	b.n	800d03c <__cvt+0x44>
 800d03a:	2103      	movs	r1, #3
 800d03c:	ab03      	add	r3, sp, #12
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	ab02      	add	r3, sp, #8
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	ec45 4b10 	vmov	d0, r4, r5
 800d048:	4653      	mov	r3, sl
 800d04a:	4632      	mov	r2, r6
 800d04c:	f000 fee8 	bl	800de20 <_dtoa_r>
 800d050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d054:	4607      	mov	r7, r0
 800d056:	d102      	bne.n	800d05e <__cvt+0x66>
 800d058:	f019 0f01 	tst.w	r9, #1
 800d05c:	d022      	beq.n	800d0a4 <__cvt+0xac>
 800d05e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d062:	eb07 0906 	add.w	r9, r7, r6
 800d066:	d110      	bne.n	800d08a <__cvt+0x92>
 800d068:	783b      	ldrb	r3, [r7, #0]
 800d06a:	2b30      	cmp	r3, #48	; 0x30
 800d06c:	d10a      	bne.n	800d084 <__cvt+0x8c>
 800d06e:	2200      	movs	r2, #0
 800d070:	2300      	movs	r3, #0
 800d072:	4620      	mov	r0, r4
 800d074:	4629      	mov	r1, r5
 800d076:	f7f3 fd4f 	bl	8000b18 <__aeabi_dcmpeq>
 800d07a:	b918      	cbnz	r0, 800d084 <__cvt+0x8c>
 800d07c:	f1c6 0601 	rsb	r6, r6, #1
 800d080:	f8ca 6000 	str.w	r6, [sl]
 800d084:	f8da 3000 	ldr.w	r3, [sl]
 800d088:	4499      	add	r9, r3
 800d08a:	2200      	movs	r2, #0
 800d08c:	2300      	movs	r3, #0
 800d08e:	4620      	mov	r0, r4
 800d090:	4629      	mov	r1, r5
 800d092:	f7f3 fd41 	bl	8000b18 <__aeabi_dcmpeq>
 800d096:	b108      	cbz	r0, 800d09c <__cvt+0xa4>
 800d098:	f8cd 900c 	str.w	r9, [sp, #12]
 800d09c:	2230      	movs	r2, #48	; 0x30
 800d09e:	9b03      	ldr	r3, [sp, #12]
 800d0a0:	454b      	cmp	r3, r9
 800d0a2:	d307      	bcc.n	800d0b4 <__cvt+0xbc>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0a8:	1bdb      	subs	r3, r3, r7
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	6013      	str	r3, [r2, #0]
 800d0ae:	b004      	add	sp, #16
 800d0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b4:	1c59      	adds	r1, r3, #1
 800d0b6:	9103      	str	r1, [sp, #12]
 800d0b8:	701a      	strb	r2, [r3, #0]
 800d0ba:	e7f0      	b.n	800d09e <__cvt+0xa6>

0800d0bc <__exponent>:
 800d0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2900      	cmp	r1, #0
 800d0c2:	bfb8      	it	lt
 800d0c4:	4249      	neglt	r1, r1
 800d0c6:	f803 2b02 	strb.w	r2, [r3], #2
 800d0ca:	bfb4      	ite	lt
 800d0cc:	222d      	movlt	r2, #45	; 0x2d
 800d0ce:	222b      	movge	r2, #43	; 0x2b
 800d0d0:	2909      	cmp	r1, #9
 800d0d2:	7042      	strb	r2, [r0, #1]
 800d0d4:	dd2a      	ble.n	800d12c <__exponent+0x70>
 800d0d6:	f10d 0407 	add.w	r4, sp, #7
 800d0da:	46a4      	mov	ip, r4
 800d0dc:	270a      	movs	r7, #10
 800d0de:	46a6      	mov	lr, r4
 800d0e0:	460a      	mov	r2, r1
 800d0e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800d0e6:	fb07 1516 	mls	r5, r7, r6, r1
 800d0ea:	3530      	adds	r5, #48	; 0x30
 800d0ec:	2a63      	cmp	r2, #99	; 0x63
 800d0ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800d0f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	dcf1      	bgt.n	800d0de <__exponent+0x22>
 800d0fa:	3130      	adds	r1, #48	; 0x30
 800d0fc:	f1ae 0502 	sub.w	r5, lr, #2
 800d100:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d104:	1c44      	adds	r4, r0, #1
 800d106:	4629      	mov	r1, r5
 800d108:	4561      	cmp	r1, ip
 800d10a:	d30a      	bcc.n	800d122 <__exponent+0x66>
 800d10c:	f10d 0209 	add.w	r2, sp, #9
 800d110:	eba2 020e 	sub.w	r2, r2, lr
 800d114:	4565      	cmp	r5, ip
 800d116:	bf88      	it	hi
 800d118:	2200      	movhi	r2, #0
 800d11a:	4413      	add	r3, r2
 800d11c:	1a18      	subs	r0, r3, r0
 800d11e:	b003      	add	sp, #12
 800d120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d122:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d12a:	e7ed      	b.n	800d108 <__exponent+0x4c>
 800d12c:	2330      	movs	r3, #48	; 0x30
 800d12e:	3130      	adds	r1, #48	; 0x30
 800d130:	7083      	strb	r3, [r0, #2]
 800d132:	70c1      	strb	r1, [r0, #3]
 800d134:	1d03      	adds	r3, r0, #4
 800d136:	e7f1      	b.n	800d11c <__exponent+0x60>

0800d138 <_printf_float>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	ed2d 8b02 	vpush	{d8}
 800d140:	b08d      	sub	sp, #52	; 0x34
 800d142:	460c      	mov	r4, r1
 800d144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d148:	4616      	mov	r6, r2
 800d14a:	461f      	mov	r7, r3
 800d14c:	4605      	mov	r5, r0
 800d14e:	f001 fe0d 	bl	800ed6c <_localeconv_r>
 800d152:	f8d0 a000 	ldr.w	sl, [r0]
 800d156:	4650      	mov	r0, sl
 800d158:	f7f3 f862 	bl	8000220 <strlen>
 800d15c:	2300      	movs	r3, #0
 800d15e:	930a      	str	r3, [sp, #40]	; 0x28
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	9305      	str	r3, [sp, #20]
 800d164:	f8d8 3000 	ldr.w	r3, [r8]
 800d168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d16c:	3307      	adds	r3, #7
 800d16e:	f023 0307 	bic.w	r3, r3, #7
 800d172:	f103 0208 	add.w	r2, r3, #8
 800d176:	f8c8 2000 	str.w	r2, [r8]
 800d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d18a:	9307      	str	r3, [sp, #28]
 800d18c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d190:	ee08 0a10 	vmov	s16, r0
 800d194:	4b9f      	ldr	r3, [pc, #636]	; (800d414 <_printf_float+0x2dc>)
 800d196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d19a:	f04f 32ff 	mov.w	r2, #4294967295
 800d19e:	f7f3 fced 	bl	8000b7c <__aeabi_dcmpun>
 800d1a2:	bb88      	cbnz	r0, 800d208 <_printf_float+0xd0>
 800d1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1a8:	4b9a      	ldr	r3, [pc, #616]	; (800d414 <_printf_float+0x2dc>)
 800d1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ae:	f7f3 fcc7 	bl	8000b40 <__aeabi_dcmple>
 800d1b2:	bb48      	cbnz	r0, 800d208 <_printf_float+0xd0>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	f7f3 fcb6 	bl	8000b2c <__aeabi_dcmplt>
 800d1c0:	b110      	cbz	r0, 800d1c8 <_printf_float+0x90>
 800d1c2:	232d      	movs	r3, #45	; 0x2d
 800d1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c8:	4b93      	ldr	r3, [pc, #588]	; (800d418 <_printf_float+0x2e0>)
 800d1ca:	4894      	ldr	r0, [pc, #592]	; (800d41c <_printf_float+0x2e4>)
 800d1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d1d0:	bf94      	ite	ls
 800d1d2:	4698      	movls	r8, r3
 800d1d4:	4680      	movhi	r8, r0
 800d1d6:	2303      	movs	r3, #3
 800d1d8:	6123      	str	r3, [r4, #16]
 800d1da:	9b05      	ldr	r3, [sp, #20]
 800d1dc:	f023 0204 	bic.w	r2, r3, #4
 800d1e0:	6022      	str	r2, [r4, #0]
 800d1e2:	f04f 0900 	mov.w	r9, #0
 800d1e6:	9700      	str	r7, [sp, #0]
 800d1e8:	4633      	mov	r3, r6
 800d1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800d1ec:	4621      	mov	r1, r4
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f000 f9d8 	bl	800d5a4 <_printf_common>
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	f040 8090 	bne.w	800d31a <_printf_float+0x1e2>
 800d1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fe:	b00d      	add	sp, #52	; 0x34
 800d200:	ecbd 8b02 	vpop	{d8}
 800d204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d208:	4642      	mov	r2, r8
 800d20a:	464b      	mov	r3, r9
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 fcb4 	bl	8000b7c <__aeabi_dcmpun>
 800d214:	b140      	cbz	r0, 800d228 <_printf_float+0xf0>
 800d216:	464b      	mov	r3, r9
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bfbc      	itt	lt
 800d21c:	232d      	movlt	r3, #45	; 0x2d
 800d21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d222:	487f      	ldr	r0, [pc, #508]	; (800d420 <_printf_float+0x2e8>)
 800d224:	4b7f      	ldr	r3, [pc, #508]	; (800d424 <_printf_float+0x2ec>)
 800d226:	e7d1      	b.n	800d1cc <_printf_float+0x94>
 800d228:	6863      	ldr	r3, [r4, #4]
 800d22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d22e:	9206      	str	r2, [sp, #24]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	d13f      	bne.n	800d2b4 <_printf_float+0x17c>
 800d234:	2306      	movs	r3, #6
 800d236:	6063      	str	r3, [r4, #4]
 800d238:	9b05      	ldr	r3, [sp, #20]
 800d23a:	6861      	ldr	r1, [r4, #4]
 800d23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d240:	2300      	movs	r3, #0
 800d242:	9303      	str	r3, [sp, #12]
 800d244:	ab0a      	add	r3, sp, #40	; 0x28
 800d246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d24a:	ab09      	add	r3, sp, #36	; 0x24
 800d24c:	ec49 8b10 	vmov	d0, r8, r9
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	6022      	str	r2, [r4, #0]
 800d254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d258:	4628      	mov	r0, r5
 800d25a:	f7ff fecd 	bl	800cff8 <__cvt>
 800d25e:	9b06      	ldr	r3, [sp, #24]
 800d260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d262:	2b47      	cmp	r3, #71	; 0x47
 800d264:	4680      	mov	r8, r0
 800d266:	d108      	bne.n	800d27a <_printf_float+0x142>
 800d268:	1cc8      	adds	r0, r1, #3
 800d26a:	db02      	blt.n	800d272 <_printf_float+0x13a>
 800d26c:	6863      	ldr	r3, [r4, #4]
 800d26e:	4299      	cmp	r1, r3
 800d270:	dd41      	ble.n	800d2f6 <_printf_float+0x1be>
 800d272:	f1ab 0b02 	sub.w	fp, fp, #2
 800d276:	fa5f fb8b 	uxtb.w	fp, fp
 800d27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d27e:	d820      	bhi.n	800d2c2 <_printf_float+0x18a>
 800d280:	3901      	subs	r1, #1
 800d282:	465a      	mov	r2, fp
 800d284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d288:	9109      	str	r1, [sp, #36]	; 0x24
 800d28a:	f7ff ff17 	bl	800d0bc <__exponent>
 800d28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d290:	1813      	adds	r3, r2, r0
 800d292:	2a01      	cmp	r2, #1
 800d294:	4681      	mov	r9, r0
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	dc02      	bgt.n	800d2a0 <_printf_float+0x168>
 800d29a:	6822      	ldr	r2, [r4, #0]
 800d29c:	07d2      	lsls	r2, r2, #31
 800d29e:	d501      	bpl.n	800d2a4 <_printf_float+0x16c>
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	6123      	str	r3, [r4, #16]
 800d2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d09c      	beq.n	800d1e6 <_printf_float+0xae>
 800d2ac:	232d      	movs	r3, #45	; 0x2d
 800d2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2b2:	e798      	b.n	800d1e6 <_printf_float+0xae>
 800d2b4:	9a06      	ldr	r2, [sp, #24]
 800d2b6:	2a47      	cmp	r2, #71	; 0x47
 800d2b8:	d1be      	bne.n	800d238 <_printf_float+0x100>
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1bc      	bne.n	800d238 <_printf_float+0x100>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e7b9      	b.n	800d236 <_printf_float+0xfe>
 800d2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d2c6:	d118      	bne.n	800d2fa <_printf_float+0x1c2>
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	6863      	ldr	r3, [r4, #4]
 800d2cc:	dd0b      	ble.n	800d2e6 <_printf_float+0x1ae>
 800d2ce:	6121      	str	r1, [r4, #16]
 800d2d0:	b913      	cbnz	r3, 800d2d8 <_printf_float+0x1a0>
 800d2d2:	6822      	ldr	r2, [r4, #0]
 800d2d4:	07d0      	lsls	r0, r2, #31
 800d2d6:	d502      	bpl.n	800d2de <_printf_float+0x1a6>
 800d2d8:	3301      	adds	r3, #1
 800d2da:	440b      	add	r3, r1
 800d2dc:	6123      	str	r3, [r4, #16]
 800d2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800d2e0:	f04f 0900 	mov.w	r9, #0
 800d2e4:	e7de      	b.n	800d2a4 <_printf_float+0x16c>
 800d2e6:	b913      	cbnz	r3, 800d2ee <_printf_float+0x1b6>
 800d2e8:	6822      	ldr	r2, [r4, #0]
 800d2ea:	07d2      	lsls	r2, r2, #31
 800d2ec:	d501      	bpl.n	800d2f2 <_printf_float+0x1ba>
 800d2ee:	3302      	adds	r3, #2
 800d2f0:	e7f4      	b.n	800d2dc <_printf_float+0x1a4>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e7f2      	b.n	800d2dc <_printf_float+0x1a4>
 800d2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2fc:	4299      	cmp	r1, r3
 800d2fe:	db05      	blt.n	800d30c <_printf_float+0x1d4>
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	6121      	str	r1, [r4, #16]
 800d304:	07d8      	lsls	r0, r3, #31
 800d306:	d5ea      	bpl.n	800d2de <_printf_float+0x1a6>
 800d308:	1c4b      	adds	r3, r1, #1
 800d30a:	e7e7      	b.n	800d2dc <_printf_float+0x1a4>
 800d30c:	2900      	cmp	r1, #0
 800d30e:	bfd4      	ite	le
 800d310:	f1c1 0202 	rsble	r2, r1, #2
 800d314:	2201      	movgt	r2, #1
 800d316:	4413      	add	r3, r2
 800d318:	e7e0      	b.n	800d2dc <_printf_float+0x1a4>
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	055a      	lsls	r2, r3, #21
 800d31e:	d407      	bmi.n	800d330 <_printf_float+0x1f8>
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	4642      	mov	r2, r8
 800d324:	4631      	mov	r1, r6
 800d326:	4628      	mov	r0, r5
 800d328:	47b8      	blx	r7
 800d32a:	3001      	adds	r0, #1
 800d32c:	d12c      	bne.n	800d388 <_printf_float+0x250>
 800d32e:	e764      	b.n	800d1fa <_printf_float+0xc2>
 800d330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d334:	f240 80e0 	bls.w	800d4f8 <_printf_float+0x3c0>
 800d338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	f7f3 fbea 	bl	8000b18 <__aeabi_dcmpeq>
 800d344:	2800      	cmp	r0, #0
 800d346:	d034      	beq.n	800d3b2 <_printf_float+0x27a>
 800d348:	4a37      	ldr	r2, [pc, #220]	; (800d428 <_printf_float+0x2f0>)
 800d34a:	2301      	movs	r3, #1
 800d34c:	4631      	mov	r1, r6
 800d34e:	4628      	mov	r0, r5
 800d350:	47b8      	blx	r7
 800d352:	3001      	adds	r0, #1
 800d354:	f43f af51 	beq.w	800d1fa <_printf_float+0xc2>
 800d358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d35c:	429a      	cmp	r2, r3
 800d35e:	db02      	blt.n	800d366 <_printf_float+0x22e>
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	07d8      	lsls	r0, r3, #31
 800d364:	d510      	bpl.n	800d388 <_printf_float+0x250>
 800d366:	ee18 3a10 	vmov	r3, s16
 800d36a:	4652      	mov	r2, sl
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	f43f af41 	beq.w	800d1fa <_printf_float+0xc2>
 800d378:	f04f 0800 	mov.w	r8, #0
 800d37c:	f104 091a 	add.w	r9, r4, #26
 800d380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d382:	3b01      	subs	r3, #1
 800d384:	4543      	cmp	r3, r8
 800d386:	dc09      	bgt.n	800d39c <_printf_float+0x264>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	079b      	lsls	r3, r3, #30
 800d38c:	f100 8105 	bmi.w	800d59a <_printf_float+0x462>
 800d390:	68e0      	ldr	r0, [r4, #12]
 800d392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d394:	4298      	cmp	r0, r3
 800d396:	bfb8      	it	lt
 800d398:	4618      	movlt	r0, r3
 800d39a:	e730      	b.n	800d1fe <_printf_float+0xc6>
 800d39c:	2301      	movs	r3, #1
 800d39e:	464a      	mov	r2, r9
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	47b8      	blx	r7
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	f43f af27 	beq.w	800d1fa <_printf_float+0xc2>
 800d3ac:	f108 0801 	add.w	r8, r8, #1
 800d3b0:	e7e6      	b.n	800d380 <_printf_float+0x248>
 800d3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dc39      	bgt.n	800d42c <_printf_float+0x2f4>
 800d3b8:	4a1b      	ldr	r2, [pc, #108]	; (800d428 <_printf_float+0x2f0>)
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	4631      	mov	r1, r6
 800d3be:	4628      	mov	r0, r5
 800d3c0:	47b8      	blx	r7
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f43f af19 	beq.w	800d1fa <_printf_float+0xc2>
 800d3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	d102      	bne.n	800d3d6 <_printf_float+0x29e>
 800d3d0:	6823      	ldr	r3, [r4, #0]
 800d3d2:	07d9      	lsls	r1, r3, #31
 800d3d4:	d5d8      	bpl.n	800d388 <_printf_float+0x250>
 800d3d6:	ee18 3a10 	vmov	r3, s16
 800d3da:	4652      	mov	r2, sl
 800d3dc:	4631      	mov	r1, r6
 800d3de:	4628      	mov	r0, r5
 800d3e0:	47b8      	blx	r7
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	f43f af09 	beq.w	800d1fa <_printf_float+0xc2>
 800d3e8:	f04f 0900 	mov.w	r9, #0
 800d3ec:	f104 0a1a 	add.w	sl, r4, #26
 800d3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f2:	425b      	negs	r3, r3
 800d3f4:	454b      	cmp	r3, r9
 800d3f6:	dc01      	bgt.n	800d3fc <_printf_float+0x2c4>
 800d3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3fa:	e792      	b.n	800d322 <_printf_float+0x1ea>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	4652      	mov	r2, sl
 800d400:	4631      	mov	r1, r6
 800d402:	4628      	mov	r0, r5
 800d404:	47b8      	blx	r7
 800d406:	3001      	adds	r0, #1
 800d408:	f43f aef7 	beq.w	800d1fa <_printf_float+0xc2>
 800d40c:	f109 0901 	add.w	r9, r9, #1
 800d410:	e7ee      	b.n	800d3f0 <_printf_float+0x2b8>
 800d412:	bf00      	nop
 800d414:	7fefffff 	.word	0x7fefffff
 800d418:	0800fee0 	.word	0x0800fee0
 800d41c:	0800fee4 	.word	0x0800fee4
 800d420:	0800feec 	.word	0x0800feec
 800d424:	0800fee8 	.word	0x0800fee8
 800d428:	0800fef0 	.word	0x0800fef0
 800d42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d430:	429a      	cmp	r2, r3
 800d432:	bfa8      	it	ge
 800d434:	461a      	movge	r2, r3
 800d436:	2a00      	cmp	r2, #0
 800d438:	4691      	mov	r9, r2
 800d43a:	dc37      	bgt.n	800d4ac <_printf_float+0x374>
 800d43c:	f04f 0b00 	mov.w	fp, #0
 800d440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d444:	f104 021a 	add.w	r2, r4, #26
 800d448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	eba3 0309 	sub.w	r3, r3, r9
 800d450:	455b      	cmp	r3, fp
 800d452:	dc33      	bgt.n	800d4bc <_printf_float+0x384>
 800d454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d458:	429a      	cmp	r2, r3
 800d45a:	db3b      	blt.n	800d4d4 <_printf_float+0x39c>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	07da      	lsls	r2, r3, #31
 800d460:	d438      	bmi.n	800d4d4 <_printf_float+0x39c>
 800d462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d464:	9a05      	ldr	r2, [sp, #20]
 800d466:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d468:	1a9a      	subs	r2, r3, r2
 800d46a:	eba3 0901 	sub.w	r9, r3, r1
 800d46e:	4591      	cmp	r9, r2
 800d470:	bfa8      	it	ge
 800d472:	4691      	movge	r9, r2
 800d474:	f1b9 0f00 	cmp.w	r9, #0
 800d478:	dc35      	bgt.n	800d4e6 <_printf_float+0x3ae>
 800d47a:	f04f 0800 	mov.w	r8, #0
 800d47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d482:	f104 0a1a 	add.w	sl, r4, #26
 800d486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	eba3 0309 	sub.w	r3, r3, r9
 800d490:	4543      	cmp	r3, r8
 800d492:	f77f af79 	ble.w	800d388 <_printf_float+0x250>
 800d496:	2301      	movs	r3, #1
 800d498:	4652      	mov	r2, sl
 800d49a:	4631      	mov	r1, r6
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b8      	blx	r7
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f43f aeaa 	beq.w	800d1fa <_printf_float+0xc2>
 800d4a6:	f108 0801 	add.w	r8, r8, #1
 800d4aa:	e7ec      	b.n	800d486 <_printf_float+0x34e>
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4642      	mov	r2, r8
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	47b8      	blx	r7
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	d1c0      	bne.n	800d43c <_printf_float+0x304>
 800d4ba:	e69e      	b.n	800d1fa <_printf_float+0xc2>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	4631      	mov	r1, r6
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	9205      	str	r2, [sp, #20]
 800d4c4:	47b8      	blx	r7
 800d4c6:	3001      	adds	r0, #1
 800d4c8:	f43f ae97 	beq.w	800d1fa <_printf_float+0xc2>
 800d4cc:	9a05      	ldr	r2, [sp, #20]
 800d4ce:	f10b 0b01 	add.w	fp, fp, #1
 800d4d2:	e7b9      	b.n	800d448 <_printf_float+0x310>
 800d4d4:	ee18 3a10 	vmov	r3, s16
 800d4d8:	4652      	mov	r2, sl
 800d4da:	4631      	mov	r1, r6
 800d4dc:	4628      	mov	r0, r5
 800d4de:	47b8      	blx	r7
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d1be      	bne.n	800d462 <_printf_float+0x32a>
 800d4e4:	e689      	b.n	800d1fa <_printf_float+0xc2>
 800d4e6:	9a05      	ldr	r2, [sp, #20]
 800d4e8:	464b      	mov	r3, r9
 800d4ea:	4442      	add	r2, r8
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	47b8      	blx	r7
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	d1c1      	bne.n	800d47a <_printf_float+0x342>
 800d4f6:	e680      	b.n	800d1fa <_printf_float+0xc2>
 800d4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4fa:	2a01      	cmp	r2, #1
 800d4fc:	dc01      	bgt.n	800d502 <_printf_float+0x3ca>
 800d4fe:	07db      	lsls	r3, r3, #31
 800d500:	d538      	bpl.n	800d574 <_printf_float+0x43c>
 800d502:	2301      	movs	r3, #1
 800d504:	4642      	mov	r2, r8
 800d506:	4631      	mov	r1, r6
 800d508:	4628      	mov	r0, r5
 800d50a:	47b8      	blx	r7
 800d50c:	3001      	adds	r0, #1
 800d50e:	f43f ae74 	beq.w	800d1fa <_printf_float+0xc2>
 800d512:	ee18 3a10 	vmov	r3, s16
 800d516:	4652      	mov	r2, sl
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	47b8      	blx	r7
 800d51e:	3001      	adds	r0, #1
 800d520:	f43f ae6b 	beq.w	800d1fa <_printf_float+0xc2>
 800d524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d528:	2200      	movs	r2, #0
 800d52a:	2300      	movs	r3, #0
 800d52c:	f7f3 faf4 	bl	8000b18 <__aeabi_dcmpeq>
 800d530:	b9d8      	cbnz	r0, 800d56a <_printf_float+0x432>
 800d532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d534:	f108 0201 	add.w	r2, r8, #1
 800d538:	3b01      	subs	r3, #1
 800d53a:	4631      	mov	r1, r6
 800d53c:	4628      	mov	r0, r5
 800d53e:	47b8      	blx	r7
 800d540:	3001      	adds	r0, #1
 800d542:	d10e      	bne.n	800d562 <_printf_float+0x42a>
 800d544:	e659      	b.n	800d1fa <_printf_float+0xc2>
 800d546:	2301      	movs	r3, #1
 800d548:	4652      	mov	r2, sl
 800d54a:	4631      	mov	r1, r6
 800d54c:	4628      	mov	r0, r5
 800d54e:	47b8      	blx	r7
 800d550:	3001      	adds	r0, #1
 800d552:	f43f ae52 	beq.w	800d1fa <_printf_float+0xc2>
 800d556:	f108 0801 	add.w	r8, r8, #1
 800d55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d55c:	3b01      	subs	r3, #1
 800d55e:	4543      	cmp	r3, r8
 800d560:	dcf1      	bgt.n	800d546 <_printf_float+0x40e>
 800d562:	464b      	mov	r3, r9
 800d564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d568:	e6dc      	b.n	800d324 <_printf_float+0x1ec>
 800d56a:	f04f 0800 	mov.w	r8, #0
 800d56e:	f104 0a1a 	add.w	sl, r4, #26
 800d572:	e7f2      	b.n	800d55a <_printf_float+0x422>
 800d574:	2301      	movs	r3, #1
 800d576:	4642      	mov	r2, r8
 800d578:	e7df      	b.n	800d53a <_printf_float+0x402>
 800d57a:	2301      	movs	r3, #1
 800d57c:	464a      	mov	r2, r9
 800d57e:	4631      	mov	r1, r6
 800d580:	4628      	mov	r0, r5
 800d582:	47b8      	blx	r7
 800d584:	3001      	adds	r0, #1
 800d586:	f43f ae38 	beq.w	800d1fa <_printf_float+0xc2>
 800d58a:	f108 0801 	add.w	r8, r8, #1
 800d58e:	68e3      	ldr	r3, [r4, #12]
 800d590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d592:	1a5b      	subs	r3, r3, r1
 800d594:	4543      	cmp	r3, r8
 800d596:	dcf0      	bgt.n	800d57a <_printf_float+0x442>
 800d598:	e6fa      	b.n	800d390 <_printf_float+0x258>
 800d59a:	f04f 0800 	mov.w	r8, #0
 800d59e:	f104 0919 	add.w	r9, r4, #25
 800d5a2:	e7f4      	b.n	800d58e <_printf_float+0x456>

0800d5a4 <_printf_common>:
 800d5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a8:	4616      	mov	r6, r2
 800d5aa:	4699      	mov	r9, r3
 800d5ac:	688a      	ldr	r2, [r1, #8]
 800d5ae:	690b      	ldr	r3, [r1, #16]
 800d5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	bfb8      	it	lt
 800d5b8:	4613      	movlt	r3, r2
 800d5ba:	6033      	str	r3, [r6, #0]
 800d5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	460c      	mov	r4, r1
 800d5c4:	b10a      	cbz	r2, 800d5ca <_printf_common+0x26>
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	6033      	str	r3, [r6, #0]
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	0699      	lsls	r1, r3, #26
 800d5ce:	bf42      	ittt	mi
 800d5d0:	6833      	ldrmi	r3, [r6, #0]
 800d5d2:	3302      	addmi	r3, #2
 800d5d4:	6033      	strmi	r3, [r6, #0]
 800d5d6:	6825      	ldr	r5, [r4, #0]
 800d5d8:	f015 0506 	ands.w	r5, r5, #6
 800d5dc:	d106      	bne.n	800d5ec <_printf_common+0x48>
 800d5de:	f104 0a19 	add.w	sl, r4, #25
 800d5e2:	68e3      	ldr	r3, [r4, #12]
 800d5e4:	6832      	ldr	r2, [r6, #0]
 800d5e6:	1a9b      	subs	r3, r3, r2
 800d5e8:	42ab      	cmp	r3, r5
 800d5ea:	dc26      	bgt.n	800d63a <_printf_common+0x96>
 800d5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5f0:	1e13      	subs	r3, r2, #0
 800d5f2:	6822      	ldr	r2, [r4, #0]
 800d5f4:	bf18      	it	ne
 800d5f6:	2301      	movne	r3, #1
 800d5f8:	0692      	lsls	r2, r2, #26
 800d5fa:	d42b      	bmi.n	800d654 <_printf_common+0xb0>
 800d5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d600:	4649      	mov	r1, r9
 800d602:	4638      	mov	r0, r7
 800d604:	47c0      	blx	r8
 800d606:	3001      	adds	r0, #1
 800d608:	d01e      	beq.n	800d648 <_printf_common+0xa4>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	68e5      	ldr	r5, [r4, #12]
 800d60e:	6832      	ldr	r2, [r6, #0]
 800d610:	f003 0306 	and.w	r3, r3, #6
 800d614:	2b04      	cmp	r3, #4
 800d616:	bf08      	it	eq
 800d618:	1aad      	subeq	r5, r5, r2
 800d61a:	68a3      	ldr	r3, [r4, #8]
 800d61c:	6922      	ldr	r2, [r4, #16]
 800d61e:	bf0c      	ite	eq
 800d620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d624:	2500      	movne	r5, #0
 800d626:	4293      	cmp	r3, r2
 800d628:	bfc4      	itt	gt
 800d62a:	1a9b      	subgt	r3, r3, r2
 800d62c:	18ed      	addgt	r5, r5, r3
 800d62e:	2600      	movs	r6, #0
 800d630:	341a      	adds	r4, #26
 800d632:	42b5      	cmp	r5, r6
 800d634:	d11a      	bne.n	800d66c <_printf_common+0xc8>
 800d636:	2000      	movs	r0, #0
 800d638:	e008      	b.n	800d64c <_printf_common+0xa8>
 800d63a:	2301      	movs	r3, #1
 800d63c:	4652      	mov	r2, sl
 800d63e:	4649      	mov	r1, r9
 800d640:	4638      	mov	r0, r7
 800d642:	47c0      	blx	r8
 800d644:	3001      	adds	r0, #1
 800d646:	d103      	bne.n	800d650 <_printf_common+0xac>
 800d648:	f04f 30ff 	mov.w	r0, #4294967295
 800d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d650:	3501      	adds	r5, #1
 800d652:	e7c6      	b.n	800d5e2 <_printf_common+0x3e>
 800d654:	18e1      	adds	r1, r4, r3
 800d656:	1c5a      	adds	r2, r3, #1
 800d658:	2030      	movs	r0, #48	; 0x30
 800d65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d65e:	4422      	add	r2, r4
 800d660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d668:	3302      	adds	r3, #2
 800d66a:	e7c7      	b.n	800d5fc <_printf_common+0x58>
 800d66c:	2301      	movs	r3, #1
 800d66e:	4622      	mov	r2, r4
 800d670:	4649      	mov	r1, r9
 800d672:	4638      	mov	r0, r7
 800d674:	47c0      	blx	r8
 800d676:	3001      	adds	r0, #1
 800d678:	d0e6      	beq.n	800d648 <_printf_common+0xa4>
 800d67a:	3601      	adds	r6, #1
 800d67c:	e7d9      	b.n	800d632 <_printf_common+0x8e>
	...

0800d680 <_printf_i>:
 800d680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d684:	7e0f      	ldrb	r7, [r1, #24]
 800d686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d688:	2f78      	cmp	r7, #120	; 0x78
 800d68a:	4691      	mov	r9, r2
 800d68c:	4680      	mov	r8, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	469a      	mov	sl, r3
 800d692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d696:	d807      	bhi.n	800d6a8 <_printf_i+0x28>
 800d698:	2f62      	cmp	r7, #98	; 0x62
 800d69a:	d80a      	bhi.n	800d6b2 <_printf_i+0x32>
 800d69c:	2f00      	cmp	r7, #0
 800d69e:	f000 80d8 	beq.w	800d852 <_printf_i+0x1d2>
 800d6a2:	2f58      	cmp	r7, #88	; 0x58
 800d6a4:	f000 80a3 	beq.w	800d7ee <_printf_i+0x16e>
 800d6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6b0:	e03a      	b.n	800d728 <_printf_i+0xa8>
 800d6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6b6:	2b15      	cmp	r3, #21
 800d6b8:	d8f6      	bhi.n	800d6a8 <_printf_i+0x28>
 800d6ba:	a101      	add	r1, pc, #4	; (adr r1, 800d6c0 <_printf_i+0x40>)
 800d6bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6c0:	0800d719 	.word	0x0800d719
 800d6c4:	0800d72d 	.word	0x0800d72d
 800d6c8:	0800d6a9 	.word	0x0800d6a9
 800d6cc:	0800d6a9 	.word	0x0800d6a9
 800d6d0:	0800d6a9 	.word	0x0800d6a9
 800d6d4:	0800d6a9 	.word	0x0800d6a9
 800d6d8:	0800d72d 	.word	0x0800d72d
 800d6dc:	0800d6a9 	.word	0x0800d6a9
 800d6e0:	0800d6a9 	.word	0x0800d6a9
 800d6e4:	0800d6a9 	.word	0x0800d6a9
 800d6e8:	0800d6a9 	.word	0x0800d6a9
 800d6ec:	0800d839 	.word	0x0800d839
 800d6f0:	0800d75d 	.word	0x0800d75d
 800d6f4:	0800d81b 	.word	0x0800d81b
 800d6f8:	0800d6a9 	.word	0x0800d6a9
 800d6fc:	0800d6a9 	.word	0x0800d6a9
 800d700:	0800d85b 	.word	0x0800d85b
 800d704:	0800d6a9 	.word	0x0800d6a9
 800d708:	0800d75d 	.word	0x0800d75d
 800d70c:	0800d6a9 	.word	0x0800d6a9
 800d710:	0800d6a9 	.word	0x0800d6a9
 800d714:	0800d823 	.word	0x0800d823
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	1d1a      	adds	r2, r3, #4
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	602a      	str	r2, [r5, #0]
 800d720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d728:	2301      	movs	r3, #1
 800d72a:	e0a3      	b.n	800d874 <_printf_i+0x1f4>
 800d72c:	6820      	ldr	r0, [r4, #0]
 800d72e:	6829      	ldr	r1, [r5, #0]
 800d730:	0606      	lsls	r6, r0, #24
 800d732:	f101 0304 	add.w	r3, r1, #4
 800d736:	d50a      	bpl.n	800d74e <_printf_i+0xce>
 800d738:	680e      	ldr	r6, [r1, #0]
 800d73a:	602b      	str	r3, [r5, #0]
 800d73c:	2e00      	cmp	r6, #0
 800d73e:	da03      	bge.n	800d748 <_printf_i+0xc8>
 800d740:	232d      	movs	r3, #45	; 0x2d
 800d742:	4276      	negs	r6, r6
 800d744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d748:	485e      	ldr	r0, [pc, #376]	; (800d8c4 <_printf_i+0x244>)
 800d74a:	230a      	movs	r3, #10
 800d74c:	e019      	b.n	800d782 <_printf_i+0x102>
 800d74e:	680e      	ldr	r6, [r1, #0]
 800d750:	602b      	str	r3, [r5, #0]
 800d752:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d756:	bf18      	it	ne
 800d758:	b236      	sxthne	r6, r6
 800d75a:	e7ef      	b.n	800d73c <_printf_i+0xbc>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	6820      	ldr	r0, [r4, #0]
 800d760:	1d19      	adds	r1, r3, #4
 800d762:	6029      	str	r1, [r5, #0]
 800d764:	0601      	lsls	r1, r0, #24
 800d766:	d501      	bpl.n	800d76c <_printf_i+0xec>
 800d768:	681e      	ldr	r6, [r3, #0]
 800d76a:	e002      	b.n	800d772 <_printf_i+0xf2>
 800d76c:	0646      	lsls	r6, r0, #25
 800d76e:	d5fb      	bpl.n	800d768 <_printf_i+0xe8>
 800d770:	881e      	ldrh	r6, [r3, #0]
 800d772:	4854      	ldr	r0, [pc, #336]	; (800d8c4 <_printf_i+0x244>)
 800d774:	2f6f      	cmp	r7, #111	; 0x6f
 800d776:	bf0c      	ite	eq
 800d778:	2308      	moveq	r3, #8
 800d77a:	230a      	movne	r3, #10
 800d77c:	2100      	movs	r1, #0
 800d77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d782:	6865      	ldr	r5, [r4, #4]
 800d784:	60a5      	str	r5, [r4, #8]
 800d786:	2d00      	cmp	r5, #0
 800d788:	bfa2      	ittt	ge
 800d78a:	6821      	ldrge	r1, [r4, #0]
 800d78c:	f021 0104 	bicge.w	r1, r1, #4
 800d790:	6021      	strge	r1, [r4, #0]
 800d792:	b90e      	cbnz	r6, 800d798 <_printf_i+0x118>
 800d794:	2d00      	cmp	r5, #0
 800d796:	d04d      	beq.n	800d834 <_printf_i+0x1b4>
 800d798:	4615      	mov	r5, r2
 800d79a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d79e:	fb03 6711 	mls	r7, r3, r1, r6
 800d7a2:	5dc7      	ldrb	r7, [r0, r7]
 800d7a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7a8:	4637      	mov	r7, r6
 800d7aa:	42bb      	cmp	r3, r7
 800d7ac:	460e      	mov	r6, r1
 800d7ae:	d9f4      	bls.n	800d79a <_printf_i+0x11a>
 800d7b0:	2b08      	cmp	r3, #8
 800d7b2:	d10b      	bne.n	800d7cc <_printf_i+0x14c>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	07de      	lsls	r6, r3, #31
 800d7b8:	d508      	bpl.n	800d7cc <_printf_i+0x14c>
 800d7ba:	6923      	ldr	r3, [r4, #16]
 800d7bc:	6861      	ldr	r1, [r4, #4]
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	bfde      	ittt	le
 800d7c2:	2330      	movle	r3, #48	; 0x30
 800d7c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7cc:	1b52      	subs	r2, r2, r5
 800d7ce:	6122      	str	r2, [r4, #16]
 800d7d0:	f8cd a000 	str.w	sl, [sp]
 800d7d4:	464b      	mov	r3, r9
 800d7d6:	aa03      	add	r2, sp, #12
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4640      	mov	r0, r8
 800d7dc:	f7ff fee2 	bl	800d5a4 <_printf_common>
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d14c      	bne.n	800d87e <_printf_i+0x1fe>
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	b004      	add	sp, #16
 800d7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ee:	4835      	ldr	r0, [pc, #212]	; (800d8c4 <_printf_i+0x244>)
 800d7f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d7f4:	6829      	ldr	r1, [r5, #0]
 800d7f6:	6823      	ldr	r3, [r4, #0]
 800d7f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7fc:	6029      	str	r1, [r5, #0]
 800d7fe:	061d      	lsls	r5, r3, #24
 800d800:	d514      	bpl.n	800d82c <_printf_i+0x1ac>
 800d802:	07df      	lsls	r7, r3, #31
 800d804:	bf44      	itt	mi
 800d806:	f043 0320 	orrmi.w	r3, r3, #32
 800d80a:	6023      	strmi	r3, [r4, #0]
 800d80c:	b91e      	cbnz	r6, 800d816 <_printf_i+0x196>
 800d80e:	6823      	ldr	r3, [r4, #0]
 800d810:	f023 0320 	bic.w	r3, r3, #32
 800d814:	6023      	str	r3, [r4, #0]
 800d816:	2310      	movs	r3, #16
 800d818:	e7b0      	b.n	800d77c <_printf_i+0xfc>
 800d81a:	6823      	ldr	r3, [r4, #0]
 800d81c:	f043 0320 	orr.w	r3, r3, #32
 800d820:	6023      	str	r3, [r4, #0]
 800d822:	2378      	movs	r3, #120	; 0x78
 800d824:	4828      	ldr	r0, [pc, #160]	; (800d8c8 <_printf_i+0x248>)
 800d826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d82a:	e7e3      	b.n	800d7f4 <_printf_i+0x174>
 800d82c:	0659      	lsls	r1, r3, #25
 800d82e:	bf48      	it	mi
 800d830:	b2b6      	uxthmi	r6, r6
 800d832:	e7e6      	b.n	800d802 <_printf_i+0x182>
 800d834:	4615      	mov	r5, r2
 800d836:	e7bb      	b.n	800d7b0 <_printf_i+0x130>
 800d838:	682b      	ldr	r3, [r5, #0]
 800d83a:	6826      	ldr	r6, [r4, #0]
 800d83c:	6961      	ldr	r1, [r4, #20]
 800d83e:	1d18      	adds	r0, r3, #4
 800d840:	6028      	str	r0, [r5, #0]
 800d842:	0635      	lsls	r5, r6, #24
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	d501      	bpl.n	800d84c <_printf_i+0x1cc>
 800d848:	6019      	str	r1, [r3, #0]
 800d84a:	e002      	b.n	800d852 <_printf_i+0x1d2>
 800d84c:	0670      	lsls	r0, r6, #25
 800d84e:	d5fb      	bpl.n	800d848 <_printf_i+0x1c8>
 800d850:	8019      	strh	r1, [r3, #0]
 800d852:	2300      	movs	r3, #0
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	4615      	mov	r5, r2
 800d858:	e7ba      	b.n	800d7d0 <_printf_i+0x150>
 800d85a:	682b      	ldr	r3, [r5, #0]
 800d85c:	1d1a      	adds	r2, r3, #4
 800d85e:	602a      	str	r2, [r5, #0]
 800d860:	681d      	ldr	r5, [r3, #0]
 800d862:	6862      	ldr	r2, [r4, #4]
 800d864:	2100      	movs	r1, #0
 800d866:	4628      	mov	r0, r5
 800d868:	f7f2 fce2 	bl	8000230 <memchr>
 800d86c:	b108      	cbz	r0, 800d872 <_printf_i+0x1f2>
 800d86e:	1b40      	subs	r0, r0, r5
 800d870:	6060      	str	r0, [r4, #4]
 800d872:	6863      	ldr	r3, [r4, #4]
 800d874:	6123      	str	r3, [r4, #16]
 800d876:	2300      	movs	r3, #0
 800d878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d87c:	e7a8      	b.n	800d7d0 <_printf_i+0x150>
 800d87e:	6923      	ldr	r3, [r4, #16]
 800d880:	462a      	mov	r2, r5
 800d882:	4649      	mov	r1, r9
 800d884:	4640      	mov	r0, r8
 800d886:	47d0      	blx	sl
 800d888:	3001      	adds	r0, #1
 800d88a:	d0ab      	beq.n	800d7e4 <_printf_i+0x164>
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	079b      	lsls	r3, r3, #30
 800d890:	d413      	bmi.n	800d8ba <_printf_i+0x23a>
 800d892:	68e0      	ldr	r0, [r4, #12]
 800d894:	9b03      	ldr	r3, [sp, #12]
 800d896:	4298      	cmp	r0, r3
 800d898:	bfb8      	it	lt
 800d89a:	4618      	movlt	r0, r3
 800d89c:	e7a4      	b.n	800d7e8 <_printf_i+0x168>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	4632      	mov	r2, r6
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	4640      	mov	r0, r8
 800d8a6:	47d0      	blx	sl
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	d09b      	beq.n	800d7e4 <_printf_i+0x164>
 800d8ac:	3501      	adds	r5, #1
 800d8ae:	68e3      	ldr	r3, [r4, #12]
 800d8b0:	9903      	ldr	r1, [sp, #12]
 800d8b2:	1a5b      	subs	r3, r3, r1
 800d8b4:	42ab      	cmp	r3, r5
 800d8b6:	dcf2      	bgt.n	800d89e <_printf_i+0x21e>
 800d8b8:	e7eb      	b.n	800d892 <_printf_i+0x212>
 800d8ba:	2500      	movs	r5, #0
 800d8bc:	f104 0619 	add.w	r6, r4, #25
 800d8c0:	e7f5      	b.n	800d8ae <_printf_i+0x22e>
 800d8c2:	bf00      	nop
 800d8c4:	0800fef2 	.word	0x0800fef2
 800d8c8:	0800ff03 	.word	0x0800ff03

0800d8cc <iprintf>:
 800d8cc:	b40f      	push	{r0, r1, r2, r3}
 800d8ce:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <iprintf+0x2c>)
 800d8d0:	b513      	push	{r0, r1, r4, lr}
 800d8d2:	681c      	ldr	r4, [r3, #0]
 800d8d4:	b124      	cbz	r4, 800d8e0 <iprintf+0x14>
 800d8d6:	69a3      	ldr	r3, [r4, #24]
 800d8d8:	b913      	cbnz	r3, 800d8e0 <iprintf+0x14>
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f001 f9a8 	bl	800ec30 <__sinit>
 800d8e0:	ab05      	add	r3, sp, #20
 800d8e2:	9a04      	ldr	r2, [sp, #16]
 800d8e4:	68a1      	ldr	r1, [r4, #8]
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f001 ff65 	bl	800f7b8 <_vfiprintf_r>
 800d8ee:	b002      	add	sp, #8
 800d8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f4:	b004      	add	sp, #16
 800d8f6:	4770      	bx	lr
 800d8f8:	20000014 	.word	0x20000014

0800d8fc <_puts_r>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	460e      	mov	r6, r1
 800d900:	4605      	mov	r5, r0
 800d902:	b118      	cbz	r0, 800d90c <_puts_r+0x10>
 800d904:	6983      	ldr	r3, [r0, #24]
 800d906:	b90b      	cbnz	r3, 800d90c <_puts_r+0x10>
 800d908:	f001 f992 	bl	800ec30 <__sinit>
 800d90c:	69ab      	ldr	r3, [r5, #24]
 800d90e:	68ac      	ldr	r4, [r5, #8]
 800d910:	b913      	cbnz	r3, 800d918 <_puts_r+0x1c>
 800d912:	4628      	mov	r0, r5
 800d914:	f001 f98c 	bl	800ec30 <__sinit>
 800d918:	4b2c      	ldr	r3, [pc, #176]	; (800d9cc <_puts_r+0xd0>)
 800d91a:	429c      	cmp	r4, r3
 800d91c:	d120      	bne.n	800d960 <_puts_r+0x64>
 800d91e:	686c      	ldr	r4, [r5, #4]
 800d920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d922:	07db      	lsls	r3, r3, #31
 800d924:	d405      	bmi.n	800d932 <_puts_r+0x36>
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	0598      	lsls	r0, r3, #22
 800d92a:	d402      	bmi.n	800d932 <_puts_r+0x36>
 800d92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d92e:	f001 fa22 	bl	800ed76 <__retarget_lock_acquire_recursive>
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	0719      	lsls	r1, r3, #28
 800d936:	d51d      	bpl.n	800d974 <_puts_r+0x78>
 800d938:	6923      	ldr	r3, [r4, #16]
 800d93a:	b1db      	cbz	r3, 800d974 <_puts_r+0x78>
 800d93c:	3e01      	subs	r6, #1
 800d93e:	68a3      	ldr	r3, [r4, #8]
 800d940:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d944:	3b01      	subs	r3, #1
 800d946:	60a3      	str	r3, [r4, #8]
 800d948:	bb39      	cbnz	r1, 800d99a <_puts_r+0x9e>
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	da38      	bge.n	800d9c0 <_puts_r+0xc4>
 800d94e:	4622      	mov	r2, r4
 800d950:	210a      	movs	r1, #10
 800d952:	4628      	mov	r0, r5
 800d954:	f000 f916 	bl	800db84 <__swbuf_r>
 800d958:	3001      	adds	r0, #1
 800d95a:	d011      	beq.n	800d980 <_puts_r+0x84>
 800d95c:	250a      	movs	r5, #10
 800d95e:	e011      	b.n	800d984 <_puts_r+0x88>
 800d960:	4b1b      	ldr	r3, [pc, #108]	; (800d9d0 <_puts_r+0xd4>)
 800d962:	429c      	cmp	r4, r3
 800d964:	d101      	bne.n	800d96a <_puts_r+0x6e>
 800d966:	68ac      	ldr	r4, [r5, #8]
 800d968:	e7da      	b.n	800d920 <_puts_r+0x24>
 800d96a:	4b1a      	ldr	r3, [pc, #104]	; (800d9d4 <_puts_r+0xd8>)
 800d96c:	429c      	cmp	r4, r3
 800d96e:	bf08      	it	eq
 800d970:	68ec      	ldreq	r4, [r5, #12]
 800d972:	e7d5      	b.n	800d920 <_puts_r+0x24>
 800d974:	4621      	mov	r1, r4
 800d976:	4628      	mov	r0, r5
 800d978:	f000 f956 	bl	800dc28 <__swsetup_r>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d0dd      	beq.n	800d93c <_puts_r+0x40>
 800d980:	f04f 35ff 	mov.w	r5, #4294967295
 800d984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d986:	07da      	lsls	r2, r3, #31
 800d988:	d405      	bmi.n	800d996 <_puts_r+0x9a>
 800d98a:	89a3      	ldrh	r3, [r4, #12]
 800d98c:	059b      	lsls	r3, r3, #22
 800d98e:	d402      	bmi.n	800d996 <_puts_r+0x9a>
 800d990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d992:	f001 f9f1 	bl	800ed78 <__retarget_lock_release_recursive>
 800d996:	4628      	mov	r0, r5
 800d998:	bd70      	pop	{r4, r5, r6, pc}
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	da04      	bge.n	800d9a8 <_puts_r+0xac>
 800d99e:	69a2      	ldr	r2, [r4, #24]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	dc06      	bgt.n	800d9b2 <_puts_r+0xb6>
 800d9a4:	290a      	cmp	r1, #10
 800d9a6:	d004      	beq.n	800d9b2 <_puts_r+0xb6>
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	1c5a      	adds	r2, r3, #1
 800d9ac:	6022      	str	r2, [r4, #0]
 800d9ae:	7019      	strb	r1, [r3, #0]
 800d9b0:	e7c5      	b.n	800d93e <_puts_r+0x42>
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f000 f8e5 	bl	800db84 <__swbuf_r>
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	d1bf      	bne.n	800d93e <_puts_r+0x42>
 800d9be:	e7df      	b.n	800d980 <_puts_r+0x84>
 800d9c0:	6823      	ldr	r3, [r4, #0]
 800d9c2:	250a      	movs	r5, #10
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	6022      	str	r2, [r4, #0]
 800d9c8:	701d      	strb	r5, [r3, #0]
 800d9ca:	e7db      	b.n	800d984 <_puts_r+0x88>
 800d9cc:	0800ffc4 	.word	0x0800ffc4
 800d9d0:	0800ffe4 	.word	0x0800ffe4
 800d9d4:	0800ffa4 	.word	0x0800ffa4

0800d9d8 <puts>:
 800d9d8:	4b02      	ldr	r3, [pc, #8]	; (800d9e4 <puts+0xc>)
 800d9da:	4601      	mov	r1, r0
 800d9dc:	6818      	ldr	r0, [r3, #0]
 800d9de:	f7ff bf8d 	b.w	800d8fc <_puts_r>
 800d9e2:	bf00      	nop
 800d9e4:	20000014 	.word	0x20000014

0800d9e8 <setbuf>:
 800d9e8:	2900      	cmp	r1, #0
 800d9ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9ee:	bf0c      	ite	eq
 800d9f0:	2202      	moveq	r2, #2
 800d9f2:	2200      	movne	r2, #0
 800d9f4:	f000 b800 	b.w	800d9f8 <setvbuf>

0800d9f8 <setvbuf>:
 800d9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9fc:	461d      	mov	r5, r3
 800d9fe:	4b5d      	ldr	r3, [pc, #372]	; (800db74 <setvbuf+0x17c>)
 800da00:	681f      	ldr	r7, [r3, #0]
 800da02:	4604      	mov	r4, r0
 800da04:	460e      	mov	r6, r1
 800da06:	4690      	mov	r8, r2
 800da08:	b127      	cbz	r7, 800da14 <setvbuf+0x1c>
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	b913      	cbnz	r3, 800da14 <setvbuf+0x1c>
 800da0e:	4638      	mov	r0, r7
 800da10:	f001 f90e 	bl	800ec30 <__sinit>
 800da14:	4b58      	ldr	r3, [pc, #352]	; (800db78 <setvbuf+0x180>)
 800da16:	429c      	cmp	r4, r3
 800da18:	d167      	bne.n	800daea <setvbuf+0xf2>
 800da1a:	687c      	ldr	r4, [r7, #4]
 800da1c:	f1b8 0f02 	cmp.w	r8, #2
 800da20:	d006      	beq.n	800da30 <setvbuf+0x38>
 800da22:	f1b8 0f01 	cmp.w	r8, #1
 800da26:	f200 809f 	bhi.w	800db68 <setvbuf+0x170>
 800da2a:	2d00      	cmp	r5, #0
 800da2c:	f2c0 809c 	blt.w	800db68 <setvbuf+0x170>
 800da30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da32:	07db      	lsls	r3, r3, #31
 800da34:	d405      	bmi.n	800da42 <setvbuf+0x4a>
 800da36:	89a3      	ldrh	r3, [r4, #12]
 800da38:	0598      	lsls	r0, r3, #22
 800da3a:	d402      	bmi.n	800da42 <setvbuf+0x4a>
 800da3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da3e:	f001 f99a 	bl	800ed76 <__retarget_lock_acquire_recursive>
 800da42:	4621      	mov	r1, r4
 800da44:	4638      	mov	r0, r7
 800da46:	f001 f85f 	bl	800eb08 <_fflush_r>
 800da4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da4c:	b141      	cbz	r1, 800da60 <setvbuf+0x68>
 800da4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da52:	4299      	cmp	r1, r3
 800da54:	d002      	beq.n	800da5c <setvbuf+0x64>
 800da56:	4638      	mov	r0, r7
 800da58:	f001 fda4 	bl	800f5a4 <_free_r>
 800da5c:	2300      	movs	r3, #0
 800da5e:	6363      	str	r3, [r4, #52]	; 0x34
 800da60:	2300      	movs	r3, #0
 800da62:	61a3      	str	r3, [r4, #24]
 800da64:	6063      	str	r3, [r4, #4]
 800da66:	89a3      	ldrh	r3, [r4, #12]
 800da68:	0619      	lsls	r1, r3, #24
 800da6a:	d503      	bpl.n	800da74 <setvbuf+0x7c>
 800da6c:	6921      	ldr	r1, [r4, #16]
 800da6e:	4638      	mov	r0, r7
 800da70:	f001 fd98 	bl	800f5a4 <_free_r>
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800da7a:	f023 0303 	bic.w	r3, r3, #3
 800da7e:	f1b8 0f02 	cmp.w	r8, #2
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	d06c      	beq.n	800db60 <setvbuf+0x168>
 800da86:	ab01      	add	r3, sp, #4
 800da88:	466a      	mov	r2, sp
 800da8a:	4621      	mov	r1, r4
 800da8c:	4638      	mov	r0, r7
 800da8e:	f001 f974 	bl	800ed7a <__swhatbuf_r>
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	4318      	orrs	r0, r3
 800da96:	81a0      	strh	r0, [r4, #12]
 800da98:	2d00      	cmp	r5, #0
 800da9a:	d130      	bne.n	800dafe <setvbuf+0x106>
 800da9c:	9d00      	ldr	r5, [sp, #0]
 800da9e:	4628      	mov	r0, r5
 800daa0:	f001 f9d0 	bl	800ee44 <malloc>
 800daa4:	4606      	mov	r6, r0
 800daa6:	2800      	cmp	r0, #0
 800daa8:	d155      	bne.n	800db56 <setvbuf+0x15e>
 800daaa:	f8dd 9000 	ldr.w	r9, [sp]
 800daae:	45a9      	cmp	r9, r5
 800dab0:	d14a      	bne.n	800db48 <setvbuf+0x150>
 800dab2:	f04f 35ff 	mov.w	r5, #4294967295
 800dab6:	2200      	movs	r2, #0
 800dab8:	60a2      	str	r2, [r4, #8]
 800daba:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800dabe:	6022      	str	r2, [r4, #0]
 800dac0:	6122      	str	r2, [r4, #16]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dac8:	6162      	str	r2, [r4, #20]
 800daca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dacc:	f043 0302 	orr.w	r3, r3, #2
 800dad0:	07d2      	lsls	r2, r2, #31
 800dad2:	81a3      	strh	r3, [r4, #12]
 800dad4:	d405      	bmi.n	800dae2 <setvbuf+0xea>
 800dad6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800dada:	d102      	bne.n	800dae2 <setvbuf+0xea>
 800dadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dade:	f001 f94b 	bl	800ed78 <__retarget_lock_release_recursive>
 800dae2:	4628      	mov	r0, r5
 800dae4:	b003      	add	sp, #12
 800dae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daea:	4b24      	ldr	r3, [pc, #144]	; (800db7c <setvbuf+0x184>)
 800daec:	429c      	cmp	r4, r3
 800daee:	d101      	bne.n	800daf4 <setvbuf+0xfc>
 800daf0:	68bc      	ldr	r4, [r7, #8]
 800daf2:	e793      	b.n	800da1c <setvbuf+0x24>
 800daf4:	4b22      	ldr	r3, [pc, #136]	; (800db80 <setvbuf+0x188>)
 800daf6:	429c      	cmp	r4, r3
 800daf8:	bf08      	it	eq
 800dafa:	68fc      	ldreq	r4, [r7, #12]
 800dafc:	e78e      	b.n	800da1c <setvbuf+0x24>
 800dafe:	2e00      	cmp	r6, #0
 800db00:	d0cd      	beq.n	800da9e <setvbuf+0xa6>
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	b913      	cbnz	r3, 800db0c <setvbuf+0x114>
 800db06:	4638      	mov	r0, r7
 800db08:	f001 f892 	bl	800ec30 <__sinit>
 800db0c:	f1b8 0f01 	cmp.w	r8, #1
 800db10:	bf08      	it	eq
 800db12:	89a3      	ldrheq	r3, [r4, #12]
 800db14:	6026      	str	r6, [r4, #0]
 800db16:	bf04      	itt	eq
 800db18:	f043 0301 	orreq.w	r3, r3, #1
 800db1c:	81a3      	strheq	r3, [r4, #12]
 800db1e:	89a2      	ldrh	r2, [r4, #12]
 800db20:	f012 0308 	ands.w	r3, r2, #8
 800db24:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800db28:	d01c      	beq.n	800db64 <setvbuf+0x16c>
 800db2a:	07d3      	lsls	r3, r2, #31
 800db2c:	bf41      	itttt	mi
 800db2e:	2300      	movmi	r3, #0
 800db30:	426d      	negmi	r5, r5
 800db32:	60a3      	strmi	r3, [r4, #8]
 800db34:	61a5      	strmi	r5, [r4, #24]
 800db36:	bf58      	it	pl
 800db38:	60a5      	strpl	r5, [r4, #8]
 800db3a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800db3c:	f015 0501 	ands.w	r5, r5, #1
 800db40:	d115      	bne.n	800db6e <setvbuf+0x176>
 800db42:	f412 7f00 	tst.w	r2, #512	; 0x200
 800db46:	e7c8      	b.n	800dada <setvbuf+0xe2>
 800db48:	4648      	mov	r0, r9
 800db4a:	f001 f97b 	bl	800ee44 <malloc>
 800db4e:	4606      	mov	r6, r0
 800db50:	2800      	cmp	r0, #0
 800db52:	d0ae      	beq.n	800dab2 <setvbuf+0xba>
 800db54:	464d      	mov	r5, r9
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db5c:	81a3      	strh	r3, [r4, #12]
 800db5e:	e7d0      	b.n	800db02 <setvbuf+0x10a>
 800db60:	2500      	movs	r5, #0
 800db62:	e7a8      	b.n	800dab6 <setvbuf+0xbe>
 800db64:	60a3      	str	r3, [r4, #8]
 800db66:	e7e8      	b.n	800db3a <setvbuf+0x142>
 800db68:	f04f 35ff 	mov.w	r5, #4294967295
 800db6c:	e7b9      	b.n	800dae2 <setvbuf+0xea>
 800db6e:	2500      	movs	r5, #0
 800db70:	e7b7      	b.n	800dae2 <setvbuf+0xea>
 800db72:	bf00      	nop
 800db74:	20000014 	.word	0x20000014
 800db78:	0800ffc4 	.word	0x0800ffc4
 800db7c:	0800ffe4 	.word	0x0800ffe4
 800db80:	0800ffa4 	.word	0x0800ffa4

0800db84 <__swbuf_r>:
 800db84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db86:	460e      	mov	r6, r1
 800db88:	4614      	mov	r4, r2
 800db8a:	4605      	mov	r5, r0
 800db8c:	b118      	cbz	r0, 800db96 <__swbuf_r+0x12>
 800db8e:	6983      	ldr	r3, [r0, #24]
 800db90:	b90b      	cbnz	r3, 800db96 <__swbuf_r+0x12>
 800db92:	f001 f84d 	bl	800ec30 <__sinit>
 800db96:	4b21      	ldr	r3, [pc, #132]	; (800dc1c <__swbuf_r+0x98>)
 800db98:	429c      	cmp	r4, r3
 800db9a:	d12b      	bne.n	800dbf4 <__swbuf_r+0x70>
 800db9c:	686c      	ldr	r4, [r5, #4]
 800db9e:	69a3      	ldr	r3, [r4, #24]
 800dba0:	60a3      	str	r3, [r4, #8]
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	071a      	lsls	r2, r3, #28
 800dba6:	d52f      	bpl.n	800dc08 <__swbuf_r+0x84>
 800dba8:	6923      	ldr	r3, [r4, #16]
 800dbaa:	b36b      	cbz	r3, 800dc08 <__swbuf_r+0x84>
 800dbac:	6923      	ldr	r3, [r4, #16]
 800dbae:	6820      	ldr	r0, [r4, #0]
 800dbb0:	1ac0      	subs	r0, r0, r3
 800dbb2:	6963      	ldr	r3, [r4, #20]
 800dbb4:	b2f6      	uxtb	r6, r6
 800dbb6:	4283      	cmp	r3, r0
 800dbb8:	4637      	mov	r7, r6
 800dbba:	dc04      	bgt.n	800dbc6 <__swbuf_r+0x42>
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	f000 ffa2 	bl	800eb08 <_fflush_r>
 800dbc4:	bb30      	cbnz	r0, 800dc14 <__swbuf_r+0x90>
 800dbc6:	68a3      	ldr	r3, [r4, #8]
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	60a3      	str	r3, [r4, #8]
 800dbcc:	6823      	ldr	r3, [r4, #0]
 800dbce:	1c5a      	adds	r2, r3, #1
 800dbd0:	6022      	str	r2, [r4, #0]
 800dbd2:	701e      	strb	r6, [r3, #0]
 800dbd4:	6963      	ldr	r3, [r4, #20]
 800dbd6:	3001      	adds	r0, #1
 800dbd8:	4283      	cmp	r3, r0
 800dbda:	d004      	beq.n	800dbe6 <__swbuf_r+0x62>
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	07db      	lsls	r3, r3, #31
 800dbe0:	d506      	bpl.n	800dbf0 <__swbuf_r+0x6c>
 800dbe2:	2e0a      	cmp	r6, #10
 800dbe4:	d104      	bne.n	800dbf0 <__swbuf_r+0x6c>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f000 ff8d 	bl	800eb08 <_fflush_r>
 800dbee:	b988      	cbnz	r0, 800dc14 <__swbuf_r+0x90>
 800dbf0:	4638      	mov	r0, r7
 800dbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbf4:	4b0a      	ldr	r3, [pc, #40]	; (800dc20 <__swbuf_r+0x9c>)
 800dbf6:	429c      	cmp	r4, r3
 800dbf8:	d101      	bne.n	800dbfe <__swbuf_r+0x7a>
 800dbfa:	68ac      	ldr	r4, [r5, #8]
 800dbfc:	e7cf      	b.n	800db9e <__swbuf_r+0x1a>
 800dbfe:	4b09      	ldr	r3, [pc, #36]	; (800dc24 <__swbuf_r+0xa0>)
 800dc00:	429c      	cmp	r4, r3
 800dc02:	bf08      	it	eq
 800dc04:	68ec      	ldreq	r4, [r5, #12]
 800dc06:	e7ca      	b.n	800db9e <__swbuf_r+0x1a>
 800dc08:	4621      	mov	r1, r4
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f000 f80c 	bl	800dc28 <__swsetup_r>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d0cb      	beq.n	800dbac <__swbuf_r+0x28>
 800dc14:	f04f 37ff 	mov.w	r7, #4294967295
 800dc18:	e7ea      	b.n	800dbf0 <__swbuf_r+0x6c>
 800dc1a:	bf00      	nop
 800dc1c:	0800ffc4 	.word	0x0800ffc4
 800dc20:	0800ffe4 	.word	0x0800ffe4
 800dc24:	0800ffa4 	.word	0x0800ffa4

0800dc28 <__swsetup_r>:
 800dc28:	4b32      	ldr	r3, [pc, #200]	; (800dcf4 <__swsetup_r+0xcc>)
 800dc2a:	b570      	push	{r4, r5, r6, lr}
 800dc2c:	681d      	ldr	r5, [r3, #0]
 800dc2e:	4606      	mov	r6, r0
 800dc30:	460c      	mov	r4, r1
 800dc32:	b125      	cbz	r5, 800dc3e <__swsetup_r+0x16>
 800dc34:	69ab      	ldr	r3, [r5, #24]
 800dc36:	b913      	cbnz	r3, 800dc3e <__swsetup_r+0x16>
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f000 fff9 	bl	800ec30 <__sinit>
 800dc3e:	4b2e      	ldr	r3, [pc, #184]	; (800dcf8 <__swsetup_r+0xd0>)
 800dc40:	429c      	cmp	r4, r3
 800dc42:	d10f      	bne.n	800dc64 <__swsetup_r+0x3c>
 800dc44:	686c      	ldr	r4, [r5, #4]
 800dc46:	89a3      	ldrh	r3, [r4, #12]
 800dc48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc4c:	0719      	lsls	r1, r3, #28
 800dc4e:	d42c      	bmi.n	800dcaa <__swsetup_r+0x82>
 800dc50:	06dd      	lsls	r5, r3, #27
 800dc52:	d411      	bmi.n	800dc78 <__swsetup_r+0x50>
 800dc54:	2309      	movs	r3, #9
 800dc56:	6033      	str	r3, [r6, #0]
 800dc58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc5c:	81a3      	strh	r3, [r4, #12]
 800dc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc62:	e03e      	b.n	800dce2 <__swsetup_r+0xba>
 800dc64:	4b25      	ldr	r3, [pc, #148]	; (800dcfc <__swsetup_r+0xd4>)
 800dc66:	429c      	cmp	r4, r3
 800dc68:	d101      	bne.n	800dc6e <__swsetup_r+0x46>
 800dc6a:	68ac      	ldr	r4, [r5, #8]
 800dc6c:	e7eb      	b.n	800dc46 <__swsetup_r+0x1e>
 800dc6e:	4b24      	ldr	r3, [pc, #144]	; (800dd00 <__swsetup_r+0xd8>)
 800dc70:	429c      	cmp	r4, r3
 800dc72:	bf08      	it	eq
 800dc74:	68ec      	ldreq	r4, [r5, #12]
 800dc76:	e7e6      	b.n	800dc46 <__swsetup_r+0x1e>
 800dc78:	0758      	lsls	r0, r3, #29
 800dc7a:	d512      	bpl.n	800dca2 <__swsetup_r+0x7a>
 800dc7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc7e:	b141      	cbz	r1, 800dc92 <__swsetup_r+0x6a>
 800dc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc84:	4299      	cmp	r1, r3
 800dc86:	d002      	beq.n	800dc8e <__swsetup_r+0x66>
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f001 fc8b 	bl	800f5a4 <_free_r>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	6363      	str	r3, [r4, #52]	; 0x34
 800dc92:	89a3      	ldrh	r3, [r4, #12]
 800dc94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc98:	81a3      	strh	r3, [r4, #12]
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	6063      	str	r3, [r4, #4]
 800dc9e:	6923      	ldr	r3, [r4, #16]
 800dca0:	6023      	str	r3, [r4, #0]
 800dca2:	89a3      	ldrh	r3, [r4, #12]
 800dca4:	f043 0308 	orr.w	r3, r3, #8
 800dca8:	81a3      	strh	r3, [r4, #12]
 800dcaa:	6923      	ldr	r3, [r4, #16]
 800dcac:	b94b      	cbnz	r3, 800dcc2 <__swsetup_r+0x9a>
 800dcae:	89a3      	ldrh	r3, [r4, #12]
 800dcb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcb8:	d003      	beq.n	800dcc2 <__swsetup_r+0x9a>
 800dcba:	4621      	mov	r1, r4
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	f001 f881 	bl	800edc4 <__smakebuf_r>
 800dcc2:	89a0      	ldrh	r0, [r4, #12]
 800dcc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcc8:	f010 0301 	ands.w	r3, r0, #1
 800dccc:	d00a      	beq.n	800dce4 <__swsetup_r+0xbc>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60a3      	str	r3, [r4, #8]
 800dcd2:	6963      	ldr	r3, [r4, #20]
 800dcd4:	425b      	negs	r3, r3
 800dcd6:	61a3      	str	r3, [r4, #24]
 800dcd8:	6923      	ldr	r3, [r4, #16]
 800dcda:	b943      	cbnz	r3, 800dcee <__swsetup_r+0xc6>
 800dcdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dce0:	d1ba      	bne.n	800dc58 <__swsetup_r+0x30>
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	0781      	lsls	r1, r0, #30
 800dce6:	bf58      	it	pl
 800dce8:	6963      	ldrpl	r3, [r4, #20]
 800dcea:	60a3      	str	r3, [r4, #8]
 800dcec:	e7f4      	b.n	800dcd8 <__swsetup_r+0xb0>
 800dcee:	2000      	movs	r0, #0
 800dcf0:	e7f7      	b.n	800dce2 <__swsetup_r+0xba>
 800dcf2:	bf00      	nop
 800dcf4:	20000014 	.word	0x20000014
 800dcf8:	0800ffc4 	.word	0x0800ffc4
 800dcfc:	0800ffe4 	.word	0x0800ffe4
 800dd00:	0800ffa4 	.word	0x0800ffa4

0800dd04 <quorem>:
 800dd04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd08:	6903      	ldr	r3, [r0, #16]
 800dd0a:	690c      	ldr	r4, [r1, #16]
 800dd0c:	42a3      	cmp	r3, r4
 800dd0e:	4607      	mov	r7, r0
 800dd10:	f2c0 8081 	blt.w	800de16 <quorem+0x112>
 800dd14:	3c01      	subs	r4, #1
 800dd16:	f101 0814 	add.w	r8, r1, #20
 800dd1a:	f100 0514 	add.w	r5, r0, #20
 800dd1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd22:	9301      	str	r3, [sp, #4]
 800dd24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd38:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd3c:	d331      	bcc.n	800dda2 <quorem+0x9e>
 800dd3e:	f04f 0e00 	mov.w	lr, #0
 800dd42:	4640      	mov	r0, r8
 800dd44:	46ac      	mov	ip, r5
 800dd46:	46f2      	mov	sl, lr
 800dd48:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd4c:	b293      	uxth	r3, r2
 800dd4e:	fb06 e303 	mla	r3, r6, r3, lr
 800dd52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	ebaa 0303 	sub.w	r3, sl, r3
 800dd5c:	f8dc a000 	ldr.w	sl, [ip]
 800dd60:	0c12      	lsrs	r2, r2, #16
 800dd62:	fa13 f38a 	uxtah	r3, r3, sl
 800dd66:	fb06 e202 	mla	r2, r6, r2, lr
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	9b00      	ldr	r3, [sp, #0]
 800dd6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd72:	b292      	uxth	r2, r2
 800dd74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd7c:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd80:	4581      	cmp	r9, r0
 800dd82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd86:	f84c 3b04 	str.w	r3, [ip], #4
 800dd8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd8e:	d2db      	bcs.n	800dd48 <quorem+0x44>
 800dd90:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd94:	b92b      	cbnz	r3, 800dda2 <quorem+0x9e>
 800dd96:	9b01      	ldr	r3, [sp, #4]
 800dd98:	3b04      	subs	r3, #4
 800dd9a:	429d      	cmp	r5, r3
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	d32e      	bcc.n	800ddfe <quorem+0xfa>
 800dda0:	613c      	str	r4, [r7, #16]
 800dda2:	4638      	mov	r0, r7
 800dda4:	f001 fae6 	bl	800f374 <__mcmp>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	db24      	blt.n	800ddf6 <quorem+0xf2>
 800ddac:	3601      	adds	r6, #1
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f04f 0c00 	mov.w	ip, #0
 800ddb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddb8:	f8d0 e000 	ldr.w	lr, [r0]
 800ddbc:	b293      	uxth	r3, r2
 800ddbe:	ebac 0303 	sub.w	r3, ip, r3
 800ddc2:	0c12      	lsrs	r2, r2, #16
 800ddc4:	fa13 f38e 	uxtah	r3, r3, lr
 800ddc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ddcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddd6:	45c1      	cmp	r9, r8
 800ddd8:	f840 3b04 	str.w	r3, [r0], #4
 800dddc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dde0:	d2e8      	bcs.n	800ddb4 <quorem+0xb0>
 800dde2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dde6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddea:	b922      	cbnz	r2, 800ddf6 <quorem+0xf2>
 800ddec:	3b04      	subs	r3, #4
 800ddee:	429d      	cmp	r5, r3
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	d30a      	bcc.n	800de0a <quorem+0x106>
 800ddf4:	613c      	str	r4, [r7, #16]
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	b003      	add	sp, #12
 800ddfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfe:	6812      	ldr	r2, [r2, #0]
 800de00:	3b04      	subs	r3, #4
 800de02:	2a00      	cmp	r2, #0
 800de04:	d1cc      	bne.n	800dda0 <quorem+0x9c>
 800de06:	3c01      	subs	r4, #1
 800de08:	e7c7      	b.n	800dd9a <quorem+0x96>
 800de0a:	6812      	ldr	r2, [r2, #0]
 800de0c:	3b04      	subs	r3, #4
 800de0e:	2a00      	cmp	r2, #0
 800de10:	d1f0      	bne.n	800ddf4 <quorem+0xf0>
 800de12:	3c01      	subs	r4, #1
 800de14:	e7eb      	b.n	800ddee <quorem+0xea>
 800de16:	2000      	movs	r0, #0
 800de18:	e7ee      	b.n	800ddf8 <quorem+0xf4>
 800de1a:	0000      	movs	r0, r0
 800de1c:	0000      	movs	r0, r0
	...

0800de20 <_dtoa_r>:
 800de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de24:	ed2d 8b04 	vpush	{d8-d9}
 800de28:	ec57 6b10 	vmov	r6, r7, d0
 800de2c:	b093      	sub	sp, #76	; 0x4c
 800de2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de34:	9106      	str	r1, [sp, #24]
 800de36:	ee10 aa10 	vmov	sl, s0
 800de3a:	4604      	mov	r4, r0
 800de3c:	9209      	str	r2, [sp, #36]	; 0x24
 800de3e:	930c      	str	r3, [sp, #48]	; 0x30
 800de40:	46bb      	mov	fp, r7
 800de42:	b975      	cbnz	r5, 800de62 <_dtoa_r+0x42>
 800de44:	2010      	movs	r0, #16
 800de46:	f000 fffd 	bl	800ee44 <malloc>
 800de4a:	4602      	mov	r2, r0
 800de4c:	6260      	str	r0, [r4, #36]	; 0x24
 800de4e:	b920      	cbnz	r0, 800de5a <_dtoa_r+0x3a>
 800de50:	4ba7      	ldr	r3, [pc, #668]	; (800e0f0 <_dtoa_r+0x2d0>)
 800de52:	21ea      	movs	r1, #234	; 0xea
 800de54:	48a7      	ldr	r0, [pc, #668]	; (800e0f4 <_dtoa_r+0x2d4>)
 800de56:	f001 fe45 	bl	800fae4 <__assert_func>
 800de5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de5e:	6005      	str	r5, [r0, #0]
 800de60:	60c5      	str	r5, [r0, #12]
 800de62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de64:	6819      	ldr	r1, [r3, #0]
 800de66:	b151      	cbz	r1, 800de7e <_dtoa_r+0x5e>
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	604a      	str	r2, [r1, #4]
 800de6c:	2301      	movs	r3, #1
 800de6e:	4093      	lsls	r3, r2
 800de70:	608b      	str	r3, [r1, #8]
 800de72:	4620      	mov	r0, r4
 800de74:	f001 f83c 	bl	800eef0 <_Bfree>
 800de78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de7a:	2200      	movs	r2, #0
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	1e3b      	subs	r3, r7, #0
 800de80:	bfaa      	itet	ge
 800de82:	2300      	movge	r3, #0
 800de84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800de88:	f8c8 3000 	strge.w	r3, [r8]
 800de8c:	4b9a      	ldr	r3, [pc, #616]	; (800e0f8 <_dtoa_r+0x2d8>)
 800de8e:	bfbc      	itt	lt
 800de90:	2201      	movlt	r2, #1
 800de92:	f8c8 2000 	strlt.w	r2, [r8]
 800de96:	ea33 030b 	bics.w	r3, r3, fp
 800de9a:	d11b      	bne.n	800ded4 <_dtoa_r+0xb4>
 800de9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800dea2:	6013      	str	r3, [r2, #0]
 800dea4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dea8:	4333      	orrs	r3, r6
 800deaa:	f000 8592 	beq.w	800e9d2 <_dtoa_r+0xbb2>
 800deae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deb0:	b963      	cbnz	r3, 800decc <_dtoa_r+0xac>
 800deb2:	4b92      	ldr	r3, [pc, #584]	; (800e0fc <_dtoa_r+0x2dc>)
 800deb4:	e022      	b.n	800defc <_dtoa_r+0xdc>
 800deb6:	4b92      	ldr	r3, [pc, #584]	; (800e100 <_dtoa_r+0x2e0>)
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	3308      	adds	r3, #8
 800debc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800debe:	6013      	str	r3, [r2, #0]
 800dec0:	9801      	ldr	r0, [sp, #4]
 800dec2:	b013      	add	sp, #76	; 0x4c
 800dec4:	ecbd 8b04 	vpop	{d8-d9}
 800dec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800decc:	4b8b      	ldr	r3, [pc, #556]	; (800e0fc <_dtoa_r+0x2dc>)
 800dece:	9301      	str	r3, [sp, #4]
 800ded0:	3303      	adds	r3, #3
 800ded2:	e7f3      	b.n	800debc <_dtoa_r+0x9c>
 800ded4:	2200      	movs	r2, #0
 800ded6:	2300      	movs	r3, #0
 800ded8:	4650      	mov	r0, sl
 800deda:	4659      	mov	r1, fp
 800dedc:	f7f2 fe1c 	bl	8000b18 <__aeabi_dcmpeq>
 800dee0:	ec4b ab19 	vmov	d9, sl, fp
 800dee4:	4680      	mov	r8, r0
 800dee6:	b158      	cbz	r0, 800df00 <_dtoa_r+0xe0>
 800dee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800deea:	2301      	movs	r3, #1
 800deec:	6013      	str	r3, [r2, #0]
 800deee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 856b 	beq.w	800e9cc <_dtoa_r+0xbac>
 800def6:	4883      	ldr	r0, [pc, #524]	; (800e104 <_dtoa_r+0x2e4>)
 800def8:	6018      	str	r0, [r3, #0]
 800defa:	1e43      	subs	r3, r0, #1
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	e7df      	b.n	800dec0 <_dtoa_r+0xa0>
 800df00:	ec4b ab10 	vmov	d0, sl, fp
 800df04:	aa10      	add	r2, sp, #64	; 0x40
 800df06:	a911      	add	r1, sp, #68	; 0x44
 800df08:	4620      	mov	r0, r4
 800df0a:	f001 fad9 	bl	800f4c0 <__d2b>
 800df0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800df12:	ee08 0a10 	vmov	s16, r0
 800df16:	2d00      	cmp	r5, #0
 800df18:	f000 8084 	beq.w	800e024 <_dtoa_r+0x204>
 800df1c:	ee19 3a90 	vmov	r3, s19
 800df20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800df28:	4656      	mov	r6, sl
 800df2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800df2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800df36:	4b74      	ldr	r3, [pc, #464]	; (800e108 <_dtoa_r+0x2e8>)
 800df38:	2200      	movs	r2, #0
 800df3a:	4630      	mov	r0, r6
 800df3c:	4639      	mov	r1, r7
 800df3e:	f7f2 f9cb 	bl	80002d8 <__aeabi_dsub>
 800df42:	a365      	add	r3, pc, #404	; (adr r3, 800e0d8 <_dtoa_r+0x2b8>)
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	f7f2 fb7e 	bl	8000648 <__aeabi_dmul>
 800df4c:	a364      	add	r3, pc, #400	; (adr r3, 800e0e0 <_dtoa_r+0x2c0>)
 800df4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df52:	f7f2 f9c3 	bl	80002dc <__adddf3>
 800df56:	4606      	mov	r6, r0
 800df58:	4628      	mov	r0, r5
 800df5a:	460f      	mov	r7, r1
 800df5c:	f7f2 fb0a 	bl	8000574 <__aeabi_i2d>
 800df60:	a361      	add	r3, pc, #388	; (adr r3, 800e0e8 <_dtoa_r+0x2c8>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 fb6f 	bl	8000648 <__aeabi_dmul>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	4630      	mov	r0, r6
 800df70:	4639      	mov	r1, r7
 800df72:	f7f2 f9b3 	bl	80002dc <__adddf3>
 800df76:	4606      	mov	r6, r0
 800df78:	460f      	mov	r7, r1
 800df7a:	f7f2 fe15 	bl	8000ba8 <__aeabi_d2iz>
 800df7e:	2200      	movs	r2, #0
 800df80:	9000      	str	r0, [sp, #0]
 800df82:	2300      	movs	r3, #0
 800df84:	4630      	mov	r0, r6
 800df86:	4639      	mov	r1, r7
 800df88:	f7f2 fdd0 	bl	8000b2c <__aeabi_dcmplt>
 800df8c:	b150      	cbz	r0, 800dfa4 <_dtoa_r+0x184>
 800df8e:	9800      	ldr	r0, [sp, #0]
 800df90:	f7f2 faf0 	bl	8000574 <__aeabi_i2d>
 800df94:	4632      	mov	r2, r6
 800df96:	463b      	mov	r3, r7
 800df98:	f7f2 fdbe 	bl	8000b18 <__aeabi_dcmpeq>
 800df9c:	b910      	cbnz	r0, 800dfa4 <_dtoa_r+0x184>
 800df9e:	9b00      	ldr	r3, [sp, #0]
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	9b00      	ldr	r3, [sp, #0]
 800dfa6:	2b16      	cmp	r3, #22
 800dfa8:	d85a      	bhi.n	800e060 <_dtoa_r+0x240>
 800dfaa:	9a00      	ldr	r2, [sp, #0]
 800dfac:	4b57      	ldr	r3, [pc, #348]	; (800e10c <_dtoa_r+0x2ec>)
 800dfae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	ec51 0b19 	vmov	r0, r1, d9
 800dfba:	f7f2 fdb7 	bl	8000b2c <__aeabi_dcmplt>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d050      	beq.n	800e064 <_dtoa_r+0x244>
 800dfc2:	9b00      	ldr	r3, [sp, #0]
 800dfc4:	3b01      	subs	r3, #1
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	2300      	movs	r3, #0
 800dfca:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfce:	1b5d      	subs	r5, r3, r5
 800dfd0:	1e6b      	subs	r3, r5, #1
 800dfd2:	9305      	str	r3, [sp, #20]
 800dfd4:	bf45      	ittet	mi
 800dfd6:	f1c5 0301 	rsbmi	r3, r5, #1
 800dfda:	9304      	strmi	r3, [sp, #16]
 800dfdc:	2300      	movpl	r3, #0
 800dfde:	2300      	movmi	r3, #0
 800dfe0:	bf4c      	ite	mi
 800dfe2:	9305      	strmi	r3, [sp, #20]
 800dfe4:	9304      	strpl	r3, [sp, #16]
 800dfe6:	9b00      	ldr	r3, [sp, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	db3d      	blt.n	800e068 <_dtoa_r+0x248>
 800dfec:	9b05      	ldr	r3, [sp, #20]
 800dfee:	9a00      	ldr	r2, [sp, #0]
 800dff0:	920a      	str	r2, [sp, #40]	; 0x28
 800dff2:	4413      	add	r3, r2
 800dff4:	9305      	str	r3, [sp, #20]
 800dff6:	2300      	movs	r3, #0
 800dff8:	9307      	str	r3, [sp, #28]
 800dffa:	9b06      	ldr	r3, [sp, #24]
 800dffc:	2b09      	cmp	r3, #9
 800dffe:	f200 8089 	bhi.w	800e114 <_dtoa_r+0x2f4>
 800e002:	2b05      	cmp	r3, #5
 800e004:	bfc4      	itt	gt
 800e006:	3b04      	subgt	r3, #4
 800e008:	9306      	strgt	r3, [sp, #24]
 800e00a:	9b06      	ldr	r3, [sp, #24]
 800e00c:	f1a3 0302 	sub.w	r3, r3, #2
 800e010:	bfcc      	ite	gt
 800e012:	2500      	movgt	r5, #0
 800e014:	2501      	movle	r5, #1
 800e016:	2b03      	cmp	r3, #3
 800e018:	f200 8087 	bhi.w	800e12a <_dtoa_r+0x30a>
 800e01c:	e8df f003 	tbb	[pc, r3]
 800e020:	59383a2d 	.word	0x59383a2d
 800e024:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e028:	441d      	add	r5, r3
 800e02a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e02e:	2b20      	cmp	r3, #32
 800e030:	bfc1      	itttt	gt
 800e032:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e036:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e03a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e03e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e042:	bfda      	itte	le
 800e044:	f1c3 0320 	rsble	r3, r3, #32
 800e048:	fa06 f003 	lslle.w	r0, r6, r3
 800e04c:	4318      	orrgt	r0, r3
 800e04e:	f7f2 fa81 	bl	8000554 <__aeabi_ui2d>
 800e052:	2301      	movs	r3, #1
 800e054:	4606      	mov	r6, r0
 800e056:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e05a:	3d01      	subs	r5, #1
 800e05c:	930e      	str	r3, [sp, #56]	; 0x38
 800e05e:	e76a      	b.n	800df36 <_dtoa_r+0x116>
 800e060:	2301      	movs	r3, #1
 800e062:	e7b2      	b.n	800dfca <_dtoa_r+0x1aa>
 800e064:	900b      	str	r0, [sp, #44]	; 0x2c
 800e066:	e7b1      	b.n	800dfcc <_dtoa_r+0x1ac>
 800e068:	9b04      	ldr	r3, [sp, #16]
 800e06a:	9a00      	ldr	r2, [sp, #0]
 800e06c:	1a9b      	subs	r3, r3, r2
 800e06e:	9304      	str	r3, [sp, #16]
 800e070:	4253      	negs	r3, r2
 800e072:	9307      	str	r3, [sp, #28]
 800e074:	2300      	movs	r3, #0
 800e076:	930a      	str	r3, [sp, #40]	; 0x28
 800e078:	e7bf      	b.n	800dffa <_dtoa_r+0x1da>
 800e07a:	2300      	movs	r3, #0
 800e07c:	9308      	str	r3, [sp, #32]
 800e07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e080:	2b00      	cmp	r3, #0
 800e082:	dc55      	bgt.n	800e130 <_dtoa_r+0x310>
 800e084:	2301      	movs	r3, #1
 800e086:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e08a:	461a      	mov	r2, r3
 800e08c:	9209      	str	r2, [sp, #36]	; 0x24
 800e08e:	e00c      	b.n	800e0aa <_dtoa_r+0x28a>
 800e090:	2301      	movs	r3, #1
 800e092:	e7f3      	b.n	800e07c <_dtoa_r+0x25c>
 800e094:	2300      	movs	r3, #0
 800e096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e098:	9308      	str	r3, [sp, #32]
 800e09a:	9b00      	ldr	r3, [sp, #0]
 800e09c:	4413      	add	r3, r2
 800e09e:	9302      	str	r3, [sp, #8]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	9303      	str	r3, [sp, #12]
 800e0a6:	bfb8      	it	lt
 800e0a8:	2301      	movlt	r3, #1
 800e0aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	6042      	str	r2, [r0, #4]
 800e0b0:	2204      	movs	r2, #4
 800e0b2:	f102 0614 	add.w	r6, r2, #20
 800e0b6:	429e      	cmp	r6, r3
 800e0b8:	6841      	ldr	r1, [r0, #4]
 800e0ba:	d93d      	bls.n	800e138 <_dtoa_r+0x318>
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f000 fed7 	bl	800ee70 <_Balloc>
 800e0c2:	9001      	str	r0, [sp, #4]
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d13b      	bne.n	800e140 <_dtoa_r+0x320>
 800e0c8:	4b11      	ldr	r3, [pc, #68]	; (800e110 <_dtoa_r+0x2f0>)
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e0d0:	e6c0      	b.n	800de54 <_dtoa_r+0x34>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e7df      	b.n	800e096 <_dtoa_r+0x276>
 800e0d6:	bf00      	nop
 800e0d8:	636f4361 	.word	0x636f4361
 800e0dc:	3fd287a7 	.word	0x3fd287a7
 800e0e0:	8b60c8b3 	.word	0x8b60c8b3
 800e0e4:	3fc68a28 	.word	0x3fc68a28
 800e0e8:	509f79fb 	.word	0x509f79fb
 800e0ec:	3fd34413 	.word	0x3fd34413
 800e0f0:	0800ff21 	.word	0x0800ff21
 800e0f4:	0800ff38 	.word	0x0800ff38
 800e0f8:	7ff00000 	.word	0x7ff00000
 800e0fc:	0800ff1d 	.word	0x0800ff1d
 800e100:	0800ff14 	.word	0x0800ff14
 800e104:	0800fef1 	.word	0x0800fef1
 800e108:	3ff80000 	.word	0x3ff80000
 800e10c:	08010088 	.word	0x08010088
 800e110:	0800ff93 	.word	0x0800ff93
 800e114:	2501      	movs	r5, #1
 800e116:	2300      	movs	r3, #0
 800e118:	9306      	str	r3, [sp, #24]
 800e11a:	9508      	str	r5, [sp, #32]
 800e11c:	f04f 33ff 	mov.w	r3, #4294967295
 800e120:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e124:	2200      	movs	r2, #0
 800e126:	2312      	movs	r3, #18
 800e128:	e7b0      	b.n	800e08c <_dtoa_r+0x26c>
 800e12a:	2301      	movs	r3, #1
 800e12c:	9308      	str	r3, [sp, #32]
 800e12e:	e7f5      	b.n	800e11c <_dtoa_r+0x2fc>
 800e130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e132:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e136:	e7b8      	b.n	800e0aa <_dtoa_r+0x28a>
 800e138:	3101      	adds	r1, #1
 800e13a:	6041      	str	r1, [r0, #4]
 800e13c:	0052      	lsls	r2, r2, #1
 800e13e:	e7b8      	b.n	800e0b2 <_dtoa_r+0x292>
 800e140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e142:	9a01      	ldr	r2, [sp, #4]
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	9b03      	ldr	r3, [sp, #12]
 800e148:	2b0e      	cmp	r3, #14
 800e14a:	f200 809d 	bhi.w	800e288 <_dtoa_r+0x468>
 800e14e:	2d00      	cmp	r5, #0
 800e150:	f000 809a 	beq.w	800e288 <_dtoa_r+0x468>
 800e154:	9b00      	ldr	r3, [sp, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	dd32      	ble.n	800e1c0 <_dtoa_r+0x3a0>
 800e15a:	4ab7      	ldr	r2, [pc, #732]	; (800e438 <_dtoa_r+0x618>)
 800e15c:	f003 030f 	and.w	r3, r3, #15
 800e160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e164:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e168:	9b00      	ldr	r3, [sp, #0]
 800e16a:	05d8      	lsls	r0, r3, #23
 800e16c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e170:	d516      	bpl.n	800e1a0 <_dtoa_r+0x380>
 800e172:	4bb2      	ldr	r3, [pc, #712]	; (800e43c <_dtoa_r+0x61c>)
 800e174:	ec51 0b19 	vmov	r0, r1, d9
 800e178:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e17c:	f7f2 fb8e 	bl	800089c <__aeabi_ddiv>
 800e180:	f007 070f 	and.w	r7, r7, #15
 800e184:	4682      	mov	sl, r0
 800e186:	468b      	mov	fp, r1
 800e188:	2503      	movs	r5, #3
 800e18a:	4eac      	ldr	r6, [pc, #688]	; (800e43c <_dtoa_r+0x61c>)
 800e18c:	b957      	cbnz	r7, 800e1a4 <_dtoa_r+0x384>
 800e18e:	4642      	mov	r2, r8
 800e190:	464b      	mov	r3, r9
 800e192:	4650      	mov	r0, sl
 800e194:	4659      	mov	r1, fp
 800e196:	f7f2 fb81 	bl	800089c <__aeabi_ddiv>
 800e19a:	4682      	mov	sl, r0
 800e19c:	468b      	mov	fp, r1
 800e19e:	e028      	b.n	800e1f2 <_dtoa_r+0x3d2>
 800e1a0:	2502      	movs	r5, #2
 800e1a2:	e7f2      	b.n	800e18a <_dtoa_r+0x36a>
 800e1a4:	07f9      	lsls	r1, r7, #31
 800e1a6:	d508      	bpl.n	800e1ba <_dtoa_r+0x39a>
 800e1a8:	4640      	mov	r0, r8
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e1b0:	f7f2 fa4a 	bl	8000648 <__aeabi_dmul>
 800e1b4:	3501      	adds	r5, #1
 800e1b6:	4680      	mov	r8, r0
 800e1b8:	4689      	mov	r9, r1
 800e1ba:	107f      	asrs	r7, r7, #1
 800e1bc:	3608      	adds	r6, #8
 800e1be:	e7e5      	b.n	800e18c <_dtoa_r+0x36c>
 800e1c0:	f000 809b 	beq.w	800e2fa <_dtoa_r+0x4da>
 800e1c4:	9b00      	ldr	r3, [sp, #0]
 800e1c6:	4f9d      	ldr	r7, [pc, #628]	; (800e43c <_dtoa_r+0x61c>)
 800e1c8:	425e      	negs	r6, r3
 800e1ca:	4b9b      	ldr	r3, [pc, #620]	; (800e438 <_dtoa_r+0x618>)
 800e1cc:	f006 020f 	and.w	r2, r6, #15
 800e1d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d8:	ec51 0b19 	vmov	r0, r1, d9
 800e1dc:	f7f2 fa34 	bl	8000648 <__aeabi_dmul>
 800e1e0:	1136      	asrs	r6, r6, #4
 800e1e2:	4682      	mov	sl, r0
 800e1e4:	468b      	mov	fp, r1
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	2502      	movs	r5, #2
 800e1ea:	2e00      	cmp	r6, #0
 800e1ec:	d17a      	bne.n	800e2e4 <_dtoa_r+0x4c4>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1d3      	bne.n	800e19a <_dtoa_r+0x37a>
 800e1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 8082 	beq.w	800e2fe <_dtoa_r+0x4de>
 800e1fa:	4b91      	ldr	r3, [pc, #580]	; (800e440 <_dtoa_r+0x620>)
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	4650      	mov	r0, sl
 800e200:	4659      	mov	r1, fp
 800e202:	f7f2 fc93 	bl	8000b2c <__aeabi_dcmplt>
 800e206:	2800      	cmp	r0, #0
 800e208:	d079      	beq.n	800e2fe <_dtoa_r+0x4de>
 800e20a:	9b03      	ldr	r3, [sp, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d076      	beq.n	800e2fe <_dtoa_r+0x4de>
 800e210:	9b02      	ldr	r3, [sp, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	dd36      	ble.n	800e284 <_dtoa_r+0x464>
 800e216:	9b00      	ldr	r3, [sp, #0]
 800e218:	4650      	mov	r0, sl
 800e21a:	4659      	mov	r1, fp
 800e21c:	1e5f      	subs	r7, r3, #1
 800e21e:	2200      	movs	r2, #0
 800e220:	4b88      	ldr	r3, [pc, #544]	; (800e444 <_dtoa_r+0x624>)
 800e222:	f7f2 fa11 	bl	8000648 <__aeabi_dmul>
 800e226:	9e02      	ldr	r6, [sp, #8]
 800e228:	4682      	mov	sl, r0
 800e22a:	468b      	mov	fp, r1
 800e22c:	3501      	adds	r5, #1
 800e22e:	4628      	mov	r0, r5
 800e230:	f7f2 f9a0 	bl	8000574 <__aeabi_i2d>
 800e234:	4652      	mov	r2, sl
 800e236:	465b      	mov	r3, fp
 800e238:	f7f2 fa06 	bl	8000648 <__aeabi_dmul>
 800e23c:	4b82      	ldr	r3, [pc, #520]	; (800e448 <_dtoa_r+0x628>)
 800e23e:	2200      	movs	r2, #0
 800e240:	f7f2 f84c 	bl	80002dc <__adddf3>
 800e244:	46d0      	mov	r8, sl
 800e246:	46d9      	mov	r9, fp
 800e248:	4682      	mov	sl, r0
 800e24a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e24e:	2e00      	cmp	r6, #0
 800e250:	d158      	bne.n	800e304 <_dtoa_r+0x4e4>
 800e252:	4b7e      	ldr	r3, [pc, #504]	; (800e44c <_dtoa_r+0x62c>)
 800e254:	2200      	movs	r2, #0
 800e256:	4640      	mov	r0, r8
 800e258:	4649      	mov	r1, r9
 800e25a:	f7f2 f83d 	bl	80002d8 <__aeabi_dsub>
 800e25e:	4652      	mov	r2, sl
 800e260:	465b      	mov	r3, fp
 800e262:	4680      	mov	r8, r0
 800e264:	4689      	mov	r9, r1
 800e266:	f7f2 fc7f 	bl	8000b68 <__aeabi_dcmpgt>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	f040 8295 	bne.w	800e79a <_dtoa_r+0x97a>
 800e270:	4652      	mov	r2, sl
 800e272:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e276:	4640      	mov	r0, r8
 800e278:	4649      	mov	r1, r9
 800e27a:	f7f2 fc57 	bl	8000b2c <__aeabi_dcmplt>
 800e27e:	2800      	cmp	r0, #0
 800e280:	f040 8289 	bne.w	800e796 <_dtoa_r+0x976>
 800e284:	ec5b ab19 	vmov	sl, fp, d9
 800e288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f2c0 8148 	blt.w	800e520 <_dtoa_r+0x700>
 800e290:	9a00      	ldr	r2, [sp, #0]
 800e292:	2a0e      	cmp	r2, #14
 800e294:	f300 8144 	bgt.w	800e520 <_dtoa_r+0x700>
 800e298:	4b67      	ldr	r3, [pc, #412]	; (800e438 <_dtoa_r+0x618>)
 800e29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e29e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f280 80d5 	bge.w	800e454 <_dtoa_r+0x634>
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f300 80d1 	bgt.w	800e454 <_dtoa_r+0x634>
 800e2b2:	f040 826f 	bne.w	800e794 <_dtoa_r+0x974>
 800e2b6:	4b65      	ldr	r3, [pc, #404]	; (800e44c <_dtoa_r+0x62c>)
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	4649      	mov	r1, r9
 800e2be:	f7f2 f9c3 	bl	8000648 <__aeabi_dmul>
 800e2c2:	4652      	mov	r2, sl
 800e2c4:	465b      	mov	r3, fp
 800e2c6:	f7f2 fc45 	bl	8000b54 <__aeabi_dcmpge>
 800e2ca:	9e03      	ldr	r6, [sp, #12]
 800e2cc:	4637      	mov	r7, r6
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f040 8245 	bne.w	800e75e <_dtoa_r+0x93e>
 800e2d4:	9d01      	ldr	r5, [sp, #4]
 800e2d6:	2331      	movs	r3, #49	; 0x31
 800e2d8:	f805 3b01 	strb.w	r3, [r5], #1
 800e2dc:	9b00      	ldr	r3, [sp, #0]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	e240      	b.n	800e766 <_dtoa_r+0x946>
 800e2e4:	07f2      	lsls	r2, r6, #31
 800e2e6:	d505      	bpl.n	800e2f4 <_dtoa_r+0x4d4>
 800e2e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2ec:	f7f2 f9ac 	bl	8000648 <__aeabi_dmul>
 800e2f0:	3501      	adds	r5, #1
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	1076      	asrs	r6, r6, #1
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	e777      	b.n	800e1ea <_dtoa_r+0x3ca>
 800e2fa:	2502      	movs	r5, #2
 800e2fc:	e779      	b.n	800e1f2 <_dtoa_r+0x3d2>
 800e2fe:	9f00      	ldr	r7, [sp, #0]
 800e300:	9e03      	ldr	r6, [sp, #12]
 800e302:	e794      	b.n	800e22e <_dtoa_r+0x40e>
 800e304:	9901      	ldr	r1, [sp, #4]
 800e306:	4b4c      	ldr	r3, [pc, #304]	; (800e438 <_dtoa_r+0x618>)
 800e308:	4431      	add	r1, r6
 800e30a:	910d      	str	r1, [sp, #52]	; 0x34
 800e30c:	9908      	ldr	r1, [sp, #32]
 800e30e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e312:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e316:	2900      	cmp	r1, #0
 800e318:	d043      	beq.n	800e3a2 <_dtoa_r+0x582>
 800e31a:	494d      	ldr	r1, [pc, #308]	; (800e450 <_dtoa_r+0x630>)
 800e31c:	2000      	movs	r0, #0
 800e31e:	f7f2 fabd 	bl	800089c <__aeabi_ddiv>
 800e322:	4652      	mov	r2, sl
 800e324:	465b      	mov	r3, fp
 800e326:	f7f1 ffd7 	bl	80002d8 <__aeabi_dsub>
 800e32a:	9d01      	ldr	r5, [sp, #4]
 800e32c:	4682      	mov	sl, r0
 800e32e:	468b      	mov	fp, r1
 800e330:	4649      	mov	r1, r9
 800e332:	4640      	mov	r0, r8
 800e334:	f7f2 fc38 	bl	8000ba8 <__aeabi_d2iz>
 800e338:	4606      	mov	r6, r0
 800e33a:	f7f2 f91b 	bl	8000574 <__aeabi_i2d>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	4640      	mov	r0, r8
 800e344:	4649      	mov	r1, r9
 800e346:	f7f1 ffc7 	bl	80002d8 <__aeabi_dsub>
 800e34a:	3630      	adds	r6, #48	; 0x30
 800e34c:	f805 6b01 	strb.w	r6, [r5], #1
 800e350:	4652      	mov	r2, sl
 800e352:	465b      	mov	r3, fp
 800e354:	4680      	mov	r8, r0
 800e356:	4689      	mov	r9, r1
 800e358:	f7f2 fbe8 	bl	8000b2c <__aeabi_dcmplt>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d163      	bne.n	800e428 <_dtoa_r+0x608>
 800e360:	4642      	mov	r2, r8
 800e362:	464b      	mov	r3, r9
 800e364:	4936      	ldr	r1, [pc, #216]	; (800e440 <_dtoa_r+0x620>)
 800e366:	2000      	movs	r0, #0
 800e368:	f7f1 ffb6 	bl	80002d8 <__aeabi_dsub>
 800e36c:	4652      	mov	r2, sl
 800e36e:	465b      	mov	r3, fp
 800e370:	f7f2 fbdc 	bl	8000b2c <__aeabi_dcmplt>
 800e374:	2800      	cmp	r0, #0
 800e376:	f040 80b5 	bne.w	800e4e4 <_dtoa_r+0x6c4>
 800e37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e37c:	429d      	cmp	r5, r3
 800e37e:	d081      	beq.n	800e284 <_dtoa_r+0x464>
 800e380:	4b30      	ldr	r3, [pc, #192]	; (800e444 <_dtoa_r+0x624>)
 800e382:	2200      	movs	r2, #0
 800e384:	4650      	mov	r0, sl
 800e386:	4659      	mov	r1, fp
 800e388:	f7f2 f95e 	bl	8000648 <__aeabi_dmul>
 800e38c:	4b2d      	ldr	r3, [pc, #180]	; (800e444 <_dtoa_r+0x624>)
 800e38e:	4682      	mov	sl, r0
 800e390:	468b      	mov	fp, r1
 800e392:	4640      	mov	r0, r8
 800e394:	4649      	mov	r1, r9
 800e396:	2200      	movs	r2, #0
 800e398:	f7f2 f956 	bl	8000648 <__aeabi_dmul>
 800e39c:	4680      	mov	r8, r0
 800e39e:	4689      	mov	r9, r1
 800e3a0:	e7c6      	b.n	800e330 <_dtoa_r+0x510>
 800e3a2:	4650      	mov	r0, sl
 800e3a4:	4659      	mov	r1, fp
 800e3a6:	f7f2 f94f 	bl	8000648 <__aeabi_dmul>
 800e3aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3ac:	9d01      	ldr	r5, [sp, #4]
 800e3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3b0:	4682      	mov	sl, r0
 800e3b2:	468b      	mov	fp, r1
 800e3b4:	4649      	mov	r1, r9
 800e3b6:	4640      	mov	r0, r8
 800e3b8:	f7f2 fbf6 	bl	8000ba8 <__aeabi_d2iz>
 800e3bc:	4606      	mov	r6, r0
 800e3be:	f7f2 f8d9 	bl	8000574 <__aeabi_i2d>
 800e3c2:	3630      	adds	r6, #48	; 0x30
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	4640      	mov	r0, r8
 800e3ca:	4649      	mov	r1, r9
 800e3cc:	f7f1 ff84 	bl	80002d8 <__aeabi_dsub>
 800e3d0:	f805 6b01 	strb.w	r6, [r5], #1
 800e3d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3d6:	429d      	cmp	r5, r3
 800e3d8:	4680      	mov	r8, r0
 800e3da:	4689      	mov	r9, r1
 800e3dc:	f04f 0200 	mov.w	r2, #0
 800e3e0:	d124      	bne.n	800e42c <_dtoa_r+0x60c>
 800e3e2:	4b1b      	ldr	r3, [pc, #108]	; (800e450 <_dtoa_r+0x630>)
 800e3e4:	4650      	mov	r0, sl
 800e3e6:	4659      	mov	r1, fp
 800e3e8:	f7f1 ff78 	bl	80002dc <__adddf3>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4640      	mov	r0, r8
 800e3f2:	4649      	mov	r1, r9
 800e3f4:	f7f2 fbb8 	bl	8000b68 <__aeabi_dcmpgt>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d173      	bne.n	800e4e4 <_dtoa_r+0x6c4>
 800e3fc:	4652      	mov	r2, sl
 800e3fe:	465b      	mov	r3, fp
 800e400:	4913      	ldr	r1, [pc, #76]	; (800e450 <_dtoa_r+0x630>)
 800e402:	2000      	movs	r0, #0
 800e404:	f7f1 ff68 	bl	80002d8 <__aeabi_dsub>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f2 fb8c 	bl	8000b2c <__aeabi_dcmplt>
 800e414:	2800      	cmp	r0, #0
 800e416:	f43f af35 	beq.w	800e284 <_dtoa_r+0x464>
 800e41a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e41c:	1e6b      	subs	r3, r5, #1
 800e41e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e420:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e424:	2b30      	cmp	r3, #48	; 0x30
 800e426:	d0f8      	beq.n	800e41a <_dtoa_r+0x5fa>
 800e428:	9700      	str	r7, [sp, #0]
 800e42a:	e049      	b.n	800e4c0 <_dtoa_r+0x6a0>
 800e42c:	4b05      	ldr	r3, [pc, #20]	; (800e444 <_dtoa_r+0x624>)
 800e42e:	f7f2 f90b 	bl	8000648 <__aeabi_dmul>
 800e432:	4680      	mov	r8, r0
 800e434:	4689      	mov	r9, r1
 800e436:	e7bd      	b.n	800e3b4 <_dtoa_r+0x594>
 800e438:	08010088 	.word	0x08010088
 800e43c:	08010060 	.word	0x08010060
 800e440:	3ff00000 	.word	0x3ff00000
 800e444:	40240000 	.word	0x40240000
 800e448:	401c0000 	.word	0x401c0000
 800e44c:	40140000 	.word	0x40140000
 800e450:	3fe00000 	.word	0x3fe00000
 800e454:	9d01      	ldr	r5, [sp, #4]
 800e456:	4656      	mov	r6, sl
 800e458:	465f      	mov	r7, fp
 800e45a:	4642      	mov	r2, r8
 800e45c:	464b      	mov	r3, r9
 800e45e:	4630      	mov	r0, r6
 800e460:	4639      	mov	r1, r7
 800e462:	f7f2 fa1b 	bl	800089c <__aeabi_ddiv>
 800e466:	f7f2 fb9f 	bl	8000ba8 <__aeabi_d2iz>
 800e46a:	4682      	mov	sl, r0
 800e46c:	f7f2 f882 	bl	8000574 <__aeabi_i2d>
 800e470:	4642      	mov	r2, r8
 800e472:	464b      	mov	r3, r9
 800e474:	f7f2 f8e8 	bl	8000648 <__aeabi_dmul>
 800e478:	4602      	mov	r2, r0
 800e47a:	460b      	mov	r3, r1
 800e47c:	4630      	mov	r0, r6
 800e47e:	4639      	mov	r1, r7
 800e480:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e484:	f7f1 ff28 	bl	80002d8 <__aeabi_dsub>
 800e488:	f805 6b01 	strb.w	r6, [r5], #1
 800e48c:	9e01      	ldr	r6, [sp, #4]
 800e48e:	9f03      	ldr	r7, [sp, #12]
 800e490:	1bae      	subs	r6, r5, r6
 800e492:	42b7      	cmp	r7, r6
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	d135      	bne.n	800e506 <_dtoa_r+0x6e6>
 800e49a:	f7f1 ff1f 	bl	80002dc <__adddf3>
 800e49e:	4642      	mov	r2, r8
 800e4a0:	464b      	mov	r3, r9
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	460f      	mov	r7, r1
 800e4a6:	f7f2 fb5f 	bl	8000b68 <__aeabi_dcmpgt>
 800e4aa:	b9d0      	cbnz	r0, 800e4e2 <_dtoa_r+0x6c2>
 800e4ac:	4642      	mov	r2, r8
 800e4ae:	464b      	mov	r3, r9
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	4639      	mov	r1, r7
 800e4b4:	f7f2 fb30 	bl	8000b18 <__aeabi_dcmpeq>
 800e4b8:	b110      	cbz	r0, 800e4c0 <_dtoa_r+0x6a0>
 800e4ba:	f01a 0f01 	tst.w	sl, #1
 800e4be:	d110      	bne.n	800e4e2 <_dtoa_r+0x6c2>
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	ee18 1a10 	vmov	r1, s16
 800e4c6:	f000 fd13 	bl	800eef0 <_Bfree>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9800      	ldr	r0, [sp, #0]
 800e4ce:	702b      	strb	r3, [r5, #0]
 800e4d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	6018      	str	r0, [r3, #0]
 800e4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f43f acf1 	beq.w	800dec0 <_dtoa_r+0xa0>
 800e4de:	601d      	str	r5, [r3, #0]
 800e4e0:	e4ee      	b.n	800dec0 <_dtoa_r+0xa0>
 800e4e2:	9f00      	ldr	r7, [sp, #0]
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	461d      	mov	r5, r3
 800e4e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4ec:	2a39      	cmp	r2, #57	; 0x39
 800e4ee:	d106      	bne.n	800e4fe <_dtoa_r+0x6de>
 800e4f0:	9a01      	ldr	r2, [sp, #4]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d1f7      	bne.n	800e4e6 <_dtoa_r+0x6c6>
 800e4f6:	9901      	ldr	r1, [sp, #4]
 800e4f8:	2230      	movs	r2, #48	; 0x30
 800e4fa:	3701      	adds	r7, #1
 800e4fc:	700a      	strb	r2, [r1, #0]
 800e4fe:	781a      	ldrb	r2, [r3, #0]
 800e500:	3201      	adds	r2, #1
 800e502:	701a      	strb	r2, [r3, #0]
 800e504:	e790      	b.n	800e428 <_dtoa_r+0x608>
 800e506:	4ba6      	ldr	r3, [pc, #664]	; (800e7a0 <_dtoa_r+0x980>)
 800e508:	2200      	movs	r2, #0
 800e50a:	f7f2 f89d 	bl	8000648 <__aeabi_dmul>
 800e50e:	2200      	movs	r2, #0
 800e510:	2300      	movs	r3, #0
 800e512:	4606      	mov	r6, r0
 800e514:	460f      	mov	r7, r1
 800e516:	f7f2 faff 	bl	8000b18 <__aeabi_dcmpeq>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d09d      	beq.n	800e45a <_dtoa_r+0x63a>
 800e51e:	e7cf      	b.n	800e4c0 <_dtoa_r+0x6a0>
 800e520:	9a08      	ldr	r2, [sp, #32]
 800e522:	2a00      	cmp	r2, #0
 800e524:	f000 80d7 	beq.w	800e6d6 <_dtoa_r+0x8b6>
 800e528:	9a06      	ldr	r2, [sp, #24]
 800e52a:	2a01      	cmp	r2, #1
 800e52c:	f300 80ba 	bgt.w	800e6a4 <_dtoa_r+0x884>
 800e530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e532:	2a00      	cmp	r2, #0
 800e534:	f000 80b2 	beq.w	800e69c <_dtoa_r+0x87c>
 800e538:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e53c:	9e07      	ldr	r6, [sp, #28]
 800e53e:	9d04      	ldr	r5, [sp, #16]
 800e540:	9a04      	ldr	r2, [sp, #16]
 800e542:	441a      	add	r2, r3
 800e544:	9204      	str	r2, [sp, #16]
 800e546:	9a05      	ldr	r2, [sp, #20]
 800e548:	2101      	movs	r1, #1
 800e54a:	441a      	add	r2, r3
 800e54c:	4620      	mov	r0, r4
 800e54e:	9205      	str	r2, [sp, #20]
 800e550:	f000 fd86 	bl	800f060 <__i2b>
 800e554:	4607      	mov	r7, r0
 800e556:	2d00      	cmp	r5, #0
 800e558:	dd0c      	ble.n	800e574 <_dtoa_r+0x754>
 800e55a:	9b05      	ldr	r3, [sp, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	dd09      	ble.n	800e574 <_dtoa_r+0x754>
 800e560:	42ab      	cmp	r3, r5
 800e562:	9a04      	ldr	r2, [sp, #16]
 800e564:	bfa8      	it	ge
 800e566:	462b      	movge	r3, r5
 800e568:	1ad2      	subs	r2, r2, r3
 800e56a:	9204      	str	r2, [sp, #16]
 800e56c:	9a05      	ldr	r2, [sp, #20]
 800e56e:	1aed      	subs	r5, r5, r3
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	9b07      	ldr	r3, [sp, #28]
 800e576:	b31b      	cbz	r3, 800e5c0 <_dtoa_r+0x7a0>
 800e578:	9b08      	ldr	r3, [sp, #32]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f000 80af 	beq.w	800e6de <_dtoa_r+0x8be>
 800e580:	2e00      	cmp	r6, #0
 800e582:	dd13      	ble.n	800e5ac <_dtoa_r+0x78c>
 800e584:	4639      	mov	r1, r7
 800e586:	4632      	mov	r2, r6
 800e588:	4620      	mov	r0, r4
 800e58a:	f000 fe29 	bl	800f1e0 <__pow5mult>
 800e58e:	ee18 2a10 	vmov	r2, s16
 800e592:	4601      	mov	r1, r0
 800e594:	4607      	mov	r7, r0
 800e596:	4620      	mov	r0, r4
 800e598:	f000 fd78 	bl	800f08c <__multiply>
 800e59c:	ee18 1a10 	vmov	r1, s16
 800e5a0:	4680      	mov	r8, r0
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f000 fca4 	bl	800eef0 <_Bfree>
 800e5a8:	ee08 8a10 	vmov	s16, r8
 800e5ac:	9b07      	ldr	r3, [sp, #28]
 800e5ae:	1b9a      	subs	r2, r3, r6
 800e5b0:	d006      	beq.n	800e5c0 <_dtoa_r+0x7a0>
 800e5b2:	ee18 1a10 	vmov	r1, s16
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f000 fe12 	bl	800f1e0 <__pow5mult>
 800e5bc:	ee08 0a10 	vmov	s16, r0
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f000 fd4c 	bl	800f060 <__i2b>
 800e5c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	f340 8088 	ble.w	800e6e2 <_dtoa_r+0x8c2>
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	4601      	mov	r1, r0
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f000 fe02 	bl	800f1e0 <__pow5mult>
 800e5dc:	9b06      	ldr	r3, [sp, #24]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	4606      	mov	r6, r0
 800e5e2:	f340 8081 	ble.w	800e6e8 <_dtoa_r+0x8c8>
 800e5e6:	f04f 0800 	mov.w	r8, #0
 800e5ea:	6933      	ldr	r3, [r6, #16]
 800e5ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e5f0:	6918      	ldr	r0, [r3, #16]
 800e5f2:	f000 fce5 	bl	800efc0 <__hi0bits>
 800e5f6:	f1c0 0020 	rsb	r0, r0, #32
 800e5fa:	9b05      	ldr	r3, [sp, #20]
 800e5fc:	4418      	add	r0, r3
 800e5fe:	f010 001f 	ands.w	r0, r0, #31
 800e602:	f000 8092 	beq.w	800e72a <_dtoa_r+0x90a>
 800e606:	f1c0 0320 	rsb	r3, r0, #32
 800e60a:	2b04      	cmp	r3, #4
 800e60c:	f340 808a 	ble.w	800e724 <_dtoa_r+0x904>
 800e610:	f1c0 001c 	rsb	r0, r0, #28
 800e614:	9b04      	ldr	r3, [sp, #16]
 800e616:	4403      	add	r3, r0
 800e618:	9304      	str	r3, [sp, #16]
 800e61a:	9b05      	ldr	r3, [sp, #20]
 800e61c:	4403      	add	r3, r0
 800e61e:	4405      	add	r5, r0
 800e620:	9305      	str	r3, [sp, #20]
 800e622:	9b04      	ldr	r3, [sp, #16]
 800e624:	2b00      	cmp	r3, #0
 800e626:	dd07      	ble.n	800e638 <_dtoa_r+0x818>
 800e628:	ee18 1a10 	vmov	r1, s16
 800e62c:	461a      	mov	r2, r3
 800e62e:	4620      	mov	r0, r4
 800e630:	f000 fe30 	bl	800f294 <__lshift>
 800e634:	ee08 0a10 	vmov	s16, r0
 800e638:	9b05      	ldr	r3, [sp, #20]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	dd05      	ble.n	800e64a <_dtoa_r+0x82a>
 800e63e:	4631      	mov	r1, r6
 800e640:	461a      	mov	r2, r3
 800e642:	4620      	mov	r0, r4
 800e644:	f000 fe26 	bl	800f294 <__lshift>
 800e648:	4606      	mov	r6, r0
 800e64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d06e      	beq.n	800e72e <_dtoa_r+0x90e>
 800e650:	ee18 0a10 	vmov	r0, s16
 800e654:	4631      	mov	r1, r6
 800e656:	f000 fe8d 	bl	800f374 <__mcmp>
 800e65a:	2800      	cmp	r0, #0
 800e65c:	da67      	bge.n	800e72e <_dtoa_r+0x90e>
 800e65e:	9b00      	ldr	r3, [sp, #0]
 800e660:	3b01      	subs	r3, #1
 800e662:	ee18 1a10 	vmov	r1, s16
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	220a      	movs	r2, #10
 800e66a:	2300      	movs	r3, #0
 800e66c:	4620      	mov	r0, r4
 800e66e:	f000 fc61 	bl	800ef34 <__multadd>
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	ee08 0a10 	vmov	s16, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 81b1 	beq.w	800e9e0 <_dtoa_r+0xbc0>
 800e67e:	2300      	movs	r3, #0
 800e680:	4639      	mov	r1, r7
 800e682:	220a      	movs	r2, #10
 800e684:	4620      	mov	r0, r4
 800e686:	f000 fc55 	bl	800ef34 <__multadd>
 800e68a:	9b02      	ldr	r3, [sp, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	4607      	mov	r7, r0
 800e690:	f300 808e 	bgt.w	800e7b0 <_dtoa_r+0x990>
 800e694:	9b06      	ldr	r3, [sp, #24]
 800e696:	2b02      	cmp	r3, #2
 800e698:	dc51      	bgt.n	800e73e <_dtoa_r+0x91e>
 800e69a:	e089      	b.n	800e7b0 <_dtoa_r+0x990>
 800e69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e69e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e6a2:	e74b      	b.n	800e53c <_dtoa_r+0x71c>
 800e6a4:	9b03      	ldr	r3, [sp, #12]
 800e6a6:	1e5e      	subs	r6, r3, #1
 800e6a8:	9b07      	ldr	r3, [sp, #28]
 800e6aa:	42b3      	cmp	r3, r6
 800e6ac:	bfbf      	itttt	lt
 800e6ae:	9b07      	ldrlt	r3, [sp, #28]
 800e6b0:	9607      	strlt	r6, [sp, #28]
 800e6b2:	1af2      	sublt	r2, r6, r3
 800e6b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e6b6:	bfb6      	itet	lt
 800e6b8:	189b      	addlt	r3, r3, r2
 800e6ba:	1b9e      	subge	r6, r3, r6
 800e6bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e6be:	9b03      	ldr	r3, [sp, #12]
 800e6c0:	bfb8      	it	lt
 800e6c2:	2600      	movlt	r6, #0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	bfb7      	itett	lt
 800e6c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e6cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e6d0:	1a9d      	sublt	r5, r3, r2
 800e6d2:	2300      	movlt	r3, #0
 800e6d4:	e734      	b.n	800e540 <_dtoa_r+0x720>
 800e6d6:	9e07      	ldr	r6, [sp, #28]
 800e6d8:	9d04      	ldr	r5, [sp, #16]
 800e6da:	9f08      	ldr	r7, [sp, #32]
 800e6dc:	e73b      	b.n	800e556 <_dtoa_r+0x736>
 800e6de:	9a07      	ldr	r2, [sp, #28]
 800e6e0:	e767      	b.n	800e5b2 <_dtoa_r+0x792>
 800e6e2:	9b06      	ldr	r3, [sp, #24]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	dc18      	bgt.n	800e71a <_dtoa_r+0x8fa>
 800e6e8:	f1ba 0f00 	cmp.w	sl, #0
 800e6ec:	d115      	bne.n	800e71a <_dtoa_r+0x8fa>
 800e6ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6f2:	b993      	cbnz	r3, 800e71a <_dtoa_r+0x8fa>
 800e6f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6f8:	0d1b      	lsrs	r3, r3, #20
 800e6fa:	051b      	lsls	r3, r3, #20
 800e6fc:	b183      	cbz	r3, 800e720 <_dtoa_r+0x900>
 800e6fe:	9b04      	ldr	r3, [sp, #16]
 800e700:	3301      	adds	r3, #1
 800e702:	9304      	str	r3, [sp, #16]
 800e704:	9b05      	ldr	r3, [sp, #20]
 800e706:	3301      	adds	r3, #1
 800e708:	9305      	str	r3, [sp, #20]
 800e70a:	f04f 0801 	mov.w	r8, #1
 800e70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e710:	2b00      	cmp	r3, #0
 800e712:	f47f af6a 	bne.w	800e5ea <_dtoa_r+0x7ca>
 800e716:	2001      	movs	r0, #1
 800e718:	e76f      	b.n	800e5fa <_dtoa_r+0x7da>
 800e71a:	f04f 0800 	mov.w	r8, #0
 800e71e:	e7f6      	b.n	800e70e <_dtoa_r+0x8ee>
 800e720:	4698      	mov	r8, r3
 800e722:	e7f4      	b.n	800e70e <_dtoa_r+0x8ee>
 800e724:	f43f af7d 	beq.w	800e622 <_dtoa_r+0x802>
 800e728:	4618      	mov	r0, r3
 800e72a:	301c      	adds	r0, #28
 800e72c:	e772      	b.n	800e614 <_dtoa_r+0x7f4>
 800e72e:	9b03      	ldr	r3, [sp, #12]
 800e730:	2b00      	cmp	r3, #0
 800e732:	dc37      	bgt.n	800e7a4 <_dtoa_r+0x984>
 800e734:	9b06      	ldr	r3, [sp, #24]
 800e736:	2b02      	cmp	r3, #2
 800e738:	dd34      	ble.n	800e7a4 <_dtoa_r+0x984>
 800e73a:	9b03      	ldr	r3, [sp, #12]
 800e73c:	9302      	str	r3, [sp, #8]
 800e73e:	9b02      	ldr	r3, [sp, #8]
 800e740:	b96b      	cbnz	r3, 800e75e <_dtoa_r+0x93e>
 800e742:	4631      	mov	r1, r6
 800e744:	2205      	movs	r2, #5
 800e746:	4620      	mov	r0, r4
 800e748:	f000 fbf4 	bl	800ef34 <__multadd>
 800e74c:	4601      	mov	r1, r0
 800e74e:	4606      	mov	r6, r0
 800e750:	ee18 0a10 	vmov	r0, s16
 800e754:	f000 fe0e 	bl	800f374 <__mcmp>
 800e758:	2800      	cmp	r0, #0
 800e75a:	f73f adbb 	bgt.w	800e2d4 <_dtoa_r+0x4b4>
 800e75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e760:	9d01      	ldr	r5, [sp, #4]
 800e762:	43db      	mvns	r3, r3
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	f04f 0800 	mov.w	r8, #0
 800e76a:	4631      	mov	r1, r6
 800e76c:	4620      	mov	r0, r4
 800e76e:	f000 fbbf 	bl	800eef0 <_Bfree>
 800e772:	2f00      	cmp	r7, #0
 800e774:	f43f aea4 	beq.w	800e4c0 <_dtoa_r+0x6a0>
 800e778:	f1b8 0f00 	cmp.w	r8, #0
 800e77c:	d005      	beq.n	800e78a <_dtoa_r+0x96a>
 800e77e:	45b8      	cmp	r8, r7
 800e780:	d003      	beq.n	800e78a <_dtoa_r+0x96a>
 800e782:	4641      	mov	r1, r8
 800e784:	4620      	mov	r0, r4
 800e786:	f000 fbb3 	bl	800eef0 <_Bfree>
 800e78a:	4639      	mov	r1, r7
 800e78c:	4620      	mov	r0, r4
 800e78e:	f000 fbaf 	bl	800eef0 <_Bfree>
 800e792:	e695      	b.n	800e4c0 <_dtoa_r+0x6a0>
 800e794:	2600      	movs	r6, #0
 800e796:	4637      	mov	r7, r6
 800e798:	e7e1      	b.n	800e75e <_dtoa_r+0x93e>
 800e79a:	9700      	str	r7, [sp, #0]
 800e79c:	4637      	mov	r7, r6
 800e79e:	e599      	b.n	800e2d4 <_dtoa_r+0x4b4>
 800e7a0:	40240000 	.word	0x40240000
 800e7a4:	9b08      	ldr	r3, [sp, #32]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	f000 80ca 	beq.w	800e940 <_dtoa_r+0xb20>
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	9302      	str	r3, [sp, #8]
 800e7b0:	2d00      	cmp	r5, #0
 800e7b2:	dd05      	ble.n	800e7c0 <_dtoa_r+0x9a0>
 800e7b4:	4639      	mov	r1, r7
 800e7b6:	462a      	mov	r2, r5
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	f000 fd6b 	bl	800f294 <__lshift>
 800e7be:	4607      	mov	r7, r0
 800e7c0:	f1b8 0f00 	cmp.w	r8, #0
 800e7c4:	d05b      	beq.n	800e87e <_dtoa_r+0xa5e>
 800e7c6:	6879      	ldr	r1, [r7, #4]
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	f000 fb51 	bl	800ee70 <_Balloc>
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	b928      	cbnz	r0, 800e7de <_dtoa_r+0x9be>
 800e7d2:	4b87      	ldr	r3, [pc, #540]	; (800e9f0 <_dtoa_r+0xbd0>)
 800e7d4:	4602      	mov	r2, r0
 800e7d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e7da:	f7ff bb3b 	b.w	800de54 <_dtoa_r+0x34>
 800e7de:	693a      	ldr	r2, [r7, #16]
 800e7e0:	3202      	adds	r2, #2
 800e7e2:	0092      	lsls	r2, r2, #2
 800e7e4:	f107 010c 	add.w	r1, r7, #12
 800e7e8:	300c      	adds	r0, #12
 800e7ea:	f000 fb33 	bl	800ee54 <memcpy>
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	4629      	mov	r1, r5
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f000 fd4e 	bl	800f294 <__lshift>
 800e7f8:	9b01      	ldr	r3, [sp, #4]
 800e7fa:	f103 0901 	add.w	r9, r3, #1
 800e7fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e802:	4413      	add	r3, r2
 800e804:	9305      	str	r3, [sp, #20]
 800e806:	f00a 0301 	and.w	r3, sl, #1
 800e80a:	46b8      	mov	r8, r7
 800e80c:	9304      	str	r3, [sp, #16]
 800e80e:	4607      	mov	r7, r0
 800e810:	4631      	mov	r1, r6
 800e812:	ee18 0a10 	vmov	r0, s16
 800e816:	f7ff fa75 	bl	800dd04 <quorem>
 800e81a:	4641      	mov	r1, r8
 800e81c:	9002      	str	r0, [sp, #8]
 800e81e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e822:	ee18 0a10 	vmov	r0, s16
 800e826:	f000 fda5 	bl	800f374 <__mcmp>
 800e82a:	463a      	mov	r2, r7
 800e82c:	9003      	str	r0, [sp, #12]
 800e82e:	4631      	mov	r1, r6
 800e830:	4620      	mov	r0, r4
 800e832:	f000 fdbb 	bl	800f3ac <__mdiff>
 800e836:	68c2      	ldr	r2, [r0, #12]
 800e838:	f109 3bff 	add.w	fp, r9, #4294967295
 800e83c:	4605      	mov	r5, r0
 800e83e:	bb02      	cbnz	r2, 800e882 <_dtoa_r+0xa62>
 800e840:	4601      	mov	r1, r0
 800e842:	ee18 0a10 	vmov	r0, s16
 800e846:	f000 fd95 	bl	800f374 <__mcmp>
 800e84a:	4602      	mov	r2, r0
 800e84c:	4629      	mov	r1, r5
 800e84e:	4620      	mov	r0, r4
 800e850:	9207      	str	r2, [sp, #28]
 800e852:	f000 fb4d 	bl	800eef0 <_Bfree>
 800e856:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e85a:	ea43 0102 	orr.w	r1, r3, r2
 800e85e:	9b04      	ldr	r3, [sp, #16]
 800e860:	430b      	orrs	r3, r1
 800e862:	464d      	mov	r5, r9
 800e864:	d10f      	bne.n	800e886 <_dtoa_r+0xa66>
 800e866:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e86a:	d02a      	beq.n	800e8c2 <_dtoa_r+0xaa2>
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	dd02      	ble.n	800e878 <_dtoa_r+0xa58>
 800e872:	9b02      	ldr	r3, [sp, #8]
 800e874:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e878:	f88b a000 	strb.w	sl, [fp]
 800e87c:	e775      	b.n	800e76a <_dtoa_r+0x94a>
 800e87e:	4638      	mov	r0, r7
 800e880:	e7ba      	b.n	800e7f8 <_dtoa_r+0x9d8>
 800e882:	2201      	movs	r2, #1
 800e884:	e7e2      	b.n	800e84c <_dtoa_r+0xa2c>
 800e886:	9b03      	ldr	r3, [sp, #12]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	db04      	blt.n	800e896 <_dtoa_r+0xa76>
 800e88c:	9906      	ldr	r1, [sp, #24]
 800e88e:	430b      	orrs	r3, r1
 800e890:	9904      	ldr	r1, [sp, #16]
 800e892:	430b      	orrs	r3, r1
 800e894:	d122      	bne.n	800e8dc <_dtoa_r+0xabc>
 800e896:	2a00      	cmp	r2, #0
 800e898:	ddee      	ble.n	800e878 <_dtoa_r+0xa58>
 800e89a:	ee18 1a10 	vmov	r1, s16
 800e89e:	2201      	movs	r2, #1
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f000 fcf7 	bl	800f294 <__lshift>
 800e8a6:	4631      	mov	r1, r6
 800e8a8:	ee08 0a10 	vmov	s16, r0
 800e8ac:	f000 fd62 	bl	800f374 <__mcmp>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	dc03      	bgt.n	800e8bc <_dtoa_r+0xa9c>
 800e8b4:	d1e0      	bne.n	800e878 <_dtoa_r+0xa58>
 800e8b6:	f01a 0f01 	tst.w	sl, #1
 800e8ba:	d0dd      	beq.n	800e878 <_dtoa_r+0xa58>
 800e8bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e8c0:	d1d7      	bne.n	800e872 <_dtoa_r+0xa52>
 800e8c2:	2339      	movs	r3, #57	; 0x39
 800e8c4:	f88b 3000 	strb.w	r3, [fp]
 800e8c8:	462b      	mov	r3, r5
 800e8ca:	461d      	mov	r5, r3
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e8d2:	2a39      	cmp	r2, #57	; 0x39
 800e8d4:	d071      	beq.n	800e9ba <_dtoa_r+0xb9a>
 800e8d6:	3201      	adds	r2, #1
 800e8d8:	701a      	strb	r2, [r3, #0]
 800e8da:	e746      	b.n	800e76a <_dtoa_r+0x94a>
 800e8dc:	2a00      	cmp	r2, #0
 800e8de:	dd07      	ble.n	800e8f0 <_dtoa_r+0xad0>
 800e8e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e8e4:	d0ed      	beq.n	800e8c2 <_dtoa_r+0xaa2>
 800e8e6:	f10a 0301 	add.w	r3, sl, #1
 800e8ea:	f88b 3000 	strb.w	r3, [fp]
 800e8ee:	e73c      	b.n	800e76a <_dtoa_r+0x94a>
 800e8f0:	9b05      	ldr	r3, [sp, #20]
 800e8f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e8f6:	4599      	cmp	r9, r3
 800e8f8:	d047      	beq.n	800e98a <_dtoa_r+0xb6a>
 800e8fa:	ee18 1a10 	vmov	r1, s16
 800e8fe:	2300      	movs	r3, #0
 800e900:	220a      	movs	r2, #10
 800e902:	4620      	mov	r0, r4
 800e904:	f000 fb16 	bl	800ef34 <__multadd>
 800e908:	45b8      	cmp	r8, r7
 800e90a:	ee08 0a10 	vmov	s16, r0
 800e90e:	f04f 0300 	mov.w	r3, #0
 800e912:	f04f 020a 	mov.w	r2, #10
 800e916:	4641      	mov	r1, r8
 800e918:	4620      	mov	r0, r4
 800e91a:	d106      	bne.n	800e92a <_dtoa_r+0xb0a>
 800e91c:	f000 fb0a 	bl	800ef34 <__multadd>
 800e920:	4680      	mov	r8, r0
 800e922:	4607      	mov	r7, r0
 800e924:	f109 0901 	add.w	r9, r9, #1
 800e928:	e772      	b.n	800e810 <_dtoa_r+0x9f0>
 800e92a:	f000 fb03 	bl	800ef34 <__multadd>
 800e92e:	4639      	mov	r1, r7
 800e930:	4680      	mov	r8, r0
 800e932:	2300      	movs	r3, #0
 800e934:	220a      	movs	r2, #10
 800e936:	4620      	mov	r0, r4
 800e938:	f000 fafc 	bl	800ef34 <__multadd>
 800e93c:	4607      	mov	r7, r0
 800e93e:	e7f1      	b.n	800e924 <_dtoa_r+0xb04>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	9302      	str	r3, [sp, #8]
 800e944:	9d01      	ldr	r5, [sp, #4]
 800e946:	ee18 0a10 	vmov	r0, s16
 800e94a:	4631      	mov	r1, r6
 800e94c:	f7ff f9da 	bl	800dd04 <quorem>
 800e950:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e954:	9b01      	ldr	r3, [sp, #4]
 800e956:	f805 ab01 	strb.w	sl, [r5], #1
 800e95a:	1aea      	subs	r2, r5, r3
 800e95c:	9b02      	ldr	r3, [sp, #8]
 800e95e:	4293      	cmp	r3, r2
 800e960:	dd09      	ble.n	800e976 <_dtoa_r+0xb56>
 800e962:	ee18 1a10 	vmov	r1, s16
 800e966:	2300      	movs	r3, #0
 800e968:	220a      	movs	r2, #10
 800e96a:	4620      	mov	r0, r4
 800e96c:	f000 fae2 	bl	800ef34 <__multadd>
 800e970:	ee08 0a10 	vmov	s16, r0
 800e974:	e7e7      	b.n	800e946 <_dtoa_r+0xb26>
 800e976:	9b02      	ldr	r3, [sp, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	bfc8      	it	gt
 800e97c:	461d      	movgt	r5, r3
 800e97e:	9b01      	ldr	r3, [sp, #4]
 800e980:	bfd8      	it	le
 800e982:	2501      	movle	r5, #1
 800e984:	441d      	add	r5, r3
 800e986:	f04f 0800 	mov.w	r8, #0
 800e98a:	ee18 1a10 	vmov	r1, s16
 800e98e:	2201      	movs	r2, #1
 800e990:	4620      	mov	r0, r4
 800e992:	f000 fc7f 	bl	800f294 <__lshift>
 800e996:	4631      	mov	r1, r6
 800e998:	ee08 0a10 	vmov	s16, r0
 800e99c:	f000 fcea 	bl	800f374 <__mcmp>
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	dc91      	bgt.n	800e8c8 <_dtoa_r+0xaa8>
 800e9a4:	d102      	bne.n	800e9ac <_dtoa_r+0xb8c>
 800e9a6:	f01a 0f01 	tst.w	sl, #1
 800e9aa:	d18d      	bne.n	800e8c8 <_dtoa_r+0xaa8>
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	461d      	mov	r5, r3
 800e9b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9b4:	2a30      	cmp	r2, #48	; 0x30
 800e9b6:	d0fa      	beq.n	800e9ae <_dtoa_r+0xb8e>
 800e9b8:	e6d7      	b.n	800e76a <_dtoa_r+0x94a>
 800e9ba:	9a01      	ldr	r2, [sp, #4]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d184      	bne.n	800e8ca <_dtoa_r+0xaaa>
 800e9c0:	9b00      	ldr	r3, [sp, #0]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	9300      	str	r3, [sp, #0]
 800e9c6:	2331      	movs	r3, #49	; 0x31
 800e9c8:	7013      	strb	r3, [r2, #0]
 800e9ca:	e6ce      	b.n	800e76a <_dtoa_r+0x94a>
 800e9cc:	4b09      	ldr	r3, [pc, #36]	; (800e9f4 <_dtoa_r+0xbd4>)
 800e9ce:	f7ff ba95 	b.w	800defc <_dtoa_r+0xdc>
 800e9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f47f aa6e 	bne.w	800deb6 <_dtoa_r+0x96>
 800e9da:	4b07      	ldr	r3, [pc, #28]	; (800e9f8 <_dtoa_r+0xbd8>)
 800e9dc:	f7ff ba8e 	b.w	800defc <_dtoa_r+0xdc>
 800e9e0:	9b02      	ldr	r3, [sp, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dcae      	bgt.n	800e944 <_dtoa_r+0xb24>
 800e9e6:	9b06      	ldr	r3, [sp, #24]
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	f73f aea8 	bgt.w	800e73e <_dtoa_r+0x91e>
 800e9ee:	e7a9      	b.n	800e944 <_dtoa_r+0xb24>
 800e9f0:	0800ff93 	.word	0x0800ff93
 800e9f4:	0800fef0 	.word	0x0800fef0
 800e9f8:	0800ff14 	.word	0x0800ff14

0800e9fc <__sflush_r>:
 800e9fc:	898a      	ldrh	r2, [r1, #12]
 800e9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea02:	4605      	mov	r5, r0
 800ea04:	0710      	lsls	r0, r2, #28
 800ea06:	460c      	mov	r4, r1
 800ea08:	d458      	bmi.n	800eabc <__sflush_r+0xc0>
 800ea0a:	684b      	ldr	r3, [r1, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	dc05      	bgt.n	800ea1c <__sflush_r+0x20>
 800ea10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	dc02      	bgt.n	800ea1c <__sflush_r+0x20>
 800ea16:	2000      	movs	r0, #0
 800ea18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea1e:	2e00      	cmp	r6, #0
 800ea20:	d0f9      	beq.n	800ea16 <__sflush_r+0x1a>
 800ea22:	2300      	movs	r3, #0
 800ea24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea28:	682f      	ldr	r7, [r5, #0]
 800ea2a:	602b      	str	r3, [r5, #0]
 800ea2c:	d032      	beq.n	800ea94 <__sflush_r+0x98>
 800ea2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea30:	89a3      	ldrh	r3, [r4, #12]
 800ea32:	075a      	lsls	r2, r3, #29
 800ea34:	d505      	bpl.n	800ea42 <__sflush_r+0x46>
 800ea36:	6863      	ldr	r3, [r4, #4]
 800ea38:	1ac0      	subs	r0, r0, r3
 800ea3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea3c:	b10b      	cbz	r3, 800ea42 <__sflush_r+0x46>
 800ea3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea40:	1ac0      	subs	r0, r0, r3
 800ea42:	2300      	movs	r3, #0
 800ea44:	4602      	mov	r2, r0
 800ea46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea48:	6a21      	ldr	r1, [r4, #32]
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b0      	blx	r6
 800ea4e:	1c43      	adds	r3, r0, #1
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	d106      	bne.n	800ea62 <__sflush_r+0x66>
 800ea54:	6829      	ldr	r1, [r5, #0]
 800ea56:	291d      	cmp	r1, #29
 800ea58:	d82c      	bhi.n	800eab4 <__sflush_r+0xb8>
 800ea5a:	4a2a      	ldr	r2, [pc, #168]	; (800eb04 <__sflush_r+0x108>)
 800ea5c:	40ca      	lsrs	r2, r1
 800ea5e:	07d6      	lsls	r6, r2, #31
 800ea60:	d528      	bpl.n	800eab4 <__sflush_r+0xb8>
 800ea62:	2200      	movs	r2, #0
 800ea64:	6062      	str	r2, [r4, #4]
 800ea66:	04d9      	lsls	r1, r3, #19
 800ea68:	6922      	ldr	r2, [r4, #16]
 800ea6a:	6022      	str	r2, [r4, #0]
 800ea6c:	d504      	bpl.n	800ea78 <__sflush_r+0x7c>
 800ea6e:	1c42      	adds	r2, r0, #1
 800ea70:	d101      	bne.n	800ea76 <__sflush_r+0x7a>
 800ea72:	682b      	ldr	r3, [r5, #0]
 800ea74:	b903      	cbnz	r3, 800ea78 <__sflush_r+0x7c>
 800ea76:	6560      	str	r0, [r4, #84]	; 0x54
 800ea78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea7a:	602f      	str	r7, [r5, #0]
 800ea7c:	2900      	cmp	r1, #0
 800ea7e:	d0ca      	beq.n	800ea16 <__sflush_r+0x1a>
 800ea80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea84:	4299      	cmp	r1, r3
 800ea86:	d002      	beq.n	800ea8e <__sflush_r+0x92>
 800ea88:	4628      	mov	r0, r5
 800ea8a:	f000 fd8b 	bl	800f5a4 <_free_r>
 800ea8e:	2000      	movs	r0, #0
 800ea90:	6360      	str	r0, [r4, #52]	; 0x34
 800ea92:	e7c1      	b.n	800ea18 <__sflush_r+0x1c>
 800ea94:	6a21      	ldr	r1, [r4, #32]
 800ea96:	2301      	movs	r3, #1
 800ea98:	4628      	mov	r0, r5
 800ea9a:	47b0      	blx	r6
 800ea9c:	1c41      	adds	r1, r0, #1
 800ea9e:	d1c7      	bne.n	800ea30 <__sflush_r+0x34>
 800eaa0:	682b      	ldr	r3, [r5, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0c4      	beq.n	800ea30 <__sflush_r+0x34>
 800eaa6:	2b1d      	cmp	r3, #29
 800eaa8:	d001      	beq.n	800eaae <__sflush_r+0xb2>
 800eaaa:	2b16      	cmp	r3, #22
 800eaac:	d101      	bne.n	800eab2 <__sflush_r+0xb6>
 800eaae:	602f      	str	r7, [r5, #0]
 800eab0:	e7b1      	b.n	800ea16 <__sflush_r+0x1a>
 800eab2:	89a3      	ldrh	r3, [r4, #12]
 800eab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eab8:	81a3      	strh	r3, [r4, #12]
 800eaba:	e7ad      	b.n	800ea18 <__sflush_r+0x1c>
 800eabc:	690f      	ldr	r7, [r1, #16]
 800eabe:	2f00      	cmp	r7, #0
 800eac0:	d0a9      	beq.n	800ea16 <__sflush_r+0x1a>
 800eac2:	0793      	lsls	r3, r2, #30
 800eac4:	680e      	ldr	r6, [r1, #0]
 800eac6:	bf08      	it	eq
 800eac8:	694b      	ldreq	r3, [r1, #20]
 800eaca:	600f      	str	r7, [r1, #0]
 800eacc:	bf18      	it	ne
 800eace:	2300      	movne	r3, #0
 800ead0:	eba6 0807 	sub.w	r8, r6, r7
 800ead4:	608b      	str	r3, [r1, #8]
 800ead6:	f1b8 0f00 	cmp.w	r8, #0
 800eada:	dd9c      	ble.n	800ea16 <__sflush_r+0x1a>
 800eadc:	6a21      	ldr	r1, [r4, #32]
 800eade:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eae0:	4643      	mov	r3, r8
 800eae2:	463a      	mov	r2, r7
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b0      	blx	r6
 800eae8:	2800      	cmp	r0, #0
 800eaea:	dc06      	bgt.n	800eafa <__sflush_r+0xfe>
 800eaec:	89a3      	ldrh	r3, [r4, #12]
 800eaee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaf2:	81a3      	strh	r3, [r4, #12]
 800eaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf8:	e78e      	b.n	800ea18 <__sflush_r+0x1c>
 800eafa:	4407      	add	r7, r0
 800eafc:	eba8 0800 	sub.w	r8, r8, r0
 800eb00:	e7e9      	b.n	800ead6 <__sflush_r+0xda>
 800eb02:	bf00      	nop
 800eb04:	20400001 	.word	0x20400001

0800eb08 <_fflush_r>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	690b      	ldr	r3, [r1, #16]
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	460c      	mov	r4, r1
 800eb10:	b913      	cbnz	r3, 800eb18 <_fflush_r+0x10>
 800eb12:	2500      	movs	r5, #0
 800eb14:	4628      	mov	r0, r5
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	b118      	cbz	r0, 800eb22 <_fflush_r+0x1a>
 800eb1a:	6983      	ldr	r3, [r0, #24]
 800eb1c:	b90b      	cbnz	r3, 800eb22 <_fflush_r+0x1a>
 800eb1e:	f000 f887 	bl	800ec30 <__sinit>
 800eb22:	4b14      	ldr	r3, [pc, #80]	; (800eb74 <_fflush_r+0x6c>)
 800eb24:	429c      	cmp	r4, r3
 800eb26:	d11b      	bne.n	800eb60 <_fflush_r+0x58>
 800eb28:	686c      	ldr	r4, [r5, #4]
 800eb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d0ef      	beq.n	800eb12 <_fflush_r+0xa>
 800eb32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb34:	07d0      	lsls	r0, r2, #31
 800eb36:	d404      	bmi.n	800eb42 <_fflush_r+0x3a>
 800eb38:	0599      	lsls	r1, r3, #22
 800eb3a:	d402      	bmi.n	800eb42 <_fflush_r+0x3a>
 800eb3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb3e:	f000 f91a 	bl	800ed76 <__retarget_lock_acquire_recursive>
 800eb42:	4628      	mov	r0, r5
 800eb44:	4621      	mov	r1, r4
 800eb46:	f7ff ff59 	bl	800e9fc <__sflush_r>
 800eb4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb4c:	07da      	lsls	r2, r3, #31
 800eb4e:	4605      	mov	r5, r0
 800eb50:	d4e0      	bmi.n	800eb14 <_fflush_r+0xc>
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	059b      	lsls	r3, r3, #22
 800eb56:	d4dd      	bmi.n	800eb14 <_fflush_r+0xc>
 800eb58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb5a:	f000 f90d 	bl	800ed78 <__retarget_lock_release_recursive>
 800eb5e:	e7d9      	b.n	800eb14 <_fflush_r+0xc>
 800eb60:	4b05      	ldr	r3, [pc, #20]	; (800eb78 <_fflush_r+0x70>)
 800eb62:	429c      	cmp	r4, r3
 800eb64:	d101      	bne.n	800eb6a <_fflush_r+0x62>
 800eb66:	68ac      	ldr	r4, [r5, #8]
 800eb68:	e7df      	b.n	800eb2a <_fflush_r+0x22>
 800eb6a:	4b04      	ldr	r3, [pc, #16]	; (800eb7c <_fflush_r+0x74>)
 800eb6c:	429c      	cmp	r4, r3
 800eb6e:	bf08      	it	eq
 800eb70:	68ec      	ldreq	r4, [r5, #12]
 800eb72:	e7da      	b.n	800eb2a <_fflush_r+0x22>
 800eb74:	0800ffc4 	.word	0x0800ffc4
 800eb78:	0800ffe4 	.word	0x0800ffe4
 800eb7c:	0800ffa4 	.word	0x0800ffa4

0800eb80 <std>:
 800eb80:	2300      	movs	r3, #0
 800eb82:	b510      	push	{r4, lr}
 800eb84:	4604      	mov	r4, r0
 800eb86:	e9c0 3300 	strd	r3, r3, [r0]
 800eb8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb8e:	6083      	str	r3, [r0, #8]
 800eb90:	8181      	strh	r1, [r0, #12]
 800eb92:	6643      	str	r3, [r0, #100]	; 0x64
 800eb94:	81c2      	strh	r2, [r0, #14]
 800eb96:	6183      	str	r3, [r0, #24]
 800eb98:	4619      	mov	r1, r3
 800eb9a:	2208      	movs	r2, #8
 800eb9c:	305c      	adds	r0, #92	; 0x5c
 800eb9e:	f7fe fa23 	bl	800cfe8 <memset>
 800eba2:	4b05      	ldr	r3, [pc, #20]	; (800ebb8 <std+0x38>)
 800eba4:	6263      	str	r3, [r4, #36]	; 0x24
 800eba6:	4b05      	ldr	r3, [pc, #20]	; (800ebbc <std+0x3c>)
 800eba8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebaa:	4b05      	ldr	r3, [pc, #20]	; (800ebc0 <std+0x40>)
 800ebac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebae:	4b05      	ldr	r3, [pc, #20]	; (800ebc4 <std+0x44>)
 800ebb0:	6224      	str	r4, [r4, #32]
 800ebb2:	6323      	str	r3, [r4, #48]	; 0x30
 800ebb4:	bd10      	pop	{r4, pc}
 800ebb6:	bf00      	nop
 800ebb8:	0800fa39 	.word	0x0800fa39
 800ebbc:	0800fa5b 	.word	0x0800fa5b
 800ebc0:	0800fa93 	.word	0x0800fa93
 800ebc4:	0800fab7 	.word	0x0800fab7

0800ebc8 <_cleanup_r>:
 800ebc8:	4901      	ldr	r1, [pc, #4]	; (800ebd0 <_cleanup_r+0x8>)
 800ebca:	f000 b8af 	b.w	800ed2c <_fwalk_reent>
 800ebce:	bf00      	nop
 800ebd0:	0800eb09 	.word	0x0800eb09

0800ebd4 <__sfmoreglue>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	2268      	movs	r2, #104	; 0x68
 800ebd8:	1e4d      	subs	r5, r1, #1
 800ebda:	4355      	muls	r5, r2
 800ebdc:	460e      	mov	r6, r1
 800ebde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ebe2:	f000 fd4b 	bl	800f67c <_malloc_r>
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	b140      	cbz	r0, 800ebfc <__sfmoreglue+0x28>
 800ebea:	2100      	movs	r1, #0
 800ebec:	e9c0 1600 	strd	r1, r6, [r0]
 800ebf0:	300c      	adds	r0, #12
 800ebf2:	60a0      	str	r0, [r4, #8]
 800ebf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ebf8:	f7fe f9f6 	bl	800cfe8 <memset>
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	bd70      	pop	{r4, r5, r6, pc}

0800ec00 <__sfp_lock_acquire>:
 800ec00:	4801      	ldr	r0, [pc, #4]	; (800ec08 <__sfp_lock_acquire+0x8>)
 800ec02:	f000 b8b8 	b.w	800ed76 <__retarget_lock_acquire_recursive>
 800ec06:	bf00      	nop
 800ec08:	20000ae1 	.word	0x20000ae1

0800ec0c <__sfp_lock_release>:
 800ec0c:	4801      	ldr	r0, [pc, #4]	; (800ec14 <__sfp_lock_release+0x8>)
 800ec0e:	f000 b8b3 	b.w	800ed78 <__retarget_lock_release_recursive>
 800ec12:	bf00      	nop
 800ec14:	20000ae1 	.word	0x20000ae1

0800ec18 <__sinit_lock_acquire>:
 800ec18:	4801      	ldr	r0, [pc, #4]	; (800ec20 <__sinit_lock_acquire+0x8>)
 800ec1a:	f000 b8ac 	b.w	800ed76 <__retarget_lock_acquire_recursive>
 800ec1e:	bf00      	nop
 800ec20:	20000ae2 	.word	0x20000ae2

0800ec24 <__sinit_lock_release>:
 800ec24:	4801      	ldr	r0, [pc, #4]	; (800ec2c <__sinit_lock_release+0x8>)
 800ec26:	f000 b8a7 	b.w	800ed78 <__retarget_lock_release_recursive>
 800ec2a:	bf00      	nop
 800ec2c:	20000ae2 	.word	0x20000ae2

0800ec30 <__sinit>:
 800ec30:	b510      	push	{r4, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	f7ff fff0 	bl	800ec18 <__sinit_lock_acquire>
 800ec38:	69a3      	ldr	r3, [r4, #24]
 800ec3a:	b11b      	cbz	r3, 800ec44 <__sinit+0x14>
 800ec3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec40:	f7ff bff0 	b.w	800ec24 <__sinit_lock_release>
 800ec44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec48:	6523      	str	r3, [r4, #80]	; 0x50
 800ec4a:	4b13      	ldr	r3, [pc, #76]	; (800ec98 <__sinit+0x68>)
 800ec4c:	4a13      	ldr	r2, [pc, #76]	; (800ec9c <__sinit+0x6c>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec52:	42a3      	cmp	r3, r4
 800ec54:	bf04      	itt	eq
 800ec56:	2301      	moveq	r3, #1
 800ec58:	61a3      	streq	r3, [r4, #24]
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f000 f820 	bl	800eca0 <__sfp>
 800ec60:	6060      	str	r0, [r4, #4]
 800ec62:	4620      	mov	r0, r4
 800ec64:	f000 f81c 	bl	800eca0 <__sfp>
 800ec68:	60a0      	str	r0, [r4, #8]
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 f818 	bl	800eca0 <__sfp>
 800ec70:	2200      	movs	r2, #0
 800ec72:	60e0      	str	r0, [r4, #12]
 800ec74:	2104      	movs	r1, #4
 800ec76:	6860      	ldr	r0, [r4, #4]
 800ec78:	f7ff ff82 	bl	800eb80 <std>
 800ec7c:	68a0      	ldr	r0, [r4, #8]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	2109      	movs	r1, #9
 800ec82:	f7ff ff7d 	bl	800eb80 <std>
 800ec86:	68e0      	ldr	r0, [r4, #12]
 800ec88:	2202      	movs	r2, #2
 800ec8a:	2112      	movs	r1, #18
 800ec8c:	f7ff ff78 	bl	800eb80 <std>
 800ec90:	2301      	movs	r3, #1
 800ec92:	61a3      	str	r3, [r4, #24]
 800ec94:	e7d2      	b.n	800ec3c <__sinit+0xc>
 800ec96:	bf00      	nop
 800ec98:	0800fedc 	.word	0x0800fedc
 800ec9c:	0800ebc9 	.word	0x0800ebc9

0800eca0 <__sfp>:
 800eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca2:	4607      	mov	r7, r0
 800eca4:	f7ff ffac 	bl	800ec00 <__sfp_lock_acquire>
 800eca8:	4b1e      	ldr	r3, [pc, #120]	; (800ed24 <__sfp+0x84>)
 800ecaa:	681e      	ldr	r6, [r3, #0]
 800ecac:	69b3      	ldr	r3, [r6, #24]
 800ecae:	b913      	cbnz	r3, 800ecb6 <__sfp+0x16>
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	f7ff ffbd 	bl	800ec30 <__sinit>
 800ecb6:	3648      	adds	r6, #72	; 0x48
 800ecb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	d503      	bpl.n	800ecc8 <__sfp+0x28>
 800ecc0:	6833      	ldr	r3, [r6, #0]
 800ecc2:	b30b      	cbz	r3, 800ed08 <__sfp+0x68>
 800ecc4:	6836      	ldr	r6, [r6, #0]
 800ecc6:	e7f7      	b.n	800ecb8 <__sfp+0x18>
 800ecc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eccc:	b9d5      	cbnz	r5, 800ed04 <__sfp+0x64>
 800ecce:	4b16      	ldr	r3, [pc, #88]	; (800ed28 <__sfp+0x88>)
 800ecd0:	60e3      	str	r3, [r4, #12]
 800ecd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ecd6:	6665      	str	r5, [r4, #100]	; 0x64
 800ecd8:	f000 f84c 	bl	800ed74 <__retarget_lock_init_recursive>
 800ecdc:	f7ff ff96 	bl	800ec0c <__sfp_lock_release>
 800ece0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ece4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ece8:	6025      	str	r5, [r4, #0]
 800ecea:	61a5      	str	r5, [r4, #24]
 800ecec:	2208      	movs	r2, #8
 800ecee:	4629      	mov	r1, r5
 800ecf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ecf4:	f7fe f978 	bl	800cfe8 <memset>
 800ecf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ecfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed00:	4620      	mov	r0, r4
 800ed02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed04:	3468      	adds	r4, #104	; 0x68
 800ed06:	e7d9      	b.n	800ecbc <__sfp+0x1c>
 800ed08:	2104      	movs	r1, #4
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	f7ff ff62 	bl	800ebd4 <__sfmoreglue>
 800ed10:	4604      	mov	r4, r0
 800ed12:	6030      	str	r0, [r6, #0]
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d1d5      	bne.n	800ecc4 <__sfp+0x24>
 800ed18:	f7ff ff78 	bl	800ec0c <__sfp_lock_release>
 800ed1c:	230c      	movs	r3, #12
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	e7ee      	b.n	800ed00 <__sfp+0x60>
 800ed22:	bf00      	nop
 800ed24:	0800fedc 	.word	0x0800fedc
 800ed28:	ffff0001 	.word	0xffff0001

0800ed2c <_fwalk_reent>:
 800ed2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed30:	4606      	mov	r6, r0
 800ed32:	4688      	mov	r8, r1
 800ed34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed38:	2700      	movs	r7, #0
 800ed3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ed42:	d505      	bpl.n	800ed50 <_fwalk_reent+0x24>
 800ed44:	6824      	ldr	r4, [r4, #0]
 800ed46:	2c00      	cmp	r4, #0
 800ed48:	d1f7      	bne.n	800ed3a <_fwalk_reent+0xe>
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed50:	89ab      	ldrh	r3, [r5, #12]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d907      	bls.n	800ed66 <_fwalk_reent+0x3a>
 800ed56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	d003      	beq.n	800ed66 <_fwalk_reent+0x3a>
 800ed5e:	4629      	mov	r1, r5
 800ed60:	4630      	mov	r0, r6
 800ed62:	47c0      	blx	r8
 800ed64:	4307      	orrs	r7, r0
 800ed66:	3568      	adds	r5, #104	; 0x68
 800ed68:	e7e9      	b.n	800ed3e <_fwalk_reent+0x12>
	...

0800ed6c <_localeconv_r>:
 800ed6c:	4800      	ldr	r0, [pc, #0]	; (800ed70 <_localeconv_r+0x4>)
 800ed6e:	4770      	bx	lr
 800ed70:	20000168 	.word	0x20000168

0800ed74 <__retarget_lock_init_recursive>:
 800ed74:	4770      	bx	lr

0800ed76 <__retarget_lock_acquire_recursive>:
 800ed76:	4770      	bx	lr

0800ed78 <__retarget_lock_release_recursive>:
 800ed78:	4770      	bx	lr

0800ed7a <__swhatbuf_r>:
 800ed7a:	b570      	push	{r4, r5, r6, lr}
 800ed7c:	460e      	mov	r6, r1
 800ed7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed82:	2900      	cmp	r1, #0
 800ed84:	b096      	sub	sp, #88	; 0x58
 800ed86:	4614      	mov	r4, r2
 800ed88:	461d      	mov	r5, r3
 800ed8a:	da08      	bge.n	800ed9e <__swhatbuf_r+0x24>
 800ed8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	602a      	str	r2, [r5, #0]
 800ed94:	061a      	lsls	r2, r3, #24
 800ed96:	d410      	bmi.n	800edba <__swhatbuf_r+0x40>
 800ed98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed9c:	e00e      	b.n	800edbc <__swhatbuf_r+0x42>
 800ed9e:	466a      	mov	r2, sp
 800eda0:	f000 fee0 	bl	800fb64 <_fstat_r>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	dbf1      	blt.n	800ed8c <__swhatbuf_r+0x12>
 800eda8:	9a01      	ldr	r2, [sp, #4]
 800edaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800edae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800edb2:	425a      	negs	r2, r3
 800edb4:	415a      	adcs	r2, r3
 800edb6:	602a      	str	r2, [r5, #0]
 800edb8:	e7ee      	b.n	800ed98 <__swhatbuf_r+0x1e>
 800edba:	2340      	movs	r3, #64	; 0x40
 800edbc:	2000      	movs	r0, #0
 800edbe:	6023      	str	r3, [r4, #0]
 800edc0:	b016      	add	sp, #88	; 0x58
 800edc2:	bd70      	pop	{r4, r5, r6, pc}

0800edc4 <__smakebuf_r>:
 800edc4:	898b      	ldrh	r3, [r1, #12]
 800edc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edc8:	079d      	lsls	r5, r3, #30
 800edca:	4606      	mov	r6, r0
 800edcc:	460c      	mov	r4, r1
 800edce:	d507      	bpl.n	800ede0 <__smakebuf_r+0x1c>
 800edd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edd4:	6023      	str	r3, [r4, #0]
 800edd6:	6123      	str	r3, [r4, #16]
 800edd8:	2301      	movs	r3, #1
 800edda:	6163      	str	r3, [r4, #20]
 800eddc:	b002      	add	sp, #8
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	ab01      	add	r3, sp, #4
 800ede2:	466a      	mov	r2, sp
 800ede4:	f7ff ffc9 	bl	800ed7a <__swhatbuf_r>
 800ede8:	9900      	ldr	r1, [sp, #0]
 800edea:	4605      	mov	r5, r0
 800edec:	4630      	mov	r0, r6
 800edee:	f000 fc45 	bl	800f67c <_malloc_r>
 800edf2:	b948      	cbnz	r0, 800ee08 <__smakebuf_r+0x44>
 800edf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edf8:	059a      	lsls	r2, r3, #22
 800edfa:	d4ef      	bmi.n	800eddc <__smakebuf_r+0x18>
 800edfc:	f023 0303 	bic.w	r3, r3, #3
 800ee00:	f043 0302 	orr.w	r3, r3, #2
 800ee04:	81a3      	strh	r3, [r4, #12]
 800ee06:	e7e3      	b.n	800edd0 <__smakebuf_r+0xc>
 800ee08:	4b0d      	ldr	r3, [pc, #52]	; (800ee40 <__smakebuf_r+0x7c>)
 800ee0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	6020      	str	r0, [r4, #0]
 800ee10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee14:	81a3      	strh	r3, [r4, #12]
 800ee16:	9b00      	ldr	r3, [sp, #0]
 800ee18:	6163      	str	r3, [r4, #20]
 800ee1a:	9b01      	ldr	r3, [sp, #4]
 800ee1c:	6120      	str	r0, [r4, #16]
 800ee1e:	b15b      	cbz	r3, 800ee38 <__smakebuf_r+0x74>
 800ee20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee24:	4630      	mov	r0, r6
 800ee26:	f000 feaf 	bl	800fb88 <_isatty_r>
 800ee2a:	b128      	cbz	r0, 800ee38 <__smakebuf_r+0x74>
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f023 0303 	bic.w	r3, r3, #3
 800ee32:	f043 0301 	orr.w	r3, r3, #1
 800ee36:	81a3      	strh	r3, [r4, #12]
 800ee38:	89a0      	ldrh	r0, [r4, #12]
 800ee3a:	4305      	orrs	r5, r0
 800ee3c:	81a5      	strh	r5, [r4, #12]
 800ee3e:	e7cd      	b.n	800eddc <__smakebuf_r+0x18>
 800ee40:	0800ebc9 	.word	0x0800ebc9

0800ee44 <malloc>:
 800ee44:	4b02      	ldr	r3, [pc, #8]	; (800ee50 <malloc+0xc>)
 800ee46:	4601      	mov	r1, r0
 800ee48:	6818      	ldr	r0, [r3, #0]
 800ee4a:	f000 bc17 	b.w	800f67c <_malloc_r>
 800ee4e:	bf00      	nop
 800ee50:	20000014 	.word	0x20000014

0800ee54 <memcpy>:
 800ee54:	440a      	add	r2, r1
 800ee56:	4291      	cmp	r1, r2
 800ee58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee5c:	d100      	bne.n	800ee60 <memcpy+0xc>
 800ee5e:	4770      	bx	lr
 800ee60:	b510      	push	{r4, lr}
 800ee62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee6a:	4291      	cmp	r1, r2
 800ee6c:	d1f9      	bne.n	800ee62 <memcpy+0xe>
 800ee6e:	bd10      	pop	{r4, pc}

0800ee70 <_Balloc>:
 800ee70:	b570      	push	{r4, r5, r6, lr}
 800ee72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ee74:	4604      	mov	r4, r0
 800ee76:	460d      	mov	r5, r1
 800ee78:	b976      	cbnz	r6, 800ee98 <_Balloc+0x28>
 800ee7a:	2010      	movs	r0, #16
 800ee7c:	f7ff ffe2 	bl	800ee44 <malloc>
 800ee80:	4602      	mov	r2, r0
 800ee82:	6260      	str	r0, [r4, #36]	; 0x24
 800ee84:	b920      	cbnz	r0, 800ee90 <_Balloc+0x20>
 800ee86:	4b18      	ldr	r3, [pc, #96]	; (800eee8 <_Balloc+0x78>)
 800ee88:	4818      	ldr	r0, [pc, #96]	; (800eeec <_Balloc+0x7c>)
 800ee8a:	2166      	movs	r1, #102	; 0x66
 800ee8c:	f000 fe2a 	bl	800fae4 <__assert_func>
 800ee90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee94:	6006      	str	r6, [r0, #0]
 800ee96:	60c6      	str	r6, [r0, #12]
 800ee98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ee9a:	68f3      	ldr	r3, [r6, #12]
 800ee9c:	b183      	cbz	r3, 800eec0 <_Balloc+0x50>
 800ee9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eea6:	b9b8      	cbnz	r0, 800eed8 <_Balloc+0x68>
 800eea8:	2101      	movs	r1, #1
 800eeaa:	fa01 f605 	lsl.w	r6, r1, r5
 800eeae:	1d72      	adds	r2, r6, #5
 800eeb0:	0092      	lsls	r2, r2, #2
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 fb60 	bl	800f578 <_calloc_r>
 800eeb8:	b160      	cbz	r0, 800eed4 <_Balloc+0x64>
 800eeba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eebe:	e00e      	b.n	800eede <_Balloc+0x6e>
 800eec0:	2221      	movs	r2, #33	; 0x21
 800eec2:	2104      	movs	r1, #4
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 fb57 	bl	800f578 <_calloc_r>
 800eeca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eecc:	60f0      	str	r0, [r6, #12]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1e4      	bne.n	800ee9e <_Balloc+0x2e>
 800eed4:	2000      	movs	r0, #0
 800eed6:	bd70      	pop	{r4, r5, r6, pc}
 800eed8:	6802      	ldr	r2, [r0, #0]
 800eeda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eede:	2300      	movs	r3, #0
 800eee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eee4:	e7f7      	b.n	800eed6 <_Balloc+0x66>
 800eee6:	bf00      	nop
 800eee8:	0800ff21 	.word	0x0800ff21
 800eeec:	08010004 	.word	0x08010004

0800eef0 <_Bfree>:
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eef4:	4605      	mov	r5, r0
 800eef6:	460c      	mov	r4, r1
 800eef8:	b976      	cbnz	r6, 800ef18 <_Bfree+0x28>
 800eefa:	2010      	movs	r0, #16
 800eefc:	f7ff ffa2 	bl	800ee44 <malloc>
 800ef00:	4602      	mov	r2, r0
 800ef02:	6268      	str	r0, [r5, #36]	; 0x24
 800ef04:	b920      	cbnz	r0, 800ef10 <_Bfree+0x20>
 800ef06:	4b09      	ldr	r3, [pc, #36]	; (800ef2c <_Bfree+0x3c>)
 800ef08:	4809      	ldr	r0, [pc, #36]	; (800ef30 <_Bfree+0x40>)
 800ef0a:	218a      	movs	r1, #138	; 0x8a
 800ef0c:	f000 fdea 	bl	800fae4 <__assert_func>
 800ef10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef14:	6006      	str	r6, [r0, #0]
 800ef16:	60c6      	str	r6, [r0, #12]
 800ef18:	b13c      	cbz	r4, 800ef2a <_Bfree+0x3a>
 800ef1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef1c:	6862      	ldr	r2, [r4, #4]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef24:	6021      	str	r1, [r4, #0]
 800ef26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef2a:	bd70      	pop	{r4, r5, r6, pc}
 800ef2c:	0800ff21 	.word	0x0800ff21
 800ef30:	08010004 	.word	0x08010004

0800ef34 <__multadd>:
 800ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef38:	690d      	ldr	r5, [r1, #16]
 800ef3a:	4607      	mov	r7, r0
 800ef3c:	460c      	mov	r4, r1
 800ef3e:	461e      	mov	r6, r3
 800ef40:	f101 0c14 	add.w	ip, r1, #20
 800ef44:	2000      	movs	r0, #0
 800ef46:	f8dc 3000 	ldr.w	r3, [ip]
 800ef4a:	b299      	uxth	r1, r3
 800ef4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ef50:	0c1e      	lsrs	r6, r3, #16
 800ef52:	0c0b      	lsrs	r3, r1, #16
 800ef54:	fb02 3306 	mla	r3, r2, r6, r3
 800ef58:	b289      	uxth	r1, r1
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef60:	4285      	cmp	r5, r0
 800ef62:	f84c 1b04 	str.w	r1, [ip], #4
 800ef66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef6a:	dcec      	bgt.n	800ef46 <__multadd+0x12>
 800ef6c:	b30e      	cbz	r6, 800efb2 <__multadd+0x7e>
 800ef6e:	68a3      	ldr	r3, [r4, #8]
 800ef70:	42ab      	cmp	r3, r5
 800ef72:	dc19      	bgt.n	800efa8 <__multadd+0x74>
 800ef74:	6861      	ldr	r1, [r4, #4]
 800ef76:	4638      	mov	r0, r7
 800ef78:	3101      	adds	r1, #1
 800ef7a:	f7ff ff79 	bl	800ee70 <_Balloc>
 800ef7e:	4680      	mov	r8, r0
 800ef80:	b928      	cbnz	r0, 800ef8e <__multadd+0x5a>
 800ef82:	4602      	mov	r2, r0
 800ef84:	4b0c      	ldr	r3, [pc, #48]	; (800efb8 <__multadd+0x84>)
 800ef86:	480d      	ldr	r0, [pc, #52]	; (800efbc <__multadd+0x88>)
 800ef88:	21b5      	movs	r1, #181	; 0xb5
 800ef8a:	f000 fdab 	bl	800fae4 <__assert_func>
 800ef8e:	6922      	ldr	r2, [r4, #16]
 800ef90:	3202      	adds	r2, #2
 800ef92:	f104 010c 	add.w	r1, r4, #12
 800ef96:	0092      	lsls	r2, r2, #2
 800ef98:	300c      	adds	r0, #12
 800ef9a:	f7ff ff5b 	bl	800ee54 <memcpy>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4638      	mov	r0, r7
 800efa2:	f7ff ffa5 	bl	800eef0 <_Bfree>
 800efa6:	4644      	mov	r4, r8
 800efa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800efac:	3501      	adds	r5, #1
 800efae:	615e      	str	r6, [r3, #20]
 800efb0:	6125      	str	r5, [r4, #16]
 800efb2:	4620      	mov	r0, r4
 800efb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb8:	0800ff93 	.word	0x0800ff93
 800efbc:	08010004 	.word	0x08010004

0800efc0 <__hi0bits>:
 800efc0:	0c03      	lsrs	r3, r0, #16
 800efc2:	041b      	lsls	r3, r3, #16
 800efc4:	b9d3      	cbnz	r3, 800effc <__hi0bits+0x3c>
 800efc6:	0400      	lsls	r0, r0, #16
 800efc8:	2310      	movs	r3, #16
 800efca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800efce:	bf04      	itt	eq
 800efd0:	0200      	lsleq	r0, r0, #8
 800efd2:	3308      	addeq	r3, #8
 800efd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800efd8:	bf04      	itt	eq
 800efda:	0100      	lsleq	r0, r0, #4
 800efdc:	3304      	addeq	r3, #4
 800efde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800efe2:	bf04      	itt	eq
 800efe4:	0080      	lsleq	r0, r0, #2
 800efe6:	3302      	addeq	r3, #2
 800efe8:	2800      	cmp	r0, #0
 800efea:	db05      	blt.n	800eff8 <__hi0bits+0x38>
 800efec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eff0:	f103 0301 	add.w	r3, r3, #1
 800eff4:	bf08      	it	eq
 800eff6:	2320      	moveq	r3, #32
 800eff8:	4618      	mov	r0, r3
 800effa:	4770      	bx	lr
 800effc:	2300      	movs	r3, #0
 800effe:	e7e4      	b.n	800efca <__hi0bits+0xa>

0800f000 <__lo0bits>:
 800f000:	6803      	ldr	r3, [r0, #0]
 800f002:	f013 0207 	ands.w	r2, r3, #7
 800f006:	4601      	mov	r1, r0
 800f008:	d00b      	beq.n	800f022 <__lo0bits+0x22>
 800f00a:	07da      	lsls	r2, r3, #31
 800f00c:	d423      	bmi.n	800f056 <__lo0bits+0x56>
 800f00e:	0798      	lsls	r0, r3, #30
 800f010:	bf49      	itett	mi
 800f012:	085b      	lsrmi	r3, r3, #1
 800f014:	089b      	lsrpl	r3, r3, #2
 800f016:	2001      	movmi	r0, #1
 800f018:	600b      	strmi	r3, [r1, #0]
 800f01a:	bf5c      	itt	pl
 800f01c:	600b      	strpl	r3, [r1, #0]
 800f01e:	2002      	movpl	r0, #2
 800f020:	4770      	bx	lr
 800f022:	b298      	uxth	r0, r3
 800f024:	b9a8      	cbnz	r0, 800f052 <__lo0bits+0x52>
 800f026:	0c1b      	lsrs	r3, r3, #16
 800f028:	2010      	movs	r0, #16
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	b90a      	cbnz	r2, 800f032 <__lo0bits+0x32>
 800f02e:	3008      	adds	r0, #8
 800f030:	0a1b      	lsrs	r3, r3, #8
 800f032:	071a      	lsls	r2, r3, #28
 800f034:	bf04      	itt	eq
 800f036:	091b      	lsreq	r3, r3, #4
 800f038:	3004      	addeq	r0, #4
 800f03a:	079a      	lsls	r2, r3, #30
 800f03c:	bf04      	itt	eq
 800f03e:	089b      	lsreq	r3, r3, #2
 800f040:	3002      	addeq	r0, #2
 800f042:	07da      	lsls	r2, r3, #31
 800f044:	d403      	bmi.n	800f04e <__lo0bits+0x4e>
 800f046:	085b      	lsrs	r3, r3, #1
 800f048:	f100 0001 	add.w	r0, r0, #1
 800f04c:	d005      	beq.n	800f05a <__lo0bits+0x5a>
 800f04e:	600b      	str	r3, [r1, #0]
 800f050:	4770      	bx	lr
 800f052:	4610      	mov	r0, r2
 800f054:	e7e9      	b.n	800f02a <__lo0bits+0x2a>
 800f056:	2000      	movs	r0, #0
 800f058:	4770      	bx	lr
 800f05a:	2020      	movs	r0, #32
 800f05c:	4770      	bx	lr
	...

0800f060 <__i2b>:
 800f060:	b510      	push	{r4, lr}
 800f062:	460c      	mov	r4, r1
 800f064:	2101      	movs	r1, #1
 800f066:	f7ff ff03 	bl	800ee70 <_Balloc>
 800f06a:	4602      	mov	r2, r0
 800f06c:	b928      	cbnz	r0, 800f07a <__i2b+0x1a>
 800f06e:	4b05      	ldr	r3, [pc, #20]	; (800f084 <__i2b+0x24>)
 800f070:	4805      	ldr	r0, [pc, #20]	; (800f088 <__i2b+0x28>)
 800f072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f076:	f000 fd35 	bl	800fae4 <__assert_func>
 800f07a:	2301      	movs	r3, #1
 800f07c:	6144      	str	r4, [r0, #20]
 800f07e:	6103      	str	r3, [r0, #16]
 800f080:	bd10      	pop	{r4, pc}
 800f082:	bf00      	nop
 800f084:	0800ff93 	.word	0x0800ff93
 800f088:	08010004 	.word	0x08010004

0800f08c <__multiply>:
 800f08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f090:	4691      	mov	r9, r2
 800f092:	690a      	ldr	r2, [r1, #16]
 800f094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f098:	429a      	cmp	r2, r3
 800f09a:	bfb8      	it	lt
 800f09c:	460b      	movlt	r3, r1
 800f09e:	460c      	mov	r4, r1
 800f0a0:	bfbc      	itt	lt
 800f0a2:	464c      	movlt	r4, r9
 800f0a4:	4699      	movlt	r9, r3
 800f0a6:	6927      	ldr	r7, [r4, #16]
 800f0a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f0ac:	68a3      	ldr	r3, [r4, #8]
 800f0ae:	6861      	ldr	r1, [r4, #4]
 800f0b0:	eb07 060a 	add.w	r6, r7, sl
 800f0b4:	42b3      	cmp	r3, r6
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	bfb8      	it	lt
 800f0ba:	3101      	addlt	r1, #1
 800f0bc:	f7ff fed8 	bl	800ee70 <_Balloc>
 800f0c0:	b930      	cbnz	r0, 800f0d0 <__multiply+0x44>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	4b44      	ldr	r3, [pc, #272]	; (800f1d8 <__multiply+0x14c>)
 800f0c6:	4845      	ldr	r0, [pc, #276]	; (800f1dc <__multiply+0x150>)
 800f0c8:	f240 115d 	movw	r1, #349	; 0x15d
 800f0cc:	f000 fd0a 	bl	800fae4 <__assert_func>
 800f0d0:	f100 0514 	add.w	r5, r0, #20
 800f0d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0d8:	462b      	mov	r3, r5
 800f0da:	2200      	movs	r2, #0
 800f0dc:	4543      	cmp	r3, r8
 800f0de:	d321      	bcc.n	800f124 <__multiply+0x98>
 800f0e0:	f104 0314 	add.w	r3, r4, #20
 800f0e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f0e8:	f109 0314 	add.w	r3, r9, #20
 800f0ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f0f0:	9202      	str	r2, [sp, #8]
 800f0f2:	1b3a      	subs	r2, r7, r4
 800f0f4:	3a15      	subs	r2, #21
 800f0f6:	f022 0203 	bic.w	r2, r2, #3
 800f0fa:	3204      	adds	r2, #4
 800f0fc:	f104 0115 	add.w	r1, r4, #21
 800f100:	428f      	cmp	r7, r1
 800f102:	bf38      	it	cc
 800f104:	2204      	movcc	r2, #4
 800f106:	9201      	str	r2, [sp, #4]
 800f108:	9a02      	ldr	r2, [sp, #8]
 800f10a:	9303      	str	r3, [sp, #12]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d80c      	bhi.n	800f12a <__multiply+0x9e>
 800f110:	2e00      	cmp	r6, #0
 800f112:	dd03      	ble.n	800f11c <__multiply+0x90>
 800f114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d05a      	beq.n	800f1d2 <__multiply+0x146>
 800f11c:	6106      	str	r6, [r0, #16]
 800f11e:	b005      	add	sp, #20
 800f120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f124:	f843 2b04 	str.w	r2, [r3], #4
 800f128:	e7d8      	b.n	800f0dc <__multiply+0x50>
 800f12a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f12e:	f1ba 0f00 	cmp.w	sl, #0
 800f132:	d024      	beq.n	800f17e <__multiply+0xf2>
 800f134:	f104 0e14 	add.w	lr, r4, #20
 800f138:	46a9      	mov	r9, r5
 800f13a:	f04f 0c00 	mov.w	ip, #0
 800f13e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f142:	f8d9 1000 	ldr.w	r1, [r9]
 800f146:	fa1f fb82 	uxth.w	fp, r2
 800f14a:	b289      	uxth	r1, r1
 800f14c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f154:	f8d9 2000 	ldr.w	r2, [r9]
 800f158:	4461      	add	r1, ip
 800f15a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f15e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f166:	b289      	uxth	r1, r1
 800f168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f16c:	4577      	cmp	r7, lr
 800f16e:	f849 1b04 	str.w	r1, [r9], #4
 800f172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f176:	d8e2      	bhi.n	800f13e <__multiply+0xb2>
 800f178:	9a01      	ldr	r2, [sp, #4]
 800f17a:	f845 c002 	str.w	ip, [r5, r2]
 800f17e:	9a03      	ldr	r2, [sp, #12]
 800f180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f184:	3304      	adds	r3, #4
 800f186:	f1b9 0f00 	cmp.w	r9, #0
 800f18a:	d020      	beq.n	800f1ce <__multiply+0x142>
 800f18c:	6829      	ldr	r1, [r5, #0]
 800f18e:	f104 0c14 	add.w	ip, r4, #20
 800f192:	46ae      	mov	lr, r5
 800f194:	f04f 0a00 	mov.w	sl, #0
 800f198:	f8bc b000 	ldrh.w	fp, [ip]
 800f19c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f1a0:	fb09 220b 	mla	r2, r9, fp, r2
 800f1a4:	4492      	add	sl, r2
 800f1a6:	b289      	uxth	r1, r1
 800f1a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f1ac:	f84e 1b04 	str.w	r1, [lr], #4
 800f1b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f1b4:	f8be 1000 	ldrh.w	r1, [lr]
 800f1b8:	0c12      	lsrs	r2, r2, #16
 800f1ba:	fb09 1102 	mla	r1, r9, r2, r1
 800f1be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f1c2:	4567      	cmp	r7, ip
 800f1c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f1c8:	d8e6      	bhi.n	800f198 <__multiply+0x10c>
 800f1ca:	9a01      	ldr	r2, [sp, #4]
 800f1cc:	50a9      	str	r1, [r5, r2]
 800f1ce:	3504      	adds	r5, #4
 800f1d0:	e79a      	b.n	800f108 <__multiply+0x7c>
 800f1d2:	3e01      	subs	r6, #1
 800f1d4:	e79c      	b.n	800f110 <__multiply+0x84>
 800f1d6:	bf00      	nop
 800f1d8:	0800ff93 	.word	0x0800ff93
 800f1dc:	08010004 	.word	0x08010004

0800f1e0 <__pow5mult>:
 800f1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e4:	4615      	mov	r5, r2
 800f1e6:	f012 0203 	ands.w	r2, r2, #3
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460f      	mov	r7, r1
 800f1ee:	d007      	beq.n	800f200 <__pow5mult+0x20>
 800f1f0:	4c25      	ldr	r4, [pc, #148]	; (800f288 <__pow5mult+0xa8>)
 800f1f2:	3a01      	subs	r2, #1
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1fa:	f7ff fe9b 	bl	800ef34 <__multadd>
 800f1fe:	4607      	mov	r7, r0
 800f200:	10ad      	asrs	r5, r5, #2
 800f202:	d03d      	beq.n	800f280 <__pow5mult+0xa0>
 800f204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f206:	b97c      	cbnz	r4, 800f228 <__pow5mult+0x48>
 800f208:	2010      	movs	r0, #16
 800f20a:	f7ff fe1b 	bl	800ee44 <malloc>
 800f20e:	4602      	mov	r2, r0
 800f210:	6270      	str	r0, [r6, #36]	; 0x24
 800f212:	b928      	cbnz	r0, 800f220 <__pow5mult+0x40>
 800f214:	4b1d      	ldr	r3, [pc, #116]	; (800f28c <__pow5mult+0xac>)
 800f216:	481e      	ldr	r0, [pc, #120]	; (800f290 <__pow5mult+0xb0>)
 800f218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f21c:	f000 fc62 	bl	800fae4 <__assert_func>
 800f220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f224:	6004      	str	r4, [r0, #0]
 800f226:	60c4      	str	r4, [r0, #12]
 800f228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f230:	b94c      	cbnz	r4, 800f246 <__pow5mult+0x66>
 800f232:	f240 2171 	movw	r1, #625	; 0x271
 800f236:	4630      	mov	r0, r6
 800f238:	f7ff ff12 	bl	800f060 <__i2b>
 800f23c:	2300      	movs	r3, #0
 800f23e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f242:	4604      	mov	r4, r0
 800f244:	6003      	str	r3, [r0, #0]
 800f246:	f04f 0900 	mov.w	r9, #0
 800f24a:	07eb      	lsls	r3, r5, #31
 800f24c:	d50a      	bpl.n	800f264 <__pow5mult+0x84>
 800f24e:	4639      	mov	r1, r7
 800f250:	4622      	mov	r2, r4
 800f252:	4630      	mov	r0, r6
 800f254:	f7ff ff1a 	bl	800f08c <__multiply>
 800f258:	4639      	mov	r1, r7
 800f25a:	4680      	mov	r8, r0
 800f25c:	4630      	mov	r0, r6
 800f25e:	f7ff fe47 	bl	800eef0 <_Bfree>
 800f262:	4647      	mov	r7, r8
 800f264:	106d      	asrs	r5, r5, #1
 800f266:	d00b      	beq.n	800f280 <__pow5mult+0xa0>
 800f268:	6820      	ldr	r0, [r4, #0]
 800f26a:	b938      	cbnz	r0, 800f27c <__pow5mult+0x9c>
 800f26c:	4622      	mov	r2, r4
 800f26e:	4621      	mov	r1, r4
 800f270:	4630      	mov	r0, r6
 800f272:	f7ff ff0b 	bl	800f08c <__multiply>
 800f276:	6020      	str	r0, [r4, #0]
 800f278:	f8c0 9000 	str.w	r9, [r0]
 800f27c:	4604      	mov	r4, r0
 800f27e:	e7e4      	b.n	800f24a <__pow5mult+0x6a>
 800f280:	4638      	mov	r0, r7
 800f282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f286:	bf00      	nop
 800f288:	08010150 	.word	0x08010150
 800f28c:	0800ff21 	.word	0x0800ff21
 800f290:	08010004 	.word	0x08010004

0800f294 <__lshift>:
 800f294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f298:	460c      	mov	r4, r1
 800f29a:	6849      	ldr	r1, [r1, #4]
 800f29c:	6923      	ldr	r3, [r4, #16]
 800f29e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2a2:	68a3      	ldr	r3, [r4, #8]
 800f2a4:	4607      	mov	r7, r0
 800f2a6:	4691      	mov	r9, r2
 800f2a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2ac:	f108 0601 	add.w	r6, r8, #1
 800f2b0:	42b3      	cmp	r3, r6
 800f2b2:	db0b      	blt.n	800f2cc <__lshift+0x38>
 800f2b4:	4638      	mov	r0, r7
 800f2b6:	f7ff fddb 	bl	800ee70 <_Balloc>
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	b948      	cbnz	r0, 800f2d2 <__lshift+0x3e>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	4b2a      	ldr	r3, [pc, #168]	; (800f36c <__lshift+0xd8>)
 800f2c2:	482b      	ldr	r0, [pc, #172]	; (800f370 <__lshift+0xdc>)
 800f2c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f2c8:	f000 fc0c 	bl	800fae4 <__assert_func>
 800f2cc:	3101      	adds	r1, #1
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	e7ee      	b.n	800f2b0 <__lshift+0x1c>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	f100 0114 	add.w	r1, r0, #20
 800f2d8:	f100 0210 	add.w	r2, r0, #16
 800f2dc:	4618      	mov	r0, r3
 800f2de:	4553      	cmp	r3, sl
 800f2e0:	db37      	blt.n	800f352 <__lshift+0xbe>
 800f2e2:	6920      	ldr	r0, [r4, #16]
 800f2e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2e8:	f104 0314 	add.w	r3, r4, #20
 800f2ec:	f019 091f 	ands.w	r9, r9, #31
 800f2f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f2f8:	d02f      	beq.n	800f35a <__lshift+0xc6>
 800f2fa:	f1c9 0e20 	rsb	lr, r9, #32
 800f2fe:	468a      	mov	sl, r1
 800f300:	f04f 0c00 	mov.w	ip, #0
 800f304:	681a      	ldr	r2, [r3, #0]
 800f306:	fa02 f209 	lsl.w	r2, r2, r9
 800f30a:	ea42 020c 	orr.w	r2, r2, ip
 800f30e:	f84a 2b04 	str.w	r2, [sl], #4
 800f312:	f853 2b04 	ldr.w	r2, [r3], #4
 800f316:	4298      	cmp	r0, r3
 800f318:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f31c:	d8f2      	bhi.n	800f304 <__lshift+0x70>
 800f31e:	1b03      	subs	r3, r0, r4
 800f320:	3b15      	subs	r3, #21
 800f322:	f023 0303 	bic.w	r3, r3, #3
 800f326:	3304      	adds	r3, #4
 800f328:	f104 0215 	add.w	r2, r4, #21
 800f32c:	4290      	cmp	r0, r2
 800f32e:	bf38      	it	cc
 800f330:	2304      	movcc	r3, #4
 800f332:	f841 c003 	str.w	ip, [r1, r3]
 800f336:	f1bc 0f00 	cmp.w	ip, #0
 800f33a:	d001      	beq.n	800f340 <__lshift+0xac>
 800f33c:	f108 0602 	add.w	r6, r8, #2
 800f340:	3e01      	subs	r6, #1
 800f342:	4638      	mov	r0, r7
 800f344:	612e      	str	r6, [r5, #16]
 800f346:	4621      	mov	r1, r4
 800f348:	f7ff fdd2 	bl	800eef0 <_Bfree>
 800f34c:	4628      	mov	r0, r5
 800f34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f352:	f842 0f04 	str.w	r0, [r2, #4]!
 800f356:	3301      	adds	r3, #1
 800f358:	e7c1      	b.n	800f2de <__lshift+0x4a>
 800f35a:	3904      	subs	r1, #4
 800f35c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f360:	f841 2f04 	str.w	r2, [r1, #4]!
 800f364:	4298      	cmp	r0, r3
 800f366:	d8f9      	bhi.n	800f35c <__lshift+0xc8>
 800f368:	e7ea      	b.n	800f340 <__lshift+0xac>
 800f36a:	bf00      	nop
 800f36c:	0800ff93 	.word	0x0800ff93
 800f370:	08010004 	.word	0x08010004

0800f374 <__mcmp>:
 800f374:	b530      	push	{r4, r5, lr}
 800f376:	6902      	ldr	r2, [r0, #16]
 800f378:	690c      	ldr	r4, [r1, #16]
 800f37a:	1b12      	subs	r2, r2, r4
 800f37c:	d10e      	bne.n	800f39c <__mcmp+0x28>
 800f37e:	f100 0314 	add.w	r3, r0, #20
 800f382:	3114      	adds	r1, #20
 800f384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f38c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f394:	42a5      	cmp	r5, r4
 800f396:	d003      	beq.n	800f3a0 <__mcmp+0x2c>
 800f398:	d305      	bcc.n	800f3a6 <__mcmp+0x32>
 800f39a:	2201      	movs	r2, #1
 800f39c:	4610      	mov	r0, r2
 800f39e:	bd30      	pop	{r4, r5, pc}
 800f3a0:	4283      	cmp	r3, r0
 800f3a2:	d3f3      	bcc.n	800f38c <__mcmp+0x18>
 800f3a4:	e7fa      	b.n	800f39c <__mcmp+0x28>
 800f3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3aa:	e7f7      	b.n	800f39c <__mcmp+0x28>

0800f3ac <__mdiff>:
 800f3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b0:	460c      	mov	r4, r1
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	4690      	mov	r8, r2
 800f3ba:	f7ff ffdb 	bl	800f374 <__mcmp>
 800f3be:	1e05      	subs	r5, r0, #0
 800f3c0:	d110      	bne.n	800f3e4 <__mdiff+0x38>
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7ff fd53 	bl	800ee70 <_Balloc>
 800f3ca:	b930      	cbnz	r0, 800f3da <__mdiff+0x2e>
 800f3cc:	4b3a      	ldr	r3, [pc, #232]	; (800f4b8 <__mdiff+0x10c>)
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	f240 2132 	movw	r1, #562	; 0x232
 800f3d4:	4839      	ldr	r0, [pc, #228]	; (800f4bc <__mdiff+0x110>)
 800f3d6:	f000 fb85 	bl	800fae4 <__assert_func>
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3e4:	bfa4      	itt	ge
 800f3e6:	4643      	movge	r3, r8
 800f3e8:	46a0      	movge	r8, r4
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f3f0:	bfa6      	itte	ge
 800f3f2:	461c      	movge	r4, r3
 800f3f4:	2500      	movge	r5, #0
 800f3f6:	2501      	movlt	r5, #1
 800f3f8:	f7ff fd3a 	bl	800ee70 <_Balloc>
 800f3fc:	b920      	cbnz	r0, 800f408 <__mdiff+0x5c>
 800f3fe:	4b2e      	ldr	r3, [pc, #184]	; (800f4b8 <__mdiff+0x10c>)
 800f400:	4602      	mov	r2, r0
 800f402:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f406:	e7e5      	b.n	800f3d4 <__mdiff+0x28>
 800f408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f40c:	6926      	ldr	r6, [r4, #16]
 800f40e:	60c5      	str	r5, [r0, #12]
 800f410:	f104 0914 	add.w	r9, r4, #20
 800f414:	f108 0514 	add.w	r5, r8, #20
 800f418:	f100 0e14 	add.w	lr, r0, #20
 800f41c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f424:	f108 0210 	add.w	r2, r8, #16
 800f428:	46f2      	mov	sl, lr
 800f42a:	2100      	movs	r1, #0
 800f42c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f434:	fa1f f883 	uxth.w	r8, r3
 800f438:	fa11 f18b 	uxtah	r1, r1, fp
 800f43c:	0c1b      	lsrs	r3, r3, #16
 800f43e:	eba1 0808 	sub.w	r8, r1, r8
 800f442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f446:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f44a:	fa1f f888 	uxth.w	r8, r8
 800f44e:	1419      	asrs	r1, r3, #16
 800f450:	454e      	cmp	r6, r9
 800f452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f456:	f84a 3b04 	str.w	r3, [sl], #4
 800f45a:	d8e7      	bhi.n	800f42c <__mdiff+0x80>
 800f45c:	1b33      	subs	r3, r6, r4
 800f45e:	3b15      	subs	r3, #21
 800f460:	f023 0303 	bic.w	r3, r3, #3
 800f464:	3304      	adds	r3, #4
 800f466:	3415      	adds	r4, #21
 800f468:	42a6      	cmp	r6, r4
 800f46a:	bf38      	it	cc
 800f46c:	2304      	movcc	r3, #4
 800f46e:	441d      	add	r5, r3
 800f470:	4473      	add	r3, lr
 800f472:	469e      	mov	lr, r3
 800f474:	462e      	mov	r6, r5
 800f476:	4566      	cmp	r6, ip
 800f478:	d30e      	bcc.n	800f498 <__mdiff+0xec>
 800f47a:	f10c 0203 	add.w	r2, ip, #3
 800f47e:	1b52      	subs	r2, r2, r5
 800f480:	f022 0203 	bic.w	r2, r2, #3
 800f484:	3d03      	subs	r5, #3
 800f486:	45ac      	cmp	ip, r5
 800f488:	bf38      	it	cc
 800f48a:	2200      	movcc	r2, #0
 800f48c:	441a      	add	r2, r3
 800f48e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f492:	b17b      	cbz	r3, 800f4b4 <__mdiff+0x108>
 800f494:	6107      	str	r7, [r0, #16]
 800f496:	e7a3      	b.n	800f3e0 <__mdiff+0x34>
 800f498:	f856 8b04 	ldr.w	r8, [r6], #4
 800f49c:	fa11 f288 	uxtah	r2, r1, r8
 800f4a0:	1414      	asrs	r4, r2, #16
 800f4a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f4a6:	b292      	uxth	r2, r2
 800f4a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f4ac:	f84e 2b04 	str.w	r2, [lr], #4
 800f4b0:	1421      	asrs	r1, r4, #16
 800f4b2:	e7e0      	b.n	800f476 <__mdiff+0xca>
 800f4b4:	3f01      	subs	r7, #1
 800f4b6:	e7ea      	b.n	800f48e <__mdiff+0xe2>
 800f4b8:	0800ff93 	.word	0x0800ff93
 800f4bc:	08010004 	.word	0x08010004

0800f4c0 <__d2b>:
 800f4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4c4:	4689      	mov	r9, r1
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	ec57 6b10 	vmov	r6, r7, d0
 800f4cc:	4690      	mov	r8, r2
 800f4ce:	f7ff fccf 	bl	800ee70 <_Balloc>
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	b930      	cbnz	r0, 800f4e4 <__d2b+0x24>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	4b25      	ldr	r3, [pc, #148]	; (800f570 <__d2b+0xb0>)
 800f4da:	4826      	ldr	r0, [pc, #152]	; (800f574 <__d2b+0xb4>)
 800f4dc:	f240 310a 	movw	r1, #778	; 0x30a
 800f4e0:	f000 fb00 	bl	800fae4 <__assert_func>
 800f4e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f4e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4ec:	bb35      	cbnz	r5, 800f53c <__d2b+0x7c>
 800f4ee:	2e00      	cmp	r6, #0
 800f4f0:	9301      	str	r3, [sp, #4]
 800f4f2:	d028      	beq.n	800f546 <__d2b+0x86>
 800f4f4:	4668      	mov	r0, sp
 800f4f6:	9600      	str	r6, [sp, #0]
 800f4f8:	f7ff fd82 	bl	800f000 <__lo0bits>
 800f4fc:	9900      	ldr	r1, [sp, #0]
 800f4fe:	b300      	cbz	r0, 800f542 <__d2b+0x82>
 800f500:	9a01      	ldr	r2, [sp, #4]
 800f502:	f1c0 0320 	rsb	r3, r0, #32
 800f506:	fa02 f303 	lsl.w	r3, r2, r3
 800f50a:	430b      	orrs	r3, r1
 800f50c:	40c2      	lsrs	r2, r0
 800f50e:	6163      	str	r3, [r4, #20]
 800f510:	9201      	str	r2, [sp, #4]
 800f512:	9b01      	ldr	r3, [sp, #4]
 800f514:	61a3      	str	r3, [r4, #24]
 800f516:	2b00      	cmp	r3, #0
 800f518:	bf14      	ite	ne
 800f51a:	2202      	movne	r2, #2
 800f51c:	2201      	moveq	r2, #1
 800f51e:	6122      	str	r2, [r4, #16]
 800f520:	b1d5      	cbz	r5, 800f558 <__d2b+0x98>
 800f522:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f526:	4405      	add	r5, r0
 800f528:	f8c9 5000 	str.w	r5, [r9]
 800f52c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f530:	f8c8 0000 	str.w	r0, [r8]
 800f534:	4620      	mov	r0, r4
 800f536:	b003      	add	sp, #12
 800f538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f53c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f540:	e7d5      	b.n	800f4ee <__d2b+0x2e>
 800f542:	6161      	str	r1, [r4, #20]
 800f544:	e7e5      	b.n	800f512 <__d2b+0x52>
 800f546:	a801      	add	r0, sp, #4
 800f548:	f7ff fd5a 	bl	800f000 <__lo0bits>
 800f54c:	9b01      	ldr	r3, [sp, #4]
 800f54e:	6163      	str	r3, [r4, #20]
 800f550:	2201      	movs	r2, #1
 800f552:	6122      	str	r2, [r4, #16]
 800f554:	3020      	adds	r0, #32
 800f556:	e7e3      	b.n	800f520 <__d2b+0x60>
 800f558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f55c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f560:	f8c9 0000 	str.w	r0, [r9]
 800f564:	6918      	ldr	r0, [r3, #16]
 800f566:	f7ff fd2b 	bl	800efc0 <__hi0bits>
 800f56a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f56e:	e7df      	b.n	800f530 <__d2b+0x70>
 800f570:	0800ff93 	.word	0x0800ff93
 800f574:	08010004 	.word	0x08010004

0800f578 <_calloc_r>:
 800f578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f57a:	fba1 2402 	umull	r2, r4, r1, r2
 800f57e:	b94c      	cbnz	r4, 800f594 <_calloc_r+0x1c>
 800f580:	4611      	mov	r1, r2
 800f582:	9201      	str	r2, [sp, #4]
 800f584:	f000 f87a 	bl	800f67c <_malloc_r>
 800f588:	9a01      	ldr	r2, [sp, #4]
 800f58a:	4605      	mov	r5, r0
 800f58c:	b930      	cbnz	r0, 800f59c <_calloc_r+0x24>
 800f58e:	4628      	mov	r0, r5
 800f590:	b003      	add	sp, #12
 800f592:	bd30      	pop	{r4, r5, pc}
 800f594:	220c      	movs	r2, #12
 800f596:	6002      	str	r2, [r0, #0]
 800f598:	2500      	movs	r5, #0
 800f59a:	e7f8      	b.n	800f58e <_calloc_r+0x16>
 800f59c:	4621      	mov	r1, r4
 800f59e:	f7fd fd23 	bl	800cfe8 <memset>
 800f5a2:	e7f4      	b.n	800f58e <_calloc_r+0x16>

0800f5a4 <_free_r>:
 800f5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5a6:	2900      	cmp	r1, #0
 800f5a8:	d044      	beq.n	800f634 <_free_r+0x90>
 800f5aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ae:	9001      	str	r0, [sp, #4]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	f1a1 0404 	sub.w	r4, r1, #4
 800f5b6:	bfb8      	it	lt
 800f5b8:	18e4      	addlt	r4, r4, r3
 800f5ba:	f000 fb19 	bl	800fbf0 <__malloc_lock>
 800f5be:	4a1e      	ldr	r2, [pc, #120]	; (800f638 <_free_r+0x94>)
 800f5c0:	9801      	ldr	r0, [sp, #4]
 800f5c2:	6813      	ldr	r3, [r2, #0]
 800f5c4:	b933      	cbnz	r3, 800f5d4 <_free_r+0x30>
 800f5c6:	6063      	str	r3, [r4, #4]
 800f5c8:	6014      	str	r4, [r2, #0]
 800f5ca:	b003      	add	sp, #12
 800f5cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5d0:	f000 bb14 	b.w	800fbfc <__malloc_unlock>
 800f5d4:	42a3      	cmp	r3, r4
 800f5d6:	d908      	bls.n	800f5ea <_free_r+0x46>
 800f5d8:	6825      	ldr	r5, [r4, #0]
 800f5da:	1961      	adds	r1, r4, r5
 800f5dc:	428b      	cmp	r3, r1
 800f5de:	bf01      	itttt	eq
 800f5e0:	6819      	ldreq	r1, [r3, #0]
 800f5e2:	685b      	ldreq	r3, [r3, #4]
 800f5e4:	1949      	addeq	r1, r1, r5
 800f5e6:	6021      	streq	r1, [r4, #0]
 800f5e8:	e7ed      	b.n	800f5c6 <_free_r+0x22>
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	b10b      	cbz	r3, 800f5f4 <_free_r+0x50>
 800f5f0:	42a3      	cmp	r3, r4
 800f5f2:	d9fa      	bls.n	800f5ea <_free_r+0x46>
 800f5f4:	6811      	ldr	r1, [r2, #0]
 800f5f6:	1855      	adds	r5, r2, r1
 800f5f8:	42a5      	cmp	r5, r4
 800f5fa:	d10b      	bne.n	800f614 <_free_r+0x70>
 800f5fc:	6824      	ldr	r4, [r4, #0]
 800f5fe:	4421      	add	r1, r4
 800f600:	1854      	adds	r4, r2, r1
 800f602:	42a3      	cmp	r3, r4
 800f604:	6011      	str	r1, [r2, #0]
 800f606:	d1e0      	bne.n	800f5ca <_free_r+0x26>
 800f608:	681c      	ldr	r4, [r3, #0]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	6053      	str	r3, [r2, #4]
 800f60e:	4421      	add	r1, r4
 800f610:	6011      	str	r1, [r2, #0]
 800f612:	e7da      	b.n	800f5ca <_free_r+0x26>
 800f614:	d902      	bls.n	800f61c <_free_r+0x78>
 800f616:	230c      	movs	r3, #12
 800f618:	6003      	str	r3, [r0, #0]
 800f61a:	e7d6      	b.n	800f5ca <_free_r+0x26>
 800f61c:	6825      	ldr	r5, [r4, #0]
 800f61e:	1961      	adds	r1, r4, r5
 800f620:	428b      	cmp	r3, r1
 800f622:	bf04      	itt	eq
 800f624:	6819      	ldreq	r1, [r3, #0]
 800f626:	685b      	ldreq	r3, [r3, #4]
 800f628:	6063      	str	r3, [r4, #4]
 800f62a:	bf04      	itt	eq
 800f62c:	1949      	addeq	r1, r1, r5
 800f62e:	6021      	streq	r1, [r4, #0]
 800f630:	6054      	str	r4, [r2, #4]
 800f632:	e7ca      	b.n	800f5ca <_free_r+0x26>
 800f634:	b003      	add	sp, #12
 800f636:	bd30      	pop	{r4, r5, pc}
 800f638:	20000ae4 	.word	0x20000ae4

0800f63c <sbrk_aligned>:
 800f63c:	b570      	push	{r4, r5, r6, lr}
 800f63e:	4e0e      	ldr	r6, [pc, #56]	; (800f678 <sbrk_aligned+0x3c>)
 800f640:	460c      	mov	r4, r1
 800f642:	6831      	ldr	r1, [r6, #0]
 800f644:	4605      	mov	r5, r0
 800f646:	b911      	cbnz	r1, 800f64e <sbrk_aligned+0x12>
 800f648:	f000 f9e6 	bl	800fa18 <_sbrk_r>
 800f64c:	6030      	str	r0, [r6, #0]
 800f64e:	4621      	mov	r1, r4
 800f650:	4628      	mov	r0, r5
 800f652:	f000 f9e1 	bl	800fa18 <_sbrk_r>
 800f656:	1c43      	adds	r3, r0, #1
 800f658:	d00a      	beq.n	800f670 <sbrk_aligned+0x34>
 800f65a:	1cc4      	adds	r4, r0, #3
 800f65c:	f024 0403 	bic.w	r4, r4, #3
 800f660:	42a0      	cmp	r0, r4
 800f662:	d007      	beq.n	800f674 <sbrk_aligned+0x38>
 800f664:	1a21      	subs	r1, r4, r0
 800f666:	4628      	mov	r0, r5
 800f668:	f000 f9d6 	bl	800fa18 <_sbrk_r>
 800f66c:	3001      	adds	r0, #1
 800f66e:	d101      	bne.n	800f674 <sbrk_aligned+0x38>
 800f670:	f04f 34ff 	mov.w	r4, #4294967295
 800f674:	4620      	mov	r0, r4
 800f676:	bd70      	pop	{r4, r5, r6, pc}
 800f678:	20000ae8 	.word	0x20000ae8

0800f67c <_malloc_r>:
 800f67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f680:	1ccd      	adds	r5, r1, #3
 800f682:	f025 0503 	bic.w	r5, r5, #3
 800f686:	3508      	adds	r5, #8
 800f688:	2d0c      	cmp	r5, #12
 800f68a:	bf38      	it	cc
 800f68c:	250c      	movcc	r5, #12
 800f68e:	2d00      	cmp	r5, #0
 800f690:	4607      	mov	r7, r0
 800f692:	db01      	blt.n	800f698 <_malloc_r+0x1c>
 800f694:	42a9      	cmp	r1, r5
 800f696:	d905      	bls.n	800f6a4 <_malloc_r+0x28>
 800f698:	230c      	movs	r3, #12
 800f69a:	603b      	str	r3, [r7, #0]
 800f69c:	2600      	movs	r6, #0
 800f69e:	4630      	mov	r0, r6
 800f6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a4:	4e2e      	ldr	r6, [pc, #184]	; (800f760 <_malloc_r+0xe4>)
 800f6a6:	f000 faa3 	bl	800fbf0 <__malloc_lock>
 800f6aa:	6833      	ldr	r3, [r6, #0]
 800f6ac:	461c      	mov	r4, r3
 800f6ae:	bb34      	cbnz	r4, 800f6fe <_malloc_r+0x82>
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	f7ff ffc2 	bl	800f63c <sbrk_aligned>
 800f6b8:	1c43      	adds	r3, r0, #1
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	d14d      	bne.n	800f75a <_malloc_r+0xde>
 800f6be:	6834      	ldr	r4, [r6, #0]
 800f6c0:	4626      	mov	r6, r4
 800f6c2:	2e00      	cmp	r6, #0
 800f6c4:	d140      	bne.n	800f748 <_malloc_r+0xcc>
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	eb04 0803 	add.w	r8, r4, r3
 800f6d0:	f000 f9a2 	bl	800fa18 <_sbrk_r>
 800f6d4:	4580      	cmp	r8, r0
 800f6d6:	d13a      	bne.n	800f74e <_malloc_r+0xd2>
 800f6d8:	6821      	ldr	r1, [r4, #0]
 800f6da:	3503      	adds	r5, #3
 800f6dc:	1a6d      	subs	r5, r5, r1
 800f6de:	f025 0503 	bic.w	r5, r5, #3
 800f6e2:	3508      	adds	r5, #8
 800f6e4:	2d0c      	cmp	r5, #12
 800f6e6:	bf38      	it	cc
 800f6e8:	250c      	movcc	r5, #12
 800f6ea:	4629      	mov	r1, r5
 800f6ec:	4638      	mov	r0, r7
 800f6ee:	f7ff ffa5 	bl	800f63c <sbrk_aligned>
 800f6f2:	3001      	adds	r0, #1
 800f6f4:	d02b      	beq.n	800f74e <_malloc_r+0xd2>
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	442b      	add	r3, r5
 800f6fa:	6023      	str	r3, [r4, #0]
 800f6fc:	e00e      	b.n	800f71c <_malloc_r+0xa0>
 800f6fe:	6822      	ldr	r2, [r4, #0]
 800f700:	1b52      	subs	r2, r2, r5
 800f702:	d41e      	bmi.n	800f742 <_malloc_r+0xc6>
 800f704:	2a0b      	cmp	r2, #11
 800f706:	d916      	bls.n	800f736 <_malloc_r+0xba>
 800f708:	1961      	adds	r1, r4, r5
 800f70a:	42a3      	cmp	r3, r4
 800f70c:	6025      	str	r5, [r4, #0]
 800f70e:	bf18      	it	ne
 800f710:	6059      	strne	r1, [r3, #4]
 800f712:	6863      	ldr	r3, [r4, #4]
 800f714:	bf08      	it	eq
 800f716:	6031      	streq	r1, [r6, #0]
 800f718:	5162      	str	r2, [r4, r5]
 800f71a:	604b      	str	r3, [r1, #4]
 800f71c:	4638      	mov	r0, r7
 800f71e:	f104 060b 	add.w	r6, r4, #11
 800f722:	f000 fa6b 	bl	800fbfc <__malloc_unlock>
 800f726:	f026 0607 	bic.w	r6, r6, #7
 800f72a:	1d23      	adds	r3, r4, #4
 800f72c:	1af2      	subs	r2, r6, r3
 800f72e:	d0b6      	beq.n	800f69e <_malloc_r+0x22>
 800f730:	1b9b      	subs	r3, r3, r6
 800f732:	50a3      	str	r3, [r4, r2]
 800f734:	e7b3      	b.n	800f69e <_malloc_r+0x22>
 800f736:	6862      	ldr	r2, [r4, #4]
 800f738:	42a3      	cmp	r3, r4
 800f73a:	bf0c      	ite	eq
 800f73c:	6032      	streq	r2, [r6, #0]
 800f73e:	605a      	strne	r2, [r3, #4]
 800f740:	e7ec      	b.n	800f71c <_malloc_r+0xa0>
 800f742:	4623      	mov	r3, r4
 800f744:	6864      	ldr	r4, [r4, #4]
 800f746:	e7b2      	b.n	800f6ae <_malloc_r+0x32>
 800f748:	4634      	mov	r4, r6
 800f74a:	6876      	ldr	r6, [r6, #4]
 800f74c:	e7b9      	b.n	800f6c2 <_malloc_r+0x46>
 800f74e:	230c      	movs	r3, #12
 800f750:	603b      	str	r3, [r7, #0]
 800f752:	4638      	mov	r0, r7
 800f754:	f000 fa52 	bl	800fbfc <__malloc_unlock>
 800f758:	e7a1      	b.n	800f69e <_malloc_r+0x22>
 800f75a:	6025      	str	r5, [r4, #0]
 800f75c:	e7de      	b.n	800f71c <_malloc_r+0xa0>
 800f75e:	bf00      	nop
 800f760:	20000ae4 	.word	0x20000ae4

0800f764 <__sfputc_r>:
 800f764:	6893      	ldr	r3, [r2, #8]
 800f766:	3b01      	subs	r3, #1
 800f768:	2b00      	cmp	r3, #0
 800f76a:	b410      	push	{r4}
 800f76c:	6093      	str	r3, [r2, #8]
 800f76e:	da08      	bge.n	800f782 <__sfputc_r+0x1e>
 800f770:	6994      	ldr	r4, [r2, #24]
 800f772:	42a3      	cmp	r3, r4
 800f774:	db01      	blt.n	800f77a <__sfputc_r+0x16>
 800f776:	290a      	cmp	r1, #10
 800f778:	d103      	bne.n	800f782 <__sfputc_r+0x1e>
 800f77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f77e:	f7fe ba01 	b.w	800db84 <__swbuf_r>
 800f782:	6813      	ldr	r3, [r2, #0]
 800f784:	1c58      	adds	r0, r3, #1
 800f786:	6010      	str	r0, [r2, #0]
 800f788:	7019      	strb	r1, [r3, #0]
 800f78a:	4608      	mov	r0, r1
 800f78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <__sfputs_r>:
 800f792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f794:	4606      	mov	r6, r0
 800f796:	460f      	mov	r7, r1
 800f798:	4614      	mov	r4, r2
 800f79a:	18d5      	adds	r5, r2, r3
 800f79c:	42ac      	cmp	r4, r5
 800f79e:	d101      	bne.n	800f7a4 <__sfputs_r+0x12>
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	e007      	b.n	800f7b4 <__sfputs_r+0x22>
 800f7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a8:	463a      	mov	r2, r7
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	f7ff ffda 	bl	800f764 <__sfputc_r>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	d1f3      	bne.n	800f79c <__sfputs_r+0xa>
 800f7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7b8 <_vfiprintf_r>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	460d      	mov	r5, r1
 800f7be:	b09d      	sub	sp, #116	; 0x74
 800f7c0:	4614      	mov	r4, r2
 800f7c2:	4698      	mov	r8, r3
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	b118      	cbz	r0, 800f7d0 <_vfiprintf_r+0x18>
 800f7c8:	6983      	ldr	r3, [r0, #24]
 800f7ca:	b90b      	cbnz	r3, 800f7d0 <_vfiprintf_r+0x18>
 800f7cc:	f7ff fa30 	bl	800ec30 <__sinit>
 800f7d0:	4b89      	ldr	r3, [pc, #548]	; (800f9f8 <_vfiprintf_r+0x240>)
 800f7d2:	429d      	cmp	r5, r3
 800f7d4:	d11b      	bne.n	800f80e <_vfiprintf_r+0x56>
 800f7d6:	6875      	ldr	r5, [r6, #4]
 800f7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7da:	07d9      	lsls	r1, r3, #31
 800f7dc:	d405      	bmi.n	800f7ea <_vfiprintf_r+0x32>
 800f7de:	89ab      	ldrh	r3, [r5, #12]
 800f7e0:	059a      	lsls	r2, r3, #22
 800f7e2:	d402      	bmi.n	800f7ea <_vfiprintf_r+0x32>
 800f7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7e6:	f7ff fac6 	bl	800ed76 <__retarget_lock_acquire_recursive>
 800f7ea:	89ab      	ldrh	r3, [r5, #12]
 800f7ec:	071b      	lsls	r3, r3, #28
 800f7ee:	d501      	bpl.n	800f7f4 <_vfiprintf_r+0x3c>
 800f7f0:	692b      	ldr	r3, [r5, #16]
 800f7f2:	b9eb      	cbnz	r3, 800f830 <_vfiprintf_r+0x78>
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	f7fe fa16 	bl	800dc28 <__swsetup_r>
 800f7fc:	b1c0      	cbz	r0, 800f830 <_vfiprintf_r+0x78>
 800f7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f800:	07dc      	lsls	r4, r3, #31
 800f802:	d50e      	bpl.n	800f822 <_vfiprintf_r+0x6a>
 800f804:	f04f 30ff 	mov.w	r0, #4294967295
 800f808:	b01d      	add	sp, #116	; 0x74
 800f80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80e:	4b7b      	ldr	r3, [pc, #492]	; (800f9fc <_vfiprintf_r+0x244>)
 800f810:	429d      	cmp	r5, r3
 800f812:	d101      	bne.n	800f818 <_vfiprintf_r+0x60>
 800f814:	68b5      	ldr	r5, [r6, #8]
 800f816:	e7df      	b.n	800f7d8 <_vfiprintf_r+0x20>
 800f818:	4b79      	ldr	r3, [pc, #484]	; (800fa00 <_vfiprintf_r+0x248>)
 800f81a:	429d      	cmp	r5, r3
 800f81c:	bf08      	it	eq
 800f81e:	68f5      	ldreq	r5, [r6, #12]
 800f820:	e7da      	b.n	800f7d8 <_vfiprintf_r+0x20>
 800f822:	89ab      	ldrh	r3, [r5, #12]
 800f824:	0598      	lsls	r0, r3, #22
 800f826:	d4ed      	bmi.n	800f804 <_vfiprintf_r+0x4c>
 800f828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f82a:	f7ff faa5 	bl	800ed78 <__retarget_lock_release_recursive>
 800f82e:	e7e9      	b.n	800f804 <_vfiprintf_r+0x4c>
 800f830:	2300      	movs	r3, #0
 800f832:	9309      	str	r3, [sp, #36]	; 0x24
 800f834:	2320      	movs	r3, #32
 800f836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f83e:	2330      	movs	r3, #48	; 0x30
 800f840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa04 <_vfiprintf_r+0x24c>
 800f844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f848:	f04f 0901 	mov.w	r9, #1
 800f84c:	4623      	mov	r3, r4
 800f84e:	469a      	mov	sl, r3
 800f850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f854:	b10a      	cbz	r2, 800f85a <_vfiprintf_r+0xa2>
 800f856:	2a25      	cmp	r2, #37	; 0x25
 800f858:	d1f9      	bne.n	800f84e <_vfiprintf_r+0x96>
 800f85a:	ebba 0b04 	subs.w	fp, sl, r4
 800f85e:	d00b      	beq.n	800f878 <_vfiprintf_r+0xc0>
 800f860:	465b      	mov	r3, fp
 800f862:	4622      	mov	r2, r4
 800f864:	4629      	mov	r1, r5
 800f866:	4630      	mov	r0, r6
 800f868:	f7ff ff93 	bl	800f792 <__sfputs_r>
 800f86c:	3001      	adds	r0, #1
 800f86e:	f000 80aa 	beq.w	800f9c6 <_vfiprintf_r+0x20e>
 800f872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f874:	445a      	add	r2, fp
 800f876:	9209      	str	r2, [sp, #36]	; 0x24
 800f878:	f89a 3000 	ldrb.w	r3, [sl]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f000 80a2 	beq.w	800f9c6 <_vfiprintf_r+0x20e>
 800f882:	2300      	movs	r3, #0
 800f884:	f04f 32ff 	mov.w	r2, #4294967295
 800f888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f88c:	f10a 0a01 	add.w	sl, sl, #1
 800f890:	9304      	str	r3, [sp, #16]
 800f892:	9307      	str	r3, [sp, #28]
 800f894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f898:	931a      	str	r3, [sp, #104]	; 0x68
 800f89a:	4654      	mov	r4, sl
 800f89c:	2205      	movs	r2, #5
 800f89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8a2:	4858      	ldr	r0, [pc, #352]	; (800fa04 <_vfiprintf_r+0x24c>)
 800f8a4:	f7f0 fcc4 	bl	8000230 <memchr>
 800f8a8:	9a04      	ldr	r2, [sp, #16]
 800f8aa:	b9d8      	cbnz	r0, 800f8e4 <_vfiprintf_r+0x12c>
 800f8ac:	06d1      	lsls	r1, r2, #27
 800f8ae:	bf44      	itt	mi
 800f8b0:	2320      	movmi	r3, #32
 800f8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8b6:	0713      	lsls	r3, r2, #28
 800f8b8:	bf44      	itt	mi
 800f8ba:	232b      	movmi	r3, #43	; 0x2b
 800f8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800f8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c6:	d015      	beq.n	800f8f4 <_vfiprintf_r+0x13c>
 800f8c8:	9a07      	ldr	r2, [sp, #28]
 800f8ca:	4654      	mov	r4, sl
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	f04f 0c0a 	mov.w	ip, #10
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8d8:	3b30      	subs	r3, #48	; 0x30
 800f8da:	2b09      	cmp	r3, #9
 800f8dc:	d94e      	bls.n	800f97c <_vfiprintf_r+0x1c4>
 800f8de:	b1b0      	cbz	r0, 800f90e <_vfiprintf_r+0x156>
 800f8e0:	9207      	str	r2, [sp, #28]
 800f8e2:	e014      	b.n	800f90e <_vfiprintf_r+0x156>
 800f8e4:	eba0 0308 	sub.w	r3, r0, r8
 800f8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	9304      	str	r3, [sp, #16]
 800f8f0:	46a2      	mov	sl, r4
 800f8f2:	e7d2      	b.n	800f89a <_vfiprintf_r+0xe2>
 800f8f4:	9b03      	ldr	r3, [sp, #12]
 800f8f6:	1d19      	adds	r1, r3, #4
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	9103      	str	r1, [sp, #12]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	bfbb      	ittet	lt
 800f900:	425b      	neglt	r3, r3
 800f902:	f042 0202 	orrlt.w	r2, r2, #2
 800f906:	9307      	strge	r3, [sp, #28]
 800f908:	9307      	strlt	r3, [sp, #28]
 800f90a:	bfb8      	it	lt
 800f90c:	9204      	strlt	r2, [sp, #16]
 800f90e:	7823      	ldrb	r3, [r4, #0]
 800f910:	2b2e      	cmp	r3, #46	; 0x2e
 800f912:	d10c      	bne.n	800f92e <_vfiprintf_r+0x176>
 800f914:	7863      	ldrb	r3, [r4, #1]
 800f916:	2b2a      	cmp	r3, #42	; 0x2a
 800f918:	d135      	bne.n	800f986 <_vfiprintf_r+0x1ce>
 800f91a:	9b03      	ldr	r3, [sp, #12]
 800f91c:	1d1a      	adds	r2, r3, #4
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	9203      	str	r2, [sp, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	bfb8      	it	lt
 800f926:	f04f 33ff 	movlt.w	r3, #4294967295
 800f92a:	3402      	adds	r4, #2
 800f92c:	9305      	str	r3, [sp, #20]
 800f92e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa14 <_vfiprintf_r+0x25c>
 800f932:	7821      	ldrb	r1, [r4, #0]
 800f934:	2203      	movs	r2, #3
 800f936:	4650      	mov	r0, sl
 800f938:	f7f0 fc7a 	bl	8000230 <memchr>
 800f93c:	b140      	cbz	r0, 800f950 <_vfiprintf_r+0x198>
 800f93e:	2340      	movs	r3, #64	; 0x40
 800f940:	eba0 000a 	sub.w	r0, r0, sl
 800f944:	fa03 f000 	lsl.w	r0, r3, r0
 800f948:	9b04      	ldr	r3, [sp, #16]
 800f94a:	4303      	orrs	r3, r0
 800f94c:	3401      	adds	r4, #1
 800f94e:	9304      	str	r3, [sp, #16]
 800f950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f954:	482c      	ldr	r0, [pc, #176]	; (800fa08 <_vfiprintf_r+0x250>)
 800f956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f95a:	2206      	movs	r2, #6
 800f95c:	f7f0 fc68 	bl	8000230 <memchr>
 800f960:	2800      	cmp	r0, #0
 800f962:	d03f      	beq.n	800f9e4 <_vfiprintf_r+0x22c>
 800f964:	4b29      	ldr	r3, [pc, #164]	; (800fa0c <_vfiprintf_r+0x254>)
 800f966:	bb1b      	cbnz	r3, 800f9b0 <_vfiprintf_r+0x1f8>
 800f968:	9b03      	ldr	r3, [sp, #12]
 800f96a:	3307      	adds	r3, #7
 800f96c:	f023 0307 	bic.w	r3, r3, #7
 800f970:	3308      	adds	r3, #8
 800f972:	9303      	str	r3, [sp, #12]
 800f974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f976:	443b      	add	r3, r7
 800f978:	9309      	str	r3, [sp, #36]	; 0x24
 800f97a:	e767      	b.n	800f84c <_vfiprintf_r+0x94>
 800f97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f980:	460c      	mov	r4, r1
 800f982:	2001      	movs	r0, #1
 800f984:	e7a5      	b.n	800f8d2 <_vfiprintf_r+0x11a>
 800f986:	2300      	movs	r3, #0
 800f988:	3401      	adds	r4, #1
 800f98a:	9305      	str	r3, [sp, #20]
 800f98c:	4619      	mov	r1, r3
 800f98e:	f04f 0c0a 	mov.w	ip, #10
 800f992:	4620      	mov	r0, r4
 800f994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f998:	3a30      	subs	r2, #48	; 0x30
 800f99a:	2a09      	cmp	r2, #9
 800f99c:	d903      	bls.n	800f9a6 <_vfiprintf_r+0x1ee>
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d0c5      	beq.n	800f92e <_vfiprintf_r+0x176>
 800f9a2:	9105      	str	r1, [sp, #20]
 800f9a4:	e7c3      	b.n	800f92e <_vfiprintf_r+0x176>
 800f9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	e7f0      	b.n	800f992 <_vfiprintf_r+0x1da>
 800f9b0:	ab03      	add	r3, sp, #12
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	462a      	mov	r2, r5
 800f9b6:	4b16      	ldr	r3, [pc, #88]	; (800fa10 <_vfiprintf_r+0x258>)
 800f9b8:	a904      	add	r1, sp, #16
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f7fd fbbc 	bl	800d138 <_printf_float>
 800f9c0:	4607      	mov	r7, r0
 800f9c2:	1c78      	adds	r0, r7, #1
 800f9c4:	d1d6      	bne.n	800f974 <_vfiprintf_r+0x1bc>
 800f9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9c8:	07d9      	lsls	r1, r3, #31
 800f9ca:	d405      	bmi.n	800f9d8 <_vfiprintf_r+0x220>
 800f9cc:	89ab      	ldrh	r3, [r5, #12]
 800f9ce:	059a      	lsls	r2, r3, #22
 800f9d0:	d402      	bmi.n	800f9d8 <_vfiprintf_r+0x220>
 800f9d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9d4:	f7ff f9d0 	bl	800ed78 <__retarget_lock_release_recursive>
 800f9d8:	89ab      	ldrh	r3, [r5, #12]
 800f9da:	065b      	lsls	r3, r3, #25
 800f9dc:	f53f af12 	bmi.w	800f804 <_vfiprintf_r+0x4c>
 800f9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9e2:	e711      	b.n	800f808 <_vfiprintf_r+0x50>
 800f9e4:	ab03      	add	r3, sp, #12
 800f9e6:	9300      	str	r3, [sp, #0]
 800f9e8:	462a      	mov	r2, r5
 800f9ea:	4b09      	ldr	r3, [pc, #36]	; (800fa10 <_vfiprintf_r+0x258>)
 800f9ec:	a904      	add	r1, sp, #16
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f7fd fe46 	bl	800d680 <_printf_i>
 800f9f4:	e7e4      	b.n	800f9c0 <_vfiprintf_r+0x208>
 800f9f6:	bf00      	nop
 800f9f8:	0800ffc4 	.word	0x0800ffc4
 800f9fc:	0800ffe4 	.word	0x0800ffe4
 800fa00:	0800ffa4 	.word	0x0800ffa4
 800fa04:	0801015c 	.word	0x0801015c
 800fa08:	08010166 	.word	0x08010166
 800fa0c:	0800d139 	.word	0x0800d139
 800fa10:	0800f793 	.word	0x0800f793
 800fa14:	08010162 	.word	0x08010162

0800fa18 <_sbrk_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4d06      	ldr	r5, [pc, #24]	; (800fa34 <_sbrk_r+0x1c>)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4608      	mov	r0, r1
 800fa22:	602b      	str	r3, [r5, #0]
 800fa24:	f7f5 fb5a 	bl	80050dc <_sbrk>
 800fa28:	1c43      	adds	r3, r0, #1
 800fa2a:	d102      	bne.n	800fa32 <_sbrk_r+0x1a>
 800fa2c:	682b      	ldr	r3, [r5, #0]
 800fa2e:	b103      	cbz	r3, 800fa32 <_sbrk_r+0x1a>
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	bd38      	pop	{r3, r4, r5, pc}
 800fa34:	20000aec 	.word	0x20000aec

0800fa38 <__sread>:
 800fa38:	b510      	push	{r4, lr}
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa40:	f000 f8e2 	bl	800fc08 <_read_r>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	bfab      	itete	ge
 800fa48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa4a:	89a3      	ldrhlt	r3, [r4, #12]
 800fa4c:	181b      	addge	r3, r3, r0
 800fa4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa52:	bfac      	ite	ge
 800fa54:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa56:	81a3      	strhlt	r3, [r4, #12]
 800fa58:	bd10      	pop	{r4, pc}

0800fa5a <__swrite>:
 800fa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5e:	461f      	mov	r7, r3
 800fa60:	898b      	ldrh	r3, [r1, #12]
 800fa62:	05db      	lsls	r3, r3, #23
 800fa64:	4605      	mov	r5, r0
 800fa66:	460c      	mov	r4, r1
 800fa68:	4616      	mov	r6, r2
 800fa6a:	d505      	bpl.n	800fa78 <__swrite+0x1e>
 800fa6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa70:	2302      	movs	r3, #2
 800fa72:	2200      	movs	r2, #0
 800fa74:	f000 f898 	bl	800fba8 <_lseek_r>
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa82:	81a3      	strh	r3, [r4, #12]
 800fa84:	4632      	mov	r2, r6
 800fa86:	463b      	mov	r3, r7
 800fa88:	4628      	mov	r0, r5
 800fa8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa8e:	f000 b817 	b.w	800fac0 <_write_r>

0800fa92 <__sseek>:
 800fa92:	b510      	push	{r4, lr}
 800fa94:	460c      	mov	r4, r1
 800fa96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa9a:	f000 f885 	bl	800fba8 <_lseek_r>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	bf15      	itete	ne
 800faa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800faa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800faaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800faae:	81a3      	strheq	r3, [r4, #12]
 800fab0:	bf18      	it	ne
 800fab2:	81a3      	strhne	r3, [r4, #12]
 800fab4:	bd10      	pop	{r4, pc}

0800fab6 <__sclose>:
 800fab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faba:	f000 b831 	b.w	800fb20 <_close_r>
	...

0800fac0 <_write_r>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4d07      	ldr	r5, [pc, #28]	; (800fae0 <_write_r+0x20>)
 800fac4:	4604      	mov	r4, r0
 800fac6:	4608      	mov	r0, r1
 800fac8:	4611      	mov	r1, r2
 800faca:	2200      	movs	r2, #0
 800facc:	602a      	str	r2, [r5, #0]
 800face:	461a      	mov	r2, r3
 800fad0:	f7f5 fab3 	bl	800503a <_write>
 800fad4:	1c43      	adds	r3, r0, #1
 800fad6:	d102      	bne.n	800fade <_write_r+0x1e>
 800fad8:	682b      	ldr	r3, [r5, #0]
 800fada:	b103      	cbz	r3, 800fade <_write_r+0x1e>
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	bd38      	pop	{r3, r4, r5, pc}
 800fae0:	20000aec 	.word	0x20000aec

0800fae4 <__assert_func>:
 800fae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fae6:	4614      	mov	r4, r2
 800fae8:	461a      	mov	r2, r3
 800faea:	4b09      	ldr	r3, [pc, #36]	; (800fb10 <__assert_func+0x2c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4605      	mov	r5, r0
 800faf0:	68d8      	ldr	r0, [r3, #12]
 800faf2:	b14c      	cbz	r4, 800fb08 <__assert_func+0x24>
 800faf4:	4b07      	ldr	r3, [pc, #28]	; (800fb14 <__assert_func+0x30>)
 800faf6:	9100      	str	r1, [sp, #0]
 800faf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fafc:	4906      	ldr	r1, [pc, #24]	; (800fb18 <__assert_func+0x34>)
 800fafe:	462b      	mov	r3, r5
 800fb00:	f000 f81e 	bl	800fb40 <fiprintf>
 800fb04:	f000 f89f 	bl	800fc46 <abort>
 800fb08:	4b04      	ldr	r3, [pc, #16]	; (800fb1c <__assert_func+0x38>)
 800fb0a:	461c      	mov	r4, r3
 800fb0c:	e7f3      	b.n	800faf6 <__assert_func+0x12>
 800fb0e:	bf00      	nop
 800fb10:	20000014 	.word	0x20000014
 800fb14:	0801016d 	.word	0x0801016d
 800fb18:	0801017a 	.word	0x0801017a
 800fb1c:	080101a8 	.word	0x080101a8

0800fb20 <_close_r>:
 800fb20:	b538      	push	{r3, r4, r5, lr}
 800fb22:	4d06      	ldr	r5, [pc, #24]	; (800fb3c <_close_r+0x1c>)
 800fb24:	2300      	movs	r3, #0
 800fb26:	4604      	mov	r4, r0
 800fb28:	4608      	mov	r0, r1
 800fb2a:	602b      	str	r3, [r5, #0]
 800fb2c:	f7f5 faa1 	bl	8005072 <_close>
 800fb30:	1c43      	adds	r3, r0, #1
 800fb32:	d102      	bne.n	800fb3a <_close_r+0x1a>
 800fb34:	682b      	ldr	r3, [r5, #0]
 800fb36:	b103      	cbz	r3, 800fb3a <_close_r+0x1a>
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	bd38      	pop	{r3, r4, r5, pc}
 800fb3c:	20000aec 	.word	0x20000aec

0800fb40 <fiprintf>:
 800fb40:	b40e      	push	{r1, r2, r3}
 800fb42:	b503      	push	{r0, r1, lr}
 800fb44:	4601      	mov	r1, r0
 800fb46:	ab03      	add	r3, sp, #12
 800fb48:	4805      	ldr	r0, [pc, #20]	; (800fb60 <fiprintf+0x20>)
 800fb4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb4e:	6800      	ldr	r0, [r0, #0]
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	f7ff fe31 	bl	800f7b8 <_vfiprintf_r>
 800fb56:	b002      	add	sp, #8
 800fb58:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb5c:	b003      	add	sp, #12
 800fb5e:	4770      	bx	lr
 800fb60:	20000014 	.word	0x20000014

0800fb64 <_fstat_r>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4d07      	ldr	r5, [pc, #28]	; (800fb84 <_fstat_r+0x20>)
 800fb68:	2300      	movs	r3, #0
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	4608      	mov	r0, r1
 800fb6e:	4611      	mov	r1, r2
 800fb70:	602b      	str	r3, [r5, #0]
 800fb72:	f7f5 fa8a 	bl	800508a <_fstat>
 800fb76:	1c43      	adds	r3, r0, #1
 800fb78:	d102      	bne.n	800fb80 <_fstat_r+0x1c>
 800fb7a:	682b      	ldr	r3, [r5, #0]
 800fb7c:	b103      	cbz	r3, 800fb80 <_fstat_r+0x1c>
 800fb7e:	6023      	str	r3, [r4, #0]
 800fb80:	bd38      	pop	{r3, r4, r5, pc}
 800fb82:	bf00      	nop
 800fb84:	20000aec 	.word	0x20000aec

0800fb88 <_isatty_r>:
 800fb88:	b538      	push	{r3, r4, r5, lr}
 800fb8a:	4d06      	ldr	r5, [pc, #24]	; (800fba4 <_isatty_r+0x1c>)
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	4604      	mov	r4, r0
 800fb90:	4608      	mov	r0, r1
 800fb92:	602b      	str	r3, [r5, #0]
 800fb94:	f7f5 fa89 	bl	80050aa <_isatty>
 800fb98:	1c43      	adds	r3, r0, #1
 800fb9a:	d102      	bne.n	800fba2 <_isatty_r+0x1a>
 800fb9c:	682b      	ldr	r3, [r5, #0]
 800fb9e:	b103      	cbz	r3, 800fba2 <_isatty_r+0x1a>
 800fba0:	6023      	str	r3, [r4, #0]
 800fba2:	bd38      	pop	{r3, r4, r5, pc}
 800fba4:	20000aec 	.word	0x20000aec

0800fba8 <_lseek_r>:
 800fba8:	b538      	push	{r3, r4, r5, lr}
 800fbaa:	4d07      	ldr	r5, [pc, #28]	; (800fbc8 <_lseek_r+0x20>)
 800fbac:	4604      	mov	r4, r0
 800fbae:	4608      	mov	r0, r1
 800fbb0:	4611      	mov	r1, r2
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	602a      	str	r2, [r5, #0]
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	f7f5 fa82 	bl	80050c0 <_lseek>
 800fbbc:	1c43      	adds	r3, r0, #1
 800fbbe:	d102      	bne.n	800fbc6 <_lseek_r+0x1e>
 800fbc0:	682b      	ldr	r3, [r5, #0]
 800fbc2:	b103      	cbz	r3, 800fbc6 <_lseek_r+0x1e>
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	bd38      	pop	{r3, r4, r5, pc}
 800fbc8:	20000aec 	.word	0x20000aec

0800fbcc <__ascii_mbtowc>:
 800fbcc:	b082      	sub	sp, #8
 800fbce:	b901      	cbnz	r1, 800fbd2 <__ascii_mbtowc+0x6>
 800fbd0:	a901      	add	r1, sp, #4
 800fbd2:	b142      	cbz	r2, 800fbe6 <__ascii_mbtowc+0x1a>
 800fbd4:	b14b      	cbz	r3, 800fbea <__ascii_mbtowc+0x1e>
 800fbd6:	7813      	ldrb	r3, [r2, #0]
 800fbd8:	600b      	str	r3, [r1, #0]
 800fbda:	7812      	ldrb	r2, [r2, #0]
 800fbdc:	1e10      	subs	r0, r2, #0
 800fbde:	bf18      	it	ne
 800fbe0:	2001      	movne	r0, #1
 800fbe2:	b002      	add	sp, #8
 800fbe4:	4770      	bx	lr
 800fbe6:	4610      	mov	r0, r2
 800fbe8:	e7fb      	b.n	800fbe2 <__ascii_mbtowc+0x16>
 800fbea:	f06f 0001 	mvn.w	r0, #1
 800fbee:	e7f8      	b.n	800fbe2 <__ascii_mbtowc+0x16>

0800fbf0 <__malloc_lock>:
 800fbf0:	4801      	ldr	r0, [pc, #4]	; (800fbf8 <__malloc_lock+0x8>)
 800fbf2:	f7ff b8c0 	b.w	800ed76 <__retarget_lock_acquire_recursive>
 800fbf6:	bf00      	nop
 800fbf8:	20000ae0 	.word	0x20000ae0

0800fbfc <__malloc_unlock>:
 800fbfc:	4801      	ldr	r0, [pc, #4]	; (800fc04 <__malloc_unlock+0x8>)
 800fbfe:	f7ff b8bb 	b.w	800ed78 <__retarget_lock_release_recursive>
 800fc02:	bf00      	nop
 800fc04:	20000ae0 	.word	0x20000ae0

0800fc08 <_read_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d07      	ldr	r5, [pc, #28]	; (800fc28 <_read_r+0x20>)
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	4608      	mov	r0, r1
 800fc10:	4611      	mov	r1, r2
 800fc12:	2200      	movs	r2, #0
 800fc14:	602a      	str	r2, [r5, #0]
 800fc16:	461a      	mov	r2, r3
 800fc18:	f7f5 f9f2 	bl	8005000 <_read>
 800fc1c:	1c43      	adds	r3, r0, #1
 800fc1e:	d102      	bne.n	800fc26 <_read_r+0x1e>
 800fc20:	682b      	ldr	r3, [r5, #0]
 800fc22:	b103      	cbz	r3, 800fc26 <_read_r+0x1e>
 800fc24:	6023      	str	r3, [r4, #0]
 800fc26:	bd38      	pop	{r3, r4, r5, pc}
 800fc28:	20000aec 	.word	0x20000aec

0800fc2c <__ascii_wctomb>:
 800fc2c:	b149      	cbz	r1, 800fc42 <__ascii_wctomb+0x16>
 800fc2e:	2aff      	cmp	r2, #255	; 0xff
 800fc30:	bf85      	ittet	hi
 800fc32:	238a      	movhi	r3, #138	; 0x8a
 800fc34:	6003      	strhi	r3, [r0, #0]
 800fc36:	700a      	strbls	r2, [r1, #0]
 800fc38:	f04f 30ff 	movhi.w	r0, #4294967295
 800fc3c:	bf98      	it	ls
 800fc3e:	2001      	movls	r0, #1
 800fc40:	4770      	bx	lr
 800fc42:	4608      	mov	r0, r1
 800fc44:	4770      	bx	lr

0800fc46 <abort>:
 800fc46:	b508      	push	{r3, lr}
 800fc48:	2006      	movs	r0, #6
 800fc4a:	f000 f82b 	bl	800fca4 <raise>
 800fc4e:	2001      	movs	r0, #1
 800fc50:	f7f5 f9cc 	bl	8004fec <_exit>

0800fc54 <_raise_r>:
 800fc54:	291f      	cmp	r1, #31
 800fc56:	b538      	push	{r3, r4, r5, lr}
 800fc58:	4604      	mov	r4, r0
 800fc5a:	460d      	mov	r5, r1
 800fc5c:	d904      	bls.n	800fc68 <_raise_r+0x14>
 800fc5e:	2316      	movs	r3, #22
 800fc60:	6003      	str	r3, [r0, #0]
 800fc62:	f04f 30ff 	mov.w	r0, #4294967295
 800fc66:	bd38      	pop	{r3, r4, r5, pc}
 800fc68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fc6a:	b112      	cbz	r2, 800fc72 <_raise_r+0x1e>
 800fc6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc70:	b94b      	cbnz	r3, 800fc86 <_raise_r+0x32>
 800fc72:	4620      	mov	r0, r4
 800fc74:	f000 f830 	bl	800fcd8 <_getpid_r>
 800fc78:	462a      	mov	r2, r5
 800fc7a:	4601      	mov	r1, r0
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc82:	f000 b817 	b.w	800fcb4 <_kill_r>
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d00a      	beq.n	800fca0 <_raise_r+0x4c>
 800fc8a:	1c59      	adds	r1, r3, #1
 800fc8c:	d103      	bne.n	800fc96 <_raise_r+0x42>
 800fc8e:	2316      	movs	r3, #22
 800fc90:	6003      	str	r3, [r0, #0]
 800fc92:	2001      	movs	r0, #1
 800fc94:	e7e7      	b.n	800fc66 <_raise_r+0x12>
 800fc96:	2400      	movs	r4, #0
 800fc98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	4798      	blx	r3
 800fca0:	2000      	movs	r0, #0
 800fca2:	e7e0      	b.n	800fc66 <_raise_r+0x12>

0800fca4 <raise>:
 800fca4:	4b02      	ldr	r3, [pc, #8]	; (800fcb0 <raise+0xc>)
 800fca6:	4601      	mov	r1, r0
 800fca8:	6818      	ldr	r0, [r3, #0]
 800fcaa:	f7ff bfd3 	b.w	800fc54 <_raise_r>
 800fcae:	bf00      	nop
 800fcb0:	20000014 	.word	0x20000014

0800fcb4 <_kill_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d07      	ldr	r5, [pc, #28]	; (800fcd4 <_kill_r+0x20>)
 800fcb8:	2300      	movs	r3, #0
 800fcba:	4604      	mov	r4, r0
 800fcbc:	4608      	mov	r0, r1
 800fcbe:	4611      	mov	r1, r2
 800fcc0:	602b      	str	r3, [r5, #0]
 800fcc2:	f7f5 f983 	bl	8004fcc <_kill>
 800fcc6:	1c43      	adds	r3, r0, #1
 800fcc8:	d102      	bne.n	800fcd0 <_kill_r+0x1c>
 800fcca:	682b      	ldr	r3, [r5, #0]
 800fccc:	b103      	cbz	r3, 800fcd0 <_kill_r+0x1c>
 800fcce:	6023      	str	r3, [r4, #0]
 800fcd0:	bd38      	pop	{r3, r4, r5, pc}
 800fcd2:	bf00      	nop
 800fcd4:	20000aec 	.word	0x20000aec

0800fcd8 <_getpid_r>:
 800fcd8:	f7f5 b970 	b.w	8004fbc <_getpid>

0800fcdc <round>:
 800fcdc:	ec51 0b10 	vmov	r0, r1, d0
 800fce0:	b570      	push	{r4, r5, r6, lr}
 800fce2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800fce6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800fcea:	2c13      	cmp	r4, #19
 800fcec:	ee10 2a10 	vmov	r2, s0
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	dc19      	bgt.n	800fd28 <round+0x4c>
 800fcf4:	2c00      	cmp	r4, #0
 800fcf6:	da09      	bge.n	800fd0c <round+0x30>
 800fcf8:	3401      	adds	r4, #1
 800fcfa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fcfe:	d103      	bne.n	800fd08 <round+0x2c>
 800fd00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fd04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd08:	2200      	movs	r2, #0
 800fd0a:	e028      	b.n	800fd5e <round+0x82>
 800fd0c:	4d15      	ldr	r5, [pc, #84]	; (800fd64 <round+0x88>)
 800fd0e:	4125      	asrs	r5, r4
 800fd10:	ea01 0605 	and.w	r6, r1, r5
 800fd14:	4332      	orrs	r2, r6
 800fd16:	d00e      	beq.n	800fd36 <round+0x5a>
 800fd18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fd1c:	fa42 f404 	asr.w	r4, r2, r4
 800fd20:	4423      	add	r3, r4
 800fd22:	ea23 0305 	bic.w	r3, r3, r5
 800fd26:	e7ef      	b.n	800fd08 <round+0x2c>
 800fd28:	2c33      	cmp	r4, #51	; 0x33
 800fd2a:	dd07      	ble.n	800fd3c <round+0x60>
 800fd2c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fd30:	d101      	bne.n	800fd36 <round+0x5a>
 800fd32:	f7f0 fad3 	bl	80002dc <__adddf3>
 800fd36:	ec41 0b10 	vmov	d0, r0, r1
 800fd3a:	bd70      	pop	{r4, r5, r6, pc}
 800fd3c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800fd40:	f04f 35ff 	mov.w	r5, #4294967295
 800fd44:	40f5      	lsrs	r5, r6
 800fd46:	4228      	tst	r0, r5
 800fd48:	d0f5      	beq.n	800fd36 <round+0x5a>
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fd50:	fa01 f404 	lsl.w	r4, r1, r4
 800fd54:	1912      	adds	r2, r2, r4
 800fd56:	bf28      	it	cs
 800fd58:	185b      	addcs	r3, r3, r1
 800fd5a:	ea22 0205 	bic.w	r2, r2, r5
 800fd5e:	4619      	mov	r1, r3
 800fd60:	4610      	mov	r0, r2
 800fd62:	e7e8      	b.n	800fd36 <round+0x5a>
 800fd64:	000fffff 	.word	0x000fffff

0800fd68 <_init>:
 800fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6a:	bf00      	nop
 800fd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd6e:	bc08      	pop	{r3}
 800fd70:	469e      	mov	lr, r3
 800fd72:	4770      	bx	lr

0800fd74 <_fini>:
 800fd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd76:	bf00      	nop
 800fd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd7a:	bc08      	pop	{r3}
 800fd7c:	469e      	mov	lr, r3
 800fd7e:	4770      	bx	lr
