
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  080114c8  080114c8  000214c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bb8  08011bb8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011bb8  08011bb8  00021bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bc0  08011bc0  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bc0  08011bc0  00021bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bc4  08011bc4  00021bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011bc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  200001e4  08011dac  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  08011dac  00030b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000265de  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8a  00000000  00000000  000567f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  0005b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  0005d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d550  00000000  00000000  0005ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025430  00000000  00000000  0008c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011de3f  00000000  00000000  000b15e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cf427  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092f4  00000000  00000000  001cf478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080114ac 	.word	0x080114ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	080114ac 	.word	0x080114ac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fe6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 ff50 	bl	8005e98 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	ed97 0a00 	vldr	s0, [r7]
 8001000:	4618      	mov	r0, r3
 8001002:	f004 ff49 	bl	8005e98 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001016:	7a3b      	ldrb	r3, [r7, #8]
 8001018:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800101a:	7a7b      	ldrb	r3, [r7, #9]
 800101c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	75fb      	strb	r3, [r7, #23]

	can1_send(0x100, senddata_motor);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001030:	f000 fc4e 	bl	80018d0 <can1_send>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
 8001046:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f004 ff20 	bl	8005e98 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	ed97 0a00 	vldr	s0, [r7]
 8001060:	4618      	mov	r0, r3
 8001062:	f004 ff19 	bl	8005e98 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001076:	7a3b      	ldrb	r3, [r7, #8]
 8001078:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800107a:	7a7b      	ldrb	r3, [r7, #9]
 800107c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	75fb      	strb	r3, [r7, #23]

	can1_send(0x101, senddata_motor);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	f240 1001 	movw	r0, #257	; 0x101
 8001090:	f000 fc1e 	bl	80018d0 <can1_send>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fef0 	bl	8005e98 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	ed97 0a00 	vldr	s0, [r7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fee9 	bl	8005e98 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	75fb      	strb	r3, [r7, #23]

	can2_send(0x102, senddata_motor);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	f44f 7081 	mov.w	r0, #258	; 0x102
 80010f0:	f000 fc4e 	bl	8001990 <can2_send>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0a01 	vstr	s0, [r7, #4]
 8001106:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fec0 	bl	8005e98 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	ed97 0a00 	vldr	s0, [r7]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 feb9 	bl	8005e98 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001126:	7b3b      	ldrb	r3, [r7, #12]
 8001128:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001136:	7a3b      	ldrb	r3, [r7, #8]
 8001138:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800113a:	7a7b      	ldrb	r3, [r7, #9]
 800113c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	75fb      	strb	r3, [r7, #23]

	can2_send(0x103, senddata_motor);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	f240 1003 	movw	r0, #259	; 0x103
 8001150:	f000 fc1e 	bl	8001990 <can2_send>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	ed87 0a01 	vstr	s0, [r7, #4]
 8001166:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f004 fe90 	bl	8005e98 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	ed97 0a00 	vldr	s0, [r7]
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fe89 	bl	8005e98 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800118a:	7b7b      	ldrb	r3, [r7, #13]
 800118c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800119a:	7a7b      	ldrb	r3, [r7, #9]
 800119c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800119e:	7abb      	ldrb	r3, [r7, #10]
 80011a0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	75fb      	strb	r3, [r7, #23]

	can1_send(0x104, senddata_motor);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	f44f 7082 	mov.w	r0, #260	; 0x104
 80011b0:	f000 fb8e 	bl	80018d0 <can1_send>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fe62 	bl	8005e98 <float_to_uchar4>

	senddata_kick[0]=0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	743b      	strb	r3, [r7, #16]
	senddata_kick[1]=senddata_voltage[0];
 80011d8:	7b3b      	ldrb	r3, [r7, #12]
 80011da:	747b      	strb	r3, [r7, #17]
	senddata_kick[2]=senddata_voltage[1];
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	74bb      	strb	r3, [r7, #18]
	senddata_kick[3]=senddata_voltage[2];
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	74fb      	strb	r3, [r7, #19]
	senddata_kick[4]=senddata_voltage[3];
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	753b      	strb	r3, [r7, #20]
	can1_send(0x110, senddata_kick);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 7088 	mov.w	r0, #272	; 0x110
 80011f2:	f000 fb6d 	bl	80018d0 <can1_send>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	460a      	mov	r2, r1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
	/* id 1: 0=>standby   1=>charge
	 * id 2: 0=>straight  1=>chip
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	723b      	strb	r3, [r7, #8]
	senddata_kick[1]=param;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	727b      	strb	r3, [r7, #9]
	can1_send(0x110, senddata_kick);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001220:	f000 fb56 	bl	80018d0 <can1_send>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 8001236:	2300      	movs	r3, #0
 8001238:	723b      	strb	r3, [r7, #8]
	senddata_power[1]=power_on;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	727b      	strb	r3, [r7, #9]
	can1_send(0x010, senddata_power);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4619      	mov	r1, r3
 8001244:	2010      	movs	r0, #16
 8001246:	f000 fb43 	bl	80018d0 <can1_send>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	ed87 0a00 	vstr	s0, [r7]
 800125e:	71fb      	strb	r3, [r7, #7]
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	ed97 0a00 	vldr	s0, [r7]
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fe15 	bl	8005e98 <float_to_uchar4>
	senddata_power_param[0]=id;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	723b      	strb	r3, [r7, #8]
	senddata_power_param[1]=senddata_power_param_temp[0];
 8001272:	7c3b      	ldrb	r3, [r7, #16]
 8001274:	727b      	strb	r3, [r7, #9]
	senddata_power_param[2]=senddata_power_param_temp[1];
 8001276:	7c7b      	ldrb	r3, [r7, #17]
 8001278:	72bb      	strb	r3, [r7, #10]
	senddata_power_param[3]=senddata_power_param_temp[2];
 800127a:	7cbb      	ldrb	r3, [r7, #18]
 800127c:	72fb      	strb	r3, [r7, #11]
	senddata_power_param[4]=senddata_power_param_temp[3];
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	733b      	strb	r3, [r7, #12]

	can1_send(0x010, senddata_power_param);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4619      	mov	r1, r3
 8001288:	2010      	movs	r0, #16
 800128a:	f000 fb21 	bl	80018d0 <can1_send>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <actuator_buzzer+0x38>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	22fa      	movs	r2, #250	; 0xfa
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(ontime);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fec8 	bl	8006048 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <actuator_buzzer+0x38>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fec0 	bl	8006048 <HAL_Delay>

}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000868 	.word	0x20000868

080012d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00c f9c5 	bl	800d67c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_ADC1_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_ADC1_Init+0xe8>)
 800131c:	2204      	movs	r2, #4
 800131e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001328:	2201      	movs	r2, #1
 800132a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_ADC1_Init+0xe8>)
 800132e:	2201      	movs	r2, #1
 8001330:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_ADC1_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	4817      	ldr	r0, [pc, #92]	; (80013bc <MX_ADC1_Init+0xe8>)
 800135e:	f005 f8b7 	bl	80064d0 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001368:	f003 ff10 	bl	800518c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001378:	f006 f8ba 	bl	80074f0 <HAL_ADCEx_MultiModeConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001382:	f003 ff03 	bl	800518c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_ADC1_Init+0xec>)
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	2306      	movs	r3, #6
 800138c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800138e:	2307      	movs	r3, #7
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001392:	237f      	movs	r3, #127	; 0x7f
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001396:	2304      	movs	r3, #4
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_ADC1_Init+0xe8>)
 80013a4:	f005 fb48 	bl	8006a38 <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013ae:	f003 feed 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000200 	.word	0x20000200
 80013c0:	3ef08000 	.word	0x3ef08000

080013c4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00c f94d 	bl	800d67c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013e4:	4a31      	ldr	r2, [pc, #196]	; (80014ac <MX_ADC3_Init+0xe8>)
 80013e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800140a:	2204      	movs	r2, #4
 800140c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001410:	2200      	movs	r2, #0
 8001412:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001416:	2201      	movs	r2, #1
 8001418:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800141c:	2201      	movs	r2, #1
 800141e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800144c:	f005 f840 	bl	80064d0 <HAL_ADC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001456:	f003 fe99 	bl	800518c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4810      	ldr	r0, [pc, #64]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001466:	f006 f843 	bl	80074f0 <HAL_ADCEx_MultiModeConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001470:	f003 fe8c 	bl	800518c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_ADC3_Init+0xec>)
 8001476:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001478:	2306      	movs	r3, #6
 800147a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800147c:	2307      	movs	r3, #7
 800147e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001480:	237f      	movs	r3, #127	; 0x7f
 8001482:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001484:	2304      	movs	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001492:	f005 fad1 	bl	8006a38 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800149c:	f003 fe76 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000026c 	.word	0x2000026c
 80014ac:	50000400 	.word	0x50000400
 80014b0:	04300002 	.word	0x04300002

080014b4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00c f8db 	bl	800d67c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80014c6:	4b32      	ldr	r3, [pc, #200]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014c8:	4a32      	ldr	r2, [pc, #200]	; (8001594 <MX_ADC5_Init+0xe0>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b30      	ldr	r3, [pc, #192]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001500:	2201      	movs	r2, #1
 8001502:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_ADC5_Init+0xdc>)
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC5_Init+0xdc>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001530:	2204      	movs	r2, #4
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	649a      	str	r2, [r3, #72]	; 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC5_Init+0xdc>)
 800153c:	2200      	movs	r2, #0
 800153e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001542:	2201      	movs	r2, #1
 8001544:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001548:	f004 ffc2 	bl	80064d0 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8001552:	f003 fe1b 	bl	800518c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_ADC5_Init+0xe4>)
 8001558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155a:	2306      	movs	r3, #6
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800155e:	2307      	movs	r3, #7
 8001560:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001562:	237f      	movs	r3, #127	; 0x7f
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001566:	2304      	movs	r3, #4
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSaturation = DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	773b      	strb	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001578:	f005 fa5e 	bl	8006a38 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC5_Init+0xd2>
  {
    Error_Handler();
 8001582:	f003 fe03 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002d8 	.word	0x200002d8
 8001594:	50000600 	.word	0x50000600
 8001598:	08600004 	.word	0x08600004

0800159c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a2      	sub	sp, #136	; 0x88
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	2254      	movs	r2, #84	; 0x54
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f00c f85d 	bl	800d67c <memset>
  if(adcHandle->Instance==ADC1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ca:	d15f      	bne.n	800168c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4618      	mov	r0, r3
 80015de:	f008 fb19 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015e8:	f003 fdd0 	bl	800518c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015ec:	4b98      	ldr	r3, [pc, #608]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a97      	ldr	r2, [pc, #604]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80015f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f8:	4b95      	ldr	r3, [pc, #596]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	4a91      	ldr	r2, [pc, #580]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800161c:	2301      	movs	r3, #1
 800161e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001620:	2303      	movs	r3, #3
 8001622:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800162c:	4619      	mov	r1, r3
 800162e:	4889      	ldr	r0, [pc, #548]	; (8001854 <HAL_ADC_MspInit+0x2b8>)
 8001630:	f007 fb24 	bl	8008c7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 8001634:	4b88      	ldr	r3, [pc, #544]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001636:	4a89      	ldr	r2, [pc, #548]	; (800185c <HAL_ADC_MspInit+0x2c0>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800163a:	4b87      	ldr	r3, [pc, #540]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800163c:	2205      	movs	r2, #5
 800163e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001640:	4b85      	ldr	r3, [pc, #532]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b84      	ldr	r3, [pc, #528]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001652:	4b81      	ldr	r3, [pc, #516]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800165c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001662:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001664:	2220      	movs	r2, #32
 8001666:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001668:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800166e:	487a      	ldr	r0, [pc, #488]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001670:	f006 f956 	bl	8007920 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800167a:	f003 fd87 	bl	800518c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
 8001684:	4a74      	ldr	r2, [pc, #464]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800168a:	e0dc      	b.n	8001846 <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a73      	ldr	r2, [pc, #460]	; (8001860 <HAL_ADC_MspInit+0x2c4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d168      	bne.n	8001768 <HAL_ADC_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800169c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016a0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	4618      	mov	r0, r3
 80016a8:	f008 fab4 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80016b2:	f003 fd6b 	bl	800518c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a69      	ldr	r2, [pc, #420]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 80016be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10b      	bne.n	80016e0 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016c8:	4b61      	ldr	r3, [pc, #388]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a60      	ldr	r2, [pc, #384]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80016f8:	2302      	movs	r3, #2
 80016fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001708:	4619      	mov	r1, r3
 800170a:	4852      	ldr	r0, [pc, #328]	; (8001854 <HAL_ADC_MspInit+0x2b8>)
 800170c:	f007 fab6 	bl	8008c7c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001712:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_ADC_MspInit+0x2d0>)
 8001714:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001718:	2225      	movs	r2, #37	; 0x25
 800171a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171c:	4b52      	ldr	r3, [pc, #328]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001728:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172e:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001736:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001740:	2220      	movs	r2, #32
 8001742:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800174a:	4847      	ldr	r0, [pc, #284]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800174c:	f006 f8e8 	bl	8007920 <HAL_DMA_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 8001756:	f003 fd19 	bl	800518c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a42      	ldr	r2, [pc, #264]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
 8001760:	4a41      	ldr	r2, [pc, #260]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001766:	e06e      	b.n	8001846 <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC5)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a40      	ldr	r2, [pc, #256]	; (8001870 <HAL_ADC_MspInit+0x2d4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d169      	bne.n	8001846 <HAL_ADC_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800177c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	4618      	mov	r0, r3
 8001784:	f008 fa46 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_ADC_MspInit+0x1f6>
      Error_Handler();
 800178e:	f003 fcfd 	bl	800518c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 800179a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800179c:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10b      	bne.n	80017bc <HAL_ADC_MspInit+0x220>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	4a29      	ldr	r2, [pc, #164]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	4a23      	ldr	r2, [pc, #140]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f007 fa46 	bl	8008c7c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_ADC_MspInit+0x2dc>)
 80017f4:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 80017f8:	2227      	movs	r2, #39	; 0x27
 80017fa:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001814:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001820:	2220      	movs	r2, #32
 8001822:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 800182c:	f006 f878 	bl	8007920 <HAL_DMA_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_ADC_MspInit+0x29e>
      Error_Handler();
 8001836:	f003 fca9 	bl	800518c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001846:	bf00      	nop
 8001848:	3788      	adds	r7, #136	; 0x88
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	48000400 	.word	0x48000400
 8001858:	20000344 	.word	0x20000344
 800185c:	40020058 	.word	0x40020058
 8001860:	50000400 	.word	0x50000400
 8001864:	20000464 	.word	0x20000464
 8001868:	200003a4 	.word	0x200003a4
 800186c:	40020030 	.word	0x40020030
 8001870:	50000600 	.word	0x50000600
 8001874:	20000404 	.word	0x20000404
 8001878:	40020044 	.word	0x40020044

0800187c <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800188c:	2302      	movs	r3, #2
 800188e:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4619      	mov	r1, r3
 80018a2:	480a      	ldr	r0, [pc, #40]	; (80018cc <can1_init_ibis+0x50>)
 80018a4:	f006 fcc8 	bl	8008238 <HAL_FDCAN_ConfigFilter>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <can1_init_ibis+0x36>
		  {
			  Error_Handler();
 80018ae:	f003 fc6d 	bl	800518c <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <can1_init_ibis+0x50>)
 80018b4:	f006 fd1a 	bl	80082ec <HAL_FDCAN_Start>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <can1_init_ibis+0x46>
 80018be:	f003 fc65 	bl	800518c <Error_Handler>
}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000468 	.word	0x20000468

080018d0 <can1_send>:

void can1_send(int id, uint8_t senddata[]){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a15      	ldr	r2, [pc, #84]	; (8001934 <can1_send+0x64>)
 80018de:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <can1_send+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <can1_send+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <can1_send+0x64>)
 80018ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018f2:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <can1_send+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <can1_send+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <can1_send+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <can1_send+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <can1_send+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 8001912:	bf00      	nop
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <can1_send+0x68>)
 8001916:	f006 fe2f 	bl	8008578 <HAL_FDCAN_GetTxFifoFreeLevel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b03      	cmp	r3, #3
 800191e:	d1f9      	bne.n	8001914 <can1_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4904      	ldr	r1, [pc, #16]	; (8001934 <can1_send+0x64>)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <can1_send+0x68>)
 8001926:	f006 fd09 	bl	800833c <HAL_FDCAN_AddMessageToTxFifoQ>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200007a0 	.word	0x200007a0
 8001938:	20000468 	.word	0x20000468

0800193c <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800194c:	2302      	movs	r3, #2
 800194e:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001950:	2301      	movs	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	4619      	mov	r1, r3
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <can2_init_ibis+0x50>)
 8001964:	f006 fc68 	bl	8008238 <HAL_FDCAN_ConfigFilter>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <can2_init_ibis+0x36>
		  {
			  Error_Handler();
 800196e:	f003 fc0d 	bl	800518c <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <can2_init_ibis+0x50>)
 8001974:	f006 fcba 	bl	80082ec <HAL_FDCAN_Start>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <can2_init_ibis+0x46>
 800197e:	f003 fc05 	bl	800518c <Error_Handler>
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200004cc 	.word	0x200004cc

08001990 <can2_send>:

void can2_send(int id, uint8_t senddata[]){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <can2_send+0x64>)
 800199e:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <can2_send+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <can2_send+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <can2_send+0x64>)
 80019ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b2:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <can2_send+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <can2_send+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <can2_send+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <can2_send+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <can2_send+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 80019d2:	bf00      	nop
 80019d4:	4808      	ldr	r0, [pc, #32]	; (80019f8 <can2_send+0x68>)
 80019d6:	f006 fdcf 	bl	8008578 <HAL_FDCAN_GetTxFifoFreeLevel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d1f9      	bne.n	80019d4 <can2_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4904      	ldr	r1, [pc, #16]	; (80019f4 <can2_send+0x64>)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <can2_send+0x68>)
 80019e6:	f006 fca9 	bl	800833c <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200007a0 	.word	0x200007a0
 80019f8:	200004cc 	.word	0x200004cc

080019fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6493      	str	r3, [r2, #72]	; 0x48
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2102      	movs	r1, #2
 8001a36:	200b      	movs	r0, #11
 8001a38:	f005 ff3d 	bl	80078b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a3c:	200b      	movs	r0, #11
 8001a3e:	f005 ff54 	bl	80078ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2105      	movs	r1, #5
 8001a46:	200c      	movs	r0, #12
 8001a48:	f005 ff35 	bl	80078b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f005 ff4c 	bl	80078ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2109      	movs	r1, #9
 8001a56:	200d      	movs	r0, #13
 8001a58:	f005 ff2d 	bl	80078b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a5c:	200d      	movs	r0, #13
 8001a5e:	f005 ff44 	bl	80078ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	210a      	movs	r1, #10
 8001a66:	200e      	movs	r0, #14
 8001a68:	f005 ff25 	bl	80078b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a6c:	200e      	movs	r0, #14
 8001a6e:	f005 ff3c 	bl	80078ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	210b      	movs	r1, #11
 8001a76:	200f      	movs	r0, #15
 8001a78:	f005 ff1d 	bl	80078b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f005 ff34 	bl	80078ea <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001a96:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <MX_FDCAN1_Init+0x88>)
 8001a98:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001acc:	220e      	movs	r2, #14
 8001ace:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001b02:	f006 fa3f 	bl	8007f84 <HAL_FDCAN_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001b0c:	f003 fb3e 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000468 	.word	0x20000468
 8001b18:	40006400 	.word	0x40006400

08001b1c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <MX_FDCAN2_Init+0x88>)
 8001b24:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b58:	220e      	movs	r2, #14
 8001b5a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 10;
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b64:	220a      	movs	r2, #10
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b70:	220c      	movs	r2, #12
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b76:	2202      	movs	r2, #2
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b8e:	f006 f9f9 	bl	8007f84 <HAL_FDCAN_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001b98:	f003 faf8 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200004cc 	.word	0x200004cc
 8001ba4:	40006800 	.word	0x40006800

08001ba8 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0a0      	sub	sp, #128	; 0x80
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	2254      	movs	r2, #84	; 0x54
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00b fd57 	bl	800d67c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <HAL_FDCAN_MspInit+0x190>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d153      	bne.n	8001c80 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f008 f813 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001bf4:	f003 faca 	bl	800518c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001c00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10b      	bne.n	8001c22 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c0a:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	4a46      	ldr	r2, [pc, #280]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c4c:	2309      	movs	r3, #9
 8001c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5a:	f007 f80f 	bl	8008c7c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2103      	movs	r1, #3
 8001c62:	2015      	movs	r0, #21
 8001c64:	f005 fe27 	bl	80078b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c68:	2015      	movs	r0, #21
 8001c6a:	f005 fe3e 	bl	80078ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2104      	movs	r1, #4
 8001c72:	2016      	movs	r0, #22
 8001c74:	f005 fe1f 	bl	80078b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001c78:	2016      	movs	r0, #22
 8001c7a:	f005 fe36 	bl	80078ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001c7e:	e056      	b.n	8001d2e <HAL_FDCAN_MspInit+0x186>
  else if(fdcanHandle->Instance==FDCAN2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <HAL_FDCAN_MspInit+0x19c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d151      	bne.n	8001d2e <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c94:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f007 ffba 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8001ca6:	f003 fa71 	bl	800518c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001cb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10b      	bne.n	8001cd4 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001cfe:	2309      	movs	r3, #9
 8001d00:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d06:	4619      	mov	r1, r3
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <HAL_FDCAN_MspInit+0x1a0>)
 8001d0a:	f006 ffb7 	bl	8008c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2106      	movs	r1, #6
 8001d12:	2056      	movs	r0, #86	; 0x56
 8001d14:	f005 fdcf 	bl	80078b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001d18:	2056      	movs	r0, #86	; 0x56
 8001d1a:	f005 fde6 	bl	80078ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2107      	movs	r1, #7
 8001d22:	2057      	movs	r0, #87	; 0x57
 8001d24:	f005 fdc7 	bl	80078b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001d28:	2057      	movs	r0, #87	; 0x57
 8001d2a:	f005 fdde 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3780      	adds	r7, #128	; 0x80
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40006400 	.word	0x40006400
 8001d3c:	20000530 	.word	0x20000530
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40006800 	.word	0x40006800
 8001d48:	48000400 	.word	0x48000400

08001d4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f246 0121 	movw	r1, #24609	; 0x6021
 8001de0:	4845      	ldr	r0, [pc, #276]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001de2:	f007 f8e5 	bl	8008fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f248 0110 	movw	r1, #32784	; 0x8010
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f007 f8de 	bl	8008fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f244 4184 	movw	r1, #17540	; 0x4484
 8001dfa:	4840      	ldr	r0, [pc, #256]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001dfc:	f007 f8d8 	bl	8008fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
 8001e00:	f246 0321 	movw	r3, #24609	; 0x6021
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4837      	ldr	r0, [pc, #220]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001e1a:	f006 ff2f 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001e1e:	f248 0310 	movw	r3, #32784	; 0x8010
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f006 ff1f 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4829      	ldr	r0, [pc, #164]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001e52:	f006 ff13 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001e56:	f244 4384 	movw	r3, #17540	; 0x4484
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4823      	ldr	r0, [pc, #140]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001e70:	f006 ff04 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8c:	f006 fef6 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e90:	2304      	movs	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4817      	ldr	r0, [pc, #92]	; (8001f00 <MX_GPIO_Init+0x1b4>)
 8001ea4:	f006 feea 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ea8:	2360      	movs	r3, #96	; 0x60
 8001eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001ebc:	f006 fede 	bl	8008c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001ed8:	f006 fed0 	bl	8008c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2101      	movs	r1, #1
 8001ee0:	2017      	movs	r0, #23
 8001ee2:	f005 fce8 	bl	80078b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ee6:	2017      	movs	r0, #23
 8001ee8:	f005 fcff 	bl	80078ea <HAL_NVIC_EnableIRQ>

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	48000400 	.word	0x48000400
 8001f00:	48000c00 	.word	0x48000c00

08001f04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f08:	f3bf 8f4f 	dsb	sy
}
 8001f0c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <__NVIC_SystemReset+0x24>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f16:	4904      	ldr	r1, [pc, #16]	; (8001f28 <__NVIC_SystemReset+0x24>)
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_SystemReset+0x28>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f1e:	f3bf 8f4f 	dsb	sy
}
 8001f22:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <__NVIC_SystemReset+0x20>
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	05fa0004 	.word	0x05fa0004

08001f30 <ICM20602_writeByte>:
int Gscale = GFS_1000DPS;



void ICM20602_writeByte(uint8_t reg, uint8_t data)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	uint8_t send_data[1];
	uint8_t RxBuffer[1];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2110      	movs	r1, #16
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f48:	f007 f832 	bl	8008fb0 <HAL_GPIO_WritePin>

	send_data[0]=reg & 0x7F;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f56:	f107 0208 	add.w	r2, r7, #8
 8001f5a:	f107 010c 	add.w	r1, r7, #12
 8001f5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <ICM20602_writeByte+0x6c>)
 8001f68:	f008 f94d 	bl	800a206 <HAL_SPI_TransmitReceive>

	send_data[0]=data;
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f70:	f107 0208 	add.w	r2, r7, #8
 8001f74:	f107 010c 	add.w	r1, r7, #12
 8001f78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <ICM20602_writeByte+0x6c>)
 8001f82:	f008 f940 	bl	800a206 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f86:	2201      	movs	r2, #1
 8001f88:	2110      	movs	r1, #16
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f007 f80f 	bl	8008fb0 <HAL_GPIO_WritePin>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000800 	.word	0x20000800

08001fa0 <ICM20602_readByte>:

uint8_t ICM20602_readByte(uint8_t reg)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    uint8_t send_data[1];
    uint8_t RxBuffer[1];
    
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2110      	movs	r1, #16
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f006 fffd 	bl	8008fb0 <HAL_GPIO_WritePin>

    send_data[0]= reg | 0x80;
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc0:	f107 0208 	add.w	r2, r7, #8
 8001fc4:	f107 010c 	add.w	r1, r7, #12
 8001fc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2301      	movs	r3, #1
 8001fd0:	480e      	ldr	r0, [pc, #56]	; (800200c <ICM20602_readByte+0x6c>)
 8001fd2:	f008 f918 	bl	800a206 <HAL_SPI_TransmitReceive>

    send_data[0]=0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fda:	f107 0208 	add.w	r2, r7, #8
 8001fde:	f107 010c 	add.w	r1, r7, #12
 8001fe2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <ICM20602_readByte+0x6c>)
 8001fec:	f008 f90b 	bl	800a206 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001ff0:	7a3b      	ldrb	r3, [r7, #8]
 8001ff2:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f006 ffd8 	bl	8008fb0 <HAL_GPIO_WritePin>
    
    return (val);
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000800 	.word	0x20000800

08002010 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8002014:	2201      	movs	r2, #1
 8002016:	2120      	movs	r1, #32
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <ICM20602_init+0x40>)
 800201a:	f006 ffc9 	bl	8008fb0 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
 800201e:	2100      	movs	r1, #0
 8002020:	206b      	movs	r0, #107	; 0x6b
 8002022:	f7ff ff85 	bl	8001f30 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
 8002026:	2107      	movs	r1, #7
 8002028:	2019      	movs	r0, #25
 800202a:	f7ff ff81 	bl	8001f30 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03
 800202e:	2101      	movs	r1, #1
 8002030:	201a      	movs	r0, #26
 8002032:	f7ff ff7d 	bl	8001f30 <ICM20602_writeByte>

	ICM20602_setAccRange(Ascale);
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <ICM20602_init+0x44>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f8b6 	bl	80021ac <ICM20602_setAccRange>
	ICM20602_setGyroRange(Gscale);
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <ICM20602_init+0x48>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f8eb 	bl	8002220 <ICM20602_setGyroRange>
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	48000800 	.word	0x48000800
 8002054:	200005a8 	.word	0x200005a8
 8002058:	20000004 	.word	0x20000004

0800205c <ICM20602_getAccXvalue>:

int16_t ICM20602_getAccXvalue()
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_L); // read Accelerometer X_Low  value
 8002062:	203c      	movs	r0, #60	; 0x3c
 8002064:	f7ff ff9c 	bl	8001fa0 <ICM20602_readByte>
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_H); // read Accelerometer X_High value
 800206c:	203b      	movs	r0, #59	; 0x3b
 800206e:	f7ff ff97 	bl	8001fa0 <ICM20602_readByte>
 8002072:	4603      	mov	r3, r0
 8002074:	71bb      	strb	r3, [r7, #6]
    return((HiByte<<8) | LoByte);
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	b21a      	sxth	r2, r3
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21b      	sxth	r3, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <ICM20602_getAccYvalue>:

int16_t ICM20602_getAccYvalue()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_L); // read Accelerometer X_Low  value
 8002092:	203e      	movs	r0, #62	; 0x3e
 8002094:	f7ff ff84 	bl	8001fa0 <ICM20602_readByte>
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_H); // read Accelerometer X_High value
 800209c:	203d      	movs	r0, #61	; 0x3d
 800209e:	f7ff ff7f 	bl	8001fa0 <ICM20602_readByte>
 80020a2:	4603      	mov	r3, r0
 80020a4:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020a6:	79bb      	ldrb	r3, [r7, #6]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <ICM20602_getAccZvalue>:

int16_t ICM20602_getAccZvalue()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_L); // read Accelerometer X_Low  value
 80020c2:	2040      	movs	r0, #64	; 0x40
 80020c4:	f7ff ff6c 	bl	8001fa0 <ICM20602_readByte>
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_H); // read Accelerometer X_High value
 80020cc:	203f      	movs	r0, #63	; 0x3f
 80020ce:	f7ff ff67 	bl	8001fa0 <ICM20602_readByte>
 80020d2:	4603      	mov	r3, r0
 80020d4:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b21a      	sxth	r2, r3
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21b      	sxth	r3, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ICM20602_getGyrXvalue>:

int16_t ICM20602_getGyrXvalue()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_XOUT_L); // read Accelerometer X_Low  value
 80020f2:	2044      	movs	r0, #68	; 0x44
 80020f4:	f7ff ff54 	bl	8001fa0 <ICM20602_readByte>
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_XOUT_H); // read Accelerometer X_High value
 80020fc:	2043      	movs	r0, #67	; 0x43
 80020fe:	f7ff ff4f 	bl	8001fa0 <ICM20602_readByte>
 8002102:	4603      	mov	r3, r0
 8002104:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <ICM20602_getGyrYvalue>:

int16_t ICM20602_getGyrYvalue()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_YOUT_L); // read Accelerometer X_Low  value
 8002122:	2046      	movs	r0, #70	; 0x46
 8002124:	f7ff ff3c 	bl	8001fa0 <ICM20602_readByte>
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_YOUT_H); // read Accelerometer X_High value
 800212c:	2045      	movs	r0, #69	; 0x45
 800212e:	f7ff ff37 	bl	8001fa0 <ICM20602_readByte>
 8002132:	4603      	mov	r3, r0
 8002134:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <ICM20602_getGyrZvalue>:

int16_t ICM20602_getGyrZvalue()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_L); // read Accelerometer X_Low  value
 8002152:	2048      	movs	r0, #72	; 0x48
 8002154:	f7ff ff24 	bl	8001fa0 <ICM20602_readByte>
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_H); // read Accelerometer X_High value
 800215c:	2047      	movs	r0, #71	; 0x47
 800215e:	f7ff ff1f 	bl	8001fa0 <ICM20602_readByte>
 8002162:	4603      	mov	r3, r0
 8002164:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b21a      	sxth	r2, r3
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21b      	sxth	r3, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <ICM20602_getIMUTemp>:

int16_t ICM20602_getIMUTemp()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_TEMP_OUT_L); // read Accelerometer X_Low  value
 8002182:	2042      	movs	r0, #66	; 0x42
 8002184:	f7ff ff0c 	bl	8001fa0 <ICM20602_readByte>
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_TEMP_OUT_H); // read Accelerometer X_High value
 800218c:	2041      	movs	r0, #65	; 0x41
 800218e:	f7ff ff07 	bl	8001fa0 <ICM20602_readByte>
 8002192:	4603      	mov	r3, r0
 8002194:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b21a      	sxth	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	b21b      	sxth	r3, r3
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b21b      	sxth	r3, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <ICM20602_setAccRange>:


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    switch(Ascale)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d81e      	bhi.n	80021f8 <ICM20602_setAccRange+0x4c>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <ICM20602_setAccRange+0x14>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021db 	.word	0x080021db
 80021c8:	080021e5 	.word	0x080021e5
 80021cc:	080021ef 	.word	0x080021ef
    {
        case AFS_2G:
            aRes = 2.0/32768.0;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <ICM20602_setAccRange+0x70>)
 80021d2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80021d6:	601a      	str	r2, [r3, #0]
            break;
 80021d8:	e00e      	b.n	80021f8 <ICM20602_setAccRange+0x4c>
        case AFS_4G:
            aRes = 4.0/32768.0;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <ICM20602_setAccRange+0x70>)
 80021dc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80021e0:	601a      	str	r2, [r3, #0]
            break;
 80021e2:	e009      	b.n	80021f8 <ICM20602_setAccRange+0x4c>
        case AFS_8G:
            aRes = 8.0/32768.0;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <ICM20602_setAccRange+0x70>)
 80021e6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80021ea:	601a      	str	r2, [r3, #0]
            break;
 80021ec:	e004      	b.n	80021f8 <ICM20602_setAccRange+0x4c>
        case AFS_16G:
            aRes = 16.0/32768.0;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <ICM20602_setAccRange+0x70>)
 80021f0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80021f4:	601a      	str	r2, [r3, #0]
            break;         
 80021f6:	bf00      	nop
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	201c      	movs	r0, #28
 8002204:	f7ff fe94 	bl	8001f30 <ICM20602_writeByte>
    
    return aRes;
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <ICM20602_setAccRange+0x70>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	ee07 3a90 	vmov	s15, r3
}
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200005a0 	.word	0x200005a0

08002220 <ICM20602_setGyroRange>:

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    switch(Gscale)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d81a      	bhi.n	8002264 <ICM20602_setGyroRange+0x44>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <ICM20602_setGyroRange+0x14>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	0800224d 	.word	0x0800224d
 800223c:	08002255 	.word	0x08002255
 8002240:	0800225d 	.word	0x0800225d
    {
        case GFS_250DPS:
            gRes = 250.0/32768.0;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <ICM20602_setGyroRange+0x68>)
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <ICM20602_setGyroRange+0x6c>)
 8002248:	601a      	str	r2, [r3, #0]
            break;
 800224a:	e00b      	b.n	8002264 <ICM20602_setGyroRange+0x44>
        case GFS_500DPS:
            gRes = 500.0/32768.0;
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <ICM20602_setGyroRange+0x68>)
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <ICM20602_setGyroRange+0x70>)
 8002250:	601a      	str	r2, [r3, #0]
            break;
 8002252:	e007      	b.n	8002264 <ICM20602_setGyroRange+0x44>
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <ICM20602_setGyroRange+0x68>)
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <ICM20602_setGyroRange+0x74>)
 8002258:	601a      	str	r2, [r3, #0]
            break;
 800225a:	e003      	b.n	8002264 <ICM20602_setGyroRange+0x44>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <ICM20602_setGyroRange+0x68>)
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <ICM20602_setGyroRange+0x78>)
 8002260:	601a      	str	r2, [r3, #0]
            break;
 8002262:	bf00      	nop
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	201b      	movs	r0, #27
 8002270:	f7ff fe5e 	bl	8001f30 <ICM20602_writeByte>
    
    return gRes;
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <ICM20602_setGyroRange+0x68>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	ee07 3a90 	vmov	s15, r3
}
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200005a4 	.word	0x200005a4
 800228c:	3bfa0000 	.word	0x3bfa0000
 8002290:	3c7a0000 	.word	0x3c7a0000
 8002294:	3cfa0000 	.word	0x3cfa0000
 8002298:	3d7a0000 	.word	0x3d7a0000

0800229c <ICM20602_read_IMU_data>:
    Gscale = (Gscale & 0x18) >> 3;

    return Gscale;
}

void ICM20602_read_IMU_data() {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0

	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80022a0:	f7ff fedc 	bl	800205c <ICM20602_getAccXvalue>
 80022a4:	4603      	mov	r3, r0
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ae:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80024ac <ICM20602_read_IMU_data+0x210>
 80022b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b6:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <ICM20602_read_IMU_data+0x214>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c0:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <ICM20602_read_IMU_data+0x218>)
 80022c2:	edc3 7a00 	vstr	s15, [r3]
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80022c6:	f7ff fee1 	bl	800208c <ICM20602_getAccYvalue>
 80022ca:	4603      	mov	r3, r0
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80024ac <ICM20602_read_IMU_data+0x210>
 80022d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022dc:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <ICM20602_read_IMU_data+0x214>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <ICM20602_read_IMU_data+0x218>)
 80022e8:	edc3 7a01 	vstr	s15, [r3, #4]
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80022ec:	f7ff fee6 	bl	80020bc <ICM20602_getAccZvalue>
 80022f0:	4603      	mov	r3, r0
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fa:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80024ac <ICM20602_read_IMU_data+0x210>
 80022fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <ICM20602_read_IMU_data+0x214>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230c:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <ICM20602_read_IMU_data+0x218>)
 800230e:	edc3 7a02 	vstr	s15, [r3, #8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002312:	f7ff feeb 	bl	80020ec <ICM20602_getGyrXvalue>
 8002316:	4603      	mov	r3, r0
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002320:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <ICM20602_read_IMU_data+0x21c>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	4b64      	ldr	r3, [pc, #400]	; (80024bc <ICM20602_read_IMU_data+0x220>)
 800232c:	edc3 7a00 	vstr	s15, [r3]
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002330:	f7ff fef4 	bl	800211c <ICM20602_getGyrYvalue>
 8002334:	4603      	mov	r3, r0
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <ICM20602_read_IMU_data+0x21c>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <ICM20602_read_IMU_data+0x220>)
 800234a:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800234e:	f7ff fefd 	bl	800214c <ICM20602_getGyrZvalue>
 8002352:	4603      	mov	r3, r0
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235c:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <ICM20602_read_IMU_data+0x21c>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	4b55      	ldr	r3, [pc, #340]	; (80024bc <ICM20602_read_IMU_data+0x220>)
 8002368:	edc3 7a02 	vstr	s15, [r3, #8]

    ICM20602_medianFilter();
 800236c:	f000 f92c 	bl	80025c8 <ICM20602_medianFilter>

    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002370:	f7ff ff04 	bl	800217c <ICM20602_getIMUTemp>
 8002374:	4603      	mov	r3, r0
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237e:	eddf 6a50 	vldr	s13, [pc, #320]	; 80024c0 <ICM20602_read_IMU_data+0x224>
 8002382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002386:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800238a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800238e:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <ICM20602_read_IMU_data+0x228>)
 8002390:	edc3 7a00 	vstr	s15, [r3]
    ICM20602_IMU_compensate();
 8002394:	f000 fd48 	bl	8002e28 <ICM20602_IMU_compensate>

    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <ICM20602_read_IMU_data+0x234>)
 80023a6:	edd3 6a00 	vldr	s13, [r3]
 80023aa:	eeb0 1a66 	vmov.f32	s2, s13
 80023ae:	eef0 0a47 	vmov.f32	s1, s14
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	f000 f893 	bl	80024e0 <ICM20602_integral>
 80023ba:	eef0 7a40 	vmov.f32	s15, s0
 80023be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 80023ce:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*2;
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 80023d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 80023da:	ed93 7a01 	vldr	s14, [r3, #4]
 80023de:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <ICM20602_read_IMU_data+0x234>)
 80023e0:	edd3 6a00 	vldr	s13, [r3]
 80023e4:	eeb0 1a66 	vmov.f32	s2, s13
 80023e8:	eef0 0a47 	vmov.f32	s1, s14
 80023ec:	eeb0 0a67 	vmov.f32	s0, s15
 80023f0:	f000 f876 	bl	80024e0 <ICM20602_integral>
 80023f4:	eef0 7a40 	vmov.f32	s15, s0
 80023f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 8002408:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*2;
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 800240e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 8002414:	ed93 7a02 	vldr	s14, [r3, #8]
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <ICM20602_read_IMU_data+0x234>)
 800241a:	edd3 6a00 	vldr	s13, [r3]
 800241e:	eeb0 1a66 	vmov.f32	s2, s13
 8002422:	eef0 0a47 	vmov.f32	s1, s14
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	f000 f859 	bl	80024e0 <ICM20602_integral>
 800242e:	eef0 7a40 	vmov.f32	s15, s0
 8002432:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 8002442:	edc3 7a00 	vstr	s15, [r3]

    pitchAngle = ICM20602_normAngle(pitchAngle);
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eeb0 0a67 	vmov.f32	s0, s15
 8002450:	f000 f880 	bl	8002554 <ICM20602_normAngle>
 8002454:	eef0 7a40 	vmov.f32	s15, s0
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 800245a:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = ICM20602_normAngle(rollAngle);
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	eeb0 0a67 	vmov.f32	s0, s15
 8002468:	f000 f874 	bl	8002554 <ICM20602_normAngle>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 8002472:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = ICM20602_normAngle(yawAngle);
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eeb0 0a67 	vmov.f32	s0, s15
 8002480:	f000 f868 	bl	8002554 <ICM20602_normAngle>
 8002484:	eef0 7a40 	vmov.f32	s15, s0
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 800248a:	edc3 7a00 	vstr	s15, [r3]

    gyro_prv[0] = gyro_comp[0];
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 8002494:	6013      	str	r3, [r2, #0]
    gyro_prv[1] = gyro_comp[1];
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 800249c:	6053      	str	r3, [r2, #4]
    gyro_prv[2] = gyro_comp[2];
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 80024a4:	6093      	str	r3, [r2, #8]
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	411ce80a 	.word	0x411ce80a
 80024b0:	200005a0 	.word	0x200005a0
 80024b4:	200005e8 	.word	0x200005e8
 80024b8:	200005a4 	.word	0x200005a4
 80024bc:	200005f4 	.word	0x200005f4
 80024c0:	43a36666 	.word	0x43a36666
 80024c4:	20000618 	.word	0x20000618
 80024c8:	2000060c 	.word	0x2000060c
 80024cc:	20000534 	.word	0x20000534
 80024d0:	20000000 	.word	0x20000000
 80024d4:	200005d8 	.word	0x200005d8
 80024d8:	200005dc 	.word	0x200005dc
 80024dc:	200005e0 	.word	0x200005e0

080024e0 <ICM20602_integral>:



float ICM20602_integral(float val, float val_prv, float dt)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80024ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80024ee:	ed87 1a01 	vstr	s2, [r7, #4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80024f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800250a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800250e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002512:	eeb0 0a67 	vmov.f32	s0, s15
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <ICM20602_clearAngle>:

void ICM20602_clearAngle(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
    pitchAngle = 0.0f;
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <ICM20602_clearAngle+0x28>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    rollAngle  = 0.0f;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <ICM20602_clearAngle+0x2c>)
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
    yawAngle   = 0.0f;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <ICM20602_clearAngle+0x30>)
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200005d8 	.word	0x200005d8
 800254c:	200005dc 	.word	0x200005dc
 8002550:	200005e0 	.word	0x200005e0

08002554 <ICM20602_normAngle>:
    rollAngle  = roll;
    yawAngle   = yaw;
}

float ICM20602_normAngle(float deg)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	ed87 0a01 	vstr	s0, [r7, #4]
    while (deg < -180.0f) deg += 360.0f;
 800255e:	e007      	b.n	8002570 <ICM20602_normAngle+0x1c>
 8002560:	edd7 7a01 	vldr	s15, [r7, #4]
 8002564:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025bc <ICM20602_normAngle+0x68>
 8002568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800256c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002570:	edd7 7a01 	vldr	s15, [r7, #4]
 8002574:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80025c0 <ICM20602_normAngle+0x6c>
 8002578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d4ee      	bmi.n	8002560 <ICM20602_normAngle+0xc>
    while (deg >= 180.0f) deg -= 360.0f;
 8002582:	e007      	b.n	8002594 <ICM20602_normAngle+0x40>
 8002584:	edd7 7a01 	vldr	s15, [r7, #4]
 8002588:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025bc <ICM20602_normAngle+0x68>
 800258c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002590:	edc7 7a01 	vstr	s15, [r7, #4]
 8002594:	edd7 7a01 	vldr	s15, [r7, #4]
 8002598:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80025c4 <ICM20602_normAngle+0x70>
 800259c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	daee      	bge.n	8002584 <ICM20602_normAngle+0x30>

    return deg;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	ee07 3a90 	vmov	s15, r3
}
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	43b40000 	.word	0x43b40000
 80025c0:	c3340000 	.word	0xc3340000
 80025c4:	43340000 	.word	0x43340000

080025c8 <ICM20602_medianFilter>:
    return yawAngle;
}

// filter length : 3-only
void ICM20602_medianFilter(void)
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {
 80025ce:	2300      	movs	r3, #0
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	e123      	b.n	800281c <ICM20602_medianFilter+0x254>

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 80025d4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025dc:	4895      	ldr	r0, [pc, #596]	; (8002834 <ICM20602_medianFilter+0x26c>)
 80025de:	460b      	mov	r3, r1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	440b      	add	r3, r1
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	3304      	adds	r3, #4
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	4891      	ldr	r0, [pc, #580]	; (8002834 <ICM20602_medianFilter+0x26c>)
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	3308      	adds	r3, #8
 80025fa:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 80025fc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002600:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002604:	488b      	ldr	r0, [pc, #556]	; (8002834 <ICM20602_medianFilter+0x26c>)
 8002606:	460b      	mov	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	440b      	add	r3, r1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4403      	add	r3, r0
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	4888      	ldr	r0, [pc, #544]	; (8002834 <ICM20602_medianFilter+0x26c>)
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4403      	add	r3, r0
 800261e:	3304      	adds	r3, #4
 8002620:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][0] = gyro[i];
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800262a:	4983      	ldr	r1, [pc, #524]	; (8002838 <ICM20602_medianFilter+0x270>)
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	4880      	ldr	r0, [pc, #512]	; (8002834 <ICM20602_medianFilter+0x26c>)
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4403      	add	r3, r0
 800263e:	6019      	str	r1, [r3, #0]

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8002640:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002644:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002648:	487c      	ldr	r0, [pc, #496]	; (800283c <ICM20602_medianFilter+0x274>)
 800264a:	460b      	mov	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	440b      	add	r3, r1
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	3304      	adds	r3, #4
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	4878      	ldr	r0, [pc, #480]	; (800283c <ICM20602_medianFilter+0x274>)
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4403      	add	r3, r0
 8002664:	3308      	adds	r3, #8
 8002666:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8002668:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800266c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002670:	4872      	ldr	r0, [pc, #456]	; (800283c <ICM20602_medianFilter+0x274>)
 8002672:	460b      	mov	r3, r1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4403      	add	r3, r0
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	486f      	ldr	r0, [pc, #444]	; (800283c <ICM20602_medianFilter+0x274>)
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4403      	add	r3, r0
 800268a:	3304      	adds	r3, #4
 800268c:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][0]  = acc[i];
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002696:	496a      	ldr	r1, [pc, #424]	; (8002840 <ICM20602_medianFilter+0x278>)
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	4867      	ldr	r0, [pc, #412]	; (800283c <ICM20602_medianFilter+0x274>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4403      	add	r3, r0
 80026aa:	6019      	str	r1, [r3, #0]

    	for (j = 0; j < 3; j ++){
 80026ac:	2300      	movs	r3, #0
 80026ae:	71bb      	strb	r3, [r7, #6]
 80026b0:	e029      	b.n	8002706 <ICM20602_medianFilter+0x13e>
    		gyro_tmp[j] = gyro_mdat[i][j];
 80026b2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026b6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026ba:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026be:	4c5d      	ldr	r4, [pc, #372]	; (8002834 <ICM20602_medianFilter+0x26c>)
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	4403      	add	r3, r0
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4423      	add	r3, r4
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	485d      	ldr	r0, [pc, #372]	; (8002844 <ICM20602_medianFilter+0x27c>)
 80026d0:	008b      	lsls	r3, r1, #2
 80026d2:	4403      	add	r3, r0
 80026d4:	601a      	str	r2, [r3, #0]
    		acc_tmp[j]  = acc_mdat[i][j];
 80026d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026da:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026de:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026e2:	4c56      	ldr	r4, [pc, #344]	; (800283c <ICM20602_medianFilter+0x274>)
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	4403      	add	r3, r0
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4423      	add	r3, r4
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4855      	ldr	r0, [pc, #340]	; (8002848 <ICM20602_medianFilter+0x280>)
 80026f4:	008b      	lsls	r3, r1, #2
 80026f6:	4403      	add	r3, r0
 80026f8:	601a      	str	r2, [r3, #0]
    	for (j = 0; j < 3; j ++){
 80026fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	71bb      	strb	r3, [r7, #6]
 8002706:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800270a:	2b02      	cmp	r3, #2
 800270c:	ddd1      	ble.n	80026b2 <ICM20602_medianFilter+0xea>
    	}

    	a = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	717b      	strb	r3, [r7, #5]
    	b = 2;
 8002712:	2302      	movs	r3, #2
 8002714:	713b      	strb	r3, [r7, #4]

    	for (j = 2; j >= 0; j--) {
 8002716:	2302      	movs	r3, #2
 8002718:	71bb      	strb	r3, [r7, #6]
 800271a:	e065      	b.n	80027e8 <ICM20602_medianFilter+0x220>
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 800271c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002720:	4a48      	ldr	r2, [pc, #288]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800272e:	4a45      	ldr	r2, [pc, #276]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	dd19      	ble.n	8002776 <ICM20602_medianFilter+0x1ae>
    			tmp         = gyro_tmp[a];
 8002742:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002746:	4a3f      	ldr	r2, [pc, #252]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	603b      	str	r3, [r7, #0]
    			gyro_tmp[a] = gyro_tmp[b];
 8002750:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8002754:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002758:	493a      	ldr	r1, [pc, #232]	; (8002844 <ICM20602_medianFilter+0x27c>)
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	440a      	add	r2, r1
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4938      	ldr	r1, [pc, #224]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	601a      	str	r2, [r3, #0]
    			gyro_tmp[b] = tmp;
 8002768:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800276c:	4a35      	ldr	r2, [pc, #212]	; (8002844 <ICM20602_medianFilter+0x27c>)
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	601a      	str	r2, [r3, #0]
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8002776:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800277a:	4a33      	ldr	r2, [pc, #204]	; (8002848 <ICM20602_medianFilter+0x280>)
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002788:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <ICM20602_medianFilter+0x280>)
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	dd19      	ble.n	80027d0 <ICM20602_medianFilter+0x208>
				tmp         = acc_tmp[a];
 800279c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027a0:	4a29      	ldr	r2, [pc, #164]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	603b      	str	r3, [r7, #0]
				acc_tmp[a]  = acc_tmp[b];
 80027aa:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80027ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	440a      	add	r2, r1
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4923      	ldr	r1, [pc, #140]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	601a      	str	r2, [r3, #0]
				acc_tmp[b]  = tmp;
 80027c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]
			}
    		a = j-1;
 80027d0:	79bb      	ldrb	r3, [r7, #6]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	717b      	strb	r3, [r7, #5]
    		b = j;
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	713b      	strb	r3, [r7, #4]
    	for (j = 2; j >= 0; j--) {
 80027dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	71bb      	strb	r3, [r7, #6]
 80027e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da95      	bge.n	800271c <ICM20602_medianFilter+0x154>
    	}
    	gyro[i] = gyro_tmp[1];
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <ICM20602_medianFilter+0x27c>)
 80027f6:	6852      	ldr	r2, [r2, #4]
 80027f8:	490f      	ldr	r1, [pc, #60]	; (8002838 <ICM20602_medianFilter+0x270>)
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	601a      	str	r2, [r3, #0]
    	acc[i]  = acc_tmp[1];
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4a10      	ldr	r2, [pc, #64]	; (8002848 <ICM20602_medianFilter+0x280>)
 8002806:	6852      	ldr	r2, [r2, #4]
 8002808:	490d      	ldr	r1, [pc, #52]	; (8002840 <ICM20602_medianFilter+0x278>)
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i ++) {
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	71fb      	strb	r3, [r7, #7]
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b02      	cmp	r3, #2
 8002822:	f77f aed7 	ble.w	80025d4 <ICM20602_medianFilter+0xc>
    }
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bc90      	pop	{r4, r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000540 	.word	0x20000540
 8002838:	200005f4 	.word	0x200005f4
 800283c:	20000564 	.word	0x20000564
 8002840:	200005e8 	.word	0x200005e8
 8002844:	20000588 	.word	0x20000588
 8002848:	20000594 	.word	0x20000594
 800284c:	00000000 	.word	0x00000000

08002850 <ICM20602_IMU_calibration2>:
    	gyro_off[j] = gyro_sum[j] / cal_len;
    }
}

void ICM20602_IMU_calibration2(void)
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8002858:	af00      	add	r7, sp, #0
	int i,j;
    double cal_len = 0.0f;
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
    double acc_sum[3]={0};
 8002866:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	615a      	str	r2, [r3, #20]
    double gyro_sum[3]={0};
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
 8002888:	615a      	str	r2, [r3, #20]

    double acc_ave[3][10] = {{0.0}};
 800288a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800288e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002892:	4618      	mov	r0, r3
 8002894:	23f0      	movs	r3, #240	; 0xf0
 8002896:	461a      	mov	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f00a feef 	bl	800d67c <memset>
    double gyro_ave[3][10] = {{0.0}};
 800289e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80028a2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80028a6:	4618      	mov	r0, r3
 80028a8:	23f0      	movs	r3, #240	; 0xf0
 80028aa:	461a      	mov	r2, r3
 80028ac:	2100      	movs	r1, #0
 80028ae:	f00a fee5 	bl	800d67c <memset>

    printf("put the IMU still!\n");
 80028b2:	4886      	ldr	r0, [pc, #536]	; (8002acc <ICM20602_IMU_calibration2+0x27c>)
 80028b4:	f00b fbda 	bl	800e06c <puts>
    HAL_Delay(1000);
 80028b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028bc:	f003 fbc4 	bl	8006048 <HAL_Delay>

    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80028c0:	e183      	b.n	8002bca <ICM20602_IMU_calibration2+0x37a>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
		|| cal_len < 500.0
		){

    	printf("cal_len=%f\r\n",cal_len);
 80028c2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80028c6:	4882      	ldr	r0, [pc, #520]	; (8002ad0 <ICM20602_IMU_calibration2+0x280>)
 80028c8:	f00b fb4a 	bl	800df60 <iprintf>
    	for(j = 0; j < 3; j++){
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80028d2:	e15f      	b.n	8002b94 <ICM20602_IMU_calibration2+0x344>
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028d4:	f7ff fbc2 	bl	800205c <ICM20602_getAccXvalue>
 80028d8:	4603      	mov	r3, r0
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002ad4 <ICM20602_IMU_calibration2+0x284>
 80028e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028ea:	4b7b      	ldr	r3, [pc, #492]	; (8002ad8 <ICM20602_IMU_calibration2+0x288>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f4:	4b79      	ldr	r3, [pc, #484]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 80028f6:	edc3 7a00 	vstr	s15, [r3]
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028fa:	f7ff fbc7 	bl	800208c <ICM20602_getAccYvalue>
 80028fe:	4603      	mov	r3, r0
 8002900:	ee07 3a90 	vmov	s15, r3
 8002904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002908:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002ad4 <ICM20602_IMU_calibration2+0x284>
 800290c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002910:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <ICM20602_IMU_calibration2+0x288>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291a:	4b70      	ldr	r3, [pc, #448]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 800291c:	edc3 7a01 	vstr	s15, [r3, #4]
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002920:	f7ff fbcc 	bl	80020bc <ICM20602_getAccZvalue>
 8002924:	4603      	mov	r3, r0
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002ad4 <ICM20602_IMU_calibration2+0x284>
 8002932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002936:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <ICM20602_IMU_calibration2+0x288>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002940:	4b66      	ldr	r3, [pc, #408]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 8002942:	edc3 7a02 	vstr	s15, [r3, #8]
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002946:	f7ff fbd1 	bl	80020ec <ICM20602_getGyrXvalue>
 800294a:	4603      	mov	r3, r0
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002954:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <ICM20602_IMU_calibration2+0x290>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295e:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 8002960:	edc3 7a00 	vstr	s15, [r3]
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002964:	f7ff fbda 	bl	800211c <ICM20602_getGyrYvalue>
 8002968:	4603      	mov	r3, r0
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002972:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <ICM20602_IMU_calibration2+0x290>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 800297e:	edc3 7a01 	vstr	s15, [r3, #4]
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002982:	f7ff fbe3 	bl	800214c <ICM20602_getGyrZvalue>
 8002986:	4603      	mov	r3, r0
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <ICM20602_IMU_calibration2+0x290>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299a:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 800299c:	edc3 7a02 	vstr	s15, [r3, #8]

    		acc_sum[j]  += acc[j];
 80029a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029aa:	f107 0220 	add.w	r2, r7, #32
 80029ae:	4413      	add	r3, r2
 80029b0:	3b28      	subs	r3, #40	; 0x28
 80029b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029b6:	4a49      	ldr	r2, [pc, #292]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 80029b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fde8 	bl	8000598 <__aeabi_f2d>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fc84 	bl	80002dc <__adddf3>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029e6:	f107 0220 	add.w	r2, r7, #32
 80029ea:	4413      	add	r3, r2
 80029ec:	3b28      	subs	r3, #40	; 0x28
 80029ee:	e9c3 0100 	strd	r0, r1, [r3]
    		gyro_sum[j] += gyro[j];
 80029f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029fc:	f107 0220 	add.w	r2, r7, #32
 8002a00:	4413      	add	r3, r2
 8002a02:	3b40      	subs	r3, #64	; 0x40
 8002a04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a08:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 8002a0a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fdbf 	bl	8000598 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fc5b 	bl	80002dc <__adddf3>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a38:	f107 0220 	add.w	r2, r7, #32
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b40      	subs	r3, #64	; 0x40
 8002a40:	e9c3 0100 	strd	r0, r1, [r3]

    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a44:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a4e:	f107 0220 	add.w	r2, r7, #32
 8002a52:	4413      	add	r3, r2
 8002a54:	3b28      	subs	r3, #40	; 0x28
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a5e:	f7fd ff1d 	bl	800089c <__aeabi_ddiv>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4614      	mov	r4, r2
 8002a68:	461d      	mov	r5, r3
 8002a6a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a6e:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8002a72:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	440b      	add	r3, r1
 8002a80:	e9c3 4500 	strd	r4, r5, [r3]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a84:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a8e:	f107 0220 	add.w	r2, r7, #32
 8002a92:	4413      	add	r3, r2
 8002a94:	3b40      	subs	r3, #64	; 0x40
 8002a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a9a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a9e:	f7fd fefd 	bl	800089c <__aeabi_ddiv>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002aae:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 8002ab2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	440b      	add	r3, r1
 8002ac0:	e9c3 4500 	strd	r4, r5, [r3]

    		for(i = 9; i > 0; i --){
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002aca:	e05a      	b.n	8002b82 <ICM20602_IMU_calibration2+0x332>
 8002acc:	080114c8 	.word	0x080114c8
 8002ad0:	080114dc 	.word	0x080114dc
 8002ad4:	411ce80a 	.word	0x411ce80a
 8002ad8:	200005a0 	.word	0x200005a0
 8002adc:	200005e8 	.word	0x200005e8
 8002ae0:	200005a4 	.word	0x200005a4
 8002ae4:	200005f4 	.word	0x200005f4
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002ae8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002aec:	1e59      	subs	r1, r3, #1
 8002aee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002af2:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002af6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4403      	add	r3, r0
 8002b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b0c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b10:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 8002b14:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b18:	461a      	mov	r2, r3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	0053      	lsls	r3, r2, #1
 8002b20:	461a      	mov	r2, r3
 8002b22:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4423      	add	r3, r4
 8002b2c:	e9c3 0100 	strd	r0, r1, [r3]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002b30:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b34:	1e59      	subs	r1, r3, #1
 8002b36:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b3a:	f5a3 7008 	sub.w	r0, r3, #544	; 0x220
 8002b3e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	440b      	add	r3, r1
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4403      	add	r3, r0
 8002b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b54:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b58:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 8002b5c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b60:	461a      	mov	r2, r3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	0053      	lsls	r3, r2, #1
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4423      	add	r3, r4
 8002b74:	e9c3 0100 	strd	r0, r1, [r3]
    		for(i = 9; i > 0; i --){
 8002b78:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002b82:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	dcae      	bgt.n	8002ae8 <ICM20602_IMU_calibration2+0x298>
    	for(j = 0; j < 3; j++){
 8002b8a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002b94:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	f77f ae9b 	ble.w	80028d4 <ICM20602_IMU_calibration2+0x84>
    		}
    	}
    	cal_len ++;
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	4b9d      	ldr	r3, [pc, #628]	; (8002e18 <ICM20602_IMU_calibration2+0x5c8>)
 8002ba4:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002ba8:	f7fd fb98 	bl	80002dc <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230

    	if(cal_len>5000){break;}
 8002bb4:	a394      	add	r3, pc, #592	; (adr r3, 8002e08 <ICM20602_IMU_calibration2+0x5b8>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002bbe:	f7fd ffd3 	bl	8000b68 <__aeabi_dcmpgt>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 80c4 	bne.w	8002d52 <ICM20602_IMU_calibration2+0x502>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002bca:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bd2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002bd6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fb79 	bl	80002d8 <__aeabi_dsub>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4690      	mov	r8, r2
 8002bec:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002bf0:	a387      	add	r3, pc, #540	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	f7fd ffb5 	bl	8000b68 <__aeabi_dcmpgt>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f47f ae5e 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002c06:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c0e:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002c12:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c1a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002c1e:	f7fd fb5b 	bl	80002d8 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4692      	mov	sl, r2
 8002c28:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002c2c:	a378      	add	r3, pc, #480	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	4650      	mov	r0, sl
 8002c34:	4659      	mov	r1, fp
 8002c36:	f7fd ff97 	bl	8000b68 <__aeabi_dcmpgt>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f47f ae40 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 8002c42:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c4a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002c4e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c56:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c5a:	f7fd fb3d 	bl	80002d8 <__aeabi_dsub>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	61ba      	str	r2, [r7, #24]
 8002c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	a369      	add	r3, pc, #420	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c74:	f7fd ff78 	bl	8000b68 <__aeabi_dcmpgt>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f ae21 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 8002c80:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c84:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c88:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c8c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c90:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fb1e 	bl	80002d8 <__aeabi_dsub>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	613a      	str	r2, [r7, #16]
 8002ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	a359      	add	r3, pc, #356	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cb2:	f7fd ff59 	bl	8000b68 <__aeabi_dcmpgt>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f47f ae02 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 8002cbe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cc2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cc6:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002cca:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cce:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cd2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002cd6:	f7fd faff 	bl	80002d8 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	60ba      	str	r2, [r7, #8]
 8002ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	a34a      	add	r3, pc, #296	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cf0:	f7fd ff3a 	bl	8000b68 <__aeabi_dcmpgt>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f ade3 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002cfc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002d00:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002d04:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002d08:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002d0c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002d10:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002d14:	f7fd fae0 	bl	80002d8 <__aeabi_dsub>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	603a      	str	r2, [r7, #0]
 8002d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	a33a      	add	r3, pc, #232	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d2e:	f7fd ff1b 	bl	8000b68 <__aeabi_dcmpgt>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f47f adc4 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| cal_len < 500.0
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <ICM20602_IMU_calibration2+0x5cc>)
 8002d40:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d44:	f7fd fef2 	bl	8000b2c <__aeabi_dcmplt>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f adb9 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
 8002d50:	e000      	b.n	8002d54 <ICM20602_IMU_calibration2+0x504>
    	if(cal_len>5000){break;}
 8002d52:	bf00      	nop
    }

    if(cal_len==500){NVIC_SystemReset();}
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <ICM20602_IMU_calibration2+0x5cc>)
 8002d5a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d5e:	f7fd fedb 	bl	8000b18 <__aeabi_dcmpeq>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <ICM20602_IMU_calibration2+0x51c>
 8002d68:	f7ff f8cc 	bl	8001f04 <__NVIC_SystemReset>

    for(j = 0; j < 3; j++){
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002d72:	e03c      	b.n	8002dee <ICM20602_IMU_calibration2+0x59e>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d74:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d7e:	f107 0220 	add.w	r2, r7, #32
 8002d82:	4413      	add	r3, r2
 8002d84:	3b28      	subs	r3, #40	; 0x28
 8002d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d8a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002d8e:	f7fd fd85 	bl	800089c <__aeabi_ddiv>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff4d 	bl	8000c38 <__aeabi_d2f>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	491f      	ldr	r1, [pc, #124]	; (8002e20 <ICM20602_IMU_calibration2+0x5d0>)
 8002da2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	601a      	str	r2, [r3, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002dac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002db6:	f107 0220 	add.w	r2, r7, #32
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b40      	subs	r3, #64	; 0x40
 8002dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002dc6:	f7fd fd69 	bl	800089c <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd ff31 	bl	8000c38 <__aeabi_d2f>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4912      	ldr	r1, [pc, #72]	; (8002e24 <ICM20602_IMU_calibration2+0x5d4>)
 8002dda:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 3; j++){
 8002de4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002de8:	3301      	adds	r3, #1
 8002dea:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002dee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	ddbe      	ble.n	8002d74 <ICM20602_IMU_calibration2+0x524>
    }
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e04:	f3af 8000 	nop.w
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40b38800 	.word	0x40b38800
 8002e10:	eb1c432d 	.word	0xeb1c432d
 8002e14:	3f2a36e2 	.word	0x3f2a36e2
 8002e18:	3ff00000 	.word	0x3ff00000
 8002e1c:	407f4000 	.word	0x407f4000
 8002e20:	2000061c 	.word	0x2000061c
 8002e24:	20000628 	.word	0x20000628

08002e28 <ICM20602_IMU_compensate>:

void ICM20602_IMU_compensate(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
    int k;
    for(k=0;k<3;k++){
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	e02a      	b.n	8002e8a <ICM20602_IMU_compensate+0x62>
        acc_comp[k] = acc[k] - acc_off[k];
 8002e34:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <ICM20602_IMU_compensate+0x78>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	ed93 7a00 	vldr	s14, [r3]
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <ICM20602_IMU_compensate+0x7c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e50:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <ICM20602_IMU_compensate+0x80>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	edc3 7a00 	vstr	s15, [r3]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002e5c:	4a13      	ldr	r2, [pc, #76]	; (8002eac <ICM20602_IMU_compensate+0x84>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	ed93 7a00 	vldr	s14, [r3]
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <ICM20602_IMU_compensate+0x88>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e78:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <ICM20602_IMU_compensate+0x8c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	edc3 7a00 	vstr	s15, [r3]
    for(k=0;k<3;k++){
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3301      	adds	r3, #1
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	ddd1      	ble.n	8002e34 <ICM20602_IMU_compensate+0xc>
    }

}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200005e8 	.word	0x200005e8
 8002ea4:	2000061c 	.word	0x2000061c
 8002ea8:	20000600 	.word	0x20000600
 8002eac:	200005f4 	.word	0x200005f4
 8002eb0:	20000628 	.word	0x20000628
 8002eb4:	2000060c 	.word	0x2000060c

08002eb8 <__NVIC_SystemReset>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002ebc:	f3bf 8f4f 	dsb	sy
}
 8002ec0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <__NVIC_SystemReset+0x24>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002eca:	4904      	ldr	r1, [pc, #16]	; (8002edc <__NVIC_SystemReset+0x24>)
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <__NVIC_SystemReset+0x28>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed2:	f3bf 8f4f 	dsb	sy
}
 8002ed6:	bf00      	nop
    __NOP();
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <__NVIC_SystemReset+0x20>
 8002edc:	e000ed00 	.word	0xe000ed00
 8002ee0:	05fa0004 	.word	0x05fa0004

08002ee4 <_write>:
void __io_putchar(uint8_t ch)
{
	HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
}*/
int _write(int file, char *ptr, int len)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, 100); // 2ms
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	2364      	movs	r3, #100	; 0x64
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	4803      	ldr	r0, [pc, #12]	; (8002f08 <_write+0x24>)
 8002efa:	f008 ff15 	bl	800bd28 <HAL_UART_Transmit>
	return len;
 8002efe:	687b      	ldr	r3, [r7, #4]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000900 	.word	0x20000900

08002f0c <HAL_GetTick>:
void maintask_state_stop();
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2);
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	return uwTick;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000b74 	.word	0x20000b74

08002f24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f2a:	f003 f828 	bl	8005f7e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f2e:	f000 f959 	bl	80031e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f32:	f7fe ff0b 	bl	8001d4c <MX_GPIO_Init>
	MX_DMA_Init();
 8002f36:	f7fe fd61 	bl	80019fc <MX_DMA_Init>
	MX_FDCAN1_Init();
 8002f3a:	f7fe fda9 	bl	8001a90 <MX_FDCAN1_Init>
	MX_LPUART1_UART_Init();
 8002f3e:	f002 fd67 	bl	8005a10 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8002f42:	f002 fdb3 	bl	8005aac <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002f46:	f002 fe01 	bl	8005b4c <MX_USART3_UART_Init>
	MX_SPI1_Init();
 8002f4a:	f002 fa55 	bl	80053f8 <MX_SPI1_Init>
	MX_TIM5_Init();
 8002f4e:	f002 fc51 	bl	80057f4 <MX_TIM5_Init>
	MX_TIM7_Init();
 8002f52:	f002 fca9 	bl	80058a8 <MX_TIM7_Init>
	MX_ADC5_Init();
 8002f56:	f7fe faad 	bl	80014b4 <MX_ADC5_Init>
	MX_ADC3_Init();
 8002f5a:	f7fe fa33 	bl	80013c4 <MX_ADC3_Init>
	MX_FDCAN2_Init();
 8002f5e:	f7fe fddd 	bl	8001b1c <MX_FDCAN2_Init>
	MX_ADC1_Init();
 8002f62:	f7fe f9b7 	bl	80012d4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	check_motor1 = 0;
 8002f66:	4b7f      	ldr	r3, [pc, #508]	; (8003164 <main+0x240>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
	check_motor2 = 0;
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <main+0x244>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
	check_motor3 = 0;
 8002f72:	4b7e      	ldr	r3, [pc, #504]	; (800316c <main+0x248>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
	check_motor4 = 0;
 8002f78:	4b7d      	ldr	r3, [pc, #500]	; (8003170 <main+0x24c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
	check_power = 0;
 8002f7e:	4b7d      	ldr	r3, [pc, #500]	; (8003174 <main+0x250>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
	check_FC = 0;
 8002f84:	4b7c      	ldr	r3, [pc, #496]	; (8003178 <main+0x254>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
	kick_state = 0;
 8002f8a:	4b7c      	ldr	r3, [pc, #496]	; (800317c <main+0x258>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002f90:	2104      	movs	r1, #4
 8002f92:	487b      	ldr	r0, [pc, #492]	; (8003180 <main+0x25c>)
 8002f94:	f007 fdd6 	bl	800ab44 <HAL_TIM_PWM_Start>
	for (int i = 0; i < 3; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e006      	b.n	8002fac <main+0x88>
	{
		actuator_buzzer(20, 20);
 8002f9e:	2114      	movs	r1, #20
 8002fa0:	2014      	movs	r0, #20
 8002fa2:	f7fe f979 	bl	8001298 <actuator_buzzer>
	for (int i = 0; i < 3; i++)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	ddf5      	ble.n	8002f9e <main+0x7a>
	}
	setbuf(stdout, NULL);
 8002fb2:	4b74      	ldr	r3, [pc, #464]	; (8003184 <main+0x260>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f00b f85e 	bl	800e07c <setbuf>
	printf("start\r\n");
 8002fc0:	4871      	ldr	r0, [pc, #452]	; (8003188 <main+0x264>)
 8002fc2:	f00b f853 	bl	800e06c <puts>
	can1_init_ibis(&hfdcan1);
 8002fc6:	4871      	ldr	r0, [pc, #452]	; (800318c <main+0x268>)
 8002fc8:	f7fe fc58 	bl	800187c <can1_init_ibis>
	can2_init_ibis(&hfdcan2);
 8002fcc:	4870      	ldr	r0, [pc, #448]	; (8003190 <main+0x26c>)
 8002fce:	f7fe fcb5 	bl	800193c <can2_init_ibis>

	HAL_FDCAN_Start(&hfdcan1);
 8002fd2:	486e      	ldr	r0, [pc, #440]	; (800318c <main+0x268>)
 8002fd4:	f005 f98a 	bl	80082ec <HAL_FDCAN_Start>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2101      	movs	r1, #1
 8002fdc:	486b      	ldr	r0, [pc, #428]	; (800318c <main+0x268>)
 8002fde:	f005 fadd 	bl	800859c <HAL_FDCAN_ActivateNotification>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <main+0xc8>
	{
		Error_Handler();
 8002fe8:	f002 f8d0 	bl	800518c <Error_Handler>
	}

	HAL_FDCAN_Start(&hfdcan2);
 8002fec:	4868      	ldr	r0, [pc, #416]	; (8003190 <main+0x26c>)
 8002fee:	f005 f97d 	bl	80082ec <HAL_FDCAN_Start>
	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4866      	ldr	r0, [pc, #408]	; (8003190 <main+0x26c>)
 8002ff8:	f005 fad0 	bl	800859c <HAL_FDCAN_ActivateNotification>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <main+0xe2>
	{
		Error_Handler();
 8003002:	f002 f8c3 	bl	800518c <Error_Handler>
	}

	HAL_UART_Init(&hlpuart1);
 8003006:	4863      	ldr	r0, [pc, #396]	; (8003194 <main+0x270>)
 8003008:	f008 fe3e 	bl	800bc88 <HAL_UART_Init>
	xprintf_init(&hlpuart1);
 800300c:	4861      	ldr	r0, [pc, #388]	; (8003194 <main+0x270>)
 800300e:	f002 ff61 	bl	8005ed4 <xprintf_init>

	HAL_UART_Init(&huart2);
 8003012:	4861      	ldr	r0, [pc, #388]	; (8003198 <main+0x274>)
 8003014:	f008 fe38 	bl	800bc88 <HAL_UART_Init>
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)Rxbuf_from_Ether, Rxbufsize_from_Ether);
 8003018:	220e      	movs	r2, #14
 800301a:	4960      	ldr	r1, [pc, #384]	; (800319c <main+0x278>)
 800301c:	485e      	ldr	r0, [pc, #376]	; (8003198 <main+0x274>)
 800301e:	f008 ff19 	bl	800be54 <HAL_UART_Receive_DMA>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense, 1);
 8003022:	2201      	movs	r2, #1
 8003024:	495e      	ldr	r1, [pc, #376]	; (80031a0 <main+0x27c>)
 8003026:	485f      	ldr	r0, [pc, #380]	; (80031a4 <main+0x280>)
 8003028:	f003 fc14 	bl	8006854 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense, 1);
 800302c:	2201      	movs	r2, #1
 800302e:	495e      	ldr	r1, [pc, #376]	; (80031a8 <main+0x284>)
 8003030:	485e      	ldr	r0, [pc, #376]	; (80031ac <main+0x288>)
 8003032:	f003 fc0f 	bl	8006854 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata, 1);
 8003036:	2201      	movs	r2, #1
 8003038:	495d      	ldr	r1, [pc, #372]	; (80031b0 <main+0x28c>)
 800303a:	485e      	ldr	r0, [pc, #376]	; (80031b4 <main+0x290>)
 800303c:	f003 fc0a 	bl	8006854 <HAL_ADC_Start_DMA>
	// if(HAL_GetTick()>1000){
	//	Error_Handler();
	// }
	// }

	actuator_power_ONOFF(0);
 8003040:	2000      	movs	r0, #0
 8003042:	f7fe f8f3 	bl	800122c <actuator_power_ONOFF>
	HAL_Delay(20);
 8003046:	2014      	movs	r0, #20
 8003048:	f002 fffe 	bl	8006048 <HAL_Delay>

	actuator_motor1(0.0, 0.0);
 800304c:	eddf 0a5a 	vldr	s1, [pc, #360]	; 80031b8 <main+0x294>
 8003050:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80031b8 <main+0x294>
 8003054:	f7fd ffc2 	bl	8000fdc <actuator_motor1>
	actuator_motor2(0.0, 0.0);
 8003058:	eddf 0a57 	vldr	s1, [pc, #348]	; 80031b8 <main+0x294>
 800305c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80031b8 <main+0x294>
 8003060:	f7fd ffec 	bl	800103c <actuator_motor2>
	actuator_motor3(0.0, 0.0);
 8003064:	eddf 0a54 	vldr	s1, [pc, #336]	; 80031b8 <main+0x294>
 8003068:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80031b8 <main+0x294>
 800306c:	f7fe f816 	bl	800109c <actuator_motor3>
	actuator_motor4(0.0, 0.0);
 8003070:	eddf 0a51 	vldr	s1, [pc, #324]	; 80031b8 <main+0x294>
 8003074:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80031b8 <main+0x294>
 8003078:	f7fe f840 	bl	80010fc <actuator_motor4>
	actuator_motor5(0.0, 0.0);
 800307c:	eddf 0a4e 	vldr	s1, [pc, #312]	; 80031b8 <main+0x294>
 8003080:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80031b8 <main+0x294>
 8003084:	f7fe f86a 	bl	800115c <actuator_motor5>

	actuator_kicker(1, 1);
 8003088:	2101      	movs	r1, #1
 800308a:	2001      	movs	r0, #1
 800308c:	f7fe f8b7 	bl	80011fe <actuator_kicker>
	actuator_kicker_voltage(250.0);
 8003090:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80031bc <main+0x298>
 8003094:	f7fe f892 	bl	80011bc <actuator_kicker_voltage>
	actuator_power_param(1, 15.0); // min voltage
 8003098:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800309c:	2001      	movs	r0, #1
 800309e:	f7fe f8d8 	bl	8001252 <actuator_power_param>
	actuator_power_param(2, 35.0); // max voltage
 80030a2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80031c0 <main+0x29c>
 80030a6:	2002      	movs	r0, #2
 80030a8:	f7fe f8d3 	bl	8001252 <actuator_power_param>
	actuator_power_param(3, 50.0); // max current
 80030ac:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80031c4 <main+0x2a0>
 80030b0:	2003      	movs	r0, #3
 80030b2:	f7fe f8ce 	bl	8001252 <actuator_power_param>
	actuator_power_param(4, 90.0); // max temp(fet)
 80030b6:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80031c8 <main+0x2a4>
 80030ba:	2004      	movs	r0, #4
 80030bc:	f7fe f8c9 	bl	8001252 <actuator_power_param>
	actuator_power_param(5, 90.0); // max temp(solenoid)
 80030c0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80031c8 <main+0x2a4>
 80030c4:	2005      	movs	r0, #5
 80030c6:	f7fe f8c4 	bl	8001252 <actuator_power_param>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80030ca:	2201      	movs	r2, #1
 80030cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030d0:	483e      	ldr	r0, [pc, #248]	; (80031cc <main+0x2a8>)
 80030d2:	f005 ff6d 	bl	8008fb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80030d6:	2201      	movs	r2, #1
 80030d8:	2101      	movs	r1, #1
 80030da:	483c      	ldr	r0, [pc, #240]	; (80031cc <main+0x2a8>)
 80030dc:	f005 ff68 	bl	8008fb0 <HAL_GPIO_WritePin>
	ICM20602_init();
 80030e0:	f7fe ff96 	bl	8002010 <ICM20602_init>
	ICM20602_IMU_calibration2();
 80030e4:	f7ff fbb4 	bl	8002850 <ICM20602_IMU_calibration2>
	ICM20602_clearAngle();
 80030e8:	f7ff fa1a 	bl	8002520 <ICM20602_clearAngle>

	// uint8_t senddata_calib[8];
	// can1_send(0x340, senddata_calib);
	// can2_send(0x340, senddata_calib);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030f2:	4836      	ldr	r0, [pc, #216]	; (80031cc <main+0x2a8>)
 80030f4:	f005 ff5c 	bl	8008fb0 <HAL_GPIO_WritePin>
	actuator_power_ONOFF(1);
 80030f8:	2001      	movs	r0, #1
 80030fa:	f7fe f897 	bl	800122c <actuator_power_ONOFF>

	for (int i = 0; i < 3; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	e006      	b.n	8003112 <main+0x1ee>
	{
		actuator_buzzer(40, 40);
 8003104:	2128      	movs	r1, #40	; 0x28
 8003106:	2028      	movs	r0, #40	; 0x28
 8003108:	f7fe f8c6 	bl	8001298 <actuator_buzzer>
	for (int i = 0; i < 3; i++)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3301      	adds	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b02      	cmp	r3, #2
 8003116:	ddf5      	ble.n	8003104 <main+0x1e0>
	}

	data_from_ether[Rxbufsize_from_Ether - 3] = 0;
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <main+0x2ac>)
 800311a:	2200      	movs	r2, #0
 800311c:	72da      	strb	r2, [r3, #11]
	HAL_Delay(500);
 800311e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003122:	f002 ff91 	bl	8006048 <HAL_Delay>
	omni_odom[0] = 0;
 8003126:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <main+0x2b0>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
	omni_odom[1] = 0;
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <main+0x2b0>)
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 4; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
 800313a:	e00c      	b.n	8003156 <main+0x232>
	{
		pre_motor_enc_angle[i] = motor_enc_angle[i];
 800313c:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <main+0x2b4>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4925      	ldr	r1, [pc, #148]	; (80031dc <main+0x2b8>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3301      	adds	r3, #1
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b03      	cmp	r3, #3
 800315a:	ddef      	ble.n	800313c <main+0x218>
	}
	HAL_TIM_Base_Start_IT(&htim7);
 800315c:	4820      	ldr	r0, [pc, #128]	; (80031e0 <main+0x2bc>)
 800315e:	f007 fc21 	bl	800a9a4 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003162:	e7fe      	b.n	8003162 <main+0x23e>
 8003164:	20000799 	.word	0x20000799
 8003168:	2000079a 	.word	0x2000079a
 800316c:	2000079b 	.word	0x2000079b
 8003170:	2000079c 	.word	0x2000079c
 8003174:	2000079d 	.word	0x2000079d
 8003178:	2000079e 	.word	0x2000079e
 800317c:	20000634 	.word	0x20000634
 8003180:	20000868 	.word	0x20000868
 8003184:	20000014 	.word	0x20000014
 8003188:	080114ec 	.word	0x080114ec
 800318c:	20000468 	.word	0x20000468
 8003190:	200004cc 	.word	0x200004cc
 8003194:	20000900 	.word	0x20000900
 8003198:	20000990 	.word	0x20000990
 800319c:	200005ac 	.word	0x200005ac
 80031a0:	2000065c 	.word	0x2000065c
 80031a4:	20000200 	.word	0x20000200
 80031a8:	20000658 	.word	0x20000658
 80031ac:	2000026c 	.word	0x2000026c
 80031b0:	20000660 	.word	0x20000660
 80031b4:	200002d8 	.word	0x200002d8
 80031b8:	00000000 	.word	0x00000000
 80031bc:	437a0000 	.word	0x437a0000
 80031c0:	420c0000 	.word	0x420c0000
 80031c4:	42480000 	.word	0x42480000
 80031c8:	42b40000 	.word	0x42b40000
 80031cc:	48000800 	.word	0x48000800
 80031d0:	2000063c 	.word	0x2000063c
 80031d4:	20000778 	.word	0x20000778
 80031d8:	200006b8 	.word	0x200006b8
 80031dc:	200006cc 	.word	0x200006cc
 80031e0:	200008b4 	.word	0x200008b4

080031e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b094      	sub	sp, #80	; 0x50
 80031e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ea:	f107 0318 	add.w	r3, r7, #24
 80031ee:	2238      	movs	r2, #56	; 0x38
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f00a fa42 	bl	800d67c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003206:	2000      	movs	r0, #0
 8003208:	f005 ff1c 	bl	8009044 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800320c:	2301      	movs	r3, #1
 800320e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003214:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003216:	2302      	movs	r3, #2
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800321a:	2303      	movs	r3, #3
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800321e:	2302      	movs	r3, #2
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003222:	2355      	movs	r3, #85	; 0x55
 8003224:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003226:	2302      	movs	r3, #2
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800322a:	2302      	movs	r3, #2
 800322c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800322e:	2302      	movs	r3, #2
 8003230:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003232:	f107 0318 	add.w	r3, r7, #24
 8003236:	4618      	mov	r0, r3
 8003238:	f005 ffb8 	bl	80091ac <HAL_RCC_OscConfig>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8003242:	f001 ffa3 	bl	800518c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003246:	230f      	movs	r3, #15
 8003248:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800324a:	2303      	movs	r3, #3
 800324c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	2104      	movs	r1, #4
 800325e:	4618      	mov	r0, r3
 8003260:	f006 fabc 	bl	80097dc <HAL_RCC_ClockConfig>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800326a:	f001 ff8f 	bl	800518c <Error_Handler>
	}
}
 800326e:	bf00      	nop
 8003270:	3750      	adds	r7, #80	; 0x50
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b5b0      	push	{r4, r5, r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af02      	add	r7, sp, #8
 800327e:	6078      	str	r0, [r7, #4]
	ICM20602_read_IMU_data();
 8003280:	f7ff f80c 	bl	800229c <ICM20602_read_IMU_data>
	sw_mode = 15 - (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) << 3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) << 2));
 8003284:	2120      	movs	r1, #32
 8003286:	48ca      	ldr	r0, [pc, #808]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003288:	f005 fe7a 	bl	8008f80 <HAL_GPIO_ReadPin>
 800328c:	4603      	mov	r3, r0
 800328e:	461c      	mov	r4, r3
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	48c7      	ldr	r0, [pc, #796]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003294:	f005 fe74 	bl	8008f80 <HAL_GPIO_ReadPin>
 8003298:	4603      	mov	r3, r0
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	4423      	add	r3, r4
 80032a0:	b2dc      	uxtb	r4, r3
 80032a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032aa:	f005 fe69 	bl	8008f80 <HAL_GPIO_ReadPin>
 80032ae:	4603      	mov	r3, r0
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	4423      	add	r3, r4
 80032b6:	b2dc      	uxtb	r4, r3
 80032b8:	2104      	movs	r1, #4
 80032ba:	48be      	ldr	r0, [pc, #760]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80032bc:	f005 fe60 	bl	8008f80 <HAL_GPIO_ReadPin>
 80032c0:	4603      	mov	r3, r0
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4423      	add	r3, r4
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f1c3 030f 	rsb	r3, r3, #15
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	4bb9      	ldr	r3, [pc, #740]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80032d2:	701a      	strb	r2, [r3, #0]

	switch (sw_mode)
 80032d4:	4bb8      	ldr	r3, [pc, #736]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	f200 82db 	bhi.w	8003894 <HAL_TIM_PeriodElapsedCallback+0x61c>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003301 	.word	0x08003301
 80032e8:	08003479 	.word	0x08003479
 80032ec:	080034b7 	.word	0x080034b7
 80032f0:	08003523 	.word	0x08003523
 80032f4:	080036b1 	.word	0x080036b1
 80032f8:	0800370d 	.word	0x0800370d
 80032fc:	080037d1 	.word	0x080037d1
	{
	case 0: // main without debug
		omni_odom[0] = 0;
 8003300:	4bae      	ldr	r3, [pc, #696]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
		omni_odom[1] = 0;
 8003308:	4bac      	ldr	r3, [pc, #688]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	605a      	str	r2, [r3, #4]
		if (Ether_connect == 1)
 8003310:	4bab      	ldr	r3, [pc, #684]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d157      	bne.n	80033c8 <HAL_TIM_PeriodElapsedCallback+0x150>
		{
			yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
 8003318:	4baa      	ldr	r3, [pc, #680]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd f93b 	bl	8000598 <__aeabi_f2d>
 8003322:	a39b      	add	r3, pc, #620	; (adr r3, 8003590 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f7fd f98e 	bl	8000648 <__aeabi_dmul>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4614      	mov	r4, r2
 8003332:	461d      	mov	r5, r3
 8003334:	4ba4      	ldr	r3, [pc, #656]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f92d 	bl	8000598 <__aeabi_f2d>
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	4ba2      	ldr	r3, [pc, #648]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003344:	f7fd f980 	bl	8000648 <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	a391      	add	r3, pc, #580	; (adr r3, 8003598 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f7fd faa1 	bl	800089c <__aeabi_ddiv>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	a38f      	add	r3, pc, #572	; (adr r3, 80035a0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fd f96e 	bl	8000648 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4620      	mov	r0, r4
 8003372:	4629      	mov	r1, r5
 8003374:	f7fc ffb2 	bl	80002dc <__adddf3>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4610      	mov	r0, r2
 800337e:	4619      	mov	r1, r3
 8003380:	f7fd fc5a 	bl	8000c38 <__aeabi_d2f>
 8003384:	4603      	mov	r3, r0
 8003386:	4a8f      	ldr	r2, [pc, #572]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003388:	6013      	str	r3, [r2, #0]
			yawAngle_rad = yawAngle * M_PI / 180;
 800338a:	4b8e      	ldr	r3, [pc, #568]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f902 	bl	8000598 <__aeabi_f2d>
 8003394:	a384      	add	r3, pc, #528	; (adr r3, 80035a8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f7fd f955 	bl	8000648 <__aeabi_dmul>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80033ac:	f7fd fa76 	bl	800089c <__aeabi_ddiv>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7fd fc3e 	bl	8000c38 <__aeabi_d2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a84      	ldr	r2, [pc, #528]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80033c0:	6013      	str	r3, [r2, #0]
			maintask_run();
 80033c2:	f000 fea9 	bl	8004118 <maintask_run>
		{
			yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
			yawAngle_rad = yawAngle * M_PI / 180;
			maintask_state_stop();
		}
		break;
 80033c6:	e268      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>
			yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8e3 	bl	8000598 <__aeabi_f2d>
 80033d2:	a36f      	add	r3, pc, #444	; (adr r3, 8003590 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f7fd f936 	bl	8000648 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4614      	mov	r4, r2
 80033e2:	461d      	mov	r5, r3
 80033e4:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f8d5 	bl	8000598 <__aeabi_f2d>
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80033f4:	f7fd f928 	bl	8000648 <__aeabi_dmul>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	a365      	add	r3, pc, #404	; (adr r3, 8003598 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd fa49 	bl	800089c <__aeabi_ddiv>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	a363      	add	r3, pc, #396	; (adr r3, 80035a0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fd f916 	bl	8000648 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4620      	mov	r0, r4
 8003422:	4629      	mov	r1, r5
 8003424:	f7fc ff5a 	bl	80002dc <__adddf3>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fc02 	bl	8000c38 <__aeabi_d2f>
 8003434:	4603      	mov	r3, r0
 8003436:	4a63      	ldr	r2, [pc, #396]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003438:	6013      	str	r3, [r2, #0]
			yawAngle_rad = yawAngle * M_PI / 180;
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f8aa 	bl	8000598 <__aeabi_f2d>
 8003444:	a358      	add	r3, pc, #352	; (adr r3, 80035a8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f8fd 	bl	8000648 <__aeabi_dmul>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	4b5c      	ldr	r3, [pc, #368]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x354>)
 800345c:	f7fd fa1e 	bl	800089c <__aeabi_ddiv>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	f7fd fbe6 	bl	8000c38 <__aeabi_d2f>
 800346c:	4603      	mov	r3, r0
 800346e:	4a58      	ldr	r2, [pc, #352]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003470:	6013      	str	r3, [r2, #0]
			maintask_state_stop();
 8003472:	f001 fb2b 	bl	8004acc <maintask_state_stop>
		break;
 8003476:	e210      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>

	case 1: // main debug
		// yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
		yawAngle_rad = yawAngle * M_PI / 180;
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd f88b 	bl	8000598 <__aeabi_f2d>
 8003482:	a349      	add	r3, pc, #292	; (adr r3, 80035a8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fd f8de 	bl	8000648 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x354>)
 800349a:	f7fd f9ff 	bl	800089c <__aeabi_ddiv>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	f7fd fbc7 	bl	8000c38 <__aeabi_d2f>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80034ae:	6013      	str	r3, [r2, #0]
		maintask_run();
 80034b0:	f000 fe32 	bl	8004118 <maintask_run>
		break;
 80034b4:	e1f1      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>

	case 2: // calibration motor
		if (decode_SW(SWdata[0]) & 0b00010000)
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fcb4 	bl	8004e28 <decode_SW>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d014      	beq.n	80034f4 <HAL_TIM_PeriodElapsedCallback+0x27c>
		{
			uint8_t senddata_calib[8];
			can1_send(0x310, senddata_calib); // calibration
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	4619      	mov	r1, r3
 80034d0:	f44f 7044 	mov.w	r0, #784	; 0x310
 80034d4:	f7fe f9fc 	bl	80018d0 <can1_send>
			can2_send(0x310, senddata_calib); // calibration
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	4619      	mov	r1, r3
 80034de:	f44f 7044 	mov.w	r0, #784	; 0x310
 80034e2:	f7fe fa55 	bl	8001990 <can2_send>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80034e6:	2201      	movs	r2, #1
 80034e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ec:	483a      	ldr	r0, [pc, #232]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80034ee:	f005 fd5f 	bl	8008fb0 <HAL_GPIO_WritePin>
		{
			omni_move(0.0, 0.0, 0.0, 0.0);
			actuator_motor5(0.0, 0.0);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
		}
		break;
 80034f2:	e1d2      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>
			omni_move(0.0, 0.0, 0.0, 0.0);
 80034f4:	eddf 1a39 	vldr	s3, [pc, #228]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 80034f8:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 80034fc:	eddf 0a37 	vldr	s1, [pc, #220]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 8003500:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 8003504:	f001 fea4 	bl	8005250 <omni_move>
			actuator_motor5(0.0, 0.0);
 8003508:	eddf 0a34 	vldr	s1, [pc, #208]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 800350c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 8003510:	f7fd fe24 	bl	800115c <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800351a:	482f      	ldr	r0, [pc, #188]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800351c:	f005 fd48 	bl	8008fb0 <HAL_GPIO_WritePin>
		break;
 8003520:	e1bb      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>

	case 3: // motor test
		if (decode_SW(SWdata[0]) & 0b00000001)
 8003522:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fc7e 	bl	8004e28 <decode_SW>
 800352c:	4603      	mov	r3, r0
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_TIM_PeriodElapsedCallback+0x2e0>
		{
			omni_move(1.0, 0.0, 0.0, 1.0); // fwd
 8003536:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800353a:	ed9f 1a28 	vldr	s2, [pc, #160]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 800353e:	eddf 0a27 	vldr	s1, [pc, #156]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 8003542:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003546:	f001 fe83 	bl	8005250 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800354a:	2201      	movs	r2, #1
 800354c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003550:	4821      	ldr	r0, [pc, #132]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003552:	f005 fd2d 	bl	8008fb0 <HAL_GPIO_WritePin>
 8003556:	e0a4      	b.n	80036a2 <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else if (decode_SW(SWdata[0]) & 0b00000010)
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc63 	bl	8004e28 <decode_SW>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d039      	beq.n	80035e0 <HAL_TIM_PeriodElapsedCallback+0x368>
		{
			omni_move(-1.0, 0.0, 0.0, 1.0); // back
 800356c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003570:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 8003574:	eddf 0a19 	vldr	s1, [pc, #100]	; 80035dc <HAL_TIM_PeriodElapsedCallback+0x364>
 8003578:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800357c:	f001 fe68 	bl	8005250 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003580:	2201      	movs	r2, #1
 8003582:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003586:	4814      	ldr	r0, [pc, #80]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003588:	f005 fd12 	bl	8008fb0 <HAL_GPIO_WritePin>
 800358c:	e089      	b.n	80036a2 <HAL_TIM_PeriodElapsedCallback+0x42a>
 800358e:	bf00      	nop
 8003590:	d916872b 	.word	0xd916872b
 8003594:	3feff7ce 	.word	0x3feff7ce
 8003598:	60000000 	.word	0x60000000
 800359c:	400921fb 	.word	0x400921fb
 80035a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80035a4:	3f50624d 	.word	0x3f50624d
 80035a8:	54442d18 	.word	0x54442d18
 80035ac:	400921fb 	.word	0x400921fb
 80035b0:	48000400 	.word	0x48000400
 80035b4:	48000c00 	.word	0x48000c00
 80035b8:	200005ce 	.word	0x200005ce
 80035bc:	20000778 	.word	0x20000778
 80035c0:	200005c9 	.word	0x200005c9
 80035c4:	200005e0 	.word	0x200005e0
 80035c8:	2000075c 	.word	0x2000075c
 80035cc:	40668000 	.word	0x40668000
 80035d0:	200005e4 	.word	0x200005e4
 80035d4:	20000660 	.word	0x20000660
 80035d8:	48000800 	.word	0x48000800
 80035dc:	00000000 	.word	0x00000000
		}
		else if (decode_SW(SWdata[0]) & 0b00000100)
 80035e0:	4bb8      	ldr	r3, [pc, #736]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 fc1f 	bl	8004e28 <decode_SW>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <HAL_TIM_PeriodElapsedCallback+0x39e>
		{
			omni_move(0.0, -1.0, 0.0, 1.0); // left
 80035f4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80035f8:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80035fc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003600:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003604:	f001 fe24 	bl	8005250 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003608:	2201      	movs	r2, #1
 800360a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800360e:	48af      	ldr	r0, [pc, #700]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003610:	f005 fcce 	bl	8008fb0 <HAL_GPIO_WritePin>
 8003614:	e045      	b.n	80036a2 <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else if (decode_SW(SWdata[0]) & 0b00001000)
 8003616:	4bab      	ldr	r3, [pc, #684]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fc04 	bl	8004e28 <decode_SW>
 8003620:	4603      	mov	r3, r0
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d010      	beq.n	800364c <HAL_TIM_PeriodElapsedCallback+0x3d4>
		{
			omni_move(0.0, 1.0, 0.0, 1.0); // right
 800362a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800362e:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003632:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003636:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800363a:	f001 fe09 	bl	8005250 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800363e:	2201      	movs	r2, #1
 8003640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003644:	48a1      	ldr	r0, [pc, #644]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003646:	f005 fcb3 	bl	8008fb0 <HAL_GPIO_WritePin>
 800364a:	e02a      	b.n	80036a2 <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else if (decode_SW(SWdata[0]) & 0b00010000)
 800364c:	4b9d      	ldr	r3, [pc, #628]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f001 fbe9 	bl	8004e28 <decode_SW>
 8003656:	4603      	mov	r3, r0
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <HAL_TIM_PeriodElapsedCallback+0x40a>
		{
			omni_move(0.0, 0.0, 7.0, 1.0); // spin
 8003660:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003664:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003668:	eddf 0a97 	vldr	s1, [pc, #604]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800366c:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003670:	f001 fdee 	bl	8005250 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003674:	2201      	movs	r2, #1
 8003676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800367a:	4894      	ldr	r0, [pc, #592]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 800367c:	f005 fc98 	bl	8008fb0 <HAL_GPIO_WritePin>
 8003680:	e00f      	b.n	80036a2 <HAL_TIM_PeriodElapsedCallback+0x42a>
		}
		else
		{
			omni_move(0.0, 0.0, 0.0, 0.0);
 8003682:	eddf 1a91 	vldr	s3, [pc, #580]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003686:	ed9f 1a90 	vldr	s2, [pc, #576]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800368a:	eddf 0a8f 	vldr	s1, [pc, #572]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800368e:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003692:	f001 fddd 	bl	8005250 <omni_move>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800369c:	488b      	ldr	r0, [pc, #556]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 800369e:	f005 fc87 	bl	8008fb0 <HAL_GPIO_WritePin>
		}
		actuator_motor5(0.0, 0.0);
 80036a2:	eddf 0a89 	vldr	s1, [pc, #548]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036a6:	ed9f 0a88 	vldr	s0, [pc, #544]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036aa:	f7fd fd57 	bl	800115c <actuator_motor5>
		break;
 80036ae:	e0f4      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>

	case 4: // drible test
		if (decode_SW(SWdata[0]) & 0b00010000)
 80036b0:	4b84      	ldr	r3, [pc, #528]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fbb7 	bl	8004e28 <decode_SW>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <HAL_TIM_PeriodElapsedCallback+0x466>
		{
			actuator_motor5(0.5, 1.0);
 80036c4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80036c8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80036cc:	f7fd fd46 	bl	800115c <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80036d0:	2201      	movs	r2, #1
 80036d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036d6:	487d      	ldr	r0, [pc, #500]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80036d8:	f005 fc6a 	bl	8008fb0 <HAL_GPIO_WritePin>
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_PeriodElapsedCallback+0x47e>
		}
		else
		{
			actuator_motor5(0.0, 0.0);
 80036de:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036e2:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036e6:	f7fd fd39 	bl	800115c <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036f0:	4876      	ldr	r0, [pc, #472]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80036f2:	f005 fc5d 	bl	8008fb0 <HAL_GPIO_WritePin>
		}

		omni_move(0.0, 0.0, 0.0, 0.0);
 80036f6:	eddf 1a74 	vldr	s3, [pc, #464]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036fa:	ed9f 1a73 	vldr	s2, [pc, #460]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80036fe:	eddf 0a72 	vldr	s1, [pc, #456]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003702:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003706:	f001 fda3 	bl	8005250 <omni_move>

		break;
 800370a:	e0c6      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>

	case 5:
		if (decode_SW(SWdata[0]) & 0b00010000)
 800370c:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fb89 	bl	8004e28 <decode_SW>
 8003716:	4603      	mov	r3, r0
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d02e      	beq.n	800377e <HAL_TIM_PeriodElapsedCallback+0x506>
		{
			actuator_motor5(0.5, 1.0);
 8003720:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003724:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003728:	f7fd fd18 	bl	800115c <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800372c:	2201      	movs	r2, #1
 800372e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003732:	4866      	ldr	r0, [pc, #408]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003734:	f005 fc3c 	bl	8008fb0 <HAL_GPIO_WritePin>
			if (ball[0] == 1)
 8003738:	4b65      	ldr	r3, [pc, #404]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10a      	bne.n	8003756 <HAL_TIM_PeriodElapsedCallback+0x4de>
			{
				if (kick_state == 0)
 8003740:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <HAL_TIM_PeriodElapsedCallback+0x4de>
				{
					actuator_kicker(3, 100);
 8003748:	2164      	movs	r1, #100	; 0x64
 800374a:	2003      	movs	r0, #3
 800374c:	f7fd fd57 	bl	80011fe <actuator_kicker>
					kick_state = 1;
 8003750:	4b60      	ldr	r3, [pc, #384]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
				}
			}
			if (kick_state == 1)
 8003756:	4b5f      	ldr	r3, [pc, #380]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d12d      	bne.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x542>
			{
				kick_time++;
 800375e:	4b5e      	ldr	r3, [pc, #376]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	4a5c      	ldr	r2, [pc, #368]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003766:	6013      	str	r3, [r2, #0]
				if (kick_time > 100)
 8003768:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b64      	cmp	r3, #100	; 0x64
 800376e:	dd24      	ble.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x542>
				{
					kick_state = 0;
 8003770:	4b58      	ldr	r3, [pc, #352]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
					kick_time = 0;
 8003776:	4b58      	ldr	r3, [pc, #352]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e01d      	b.n	80037ba <HAL_TIM_PeriodElapsedCallback+0x542>
				}
			}
		}
		else
		{
			actuator_motor5(0.0, 0.0);
 800377e:	eddf 0a52 	vldr	s1, [pc, #328]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003782:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003786:	f7fd fce9 	bl	800115c <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003790:	484e      	ldr	r0, [pc, #312]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003792:	f005 fc0d 	bl	8008fb0 <HAL_GPIO_WritePin>
			actuator_kicker(1, 1);
 8003796:	2101      	movs	r1, #1
 8003798:	2001      	movs	r0, #1
 800379a:	f7fd fd30 	bl	80011fe <actuator_kicker>
			actuator_kicker(2, 0);
 800379e:	2100      	movs	r1, #0
 80037a0:	2002      	movs	r0, #2
 80037a2:	f7fd fd2c 	bl	80011fe <actuator_kicker>
			actuator_kicker_voltage(250.0);
 80037a6:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80038dc <HAL_TIM_PeriodElapsedCallback+0x664>
 80037aa:	f7fd fd07 	bl	80011bc <actuator_kicker_voltage>
			kick_state = 0;
 80037ae:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
			kick_time = 0;
 80037b4:	4b48      	ldr	r3, [pc, #288]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
		}
		omni_move(0.0, 0.0, 0.0, 0.0);
 80037ba:	eddf 1a43 	vldr	s3, [pc, #268]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037be:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037c2:	eddf 0a41 	vldr	s1, [pc, #260]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037c6:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 80037ca:	f001 fd41 	bl	8005250 <omni_move>
		break;
 80037ce:	e064      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>

	case 6:
		if (decode_SW(SWdata[0]) & 0b00010000)
 80037d0:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 fb27 	bl	8004e28 <decode_SW>
 80037da:	4603      	mov	r3, r0
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02e      	beq.n	8003842 <HAL_TIM_PeriodElapsedCallback+0x5ca>
		{
			actuator_motor5(0.5, 1.0);
 80037e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037e8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80037ec:	f7fd fcb6 	bl	800115c <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80037f0:	2201      	movs	r2, #1
 80037f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037f6:	4835      	ldr	r0, [pc, #212]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80037f8:	f005 fbda 	bl	8008fb0 <HAL_GPIO_WritePin>
			if (ball[0] == 1)
 80037fc:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x658>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d10a      	bne.n	800381a <HAL_TIM_PeriodElapsedCallback+0x5a2>
			{
				if (kick_state == 0)
 8003804:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_TIM_PeriodElapsedCallback+0x5a2>
				{
					actuator_kicker(3, 100);
 800380c:	2164      	movs	r1, #100	; 0x64
 800380e:	2003      	movs	r0, #3
 8003810:	f7fd fcf5 	bl	80011fe <actuator_kicker>
					kick_state = 1;
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]
				}
			}
			if (kick_state == 1)
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d12d      	bne.n	800387e <HAL_TIM_PeriodElapsedCallback+0x606>
			{
				kick_time++;
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800382a:	6013      	str	r3, [r2, #0]
				if (kick_time > 100)
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b64      	cmp	r3, #100	; 0x64
 8003832:	dd24      	ble.n	800387e <HAL_TIM_PeriodElapsedCallback+0x606>
				{
					kick_state = 0;
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
					kick_time = 0;
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e01d      	b.n	800387e <HAL_TIM_PeriodElapsedCallback+0x606>
				}
			}
		}
		else
		{
			actuator_motor5(0.0, 0.0);
 8003842:	eddf 0a21 	vldr	s1, [pc, #132]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003846:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800384a:	f7fd fc87 	bl	800115c <actuator_motor5>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003854:	481d      	ldr	r0, [pc, #116]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 8003856:	f005 fbab 	bl	8008fb0 <HAL_GPIO_WritePin>
			actuator_kicker(1, 1);
 800385a:	2101      	movs	r1, #1
 800385c:	2001      	movs	r0, #1
 800385e:	f7fd fcce 	bl	80011fe <actuator_kicker>
			actuator_kicker(2, 1);
 8003862:	2101      	movs	r1, #1
 8003864:	2002      	movs	r0, #2
 8003866:	f7fd fcca 	bl	80011fe <actuator_kicker>
			actuator_kicker_voltage(0.0);
 800386a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800386e:	f7fd fca5 	bl	80011bc <actuator_kicker_voltage>
			kick_state = 0;
 8003872:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
			kick_time = 0;
 8003878:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
		}
		omni_move(0.0, 0.0, 0.0, 0.0);
 800387e:	eddf 1a12 	vldr	s3, [pc, #72]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003882:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 8003886:	eddf 0a10 	vldr	s1, [pc, #64]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800388a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80038c8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800388e:	f001 fcdf 	bl	8005250 <omni_move>
		break;
 8003892:	e002      	b.n	800389a <HAL_TIM_PeriodElapsedCallback+0x622>

	default:
		maintask_stop();
 8003894:	f001 f982 	bl	8004b9c <maintask_stop>
		break;
 8003898:	bf00      	nop
	}

	if (cnt_time_tim > 50)
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	2b32      	cmp	r3, #50	; 0x32
 80038a0:	d936      	bls.n	8003910 <HAL_TIM_PeriodElapsedCallback+0x698>
	{
		if (Ether_connect_check != data_from_ether[Rxbufsize_from_Ether - 3])
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 80038a4:	7ada      	ldrb	r2, [r3, #11]
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_TIM_PeriodElapsedCallback+0x670>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d020      	beq.n	80038f0 <HAL_TIM_PeriodElapsedCallback+0x678>
		{
			Ether_connect = 1;
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_TIM_PeriodElapsedCallback+0x674>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80038b4:	2201      	movs	r2, #1
 80038b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038ba:	4804      	ldr	r0, [pc, #16]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0x654>)
 80038bc:	f005 fb78 	bl	8008fb0 <HAL_GPIO_WritePin>
 80038c0:	e01f      	b.n	8003902 <HAL_TIM_PeriodElapsedCallback+0x68a>
 80038c2:	bf00      	nop
 80038c4:	20000660 	.word	0x20000660
 80038c8:	00000000 	.word	0x00000000
 80038cc:	48000800 	.word	0x48000800
 80038d0:	20000768 	.word	0x20000768
 80038d4:	20000634 	.word	0x20000634
 80038d8:	20000638 	.word	0x20000638
 80038dc:	437a0000 	.word	0x437a0000
 80038e0:	200005cc 	.word	0x200005cc
 80038e4:	2000063c 	.word	0x2000063c
 80038e8:	200005ca 	.word	0x200005ca
 80038ec:	200005c9 	.word	0x200005c9
		}
		else
		{
			Ether_connect = 0;
 80038f0:	4b5f      	ldr	r3, [pc, #380]	; (8003a70 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038fc:	485d      	ldr	r0, [pc, #372]	; (8003a74 <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 80038fe:	f005 fb57 	bl	8008fb0 <HAL_GPIO_WritePin>
		}
		Ether_connect_check = data_from_ether[Rxbufsize_from_Ether - 3];
 8003902:	4b5d      	ldr	r3, [pc, #372]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8003904:	7ada      	ldrb	r2, [r3, #11]
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x804>)
 8003908:	701a      	strb	r2, [r3, #0]
		cnt_time_tim = 0;
 800390a:	4b5d      	ldr	r3, [pc, #372]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x808>)
 800390c:	2200      	movs	r2, #0
 800390e:	801a      	strh	r2, [r3, #0]
	}

	if (cnt_time_50Hz > 50)
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	2b32      	cmp	r3, #50	; 0x32
 8003916:	f240 808b 	bls.w	8003a30 <HAL_TIM_PeriodElapsedCallback+0x7b8>
	{
		if (sw_mode > 0)
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x810>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d07c      	beq.n	8003a1c <HAL_TIM_PeriodElapsedCallback+0x7a4>
		{
			// printf(" kicktime=%d, state=%d ",kick_time,kick_state);
			// printf("data: acc0=%f,acc1=%f,acc2=%f,gyro0=%f,gyro1=%f,gyro2=%f,tmp=%f",acc[0],acc[1],acc[2],gyro[0],gyro[1],gyro[2],IMU_tmp);
			// printf(" pich=%f roll=%f yaw=%f",pitchAngle,rollAngle,yawAngle);
			printf("yaw=%+4.1f ", yawAngle_rad);
 8003922:	4b5a      	ldr	r3, [pc, #360]	; (8003a8c <HAL_TIM_PeriodElapsedCallback+0x814>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fe36 	bl	8000598 <__aeabi_f2d>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4857      	ldr	r0, [pc, #348]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8003932:	f00a fb15 	bl	800df60 <iprintf>
			// printf(" C=%d V=%d SW=%d",Csense[0],Vsense[0],SWdata[0]);
			// printf(" A=%f",amplitudemotor_integral[1] - motor_integral[2][4]);
			// printf("ENC %+4.1f %+4.1f %+4.1f %+4.1f ", motor_enc_angle[0], motor_enc_angle[1], motor_enc_angle[2], motor_enc_angle[3]);
			// printf("Diff %+4.1f %+4.1f %+4.1f %+4.1f ", omni_angle_diff[0], omni_angle_diff[1], omni_angle_diff[2], omni_angle_diff[3]);
			// printf("Sin %+4.1f %+4.1f", sin(yawAngle_rad + M_PI * 3 / 4), sin(yawAngle_rad + M_PI * 5 / 4));
			printf("Adj %+5.3f ", robot_rotation_adj * 1000);
 8003936:	4b57      	ldr	r3, [pc, #348]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003a98 <HAL_TIM_PeriodElapsedCallback+0x820>
 8003940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003944:	ee17 0a90 	vmov	r0, s15
 8003948:	f7fc fe26 	bl	8000598 <__aeabi_f2d>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4852      	ldr	r0, [pc, #328]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x824>)
 8003952:	f00a fb05 	bl	800df60 <iprintf>
			printf("travel %+6.2f %+6.2f", omni_travel[0] * 1000, omni_travel[1] * 1000);
 8003956:	4b52      	ldr	r3, [pc, #328]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003a98 <HAL_TIM_PeriodElapsedCallback+0x820>
 8003960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003964:	ee17 0a90 	vmov	r0, s15
 8003968:	f7fc fe16 	bl	8000598 <__aeabi_f2d>
 800396c:	4604      	mov	r4, r0
 800396e:	460d      	mov	r5, r1
 8003970:	4b4b      	ldr	r3, [pc, #300]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003972:	edd3 7a01 	vldr	s15, [r3, #4]
 8003976:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003a98 <HAL_TIM_PeriodElapsedCallback+0x820>
 800397a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800397e:	ee17 0a90 	vmov	r0, s15
 8003982:	f7fc fe09 	bl	8000598 <__aeabi_f2d>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	e9cd 2300 	strd	r2, r3, [sp]
 800398e:	4622      	mov	r2, r4
 8003990:	462b      	mov	r3, r5
 8003992:	4844      	ldr	r0, [pc, #272]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8003994:	f00a fae4 	bl	800df60 <iprintf>
			printf("omni X%+8.0f Y%+8.0f ", omni_odom[0], omni_odom[1]);
 8003998:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fc fdfb 	bl	8000598 <__aeabi_f2d>
 80039a2:	4604      	mov	r4, r0
 80039a4:	460d      	mov	r5, r1
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0x830>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fc fdf4 	bl	8000598 <__aeabi_f2d>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	e9cd 2300 	strd	r2, r3, [sp]
 80039b8:	4622      	mov	r2, r4
 80039ba:	462b      	mov	r3, r5
 80039bc:	483b      	ldr	r0, [pc, #236]	; (8003aac <HAL_TIM_PeriodElapsedCallback+0x834>)
 80039be:	f00a facf 	bl	800df60 <iprintf>
			printf("tar X%+8.0f Y%+8.0f ", tar_pos[0], tar_pos[1]);
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fde6 	bl	8000598 <__aeabi_f2d>
 80039cc:	4604      	mov	r4, r0
 80039ce:	460d      	mov	r5, r1
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc fddf 	bl	8000598 <__aeabi_f2d>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	e9cd 2300 	strd	r2, r3, [sp]
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	4833      	ldr	r0, [pc, #204]	; (8003ab4 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80039e8:	f00a faba 	bl	800df60 <iprintf>
			printf("robot X%+8.0f Y%+8.0f ", robot_pos_diff[0], robot_pos_diff[1]);
 80039ec:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x840>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fc fdd1 	bl	8000598 <__aeabi_f2d>
 80039f6:	4604      	mov	r4, r0
 80039f8:	460d      	mov	r5, r1
 80039fa:	4b2f      	ldr	r3, [pc, #188]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x840>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc fdca 	bl	8000598 <__aeabi_f2d>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	e9cd 2300 	strd	r2, r3, [sp]
 8003a0c:	4622      	mov	r2, r4
 8003a0e:	462b      	mov	r3, r5
 8003a10:	482a      	ldr	r0, [pc, #168]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003a12:	f00a faa5 	bl	800df60 <iprintf>

			// printf(" ball:0=%d",ball[0]);
			// printf(" mouse:x=%+6ld, y=%+6ld", mouse_odom[0], mouse_odom[1]);
			printf("\r\n");
 8003a16:	482a      	ldr	r0, [pc, #168]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003a18:	f00a fb28 	bl	800e06c <puts>
		}

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	4829      	ldr	r0, [pc, #164]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003a20:	f005 fade 	bl	8008fe0 <HAL_GPIO_TogglePin>
		cnt_time_50Hz = 0;
 8003a24:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	801a      	strh	r2, [r3, #0]

		actuator_power_ONOFF(1);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7fd fbfe 	bl	800122c <actuator_power_ONOFF>
	}
	cnt_time_50Hz++;
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003a3a:	801a      	strh	r2, [r3, #0]
	cnt_time_tim++;
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8003a46:	801a      	strh	r2, [r3, #0]

	if (Power_voltage[4] < 22.0)
 8003a48:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8003a4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a4e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8003a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5a:	d400      	bmi.n	8003a5e <HAL_TIM_PeriodElapsedCallback+0x7e6>
	{
		actuator_buzzer(100, 100);
	}
}
 8003a5c:	e003      	b.n	8003a66 <HAL_TIM_PeriodElapsedCallback+0x7ee>
		actuator_buzzer(100, 100);
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	2064      	movs	r0, #100	; 0x64
 8003a62:	f7fd fc19 	bl	8001298 <actuator_buzzer>
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200005c9 	.word	0x200005c9
 8003a74:	48000800 	.word	0x48000800
 8003a78:	2000063c 	.word	0x2000063c
 8003a7c:	200005ca 	.word	0x200005ca
 8003a80:	200005cc 	.word	0x200005cc
 8003a84:	200005d4 	.word	0x200005d4
 8003a88:	200005ce 	.word	0x200005ce
 8003a8c:	200005e4 	.word	0x200005e4
 8003a90:	080114f4 	.word	0x080114f4
 8003a94:	20000684 	.word	0x20000684
 8003a98:	447a0000 	.word	0x447a0000
 8003a9c:	08011500 	.word	0x08011500
 8003aa0:	2000066c 	.word	0x2000066c
 8003aa4:	0801150c 	.word	0x0801150c
 8003aa8:	20000778 	.word	0x20000778
 8003aac:	08011524 	.word	0x08011524
 8003ab0:	20000688 	.word	0x20000688
 8003ab4:	0801153c 	.word	0x0801153c
 8003ab8:	2000067c 	.word	0x2000067c
 8003abc:	08011554 	.word	0x08011554
 8003ac0:	0801156c 	.word	0x0801156c
 8003ac4:	48000400 	.word	0x48000400
 8003ac8:	20000704 	.word	0x20000704

08003acc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	80fb      	strh	r3, [r7, #6]
	if (HAL_GetTick() > 2000)
 8003ad6:	f7ff fa19 	bl	8002f0c <HAL_GetTick>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ae0:	d934      	bls.n	8003b4c <HAL_GPIO_EXTI_Callback+0x80>
	{
		uint8_t cnt = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
		while (cnt < 100)
 8003ae6:	e00d      	b.n	8003b04 <HAL_GPIO_EXTI_Callback+0x38>
		{
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1)
 8003ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aec:	4819      	ldr	r0, [pc, #100]	; (8003b54 <HAL_GPIO_EXTI_Callback+0x88>)
 8003aee:	f005 fa47 	bl	8008f80 <HAL_GPIO_ReadPin>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d109      	bne.n	8003b0c <HAL_GPIO_EXTI_Callback+0x40>
			{
				cnt++;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	3301      	adds	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
				delayUs(1);
 8003afe:	2001      	movs	r0, #1
 8003b00:	f001 fb8e 	bl	8005220 <delayUs>
		while (cnt < 100)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b63      	cmp	r3, #99	; 0x63
 8003b08:	d9ee      	bls.n	8003ae8 <HAL_GPIO_EXTI_Callback+0x1c>
 8003b0a:	e000      	b.n	8003b0e <HAL_GPIO_EXTI_Callback+0x42>
			}
			else
			{
				break;
 8003b0c:	bf00      	nop
			}
		}

		if (cnt >= 100)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b63      	cmp	r3, #99	; 0x63
 8003b12:	d918      	bls.n	8003b46 <HAL_GPIO_EXTI_Callback+0x7a>
		{
			Emargency = 1;
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 8003b1a:	4810      	ldr	r0, [pc, #64]	; (8003b5c <HAL_GPIO_EXTI_Callback+0x90>)
 8003b1c:	f00a fa20 	bl	800df60 <iprintf>
			for (int i = 0; i < 50; i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	e004      	b.n	8003b30 <HAL_GPIO_EXTI_Callback+0x64>
			{
				maintask_emargency();
 8003b26:	f000 ff63 	bl	80049f0 <maintask_emargency>
			for (int i = 0; i < 50; i++)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b31      	cmp	r3, #49	; 0x31
 8003b34:	ddf7      	ble.n	8003b26 <HAL_GPIO_EXTI_Callback+0x5a>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b3c:	4805      	ldr	r0, [pc, #20]	; (8003b54 <HAL_GPIO_EXTI_Callback+0x88>)
 8003b3e:	f005 fa37 	bl	8008fb0 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8003b42:	f7ff f9b9 	bl	8002eb8 <__NVIC_SystemReset>
			Emargency = 0;
		}
		else
		{
			Emargency = 0;
 8003b46:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	48000400 	.word	0x48000400
 8003b58:	20000662 	.word	0x20000662
 8003b5c:	08011570 	.word	0x08011570

08003b60 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 82a9 	beq.w	80040c8 <HAL_FDCAN_RxFifo0Callback+0x568>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003b76:	4baf      	ldr	r3, [pc, #700]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003b78:	4aaf      	ldr	r2, [pc, #700]	; (8003e38 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f004 fc21 	bl	80083c4 <HAL_FDCAN_GetRxMessage>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_FDCAN_RxFifo0Callback+0x2c>
		{
			Error_Handler();
 8003b88:	f001 fb00 	bl	800518c <Error_Handler>
		}
		switch (RxHeader.Identifier)
 8003b8c:	4baa      	ldr	r3, [pc, #680]	; (8003e38 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f240 4201 	movw	r2, #1025	; 0x401
 8003b94:	4293      	cmp	r3, r2
 8003b96:	f000 8109 	beq.w	8003dac <HAL_FDCAN_RxFifo0Callback+0x24c>
 8003b9a:	f240 4201 	movw	r2, #1025	; 0x401
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f200 8295 	bhi.w	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	f200 809d 	bhi.w	8003ce4 <HAL_FDCAN_RxFifo0Callback+0x184>
 8003baa:	e08b      	b.n	8003cc4 <HAL_FDCAN_RxFifo0Callback+0x164>
 8003bac:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003bb0:	2b41      	cmp	r3, #65	; 0x41
 8003bb2:	f200 828c 	bhi.w	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003ebb 	.word	0x08003ebb
 8003bc0:	08003f07 	.word	0x08003f07
 8003bc4:	08003f53 	.word	0x08003f53
 8003bc8:	08003f9f 	.word	0x08003f9f
 8003bcc:	08003feb 	.word	0x08003feb
 8003bd0:	080040cf 	.word	0x080040cf
 8003bd4:	080040cf 	.word	0x080040cf
 8003bd8:	080040cf 	.word	0x080040cf
 8003bdc:	080040cf 	.word	0x080040cf
 8003be0:	080040cf 	.word	0x080040cf
 8003be4:	080040cf 	.word	0x080040cf
 8003be8:	080040cf 	.word	0x080040cf
 8003bec:	080040cf 	.word	0x080040cf
 8003bf0:	080040cf 	.word	0x080040cf
 8003bf4:	080040cf 	.word	0x080040cf
 8003bf8:	080040cf 	.word	0x080040cf
 8003bfc:	08003d4d 	.word	0x08003d4d
 8003c00:	080040cf 	.word	0x080040cf
 8003c04:	080040cf 	.word	0x080040cf
 8003c08:	080040cf 	.word	0x080040cf
 8003c0c:	080040cf 	.word	0x080040cf
 8003c10:	08003d5f 	.word	0x08003d5f
 8003c14:	080040cf 	.word	0x080040cf
 8003c18:	080040cf 	.word	0x080040cf
 8003c1c:	080040cf 	.word	0x080040cf
 8003c20:	080040cf 	.word	0x080040cf
 8003c24:	080040cf 	.word	0x080040cf
 8003c28:	080040cf 	.word	0x080040cf
 8003c2c:	080040cf 	.word	0x080040cf
 8003c30:	080040cf 	.word	0x080040cf
 8003c34:	080040cf 	.word	0x080040cf
 8003c38:	080040cf 	.word	0x080040cf
 8003c3c:	08004021 	.word	0x08004021
 8003c40:	08004033 	.word	0x08004033
 8003c44:	08004045 	.word	0x08004045
 8003c48:	08004057 	.word	0x08004057
 8003c4c:	08003d71 	.word	0x08003d71
 8003c50:	08003d83 	.word	0x08003d83
 8003c54:	080040cf 	.word	0x080040cf
 8003c58:	080040cf 	.word	0x080040cf
 8003c5c:	080040cf 	.word	0x080040cf
 8003c60:	080040cf 	.word	0x080040cf
 8003c64:	080040cf 	.word	0x080040cf
 8003c68:	080040cf 	.word	0x080040cf
 8003c6c:	080040cf 	.word	0x080040cf
 8003c70:	080040cf 	.word	0x080040cf
 8003c74:	080040cf 	.word	0x080040cf
 8003c78:	080040cf 	.word	0x080040cf
 8003c7c:	08004069 	.word	0x08004069
 8003c80:	08004081 	.word	0x08004081
 8003c84:	08004099 	.word	0x08004099
 8003c88:	080040b1 	.word	0x080040b1
 8003c8c:	08003d95 	.word	0x08003d95
 8003c90:	080040cf 	.word	0x080040cf
 8003c94:	080040cf 	.word	0x080040cf
 8003c98:	080040cf 	.word	0x080040cf
 8003c9c:	080040cf 	.word	0x080040cf
 8003ca0:	080040cf 	.word	0x080040cf
 8003ca4:	080040cf 	.word	0x080040cf
 8003ca8:	080040cf 	.word	0x080040cf
 8003cac:	080040cf 	.word	0x080040cf
 8003cb0:	080040cf 	.word	0x080040cf
 8003cb4:	080040cf 	.word	0x080040cf
 8003cb8:	080040cf 	.word	0x080040cf
 8003cbc:	08003d25 	.word	0x08003d25
 8003cc0:	08003e6d 	.word	0x08003e6d
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	f200 8202 	bhi.w	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <HAL_FDCAN_RxFifo0Callback+0x170>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003d0f 	.word	0x08003d0f
 8003cd8:	080040cd 	.word	0x080040cd
 8003cdc:	080040cd 	.word	0x080040cd
 8003ce0:	080040cd 	.word	0x080040cd
 8003ce4:	f240 2241 	movw	r2, #577	; 0x241
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	f200 81f0 	bhi.w	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
 8003cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf2:	f4bf af5b 	bcs.w	8003bac <HAL_FDCAN_RxFifo0Callback+0x4c>
			amplitude[3] = uchar4_to_float(RxData);
			check_motor4 = 1;
			break;
		}
	}
}
 8003cf6:	e1ea      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			error_No[0] = RxData[0];
 8003cf8:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003cfe:	701a      	strb	r2, [r3, #0]
			error_No[1] = RxData[1];
 8003d00:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d02:	785a      	ldrb	r2, [r3, #1]
 8003d04:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003d06:	705a      	strb	r2, [r3, #1]
			Error_Handler();
 8003d08:	f001 fa40 	bl	800518c <Error_Handler>
			break;
 8003d0c:	e1df      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			error_No[0] = RxData[0];
 8003d0e:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	4b4a      	ldr	r3, [pc, #296]	; (8003e3c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003d14:	701a      	strb	r2, [r3, #0]
			error_No[1] = RxData[1];
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d18:	785a      	ldrb	r2, [r3, #1]
 8003d1a:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003d1c:	705a      	strb	r2, [r3, #1]
			maintask_stop();
 8003d1e:	f000 ff3d 	bl	8004b9c <maintask_stop>
			break;
 8003d22:	e1d4      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			ball[0] = RxData[0];
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003d2a:	701a      	strb	r2, [r3, #0]
			ball[1] = RxData[1];
 8003d2c:	4b41      	ldr	r3, [pc, #260]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d2e:	785a      	ldrb	r2, [r3, #1]
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003d32:	705a      	strb	r2, [r3, #1]
			ball[2] = RxData[2];
 8003d34:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d36:	789a      	ldrb	r2, [r3, #2]
 8003d38:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003d3a:	709a      	strb	r2, [r3, #2]
			ball[3] = RxData[3];
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d3e:	78da      	ldrb	r2, [r3, #3]
 8003d40:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003d42:	70da      	strb	r2, [r3, #3]
			check_FC = 1;
 8003d44:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_FDCAN_RxFifo0Callback+0x2e4>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
			break;
 8003d4a:	e1c0      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			Power_voltage[4] = uchar4_to_float(RxData);
 8003d4c:	4839      	ldr	r0, [pc, #228]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d4e:	f002 f889 	bl	8005e64 <uchar4_to_float>
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	4b3c      	ldr	r3, [pc, #240]	; (8003e48 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8003d58:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d5c:	e1b7      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			Power_voltage[5] = uchar4_to_float(RxData);
 8003d5e:	4835      	ldr	r0, [pc, #212]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d60:	f002 f880 	bl	8005e64 <uchar4_to_float>
 8003d64:	eef0 7a40 	vmov.f32	s15, s0
 8003d68:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8003d6a:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
 8003d6e:	e1ae      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			tempercher[4] = uchar4_to_float(RxData);
 8003d70:	4830      	ldr	r0, [pc, #192]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d72:	f002 f877 	bl	8005e64 <uchar4_to_float>
 8003d76:	eef0 7a40 	vmov.f32	s15, s0
 8003d7a:	4b34      	ldr	r3, [pc, #208]	; (8003e4c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003d7c:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 8003d80:	e1a5      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			tempercher[5] = uchar4_to_float(RxData);
 8003d82:	482c      	ldr	r0, [pc, #176]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d84:	f002 f86e 	bl	8005e64 <uchar4_to_float>
 8003d88:	eef0 7a40 	vmov.f32	s15, s0
 8003d8c:	4b2f      	ldr	r3, [pc, #188]	; (8003e4c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003d8e:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
 8003d92:	e19c      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			amplitude[4] = uchar4_to_float(RxData);
 8003d94:	4827      	ldr	r0, [pc, #156]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003d96:	f002 f865 	bl	8005e64 <uchar4_to_float>
 8003d9a:	eef0 7a40 	vmov.f32	s15, s0
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8003da0:	edc3 7a04 	vstr	s15, [r3, #16]
			check_power = 1;
 8003da4:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
			break;
 8003daa:	e190      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			data_from_ether[8] = RxData[0];
 8003dac:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	4b29      	ldr	r3, [pc, #164]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003db2:	721a      	strb	r2, [r3, #8]
			data_from_ether[9] = RxData[1];
 8003db4:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003db6:	785a      	ldrb	r2, [r3, #1]
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003dba:	725a      	strb	r2, [r3, #9]
			data_from_ether[10] = RxData[2];
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003dbe:	789a      	ldrb	r2, [r3, #2]
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003dc2:	729a      	strb	r2, [r3, #10]
			data_from_ether[11] = RxData[3];
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003dc6:	78da      	ldrb	r2, [r3, #3]
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003dca:	72da      	strb	r2, [r3, #11]
			data_from_ether[12] = RxData[4];
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003dce:	791a      	ldrb	r2, [r3, #4]
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003dd2:	731a      	strb	r2, [r3, #12]
			if (data_from_ether[8] > 100)
 8003dd4:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003dd6:	7a1b      	ldrb	r3, [r3, #8]
 8003dd8:	2b64      	cmp	r3, #100	; 0x64
 8003dda:	d909      	bls.n	8003df0 <HAL_FDCAN_RxFifo0Callback+0x290>
				chipEN = 1;
 8003ddc:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <HAL_FDCAN_RxFifo0Callback+0x2fc>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	701a      	strb	r2, [r3, #0]
				data_from_ether[8] = data_from_ether[8] - 100;
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003de4:	7a1b      	ldrb	r3, [r3, #8]
 8003de6:	3b64      	subs	r3, #100	; 0x64
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003dec:	721a      	strb	r2, [r3, #8]
 8003dee:	e002      	b.n	8003df6 <HAL_FDCAN_RxFifo0Callback+0x296>
				chipEN = 0;
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_FDCAN_RxFifo0Callback+0x2fc>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
			kick_power = (float32_t)data_from_ether[8] / 20.0;
 8003df6:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003df8:	7a1b      	ldrb	r3, [r3, #8]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e02:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003e06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_FDCAN_RxFifo0Callback+0x300>)
 8003e0c:	edc3 7a00 	vstr	s15, [r3]
			drible_power = (float32_t)data_from_ether[9] / 20.0;
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003e12:	7a5b      	ldrb	r3, [r3, #9]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e1c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003e26:	edc3 7a00 	vstr	s15, [r3]
			keeper_EN = data_from_ether[10];
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003e2c:	7a9a      	ldrb	r2, [r3, #10]
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <HAL_FDCAN_RxFifo0Callback+0x308>)
 8003e30:	701a      	strb	r2, [r3, #0]
			break;
 8003e32:	e14c      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
 8003e34:	20000664 	.word	0x20000664
 8003e38:	200007c4 	.word	0x200007c4
 8003e3c:	20000780 	.word	0x20000780
 8003e40:	20000768 	.word	0x20000768
 8003e44:	2000079e 	.word	0x2000079e
 8003e48:	20000704 	.word	0x20000704
 8003e4c:	2000071c 	.word	0x2000071c
 8003e50:	20000734 	.word	0x20000734
 8003e54:	2000079d 	.word	0x2000079d
 8003e58:	2000063c 	.word	0x2000063c
 8003e5c:	20000764 	.word	0x20000764
 8003e60:	20000758 	.word	0x20000758
 8003e64:	20000754 	.word	0x20000754
 8003e68:	20000798 	.word	0x20000798
			mouse[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8003e6c:	4b9a      	ldr	r3, [pc, #616]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	b21a      	sxth	r2, r3
 8003e74:	4b98      	ldr	r3, [pc, #608]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b21a      	sxth	r2, r3
 8003e7e:	4b97      	ldr	r3, [pc, #604]	; (80040dc <HAL_FDCAN_RxFifo0Callback+0x57c>)
 8003e80:	801a      	strh	r2, [r3, #0]
			mouse[1] = (int16_t)((RxData[3] << 8) | RxData[2]);
 8003e82:	4b95      	ldr	r3, [pc, #596]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003e84:	78db      	ldrb	r3, [r3, #3]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	b21a      	sxth	r2, r3
 8003e8a:	4b93      	ldr	r3, [pc, #588]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003e8c:	789b      	ldrb	r3, [r3, #2]
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	4313      	orrs	r3, r2
 8003e92:	b21a      	sxth	r2, r3
 8003e94:	4b91      	ldr	r3, [pc, #580]	; (80040dc <HAL_FDCAN_RxFifo0Callback+0x57c>)
 8003e96:	805a      	strh	r2, [r3, #2]
			mouse_odom[0] += mouse[0];
 8003e98:	4b91      	ldr	r3, [pc, #580]	; (80040e0 <HAL_FDCAN_RxFifo0Callback+0x580>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a8f      	ldr	r2, [pc, #572]	; (80040dc <HAL_FDCAN_RxFifo0Callback+0x57c>)
 8003e9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a8e      	ldr	r2, [pc, #568]	; (80040e0 <HAL_FDCAN_RxFifo0Callback+0x580>)
 8003ea6:	6013      	str	r3, [r2, #0]
			mouse_odom[1] += mouse[1];
 8003ea8:	4b8d      	ldr	r3, [pc, #564]	; (80040e0 <HAL_FDCAN_RxFifo0Callback+0x580>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4a8b      	ldr	r2, [pc, #556]	; (80040dc <HAL_FDCAN_RxFifo0Callback+0x57c>)
 8003eae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	4a8a      	ldr	r2, [pc, #552]	; (80040e0 <HAL_FDCAN_RxFifo0Callback+0x580>)
 8003eb6:	6053      	str	r3, [r2, #4]
			break;
 8003eb8:	e109      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			motor_enc_angle[0] = uchar4_to_float(&RxData[4]);
 8003eba:	488a      	ldr	r0, [pc, #552]	; (80040e4 <HAL_FDCAN_RxFifo0Callback+0x584>)
 8003ebc:	f001 ffd2 	bl	8005e64 <uchar4_to_float>
 8003ec0:	eef0 7a40 	vmov.f32	s15, s0
 8003ec4:	4b88      	ldr	r3, [pc, #544]	; (80040e8 <HAL_FDCAN_RxFifo0Callback+0x588>)
 8003ec6:	edc3 7a00 	vstr	s15, [r3]
			motor_feedback[0] = uchar4_to_float(RxData);
 8003eca:	4883      	ldr	r0, [pc, #524]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003ecc:	f001 ffca 	bl	8005e64 <uchar4_to_float>
 8003ed0:	eef0 7a40 	vmov.f32	s15, s0
 8003ed4:	4b85      	ldr	r3, [pc, #532]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003ed6:	edc3 7a00 	vstr	s15, [r3]
			motor_feedback_velocity[0] = motor_feedback[0] * OMNI_DIR_LENGTH;
 8003eda:	4b84      	ldr	r3, [pc, #528]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80040f0 <HAL_FDCAN_RxFifo0Callback+0x590>
 8003ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee8:	4b82      	ldr	r3, [pc, #520]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003eea:	edc3 7a00 	vstr	s15, [r3]
			motor_integral[0] += motor_feedback_velocity[0];
 8003eee:	4b82      	ldr	r3, [pc, #520]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003ef0:	ed93 7a00 	vldr	s14, [r3]
 8003ef4:	4b7f      	ldr	r3, [pc, #508]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efe:	4b7e      	ldr	r3, [pc, #504]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003f00:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003f04:	e0e3      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			motor_enc_angle[1] = uchar4_to_float(&RxData[4]);
 8003f06:	4877      	ldr	r0, [pc, #476]	; (80040e4 <HAL_FDCAN_RxFifo0Callback+0x584>)
 8003f08:	f001 ffac 	bl	8005e64 <uchar4_to_float>
 8003f0c:	eef0 7a40 	vmov.f32	s15, s0
 8003f10:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_FDCAN_RxFifo0Callback+0x588>)
 8003f12:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_feedback[1] = uchar4_to_float(RxData);
 8003f16:	4870      	ldr	r0, [pc, #448]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003f18:	f001 ffa4 	bl	8005e64 <uchar4_to_float>
 8003f1c:	eef0 7a40 	vmov.f32	s15, s0
 8003f20:	4b72      	ldr	r3, [pc, #456]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003f22:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_feedback_velocity[1] = motor_feedback[1] * OMNI_DIR_LENGTH;
 8003f26:	4b71      	ldr	r3, [pc, #452]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003f28:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f2c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80040f0 <HAL_FDCAN_RxFifo0Callback+0x590>
 8003f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f34:	4b6f      	ldr	r3, [pc, #444]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003f36:	edc3 7a01 	vstr	s15, [r3, #4]
			motor_integral[1] += motor_feedback_velocity[1];
 8003f3a:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003f3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f40:	4b6c      	ldr	r3, [pc, #432]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003f4c:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8003f50:	e0bd      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			motor_enc_angle[2] = uchar4_to_float(&RxData[4]);
 8003f52:	4864      	ldr	r0, [pc, #400]	; (80040e4 <HAL_FDCAN_RxFifo0Callback+0x584>)
 8003f54:	f001 ff86 	bl	8005e64 <uchar4_to_float>
 8003f58:	eef0 7a40 	vmov.f32	s15, s0
 8003f5c:	4b62      	ldr	r3, [pc, #392]	; (80040e8 <HAL_FDCAN_RxFifo0Callback+0x588>)
 8003f5e:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_feedback[2] = uchar4_to_float(RxData);
 8003f62:	485d      	ldr	r0, [pc, #372]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003f64:	f001 ff7e 	bl	8005e64 <uchar4_to_float>
 8003f68:	eef0 7a40 	vmov.f32	s15, s0
 8003f6c:	4b5f      	ldr	r3, [pc, #380]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003f6e:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_feedback_velocity[2] = motor_feedback[2] * OMNI_DIR_LENGTH;
 8003f72:	4b5e      	ldr	r3, [pc, #376]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003f74:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f78:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80040f0 <HAL_FDCAN_RxFifo0Callback+0x590>
 8003f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f80:	4b5c      	ldr	r3, [pc, #368]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003f82:	edc3 7a02 	vstr	s15, [r3, #8]
			motor_integral[2] += motor_feedback_velocity[2];
 8003f86:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003f88:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f8c:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003f8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003f98:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8003f9c:	e097      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			motor_enc_angle[3] = uchar4_to_float(&RxData[4]);
 8003f9e:	4851      	ldr	r0, [pc, #324]	; (80040e4 <HAL_FDCAN_RxFifo0Callback+0x584>)
 8003fa0:	f001 ff60 	bl	8005e64 <uchar4_to_float>
 8003fa4:	eef0 7a40 	vmov.f32	s15, s0
 8003fa8:	4b4f      	ldr	r3, [pc, #316]	; (80040e8 <HAL_FDCAN_RxFifo0Callback+0x588>)
 8003faa:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_feedback[3] = uchar4_to_float(RxData);
 8003fae:	484a      	ldr	r0, [pc, #296]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003fb0:	f001 ff58 	bl	8005e64 <uchar4_to_float>
 8003fb4:	eef0 7a40 	vmov.f32	s15, s0
 8003fb8:	4b4c      	ldr	r3, [pc, #304]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003fba:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_feedback_velocity[3] = motor_feedback[3] * OMNI_DIR_LENGTH;
 8003fbe:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8003fc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fc4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80040f0 <HAL_FDCAN_RxFifo0Callback+0x590>
 8003fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fcc:	4b49      	ldr	r3, [pc, #292]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003fce:	edc3 7a03 	vstr	s15, [r3, #12]
			motor_integral[3] += motor_feedback_velocity[03];
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003fd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fd8:	4b46      	ldr	r3, [pc, #280]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 8003fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe2:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <HAL_FDCAN_RxFifo0Callback+0x598>)
 8003fe4:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8003fe8:	e071      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			motor_enc_angle[4] = uchar4_to_float(&RxData[4]);
 8003fea:	483e      	ldr	r0, [pc, #248]	; (80040e4 <HAL_FDCAN_RxFifo0Callback+0x584>)
 8003fec:	f001 ff3a 	bl	8005e64 <uchar4_to_float>
 8003ff0:	eef0 7a40 	vmov.f32	s15, s0
 8003ff4:	4b3c      	ldr	r3, [pc, #240]	; (80040e8 <HAL_FDCAN_RxFifo0Callback+0x588>)
 8003ff6:	edc3 7a04 	vstr	s15, [r3, #16]
			motor_feedback[4] = uchar4_to_float(RxData);
 8003ffa:	4837      	ldr	r0, [pc, #220]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8003ffc:	f001 ff32 	bl	8005e64 <uchar4_to_float>
 8004000:	eef0 7a40 	vmov.f32	s15, s0
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 8004006:	edc3 7a04 	vstr	s15, [r3, #16]
			motor_feedback_velocity[4] = motor_feedback[3] * OMNI_DIR_LENGTH;
 800400a:	4b38      	ldr	r3, [pc, #224]	; (80040ec <HAL_FDCAN_RxFifo0Callback+0x58c>)
 800400c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004010:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80040f0 <HAL_FDCAN_RxFifo0Callback+0x590>
 8004014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_FDCAN_RxFifo0Callback+0x594>)
 800401a:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
 800401e:	e056      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			tempercher[0] = uchar4_to_float(RxData);
 8004020:	482d      	ldr	r0, [pc, #180]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8004022:	f001 ff1f 	bl	8005e64 <uchar4_to_float>
 8004026:	eef0 7a40 	vmov.f32	s15, s0
 800402a:	4b34      	ldr	r3, [pc, #208]	; (80040fc <HAL_FDCAN_RxFifo0Callback+0x59c>)
 800402c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004030:	e04d      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			tempercher[1] = uchar4_to_float(RxData);
 8004032:	4829      	ldr	r0, [pc, #164]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8004034:	f001 ff16 	bl	8005e64 <uchar4_to_float>
 8004038:	eef0 7a40 	vmov.f32	s15, s0
 800403c:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <HAL_FDCAN_RxFifo0Callback+0x59c>)
 800403e:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8004042:	e044      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			tempercher[2] = uchar4_to_float(RxData);
 8004044:	4824      	ldr	r0, [pc, #144]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8004046:	f001 ff0d 	bl	8005e64 <uchar4_to_float>
 800404a:	eef0 7a40 	vmov.f32	s15, s0
 800404e:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_FDCAN_RxFifo0Callback+0x59c>)
 8004050:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 8004054:	e03b      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			tempercher[3] = uchar4_to_float(RxData);
 8004056:	4820      	ldr	r0, [pc, #128]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8004058:	f001 ff04 	bl	8005e64 <uchar4_to_float>
 800405c:	eef0 7a40 	vmov.f32	s15, s0
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <HAL_FDCAN_RxFifo0Callback+0x59c>)
 8004062:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
 8004066:	e032      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			amplitude[0] = uchar4_to_float(RxData);
 8004068:	481b      	ldr	r0, [pc, #108]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 800406a:	f001 fefb 	bl	8005e64 <uchar4_to_float>
 800406e:	eef0 7a40 	vmov.f32	s15, s0
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <HAL_FDCAN_RxFifo0Callback+0x5a0>)
 8004074:	edc3 7a00 	vstr	s15, [r3]
			check_motor1 = 1;
 8004078:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_FDCAN_RxFifo0Callback+0x5a4>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
			break;
 800407e:	e026      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			amplitude[1] = uchar4_to_float(RxData);
 8004080:	4815      	ldr	r0, [pc, #84]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 8004082:	f001 feef 	bl	8005e64 <uchar4_to_float>
 8004086:	eef0 7a40 	vmov.f32	s15, s0
 800408a:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <HAL_FDCAN_RxFifo0Callback+0x5a0>)
 800408c:	edc3 7a01 	vstr	s15, [r3, #4]
			check_motor2 = 1;
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <HAL_FDCAN_RxFifo0Callback+0x5a8>)
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
			break;
 8004096:	e01a      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			amplitude[2] = uchar4_to_float(RxData);
 8004098:	480f      	ldr	r0, [pc, #60]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 800409a:	f001 fee3 	bl	8005e64 <uchar4_to_float>
 800409e:	eef0 7a40 	vmov.f32	s15, s0
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_FDCAN_RxFifo0Callback+0x5a0>)
 80040a4:	edc3 7a02 	vstr	s15, [r3, #8]
			check_motor3 = 1;
 80040a8:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_FDCAN_RxFifo0Callback+0x5ac>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
			break;
 80040ae:	e00e      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			amplitude[3] = uchar4_to_float(RxData);
 80040b0:	4809      	ldr	r0, [pc, #36]	; (80040d8 <HAL_FDCAN_RxFifo0Callback+0x578>)
 80040b2:	f001 fed7 	bl	8005e64 <uchar4_to_float>
 80040b6:	eef0 7a40 	vmov.f32	s15, s0
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_FDCAN_RxFifo0Callback+0x5a0>)
 80040bc:	edc3 7a03 	vstr	s15, [r3, #12]
			check_motor4 = 1;
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_FDCAN_RxFifo0Callback+0x5b0>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
			break;
 80040c6:	e002      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
	}
 80040c8:	bf00      	nop
 80040ca:	e000      	b.n	80040ce <HAL_FDCAN_RxFifo0Callback+0x56e>
			break;
 80040cc:	bf00      	nop
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000664 	.word	0x20000664
 80040dc:	2000076c 	.word	0x2000076c
 80040e0:	20000770 	.word	0x20000770
 80040e4:	20000668 	.word	0x20000668
 80040e8:	200006b8 	.word	0x200006b8
 80040ec:	20000690 	.word	0x20000690
 80040f0:	3e3426c8 	.word	0x3e3426c8
 80040f4:	200006a4 	.word	0x200006a4
 80040f8:	200006f0 	.word	0x200006f0
 80040fc:	2000071c 	.word	0x2000071c
 8004100:	20000734 	.word	0x20000734
 8004104:	20000799 	.word	0x20000799
 8004108:	2000079a 	.word	0x2000079a
 800410c:	2000079b 	.word	0x2000079b
 8004110:	2000079c 	.word	0x2000079c
 8004114:	00000000 	.word	0x00000000

08004118 <maintask_run>:

void maintask_run()
{
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411c:	ed2d 8b02 	vpush	{d8}
 8004120:	b087      	sub	sp, #28
 8004122:	af00      	add	r7, sp, #0
	// theta_target=0.0;
	static uint32_t run_cnt = 0;
	static float32_t pre_yawAngle_rad = 0;
	omega = (getAngleDiff(theta_target, (yawAngle / 180.0 * M_PI)) * 20.0) - (getAngleDiff((yawAngle / 180.0 * M_PI), (yawAngle_temp / 180.0 * M_PI)) * 100);
 8004124:	4b64      	ldr	r3, [pc, #400]	; (80042b8 <maintask_run+0x1a0>)
 8004126:	ed93 8a00 	vldr	s16, [r3]
 800412a:	4b64      	ldr	r3, [pc, #400]	; (80042bc <maintask_run+0x1a4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc fa32 	bl	8000598 <__aeabi_f2d>
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <maintask_run+0x1a8>)
 800413a:	f7fc fbaf 	bl	800089c <__aeabi_ddiv>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	a356      	add	r3, pc, #344	; (adr r3, 80042a0 <maintask_run+0x188>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f7fc fa7c 	bl	8000648 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc fd6e 	bl	8000c38 <__aeabi_d2f>
 800415c:	4603      	mov	r3, r0
 800415e:	ee00 3a90 	vmov	s1, r3
 8004162:	eeb0 0a48 	vmov.f32	s0, s16
 8004166:	f000 fde7 	bl	8004d38 <getAngleDiff>
 800416a:	ee10 3a10 	vmov	r3, s0
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc fa12 	bl	8000598 <__aeabi_f2d>
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <maintask_run+0x1ac>)
 800417a:	f7fc fa65 	bl	8000648 <__aeabi_dmul>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4614      	mov	r4, r2
 8004184:	461d      	mov	r5, r3
 8004186:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <maintask_run+0x1a4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc fa04 	bl	8000598 <__aeabi_f2d>
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <maintask_run+0x1a8>)
 8004196:	f7fc fb81 	bl	800089c <__aeabi_ddiv>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	a33f      	add	r3, pc, #252	; (adr r3, 80042a0 <maintask_run+0x188>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fc fa4e 	bl	8000648 <__aeabi_dmul>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4610      	mov	r0, r2
 80041b2:	4619      	mov	r1, r3
 80041b4:	f7fc fd40 	bl	8000c38 <__aeabi_d2f>
 80041b8:	4606      	mov	r6, r0
 80041ba:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <maintask_run+0x1b0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc f9ea 	bl	8000598 <__aeabi_f2d>
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	4b3d      	ldr	r3, [pc, #244]	; (80042c0 <maintask_run+0x1a8>)
 80041ca:	f7fc fb67 	bl	800089c <__aeabi_ddiv>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	a332      	add	r3, pc, #200	; (adr r3, 80042a0 <maintask_run+0x188>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc fa34 	bl	8000648 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	f7fc fd26 	bl	8000c38 <__aeabi_d2f>
 80041ec:	4603      	mov	r3, r0
 80041ee:	ee00 3a90 	vmov	s1, r3
 80041f2:	ee00 6a10 	vmov	s0, r6
 80041f6:	f000 fd9f 	bl	8004d38 <getAngleDiff>
 80041fa:	eef0 7a40 	vmov.f32	s15, s0
 80041fe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80042cc <maintask_run+0x1b4>
 8004202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004206:	ee17 0a90 	vmov	r0, s15
 800420a:	f7fc f9c5 	bl	8000598 <__aeabi_f2d>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f7fc f85f 	bl	80002d8 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	f7fc fd09 	bl	8000c38 <__aeabi_d2f>
 8004226:	4603      	mov	r3, r0
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <maintask_run+0x1b8>)
 800422a:	6013      	str	r3, [r2, #0]
	//omega = 0;
	if (omega > 6 * M_PI)
 800422c:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <maintask_run+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fc f9b1 	bl	8000598 <__aeabi_f2d>
 8004236:	a31c      	add	r3, pc, #112	; (adr r3, 80042a8 <maintask_run+0x190>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fc fc94 	bl	8000b68 <__aeabi_dcmpgt>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <maintask_run+0x134>
	{
		omega = 6 * M_PI;
 8004246:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <maintask_run+0x1b8>)
 8004248:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <maintask_run+0x1bc>)
 800424a:	601a      	str	r2, [r3, #0]
	}
	if (omega < -6 * M_PI)
 800424c:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <maintask_run+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc f9a1 	bl	8000598 <__aeabi_f2d>
 8004256:	a316      	add	r3, pc, #88	; (adr r3, 80042b0 <maintask_run+0x198>)
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f7fc fc66 	bl	8000b2c <__aeabi_dcmplt>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <maintask_run+0x154>
	{
		omega = -6 * M_PI;
 8004266:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <maintask_run+0x1b8>)
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <maintask_run+0x1c0>)
 800426a:	601a      	str	r2, [r3, #0]
	}

	static int32_t pre_mouse_odom[2] = {0, 0};
	float mouse_vel[2];
	mouse_vel[0] = mouse_odom[0] - pre_mouse_odom[0];
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <maintask_run+0x1c4>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <maintask_run+0x1c8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800427e:	edc7 7a02 	vstr	s15, [r7, #8]
	mouse_vel[1] = mouse_odom[1] - pre_mouse_odom[1];
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <maintask_run+0x1c4>)
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <maintask_run+0x1c8>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004294:	edc7 7a03 	vstr	s15, [r7, #12]

	// 半回転3.14
	//

	for (int i = 0; i < 4; i++)
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e055      	b.n	800434a <maintask_run+0x232>
 800429e:	bf00      	nop
 80042a0:	54442d18 	.word	0x54442d18
 80042a4:	400921fb 	.word	0x400921fb
 80042a8:	7f3321d2 	.word	0x7f3321d2
 80042ac:	4032d97c 	.word	0x4032d97c
 80042b0:	7f3321d2 	.word	0x7f3321d2
 80042b4:	c032d97c 	.word	0xc032d97c
 80042b8:	20000760 	.word	0x20000760
 80042bc:	200005e0 	.word	0x200005e0
 80042c0:	40668000 	.word	0x40668000
 80042c4:	40340000 	.word	0x40340000
 80042c8:	200005d0 	.word	0x200005d0
 80042cc:	42c80000 	.word	0x42c80000
 80042d0:	20000750 	.word	0x20000750
 80042d4:	4196cbe4 	.word	0x4196cbe4
 80042d8:	c196cbe4 	.word	0xc196cbe4
 80042dc:	20000770 	.word	0x20000770
 80042e0:	200007f0 	.word	0x200007f0
	{
		omni_angle_diff[i] = motor_enc_angle[i] - pre_motor_enc_angle[i];
 80042e4:	4ab0      	ldr	r2, [pc, #704]	; (80045a8 <maintask_run+0x490>)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	ed93 7a00 	vldr	s14, [r3]
 80042f0:	4aae      	ldr	r2, [pc, #696]	; (80045ac <maintask_run+0x494>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004300:	4aab      	ldr	r2, [pc, #684]	; (80045b0 <maintask_run+0x498>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	edc3 7a00 	vstr	s15, [r3]
		omni_angle_diff[i] = normalizeAngle(omni_angle_diff[i]);
 800430c:	4aa8      	ldr	r2, [pc, #672]	; (80045b0 <maintask_run+0x498>)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	edd3 7a00 	vldr	s15, [r3]
 8004318:	eeb0 0a67 	vmov.f32	s0, s15
 800431c:	f000 fcb8 	bl	8004c90 <normalizeAngle>
 8004320:	eef0 7a40 	vmov.f32	s15, s0
 8004324:	4aa2      	ldr	r2, [pc, #648]	; (80045b0 <maintask_run+0x498>)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	edc3 7a00 	vstr	s15, [r3]
		pre_motor_enc_angle[i] = motor_enc_angle[i];
 8004330:	4a9d      	ldr	r2, [pc, #628]	; (80045a8 <maintask_run+0x490>)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	499c      	ldr	r1, [pc, #624]	; (80045ac <maintask_run+0x494>)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	3301      	adds	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b03      	cmp	r3, #3
 800434e:	ddc9      	ble.n	80042e4 <maintask_run+0x1cc>
	}

	robot_rotation_adj = normalizeAngle(yawAngle_rad - pre_yawAngle_rad) * OMNI_ROTATION_LENGTH; // mm
 8004350:	4b98      	ldr	r3, [pc, #608]	; (80045b4 <maintask_run+0x49c>)
 8004352:	ed93 7a00 	vldr	s14, [r3]
 8004356:	4b98      	ldr	r3, [pc, #608]	; (80045b8 <maintask_run+0x4a0>)
 8004358:	edd3 7a00 	vldr	s15, [r3]
 800435c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004360:	eeb0 0a67 	vmov.f32	s0, s15
 8004364:	f000 fc94 	bl	8004c90 <normalizeAngle>
 8004368:	eef0 7a40 	vmov.f32	s15, s0
 800436c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80045bc <maintask_run+0x4a4>
 8004370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004374:	4b92      	ldr	r3, [pc, #584]	; (80045c0 <maintask_run+0x4a8>)
 8004376:	edc3 7a00 	vstr	s15, [r3]

	omni_travel[0] = omni_angle_diff[1] * OMNI_DIR_LENGTH + robot_rotation_adj;
 800437a:	4b8d      	ldr	r3, [pc, #564]	; (80045b0 <maintask_run+0x498>)
 800437c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004380:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80045c4 <maintask_run+0x4ac>
 8004384:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004388:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <maintask_run+0x4a8>)
 800438a:	edd3 7a00 	vldr	s15, [r3]
 800438e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004392:	4b8d      	ldr	r3, [pc, #564]	; (80045c8 <maintask_run+0x4b0>)
 8004394:	edc3 7a00 	vstr	s15, [r3]
	omni_travel[1] = omni_angle_diff[2] * OMNI_DIR_LENGTH + robot_rotation_adj;
 8004398:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <maintask_run+0x498>)
 800439a:	edd3 7a02 	vldr	s15, [r3, #8]
 800439e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80045c4 <maintask_run+0x4ac>
 80043a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043a6:	4b86      	ldr	r3, [pc, #536]	; (80045c0 <maintask_run+0x4a8>)
 80043a8:	edd3 7a00 	vldr	s15, [r3]
 80043ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b0:	4b85      	ldr	r3, [pc, #532]	; (80045c8 <maintask_run+0x4b0>)
 80043b2:	edc3 7a01 	vstr	s15, [r3, #4]
	// pre_yawAngle_rad
	omni_odom[0] += (omni_travel[0] * cos(yawAngle_rad + M_PI * 3 / 4) - omni_travel[1] * cos(yawAngle_rad + M_PI * 5 / 4)) * 1000;
 80043b6:	4b85      	ldr	r3, [pc, #532]	; (80045cc <maintask_run+0x4b4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc f8ec 	bl	8000598 <__aeabi_f2d>
 80043c0:	4604      	mov	r4, r0
 80043c2:	460d      	mov	r5, r1
 80043c4:	4b80      	ldr	r3, [pc, #512]	; (80045c8 <maintask_run+0x4b0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc f8e5 	bl	8000598 <__aeabi_f2d>
 80043ce:	4680      	mov	r8, r0
 80043d0:	4689      	mov	r9, r1
 80043d2:	4b78      	ldr	r3, [pc, #480]	; (80045b4 <maintask_run+0x49c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f8de 	bl	8000598 <__aeabi_f2d>
 80043dc:	a36e      	add	r3, pc, #440	; (adr r3, 8004598 <maintask_run+0x480>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fb ff7b 	bl	80002dc <__adddf3>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	ec43 2b17 	vmov	d7, r2, r3
 80043ee:	eeb0 0a47 	vmov.f32	s0, s14
 80043f2:	eef0 0a67 	vmov.f32	s1, s15
 80043f6:	f00b ffbb 	bl	8010370 <cos>
 80043fa:	ec53 2b10 	vmov	r2, r3, d0
 80043fe:	4640      	mov	r0, r8
 8004400:	4649      	mov	r1, r9
 8004402:	f7fc f921 	bl	8000648 <__aeabi_dmul>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4692      	mov	sl, r2
 800440c:	469b      	mov	fp, r3
 800440e:	4b6e      	ldr	r3, [pc, #440]	; (80045c8 <maintask_run+0x4b0>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc f8c0 	bl	8000598 <__aeabi_f2d>
 8004418:	4680      	mov	r8, r0
 800441a:	4689      	mov	r9, r1
 800441c:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <maintask_run+0x49c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc f8b9 	bl	8000598 <__aeabi_f2d>
 8004426:	a35e      	add	r3, pc, #376	; (adr r3, 80045a0 <maintask_run+0x488>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f7fb ff56 	bl	80002dc <__adddf3>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	ec43 2b17 	vmov	d7, r2, r3
 8004438:	eeb0 0a47 	vmov.f32	s0, s14
 800443c:	eef0 0a67 	vmov.f32	s1, s15
 8004440:	f00b ff96 	bl	8010370 <cos>
 8004444:	ec53 2b10 	vmov	r2, r3, d0
 8004448:	4640      	mov	r0, r8
 800444a:	4649      	mov	r1, r9
 800444c:	f7fc f8fc 	bl	8000648 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4650      	mov	r0, sl
 8004456:	4659      	mov	r1, fp
 8004458:	f7fb ff3e 	bl	80002d8 <__aeabi_dsub>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <maintask_run+0x4b8>)
 800446a:	f7fc f8ed 	bl	8000648 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f7fb ff31 	bl	80002dc <__adddf3>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4610      	mov	r0, r2
 8004480:	4619      	mov	r1, r3
 8004482:	f7fc fbd9 	bl	8000c38 <__aeabi_d2f>
 8004486:	4603      	mov	r3, r0
 8004488:	4a50      	ldr	r2, [pc, #320]	; (80045cc <maintask_run+0x4b4>)
 800448a:	6013      	str	r3, [r2, #0]
	omni_odom[1] += (omni_travel[0] * sin(yawAngle_rad + M_PI * 3 / 4) - omni_travel[1] * sin(yawAngle_rad + M_PI * 5 / 4)) * 1000;
 800448c:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <maintask_run+0x4b4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc f881 	bl	8000598 <__aeabi_f2d>
 8004496:	4604      	mov	r4, r0
 8004498:	460d      	mov	r5, r1
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <maintask_run+0x4b0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fc f87a 	bl	8000598 <__aeabi_f2d>
 80044a4:	4680      	mov	r8, r0
 80044a6:	4689      	mov	r9, r1
 80044a8:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <maintask_run+0x49c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fc f873 	bl	8000598 <__aeabi_f2d>
 80044b2:	a339      	add	r3, pc, #228	; (adr r3, 8004598 <maintask_run+0x480>)
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f7fb ff10 	bl	80002dc <__adddf3>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	ec43 2b17 	vmov	d7, r2, r3
 80044c4:	eeb0 0a47 	vmov.f32	s0, s14
 80044c8:	eef0 0a67 	vmov.f32	s1, s15
 80044cc:	f00b ffa4 	bl	8010418 <sin>
 80044d0:	ec53 2b10 	vmov	r2, r3, d0
 80044d4:	4640      	mov	r0, r8
 80044d6:	4649      	mov	r1, r9
 80044d8:	f7fc f8b6 	bl	8000648 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4692      	mov	sl, r2
 80044e2:	469b      	mov	fp, r3
 80044e4:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <maintask_run+0x4b0>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc f855 	bl	8000598 <__aeabi_f2d>
 80044ee:	4680      	mov	r8, r0
 80044f0:	4689      	mov	r9, r1
 80044f2:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <maintask_run+0x49c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f84e 	bl	8000598 <__aeabi_f2d>
 80044fc:	a328      	add	r3, pc, #160	; (adr r3, 80045a0 <maintask_run+0x488>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fb feeb 	bl	80002dc <__adddf3>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	ec43 2b17 	vmov	d7, r2, r3
 800450e:	eeb0 0a47 	vmov.f32	s0, s14
 8004512:	eef0 0a67 	vmov.f32	s1, s15
 8004516:	f00b ff7f 	bl	8010418 <sin>
 800451a:	ec53 2b10 	vmov	r2, r3, d0
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f7fc f891 	bl	8000648 <__aeabi_dmul>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4650      	mov	r0, sl
 800452c:	4659      	mov	r1, fp
 800452e:	f7fb fed3 	bl	80002d8 <__aeabi_dsub>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <maintask_run+0x4b8>)
 8004540:	f7fc f882 	bl	8000648 <__aeabi_dmul>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4620      	mov	r0, r4
 800454a:	4629      	mov	r1, r5
 800454c:	f7fb fec6 	bl	80002dc <__adddf3>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	f7fc fb6e 	bl	8000c38 <__aeabi_d2f>
 800455c:	4603      	mov	r3, r0
 800455e:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <maintask_run+0x4b4>)
 8004560:	6053      	str	r3, [r2, #4]

	// vel_surge = mouse_odom[0] / 50;
	// vel_sway = mouse_odom[1] / 50;
	run_cnt++;
 8004562:	4b1c      	ldr	r3, [pc, #112]	; (80045d4 <maintask_run+0x4bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3301      	adds	r3, #1
 8004568:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <maintask_run+0x4bc>)
 800456a:	6013      	str	r3, [r2, #0]
	if (run_cnt > 3000)
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <maintask_run+0x4bc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004574:	4293      	cmp	r3, r2
 8004576:	d937      	bls.n	80045e8 <maintask_run+0x4d0>
	{
		run_cnt = 0;
 8004578:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <maintask_run+0x4bc>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
		if (tar_pos[1] == 0)
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <maintask_run+0x4c0>)
 8004580:	edd3 7a01 	vldr	s15, [r3, #4]
 8004584:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	d128      	bne.n	80045e0 <maintask_run+0x4c8>
		{
			tar_pos[1] = 2000;
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <maintask_run+0x4c0>)
 8004590:	4a12      	ldr	r2, [pc, #72]	; (80045dc <maintask_run+0x4c4>)
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	e028      	b.n	80045e8 <maintask_run+0x4d0>
 8004596:	bf00      	nop
 8004598:	7f3321d2 	.word	0x7f3321d2
 800459c:	4002d97c 	.word	0x4002d97c
 80045a0:	2955385e 	.word	0x2955385e
 80045a4:	400f6a7a 	.word	0x400f6a7a
 80045a8:	200006b8 	.word	0x200006b8
 80045ac:	200006cc 	.word	0x200006cc
 80045b0:	200006e0 	.word	0x200006e0
 80045b4:	200005e4 	.word	0x200005e4
 80045b8:	200007f8 	.word	0x200007f8
 80045bc:	3ef3afe3 	.word	0x3ef3afe3
 80045c0:	20000684 	.word	0x20000684
 80045c4:	3e3426c8 	.word	0x3e3426c8
 80045c8:	2000066c 	.word	0x2000066c
 80045cc:	20000778 	.word	0x20000778
 80045d0:	408f4000 	.word	0x408f4000
 80045d4:	200007fc 	.word	0x200007fc
 80045d8:	20000688 	.word	0x20000688
 80045dc:	44fa0000 	.word	0x44fa0000
		}
		else
		{
			tar_pos[1] = 0;
 80045e0:	4bb7      	ldr	r3, [pc, #732]	; (80048c0 <maintask_run+0x7a8>)
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
		}
	}
	// 絶対座標系
	floor_odom_diff[0] = omni_odom[0] - tar_pos[0];
 80045e8:	4bb6      	ldr	r3, [pc, #728]	; (80048c4 <maintask_run+0x7ac>)
 80045ea:	ed93 7a00 	vldr	s14, [r3]
 80045ee:	4bb4      	ldr	r3, [pc, #720]	; (80048c0 <maintask_run+0x7a8>)
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f8:	4bb3      	ldr	r3, [pc, #716]	; (80048c8 <maintask_run+0x7b0>)
 80045fa:	edc3 7a00 	vstr	s15, [r3]
	floor_odom_diff[1] = omni_odom[1] - tar_pos[1];
 80045fe:	4bb1      	ldr	r3, [pc, #708]	; (80048c4 <maintask_run+0x7ac>)
 8004600:	ed93 7a01 	vldr	s14, [r3, #4]
 8004604:	4bae      	ldr	r3, [pc, #696]	; (80048c0 <maintask_run+0x7a8>)
 8004606:	edd3 7a01 	vldr	s15, [r3, #4]
 800460a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800460e:	4bae      	ldr	r3, [pc, #696]	; (80048c8 <maintask_run+0x7b0>)
 8004610:	edc3 7a01 	vstr	s15, [r3, #4]

	// ロボット座標系
	// X
	robot_pos_diff[0] = floor_odom_diff[0] * cos(yawAngle_rad) + floor_odom_diff[1] * sin(yawAngle_rad);
 8004614:	4bac      	ldr	r3, [pc, #688]	; (80048c8 <maintask_run+0x7b0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fb ffbd 	bl	8000598 <__aeabi_f2d>
 800461e:	4604      	mov	r4, r0
 8004620:	460d      	mov	r5, r1
 8004622:	4baa      	ldr	r3, [pc, #680]	; (80048cc <maintask_run+0x7b4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fb ffb6 	bl	8000598 <__aeabi_f2d>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	ec43 2b10 	vmov	d0, r2, r3
 8004634:	f00b fe9c 	bl	8010370 <cos>
 8004638:	ec53 2b10 	vmov	r2, r3, d0
 800463c:	4620      	mov	r0, r4
 800463e:	4629      	mov	r1, r5
 8004640:	f7fc f802 	bl	8000648 <__aeabi_dmul>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4690      	mov	r8, r2
 800464a:	4699      	mov	r9, r3
 800464c:	4b9e      	ldr	r3, [pc, #632]	; (80048c8 <maintask_run+0x7b0>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4618      	mov	r0, r3
 8004652:	f7fb ffa1 	bl	8000598 <__aeabi_f2d>
 8004656:	4604      	mov	r4, r0
 8004658:	460d      	mov	r5, r1
 800465a:	4b9c      	ldr	r3, [pc, #624]	; (80048cc <maintask_run+0x7b4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fb ff9a 	bl	8000598 <__aeabi_f2d>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	ec43 2b10 	vmov	d0, r2, r3
 800466c:	f00b fed4 	bl	8010418 <sin>
 8004670:	ec53 2b10 	vmov	r2, r3, d0
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fb ffe6 	bl	8000648 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4640      	mov	r0, r8
 8004682:	4649      	mov	r1, r9
 8004684:	f7fb fe2a 	bl	80002dc <__adddf3>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	f7fc fad2 	bl	8000c38 <__aeabi_d2f>
 8004694:	4603      	mov	r3, r0
 8004696:	4a8e      	ldr	r2, [pc, #568]	; (80048d0 <maintask_run+0x7b8>)
 8004698:	6013      	str	r3, [r2, #0]
	// Y
	robot_pos_diff[1] = floor_odom_diff[0] * sin(yawAngle_rad) + floor_odom_diff[1] * cos(yawAngle_rad);
 800469a:	4b8b      	ldr	r3, [pc, #556]	; (80048c8 <maintask_run+0x7b0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fb ff7a 	bl	8000598 <__aeabi_f2d>
 80046a4:	4604      	mov	r4, r0
 80046a6:	460d      	mov	r5, r1
 80046a8:	4b88      	ldr	r3, [pc, #544]	; (80048cc <maintask_run+0x7b4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb ff73 	bl	8000598 <__aeabi_f2d>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	ec43 2b10 	vmov	d0, r2, r3
 80046ba:	f00b fead 	bl	8010418 <sin>
 80046be:	ec53 2b10 	vmov	r2, r3, d0
 80046c2:	4620      	mov	r0, r4
 80046c4:	4629      	mov	r1, r5
 80046c6:	f7fb ffbf 	bl	8000648 <__aeabi_dmul>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4690      	mov	r8, r2
 80046d0:	4699      	mov	r9, r3
 80046d2:	4b7d      	ldr	r3, [pc, #500]	; (80048c8 <maintask_run+0x7b0>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fb ff5e 	bl	8000598 <__aeabi_f2d>
 80046dc:	4604      	mov	r4, r0
 80046de:	460d      	mov	r5, r1
 80046e0:	4b7a      	ldr	r3, [pc, #488]	; (80048cc <maintask_run+0x7b4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fb ff57 	bl	8000598 <__aeabi_f2d>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	ec43 2b10 	vmov	d0, r2, r3
 80046f2:	f00b fe3d 	bl	8010370 <cos>
 80046f6:	ec53 2b10 	vmov	r2, r3, d0
 80046fa:	4620      	mov	r0, r4
 80046fc:	4629      	mov	r1, r5
 80046fe:	f7fb ffa3 	bl	8000648 <__aeabi_dmul>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4640      	mov	r0, r8
 8004708:	4649      	mov	r1, r9
 800470a:	f7fb fde7 	bl	80002dc <__adddf3>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4610      	mov	r0, r2
 8004714:	4619      	mov	r1, r3
 8004716:	f7fc fa8f 	bl	8000c38 <__aeabi_d2f>
 800471a:	4603      	mov	r3, r0
 800471c:	4a6c      	ldr	r2, [pc, #432]	; (80048d0 <maintask_run+0x7b8>)
 800471e:	6053      	str	r3, [r2, #4]
	vel_surge = robot_pos_diff[0] * OMNI_OUTPUT_GAIN;
 8004720:	4b6b      	ldr	r3, [pc, #428]	; (80048d0 <maintask_run+0x7b8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7fb ff37 	bl	8000598 <__aeabi_f2d>
 800472a:	a361      	add	r3, pc, #388	; (adr r3, 80048b0 <maintask_run+0x798>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fb ff8a 	bl	8000648 <__aeabi_dmul>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	f7fc fa7c 	bl	8000c38 <__aeabi_d2f>
 8004740:	4603      	mov	r3, r0
 8004742:	4a64      	ldr	r2, [pc, #400]	; (80048d4 <maintask_run+0x7bc>)
 8004744:	6013      	str	r3, [r2, #0]
	vel_sway = robot_pos_diff[1] * OMNI_OUTPUT_GAIN;
 8004746:	4b62      	ldr	r3, [pc, #392]	; (80048d0 <maintask_run+0x7b8>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fb ff24 	bl	8000598 <__aeabi_f2d>
 8004750:	a357      	add	r3, pc, #348	; (adr r3, 80048b0 <maintask_run+0x798>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb ff77 	bl	8000648 <__aeabi_dmul>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f7fc fa69 	bl	8000c38 <__aeabi_d2f>
 8004766:	4603      	mov	r3, r0
 8004768:	4a5b      	ldr	r2, [pc, #364]	; (80048d8 <maintask_run+0x7c0>)
 800476a:	6013      	str	r3, [r2, #0]

	if (vel_surge > OMNI_OUTPUT_LIMIT)
 800476c:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <maintask_run+0x7bc>)
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	dd04      	ble.n	800478a <maintask_run+0x672>
	{
		vel_surge = OMNI_OUTPUT_LIMIT;
 8004780:	4b54      	ldr	r3, [pc, #336]	; (80048d4 <maintask_run+0x7bc>)
 8004782:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e00c      	b.n	80047a4 <maintask_run+0x68c>
	}
	else if (vel_surge < -OMNI_OUTPUT_LIMIT)
 800478a:	4b52      	ldr	r3, [pc, #328]	; (80048d4 <maintask_run+0x7bc>)
 800478c:	edd3 7a00 	vldr	s15, [r3]
 8004790:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 8004794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479c:	d502      	bpl.n	80047a4 <maintask_run+0x68c>
	{
		vel_surge = -OMNI_OUTPUT_LIMIT;
 800479e:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <maintask_run+0x7bc>)
 80047a0:	4a4e      	ldr	r2, [pc, #312]	; (80048dc <maintask_run+0x7c4>)
 80047a2:	601a      	str	r2, [r3, #0]
	}

	if (vel_sway > OMNI_OUTPUT_LIMIT)
 80047a4:	4b4c      	ldr	r3, [pc, #304]	; (80048d8 <maintask_run+0x7c0>)
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80047ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	dd04      	ble.n	80047c2 <maintask_run+0x6aa>
	{
		vel_sway = OMNI_OUTPUT_LIMIT;
 80047b8:	4b47      	ldr	r3, [pc, #284]	; (80048d8 <maintask_run+0x7c0>)
 80047ba:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e00c      	b.n	80047dc <maintask_run+0x6c4>
	}
	else if (vel_sway < -OMNI_OUTPUT_LIMIT)
 80047c2:	4b45      	ldr	r3, [pc, #276]	; (80048d8 <maintask_run+0x7c0>)
 80047c4:	edd3 7a00 	vldr	s15, [r3]
 80047c8:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 80047cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	d502      	bpl.n	80047dc <maintask_run+0x6c4>
	{
		vel_sway = -OMNI_OUTPUT_LIMIT;
 80047d6:	4b40      	ldr	r3, [pc, #256]	; (80048d8 <maintask_run+0x7c0>)
 80047d8:	4a40      	ldr	r2, [pc, #256]	; (80048dc <maintask_run+0x7c4>)
 80047da:	601a      	str	r2, [r3, #0]
	}

	pre_mouse_odom[0] = mouse_odom[0];
 80047dc:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <maintask_run+0x7c8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a40      	ldr	r2, [pc, #256]	; (80048e4 <maintask_run+0x7cc>)
 80047e2:	6013      	str	r3, [r2, #0]
	pre_mouse_odom[1] = mouse_odom[1];
 80047e4:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <maintask_run+0x7c8>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <maintask_run+0x7cc>)
 80047ea:	6053      	str	r3, [r2, #4]
	pre_yawAngle_rad = yawAngle_rad;
 80047ec:	4b37      	ldr	r3, [pc, #220]	; (80048cc <maintask_run+0x7b4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a3d      	ldr	r2, [pc, #244]	; (80048e8 <maintask_run+0x7d0>)
 80047f2:	6013      	str	r3, [r2, #0]

	omni_move(vel_surge, vel_sway, omega, 1.0);
 80047f4:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <maintask_run+0x7bc>)
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	4b37      	ldr	r3, [pc, #220]	; (80048d8 <maintask_run+0x7c0>)
 80047fc:	ed93 7a00 	vldr	s14, [r3]
 8004800:	4b3a      	ldr	r3, [pc, #232]	; (80048ec <maintask_run+0x7d4>)
 8004802:	edd3 6a00 	vldr	s13, [r3]
 8004806:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800480a:	eeb0 1a66 	vmov.f32	s2, s13
 800480e:	eef0 0a47 	vmov.f32	s1, s14
 8004812:	eeb0 0a67 	vmov.f32	s0, s15
 8004816:	f000 fd1b 	bl	8005250 <omni_move>
	if (kick_power > 0)
 800481a:	4b35      	ldr	r3, [pc, #212]	; (80048f0 <maintask_run+0x7d8>)
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	dd39      	ble.n	800489e <maintask_run+0x786>
	{
		if (ball[0] == 1)
 800482a:	4b32      	ldr	r3, [pc, #200]	; (80048f4 <maintask_run+0x7dc>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d122      	bne.n	8004878 <maintask_run+0x760>
		{
			if (kick_state == 0)
 8004832:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <maintask_run+0x7e0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11e      	bne.n	8004878 <maintask_run+0x760>
			{
				uint8_t kick_power_param = (float)kick_power * 255.0;
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <maintask_run+0x7d8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fb feaa 	bl	8000598 <__aeabi_f2d>
 8004844:	a31c      	add	r3, pc, #112	; (adr r3, 80048b8 <maintask_run+0x7a0>)
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f7fb fefd 	bl	8000648 <__aeabi_dmul>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f7fc f9cf 	bl	8000bf8 <__aeabi_d2uiz>
 800485a:	4603      	mov	r3, r0
 800485c:	74fb      	strb	r3, [r7, #19]
				printf(" kick=%d\r\n", kick_power_param);
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	4619      	mov	r1, r3
 8004862:	4826      	ldr	r0, [pc, #152]	; (80048fc <maintask_run+0x7e4>)
 8004864:	f009 fb7c 	bl	800df60 <iprintf>
				actuator_kicker(3, (uint8_t)kick_power_param);
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	4619      	mov	r1, r3
 800486c:	2003      	movs	r0, #3
 800486e:	f7fc fcc6 	bl	80011fe <actuator_kicker>
				kick_state = 1;
 8004872:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <maintask_run+0x7e0>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
			}
		}
		if (kick_state == 1)
 8004878:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <maintask_run+0x7e0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10e      	bne.n	800489e <maintask_run+0x786>
		{
			kick_time++;
 8004880:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <maintask_run+0x7e8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <maintask_run+0x7e8>)
 8004888:	6013      	str	r3, [r2, #0]
			if (kick_time > 100)
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <maintask_run+0x7e8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	dd05      	ble.n	800489e <maintask_run+0x786>
			{
				kick_state = 0;
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <maintask_run+0x7e0>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
				kick_time = 0;
 8004898:	4b19      	ldr	r3, [pc, #100]	; (8004900 <maintask_run+0x7e8>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if (chipEN == 1)
 800489e:	4b19      	ldr	r3, [pc, #100]	; (8004904 <maintask_run+0x7ec>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d132      	bne.n	800490c <maintask_run+0x7f4>
	{
		actuator_kicker(2, 1);
 80048a6:	2101      	movs	r1, #1
 80048a8:	2002      	movs	r0, #2
 80048aa:	f7fc fca8 	bl	80011fe <actuator_kicker>
 80048ae:	e031      	b.n	8004914 <maintask_run+0x7fc>
 80048b0:	9999999a 	.word	0x9999999a
 80048b4:	bf999999 	.word	0xbf999999
 80048b8:	00000000 	.word	0x00000000
 80048bc:	406fe000 	.word	0x406fe000
 80048c0:	20000688 	.word	0x20000688
 80048c4:	20000778 	.word	0x20000778
 80048c8:	20000674 	.word	0x20000674
 80048cc:	200005e4 	.word	0x200005e4
 80048d0:	2000067c 	.word	0x2000067c
 80048d4:	20000748 	.word	0x20000748
 80048d8:	2000074c 	.word	0x2000074c
 80048dc:	bfc00000 	.word	0xbfc00000
 80048e0:	20000770 	.word	0x20000770
 80048e4:	200007f0 	.word	0x200007f0
 80048e8:	200007f8 	.word	0x200007f8
 80048ec:	20000750 	.word	0x20000750
 80048f0:	20000758 	.word	0x20000758
 80048f4:	20000768 	.word	0x20000768
 80048f8:	20000634 	.word	0x20000634
 80048fc:	08011590 	.word	0x08011590
 8004900:	20000638 	.word	0x20000638
 8004904:	20000764 	.word	0x20000764
 8004908:	437a0000 	.word	0x437a0000
	}
	else
	{
		actuator_kicker(2, 0);
 800490c:	2100      	movs	r1, #0
 800490e:	2002      	movs	r0, #2
 8004910:	f7fc fc75 	bl	80011fe <actuator_kicker>
	}
	actuator_kicker(1, 1);
 8004914:	2101      	movs	r1, #1
 8004916:	2001      	movs	r0, #1
 8004918:	f7fc fc71 	bl	80011fe <actuator_kicker>
	actuator_kicker_voltage(250.0);
 800491c:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8004908 <maintask_run+0x7f0>
 8004920:	f7fc fc4c 	bl	80011bc <actuator_kicker_voltage>

	actuator_motor5(drible_power, 1.0);
 8004924:	4b29      	ldr	r3, [pc, #164]	; (80049cc <maintask_run+0x8b4>)
 8004926:	edd3 7a00 	vldr	s15, [r3]
 800492a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800492e:	eeb0 0a67 	vmov.f32	s0, s15
 8004932:	f7fc fc13 	bl	800115c <actuator_motor5>

	uint8_t yawAngle_send_low = ((int)yawAngle + 360) & 0x00FF;
 8004936:	4b26      	ldr	r3, [pc, #152]	; (80049d0 <maintask_run+0x8b8>)
 8004938:	edd3 7a00 	vldr	s15, [r3]
 800493c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004940:	edc7 7a01 	vstr	s15, [r7, #4]
 8004944:	793b      	ldrb	r3, [r7, #4]
 8004946:	3368      	adds	r3, #104	; 0x68
 8004948:	74bb      	strb	r3, [r7, #18]
	uint8_t yawAngle_send_high = (((int)yawAngle + 360) & 0xFF00) >> 8;
 800494a:	4b21      	ldr	r3, [pc, #132]	; (80049d0 <maintask_run+0x8b8>)
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004954:	ee17 3a90 	vmov	r3, s15
 8004958:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800495c:	121b      	asrs	r3, r3, #8
 800495e:	747b      	strb	r3, [r7, #17]

	TX_data_UART[0] = 254;
 8004960:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <maintask_run+0x8bc>)
 8004962:	22fe      	movs	r2, #254	; 0xfe
 8004964:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = (uint8_t)yawAngle_send_low;
 8004966:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <maintask_run+0x8bc>)
 8004968:	7cbb      	ldrb	r3, [r7, #18]
 800496a:	7053      	strb	r3, [r2, #1]
	TX_data_UART[2] = (uint8_t)yawAngle_send_high;
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <maintask_run+0x8bc>)
 800496e:	7c7b      	ldrb	r3, [r7, #17]
 8004970:	7093      	strb	r3, [r2, #2]
	TX_data_UART[3] = ball[0];
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <maintask_run+0x8c0>)
 8004974:	781a      	ldrb	r2, [r3, #0]
 8004976:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <maintask_run+0x8bc>)
 8004978:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = ball[1];
 800497a:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <maintask_run+0x8c0>)
 800497c:	785a      	ldrb	r2, [r3, #1]
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <maintask_run+0x8bc>)
 8004980:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = chipEN;
 8004982:	4b16      	ldr	r3, [pc, #88]	; (80049dc <maintask_run+0x8c4>)
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <maintask_run+0x8bc>)
 8004988:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = kick_state;
 800498a:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <maintask_run+0x8c8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <maintask_run+0x8bc>)
 8004992:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = (uint8_t)Power_voltage[4];
 8004994:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <maintask_run+0x8cc>)
 8004996:	edd3 7a04 	vldr	s15, [r3, #16]
 800499a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499e:	edc7 7a01 	vstr	s15, [r7, #4]
 80049a2:	793b      	ldrb	r3, [r7, #4]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <maintask_run+0x8bc>)
 80049a8:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);
 80049aa:	23ff      	movs	r3, #255	; 0xff
 80049ac:	2208      	movs	r2, #8
 80049ae:	4909      	ldr	r1, [pc, #36]	; (80049d4 <maintask_run+0x8bc>)
 80049b0:	480d      	ldr	r0, [pc, #52]	; (80049e8 <maintask_run+0x8d0>)
 80049b2:	f007 f9b9 	bl	800bd28 <HAL_UART_Transmit>

	yawAngle_temp = yawAngle;
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <maintask_run+0x8b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a0c      	ldr	r2, [pc, #48]	; (80049ec <maintask_run+0x8d4>)
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	ecbd 8b02 	vpop	{d8}
 80049c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049cc:	20000754 	.word	0x20000754
 80049d0:	200005e0 	.word	0x200005e0
 80049d4:	2000064c 	.word	0x2000064c
 80049d8:	20000768 	.word	0x20000768
 80049dc:	20000764 	.word	0x20000764
 80049e0:	20000634 	.word	0x20000634
 80049e4:	20000704 	.word	0x20000704
 80049e8:	20000990 	.word	0x20000990
 80049ec:	200005d0 	.word	0x200005d0

080049f0 <maintask_emargency>:

void maintask_emargency()
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
	actuator_motor1(0.0, 0.0);
 80049f6:	eddf 0a30 	vldr	s1, [pc, #192]	; 8004ab8 <maintask_emargency+0xc8>
 80049fa:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8004ab8 <maintask_emargency+0xc8>
 80049fe:	f7fc faed 	bl	8000fdc <actuator_motor1>
	actuator_motor2(0.0, 0.0);
 8004a02:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8004ab8 <maintask_emargency+0xc8>
 8004a06:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004ab8 <maintask_emargency+0xc8>
 8004a0a:	f7fc fb17 	bl	800103c <actuator_motor2>
	actuator_motor3(0.0, 0.0);
 8004a0e:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8004ab8 <maintask_emargency+0xc8>
 8004a12:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8004ab8 <maintask_emargency+0xc8>
 8004a16:	f7fc fb41 	bl	800109c <actuator_motor3>
	actuator_motor4(0.0, 0.0);
 8004a1a:	eddf 0a27 	vldr	s1, [pc, #156]	; 8004ab8 <maintask_emargency+0xc8>
 8004a1e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8004ab8 <maintask_emargency+0xc8>
 8004a22:	f7fc fb6b 	bl	80010fc <actuator_motor4>
	actuator_motor5(0.0, 0.0);
 8004a26:	eddf 0a24 	vldr	s1, [pc, #144]	; 8004ab8 <maintask_emargency+0xc8>
 8004a2a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004ab8 <maintask_emargency+0xc8>
 8004a2e:	f7fc fb95 	bl	800115c <actuator_motor5>

	TX_data_UART[0] = 254;
 8004a32:	4b22      	ldr	r3, [pc, #136]	; (8004abc <maintask_emargency+0xcc>)
 8004a34:	22fe      	movs	r2, #254	; 0xfe
 8004a36:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = error_No[0];
 8004a38:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <maintask_emargency+0xd0>)
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <maintask_emargency+0xcc>)
 8004a3e:	705a      	strb	r2, [r3, #1]
	TX_data_UART[2] = error_No[1];
 8004a40:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <maintask_emargency+0xd0>)
 8004a42:	785a      	ldrb	r2, [r3, #1]
 8004a44:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <maintask_emargency+0xcc>)
 8004a46:	709a      	strb	r2, [r3, #2]
	TX_data_UART[3] = error_No[2];
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <maintask_emargency+0xd0>)
 8004a4a:	789a      	ldrb	r2, [r3, #2]
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <maintask_emargency+0xcc>)
 8004a4e:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = error_No[3];
 8004a50:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <maintask_emargency+0xd0>)
 8004a52:	78da      	ldrb	r2, [r3, #3]
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <maintask_emargency+0xcc>)
 8004a56:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = 252;
 8004a58:	4b18      	ldr	r3, [pc, #96]	; (8004abc <maintask_emargency+0xcc>)
 8004a5a:	22fc      	movs	r2, #252	; 0xfc
 8004a5c:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = 122;
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <maintask_emargency+0xcc>)
 8004a60:	227a      	movs	r2, #122	; 0x7a
 8004a62:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = 200;
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <maintask_emargency+0xcc>)
 8004a66:	22c8      	movs	r2, #200	; 0xc8
 8004a68:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);
 8004a6a:	23ff      	movs	r3, #255	; 0xff
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	4913      	ldr	r1, [pc, #76]	; (8004abc <maintask_emargency+0xcc>)
 8004a70:	4814      	ldr	r0, [pc, #80]	; (8004ac4 <maintask_emargency+0xd4>)
 8004a72:	f007 f959 	bl	800bd28 <HAL_UART_Transmit>

	actuator_buzzer(150, 150);
 8004a76:	2196      	movs	r1, #150	; 0x96
 8004a78:	2096      	movs	r0, #150	; 0x96
 8004a7a:	f7fc fc0d 	bl	8001298 <actuator_buzzer>

	uint8_t senddata_error[8];

	can1_send(0x000, senddata_error);
 8004a7e:	463b      	mov	r3, r7
 8004a80:	4619      	mov	r1, r3
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7fc ff24 	bl	80018d0 <can1_send>
	can2_send(0x000, senddata_error);
 8004a88:	463b      	mov	r3, r7
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f7fc ff7f 	bl	8001990 <can2_send>

	actuator_kicker(1, 0);
 8004a92:	2100      	movs	r1, #0
 8004a94:	2001      	movs	r0, #1
 8004a96:	f7fc fbb2 	bl	80011fe <actuator_kicker>
	actuator_kicker_voltage(0.0);
 8004a9a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004ab8 <maintask_emargency+0xc8>
 8004a9e:	f7fc fb8d 	bl	80011bc <actuator_kicker_voltage>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004aa8:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <maintask_emargency+0xd8>)
 8004aaa:	f004 fa81 	bl	8008fb0 <HAL_GPIO_WritePin>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	00000000 	.word	0x00000000
 8004abc:	2000064c 	.word	0x2000064c
 8004ac0:	20000780 	.word	0x20000780
 8004ac4:	20000990 	.word	0x20000990
 8004ac8:	48000400 	.word	0x48000400

08004acc <maintask_state_stop>:

void maintask_state_stop()
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0

	uint8_t yawAngle_send_low = ((int)yawAngle + 360) & 0x00FF;
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <maintask_state_stop+0xb8>)
 8004ad4:	edd3 7a00 	vldr	s15, [r3]
 8004ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004adc:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ae0:	793b      	ldrb	r3, [r7, #4]
 8004ae2:	3368      	adds	r3, #104	; 0x68
 8004ae4:	73fb      	strb	r3, [r7, #15]
	uint8_t yawAngle_send_high = (((int)yawAngle + 360) & 0xFF00) >> 8;
 8004ae6:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <maintask_state_stop+0xb8>)
 8004ae8:	edd3 7a00 	vldr	s15, [r3]
 8004aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af0:	ee17 3a90 	vmov	r3, s15
 8004af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004af8:	121b      	asrs	r3, r3, #8
 8004afa:	73bb      	strb	r3, [r7, #14]

	omni_move(0.0, 0.0, 0.0, 0.0);
 8004afc:	eddf 1a22 	vldr	s3, [pc, #136]	; 8004b88 <maintask_state_stop+0xbc>
 8004b00:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8004b88 <maintask_state_stop+0xbc>
 8004b04:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004b88 <maintask_state_stop+0xbc>
 8004b08:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004b88 <maintask_state_stop+0xbc>
 8004b0c:	f000 fba0 	bl	8005250 <omni_move>
	actuator_motor5(0.0, 0.0);
 8004b10:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004b88 <maintask_state_stop+0xbc>
 8004b14:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8004b88 <maintask_state_stop+0xbc>
 8004b18:	f7fc fb20 	bl	800115c <actuator_motor5>

	TX_data_UART[0] = 254;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b1e:	22fe      	movs	r2, #254	; 0xfe
 8004b20:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = (uint8_t)yawAngle_send_low;
 8004b22:	4a1a      	ldr	r2, [pc, #104]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	7053      	strb	r3, [r2, #1]
	TX_data_UART[2] = (uint8_t)yawAngle_send_high;
 8004b28:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b2a:	7bbb      	ldrb	r3, [r7, #14]
 8004b2c:	7093      	strb	r3, [r2, #2]
	TX_data_UART[3] = error_No[0];
 8004b2e:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <maintask_state_stop+0xc4>)
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b34:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = error_No[1];
 8004b36:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <maintask_state_stop+0xc4>)
 8004b38:	785a      	ldrb	r2, [r3, #1]
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b3c:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = 1;
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = 1;
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = (uint8_t)Power_voltage[4];
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <maintask_state_stop+0xc8>)
 8004b4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b54:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b58:	793b      	ldrb	r3, [r7, #4]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b5e:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);
 8004b60:	23ff      	movs	r3, #255	; 0xff
 8004b62:	2208      	movs	r2, #8
 8004b64:	4909      	ldr	r1, [pc, #36]	; (8004b8c <maintask_state_stop+0xc0>)
 8004b66:	480c      	ldr	r0, [pc, #48]	; (8004b98 <maintask_state_stop+0xcc>)
 8004b68:	f007 f8de 	bl	800bd28 <HAL_UART_Transmit>

	actuator_kicker(1, 0);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fc fb45 	bl	80011fe <actuator_kicker>
	actuator_kicker_voltage(0.0);
 8004b74:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004b88 <maintask_state_stop+0xbc>
 8004b78:	f7fc fb20 	bl	80011bc <actuator_kicker_voltage>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200005e0 	.word	0x200005e0
 8004b88:	00000000 	.word	0x00000000
 8004b8c:	2000064c 	.word	0x2000064c
 8004b90:	20000780 	.word	0x20000780
 8004b94:	20000704 	.word	0x20000704
 8004b98:	20000990 	.word	0x20000990

08004b9c <maintask_stop>:

void maintask_stop()
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
	omni_move(0.0, 0.0, 0.0, 0.0);
 8004ba2:	eddf 1a34 	vldr	s3, [pc, #208]	; 8004c74 <maintask_stop+0xd8>
 8004ba6:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004c74 <maintask_stop+0xd8>
 8004baa:	eddf 0a32 	vldr	s1, [pc, #200]	; 8004c74 <maintask_stop+0xd8>
 8004bae:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004c74 <maintask_stop+0xd8>
 8004bb2:	f000 fb4d 	bl	8005250 <omni_move>
	actuator_motor5(0.0, 0.0);
 8004bb6:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8004c74 <maintask_stop+0xd8>
 8004bba:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004c74 <maintask_stop+0xd8>
 8004bbe:	f7fc facd 	bl	800115c <actuator_motor5>

	uint8_t yawAngle_send_low = ((int)yawAngle + 360) & 0x00FF;
 8004bc2:	4b2d      	ldr	r3, [pc, #180]	; (8004c78 <maintask_stop+0xdc>)
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bcc:	edc7 7a01 	vstr	s15, [r7, #4]
 8004bd0:	793b      	ldrb	r3, [r7, #4]
 8004bd2:	3368      	adds	r3, #104	; 0x68
 8004bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t yawAngle_send_high = (((int)yawAngle + 360) & 0xFF00) >> 8;
 8004bd6:	4b28      	ldr	r3, [pc, #160]	; (8004c78 <maintask_stop+0xdc>)
 8004bd8:	edd3 7a00 	vldr	s15, [r3]
 8004bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be0:	ee17 3a90 	vmov	r3, s15
 8004be4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004be8:	121b      	asrs	r3, r3, #8
 8004bea:	73bb      	strb	r3, [r7, #14]

	omni_move(0.0, 0.0, 0.0, 0.0);
 8004bec:	eddf 1a21 	vldr	s3, [pc, #132]	; 8004c74 <maintask_stop+0xd8>
 8004bf0:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8004c74 <maintask_stop+0xd8>
 8004bf4:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004c74 <maintask_stop+0xd8>
 8004bf8:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004c74 <maintask_stop+0xd8>
 8004bfc:	f000 fb28 	bl	8005250 <omni_move>
	actuator_motor5(0.0, 0.0);
 8004c00:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004c74 <maintask_stop+0xd8>
 8004c04:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8004c74 <maintask_stop+0xd8>
 8004c08:	f7fc faa8 	bl	800115c <actuator_motor5>

	TX_data_UART[0] = 254;
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <maintask_stop+0xe0>)
 8004c0e:	22fe      	movs	r2, #254	; 0xfe
 8004c10:	701a      	strb	r2, [r3, #0]
	TX_data_UART[1] = (uint8_t)yawAngle_send_low;
 8004c12:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <maintask_stop+0xe0>)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	7053      	strb	r3, [r2, #1]
	TX_data_UART[2] = (uint8_t)yawAngle_send_high;
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <maintask_stop+0xe0>)
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	7093      	strb	r3, [r2, #2]
	TX_data_UART[3] = error_No[0];
 8004c1e:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <maintask_stop+0xe4>)
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <maintask_stop+0xe0>)
 8004c24:	70da      	strb	r2, [r3, #3]
	TX_data_UART[4] = error_No[1];
 8004c26:	4b16      	ldr	r3, [pc, #88]	; (8004c80 <maintask_stop+0xe4>)
 8004c28:	785a      	ldrb	r2, [r3, #1]
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <maintask_stop+0xe0>)
 8004c2c:	711a      	strb	r2, [r3, #4]
	TX_data_UART[5] = 0;
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <maintask_stop+0xe0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	715a      	strb	r2, [r3, #5]
	TX_data_UART[6] = 0;
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <maintask_stop+0xe0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	719a      	strb	r2, [r3, #6]
	TX_data_UART[7] = (uint8_t)Power_voltage[4];
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <maintask_stop+0xe8>)
 8004c3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c44:	edc7 7a01 	vstr	s15, [r7, #4]
 8004c48:	793b      	ldrb	r3, [r7, #4]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <maintask_stop+0xe0>)
 8004c4e:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart2, TX_data_UART, 8, 0xff);
 8004c50:	23ff      	movs	r3, #255	; 0xff
 8004c52:	2208      	movs	r2, #8
 8004c54:	4909      	ldr	r1, [pc, #36]	; (8004c7c <maintask_stop+0xe0>)
 8004c56:	480c      	ldr	r0, [pc, #48]	; (8004c88 <maintask_stop+0xec>)
 8004c58:	f007 f866 	bl	800bd28 <HAL_UART_Transmit>

	actuator_kicker(1, 0);
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	2001      	movs	r0, #1
 8004c60:	f7fc facd 	bl	80011fe <actuator_kicker>
	actuator_kicker_voltage(0.0);
 8004c64:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004c74 <maintask_stop+0xd8>
 8004c68:	f7fc faa8 	bl	80011bc <actuator_kicker_voltage>
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	00000000 	.word	0x00000000
 8004c78:	200005e0 	.word	0x200005e0
 8004c7c:	2000064c 	.word	0x2000064c
 8004c80:	20000780 	.word	0x20000780
 8004c84:	20000704 	.word	0x20000704
 8004c88:	20000990 	.word	0x20000990
 8004c8c:	00000000 	.word	0x00000000

08004c90 <normalizeAngle>:
{
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float normalizeAngle(float angle_rad)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	ed87 0a01 	vstr	s0, [r7, #4]
	while (angle_rad > M_PI)
 8004c9a:	e00f      	b.n	8004cbc <normalizeAngle+0x2c>
	{
		angle_rad -= 2.0f * M_PI;
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fb fc7b 	bl	8000598 <__aeabi_f2d>
 8004ca2:	a31f      	add	r3, pc, #124	; (adr r3, 8004d20 <normalizeAngle+0x90>)
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f7fb fb16 	bl	80002d8 <__aeabi_dsub>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f7fb ffc0 	bl	8000c38 <__aeabi_d2f>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	607b      	str	r3, [r7, #4]
	while (angle_rad > M_PI)
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fb fc6b 	bl	8000598 <__aeabi_f2d>
 8004cc2:	a319      	add	r3, pc, #100	; (adr r3, 8004d28 <normalizeAngle+0x98>)
 8004cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc8:	f7fb ff4e 	bl	8000b68 <__aeabi_dcmpgt>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e4      	bne.n	8004c9c <normalizeAngle+0xc>
	}
	while (angle_rad < -M_PI)
 8004cd2:	e00f      	b.n	8004cf4 <normalizeAngle+0x64>
	{
		angle_rad += 2.0f * M_PI;
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7fb fc5f 	bl	8000598 <__aeabi_f2d>
 8004cda:	a311      	add	r3, pc, #68	; (adr r3, 8004d20 <normalizeAngle+0x90>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fafc 	bl	80002dc <__adddf3>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	f7fb ffa4 	bl	8000c38 <__aeabi_d2f>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	607b      	str	r3, [r7, #4]
	while (angle_rad < -M_PI)
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fb fc4f 	bl	8000598 <__aeabi_f2d>
 8004cfa:	a30d      	add	r3, pc, #52	; (adr r3, 8004d30 <normalizeAngle+0xa0>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb ff14 	bl	8000b2c <__aeabi_dcmplt>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e4      	bne.n	8004cd4 <normalizeAngle+0x44>
	}
	return angle_rad;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	ee07 3a90 	vmov	s15, r3
}
 8004d10:	eeb0 0a67 	vmov.f32	s0, s15
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	f3af 8000 	nop.w
 8004d20:	54442d18 	.word	0x54442d18
 8004d24:	401921fb 	.word	0x401921fb
 8004d28:	54442d18 	.word	0x54442d18
 8004d2c:	400921fb 	.word	0x400921fb
 8004d30:	54442d18 	.word	0x54442d18
 8004d34:	c00921fb 	.word	0xc00921fb

08004d38 <getAngleDiff>:

float getAngleDiff(float angle_rad1, float angle_rad2)
{
 8004d38:	b5b0      	push	{r4, r5, r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d42:	edc7 0a00 	vstr	s1, [r7]
	angle_rad1 = normalizeAngle(angle_rad1);
 8004d46:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d4a:	f7ff ffa1 	bl	8004c90 <normalizeAngle>
 8004d4e:	ed87 0a01 	vstr	s0, [r7, #4]
	angle_rad2 = normalizeAngle(angle_rad2);
 8004d52:	ed97 0a00 	vldr	s0, [r7]
 8004d56:	f7ff ff9b 	bl	8004c90 <normalizeAngle>
 8004d5a:	ed87 0a00 	vstr	s0, [r7]
	if (abs(angle_rad1 - angle_rad2) > M_PI)
 8004d5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d62:	edd7 7a00 	vldr	s15, [r7]
 8004d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d6e:	ee17 3a90 	vmov	r3, s15
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bfb8      	it	lt
 8004d76:	425b      	neglt	r3, r3
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	dd40      	ble.n	8004dfe <getAngleDiff+0xc6>
	{
		if (angle_rad1 > angle_rad2)
 8004d7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d80:	edd7 7a00 	vldr	s15, [r7]
 8004d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8c:	dd1a      	ble.n	8004dc4 <getAngleDiff+0x8c>
		{
			return angle_rad1 - (angle_rad2 + 2 * M_PI);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fb fc02 	bl	8000598 <__aeabi_f2d>
 8004d94:	4604      	mov	r4, r0
 8004d96:	460d      	mov	r5, r1
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	f7fb fbfd 	bl	8000598 <__aeabi_f2d>
 8004d9e:	a320      	add	r3, pc, #128	; (adr r3, 8004e20 <getAngleDiff+0xe8>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f7fb fa9a 	bl	80002dc <__adddf3>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4620      	mov	r0, r4
 8004dae:	4629      	mov	r1, r5
 8004db0:	f7fb fa92 	bl	80002d8 <__aeabi_dsub>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f7fb ff3c 	bl	8000c38 <__aeabi_d2f>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	e024      	b.n	8004e0e <getAngleDiff+0xd6>
		}
		else
		{
			return (angle_rad1 + 2 * M_PI) - angle_rad2;
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fb fbe7 	bl	8000598 <__aeabi_f2d>
 8004dca:	a315      	add	r3, pc, #84	; (adr r3, 8004e20 <getAngleDiff+0xe8>)
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f7fb fa84 	bl	80002dc <__adddf3>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4614      	mov	r4, r2
 8004dda:	461d      	mov	r5, r3
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	f7fb fbdb 	bl	8000598 <__aeabi_f2d>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4620      	mov	r0, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7fb fa75 	bl	80002d8 <__aeabi_dsub>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4610      	mov	r0, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	f7fb ff1f 	bl	8000c38 <__aeabi_d2f>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	e007      	b.n	8004e0e <getAngleDiff+0xd6>
		}
	}
	else
	{
		return angle_rad1 - angle_rad2;
 8004dfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e02:	edd7 7a00 	vldr	s15, [r7]
 8004e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0a:	ee17 3a90 	vmov	r3, s15
	}
}
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eeb0 0a67 	vmov.f32	s0, s15
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e1c:	f3af 8000 	nop.w
 8004e20:	54442d18 	.word	0x54442d18
 8004e24:	401921fb 	.word	0x401921fb

08004e28 <decode_SW>:

uint8_t decode_SW(uint16_t SW_data)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	80fb      	strh	r3, [r7, #6]
	int data;
	if (SW_data < 100)
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	2b63      	cmp	r3, #99	; 0x63
 8004e36:	d802      	bhi.n	8004e3e <decode_SW+0x16>
	{
		data = 0b00010000; // C
 8004e38:	2310      	movs	r3, #16
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e02e      	b.n	8004e9c <decode_SW+0x74>
	}
	else if (SW_data < 500 && SW_data > 100)
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e44:	d205      	bcs.n	8004e52 <decode_SW+0x2a>
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	2b64      	cmp	r3, #100	; 0x64
 8004e4a:	d902      	bls.n	8004e52 <decode_SW+0x2a>
	{
		data = 0b00000010; // B
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e024      	b.n	8004e9c <decode_SW+0x74>
	}
	else if (SW_data < 2000 && SW_data > 500)
 8004e52:	88fb      	ldrh	r3, [r7, #6]
 8004e54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e58:	d206      	bcs.n	8004e68 <decode_SW+0x40>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e60:	d902      	bls.n	8004e68 <decode_SW+0x40>
	{
		data = 0b00000100; // R
 8004e62:	2304      	movs	r3, #4
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e019      	b.n	8004e9c <decode_SW+0x74>
	}
	else if (SW_data < 3000 && SW_data > 2000)
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d806      	bhi.n	8004e80 <decode_SW+0x58>
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e78:	d902      	bls.n	8004e80 <decode_SW+0x58>
	{
		data = 0b00000001; // F
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e00d      	b.n	8004e9c <decode_SW+0x74>
	}
	else if (SW_data < 4000 && SW_data > 3000)
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004e86:	d207      	bcs.n	8004e98 <decode_SW+0x70>
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d902      	bls.n	8004e98 <decode_SW+0x70>
	{
		data = 0b00001000; // L
 8004e92:	2308      	movs	r3, #8
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e001      	b.n	8004e9c <decode_SW+0x74>
	}
	else
	{
		data = 0b00000000;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	b2db      	uxtb	r3, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	0000      	movs	r0, r0
	...

08004eb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_Ether[j] != 254 && j < sizeof(Rxbuf_from_Ether))
 8004ebc:	e002      	b.n	8004ec4 <HAL_UART_RxCpltCallback+0x14>
	{
		j++;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_Ether[j] != 254 && j < sizeof(Rxbuf_from_Ether))
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	4aa4      	ldr	r2, [pc, #656]	; (8005158 <HAL_UART_RxCpltCallback+0x2a8>)
 8004ec8:	5cd3      	ldrb	r3, [r2, r3]
 8004eca:	2bfe      	cmp	r3, #254	; 0xfe
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_RxCpltCallback+0x24>
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b0d      	cmp	r3, #13
 8004ed2:	d9f4      	bls.n	8004ebe <HAL_UART_RxCpltCallback+0xe>
	}
	if (j >= sizeof(Rxbuf_from_Ether))
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b0d      	cmp	r3, #13
 8004ed8:	d90d      	bls.n	8004ef6 <HAL_UART_RxCpltCallback+0x46>
	{
		for (uint8_t k = 0; k < (sizeof(data_from_ether)); k++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	73bb      	strb	r3, [r7, #14]
 8004ede:	e006      	b.n	8004eee <HAL_UART_RxCpltCallback+0x3e>
		{
			data_from_ether[k] = 0;
 8004ee0:	7bbb      	ldrb	r3, [r7, #14]
 8004ee2:	4a9e      	ldr	r2, [pc, #632]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < (sizeof(data_from_ether)); k++)
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	3301      	adds	r3, #1
 8004eec:	73bb      	strb	r3, [r7, #14]
 8004eee:	7bbb      	ldrb	r3, [r7, #14]
 8004ef0:	2b0c      	cmp	r3, #12
 8004ef2:	d9f5      	bls.n	8004ee0 <HAL_UART_RxCpltCallback+0x30>
 8004ef4:	e021      	b.n	8004f3a <HAL_UART_RxCpltCallback+0x8a>
		}
	}
	else
	{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	737b      	strb	r3, [r7, #13]
 8004efa:	e01b      	b.n	8004f34 <HAL_UART_RxCpltCallback+0x84>
		{
			if ((j + k) >= sizeof(data_from_ether))
 8004efc:	7bfa      	ldrb	r2, [r7, #15]
 8004efe:	7b7b      	ldrb	r3, [r7, #13]
 8004f00:	4413      	add	r3, r2
 8004f02:	2b0c      	cmp	r3, #12
 8004f04:	d90a      	bls.n	8004f1c <HAL_UART_RxCpltCallback+0x6c>
			{
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004f06:	7b7a      	ldrb	r2, [r7, #13]
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f1a3 020d 	sub.w	r2, r3, #13
 8004f10:	7b7b      	ldrb	r3, [r7, #13]
 8004f12:	4991      	ldr	r1, [pc, #580]	; (8005158 <HAL_UART_RxCpltCallback+0x2a8>)
 8004f14:	5c89      	ldrb	r1, [r1, r2]
 8004f16:	4a91      	ldr	r2, [pc, #580]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004f18:	54d1      	strb	r1, [r2, r3]
 8004f1a:	e008      	b.n	8004f2e <HAL_UART_RxCpltCallback+0x7e>
			}
			else
			{
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	7b7b      	ldrb	r3, [r7, #13]
 8004f20:	4413      	add	r3, r2
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	7b7b      	ldrb	r3, [r7, #13]
 8004f26:	498c      	ldr	r1, [pc, #560]	; (8005158 <HAL_UART_RxCpltCallback+0x2a8>)
 8004f28:	5c89      	ldrb	r1, [r1, r2]
 8004f2a:	4a8c      	ldr	r2, [pc, #560]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004f2c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8004f2e:	7b7b      	ldrb	r3, [r7, #13]
 8004f30:	3301      	adds	r3, #1
 8004f32:	737b      	strb	r3, [r7, #13]
 8004f34:	7b7b      	ldrb	r3, [r7, #13]
 8004f36:	2b0c      	cmp	r3, #12
 8004f38:	d9e0      	bls.n	8004efc <HAL_UART_RxCpltCallback+0x4c>
			}
		}
	}
	if (data_from_ether[sizeof(data_from_ether) - 1] == 253)
 8004f3a:	4b88      	ldr	r3, [pc, #544]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004f3c:	7b1b      	ldrb	r3, [r3, #12]
 8004f3e:	2bfd      	cmp	r3, #253	; 0xfd
 8004f40:	d10f      	bne.n	8004f62 <HAL_UART_RxCpltCallback+0xb2>
	{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	733b      	strb	r3, [r7, #12]
 8004f46:	e008      	b.n	8004f5a <HAL_UART_RxCpltCallback+0xaa>
		{
			Rxbuf_from_Ether_temp[k] = data_from_ether[k];
 8004f48:	7b3a      	ldrb	r2, [r7, #12]
 8004f4a:	7b3b      	ldrb	r3, [r7, #12]
 8004f4c:	4983      	ldr	r1, [pc, #524]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004f4e:	5c89      	ldrb	r1, [r1, r2]
 8004f50:	4a83      	ldr	r2, [pc, #524]	; (8005160 <HAL_UART_RxCpltCallback+0x2b0>)
 8004f52:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8004f54:	7b3b      	ldrb	r3, [r7, #12]
 8004f56:	3301      	adds	r3, #1
 8004f58:	733b      	strb	r3, [r7, #12]
 8004f5a:	7b3b      	ldrb	r3, [r7, #12]
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d9f3      	bls.n	8004f48 <HAL_UART_RxCpltCallback+0x98>
 8004f60:	e00e      	b.n	8004f80 <HAL_UART_RxCpltCallback+0xd0>
		}
	}
	else
	{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	72fb      	strb	r3, [r7, #11]
 8004f66:	e008      	b.n	8004f7a <HAL_UART_RxCpltCallback+0xca>
		{
			data_from_ether[k] = Rxbuf_from_Ether_temp[k];
 8004f68:	7afa      	ldrb	r2, [r7, #11]
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	497c      	ldr	r1, [pc, #496]	; (8005160 <HAL_UART_RxCpltCallback+0x2b0>)
 8004f6e:	5c89      	ldrb	r1, [r1, r2]
 8004f70:	4a7a      	ldr	r2, [pc, #488]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004f72:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++)
 8004f74:	7afb      	ldrb	r3, [r7, #11]
 8004f76:	3301      	adds	r3, #1
 8004f78:	72fb      	strb	r3, [r7, #11]
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d9f3      	bls.n	8004f68 <HAL_UART_RxCpltCallback+0xb8>
		}
	}

	vel_surge = ((float32_t)(data_from_ether[0] << 8 | data_from_ether[1]) - 32767.0) / 32767.0 * 7.0;
 8004f80:	4b76      	ldr	r3, [pc, #472]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	4a75      	ldr	r2, [pc, #468]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004f88:	7852      	ldrb	r2, [r2, #1]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f94:	ee17 0a90 	vmov	r0, s15
 8004f98:	f7fb fafe 	bl	8000598 <__aeabi_f2d>
 8004f9c:	a36a      	add	r3, pc, #424	; (adr r3, 8005148 <HAL_UART_RxCpltCallback+0x298>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb f999 	bl	80002d8 <__aeabi_dsub>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	a366      	add	r3, pc, #408	; (adr r3, 8005148 <HAL_UART_RxCpltCallback+0x298>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb fc72 	bl	800089c <__aeabi_ddiv>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	4b67      	ldr	r3, [pc, #412]	; (8005164 <HAL_UART_RxCpltCallback+0x2b4>)
 8004fc6:	f7fb fb3f 	bl	8000648 <__aeabi_dmul>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f7fb fe31 	bl	8000c38 <__aeabi_d2f>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4a63      	ldr	r2, [pc, #396]	; (8005168 <HAL_UART_RxCpltCallback+0x2b8>)
 8004fda:	6013      	str	r3, [r2, #0]
	vel_sway = ((float32_t)(data_from_ether[2] << 8 | data_from_ether[3]) - 32767.0) / 32767.0 * 7.0;
 8004fdc:	4b5f      	ldr	r3, [pc, #380]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004fde:	789b      	ldrb	r3, [r3, #2]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	4a5e      	ldr	r2, [pc, #376]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8004fe4:	78d2      	ldrb	r2, [r2, #3]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	ee07 3a90 	vmov	s15, r3
 8004fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff0:	ee17 0a90 	vmov	r0, s15
 8004ff4:	f7fb fad0 	bl	8000598 <__aeabi_f2d>
 8004ff8:	a353      	add	r3, pc, #332	; (adr r3, 8005148 <HAL_UART_RxCpltCallback+0x298>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb f96b 	bl	80002d8 <__aeabi_dsub>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4610      	mov	r0, r2
 8005008:	4619      	mov	r1, r3
 800500a:	a34f      	add	r3, pc, #316	; (adr r3, 8005148 <HAL_UART_RxCpltCallback+0x298>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb fc44 	bl	800089c <__aeabi_ddiv>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	4b50      	ldr	r3, [pc, #320]	; (8005164 <HAL_UART_RxCpltCallback+0x2b4>)
 8005022:	f7fb fb11 	bl	8000648 <__aeabi_dmul>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	f7fb fe03 	bl	8000c38 <__aeabi_d2f>
 8005032:	4603      	mov	r3, r0
 8005034:	4a4d      	ldr	r2, [pc, #308]	; (800516c <HAL_UART_RxCpltCallback+0x2bc>)
 8005036:	6013      	str	r3, [r2, #0]
	theta_vision = ((float32_t)(data_from_ether[4] << 8 | data_from_ether[5]) - 32767) / 32767.0 * M_PI;
 8005038:	4b48      	ldr	r3, [pc, #288]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 800503a:	791b      	ldrb	r3, [r3, #4]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	4a47      	ldr	r2, [pc, #284]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8005040:	7952      	ldrb	r2, [r2, #5]
 8005042:	4313      	orrs	r3, r2
 8005044:	ee07 3a90 	vmov	s15, r3
 8005048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8005170 <HAL_UART_RxCpltCallback+0x2c0>
 8005050:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005054:	ee17 0a90 	vmov	r0, s15
 8005058:	f7fb fa9e 	bl	8000598 <__aeabi_f2d>
 800505c:	a33a      	add	r3, pc, #232	; (adr r3, 8005148 <HAL_UART_RxCpltCallback+0x298>)
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb fc1b 	bl	800089c <__aeabi_ddiv>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	a338      	add	r3, pc, #224	; (adr r3, 8005150 <HAL_UART_RxCpltCallback+0x2a0>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb fae8 	bl	8000648 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	f7fb fdda 	bl	8000c38 <__aeabi_d2f>
 8005084:	4603      	mov	r3, r0
 8005086:	4a3b      	ldr	r2, [pc, #236]	; (8005174 <HAL_UART_RxCpltCallback+0x2c4>)
 8005088:	6013      	str	r3, [r2, #0]
	theta_target = ((float32_t)(data_from_ether[6] << 8 | data_from_ether[7]) - 32767) / 32767.0 * M_PI;
 800508a:	4b34      	ldr	r3, [pc, #208]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 800508c:	799b      	ldrb	r3, [r3, #6]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	4a32      	ldr	r2, [pc, #200]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8005092:	79d2      	ldrb	r2, [r2, #7]
 8005094:	4313      	orrs	r3, r2
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005170 <HAL_UART_RxCpltCallback+0x2c0>
 80050a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050a6:	ee17 0a90 	vmov	r0, s15
 80050aa:	f7fb fa75 	bl	8000598 <__aeabi_f2d>
 80050ae:	a326      	add	r3, pc, #152	; (adr r3, 8005148 <HAL_UART_RxCpltCallback+0x298>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f7fb fbf2 	bl	800089c <__aeabi_ddiv>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	a323      	add	r3, pc, #140	; (adr r3, 8005150 <HAL_UART_RxCpltCallback+0x2a0>)
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	f7fb fabf 	bl	8000648 <__aeabi_dmul>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fb fdb1 	bl	8000c38 <__aeabi_d2f>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4a27      	ldr	r2, [pc, #156]	; (8005178 <HAL_UART_RxCpltCallback+0x2c8>)
 80050da:	6013      	str	r3, [r2, #0]

	if (data_from_ether[8] > 100)
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 80050de:	7a1b      	ldrb	r3, [r3, #8]
 80050e0:	2b64      	cmp	r3, #100	; 0x64
 80050e2:	d909      	bls.n	80050f8 <HAL_UART_RxCpltCallback+0x248>
	{
		chipEN = 1;
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_UART_RxCpltCallback+0x2cc>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]
		data_from_ether[8] = data_from_ether[8] - 100;
 80050ea:	4b1c      	ldr	r3, [pc, #112]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 80050ec:	7a1b      	ldrb	r3, [r3, #8]
 80050ee:	3b64      	subs	r3, #100	; 0x64
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 80050f4:	721a      	strb	r2, [r3, #8]
 80050f6:	e002      	b.n	80050fe <HAL_UART_RxCpltCallback+0x24e>
	}
	else
	{
		chipEN = 0;
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <HAL_UART_RxCpltCallback+0x2cc>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
	}
	kick_power = (float32_t)data_from_ether[8] / 20.0;
 80050fe:	4b17      	ldr	r3, [pc, #92]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8005100:	7a1b      	ldrb	r3, [r3, #8]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800510a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800510e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_UART_RxCpltCallback+0x2d0>)
 8005114:	edc3 7a00 	vstr	s15, [r3]
	drible_power = (float32_t)data_from_ether[9] / 20.0;
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 800511a:	7a5b      	ldrb	r3, [r3, #9]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005124:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_UART_RxCpltCallback+0x2d4>)
 800512e:	edc3 7a00 	vstr	s15, [r3]

	keeper_EN = data_from_ether[10];
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_UART_RxCpltCallback+0x2ac>)
 8005134:	7a9a      	ldrb	r2, [r3, #10]
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <HAL_UART_RxCpltCallback+0x2d8>)
 8005138:	701a      	strb	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	f3af 8000 	nop.w
 8005148:	00000000 	.word	0x00000000
 800514c:	40dfffc0 	.word	0x40dfffc0
 8005150:	54442d18 	.word	0x54442d18
 8005154:	400921fb 	.word	0x400921fb
 8005158:	200005ac 	.word	0x200005ac
 800515c:	2000063c 	.word	0x2000063c
 8005160:	200005bc 	.word	0x200005bc
 8005164:	401c0000 	.word	0x401c0000
 8005168:	20000748 	.word	0x20000748
 800516c:	2000074c 	.word	0x2000074c
 8005170:	46fffe00 	.word	0x46fffe00
 8005174:	2000075c 	.word	0x2000075c
 8005178:	20000760 	.word	0x20000760
 800517c:	20000764 	.word	0x20000764
 8005180:	20000758 	.word	0x20000758
 8005184:	20000754 	.word	0x20000754
 8005188:	20000798 	.word	0x20000798

0800518c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("Error : %3d %3d\n", error_No[0], error_No[1]);
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <Error_Handler+0x30>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	4619      	mov	r1, r3
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <Error_Handler+0x30>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	461a      	mov	r2, r3
 800519c:	4808      	ldr	r0, [pc, #32]	; (80051c0 <Error_Handler+0x34>)
 800519e:	f008 fedf 	bl	800df60 <iprintf>
	while (1)
	{
		maintask_emargency();
 80051a2:	f7ff fc25 	bl	80049f0 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80051a6:	2201      	movs	r2, #1
 80051a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051ac:	4805      	ldr	r0, [pc, #20]	; (80051c4 <Error_Handler+0x38>)
 80051ae:	f003 feff 	bl	8008fb0 <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 80051b2:	21c8      	movs	r1, #200	; 0xc8
 80051b4:	20c8      	movs	r0, #200	; 0xc8
 80051b6:	f7fc f86f 	bl	8001298 <actuator_buzzer>
		maintask_emargency();
 80051ba:	e7f2      	b.n	80051a2 <Error_Handler+0x16>
 80051bc:	20000780 	.word	0x20000780
 80051c0:	0801159c 	.word	0x0801159c
 80051c4:	48000400 	.word	0x48000400

080051c8 <getUs>:
 */
#include "microsectimer.h"



uint32_t getUs(void) {
 80051c8:	b5b0      	push	{r4, r5, r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 80051ce:	f004 fc41 	bl	8009a54 <HAL_RCC_GetSysClockFreq>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4a10      	ldr	r2, [pc, #64]	; (8005218 <getUs+0x50>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	0c9b      	lsrs	r3, r3, #18
 80051dc:	607b      	str	r3, [r7, #4]
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
 80051de:	f7fd fe95 	bl	8002f0c <HAL_GetTick>
 80051e2:	4604      	mov	r4, r0
cycle_cnt = SysTick->VAL;
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <getUs+0x54>)
 80051e6:	689d      	ldr	r5, [r3, #8]
} while (ms != HAL_GetTick());
 80051e8:	f7fd fe90 	bl	8002f0c <HAL_GetTick>
 80051ec:	4603      	mov	r3, r0
 80051ee:	429c      	cmp	r4, r3
 80051f0:	d1f5      	bne.n	80051de <getUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80051f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051f6:	fb03 f204 	mul.w	r2, r3, r4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	1b59      	subs	r1, r3, r5
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	fbb1 f3f3 	udiv	r3, r1, r3
 800520c:	4413      	add	r3, r2
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bdb0      	pop	{r4, r5, r7, pc}
 8005216:	bf00      	nop
 8005218:	431bde83 	.word	0x431bde83
 800521c:	e000e010 	.word	0xe000e010

08005220 <delayUs>:

void delayUs(uint16_t micros) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	80fb      	strh	r3, [r7, #6]
uint32_t start = getUs();
 800522a:	f7ff ffcd 	bl	80051c8 <getUs>
 800522e:	60f8      	str	r0, [r7, #12]
while (getUs()-start < (uint32_t) micros) {
 8005230:	e000      	b.n	8005234 <delayUs+0x14>
	asm("nop");
 8005232:	bf00      	nop
while (getUs()-start < (uint32_t) micros) {
 8005234:	f7ff ffc8 	bl	80051c8 <getUs>
 8005238:	4602      	mov	r2, r0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1ad2      	subs	r2, r2, r3
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	429a      	cmp	r2, r3
 8005242:	d3f6      	bcc.n	8005232 <delayUs+0x12>
}
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	ed87 0a03 	vstr	s0, [r7, #12]
 800525a:	edc7 0a02 	vstr	s1, [r7, #8]
 800525e:	ed87 1a01 	vstr	s2, [r7, #4]
 8005262:	edc7 1a00 	vstr	s3, [r7]
	v_round=robot_radius*omega_omni;
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fb f996 	bl	8000598 <__aeabi_f2d>
 800526c:	a360      	add	r3, pc, #384	; (adr r3, 80053f0 <omni_move+0x1a0>)
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f7fb f9e9 	bl	8000648 <__aeabi_dmul>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	f7fb fcdb 	bl	8000c38 <__aeabi_d2f>
 8005282:	4603      	mov	r3, r0
 8005284:	4a50      	ldr	r2, [pc, #320]	; (80053c8 <omni_move+0x178>)
 8005286:	6013      	str	r3, [r2, #0]

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8005288:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800528c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005294:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80053cc <omni_move+0x17c>
 8005298:	edd7 7a03 	vldr	s15, [r7, #12]
 800529c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052a4:	4b48      	ldr	r3, [pc, #288]	; (80053c8 <omni_move+0x178>)
 80052a6:	edd3 7a00 	vldr	s15, [r3]
 80052aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80053d0 <omni_move+0x180>
 80052b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052be:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <omni_move+0x184>)
 80052c0:	edc3 7a00 	vstr	s15, [r3]
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 80052c4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80053d8 <omni_move+0x188>
 80052c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80052cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052d0:	eddf 6a42 	vldr	s13, [pc, #264]	; 80053dc <omni_move+0x18c>
 80052d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80052d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052e0:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <omni_move+0x178>)
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052ea:	eddf 6a39 	vldr	s13, [pc, #228]	; 80053d0 <omni_move+0x180>
 80052ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <omni_move+0x190>)
 80052fc:	edc3 7a00 	vstr	s15, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8005300:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80053d8 <omni_move+0x188>
 8005304:	edd7 7a02 	vldr	s15, [r7, #8]
 8005308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800530c:	eddf 6a32 	vldr	s13, [pc, #200]	; 80053d8 <omni_move+0x188>
 8005310:	edd7 7a03 	vldr	s15, [r7, #12]
 8005314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800531c:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <omni_move+0x178>)
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005326:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80053d0 <omni_move+0x180>
 800532a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800532e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005336:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <omni_move+0x194>)
 8005338:	edc3 7a00 	vstr	s15, [r3]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 800533c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005340:	edd7 7a02 	vldr	s15, [r7, #8]
 8005344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005348:	eddf 6a27 	vldr	s13, [pc, #156]	; 80053e8 <omni_move+0x198>
 800534c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <omni_move+0x178>)
 800535a:	edd3 7a00 	vldr	s15, [r3]
 800535e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005362:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80053d0 <omni_move+0x180>
 8005366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800536a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800536e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <omni_move+0x19c>)
 8005374:	edc3 7a00 	vstr	s15, [r3]

	actuator_motor1(m1,duty_Limit);
 8005378:	4b16      	ldr	r3, [pc, #88]	; (80053d4 <omni_move+0x184>)
 800537a:	edd3 7a00 	vldr	s15, [r3]
 800537e:	edd7 0a00 	vldr	s1, [r7]
 8005382:	eeb0 0a67 	vmov.f32	s0, s15
 8005386:	f7fb fe29 	bl	8000fdc <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 800538a:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <omni_move+0x190>)
 800538c:	edd3 7a00 	vldr	s15, [r3]
 8005390:	edd7 0a00 	vldr	s1, [r7]
 8005394:	eeb0 0a67 	vmov.f32	s0, s15
 8005398:	f7fb fe50 	bl	800103c <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 800539c:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <omni_move+0x194>)
 800539e:	edd3 7a00 	vldr	s15, [r3]
 80053a2:	edd7 0a00 	vldr	s1, [r7]
 80053a6:	eeb0 0a67 	vmov.f32	s0, s15
 80053aa:	f7fb fe77 	bl	800109c <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 80053ae:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <omni_move+0x19c>)
 80053b0:	edd3 7a00 	vldr	s15, [r3]
 80053b4:	edd7 0a00 	vldr	s1, [r7]
 80053b8:	eeb0 0a67 	vmov.f32	s0, s15
 80053bc:	f7fb fe9e 	bl	80010fc <actuator_motor4>

		cnt_motor=0;
		stall=0;
	}*/

}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000794 	.word	0x20000794
 80053cc:	3f5db3d7 	.word	0x3f5db3d7
 80053d0:	3e3426c8 	.word	0x3e3426c8
 80053d4:	20000784 	.word	0x20000784
 80053d8:	bf3504f3 	.word	0xbf3504f3
 80053dc:	3f3504f3 	.word	0x3f3504f3
 80053e0:	20000788 	.word	0x20000788
 80053e4:	2000078c 	.word	0x2000078c
 80053e8:	bf5db3d7 	.word	0xbf5db3d7
 80053ec:	20000790 	.word	0x20000790
 80053f0:	47ae147b 	.word	0x47ae147b
 80053f4:	3fb47ae1 	.word	0x3fb47ae1

080053f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <MX_SPI1_Init+0x74>)
 80053fe:	4a1c      	ldr	r2, [pc, #112]	; (8005470 <MX_SPI1_Init+0x78>)
 8005400:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005402:	4b1a      	ldr	r3, [pc, #104]	; (800546c <MX_SPI1_Init+0x74>)
 8005404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005408:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <MX_SPI1_Init+0x74>)
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <MX_SPI1_Init+0x74>)
 8005412:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005416:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <MX_SPI1_Init+0x74>)
 800541a:	2200      	movs	r2, #0
 800541c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <MX_SPI1_Init+0x74>)
 8005420:	2200      	movs	r2, #0
 8005422:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <MX_SPI1_Init+0x74>)
 8005426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <MX_SPI1_Init+0x74>)
 800542e:	2230      	movs	r2, #48	; 0x30
 8005430:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005432:	4b0e      	ldr	r3, [pc, #56]	; (800546c <MX_SPI1_Init+0x74>)
 8005434:	2200      	movs	r2, #0
 8005436:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <MX_SPI1_Init+0x74>)
 800543a:	2200      	movs	r2, #0
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800543e:	4b0b      	ldr	r3, [pc, #44]	; (800546c <MX_SPI1_Init+0x74>)
 8005440:	2200      	movs	r2, #0
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <MX_SPI1_Init+0x74>)
 8005446:	2207      	movs	r2, #7
 8005448:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <MX_SPI1_Init+0x74>)
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005450:	4b06      	ldr	r3, [pc, #24]	; (800546c <MX_SPI1_Init+0x74>)
 8005452:	2208      	movs	r2, #8
 8005454:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005456:	4805      	ldr	r0, [pc, #20]	; (800546c <MX_SPI1_Init+0x74>)
 8005458:	f004 fe2a 	bl	800a0b0 <HAL_SPI_Init>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005462:	f7ff fe93 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000800 	.word	0x20000800
 8005470:	40013000 	.word	0x40013000

08005474 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a17      	ldr	r2, [pc, #92]	; (80054f0 <HAL_SPI_MspInit+0x7c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d128      	bne.n	80054e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005496:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <HAL_SPI_MspInit+0x80>)
 8005498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549a:	4a16      	ldr	r2, [pc, #88]	; (80054f4 <HAL_SPI_MspInit+0x80>)
 800549c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054a0:	6613      	str	r3, [r2, #96]	; 0x60
 80054a2:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <HAL_SPI_MspInit+0x80>)
 80054a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <HAL_SPI_MspInit+0x80>)
 80054b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b2:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <HAL_SPI_MspInit+0x80>)
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ba:	4b0e      	ldr	r3, [pc, #56]	; (80054f4 <HAL_SPI_MspInit+0x80>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80054c6:	23e0      	movs	r3, #224	; 0xe0
 80054c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d2:	2300      	movs	r3, #0
 80054d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80054d6:	2305      	movs	r3, #5
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054da:	f107 0314 	add.w	r3, r7, #20
 80054de:	4619      	mov	r1, r3
 80054e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054e4:	f003 fbca 	bl	8008c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80054e8:	bf00      	nop
 80054ea:	3728      	adds	r7, #40	; 0x28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40013000 	.word	0x40013000
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_MspInit+0x44>)
 8005500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005502:	4a0e      	ldr	r2, [pc, #56]	; (800553c <HAL_MspInit+0x44>)
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6613      	str	r3, [r2, #96]	; 0x60
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <HAL_MspInit+0x44>)
 800550c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_MspInit+0x44>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	4a08      	ldr	r2, [pc, #32]	; (800553c <HAL_MspInit+0x44>)
 800551c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005520:	6593      	str	r3, [r2, #88]	; 0x58
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <HAL_MspInit+0x44>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800552e:	f003 fe2d 	bl	800918c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000

08005540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800554e:	b480      	push	{r7}
 8005550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005552:	e7fe      	b.n	8005552 <HardFault_Handler+0x4>

08005554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005558:	e7fe      	b.n	8005558 <MemManage_Handler+0x4>

0800555a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800555e:	e7fe      	b.n	800555e <BusFault_Handler+0x4>

08005560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005564:	e7fe      	b.n	8005564 <UsageFault_Handler+0x4>

08005566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005578:	bf00      	nop
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005582:	b480      	push	{r7}
 8005584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005594:	f000 fd46 	bl	8006024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005598:	bf00      	nop
 800559a:	bd80      	pop	{r7, pc}

0800559c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80055a0:	4802      	ldr	r0, [pc, #8]	; (80055ac <DMA1_Channel1_IRQHandler+0x10>)
 80055a2:	f002 fba0 	bl	8007ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000ab0 	.word	0x20000ab0

080055b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80055b4:	4802      	ldr	r0, [pc, #8]	; (80055c0 <DMA1_Channel2_IRQHandler+0x10>)
 80055b6:	f002 fb96 	bl	8007ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000b10 	.word	0x20000b10

080055c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80055c8:	4802      	ldr	r0, [pc, #8]	; (80055d4 <DMA1_Channel3_IRQHandler+0x10>)
 80055ca:	f002 fb8c 	bl	8007ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80055ce:	bf00      	nop
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	200003a4 	.word	0x200003a4

080055d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80055dc:	4802      	ldr	r0, [pc, #8]	; (80055e8 <DMA1_Channel4_IRQHandler+0x10>)
 80055de:	f002 fb82 	bl	8007ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80055e2:	bf00      	nop
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000404 	.word	0x20000404

080055ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055f0:	4802      	ldr	r0, [pc, #8]	; (80055fc <DMA1_Channel5_IRQHandler+0x10>)
 80055f2:	f002 fb78 	bl	8007ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000344 	.word	0x20000344

08005600 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005604:	4802      	ldr	r0, [pc, #8]	; (8005610 <FDCAN1_IT0_IRQHandler+0x10>)
 8005606:	f003 f8af 	bl	8008768 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000468 	.word	0x20000468

08005614 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005618:	4802      	ldr	r0, [pc, #8]	; (8005624 <FDCAN1_IT1_IRQHandler+0x10>)
 800561a:	f003 f8a5 	bl	8008768 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800561e:	bf00      	nop
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000468 	.word	0x20000468

08005628 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 800562c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005630:	f003 fcf0 	bl	8009014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005634:	bf00      	nop
 8005636:	bd80      	pop	{r7, pc}

08005638 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800563c:	4802      	ldr	r0, [pc, #8]	; (8005648 <USART2_IRQHandler+0x10>)
 800563e:	f006 fc5f 	bl	800bf00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000990 	.word	0x20000990

0800564c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005650:	4802      	ldr	r0, [pc, #8]	; (800565c <TIM7_DAC_IRQHandler+0x10>)
 8005652:	f005 fb89 	bl	800ad68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200008b4 	.word	0x200008b4

08005660 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <FDCAN2_IT0_IRQHandler+0x10>)
 8005666:	f003 f87f 	bl	8008768 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200004cc 	.word	0x200004cc

08005674 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005678:	4802      	ldr	r0, [pc, #8]	; (8005684 <FDCAN2_IT1_IRQHandler+0x10>)
 800567a:	f003 f875 	bl	8008768 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	200004cc 	.word	0x200004cc

08005688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
	return 1;
 800568c:	2301      	movs	r3, #1
}
 800568e:	4618      	mov	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_kill>:

int _kill(int pid, int sig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056a2:	f007 ffc1 	bl	800d628 <__errno>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2216      	movs	r2, #22
 80056aa:	601a      	str	r2, [r3, #0]
	return -1;
 80056ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_exit>:

void _exit (int status)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056c0:	f04f 31ff 	mov.w	r1, #4294967295
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ffe7 	bl	8005698 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056ca:	e7fe      	b.n	80056ca <_exit+0x12>

080056cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e00a      	b.n	80056f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056de:	f3af 8000 	nop.w
 80056e2:	4601      	mov	r1, r0
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	60ba      	str	r2, [r7, #8]
 80056ea:	b2ca      	uxtb	r2, r1
 80056ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	3301      	adds	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	dbf0      	blt.n	80056de <_read+0x12>
	}

return len;
 80056fc:	687b      	ldr	r3, [r7, #4]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
	return -1;
 800570e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800572e:	605a      	str	r2, [r3, #4]
	return 0;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <_isatty>:

int _isatty(int file)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
	return 1;
 8005746:	2301      	movs	r3, #1
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
	return 0;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005778:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <_sbrk+0x50>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <_sbrk+0x16>
		heap_end = &end;
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <_sbrk+0x50>)
 8005782:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <_sbrk+0x54>)
 8005784:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005786:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <_sbrk+0x50>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <_sbrk+0x50>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4413      	add	r3, r2
 8005794:	466a      	mov	r2, sp
 8005796:	4293      	cmp	r3, r2
 8005798:	d907      	bls.n	80057aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800579a:	f007 ff45 	bl	800d628 <__errno>
 800579e:	4603      	mov	r3, r0
 80057a0:	220c      	movs	r2, #12
 80057a2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80057a4:	f04f 33ff 	mov.w	r3, #4294967295
 80057a8:	e006      	b.n	80057b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <_sbrk+0x50>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	4a03      	ldr	r2, [pc, #12]	; (80057c0 <_sbrk+0x50>)
 80057b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80057b6:	68fb      	ldr	r3, [r7, #12]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000864 	.word	0x20000864
 80057c4:	20000b88 	.word	0x20000b88

080057c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80057cc:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <SystemInit+0x28>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <SystemInit+0x28>)
 80057d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <SystemInit+0x28>)
 80057de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057e2:	609a      	str	r2, [r3, #8]
#endif
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	e000ed00 	.word	0xe000ed00

080057f4 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057fa:	f107 031c 	add.w	r3, r7, #28
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005806:	463b      	mov	r3, r7
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	611a      	str	r2, [r3, #16]
 8005814:	615a      	str	r2, [r3, #20]
 8005816:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005818:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <MX_TIM5_Init+0xac>)
 800581a:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <MX_TIM5_Init+0xb0>)
 800581c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170;
 800581e:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <MX_TIM5_Init+0xac>)
 8005820:	22aa      	movs	r2, #170	; 0xaa
 8005822:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005824:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <MX_TIM5_Init+0xac>)
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500;
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <MX_TIM5_Init+0xac>)
 800582c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005830:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005832:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <MX_TIM5_Init+0xac>)
 8005834:	2200      	movs	r2, #0
 8005836:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <MX_TIM5_Init+0xac>)
 800583a:	2200      	movs	r2, #0
 800583c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800583e:	4818      	ldr	r0, [pc, #96]	; (80058a0 <MX_TIM5_Init+0xac>)
 8005840:	f005 f928 	bl	800aa94 <HAL_TIM_PWM_Init>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800584a:	f7ff fc9f 	bl	800518c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005852:	2300      	movs	r3, #0
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005856:	f107 031c 	add.w	r3, r7, #28
 800585a:	4619      	mov	r1, r3
 800585c:	4810      	ldr	r0, [pc, #64]	; (80058a0 <MX_TIM5_Init+0xac>)
 800585e:	f006 f937 	bl	800bad0 <HAL_TIMEx_MasterConfigSynchronization>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8005868:	f7ff fc90 	bl	800518c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800586c:	2360      	movs	r3, #96	; 0x60
 800586e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005874:	2300      	movs	r3, #0
 8005876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800587c:	463b      	mov	r3, r7
 800587e:	2204      	movs	r2, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4807      	ldr	r0, [pc, #28]	; (80058a0 <MX_TIM5_Init+0xac>)
 8005884:	f005 fbf0 	bl	800b068 <HAL_TIM_PWM_ConfigChannel>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800588e:	f7ff fc7d 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005892:	4803      	ldr	r0, [pc, #12]	; (80058a0 <MX_TIM5_Init+0xac>)
 8005894:	f000 f884 	bl	80059a0 <HAL_TIM_MspPostInit>

}
 8005898:	bf00      	nop
 800589a:	3728      	adds	r7, #40	; 0x28
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000868 	.word	0x20000868
 80058a4:	40000c00 	.word	0x40000c00

080058a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058ae:	1d3b      	adds	r3, r7, #4
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80058b8:	4b14      	ldr	r3, [pc, #80]	; (800590c <MX_TIM7_Init+0x64>)
 80058ba:	4a15      	ldr	r2, [pc, #84]	; (8005910 <MX_TIM7_Init+0x68>)
 80058bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170;
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <MX_TIM7_Init+0x64>)
 80058c0:	22aa      	movs	r2, #170	; 0xaa
 80058c2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <MX_TIM7_Init+0x64>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <MX_TIM7_Init+0x64>)
 80058cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058d2:	4b0e      	ldr	r3, [pc, #56]	; (800590c <MX_TIM7_Init+0x64>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80058d8:	480c      	ldr	r0, [pc, #48]	; (800590c <MX_TIM7_Init+0x64>)
 80058da:	f005 f80b 	bl	800a8f4 <HAL_TIM_Base_Init>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80058e4:	f7ff fc52 	bl	800518c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058e8:	2300      	movs	r3, #0
 80058ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80058f0:	1d3b      	adds	r3, r7, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4805      	ldr	r0, [pc, #20]	; (800590c <MX_TIM7_Init+0x64>)
 80058f6:	f006 f8eb 	bl	800bad0 <HAL_TIMEx_MasterConfigSynchronization>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005900:	f7ff fc44 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200008b4 	.word	0x200008b4
 8005910:	40001400 	.word	0x40001400

08005914 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <HAL_TIM_PWM_MspInit+0x38>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10b      	bne.n	800593e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <HAL_TIM_PWM_MspInit+0x3c>)
 8005928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <HAL_TIM_PWM_MspInit+0x3c>)
 800592c:	f043 0308 	orr.w	r3, r3, #8
 8005930:	6593      	str	r3, [r2, #88]	; 0x58
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <HAL_TIM_PWM_MspInit+0x3c>)
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800593e:	bf00      	nop
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0d      	ldr	r2, [pc, #52]	; (8005998 <HAL_TIM_Base_MspInit+0x44>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d113      	bne.n	800598e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <HAL_TIM_Base_MspInit+0x48>)
 8005968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596a:	4a0c      	ldr	r2, [pc, #48]	; (800599c <HAL_TIM_Base_MspInit+0x48>)
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	6593      	str	r3, [r2, #88]	; 0x58
 8005972:	4b0a      	ldr	r3, [pc, #40]	; (800599c <HAL_TIM_Base_MspInit+0x48>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 800597e:	2200      	movs	r2, #0
 8005980:	2108      	movs	r1, #8
 8005982:	2037      	movs	r0, #55	; 0x37
 8005984:	f001 ff97 	bl	80078b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005988:	2037      	movs	r0, #55	; 0x37
 800598a:	f001 ffae 	bl	80078ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40001400 	.word	0x40001400
 800599c:	40021000 	.word	0x40021000

080059a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <HAL_TIM_MspPostInit+0x64>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d11c      	bne.n	80059fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <HAL_TIM_MspPostInit+0x68>)
 80059c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c6:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <HAL_TIM_MspPostInit+0x68>)
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ce:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <HAL_TIM_MspPostInit+0x68>)
 80059d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	60bb      	str	r3, [r7, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80059da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e0:	2302      	movs	r3, #2
 80059e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80059ec:	2301      	movs	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 80059f0:	f107 030c 	add.w	r3, r7, #12
 80059f4:	4619      	mov	r1, r3
 80059f6:	4805      	ldr	r0, [pc, #20]	; (8005a0c <HAL_TIM_MspPostInit+0x6c>)
 80059f8:	f003 f940 	bl	8008c7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80059fc:	bf00      	nop
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	48000800 	.word	0x48000800

08005a10 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005a14:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a16:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <MX_LPUART1_UART_Init+0x98>)
 8005a18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 921600;
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a1c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005a20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005a22:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005a28:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005a34:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a36:	220c      	movs	r2, #12
 8005a38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a40:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a46:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005a4c:	4b15      	ldr	r3, [pc, #84]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a4e:	2220      	movs	r2, #32
 8005a50:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005a52:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005a5a:	4812      	ldr	r0, [pc, #72]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a5c:	f006 f914 	bl	800bc88 <HAL_UART_Init>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8005a66:	f7ff fb91 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	480d      	ldr	r0, [pc, #52]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a6e:	f007 fd11 	bl	800d494 <HAL_UARTEx_SetTxFifoThreshold>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8005a78:	f7ff fb88 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	4809      	ldr	r0, [pc, #36]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a80:	f007 fd46 	bl	800d510 <HAL_UARTEx_SetRxFifoThreshold>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8005a8a:	f7ff fb7f 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005a8e:	4805      	ldr	r0, [pc, #20]	; (8005aa4 <MX_LPUART1_UART_Init+0x94>)
 8005a90:	f007 fcc7 	bl	800d422 <HAL_UARTEx_DisableFifoMode>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8005a9a:	f7ff fb77 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000900 	.word	0x20000900
 8005aa8:	40008000 	.word	0x40008000

08005aac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005ab0:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ab2:	4a25      	ldr	r2, [pc, #148]	; (8005b48 <MX_USART2_UART_Init+0x9c>)
 8005ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8005ab6:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ab8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005abe:	4b21      	ldr	r3, [pc, #132]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005ac4:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005aca:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ad0:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ad2:	220c      	movs	r2, #12
 8005ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ad6:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005adc:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ae2:	4b18      	ldr	r3, [pc, #96]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ae8:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005af0:	2208      	movs	r2, #8
 8005af2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005af4:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005af6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005afc:	4811      	ldr	r0, [pc, #68]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005afe:	f006 f8c3 	bl	800bc88 <HAL_UART_Init>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8005b08:	f7ff fb40 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	480d      	ldr	r0, [pc, #52]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005b10:	f007 fcc0 	bl	800d494 <HAL_UARTEx_SetTxFifoThreshold>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8005b1a:	f7ff fb37 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4808      	ldr	r0, [pc, #32]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005b22:	f007 fcf5 	bl	800d510 <HAL_UARTEx_SetRxFifoThreshold>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8005b2c:	f7ff fb2e 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005b30:	4804      	ldr	r0, [pc, #16]	; (8005b44 <MX_USART2_UART_Init+0x98>)
 8005b32:	f007 fc76 	bl	800d422 <HAL_UARTEx_DisableFifoMode>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8005b3c:	f7ff fb26 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000990 	.word	0x20000990
 8005b48:	40004400 	.word	0x40004400

08005b4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005b50:	4b22      	ldr	r3, [pc, #136]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b52:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <MX_USART3_UART_Init+0x94>)
 8005b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005b56:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005b5e:	4b1f      	ldr	r3, [pc, #124]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005b64:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005b6a:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005b70:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b72:	220c      	movs	r2, #12
 8005b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b76:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b7c:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b82:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005b88:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005b94:	4811      	ldr	r0, [pc, #68]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005b96:	f006 f877 	bl	800bc88 <HAL_UART_Init>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005ba0:	f7ff faf4 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	480d      	ldr	r0, [pc, #52]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005ba8:	f007 fc74 	bl	800d494 <HAL_UARTEx_SetTxFifoThreshold>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8005bb2:	f7ff faeb 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4808      	ldr	r0, [pc, #32]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005bba:	f007 fca9 	bl	800d510 <HAL_UARTEx_SetRxFifoThreshold>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005bc4:	f7ff fae2 	bl	800518c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005bc8:	4804      	ldr	r0, [pc, #16]	; (8005bdc <MX_USART3_UART_Init+0x90>)
 8005bca:	f007 fc2a 	bl	800d422 <HAL_UARTEx_DisableFifoMode>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005bd4:	f7ff fada 	bl	800518c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005bd8:	bf00      	nop
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000a20 	.word	0x20000a20
 8005be0:	40004800 	.word	0x40004800

08005be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b0a2      	sub	sp, #136	; 0x88
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	609a      	str	r2, [r3, #8]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005bfc:	f107 0320 	add.w	r3, r7, #32
 8005c00:	2254      	movs	r2, #84	; 0x54
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f007 fd39 	bl	800d67c <memset>
  if(uartHandle->Instance==LPUART1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a8b      	ldr	r2, [pc, #556]	; (8005e3c <HAL_UART_MspInit+0x258>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d139      	bne.n	8005c88 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005c14:	2320      	movs	r3, #32
 8005c16:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c1c:	f107 0320 	add.w	r3, r7, #32
 8005c20:	4618      	mov	r0, r3
 8005c22:	f003 fff7 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c2c:	f7ff faae 	bl	800518c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005c30:	4b83      	ldr	r3, [pc, #524]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c34:	4a82      	ldr	r2, [pc, #520]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005c3c:	4b80      	ldr	r3, [pc, #512]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c48:	4b7d      	ldr	r3, [pc, #500]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4c:	4a7c      	ldr	r2, [pc, #496]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c54:	4b7a      	ldr	r3, [pc, #488]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c60:	230c      	movs	r3, #12
 8005c62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c64:	2302      	movs	r3, #2
 8005c66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005c72:	230c      	movs	r3, #12
 8005c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c82:	f002 fffb 	bl	8008c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005c86:	e0d5      	b.n	8005e34 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a6d      	ldr	r2, [pc, #436]	; (8005e44 <HAL_UART_MspInit+0x260>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d169      	bne.n	8005d66 <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005c92:	2302      	movs	r3, #2
 8005c94:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005c96:	2300      	movs	r3, #0
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c9a:	f107 0320 	add.w	r3, r7, #32
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f003 ffb8 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_UART_MspInit+0xca>
      Error_Handler();
 8005caa:	f7ff fa6f 	bl	800518c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cae:	4b64      	ldr	r3, [pc, #400]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	4a63      	ldr	r2, [pc, #396]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8005cba:	4b61      	ldr	r3, [pc, #388]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cc6:	4b5e      	ldr	r3, [pc, #376]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	4a5d      	ldr	r2, [pc, #372]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cd2:	4b5b      	ldr	r3, [pc, #364]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 8005cde:	2318      	movs	r3, #24
 8005ce0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005cf0:	2307      	movs	r3, #7
 8005cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cf6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4852      	ldr	r0, [pc, #328]	; (8005e48 <HAL_UART_MspInit+0x264>)
 8005cfe:	f002 ffbd 	bl	8008c7c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005d02:	4b52      	ldr	r3, [pc, #328]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d04:	4a52      	ldr	r2, [pc, #328]	; (8005e50 <HAL_UART_MspInit+0x26c>)
 8005d06:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005d08:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d0a:	221a      	movs	r2, #26
 8005d0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d0e:	4b4f      	ldr	r3, [pc, #316]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d14:	4b4d      	ldr	r3, [pc, #308]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d1a:	4b4c      	ldr	r3, [pc, #304]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d20:	4b4a      	ldr	r3, [pc, #296]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d26:	4b49      	ldr	r3, [pc, #292]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005d2c:	4b47      	ldr	r3, [pc, #284]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d2e:	2220      	movs	r2, #32
 8005d30:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d32:	4b46      	ldr	r3, [pc, #280]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005d38:	4844      	ldr	r0, [pc, #272]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d3a:	f001 fdf1 	bl	8007920 <HAL_DMA_Init>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8005d44:	f7ff fa22 	bl	800518c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a40      	ldr	r2, [pc, #256]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d4c:	67da      	str	r2, [r3, #124]	; 0x7c
 8005d4e:	4a3f      	ldr	r2, [pc, #252]	; (8005e4c <HAL_UART_MspInit+0x268>)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005d54:	2200      	movs	r2, #0
 8005d56:	210c      	movs	r1, #12
 8005d58:	2026      	movs	r0, #38	; 0x26
 8005d5a:	f001 fdac 	bl	80078b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d5e:	2026      	movs	r0, #38	; 0x26
 8005d60:	f001 fdc3 	bl	80078ea <HAL_NVIC_EnableIRQ>
}
 8005d64:	e066      	b.n	8005e34 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART3)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <HAL_UART_MspInit+0x270>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d161      	bne.n	8005e34 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005d70:	2304      	movs	r3, #4
 8005d72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005d74:	2300      	movs	r3, #0
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d78:	f107 0320 	add.w	r3, r7, #32
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f003 ff49 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8005d88:	f7ff fa00 	bl	800518c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d8c:	4b2c      	ldr	r3, [pc, #176]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d90:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d96:	6593      	str	r3, [r2, #88]	; 0x58
 8005d98:	4b29      	ldr	r3, [pc, #164]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005da4:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da8:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005daa:	f043 0304 	orr.w	r3, r3, #4
 8005dae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005db0:	4b23      	ldr	r3, [pc, #140]	; (8005e40 <HAL_UART_MspInit+0x25c>)
 8005db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8005dbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005dc0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005dd0:	2307      	movs	r3, #7
 8005dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dd6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005dda:	4619      	mov	r1, r3
 8005ddc:	481e      	ldr	r0, [pc, #120]	; (8005e58 <HAL_UART_MspInit+0x274>)
 8005dde:	f002 ff4d 	bl	8008c7c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8005de2:	4b1e      	ldr	r3, [pc, #120]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_UART_MspInit+0x27c>)
 8005de6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005de8:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005dea:	221c      	movs	r2, #28
 8005dec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dee:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005dfc:	2280      	movs	r2, #128	; 0x80
 8005dfe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e06:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005e0e:	2220      	movs	r2, #32
 8005e10:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005e18:	4810      	ldr	r0, [pc, #64]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005e1a:	f001 fd81 	bl	8007920 <HAL_DMA_Init>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <HAL_UART_MspInit+0x244>
      Error_Handler();
 8005e24:	f7ff f9b2 	bl	800518c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a0c      	ldr	r2, [pc, #48]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005e2c:	67da      	str	r2, [r3, #124]	; 0x7c
 8005e2e:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <HAL_UART_MspInit+0x278>)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005e34:	bf00      	nop
 8005e36:	3788      	adds	r7, #136	; 0x88
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40008000 	.word	0x40008000
 8005e40:	40021000 	.word	0x40021000
 8005e44:	40004400 	.word	0x40004400
 8005e48:	48000400 	.word	0x48000400
 8005e4c:	20000ab0 	.word	0x20000ab0
 8005e50:	40020008 	.word	0x40020008
 8005e54:	40004800 	.word	0x40004800
 8005e58:	48000800 	.word	0x48000800
 8005e5c:	20000b10 	.word	0x20000b10
 8005e60:	4002001c 	.word	0x4002001c

08005e64 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	789b      	ldrb	r3, [r3, #2]
 8005e7c:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	78db      	ldrb	r3, [r3, #3]
 8005e82:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	ee07 3a90 	vmov	s15, r3
}
 8005e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	ed87 0a00 	vstr	s0, [r7]
    Float_char4 tmp;
    tmp.float_value=float_value;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	60fb      	str	r3, [r7, #12]
    value[0]=tmp.char4_value[0];
 8005ea8:	7b3a      	ldrb	r2, [r7, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	701a      	strb	r2, [r3, #0]
    value[1]=tmp.char4_value[1];
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	7b7a      	ldrb	r2, [r7, #13]
 8005eb4:	701a      	strb	r2, [r3, #0]
    value[2]=tmp.char4_value[2];
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3302      	adds	r3, #2
 8005eba:	7bba      	ldrb	r2, [r7, #14]
 8005ebc:	701a      	strb	r2, [r3, #0]
    value[3]=tmp.char4_value[3];
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3303      	adds	r3, #3
 8005ec2:	7bfa      	ldrb	r2, [r7, #15]
 8005ec4:	701a      	strb	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
	...

08005ed4 <xprintf_init>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/


void xprintf_init(UART_HandleTypeDef *handler){
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	huart_xprintf = handler;
 8005edc:	4a05      	ldr	r2, [pc, #20]	; (8005ef4 <xprintf_init+0x20>)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6013      	str	r3, [r2, #0]
	xdev_out(uart_putc);
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <xprintf_init+0x24>)
 8005ee4:	4a05      	ldr	r2, [pc, #20]	; (8005efc <xprintf_init+0x28>)
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	200007ec 	.word	0x200007ec
 8005ef8:	20000b70 	.word	0x20000b70
 8005efc:	08005f01 	.word	0x08005f01

08005f00 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	71fb      	strb	r3, [r7, #7]
	 char buf[1];
	 buf[0] = c;
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <uart_putc+0x28>)
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	f107 010c 	add.w	r1, r7, #12
 8005f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f005 ff04 	bl	800bd28 <HAL_UART_Transmit>
	}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200007ec 	.word	0x200007ec

08005f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005f2c:	480d      	ldr	r0, [pc, #52]	; (8005f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005f2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f30:	480d      	ldr	r0, [pc, #52]	; (8005f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f32:	490e      	ldr	r1, [pc, #56]	; (8005f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f34:	4a0e      	ldr	r2, [pc, #56]	; (8005f70 <LoopForever+0xe>)
  movs r3, #0
 8005f36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005f38:	e002      	b.n	8005f40 <LoopCopyDataInit>

08005f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f3e:	3304      	adds	r3, #4

08005f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f44:	d3f9      	bcc.n	8005f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f46:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f48:	4c0b      	ldr	r4, [pc, #44]	; (8005f78 <LoopForever+0x16>)
  movs r3, #0
 8005f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f4c:	e001      	b.n	8005f52 <LoopFillZerobss>

08005f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f50:	3204      	adds	r2, #4

08005f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f54:	d3fb      	bcc.n	8005f4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f56:	f7ff fc37 	bl	80057c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f5a:	f007 fb6b 	bl	800d634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f5e:	f7fc ffe1 	bl	8002f24 <main>

08005f62 <LoopForever>:

LoopForever:
    b LoopForever
 8005f62:	e7fe      	b.n	8005f62 <LoopForever>
  ldr   r0, =_estack
 8005f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f6c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005f70:	08011bc8 	.word	0x08011bc8
  ldr r2, =_sbss
 8005f74:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005f78:	20000b88 	.word	0x20000b88

08005f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f7c:	e7fe      	b.n	8005f7c <ADC1_2_IRQHandler>

08005f7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f88:	2003      	movs	r0, #3
 8005f8a:	f001 fc89 	bl	80078a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f000 f80e 	bl	8005fb0 <HAL_InitTick>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	71fb      	strb	r3, [r7, #7]
 8005f9e:	e001      	b.n	8005fa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005fa0:	f7ff faaa 	bl	80054f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005fa4:	79fb      	ldrb	r3, [r7, #7]

}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005fbc:	4b16      	ldr	r3, [pc, #88]	; (8006018 <HAL_InitTick+0x68>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d022      	beq.n	800600a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <HAL_InitTick+0x6c>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b13      	ldr	r3, [pc, #76]	; (8006018 <HAL_InitTick+0x68>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 fc94 	bl	8007906 <HAL_SYSTICK_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10f      	bne.n	8006004 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b0f      	cmp	r3, #15
 8005fe8:	d809      	bhi.n	8005ffe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fea:	2200      	movs	r2, #0
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff2:	f001 fc60 	bl	80078b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ff6:	4a0a      	ldr	r2, [pc, #40]	; (8006020 <HAL_InitTick+0x70>)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e007      	b.n	800600e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
 8006002:	e004      	b.n	800600e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	e001      	b.n	800600e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000010 	.word	0x20000010
 800601c:	20000008 	.word	0x20000008
 8006020:	2000000c 	.word	0x2000000c

08006024 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_IncTick+0x1c>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_IncTick+0x20>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4413      	add	r3, r2
 8006032:	4a03      	ldr	r2, [pc, #12]	; (8006040 <HAL_IncTick+0x1c>)
 8006034:	6013      	str	r3, [r2, #0]
}
 8006036:	bf00      	nop
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000b74 	.word	0x20000b74
 8006044:	20000010 	.word	0x20000010

08006048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006050:	f7fc ff5c 	bl	8002f0c <HAL_GetTick>
 8006054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d004      	beq.n	800606c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_Delay+0x40>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4413      	add	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800606c:	bf00      	nop
 800606e:	f7fc ff4d 	bl	8002f0c <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	429a      	cmp	r2, r3
 800607c:	d8f7      	bhi.n	800606e <HAL_Delay+0x26>
  {
  }
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000010 	.word	0x20000010

0800608c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	609a      	str	r2, [r3, #8]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3360      	adds	r3, #96	; 0x60
 8006106:	461a      	mov	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <LL_ADC_SetOffset+0x44>)
 8006116:	4013      	ands	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	4313      	orrs	r3, r2
 8006124:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	03fff000 	.word	0x03fff000

0800613c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3360      	adds	r3, #96	; 0x60
 800614a:	461a      	mov	r2, r3
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3360      	adds	r3, #96	; 0x60
 8006178:	461a      	mov	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4413      	add	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	431a      	orrs	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800619e:	b480      	push	{r7}
 80061a0:	b087      	sub	sp, #28
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3360      	adds	r3, #96	; 0x60
 80061ae:	461a      	mov	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80061c8:	bf00      	nop
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3360      	adds	r3, #96	; 0x60
 80061e4:	461a      	mov	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	615a      	str	r2, [r3, #20]
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006256:	b480      	push	{r7}
 8006258:	b087      	sub	sp, #28
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3330      	adds	r3, #48	; 0x30
 8006266:	461a      	mov	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	f003 030c 	and.w	r3, r3, #12
 8006272:	4413      	add	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	211f      	movs	r1, #31
 8006282:	fa01 f303 	lsl.w	r3, r1, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	401a      	ands	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	0e9b      	lsrs	r3, r3, #26
 800628e:	f003 011f 	and.w	r1, r3, #31
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	fa01 f303 	lsl.w	r3, r1, r3
 800629c:	431a      	orrs	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b087      	sub	sp, #28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3314      	adds	r3, #20
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	0e5b      	lsrs	r3, r3, #25
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	4413      	add	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	0d1b      	lsrs	r3, r3, #20
 80062d6:	f003 031f 	and.w	r3, r3, #31
 80062da:	2107      	movs	r1, #7
 80062dc:	fa01 f303 	lsl.w	r3, r1, r3
 80062e0:	43db      	mvns	r3, r3
 80062e2:	401a      	ands	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	0d1b      	lsrs	r3, r3, #20
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	fa01 f303 	lsl.w	r3, r1, r3
 80062f2:	431a      	orrs	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d10a      	bne.n	800632e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006324:	431a      	orrs	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800632c:	e00a      	b.n	8006344 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633a:	43db      	mvns	r3, r3
 800633c:	401a      	ands	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	407f0000 	.word	0x407f0000

08006354 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 031f 	and.w	r3, r3, #31
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006380:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6093      	str	r3, [r2, #8]
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a8:	d101      	bne.n	80063ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80063cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063f8:	d101      	bne.n	80063fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800641c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006420:	f043 0201 	orr.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <LL_ADC_IsEnabled+0x18>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <LL_ADC_IsEnabled+0x1a>
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800646a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800646e:	f043 0204 	orr.w	r2, r3, #4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b04      	cmp	r3, #4
 8006494:	d101      	bne.n	800649a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d101      	bne.n	80064c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b089      	sub	sp, #36	; 0x24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80064dc:	2300      	movs	r3, #0
 80064de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e1af      	b.n	800684a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fb f84f 	bl	800159c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff3f 	bl	8006394 <LL_ADC_IsDeepPowerDownEnabled>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff25 	bl	8006370 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff ff5a 	bl	80063e4 <LL_ADC_IsInternalRegulatorEnabled>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d115      	bne.n	8006562 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ff3e 	bl	80063bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006540:	4b9f      	ldr	r3, [pc, #636]	; (80067c0 <HAL_ADC_Init+0x2f0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	4a9f      	ldr	r2, [pc, #636]	; (80067c4 <HAL_ADC_Init+0x2f4>)
 8006548:	fba2 2303 	umull	r2, r3, r2, r3
 800654c:	099b      	lsrs	r3, r3, #6
 800654e:	3301      	adds	r3, #1
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006554:	e002      	b.n	800655c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	3b01      	subs	r3, #1
 800655a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f9      	bne.n	8006556 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff ff3c 	bl	80063e4 <LL_ADC_IsInternalRegulatorEnabled>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10d      	bne.n	800658e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	f043 0210 	orr.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff ff75 	bl	8006482 <LL_ADC_REG_IsConversionOngoing>
 8006598:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 8148 	bne.w	8006838 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f040 8144 	bne.w	8006838 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80065b8:	f043 0202 	orr.w	r2, r3, #2
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff ff35 	bl	8006434 <LL_ADC_IsEnabled>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d141      	bne.n	8006654 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d8:	d004      	beq.n	80065e4 <HAL_ADC_Init+0x114>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a7a      	ldr	r2, [pc, #488]	; (80067c8 <HAL_ADC_Init+0x2f8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d10f      	bne.n	8006604 <HAL_ADC_Init+0x134>
 80065e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80065e8:	f7ff ff24 	bl	8006434 <LL_ADC_IsEnabled>
 80065ec:	4604      	mov	r4, r0
 80065ee:	4876      	ldr	r0, [pc, #472]	; (80067c8 <HAL_ADC_Init+0x2f8>)
 80065f0:	f7ff ff20 	bl	8006434 <LL_ADC_IsEnabled>
 80065f4:	4603      	mov	r3, r0
 80065f6:	4323      	orrs	r3, r4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e012      	b.n	800662a <HAL_ADC_Init+0x15a>
 8006604:	4871      	ldr	r0, [pc, #452]	; (80067cc <HAL_ADC_Init+0x2fc>)
 8006606:	f7ff ff15 	bl	8006434 <LL_ADC_IsEnabled>
 800660a:	4604      	mov	r4, r0
 800660c:	4870      	ldr	r0, [pc, #448]	; (80067d0 <HAL_ADC_Init+0x300>)
 800660e:	f7ff ff11 	bl	8006434 <LL_ADC_IsEnabled>
 8006612:	4603      	mov	r3, r0
 8006614:	431c      	orrs	r4, r3
 8006616:	486f      	ldr	r0, [pc, #444]	; (80067d4 <HAL_ADC_Init+0x304>)
 8006618:	f7ff ff0c 	bl	8006434 <LL_ADC_IsEnabled>
 800661c:	4603      	mov	r3, r0
 800661e:	4323      	orrs	r3, r4
 8006620:	2b00      	cmp	r3, #0
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d012      	beq.n	8006654 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006636:	d004      	beq.n	8006642 <HAL_ADC_Init+0x172>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a62      	ldr	r2, [pc, #392]	; (80067c8 <HAL_ADC_Init+0x2f8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d101      	bne.n	8006646 <HAL_ADC_Init+0x176>
 8006642:	4a65      	ldr	r2, [pc, #404]	; (80067d8 <HAL_ADC_Init+0x308>)
 8006644:	e000      	b.n	8006648 <HAL_ADC_Init+0x178>
 8006646:	4a65      	ldr	r2, [pc, #404]	; (80067dc <HAL_ADC_Init+0x30c>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4619      	mov	r1, r3
 800664e:	4610      	mov	r0, r2
 8006650:	f7ff fd1c 	bl	800608c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7f5b      	ldrb	r3, [r3, #29]
 8006658:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800665e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006664:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800666a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006672:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006674:	4313      	orrs	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800667e:	2b01      	cmp	r3, #1
 8006680:	d106      	bne.n	8006690 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	045b      	lsls	r3, r3, #17
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <HAL_ADC_Init+0x310>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	430b      	orrs	r3, r1
 80066be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fed1 	bl	8006482 <LL_ADC_REG_IsConversionOngoing>
 80066e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fede 	bl	80064a8 <LL_ADC_INJ_IsConversionOngoing>
 80066ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d17f      	bne.n	80067f4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d17c      	bne.n	80067f4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80066fe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006706:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006708:	4313      	orrs	r3, r2
 800670a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006716:	f023 0302 	bic.w	r3, r3, #2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	69b9      	ldr	r1, [r7, #24]
 8006720:	430b      	orrs	r3, r1
 8006722:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d017      	beq.n	800675c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800673a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006744:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006748:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6911      	ldr	r1, [r2, #16]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	430b      	orrs	r3, r1
 8006756:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800675a:	e013      	b.n	8006784 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800676a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800677c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006780:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800678a:	2b01      	cmp	r3, #1
 800678c:	d12a      	bne.n	80067e4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006798:	f023 0304 	bic.w	r3, r3, #4
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067a4:	4311      	orrs	r1, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80067aa:	4311      	orrs	r1, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067b0:	430a      	orrs	r2, r1
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	611a      	str	r2, [r3, #16]
 80067be:	e019      	b.n	80067f4 <HAL_ADC_Init+0x324>
 80067c0:	20000008 	.word	0x20000008
 80067c4:	053e2d63 	.word	0x053e2d63
 80067c8:	50000100 	.word	0x50000100
 80067cc:	50000400 	.word	0x50000400
 80067d0:	50000500 	.word	0x50000500
 80067d4:	50000600 	.word	0x50000600
 80067d8:	50000300 	.word	0x50000300
 80067dc:	50000700 	.word	0x50000700
 80067e0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d10c      	bne.n	8006816 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f023 010f 	bic.w	r1, r3, #15
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	430a      	orrs	r2, r1
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
 8006814:	e007      	b.n	8006826 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 020f 	bic.w	r2, r2, #15
 8006824:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	65da      	str	r2, [r3, #92]	; 0x5c
 8006836:	e007      	b.n	8006848 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f043 0210 	orr.w	r2, r3, #16
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006848:	7ffb      	ldrb	r3, [r7, #31]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3724      	adds	r7, #36	; 0x24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop

08006854 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006868:	d004      	beq.n	8006874 <HAL_ADC_Start_DMA+0x20>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a5a      	ldr	r2, [pc, #360]	; (80069d8 <HAL_ADC_Start_DMA+0x184>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d101      	bne.n	8006878 <HAL_ADC_Start_DMA+0x24>
 8006874:	4b59      	ldr	r3, [pc, #356]	; (80069dc <HAL_ADC_Start_DMA+0x188>)
 8006876:	e000      	b.n	800687a <HAL_ADC_Start_DMA+0x26>
 8006878:	4b59      	ldr	r3, [pc, #356]	; (80069e0 <HAL_ADC_Start_DMA+0x18c>)
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fd6a 	bl	8006354 <LL_ADC_GetMultimode>
 8006880:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fdfb 	bl	8006482 <LL_ADC_REG_IsConversionOngoing>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 809b 	bne.w	80069ca <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_ADC_Start_DMA+0x4e>
 800689e:	2302      	movs	r3, #2
 80068a0:	e096      	b.n	80069d0 <HAL_ADC_Start_DMA+0x17c>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4d      	ldr	r2, [pc, #308]	; (80069e4 <HAL_ADC_Start_DMA+0x190>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d008      	beq.n	80068c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b05      	cmp	r3, #5
 80068be:	d002      	beq.n	80068c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d17a      	bne.n	80069bc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fcf6 	bl	80072b8 <ADC_Enable>
 80068cc:	4603      	mov	r3, r0
 80068ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d16d      	bne.n	80069b2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a3a      	ldr	r2, [pc, #232]	; (80069d8 <HAL_ADC_Start_DMA+0x184>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d009      	beq.n	8006908 <HAL_ADC_Start_DMA+0xb4>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a3b      	ldr	r2, [pc, #236]	; (80069e8 <HAL_ADC_Start_DMA+0x194>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d002      	beq.n	8006904 <HAL_ADC_Start_DMA+0xb0>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	e003      	b.n	800690c <HAL_ADC_Start_DMA+0xb8>
 8006904:	4b39      	ldr	r3, [pc, #228]	; (80069ec <HAL_ADC_Start_DMA+0x198>)
 8006906:	e001      	b.n	800690c <HAL_ADC_Start_DMA+0xb8>
 8006908:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	4293      	cmp	r3, r2
 8006912:	d002      	beq.n	800691a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d105      	bne.n	8006926 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d006      	beq.n	8006940 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	f023 0206 	bic.w	r2, r3, #6
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	661a      	str	r2, [r3, #96]	; 0x60
 800693e:	e002      	b.n	8006946 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694a:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <HAL_ADC_Start_DMA+0x19c>)
 800694c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	4a28      	ldr	r2, [pc, #160]	; (80069f4 <HAL_ADC_Start_DMA+0x1a0>)
 8006954:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <HAL_ADC_Start_DMA+0x1a4>)
 800695c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	221c      	movs	r2, #28
 8006964:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0210 	orr.w	r2, r2, #16
 800697c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0201 	orr.w	r2, r2, #1
 800698c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3340      	adds	r3, #64	; 0x40
 8006998:	4619      	mov	r1, r3
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f001 f867 	bl	8007a70 <HAL_DMA_Start_IT>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fd55 	bl	800645a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80069b0:	e00d      	b.n	80069ce <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80069ba:	e008      	b.n	80069ce <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80069c8:	e001      	b.n	80069ce <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
 80069cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	50000100 	.word	0x50000100
 80069dc:	50000300 	.word	0x50000300
 80069e0:	50000700 	.word	0x50000700
 80069e4:	50000600 	.word	0x50000600
 80069e8:	50000500 	.word	0x50000500
 80069ec:	50000400 	.word	0x50000400
 80069f0:	0800737d 	.word	0x0800737d
 80069f4:	08007455 	.word	0x08007455
 80069f8:	08007471 	.word	0x08007471

080069fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b0b6      	sub	sp, #216	; 0xd8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d102      	bne.n	8006a5c <HAL_ADC_ConfigChannel+0x24>
 8006a56:	2302      	movs	r3, #2
 8006a58:	f000 bc13 	b.w	8007282 <HAL_ADC_ConfigChannel+0x84a>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff fd0a 	bl	8006482 <LL_ADC_REG_IsConversionOngoing>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f040 83f3 	bne.w	800725c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6859      	ldr	r1, [r3, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f7ff fbe7 	bl	8006256 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fcf8 	bl	8006482 <LL_ADC_REG_IsConversionOngoing>
 8006a92:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7ff fd04 	bl	80064a8 <LL_ADC_INJ_IsConversionOngoing>
 8006aa0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006aa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f040 81d9 	bne.w	8006e60 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 81d4 	bne.w	8006e60 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac0:	d10f      	bne.n	8006ae2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7ff fbee 	bl	80062ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fb95 	bl	800620a <LL_ADC_SetSamplingTimeCommonConfig>
 8006ae0:	e00e      	b.n	8006b00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6819      	ldr	r1, [r3, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7ff fbdd 	bl	80062ae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2100      	movs	r1, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fb85 	bl	800620a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	08db      	lsrs	r3, r3, #3
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	fa02 f303 	lsl.w	r3, r2, r3
 8006b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d022      	beq.n	8006b68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6919      	ldr	r1, [r3, #16]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b32:	f7ff fadf 	bl	80060f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6919      	ldr	r1, [r3, #16]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f7ff fb2b 	bl	800619e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	6919      	ldr	r1, [r3, #16]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	7f1b      	ldrb	r3, [r3, #28]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d102      	bne.n	8006b5e <HAL_ADC_ConfigChannel+0x126>
 8006b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b5c:	e000      	b.n	8006b60 <HAL_ADC_ConfigChannel+0x128>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	461a      	mov	r2, r3
 8006b62:	f7ff fb37 	bl	80061d4 <LL_ADC_SetOffsetSaturation>
 8006b66:	e17b      	b.n	8006e60 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fae4 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <HAL_ADC_ConfigChannel+0x15c>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fad9 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	0e9b      	lsrs	r3, r3, #26
 8006b8e:	f003 021f 	and.w	r2, r3, #31
 8006b92:	e01e      	b.n	8006bd2 <HAL_ADC_ConfigChannel+0x19a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff face 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006baa:	fa93 f3a3 	rbit	r3, r3
 8006bae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006bc2:	2320      	movs	r3, #32
 8006bc4:	e004      	b.n	8006bd0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bca:	fab3 f383 	clz	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d105      	bne.n	8006bea <HAL_ADC_ConfigChannel+0x1b2>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	0e9b      	lsrs	r3, r3, #26
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	e018      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x1e4>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006bf6:	fa93 f3a3 	rbit	r3, r3
 8006bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006c0e:	2320      	movs	r3, #32
 8006c10:	e004      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c16:	fab3 f383 	clz	r3, r3
 8006c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d106      	bne.n	8006c2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2200      	movs	r2, #0
 8006c26:	2100      	movs	r1, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fa9d 	bl	8006168 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2101      	movs	r1, #1
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fa81 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <HAL_ADC_ConfigChannel+0x222>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fa76 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006c50:	4603      	mov	r3, r0
 8006c52:	0e9b      	lsrs	r3, r3, #26
 8006c54:	f003 021f 	and.w	r2, r3, #31
 8006c58:	e01e      	b.n	8006c98 <HAL_ADC_ConfigChannel+0x260>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fa6b 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c70:	fa93 f3a3 	rbit	r3, r3
 8006c74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006c88:	2320      	movs	r3, #32
 8006c8a:	e004      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c90:	fab3 f383 	clz	r3, r3
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x278>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	0e9b      	lsrs	r3, r3, #26
 8006caa:	f003 031f 	and.w	r3, r3, #31
 8006cae:	e018      	b.n	8006ce2 <HAL_ADC_ConfigChannel+0x2aa>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cbc:	fa93 f3a3 	rbit	r3, r3
 8006cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006cc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006cd4:	2320      	movs	r3, #32
 8006cd6:	e004      	b.n	8006ce2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cdc:	fab3 f383 	clz	r3, r3
 8006ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d106      	bne.n	8006cf4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	2101      	movs	r1, #1
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fa3a 	bl	8006168 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2102      	movs	r1, #2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fa1e 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <HAL_ADC_ConfigChannel+0x2e8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2102      	movs	r1, #2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fa13 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006d16:	4603      	mov	r3, r0
 8006d18:	0e9b      	lsrs	r3, r3, #26
 8006d1a:	f003 021f 	and.w	r2, r3, #31
 8006d1e:	e01e      	b.n	8006d5e <HAL_ADC_ConfigChannel+0x326>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2102      	movs	r1, #2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fa08 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d36:	fa93 f3a3 	rbit	r3, r3
 8006d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006d4e:	2320      	movs	r3, #32
 8006d50:	e004      	b.n	8006d5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006d56:	fab3 f383 	clz	r3, r3
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d105      	bne.n	8006d76 <HAL_ADC_ConfigChannel+0x33e>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	0e9b      	lsrs	r3, r3, #26
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	e016      	b.n	8006da4 <HAL_ADC_ConfigChannel+0x36c>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d82:	fa93 f3a3 	rbit	r3, r3
 8006d86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006d88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006d96:	2320      	movs	r3, #32
 8006d98:	e004      	b.n	8006da4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d9e:	fab3 f383 	clz	r3, r3
 8006da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d106      	bne.n	8006db6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2200      	movs	r2, #0
 8006dae:	2102      	movs	r1, #2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff f9d9 	bl	8006168 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2103      	movs	r1, #3
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff f9bd 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <HAL_ADC_ConfigChannel+0x3aa>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2103      	movs	r1, #3
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff f9b2 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	0e9b      	lsrs	r3, r3, #26
 8006ddc:	f003 021f 	and.w	r2, r3, #31
 8006de0:	e017      	b.n	8006e12 <HAL_ADC_ConfigChannel+0x3da>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2103      	movs	r1, #3
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff f9a7 	bl	800613c <LL_ADC_GetOffsetChannel>
 8006dee:	4603      	mov	r3, r0
 8006df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df4:	fa93 f3a3 	rbit	r3, r3
 8006df8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dfc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006e04:	2320      	movs	r3, #32
 8006e06:	e003      	b.n	8006e10 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0a:	fab3 f383 	clz	r3, r3
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d105      	bne.n	8006e2a <HAL_ADC_ConfigChannel+0x3f2>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	0e9b      	lsrs	r3, r3, #26
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	e011      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x416>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e32:	fa93 f3a3 	rbit	r3, r3
 8006e36:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006e42:	2320      	movs	r3, #32
 8006e44:	e003      	b.n	8006e4e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	fab3 f383 	clz	r3, r3
 8006e4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d106      	bne.n	8006e60 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	2103      	movs	r1, #3
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff f984 	bl	8006168 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fae5 	bl	8006434 <LL_ADC_IsEnabled>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f040 813d 	bne.w	80070ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6819      	ldr	r1, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f7ff fa40 	bl	8006304 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	4aa2      	ldr	r2, [pc, #648]	; (8007114 <HAL_ADC_ConfigChannel+0x6dc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	f040 812e 	bne.w	80070ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <HAL_ADC_ConfigChannel+0x480>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	0e9b      	lsrs	r3, r3, #26
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2b09      	cmp	r3, #9
 8006eae:	bf94      	ite	ls
 8006eb0:	2301      	movls	r3, #1
 8006eb2:	2300      	movhi	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	e019      	b.n	8006eec <HAL_ADC_ConfigChannel+0x4b4>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec0:	fa93 f3a3 	rbit	r3, r3
 8006ec4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ec8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006ed0:	2320      	movs	r3, #32
 8006ed2:	e003      	b.n	8006edc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed6:	fab3 f383 	clz	r3, r3
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	3301      	adds	r3, #1
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	2b09      	cmp	r3, #9
 8006ee4:	bf94      	ite	ls
 8006ee6:	2301      	movls	r3, #1
 8006ee8:	2300      	movhi	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d079      	beq.n	8006fe4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d107      	bne.n	8006f0c <HAL_ADC_ConfigChannel+0x4d4>
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	0e9b      	lsrs	r3, r3, #26
 8006f02:	3301      	adds	r3, #1
 8006f04:	069b      	lsls	r3, r3, #26
 8006f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f0a:	e015      	b.n	8006f38 <HAL_ADC_ConfigChannel+0x500>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f14:	fa93 f3a3 	rbit	r3, r3
 8006f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006f24:	2320      	movs	r3, #32
 8006f26:	e003      	b.n	8006f30 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f2a:	fab3 f383 	clz	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	3301      	adds	r3, #1
 8006f32:	069b      	lsls	r3, r3, #26
 8006f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d109      	bne.n	8006f58 <HAL_ADC_ConfigChannel+0x520>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	0e9b      	lsrs	r3, r3, #26
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2101      	movs	r1, #1
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	e017      	b.n	8006f88 <HAL_ADC_ConfigChannel+0x550>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f60:	fa93 f3a3 	rbit	r3, r3
 8006f64:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006f70:	2320      	movs	r3, #32
 8006f72:	e003      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f76:	fab3 f383 	clz	r3, r3
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	2101      	movs	r1, #1
 8006f84:	fa01 f303 	lsl.w	r3, r1, r3
 8006f88:	ea42 0103 	orr.w	r1, r2, r3
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <HAL_ADC_ConfigChannel+0x576>
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	0e9b      	lsrs	r3, r3, #26
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f003 021f 	and.w	r2, r3, #31
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	4413      	add	r3, r2
 8006faa:	051b      	lsls	r3, r3, #20
 8006fac:	e018      	b.n	8006fe0 <HAL_ADC_ConfigChannel+0x5a8>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	fa93 f3a3 	rbit	r3, r3
 8006fba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006fc6:	2320      	movs	r3, #32
 8006fc8:	e003      	b.n	8006fd2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fcc:	fab3 f383 	clz	r3, r3
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f003 021f 	and.w	r2, r3, #31
 8006fd8:	4613      	mov	r3, r2
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	4413      	add	r3, r2
 8006fde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	e07e      	b.n	80070e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d107      	bne.n	8007000 <HAL_ADC_ConfigChannel+0x5c8>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	0e9b      	lsrs	r3, r3, #26
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	069b      	lsls	r3, r3, #26
 8006ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ffe:	e015      	b.n	800702c <HAL_ADC_ConfigChannel+0x5f4>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	fa93 f3a3 	rbit	r3, r3
 800700c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007018:	2320      	movs	r3, #32
 800701a:	e003      	b.n	8007024 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	fab3 f383 	clz	r3, r3
 8007022:	b2db      	uxtb	r3, r3
 8007024:	3301      	adds	r3, #1
 8007026:	069b      	lsls	r3, r3, #26
 8007028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_ADC_ConfigChannel+0x614>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	0e9b      	lsrs	r3, r3, #26
 800703e:	3301      	adds	r3, #1
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	2101      	movs	r1, #1
 8007046:	fa01 f303 	lsl.w	r3, r1, r3
 800704a:	e017      	b.n	800707c <HAL_ADC_ConfigChannel+0x644>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	fa93 f3a3 	rbit	r3, r3
 8007058:	61fb      	str	r3, [r7, #28]
  return result;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007064:	2320      	movs	r3, #32
 8007066:	e003      	b.n	8007070 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	fab3 f383 	clz	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	3301      	adds	r3, #1
 8007072:	f003 031f 	and.w	r3, r3, #31
 8007076:	2101      	movs	r1, #1
 8007078:	fa01 f303 	lsl.w	r3, r1, r3
 800707c:	ea42 0103 	orr.w	r1, r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <HAL_ADC_ConfigChannel+0x670>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	0e9b      	lsrs	r3, r3, #26
 8007092:	3301      	adds	r3, #1
 8007094:	f003 021f 	and.w	r2, r3, #31
 8007098:	4613      	mov	r3, r2
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	4413      	add	r3, r2
 800709e:	3b1e      	subs	r3, #30
 80070a0:	051b      	lsls	r3, r3, #20
 80070a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070a6:	e01b      	b.n	80070e0 <HAL_ADC_ConfigChannel+0x6a8>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	fa93 f3a3 	rbit	r3, r3
 80070b4:	613b      	str	r3, [r7, #16]
  return result;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80070c0:	2320      	movs	r3, #32
 80070c2:	e003      	b.n	80070cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	fab3 f383 	clz	r3, r3
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	3301      	adds	r3, #1
 80070ce:	f003 021f 	and.w	r2, r3, #31
 80070d2:	4613      	mov	r3, r2
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	4413      	add	r3, r2
 80070d8:	3b1e      	subs	r3, #30
 80070da:	051b      	lsls	r3, r3, #20
 80070dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070e0:	430b      	orrs	r3, r1
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	6892      	ldr	r2, [r2, #8]
 80070e6:	4619      	mov	r1, r3
 80070e8:	f7ff f8e1 	bl	80062ae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <HAL_ADC_ConfigChannel+0x6e0>)
 80070f2:	4013      	ands	r3, r2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 80be 	beq.w	8007276 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007102:	d004      	beq.n	800710e <HAL_ADC_ConfigChannel+0x6d6>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <HAL_ADC_ConfigChannel+0x6e4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d10a      	bne.n	8007124 <HAL_ADC_ConfigChannel+0x6ec>
 800710e:	4b04      	ldr	r3, [pc, #16]	; (8007120 <HAL_ADC_ConfigChannel+0x6e8>)
 8007110:	e009      	b.n	8007126 <HAL_ADC_ConfigChannel+0x6ee>
 8007112:	bf00      	nop
 8007114:	407f0000 	.word	0x407f0000
 8007118:	80080000 	.word	0x80080000
 800711c:	50000100 	.word	0x50000100
 8007120:	50000300 	.word	0x50000300
 8007124:	4b59      	ldr	r3, [pc, #356]	; (800728c <HAL_ADC_ConfigChannel+0x854>)
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe ffd6 	bl	80060d8 <LL_ADC_GetCommonPathInternalCh>
 800712c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a56      	ldr	r2, [pc, #344]	; (8007290 <HAL_ADC_ConfigChannel+0x858>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d004      	beq.n	8007144 <HAL_ADC_ConfigChannel+0x70c>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a55      	ldr	r2, [pc, #340]	; (8007294 <HAL_ADC_ConfigChannel+0x85c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d13a      	bne.n	80071ba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d134      	bne.n	80071ba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007158:	d005      	beq.n	8007166 <HAL_ADC_ConfigChannel+0x72e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a4e      	ldr	r2, [pc, #312]	; (8007298 <HAL_ADC_ConfigChannel+0x860>)
 8007160:	4293      	cmp	r3, r2
 8007162:	f040 8085 	bne.w	8007270 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800716e:	d004      	beq.n	800717a <HAL_ADC_ConfigChannel+0x742>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a49      	ldr	r2, [pc, #292]	; (800729c <HAL_ADC_ConfigChannel+0x864>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d101      	bne.n	800717e <HAL_ADC_ConfigChannel+0x746>
 800717a:	4a49      	ldr	r2, [pc, #292]	; (80072a0 <HAL_ADC_ConfigChannel+0x868>)
 800717c:	e000      	b.n	8007180 <HAL_ADC_ConfigChannel+0x748>
 800717e:	4a43      	ldr	r2, [pc, #268]	; (800728c <HAL_ADC_ConfigChannel+0x854>)
 8007180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7fe ff91 	bl	80060b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007190:	4b44      	ldr	r3, [pc, #272]	; (80072a4 <HAL_ADC_ConfigChannel+0x86c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	099b      	lsrs	r3, r3, #6
 8007196:	4a44      	ldr	r2, [pc, #272]	; (80072a8 <HAL_ADC_ConfigChannel+0x870>)
 8007198:	fba2 2303 	umull	r2, r3, r2, r3
 800719c:	099b      	lsrs	r3, r3, #6
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	4613      	mov	r3, r2
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80071aa:	e002      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f9      	bne.n	80071ac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80071b8:	e05a      	b.n	8007270 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a3b      	ldr	r2, [pc, #236]	; (80072ac <HAL_ADC_ConfigChannel+0x874>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d125      	bne.n	8007210 <HAL_ADC_ConfigChannel+0x7d8>
 80071c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11f      	bne.n	8007210 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a31      	ldr	r2, [pc, #196]	; (800729c <HAL_ADC_ConfigChannel+0x864>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d104      	bne.n	80071e4 <HAL_ADC_ConfigChannel+0x7ac>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a34      	ldr	r2, [pc, #208]	; (80072b0 <HAL_ADC_ConfigChannel+0x878>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d047      	beq.n	8007274 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071ec:	d004      	beq.n	80071f8 <HAL_ADC_ConfigChannel+0x7c0>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2a      	ldr	r2, [pc, #168]	; (800729c <HAL_ADC_ConfigChannel+0x864>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d101      	bne.n	80071fc <HAL_ADC_ConfigChannel+0x7c4>
 80071f8:	4a29      	ldr	r2, [pc, #164]	; (80072a0 <HAL_ADC_ConfigChannel+0x868>)
 80071fa:	e000      	b.n	80071fe <HAL_ADC_ConfigChannel+0x7c6>
 80071fc:	4a23      	ldr	r2, [pc, #140]	; (800728c <HAL_ADC_ConfigChannel+0x854>)
 80071fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f7fe ff52 	bl	80060b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800720e:	e031      	b.n	8007274 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a27      	ldr	r2, [pc, #156]	; (80072b4 <HAL_ADC_ConfigChannel+0x87c>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d12d      	bne.n	8007276 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800721a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800721e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d127      	bne.n	8007276 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1c      	ldr	r2, [pc, #112]	; (800729c <HAL_ADC_ConfigChannel+0x864>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d022      	beq.n	8007276 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007238:	d004      	beq.n	8007244 <HAL_ADC_ConfigChannel+0x80c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a17      	ldr	r2, [pc, #92]	; (800729c <HAL_ADC_ConfigChannel+0x864>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d101      	bne.n	8007248 <HAL_ADC_ConfigChannel+0x810>
 8007244:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <HAL_ADC_ConfigChannel+0x868>)
 8007246:	e000      	b.n	800724a <HAL_ADC_ConfigChannel+0x812>
 8007248:	4a10      	ldr	r2, [pc, #64]	; (800728c <HAL_ADC_ConfigChannel+0x854>)
 800724a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800724e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007252:	4619      	mov	r1, r3
 8007254:	4610      	mov	r0, r2
 8007256:	f7fe ff2c 	bl	80060b2 <LL_ADC_SetCommonPathInternalCh>
 800725a:	e00c      	b.n	8007276 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007260:	f043 0220 	orr.w	r2, r3, #32
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800726e:	e002      	b.n	8007276 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007274:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800727e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007282:	4618      	mov	r0, r3
 8007284:	37d8      	adds	r7, #216	; 0xd8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	50000700 	.word	0x50000700
 8007290:	c3210000 	.word	0xc3210000
 8007294:	90c00010 	.word	0x90c00010
 8007298:	50000600 	.word	0x50000600
 800729c:	50000100 	.word	0x50000100
 80072a0:	50000300 	.word	0x50000300
 80072a4:	20000008 	.word	0x20000008
 80072a8:	053e2d63 	.word	0x053e2d63
 80072ac:	c7520000 	.word	0xc7520000
 80072b0:	50000500 	.word	0x50000500
 80072b4:	cb840000 	.word	0xcb840000

080072b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff f8b5 	bl	8006434 <LL_ADC_IsEnabled>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d14d      	bne.n	800736c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	4b28      	ldr	r3, [pc, #160]	; (8007378 <ADC_Enable+0xc0>)
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e2:	f043 0210 	orr.w	r2, r3, #16
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ee:	f043 0201 	orr.w	r2, r3, #1
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e039      	b.n	800736e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff f884 	bl	800640c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007304:	f7fb fe02 	bl	8002f0c <HAL_GetTick>
 8007308:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800730a:	e028      	b.n	800735e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff f88f 	bl	8006434 <LL_ADC_IsEnabled>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d104      	bne.n	8007326 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff f873 	bl	800640c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007326:	f7fb fdf1 	bl	8002f0c <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d914      	bls.n	800735e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b01      	cmp	r3, #1
 8007340:	d00d      	beq.n	800735e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007346:	f043 0210 	orr.w	r2, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007352:	f043 0201 	orr.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e007      	b.n	800736e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b01      	cmp	r3, #1
 800736a:	d1cf      	bne.n	800730c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	8000003f 	.word	0x8000003f

0800737c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007392:	2b00      	cmp	r3, #0
 8007394:	d14b      	bne.n	800742e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d021      	beq.n	80073f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe ff3b 	bl	8006230 <LL_ADC_REG_IsTriggerSourceSWStart>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d032      	beq.n	8007426 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d12b      	bne.n	8007426 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d11f      	bne.n	8007426 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	f043 0201 	orr.w	r2, r3, #1
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80073f2:	e018      	b.n	8007426 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d111      	bne.n	8007426 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fae8 	bl	80069fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800742c:	e00e      	b.n	800744c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7ff faf2 	bl	8006a24 <HAL_ADC_ErrorCallback>
}
 8007440:	e004      	b.n	800744c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
}
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff fad4 	bl	8006a10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800748e:	f043 0204 	orr.w	r2, r3, #4
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff fac4 	bl	8006a24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <LL_ADC_IsEnabled>:
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <LL_ADC_IsEnabled+0x18>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <LL_ADC_IsEnabled+0x1a>
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <LL_ADC_REG_IsConversionOngoing>:
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d101      	bne.n	80074e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b0a1      	sub	sp, #132	; 0x84
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800750a:	2302      	movs	r3, #2
 800750c:	e0e7      	b.n	80076de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8007516:	2300      	movs	r3, #0
 8007518:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800751a:	2300      	movs	r3, #0
 800751c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007526:	d102      	bne.n	800752e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007528:	4b6f      	ldr	r3, [pc, #444]	; (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800752a:	60bb      	str	r3, [r7, #8]
 800752c:	e009      	b.n	8007542 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a6e      	ldr	r2, [pc, #440]	; (80076ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d102      	bne.n	800753e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007538:	4b6d      	ldr	r3, [pc, #436]	; (80076f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800753a:	60bb      	str	r3, [r7, #8]
 800753c:	e001      	b.n	8007542 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754c:	f043 0220 	orr.w	r2, r3, #32
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e0be      	b.n	80076de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff ffb1 	bl	80074ca <LL_ADC_REG_IsConversionOngoing>
 8007568:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff ffab 	bl	80074ca <LL_ADC_REG_IsConversionOngoing>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 80a0 	bne.w	80076bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800757c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800757e:	2b00      	cmp	r3, #0
 8007580:	f040 809c 	bne.w	80076bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800758c:	d004      	beq.n	8007598 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a55      	ldr	r2, [pc, #340]	; (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d101      	bne.n	800759c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007598:	4b56      	ldr	r3, [pc, #344]	; (80076f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800759a:	e000      	b.n	800759e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800759c:	4b56      	ldr	r3, [pc, #344]	; (80076f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800759e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d04b      	beq.n	8007640 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80075a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6859      	ldr	r1, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075ba:	035b      	lsls	r3, r3, #13
 80075bc:	430b      	orrs	r3, r1
 80075be:	431a      	orrs	r2, r3
 80075c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075cc:	d004      	beq.n	80075d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a45      	ldr	r2, [pc, #276]	; (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10f      	bne.n	80075f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80075d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80075dc:	f7ff ff62 	bl	80074a4 <LL_ADC_IsEnabled>
 80075e0:	4604      	mov	r4, r0
 80075e2:	4841      	ldr	r0, [pc, #260]	; (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80075e4:	f7ff ff5e 	bl	80074a4 <LL_ADC_IsEnabled>
 80075e8:	4603      	mov	r3, r0
 80075ea:	4323      	orrs	r3, r4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	bf0c      	ite	eq
 80075f0:	2301      	moveq	r3, #1
 80075f2:	2300      	movne	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	e012      	b.n	800761e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80075f8:	483c      	ldr	r0, [pc, #240]	; (80076ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80075fa:	f7ff ff53 	bl	80074a4 <LL_ADC_IsEnabled>
 80075fe:	4604      	mov	r4, r0
 8007600:	483b      	ldr	r0, [pc, #236]	; (80076f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007602:	f7ff ff4f 	bl	80074a4 <LL_ADC_IsEnabled>
 8007606:	4603      	mov	r3, r0
 8007608:	431c      	orrs	r4, r3
 800760a:	483c      	ldr	r0, [pc, #240]	; (80076fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800760c:	f7ff ff4a 	bl	80074a4 <LL_ADC_IsEnabled>
 8007610:	4603      	mov	r3, r0
 8007612:	4323      	orrs	r3, r4
 8007614:	2b00      	cmp	r3, #0
 8007616:	bf0c      	ite	eq
 8007618:	2301      	moveq	r3, #1
 800761a:	2300      	movne	r3, #0
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d056      	beq.n	80076d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800762a:	f023 030f 	bic.w	r3, r3, #15
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	6892      	ldr	r2, [r2, #8]
 8007636:	430a      	orrs	r2, r1
 8007638:	431a      	orrs	r2, r3
 800763a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800763e:	e047      	b.n	80076d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800764a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007654:	d004      	beq.n	8007660 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d10f      	bne.n	8007680 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007660:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007664:	f7ff ff1e 	bl	80074a4 <LL_ADC_IsEnabled>
 8007668:	4604      	mov	r4, r0
 800766a:	481f      	ldr	r0, [pc, #124]	; (80076e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800766c:	f7ff ff1a 	bl	80074a4 <LL_ADC_IsEnabled>
 8007670:	4603      	mov	r3, r0
 8007672:	4323      	orrs	r3, r4
 8007674:	2b00      	cmp	r3, #0
 8007676:	bf0c      	ite	eq
 8007678:	2301      	moveq	r3, #1
 800767a:	2300      	movne	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	e012      	b.n	80076a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007680:	481a      	ldr	r0, [pc, #104]	; (80076ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007682:	f7ff ff0f 	bl	80074a4 <LL_ADC_IsEnabled>
 8007686:	4604      	mov	r4, r0
 8007688:	4819      	ldr	r0, [pc, #100]	; (80076f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800768a:	f7ff ff0b 	bl	80074a4 <LL_ADC_IsEnabled>
 800768e:	4603      	mov	r3, r0
 8007690:	431c      	orrs	r4, r3
 8007692:	481a      	ldr	r0, [pc, #104]	; (80076fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007694:	f7ff ff06 	bl	80074a4 <LL_ADC_IsEnabled>
 8007698:	4603      	mov	r3, r0
 800769a:	4323      	orrs	r3, r4
 800769c:	2b00      	cmp	r3, #0
 800769e:	bf0c      	ite	eq
 80076a0:	2301      	moveq	r3, #1
 80076a2:	2300      	movne	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d012      	beq.n	80076d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80076aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80076b2:	f023 030f 	bic.w	r3, r3, #15
 80076b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80076b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076ba:	e009      	b.n	80076d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c0:	f043 0220 	orr.w	r2, r3, #32
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80076ce:	e000      	b.n	80076d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80076d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80076da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3784      	adds	r7, #132	; 0x84
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd90      	pop	{r4, r7, pc}
 80076e6:	bf00      	nop
 80076e8:	50000100 	.word	0x50000100
 80076ec:	50000400 	.word	0x50000400
 80076f0:	50000500 	.word	0x50000500
 80076f4:	50000300 	.word	0x50000300
 80076f8:	50000700 	.word	0x50000700
 80076fc:	50000600 	.word	0x50000600

08007700 <__NVIC_SetPriorityGrouping>:
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <__NVIC_SetPriorityGrouping+0x44>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800771c:	4013      	ands	r3, r2
 800771e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800772c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <__NVIC_SetPriorityGrouping+0x44>)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	60d3      	str	r3, [r2, #12]
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	e000ed00 	.word	0xe000ed00

08007748 <__NVIC_GetPriorityGrouping>:
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <__NVIC_GetPriorityGrouping+0x18>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	f003 0307 	and.w	r3, r3, #7
}
 8007756:	4618      	mov	r0, r3
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	e000ed00 	.word	0xe000ed00

08007764 <__NVIC_EnableIRQ>:
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800776e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007772:	2b00      	cmp	r3, #0
 8007774:	db0b      	blt.n	800778e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	f003 021f 	and.w	r2, r3, #31
 800777c:	4907      	ldr	r1, [pc, #28]	; (800779c <__NVIC_EnableIRQ+0x38>)
 800777e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	2001      	movs	r0, #1
 8007786:	fa00 f202 	lsl.w	r2, r0, r2
 800778a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	e000e100 	.word	0xe000e100

080077a0 <__NVIC_SetPriority>:
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	db0a      	blt.n	80077ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	490c      	ldr	r1, [pc, #48]	; (80077ec <__NVIC_SetPriority+0x4c>)
 80077ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077be:	0112      	lsls	r2, r2, #4
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	440b      	add	r3, r1
 80077c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80077c8:	e00a      	b.n	80077e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	4908      	ldr	r1, [pc, #32]	; (80077f0 <__NVIC_SetPriority+0x50>)
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	3b04      	subs	r3, #4
 80077d8:	0112      	lsls	r2, r2, #4
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	440b      	add	r3, r1
 80077de:	761a      	strb	r2, [r3, #24]
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	e000e100 	.word	0xe000e100
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <NVIC_EncodePriority>:
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	; 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	f1c3 0307 	rsb	r3, r3, #7
 800780e:	2b04      	cmp	r3, #4
 8007810:	bf28      	it	cs
 8007812:	2304      	movcs	r3, #4
 8007814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	3304      	adds	r3, #4
 800781a:	2b06      	cmp	r3, #6
 800781c:	d902      	bls.n	8007824 <NVIC_EncodePriority+0x30>
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	3b03      	subs	r3, #3
 8007822:	e000      	b.n	8007826 <NVIC_EncodePriority+0x32>
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007828:	f04f 32ff 	mov.w	r2, #4294967295
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	43da      	mvns	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	401a      	ands	r2, r3
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800783c:	f04f 31ff 	mov.w	r1, #4294967295
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	43d9      	mvns	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800784c:	4313      	orrs	r3, r2
}
 800784e:	4618      	mov	r0, r3
 8007850:	3724      	adds	r7, #36	; 0x24
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3b01      	subs	r3, #1
 8007868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800786c:	d301      	bcc.n	8007872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800786e:	2301      	movs	r3, #1
 8007870:	e00f      	b.n	8007892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007872:	4a0a      	ldr	r2, [pc, #40]	; (800789c <SysTick_Config+0x40>)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3b01      	subs	r3, #1
 8007878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800787a:	210f      	movs	r1, #15
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	f7ff ff8e 	bl	80077a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <SysTick_Config+0x40>)
 8007886:	2200      	movs	r2, #0
 8007888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800788a:	4b04      	ldr	r3, [pc, #16]	; (800789c <SysTick_Config+0x40>)
 800788c:	2207      	movs	r2, #7
 800788e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	e000e010 	.word	0xe000e010

080078a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ff29 	bl	8007700 <__NVIC_SetPriorityGrouping>
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	4603      	mov	r3, r0
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
 80078c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80078c4:	f7ff ff40 	bl	8007748 <__NVIC_GetPriorityGrouping>
 80078c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	68b9      	ldr	r1, [r7, #8]
 80078ce:	6978      	ldr	r0, [r7, #20]
 80078d0:	f7ff ff90 	bl	80077f4 <NVIC_EncodePriority>
 80078d4:	4602      	mov	r2, r0
 80078d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078da:	4611      	mov	r1, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff ff5f 	bl	80077a0 <__NVIC_SetPriority>
}
 80078e2:	bf00      	nop
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	4603      	mov	r3, r0
 80078f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80078f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7ff ff33 	bl	8007764 <__NVIC_EnableIRQ>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7ff ffa4 	bl	800785c <SysTick_Config>
 8007914:	4603      	mov	r3, r0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e08d      	b.n	8007a4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <HAL_DMA_Init+0x138>)
 800793a:	429a      	cmp	r2, r3
 800793c:	d80f      	bhi.n	800795e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	4b45      	ldr	r3, [pc, #276]	; (8007a5c <HAL_DMA_Init+0x13c>)
 8007946:	4413      	add	r3, r2
 8007948:	4a45      	ldr	r2, [pc, #276]	; (8007a60 <HAL_DMA_Init+0x140>)
 800794a:	fba2 2303 	umull	r2, r3, r2, r3
 800794e:	091b      	lsrs	r3, r3, #4
 8007950:	009a      	lsls	r2, r3, #2
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a42      	ldr	r2, [pc, #264]	; (8007a64 <HAL_DMA_Init+0x144>)
 800795a:	641a      	str	r2, [r3, #64]	; 0x40
 800795c:	e00e      	b.n	800797c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	461a      	mov	r2, r3
 8007964:	4b40      	ldr	r3, [pc, #256]	; (8007a68 <HAL_DMA_Init+0x148>)
 8007966:	4413      	add	r3, r2
 8007968:	4a3d      	ldr	r2, [pc, #244]	; (8007a60 <HAL_DMA_Init+0x140>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	091b      	lsrs	r3, r3, #4
 8007970:	009a      	lsls	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a3c      	ldr	r2, [pc, #240]	; (8007a6c <HAL_DMA_Init+0x14c>)
 800797a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80079a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa76 	bl	8007ec0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079dc:	d102      	bne.n	80079e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d010      	beq.n	8007a24 <HAL_DMA_Init+0x104>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d80c      	bhi.n	8007a24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa96 	bl	8007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007a20:	605a      	str	r2, [r3, #4]
 8007a22:	e008      	b.n	8007a36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40020407 	.word	0x40020407
 8007a5c:	bffdfff8 	.word	0xbffdfff8
 8007a60:	cccccccd 	.word	0xcccccccd
 8007a64:	40020000 	.word	0x40020000
 8007a68:	bffdfbf8 	.word	0xbffdfbf8
 8007a6c:	40020400 	.word	0x40020400

08007a70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d101      	bne.n	8007a90 <HAL_DMA_Start_IT+0x20>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e066      	b.n	8007b5e <HAL_DMA_Start_IT+0xee>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d155      	bne.n	8007b50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f9bb 	bl	8007e44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d008      	beq.n	8007ae8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f042 020e 	orr.w	r2, r2, #14
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e00f      	b.n	8007b08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0204 	bic.w	r2, r2, #4
 8007af6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 020a 	orr.w	r2, r2, #10
 8007b06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	e005      	b.n	8007b5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d005      	beq.n	8007b8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2204      	movs	r2, #4
 8007b82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	e037      	b.n	8007bfa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 020e 	bic.w	r2, r2, #14
 8007b98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ba8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	f003 021f 	and.w	r2, r3, #31
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8007bcc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007bd6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00c      	beq.n	8007bfa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007bf8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d00d      	beq.n	8007c4c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2204      	movs	r2, #4
 8007c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	73fb      	strb	r3, [r7, #15]
 8007c4a:	e047      	b.n	8007cdc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 020e 	bic.w	r2, r2, #14
 8007c5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0201 	bic.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c80:	f003 021f 	and.w	r2, r3, #31
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c88:	2101      	movs	r1, #1
 8007c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8007c8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00c      	beq.n	8007cbc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007cba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4798      	blx	r3
    }
  }
  return status;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	f003 031f 	and.w	r3, r3, #31
 8007d06:	2204      	movs	r2, #4
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d026      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x7a>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d021      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d107      	bne.n	8007d3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0204 	bic.w	r2, r2, #4
 8007d38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3e:	f003 021f 	and.w	r2, r3, #31
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	2104      	movs	r1, #4
 8007d48:	fa01 f202 	lsl.w	r2, r1, r2
 8007d4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d071      	beq.n	8007e3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007d5e:	e06c      	b.n	8007e3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	2202      	movs	r2, #2
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d02e      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f003 0302 	and.w	r3, r3, #2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d029      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0320 	and.w	r3, r3, #32
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10b      	bne.n	8007da4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 020a 	bic.w	r2, r2, #10
 8007d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da8:	f003 021f 	and.w	r2, r3, #31
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	2102      	movs	r1, #2
 8007db2:	fa01 f202 	lsl.w	r2, r1, r2
 8007db6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d038      	beq.n	8007e3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007dd0:	e033      	b.n	8007e3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	2208      	movs	r2, #8
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4013      	ands	r3, r2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d02a      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d025      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f022 020e 	bic.w	r2, r2, #14
 8007dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e04:	f003 021f 	and.w	r2, r3, #31
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d004      	beq.n	8007e3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
}
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d004      	beq.n	8007e6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	f003 021f 	and.w	r2, r3, #31
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d108      	bne.n	8007ea4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007ea2:	e007      	b.n	8007eb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	60da      	str	r2, [r3, #12]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d802      	bhi.n	8007eda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007ed4:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e001      	b.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007edc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	3b08      	subs	r3, #8
 8007eea:	4a12      	ldr	r2, [pc, #72]	; (8007f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007eec:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef0:	091b      	lsrs	r3, r3, #4
 8007ef2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef8:	089b      	lsrs	r3, r3, #2
 8007efa:	009a      	lsls	r2, r3, #2
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	4413      	add	r3, r2
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a0b      	ldr	r2, [pc, #44]	; (8007f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007f0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	2201      	movs	r2, #1
 8007f14:	409a      	lsls	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40020407 	.word	0x40020407
 8007f2c:	40020800 	.word	0x40020800
 8007f30:	40020820 	.word	0x40020820
 8007f34:	cccccccd 	.word	0xcccccccd
 8007f38:	40020880 	.word	0x40020880

08007f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	461a      	mov	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a08      	ldr	r2, [pc, #32]	; (8007f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007f5e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	2201      	movs	r2, #1
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	1000823f 	.word	0x1000823f
 8007f80:	40020940 	.word	0x40020940

08007f84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e147      	b.n	8008226 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7f9 fdfc 	bl	8001ba8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0210 	bic.w	r2, r2, #16
 8007fbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fc0:	f7fa ffa4 	bl	8002f0c <HAL_GetTick>
 8007fc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007fc6:	e012      	b.n	8007fee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007fc8:	f7fa ffa0 	bl	8002f0c <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b0a      	cmp	r3, #10
 8007fd4:	d90b      	bls.n	8007fee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fda:	f043 0201 	orr.w	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e11b      	b.n	8008226 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 0308 	and.w	r3, r3, #8
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d0e5      	beq.n	8007fc8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699a      	ldr	r2, [r3, #24]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800800c:	f7fa ff7e 	bl	8002f0c <HAL_GetTick>
 8008010:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008012:	e012      	b.n	800803a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008014:	f7fa ff7a 	bl	8002f0c <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b0a      	cmp	r3, #10
 8008020:	d90b      	bls.n	800803a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008026:	f043 0201 	orr.w	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2203      	movs	r2, #3
 8008032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e0f5      	b.n	8008226 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0e5      	beq.n	8008014 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699a      	ldr	r2, [r3, #24]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0202 	orr.w	r2, r2, #2
 8008056:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a74      	ldr	r2, [pc, #464]	; (8008230 <HAL_FDCAN_Init+0x2ac>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d103      	bne.n	800806a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8008062:	4a74      	ldr	r2, [pc, #464]	; (8008234 <HAL_FDCAN_Init+0x2b0>)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7c1b      	ldrb	r3, [r3, #16]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d108      	bne.n	8008084 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	699a      	ldr	r2, [r3, #24]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008080:	619a      	str	r2, [r3, #24]
 8008082:	e007      	b.n	8008094 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699a      	ldr	r2, [r3, #24]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008092:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	7c5b      	ldrb	r3, [r3, #17]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d108      	bne.n	80080ae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080aa:	619a      	str	r2, [r3, #24]
 80080ac:	e007      	b.n	80080be <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7c9b      	ldrb	r3, [r3, #18]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d108      	bne.n	80080d8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	699a      	ldr	r2, [r3, #24]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080d4:	619a      	str	r2, [r3, #24]
 80080d6:	e007      	b.n	80080e8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080e6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	699a      	ldr	r2, [r3, #24]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800810c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0210 	bic.w	r2, r2, #16
 800811c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d108      	bne.n	8008138 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0204 	orr.w	r2, r2, #4
 8008134:	619a      	str	r2, [r3, #24]
 8008136:	e02c      	b.n	8008192 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d028      	beq.n	8008192 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d01c      	beq.n	8008182 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008156:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0210 	orr.w	r2, r2, #16
 8008166:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b03      	cmp	r3, #3
 800816e:	d110      	bne.n	8008192 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0220 	orr.w	r2, r2, #32
 800817e:	619a      	str	r2, [r3, #24]
 8008180:	e007      	b.n	8008192 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699a      	ldr	r2, [r3, #24]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f042 0220 	orr.w	r2, r2, #32
 8008190:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	3b01      	subs	r3, #1
 8008198:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	3b01      	subs	r3, #1
 80081a0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80081a2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80081aa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80081ba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80081bc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081c6:	d115      	bne.n	80081f4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081cc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	3b01      	subs	r3, #1
 80081d4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80081d6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	3b01      	subs	r3, #1
 80081de:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80081e0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	3b01      	subs	r3, #1
 80081ea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80081f0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80081f2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	430a      	orrs	r2, r1
 8008206:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc4e 	bl	8008aac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	40006400 	.word	0x40006400
 8008234:	40006500 	.word	0x40006500

08008238 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008248:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800824a:	7dfb      	ldrb	r3, [r7, #23]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d002      	beq.n	8008256 <HAL_FDCAN_ConfigFilter+0x1e>
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d13d      	bne.n	80082d2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d119      	bne.n	8008292 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800826a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008272:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	e01d      	b.n	80082ce <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	075a      	lsls	r2, r3, #29
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	079a      	lsls	r2, r3, #30
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	3304      	adds	r3, #4
 80082c6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e006      	b.n	80082e0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d6:	f043 0202 	orr.w	r2, r3, #2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
  }
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d110      	bne.n	8008322 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0201 	bic.w	r2, r2, #1
 8008316:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	e006      	b.n	8008330 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008326:	f043 0204 	orr.w	r2, r3, #4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d12c      	bne.n	80083ae <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800835c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008368:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e023      	b.n	80083bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fbfa 	bl	8008b84 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2101      	movs	r1, #1
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	fa01 f202 	lsl.w	r2, r1, r2
 800839c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80083a0:	2201      	movs	r2, #1
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	409a      	lsls	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e006      	b.n	80083bc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b2:	f043 0208 	orr.w	r2, r3, #8
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
  }
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b08b      	sub	sp, #44	; 0x2c
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083d8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80083da:	7efb      	ldrb	r3, [r7, #27]
 80083dc:	2b02      	cmp	r3, #2
 80083de:	f040 80bc 	bne.w	800855a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b40      	cmp	r3, #64	; 0x40
 80083e6:	d121      	bne.n	800842c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d107      	bne.n	8008408 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e0af      	b.n	8008568 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008410:	0a1b      	lsrs	r3, r3, #8
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800841c:	69fa      	ldr	r2, [r7, #28]
 800841e:	4613      	mov	r3, r2
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4413      	add	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	440b      	add	r3, r1
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
 800842a:	e020      	b.n	800846e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008434:	f003 030f 	and.w	r3, r3, #15
 8008438:	2b00      	cmp	r3, #0
 800843a:	d107      	bne.n	800844c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008440:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e08d      	b.n	8008568 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008454:	0a1b      	lsrs	r3, r3, #8
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008460:	69fa      	ldr	r2, [r7, #28]
 8008462:	4613      	mov	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	4413      	add	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	440b      	add	r3, r1
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d107      	bne.n	8008492 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	0c9b      	lsrs	r3, r3, #18
 8008488:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	601a      	str	r2, [r3, #0]
 8008490:	e005      	b.n	800849e <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	3304      	adds	r3, #4
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	0e1b      	lsrs	r3, r3, #24
 80084f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	0fda      	lsrs	r2, r3, #31
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	3304      	adds	r3, #4
 8008506:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800850c:	2300      	movs	r3, #0
 800850e:	623b      	str	r3, [r7, #32]
 8008510:	e00a      	b.n	8008528 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	441a      	add	r2, r3
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	440b      	add	r3, r1
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	3301      	adds	r3, #1
 8008526:	623b      	str	r3, [r7, #32]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	0c1b      	lsrs	r3, r3, #16
 800852e:	4a11      	ldr	r2, [pc, #68]	; (8008574 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8008530:	5cd3      	ldrb	r3, [r2, r3]
 8008532:	461a      	mov	r2, r3
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	4293      	cmp	r3, r2
 8008538:	d3eb      	bcc.n	8008512 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b40      	cmp	r3, #64	; 0x40
 800853e:	d105      	bne.n	800854c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800854a:	e004      	b.n	8008556 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	e006      	b.n	8008568 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855e:	f043 0208 	orr.w	r2, r3, #8
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
  }
}
 8008568:	4618      	mov	r0, r3
 800856a:	372c      	adds	r7, #44	; 0x2c
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	080115c8 	.word	0x080115c8

08008578 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800858e:	68fb      	ldr	r3, [r7, #12]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085ae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d003      	beq.n	80085be <HAL_FDCAN_ActivateNotification+0x22>
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	f040 80c8 	bne.w	800874e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d03b      	beq.n	8008652 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d004      	beq.n	80085ee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d031      	beq.n	8008652 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d027      	beq.n	8008652 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d01d      	beq.n	8008652 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800861c:	2b00      	cmp	r3, #0
 800861e:	d004      	beq.n	800862a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b00      	cmp	r3, #0
 8008628:	d013      	beq.n	8008652 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00c      	beq.n	8008662 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d107      	bne.n	8008662 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f003 0307 	and.w	r3, r3, #7
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d13b      	bne.n	80086ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d131      	bne.n	80086ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d127      	bne.n	80086ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d004      	beq.n	80086b2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d11d      	bne.n	80086ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f003 0310 	and.w	r3, r3, #16
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d113      	bne.n	80086ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00c      	beq.n	80086fe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d007      	beq.n	80086fe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f042 0202 	orr.w	r2, r2, #2
 80086fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	430a      	orrs	r2, r1
 8008718:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	430a      	orrs	r2, r1
 8008736:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	430a      	orrs	r2, r1
 8008748:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	e006      	b.n	800875c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008752:	f043 0202 	orr.w	r2, r3, #2
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
  }
}
 800875c:	4618      	mov	r0, r3
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008776:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	4013      	ands	r3, r2
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	4013      	ands	r3, r2
 800879e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087aa:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	4013      	ands	r3, r2
 80087b6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087be:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80087c2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	4013      	ands	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80087da:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4013      	ands	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d006      	beq.n	8008812 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2240      	movs	r2, #64	; 0x40
 800880a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f92e 	bl	8008a6e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01b      	beq.n	8008858 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882a:	2b00      	cmp	r3, #0
 800882c:	d014      	beq.n	8008858 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008836:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4013      	ands	r3, r2
 8008844:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800884e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008850:	6939      	ldr	r1, [r7, #16]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f8ec 	bl	8008a30 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008864:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008866:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f8b6 	bl	80089da <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a3a      	ldr	r2, [r7, #32]
 800887a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800887c:	6a39      	ldr	r1, [r7, #32]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fb f96e 	bl	8003b60 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8008892:	69f9      	ldr	r1, [r7, #28]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f8ab 	bl	80089f0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00e      	beq.n	80088c6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d007      	beq.n	80088c6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f8a0 	bl	8008a06 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01a      	beq.n	800890a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d013      	beq.n	800890a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80088ea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4013      	ands	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2280      	movs	r2, #128	; 0x80
 8008900:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f888 	bl	8008a1a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00e      	beq.n	8008936 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800892e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f888 	bl	8008a46 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800893c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00e      	beq.n	8008962 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d007      	beq.n	8008962 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800895a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f87c 	bl	8008a5a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d011      	beq.n	8008994 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008986:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d007      	beq.n	80089aa <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80089a2:	6979      	ldr	r1, [r7, #20]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f876 	bl	8008a96 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d009      	beq.n	80089c4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f858 	bl	8008a82 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80089d2:	bf00      	nop
 80089d4:	3728      	adds	r7, #40	; 0x28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80089fa:	bf00      	nop
 80089fc:	370c      	adds	r7, #12
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008a3a:	bf00      	nop
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008ab4:	4b30      	ldr	r3, [pc, #192]	; (8008b78 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8008ab6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a2f      	ldr	r2, [pc, #188]	; (8008b7c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d103      	bne.n	8008aca <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ac8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a2c      	ldr	r2, [pc, #176]	; (8008b80 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d103      	bne.n	8008adc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8008ada:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	041a      	lsls	r2, r3, #16
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b10:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	061a      	lsls	r2, r3, #24
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e005      	b.n	8008b5e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d3f3      	bcc.n	8008b52 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	4000a400 	.word	0x4000a400
 8008b7c:	40006800 	.word	0x40006800
 8008b80:	40006c00 	.word	0x40006c00

08008b84 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b089      	sub	sp, #36	; 0x24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008ba2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008baa:	4313      	orrs	r3, r2
 8008bac:	61fb      	str	r3, [r7, #28]
 8008bae:	e00a      	b.n	8008bc6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008bb8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008bbe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bc4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008bd0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008bd6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008bdc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008be2:	4313      	orrs	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	4613      	mov	r3, r2
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	440b      	add	r3, r1
 8008bf6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	3304      	adds	r3, #4
 8008c02:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e020      	b.n	8008c58 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	3303      	adds	r3, #3
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	3302      	adds	r3, #2
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	440b      	add	r3, r1
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008c2e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	3301      	adds	r3, #1
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	440b      	add	r3, r1
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008c3c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	440a      	add	r2, r1
 8008c44:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008c46:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	3304      	adds	r3, #4
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	4a06      	ldr	r2, [pc, #24]	; (8008c78 <FDCAN_CopyMessageToRAM+0xf4>)
 8008c60:	5cd3      	ldrb	r3, [r2, r3]
 8008c62:	461a      	mov	r2, r3
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d3d5      	bcc.n	8008c16 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	3724      	adds	r7, #36	; 0x24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	080115c8 	.word	0x080115c8

08008c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008c8a:	e15a      	b.n	8008f42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	2101      	movs	r1, #1
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	fa01 f303 	lsl.w	r3, r1, r3
 8008c98:	4013      	ands	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 814c 	beq.w	8008f3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d005      	beq.n	8008cbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d130      	bne.n	8008d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	091b      	lsrs	r3, r3, #4
 8008d08:	f003 0201 	and.w	r2, r3, #1
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d017      	beq.n	8008d5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	2203      	movs	r2, #3
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d123      	bne.n	8008dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	08da      	lsrs	r2, r3, #3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3208      	adds	r2, #8
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	220f      	movs	r2, #15
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43db      	mvns	r3, r3
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	4013      	ands	r3, r2
 8008d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	08da      	lsrs	r2, r3, #3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	3208      	adds	r2, #8
 8008da8:	6939      	ldr	r1, [r7, #16]
 8008daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	2203      	movs	r2, #3
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f003 0203 	and.w	r2, r3, #3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80a6 	beq.w	8008f3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008df0:	4b5b      	ldr	r3, [pc, #364]	; (8008f60 <HAL_GPIO_Init+0x2e4>)
 8008df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df4:	4a5a      	ldr	r2, [pc, #360]	; (8008f60 <HAL_GPIO_Init+0x2e4>)
 8008df6:	f043 0301 	orr.w	r3, r3, #1
 8008dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8008dfc:	4b58      	ldr	r3, [pc, #352]	; (8008f60 <HAL_GPIO_Init+0x2e4>)
 8008dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e08:	4a56      	ldr	r2, [pc, #344]	; (8008f64 <HAL_GPIO_Init+0x2e8>)
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	089b      	lsrs	r3, r3, #2
 8008e0e:	3302      	adds	r3, #2
 8008e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	220f      	movs	r2, #15
 8008e20:	fa02 f303 	lsl.w	r3, r2, r3
 8008e24:	43db      	mvns	r3, r3
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008e32:	d01f      	beq.n	8008e74 <HAL_GPIO_Init+0x1f8>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a4c      	ldr	r2, [pc, #304]	; (8008f68 <HAL_GPIO_Init+0x2ec>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d019      	beq.n	8008e70 <HAL_GPIO_Init+0x1f4>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a4b      	ldr	r2, [pc, #300]	; (8008f6c <HAL_GPIO_Init+0x2f0>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <HAL_GPIO_Init+0x1f0>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a4a      	ldr	r2, [pc, #296]	; (8008f70 <HAL_GPIO_Init+0x2f4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00d      	beq.n	8008e68 <HAL_GPIO_Init+0x1ec>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a49      	ldr	r2, [pc, #292]	; (8008f74 <HAL_GPIO_Init+0x2f8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <HAL_GPIO_Init+0x1e8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a48      	ldr	r2, [pc, #288]	; (8008f78 <HAL_GPIO_Init+0x2fc>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d101      	bne.n	8008e60 <HAL_GPIO_Init+0x1e4>
 8008e5c:	2305      	movs	r3, #5
 8008e5e:	e00a      	b.n	8008e76 <HAL_GPIO_Init+0x1fa>
 8008e60:	2306      	movs	r3, #6
 8008e62:	e008      	b.n	8008e76 <HAL_GPIO_Init+0x1fa>
 8008e64:	2304      	movs	r3, #4
 8008e66:	e006      	b.n	8008e76 <HAL_GPIO_Init+0x1fa>
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e004      	b.n	8008e76 <HAL_GPIO_Init+0x1fa>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e002      	b.n	8008e76 <HAL_GPIO_Init+0x1fa>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <HAL_GPIO_Init+0x1fa>
 8008e74:	2300      	movs	r3, #0
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	f002 0203 	and.w	r2, r2, #3
 8008e7c:	0092      	lsls	r2, r2, #2
 8008e7e:	4093      	lsls	r3, r2
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e86:	4937      	ldr	r1, [pc, #220]	; (8008f64 <HAL_GPIO_Init+0x2e8>)
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	089b      	lsrs	r3, r3, #2
 8008e8c:	3302      	adds	r3, #2
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e94:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008eb8:	4a30      	ldr	r2, [pc, #192]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008ebe:	4b2f      	ldr	r3, [pc, #188]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	43db      	mvns	r3, r3
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008ee2:	4a26      	ldr	r2, [pc, #152]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008ee8:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d003      	beq.n	8008f0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008f0c:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008f12:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	43db      	mvns	r3, r3
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008f36:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <HAL_GPIO_Init+0x300>)
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f47f ae9d 	bne.w	8008c8c <HAL_GPIO_Init+0x10>
  }
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	40021000 	.word	0x40021000
 8008f64:	40010000 	.word	0x40010000
 8008f68:	48000400 	.word	0x48000400
 8008f6c:	48000800 	.word	0x48000800
 8008f70:	48000c00 	.word	0x48000c00
 8008f74:	48001000 	.word	0x48001000
 8008f78:	48001400 	.word	0x48001400
 8008f7c:	40010400 	.word	0x40010400

08008f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691a      	ldr	r2, [r3, #16]
 8008f90:	887b      	ldrh	r3, [r7, #2]
 8008f92:	4013      	ands	r3, r2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
 8008f9c:	e001      	b.n	8008fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	807b      	strh	r3, [r7, #2]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fc0:	787b      	ldrb	r3, [r7, #1]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008fc6:	887a      	ldrh	r2, [r7, #2]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008fcc:	e002      	b.n	8008fd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008fce:	887a      	ldrh	r2, [r7, #2]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ff2:	887a      	ldrh	r2, [r7, #2]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	041a      	lsls	r2, r3, #16
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	43d9      	mvns	r1, r3
 8008ffe:	887b      	ldrh	r3, [r7, #2]
 8009000:	400b      	ands	r3, r1
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	619a      	str	r2, [r3, #24]
}
 8009008:	bf00      	nop
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800901e:	4b08      	ldr	r3, [pc, #32]	; (8009040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	4013      	ands	r3, r2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d006      	beq.n	8009038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800902a:	4a05      	ldr	r2, [pc, #20]	; (8009040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800902c:	88fb      	ldrh	r3, [r7, #6]
 800902e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009030:	88fb      	ldrh	r3, [r7, #6]
 8009032:	4618      	mov	r0, r3
 8009034:	f7fa fd4a 	bl	8003acc <HAL_GPIO_EXTI_Callback>
  }
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40010400 	.word	0x40010400

08009044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d141      	bne.n	80090d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009052:	4b4b      	ldr	r3, [pc, #300]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800905a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800905e:	d131      	bne.n	80090c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009060:	4b47      	ldr	r3, [pc, #284]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009066:	4a46      	ldr	r2, [pc, #280]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800906c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009070:	4b43      	ldr	r3, [pc, #268]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009078:	4a41      	ldr	r2, [pc, #260]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800907a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800907e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009080:	4b40      	ldr	r3, [pc, #256]	; (8009184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2232      	movs	r2, #50	; 0x32
 8009086:	fb02 f303 	mul.w	r3, r2, r3
 800908a:	4a3f      	ldr	r2, [pc, #252]	; (8009188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800908c:	fba2 2303 	umull	r2, r3, r2, r3
 8009090:	0c9b      	lsrs	r3, r3, #18
 8009092:	3301      	adds	r3, #1
 8009094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009096:	e002      	b.n	800909e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3b01      	subs	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800909e:	4b38      	ldr	r3, [pc, #224]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090aa:	d102      	bne.n	80090b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1f2      	bne.n	8009098 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80090b2:	4b33      	ldr	r3, [pc, #204]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090be:	d158      	bne.n	8009172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e057      	b.n	8009174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090c4:	4b2e      	ldr	r3, [pc, #184]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ca:	4a2d      	ldr	r2, [pc, #180]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80090d4:	e04d      	b.n	8009172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090dc:	d141      	bne.n	8009162 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80090de:	4b28      	ldr	r3, [pc, #160]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80090e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ea:	d131      	bne.n	8009150 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80090ec:	4b24      	ldr	r3, [pc, #144]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f2:	4a23      	ldr	r2, [pc, #140]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80090fc:	4b20      	ldr	r3, [pc, #128]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009104:	4a1e      	ldr	r2, [pc, #120]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800910a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800910c:	4b1d      	ldr	r3, [pc, #116]	; (8009184 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2232      	movs	r2, #50	; 0x32
 8009112:	fb02 f303 	mul.w	r3, r2, r3
 8009116:	4a1c      	ldr	r2, [pc, #112]	; (8009188 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009118:	fba2 2303 	umull	r2, r3, r2, r3
 800911c:	0c9b      	lsrs	r3, r3, #18
 800911e:	3301      	adds	r3, #1
 8009120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009122:	e002      	b.n	800912a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3b01      	subs	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009136:	d102      	bne.n	800913e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f2      	bne.n	8009124 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914a:	d112      	bne.n	8009172 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e011      	b.n	8009174 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009156:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800915c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009160:	e007      	b.n	8009172 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009162:	4b07      	ldr	r3, [pc, #28]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800916a:	4a05      	ldr	r2, [pc, #20]	; (8009180 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800916c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009170:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	40007000 	.word	0x40007000
 8009184:	20000008 	.word	0x20000008
 8009188:	431bde83 	.word	0x431bde83

0800918c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009190:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	4a04      	ldr	r2, [pc, #16]	; (80091a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800919a:	6093      	str	r3, [r2, #8]
}
 800919c:	bf00      	nop
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40007000 	.word	0x40007000

080091ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b088      	sub	sp, #32
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e306      	b.n	80097cc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d075      	beq.n	80092b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091ca:	4b97      	ldr	r3, [pc, #604]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f003 030c 	and.w	r3, r3, #12
 80091d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80091d4:	4b94      	ldr	r3, [pc, #592]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f003 0303 	and.w	r3, r3, #3
 80091dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	2b0c      	cmp	r3, #12
 80091e2:	d102      	bne.n	80091ea <HAL_RCC_OscConfig+0x3e>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d002      	beq.n	80091f0 <HAL_RCC_OscConfig+0x44>
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	d10b      	bne.n	8009208 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091f0:	4b8d      	ldr	r3, [pc, #564]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d05b      	beq.n	80092b4 <HAL_RCC_OscConfig+0x108>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d157      	bne.n	80092b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e2e1      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009210:	d106      	bne.n	8009220 <HAL_RCC_OscConfig+0x74>
 8009212:	4b85      	ldr	r3, [pc, #532]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a84      	ldr	r2, [pc, #528]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	e01d      	b.n	800925c <HAL_RCC_OscConfig+0xb0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009228:	d10c      	bne.n	8009244 <HAL_RCC_OscConfig+0x98>
 800922a:	4b7f      	ldr	r3, [pc, #508]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a7e      	ldr	r2, [pc, #504]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	4b7c      	ldr	r3, [pc, #496]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a7b      	ldr	r2, [pc, #492]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 800923c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	e00b      	b.n	800925c <HAL_RCC_OscConfig+0xb0>
 8009244:	4b78      	ldr	r3, [pc, #480]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a77      	ldr	r2, [pc, #476]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 800924a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	4b75      	ldr	r3, [pc, #468]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a74      	ldr	r2, [pc, #464]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800925a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d013      	beq.n	800928c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009264:	f7f9 fe52 	bl	8002f0c <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800926a:	e008      	b.n	800927e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800926c:	f7f9 fe4e 	bl	8002f0c <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b64      	cmp	r3, #100	; 0x64
 8009278:	d901      	bls.n	800927e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e2a6      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800927e:	4b6a      	ldr	r3, [pc, #424]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0f0      	beq.n	800926c <HAL_RCC_OscConfig+0xc0>
 800928a:	e014      	b.n	80092b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800928c:	f7f9 fe3e 	bl	8002f0c <HAL_GetTick>
 8009290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009292:	e008      	b.n	80092a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009294:	f7f9 fe3a 	bl	8002f0c <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	2b64      	cmp	r3, #100	; 0x64
 80092a0:	d901      	bls.n	80092a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e292      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80092a6:	4b60      	ldr	r3, [pc, #384]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1f0      	bne.n	8009294 <HAL_RCC_OscConfig+0xe8>
 80092b2:	e000      	b.n	80092b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d075      	beq.n	80093ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092c2:	4b59      	ldr	r3, [pc, #356]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f003 030c 	and.w	r3, r3, #12
 80092ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80092cc:	4b56      	ldr	r3, [pc, #344]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f003 0303 	and.w	r3, r3, #3
 80092d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b0c      	cmp	r3, #12
 80092da:	d102      	bne.n	80092e2 <HAL_RCC_OscConfig+0x136>
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d002      	beq.n	80092e8 <HAL_RCC_OscConfig+0x13c>
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	d11f      	bne.n	8009328 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092e8:	4b4f      	ldr	r3, [pc, #316]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d005      	beq.n	8009300 <HAL_RCC_OscConfig+0x154>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e265      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009300:	4b49      	ldr	r3, [pc, #292]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	061b      	lsls	r3, r3, #24
 800930e:	4946      	ldr	r1, [pc, #280]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009310:	4313      	orrs	r3, r2
 8009312:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009314:	4b45      	ldr	r3, [pc, #276]	; (800942c <HAL_RCC_OscConfig+0x280>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f7fc fe49 	bl	8005fb0 <HAL_InitTick>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d043      	beq.n	80093ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e251      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d023      	beq.n	8009378 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009330:	4b3d      	ldr	r3, [pc, #244]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a3c      	ldr	r2, [pc, #240]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800933a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933c:	f7f9 fde6 	bl	8002f0c <HAL_GetTick>
 8009340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009342:	e008      	b.n	8009356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009344:	f7f9 fde2 	bl	8002f0c <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d901      	bls.n	8009356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e23a      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009356:	4b34      	ldr	r3, [pc, #208]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0f0      	beq.n	8009344 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009362:	4b31      	ldr	r3, [pc, #196]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	061b      	lsls	r3, r3, #24
 8009370:	492d      	ldr	r1, [pc, #180]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009372:	4313      	orrs	r3, r2
 8009374:	604b      	str	r3, [r1, #4]
 8009376:	e01a      	b.n	80093ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009378:	4b2b      	ldr	r3, [pc, #172]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a2a      	ldr	r2, [pc, #168]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 800937e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009384:	f7f9 fdc2 	bl	8002f0c <HAL_GetTick>
 8009388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800938a:	e008      	b.n	800939e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800938c:	f7f9 fdbe 	bl	8002f0c <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b02      	cmp	r3, #2
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e216      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800939e:	4b22      	ldr	r3, [pc, #136]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1f0      	bne.n	800938c <HAL_RCC_OscConfig+0x1e0>
 80093aa:	e000      	b.n	80093ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d041      	beq.n	800943e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d01c      	beq.n	80093fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093c2:	4b19      	ldr	r3, [pc, #100]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80093c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093c8:	4a17      	ldr	r2, [pc, #92]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80093ca:	f043 0301 	orr.w	r3, r3, #1
 80093ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093d2:	f7f9 fd9b 	bl	8002f0c <HAL_GetTick>
 80093d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80093d8:	e008      	b.n	80093ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093da:	f7f9 fd97 	bl	8002f0c <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e1ef      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80093ec:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80093ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0ef      	beq.n	80093da <HAL_RCC_OscConfig+0x22e>
 80093fa:	e020      	b.n	800943e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 80093fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009402:	4a09      	ldr	r2, [pc, #36]	; (8009428 <HAL_RCC_OscConfig+0x27c>)
 8009404:	f023 0301 	bic.w	r3, r3, #1
 8009408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940c:	f7f9 fd7e 	bl	8002f0c <HAL_GetTick>
 8009410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009412:	e00d      	b.n	8009430 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009414:	f7f9 fd7a 	bl	8002f0c <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d906      	bls.n	8009430 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e1d2      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
 8009426:	bf00      	nop
 8009428:	40021000 	.word	0x40021000
 800942c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009430:	4b8c      	ldr	r3, [pc, #560]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1ea      	bne.n	8009414 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 80a6 	beq.w	8009598 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800944c:	2300      	movs	r3, #0
 800944e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009450:	4b84      	ldr	r3, [pc, #528]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <HAL_RCC_OscConfig+0x2b4>
 800945c:	2301      	movs	r3, #1
 800945e:	e000      	b.n	8009462 <HAL_RCC_OscConfig+0x2b6>
 8009460:	2300      	movs	r3, #0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009466:	4b7f      	ldr	r3, [pc, #508]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	4a7e      	ldr	r2, [pc, #504]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 800946c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009470:	6593      	str	r3, [r2, #88]	; 0x58
 8009472:	4b7c      	ldr	r3, [pc, #496]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800947e:	2301      	movs	r3, #1
 8009480:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009482:	4b79      	ldr	r3, [pc, #484]	; (8009668 <HAL_RCC_OscConfig+0x4bc>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800948a:	2b00      	cmp	r3, #0
 800948c:	d118      	bne.n	80094c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800948e:	4b76      	ldr	r3, [pc, #472]	; (8009668 <HAL_RCC_OscConfig+0x4bc>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a75      	ldr	r2, [pc, #468]	; (8009668 <HAL_RCC_OscConfig+0x4bc>)
 8009494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800949a:	f7f9 fd37 	bl	8002f0c <HAL_GetTick>
 800949e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094a0:	e008      	b.n	80094b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094a2:	f7f9 fd33 	bl	8002f0c <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d901      	bls.n	80094b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e18b      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094b4:	4b6c      	ldr	r3, [pc, #432]	; (8009668 <HAL_RCC_OscConfig+0x4bc>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d0f0      	beq.n	80094a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d108      	bne.n	80094da <HAL_RCC_OscConfig+0x32e>
 80094c8:	4b66      	ldr	r3, [pc, #408]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80094ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ce:	4a65      	ldr	r2, [pc, #404]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80094d0:	f043 0301 	orr.w	r3, r3, #1
 80094d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094d8:	e024      	b.n	8009524 <HAL_RCC_OscConfig+0x378>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b05      	cmp	r3, #5
 80094e0:	d110      	bne.n	8009504 <HAL_RCC_OscConfig+0x358>
 80094e2:	4b60      	ldr	r3, [pc, #384]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80094e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e8:	4a5e      	ldr	r2, [pc, #376]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80094ea:	f043 0304 	orr.w	r3, r3, #4
 80094ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80094f2:	4b5c      	ldr	r3, [pc, #368]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80094f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f8:	4a5a      	ldr	r2, [pc, #360]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009502:	e00f      	b.n	8009524 <HAL_RCC_OscConfig+0x378>
 8009504:	4b57      	ldr	r3, [pc, #348]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950a:	4a56      	ldr	r2, [pc, #344]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 800950c:	f023 0301 	bic.w	r3, r3, #1
 8009510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009514:	4b53      	ldr	r3, [pc, #332]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800951a:	4a52      	ldr	r2, [pc, #328]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 800951c:	f023 0304 	bic.w	r3, r3, #4
 8009520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d016      	beq.n	800955a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800952c:	f7f9 fcee 	bl	8002f0c <HAL_GetTick>
 8009530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009532:	e00a      	b.n	800954a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009534:	f7f9 fcea 	bl	8002f0c <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009542:	4293      	cmp	r3, r2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e140      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800954a:	4b46      	ldr	r3, [pc, #280]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 800954c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0ed      	beq.n	8009534 <HAL_RCC_OscConfig+0x388>
 8009558:	e015      	b.n	8009586 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800955a:	f7f9 fcd7 	bl	8002f0c <HAL_GetTick>
 800955e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009560:	e00a      	b.n	8009578 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009562:	f7f9 fcd3 	bl	8002f0c <HAL_GetTick>
 8009566:	4602      	mov	r2, r0
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009570:	4293      	cmp	r3, r2
 8009572:	d901      	bls.n	8009578 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e129      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009578:	4b3a      	ldr	r3, [pc, #232]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 800957a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800957e:	f003 0302 	and.w	r3, r3, #2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1ed      	bne.n	8009562 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009586:	7ffb      	ldrb	r3, [r7, #31]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d105      	bne.n	8009598 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800958c:	4b35      	ldr	r3, [pc, #212]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 800958e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009590:	4a34      	ldr	r2, [pc, #208]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d03c      	beq.n	800961e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d01c      	beq.n	80095e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80095ac:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80095ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095b2:	4a2c      	ldr	r2, [pc, #176]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80095b4:	f043 0301 	orr.w	r3, r3, #1
 80095b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095bc:	f7f9 fca6 	bl	8002f0c <HAL_GetTick>
 80095c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80095c2:	e008      	b.n	80095d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095c4:	f7f9 fca2 	bl	8002f0c <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d901      	bls.n	80095d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e0fa      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80095d6:	4b23      	ldr	r3, [pc, #140]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80095d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095dc:	f003 0302 	and.w	r3, r3, #2
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d0ef      	beq.n	80095c4 <HAL_RCC_OscConfig+0x418>
 80095e4:	e01b      	b.n	800961e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80095e6:	4b1f      	ldr	r3, [pc, #124]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80095e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095ec:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 80095ee:	f023 0301 	bic.w	r3, r3, #1
 80095f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095f6:	f7f9 fc89 	bl	8002f0c <HAL_GetTick>
 80095fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80095fc:	e008      	b.n	8009610 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095fe:	f7f9 fc85 	bl	8002f0c <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	2b02      	cmp	r3, #2
 800960a:	d901      	bls.n	8009610 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e0dd      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009610:	4b14      	ldr	r3, [pc, #80]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1ef      	bne.n	80095fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 80d1 	beq.w	80097ca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009628:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 030c 	and.w	r3, r3, #12
 8009630:	2b0c      	cmp	r3, #12
 8009632:	f000 808b 	beq.w	800974c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	2b02      	cmp	r3, #2
 800963c:	d15e      	bne.n	80096fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800963e:	4b09      	ldr	r3, [pc, #36]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a08      	ldr	r2, [pc, #32]	; (8009664 <HAL_RCC_OscConfig+0x4b8>)
 8009644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800964a:	f7f9 fc5f 	bl	8002f0c <HAL_GetTick>
 800964e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009650:	e00c      	b.n	800966c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009652:	f7f9 fc5b 	bl	8002f0c <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	2b02      	cmp	r3, #2
 800965e:	d905      	bls.n	800966c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009660:	2303      	movs	r3, #3
 8009662:	e0b3      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
 8009664:	40021000 	.word	0x40021000
 8009668:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800966c:	4b59      	ldr	r3, [pc, #356]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1ec      	bne.n	8009652 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009678:	4b56      	ldr	r3, [pc, #344]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	4b56      	ldr	r3, [pc, #344]	; (80097d8 <HAL_RCC_OscConfig+0x62c>)
 800967e:	4013      	ands	r3, r2
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	6a11      	ldr	r1, [r2, #32]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009688:	3a01      	subs	r2, #1
 800968a:	0112      	lsls	r2, r2, #4
 800968c:	4311      	orrs	r1, r2
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009692:	0212      	lsls	r2, r2, #8
 8009694:	4311      	orrs	r1, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800969a:	0852      	lsrs	r2, r2, #1
 800969c:	3a01      	subs	r2, #1
 800969e:	0552      	lsls	r2, r2, #21
 80096a0:	4311      	orrs	r1, r2
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096a6:	0852      	lsrs	r2, r2, #1
 80096a8:	3a01      	subs	r2, #1
 80096aa:	0652      	lsls	r2, r2, #25
 80096ac:	4311      	orrs	r1, r2
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80096b2:	06d2      	lsls	r2, r2, #27
 80096b4:	430a      	orrs	r2, r1
 80096b6:	4947      	ldr	r1, [pc, #284]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096bc:	4b45      	ldr	r3, [pc, #276]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a44      	ldr	r2, [pc, #272]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 80096c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80096c8:	4b42      	ldr	r3, [pc, #264]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	4a41      	ldr	r2, [pc, #260]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 80096ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096d4:	f7f9 fc1a 	bl	8002f0c <HAL_GetTick>
 80096d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096da:	e008      	b.n	80096ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096dc:	f7f9 fc16 	bl	8002f0c <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d901      	bls.n	80096ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e06e      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096ee:	4b39      	ldr	r3, [pc, #228]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0f0      	beq.n	80096dc <HAL_RCC_OscConfig+0x530>
 80096fa:	e066      	b.n	80097ca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096fc:	4b35      	ldr	r3, [pc, #212]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a34      	ldr	r2, [pc, #208]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 8009702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009706:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009708:	4b32      	ldr	r3, [pc, #200]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	4a31      	ldr	r2, [pc, #196]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 800970e:	f023 0303 	bic.w	r3, r3, #3
 8009712:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009714:	4b2f      	ldr	r3, [pc, #188]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	4a2e      	ldr	r2, [pc, #184]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 800971a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800971e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009722:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009724:	f7f9 fbf2 	bl	8002f0c <HAL_GetTick>
 8009728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800972a:	e008      	b.n	800973e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800972c:	f7f9 fbee 	bl	8002f0c <HAL_GetTick>
 8009730:	4602      	mov	r2, r0
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	2b02      	cmp	r3, #2
 8009738:	d901      	bls.n	800973e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e046      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800973e:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1f0      	bne.n	800972c <HAL_RCC_OscConfig+0x580>
 800974a:	e03e      	b.n	80097ca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e039      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009758:	4b1e      	ldr	r3, [pc, #120]	; (80097d4 <HAL_RCC_OscConfig+0x628>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f003 0203 	and.w	r2, r3, #3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	429a      	cmp	r2, r3
 800976a:	d12c      	bne.n	80097c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	3b01      	subs	r3, #1
 8009778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800977a:	429a      	cmp	r2, r3
 800977c:	d123      	bne.n	80097c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800978a:	429a      	cmp	r2, r3
 800978c:	d11b      	bne.n	80097c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800979a:	429a      	cmp	r2, r3
 800979c:	d113      	bne.n	80097c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	085b      	lsrs	r3, r3, #1
 80097aa:	3b01      	subs	r3, #1
 80097ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d109      	bne.n	80097c6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097bc:	085b      	lsrs	r3, r3, #1
 80097be:	3b01      	subs	r3, #1
 80097c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d001      	beq.n	80097ca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3720      	adds	r7, #32
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	40021000 	.word	0x40021000
 80097d8:	019f800c 	.word	0x019f800c

080097dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80097e6:	2300      	movs	r3, #0
 80097e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e11e      	b.n	8009a32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097f4:	4b91      	ldr	r3, [pc, #580]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 030f 	and.w	r3, r3, #15
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d910      	bls.n	8009824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009802:	4b8e      	ldr	r3, [pc, #568]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f023 020f 	bic.w	r2, r3, #15
 800980a:	498c      	ldr	r1, [pc, #560]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	4313      	orrs	r3, r2
 8009810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009812:	4b8a      	ldr	r3, [pc, #552]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 030f 	and.w	r3, r3, #15
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d001      	beq.n	8009824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e106      	b.n	8009a32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d073      	beq.n	8009918 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d129      	bne.n	800988c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009838:	4b81      	ldr	r3, [pc, #516]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e0f4      	b.n	8009a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009848:	f000 f99e 	bl	8009b88 <RCC_GetSysClockFreqFromPLLSource>
 800984c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4a7c      	ldr	r2, [pc, #496]	; (8009a44 <HAL_RCC_ClockConfig+0x268>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d93f      	bls.n	80098d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009856:	4b7a      	ldr	r3, [pc, #488]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800986a:	2b00      	cmp	r3, #0
 800986c:	d033      	beq.n	80098d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009872:	2b00      	cmp	r3, #0
 8009874:	d12f      	bne.n	80098d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009876:	4b72      	ldr	r3, [pc, #456]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800987e:	4a70      	ldr	r2, [pc, #448]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009884:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009886:	2380      	movs	r3, #128	; 0x80
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	e024      	b.n	80098d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d107      	bne.n	80098a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009894:	4b6a      	ldr	r3, [pc, #424]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d109      	bne.n	80098b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e0c6      	b.n	8009a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80098a4:	4b66      	ldr	r3, [pc, #408]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e0be      	b.n	8009a32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80098b4:	f000 f8ce 	bl	8009a54 <HAL_RCC_GetSysClockFreq>
 80098b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	4a61      	ldr	r2, [pc, #388]	; (8009a44 <HAL_RCC_ClockConfig+0x268>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d909      	bls.n	80098d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80098c2:	4b5f      	ldr	r3, [pc, #380]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098ca:	4a5d      	ldr	r2, [pc, #372]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80098cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80098d2:	2380      	movs	r3, #128	; 0x80
 80098d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80098d6:	4b5a      	ldr	r3, [pc, #360]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f023 0203 	bic.w	r2, r3, #3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	4957      	ldr	r1, [pc, #348]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098e8:	f7f9 fb10 	bl	8002f0c <HAL_GetTick>
 80098ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098ee:	e00a      	b.n	8009906 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098f0:	f7f9 fb0c 	bl	8002f0c <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80098fe:	4293      	cmp	r3, r2
 8009900:	d901      	bls.n	8009906 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e095      	b.n	8009a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009906:	4b4e      	ldr	r3, [pc, #312]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 020c 	and.w	r2, r3, #12
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	429a      	cmp	r2, r3
 8009916:	d1eb      	bne.n	80098f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d023      	beq.n	800996c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d005      	beq.n	800993c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009930:	4b43      	ldr	r3, [pc, #268]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	4a42      	ldr	r2, [pc, #264]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800993a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0308 	and.w	r3, r3, #8
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009948:	4b3d      	ldr	r3, [pc, #244]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009950:	4a3b      	ldr	r2, [pc, #236]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009958:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	4936      	ldr	r1, [pc, #216]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009966:	4313      	orrs	r3, r2
 8009968:	608b      	str	r3, [r1, #8]
 800996a:	e008      	b.n	800997e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2b80      	cmp	r3, #128	; 0x80
 8009970:	d105      	bne.n	800997e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009972:	4b33      	ldr	r3, [pc, #204]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	4a32      	ldr	r2, [pc, #200]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800997c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800997e:	4b2f      	ldr	r3, [pc, #188]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 030f 	and.w	r3, r3, #15
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	429a      	cmp	r2, r3
 800998a:	d21d      	bcs.n	80099c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800998c:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f023 020f 	bic.w	r2, r3, #15
 8009994:	4929      	ldr	r1, [pc, #164]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	4313      	orrs	r3, r2
 800999a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800999c:	f7f9 fab6 	bl	8002f0c <HAL_GetTick>
 80099a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099a2:	e00a      	b.n	80099ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099a4:	f7f9 fab2 	bl	8002f0c <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e03b      	b.n	8009a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ba:	4b20      	ldr	r3, [pc, #128]	; (8009a3c <HAL_RCC_ClockConfig+0x260>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 030f 	and.w	r3, r3, #15
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d1ed      	bne.n	80099a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0304 	and.w	r3, r3, #4
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d008      	beq.n	80099e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80099d4:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	4917      	ldr	r1, [pc, #92]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80099f2:	4b13      	ldr	r3, [pc, #76]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	490f      	ldr	r1, [pc, #60]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009a06:	f000 f825 	bl	8009a54 <HAL_RCC_GetSysClockFreq>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <HAL_RCC_ClockConfig+0x264>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	091b      	lsrs	r3, r3, #4
 8009a12:	f003 030f 	and.w	r3, r3, #15
 8009a16:	490c      	ldr	r1, [pc, #48]	; (8009a48 <HAL_RCC_ClockConfig+0x26c>)
 8009a18:	5ccb      	ldrb	r3, [r1, r3]
 8009a1a:	f003 031f 	and.w	r3, r3, #31
 8009a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a22:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <HAL_RCC_ClockConfig+0x270>)
 8009a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009a26:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <HAL_RCC_ClockConfig+0x274>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fc fac0 	bl	8005fb0 <HAL_InitTick>
 8009a30:	4603      	mov	r3, r0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	40022000 	.word	0x40022000
 8009a40:	40021000 	.word	0x40021000
 8009a44:	04c4b400 	.word	0x04c4b400
 8009a48:	080115b0 	.word	0x080115b0
 8009a4c:	20000008 	.word	0x20000008
 8009a50:	2000000c 	.word	0x2000000c

08009a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009a5a:	4b2c      	ldr	r3, [pc, #176]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f003 030c 	and.w	r3, r3, #12
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d102      	bne.n	8009a6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009a66:	4b2a      	ldr	r3, [pc, #168]	; (8009b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009a68:	613b      	str	r3, [r7, #16]
 8009a6a:	e047      	b.n	8009afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009a6c:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f003 030c 	and.w	r3, r3, #12
 8009a74:	2b08      	cmp	r3, #8
 8009a76:	d102      	bne.n	8009a7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009a78:	4b26      	ldr	r3, [pc, #152]	; (8009b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	e03e      	b.n	8009afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009a7e:	4b23      	ldr	r3, [pc, #140]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 030c 	and.w	r3, r3, #12
 8009a86:	2b0c      	cmp	r3, #12
 8009a88:	d136      	bne.n	8009af8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a8a:	4b20      	ldr	r3, [pc, #128]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a94:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	091b      	lsrs	r3, r3, #4
 8009a9a:	f003 030f 	and.w	r3, r3, #15
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d10c      	bne.n	8009ac2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009aa8:	4a1a      	ldr	r2, [pc, #104]	; (8009b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab0:	4a16      	ldr	r2, [pc, #88]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ab2:	68d2      	ldr	r2, [r2, #12]
 8009ab4:	0a12      	lsrs	r2, r2, #8
 8009ab6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009aba:	fb02 f303 	mul.w	r3, r2, r3
 8009abe:	617b      	str	r3, [r7, #20]
      break;
 8009ac0:	e00c      	b.n	8009adc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009ac2:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aca:	4a10      	ldr	r2, [pc, #64]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009acc:	68d2      	ldr	r2, [r2, #12]
 8009ace:	0a12      	lsrs	r2, r2, #8
 8009ad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009ad4:	fb02 f303 	mul.w	r3, r2, r3
 8009ad8:	617b      	str	r3, [r7, #20]
      break;
 8009ada:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009adc:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	0e5b      	lsrs	r3, r3, #25
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	e001      	b.n	8009afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009afc:	693b      	ldr	r3, [r7, #16]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	40021000 	.word	0x40021000
 8009b10:	00f42400 	.word	0x00f42400
 8009b14:	007a1200 	.word	0x007a1200

08009b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b1c:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	20000008 	.word	0x20000008

08009b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009b34:	f7ff fff0 	bl	8009b18 <HAL_RCC_GetHCLKFreq>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	0a1b      	lsrs	r3, r3, #8
 8009b40:	f003 0307 	and.w	r3, r3, #7
 8009b44:	4904      	ldr	r1, [pc, #16]	; (8009b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b46:	5ccb      	ldrb	r3, [r1, r3]
 8009b48:	f003 031f 	and.w	r3, r3, #31
 8009b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	40021000 	.word	0x40021000
 8009b58:	080115c0 	.word	0x080115c0

08009b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009b60:	f7ff ffda 	bl	8009b18 <HAL_RCC_GetHCLKFreq>
 8009b64:	4602      	mov	r2, r0
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	0adb      	lsrs	r3, r3, #11
 8009b6c:	f003 0307 	and.w	r3, r3, #7
 8009b70:	4904      	ldr	r1, [pc, #16]	; (8009b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b72:	5ccb      	ldrb	r3, [r1, r3]
 8009b74:	f003 031f 	and.w	r3, r3, #31
 8009b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	40021000 	.word	0x40021000
 8009b84:	080115c0 	.word	0x080115c0

08009b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b8e:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b98:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	091b      	lsrs	r3, r3, #4
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d10c      	bne.n	8009bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bac:	4a17      	ldr	r2, [pc, #92]	; (8009c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bb4:	4a14      	ldr	r2, [pc, #80]	; (8009c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009bb6:	68d2      	ldr	r2, [r2, #12]
 8009bb8:	0a12      	lsrs	r2, r2, #8
 8009bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009bbe:	fb02 f303 	mul.w	r3, r2, r3
 8009bc2:	617b      	str	r3, [r7, #20]
    break;
 8009bc4:	e00c      	b.n	8009be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bc6:	4a12      	ldr	r2, [pc, #72]	; (8009c10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bce:	4a0e      	ldr	r2, [pc, #56]	; (8009c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009bd0:	68d2      	ldr	r2, [r2, #12]
 8009bd2:	0a12      	lsrs	r2, r2, #8
 8009bd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009bd8:	fb02 f303 	mul.w	r3, r2, r3
 8009bdc:	617b      	str	r3, [r7, #20]
    break;
 8009bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009be0:	4b09      	ldr	r3, [pc, #36]	; (8009c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	0e5b      	lsrs	r3, r3, #25
 8009be6:	f003 0303 	and.w	r3, r3, #3
 8009bea:	3301      	adds	r3, #1
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009bfa:	687b      	ldr	r3, [r7, #4]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	371c      	adds	r7, #28
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	40021000 	.word	0x40021000
 8009c0c:	007a1200 	.word	0x007a1200
 8009c10:	00f42400 	.word	0x00f42400

08009c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c20:	2300      	movs	r3, #0
 8009c22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 8098 	beq.w	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c32:	2300      	movs	r3, #0
 8009c34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c36:	4b43      	ldr	r3, [pc, #268]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10d      	bne.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c42:	4b40      	ldr	r3, [pc, #256]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c46:	4a3f      	ldr	r2, [pc, #252]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8009c4e:	4b3d      	ldr	r3, [pc, #244]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c56:	60bb      	str	r3, [r7, #8]
 8009c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c5e:	4b3a      	ldr	r3, [pc, #232]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a39      	ldr	r2, [pc, #228]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c6a:	f7f9 f94f 	bl	8002f0c <HAL_GetTick>
 8009c6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c70:	e009      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c72:	f7f9 f94b 	bl	8002f0c <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d902      	bls.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	74fb      	strb	r3, [r7, #19]
        break;
 8009c84:	e005      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c86:	4b30      	ldr	r3, [pc, #192]	; (8009d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0ef      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009c92:	7cfb      	ldrb	r3, [r7, #19]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d159      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009c98:	4b2a      	ldr	r3, [pc, #168]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ca2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d01e      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d019      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009cb4:	4b23      	ldr	r3, [pc, #140]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009cc0:	4b20      	ldr	r3, [pc, #128]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc6:	4a1f      	ldr	r2, [pc, #124]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cd0:	4b1c      	ldr	r3, [pc, #112]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd6:	4a1b      	ldr	r2, [pc, #108]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ce0:	4a18      	ldr	r2, [pc, #96]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d016      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf2:	f7f9 f90b 	bl	8002f0c <HAL_GetTick>
 8009cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009cf8:	e00b      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cfa:	f7f9 f907 	bl	8002f0c <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d902      	bls.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8009d10:	e006      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d12:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0ec      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009d20:	7cfb      	ldrb	r3, [r7, #19]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d34:	4903      	ldr	r1, [pc, #12]	; (8009d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009d3c:	e008      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d3e:	7cfb      	ldrb	r3, [r7, #19]
 8009d40:	74bb      	strb	r3, [r7, #18]
 8009d42:	e005      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009d44:	40021000 	.word	0x40021000
 8009d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4c:	7cfb      	ldrb	r3, [r7, #19]
 8009d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d50:	7c7b      	ldrb	r3, [r7, #17]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d105      	bne.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d56:	4ba7      	ldr	r3, [pc, #668]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d5a:	4aa6      	ldr	r2, [pc, #664]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d6e:	4ba1      	ldr	r3, [pc, #644]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d74:	f023 0203 	bic.w	r2, r3, #3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	499d      	ldr	r1, [pc, #628]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0302 	and.w	r3, r3, #2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00a      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d90:	4b98      	ldr	r3, [pc, #608]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d96:	f023 020c 	bic.w	r2, r3, #12
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	4995      	ldr	r1, [pc, #596]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0304 	and.w	r3, r3, #4
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009db2:	4b90      	ldr	r3, [pc, #576]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	498c      	ldr	r1, [pc, #560]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0308 	and.w	r3, r3, #8
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00a      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009dd4:	4b87      	ldr	r3, [pc, #540]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	4984      	ldr	r1, [pc, #528]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0310 	and.w	r3, r3, #16
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00a      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009df6:	4b7f      	ldr	r3, [pc, #508]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	497b      	ldr	r1, [pc, #492]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0320 	and.w	r3, r3, #32
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00a      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e18:	4b76      	ldr	r3, [pc, #472]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	4973      	ldr	r1, [pc, #460]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009e3a:	4b6e      	ldr	r3, [pc, #440]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	69db      	ldr	r3, [r3, #28]
 8009e48:	496a      	ldr	r1, [pc, #424]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00a      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009e5c:	4b65      	ldr	r3, [pc, #404]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	4962      	ldr	r1, [pc, #392]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009e7e:	4b5d      	ldr	r3, [pc, #372]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8c:	4959      	ldr	r1, [pc, #356]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00a      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ea0:	4b54      	ldr	r3, [pc, #336]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ea6:	f023 0203 	bic.w	r2, r3, #3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eae:	4951      	ldr	r1, [pc, #324]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ec2:	4b4c      	ldr	r3, [pc, #304]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	4948      	ldr	r1, [pc, #288]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d015      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ee4:	4b43      	ldr	r3, [pc, #268]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef2:	4940      	ldr	r1, [pc, #256]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f02:	d105      	bne.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f04:	4b3b      	ldr	r3, [pc, #236]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	4a3a      	ldr	r2, [pc, #232]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d015      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009f1c:	4b35      	ldr	r3, [pc, #212]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2a:	4932      	ldr	r1, [pc, #200]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f3a:	d105      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f3c:	4b2d      	ldr	r3, [pc, #180]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	4a2c      	ldr	r2, [pc, #176]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d015      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f54:	4b27      	ldr	r3, [pc, #156]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	4924      	ldr	r1, [pc, #144]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f72:	d105      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009f74:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	4a1e      	ldr	r2, [pc, #120]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d015      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f8c:	4b19      	ldr	r3, [pc, #100]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	4916      	ldr	r1, [pc, #88]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009faa:	d105      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009fac:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	4a10      	ldr	r2, [pc, #64]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d019      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd2:	4908      	ldr	r1, [pc, #32]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009fe2:	d109      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009fe4:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	4a02      	ldr	r2, [pc, #8]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fee:	60d3      	str	r3, [r2, #12]
 8009ff0:	e002      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009ff2:	bf00      	nop
 8009ff4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d015      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a004:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a012:	4926      	ldr	r1, [pc, #152]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a014:	4313      	orrs	r3, r2
 800a016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a022:	d105      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a024:	4b21      	ldr	r3, [pc, #132]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	4a20      	ldr	r2, [pc, #128]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a02a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a02e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d015      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a03c:	4b1b      	ldr	r3, [pc, #108]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a042:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a04a:	4918      	ldr	r1, [pc, #96]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05a:	d105      	bne.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a05c:	4b13      	ldr	r3, [pc, #76]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	4a12      	ldr	r2, [pc, #72]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a066:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d015      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a074:	4b0d      	ldr	r3, [pc, #52]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a076:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a07a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a082:	490a      	ldr	r1, [pc, #40]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a084:	4313      	orrs	r3, r2
 800a086:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a08e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a092:	d105      	bne.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a094:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	4a04      	ldr	r2, [pc, #16]	; (800a0ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a09a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a09e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a0a0:	7cbb      	ldrb	r3, [r7, #18]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40021000 	.word	0x40021000

0800a0b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e09d      	b.n	800a1fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d108      	bne.n	800a0dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0d2:	d009      	beq.n	800a0e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	61da      	str	r2, [r3, #28]
 800a0da:	e005      	b.n	800a0e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d106      	bne.n	800a108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7fb f9b6 	bl	8005474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a11e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a128:	d902      	bls.n	800a130 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	e002      	b.n	800a136 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a134:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a13e:	d007      	beq.n	800a150 <HAL_SPI_Init+0xa0>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a148:	d002      	beq.n	800a150 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a160:	431a      	orrs	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	431a      	orrs	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	431a      	orrs	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a188:	431a      	orrs	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a192:	ea42 0103 	orr.w	r1, r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	0c1b      	lsrs	r3, r3, #16
 800a1ac:	f003 0204 	and.w	r2, r3, #4
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	f003 0310 	and.w	r3, r3, #16
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1be:	f003 0308 	and.w	r3, r3, #8
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a1cc:	ea42 0103 	orr.w	r1, r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	69da      	ldr	r2, [r3, #28]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b08a      	sub	sp, #40	; 0x28
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	607a      	str	r2, [r7, #4]
 800a212:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a214:	2301      	movs	r3, #1
 800a216:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_SPI_TransmitReceive+0x26>
 800a228:	2302      	movs	r3, #2
 800a22a:	e1fb      	b.n	800a624 <HAL_SPI_TransmitReceive+0x41e>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a234:	f7f8 fe6a 	bl	8002f0c <HAL_GetTick>
 800a238:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a240:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a248:	887b      	ldrh	r3, [r7, #2]
 800a24a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a24c:	887b      	ldrh	r3, [r7, #2]
 800a24e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a250:	7efb      	ldrb	r3, [r7, #27]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d00e      	beq.n	800a274 <HAL_SPI_TransmitReceive+0x6e>
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a25c:	d106      	bne.n	800a26c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d102      	bne.n	800a26c <HAL_SPI_TransmitReceive+0x66>
 800a266:	7efb      	ldrb	r3, [r7, #27]
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d003      	beq.n	800a274 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a26c:	2302      	movs	r3, #2
 800a26e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a272:	e1cd      	b.n	800a610 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d005      	beq.n	800a286 <HAL_SPI_TransmitReceive+0x80>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <HAL_SPI_TransmitReceive+0x80>
 800a280:	887b      	ldrh	r3, [r7, #2]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a28c:	e1c0      	b.n	800a610 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b04      	cmp	r3, #4
 800a298:	d003      	beq.n	800a2a2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2205      	movs	r2, #5
 800a29e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	887a      	ldrh	r2, [r7, #2]
 800a2b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	887a      	ldrh	r2, [r7, #2]
 800a2ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	887a      	ldrh	r2, [r7, #2]
 800a2c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	887a      	ldrh	r2, [r7, #2]
 800a2ce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2e4:	d802      	bhi.n	800a2ec <HAL_SPI_TransmitReceive+0xe6>
 800a2e6:	8a3b      	ldrh	r3, [r7, #16]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d908      	bls.n	800a2fe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a2fa:	605a      	str	r2, [r3, #4]
 800a2fc:	e007      	b.n	800a30e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a30c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a318:	2b40      	cmp	r3, #64	; 0x40
 800a31a:	d007      	beq.n	800a32c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a32a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a334:	d97c      	bls.n	800a430 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_SPI_TransmitReceive+0x13e>
 800a33e:	8a7b      	ldrh	r3, [r7, #18]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d169      	bne.n	800a418 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	881a      	ldrh	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a354:	1c9a      	adds	r2, r3, #2
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a35e:	b29b      	uxth	r3, r3
 800a360:	3b01      	subs	r3, #1
 800a362:	b29a      	uxth	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a368:	e056      	b.n	800a418 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b02      	cmp	r3, #2
 800a376:	d11b      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x1aa>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d016      	beq.n	800a3b0 <HAL_SPI_TransmitReceive+0x1aa>
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	2b01      	cmp	r3, #1
 800a386:	d113      	bne.n	800a3b0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38c:	881a      	ldrh	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	1c9a      	adds	r2, r3, #2
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d11c      	bne.n	800a3f8 <HAL_SPI_TransmitReceive+0x1f2>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d016      	beq.n	800a3f8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	68da      	ldr	r2, [r3, #12]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	b292      	uxth	r2, r2
 800a3d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	1c9a      	adds	r2, r3, #2
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3f8:	f7f8 fd88 	bl	8002f0c <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a404:	429a      	cmp	r2, r3
 800a406:	d807      	bhi.n	800a418 <HAL_SPI_TransmitReceive+0x212>
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40e:	d003      	beq.n	800a418 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a416:	e0fb      	b.n	800a610 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1a3      	bne.n	800a36a <HAL_SPI_TransmitReceive+0x164>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a428:	b29b      	uxth	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d19d      	bne.n	800a36a <HAL_SPI_TransmitReceive+0x164>
 800a42e:	e0df      	b.n	800a5f0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d003      	beq.n	800a440 <HAL_SPI_TransmitReceive+0x23a>
 800a438:	8a7b      	ldrh	r3, [r7, #18]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	f040 80cb 	bne.w	800a5d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b01      	cmp	r3, #1
 800a448:	d912      	bls.n	800a470 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44e:	881a      	ldrh	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	1c9a      	adds	r2, r3, #2
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a464:	b29b      	uxth	r3, r3
 800a466:	3b02      	subs	r3, #2
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a46e:	e0b2      	b.n	800a5d6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	330c      	adds	r3, #12
 800a47a:	7812      	ldrb	r2, [r2, #0]
 800a47c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a496:	e09e      	b.n	800a5d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d134      	bne.n	800a510 <HAL_SPI_TransmitReceive+0x30a>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d02f      	beq.n	800a510 <HAL_SPI_TransmitReceive+0x30a>
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d12c      	bne.n	800a510 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d912      	bls.n	800a4e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	881a      	ldrh	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d0:	1c9a      	adds	r2, r3, #2
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b02      	subs	r3, #2
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4e4:	e012      	b.n	800a50c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	330c      	adds	r3, #12
 800a4f0:	7812      	ldrb	r2, [r2, #0]
 800a4f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a502:	b29b      	uxth	r3, r3
 800a504:	3b01      	subs	r3, #1
 800a506:	b29a      	uxth	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d148      	bne.n	800a5b0 <HAL_SPI_TransmitReceive+0x3aa>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a524:	b29b      	uxth	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d042      	beq.n	800a5b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a530:	b29b      	uxth	r3, r3
 800a532:	2b01      	cmp	r3, #1
 800a534:	d923      	bls.n	800a57e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68da      	ldr	r2, [r3, #12]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a540:	b292      	uxth	r2, r2
 800a542:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	1c9a      	adds	r2, r3, #2
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a554:	b29b      	uxth	r3, r3
 800a556:	3b02      	subs	r3, #2
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a566:	b29b      	uxth	r3, r3
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d81f      	bhi.n	800a5ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a57a:	605a      	str	r2, [r3, #4]
 800a57c:	e016      	b.n	800a5ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f103 020c 	add.w	r2, r3, #12
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58a:	7812      	ldrb	r2, [r2, #0]
 800a58c:	b2d2      	uxtb	r2, r2
 800a58e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5b0:	f7f8 fcac 	bl	8002f0c <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d803      	bhi.n	800a5c8 <HAL_SPI_TransmitReceive+0x3c2>
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c6:	d102      	bne.n	800a5ce <HAL_SPI_TransmitReceive+0x3c8>
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d103      	bne.n	800a5d6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a5d4:	e01c      	b.n	800a610 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f47f af5b 	bne.w	800a498 <HAL_SPI_TransmitReceive+0x292>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f47f af54 	bne.w	800a498 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f000 f937 	bl	800a868 <SPI_EndRxTxTransaction>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2220      	movs	r2, #32
 800a60a:	661a      	str	r2, [r3, #96]	; 0x60
 800a60c:	e000      	b.n	800a610 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a60e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a624:	4618      	mov	r0, r3
 800a626:	3728      	adds	r7, #40	; 0x28
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	603b      	str	r3, [r7, #0]
 800a638:	4613      	mov	r3, r2
 800a63a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a63c:	f7f8 fc66 	bl	8002f0c <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4413      	add	r3, r2
 800a64a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a64c:	f7f8 fc5e 	bl	8002f0c <HAL_GetTick>
 800a650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a652:	4b39      	ldr	r3, [pc, #228]	; (800a738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	015b      	lsls	r3, r3, #5
 800a658:	0d1b      	lsrs	r3, r3, #20
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a662:	e054      	b.n	800a70e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66a:	d050      	beq.n	800a70e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a66c:	f7f8 fc4e 	bl	8002f0c <HAL_GetTick>
 800a670:	4602      	mov	r2, r0
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d902      	bls.n	800a682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d13d      	bne.n	800a6fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a69a:	d111      	bne.n	800a6c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6a4:	d004      	beq.n	800a6b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6ae:	d107      	bne.n	800a6c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c8:	d10f      	bne.n	800a6ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e017      	b.n	800a72e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a704:	2300      	movs	r3, #0
 800a706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4013      	ands	r3, r2
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	bf0c      	ite	eq
 800a71e:	2301      	moveq	r3, #1
 800a720:	2300      	movne	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d19b      	bne.n	800a664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3720      	adds	r7, #32
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20000008 	.word	0x20000008

0800a73c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08a      	sub	sp, #40	; 0x28
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a74e:	f7f8 fbdd 	bl	8002f0c <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a756:	1a9b      	subs	r3, r3, r2
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	4413      	add	r3, r2
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a75e:	f7f8 fbd5 	bl	8002f0c <HAL_GetTick>
 800a762:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	330c      	adds	r3, #12
 800a76a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a76c:	4b3d      	ldr	r3, [pc, #244]	; (800a864 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	4613      	mov	r3, r2
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	00da      	lsls	r2, r3, #3
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	0d1b      	lsrs	r3, r3, #20
 800a77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77e:	fb02 f303 	mul.w	r3, r2, r3
 800a782:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a784:	e060      	b.n	800a848 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a78c:	d107      	bne.n	800a79e <SPI_WaitFifoStateUntilTimeout+0x62>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d104      	bne.n	800a79e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d050      	beq.n	800a848 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a7a6:	f7f8 fbb1 	bl	8002f0c <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d902      	bls.n	800a7bc <SPI_WaitFifoStateUntilTimeout+0x80>
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d13d      	bne.n	800a838 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a7ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7d4:	d111      	bne.n	800a7fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7de:	d004      	beq.n	800a7ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7e8:	d107      	bne.n	800a7fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a802:	d10f      	bne.n	800a824 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a822:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e010      	b.n	800a85a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	3b01      	subs	r3, #1
 800a846:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	4013      	ands	r3, r2
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	429a      	cmp	r2, r3
 800a856:	d196      	bne.n	800a786 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3728      	adds	r7, #40	; 0x28
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000008 	.word	0x20000008

0800a868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af02      	add	r7, sp, #8
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff ff5b 	bl	800a73c <SPI_WaitFifoStateUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d007      	beq.n	800a89c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a890:	f043 0220 	orr.w	r2, r3, #32
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e027      	b.n	800a8ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2180      	movs	r1, #128	; 0x80
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7ff fec0 	bl	800a62c <SPI_WaitFlagStateUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d007      	beq.n	800a8c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8b6:	f043 0220 	orr.w	r2, r3, #32
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e014      	b.n	800a8ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f7ff ff34 	bl	800a73c <SPI_WaitFifoStateUntilTimeout>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d007      	beq.n	800a8ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8de:	f043 0220 	orr.w	r2, r3, #32
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e000      	b.n	800a8ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e049      	b.n	800a99a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d106      	bne.n	800a920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7fb f81a 	bl	8005954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3304      	adds	r3, #4
 800a930:	4619      	mov	r1, r3
 800a932:	4610      	mov	r0, r2
 800a934:	f000 fcd4 	bl	800b2e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
	...

0800a9a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d001      	beq.n	800a9bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e054      	b.n	800aa66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f042 0201 	orr.w	r2, r2, #1
 800a9d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a26      	ldr	r2, [pc, #152]	; (800aa74 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d022      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e6:	d01d      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a22      	ldr	r2, [pc, #136]	; (800aa78 <HAL_TIM_Base_Start_IT+0xd4>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d018      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a21      	ldr	r2, [pc, #132]	; (800aa7c <HAL_TIM_Base_Start_IT+0xd8>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d013      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00e      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a1e      	ldr	r2, [pc, #120]	; (800aa84 <HAL_TIM_Base_Start_IT+0xe0>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d009      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a1c      	ldr	r2, [pc, #112]	; (800aa88 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d004      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a1b      	ldr	r2, [pc, #108]	; (800aa8c <HAL_TIM_Base_Start_IT+0xe8>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d115      	bne.n	800aa50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689a      	ldr	r2, [r3, #8]
 800aa2a:	4b19      	ldr	r3, [pc, #100]	; (800aa90 <HAL_TIM_Base_Start_IT+0xec>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b06      	cmp	r3, #6
 800aa34:	d015      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0xbe>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa3c:	d011      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f042 0201 	orr.w	r2, r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4e:	e008      	b.n	800aa62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	e000      	b.n	800aa64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40012c00 	.word	0x40012c00
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00
 800aa84:	40013400 	.word	0x40013400
 800aa88:	40014000 	.word	0x40014000
 800aa8c:	40015000 	.word	0x40015000
 800aa90:	00010007 	.word	0x00010007

0800aa94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e049      	b.n	800ab3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fa ff2a 	bl	8005914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3304      	adds	r3, #4
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f000 fc04 	bl	800b2e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d109      	bne.n	800ab68 <HAL_TIM_PWM_Start+0x24>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	bf14      	ite	ne
 800ab60:	2301      	movne	r3, #1
 800ab62:	2300      	moveq	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	e03c      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d109      	bne.n	800ab82 <HAL_TIM_PWM_Start+0x3e>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	bf14      	ite	ne
 800ab7a:	2301      	movne	r3, #1
 800ab7c:	2300      	moveq	r3, #0
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	e02f      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d109      	bne.n	800ab9c <HAL_TIM_PWM_Start+0x58>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	bf14      	ite	ne
 800ab94:	2301      	movne	r3, #1
 800ab96:	2300      	moveq	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	e022      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b0c      	cmp	r3, #12
 800aba0:	d109      	bne.n	800abb6 <HAL_TIM_PWM_Start+0x72>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b01      	cmp	r3, #1
 800abac:	bf14      	ite	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	2300      	moveq	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	e015      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b10      	cmp	r3, #16
 800abba:	d109      	bne.n	800abd0 <HAL_TIM_PWM_Start+0x8c>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	bf14      	ite	ne
 800abc8:	2301      	movne	r3, #1
 800abca:	2300      	moveq	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	e008      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b01      	cmp	r3, #1
 800abda:	bf14      	ite	ne
 800abdc:	2301      	movne	r3, #1
 800abde:	2300      	moveq	r3, #0
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e0a6      	b.n	800ad38 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <HAL_TIM_PWM_Start+0xb6>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abf8:	e023      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d104      	bne.n	800ac0a <HAL_TIM_PWM_Start+0xc6>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac08:	e01b      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d104      	bne.n	800ac1a <HAL_TIM_PWM_Start+0xd6>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac18:	e013      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b0c      	cmp	r3, #12
 800ac1e:	d104      	bne.n	800ac2a <HAL_TIM_PWM_Start+0xe6>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac28:	e00b      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b10      	cmp	r3, #16
 800ac2e:	d104      	bne.n	800ac3a <HAL_TIM_PWM_Start+0xf6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac38:	e003      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2201      	movs	r2, #1
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 ff1a 	bl	800ba84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a3a      	ldr	r2, [pc, #232]	; (800ad40 <HAL_TIM_PWM_Start+0x1fc>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d018      	beq.n	800ac8c <HAL_TIM_PWM_Start+0x148>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a39      	ldr	r2, [pc, #228]	; (800ad44 <HAL_TIM_PWM_Start+0x200>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d013      	beq.n	800ac8c <HAL_TIM_PWM_Start+0x148>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a37      	ldr	r2, [pc, #220]	; (800ad48 <HAL_TIM_PWM_Start+0x204>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d00e      	beq.n	800ac8c <HAL_TIM_PWM_Start+0x148>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a36      	ldr	r2, [pc, #216]	; (800ad4c <HAL_TIM_PWM_Start+0x208>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d009      	beq.n	800ac8c <HAL_TIM_PWM_Start+0x148>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a34      	ldr	r2, [pc, #208]	; (800ad50 <HAL_TIM_PWM_Start+0x20c>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d004      	beq.n	800ac8c <HAL_TIM_PWM_Start+0x148>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a33      	ldr	r2, [pc, #204]	; (800ad54 <HAL_TIM_PWM_Start+0x210>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d101      	bne.n	800ac90 <HAL_TIM_PWM_Start+0x14c>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e000      	b.n	800ac92 <HAL_TIM_PWM_Start+0x14e>
 800ac90:	2300      	movs	r3, #0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d007      	beq.n	800aca6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aca4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a25      	ldr	r2, [pc, #148]	; (800ad40 <HAL_TIM_PWM_Start+0x1fc>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d022      	beq.n	800acf6 <HAL_TIM_PWM_Start+0x1b2>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb8:	d01d      	beq.n	800acf6 <HAL_TIM_PWM_Start+0x1b2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a26      	ldr	r2, [pc, #152]	; (800ad58 <HAL_TIM_PWM_Start+0x214>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d018      	beq.n	800acf6 <HAL_TIM_PWM_Start+0x1b2>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a24      	ldr	r2, [pc, #144]	; (800ad5c <HAL_TIM_PWM_Start+0x218>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <HAL_TIM_PWM_Start+0x1b2>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a23      	ldr	r2, [pc, #140]	; (800ad60 <HAL_TIM_PWM_Start+0x21c>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00e      	beq.n	800acf6 <HAL_TIM_PWM_Start+0x1b2>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a19      	ldr	r2, [pc, #100]	; (800ad44 <HAL_TIM_PWM_Start+0x200>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d009      	beq.n	800acf6 <HAL_TIM_PWM_Start+0x1b2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <HAL_TIM_PWM_Start+0x204>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d004      	beq.n	800acf6 <HAL_TIM_PWM_Start+0x1b2>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a18      	ldr	r2, [pc, #96]	; (800ad54 <HAL_TIM_PWM_Start+0x210>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d115      	bne.n	800ad22 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	4b19      	ldr	r3, [pc, #100]	; (800ad64 <HAL_TIM_PWM_Start+0x220>)
 800acfe:	4013      	ands	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b06      	cmp	r3, #6
 800ad06:	d015      	beq.n	800ad34 <HAL_TIM_PWM_Start+0x1f0>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad0e:	d011      	beq.n	800ad34 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0201 	orr.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad20:	e008      	b.n	800ad34 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f042 0201 	orr.w	r2, r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e000      	b.n	800ad36 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	40012c00 	.word	0x40012c00
 800ad44:	40013400 	.word	0x40013400
 800ad48:	40014000 	.word	0x40014000
 800ad4c:	40014400 	.word	0x40014400
 800ad50:	40014800 	.word	0x40014800
 800ad54:	40015000 	.word	0x40015000
 800ad58:	40000400 	.word	0x40000400
 800ad5c:	40000800 	.word	0x40000800
 800ad60:	40000c00 	.word	0x40000c00
 800ad64:	00010007 	.word	0x00010007

0800ad68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0302 	and.w	r3, r3, #2
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d122      	bne.n	800adc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0302 	and.w	r3, r3, #2
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d11b      	bne.n	800adc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0202 	mvn.w	r2, #2
 800ad94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa7a 	bl	800b2a4 <HAL_TIM_IC_CaptureCallback>
 800adb0:	e005      	b.n	800adbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fa6c 	bl	800b290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fa7d 	bl	800b2b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	f003 0304 	and.w	r3, r3, #4
 800adce:	2b04      	cmp	r3, #4
 800add0:	d122      	bne.n	800ae18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b04      	cmp	r3, #4
 800adde:	d11b      	bne.n	800ae18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f06f 0204 	mvn.w	r2, #4
 800ade8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2202      	movs	r2, #2
 800adee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fa50 	bl	800b2a4 <HAL_TIM_IC_CaptureCallback>
 800ae04:	e005      	b.n	800ae12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa42 	bl	800b290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fa53 	bl	800b2b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b08      	cmp	r3, #8
 800ae24:	d122      	bne.n	800ae6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f003 0308 	and.w	r3, r3, #8
 800ae30:	2b08      	cmp	r3, #8
 800ae32:	d11b      	bne.n	800ae6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f06f 0208 	mvn.w	r2, #8
 800ae3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2204      	movs	r2, #4
 800ae42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	69db      	ldr	r3, [r3, #28]
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fa26 	bl	800b2a4 <HAL_TIM_IC_CaptureCallback>
 800ae58:	e005      	b.n	800ae66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa18 	bl	800b290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fa29 	bl	800b2b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	f003 0310 	and.w	r3, r3, #16
 800ae76:	2b10      	cmp	r3, #16
 800ae78:	d122      	bne.n	800aec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f003 0310 	and.w	r3, r3, #16
 800ae84:	2b10      	cmp	r3, #16
 800ae86:	d11b      	bne.n	800aec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f06f 0210 	mvn.w	r2, #16
 800ae90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2208      	movs	r2, #8
 800ae96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f9fc 	bl	800b2a4 <HAL_TIM_IC_CaptureCallback>
 800aeac:	e005      	b.n	800aeba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f9ee 	bl	800b290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f9ff 	bl	800b2b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10e      	bne.n	800aeec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d107      	bne.n	800aeec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f06f 0201 	mvn.w	r2, #1
 800aee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7f8 f9c6 	bl	8003278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef6:	2b80      	cmp	r3, #128	; 0x80
 800aef8:	d10e      	bne.n	800af18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af04:	2b80      	cmp	r3, #128	; 0x80
 800af06:	d107      	bne.n	800af18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 fe7c 	bl	800bc10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af26:	d10e      	bne.n	800af46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af32:	2b80      	cmp	r3, #128	; 0x80
 800af34:	d107      	bne.n	800af46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fe6f 	bl	800bc24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b40      	cmp	r3, #64	; 0x40
 800af52:	d10e      	bne.n	800af72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5e:	2b40      	cmp	r3, #64	; 0x40
 800af60:	d107      	bne.n	800af72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f9ad 	bl	800b2cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f003 0320 	and.w	r3, r3, #32
 800af7c:	2b20      	cmp	r3, #32
 800af7e:	d10e      	bne.n	800af9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b20      	cmp	r3, #32
 800af8c:	d107      	bne.n	800af9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f06f 0220 	mvn.w	r2, #32
 800af96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fe2f 	bl	800bbfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afac:	d10f      	bne.n	800afce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afbc:	d107      	bne.n	800afce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800afc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fe35 	bl	800bc38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afdc:	d10f      	bne.n	800affe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afec:	d107      	bne.n	800affe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fe27 	bl	800bc4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b008:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b00c:	d10f      	bne.n	800b02e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b01c:	d107      	bne.n	800b02e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fe19 	bl	800bc60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b038:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b03c:	d10f      	bne.n	800b05e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b048:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b04c:	d107      	bne.n	800b05e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fe0b 	bl	800bc74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d101      	bne.n	800b086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b082:	2302      	movs	r3, #2
 800b084:	e0ff      	b.n	800b286 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b14      	cmp	r3, #20
 800b092:	f200 80f0 	bhi.w	800b276 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b096:	a201      	add	r2, pc, #4	; (adr r2, 800b09c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b277 	.word	0x0800b277
 800b0a4:	0800b277 	.word	0x0800b277
 800b0a8:	0800b277 	.word	0x0800b277
 800b0ac:	0800b131 	.word	0x0800b131
 800b0b0:	0800b277 	.word	0x0800b277
 800b0b4:	0800b277 	.word	0x0800b277
 800b0b8:	0800b277 	.word	0x0800b277
 800b0bc:	0800b173 	.word	0x0800b173
 800b0c0:	0800b277 	.word	0x0800b277
 800b0c4:	0800b277 	.word	0x0800b277
 800b0c8:	0800b277 	.word	0x0800b277
 800b0cc:	0800b1b3 	.word	0x0800b1b3
 800b0d0:	0800b277 	.word	0x0800b277
 800b0d4:	0800b277 	.word	0x0800b277
 800b0d8:	0800b277 	.word	0x0800b277
 800b0dc:	0800b1f5 	.word	0x0800b1f5
 800b0e0:	0800b277 	.word	0x0800b277
 800b0e4:	0800b277 	.word	0x0800b277
 800b0e8:	0800b277 	.word	0x0800b277
 800b0ec:	0800b235 	.word	0x0800b235
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68b9      	ldr	r1, [r7, #8]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 f99a 	bl	800b430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	699a      	ldr	r2, [r3, #24]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f042 0208 	orr.w	r2, r2, #8
 800b10a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	699a      	ldr	r2, [r3, #24]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f022 0204 	bic.w	r2, r2, #4
 800b11a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6999      	ldr	r1, [r3, #24]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	691a      	ldr	r2, [r3, #16]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	619a      	str	r2, [r3, #24]
      break;
 800b12e:	e0a5      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68b9      	ldr	r1, [r7, #8]
 800b136:	4618      	mov	r0, r3
 800b138:	f000 fa14 	bl	800b564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	699a      	ldr	r2, [r3, #24]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b14a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	699a      	ldr	r2, [r3, #24]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b15a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	6999      	ldr	r1, [r3, #24]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	021a      	lsls	r2, r3, #8
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	619a      	str	r2, [r3, #24]
      break;
 800b170:	e084      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fa87 	bl	800b68c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	69da      	ldr	r2, [r3, #28]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f042 0208 	orr.w	r2, r2, #8
 800b18c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69da      	ldr	r2, [r3, #28]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0204 	bic.w	r2, r2, #4
 800b19c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	69d9      	ldr	r1, [r3, #28]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	691a      	ldr	r2, [r3, #16]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	61da      	str	r2, [r3, #28]
      break;
 800b1b0:	e064      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68b9      	ldr	r1, [r7, #8]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 faf9 	bl	800b7b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69da      	ldr	r2, [r3, #28]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	69da      	ldr	r2, [r3, #28]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	69d9      	ldr	r1, [r3, #28]
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	021a      	lsls	r2, r3, #8
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	61da      	str	r2, [r3, #28]
      break;
 800b1f2:	e043      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	68b9      	ldr	r1, [r7, #8]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 fb6c 	bl	800b8d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f042 0208 	orr.w	r2, r2, #8
 800b20e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f022 0204 	bic.w	r2, r2, #4
 800b21e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	691a      	ldr	r2, [r3, #16]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	430a      	orrs	r2, r1
 800b230:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b232:	e023      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68b9      	ldr	r1, [r7, #8]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fbb6 	bl	800b9ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b24e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b25e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	021a      	lsls	r2, r3, #8
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	430a      	orrs	r2, r1
 800b272:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b274:	e002      	b.n	800b27c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	75fb      	strb	r3, [r7, #23]
      break;
 800b27a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b284:	7dfb      	ldrb	r3, [r7, #23]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop

0800b290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2ac:	bf00      	nop
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a46      	ldr	r2, [pc, #280]	; (800b40c <TIM_Base_SetConfig+0x12c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d017      	beq.n	800b328 <TIM_Base_SetConfig+0x48>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2fe:	d013      	beq.n	800b328 <TIM_Base_SetConfig+0x48>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a43      	ldr	r2, [pc, #268]	; (800b410 <TIM_Base_SetConfig+0x130>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d00f      	beq.n	800b328 <TIM_Base_SetConfig+0x48>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a42      	ldr	r2, [pc, #264]	; (800b414 <TIM_Base_SetConfig+0x134>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d00b      	beq.n	800b328 <TIM_Base_SetConfig+0x48>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a41      	ldr	r2, [pc, #260]	; (800b418 <TIM_Base_SetConfig+0x138>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d007      	beq.n	800b328 <TIM_Base_SetConfig+0x48>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a40      	ldr	r2, [pc, #256]	; (800b41c <TIM_Base_SetConfig+0x13c>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d003      	beq.n	800b328 <TIM_Base_SetConfig+0x48>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a3f      	ldr	r2, [pc, #252]	; (800b420 <TIM_Base_SetConfig+0x140>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d108      	bne.n	800b33a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	4313      	orrs	r3, r2
 800b338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a33      	ldr	r2, [pc, #204]	; (800b40c <TIM_Base_SetConfig+0x12c>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d023      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b348:	d01f      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a30      	ldr	r2, [pc, #192]	; (800b410 <TIM_Base_SetConfig+0x130>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d01b      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a2f      	ldr	r2, [pc, #188]	; (800b414 <TIM_Base_SetConfig+0x134>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d017      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a2e      	ldr	r2, [pc, #184]	; (800b418 <TIM_Base_SetConfig+0x138>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d013      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a2d      	ldr	r2, [pc, #180]	; (800b41c <TIM_Base_SetConfig+0x13c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00f      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a2d      	ldr	r2, [pc, #180]	; (800b424 <TIM_Base_SetConfig+0x144>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00b      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a2c      	ldr	r2, [pc, #176]	; (800b428 <TIM_Base_SetConfig+0x148>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d007      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a2b      	ldr	r2, [pc, #172]	; (800b42c <TIM_Base_SetConfig+0x14c>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d003      	beq.n	800b38a <TIM_Base_SetConfig+0xaa>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a26      	ldr	r2, [pc, #152]	; (800b420 <TIM_Base_SetConfig+0x140>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d108      	bne.n	800b39c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	4313      	orrs	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	689a      	ldr	r2, [r3, #8]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a12      	ldr	r2, [pc, #72]	; (800b40c <TIM_Base_SetConfig+0x12c>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d013      	beq.n	800b3f0 <TIM_Base_SetConfig+0x110>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a14      	ldr	r2, [pc, #80]	; (800b41c <TIM_Base_SetConfig+0x13c>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d00f      	beq.n	800b3f0 <TIM_Base_SetConfig+0x110>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a14      	ldr	r2, [pc, #80]	; (800b424 <TIM_Base_SetConfig+0x144>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00b      	beq.n	800b3f0 <TIM_Base_SetConfig+0x110>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a13      	ldr	r2, [pc, #76]	; (800b428 <TIM_Base_SetConfig+0x148>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d007      	beq.n	800b3f0 <TIM_Base_SetConfig+0x110>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a12      	ldr	r2, [pc, #72]	; (800b42c <TIM_Base_SetConfig+0x14c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d003      	beq.n	800b3f0 <TIM_Base_SetConfig+0x110>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a0d      	ldr	r2, [pc, #52]	; (800b420 <TIM_Base_SetConfig+0x140>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d103      	bne.n	800b3f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	691a      	ldr	r2, [r3, #16]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	615a      	str	r2, [r3, #20]
}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	40012c00 	.word	0x40012c00
 800b410:	40000400 	.word	0x40000400
 800b414:	40000800 	.word	0x40000800
 800b418:	40000c00 	.word	0x40000c00
 800b41c:	40013400 	.word	0x40013400
 800b420:	40015000 	.word	0x40015000
 800b424:	40014000 	.word	0x40014000
 800b428:	40014400 	.word	0x40014400
 800b42c:	40014800 	.word	0x40014800

0800b430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b430:	b480      	push	{r7}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	f023 0201 	bic.w	r2, r3, #1
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b45e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f023 0303 	bic.w	r3, r3, #3
 800b46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	4313      	orrs	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f023 0302 	bic.w	r3, r3, #2
 800b47c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	4313      	orrs	r3, r2
 800b486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a30      	ldr	r2, [pc, #192]	; (800b54c <TIM_OC1_SetConfig+0x11c>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d013      	beq.n	800b4b8 <TIM_OC1_SetConfig+0x88>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a2f      	ldr	r2, [pc, #188]	; (800b550 <TIM_OC1_SetConfig+0x120>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d00f      	beq.n	800b4b8 <TIM_OC1_SetConfig+0x88>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a2e      	ldr	r2, [pc, #184]	; (800b554 <TIM_OC1_SetConfig+0x124>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d00b      	beq.n	800b4b8 <TIM_OC1_SetConfig+0x88>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a2d      	ldr	r2, [pc, #180]	; (800b558 <TIM_OC1_SetConfig+0x128>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d007      	beq.n	800b4b8 <TIM_OC1_SetConfig+0x88>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a2c      	ldr	r2, [pc, #176]	; (800b55c <TIM_OC1_SetConfig+0x12c>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d003      	beq.n	800b4b8 <TIM_OC1_SetConfig+0x88>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a2b      	ldr	r2, [pc, #172]	; (800b560 <TIM_OC1_SetConfig+0x130>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d10c      	bne.n	800b4d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f023 0308 	bic.w	r3, r3, #8
 800b4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f023 0304 	bic.w	r3, r3, #4
 800b4d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a1d      	ldr	r2, [pc, #116]	; (800b54c <TIM_OC1_SetConfig+0x11c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d013      	beq.n	800b502 <TIM_OC1_SetConfig+0xd2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a1c      	ldr	r2, [pc, #112]	; (800b550 <TIM_OC1_SetConfig+0x120>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00f      	beq.n	800b502 <TIM_OC1_SetConfig+0xd2>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a1b      	ldr	r2, [pc, #108]	; (800b554 <TIM_OC1_SetConfig+0x124>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00b      	beq.n	800b502 <TIM_OC1_SetConfig+0xd2>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a1a      	ldr	r2, [pc, #104]	; (800b558 <TIM_OC1_SetConfig+0x128>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d007      	beq.n	800b502 <TIM_OC1_SetConfig+0xd2>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a19      	ldr	r2, [pc, #100]	; (800b55c <TIM_OC1_SetConfig+0x12c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d003      	beq.n	800b502 <TIM_OC1_SetConfig+0xd2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a18      	ldr	r2, [pc, #96]	; (800b560 <TIM_OC1_SetConfig+0x130>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d111      	bne.n	800b526 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	4313      	orrs	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	4313      	orrs	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	621a      	str	r2, [r3, #32]
}
 800b540:	bf00      	nop
 800b542:	371c      	adds	r7, #28
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	40012c00 	.word	0x40012c00
 800b550:	40013400 	.word	0x40013400
 800b554:	40014000 	.word	0x40014000
 800b558:	40014400 	.word	0x40014400
 800b55c:	40014800 	.word	0x40014800
 800b560:	40015000 	.word	0x40015000

0800b564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	f023 0210 	bic.w	r2, r3, #16
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	f023 0320 	bic.w	r3, r3, #32
 800b5b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a2c      	ldr	r2, [pc, #176]	; (800b674 <TIM_OC2_SetConfig+0x110>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d007      	beq.n	800b5d8 <TIM_OC2_SetConfig+0x74>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a2b      	ldr	r2, [pc, #172]	; (800b678 <TIM_OC2_SetConfig+0x114>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d003      	beq.n	800b5d8 <TIM_OC2_SetConfig+0x74>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a2a      	ldr	r2, [pc, #168]	; (800b67c <TIM_OC2_SetConfig+0x118>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d10d      	bne.n	800b5f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	011b      	lsls	r3, r3, #4
 800b5e6:	697a      	ldr	r2, [r7, #20]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a1f      	ldr	r2, [pc, #124]	; (800b674 <TIM_OC2_SetConfig+0x110>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d013      	beq.n	800b624 <TIM_OC2_SetConfig+0xc0>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a1e      	ldr	r2, [pc, #120]	; (800b678 <TIM_OC2_SetConfig+0x114>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d00f      	beq.n	800b624 <TIM_OC2_SetConfig+0xc0>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a1e      	ldr	r2, [pc, #120]	; (800b680 <TIM_OC2_SetConfig+0x11c>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d00b      	beq.n	800b624 <TIM_OC2_SetConfig+0xc0>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a1d      	ldr	r2, [pc, #116]	; (800b684 <TIM_OC2_SetConfig+0x120>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d007      	beq.n	800b624 <TIM_OC2_SetConfig+0xc0>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a1c      	ldr	r2, [pc, #112]	; (800b688 <TIM_OC2_SetConfig+0x124>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d003      	beq.n	800b624 <TIM_OC2_SetConfig+0xc0>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a17      	ldr	r2, [pc, #92]	; (800b67c <TIM_OC2_SetConfig+0x118>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d113      	bne.n	800b64c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b62a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	695b      	ldr	r3, [r3, #20]
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	693a      	ldr	r2, [r7, #16]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	4313      	orrs	r3, r2
 800b64a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	685a      	ldr	r2, [r3, #4]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	621a      	str	r2, [r3, #32]
}
 800b666:	bf00      	nop
 800b668:	371c      	adds	r7, #28
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	40012c00 	.word	0x40012c00
 800b678:	40013400 	.word	0x40013400
 800b67c:	40015000 	.word	0x40015000
 800b680:	40014000 	.word	0x40014000
 800b684:	40014400 	.word	0x40014400
 800b688:	40014800 	.word	0x40014800

0800b68c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f023 0303 	bic.w	r3, r3, #3
 800b6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	021b      	lsls	r3, r3, #8
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a2b      	ldr	r2, [pc, #172]	; (800b798 <TIM_OC3_SetConfig+0x10c>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d007      	beq.n	800b6fe <TIM_OC3_SetConfig+0x72>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a2a      	ldr	r2, [pc, #168]	; (800b79c <TIM_OC3_SetConfig+0x110>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d003      	beq.n	800b6fe <TIM_OC3_SetConfig+0x72>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a29      	ldr	r2, [pc, #164]	; (800b7a0 <TIM_OC3_SetConfig+0x114>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d10d      	bne.n	800b71a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	021b      	lsls	r3, r3, #8
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	4313      	orrs	r3, r2
 800b710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a1e      	ldr	r2, [pc, #120]	; (800b798 <TIM_OC3_SetConfig+0x10c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d013      	beq.n	800b74a <TIM_OC3_SetConfig+0xbe>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a1d      	ldr	r2, [pc, #116]	; (800b79c <TIM_OC3_SetConfig+0x110>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d00f      	beq.n	800b74a <TIM_OC3_SetConfig+0xbe>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a1d      	ldr	r2, [pc, #116]	; (800b7a4 <TIM_OC3_SetConfig+0x118>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d00b      	beq.n	800b74a <TIM_OC3_SetConfig+0xbe>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a1c      	ldr	r2, [pc, #112]	; (800b7a8 <TIM_OC3_SetConfig+0x11c>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d007      	beq.n	800b74a <TIM_OC3_SetConfig+0xbe>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a1b      	ldr	r2, [pc, #108]	; (800b7ac <TIM_OC3_SetConfig+0x120>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d003      	beq.n	800b74a <TIM_OC3_SetConfig+0xbe>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a16      	ldr	r2, [pc, #88]	; (800b7a0 <TIM_OC3_SetConfig+0x114>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d113      	bne.n	800b772 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	011b      	lsls	r3, r3, #4
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	4313      	orrs	r3, r2
 800b764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	699b      	ldr	r3, [r3, #24]
 800b76a:	011b      	lsls	r3, r3, #4
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	4313      	orrs	r3, r2
 800b770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	621a      	str	r2, [r3, #32]
}
 800b78c:	bf00      	nop
 800b78e:	371c      	adds	r7, #28
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	40012c00 	.word	0x40012c00
 800b79c:	40013400 	.word	0x40013400
 800b7a0:	40015000 	.word	0x40015000
 800b7a4:	40014000 	.word	0x40014000
 800b7a8:	40014400 	.word	0x40014400
 800b7ac:	40014800 	.word	0x40014800

0800b7b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	69db      	ldr	r3, [r3, #28]
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	031b      	lsls	r3, r3, #12
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	4313      	orrs	r3, r2
 800b80a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a2c      	ldr	r2, [pc, #176]	; (800b8c0 <TIM_OC4_SetConfig+0x110>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d007      	beq.n	800b824 <TIM_OC4_SetConfig+0x74>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a2b      	ldr	r2, [pc, #172]	; (800b8c4 <TIM_OC4_SetConfig+0x114>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d003      	beq.n	800b824 <TIM_OC4_SetConfig+0x74>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a2a      	ldr	r2, [pc, #168]	; (800b8c8 <TIM_OC4_SetConfig+0x118>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d10d      	bne.n	800b840 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b82a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	031b      	lsls	r3, r3, #12
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	4313      	orrs	r3, r2
 800b836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b83e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a1f      	ldr	r2, [pc, #124]	; (800b8c0 <TIM_OC4_SetConfig+0x110>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d013      	beq.n	800b870 <TIM_OC4_SetConfig+0xc0>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a1e      	ldr	r2, [pc, #120]	; (800b8c4 <TIM_OC4_SetConfig+0x114>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d00f      	beq.n	800b870 <TIM_OC4_SetConfig+0xc0>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a1e      	ldr	r2, [pc, #120]	; (800b8cc <TIM_OC4_SetConfig+0x11c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d00b      	beq.n	800b870 <TIM_OC4_SetConfig+0xc0>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a1d      	ldr	r2, [pc, #116]	; (800b8d0 <TIM_OC4_SetConfig+0x120>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d007      	beq.n	800b870 <TIM_OC4_SetConfig+0xc0>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a1c      	ldr	r2, [pc, #112]	; (800b8d4 <TIM_OC4_SetConfig+0x124>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d003      	beq.n	800b870 <TIM_OC4_SetConfig+0xc0>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a17      	ldr	r2, [pc, #92]	; (800b8c8 <TIM_OC4_SetConfig+0x118>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d113      	bne.n	800b898 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b876:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b87e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	019b      	lsls	r3, r3, #6
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	4313      	orrs	r3, r2
 800b88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	019b      	lsls	r3, r3, #6
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	4313      	orrs	r3, r2
 800b896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	621a      	str	r2, [r3, #32]
}
 800b8b2:	bf00      	nop
 800b8b4:	371c      	adds	r7, #28
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	40012c00 	.word	0x40012c00
 800b8c4:	40013400 	.word	0x40013400
 800b8c8:	40015000 	.word	0x40015000
 800b8cc:	40014000 	.word	0x40014000
 800b8d0:	40014400 	.word	0x40014400
 800b8d4:	40014800 	.word	0x40014800

0800b8d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b91c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	041b      	lsls	r3, r3, #16
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	4313      	orrs	r3, r2
 800b928:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a19      	ldr	r2, [pc, #100]	; (800b994 <TIM_OC5_SetConfig+0xbc>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d013      	beq.n	800b95a <TIM_OC5_SetConfig+0x82>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a18      	ldr	r2, [pc, #96]	; (800b998 <TIM_OC5_SetConfig+0xc0>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00f      	beq.n	800b95a <TIM_OC5_SetConfig+0x82>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a17      	ldr	r2, [pc, #92]	; (800b99c <TIM_OC5_SetConfig+0xc4>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00b      	beq.n	800b95a <TIM_OC5_SetConfig+0x82>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a16      	ldr	r2, [pc, #88]	; (800b9a0 <TIM_OC5_SetConfig+0xc8>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d007      	beq.n	800b95a <TIM_OC5_SetConfig+0x82>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <TIM_OC5_SetConfig+0xcc>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d003      	beq.n	800b95a <TIM_OC5_SetConfig+0x82>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <TIM_OC5_SetConfig+0xd0>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d109      	bne.n	800b96e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	021b      	lsls	r3, r3, #8
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	621a      	str	r2, [r3, #32]
}
 800b988:	bf00      	nop
 800b98a:	371c      	adds	r7, #28
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	40012c00 	.word	0x40012c00
 800b998:	40013400 	.word	0x40013400
 800b99c:	40014000 	.word	0x40014000
 800b9a0:	40014400 	.word	0x40014400
 800b9a4:	40014800 	.word	0x40014800
 800b9a8:	40015000 	.word	0x40015000

0800b9ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	021b      	lsls	r3, r3, #8
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	051b      	lsls	r3, r3, #20
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a1a      	ldr	r2, [pc, #104]	; (800ba6c <TIM_OC6_SetConfig+0xc0>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d013      	beq.n	800ba30 <TIM_OC6_SetConfig+0x84>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a19      	ldr	r2, [pc, #100]	; (800ba70 <TIM_OC6_SetConfig+0xc4>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d00f      	beq.n	800ba30 <TIM_OC6_SetConfig+0x84>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a18      	ldr	r2, [pc, #96]	; (800ba74 <TIM_OC6_SetConfig+0xc8>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00b      	beq.n	800ba30 <TIM_OC6_SetConfig+0x84>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a17      	ldr	r2, [pc, #92]	; (800ba78 <TIM_OC6_SetConfig+0xcc>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d007      	beq.n	800ba30 <TIM_OC6_SetConfig+0x84>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a16      	ldr	r2, [pc, #88]	; (800ba7c <TIM_OC6_SetConfig+0xd0>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d003      	beq.n	800ba30 <TIM_OC6_SetConfig+0x84>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a15      	ldr	r2, [pc, #84]	; (800ba80 <TIM_OC6_SetConfig+0xd4>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d109      	bne.n	800ba44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	029b      	lsls	r3, r3, #10
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	621a      	str	r2, [r3, #32]
}
 800ba5e:	bf00      	nop
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	40012c00 	.word	0x40012c00
 800ba70:	40013400 	.word	0x40013400
 800ba74:	40014000 	.word	0x40014000
 800ba78:	40014400 	.word	0x40014400
 800ba7c:	40014800 	.word	0x40014800
 800ba80:	40015000 	.word	0x40015000

0800ba84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f003 031f 	and.w	r3, r3, #31
 800ba96:	2201      	movs	r2, #1
 800ba98:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6a1a      	ldr	r2, [r3, #32]
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	43db      	mvns	r3, r3
 800baa6:	401a      	ands	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a1a      	ldr	r2, [r3, #32]
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f003 031f 	and.w	r3, r3, #31
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	fa01 f303 	lsl.w	r3, r1, r3
 800babc:	431a      	orrs	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	621a      	str	r2, [r3, #32]
}
 800bac2:	bf00      	nop
 800bac4:	371c      	adds	r7, #28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr
	...

0800bad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d101      	bne.n	800bae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bae4:	2302      	movs	r3, #2
 800bae6:	e074      	b.n	800bbd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2202      	movs	r2, #2
 800baf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a34      	ldr	r2, [pc, #208]	; (800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d009      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a33      	ldr	r2, [pc, #204]	; (800bbe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d004      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a31      	ldr	r2, [pc, #196]	; (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d108      	bne.n	800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800bb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a21      	ldr	r2, [pc, #132]	; (800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d022      	beq.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb68:	d01d      	beq.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a1f      	ldr	r2, [pc, #124]	; (800bbec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d018      	beq.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a1d      	ldr	r2, [pc, #116]	; (800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d013      	beq.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a1c      	ldr	r2, [pc, #112]	; (800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d00e      	beq.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a15      	ldr	r2, [pc, #84]	; (800bbe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d009      	beq.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a18      	ldr	r2, [pc, #96]	; (800bbf8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d004      	beq.n	800bba6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a11      	ldr	r2, [pc, #68]	; (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d10c      	bne.n	800bbc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3714      	adds	r7, #20
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	40012c00 	.word	0x40012c00
 800bbe4:	40013400 	.word	0x40013400
 800bbe8:	40015000 	.word	0x40015000
 800bbec:	40000400 	.word	0x40000400
 800bbf0:	40000800 	.word	0x40000800
 800bbf4:	40000c00 	.word	0x40000c00
 800bbf8:	40014000 	.word	0x40014000

0800bbfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d101      	bne.n	800bc9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e042      	b.n	800bd20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d106      	bne.n	800bcb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7f9 ff99 	bl	8005be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2224      	movs	r2, #36	; 0x24
 800bcb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0201 	bic.w	r2, r2, #1
 800bcc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fc5a 	bl	800c584 <UART_SetConfig>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d101      	bne.n	800bcda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e022      	b.n	800bd20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 ff4a 	bl	800cb7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689a      	ldr	r2, [r3, #8]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 ffd1 	bl	800ccc0 <UART_CheckIdleState>
 800bd1e:	4603      	mov	r3, r0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	603b      	str	r3, [r7, #0]
 800bd34:	4613      	mov	r3, r2
 800bd36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd3e:	2b20      	cmp	r3, #32
 800bd40:	f040 8083 	bne.w	800be4a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d002      	beq.n	800bd50 <HAL_UART_Transmit+0x28>
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d101      	bne.n	800bd54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e07b      	b.n	800be4c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d101      	bne.n	800bd62 <HAL_UART_Transmit+0x3a>
 800bd5e:	2302      	movs	r3, #2
 800bd60:	e074      	b.n	800be4c <HAL_UART_Transmit+0x124>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2221      	movs	r2, #33	; 0x21
 800bd76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd7a:	f7f7 f8c7 	bl	8002f0c <HAL_GetTick>
 800bd7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	88fa      	ldrh	r2, [r7, #6]
 800bd84:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	88fa      	ldrh	r2, [r7, #6]
 800bd8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd98:	d108      	bne.n	800bdac <HAL_UART_Transmit+0x84>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d104      	bne.n	800bdac <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	61bb      	str	r3, [r7, #24]
 800bdaa:	e003      	b.n	800bdb4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bdbc:	e02c      	b.n	800be18 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2180      	movs	r1, #128	; 0x80
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 ffc4 	bl	800cd56 <UART_WaitOnFlagUntilTimeout>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e039      	b.n	800be4c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10b      	bne.n	800bdf6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	3302      	adds	r3, #2
 800bdf2:	61bb      	str	r3, [r7, #24]
 800bdf4:	e007      	b.n	800be06 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	781a      	ldrb	r2, [r3, #0]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	3301      	adds	r3, #1
 800be04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	3b01      	subs	r3, #1
 800be10:	b29a      	uxth	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be1e:	b29b      	uxth	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d1cc      	bne.n	800bdbe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	2200      	movs	r2, #0
 800be2c:	2140      	movs	r1, #64	; 0x40
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 ff91 	bl	800cd56 <UART_WaitOnFlagUntilTimeout>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e006      	b.n	800be4c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2220      	movs	r2, #32
 800be42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	e000      	b.n	800be4c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800be4a:	2302      	movs	r3, #2
  }
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4613      	mov	r3, r2
 800be60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be68:	2b20      	cmp	r3, #32
 800be6a:	d142      	bne.n	800bef2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <HAL_UART_Receive_DMA+0x24>
 800be72:	88fb      	ldrh	r3, [r7, #6]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	e03b      	b.n	800bef4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be82:	2b01      	cmp	r3, #1
 800be84:	d101      	bne.n	800be8a <HAL_UART_Receive_DMA+0x36>
 800be86:	2302      	movs	r3, #2
 800be88:	e034      	b.n	800bef4 <HAL_UART_Receive_DMA+0xa0>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a17      	ldr	r2, [pc, #92]	; (800befc <HAL_UART_Receive_DMA+0xa8>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d01f      	beq.n	800bee2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d018      	beq.n	800bee2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	613b      	str	r3, [r7, #16]
   return(result);
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bec4:	627b      	str	r3, [r7, #36]	; 0x24
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	623b      	str	r3, [r7, #32]
 800bed0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	69f9      	ldr	r1, [r7, #28]
 800bed4:	6a3a      	ldr	r2, [r7, #32]
 800bed6:	e841 2300 	strex	r3, r2, [r1]
 800beda:	61bb      	str	r3, [r7, #24]
   return(result);
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e6      	bne.n	800beb0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bee2:	88fb      	ldrh	r3, [r7, #6]
 800bee4:	461a      	mov	r2, r3
 800bee6:	68b9      	ldr	r1, [r7, #8]
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 fffd 	bl	800cee8 <UART_Start_Receive_DMA>
 800beee:	4603      	mov	r3, r0
 800bef0:	e000      	b.n	800bef4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bef2:	2302      	movs	r3, #2
  }
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3728      	adds	r7, #40	; 0x28
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	40008000 	.word	0x40008000

0800bf00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b0ba      	sub	sp, #232	; 0xe8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bf26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bf2a:	f640 030f 	movw	r3, #2063	; 0x80f
 800bf2e:	4013      	ands	r3, r2
 800bf30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bf34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d11b      	bne.n	800bf74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf40:	f003 0320 	and.w	r3, r3, #32
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d015      	beq.n	800bf74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf4c:	f003 0320 	and.w	r3, r3, #32
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d105      	bne.n	800bf60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d009      	beq.n	800bf74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 82d6 	beq.w	800c516 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	4798      	blx	r3
      }
      return;
 800bf72:	e2d0      	b.n	800c516 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bf74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f000 811f 	beq.w	800c1bc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bf7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bf82:	4b8b      	ldr	r3, [pc, #556]	; (800c1b0 <HAL_UART_IRQHandler+0x2b0>)
 800bf84:	4013      	ands	r3, r2
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d106      	bne.n	800bf98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bf8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf8e:	4b89      	ldr	r3, [pc, #548]	; (800c1b4 <HAL_UART_IRQHandler+0x2b4>)
 800bf90:	4013      	ands	r3, r2
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 8112 	beq.w	800c1bc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d011      	beq.n	800bfc8 <HAL_UART_IRQHandler+0xc8>
 800bfa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00b      	beq.n	800bfc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfbe:	f043 0201 	orr.w	r2, r3, #1
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfcc:	f003 0302 	and.w	r3, r3, #2
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d011      	beq.n	800bff8 <HAL_UART_IRQHandler+0xf8>
 800bfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfee:	f043 0204 	orr.w	r2, r3, #4
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bffc:	f003 0304 	and.w	r3, r3, #4
 800c000:	2b00      	cmp	r3, #0
 800c002:	d011      	beq.n	800c028 <HAL_UART_IRQHandler+0x128>
 800c004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00b      	beq.n	800c028 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2204      	movs	r2, #4
 800c016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c01e:	f043 0202 	orr.w	r2, r3, #2
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c02c:	f003 0308 	and.w	r3, r3, #8
 800c030:	2b00      	cmp	r3, #0
 800c032:	d017      	beq.n	800c064 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c038:	f003 0320 	and.w	r3, r3, #32
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d105      	bne.n	800c04c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c040:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c044:	4b5a      	ldr	r3, [pc, #360]	; (800c1b0 <HAL_UART_IRQHandler+0x2b0>)
 800c046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2208      	movs	r2, #8
 800c052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c05a:	f043 0208 	orr.w	r2, r3, #8
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d012      	beq.n	800c096 <HAL_UART_IRQHandler+0x196>
 800c070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00c      	beq.n	800c096 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c084:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c08c:	f043 0220 	orr.w	r2, r3, #32
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f000 823c 	beq.w	800c51a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a6:	f003 0320 	and.w	r3, r3, #32
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d013      	beq.n	800c0d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d105      	bne.n	800c0c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d007      	beq.n	800c0d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ea:	2b40      	cmp	r3, #64	; 0x40
 800c0ec:	d005      	beq.n	800c0fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c0ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c0f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d04f      	beq.n	800c19a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 ffdd 	bl	800d0ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c10a:	2b40      	cmp	r3, #64	; 0x40
 800c10c:	d141      	bne.n	800c192 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3308      	adds	r3, #8
 800c114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c12c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3308      	adds	r3, #8
 800c136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c13a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c13e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d1d9      	bne.n	800c10e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d013      	beq.n	800c18a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c166:	4a14      	ldr	r2, [pc, #80]	; (800c1b8 <HAL_UART_IRQHandler+0x2b8>)
 800c168:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fb fd52 	bl	8007c18 <HAL_DMA_Abort_IT>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d017      	beq.n	800c1aa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c184:	4610      	mov	r0, r2
 800c186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c188:	e00f      	b.n	800c1aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f9e4 	bl	800c558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c190:	e00b      	b.n	800c1aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f9e0 	bl	800c558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c198:	e007      	b.n	800c1aa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f9dc 	bl	800c558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c1a8:	e1b7      	b.n	800c51a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1aa:	bf00      	nop
    return;
 800c1ac:	e1b5      	b.n	800c51a <HAL_UART_IRQHandler+0x61a>
 800c1ae:	bf00      	nop
 800c1b0:	10000001 	.word	0x10000001
 800c1b4:	04000120 	.word	0x04000120
 800c1b8:	0800d365 	.word	0x0800d365

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	f040 814a 	bne.w	800c45a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c1c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ca:	f003 0310 	and.w	r3, r3, #16
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f000 8143 	beq.w	800c45a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d8:	f003 0310 	and.w	r3, r3, #16
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 813c 	beq.w	800c45a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2210      	movs	r2, #16
 800c1e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f4:	2b40      	cmp	r3, #64	; 0x40
 800c1f6:	f040 80b5 	bne.w	800c364 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c206:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 8187 	beq.w	800c51e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c21a:	429a      	cmp	r2, r3
 800c21c:	f080 817f 	bcs.w	800c51e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c226:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 0320 	and.w	r3, r3, #32
 800c236:	2b00      	cmp	r3, #0
 800c238:	f040 8086 	bne.w	800c348 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c248:	e853 3f00 	ldrex	r3, [r3]
 800c24c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	461a      	mov	r2, r3
 800c262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c26a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c276:	e841 2300 	strex	r3, r2, [r1]
 800c27a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c27e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1da      	bne.n	800c23c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3308      	adds	r3, #8
 800c28c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c290:	e853 3f00 	ldrex	r3, [r3]
 800c294:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c298:	f023 0301 	bic.w	r3, r3, #1
 800c29c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3308      	adds	r3, #8
 800c2a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c2aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c2ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2b6:	e841 2300 	strex	r3, r2, [r1]
 800c2ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1e1      	bne.n	800c286 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2cc:	e853 3f00 	ldrex	r3, [r3]
 800c2d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c2d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3308      	adds	r3, #8
 800c2e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c2e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c2e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c2ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e3      	bne.n	800c2c2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c310:	e853 3f00 	ldrex	r3, [r3]
 800c314:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c318:	f023 0310 	bic.w	r3, r3, #16
 800c31c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	461a      	mov	r2, r3
 800c326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c32a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c32c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e4      	bne.n	800c308 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c342:	4618      	mov	r0, r3
 800c344:	f7fb fc0f 	bl	8007b66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c354:	b29b      	uxth	r3, r3
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	b29b      	uxth	r3, r3
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f905 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c362:	e0dc      	b.n	800c51e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c370:	b29b      	uxth	r3, r3
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c37e:	b29b      	uxth	r3, r3
 800c380:	2b00      	cmp	r3, #0
 800c382:	f000 80ce 	beq.w	800c522 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800c386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80c9 	beq.w	800c522 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	e853 3f00 	ldrex	r3, [r3]
 800c39c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c3b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e4      	bne.n	800c390 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3308      	adds	r3, #8
 800c3cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	e853 3f00 	ldrex	r3, [r3]
 800c3d4:	623b      	str	r3, [r7, #32]
   return(result);
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3dc:	f023 0301 	bic.w	r3, r3, #1
 800c3e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c3ee:	633a      	str	r2, [r7, #48]	; 0x30
 800c3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3f6:	e841 2300 	strex	r3, r2, [r1]
 800c3fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1e1      	bne.n	800c3c6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2220      	movs	r2, #32
 800c406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	e853 3f00 	ldrex	r3, [r3]
 800c422:	60fb      	str	r3, [r7, #12]
   return(result);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f023 0310 	bic.w	r3, r3, #16
 800c42a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c438:	61fb      	str	r3, [r7, #28]
 800c43a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	69b9      	ldr	r1, [r7, #24]
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	617b      	str	r3, [r7, #20]
   return(result);
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e4      	bne.n	800c416 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c44c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c450:	4619      	mov	r1, r3
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 f88a 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c458:	e063      	b.n	800c522 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c45e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00e      	beq.n	800c484 <HAL_UART_IRQHandler+0x584>
 800c466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c46a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d008      	beq.n	800c484 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c47a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 ffb2 	bl	800d3e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c482:	e051      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d014      	beq.n	800c4ba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d105      	bne.n	800c4a8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d008      	beq.n	800c4ba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d03a      	beq.n	800c526 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	4798      	blx	r3
    }
    return;
 800c4b8:	e035      	b.n	800c526 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d009      	beq.n	800c4da <HAL_UART_IRQHandler+0x5da>
 800c4c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 ff5c 	bl	800d390 <UART_EndTransmit_IT>
    return;
 800c4d8:	e026      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c4da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d009      	beq.n	800c4fa <HAL_UART_IRQHandler+0x5fa>
 800c4e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d003      	beq.n	800c4fa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 ff8b 	bl	800d40e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c4f8:	e016      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d010      	beq.n	800c528 <HAL_UART_IRQHandler+0x628>
 800c506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da0c      	bge.n	800c528 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 ff73 	bl	800d3fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c514:	e008      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
      return;
 800c516:	bf00      	nop
 800c518:	e006      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
    return;
 800c51a:	bf00      	nop
 800c51c:	e004      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
      return;
 800c51e:	bf00      	nop
 800c520:	e002      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
      return;
 800c522:	bf00      	nop
 800c524:	e000      	b.n	800c528 <HAL_UART_IRQHandler+0x628>
    return;
 800c526:	bf00      	nop
  }
}
 800c528:	37e8      	adds	r7, #232	; 0xe8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop

0800c530 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c588:	b08c      	sub	sp, #48	; 0x30
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	691b      	ldr	r3, [r3, #16]
 800c59c:	431a      	orrs	r2, r3
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	69db      	ldr	r3, [r3, #28]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	4baa      	ldr	r3, [pc, #680]	; (800c85c <UART_SetConfig+0x2d8>)
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	6812      	ldr	r2, [r2, #0]
 800c5ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	68da      	ldr	r2, [r3, #12]
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	430a      	orrs	r2, r1
 800c5d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a9f      	ldr	r2, [pc, #636]	; (800c860 <UART_SetConfig+0x2dc>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d004      	beq.n	800c5f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c5fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	6812      	ldr	r2, [r2, #0]
 800c602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c604:	430b      	orrs	r3, r1
 800c606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60e:	f023 010f 	bic.w	r1, r3, #15
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a90      	ldr	r2, [pc, #576]	; (800c864 <UART_SetConfig+0x2e0>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d125      	bne.n	800c674 <UART_SetConfig+0xf0>
 800c628:	4b8f      	ldr	r3, [pc, #572]	; (800c868 <UART_SetConfig+0x2e4>)
 800c62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	2b03      	cmp	r3, #3
 800c634:	d81a      	bhi.n	800c66c <UART_SetConfig+0xe8>
 800c636:	a201      	add	r2, pc, #4	; (adr r2, 800c63c <UART_SetConfig+0xb8>)
 800c638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63c:	0800c64d 	.word	0x0800c64d
 800c640:	0800c65d 	.word	0x0800c65d
 800c644:	0800c655 	.word	0x0800c655
 800c648:	0800c665 	.word	0x0800c665
 800c64c:	2301      	movs	r3, #1
 800c64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c652:	e116      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c654:	2302      	movs	r3, #2
 800c656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c65a:	e112      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c65c:	2304      	movs	r3, #4
 800c65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c662:	e10e      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c664:	2308      	movs	r3, #8
 800c666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c66a:	e10a      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c66c:	2310      	movs	r3, #16
 800c66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c672:	e106      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a7c      	ldr	r2, [pc, #496]	; (800c86c <UART_SetConfig+0x2e8>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d138      	bne.n	800c6f0 <UART_SetConfig+0x16c>
 800c67e:	4b7a      	ldr	r3, [pc, #488]	; (800c868 <UART_SetConfig+0x2e4>)
 800c680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c684:	f003 030c 	and.w	r3, r3, #12
 800c688:	2b0c      	cmp	r3, #12
 800c68a:	d82d      	bhi.n	800c6e8 <UART_SetConfig+0x164>
 800c68c:	a201      	add	r2, pc, #4	; (adr r2, 800c694 <UART_SetConfig+0x110>)
 800c68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c692:	bf00      	nop
 800c694:	0800c6c9 	.word	0x0800c6c9
 800c698:	0800c6e9 	.word	0x0800c6e9
 800c69c:	0800c6e9 	.word	0x0800c6e9
 800c6a0:	0800c6e9 	.word	0x0800c6e9
 800c6a4:	0800c6d9 	.word	0x0800c6d9
 800c6a8:	0800c6e9 	.word	0x0800c6e9
 800c6ac:	0800c6e9 	.word	0x0800c6e9
 800c6b0:	0800c6e9 	.word	0x0800c6e9
 800c6b4:	0800c6d1 	.word	0x0800c6d1
 800c6b8:	0800c6e9 	.word	0x0800c6e9
 800c6bc:	0800c6e9 	.word	0x0800c6e9
 800c6c0:	0800c6e9 	.word	0x0800c6e9
 800c6c4:	0800c6e1 	.word	0x0800c6e1
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6ce:	e0d8      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6d6:	e0d4      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c6d8:	2304      	movs	r3, #4
 800c6da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6de:	e0d0      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c6e0:	2308      	movs	r3, #8
 800c6e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6e6:	e0cc      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c6e8:	2310      	movs	r3, #16
 800c6ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c6ee:	e0c8      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a5e      	ldr	r2, [pc, #376]	; (800c870 <UART_SetConfig+0x2ec>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d125      	bne.n	800c746 <UART_SetConfig+0x1c2>
 800c6fa:	4b5b      	ldr	r3, [pc, #364]	; (800c868 <UART_SetConfig+0x2e4>)
 800c6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c704:	2b30      	cmp	r3, #48	; 0x30
 800c706:	d016      	beq.n	800c736 <UART_SetConfig+0x1b2>
 800c708:	2b30      	cmp	r3, #48	; 0x30
 800c70a:	d818      	bhi.n	800c73e <UART_SetConfig+0x1ba>
 800c70c:	2b20      	cmp	r3, #32
 800c70e:	d00a      	beq.n	800c726 <UART_SetConfig+0x1a2>
 800c710:	2b20      	cmp	r3, #32
 800c712:	d814      	bhi.n	800c73e <UART_SetConfig+0x1ba>
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <UART_SetConfig+0x19a>
 800c718:	2b10      	cmp	r3, #16
 800c71a:	d008      	beq.n	800c72e <UART_SetConfig+0x1aa>
 800c71c:	e00f      	b.n	800c73e <UART_SetConfig+0x1ba>
 800c71e:	2300      	movs	r3, #0
 800c720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c724:	e0ad      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c726:	2302      	movs	r3, #2
 800c728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c72c:	e0a9      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c72e:	2304      	movs	r3, #4
 800c730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c734:	e0a5      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c736:	2308      	movs	r3, #8
 800c738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c73c:	e0a1      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c73e:	2310      	movs	r3, #16
 800c740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c744:	e09d      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a4a      	ldr	r2, [pc, #296]	; (800c874 <UART_SetConfig+0x2f0>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d125      	bne.n	800c79c <UART_SetConfig+0x218>
 800c750:	4b45      	ldr	r3, [pc, #276]	; (800c868 <UART_SetConfig+0x2e4>)
 800c752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c75a:	2bc0      	cmp	r3, #192	; 0xc0
 800c75c:	d016      	beq.n	800c78c <UART_SetConfig+0x208>
 800c75e:	2bc0      	cmp	r3, #192	; 0xc0
 800c760:	d818      	bhi.n	800c794 <UART_SetConfig+0x210>
 800c762:	2b80      	cmp	r3, #128	; 0x80
 800c764:	d00a      	beq.n	800c77c <UART_SetConfig+0x1f8>
 800c766:	2b80      	cmp	r3, #128	; 0x80
 800c768:	d814      	bhi.n	800c794 <UART_SetConfig+0x210>
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d002      	beq.n	800c774 <UART_SetConfig+0x1f0>
 800c76e:	2b40      	cmp	r3, #64	; 0x40
 800c770:	d008      	beq.n	800c784 <UART_SetConfig+0x200>
 800c772:	e00f      	b.n	800c794 <UART_SetConfig+0x210>
 800c774:	2300      	movs	r3, #0
 800c776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c77a:	e082      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c77c:	2302      	movs	r3, #2
 800c77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c782:	e07e      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c784:	2304      	movs	r3, #4
 800c786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c78a:	e07a      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c78c:	2308      	movs	r3, #8
 800c78e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c792:	e076      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c794:	2310      	movs	r3, #16
 800c796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c79a:	e072      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a35      	ldr	r2, [pc, #212]	; (800c878 <UART_SetConfig+0x2f4>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d12a      	bne.n	800c7fc <UART_SetConfig+0x278>
 800c7a6:	4b30      	ldr	r3, [pc, #192]	; (800c868 <UART_SetConfig+0x2e4>)
 800c7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7b4:	d01a      	beq.n	800c7ec <UART_SetConfig+0x268>
 800c7b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ba:	d81b      	bhi.n	800c7f4 <UART_SetConfig+0x270>
 800c7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7c0:	d00c      	beq.n	800c7dc <UART_SetConfig+0x258>
 800c7c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7c6:	d815      	bhi.n	800c7f4 <UART_SetConfig+0x270>
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d003      	beq.n	800c7d4 <UART_SetConfig+0x250>
 800c7cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d0:	d008      	beq.n	800c7e4 <UART_SetConfig+0x260>
 800c7d2:	e00f      	b.n	800c7f4 <UART_SetConfig+0x270>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7da:	e052      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c7dc:	2302      	movs	r3, #2
 800c7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7e2:	e04e      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c7e4:	2304      	movs	r3, #4
 800c7e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7ea:	e04a      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c7ec:	2308      	movs	r3, #8
 800c7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7f2:	e046      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c7f4:	2310      	movs	r3, #16
 800c7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c7fa:	e042      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a17      	ldr	r2, [pc, #92]	; (800c860 <UART_SetConfig+0x2dc>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d13a      	bne.n	800c87c <UART_SetConfig+0x2f8>
 800c806:	4b18      	ldr	r3, [pc, #96]	; (800c868 <UART_SetConfig+0x2e4>)
 800c808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c80c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c814:	d01a      	beq.n	800c84c <UART_SetConfig+0x2c8>
 800c816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c81a:	d81b      	bhi.n	800c854 <UART_SetConfig+0x2d0>
 800c81c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c820:	d00c      	beq.n	800c83c <UART_SetConfig+0x2b8>
 800c822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c826:	d815      	bhi.n	800c854 <UART_SetConfig+0x2d0>
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d003      	beq.n	800c834 <UART_SetConfig+0x2b0>
 800c82c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c830:	d008      	beq.n	800c844 <UART_SetConfig+0x2c0>
 800c832:	e00f      	b.n	800c854 <UART_SetConfig+0x2d0>
 800c834:	2300      	movs	r3, #0
 800c836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c83a:	e022      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c83c:	2302      	movs	r3, #2
 800c83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c842:	e01e      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c844:	2304      	movs	r3, #4
 800c846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c84a:	e01a      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c84c:	2308      	movs	r3, #8
 800c84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c852:	e016      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c854:	2310      	movs	r3, #16
 800c856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c85a:	e012      	b.n	800c882 <UART_SetConfig+0x2fe>
 800c85c:	cfff69f3 	.word	0xcfff69f3
 800c860:	40008000 	.word	0x40008000
 800c864:	40013800 	.word	0x40013800
 800c868:	40021000 	.word	0x40021000
 800c86c:	40004400 	.word	0x40004400
 800c870:	40004800 	.word	0x40004800
 800c874:	40004c00 	.word	0x40004c00
 800c878:	40005000 	.word	0x40005000
 800c87c:	2310      	movs	r3, #16
 800c87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4aae      	ldr	r2, [pc, #696]	; (800cb40 <UART_SetConfig+0x5bc>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	f040 8097 	bne.w	800c9bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c88e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c892:	2b08      	cmp	r3, #8
 800c894:	d823      	bhi.n	800c8de <UART_SetConfig+0x35a>
 800c896:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <UART_SetConfig+0x318>)
 800c898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89c:	0800c8c1 	.word	0x0800c8c1
 800c8a0:	0800c8df 	.word	0x0800c8df
 800c8a4:	0800c8c9 	.word	0x0800c8c9
 800c8a8:	0800c8df 	.word	0x0800c8df
 800c8ac:	0800c8cf 	.word	0x0800c8cf
 800c8b0:	0800c8df 	.word	0x0800c8df
 800c8b4:	0800c8df 	.word	0x0800c8df
 800c8b8:	0800c8df 	.word	0x0800c8df
 800c8bc:	0800c8d7 	.word	0x0800c8d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8c0:	f7fd f936 	bl	8009b30 <HAL_RCC_GetPCLK1Freq>
 800c8c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8c6:	e010      	b.n	800c8ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8c8:	4b9e      	ldr	r3, [pc, #632]	; (800cb44 <UART_SetConfig+0x5c0>)
 800c8ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8cc:	e00d      	b.n	800c8ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8ce:	f7fd f8c1 	bl	8009a54 <HAL_RCC_GetSysClockFreq>
 800c8d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c8d4:	e009      	b.n	800c8ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c8dc:	e005      	b.n	800c8ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c8e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 8130 	beq.w	800cb52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f6:	4a94      	ldr	r2, [pc, #592]	; (800cb48 <UART_SetConfig+0x5c4>)
 800c8f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	fbb3 f3f2 	udiv	r3, r3, r2
 800c904:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	685a      	ldr	r2, [r3, #4]
 800c90a:	4613      	mov	r3, r2
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	4413      	add	r3, r2
 800c910:	69ba      	ldr	r2, [r7, #24]
 800c912:	429a      	cmp	r2, r3
 800c914:	d305      	bcc.n	800c922 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d903      	bls.n	800c92a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c928:	e113      	b.n	800cb52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92c:	2200      	movs	r2, #0
 800c92e:	60bb      	str	r3, [r7, #8]
 800c930:	60fa      	str	r2, [r7, #12]
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	4a84      	ldr	r2, [pc, #528]	; (800cb48 <UART_SetConfig+0x5c4>)
 800c938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	2200      	movs	r2, #0
 800c940:	603b      	str	r3, [r7, #0]
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c948:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c94c:	f7f4 f9c4 	bl	8000cd8 <__aeabi_uldivmod>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4610      	mov	r0, r2
 800c956:	4619      	mov	r1, r3
 800c958:	f04f 0200 	mov.w	r2, #0
 800c95c:	f04f 0300 	mov.w	r3, #0
 800c960:	020b      	lsls	r3, r1, #8
 800c962:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c966:	0202      	lsls	r2, r0, #8
 800c968:	6979      	ldr	r1, [r7, #20]
 800c96a:	6849      	ldr	r1, [r1, #4]
 800c96c:	0849      	lsrs	r1, r1, #1
 800c96e:	2000      	movs	r0, #0
 800c970:	460c      	mov	r4, r1
 800c972:	4605      	mov	r5, r0
 800c974:	eb12 0804 	adds.w	r8, r2, r4
 800c978:	eb43 0905 	adc.w	r9, r3, r5
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	685b      	ldr	r3, [r3, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	469a      	mov	sl, r3
 800c984:	4693      	mov	fp, r2
 800c986:	4652      	mov	r2, sl
 800c988:	465b      	mov	r3, fp
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f4 f9a3 	bl	8000cd8 <__aeabi_uldivmod>
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	4613      	mov	r3, r2
 800c998:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9a0:	d308      	bcc.n	800c9b4 <UART_SetConfig+0x430>
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9a8:	d204      	bcs.n	800c9b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6a3a      	ldr	r2, [r7, #32]
 800c9b0:	60da      	str	r2, [r3, #12]
 800c9b2:	e0ce      	b.n	800cb52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c9ba:	e0ca      	b.n	800cb52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9c4:	d166      	bne.n	800ca94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c9c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c9ca:	2b08      	cmp	r3, #8
 800c9cc:	d827      	bhi.n	800ca1e <UART_SetConfig+0x49a>
 800c9ce:	a201      	add	r2, pc, #4	; (adr r2, 800c9d4 <UART_SetConfig+0x450>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800c9f9 	.word	0x0800c9f9
 800c9d8:	0800ca01 	.word	0x0800ca01
 800c9dc:	0800ca09 	.word	0x0800ca09
 800c9e0:	0800ca1f 	.word	0x0800ca1f
 800c9e4:	0800ca0f 	.word	0x0800ca0f
 800c9e8:	0800ca1f 	.word	0x0800ca1f
 800c9ec:	0800ca1f 	.word	0x0800ca1f
 800c9f0:	0800ca1f 	.word	0x0800ca1f
 800c9f4:	0800ca17 	.word	0x0800ca17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9f8:	f7fd f89a 	bl	8009b30 <HAL_RCC_GetPCLK1Freq>
 800c9fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c9fe:	e014      	b.n	800ca2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca00:	f7fd f8ac 	bl	8009b5c <HAL_RCC_GetPCLK2Freq>
 800ca04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca06:	e010      	b.n	800ca2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca08:	4b4e      	ldr	r3, [pc, #312]	; (800cb44 <UART_SetConfig+0x5c0>)
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca0c:	e00d      	b.n	800ca2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca0e:	f7fd f821 	bl	8009a54 <HAL_RCC_GetSysClockFreq>
 800ca12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ca14:	e009      	b.n	800ca2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ca1c:	e005      	b.n	800ca2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ca28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 8090 	beq.w	800cb52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca36:	4a44      	ldr	r2, [pc, #272]	; (800cb48 <UART_SetConfig+0x5c4>)
 800ca38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca44:	005a      	lsls	r2, r3, #1
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	085b      	lsrs	r3, r3, #1
 800ca4c:	441a      	add	r2, r3
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca58:	6a3b      	ldr	r3, [r7, #32]
 800ca5a:	2b0f      	cmp	r3, #15
 800ca5c:	d916      	bls.n	800ca8c <UART_SetConfig+0x508>
 800ca5e:	6a3b      	ldr	r3, [r7, #32]
 800ca60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca64:	d212      	bcs.n	800ca8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	f023 030f 	bic.w	r3, r3, #15
 800ca6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca70:	6a3b      	ldr	r3, [r7, #32]
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	8bfb      	ldrh	r3, [r7, #30]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	8bfa      	ldrh	r2, [r7, #30]
 800ca88:	60da      	str	r2, [r3, #12]
 800ca8a:	e062      	b.n	800cb52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ca92:	e05e      	b.n	800cb52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ca98:	2b08      	cmp	r3, #8
 800ca9a:	d828      	bhi.n	800caee <UART_SetConfig+0x56a>
 800ca9c:	a201      	add	r2, pc, #4	; (adr r2, 800caa4 <UART_SetConfig+0x520>)
 800ca9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa2:	bf00      	nop
 800caa4:	0800cac9 	.word	0x0800cac9
 800caa8:	0800cad1 	.word	0x0800cad1
 800caac:	0800cad9 	.word	0x0800cad9
 800cab0:	0800caef 	.word	0x0800caef
 800cab4:	0800cadf 	.word	0x0800cadf
 800cab8:	0800caef 	.word	0x0800caef
 800cabc:	0800caef 	.word	0x0800caef
 800cac0:	0800caef 	.word	0x0800caef
 800cac4:	0800cae7 	.word	0x0800cae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cac8:	f7fd f832 	bl	8009b30 <HAL_RCC_GetPCLK1Freq>
 800cacc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cace:	e014      	b.n	800cafa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cad0:	f7fd f844 	bl	8009b5c <HAL_RCC_GetPCLK2Freq>
 800cad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cad6:	e010      	b.n	800cafa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cad8:	4b1a      	ldr	r3, [pc, #104]	; (800cb44 <UART_SetConfig+0x5c0>)
 800cada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cadc:	e00d      	b.n	800cafa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cade:	f7fc ffb9 	bl	8009a54 <HAL_RCC_GetSysClockFreq>
 800cae2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cae4:	e009      	b.n	800cafa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800caec:	e005      	b.n	800cafa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800caee:	2300      	movs	r3, #0
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800caf8:	bf00      	nop
    }

    if (pclk != 0U)
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d028      	beq.n	800cb52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	4a10      	ldr	r2, [pc, #64]	; (800cb48 <UART_SetConfig+0x5c4>)
 800cb06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	085b      	lsrs	r3, r3, #1
 800cb18:	441a      	add	r2, r3
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	2b0f      	cmp	r3, #15
 800cb28:	d910      	bls.n	800cb4c <UART_SetConfig+0x5c8>
 800cb2a:	6a3b      	ldr	r3, [r7, #32]
 800cb2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb30:	d20c      	bcs.n	800cb4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60da      	str	r2, [r3, #12]
 800cb3c:	e009      	b.n	800cb52 <UART_SetConfig+0x5ce>
 800cb3e:	bf00      	nop
 800cb40:	40008000 	.word	0x40008000
 800cb44:	00f42400 	.word	0x00f42400
 800cb48:	080115d8 	.word	0x080115d8
      }
      else
      {
        ret = HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2200      	movs	r2, #0
 800cb66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cb6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3730      	adds	r7, #48	; 0x30
 800cb76:	46bd      	mov	sp, r7
 800cb78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00a      	beq.n	800cba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	430a      	orrs	r2, r1
 800cba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbaa:	f003 0302 	and.w	r3, r3, #2
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	430a      	orrs	r2, r1
 800cbc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbcc:	f003 0304 	and.w	r3, r3, #4
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00a      	beq.n	800cbea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbee:	f003 0308 	and.w	r3, r3, #8
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00a      	beq.n	800cc0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	430a      	orrs	r2, r1
 800cc0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc10:	f003 0310 	and.w	r3, r3, #16
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00a      	beq.n	800cc2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	430a      	orrs	r2, r1
 800cc2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc32:	f003 0320 	and.w	r3, r3, #32
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	430a      	orrs	r2, r1
 800cc4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d01a      	beq.n	800cc92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc7a:	d10a      	bne.n	800cc92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	430a      	orrs	r2, r1
 800cc90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00a      	beq.n	800ccb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	605a      	str	r2, [r3, #4]
  }
}
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af02      	add	r7, sp, #8
 800ccc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ccd0:	f7f6 f91c 	bl	8002f0c <HAL_GetTick>
 800ccd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0308 	and.w	r3, r3, #8
 800cce0:	2b08      	cmp	r3, #8
 800cce2:	d10e      	bne.n	800cd02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f82f 	bl	800cd56 <UART_WaitOnFlagUntilTimeout>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e025      	b.n	800cd4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 0304 	and.w	r3, r3, #4
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d10e      	bne.n	800cd2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f819 	bl	800cd56 <UART_WaitOnFlagUntilTimeout>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d001      	beq.n	800cd2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	e00f      	b.n	800cd4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2220      	movs	r2, #32
 800cd32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b09c      	sub	sp, #112	; 0x70
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	603b      	str	r3, [r7, #0]
 800cd62:	4613      	mov	r3, r2
 800cd64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd66:	e0a9      	b.n	800cebc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd6e:	f000 80a5 	beq.w	800cebc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd72:	f7f6 f8cb 	bl	8002f0c <HAL_GetTick>
 800cd76:	4602      	mov	r2, r0
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d302      	bcc.n	800cd88 <UART_WaitOnFlagUntilTimeout+0x32>
 800cd82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d140      	bne.n	800ce0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd9c:	667b      	str	r3, [r7, #100]	; 0x64
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cda6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cda8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cdb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e6      	bne.n	800cd88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc4:	e853 3f00 	ldrex	r3, [r3]
 800cdc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	f023 0301 	bic.w	r3, r3, #1
 800cdd0:	663b      	str	r3, [r7, #96]	; 0x60
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cdda:	64ba      	str	r2, [r7, #72]	; 0x48
 800cddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cde0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cde2:	e841 2300 	strex	r3, r2, [r1]
 800cde6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cde8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1e5      	bne.n	800cdba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2220      	movs	r2, #32
 800cdf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2220      	movs	r2, #32
 800cdfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e069      	b.n	800cede <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0304 	and.w	r3, r3, #4
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d051      	beq.n	800cebc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	69db      	ldr	r3, [r3, #28]
 800ce1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce26:	d149      	bne.n	800cebc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	e853 3f00 	ldrex	r3, [r3]
 800ce3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce50:	637b      	str	r3, [r7, #52]	; 0x34
 800ce52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce58:	e841 2300 	strex	r3, r2, [r1]
 800ce5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1e6      	bne.n	800ce32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3308      	adds	r3, #8
 800ce6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	613b      	str	r3, [r7, #16]
   return(result);
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f023 0301 	bic.w	r3, r3, #1
 800ce7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3308      	adds	r3, #8
 800ce82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce84:	623a      	str	r2, [r7, #32]
 800ce86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	69f9      	ldr	r1, [r7, #28]
 800ce8a:	6a3a      	ldr	r2, [r7, #32]
 800ce8c:	e841 2300 	strex	r3, r2, [r1]
 800ce90:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e5      	bne.n	800ce64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2220      	movs	r2, #32
 800ce9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2220      	movs	r2, #32
 800cea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2220      	movs	r2, #32
 800ceac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e010      	b.n	800cede <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	69da      	ldr	r2, [r3, #28]
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	4013      	ands	r3, r2
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	bf0c      	ite	eq
 800cecc:	2301      	moveq	r3, #1
 800cece:	2300      	movne	r3, #0
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	461a      	mov	r2, r3
 800ced4:	79fb      	ldrb	r3, [r7, #7]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	f43f af46 	beq.w	800cd68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3770      	adds	r7, #112	; 0x70
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
	...

0800cee8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b096      	sub	sp, #88	; 0x58
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	88fa      	ldrh	r2, [r7, #6]
 800cf00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2200      	movs	r2, #0
 800cf08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2222      	movs	r2, #34	; 0x22
 800cf10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d02c      	beq.n	800cf76 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf20:	4a42      	ldr	r2, [pc, #264]	; (800d02c <UART_Start_Receive_DMA+0x144>)
 800cf22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf28:	4a41      	ldr	r2, [pc, #260]	; (800d030 <UART_Start_Receive_DMA+0x148>)
 800cf2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf30:	4a40      	ldr	r2, [pc, #256]	; (800d034 <UART_Start_Receive_DMA+0x14c>)
 800cf32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf38:	2200      	movs	r2, #0
 800cf3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3324      	adds	r3, #36	; 0x24
 800cf46:	4619      	mov	r1, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	88fb      	ldrh	r3, [r7, #6]
 800cf50:	f7fa fd8e 	bl	8007a70 <HAL_DMA_Start_IT>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00d      	beq.n	800cf76 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2210      	movs	r2, #16
 800cf5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2220      	movs	r2, #32
 800cf6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e055      	b.n	800d022 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	691b      	ldr	r3, [r3, #16]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d018      	beq.n	800cfb8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8e:	e853 3f00 	ldrex	r3, [r3]
 800cf92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf9a:	657b      	str	r3, [r7, #84]	; 0x54
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfa4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfa6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfac:	e841 2300 	strex	r3, r2, [r1]
 800cfb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cfb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1e6      	bne.n	800cf86 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3308      	adds	r3, #8
 800cfbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	e853 3f00 	ldrex	r3, [r3]
 800cfc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	f043 0301 	orr.w	r3, r3, #1
 800cfce:	653b      	str	r3, [r7, #80]	; 0x50
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	3308      	adds	r3, #8
 800cfd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfd8:	637a      	str	r2, [r7, #52]	; 0x34
 800cfda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfe0:	e841 2300 	strex	r3, r2, [r1]
 800cfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1e5      	bne.n	800cfb8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	3308      	adds	r3, #8
 800cff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	e853 3f00 	ldrex	r3, [r3]
 800cffa:	613b      	str	r3, [r7, #16]
   return(result);
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d002:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3308      	adds	r3, #8
 800d00a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d00c:	623a      	str	r2, [r7, #32]
 800d00e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	69f9      	ldr	r1, [r7, #28]
 800d012:	6a3a      	ldr	r2, [r7, #32]
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	61bb      	str	r3, [r7, #24]
   return(result);
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e5      	bne.n	800cfec <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3758      	adds	r7, #88	; 0x58
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	0800d187 	.word	0x0800d187
 800d030:	0800d2ad 	.word	0x0800d2ad
 800d034:	0800d2e5 	.word	0x0800d2e5

0800d038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d038:	b480      	push	{r7}
 800d03a:	b08f      	sub	sp, #60	; 0x3c
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	e853 3f00 	ldrex	r3, [r3]
 800d04c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d054:	637b      	str	r3, [r7, #52]	; 0x34
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d060:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d066:	e841 2300 	strex	r3, r2, [r1]
 800d06a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1e6      	bne.n	800d040 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	3308      	adds	r3, #8
 800d078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	e853 3f00 	ldrex	r3, [r3]
 800d080:	60bb      	str	r3, [r7, #8]
   return(result);
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d088:	633b      	str	r3, [r7, #48]	; 0x30
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	3308      	adds	r3, #8
 800d090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d092:	61ba      	str	r2, [r7, #24]
 800d094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d096:	6979      	ldr	r1, [r7, #20]
 800d098:	69ba      	ldr	r2, [r7, #24]
 800d09a:	e841 2300 	strex	r3, r2, [r1]
 800d09e:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1e5      	bne.n	800d072 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2220      	movs	r2, #32
 800d0aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d0ae:	bf00      	nop
 800d0b0:	373c      	adds	r7, #60	; 0x3c
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d0ba:	b480      	push	{r7}
 800d0bc:	b095      	sub	sp, #84	; 0x54
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ca:	e853 3f00 	ldrex	r3, [r3]
 800d0ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d0e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0e8:	e841 2300 	strex	r3, r2, [r1]
 800d0ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1e6      	bne.n	800d0c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3308      	adds	r3, #8
 800d0fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
 800d0fe:	e853 3f00 	ldrex	r3, [r3]
 800d102:	61fb      	str	r3, [r7, #28]
   return(result);
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3308      	adds	r3, #8
 800d116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d11a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d11c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d11e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d120:	e841 2300 	strex	r3, r2, [r1]
 800d124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1e3      	bne.n	800d0f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d130:	2b01      	cmp	r3, #1
 800d132:	d118      	bne.n	800d166 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	e853 3f00 	ldrex	r3, [r3]
 800d140:	60bb      	str	r3, [r7, #8]
   return(result);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	f023 0310 	bic.w	r3, r3, #16
 800d148:	647b      	str	r3, [r7, #68]	; 0x44
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d152:	61bb      	str	r3, [r7, #24]
 800d154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d156:	6979      	ldr	r1, [r7, #20]
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	e841 2300 	strex	r3, r2, [r1]
 800d15e:	613b      	str	r3, [r7, #16]
   return(result);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1e6      	bne.n	800d134 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2220      	movs	r2, #32
 800d16a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d17a:	bf00      	nop
 800d17c:	3754      	adds	r7, #84	; 0x54
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b09c      	sub	sp, #112	; 0x70
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d192:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f003 0320 	and.w	r3, r3, #32
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d171      	bne.n	800d286 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d1a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1be:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e6      	bne.n	800d1aa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e6:	e853 3f00 	ldrex	r3, [r3]
 800d1ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ee:	f023 0301 	bic.w	r3, r3, #1
 800d1f2:	667b      	str	r3, [r7, #100]	; 0x64
 800d1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3308      	adds	r3, #8
 800d1fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d1fc:	647a      	str	r2, [r7, #68]	; 0x44
 800d1fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d204:	e841 2300 	strex	r3, r2, [r1]
 800d208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e5      	bne.n	800d1dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3308      	adds	r3, #8
 800d216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21a:	e853 3f00 	ldrex	r3, [r3]
 800d21e:	623b      	str	r3, [r7, #32]
   return(result);
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d226:	663b      	str	r3, [r7, #96]	; 0x60
 800d228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3308      	adds	r3, #8
 800d22e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d230:	633a      	str	r2, [r7, #48]	; 0x30
 800d232:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d238:	e841 2300 	strex	r3, r2, [r1]
 800d23c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1e5      	bne.n	800d210 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d246:	2220      	movs	r2, #32
 800d248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d250:	2b01      	cmp	r3, #1
 800d252:	d118      	bne.n	800d286 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	e853 3f00 	ldrex	r3, [r3]
 800d260:	60fb      	str	r3, [r7, #12]
   return(result);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f023 0310 	bic.w	r3, r3, #16
 800d268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d26a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	461a      	mov	r2, r3
 800d270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d272:	61fb      	str	r3, [r7, #28]
 800d274:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d276:	69b9      	ldr	r1, [r7, #24]
 800d278:	69fa      	ldr	r2, [r7, #28]
 800d27a:	e841 2300 	strex	r3, r2, [r1]
 800d27e:	617b      	str	r3, [r7, #20]
   return(result);
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d1e6      	bne.n	800d254 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d107      	bne.n	800d29e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d294:	4619      	mov	r1, r3
 800d296:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d298:	f7ff f968 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d29c:	e002      	b.n	800d2a4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d29e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d2a0:	f7f7 fe06 	bl	8004eb0 <HAL_UART_RxCpltCallback>
}
 800d2a4:	bf00      	nop
 800d2a6:	3770      	adds	r7, #112	; 0x70
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d109      	bne.n	800d2d6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2c8:	085b      	lsrs	r3, r3, #1
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f7ff f94c 	bl	800c56c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2d4:	e002      	b.n	800d2dc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f7ff f934 	bl	800c544 <HAL_UART_RxHalfCpltCallback>
}
 800d2dc:	bf00      	nop
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d300:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d30c:	2b80      	cmp	r3, #128	; 0x80
 800d30e:	d109      	bne.n	800d324 <UART_DMAError+0x40>
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	2b21      	cmp	r3, #33	; 0x21
 800d314:	d106      	bne.n	800d324 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	2200      	movs	r2, #0
 800d31a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d31e:	6978      	ldr	r0, [r7, #20]
 800d320:	f7ff fe8a 	bl	800d038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d32e:	2b40      	cmp	r3, #64	; 0x40
 800d330:	d109      	bne.n	800d346 <UART_DMAError+0x62>
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2b22      	cmp	r3, #34	; 0x22
 800d336:	d106      	bne.n	800d346 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	2200      	movs	r2, #0
 800d33c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d340:	6978      	ldr	r0, [r7, #20]
 800d342:	f7ff feba 	bl	800d0ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d34c:	f043 0210 	orr.w	r2, r3, #16
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d356:	6978      	ldr	r0, [r7, #20]
 800d358:	f7ff f8fe 	bl	800c558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d35c:	bf00      	nop
 800d35e:	3718      	adds	r7, #24
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d370:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2200      	movs	r2, #0
 800d376:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f7ff f8e8 	bl	800c558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d388:	bf00      	nop
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b088      	sub	sp, #32
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	e853 3f00 	ldrex	r3, [r3]
 800d3a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3ac:	61fb      	str	r3, [r7, #28]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	61bb      	str	r3, [r7, #24]
 800d3b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ba:	6979      	ldr	r1, [r7, #20]
 800d3bc:	69ba      	ldr	r2, [r7, #24]
 800d3be:	e841 2300 	strex	r3, r2, [r1]
 800d3c2:	613b      	str	r3, [r7, #16]
   return(result);
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1e6      	bne.n	800d398 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2220      	movs	r2, #32
 800d3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff f8a9 	bl	800c530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3de:	bf00      	nop
 800d3e0:	3720      	adds	r7, #32
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d3e6:	b480      	push	{r7}
 800d3e8:	b083      	sub	sp, #12
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d3ee:	bf00      	nop
 800d3f0:	370c      	adds	r7, #12
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	b083      	sub	sp, #12
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d402:	bf00      	nop
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d40e:	b480      	push	{r7}
 800d410:	b083      	sub	sp, #12
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d416:	bf00      	nop
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d422:	b480      	push	{r7}
 800d424:	b085      	sub	sp, #20
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d430:	2b01      	cmp	r3, #1
 800d432:	d101      	bne.n	800d438 <HAL_UARTEx_DisableFifoMode+0x16>
 800d434:	2302      	movs	r3, #2
 800d436:	e027      	b.n	800d488 <HAL_UARTEx_DisableFifoMode+0x66>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2201      	movs	r2, #1
 800d43c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2224      	movs	r2, #36	; 0x24
 800d444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f022 0201 	bic.w	r2, r2, #1
 800d45e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d466:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2220      	movs	r2, #32
 800d47a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d101      	bne.n	800d4ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	e02d      	b.n	800d508 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2224      	movs	r2, #36	; 0x24
 800d4b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f022 0201 	bic.w	r2, r2, #1
 800d4d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	683a      	ldr	r2, [r7, #0]
 800d4e4:	430a      	orrs	r2, r1
 800d4e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 f84f 	bl	800d58c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2220      	movs	r2, #32
 800d4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d520:	2b01      	cmp	r3, #1
 800d522:	d101      	bne.n	800d528 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d524:	2302      	movs	r3, #2
 800d526:	e02d      	b.n	800d584 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2224      	movs	r2, #36	; 0x24
 800d534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f022 0201 	bic.w	r2, r2, #1
 800d54e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	430a      	orrs	r2, r1
 800d562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f811 	bl	800d58c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d108      	bne.n	800d5ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d5ac:	e031      	b.n	800d612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d5ae:	2308      	movs	r3, #8
 800d5b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d5b2:	2308      	movs	r3, #8
 800d5b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	0e5b      	lsrs	r3, r3, #25
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	f003 0307 	and.w	r3, r3, #7
 800d5c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	0f5b      	lsrs	r3, r3, #29
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	f003 0307 	and.w	r3, r3, #7
 800d5d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	7b3a      	ldrb	r2, [r7, #12]
 800d5da:	4911      	ldr	r1, [pc, #68]	; (800d620 <UARTEx_SetNbDataToProcess+0x94>)
 800d5dc:	5c8a      	ldrb	r2, [r1, r2]
 800d5de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d5e2:	7b3a      	ldrb	r2, [r7, #12]
 800d5e4:	490f      	ldr	r1, [pc, #60]	; (800d624 <UARTEx_SetNbDataToProcess+0x98>)
 800d5e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
 800d5f6:	7b7a      	ldrb	r2, [r7, #13]
 800d5f8:	4909      	ldr	r1, [pc, #36]	; (800d620 <UARTEx_SetNbDataToProcess+0x94>)
 800d5fa:	5c8a      	ldrb	r2, [r1, r2]
 800d5fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d600:	7b7a      	ldrb	r2, [r7, #13]
 800d602:	4908      	ldr	r1, [pc, #32]	; (800d624 <UARTEx_SetNbDataToProcess+0x98>)
 800d604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d606:	fb93 f3f2 	sdiv	r3, r3, r2
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d612:	bf00      	nop
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	080115f0 	.word	0x080115f0
 800d624:	080115f8 	.word	0x080115f8

0800d628 <__errno>:
 800d628:	4b01      	ldr	r3, [pc, #4]	; (800d630 <__errno+0x8>)
 800d62a:	6818      	ldr	r0, [r3, #0]
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	20000014 	.word	0x20000014

0800d634 <__libc_init_array>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	4d0d      	ldr	r5, [pc, #52]	; (800d66c <__libc_init_array+0x38>)
 800d638:	4c0d      	ldr	r4, [pc, #52]	; (800d670 <__libc_init_array+0x3c>)
 800d63a:	1b64      	subs	r4, r4, r5
 800d63c:	10a4      	asrs	r4, r4, #2
 800d63e:	2600      	movs	r6, #0
 800d640:	42a6      	cmp	r6, r4
 800d642:	d109      	bne.n	800d658 <__libc_init_array+0x24>
 800d644:	4d0b      	ldr	r5, [pc, #44]	; (800d674 <__libc_init_array+0x40>)
 800d646:	4c0c      	ldr	r4, [pc, #48]	; (800d678 <__libc_init_array+0x44>)
 800d648:	f003 ff30 	bl	80114ac <_init>
 800d64c:	1b64      	subs	r4, r4, r5
 800d64e:	10a4      	asrs	r4, r4, #2
 800d650:	2600      	movs	r6, #0
 800d652:	42a6      	cmp	r6, r4
 800d654:	d105      	bne.n	800d662 <__libc_init_array+0x2e>
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	f855 3b04 	ldr.w	r3, [r5], #4
 800d65c:	4798      	blx	r3
 800d65e:	3601      	adds	r6, #1
 800d660:	e7ee      	b.n	800d640 <__libc_init_array+0xc>
 800d662:	f855 3b04 	ldr.w	r3, [r5], #4
 800d666:	4798      	blx	r3
 800d668:	3601      	adds	r6, #1
 800d66a:	e7f2      	b.n	800d652 <__libc_init_array+0x1e>
 800d66c:	08011bc0 	.word	0x08011bc0
 800d670:	08011bc0 	.word	0x08011bc0
 800d674:	08011bc0 	.word	0x08011bc0
 800d678:	08011bc4 	.word	0x08011bc4

0800d67c <memset>:
 800d67c:	4402      	add	r2, r0
 800d67e:	4603      	mov	r3, r0
 800d680:	4293      	cmp	r3, r2
 800d682:	d100      	bne.n	800d686 <memset+0xa>
 800d684:	4770      	bx	lr
 800d686:	f803 1b01 	strb.w	r1, [r3], #1
 800d68a:	e7f9      	b.n	800d680 <memset+0x4>

0800d68c <__cvt>:
 800d68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d690:	ec55 4b10 	vmov	r4, r5, d0
 800d694:	2d00      	cmp	r5, #0
 800d696:	460e      	mov	r6, r1
 800d698:	4619      	mov	r1, r3
 800d69a:	462b      	mov	r3, r5
 800d69c:	bfbb      	ittet	lt
 800d69e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d6a2:	461d      	movlt	r5, r3
 800d6a4:	2300      	movge	r3, #0
 800d6a6:	232d      	movlt	r3, #45	; 0x2d
 800d6a8:	700b      	strb	r3, [r1, #0]
 800d6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d6b0:	4691      	mov	r9, r2
 800d6b2:	f023 0820 	bic.w	r8, r3, #32
 800d6b6:	bfbc      	itt	lt
 800d6b8:	4622      	movlt	r2, r4
 800d6ba:	4614      	movlt	r4, r2
 800d6bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d6c0:	d005      	beq.n	800d6ce <__cvt+0x42>
 800d6c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d6c6:	d100      	bne.n	800d6ca <__cvt+0x3e>
 800d6c8:	3601      	adds	r6, #1
 800d6ca:	2102      	movs	r1, #2
 800d6cc:	e000      	b.n	800d6d0 <__cvt+0x44>
 800d6ce:	2103      	movs	r1, #3
 800d6d0:	ab03      	add	r3, sp, #12
 800d6d2:	9301      	str	r3, [sp, #4]
 800d6d4:	ab02      	add	r3, sp, #8
 800d6d6:	9300      	str	r3, [sp, #0]
 800d6d8:	ec45 4b10 	vmov	d0, r4, r5
 800d6dc:	4653      	mov	r3, sl
 800d6de:	4632      	mov	r2, r6
 800d6e0:	f000 fee6 	bl	800e4b0 <_dtoa_r>
 800d6e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d6e8:	4607      	mov	r7, r0
 800d6ea:	d102      	bne.n	800d6f2 <__cvt+0x66>
 800d6ec:	f019 0f01 	tst.w	r9, #1
 800d6f0:	d022      	beq.n	800d738 <__cvt+0xac>
 800d6f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d6f6:	eb07 0906 	add.w	r9, r7, r6
 800d6fa:	d110      	bne.n	800d71e <__cvt+0x92>
 800d6fc:	783b      	ldrb	r3, [r7, #0]
 800d6fe:	2b30      	cmp	r3, #48	; 0x30
 800d700:	d10a      	bne.n	800d718 <__cvt+0x8c>
 800d702:	2200      	movs	r2, #0
 800d704:	2300      	movs	r3, #0
 800d706:	4620      	mov	r0, r4
 800d708:	4629      	mov	r1, r5
 800d70a:	f7f3 fa05 	bl	8000b18 <__aeabi_dcmpeq>
 800d70e:	b918      	cbnz	r0, 800d718 <__cvt+0x8c>
 800d710:	f1c6 0601 	rsb	r6, r6, #1
 800d714:	f8ca 6000 	str.w	r6, [sl]
 800d718:	f8da 3000 	ldr.w	r3, [sl]
 800d71c:	4499      	add	r9, r3
 800d71e:	2200      	movs	r2, #0
 800d720:	2300      	movs	r3, #0
 800d722:	4620      	mov	r0, r4
 800d724:	4629      	mov	r1, r5
 800d726:	f7f3 f9f7 	bl	8000b18 <__aeabi_dcmpeq>
 800d72a:	b108      	cbz	r0, 800d730 <__cvt+0xa4>
 800d72c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d730:	2230      	movs	r2, #48	; 0x30
 800d732:	9b03      	ldr	r3, [sp, #12]
 800d734:	454b      	cmp	r3, r9
 800d736:	d307      	bcc.n	800d748 <__cvt+0xbc>
 800d738:	9b03      	ldr	r3, [sp, #12]
 800d73a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d73c:	1bdb      	subs	r3, r3, r7
 800d73e:	4638      	mov	r0, r7
 800d740:	6013      	str	r3, [r2, #0]
 800d742:	b004      	add	sp, #16
 800d744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d748:	1c59      	adds	r1, r3, #1
 800d74a:	9103      	str	r1, [sp, #12]
 800d74c:	701a      	strb	r2, [r3, #0]
 800d74e:	e7f0      	b.n	800d732 <__cvt+0xa6>

0800d750 <__exponent>:
 800d750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d752:	4603      	mov	r3, r0
 800d754:	2900      	cmp	r1, #0
 800d756:	bfb8      	it	lt
 800d758:	4249      	neglt	r1, r1
 800d75a:	f803 2b02 	strb.w	r2, [r3], #2
 800d75e:	bfb4      	ite	lt
 800d760:	222d      	movlt	r2, #45	; 0x2d
 800d762:	222b      	movge	r2, #43	; 0x2b
 800d764:	2909      	cmp	r1, #9
 800d766:	7042      	strb	r2, [r0, #1]
 800d768:	dd2a      	ble.n	800d7c0 <__exponent+0x70>
 800d76a:	f10d 0407 	add.w	r4, sp, #7
 800d76e:	46a4      	mov	ip, r4
 800d770:	270a      	movs	r7, #10
 800d772:	46a6      	mov	lr, r4
 800d774:	460a      	mov	r2, r1
 800d776:	fb91 f6f7 	sdiv	r6, r1, r7
 800d77a:	fb07 1516 	mls	r5, r7, r6, r1
 800d77e:	3530      	adds	r5, #48	; 0x30
 800d780:	2a63      	cmp	r2, #99	; 0x63
 800d782:	f104 34ff 	add.w	r4, r4, #4294967295
 800d786:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d78a:	4631      	mov	r1, r6
 800d78c:	dcf1      	bgt.n	800d772 <__exponent+0x22>
 800d78e:	3130      	adds	r1, #48	; 0x30
 800d790:	f1ae 0502 	sub.w	r5, lr, #2
 800d794:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d798:	1c44      	adds	r4, r0, #1
 800d79a:	4629      	mov	r1, r5
 800d79c:	4561      	cmp	r1, ip
 800d79e:	d30a      	bcc.n	800d7b6 <__exponent+0x66>
 800d7a0:	f10d 0209 	add.w	r2, sp, #9
 800d7a4:	eba2 020e 	sub.w	r2, r2, lr
 800d7a8:	4565      	cmp	r5, ip
 800d7aa:	bf88      	it	hi
 800d7ac:	2200      	movhi	r2, #0
 800d7ae:	4413      	add	r3, r2
 800d7b0:	1a18      	subs	r0, r3, r0
 800d7b2:	b003      	add	sp, #12
 800d7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d7be:	e7ed      	b.n	800d79c <__exponent+0x4c>
 800d7c0:	2330      	movs	r3, #48	; 0x30
 800d7c2:	3130      	adds	r1, #48	; 0x30
 800d7c4:	7083      	strb	r3, [r0, #2]
 800d7c6:	70c1      	strb	r1, [r0, #3]
 800d7c8:	1d03      	adds	r3, r0, #4
 800d7ca:	e7f1      	b.n	800d7b0 <__exponent+0x60>

0800d7cc <_printf_float>:
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d0:	ed2d 8b02 	vpush	{d8}
 800d7d4:	b08d      	sub	sp, #52	; 0x34
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d7dc:	4616      	mov	r6, r2
 800d7de:	461f      	mov	r7, r3
 800d7e0:	4605      	mov	r5, r0
 800d7e2:	f001 fe0b 	bl	800f3fc <_localeconv_r>
 800d7e6:	f8d0 a000 	ldr.w	sl, [r0]
 800d7ea:	4650      	mov	r0, sl
 800d7ec:	f7f2 fd18 	bl	8000220 <strlen>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	930a      	str	r3, [sp, #40]	; 0x28
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	9305      	str	r3, [sp, #20]
 800d7f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d7fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d800:	3307      	adds	r3, #7
 800d802:	f023 0307 	bic.w	r3, r3, #7
 800d806:	f103 0208 	add.w	r2, r3, #8
 800d80a:	f8c8 2000 	str.w	r2, [r8]
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d816:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d81a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d81e:	9307      	str	r3, [sp, #28]
 800d820:	f8cd 8018 	str.w	r8, [sp, #24]
 800d824:	ee08 0a10 	vmov	s16, r0
 800d828:	4b9f      	ldr	r3, [pc, #636]	; (800daa8 <_printf_float+0x2dc>)
 800d82a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d82e:	f04f 32ff 	mov.w	r2, #4294967295
 800d832:	f7f3 f9a3 	bl	8000b7c <__aeabi_dcmpun>
 800d836:	bb88      	cbnz	r0, 800d89c <_printf_float+0xd0>
 800d838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d83c:	4b9a      	ldr	r3, [pc, #616]	; (800daa8 <_printf_float+0x2dc>)
 800d83e:	f04f 32ff 	mov.w	r2, #4294967295
 800d842:	f7f3 f97d 	bl	8000b40 <__aeabi_dcmple>
 800d846:	bb48      	cbnz	r0, 800d89c <_printf_float+0xd0>
 800d848:	2200      	movs	r2, #0
 800d84a:	2300      	movs	r3, #0
 800d84c:	4640      	mov	r0, r8
 800d84e:	4649      	mov	r1, r9
 800d850:	f7f3 f96c 	bl	8000b2c <__aeabi_dcmplt>
 800d854:	b110      	cbz	r0, 800d85c <_printf_float+0x90>
 800d856:	232d      	movs	r3, #45	; 0x2d
 800d858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d85c:	4b93      	ldr	r3, [pc, #588]	; (800daac <_printf_float+0x2e0>)
 800d85e:	4894      	ldr	r0, [pc, #592]	; (800dab0 <_printf_float+0x2e4>)
 800d860:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d864:	bf94      	ite	ls
 800d866:	4698      	movls	r8, r3
 800d868:	4680      	movhi	r8, r0
 800d86a:	2303      	movs	r3, #3
 800d86c:	6123      	str	r3, [r4, #16]
 800d86e:	9b05      	ldr	r3, [sp, #20]
 800d870:	f023 0204 	bic.w	r2, r3, #4
 800d874:	6022      	str	r2, [r4, #0]
 800d876:	f04f 0900 	mov.w	r9, #0
 800d87a:	9700      	str	r7, [sp, #0]
 800d87c:	4633      	mov	r3, r6
 800d87e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d880:	4621      	mov	r1, r4
 800d882:	4628      	mov	r0, r5
 800d884:	f000 f9d8 	bl	800dc38 <_printf_common>
 800d888:	3001      	adds	r0, #1
 800d88a:	f040 8090 	bne.w	800d9ae <_printf_float+0x1e2>
 800d88e:	f04f 30ff 	mov.w	r0, #4294967295
 800d892:	b00d      	add	sp, #52	; 0x34
 800d894:	ecbd 8b02 	vpop	{d8}
 800d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89c:	4642      	mov	r2, r8
 800d89e:	464b      	mov	r3, r9
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	f7f3 f96a 	bl	8000b7c <__aeabi_dcmpun>
 800d8a8:	b140      	cbz	r0, 800d8bc <_printf_float+0xf0>
 800d8aa:	464b      	mov	r3, r9
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	bfbc      	itt	lt
 800d8b0:	232d      	movlt	r3, #45	; 0x2d
 800d8b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d8b6:	487f      	ldr	r0, [pc, #508]	; (800dab4 <_printf_float+0x2e8>)
 800d8b8:	4b7f      	ldr	r3, [pc, #508]	; (800dab8 <_printf_float+0x2ec>)
 800d8ba:	e7d1      	b.n	800d860 <_printf_float+0x94>
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d8c2:	9206      	str	r2, [sp, #24]
 800d8c4:	1c5a      	adds	r2, r3, #1
 800d8c6:	d13f      	bne.n	800d948 <_printf_float+0x17c>
 800d8c8:	2306      	movs	r3, #6
 800d8ca:	6063      	str	r3, [r4, #4]
 800d8cc:	9b05      	ldr	r3, [sp, #20]
 800d8ce:	6861      	ldr	r1, [r4, #4]
 800d8d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	9303      	str	r3, [sp, #12]
 800d8d8:	ab0a      	add	r3, sp, #40	; 0x28
 800d8da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d8de:	ab09      	add	r3, sp, #36	; 0x24
 800d8e0:	ec49 8b10 	vmov	d0, r8, r9
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	6022      	str	r2, [r4, #0]
 800d8e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d8ec:	4628      	mov	r0, r5
 800d8ee:	f7ff fecd 	bl	800d68c <__cvt>
 800d8f2:	9b06      	ldr	r3, [sp, #24]
 800d8f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8f6:	2b47      	cmp	r3, #71	; 0x47
 800d8f8:	4680      	mov	r8, r0
 800d8fa:	d108      	bne.n	800d90e <_printf_float+0x142>
 800d8fc:	1cc8      	adds	r0, r1, #3
 800d8fe:	db02      	blt.n	800d906 <_printf_float+0x13a>
 800d900:	6863      	ldr	r3, [r4, #4]
 800d902:	4299      	cmp	r1, r3
 800d904:	dd41      	ble.n	800d98a <_printf_float+0x1be>
 800d906:	f1ab 0b02 	sub.w	fp, fp, #2
 800d90a:	fa5f fb8b 	uxtb.w	fp, fp
 800d90e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d912:	d820      	bhi.n	800d956 <_printf_float+0x18a>
 800d914:	3901      	subs	r1, #1
 800d916:	465a      	mov	r2, fp
 800d918:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d91c:	9109      	str	r1, [sp, #36]	; 0x24
 800d91e:	f7ff ff17 	bl	800d750 <__exponent>
 800d922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d924:	1813      	adds	r3, r2, r0
 800d926:	2a01      	cmp	r2, #1
 800d928:	4681      	mov	r9, r0
 800d92a:	6123      	str	r3, [r4, #16]
 800d92c:	dc02      	bgt.n	800d934 <_printf_float+0x168>
 800d92e:	6822      	ldr	r2, [r4, #0]
 800d930:	07d2      	lsls	r2, r2, #31
 800d932:	d501      	bpl.n	800d938 <_printf_float+0x16c>
 800d934:	3301      	adds	r3, #1
 800d936:	6123      	str	r3, [r4, #16]
 800d938:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d09c      	beq.n	800d87a <_printf_float+0xae>
 800d940:	232d      	movs	r3, #45	; 0x2d
 800d942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d946:	e798      	b.n	800d87a <_printf_float+0xae>
 800d948:	9a06      	ldr	r2, [sp, #24]
 800d94a:	2a47      	cmp	r2, #71	; 0x47
 800d94c:	d1be      	bne.n	800d8cc <_printf_float+0x100>
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1bc      	bne.n	800d8cc <_printf_float+0x100>
 800d952:	2301      	movs	r3, #1
 800d954:	e7b9      	b.n	800d8ca <_printf_float+0xfe>
 800d956:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d95a:	d118      	bne.n	800d98e <_printf_float+0x1c2>
 800d95c:	2900      	cmp	r1, #0
 800d95e:	6863      	ldr	r3, [r4, #4]
 800d960:	dd0b      	ble.n	800d97a <_printf_float+0x1ae>
 800d962:	6121      	str	r1, [r4, #16]
 800d964:	b913      	cbnz	r3, 800d96c <_printf_float+0x1a0>
 800d966:	6822      	ldr	r2, [r4, #0]
 800d968:	07d0      	lsls	r0, r2, #31
 800d96a:	d502      	bpl.n	800d972 <_printf_float+0x1a6>
 800d96c:	3301      	adds	r3, #1
 800d96e:	440b      	add	r3, r1
 800d970:	6123      	str	r3, [r4, #16]
 800d972:	65a1      	str	r1, [r4, #88]	; 0x58
 800d974:	f04f 0900 	mov.w	r9, #0
 800d978:	e7de      	b.n	800d938 <_printf_float+0x16c>
 800d97a:	b913      	cbnz	r3, 800d982 <_printf_float+0x1b6>
 800d97c:	6822      	ldr	r2, [r4, #0]
 800d97e:	07d2      	lsls	r2, r2, #31
 800d980:	d501      	bpl.n	800d986 <_printf_float+0x1ba>
 800d982:	3302      	adds	r3, #2
 800d984:	e7f4      	b.n	800d970 <_printf_float+0x1a4>
 800d986:	2301      	movs	r3, #1
 800d988:	e7f2      	b.n	800d970 <_printf_float+0x1a4>
 800d98a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d990:	4299      	cmp	r1, r3
 800d992:	db05      	blt.n	800d9a0 <_printf_float+0x1d4>
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	6121      	str	r1, [r4, #16]
 800d998:	07d8      	lsls	r0, r3, #31
 800d99a:	d5ea      	bpl.n	800d972 <_printf_float+0x1a6>
 800d99c:	1c4b      	adds	r3, r1, #1
 800d99e:	e7e7      	b.n	800d970 <_printf_float+0x1a4>
 800d9a0:	2900      	cmp	r1, #0
 800d9a2:	bfd4      	ite	le
 800d9a4:	f1c1 0202 	rsble	r2, r1, #2
 800d9a8:	2201      	movgt	r2, #1
 800d9aa:	4413      	add	r3, r2
 800d9ac:	e7e0      	b.n	800d970 <_printf_float+0x1a4>
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	055a      	lsls	r2, r3, #21
 800d9b2:	d407      	bmi.n	800d9c4 <_printf_float+0x1f8>
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	4642      	mov	r2, r8
 800d9b8:	4631      	mov	r1, r6
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	47b8      	blx	r7
 800d9be:	3001      	adds	r0, #1
 800d9c0:	d12c      	bne.n	800da1c <_printf_float+0x250>
 800d9c2:	e764      	b.n	800d88e <_printf_float+0xc2>
 800d9c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d9c8:	f240 80e0 	bls.w	800db8c <_printf_float+0x3c0>
 800d9cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	f7f3 f8a0 	bl	8000b18 <__aeabi_dcmpeq>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d034      	beq.n	800da46 <_printf_float+0x27a>
 800d9dc:	4a37      	ldr	r2, [pc, #220]	; (800dabc <_printf_float+0x2f0>)
 800d9de:	2301      	movs	r3, #1
 800d9e0:	4631      	mov	r1, r6
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	47b8      	blx	r7
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	f43f af51 	beq.w	800d88e <_printf_float+0xc2>
 800d9ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	db02      	blt.n	800d9fa <_printf_float+0x22e>
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	07d8      	lsls	r0, r3, #31
 800d9f8:	d510      	bpl.n	800da1c <_printf_float+0x250>
 800d9fa:	ee18 3a10 	vmov	r3, s16
 800d9fe:	4652      	mov	r2, sl
 800da00:	4631      	mov	r1, r6
 800da02:	4628      	mov	r0, r5
 800da04:	47b8      	blx	r7
 800da06:	3001      	adds	r0, #1
 800da08:	f43f af41 	beq.w	800d88e <_printf_float+0xc2>
 800da0c:	f04f 0800 	mov.w	r8, #0
 800da10:	f104 091a 	add.w	r9, r4, #26
 800da14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da16:	3b01      	subs	r3, #1
 800da18:	4543      	cmp	r3, r8
 800da1a:	dc09      	bgt.n	800da30 <_printf_float+0x264>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	079b      	lsls	r3, r3, #30
 800da20:	f100 8105 	bmi.w	800dc2e <_printf_float+0x462>
 800da24:	68e0      	ldr	r0, [r4, #12]
 800da26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da28:	4298      	cmp	r0, r3
 800da2a:	bfb8      	it	lt
 800da2c:	4618      	movlt	r0, r3
 800da2e:	e730      	b.n	800d892 <_printf_float+0xc6>
 800da30:	2301      	movs	r3, #1
 800da32:	464a      	mov	r2, r9
 800da34:	4631      	mov	r1, r6
 800da36:	4628      	mov	r0, r5
 800da38:	47b8      	blx	r7
 800da3a:	3001      	adds	r0, #1
 800da3c:	f43f af27 	beq.w	800d88e <_printf_float+0xc2>
 800da40:	f108 0801 	add.w	r8, r8, #1
 800da44:	e7e6      	b.n	800da14 <_printf_float+0x248>
 800da46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da48:	2b00      	cmp	r3, #0
 800da4a:	dc39      	bgt.n	800dac0 <_printf_float+0x2f4>
 800da4c:	4a1b      	ldr	r2, [pc, #108]	; (800dabc <_printf_float+0x2f0>)
 800da4e:	2301      	movs	r3, #1
 800da50:	4631      	mov	r1, r6
 800da52:	4628      	mov	r0, r5
 800da54:	47b8      	blx	r7
 800da56:	3001      	adds	r0, #1
 800da58:	f43f af19 	beq.w	800d88e <_printf_float+0xc2>
 800da5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da60:	4313      	orrs	r3, r2
 800da62:	d102      	bne.n	800da6a <_printf_float+0x29e>
 800da64:	6823      	ldr	r3, [r4, #0]
 800da66:	07d9      	lsls	r1, r3, #31
 800da68:	d5d8      	bpl.n	800da1c <_printf_float+0x250>
 800da6a:	ee18 3a10 	vmov	r3, s16
 800da6e:	4652      	mov	r2, sl
 800da70:	4631      	mov	r1, r6
 800da72:	4628      	mov	r0, r5
 800da74:	47b8      	blx	r7
 800da76:	3001      	adds	r0, #1
 800da78:	f43f af09 	beq.w	800d88e <_printf_float+0xc2>
 800da7c:	f04f 0900 	mov.w	r9, #0
 800da80:	f104 0a1a 	add.w	sl, r4, #26
 800da84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da86:	425b      	negs	r3, r3
 800da88:	454b      	cmp	r3, r9
 800da8a:	dc01      	bgt.n	800da90 <_printf_float+0x2c4>
 800da8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da8e:	e792      	b.n	800d9b6 <_printf_float+0x1ea>
 800da90:	2301      	movs	r3, #1
 800da92:	4652      	mov	r2, sl
 800da94:	4631      	mov	r1, r6
 800da96:	4628      	mov	r0, r5
 800da98:	47b8      	blx	r7
 800da9a:	3001      	adds	r0, #1
 800da9c:	f43f aef7 	beq.w	800d88e <_printf_float+0xc2>
 800daa0:	f109 0901 	add.w	r9, r9, #1
 800daa4:	e7ee      	b.n	800da84 <_printf_float+0x2b8>
 800daa6:	bf00      	nop
 800daa8:	7fefffff 	.word	0x7fefffff
 800daac:	08011604 	.word	0x08011604
 800dab0:	08011608 	.word	0x08011608
 800dab4:	08011610 	.word	0x08011610
 800dab8:	0801160c 	.word	0x0801160c
 800dabc:	08011614 	.word	0x08011614
 800dac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dac2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dac4:	429a      	cmp	r2, r3
 800dac6:	bfa8      	it	ge
 800dac8:	461a      	movge	r2, r3
 800daca:	2a00      	cmp	r2, #0
 800dacc:	4691      	mov	r9, r2
 800dace:	dc37      	bgt.n	800db40 <_printf_float+0x374>
 800dad0:	f04f 0b00 	mov.w	fp, #0
 800dad4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dad8:	f104 021a 	add.w	r2, r4, #26
 800dadc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dade:	9305      	str	r3, [sp, #20]
 800dae0:	eba3 0309 	sub.w	r3, r3, r9
 800dae4:	455b      	cmp	r3, fp
 800dae6:	dc33      	bgt.n	800db50 <_printf_float+0x384>
 800dae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800daec:	429a      	cmp	r2, r3
 800daee:	db3b      	blt.n	800db68 <_printf_float+0x39c>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	07da      	lsls	r2, r3, #31
 800daf4:	d438      	bmi.n	800db68 <_printf_float+0x39c>
 800daf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daf8:	9a05      	ldr	r2, [sp, #20]
 800dafa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dafc:	1a9a      	subs	r2, r3, r2
 800dafe:	eba3 0901 	sub.w	r9, r3, r1
 800db02:	4591      	cmp	r9, r2
 800db04:	bfa8      	it	ge
 800db06:	4691      	movge	r9, r2
 800db08:	f1b9 0f00 	cmp.w	r9, #0
 800db0c:	dc35      	bgt.n	800db7a <_printf_float+0x3ae>
 800db0e:	f04f 0800 	mov.w	r8, #0
 800db12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db16:	f104 0a1a 	add.w	sl, r4, #26
 800db1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db1e:	1a9b      	subs	r3, r3, r2
 800db20:	eba3 0309 	sub.w	r3, r3, r9
 800db24:	4543      	cmp	r3, r8
 800db26:	f77f af79 	ble.w	800da1c <_printf_float+0x250>
 800db2a:	2301      	movs	r3, #1
 800db2c:	4652      	mov	r2, sl
 800db2e:	4631      	mov	r1, r6
 800db30:	4628      	mov	r0, r5
 800db32:	47b8      	blx	r7
 800db34:	3001      	adds	r0, #1
 800db36:	f43f aeaa 	beq.w	800d88e <_printf_float+0xc2>
 800db3a:	f108 0801 	add.w	r8, r8, #1
 800db3e:	e7ec      	b.n	800db1a <_printf_float+0x34e>
 800db40:	4613      	mov	r3, r2
 800db42:	4631      	mov	r1, r6
 800db44:	4642      	mov	r2, r8
 800db46:	4628      	mov	r0, r5
 800db48:	47b8      	blx	r7
 800db4a:	3001      	adds	r0, #1
 800db4c:	d1c0      	bne.n	800dad0 <_printf_float+0x304>
 800db4e:	e69e      	b.n	800d88e <_printf_float+0xc2>
 800db50:	2301      	movs	r3, #1
 800db52:	4631      	mov	r1, r6
 800db54:	4628      	mov	r0, r5
 800db56:	9205      	str	r2, [sp, #20]
 800db58:	47b8      	blx	r7
 800db5a:	3001      	adds	r0, #1
 800db5c:	f43f ae97 	beq.w	800d88e <_printf_float+0xc2>
 800db60:	9a05      	ldr	r2, [sp, #20]
 800db62:	f10b 0b01 	add.w	fp, fp, #1
 800db66:	e7b9      	b.n	800dadc <_printf_float+0x310>
 800db68:	ee18 3a10 	vmov	r3, s16
 800db6c:	4652      	mov	r2, sl
 800db6e:	4631      	mov	r1, r6
 800db70:	4628      	mov	r0, r5
 800db72:	47b8      	blx	r7
 800db74:	3001      	adds	r0, #1
 800db76:	d1be      	bne.n	800daf6 <_printf_float+0x32a>
 800db78:	e689      	b.n	800d88e <_printf_float+0xc2>
 800db7a:	9a05      	ldr	r2, [sp, #20]
 800db7c:	464b      	mov	r3, r9
 800db7e:	4442      	add	r2, r8
 800db80:	4631      	mov	r1, r6
 800db82:	4628      	mov	r0, r5
 800db84:	47b8      	blx	r7
 800db86:	3001      	adds	r0, #1
 800db88:	d1c1      	bne.n	800db0e <_printf_float+0x342>
 800db8a:	e680      	b.n	800d88e <_printf_float+0xc2>
 800db8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db8e:	2a01      	cmp	r2, #1
 800db90:	dc01      	bgt.n	800db96 <_printf_float+0x3ca>
 800db92:	07db      	lsls	r3, r3, #31
 800db94:	d538      	bpl.n	800dc08 <_printf_float+0x43c>
 800db96:	2301      	movs	r3, #1
 800db98:	4642      	mov	r2, r8
 800db9a:	4631      	mov	r1, r6
 800db9c:	4628      	mov	r0, r5
 800db9e:	47b8      	blx	r7
 800dba0:	3001      	adds	r0, #1
 800dba2:	f43f ae74 	beq.w	800d88e <_printf_float+0xc2>
 800dba6:	ee18 3a10 	vmov	r3, s16
 800dbaa:	4652      	mov	r2, sl
 800dbac:	4631      	mov	r1, r6
 800dbae:	4628      	mov	r0, r5
 800dbb0:	47b8      	blx	r7
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	f43f ae6b 	beq.w	800d88e <_printf_float+0xc2>
 800dbb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f7f2 ffaa 	bl	8000b18 <__aeabi_dcmpeq>
 800dbc4:	b9d8      	cbnz	r0, 800dbfe <_printf_float+0x432>
 800dbc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbc8:	f108 0201 	add.w	r2, r8, #1
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	4631      	mov	r1, r6
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b8      	blx	r7
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d10e      	bne.n	800dbf6 <_printf_float+0x42a>
 800dbd8:	e659      	b.n	800d88e <_printf_float+0xc2>
 800dbda:	2301      	movs	r3, #1
 800dbdc:	4652      	mov	r2, sl
 800dbde:	4631      	mov	r1, r6
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	47b8      	blx	r7
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	f43f ae52 	beq.w	800d88e <_printf_float+0xc2>
 800dbea:	f108 0801 	add.w	r8, r8, #1
 800dbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	4543      	cmp	r3, r8
 800dbf4:	dcf1      	bgt.n	800dbda <_printf_float+0x40e>
 800dbf6:	464b      	mov	r3, r9
 800dbf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dbfc:	e6dc      	b.n	800d9b8 <_printf_float+0x1ec>
 800dbfe:	f04f 0800 	mov.w	r8, #0
 800dc02:	f104 0a1a 	add.w	sl, r4, #26
 800dc06:	e7f2      	b.n	800dbee <_printf_float+0x422>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	4642      	mov	r2, r8
 800dc0c:	e7df      	b.n	800dbce <_printf_float+0x402>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	464a      	mov	r2, r9
 800dc12:	4631      	mov	r1, r6
 800dc14:	4628      	mov	r0, r5
 800dc16:	47b8      	blx	r7
 800dc18:	3001      	adds	r0, #1
 800dc1a:	f43f ae38 	beq.w	800d88e <_printf_float+0xc2>
 800dc1e:	f108 0801 	add.w	r8, r8, #1
 800dc22:	68e3      	ldr	r3, [r4, #12]
 800dc24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dc26:	1a5b      	subs	r3, r3, r1
 800dc28:	4543      	cmp	r3, r8
 800dc2a:	dcf0      	bgt.n	800dc0e <_printf_float+0x442>
 800dc2c:	e6fa      	b.n	800da24 <_printf_float+0x258>
 800dc2e:	f04f 0800 	mov.w	r8, #0
 800dc32:	f104 0919 	add.w	r9, r4, #25
 800dc36:	e7f4      	b.n	800dc22 <_printf_float+0x456>

0800dc38 <_printf_common>:
 800dc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc3c:	4616      	mov	r6, r2
 800dc3e:	4699      	mov	r9, r3
 800dc40:	688a      	ldr	r2, [r1, #8]
 800dc42:	690b      	ldr	r3, [r1, #16]
 800dc44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	bfb8      	it	lt
 800dc4c:	4613      	movlt	r3, r2
 800dc4e:	6033      	str	r3, [r6, #0]
 800dc50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc54:	4607      	mov	r7, r0
 800dc56:	460c      	mov	r4, r1
 800dc58:	b10a      	cbz	r2, 800dc5e <_printf_common+0x26>
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	6033      	str	r3, [r6, #0]
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	0699      	lsls	r1, r3, #26
 800dc62:	bf42      	ittt	mi
 800dc64:	6833      	ldrmi	r3, [r6, #0]
 800dc66:	3302      	addmi	r3, #2
 800dc68:	6033      	strmi	r3, [r6, #0]
 800dc6a:	6825      	ldr	r5, [r4, #0]
 800dc6c:	f015 0506 	ands.w	r5, r5, #6
 800dc70:	d106      	bne.n	800dc80 <_printf_common+0x48>
 800dc72:	f104 0a19 	add.w	sl, r4, #25
 800dc76:	68e3      	ldr	r3, [r4, #12]
 800dc78:	6832      	ldr	r2, [r6, #0]
 800dc7a:	1a9b      	subs	r3, r3, r2
 800dc7c:	42ab      	cmp	r3, r5
 800dc7e:	dc26      	bgt.n	800dcce <_printf_common+0x96>
 800dc80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc84:	1e13      	subs	r3, r2, #0
 800dc86:	6822      	ldr	r2, [r4, #0]
 800dc88:	bf18      	it	ne
 800dc8a:	2301      	movne	r3, #1
 800dc8c:	0692      	lsls	r2, r2, #26
 800dc8e:	d42b      	bmi.n	800dce8 <_printf_common+0xb0>
 800dc90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc94:	4649      	mov	r1, r9
 800dc96:	4638      	mov	r0, r7
 800dc98:	47c0      	blx	r8
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	d01e      	beq.n	800dcdc <_printf_common+0xa4>
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	68e5      	ldr	r5, [r4, #12]
 800dca2:	6832      	ldr	r2, [r6, #0]
 800dca4:	f003 0306 	and.w	r3, r3, #6
 800dca8:	2b04      	cmp	r3, #4
 800dcaa:	bf08      	it	eq
 800dcac:	1aad      	subeq	r5, r5, r2
 800dcae:	68a3      	ldr	r3, [r4, #8]
 800dcb0:	6922      	ldr	r2, [r4, #16]
 800dcb2:	bf0c      	ite	eq
 800dcb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dcb8:	2500      	movne	r5, #0
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	bfc4      	itt	gt
 800dcbe:	1a9b      	subgt	r3, r3, r2
 800dcc0:	18ed      	addgt	r5, r5, r3
 800dcc2:	2600      	movs	r6, #0
 800dcc4:	341a      	adds	r4, #26
 800dcc6:	42b5      	cmp	r5, r6
 800dcc8:	d11a      	bne.n	800dd00 <_printf_common+0xc8>
 800dcca:	2000      	movs	r0, #0
 800dccc:	e008      	b.n	800dce0 <_printf_common+0xa8>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	4652      	mov	r2, sl
 800dcd2:	4649      	mov	r1, r9
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	47c0      	blx	r8
 800dcd8:	3001      	adds	r0, #1
 800dcda:	d103      	bne.n	800dce4 <_printf_common+0xac>
 800dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dce4:	3501      	adds	r5, #1
 800dce6:	e7c6      	b.n	800dc76 <_printf_common+0x3e>
 800dce8:	18e1      	adds	r1, r4, r3
 800dcea:	1c5a      	adds	r2, r3, #1
 800dcec:	2030      	movs	r0, #48	; 0x30
 800dcee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcf2:	4422      	add	r2, r4
 800dcf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcfc:	3302      	adds	r3, #2
 800dcfe:	e7c7      	b.n	800dc90 <_printf_common+0x58>
 800dd00:	2301      	movs	r3, #1
 800dd02:	4622      	mov	r2, r4
 800dd04:	4649      	mov	r1, r9
 800dd06:	4638      	mov	r0, r7
 800dd08:	47c0      	blx	r8
 800dd0a:	3001      	adds	r0, #1
 800dd0c:	d0e6      	beq.n	800dcdc <_printf_common+0xa4>
 800dd0e:	3601      	adds	r6, #1
 800dd10:	e7d9      	b.n	800dcc6 <_printf_common+0x8e>
	...

0800dd14 <_printf_i>:
 800dd14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd18:	7e0f      	ldrb	r7, [r1, #24]
 800dd1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd1c:	2f78      	cmp	r7, #120	; 0x78
 800dd1e:	4691      	mov	r9, r2
 800dd20:	4680      	mov	r8, r0
 800dd22:	460c      	mov	r4, r1
 800dd24:	469a      	mov	sl, r3
 800dd26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd2a:	d807      	bhi.n	800dd3c <_printf_i+0x28>
 800dd2c:	2f62      	cmp	r7, #98	; 0x62
 800dd2e:	d80a      	bhi.n	800dd46 <_printf_i+0x32>
 800dd30:	2f00      	cmp	r7, #0
 800dd32:	f000 80d8 	beq.w	800dee6 <_printf_i+0x1d2>
 800dd36:	2f58      	cmp	r7, #88	; 0x58
 800dd38:	f000 80a3 	beq.w	800de82 <_printf_i+0x16e>
 800dd3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd44:	e03a      	b.n	800ddbc <_printf_i+0xa8>
 800dd46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd4a:	2b15      	cmp	r3, #21
 800dd4c:	d8f6      	bhi.n	800dd3c <_printf_i+0x28>
 800dd4e:	a101      	add	r1, pc, #4	; (adr r1, 800dd54 <_printf_i+0x40>)
 800dd50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd54:	0800ddad 	.word	0x0800ddad
 800dd58:	0800ddc1 	.word	0x0800ddc1
 800dd5c:	0800dd3d 	.word	0x0800dd3d
 800dd60:	0800dd3d 	.word	0x0800dd3d
 800dd64:	0800dd3d 	.word	0x0800dd3d
 800dd68:	0800dd3d 	.word	0x0800dd3d
 800dd6c:	0800ddc1 	.word	0x0800ddc1
 800dd70:	0800dd3d 	.word	0x0800dd3d
 800dd74:	0800dd3d 	.word	0x0800dd3d
 800dd78:	0800dd3d 	.word	0x0800dd3d
 800dd7c:	0800dd3d 	.word	0x0800dd3d
 800dd80:	0800decd 	.word	0x0800decd
 800dd84:	0800ddf1 	.word	0x0800ddf1
 800dd88:	0800deaf 	.word	0x0800deaf
 800dd8c:	0800dd3d 	.word	0x0800dd3d
 800dd90:	0800dd3d 	.word	0x0800dd3d
 800dd94:	0800deef 	.word	0x0800deef
 800dd98:	0800dd3d 	.word	0x0800dd3d
 800dd9c:	0800ddf1 	.word	0x0800ddf1
 800dda0:	0800dd3d 	.word	0x0800dd3d
 800dda4:	0800dd3d 	.word	0x0800dd3d
 800dda8:	0800deb7 	.word	0x0800deb7
 800ddac:	682b      	ldr	r3, [r5, #0]
 800ddae:	1d1a      	adds	r2, r3, #4
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	602a      	str	r2, [r5, #0]
 800ddb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e0a3      	b.n	800df08 <_printf_i+0x1f4>
 800ddc0:	6820      	ldr	r0, [r4, #0]
 800ddc2:	6829      	ldr	r1, [r5, #0]
 800ddc4:	0606      	lsls	r6, r0, #24
 800ddc6:	f101 0304 	add.w	r3, r1, #4
 800ddca:	d50a      	bpl.n	800dde2 <_printf_i+0xce>
 800ddcc:	680e      	ldr	r6, [r1, #0]
 800ddce:	602b      	str	r3, [r5, #0]
 800ddd0:	2e00      	cmp	r6, #0
 800ddd2:	da03      	bge.n	800dddc <_printf_i+0xc8>
 800ddd4:	232d      	movs	r3, #45	; 0x2d
 800ddd6:	4276      	negs	r6, r6
 800ddd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dddc:	485e      	ldr	r0, [pc, #376]	; (800df58 <_printf_i+0x244>)
 800ddde:	230a      	movs	r3, #10
 800dde0:	e019      	b.n	800de16 <_printf_i+0x102>
 800dde2:	680e      	ldr	r6, [r1, #0]
 800dde4:	602b      	str	r3, [r5, #0]
 800dde6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ddea:	bf18      	it	ne
 800ddec:	b236      	sxthne	r6, r6
 800ddee:	e7ef      	b.n	800ddd0 <_printf_i+0xbc>
 800ddf0:	682b      	ldr	r3, [r5, #0]
 800ddf2:	6820      	ldr	r0, [r4, #0]
 800ddf4:	1d19      	adds	r1, r3, #4
 800ddf6:	6029      	str	r1, [r5, #0]
 800ddf8:	0601      	lsls	r1, r0, #24
 800ddfa:	d501      	bpl.n	800de00 <_printf_i+0xec>
 800ddfc:	681e      	ldr	r6, [r3, #0]
 800ddfe:	e002      	b.n	800de06 <_printf_i+0xf2>
 800de00:	0646      	lsls	r6, r0, #25
 800de02:	d5fb      	bpl.n	800ddfc <_printf_i+0xe8>
 800de04:	881e      	ldrh	r6, [r3, #0]
 800de06:	4854      	ldr	r0, [pc, #336]	; (800df58 <_printf_i+0x244>)
 800de08:	2f6f      	cmp	r7, #111	; 0x6f
 800de0a:	bf0c      	ite	eq
 800de0c:	2308      	moveq	r3, #8
 800de0e:	230a      	movne	r3, #10
 800de10:	2100      	movs	r1, #0
 800de12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de16:	6865      	ldr	r5, [r4, #4]
 800de18:	60a5      	str	r5, [r4, #8]
 800de1a:	2d00      	cmp	r5, #0
 800de1c:	bfa2      	ittt	ge
 800de1e:	6821      	ldrge	r1, [r4, #0]
 800de20:	f021 0104 	bicge.w	r1, r1, #4
 800de24:	6021      	strge	r1, [r4, #0]
 800de26:	b90e      	cbnz	r6, 800de2c <_printf_i+0x118>
 800de28:	2d00      	cmp	r5, #0
 800de2a:	d04d      	beq.n	800dec8 <_printf_i+0x1b4>
 800de2c:	4615      	mov	r5, r2
 800de2e:	fbb6 f1f3 	udiv	r1, r6, r3
 800de32:	fb03 6711 	mls	r7, r3, r1, r6
 800de36:	5dc7      	ldrb	r7, [r0, r7]
 800de38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de3c:	4637      	mov	r7, r6
 800de3e:	42bb      	cmp	r3, r7
 800de40:	460e      	mov	r6, r1
 800de42:	d9f4      	bls.n	800de2e <_printf_i+0x11a>
 800de44:	2b08      	cmp	r3, #8
 800de46:	d10b      	bne.n	800de60 <_printf_i+0x14c>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	07de      	lsls	r6, r3, #31
 800de4c:	d508      	bpl.n	800de60 <_printf_i+0x14c>
 800de4e:	6923      	ldr	r3, [r4, #16]
 800de50:	6861      	ldr	r1, [r4, #4]
 800de52:	4299      	cmp	r1, r3
 800de54:	bfde      	ittt	le
 800de56:	2330      	movle	r3, #48	; 0x30
 800de58:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de60:	1b52      	subs	r2, r2, r5
 800de62:	6122      	str	r2, [r4, #16]
 800de64:	f8cd a000 	str.w	sl, [sp]
 800de68:	464b      	mov	r3, r9
 800de6a:	aa03      	add	r2, sp, #12
 800de6c:	4621      	mov	r1, r4
 800de6e:	4640      	mov	r0, r8
 800de70:	f7ff fee2 	bl	800dc38 <_printf_common>
 800de74:	3001      	adds	r0, #1
 800de76:	d14c      	bne.n	800df12 <_printf_i+0x1fe>
 800de78:	f04f 30ff 	mov.w	r0, #4294967295
 800de7c:	b004      	add	sp, #16
 800de7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de82:	4835      	ldr	r0, [pc, #212]	; (800df58 <_printf_i+0x244>)
 800de84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800de88:	6829      	ldr	r1, [r5, #0]
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800de90:	6029      	str	r1, [r5, #0]
 800de92:	061d      	lsls	r5, r3, #24
 800de94:	d514      	bpl.n	800dec0 <_printf_i+0x1ac>
 800de96:	07df      	lsls	r7, r3, #31
 800de98:	bf44      	itt	mi
 800de9a:	f043 0320 	orrmi.w	r3, r3, #32
 800de9e:	6023      	strmi	r3, [r4, #0]
 800dea0:	b91e      	cbnz	r6, 800deaa <_printf_i+0x196>
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	f023 0320 	bic.w	r3, r3, #32
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	2310      	movs	r3, #16
 800deac:	e7b0      	b.n	800de10 <_printf_i+0xfc>
 800deae:	6823      	ldr	r3, [r4, #0]
 800deb0:	f043 0320 	orr.w	r3, r3, #32
 800deb4:	6023      	str	r3, [r4, #0]
 800deb6:	2378      	movs	r3, #120	; 0x78
 800deb8:	4828      	ldr	r0, [pc, #160]	; (800df5c <_printf_i+0x248>)
 800deba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800debe:	e7e3      	b.n	800de88 <_printf_i+0x174>
 800dec0:	0659      	lsls	r1, r3, #25
 800dec2:	bf48      	it	mi
 800dec4:	b2b6      	uxthmi	r6, r6
 800dec6:	e7e6      	b.n	800de96 <_printf_i+0x182>
 800dec8:	4615      	mov	r5, r2
 800deca:	e7bb      	b.n	800de44 <_printf_i+0x130>
 800decc:	682b      	ldr	r3, [r5, #0]
 800dece:	6826      	ldr	r6, [r4, #0]
 800ded0:	6961      	ldr	r1, [r4, #20]
 800ded2:	1d18      	adds	r0, r3, #4
 800ded4:	6028      	str	r0, [r5, #0]
 800ded6:	0635      	lsls	r5, r6, #24
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	d501      	bpl.n	800dee0 <_printf_i+0x1cc>
 800dedc:	6019      	str	r1, [r3, #0]
 800dede:	e002      	b.n	800dee6 <_printf_i+0x1d2>
 800dee0:	0670      	lsls	r0, r6, #25
 800dee2:	d5fb      	bpl.n	800dedc <_printf_i+0x1c8>
 800dee4:	8019      	strh	r1, [r3, #0]
 800dee6:	2300      	movs	r3, #0
 800dee8:	6123      	str	r3, [r4, #16]
 800deea:	4615      	mov	r5, r2
 800deec:	e7ba      	b.n	800de64 <_printf_i+0x150>
 800deee:	682b      	ldr	r3, [r5, #0]
 800def0:	1d1a      	adds	r2, r3, #4
 800def2:	602a      	str	r2, [r5, #0]
 800def4:	681d      	ldr	r5, [r3, #0]
 800def6:	6862      	ldr	r2, [r4, #4]
 800def8:	2100      	movs	r1, #0
 800defa:	4628      	mov	r0, r5
 800defc:	f7f2 f998 	bl	8000230 <memchr>
 800df00:	b108      	cbz	r0, 800df06 <_printf_i+0x1f2>
 800df02:	1b40      	subs	r0, r0, r5
 800df04:	6060      	str	r0, [r4, #4]
 800df06:	6863      	ldr	r3, [r4, #4]
 800df08:	6123      	str	r3, [r4, #16]
 800df0a:	2300      	movs	r3, #0
 800df0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df10:	e7a8      	b.n	800de64 <_printf_i+0x150>
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	462a      	mov	r2, r5
 800df16:	4649      	mov	r1, r9
 800df18:	4640      	mov	r0, r8
 800df1a:	47d0      	blx	sl
 800df1c:	3001      	adds	r0, #1
 800df1e:	d0ab      	beq.n	800de78 <_printf_i+0x164>
 800df20:	6823      	ldr	r3, [r4, #0]
 800df22:	079b      	lsls	r3, r3, #30
 800df24:	d413      	bmi.n	800df4e <_printf_i+0x23a>
 800df26:	68e0      	ldr	r0, [r4, #12]
 800df28:	9b03      	ldr	r3, [sp, #12]
 800df2a:	4298      	cmp	r0, r3
 800df2c:	bfb8      	it	lt
 800df2e:	4618      	movlt	r0, r3
 800df30:	e7a4      	b.n	800de7c <_printf_i+0x168>
 800df32:	2301      	movs	r3, #1
 800df34:	4632      	mov	r2, r6
 800df36:	4649      	mov	r1, r9
 800df38:	4640      	mov	r0, r8
 800df3a:	47d0      	blx	sl
 800df3c:	3001      	adds	r0, #1
 800df3e:	d09b      	beq.n	800de78 <_printf_i+0x164>
 800df40:	3501      	adds	r5, #1
 800df42:	68e3      	ldr	r3, [r4, #12]
 800df44:	9903      	ldr	r1, [sp, #12]
 800df46:	1a5b      	subs	r3, r3, r1
 800df48:	42ab      	cmp	r3, r5
 800df4a:	dcf2      	bgt.n	800df32 <_printf_i+0x21e>
 800df4c:	e7eb      	b.n	800df26 <_printf_i+0x212>
 800df4e:	2500      	movs	r5, #0
 800df50:	f104 0619 	add.w	r6, r4, #25
 800df54:	e7f5      	b.n	800df42 <_printf_i+0x22e>
 800df56:	bf00      	nop
 800df58:	08011616 	.word	0x08011616
 800df5c:	08011627 	.word	0x08011627

0800df60 <iprintf>:
 800df60:	b40f      	push	{r0, r1, r2, r3}
 800df62:	4b0a      	ldr	r3, [pc, #40]	; (800df8c <iprintf+0x2c>)
 800df64:	b513      	push	{r0, r1, r4, lr}
 800df66:	681c      	ldr	r4, [r3, #0]
 800df68:	b124      	cbz	r4, 800df74 <iprintf+0x14>
 800df6a:	69a3      	ldr	r3, [r4, #24]
 800df6c:	b913      	cbnz	r3, 800df74 <iprintf+0x14>
 800df6e:	4620      	mov	r0, r4
 800df70:	f001 f9a6 	bl	800f2c0 <__sinit>
 800df74:	ab05      	add	r3, sp, #20
 800df76:	9a04      	ldr	r2, [sp, #16]
 800df78:	68a1      	ldr	r1, [r4, #8]
 800df7a:	9301      	str	r3, [sp, #4]
 800df7c:	4620      	mov	r0, r4
 800df7e:	f001 ff63 	bl	800fe48 <_vfiprintf_r>
 800df82:	b002      	add	sp, #8
 800df84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df88:	b004      	add	sp, #16
 800df8a:	4770      	bx	lr
 800df8c:	20000014 	.word	0x20000014

0800df90 <_puts_r>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	460e      	mov	r6, r1
 800df94:	4605      	mov	r5, r0
 800df96:	b118      	cbz	r0, 800dfa0 <_puts_r+0x10>
 800df98:	6983      	ldr	r3, [r0, #24]
 800df9a:	b90b      	cbnz	r3, 800dfa0 <_puts_r+0x10>
 800df9c:	f001 f990 	bl	800f2c0 <__sinit>
 800dfa0:	69ab      	ldr	r3, [r5, #24]
 800dfa2:	68ac      	ldr	r4, [r5, #8]
 800dfa4:	b913      	cbnz	r3, 800dfac <_puts_r+0x1c>
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	f001 f98a 	bl	800f2c0 <__sinit>
 800dfac:	4b2c      	ldr	r3, [pc, #176]	; (800e060 <_puts_r+0xd0>)
 800dfae:	429c      	cmp	r4, r3
 800dfb0:	d120      	bne.n	800dff4 <_puts_r+0x64>
 800dfb2:	686c      	ldr	r4, [r5, #4]
 800dfb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfb6:	07db      	lsls	r3, r3, #31
 800dfb8:	d405      	bmi.n	800dfc6 <_puts_r+0x36>
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	0598      	lsls	r0, r3, #22
 800dfbe:	d402      	bmi.n	800dfc6 <_puts_r+0x36>
 800dfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfc2:	f001 fa20 	bl	800f406 <__retarget_lock_acquire_recursive>
 800dfc6:	89a3      	ldrh	r3, [r4, #12]
 800dfc8:	0719      	lsls	r1, r3, #28
 800dfca:	d51d      	bpl.n	800e008 <_puts_r+0x78>
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	b1db      	cbz	r3, 800e008 <_puts_r+0x78>
 800dfd0:	3e01      	subs	r6, #1
 800dfd2:	68a3      	ldr	r3, [r4, #8]
 800dfd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	60a3      	str	r3, [r4, #8]
 800dfdc:	bb39      	cbnz	r1, 800e02e <_puts_r+0x9e>
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	da38      	bge.n	800e054 <_puts_r+0xc4>
 800dfe2:	4622      	mov	r2, r4
 800dfe4:	210a      	movs	r1, #10
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f000 f916 	bl	800e218 <__swbuf_r>
 800dfec:	3001      	adds	r0, #1
 800dfee:	d011      	beq.n	800e014 <_puts_r+0x84>
 800dff0:	250a      	movs	r5, #10
 800dff2:	e011      	b.n	800e018 <_puts_r+0x88>
 800dff4:	4b1b      	ldr	r3, [pc, #108]	; (800e064 <_puts_r+0xd4>)
 800dff6:	429c      	cmp	r4, r3
 800dff8:	d101      	bne.n	800dffe <_puts_r+0x6e>
 800dffa:	68ac      	ldr	r4, [r5, #8]
 800dffc:	e7da      	b.n	800dfb4 <_puts_r+0x24>
 800dffe:	4b1a      	ldr	r3, [pc, #104]	; (800e068 <_puts_r+0xd8>)
 800e000:	429c      	cmp	r4, r3
 800e002:	bf08      	it	eq
 800e004:	68ec      	ldreq	r4, [r5, #12]
 800e006:	e7d5      	b.n	800dfb4 <_puts_r+0x24>
 800e008:	4621      	mov	r1, r4
 800e00a:	4628      	mov	r0, r5
 800e00c:	f000 f956 	bl	800e2bc <__swsetup_r>
 800e010:	2800      	cmp	r0, #0
 800e012:	d0dd      	beq.n	800dfd0 <_puts_r+0x40>
 800e014:	f04f 35ff 	mov.w	r5, #4294967295
 800e018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e01a:	07da      	lsls	r2, r3, #31
 800e01c:	d405      	bmi.n	800e02a <_puts_r+0x9a>
 800e01e:	89a3      	ldrh	r3, [r4, #12]
 800e020:	059b      	lsls	r3, r3, #22
 800e022:	d402      	bmi.n	800e02a <_puts_r+0x9a>
 800e024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e026:	f001 f9ef 	bl	800f408 <__retarget_lock_release_recursive>
 800e02a:	4628      	mov	r0, r5
 800e02c:	bd70      	pop	{r4, r5, r6, pc}
 800e02e:	2b00      	cmp	r3, #0
 800e030:	da04      	bge.n	800e03c <_puts_r+0xac>
 800e032:	69a2      	ldr	r2, [r4, #24]
 800e034:	429a      	cmp	r2, r3
 800e036:	dc06      	bgt.n	800e046 <_puts_r+0xb6>
 800e038:	290a      	cmp	r1, #10
 800e03a:	d004      	beq.n	800e046 <_puts_r+0xb6>
 800e03c:	6823      	ldr	r3, [r4, #0]
 800e03e:	1c5a      	adds	r2, r3, #1
 800e040:	6022      	str	r2, [r4, #0]
 800e042:	7019      	strb	r1, [r3, #0]
 800e044:	e7c5      	b.n	800dfd2 <_puts_r+0x42>
 800e046:	4622      	mov	r2, r4
 800e048:	4628      	mov	r0, r5
 800e04a:	f000 f8e5 	bl	800e218 <__swbuf_r>
 800e04e:	3001      	adds	r0, #1
 800e050:	d1bf      	bne.n	800dfd2 <_puts_r+0x42>
 800e052:	e7df      	b.n	800e014 <_puts_r+0x84>
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	250a      	movs	r5, #10
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	6022      	str	r2, [r4, #0]
 800e05c:	701d      	strb	r5, [r3, #0]
 800e05e:	e7db      	b.n	800e018 <_puts_r+0x88>
 800e060:	080116e8 	.word	0x080116e8
 800e064:	08011708 	.word	0x08011708
 800e068:	080116c8 	.word	0x080116c8

0800e06c <puts>:
 800e06c:	4b02      	ldr	r3, [pc, #8]	; (800e078 <puts+0xc>)
 800e06e:	4601      	mov	r1, r0
 800e070:	6818      	ldr	r0, [r3, #0]
 800e072:	f7ff bf8d 	b.w	800df90 <_puts_r>
 800e076:	bf00      	nop
 800e078:	20000014 	.word	0x20000014

0800e07c <setbuf>:
 800e07c:	2900      	cmp	r1, #0
 800e07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e082:	bf0c      	ite	eq
 800e084:	2202      	moveq	r2, #2
 800e086:	2200      	movne	r2, #0
 800e088:	f000 b800 	b.w	800e08c <setvbuf>

0800e08c <setvbuf>:
 800e08c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e090:	461d      	mov	r5, r3
 800e092:	4b5d      	ldr	r3, [pc, #372]	; (800e208 <setvbuf+0x17c>)
 800e094:	681f      	ldr	r7, [r3, #0]
 800e096:	4604      	mov	r4, r0
 800e098:	460e      	mov	r6, r1
 800e09a:	4690      	mov	r8, r2
 800e09c:	b127      	cbz	r7, 800e0a8 <setvbuf+0x1c>
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	b913      	cbnz	r3, 800e0a8 <setvbuf+0x1c>
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	f001 f90c 	bl	800f2c0 <__sinit>
 800e0a8:	4b58      	ldr	r3, [pc, #352]	; (800e20c <setvbuf+0x180>)
 800e0aa:	429c      	cmp	r4, r3
 800e0ac:	d167      	bne.n	800e17e <setvbuf+0xf2>
 800e0ae:	687c      	ldr	r4, [r7, #4]
 800e0b0:	f1b8 0f02 	cmp.w	r8, #2
 800e0b4:	d006      	beq.n	800e0c4 <setvbuf+0x38>
 800e0b6:	f1b8 0f01 	cmp.w	r8, #1
 800e0ba:	f200 809f 	bhi.w	800e1fc <setvbuf+0x170>
 800e0be:	2d00      	cmp	r5, #0
 800e0c0:	f2c0 809c 	blt.w	800e1fc <setvbuf+0x170>
 800e0c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0c6:	07db      	lsls	r3, r3, #31
 800e0c8:	d405      	bmi.n	800e0d6 <setvbuf+0x4a>
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	0598      	lsls	r0, r3, #22
 800e0ce:	d402      	bmi.n	800e0d6 <setvbuf+0x4a>
 800e0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0d2:	f001 f998 	bl	800f406 <__retarget_lock_acquire_recursive>
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	4638      	mov	r0, r7
 800e0da:	f001 f85d 	bl	800f198 <_fflush_r>
 800e0de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0e0:	b141      	cbz	r1, 800e0f4 <setvbuf+0x68>
 800e0e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0e6:	4299      	cmp	r1, r3
 800e0e8:	d002      	beq.n	800e0f0 <setvbuf+0x64>
 800e0ea:	4638      	mov	r0, r7
 800e0ec:	f001 fda2 	bl	800fc34 <_free_r>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	6363      	str	r3, [r4, #52]	; 0x34
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	61a3      	str	r3, [r4, #24]
 800e0f8:	6063      	str	r3, [r4, #4]
 800e0fa:	89a3      	ldrh	r3, [r4, #12]
 800e0fc:	0619      	lsls	r1, r3, #24
 800e0fe:	d503      	bpl.n	800e108 <setvbuf+0x7c>
 800e100:	6921      	ldr	r1, [r4, #16]
 800e102:	4638      	mov	r0, r7
 800e104:	f001 fd96 	bl	800fc34 <_free_r>
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800e10e:	f023 0303 	bic.w	r3, r3, #3
 800e112:	f1b8 0f02 	cmp.w	r8, #2
 800e116:	81a3      	strh	r3, [r4, #12]
 800e118:	d06c      	beq.n	800e1f4 <setvbuf+0x168>
 800e11a:	ab01      	add	r3, sp, #4
 800e11c:	466a      	mov	r2, sp
 800e11e:	4621      	mov	r1, r4
 800e120:	4638      	mov	r0, r7
 800e122:	f001 f972 	bl	800f40a <__swhatbuf_r>
 800e126:	89a3      	ldrh	r3, [r4, #12]
 800e128:	4318      	orrs	r0, r3
 800e12a:	81a0      	strh	r0, [r4, #12]
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	d130      	bne.n	800e192 <setvbuf+0x106>
 800e130:	9d00      	ldr	r5, [sp, #0]
 800e132:	4628      	mov	r0, r5
 800e134:	f001 f9ce 	bl	800f4d4 <malloc>
 800e138:	4606      	mov	r6, r0
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d155      	bne.n	800e1ea <setvbuf+0x15e>
 800e13e:	f8dd 9000 	ldr.w	r9, [sp]
 800e142:	45a9      	cmp	r9, r5
 800e144:	d14a      	bne.n	800e1dc <setvbuf+0x150>
 800e146:	f04f 35ff 	mov.w	r5, #4294967295
 800e14a:	2200      	movs	r2, #0
 800e14c:	60a2      	str	r2, [r4, #8]
 800e14e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800e152:	6022      	str	r2, [r4, #0]
 800e154:	6122      	str	r2, [r4, #16]
 800e156:	2201      	movs	r2, #1
 800e158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e15c:	6162      	str	r2, [r4, #20]
 800e15e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e160:	f043 0302 	orr.w	r3, r3, #2
 800e164:	07d2      	lsls	r2, r2, #31
 800e166:	81a3      	strh	r3, [r4, #12]
 800e168:	d405      	bmi.n	800e176 <setvbuf+0xea>
 800e16a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e16e:	d102      	bne.n	800e176 <setvbuf+0xea>
 800e170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e172:	f001 f949 	bl	800f408 <__retarget_lock_release_recursive>
 800e176:	4628      	mov	r0, r5
 800e178:	b003      	add	sp, #12
 800e17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e17e:	4b24      	ldr	r3, [pc, #144]	; (800e210 <setvbuf+0x184>)
 800e180:	429c      	cmp	r4, r3
 800e182:	d101      	bne.n	800e188 <setvbuf+0xfc>
 800e184:	68bc      	ldr	r4, [r7, #8]
 800e186:	e793      	b.n	800e0b0 <setvbuf+0x24>
 800e188:	4b22      	ldr	r3, [pc, #136]	; (800e214 <setvbuf+0x188>)
 800e18a:	429c      	cmp	r4, r3
 800e18c:	bf08      	it	eq
 800e18e:	68fc      	ldreq	r4, [r7, #12]
 800e190:	e78e      	b.n	800e0b0 <setvbuf+0x24>
 800e192:	2e00      	cmp	r6, #0
 800e194:	d0cd      	beq.n	800e132 <setvbuf+0xa6>
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	b913      	cbnz	r3, 800e1a0 <setvbuf+0x114>
 800e19a:	4638      	mov	r0, r7
 800e19c:	f001 f890 	bl	800f2c0 <__sinit>
 800e1a0:	f1b8 0f01 	cmp.w	r8, #1
 800e1a4:	bf08      	it	eq
 800e1a6:	89a3      	ldrheq	r3, [r4, #12]
 800e1a8:	6026      	str	r6, [r4, #0]
 800e1aa:	bf04      	itt	eq
 800e1ac:	f043 0301 	orreq.w	r3, r3, #1
 800e1b0:	81a3      	strheq	r3, [r4, #12]
 800e1b2:	89a2      	ldrh	r2, [r4, #12]
 800e1b4:	f012 0308 	ands.w	r3, r2, #8
 800e1b8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e1bc:	d01c      	beq.n	800e1f8 <setvbuf+0x16c>
 800e1be:	07d3      	lsls	r3, r2, #31
 800e1c0:	bf41      	itttt	mi
 800e1c2:	2300      	movmi	r3, #0
 800e1c4:	426d      	negmi	r5, r5
 800e1c6:	60a3      	strmi	r3, [r4, #8]
 800e1c8:	61a5      	strmi	r5, [r4, #24]
 800e1ca:	bf58      	it	pl
 800e1cc:	60a5      	strpl	r5, [r4, #8]
 800e1ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800e1d0:	f015 0501 	ands.w	r5, r5, #1
 800e1d4:	d115      	bne.n	800e202 <setvbuf+0x176>
 800e1d6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e1da:	e7c8      	b.n	800e16e <setvbuf+0xe2>
 800e1dc:	4648      	mov	r0, r9
 800e1de:	f001 f979 	bl	800f4d4 <malloc>
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d0ae      	beq.n	800e146 <setvbuf+0xba>
 800e1e8:	464d      	mov	r5, r9
 800e1ea:	89a3      	ldrh	r3, [r4, #12]
 800e1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f0:	81a3      	strh	r3, [r4, #12]
 800e1f2:	e7d0      	b.n	800e196 <setvbuf+0x10a>
 800e1f4:	2500      	movs	r5, #0
 800e1f6:	e7a8      	b.n	800e14a <setvbuf+0xbe>
 800e1f8:	60a3      	str	r3, [r4, #8]
 800e1fa:	e7e8      	b.n	800e1ce <setvbuf+0x142>
 800e1fc:	f04f 35ff 	mov.w	r5, #4294967295
 800e200:	e7b9      	b.n	800e176 <setvbuf+0xea>
 800e202:	2500      	movs	r5, #0
 800e204:	e7b7      	b.n	800e176 <setvbuf+0xea>
 800e206:	bf00      	nop
 800e208:	20000014 	.word	0x20000014
 800e20c:	080116e8 	.word	0x080116e8
 800e210:	08011708 	.word	0x08011708
 800e214:	080116c8 	.word	0x080116c8

0800e218 <__swbuf_r>:
 800e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e21a:	460e      	mov	r6, r1
 800e21c:	4614      	mov	r4, r2
 800e21e:	4605      	mov	r5, r0
 800e220:	b118      	cbz	r0, 800e22a <__swbuf_r+0x12>
 800e222:	6983      	ldr	r3, [r0, #24]
 800e224:	b90b      	cbnz	r3, 800e22a <__swbuf_r+0x12>
 800e226:	f001 f84b 	bl	800f2c0 <__sinit>
 800e22a:	4b21      	ldr	r3, [pc, #132]	; (800e2b0 <__swbuf_r+0x98>)
 800e22c:	429c      	cmp	r4, r3
 800e22e:	d12b      	bne.n	800e288 <__swbuf_r+0x70>
 800e230:	686c      	ldr	r4, [r5, #4]
 800e232:	69a3      	ldr	r3, [r4, #24]
 800e234:	60a3      	str	r3, [r4, #8]
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	071a      	lsls	r2, r3, #28
 800e23a:	d52f      	bpl.n	800e29c <__swbuf_r+0x84>
 800e23c:	6923      	ldr	r3, [r4, #16]
 800e23e:	b36b      	cbz	r3, 800e29c <__swbuf_r+0x84>
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	6820      	ldr	r0, [r4, #0]
 800e244:	1ac0      	subs	r0, r0, r3
 800e246:	6963      	ldr	r3, [r4, #20]
 800e248:	b2f6      	uxtb	r6, r6
 800e24a:	4283      	cmp	r3, r0
 800e24c:	4637      	mov	r7, r6
 800e24e:	dc04      	bgt.n	800e25a <__swbuf_r+0x42>
 800e250:	4621      	mov	r1, r4
 800e252:	4628      	mov	r0, r5
 800e254:	f000 ffa0 	bl	800f198 <_fflush_r>
 800e258:	bb30      	cbnz	r0, 800e2a8 <__swbuf_r+0x90>
 800e25a:	68a3      	ldr	r3, [r4, #8]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	60a3      	str	r3, [r4, #8]
 800e260:	6823      	ldr	r3, [r4, #0]
 800e262:	1c5a      	adds	r2, r3, #1
 800e264:	6022      	str	r2, [r4, #0]
 800e266:	701e      	strb	r6, [r3, #0]
 800e268:	6963      	ldr	r3, [r4, #20]
 800e26a:	3001      	adds	r0, #1
 800e26c:	4283      	cmp	r3, r0
 800e26e:	d004      	beq.n	800e27a <__swbuf_r+0x62>
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	07db      	lsls	r3, r3, #31
 800e274:	d506      	bpl.n	800e284 <__swbuf_r+0x6c>
 800e276:	2e0a      	cmp	r6, #10
 800e278:	d104      	bne.n	800e284 <__swbuf_r+0x6c>
 800e27a:	4621      	mov	r1, r4
 800e27c:	4628      	mov	r0, r5
 800e27e:	f000 ff8b 	bl	800f198 <_fflush_r>
 800e282:	b988      	cbnz	r0, 800e2a8 <__swbuf_r+0x90>
 800e284:	4638      	mov	r0, r7
 800e286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e288:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <__swbuf_r+0x9c>)
 800e28a:	429c      	cmp	r4, r3
 800e28c:	d101      	bne.n	800e292 <__swbuf_r+0x7a>
 800e28e:	68ac      	ldr	r4, [r5, #8]
 800e290:	e7cf      	b.n	800e232 <__swbuf_r+0x1a>
 800e292:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <__swbuf_r+0xa0>)
 800e294:	429c      	cmp	r4, r3
 800e296:	bf08      	it	eq
 800e298:	68ec      	ldreq	r4, [r5, #12]
 800e29a:	e7ca      	b.n	800e232 <__swbuf_r+0x1a>
 800e29c:	4621      	mov	r1, r4
 800e29e:	4628      	mov	r0, r5
 800e2a0:	f000 f80c 	bl	800e2bc <__swsetup_r>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d0cb      	beq.n	800e240 <__swbuf_r+0x28>
 800e2a8:	f04f 37ff 	mov.w	r7, #4294967295
 800e2ac:	e7ea      	b.n	800e284 <__swbuf_r+0x6c>
 800e2ae:	bf00      	nop
 800e2b0:	080116e8 	.word	0x080116e8
 800e2b4:	08011708 	.word	0x08011708
 800e2b8:	080116c8 	.word	0x080116c8

0800e2bc <__swsetup_r>:
 800e2bc:	4b32      	ldr	r3, [pc, #200]	; (800e388 <__swsetup_r+0xcc>)
 800e2be:	b570      	push	{r4, r5, r6, lr}
 800e2c0:	681d      	ldr	r5, [r3, #0]
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	460c      	mov	r4, r1
 800e2c6:	b125      	cbz	r5, 800e2d2 <__swsetup_r+0x16>
 800e2c8:	69ab      	ldr	r3, [r5, #24]
 800e2ca:	b913      	cbnz	r3, 800e2d2 <__swsetup_r+0x16>
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	f000 fff7 	bl	800f2c0 <__sinit>
 800e2d2:	4b2e      	ldr	r3, [pc, #184]	; (800e38c <__swsetup_r+0xd0>)
 800e2d4:	429c      	cmp	r4, r3
 800e2d6:	d10f      	bne.n	800e2f8 <__swsetup_r+0x3c>
 800e2d8:	686c      	ldr	r4, [r5, #4]
 800e2da:	89a3      	ldrh	r3, [r4, #12]
 800e2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e2e0:	0719      	lsls	r1, r3, #28
 800e2e2:	d42c      	bmi.n	800e33e <__swsetup_r+0x82>
 800e2e4:	06dd      	lsls	r5, r3, #27
 800e2e6:	d411      	bmi.n	800e30c <__swsetup_r+0x50>
 800e2e8:	2309      	movs	r3, #9
 800e2ea:	6033      	str	r3, [r6, #0]
 800e2ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e2f0:	81a3      	strh	r3, [r4, #12]
 800e2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f6:	e03e      	b.n	800e376 <__swsetup_r+0xba>
 800e2f8:	4b25      	ldr	r3, [pc, #148]	; (800e390 <__swsetup_r+0xd4>)
 800e2fa:	429c      	cmp	r4, r3
 800e2fc:	d101      	bne.n	800e302 <__swsetup_r+0x46>
 800e2fe:	68ac      	ldr	r4, [r5, #8]
 800e300:	e7eb      	b.n	800e2da <__swsetup_r+0x1e>
 800e302:	4b24      	ldr	r3, [pc, #144]	; (800e394 <__swsetup_r+0xd8>)
 800e304:	429c      	cmp	r4, r3
 800e306:	bf08      	it	eq
 800e308:	68ec      	ldreq	r4, [r5, #12]
 800e30a:	e7e6      	b.n	800e2da <__swsetup_r+0x1e>
 800e30c:	0758      	lsls	r0, r3, #29
 800e30e:	d512      	bpl.n	800e336 <__swsetup_r+0x7a>
 800e310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e312:	b141      	cbz	r1, 800e326 <__swsetup_r+0x6a>
 800e314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e318:	4299      	cmp	r1, r3
 800e31a:	d002      	beq.n	800e322 <__swsetup_r+0x66>
 800e31c:	4630      	mov	r0, r6
 800e31e:	f001 fc89 	bl	800fc34 <_free_r>
 800e322:	2300      	movs	r3, #0
 800e324:	6363      	str	r3, [r4, #52]	; 0x34
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e32c:	81a3      	strh	r3, [r4, #12]
 800e32e:	2300      	movs	r3, #0
 800e330:	6063      	str	r3, [r4, #4]
 800e332:	6923      	ldr	r3, [r4, #16]
 800e334:	6023      	str	r3, [r4, #0]
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	f043 0308 	orr.w	r3, r3, #8
 800e33c:	81a3      	strh	r3, [r4, #12]
 800e33e:	6923      	ldr	r3, [r4, #16]
 800e340:	b94b      	cbnz	r3, 800e356 <__swsetup_r+0x9a>
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e34c:	d003      	beq.n	800e356 <__swsetup_r+0x9a>
 800e34e:	4621      	mov	r1, r4
 800e350:	4630      	mov	r0, r6
 800e352:	f001 f87f 	bl	800f454 <__smakebuf_r>
 800e356:	89a0      	ldrh	r0, [r4, #12]
 800e358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e35c:	f010 0301 	ands.w	r3, r0, #1
 800e360:	d00a      	beq.n	800e378 <__swsetup_r+0xbc>
 800e362:	2300      	movs	r3, #0
 800e364:	60a3      	str	r3, [r4, #8]
 800e366:	6963      	ldr	r3, [r4, #20]
 800e368:	425b      	negs	r3, r3
 800e36a:	61a3      	str	r3, [r4, #24]
 800e36c:	6923      	ldr	r3, [r4, #16]
 800e36e:	b943      	cbnz	r3, 800e382 <__swsetup_r+0xc6>
 800e370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e374:	d1ba      	bne.n	800e2ec <__swsetup_r+0x30>
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	0781      	lsls	r1, r0, #30
 800e37a:	bf58      	it	pl
 800e37c:	6963      	ldrpl	r3, [r4, #20]
 800e37e:	60a3      	str	r3, [r4, #8]
 800e380:	e7f4      	b.n	800e36c <__swsetup_r+0xb0>
 800e382:	2000      	movs	r0, #0
 800e384:	e7f7      	b.n	800e376 <__swsetup_r+0xba>
 800e386:	bf00      	nop
 800e388:	20000014 	.word	0x20000014
 800e38c:	080116e8 	.word	0x080116e8
 800e390:	08011708 	.word	0x08011708
 800e394:	080116c8 	.word	0x080116c8

0800e398 <quorem>:
 800e398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39c:	6903      	ldr	r3, [r0, #16]
 800e39e:	690c      	ldr	r4, [r1, #16]
 800e3a0:	42a3      	cmp	r3, r4
 800e3a2:	4607      	mov	r7, r0
 800e3a4:	f2c0 8081 	blt.w	800e4aa <quorem+0x112>
 800e3a8:	3c01      	subs	r4, #1
 800e3aa:	f101 0814 	add.w	r8, r1, #20
 800e3ae:	f100 0514 	add.w	r5, r0, #20
 800e3b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3b6:	9301      	str	r3, [sp, #4]
 800e3b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e3c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3d0:	d331      	bcc.n	800e436 <quorem+0x9e>
 800e3d2:	f04f 0e00 	mov.w	lr, #0
 800e3d6:	4640      	mov	r0, r8
 800e3d8:	46ac      	mov	ip, r5
 800e3da:	46f2      	mov	sl, lr
 800e3dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800e3e0:	b293      	uxth	r3, r2
 800e3e2:	fb06 e303 	mla	r3, r6, r3, lr
 800e3e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	ebaa 0303 	sub.w	r3, sl, r3
 800e3f0:	f8dc a000 	ldr.w	sl, [ip]
 800e3f4:	0c12      	lsrs	r2, r2, #16
 800e3f6:	fa13 f38a 	uxtah	r3, r3, sl
 800e3fa:	fb06 e202 	mla	r2, r6, r2, lr
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	9b00      	ldr	r3, [sp, #0]
 800e402:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e406:	b292      	uxth	r2, r2
 800e408:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e40c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e410:	f8bd 3000 	ldrh.w	r3, [sp]
 800e414:	4581      	cmp	r9, r0
 800e416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e41a:	f84c 3b04 	str.w	r3, [ip], #4
 800e41e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e422:	d2db      	bcs.n	800e3dc <quorem+0x44>
 800e424:	f855 300b 	ldr.w	r3, [r5, fp]
 800e428:	b92b      	cbnz	r3, 800e436 <quorem+0x9e>
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	3b04      	subs	r3, #4
 800e42e:	429d      	cmp	r5, r3
 800e430:	461a      	mov	r2, r3
 800e432:	d32e      	bcc.n	800e492 <quorem+0xfa>
 800e434:	613c      	str	r4, [r7, #16]
 800e436:	4638      	mov	r0, r7
 800e438:	f001 fae4 	bl	800fa04 <__mcmp>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	db24      	blt.n	800e48a <quorem+0xf2>
 800e440:	3601      	adds	r6, #1
 800e442:	4628      	mov	r0, r5
 800e444:	f04f 0c00 	mov.w	ip, #0
 800e448:	f858 2b04 	ldr.w	r2, [r8], #4
 800e44c:	f8d0 e000 	ldr.w	lr, [r0]
 800e450:	b293      	uxth	r3, r2
 800e452:	ebac 0303 	sub.w	r3, ip, r3
 800e456:	0c12      	lsrs	r2, r2, #16
 800e458:	fa13 f38e 	uxtah	r3, r3, lr
 800e45c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e464:	b29b      	uxth	r3, r3
 800e466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e46a:	45c1      	cmp	r9, r8
 800e46c:	f840 3b04 	str.w	r3, [r0], #4
 800e470:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e474:	d2e8      	bcs.n	800e448 <quorem+0xb0>
 800e476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e47e:	b922      	cbnz	r2, 800e48a <quorem+0xf2>
 800e480:	3b04      	subs	r3, #4
 800e482:	429d      	cmp	r5, r3
 800e484:	461a      	mov	r2, r3
 800e486:	d30a      	bcc.n	800e49e <quorem+0x106>
 800e488:	613c      	str	r4, [r7, #16]
 800e48a:	4630      	mov	r0, r6
 800e48c:	b003      	add	sp, #12
 800e48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e492:	6812      	ldr	r2, [r2, #0]
 800e494:	3b04      	subs	r3, #4
 800e496:	2a00      	cmp	r2, #0
 800e498:	d1cc      	bne.n	800e434 <quorem+0x9c>
 800e49a:	3c01      	subs	r4, #1
 800e49c:	e7c7      	b.n	800e42e <quorem+0x96>
 800e49e:	6812      	ldr	r2, [r2, #0]
 800e4a0:	3b04      	subs	r3, #4
 800e4a2:	2a00      	cmp	r2, #0
 800e4a4:	d1f0      	bne.n	800e488 <quorem+0xf0>
 800e4a6:	3c01      	subs	r4, #1
 800e4a8:	e7eb      	b.n	800e482 <quorem+0xea>
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	e7ee      	b.n	800e48c <quorem+0xf4>
	...

0800e4b0 <_dtoa_r>:
 800e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	ed2d 8b04 	vpush	{d8-d9}
 800e4b8:	ec57 6b10 	vmov	r6, r7, d0
 800e4bc:	b093      	sub	sp, #76	; 0x4c
 800e4be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e4c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e4c4:	9106      	str	r1, [sp, #24]
 800e4c6:	ee10 aa10 	vmov	sl, s0
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e4ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e4d0:	46bb      	mov	fp, r7
 800e4d2:	b975      	cbnz	r5, 800e4f2 <_dtoa_r+0x42>
 800e4d4:	2010      	movs	r0, #16
 800e4d6:	f000 fffd 	bl	800f4d4 <malloc>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	6260      	str	r0, [r4, #36]	; 0x24
 800e4de:	b920      	cbnz	r0, 800e4ea <_dtoa_r+0x3a>
 800e4e0:	4ba7      	ldr	r3, [pc, #668]	; (800e780 <_dtoa_r+0x2d0>)
 800e4e2:	21ea      	movs	r1, #234	; 0xea
 800e4e4:	48a7      	ldr	r0, [pc, #668]	; (800e784 <_dtoa_r+0x2d4>)
 800e4e6:	f001 fe45 	bl	8010174 <__assert_func>
 800e4ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e4ee:	6005      	str	r5, [r0, #0]
 800e4f0:	60c5      	str	r5, [r0, #12]
 800e4f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4f4:	6819      	ldr	r1, [r3, #0]
 800e4f6:	b151      	cbz	r1, 800e50e <_dtoa_r+0x5e>
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	604a      	str	r2, [r1, #4]
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	4093      	lsls	r3, r2
 800e500:	608b      	str	r3, [r1, #8]
 800e502:	4620      	mov	r0, r4
 800e504:	f001 f83c 	bl	800f580 <_Bfree>
 800e508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e50a:	2200      	movs	r2, #0
 800e50c:	601a      	str	r2, [r3, #0]
 800e50e:	1e3b      	subs	r3, r7, #0
 800e510:	bfaa      	itet	ge
 800e512:	2300      	movge	r3, #0
 800e514:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e518:	f8c8 3000 	strge.w	r3, [r8]
 800e51c:	4b9a      	ldr	r3, [pc, #616]	; (800e788 <_dtoa_r+0x2d8>)
 800e51e:	bfbc      	itt	lt
 800e520:	2201      	movlt	r2, #1
 800e522:	f8c8 2000 	strlt.w	r2, [r8]
 800e526:	ea33 030b 	bics.w	r3, r3, fp
 800e52a:	d11b      	bne.n	800e564 <_dtoa_r+0xb4>
 800e52c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e52e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e532:	6013      	str	r3, [r2, #0]
 800e534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e538:	4333      	orrs	r3, r6
 800e53a:	f000 8592 	beq.w	800f062 <_dtoa_r+0xbb2>
 800e53e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e540:	b963      	cbnz	r3, 800e55c <_dtoa_r+0xac>
 800e542:	4b92      	ldr	r3, [pc, #584]	; (800e78c <_dtoa_r+0x2dc>)
 800e544:	e022      	b.n	800e58c <_dtoa_r+0xdc>
 800e546:	4b92      	ldr	r3, [pc, #584]	; (800e790 <_dtoa_r+0x2e0>)
 800e548:	9301      	str	r3, [sp, #4]
 800e54a:	3308      	adds	r3, #8
 800e54c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e54e:	6013      	str	r3, [r2, #0]
 800e550:	9801      	ldr	r0, [sp, #4]
 800e552:	b013      	add	sp, #76	; 0x4c
 800e554:	ecbd 8b04 	vpop	{d8-d9}
 800e558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55c:	4b8b      	ldr	r3, [pc, #556]	; (800e78c <_dtoa_r+0x2dc>)
 800e55e:	9301      	str	r3, [sp, #4]
 800e560:	3303      	adds	r3, #3
 800e562:	e7f3      	b.n	800e54c <_dtoa_r+0x9c>
 800e564:	2200      	movs	r2, #0
 800e566:	2300      	movs	r3, #0
 800e568:	4650      	mov	r0, sl
 800e56a:	4659      	mov	r1, fp
 800e56c:	f7f2 fad4 	bl	8000b18 <__aeabi_dcmpeq>
 800e570:	ec4b ab19 	vmov	d9, sl, fp
 800e574:	4680      	mov	r8, r0
 800e576:	b158      	cbz	r0, 800e590 <_dtoa_r+0xe0>
 800e578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e57a:	2301      	movs	r3, #1
 800e57c:	6013      	str	r3, [r2, #0]
 800e57e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e580:	2b00      	cmp	r3, #0
 800e582:	f000 856b 	beq.w	800f05c <_dtoa_r+0xbac>
 800e586:	4883      	ldr	r0, [pc, #524]	; (800e794 <_dtoa_r+0x2e4>)
 800e588:	6018      	str	r0, [r3, #0]
 800e58a:	1e43      	subs	r3, r0, #1
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	e7df      	b.n	800e550 <_dtoa_r+0xa0>
 800e590:	ec4b ab10 	vmov	d0, sl, fp
 800e594:	aa10      	add	r2, sp, #64	; 0x40
 800e596:	a911      	add	r1, sp, #68	; 0x44
 800e598:	4620      	mov	r0, r4
 800e59a:	f001 fad9 	bl	800fb50 <__d2b>
 800e59e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e5a2:	ee08 0a10 	vmov	s16, r0
 800e5a6:	2d00      	cmp	r5, #0
 800e5a8:	f000 8084 	beq.w	800e6b4 <_dtoa_r+0x204>
 800e5ac:	ee19 3a90 	vmov	r3, s19
 800e5b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e5b8:	4656      	mov	r6, sl
 800e5ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e5be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e5c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e5c6:	4b74      	ldr	r3, [pc, #464]	; (800e798 <_dtoa_r+0x2e8>)
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	4639      	mov	r1, r7
 800e5ce:	f7f1 fe83 	bl	80002d8 <__aeabi_dsub>
 800e5d2:	a365      	add	r3, pc, #404	; (adr r3, 800e768 <_dtoa_r+0x2b8>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f7f2 f836 	bl	8000648 <__aeabi_dmul>
 800e5dc:	a364      	add	r3, pc, #400	; (adr r3, 800e770 <_dtoa_r+0x2c0>)
 800e5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e2:	f7f1 fe7b 	bl	80002dc <__adddf3>
 800e5e6:	4606      	mov	r6, r0
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	460f      	mov	r7, r1
 800e5ec:	f7f1 ffc2 	bl	8000574 <__aeabi_i2d>
 800e5f0:	a361      	add	r3, pc, #388	; (adr r3, 800e778 <_dtoa_r+0x2c8>)
 800e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f6:	f7f2 f827 	bl	8000648 <__aeabi_dmul>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	4630      	mov	r0, r6
 800e600:	4639      	mov	r1, r7
 800e602:	f7f1 fe6b 	bl	80002dc <__adddf3>
 800e606:	4606      	mov	r6, r0
 800e608:	460f      	mov	r7, r1
 800e60a:	f7f2 facd 	bl	8000ba8 <__aeabi_d2iz>
 800e60e:	2200      	movs	r2, #0
 800e610:	9000      	str	r0, [sp, #0]
 800e612:	2300      	movs	r3, #0
 800e614:	4630      	mov	r0, r6
 800e616:	4639      	mov	r1, r7
 800e618:	f7f2 fa88 	bl	8000b2c <__aeabi_dcmplt>
 800e61c:	b150      	cbz	r0, 800e634 <_dtoa_r+0x184>
 800e61e:	9800      	ldr	r0, [sp, #0]
 800e620:	f7f1 ffa8 	bl	8000574 <__aeabi_i2d>
 800e624:	4632      	mov	r2, r6
 800e626:	463b      	mov	r3, r7
 800e628:	f7f2 fa76 	bl	8000b18 <__aeabi_dcmpeq>
 800e62c:	b910      	cbnz	r0, 800e634 <_dtoa_r+0x184>
 800e62e:	9b00      	ldr	r3, [sp, #0]
 800e630:	3b01      	subs	r3, #1
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	9b00      	ldr	r3, [sp, #0]
 800e636:	2b16      	cmp	r3, #22
 800e638:	d85a      	bhi.n	800e6f0 <_dtoa_r+0x240>
 800e63a:	9a00      	ldr	r2, [sp, #0]
 800e63c:	4b57      	ldr	r3, [pc, #348]	; (800e79c <_dtoa_r+0x2ec>)
 800e63e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	ec51 0b19 	vmov	r0, r1, d9
 800e64a:	f7f2 fa6f 	bl	8000b2c <__aeabi_dcmplt>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d050      	beq.n	800e6f4 <_dtoa_r+0x244>
 800e652:	9b00      	ldr	r3, [sp, #0]
 800e654:	3b01      	subs	r3, #1
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	2300      	movs	r3, #0
 800e65a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e65e:	1b5d      	subs	r5, r3, r5
 800e660:	1e6b      	subs	r3, r5, #1
 800e662:	9305      	str	r3, [sp, #20]
 800e664:	bf45      	ittet	mi
 800e666:	f1c5 0301 	rsbmi	r3, r5, #1
 800e66a:	9304      	strmi	r3, [sp, #16]
 800e66c:	2300      	movpl	r3, #0
 800e66e:	2300      	movmi	r3, #0
 800e670:	bf4c      	ite	mi
 800e672:	9305      	strmi	r3, [sp, #20]
 800e674:	9304      	strpl	r3, [sp, #16]
 800e676:	9b00      	ldr	r3, [sp, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	db3d      	blt.n	800e6f8 <_dtoa_r+0x248>
 800e67c:	9b05      	ldr	r3, [sp, #20]
 800e67e:	9a00      	ldr	r2, [sp, #0]
 800e680:	920a      	str	r2, [sp, #40]	; 0x28
 800e682:	4413      	add	r3, r2
 800e684:	9305      	str	r3, [sp, #20]
 800e686:	2300      	movs	r3, #0
 800e688:	9307      	str	r3, [sp, #28]
 800e68a:	9b06      	ldr	r3, [sp, #24]
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	f200 8089 	bhi.w	800e7a4 <_dtoa_r+0x2f4>
 800e692:	2b05      	cmp	r3, #5
 800e694:	bfc4      	itt	gt
 800e696:	3b04      	subgt	r3, #4
 800e698:	9306      	strgt	r3, [sp, #24]
 800e69a:	9b06      	ldr	r3, [sp, #24]
 800e69c:	f1a3 0302 	sub.w	r3, r3, #2
 800e6a0:	bfcc      	ite	gt
 800e6a2:	2500      	movgt	r5, #0
 800e6a4:	2501      	movle	r5, #1
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	f200 8087 	bhi.w	800e7ba <_dtoa_r+0x30a>
 800e6ac:	e8df f003 	tbb	[pc, r3]
 800e6b0:	59383a2d 	.word	0x59383a2d
 800e6b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e6b8:	441d      	add	r5, r3
 800e6ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e6be:	2b20      	cmp	r3, #32
 800e6c0:	bfc1      	itttt	gt
 800e6c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e6c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e6ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800e6ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e6d2:	bfda      	itte	le
 800e6d4:	f1c3 0320 	rsble	r3, r3, #32
 800e6d8:	fa06 f003 	lslle.w	r0, r6, r3
 800e6dc:	4318      	orrgt	r0, r3
 800e6de:	f7f1 ff39 	bl	8000554 <__aeabi_ui2d>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	4606      	mov	r6, r0
 800e6e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e6ea:	3d01      	subs	r5, #1
 800e6ec:	930e      	str	r3, [sp, #56]	; 0x38
 800e6ee:	e76a      	b.n	800e5c6 <_dtoa_r+0x116>
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e7b2      	b.n	800e65a <_dtoa_r+0x1aa>
 800e6f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e6f6:	e7b1      	b.n	800e65c <_dtoa_r+0x1ac>
 800e6f8:	9b04      	ldr	r3, [sp, #16]
 800e6fa:	9a00      	ldr	r2, [sp, #0]
 800e6fc:	1a9b      	subs	r3, r3, r2
 800e6fe:	9304      	str	r3, [sp, #16]
 800e700:	4253      	negs	r3, r2
 800e702:	9307      	str	r3, [sp, #28]
 800e704:	2300      	movs	r3, #0
 800e706:	930a      	str	r3, [sp, #40]	; 0x28
 800e708:	e7bf      	b.n	800e68a <_dtoa_r+0x1da>
 800e70a:	2300      	movs	r3, #0
 800e70c:	9308      	str	r3, [sp, #32]
 800e70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e710:	2b00      	cmp	r3, #0
 800e712:	dc55      	bgt.n	800e7c0 <_dtoa_r+0x310>
 800e714:	2301      	movs	r3, #1
 800e716:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e71a:	461a      	mov	r2, r3
 800e71c:	9209      	str	r2, [sp, #36]	; 0x24
 800e71e:	e00c      	b.n	800e73a <_dtoa_r+0x28a>
 800e720:	2301      	movs	r3, #1
 800e722:	e7f3      	b.n	800e70c <_dtoa_r+0x25c>
 800e724:	2300      	movs	r3, #0
 800e726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e728:	9308      	str	r3, [sp, #32]
 800e72a:	9b00      	ldr	r3, [sp, #0]
 800e72c:	4413      	add	r3, r2
 800e72e:	9302      	str	r3, [sp, #8]
 800e730:	3301      	adds	r3, #1
 800e732:	2b01      	cmp	r3, #1
 800e734:	9303      	str	r3, [sp, #12]
 800e736:	bfb8      	it	lt
 800e738:	2301      	movlt	r3, #1
 800e73a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e73c:	2200      	movs	r2, #0
 800e73e:	6042      	str	r2, [r0, #4]
 800e740:	2204      	movs	r2, #4
 800e742:	f102 0614 	add.w	r6, r2, #20
 800e746:	429e      	cmp	r6, r3
 800e748:	6841      	ldr	r1, [r0, #4]
 800e74a:	d93d      	bls.n	800e7c8 <_dtoa_r+0x318>
 800e74c:	4620      	mov	r0, r4
 800e74e:	f000 fed7 	bl	800f500 <_Balloc>
 800e752:	9001      	str	r0, [sp, #4]
 800e754:	2800      	cmp	r0, #0
 800e756:	d13b      	bne.n	800e7d0 <_dtoa_r+0x320>
 800e758:	4b11      	ldr	r3, [pc, #68]	; (800e7a0 <_dtoa_r+0x2f0>)
 800e75a:	4602      	mov	r2, r0
 800e75c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e760:	e6c0      	b.n	800e4e4 <_dtoa_r+0x34>
 800e762:	2301      	movs	r3, #1
 800e764:	e7df      	b.n	800e726 <_dtoa_r+0x276>
 800e766:	bf00      	nop
 800e768:	636f4361 	.word	0x636f4361
 800e76c:	3fd287a7 	.word	0x3fd287a7
 800e770:	8b60c8b3 	.word	0x8b60c8b3
 800e774:	3fc68a28 	.word	0x3fc68a28
 800e778:	509f79fb 	.word	0x509f79fb
 800e77c:	3fd34413 	.word	0x3fd34413
 800e780:	08011645 	.word	0x08011645
 800e784:	0801165c 	.word	0x0801165c
 800e788:	7ff00000 	.word	0x7ff00000
 800e78c:	08011641 	.word	0x08011641
 800e790:	08011638 	.word	0x08011638
 800e794:	08011615 	.word	0x08011615
 800e798:	3ff80000 	.word	0x3ff80000
 800e79c:	080117b0 	.word	0x080117b0
 800e7a0:	080116b7 	.word	0x080116b7
 800e7a4:	2501      	movs	r5, #1
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9306      	str	r3, [sp, #24]
 800e7aa:	9508      	str	r5, [sp, #32]
 800e7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	2312      	movs	r3, #18
 800e7b8:	e7b0      	b.n	800e71c <_dtoa_r+0x26c>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	9308      	str	r3, [sp, #32]
 800e7be:	e7f5      	b.n	800e7ac <_dtoa_r+0x2fc>
 800e7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e7c6:	e7b8      	b.n	800e73a <_dtoa_r+0x28a>
 800e7c8:	3101      	adds	r1, #1
 800e7ca:	6041      	str	r1, [r0, #4]
 800e7cc:	0052      	lsls	r2, r2, #1
 800e7ce:	e7b8      	b.n	800e742 <_dtoa_r+0x292>
 800e7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7d2:	9a01      	ldr	r2, [sp, #4]
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	9b03      	ldr	r3, [sp, #12]
 800e7d8:	2b0e      	cmp	r3, #14
 800e7da:	f200 809d 	bhi.w	800e918 <_dtoa_r+0x468>
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	f000 809a 	beq.w	800e918 <_dtoa_r+0x468>
 800e7e4:	9b00      	ldr	r3, [sp, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	dd32      	ble.n	800e850 <_dtoa_r+0x3a0>
 800e7ea:	4ab7      	ldr	r2, [pc, #732]	; (800eac8 <_dtoa_r+0x618>)
 800e7ec:	f003 030f 	and.w	r3, r3, #15
 800e7f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e7f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7f8:	9b00      	ldr	r3, [sp, #0]
 800e7fa:	05d8      	lsls	r0, r3, #23
 800e7fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e800:	d516      	bpl.n	800e830 <_dtoa_r+0x380>
 800e802:	4bb2      	ldr	r3, [pc, #712]	; (800eacc <_dtoa_r+0x61c>)
 800e804:	ec51 0b19 	vmov	r0, r1, d9
 800e808:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e80c:	f7f2 f846 	bl	800089c <__aeabi_ddiv>
 800e810:	f007 070f 	and.w	r7, r7, #15
 800e814:	4682      	mov	sl, r0
 800e816:	468b      	mov	fp, r1
 800e818:	2503      	movs	r5, #3
 800e81a:	4eac      	ldr	r6, [pc, #688]	; (800eacc <_dtoa_r+0x61c>)
 800e81c:	b957      	cbnz	r7, 800e834 <_dtoa_r+0x384>
 800e81e:	4642      	mov	r2, r8
 800e820:	464b      	mov	r3, r9
 800e822:	4650      	mov	r0, sl
 800e824:	4659      	mov	r1, fp
 800e826:	f7f2 f839 	bl	800089c <__aeabi_ddiv>
 800e82a:	4682      	mov	sl, r0
 800e82c:	468b      	mov	fp, r1
 800e82e:	e028      	b.n	800e882 <_dtoa_r+0x3d2>
 800e830:	2502      	movs	r5, #2
 800e832:	e7f2      	b.n	800e81a <_dtoa_r+0x36a>
 800e834:	07f9      	lsls	r1, r7, #31
 800e836:	d508      	bpl.n	800e84a <_dtoa_r+0x39a>
 800e838:	4640      	mov	r0, r8
 800e83a:	4649      	mov	r1, r9
 800e83c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e840:	f7f1 ff02 	bl	8000648 <__aeabi_dmul>
 800e844:	3501      	adds	r5, #1
 800e846:	4680      	mov	r8, r0
 800e848:	4689      	mov	r9, r1
 800e84a:	107f      	asrs	r7, r7, #1
 800e84c:	3608      	adds	r6, #8
 800e84e:	e7e5      	b.n	800e81c <_dtoa_r+0x36c>
 800e850:	f000 809b 	beq.w	800e98a <_dtoa_r+0x4da>
 800e854:	9b00      	ldr	r3, [sp, #0]
 800e856:	4f9d      	ldr	r7, [pc, #628]	; (800eacc <_dtoa_r+0x61c>)
 800e858:	425e      	negs	r6, r3
 800e85a:	4b9b      	ldr	r3, [pc, #620]	; (800eac8 <_dtoa_r+0x618>)
 800e85c:	f006 020f 	and.w	r2, r6, #15
 800e860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	ec51 0b19 	vmov	r0, r1, d9
 800e86c:	f7f1 feec 	bl	8000648 <__aeabi_dmul>
 800e870:	1136      	asrs	r6, r6, #4
 800e872:	4682      	mov	sl, r0
 800e874:	468b      	mov	fp, r1
 800e876:	2300      	movs	r3, #0
 800e878:	2502      	movs	r5, #2
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	d17a      	bne.n	800e974 <_dtoa_r+0x4c4>
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d1d3      	bne.n	800e82a <_dtoa_r+0x37a>
 800e882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e884:	2b00      	cmp	r3, #0
 800e886:	f000 8082 	beq.w	800e98e <_dtoa_r+0x4de>
 800e88a:	4b91      	ldr	r3, [pc, #580]	; (800ead0 <_dtoa_r+0x620>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	4650      	mov	r0, sl
 800e890:	4659      	mov	r1, fp
 800e892:	f7f2 f94b 	bl	8000b2c <__aeabi_dcmplt>
 800e896:	2800      	cmp	r0, #0
 800e898:	d079      	beq.n	800e98e <_dtoa_r+0x4de>
 800e89a:	9b03      	ldr	r3, [sp, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d076      	beq.n	800e98e <_dtoa_r+0x4de>
 800e8a0:	9b02      	ldr	r3, [sp, #8]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	dd36      	ble.n	800e914 <_dtoa_r+0x464>
 800e8a6:	9b00      	ldr	r3, [sp, #0]
 800e8a8:	4650      	mov	r0, sl
 800e8aa:	4659      	mov	r1, fp
 800e8ac:	1e5f      	subs	r7, r3, #1
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	4b88      	ldr	r3, [pc, #544]	; (800ead4 <_dtoa_r+0x624>)
 800e8b2:	f7f1 fec9 	bl	8000648 <__aeabi_dmul>
 800e8b6:	9e02      	ldr	r6, [sp, #8]
 800e8b8:	4682      	mov	sl, r0
 800e8ba:	468b      	mov	fp, r1
 800e8bc:	3501      	adds	r5, #1
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f7f1 fe58 	bl	8000574 <__aeabi_i2d>
 800e8c4:	4652      	mov	r2, sl
 800e8c6:	465b      	mov	r3, fp
 800e8c8:	f7f1 febe 	bl	8000648 <__aeabi_dmul>
 800e8cc:	4b82      	ldr	r3, [pc, #520]	; (800ead8 <_dtoa_r+0x628>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f7f1 fd04 	bl	80002dc <__adddf3>
 800e8d4:	46d0      	mov	r8, sl
 800e8d6:	46d9      	mov	r9, fp
 800e8d8:	4682      	mov	sl, r0
 800e8da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e8de:	2e00      	cmp	r6, #0
 800e8e0:	d158      	bne.n	800e994 <_dtoa_r+0x4e4>
 800e8e2:	4b7e      	ldr	r3, [pc, #504]	; (800eadc <_dtoa_r+0x62c>)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	f7f1 fcf5 	bl	80002d8 <__aeabi_dsub>
 800e8ee:	4652      	mov	r2, sl
 800e8f0:	465b      	mov	r3, fp
 800e8f2:	4680      	mov	r8, r0
 800e8f4:	4689      	mov	r9, r1
 800e8f6:	f7f2 f937 	bl	8000b68 <__aeabi_dcmpgt>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	f040 8295 	bne.w	800ee2a <_dtoa_r+0x97a>
 800e900:	4652      	mov	r2, sl
 800e902:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e906:	4640      	mov	r0, r8
 800e908:	4649      	mov	r1, r9
 800e90a:	f7f2 f90f 	bl	8000b2c <__aeabi_dcmplt>
 800e90e:	2800      	cmp	r0, #0
 800e910:	f040 8289 	bne.w	800ee26 <_dtoa_r+0x976>
 800e914:	ec5b ab19 	vmov	sl, fp, d9
 800e918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f2c0 8148 	blt.w	800ebb0 <_dtoa_r+0x700>
 800e920:	9a00      	ldr	r2, [sp, #0]
 800e922:	2a0e      	cmp	r2, #14
 800e924:	f300 8144 	bgt.w	800ebb0 <_dtoa_r+0x700>
 800e928:	4b67      	ldr	r3, [pc, #412]	; (800eac8 <_dtoa_r+0x618>)
 800e92a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e92e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e934:	2b00      	cmp	r3, #0
 800e936:	f280 80d5 	bge.w	800eae4 <_dtoa_r+0x634>
 800e93a:	9b03      	ldr	r3, [sp, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f300 80d1 	bgt.w	800eae4 <_dtoa_r+0x634>
 800e942:	f040 826f 	bne.w	800ee24 <_dtoa_r+0x974>
 800e946:	4b65      	ldr	r3, [pc, #404]	; (800eadc <_dtoa_r+0x62c>)
 800e948:	2200      	movs	r2, #0
 800e94a:	4640      	mov	r0, r8
 800e94c:	4649      	mov	r1, r9
 800e94e:	f7f1 fe7b 	bl	8000648 <__aeabi_dmul>
 800e952:	4652      	mov	r2, sl
 800e954:	465b      	mov	r3, fp
 800e956:	f7f2 f8fd 	bl	8000b54 <__aeabi_dcmpge>
 800e95a:	9e03      	ldr	r6, [sp, #12]
 800e95c:	4637      	mov	r7, r6
 800e95e:	2800      	cmp	r0, #0
 800e960:	f040 8245 	bne.w	800edee <_dtoa_r+0x93e>
 800e964:	9d01      	ldr	r5, [sp, #4]
 800e966:	2331      	movs	r3, #49	; 0x31
 800e968:	f805 3b01 	strb.w	r3, [r5], #1
 800e96c:	9b00      	ldr	r3, [sp, #0]
 800e96e:	3301      	adds	r3, #1
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	e240      	b.n	800edf6 <_dtoa_r+0x946>
 800e974:	07f2      	lsls	r2, r6, #31
 800e976:	d505      	bpl.n	800e984 <_dtoa_r+0x4d4>
 800e978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e97c:	f7f1 fe64 	bl	8000648 <__aeabi_dmul>
 800e980:	3501      	adds	r5, #1
 800e982:	2301      	movs	r3, #1
 800e984:	1076      	asrs	r6, r6, #1
 800e986:	3708      	adds	r7, #8
 800e988:	e777      	b.n	800e87a <_dtoa_r+0x3ca>
 800e98a:	2502      	movs	r5, #2
 800e98c:	e779      	b.n	800e882 <_dtoa_r+0x3d2>
 800e98e:	9f00      	ldr	r7, [sp, #0]
 800e990:	9e03      	ldr	r6, [sp, #12]
 800e992:	e794      	b.n	800e8be <_dtoa_r+0x40e>
 800e994:	9901      	ldr	r1, [sp, #4]
 800e996:	4b4c      	ldr	r3, [pc, #304]	; (800eac8 <_dtoa_r+0x618>)
 800e998:	4431      	add	r1, r6
 800e99a:	910d      	str	r1, [sp, #52]	; 0x34
 800e99c:	9908      	ldr	r1, [sp, #32]
 800e99e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e9a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9a6:	2900      	cmp	r1, #0
 800e9a8:	d043      	beq.n	800ea32 <_dtoa_r+0x582>
 800e9aa:	494d      	ldr	r1, [pc, #308]	; (800eae0 <_dtoa_r+0x630>)
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	f7f1 ff75 	bl	800089c <__aeabi_ddiv>
 800e9b2:	4652      	mov	r2, sl
 800e9b4:	465b      	mov	r3, fp
 800e9b6:	f7f1 fc8f 	bl	80002d8 <__aeabi_dsub>
 800e9ba:	9d01      	ldr	r5, [sp, #4]
 800e9bc:	4682      	mov	sl, r0
 800e9be:	468b      	mov	fp, r1
 800e9c0:	4649      	mov	r1, r9
 800e9c2:	4640      	mov	r0, r8
 800e9c4:	f7f2 f8f0 	bl	8000ba8 <__aeabi_d2iz>
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	f7f1 fdd3 	bl	8000574 <__aeabi_i2d>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	4640      	mov	r0, r8
 800e9d4:	4649      	mov	r1, r9
 800e9d6:	f7f1 fc7f 	bl	80002d8 <__aeabi_dsub>
 800e9da:	3630      	adds	r6, #48	; 0x30
 800e9dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e9e0:	4652      	mov	r2, sl
 800e9e2:	465b      	mov	r3, fp
 800e9e4:	4680      	mov	r8, r0
 800e9e6:	4689      	mov	r9, r1
 800e9e8:	f7f2 f8a0 	bl	8000b2c <__aeabi_dcmplt>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d163      	bne.n	800eab8 <_dtoa_r+0x608>
 800e9f0:	4642      	mov	r2, r8
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	4936      	ldr	r1, [pc, #216]	; (800ead0 <_dtoa_r+0x620>)
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	f7f1 fc6e 	bl	80002d8 <__aeabi_dsub>
 800e9fc:	4652      	mov	r2, sl
 800e9fe:	465b      	mov	r3, fp
 800ea00:	f7f2 f894 	bl	8000b2c <__aeabi_dcmplt>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f040 80b5 	bne.w	800eb74 <_dtoa_r+0x6c4>
 800ea0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea0c:	429d      	cmp	r5, r3
 800ea0e:	d081      	beq.n	800e914 <_dtoa_r+0x464>
 800ea10:	4b30      	ldr	r3, [pc, #192]	; (800ead4 <_dtoa_r+0x624>)
 800ea12:	2200      	movs	r2, #0
 800ea14:	4650      	mov	r0, sl
 800ea16:	4659      	mov	r1, fp
 800ea18:	f7f1 fe16 	bl	8000648 <__aeabi_dmul>
 800ea1c:	4b2d      	ldr	r3, [pc, #180]	; (800ead4 <_dtoa_r+0x624>)
 800ea1e:	4682      	mov	sl, r0
 800ea20:	468b      	mov	fp, r1
 800ea22:	4640      	mov	r0, r8
 800ea24:	4649      	mov	r1, r9
 800ea26:	2200      	movs	r2, #0
 800ea28:	f7f1 fe0e 	bl	8000648 <__aeabi_dmul>
 800ea2c:	4680      	mov	r8, r0
 800ea2e:	4689      	mov	r9, r1
 800ea30:	e7c6      	b.n	800e9c0 <_dtoa_r+0x510>
 800ea32:	4650      	mov	r0, sl
 800ea34:	4659      	mov	r1, fp
 800ea36:	f7f1 fe07 	bl	8000648 <__aeabi_dmul>
 800ea3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea3c:	9d01      	ldr	r5, [sp, #4]
 800ea3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea40:	4682      	mov	sl, r0
 800ea42:	468b      	mov	fp, r1
 800ea44:	4649      	mov	r1, r9
 800ea46:	4640      	mov	r0, r8
 800ea48:	f7f2 f8ae 	bl	8000ba8 <__aeabi_d2iz>
 800ea4c:	4606      	mov	r6, r0
 800ea4e:	f7f1 fd91 	bl	8000574 <__aeabi_i2d>
 800ea52:	3630      	adds	r6, #48	; 0x30
 800ea54:	4602      	mov	r2, r0
 800ea56:	460b      	mov	r3, r1
 800ea58:	4640      	mov	r0, r8
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	f7f1 fc3c 	bl	80002d8 <__aeabi_dsub>
 800ea60:	f805 6b01 	strb.w	r6, [r5], #1
 800ea64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea66:	429d      	cmp	r5, r3
 800ea68:	4680      	mov	r8, r0
 800ea6a:	4689      	mov	r9, r1
 800ea6c:	f04f 0200 	mov.w	r2, #0
 800ea70:	d124      	bne.n	800eabc <_dtoa_r+0x60c>
 800ea72:	4b1b      	ldr	r3, [pc, #108]	; (800eae0 <_dtoa_r+0x630>)
 800ea74:	4650      	mov	r0, sl
 800ea76:	4659      	mov	r1, fp
 800ea78:	f7f1 fc30 	bl	80002dc <__adddf3>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4640      	mov	r0, r8
 800ea82:	4649      	mov	r1, r9
 800ea84:	f7f2 f870 	bl	8000b68 <__aeabi_dcmpgt>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	d173      	bne.n	800eb74 <_dtoa_r+0x6c4>
 800ea8c:	4652      	mov	r2, sl
 800ea8e:	465b      	mov	r3, fp
 800ea90:	4913      	ldr	r1, [pc, #76]	; (800eae0 <_dtoa_r+0x630>)
 800ea92:	2000      	movs	r0, #0
 800ea94:	f7f1 fc20 	bl	80002d8 <__aeabi_dsub>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4640      	mov	r0, r8
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	f7f2 f844 	bl	8000b2c <__aeabi_dcmplt>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	f43f af35 	beq.w	800e914 <_dtoa_r+0x464>
 800eaaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eaac:	1e6b      	subs	r3, r5, #1
 800eaae:	930f      	str	r3, [sp, #60]	; 0x3c
 800eab0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eab4:	2b30      	cmp	r3, #48	; 0x30
 800eab6:	d0f8      	beq.n	800eaaa <_dtoa_r+0x5fa>
 800eab8:	9700      	str	r7, [sp, #0]
 800eaba:	e049      	b.n	800eb50 <_dtoa_r+0x6a0>
 800eabc:	4b05      	ldr	r3, [pc, #20]	; (800ead4 <_dtoa_r+0x624>)
 800eabe:	f7f1 fdc3 	bl	8000648 <__aeabi_dmul>
 800eac2:	4680      	mov	r8, r0
 800eac4:	4689      	mov	r9, r1
 800eac6:	e7bd      	b.n	800ea44 <_dtoa_r+0x594>
 800eac8:	080117b0 	.word	0x080117b0
 800eacc:	08011788 	.word	0x08011788
 800ead0:	3ff00000 	.word	0x3ff00000
 800ead4:	40240000 	.word	0x40240000
 800ead8:	401c0000 	.word	0x401c0000
 800eadc:	40140000 	.word	0x40140000
 800eae0:	3fe00000 	.word	0x3fe00000
 800eae4:	9d01      	ldr	r5, [sp, #4]
 800eae6:	4656      	mov	r6, sl
 800eae8:	465f      	mov	r7, fp
 800eaea:	4642      	mov	r2, r8
 800eaec:	464b      	mov	r3, r9
 800eaee:	4630      	mov	r0, r6
 800eaf0:	4639      	mov	r1, r7
 800eaf2:	f7f1 fed3 	bl	800089c <__aeabi_ddiv>
 800eaf6:	f7f2 f857 	bl	8000ba8 <__aeabi_d2iz>
 800eafa:	4682      	mov	sl, r0
 800eafc:	f7f1 fd3a 	bl	8000574 <__aeabi_i2d>
 800eb00:	4642      	mov	r2, r8
 800eb02:	464b      	mov	r3, r9
 800eb04:	f7f1 fda0 	bl	8000648 <__aeabi_dmul>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	4639      	mov	r1, r7
 800eb10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eb14:	f7f1 fbe0 	bl	80002d8 <__aeabi_dsub>
 800eb18:	f805 6b01 	strb.w	r6, [r5], #1
 800eb1c:	9e01      	ldr	r6, [sp, #4]
 800eb1e:	9f03      	ldr	r7, [sp, #12]
 800eb20:	1bae      	subs	r6, r5, r6
 800eb22:	42b7      	cmp	r7, r6
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	d135      	bne.n	800eb96 <_dtoa_r+0x6e6>
 800eb2a:	f7f1 fbd7 	bl	80002dc <__adddf3>
 800eb2e:	4642      	mov	r2, r8
 800eb30:	464b      	mov	r3, r9
 800eb32:	4606      	mov	r6, r0
 800eb34:	460f      	mov	r7, r1
 800eb36:	f7f2 f817 	bl	8000b68 <__aeabi_dcmpgt>
 800eb3a:	b9d0      	cbnz	r0, 800eb72 <_dtoa_r+0x6c2>
 800eb3c:	4642      	mov	r2, r8
 800eb3e:	464b      	mov	r3, r9
 800eb40:	4630      	mov	r0, r6
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f1 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 800eb48:	b110      	cbz	r0, 800eb50 <_dtoa_r+0x6a0>
 800eb4a:	f01a 0f01 	tst.w	sl, #1
 800eb4e:	d110      	bne.n	800eb72 <_dtoa_r+0x6c2>
 800eb50:	4620      	mov	r0, r4
 800eb52:	ee18 1a10 	vmov	r1, s16
 800eb56:	f000 fd13 	bl	800f580 <_Bfree>
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	9800      	ldr	r0, [sp, #0]
 800eb5e:	702b      	strb	r3, [r5, #0]
 800eb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb62:	3001      	adds	r0, #1
 800eb64:	6018      	str	r0, [r3, #0]
 800eb66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f43f acf1 	beq.w	800e550 <_dtoa_r+0xa0>
 800eb6e:	601d      	str	r5, [r3, #0]
 800eb70:	e4ee      	b.n	800e550 <_dtoa_r+0xa0>
 800eb72:	9f00      	ldr	r7, [sp, #0]
 800eb74:	462b      	mov	r3, r5
 800eb76:	461d      	mov	r5, r3
 800eb78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb7c:	2a39      	cmp	r2, #57	; 0x39
 800eb7e:	d106      	bne.n	800eb8e <_dtoa_r+0x6de>
 800eb80:	9a01      	ldr	r2, [sp, #4]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d1f7      	bne.n	800eb76 <_dtoa_r+0x6c6>
 800eb86:	9901      	ldr	r1, [sp, #4]
 800eb88:	2230      	movs	r2, #48	; 0x30
 800eb8a:	3701      	adds	r7, #1
 800eb8c:	700a      	strb	r2, [r1, #0]
 800eb8e:	781a      	ldrb	r2, [r3, #0]
 800eb90:	3201      	adds	r2, #1
 800eb92:	701a      	strb	r2, [r3, #0]
 800eb94:	e790      	b.n	800eab8 <_dtoa_r+0x608>
 800eb96:	4ba6      	ldr	r3, [pc, #664]	; (800ee30 <_dtoa_r+0x980>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f7f1 fd55 	bl	8000648 <__aeabi_dmul>
 800eb9e:	2200      	movs	r2, #0
 800eba0:	2300      	movs	r3, #0
 800eba2:	4606      	mov	r6, r0
 800eba4:	460f      	mov	r7, r1
 800eba6:	f7f1 ffb7 	bl	8000b18 <__aeabi_dcmpeq>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	d09d      	beq.n	800eaea <_dtoa_r+0x63a>
 800ebae:	e7cf      	b.n	800eb50 <_dtoa_r+0x6a0>
 800ebb0:	9a08      	ldr	r2, [sp, #32]
 800ebb2:	2a00      	cmp	r2, #0
 800ebb4:	f000 80d7 	beq.w	800ed66 <_dtoa_r+0x8b6>
 800ebb8:	9a06      	ldr	r2, [sp, #24]
 800ebba:	2a01      	cmp	r2, #1
 800ebbc:	f300 80ba 	bgt.w	800ed34 <_dtoa_r+0x884>
 800ebc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	f000 80b2 	beq.w	800ed2c <_dtoa_r+0x87c>
 800ebc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ebcc:	9e07      	ldr	r6, [sp, #28]
 800ebce:	9d04      	ldr	r5, [sp, #16]
 800ebd0:	9a04      	ldr	r2, [sp, #16]
 800ebd2:	441a      	add	r2, r3
 800ebd4:	9204      	str	r2, [sp, #16]
 800ebd6:	9a05      	ldr	r2, [sp, #20]
 800ebd8:	2101      	movs	r1, #1
 800ebda:	441a      	add	r2, r3
 800ebdc:	4620      	mov	r0, r4
 800ebde:	9205      	str	r2, [sp, #20]
 800ebe0:	f000 fd86 	bl	800f6f0 <__i2b>
 800ebe4:	4607      	mov	r7, r0
 800ebe6:	2d00      	cmp	r5, #0
 800ebe8:	dd0c      	ble.n	800ec04 <_dtoa_r+0x754>
 800ebea:	9b05      	ldr	r3, [sp, #20]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	dd09      	ble.n	800ec04 <_dtoa_r+0x754>
 800ebf0:	42ab      	cmp	r3, r5
 800ebf2:	9a04      	ldr	r2, [sp, #16]
 800ebf4:	bfa8      	it	ge
 800ebf6:	462b      	movge	r3, r5
 800ebf8:	1ad2      	subs	r2, r2, r3
 800ebfa:	9204      	str	r2, [sp, #16]
 800ebfc:	9a05      	ldr	r2, [sp, #20]
 800ebfe:	1aed      	subs	r5, r5, r3
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	9305      	str	r3, [sp, #20]
 800ec04:	9b07      	ldr	r3, [sp, #28]
 800ec06:	b31b      	cbz	r3, 800ec50 <_dtoa_r+0x7a0>
 800ec08:	9b08      	ldr	r3, [sp, #32]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 80af 	beq.w	800ed6e <_dtoa_r+0x8be>
 800ec10:	2e00      	cmp	r6, #0
 800ec12:	dd13      	ble.n	800ec3c <_dtoa_r+0x78c>
 800ec14:	4639      	mov	r1, r7
 800ec16:	4632      	mov	r2, r6
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f000 fe29 	bl	800f870 <__pow5mult>
 800ec1e:	ee18 2a10 	vmov	r2, s16
 800ec22:	4601      	mov	r1, r0
 800ec24:	4607      	mov	r7, r0
 800ec26:	4620      	mov	r0, r4
 800ec28:	f000 fd78 	bl	800f71c <__multiply>
 800ec2c:	ee18 1a10 	vmov	r1, s16
 800ec30:	4680      	mov	r8, r0
 800ec32:	4620      	mov	r0, r4
 800ec34:	f000 fca4 	bl	800f580 <_Bfree>
 800ec38:	ee08 8a10 	vmov	s16, r8
 800ec3c:	9b07      	ldr	r3, [sp, #28]
 800ec3e:	1b9a      	subs	r2, r3, r6
 800ec40:	d006      	beq.n	800ec50 <_dtoa_r+0x7a0>
 800ec42:	ee18 1a10 	vmov	r1, s16
 800ec46:	4620      	mov	r0, r4
 800ec48:	f000 fe12 	bl	800f870 <__pow5mult>
 800ec4c:	ee08 0a10 	vmov	s16, r0
 800ec50:	2101      	movs	r1, #1
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 fd4c 	bl	800f6f0 <__i2b>
 800ec58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	4606      	mov	r6, r0
 800ec5e:	f340 8088 	ble.w	800ed72 <_dtoa_r+0x8c2>
 800ec62:	461a      	mov	r2, r3
 800ec64:	4601      	mov	r1, r0
 800ec66:	4620      	mov	r0, r4
 800ec68:	f000 fe02 	bl	800f870 <__pow5mult>
 800ec6c:	9b06      	ldr	r3, [sp, #24]
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	4606      	mov	r6, r0
 800ec72:	f340 8081 	ble.w	800ed78 <_dtoa_r+0x8c8>
 800ec76:	f04f 0800 	mov.w	r8, #0
 800ec7a:	6933      	ldr	r3, [r6, #16]
 800ec7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec80:	6918      	ldr	r0, [r3, #16]
 800ec82:	f000 fce5 	bl	800f650 <__hi0bits>
 800ec86:	f1c0 0020 	rsb	r0, r0, #32
 800ec8a:	9b05      	ldr	r3, [sp, #20]
 800ec8c:	4418      	add	r0, r3
 800ec8e:	f010 001f 	ands.w	r0, r0, #31
 800ec92:	f000 8092 	beq.w	800edba <_dtoa_r+0x90a>
 800ec96:	f1c0 0320 	rsb	r3, r0, #32
 800ec9a:	2b04      	cmp	r3, #4
 800ec9c:	f340 808a 	ble.w	800edb4 <_dtoa_r+0x904>
 800eca0:	f1c0 001c 	rsb	r0, r0, #28
 800eca4:	9b04      	ldr	r3, [sp, #16]
 800eca6:	4403      	add	r3, r0
 800eca8:	9304      	str	r3, [sp, #16]
 800ecaa:	9b05      	ldr	r3, [sp, #20]
 800ecac:	4403      	add	r3, r0
 800ecae:	4405      	add	r5, r0
 800ecb0:	9305      	str	r3, [sp, #20]
 800ecb2:	9b04      	ldr	r3, [sp, #16]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	dd07      	ble.n	800ecc8 <_dtoa_r+0x818>
 800ecb8:	ee18 1a10 	vmov	r1, s16
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 fe30 	bl	800f924 <__lshift>
 800ecc4:	ee08 0a10 	vmov	s16, r0
 800ecc8:	9b05      	ldr	r3, [sp, #20]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dd05      	ble.n	800ecda <_dtoa_r+0x82a>
 800ecce:	4631      	mov	r1, r6
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f000 fe26 	bl	800f924 <__lshift>
 800ecd8:	4606      	mov	r6, r0
 800ecda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d06e      	beq.n	800edbe <_dtoa_r+0x90e>
 800ece0:	ee18 0a10 	vmov	r0, s16
 800ece4:	4631      	mov	r1, r6
 800ece6:	f000 fe8d 	bl	800fa04 <__mcmp>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	da67      	bge.n	800edbe <_dtoa_r+0x90e>
 800ecee:	9b00      	ldr	r3, [sp, #0]
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	ee18 1a10 	vmov	r1, s16
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	220a      	movs	r2, #10
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	f000 fc61 	bl	800f5c4 <__multadd>
 800ed02:	9b08      	ldr	r3, [sp, #32]
 800ed04:	ee08 0a10 	vmov	s16, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 81b1 	beq.w	800f070 <_dtoa_r+0xbc0>
 800ed0e:	2300      	movs	r3, #0
 800ed10:	4639      	mov	r1, r7
 800ed12:	220a      	movs	r2, #10
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 fc55 	bl	800f5c4 <__multadd>
 800ed1a:	9b02      	ldr	r3, [sp, #8]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	4607      	mov	r7, r0
 800ed20:	f300 808e 	bgt.w	800ee40 <_dtoa_r+0x990>
 800ed24:	9b06      	ldr	r3, [sp, #24]
 800ed26:	2b02      	cmp	r3, #2
 800ed28:	dc51      	bgt.n	800edce <_dtoa_r+0x91e>
 800ed2a:	e089      	b.n	800ee40 <_dtoa_r+0x990>
 800ed2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ed32:	e74b      	b.n	800ebcc <_dtoa_r+0x71c>
 800ed34:	9b03      	ldr	r3, [sp, #12]
 800ed36:	1e5e      	subs	r6, r3, #1
 800ed38:	9b07      	ldr	r3, [sp, #28]
 800ed3a:	42b3      	cmp	r3, r6
 800ed3c:	bfbf      	itttt	lt
 800ed3e:	9b07      	ldrlt	r3, [sp, #28]
 800ed40:	9607      	strlt	r6, [sp, #28]
 800ed42:	1af2      	sublt	r2, r6, r3
 800ed44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ed46:	bfb6      	itet	lt
 800ed48:	189b      	addlt	r3, r3, r2
 800ed4a:	1b9e      	subge	r6, r3, r6
 800ed4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ed4e:	9b03      	ldr	r3, [sp, #12]
 800ed50:	bfb8      	it	lt
 800ed52:	2600      	movlt	r6, #0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	bfb7      	itett	lt
 800ed58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ed5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ed60:	1a9d      	sublt	r5, r3, r2
 800ed62:	2300      	movlt	r3, #0
 800ed64:	e734      	b.n	800ebd0 <_dtoa_r+0x720>
 800ed66:	9e07      	ldr	r6, [sp, #28]
 800ed68:	9d04      	ldr	r5, [sp, #16]
 800ed6a:	9f08      	ldr	r7, [sp, #32]
 800ed6c:	e73b      	b.n	800ebe6 <_dtoa_r+0x736>
 800ed6e:	9a07      	ldr	r2, [sp, #28]
 800ed70:	e767      	b.n	800ec42 <_dtoa_r+0x792>
 800ed72:	9b06      	ldr	r3, [sp, #24]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	dc18      	bgt.n	800edaa <_dtoa_r+0x8fa>
 800ed78:	f1ba 0f00 	cmp.w	sl, #0
 800ed7c:	d115      	bne.n	800edaa <_dtoa_r+0x8fa>
 800ed7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed82:	b993      	cbnz	r3, 800edaa <_dtoa_r+0x8fa>
 800ed84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed88:	0d1b      	lsrs	r3, r3, #20
 800ed8a:	051b      	lsls	r3, r3, #20
 800ed8c:	b183      	cbz	r3, 800edb0 <_dtoa_r+0x900>
 800ed8e:	9b04      	ldr	r3, [sp, #16]
 800ed90:	3301      	adds	r3, #1
 800ed92:	9304      	str	r3, [sp, #16]
 800ed94:	9b05      	ldr	r3, [sp, #20]
 800ed96:	3301      	adds	r3, #1
 800ed98:	9305      	str	r3, [sp, #20]
 800ed9a:	f04f 0801 	mov.w	r8, #1
 800ed9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f47f af6a 	bne.w	800ec7a <_dtoa_r+0x7ca>
 800eda6:	2001      	movs	r0, #1
 800eda8:	e76f      	b.n	800ec8a <_dtoa_r+0x7da>
 800edaa:	f04f 0800 	mov.w	r8, #0
 800edae:	e7f6      	b.n	800ed9e <_dtoa_r+0x8ee>
 800edb0:	4698      	mov	r8, r3
 800edb2:	e7f4      	b.n	800ed9e <_dtoa_r+0x8ee>
 800edb4:	f43f af7d 	beq.w	800ecb2 <_dtoa_r+0x802>
 800edb8:	4618      	mov	r0, r3
 800edba:	301c      	adds	r0, #28
 800edbc:	e772      	b.n	800eca4 <_dtoa_r+0x7f4>
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	dc37      	bgt.n	800ee34 <_dtoa_r+0x984>
 800edc4:	9b06      	ldr	r3, [sp, #24]
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	dd34      	ble.n	800ee34 <_dtoa_r+0x984>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	9302      	str	r3, [sp, #8]
 800edce:	9b02      	ldr	r3, [sp, #8]
 800edd0:	b96b      	cbnz	r3, 800edee <_dtoa_r+0x93e>
 800edd2:	4631      	mov	r1, r6
 800edd4:	2205      	movs	r2, #5
 800edd6:	4620      	mov	r0, r4
 800edd8:	f000 fbf4 	bl	800f5c4 <__multadd>
 800eddc:	4601      	mov	r1, r0
 800edde:	4606      	mov	r6, r0
 800ede0:	ee18 0a10 	vmov	r0, s16
 800ede4:	f000 fe0e 	bl	800fa04 <__mcmp>
 800ede8:	2800      	cmp	r0, #0
 800edea:	f73f adbb 	bgt.w	800e964 <_dtoa_r+0x4b4>
 800edee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf0:	9d01      	ldr	r5, [sp, #4]
 800edf2:	43db      	mvns	r3, r3
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	f04f 0800 	mov.w	r8, #0
 800edfa:	4631      	mov	r1, r6
 800edfc:	4620      	mov	r0, r4
 800edfe:	f000 fbbf 	bl	800f580 <_Bfree>
 800ee02:	2f00      	cmp	r7, #0
 800ee04:	f43f aea4 	beq.w	800eb50 <_dtoa_r+0x6a0>
 800ee08:	f1b8 0f00 	cmp.w	r8, #0
 800ee0c:	d005      	beq.n	800ee1a <_dtoa_r+0x96a>
 800ee0e:	45b8      	cmp	r8, r7
 800ee10:	d003      	beq.n	800ee1a <_dtoa_r+0x96a>
 800ee12:	4641      	mov	r1, r8
 800ee14:	4620      	mov	r0, r4
 800ee16:	f000 fbb3 	bl	800f580 <_Bfree>
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	f000 fbaf 	bl	800f580 <_Bfree>
 800ee22:	e695      	b.n	800eb50 <_dtoa_r+0x6a0>
 800ee24:	2600      	movs	r6, #0
 800ee26:	4637      	mov	r7, r6
 800ee28:	e7e1      	b.n	800edee <_dtoa_r+0x93e>
 800ee2a:	9700      	str	r7, [sp, #0]
 800ee2c:	4637      	mov	r7, r6
 800ee2e:	e599      	b.n	800e964 <_dtoa_r+0x4b4>
 800ee30:	40240000 	.word	0x40240000
 800ee34:	9b08      	ldr	r3, [sp, #32]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f000 80ca 	beq.w	800efd0 <_dtoa_r+0xb20>
 800ee3c:	9b03      	ldr	r3, [sp, #12]
 800ee3e:	9302      	str	r3, [sp, #8]
 800ee40:	2d00      	cmp	r5, #0
 800ee42:	dd05      	ble.n	800ee50 <_dtoa_r+0x9a0>
 800ee44:	4639      	mov	r1, r7
 800ee46:	462a      	mov	r2, r5
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 fd6b 	bl	800f924 <__lshift>
 800ee4e:	4607      	mov	r7, r0
 800ee50:	f1b8 0f00 	cmp.w	r8, #0
 800ee54:	d05b      	beq.n	800ef0e <_dtoa_r+0xa5e>
 800ee56:	6879      	ldr	r1, [r7, #4]
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f000 fb51 	bl	800f500 <_Balloc>
 800ee5e:	4605      	mov	r5, r0
 800ee60:	b928      	cbnz	r0, 800ee6e <_dtoa_r+0x9be>
 800ee62:	4b87      	ldr	r3, [pc, #540]	; (800f080 <_dtoa_r+0xbd0>)
 800ee64:	4602      	mov	r2, r0
 800ee66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ee6a:	f7ff bb3b 	b.w	800e4e4 <_dtoa_r+0x34>
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	3202      	adds	r2, #2
 800ee72:	0092      	lsls	r2, r2, #2
 800ee74:	f107 010c 	add.w	r1, r7, #12
 800ee78:	300c      	adds	r0, #12
 800ee7a:	f000 fb33 	bl	800f4e4 <memcpy>
 800ee7e:	2201      	movs	r2, #1
 800ee80:	4629      	mov	r1, r5
 800ee82:	4620      	mov	r0, r4
 800ee84:	f000 fd4e 	bl	800f924 <__lshift>
 800ee88:	9b01      	ldr	r3, [sp, #4]
 800ee8a:	f103 0901 	add.w	r9, r3, #1
 800ee8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ee92:	4413      	add	r3, r2
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	f00a 0301 	and.w	r3, sl, #1
 800ee9a:	46b8      	mov	r8, r7
 800ee9c:	9304      	str	r3, [sp, #16]
 800ee9e:	4607      	mov	r7, r0
 800eea0:	4631      	mov	r1, r6
 800eea2:	ee18 0a10 	vmov	r0, s16
 800eea6:	f7ff fa77 	bl	800e398 <quorem>
 800eeaa:	4641      	mov	r1, r8
 800eeac:	9002      	str	r0, [sp, #8]
 800eeae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eeb2:	ee18 0a10 	vmov	r0, s16
 800eeb6:	f000 fda5 	bl	800fa04 <__mcmp>
 800eeba:	463a      	mov	r2, r7
 800eebc:	9003      	str	r0, [sp, #12]
 800eebe:	4631      	mov	r1, r6
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 fdbb 	bl	800fa3c <__mdiff>
 800eec6:	68c2      	ldr	r2, [r0, #12]
 800eec8:	f109 3bff 	add.w	fp, r9, #4294967295
 800eecc:	4605      	mov	r5, r0
 800eece:	bb02      	cbnz	r2, 800ef12 <_dtoa_r+0xa62>
 800eed0:	4601      	mov	r1, r0
 800eed2:	ee18 0a10 	vmov	r0, s16
 800eed6:	f000 fd95 	bl	800fa04 <__mcmp>
 800eeda:	4602      	mov	r2, r0
 800eedc:	4629      	mov	r1, r5
 800eede:	4620      	mov	r0, r4
 800eee0:	9207      	str	r2, [sp, #28]
 800eee2:	f000 fb4d 	bl	800f580 <_Bfree>
 800eee6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800eeea:	ea43 0102 	orr.w	r1, r3, r2
 800eeee:	9b04      	ldr	r3, [sp, #16]
 800eef0:	430b      	orrs	r3, r1
 800eef2:	464d      	mov	r5, r9
 800eef4:	d10f      	bne.n	800ef16 <_dtoa_r+0xa66>
 800eef6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eefa:	d02a      	beq.n	800ef52 <_dtoa_r+0xaa2>
 800eefc:	9b03      	ldr	r3, [sp, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	dd02      	ble.n	800ef08 <_dtoa_r+0xa58>
 800ef02:	9b02      	ldr	r3, [sp, #8]
 800ef04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ef08:	f88b a000 	strb.w	sl, [fp]
 800ef0c:	e775      	b.n	800edfa <_dtoa_r+0x94a>
 800ef0e:	4638      	mov	r0, r7
 800ef10:	e7ba      	b.n	800ee88 <_dtoa_r+0x9d8>
 800ef12:	2201      	movs	r2, #1
 800ef14:	e7e2      	b.n	800eedc <_dtoa_r+0xa2c>
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	db04      	blt.n	800ef26 <_dtoa_r+0xa76>
 800ef1c:	9906      	ldr	r1, [sp, #24]
 800ef1e:	430b      	orrs	r3, r1
 800ef20:	9904      	ldr	r1, [sp, #16]
 800ef22:	430b      	orrs	r3, r1
 800ef24:	d122      	bne.n	800ef6c <_dtoa_r+0xabc>
 800ef26:	2a00      	cmp	r2, #0
 800ef28:	ddee      	ble.n	800ef08 <_dtoa_r+0xa58>
 800ef2a:	ee18 1a10 	vmov	r1, s16
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4620      	mov	r0, r4
 800ef32:	f000 fcf7 	bl	800f924 <__lshift>
 800ef36:	4631      	mov	r1, r6
 800ef38:	ee08 0a10 	vmov	s16, r0
 800ef3c:	f000 fd62 	bl	800fa04 <__mcmp>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	dc03      	bgt.n	800ef4c <_dtoa_r+0xa9c>
 800ef44:	d1e0      	bne.n	800ef08 <_dtoa_r+0xa58>
 800ef46:	f01a 0f01 	tst.w	sl, #1
 800ef4a:	d0dd      	beq.n	800ef08 <_dtoa_r+0xa58>
 800ef4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef50:	d1d7      	bne.n	800ef02 <_dtoa_r+0xa52>
 800ef52:	2339      	movs	r3, #57	; 0x39
 800ef54:	f88b 3000 	strb.w	r3, [fp]
 800ef58:	462b      	mov	r3, r5
 800ef5a:	461d      	mov	r5, r3
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ef62:	2a39      	cmp	r2, #57	; 0x39
 800ef64:	d071      	beq.n	800f04a <_dtoa_r+0xb9a>
 800ef66:	3201      	adds	r2, #1
 800ef68:	701a      	strb	r2, [r3, #0]
 800ef6a:	e746      	b.n	800edfa <_dtoa_r+0x94a>
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	dd07      	ble.n	800ef80 <_dtoa_r+0xad0>
 800ef70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ef74:	d0ed      	beq.n	800ef52 <_dtoa_r+0xaa2>
 800ef76:	f10a 0301 	add.w	r3, sl, #1
 800ef7a:	f88b 3000 	strb.w	r3, [fp]
 800ef7e:	e73c      	b.n	800edfa <_dtoa_r+0x94a>
 800ef80:	9b05      	ldr	r3, [sp, #20]
 800ef82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ef86:	4599      	cmp	r9, r3
 800ef88:	d047      	beq.n	800f01a <_dtoa_r+0xb6a>
 800ef8a:	ee18 1a10 	vmov	r1, s16
 800ef8e:	2300      	movs	r3, #0
 800ef90:	220a      	movs	r2, #10
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fb16 	bl	800f5c4 <__multadd>
 800ef98:	45b8      	cmp	r8, r7
 800ef9a:	ee08 0a10 	vmov	s16, r0
 800ef9e:	f04f 0300 	mov.w	r3, #0
 800efa2:	f04f 020a 	mov.w	r2, #10
 800efa6:	4641      	mov	r1, r8
 800efa8:	4620      	mov	r0, r4
 800efaa:	d106      	bne.n	800efba <_dtoa_r+0xb0a>
 800efac:	f000 fb0a 	bl	800f5c4 <__multadd>
 800efb0:	4680      	mov	r8, r0
 800efb2:	4607      	mov	r7, r0
 800efb4:	f109 0901 	add.w	r9, r9, #1
 800efb8:	e772      	b.n	800eea0 <_dtoa_r+0x9f0>
 800efba:	f000 fb03 	bl	800f5c4 <__multadd>
 800efbe:	4639      	mov	r1, r7
 800efc0:	4680      	mov	r8, r0
 800efc2:	2300      	movs	r3, #0
 800efc4:	220a      	movs	r2, #10
 800efc6:	4620      	mov	r0, r4
 800efc8:	f000 fafc 	bl	800f5c4 <__multadd>
 800efcc:	4607      	mov	r7, r0
 800efce:	e7f1      	b.n	800efb4 <_dtoa_r+0xb04>
 800efd0:	9b03      	ldr	r3, [sp, #12]
 800efd2:	9302      	str	r3, [sp, #8]
 800efd4:	9d01      	ldr	r5, [sp, #4]
 800efd6:	ee18 0a10 	vmov	r0, s16
 800efda:	4631      	mov	r1, r6
 800efdc:	f7ff f9dc 	bl	800e398 <quorem>
 800efe0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800efe4:	9b01      	ldr	r3, [sp, #4]
 800efe6:	f805 ab01 	strb.w	sl, [r5], #1
 800efea:	1aea      	subs	r2, r5, r3
 800efec:	9b02      	ldr	r3, [sp, #8]
 800efee:	4293      	cmp	r3, r2
 800eff0:	dd09      	ble.n	800f006 <_dtoa_r+0xb56>
 800eff2:	ee18 1a10 	vmov	r1, s16
 800eff6:	2300      	movs	r3, #0
 800eff8:	220a      	movs	r2, #10
 800effa:	4620      	mov	r0, r4
 800effc:	f000 fae2 	bl	800f5c4 <__multadd>
 800f000:	ee08 0a10 	vmov	s16, r0
 800f004:	e7e7      	b.n	800efd6 <_dtoa_r+0xb26>
 800f006:	9b02      	ldr	r3, [sp, #8]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	bfc8      	it	gt
 800f00c:	461d      	movgt	r5, r3
 800f00e:	9b01      	ldr	r3, [sp, #4]
 800f010:	bfd8      	it	le
 800f012:	2501      	movle	r5, #1
 800f014:	441d      	add	r5, r3
 800f016:	f04f 0800 	mov.w	r8, #0
 800f01a:	ee18 1a10 	vmov	r1, s16
 800f01e:	2201      	movs	r2, #1
 800f020:	4620      	mov	r0, r4
 800f022:	f000 fc7f 	bl	800f924 <__lshift>
 800f026:	4631      	mov	r1, r6
 800f028:	ee08 0a10 	vmov	s16, r0
 800f02c:	f000 fcea 	bl	800fa04 <__mcmp>
 800f030:	2800      	cmp	r0, #0
 800f032:	dc91      	bgt.n	800ef58 <_dtoa_r+0xaa8>
 800f034:	d102      	bne.n	800f03c <_dtoa_r+0xb8c>
 800f036:	f01a 0f01 	tst.w	sl, #1
 800f03a:	d18d      	bne.n	800ef58 <_dtoa_r+0xaa8>
 800f03c:	462b      	mov	r3, r5
 800f03e:	461d      	mov	r5, r3
 800f040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f044:	2a30      	cmp	r2, #48	; 0x30
 800f046:	d0fa      	beq.n	800f03e <_dtoa_r+0xb8e>
 800f048:	e6d7      	b.n	800edfa <_dtoa_r+0x94a>
 800f04a:	9a01      	ldr	r2, [sp, #4]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d184      	bne.n	800ef5a <_dtoa_r+0xaaa>
 800f050:	9b00      	ldr	r3, [sp, #0]
 800f052:	3301      	adds	r3, #1
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	2331      	movs	r3, #49	; 0x31
 800f058:	7013      	strb	r3, [r2, #0]
 800f05a:	e6ce      	b.n	800edfa <_dtoa_r+0x94a>
 800f05c:	4b09      	ldr	r3, [pc, #36]	; (800f084 <_dtoa_r+0xbd4>)
 800f05e:	f7ff ba95 	b.w	800e58c <_dtoa_r+0xdc>
 800f062:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f064:	2b00      	cmp	r3, #0
 800f066:	f47f aa6e 	bne.w	800e546 <_dtoa_r+0x96>
 800f06a:	4b07      	ldr	r3, [pc, #28]	; (800f088 <_dtoa_r+0xbd8>)
 800f06c:	f7ff ba8e 	b.w	800e58c <_dtoa_r+0xdc>
 800f070:	9b02      	ldr	r3, [sp, #8]
 800f072:	2b00      	cmp	r3, #0
 800f074:	dcae      	bgt.n	800efd4 <_dtoa_r+0xb24>
 800f076:	9b06      	ldr	r3, [sp, #24]
 800f078:	2b02      	cmp	r3, #2
 800f07a:	f73f aea8 	bgt.w	800edce <_dtoa_r+0x91e>
 800f07e:	e7a9      	b.n	800efd4 <_dtoa_r+0xb24>
 800f080:	080116b7 	.word	0x080116b7
 800f084:	08011614 	.word	0x08011614
 800f088:	08011638 	.word	0x08011638

0800f08c <__sflush_r>:
 800f08c:	898a      	ldrh	r2, [r1, #12]
 800f08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f092:	4605      	mov	r5, r0
 800f094:	0710      	lsls	r0, r2, #28
 800f096:	460c      	mov	r4, r1
 800f098:	d458      	bmi.n	800f14c <__sflush_r+0xc0>
 800f09a:	684b      	ldr	r3, [r1, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	dc05      	bgt.n	800f0ac <__sflush_r+0x20>
 800f0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	dc02      	bgt.n	800f0ac <__sflush_r+0x20>
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0ae:	2e00      	cmp	r6, #0
 800f0b0:	d0f9      	beq.n	800f0a6 <__sflush_r+0x1a>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0b8:	682f      	ldr	r7, [r5, #0]
 800f0ba:	602b      	str	r3, [r5, #0]
 800f0bc:	d032      	beq.n	800f124 <__sflush_r+0x98>
 800f0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	075a      	lsls	r2, r3, #29
 800f0c4:	d505      	bpl.n	800f0d2 <__sflush_r+0x46>
 800f0c6:	6863      	ldr	r3, [r4, #4]
 800f0c8:	1ac0      	subs	r0, r0, r3
 800f0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0cc:	b10b      	cbz	r3, 800f0d2 <__sflush_r+0x46>
 800f0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0d0:	1ac0      	subs	r0, r0, r3
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0d8:	6a21      	ldr	r1, [r4, #32]
 800f0da:	4628      	mov	r0, r5
 800f0dc:	47b0      	blx	r6
 800f0de:	1c43      	adds	r3, r0, #1
 800f0e0:	89a3      	ldrh	r3, [r4, #12]
 800f0e2:	d106      	bne.n	800f0f2 <__sflush_r+0x66>
 800f0e4:	6829      	ldr	r1, [r5, #0]
 800f0e6:	291d      	cmp	r1, #29
 800f0e8:	d82c      	bhi.n	800f144 <__sflush_r+0xb8>
 800f0ea:	4a2a      	ldr	r2, [pc, #168]	; (800f194 <__sflush_r+0x108>)
 800f0ec:	40ca      	lsrs	r2, r1
 800f0ee:	07d6      	lsls	r6, r2, #31
 800f0f0:	d528      	bpl.n	800f144 <__sflush_r+0xb8>
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	6062      	str	r2, [r4, #4]
 800f0f6:	04d9      	lsls	r1, r3, #19
 800f0f8:	6922      	ldr	r2, [r4, #16]
 800f0fa:	6022      	str	r2, [r4, #0]
 800f0fc:	d504      	bpl.n	800f108 <__sflush_r+0x7c>
 800f0fe:	1c42      	adds	r2, r0, #1
 800f100:	d101      	bne.n	800f106 <__sflush_r+0x7a>
 800f102:	682b      	ldr	r3, [r5, #0]
 800f104:	b903      	cbnz	r3, 800f108 <__sflush_r+0x7c>
 800f106:	6560      	str	r0, [r4, #84]	; 0x54
 800f108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f10a:	602f      	str	r7, [r5, #0]
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d0ca      	beq.n	800f0a6 <__sflush_r+0x1a>
 800f110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f114:	4299      	cmp	r1, r3
 800f116:	d002      	beq.n	800f11e <__sflush_r+0x92>
 800f118:	4628      	mov	r0, r5
 800f11a:	f000 fd8b 	bl	800fc34 <_free_r>
 800f11e:	2000      	movs	r0, #0
 800f120:	6360      	str	r0, [r4, #52]	; 0x34
 800f122:	e7c1      	b.n	800f0a8 <__sflush_r+0x1c>
 800f124:	6a21      	ldr	r1, [r4, #32]
 800f126:	2301      	movs	r3, #1
 800f128:	4628      	mov	r0, r5
 800f12a:	47b0      	blx	r6
 800f12c:	1c41      	adds	r1, r0, #1
 800f12e:	d1c7      	bne.n	800f0c0 <__sflush_r+0x34>
 800f130:	682b      	ldr	r3, [r5, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d0c4      	beq.n	800f0c0 <__sflush_r+0x34>
 800f136:	2b1d      	cmp	r3, #29
 800f138:	d001      	beq.n	800f13e <__sflush_r+0xb2>
 800f13a:	2b16      	cmp	r3, #22
 800f13c:	d101      	bne.n	800f142 <__sflush_r+0xb6>
 800f13e:	602f      	str	r7, [r5, #0]
 800f140:	e7b1      	b.n	800f0a6 <__sflush_r+0x1a>
 800f142:	89a3      	ldrh	r3, [r4, #12]
 800f144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f148:	81a3      	strh	r3, [r4, #12]
 800f14a:	e7ad      	b.n	800f0a8 <__sflush_r+0x1c>
 800f14c:	690f      	ldr	r7, [r1, #16]
 800f14e:	2f00      	cmp	r7, #0
 800f150:	d0a9      	beq.n	800f0a6 <__sflush_r+0x1a>
 800f152:	0793      	lsls	r3, r2, #30
 800f154:	680e      	ldr	r6, [r1, #0]
 800f156:	bf08      	it	eq
 800f158:	694b      	ldreq	r3, [r1, #20]
 800f15a:	600f      	str	r7, [r1, #0]
 800f15c:	bf18      	it	ne
 800f15e:	2300      	movne	r3, #0
 800f160:	eba6 0807 	sub.w	r8, r6, r7
 800f164:	608b      	str	r3, [r1, #8]
 800f166:	f1b8 0f00 	cmp.w	r8, #0
 800f16a:	dd9c      	ble.n	800f0a6 <__sflush_r+0x1a>
 800f16c:	6a21      	ldr	r1, [r4, #32]
 800f16e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f170:	4643      	mov	r3, r8
 800f172:	463a      	mov	r2, r7
 800f174:	4628      	mov	r0, r5
 800f176:	47b0      	blx	r6
 800f178:	2800      	cmp	r0, #0
 800f17a:	dc06      	bgt.n	800f18a <__sflush_r+0xfe>
 800f17c:	89a3      	ldrh	r3, [r4, #12]
 800f17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f182:	81a3      	strh	r3, [r4, #12]
 800f184:	f04f 30ff 	mov.w	r0, #4294967295
 800f188:	e78e      	b.n	800f0a8 <__sflush_r+0x1c>
 800f18a:	4407      	add	r7, r0
 800f18c:	eba8 0800 	sub.w	r8, r8, r0
 800f190:	e7e9      	b.n	800f166 <__sflush_r+0xda>
 800f192:	bf00      	nop
 800f194:	20400001 	.word	0x20400001

0800f198 <_fflush_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	690b      	ldr	r3, [r1, #16]
 800f19c:	4605      	mov	r5, r0
 800f19e:	460c      	mov	r4, r1
 800f1a0:	b913      	cbnz	r3, 800f1a8 <_fflush_r+0x10>
 800f1a2:	2500      	movs	r5, #0
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	b118      	cbz	r0, 800f1b2 <_fflush_r+0x1a>
 800f1aa:	6983      	ldr	r3, [r0, #24]
 800f1ac:	b90b      	cbnz	r3, 800f1b2 <_fflush_r+0x1a>
 800f1ae:	f000 f887 	bl	800f2c0 <__sinit>
 800f1b2:	4b14      	ldr	r3, [pc, #80]	; (800f204 <_fflush_r+0x6c>)
 800f1b4:	429c      	cmp	r4, r3
 800f1b6:	d11b      	bne.n	800f1f0 <_fflush_r+0x58>
 800f1b8:	686c      	ldr	r4, [r5, #4]
 800f1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0ef      	beq.n	800f1a2 <_fflush_r+0xa>
 800f1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1c4:	07d0      	lsls	r0, r2, #31
 800f1c6:	d404      	bmi.n	800f1d2 <_fflush_r+0x3a>
 800f1c8:	0599      	lsls	r1, r3, #22
 800f1ca:	d402      	bmi.n	800f1d2 <_fflush_r+0x3a>
 800f1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ce:	f000 f91a 	bl	800f406 <__retarget_lock_acquire_recursive>
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	f7ff ff59 	bl	800f08c <__sflush_r>
 800f1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1dc:	07da      	lsls	r2, r3, #31
 800f1de:	4605      	mov	r5, r0
 800f1e0:	d4e0      	bmi.n	800f1a4 <_fflush_r+0xc>
 800f1e2:	89a3      	ldrh	r3, [r4, #12]
 800f1e4:	059b      	lsls	r3, r3, #22
 800f1e6:	d4dd      	bmi.n	800f1a4 <_fflush_r+0xc>
 800f1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1ea:	f000 f90d 	bl	800f408 <__retarget_lock_release_recursive>
 800f1ee:	e7d9      	b.n	800f1a4 <_fflush_r+0xc>
 800f1f0:	4b05      	ldr	r3, [pc, #20]	; (800f208 <_fflush_r+0x70>)
 800f1f2:	429c      	cmp	r4, r3
 800f1f4:	d101      	bne.n	800f1fa <_fflush_r+0x62>
 800f1f6:	68ac      	ldr	r4, [r5, #8]
 800f1f8:	e7df      	b.n	800f1ba <_fflush_r+0x22>
 800f1fa:	4b04      	ldr	r3, [pc, #16]	; (800f20c <_fflush_r+0x74>)
 800f1fc:	429c      	cmp	r4, r3
 800f1fe:	bf08      	it	eq
 800f200:	68ec      	ldreq	r4, [r5, #12]
 800f202:	e7da      	b.n	800f1ba <_fflush_r+0x22>
 800f204:	080116e8 	.word	0x080116e8
 800f208:	08011708 	.word	0x08011708
 800f20c:	080116c8 	.word	0x080116c8

0800f210 <std>:
 800f210:	2300      	movs	r3, #0
 800f212:	b510      	push	{r4, lr}
 800f214:	4604      	mov	r4, r0
 800f216:	e9c0 3300 	strd	r3, r3, [r0]
 800f21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f21e:	6083      	str	r3, [r0, #8]
 800f220:	8181      	strh	r1, [r0, #12]
 800f222:	6643      	str	r3, [r0, #100]	; 0x64
 800f224:	81c2      	strh	r2, [r0, #14]
 800f226:	6183      	str	r3, [r0, #24]
 800f228:	4619      	mov	r1, r3
 800f22a:	2208      	movs	r2, #8
 800f22c:	305c      	adds	r0, #92	; 0x5c
 800f22e:	f7fe fa25 	bl	800d67c <memset>
 800f232:	4b05      	ldr	r3, [pc, #20]	; (800f248 <std+0x38>)
 800f234:	6263      	str	r3, [r4, #36]	; 0x24
 800f236:	4b05      	ldr	r3, [pc, #20]	; (800f24c <std+0x3c>)
 800f238:	62a3      	str	r3, [r4, #40]	; 0x28
 800f23a:	4b05      	ldr	r3, [pc, #20]	; (800f250 <std+0x40>)
 800f23c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f23e:	4b05      	ldr	r3, [pc, #20]	; (800f254 <std+0x44>)
 800f240:	6224      	str	r4, [r4, #32]
 800f242:	6323      	str	r3, [r4, #48]	; 0x30
 800f244:	bd10      	pop	{r4, pc}
 800f246:	bf00      	nop
 800f248:	080100c9 	.word	0x080100c9
 800f24c:	080100eb 	.word	0x080100eb
 800f250:	08010123 	.word	0x08010123
 800f254:	08010147 	.word	0x08010147

0800f258 <_cleanup_r>:
 800f258:	4901      	ldr	r1, [pc, #4]	; (800f260 <_cleanup_r+0x8>)
 800f25a:	f000 b8af 	b.w	800f3bc <_fwalk_reent>
 800f25e:	bf00      	nop
 800f260:	0800f199 	.word	0x0800f199

0800f264 <__sfmoreglue>:
 800f264:	b570      	push	{r4, r5, r6, lr}
 800f266:	2268      	movs	r2, #104	; 0x68
 800f268:	1e4d      	subs	r5, r1, #1
 800f26a:	4355      	muls	r5, r2
 800f26c:	460e      	mov	r6, r1
 800f26e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f272:	f000 fd4b 	bl	800fd0c <_malloc_r>
 800f276:	4604      	mov	r4, r0
 800f278:	b140      	cbz	r0, 800f28c <__sfmoreglue+0x28>
 800f27a:	2100      	movs	r1, #0
 800f27c:	e9c0 1600 	strd	r1, r6, [r0]
 800f280:	300c      	adds	r0, #12
 800f282:	60a0      	str	r0, [r4, #8]
 800f284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f288:	f7fe f9f8 	bl	800d67c <memset>
 800f28c:	4620      	mov	r0, r4
 800f28e:	bd70      	pop	{r4, r5, r6, pc}

0800f290 <__sfp_lock_acquire>:
 800f290:	4801      	ldr	r0, [pc, #4]	; (800f298 <__sfp_lock_acquire+0x8>)
 800f292:	f000 b8b8 	b.w	800f406 <__retarget_lock_acquire_recursive>
 800f296:	bf00      	nop
 800f298:	20000b79 	.word	0x20000b79

0800f29c <__sfp_lock_release>:
 800f29c:	4801      	ldr	r0, [pc, #4]	; (800f2a4 <__sfp_lock_release+0x8>)
 800f29e:	f000 b8b3 	b.w	800f408 <__retarget_lock_release_recursive>
 800f2a2:	bf00      	nop
 800f2a4:	20000b79 	.word	0x20000b79

0800f2a8 <__sinit_lock_acquire>:
 800f2a8:	4801      	ldr	r0, [pc, #4]	; (800f2b0 <__sinit_lock_acquire+0x8>)
 800f2aa:	f000 b8ac 	b.w	800f406 <__retarget_lock_acquire_recursive>
 800f2ae:	bf00      	nop
 800f2b0:	20000b7a 	.word	0x20000b7a

0800f2b4 <__sinit_lock_release>:
 800f2b4:	4801      	ldr	r0, [pc, #4]	; (800f2bc <__sinit_lock_release+0x8>)
 800f2b6:	f000 b8a7 	b.w	800f408 <__retarget_lock_release_recursive>
 800f2ba:	bf00      	nop
 800f2bc:	20000b7a 	.word	0x20000b7a

0800f2c0 <__sinit>:
 800f2c0:	b510      	push	{r4, lr}
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	f7ff fff0 	bl	800f2a8 <__sinit_lock_acquire>
 800f2c8:	69a3      	ldr	r3, [r4, #24]
 800f2ca:	b11b      	cbz	r3, 800f2d4 <__sinit+0x14>
 800f2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d0:	f7ff bff0 	b.w	800f2b4 <__sinit_lock_release>
 800f2d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f2d8:	6523      	str	r3, [r4, #80]	; 0x50
 800f2da:	4b13      	ldr	r3, [pc, #76]	; (800f328 <__sinit+0x68>)
 800f2dc:	4a13      	ldr	r2, [pc, #76]	; (800f32c <__sinit+0x6c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f2e2:	42a3      	cmp	r3, r4
 800f2e4:	bf04      	itt	eq
 800f2e6:	2301      	moveq	r3, #1
 800f2e8:	61a3      	streq	r3, [r4, #24]
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f000 f820 	bl	800f330 <__sfp>
 800f2f0:	6060      	str	r0, [r4, #4]
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f000 f81c 	bl	800f330 <__sfp>
 800f2f8:	60a0      	str	r0, [r4, #8]
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 f818 	bl	800f330 <__sfp>
 800f300:	2200      	movs	r2, #0
 800f302:	60e0      	str	r0, [r4, #12]
 800f304:	2104      	movs	r1, #4
 800f306:	6860      	ldr	r0, [r4, #4]
 800f308:	f7ff ff82 	bl	800f210 <std>
 800f30c:	68a0      	ldr	r0, [r4, #8]
 800f30e:	2201      	movs	r2, #1
 800f310:	2109      	movs	r1, #9
 800f312:	f7ff ff7d 	bl	800f210 <std>
 800f316:	68e0      	ldr	r0, [r4, #12]
 800f318:	2202      	movs	r2, #2
 800f31a:	2112      	movs	r1, #18
 800f31c:	f7ff ff78 	bl	800f210 <std>
 800f320:	2301      	movs	r3, #1
 800f322:	61a3      	str	r3, [r4, #24]
 800f324:	e7d2      	b.n	800f2cc <__sinit+0xc>
 800f326:	bf00      	nop
 800f328:	08011600 	.word	0x08011600
 800f32c:	0800f259 	.word	0x0800f259

0800f330 <__sfp>:
 800f330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f332:	4607      	mov	r7, r0
 800f334:	f7ff ffac 	bl	800f290 <__sfp_lock_acquire>
 800f338:	4b1e      	ldr	r3, [pc, #120]	; (800f3b4 <__sfp+0x84>)
 800f33a:	681e      	ldr	r6, [r3, #0]
 800f33c:	69b3      	ldr	r3, [r6, #24]
 800f33e:	b913      	cbnz	r3, 800f346 <__sfp+0x16>
 800f340:	4630      	mov	r0, r6
 800f342:	f7ff ffbd 	bl	800f2c0 <__sinit>
 800f346:	3648      	adds	r6, #72	; 0x48
 800f348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	d503      	bpl.n	800f358 <__sfp+0x28>
 800f350:	6833      	ldr	r3, [r6, #0]
 800f352:	b30b      	cbz	r3, 800f398 <__sfp+0x68>
 800f354:	6836      	ldr	r6, [r6, #0]
 800f356:	e7f7      	b.n	800f348 <__sfp+0x18>
 800f358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f35c:	b9d5      	cbnz	r5, 800f394 <__sfp+0x64>
 800f35e:	4b16      	ldr	r3, [pc, #88]	; (800f3b8 <__sfp+0x88>)
 800f360:	60e3      	str	r3, [r4, #12]
 800f362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f366:	6665      	str	r5, [r4, #100]	; 0x64
 800f368:	f000 f84c 	bl	800f404 <__retarget_lock_init_recursive>
 800f36c:	f7ff ff96 	bl	800f29c <__sfp_lock_release>
 800f370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f378:	6025      	str	r5, [r4, #0]
 800f37a:	61a5      	str	r5, [r4, #24]
 800f37c:	2208      	movs	r2, #8
 800f37e:	4629      	mov	r1, r5
 800f380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f384:	f7fe f97a 	bl	800d67c <memset>
 800f388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f38c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f390:	4620      	mov	r0, r4
 800f392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f394:	3468      	adds	r4, #104	; 0x68
 800f396:	e7d9      	b.n	800f34c <__sfp+0x1c>
 800f398:	2104      	movs	r1, #4
 800f39a:	4638      	mov	r0, r7
 800f39c:	f7ff ff62 	bl	800f264 <__sfmoreglue>
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	6030      	str	r0, [r6, #0]
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d1d5      	bne.n	800f354 <__sfp+0x24>
 800f3a8:	f7ff ff78 	bl	800f29c <__sfp_lock_release>
 800f3ac:	230c      	movs	r3, #12
 800f3ae:	603b      	str	r3, [r7, #0]
 800f3b0:	e7ee      	b.n	800f390 <__sfp+0x60>
 800f3b2:	bf00      	nop
 800f3b4:	08011600 	.word	0x08011600
 800f3b8:	ffff0001 	.word	0xffff0001

0800f3bc <_fwalk_reent>:
 800f3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3c0:	4606      	mov	r6, r0
 800f3c2:	4688      	mov	r8, r1
 800f3c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f3c8:	2700      	movs	r7, #0
 800f3ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3ce:	f1b9 0901 	subs.w	r9, r9, #1
 800f3d2:	d505      	bpl.n	800f3e0 <_fwalk_reent+0x24>
 800f3d4:	6824      	ldr	r4, [r4, #0]
 800f3d6:	2c00      	cmp	r4, #0
 800f3d8:	d1f7      	bne.n	800f3ca <_fwalk_reent+0xe>
 800f3da:	4638      	mov	r0, r7
 800f3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e0:	89ab      	ldrh	r3, [r5, #12]
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d907      	bls.n	800f3f6 <_fwalk_reent+0x3a>
 800f3e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	d003      	beq.n	800f3f6 <_fwalk_reent+0x3a>
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	47c0      	blx	r8
 800f3f4:	4307      	orrs	r7, r0
 800f3f6:	3568      	adds	r5, #104	; 0x68
 800f3f8:	e7e9      	b.n	800f3ce <_fwalk_reent+0x12>
	...

0800f3fc <_localeconv_r>:
 800f3fc:	4800      	ldr	r0, [pc, #0]	; (800f400 <_localeconv_r+0x4>)
 800f3fe:	4770      	bx	lr
 800f400:	20000168 	.word	0x20000168

0800f404 <__retarget_lock_init_recursive>:
 800f404:	4770      	bx	lr

0800f406 <__retarget_lock_acquire_recursive>:
 800f406:	4770      	bx	lr

0800f408 <__retarget_lock_release_recursive>:
 800f408:	4770      	bx	lr

0800f40a <__swhatbuf_r>:
 800f40a:	b570      	push	{r4, r5, r6, lr}
 800f40c:	460e      	mov	r6, r1
 800f40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f412:	2900      	cmp	r1, #0
 800f414:	b096      	sub	sp, #88	; 0x58
 800f416:	4614      	mov	r4, r2
 800f418:	461d      	mov	r5, r3
 800f41a:	da08      	bge.n	800f42e <__swhatbuf_r+0x24>
 800f41c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	602a      	str	r2, [r5, #0]
 800f424:	061a      	lsls	r2, r3, #24
 800f426:	d410      	bmi.n	800f44a <__swhatbuf_r+0x40>
 800f428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f42c:	e00e      	b.n	800f44c <__swhatbuf_r+0x42>
 800f42e:	466a      	mov	r2, sp
 800f430:	f000 fee0 	bl	80101f4 <_fstat_r>
 800f434:	2800      	cmp	r0, #0
 800f436:	dbf1      	blt.n	800f41c <__swhatbuf_r+0x12>
 800f438:	9a01      	ldr	r2, [sp, #4]
 800f43a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f43e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f442:	425a      	negs	r2, r3
 800f444:	415a      	adcs	r2, r3
 800f446:	602a      	str	r2, [r5, #0]
 800f448:	e7ee      	b.n	800f428 <__swhatbuf_r+0x1e>
 800f44a:	2340      	movs	r3, #64	; 0x40
 800f44c:	2000      	movs	r0, #0
 800f44e:	6023      	str	r3, [r4, #0]
 800f450:	b016      	add	sp, #88	; 0x58
 800f452:	bd70      	pop	{r4, r5, r6, pc}

0800f454 <__smakebuf_r>:
 800f454:	898b      	ldrh	r3, [r1, #12]
 800f456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f458:	079d      	lsls	r5, r3, #30
 800f45a:	4606      	mov	r6, r0
 800f45c:	460c      	mov	r4, r1
 800f45e:	d507      	bpl.n	800f470 <__smakebuf_r+0x1c>
 800f460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	6123      	str	r3, [r4, #16]
 800f468:	2301      	movs	r3, #1
 800f46a:	6163      	str	r3, [r4, #20]
 800f46c:	b002      	add	sp, #8
 800f46e:	bd70      	pop	{r4, r5, r6, pc}
 800f470:	ab01      	add	r3, sp, #4
 800f472:	466a      	mov	r2, sp
 800f474:	f7ff ffc9 	bl	800f40a <__swhatbuf_r>
 800f478:	9900      	ldr	r1, [sp, #0]
 800f47a:	4605      	mov	r5, r0
 800f47c:	4630      	mov	r0, r6
 800f47e:	f000 fc45 	bl	800fd0c <_malloc_r>
 800f482:	b948      	cbnz	r0, 800f498 <__smakebuf_r+0x44>
 800f484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f488:	059a      	lsls	r2, r3, #22
 800f48a:	d4ef      	bmi.n	800f46c <__smakebuf_r+0x18>
 800f48c:	f023 0303 	bic.w	r3, r3, #3
 800f490:	f043 0302 	orr.w	r3, r3, #2
 800f494:	81a3      	strh	r3, [r4, #12]
 800f496:	e7e3      	b.n	800f460 <__smakebuf_r+0xc>
 800f498:	4b0d      	ldr	r3, [pc, #52]	; (800f4d0 <__smakebuf_r+0x7c>)
 800f49a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f49c:	89a3      	ldrh	r3, [r4, #12]
 800f49e:	6020      	str	r0, [r4, #0]
 800f4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4a4:	81a3      	strh	r3, [r4, #12]
 800f4a6:	9b00      	ldr	r3, [sp, #0]
 800f4a8:	6163      	str	r3, [r4, #20]
 800f4aa:	9b01      	ldr	r3, [sp, #4]
 800f4ac:	6120      	str	r0, [r4, #16]
 800f4ae:	b15b      	cbz	r3, 800f4c8 <__smakebuf_r+0x74>
 800f4b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	f000 feaf 	bl	8010218 <_isatty_r>
 800f4ba:	b128      	cbz	r0, 800f4c8 <__smakebuf_r+0x74>
 800f4bc:	89a3      	ldrh	r3, [r4, #12]
 800f4be:	f023 0303 	bic.w	r3, r3, #3
 800f4c2:	f043 0301 	orr.w	r3, r3, #1
 800f4c6:	81a3      	strh	r3, [r4, #12]
 800f4c8:	89a0      	ldrh	r0, [r4, #12]
 800f4ca:	4305      	orrs	r5, r0
 800f4cc:	81a5      	strh	r5, [r4, #12]
 800f4ce:	e7cd      	b.n	800f46c <__smakebuf_r+0x18>
 800f4d0:	0800f259 	.word	0x0800f259

0800f4d4 <malloc>:
 800f4d4:	4b02      	ldr	r3, [pc, #8]	; (800f4e0 <malloc+0xc>)
 800f4d6:	4601      	mov	r1, r0
 800f4d8:	6818      	ldr	r0, [r3, #0]
 800f4da:	f000 bc17 	b.w	800fd0c <_malloc_r>
 800f4de:	bf00      	nop
 800f4e0:	20000014 	.word	0x20000014

0800f4e4 <memcpy>:
 800f4e4:	440a      	add	r2, r1
 800f4e6:	4291      	cmp	r1, r2
 800f4e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4ec:	d100      	bne.n	800f4f0 <memcpy+0xc>
 800f4ee:	4770      	bx	lr
 800f4f0:	b510      	push	{r4, lr}
 800f4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4fa:	4291      	cmp	r1, r2
 800f4fc:	d1f9      	bne.n	800f4f2 <memcpy+0xe>
 800f4fe:	bd10      	pop	{r4, pc}

0800f500 <_Balloc>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f504:	4604      	mov	r4, r0
 800f506:	460d      	mov	r5, r1
 800f508:	b976      	cbnz	r6, 800f528 <_Balloc+0x28>
 800f50a:	2010      	movs	r0, #16
 800f50c:	f7ff ffe2 	bl	800f4d4 <malloc>
 800f510:	4602      	mov	r2, r0
 800f512:	6260      	str	r0, [r4, #36]	; 0x24
 800f514:	b920      	cbnz	r0, 800f520 <_Balloc+0x20>
 800f516:	4b18      	ldr	r3, [pc, #96]	; (800f578 <_Balloc+0x78>)
 800f518:	4818      	ldr	r0, [pc, #96]	; (800f57c <_Balloc+0x7c>)
 800f51a:	2166      	movs	r1, #102	; 0x66
 800f51c:	f000 fe2a 	bl	8010174 <__assert_func>
 800f520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f524:	6006      	str	r6, [r0, #0]
 800f526:	60c6      	str	r6, [r0, #12]
 800f528:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f52a:	68f3      	ldr	r3, [r6, #12]
 800f52c:	b183      	cbz	r3, 800f550 <_Balloc+0x50>
 800f52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f536:	b9b8      	cbnz	r0, 800f568 <_Balloc+0x68>
 800f538:	2101      	movs	r1, #1
 800f53a:	fa01 f605 	lsl.w	r6, r1, r5
 800f53e:	1d72      	adds	r2, r6, #5
 800f540:	0092      	lsls	r2, r2, #2
 800f542:	4620      	mov	r0, r4
 800f544:	f000 fb60 	bl	800fc08 <_calloc_r>
 800f548:	b160      	cbz	r0, 800f564 <_Balloc+0x64>
 800f54a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f54e:	e00e      	b.n	800f56e <_Balloc+0x6e>
 800f550:	2221      	movs	r2, #33	; 0x21
 800f552:	2104      	movs	r1, #4
 800f554:	4620      	mov	r0, r4
 800f556:	f000 fb57 	bl	800fc08 <_calloc_r>
 800f55a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f55c:	60f0      	str	r0, [r6, #12]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d1e4      	bne.n	800f52e <_Balloc+0x2e>
 800f564:	2000      	movs	r0, #0
 800f566:	bd70      	pop	{r4, r5, r6, pc}
 800f568:	6802      	ldr	r2, [r0, #0]
 800f56a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f56e:	2300      	movs	r3, #0
 800f570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f574:	e7f7      	b.n	800f566 <_Balloc+0x66>
 800f576:	bf00      	nop
 800f578:	08011645 	.word	0x08011645
 800f57c:	08011728 	.word	0x08011728

0800f580 <_Bfree>:
 800f580:	b570      	push	{r4, r5, r6, lr}
 800f582:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f584:	4605      	mov	r5, r0
 800f586:	460c      	mov	r4, r1
 800f588:	b976      	cbnz	r6, 800f5a8 <_Bfree+0x28>
 800f58a:	2010      	movs	r0, #16
 800f58c:	f7ff ffa2 	bl	800f4d4 <malloc>
 800f590:	4602      	mov	r2, r0
 800f592:	6268      	str	r0, [r5, #36]	; 0x24
 800f594:	b920      	cbnz	r0, 800f5a0 <_Bfree+0x20>
 800f596:	4b09      	ldr	r3, [pc, #36]	; (800f5bc <_Bfree+0x3c>)
 800f598:	4809      	ldr	r0, [pc, #36]	; (800f5c0 <_Bfree+0x40>)
 800f59a:	218a      	movs	r1, #138	; 0x8a
 800f59c:	f000 fdea 	bl	8010174 <__assert_func>
 800f5a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f5a4:	6006      	str	r6, [r0, #0]
 800f5a6:	60c6      	str	r6, [r0, #12]
 800f5a8:	b13c      	cbz	r4, 800f5ba <_Bfree+0x3a>
 800f5aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f5ac:	6862      	ldr	r2, [r4, #4]
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f5b4:	6021      	str	r1, [r4, #0]
 800f5b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f5ba:	bd70      	pop	{r4, r5, r6, pc}
 800f5bc:	08011645 	.word	0x08011645
 800f5c0:	08011728 	.word	0x08011728

0800f5c4 <__multadd>:
 800f5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c8:	690d      	ldr	r5, [r1, #16]
 800f5ca:	4607      	mov	r7, r0
 800f5cc:	460c      	mov	r4, r1
 800f5ce:	461e      	mov	r6, r3
 800f5d0:	f101 0c14 	add.w	ip, r1, #20
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	f8dc 3000 	ldr.w	r3, [ip]
 800f5da:	b299      	uxth	r1, r3
 800f5dc:	fb02 6101 	mla	r1, r2, r1, r6
 800f5e0:	0c1e      	lsrs	r6, r3, #16
 800f5e2:	0c0b      	lsrs	r3, r1, #16
 800f5e4:	fb02 3306 	mla	r3, r2, r6, r3
 800f5e8:	b289      	uxth	r1, r1
 800f5ea:	3001      	adds	r0, #1
 800f5ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5f0:	4285      	cmp	r5, r0
 800f5f2:	f84c 1b04 	str.w	r1, [ip], #4
 800f5f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5fa:	dcec      	bgt.n	800f5d6 <__multadd+0x12>
 800f5fc:	b30e      	cbz	r6, 800f642 <__multadd+0x7e>
 800f5fe:	68a3      	ldr	r3, [r4, #8]
 800f600:	42ab      	cmp	r3, r5
 800f602:	dc19      	bgt.n	800f638 <__multadd+0x74>
 800f604:	6861      	ldr	r1, [r4, #4]
 800f606:	4638      	mov	r0, r7
 800f608:	3101      	adds	r1, #1
 800f60a:	f7ff ff79 	bl	800f500 <_Balloc>
 800f60e:	4680      	mov	r8, r0
 800f610:	b928      	cbnz	r0, 800f61e <__multadd+0x5a>
 800f612:	4602      	mov	r2, r0
 800f614:	4b0c      	ldr	r3, [pc, #48]	; (800f648 <__multadd+0x84>)
 800f616:	480d      	ldr	r0, [pc, #52]	; (800f64c <__multadd+0x88>)
 800f618:	21b5      	movs	r1, #181	; 0xb5
 800f61a:	f000 fdab 	bl	8010174 <__assert_func>
 800f61e:	6922      	ldr	r2, [r4, #16]
 800f620:	3202      	adds	r2, #2
 800f622:	f104 010c 	add.w	r1, r4, #12
 800f626:	0092      	lsls	r2, r2, #2
 800f628:	300c      	adds	r0, #12
 800f62a:	f7ff ff5b 	bl	800f4e4 <memcpy>
 800f62e:	4621      	mov	r1, r4
 800f630:	4638      	mov	r0, r7
 800f632:	f7ff ffa5 	bl	800f580 <_Bfree>
 800f636:	4644      	mov	r4, r8
 800f638:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f63c:	3501      	adds	r5, #1
 800f63e:	615e      	str	r6, [r3, #20]
 800f640:	6125      	str	r5, [r4, #16]
 800f642:	4620      	mov	r0, r4
 800f644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f648:	080116b7 	.word	0x080116b7
 800f64c:	08011728 	.word	0x08011728

0800f650 <__hi0bits>:
 800f650:	0c03      	lsrs	r3, r0, #16
 800f652:	041b      	lsls	r3, r3, #16
 800f654:	b9d3      	cbnz	r3, 800f68c <__hi0bits+0x3c>
 800f656:	0400      	lsls	r0, r0, #16
 800f658:	2310      	movs	r3, #16
 800f65a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f65e:	bf04      	itt	eq
 800f660:	0200      	lsleq	r0, r0, #8
 800f662:	3308      	addeq	r3, #8
 800f664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f668:	bf04      	itt	eq
 800f66a:	0100      	lsleq	r0, r0, #4
 800f66c:	3304      	addeq	r3, #4
 800f66e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f672:	bf04      	itt	eq
 800f674:	0080      	lsleq	r0, r0, #2
 800f676:	3302      	addeq	r3, #2
 800f678:	2800      	cmp	r0, #0
 800f67a:	db05      	blt.n	800f688 <__hi0bits+0x38>
 800f67c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f680:	f103 0301 	add.w	r3, r3, #1
 800f684:	bf08      	it	eq
 800f686:	2320      	moveq	r3, #32
 800f688:	4618      	mov	r0, r3
 800f68a:	4770      	bx	lr
 800f68c:	2300      	movs	r3, #0
 800f68e:	e7e4      	b.n	800f65a <__hi0bits+0xa>

0800f690 <__lo0bits>:
 800f690:	6803      	ldr	r3, [r0, #0]
 800f692:	f013 0207 	ands.w	r2, r3, #7
 800f696:	4601      	mov	r1, r0
 800f698:	d00b      	beq.n	800f6b2 <__lo0bits+0x22>
 800f69a:	07da      	lsls	r2, r3, #31
 800f69c:	d423      	bmi.n	800f6e6 <__lo0bits+0x56>
 800f69e:	0798      	lsls	r0, r3, #30
 800f6a0:	bf49      	itett	mi
 800f6a2:	085b      	lsrmi	r3, r3, #1
 800f6a4:	089b      	lsrpl	r3, r3, #2
 800f6a6:	2001      	movmi	r0, #1
 800f6a8:	600b      	strmi	r3, [r1, #0]
 800f6aa:	bf5c      	itt	pl
 800f6ac:	600b      	strpl	r3, [r1, #0]
 800f6ae:	2002      	movpl	r0, #2
 800f6b0:	4770      	bx	lr
 800f6b2:	b298      	uxth	r0, r3
 800f6b4:	b9a8      	cbnz	r0, 800f6e2 <__lo0bits+0x52>
 800f6b6:	0c1b      	lsrs	r3, r3, #16
 800f6b8:	2010      	movs	r0, #16
 800f6ba:	b2da      	uxtb	r2, r3
 800f6bc:	b90a      	cbnz	r2, 800f6c2 <__lo0bits+0x32>
 800f6be:	3008      	adds	r0, #8
 800f6c0:	0a1b      	lsrs	r3, r3, #8
 800f6c2:	071a      	lsls	r2, r3, #28
 800f6c4:	bf04      	itt	eq
 800f6c6:	091b      	lsreq	r3, r3, #4
 800f6c8:	3004      	addeq	r0, #4
 800f6ca:	079a      	lsls	r2, r3, #30
 800f6cc:	bf04      	itt	eq
 800f6ce:	089b      	lsreq	r3, r3, #2
 800f6d0:	3002      	addeq	r0, #2
 800f6d2:	07da      	lsls	r2, r3, #31
 800f6d4:	d403      	bmi.n	800f6de <__lo0bits+0x4e>
 800f6d6:	085b      	lsrs	r3, r3, #1
 800f6d8:	f100 0001 	add.w	r0, r0, #1
 800f6dc:	d005      	beq.n	800f6ea <__lo0bits+0x5a>
 800f6de:	600b      	str	r3, [r1, #0]
 800f6e0:	4770      	bx	lr
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	e7e9      	b.n	800f6ba <__lo0bits+0x2a>
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	4770      	bx	lr
 800f6ea:	2020      	movs	r0, #32
 800f6ec:	4770      	bx	lr
	...

0800f6f0 <__i2b>:
 800f6f0:	b510      	push	{r4, lr}
 800f6f2:	460c      	mov	r4, r1
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	f7ff ff03 	bl	800f500 <_Balloc>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	b928      	cbnz	r0, 800f70a <__i2b+0x1a>
 800f6fe:	4b05      	ldr	r3, [pc, #20]	; (800f714 <__i2b+0x24>)
 800f700:	4805      	ldr	r0, [pc, #20]	; (800f718 <__i2b+0x28>)
 800f702:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f706:	f000 fd35 	bl	8010174 <__assert_func>
 800f70a:	2301      	movs	r3, #1
 800f70c:	6144      	str	r4, [r0, #20]
 800f70e:	6103      	str	r3, [r0, #16]
 800f710:	bd10      	pop	{r4, pc}
 800f712:	bf00      	nop
 800f714:	080116b7 	.word	0x080116b7
 800f718:	08011728 	.word	0x08011728

0800f71c <__multiply>:
 800f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f720:	4691      	mov	r9, r2
 800f722:	690a      	ldr	r2, [r1, #16]
 800f724:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f728:	429a      	cmp	r2, r3
 800f72a:	bfb8      	it	lt
 800f72c:	460b      	movlt	r3, r1
 800f72e:	460c      	mov	r4, r1
 800f730:	bfbc      	itt	lt
 800f732:	464c      	movlt	r4, r9
 800f734:	4699      	movlt	r9, r3
 800f736:	6927      	ldr	r7, [r4, #16]
 800f738:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f73c:	68a3      	ldr	r3, [r4, #8]
 800f73e:	6861      	ldr	r1, [r4, #4]
 800f740:	eb07 060a 	add.w	r6, r7, sl
 800f744:	42b3      	cmp	r3, r6
 800f746:	b085      	sub	sp, #20
 800f748:	bfb8      	it	lt
 800f74a:	3101      	addlt	r1, #1
 800f74c:	f7ff fed8 	bl	800f500 <_Balloc>
 800f750:	b930      	cbnz	r0, 800f760 <__multiply+0x44>
 800f752:	4602      	mov	r2, r0
 800f754:	4b44      	ldr	r3, [pc, #272]	; (800f868 <__multiply+0x14c>)
 800f756:	4845      	ldr	r0, [pc, #276]	; (800f86c <__multiply+0x150>)
 800f758:	f240 115d 	movw	r1, #349	; 0x15d
 800f75c:	f000 fd0a 	bl	8010174 <__assert_func>
 800f760:	f100 0514 	add.w	r5, r0, #20
 800f764:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f768:	462b      	mov	r3, r5
 800f76a:	2200      	movs	r2, #0
 800f76c:	4543      	cmp	r3, r8
 800f76e:	d321      	bcc.n	800f7b4 <__multiply+0x98>
 800f770:	f104 0314 	add.w	r3, r4, #20
 800f774:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f778:	f109 0314 	add.w	r3, r9, #20
 800f77c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f780:	9202      	str	r2, [sp, #8]
 800f782:	1b3a      	subs	r2, r7, r4
 800f784:	3a15      	subs	r2, #21
 800f786:	f022 0203 	bic.w	r2, r2, #3
 800f78a:	3204      	adds	r2, #4
 800f78c:	f104 0115 	add.w	r1, r4, #21
 800f790:	428f      	cmp	r7, r1
 800f792:	bf38      	it	cc
 800f794:	2204      	movcc	r2, #4
 800f796:	9201      	str	r2, [sp, #4]
 800f798:	9a02      	ldr	r2, [sp, #8]
 800f79a:	9303      	str	r3, [sp, #12]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d80c      	bhi.n	800f7ba <__multiply+0x9e>
 800f7a0:	2e00      	cmp	r6, #0
 800f7a2:	dd03      	ble.n	800f7ac <__multiply+0x90>
 800f7a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d05a      	beq.n	800f862 <__multiply+0x146>
 800f7ac:	6106      	str	r6, [r0, #16]
 800f7ae:	b005      	add	sp, #20
 800f7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b4:	f843 2b04 	str.w	r2, [r3], #4
 800f7b8:	e7d8      	b.n	800f76c <__multiply+0x50>
 800f7ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800f7be:	f1ba 0f00 	cmp.w	sl, #0
 800f7c2:	d024      	beq.n	800f80e <__multiply+0xf2>
 800f7c4:	f104 0e14 	add.w	lr, r4, #20
 800f7c8:	46a9      	mov	r9, r5
 800f7ca:	f04f 0c00 	mov.w	ip, #0
 800f7ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f7d2:	f8d9 1000 	ldr.w	r1, [r9]
 800f7d6:	fa1f fb82 	uxth.w	fp, r2
 800f7da:	b289      	uxth	r1, r1
 800f7dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f7e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f7e4:	f8d9 2000 	ldr.w	r2, [r9]
 800f7e8:	4461      	add	r1, ip
 800f7ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f7ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800f7f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f7f6:	b289      	uxth	r1, r1
 800f7f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f7fc:	4577      	cmp	r7, lr
 800f7fe:	f849 1b04 	str.w	r1, [r9], #4
 800f802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f806:	d8e2      	bhi.n	800f7ce <__multiply+0xb2>
 800f808:	9a01      	ldr	r2, [sp, #4]
 800f80a:	f845 c002 	str.w	ip, [r5, r2]
 800f80e:	9a03      	ldr	r2, [sp, #12]
 800f810:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f814:	3304      	adds	r3, #4
 800f816:	f1b9 0f00 	cmp.w	r9, #0
 800f81a:	d020      	beq.n	800f85e <__multiply+0x142>
 800f81c:	6829      	ldr	r1, [r5, #0]
 800f81e:	f104 0c14 	add.w	ip, r4, #20
 800f822:	46ae      	mov	lr, r5
 800f824:	f04f 0a00 	mov.w	sl, #0
 800f828:	f8bc b000 	ldrh.w	fp, [ip]
 800f82c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f830:	fb09 220b 	mla	r2, r9, fp, r2
 800f834:	4492      	add	sl, r2
 800f836:	b289      	uxth	r1, r1
 800f838:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f83c:	f84e 1b04 	str.w	r1, [lr], #4
 800f840:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f844:	f8be 1000 	ldrh.w	r1, [lr]
 800f848:	0c12      	lsrs	r2, r2, #16
 800f84a:	fb09 1102 	mla	r1, r9, r2, r1
 800f84e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f852:	4567      	cmp	r7, ip
 800f854:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f858:	d8e6      	bhi.n	800f828 <__multiply+0x10c>
 800f85a:	9a01      	ldr	r2, [sp, #4]
 800f85c:	50a9      	str	r1, [r5, r2]
 800f85e:	3504      	adds	r5, #4
 800f860:	e79a      	b.n	800f798 <__multiply+0x7c>
 800f862:	3e01      	subs	r6, #1
 800f864:	e79c      	b.n	800f7a0 <__multiply+0x84>
 800f866:	bf00      	nop
 800f868:	080116b7 	.word	0x080116b7
 800f86c:	08011728 	.word	0x08011728

0800f870 <__pow5mult>:
 800f870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f874:	4615      	mov	r5, r2
 800f876:	f012 0203 	ands.w	r2, r2, #3
 800f87a:	4606      	mov	r6, r0
 800f87c:	460f      	mov	r7, r1
 800f87e:	d007      	beq.n	800f890 <__pow5mult+0x20>
 800f880:	4c25      	ldr	r4, [pc, #148]	; (800f918 <__pow5mult+0xa8>)
 800f882:	3a01      	subs	r2, #1
 800f884:	2300      	movs	r3, #0
 800f886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f88a:	f7ff fe9b 	bl	800f5c4 <__multadd>
 800f88e:	4607      	mov	r7, r0
 800f890:	10ad      	asrs	r5, r5, #2
 800f892:	d03d      	beq.n	800f910 <__pow5mult+0xa0>
 800f894:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f896:	b97c      	cbnz	r4, 800f8b8 <__pow5mult+0x48>
 800f898:	2010      	movs	r0, #16
 800f89a:	f7ff fe1b 	bl	800f4d4 <malloc>
 800f89e:	4602      	mov	r2, r0
 800f8a0:	6270      	str	r0, [r6, #36]	; 0x24
 800f8a2:	b928      	cbnz	r0, 800f8b0 <__pow5mult+0x40>
 800f8a4:	4b1d      	ldr	r3, [pc, #116]	; (800f91c <__pow5mult+0xac>)
 800f8a6:	481e      	ldr	r0, [pc, #120]	; (800f920 <__pow5mult+0xb0>)
 800f8a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f8ac:	f000 fc62 	bl	8010174 <__assert_func>
 800f8b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8b4:	6004      	str	r4, [r0, #0]
 800f8b6:	60c4      	str	r4, [r0, #12]
 800f8b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8c0:	b94c      	cbnz	r4, 800f8d6 <__pow5mult+0x66>
 800f8c2:	f240 2171 	movw	r1, #625	; 0x271
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f7ff ff12 	bl	800f6f0 <__i2b>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	6003      	str	r3, [r0, #0]
 800f8d6:	f04f 0900 	mov.w	r9, #0
 800f8da:	07eb      	lsls	r3, r5, #31
 800f8dc:	d50a      	bpl.n	800f8f4 <__pow5mult+0x84>
 800f8de:	4639      	mov	r1, r7
 800f8e0:	4622      	mov	r2, r4
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f7ff ff1a 	bl	800f71c <__multiply>
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	4680      	mov	r8, r0
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	f7ff fe47 	bl	800f580 <_Bfree>
 800f8f2:	4647      	mov	r7, r8
 800f8f4:	106d      	asrs	r5, r5, #1
 800f8f6:	d00b      	beq.n	800f910 <__pow5mult+0xa0>
 800f8f8:	6820      	ldr	r0, [r4, #0]
 800f8fa:	b938      	cbnz	r0, 800f90c <__pow5mult+0x9c>
 800f8fc:	4622      	mov	r2, r4
 800f8fe:	4621      	mov	r1, r4
 800f900:	4630      	mov	r0, r6
 800f902:	f7ff ff0b 	bl	800f71c <__multiply>
 800f906:	6020      	str	r0, [r4, #0]
 800f908:	f8c0 9000 	str.w	r9, [r0]
 800f90c:	4604      	mov	r4, r0
 800f90e:	e7e4      	b.n	800f8da <__pow5mult+0x6a>
 800f910:	4638      	mov	r0, r7
 800f912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f916:	bf00      	nop
 800f918:	08011878 	.word	0x08011878
 800f91c:	08011645 	.word	0x08011645
 800f920:	08011728 	.word	0x08011728

0800f924 <__lshift>:
 800f924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f928:	460c      	mov	r4, r1
 800f92a:	6849      	ldr	r1, [r1, #4]
 800f92c:	6923      	ldr	r3, [r4, #16]
 800f92e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	4607      	mov	r7, r0
 800f936:	4691      	mov	r9, r2
 800f938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f93c:	f108 0601 	add.w	r6, r8, #1
 800f940:	42b3      	cmp	r3, r6
 800f942:	db0b      	blt.n	800f95c <__lshift+0x38>
 800f944:	4638      	mov	r0, r7
 800f946:	f7ff fddb 	bl	800f500 <_Balloc>
 800f94a:	4605      	mov	r5, r0
 800f94c:	b948      	cbnz	r0, 800f962 <__lshift+0x3e>
 800f94e:	4602      	mov	r2, r0
 800f950:	4b2a      	ldr	r3, [pc, #168]	; (800f9fc <__lshift+0xd8>)
 800f952:	482b      	ldr	r0, [pc, #172]	; (800fa00 <__lshift+0xdc>)
 800f954:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f958:	f000 fc0c 	bl	8010174 <__assert_func>
 800f95c:	3101      	adds	r1, #1
 800f95e:	005b      	lsls	r3, r3, #1
 800f960:	e7ee      	b.n	800f940 <__lshift+0x1c>
 800f962:	2300      	movs	r3, #0
 800f964:	f100 0114 	add.w	r1, r0, #20
 800f968:	f100 0210 	add.w	r2, r0, #16
 800f96c:	4618      	mov	r0, r3
 800f96e:	4553      	cmp	r3, sl
 800f970:	db37      	blt.n	800f9e2 <__lshift+0xbe>
 800f972:	6920      	ldr	r0, [r4, #16]
 800f974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f978:	f104 0314 	add.w	r3, r4, #20
 800f97c:	f019 091f 	ands.w	r9, r9, #31
 800f980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f984:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f988:	d02f      	beq.n	800f9ea <__lshift+0xc6>
 800f98a:	f1c9 0e20 	rsb	lr, r9, #32
 800f98e:	468a      	mov	sl, r1
 800f990:	f04f 0c00 	mov.w	ip, #0
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	fa02 f209 	lsl.w	r2, r2, r9
 800f99a:	ea42 020c 	orr.w	r2, r2, ip
 800f99e:	f84a 2b04 	str.w	r2, [sl], #4
 800f9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9a6:	4298      	cmp	r0, r3
 800f9a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f9ac:	d8f2      	bhi.n	800f994 <__lshift+0x70>
 800f9ae:	1b03      	subs	r3, r0, r4
 800f9b0:	3b15      	subs	r3, #21
 800f9b2:	f023 0303 	bic.w	r3, r3, #3
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	f104 0215 	add.w	r2, r4, #21
 800f9bc:	4290      	cmp	r0, r2
 800f9be:	bf38      	it	cc
 800f9c0:	2304      	movcc	r3, #4
 800f9c2:	f841 c003 	str.w	ip, [r1, r3]
 800f9c6:	f1bc 0f00 	cmp.w	ip, #0
 800f9ca:	d001      	beq.n	800f9d0 <__lshift+0xac>
 800f9cc:	f108 0602 	add.w	r6, r8, #2
 800f9d0:	3e01      	subs	r6, #1
 800f9d2:	4638      	mov	r0, r7
 800f9d4:	612e      	str	r6, [r5, #16]
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	f7ff fdd2 	bl	800f580 <_Bfree>
 800f9dc:	4628      	mov	r0, r5
 800f9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	e7c1      	b.n	800f96e <__lshift+0x4a>
 800f9ea:	3904      	subs	r1, #4
 800f9ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9f4:	4298      	cmp	r0, r3
 800f9f6:	d8f9      	bhi.n	800f9ec <__lshift+0xc8>
 800f9f8:	e7ea      	b.n	800f9d0 <__lshift+0xac>
 800f9fa:	bf00      	nop
 800f9fc:	080116b7 	.word	0x080116b7
 800fa00:	08011728 	.word	0x08011728

0800fa04 <__mcmp>:
 800fa04:	b530      	push	{r4, r5, lr}
 800fa06:	6902      	ldr	r2, [r0, #16]
 800fa08:	690c      	ldr	r4, [r1, #16]
 800fa0a:	1b12      	subs	r2, r2, r4
 800fa0c:	d10e      	bne.n	800fa2c <__mcmp+0x28>
 800fa0e:	f100 0314 	add.w	r3, r0, #20
 800fa12:	3114      	adds	r1, #20
 800fa14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa24:	42a5      	cmp	r5, r4
 800fa26:	d003      	beq.n	800fa30 <__mcmp+0x2c>
 800fa28:	d305      	bcc.n	800fa36 <__mcmp+0x32>
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	4610      	mov	r0, r2
 800fa2e:	bd30      	pop	{r4, r5, pc}
 800fa30:	4283      	cmp	r3, r0
 800fa32:	d3f3      	bcc.n	800fa1c <__mcmp+0x18>
 800fa34:	e7fa      	b.n	800fa2c <__mcmp+0x28>
 800fa36:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3a:	e7f7      	b.n	800fa2c <__mcmp+0x28>

0800fa3c <__mdiff>:
 800fa3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa40:	460c      	mov	r4, r1
 800fa42:	4606      	mov	r6, r0
 800fa44:	4611      	mov	r1, r2
 800fa46:	4620      	mov	r0, r4
 800fa48:	4690      	mov	r8, r2
 800fa4a:	f7ff ffdb 	bl	800fa04 <__mcmp>
 800fa4e:	1e05      	subs	r5, r0, #0
 800fa50:	d110      	bne.n	800fa74 <__mdiff+0x38>
 800fa52:	4629      	mov	r1, r5
 800fa54:	4630      	mov	r0, r6
 800fa56:	f7ff fd53 	bl	800f500 <_Balloc>
 800fa5a:	b930      	cbnz	r0, 800fa6a <__mdiff+0x2e>
 800fa5c:	4b3a      	ldr	r3, [pc, #232]	; (800fb48 <__mdiff+0x10c>)
 800fa5e:	4602      	mov	r2, r0
 800fa60:	f240 2132 	movw	r1, #562	; 0x232
 800fa64:	4839      	ldr	r0, [pc, #228]	; (800fb4c <__mdiff+0x110>)
 800fa66:	f000 fb85 	bl	8010174 <__assert_func>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa74:	bfa4      	itt	ge
 800fa76:	4643      	movge	r3, r8
 800fa78:	46a0      	movge	r8, r4
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa80:	bfa6      	itte	ge
 800fa82:	461c      	movge	r4, r3
 800fa84:	2500      	movge	r5, #0
 800fa86:	2501      	movlt	r5, #1
 800fa88:	f7ff fd3a 	bl	800f500 <_Balloc>
 800fa8c:	b920      	cbnz	r0, 800fa98 <__mdiff+0x5c>
 800fa8e:	4b2e      	ldr	r3, [pc, #184]	; (800fb48 <__mdiff+0x10c>)
 800fa90:	4602      	mov	r2, r0
 800fa92:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa96:	e7e5      	b.n	800fa64 <__mdiff+0x28>
 800fa98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa9c:	6926      	ldr	r6, [r4, #16]
 800fa9e:	60c5      	str	r5, [r0, #12]
 800faa0:	f104 0914 	add.w	r9, r4, #20
 800faa4:	f108 0514 	add.w	r5, r8, #20
 800faa8:	f100 0e14 	add.w	lr, r0, #20
 800faac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fab0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fab4:	f108 0210 	add.w	r2, r8, #16
 800fab8:	46f2      	mov	sl, lr
 800faba:	2100      	movs	r1, #0
 800fabc:	f859 3b04 	ldr.w	r3, [r9], #4
 800fac0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fac4:	fa1f f883 	uxth.w	r8, r3
 800fac8:	fa11 f18b 	uxtah	r1, r1, fp
 800facc:	0c1b      	lsrs	r3, r3, #16
 800face:	eba1 0808 	sub.w	r8, r1, r8
 800fad2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fad6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fada:	fa1f f888 	uxth.w	r8, r8
 800fade:	1419      	asrs	r1, r3, #16
 800fae0:	454e      	cmp	r6, r9
 800fae2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fae6:	f84a 3b04 	str.w	r3, [sl], #4
 800faea:	d8e7      	bhi.n	800fabc <__mdiff+0x80>
 800faec:	1b33      	subs	r3, r6, r4
 800faee:	3b15      	subs	r3, #21
 800faf0:	f023 0303 	bic.w	r3, r3, #3
 800faf4:	3304      	adds	r3, #4
 800faf6:	3415      	adds	r4, #21
 800faf8:	42a6      	cmp	r6, r4
 800fafa:	bf38      	it	cc
 800fafc:	2304      	movcc	r3, #4
 800fafe:	441d      	add	r5, r3
 800fb00:	4473      	add	r3, lr
 800fb02:	469e      	mov	lr, r3
 800fb04:	462e      	mov	r6, r5
 800fb06:	4566      	cmp	r6, ip
 800fb08:	d30e      	bcc.n	800fb28 <__mdiff+0xec>
 800fb0a:	f10c 0203 	add.w	r2, ip, #3
 800fb0e:	1b52      	subs	r2, r2, r5
 800fb10:	f022 0203 	bic.w	r2, r2, #3
 800fb14:	3d03      	subs	r5, #3
 800fb16:	45ac      	cmp	ip, r5
 800fb18:	bf38      	it	cc
 800fb1a:	2200      	movcc	r2, #0
 800fb1c:	441a      	add	r2, r3
 800fb1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb22:	b17b      	cbz	r3, 800fb44 <__mdiff+0x108>
 800fb24:	6107      	str	r7, [r0, #16]
 800fb26:	e7a3      	b.n	800fa70 <__mdiff+0x34>
 800fb28:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb2c:	fa11 f288 	uxtah	r2, r1, r8
 800fb30:	1414      	asrs	r4, r2, #16
 800fb32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fb36:	b292      	uxth	r2, r2
 800fb38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fb3c:	f84e 2b04 	str.w	r2, [lr], #4
 800fb40:	1421      	asrs	r1, r4, #16
 800fb42:	e7e0      	b.n	800fb06 <__mdiff+0xca>
 800fb44:	3f01      	subs	r7, #1
 800fb46:	e7ea      	b.n	800fb1e <__mdiff+0xe2>
 800fb48:	080116b7 	.word	0x080116b7
 800fb4c:	08011728 	.word	0x08011728

0800fb50 <__d2b>:
 800fb50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb54:	4689      	mov	r9, r1
 800fb56:	2101      	movs	r1, #1
 800fb58:	ec57 6b10 	vmov	r6, r7, d0
 800fb5c:	4690      	mov	r8, r2
 800fb5e:	f7ff fccf 	bl	800f500 <_Balloc>
 800fb62:	4604      	mov	r4, r0
 800fb64:	b930      	cbnz	r0, 800fb74 <__d2b+0x24>
 800fb66:	4602      	mov	r2, r0
 800fb68:	4b25      	ldr	r3, [pc, #148]	; (800fc00 <__d2b+0xb0>)
 800fb6a:	4826      	ldr	r0, [pc, #152]	; (800fc04 <__d2b+0xb4>)
 800fb6c:	f240 310a 	movw	r1, #778	; 0x30a
 800fb70:	f000 fb00 	bl	8010174 <__assert_func>
 800fb74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fb78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb7c:	bb35      	cbnz	r5, 800fbcc <__d2b+0x7c>
 800fb7e:	2e00      	cmp	r6, #0
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	d028      	beq.n	800fbd6 <__d2b+0x86>
 800fb84:	4668      	mov	r0, sp
 800fb86:	9600      	str	r6, [sp, #0]
 800fb88:	f7ff fd82 	bl	800f690 <__lo0bits>
 800fb8c:	9900      	ldr	r1, [sp, #0]
 800fb8e:	b300      	cbz	r0, 800fbd2 <__d2b+0x82>
 800fb90:	9a01      	ldr	r2, [sp, #4]
 800fb92:	f1c0 0320 	rsb	r3, r0, #32
 800fb96:	fa02 f303 	lsl.w	r3, r2, r3
 800fb9a:	430b      	orrs	r3, r1
 800fb9c:	40c2      	lsrs	r2, r0
 800fb9e:	6163      	str	r3, [r4, #20]
 800fba0:	9201      	str	r2, [sp, #4]
 800fba2:	9b01      	ldr	r3, [sp, #4]
 800fba4:	61a3      	str	r3, [r4, #24]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	bf14      	ite	ne
 800fbaa:	2202      	movne	r2, #2
 800fbac:	2201      	moveq	r2, #1
 800fbae:	6122      	str	r2, [r4, #16]
 800fbb0:	b1d5      	cbz	r5, 800fbe8 <__d2b+0x98>
 800fbb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fbb6:	4405      	add	r5, r0
 800fbb8:	f8c9 5000 	str.w	r5, [r9]
 800fbbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fbc0:	f8c8 0000 	str.w	r0, [r8]
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	b003      	add	sp, #12
 800fbc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbd0:	e7d5      	b.n	800fb7e <__d2b+0x2e>
 800fbd2:	6161      	str	r1, [r4, #20]
 800fbd4:	e7e5      	b.n	800fba2 <__d2b+0x52>
 800fbd6:	a801      	add	r0, sp, #4
 800fbd8:	f7ff fd5a 	bl	800f690 <__lo0bits>
 800fbdc:	9b01      	ldr	r3, [sp, #4]
 800fbde:	6163      	str	r3, [r4, #20]
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	6122      	str	r2, [r4, #16]
 800fbe4:	3020      	adds	r0, #32
 800fbe6:	e7e3      	b.n	800fbb0 <__d2b+0x60>
 800fbe8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fbf0:	f8c9 0000 	str.w	r0, [r9]
 800fbf4:	6918      	ldr	r0, [r3, #16]
 800fbf6:	f7ff fd2b 	bl	800f650 <__hi0bits>
 800fbfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbfe:	e7df      	b.n	800fbc0 <__d2b+0x70>
 800fc00:	080116b7 	.word	0x080116b7
 800fc04:	08011728 	.word	0x08011728

0800fc08 <_calloc_r>:
 800fc08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc0a:	fba1 2402 	umull	r2, r4, r1, r2
 800fc0e:	b94c      	cbnz	r4, 800fc24 <_calloc_r+0x1c>
 800fc10:	4611      	mov	r1, r2
 800fc12:	9201      	str	r2, [sp, #4]
 800fc14:	f000 f87a 	bl	800fd0c <_malloc_r>
 800fc18:	9a01      	ldr	r2, [sp, #4]
 800fc1a:	4605      	mov	r5, r0
 800fc1c:	b930      	cbnz	r0, 800fc2c <_calloc_r+0x24>
 800fc1e:	4628      	mov	r0, r5
 800fc20:	b003      	add	sp, #12
 800fc22:	bd30      	pop	{r4, r5, pc}
 800fc24:	220c      	movs	r2, #12
 800fc26:	6002      	str	r2, [r0, #0]
 800fc28:	2500      	movs	r5, #0
 800fc2a:	e7f8      	b.n	800fc1e <_calloc_r+0x16>
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	f7fd fd25 	bl	800d67c <memset>
 800fc32:	e7f4      	b.n	800fc1e <_calloc_r+0x16>

0800fc34 <_free_r>:
 800fc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc36:	2900      	cmp	r1, #0
 800fc38:	d044      	beq.n	800fcc4 <_free_r+0x90>
 800fc3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc3e:	9001      	str	r0, [sp, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f1a1 0404 	sub.w	r4, r1, #4
 800fc46:	bfb8      	it	lt
 800fc48:	18e4      	addlt	r4, r4, r3
 800fc4a:	f000 fb19 	bl	8010280 <__malloc_lock>
 800fc4e:	4a1e      	ldr	r2, [pc, #120]	; (800fcc8 <_free_r+0x94>)
 800fc50:	9801      	ldr	r0, [sp, #4]
 800fc52:	6813      	ldr	r3, [r2, #0]
 800fc54:	b933      	cbnz	r3, 800fc64 <_free_r+0x30>
 800fc56:	6063      	str	r3, [r4, #4]
 800fc58:	6014      	str	r4, [r2, #0]
 800fc5a:	b003      	add	sp, #12
 800fc5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc60:	f000 bb14 	b.w	801028c <__malloc_unlock>
 800fc64:	42a3      	cmp	r3, r4
 800fc66:	d908      	bls.n	800fc7a <_free_r+0x46>
 800fc68:	6825      	ldr	r5, [r4, #0]
 800fc6a:	1961      	adds	r1, r4, r5
 800fc6c:	428b      	cmp	r3, r1
 800fc6e:	bf01      	itttt	eq
 800fc70:	6819      	ldreq	r1, [r3, #0]
 800fc72:	685b      	ldreq	r3, [r3, #4]
 800fc74:	1949      	addeq	r1, r1, r5
 800fc76:	6021      	streq	r1, [r4, #0]
 800fc78:	e7ed      	b.n	800fc56 <_free_r+0x22>
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	b10b      	cbz	r3, 800fc84 <_free_r+0x50>
 800fc80:	42a3      	cmp	r3, r4
 800fc82:	d9fa      	bls.n	800fc7a <_free_r+0x46>
 800fc84:	6811      	ldr	r1, [r2, #0]
 800fc86:	1855      	adds	r5, r2, r1
 800fc88:	42a5      	cmp	r5, r4
 800fc8a:	d10b      	bne.n	800fca4 <_free_r+0x70>
 800fc8c:	6824      	ldr	r4, [r4, #0]
 800fc8e:	4421      	add	r1, r4
 800fc90:	1854      	adds	r4, r2, r1
 800fc92:	42a3      	cmp	r3, r4
 800fc94:	6011      	str	r1, [r2, #0]
 800fc96:	d1e0      	bne.n	800fc5a <_free_r+0x26>
 800fc98:	681c      	ldr	r4, [r3, #0]
 800fc9a:	685b      	ldr	r3, [r3, #4]
 800fc9c:	6053      	str	r3, [r2, #4]
 800fc9e:	4421      	add	r1, r4
 800fca0:	6011      	str	r1, [r2, #0]
 800fca2:	e7da      	b.n	800fc5a <_free_r+0x26>
 800fca4:	d902      	bls.n	800fcac <_free_r+0x78>
 800fca6:	230c      	movs	r3, #12
 800fca8:	6003      	str	r3, [r0, #0]
 800fcaa:	e7d6      	b.n	800fc5a <_free_r+0x26>
 800fcac:	6825      	ldr	r5, [r4, #0]
 800fcae:	1961      	adds	r1, r4, r5
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	bf04      	itt	eq
 800fcb4:	6819      	ldreq	r1, [r3, #0]
 800fcb6:	685b      	ldreq	r3, [r3, #4]
 800fcb8:	6063      	str	r3, [r4, #4]
 800fcba:	bf04      	itt	eq
 800fcbc:	1949      	addeq	r1, r1, r5
 800fcbe:	6021      	streq	r1, [r4, #0]
 800fcc0:	6054      	str	r4, [r2, #4]
 800fcc2:	e7ca      	b.n	800fc5a <_free_r+0x26>
 800fcc4:	b003      	add	sp, #12
 800fcc6:	bd30      	pop	{r4, r5, pc}
 800fcc8:	20000b7c 	.word	0x20000b7c

0800fccc <sbrk_aligned>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	4e0e      	ldr	r6, [pc, #56]	; (800fd08 <sbrk_aligned+0x3c>)
 800fcd0:	460c      	mov	r4, r1
 800fcd2:	6831      	ldr	r1, [r6, #0]
 800fcd4:	4605      	mov	r5, r0
 800fcd6:	b911      	cbnz	r1, 800fcde <sbrk_aligned+0x12>
 800fcd8:	f000 f9e6 	bl	80100a8 <_sbrk_r>
 800fcdc:	6030      	str	r0, [r6, #0]
 800fcde:	4621      	mov	r1, r4
 800fce0:	4628      	mov	r0, r5
 800fce2:	f000 f9e1 	bl	80100a8 <_sbrk_r>
 800fce6:	1c43      	adds	r3, r0, #1
 800fce8:	d00a      	beq.n	800fd00 <sbrk_aligned+0x34>
 800fcea:	1cc4      	adds	r4, r0, #3
 800fcec:	f024 0403 	bic.w	r4, r4, #3
 800fcf0:	42a0      	cmp	r0, r4
 800fcf2:	d007      	beq.n	800fd04 <sbrk_aligned+0x38>
 800fcf4:	1a21      	subs	r1, r4, r0
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	f000 f9d6 	bl	80100a8 <_sbrk_r>
 800fcfc:	3001      	adds	r0, #1
 800fcfe:	d101      	bne.n	800fd04 <sbrk_aligned+0x38>
 800fd00:	f04f 34ff 	mov.w	r4, #4294967295
 800fd04:	4620      	mov	r0, r4
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
 800fd08:	20000b80 	.word	0x20000b80

0800fd0c <_malloc_r>:
 800fd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd10:	1ccd      	adds	r5, r1, #3
 800fd12:	f025 0503 	bic.w	r5, r5, #3
 800fd16:	3508      	adds	r5, #8
 800fd18:	2d0c      	cmp	r5, #12
 800fd1a:	bf38      	it	cc
 800fd1c:	250c      	movcc	r5, #12
 800fd1e:	2d00      	cmp	r5, #0
 800fd20:	4607      	mov	r7, r0
 800fd22:	db01      	blt.n	800fd28 <_malloc_r+0x1c>
 800fd24:	42a9      	cmp	r1, r5
 800fd26:	d905      	bls.n	800fd34 <_malloc_r+0x28>
 800fd28:	230c      	movs	r3, #12
 800fd2a:	603b      	str	r3, [r7, #0]
 800fd2c:	2600      	movs	r6, #0
 800fd2e:	4630      	mov	r0, r6
 800fd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd34:	4e2e      	ldr	r6, [pc, #184]	; (800fdf0 <_malloc_r+0xe4>)
 800fd36:	f000 faa3 	bl	8010280 <__malloc_lock>
 800fd3a:	6833      	ldr	r3, [r6, #0]
 800fd3c:	461c      	mov	r4, r3
 800fd3e:	bb34      	cbnz	r4, 800fd8e <_malloc_r+0x82>
 800fd40:	4629      	mov	r1, r5
 800fd42:	4638      	mov	r0, r7
 800fd44:	f7ff ffc2 	bl	800fccc <sbrk_aligned>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	d14d      	bne.n	800fdea <_malloc_r+0xde>
 800fd4e:	6834      	ldr	r4, [r6, #0]
 800fd50:	4626      	mov	r6, r4
 800fd52:	2e00      	cmp	r6, #0
 800fd54:	d140      	bne.n	800fdd8 <_malloc_r+0xcc>
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	4631      	mov	r1, r6
 800fd5a:	4638      	mov	r0, r7
 800fd5c:	eb04 0803 	add.w	r8, r4, r3
 800fd60:	f000 f9a2 	bl	80100a8 <_sbrk_r>
 800fd64:	4580      	cmp	r8, r0
 800fd66:	d13a      	bne.n	800fdde <_malloc_r+0xd2>
 800fd68:	6821      	ldr	r1, [r4, #0]
 800fd6a:	3503      	adds	r5, #3
 800fd6c:	1a6d      	subs	r5, r5, r1
 800fd6e:	f025 0503 	bic.w	r5, r5, #3
 800fd72:	3508      	adds	r5, #8
 800fd74:	2d0c      	cmp	r5, #12
 800fd76:	bf38      	it	cc
 800fd78:	250c      	movcc	r5, #12
 800fd7a:	4629      	mov	r1, r5
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	f7ff ffa5 	bl	800fccc <sbrk_aligned>
 800fd82:	3001      	adds	r0, #1
 800fd84:	d02b      	beq.n	800fdde <_malloc_r+0xd2>
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	442b      	add	r3, r5
 800fd8a:	6023      	str	r3, [r4, #0]
 800fd8c:	e00e      	b.n	800fdac <_malloc_r+0xa0>
 800fd8e:	6822      	ldr	r2, [r4, #0]
 800fd90:	1b52      	subs	r2, r2, r5
 800fd92:	d41e      	bmi.n	800fdd2 <_malloc_r+0xc6>
 800fd94:	2a0b      	cmp	r2, #11
 800fd96:	d916      	bls.n	800fdc6 <_malloc_r+0xba>
 800fd98:	1961      	adds	r1, r4, r5
 800fd9a:	42a3      	cmp	r3, r4
 800fd9c:	6025      	str	r5, [r4, #0]
 800fd9e:	bf18      	it	ne
 800fda0:	6059      	strne	r1, [r3, #4]
 800fda2:	6863      	ldr	r3, [r4, #4]
 800fda4:	bf08      	it	eq
 800fda6:	6031      	streq	r1, [r6, #0]
 800fda8:	5162      	str	r2, [r4, r5]
 800fdaa:	604b      	str	r3, [r1, #4]
 800fdac:	4638      	mov	r0, r7
 800fdae:	f104 060b 	add.w	r6, r4, #11
 800fdb2:	f000 fa6b 	bl	801028c <__malloc_unlock>
 800fdb6:	f026 0607 	bic.w	r6, r6, #7
 800fdba:	1d23      	adds	r3, r4, #4
 800fdbc:	1af2      	subs	r2, r6, r3
 800fdbe:	d0b6      	beq.n	800fd2e <_malloc_r+0x22>
 800fdc0:	1b9b      	subs	r3, r3, r6
 800fdc2:	50a3      	str	r3, [r4, r2]
 800fdc4:	e7b3      	b.n	800fd2e <_malloc_r+0x22>
 800fdc6:	6862      	ldr	r2, [r4, #4]
 800fdc8:	42a3      	cmp	r3, r4
 800fdca:	bf0c      	ite	eq
 800fdcc:	6032      	streq	r2, [r6, #0]
 800fdce:	605a      	strne	r2, [r3, #4]
 800fdd0:	e7ec      	b.n	800fdac <_malloc_r+0xa0>
 800fdd2:	4623      	mov	r3, r4
 800fdd4:	6864      	ldr	r4, [r4, #4]
 800fdd6:	e7b2      	b.n	800fd3e <_malloc_r+0x32>
 800fdd8:	4634      	mov	r4, r6
 800fdda:	6876      	ldr	r6, [r6, #4]
 800fddc:	e7b9      	b.n	800fd52 <_malloc_r+0x46>
 800fdde:	230c      	movs	r3, #12
 800fde0:	603b      	str	r3, [r7, #0]
 800fde2:	4638      	mov	r0, r7
 800fde4:	f000 fa52 	bl	801028c <__malloc_unlock>
 800fde8:	e7a1      	b.n	800fd2e <_malloc_r+0x22>
 800fdea:	6025      	str	r5, [r4, #0]
 800fdec:	e7de      	b.n	800fdac <_malloc_r+0xa0>
 800fdee:	bf00      	nop
 800fdf0:	20000b7c 	.word	0x20000b7c

0800fdf4 <__sfputc_r>:
 800fdf4:	6893      	ldr	r3, [r2, #8]
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	b410      	push	{r4}
 800fdfc:	6093      	str	r3, [r2, #8]
 800fdfe:	da08      	bge.n	800fe12 <__sfputc_r+0x1e>
 800fe00:	6994      	ldr	r4, [r2, #24]
 800fe02:	42a3      	cmp	r3, r4
 800fe04:	db01      	blt.n	800fe0a <__sfputc_r+0x16>
 800fe06:	290a      	cmp	r1, #10
 800fe08:	d103      	bne.n	800fe12 <__sfputc_r+0x1e>
 800fe0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe0e:	f7fe ba03 	b.w	800e218 <__swbuf_r>
 800fe12:	6813      	ldr	r3, [r2, #0]
 800fe14:	1c58      	adds	r0, r3, #1
 800fe16:	6010      	str	r0, [r2, #0]
 800fe18:	7019      	strb	r1, [r3, #0]
 800fe1a:	4608      	mov	r0, r1
 800fe1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe20:	4770      	bx	lr

0800fe22 <__sfputs_r>:
 800fe22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe24:	4606      	mov	r6, r0
 800fe26:	460f      	mov	r7, r1
 800fe28:	4614      	mov	r4, r2
 800fe2a:	18d5      	adds	r5, r2, r3
 800fe2c:	42ac      	cmp	r4, r5
 800fe2e:	d101      	bne.n	800fe34 <__sfputs_r+0x12>
 800fe30:	2000      	movs	r0, #0
 800fe32:	e007      	b.n	800fe44 <__sfputs_r+0x22>
 800fe34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe38:	463a      	mov	r2, r7
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	f7ff ffda 	bl	800fdf4 <__sfputc_r>
 800fe40:	1c43      	adds	r3, r0, #1
 800fe42:	d1f3      	bne.n	800fe2c <__sfputs_r+0xa>
 800fe44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe48 <_vfiprintf_r>:
 800fe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	b09d      	sub	sp, #116	; 0x74
 800fe50:	4614      	mov	r4, r2
 800fe52:	4698      	mov	r8, r3
 800fe54:	4606      	mov	r6, r0
 800fe56:	b118      	cbz	r0, 800fe60 <_vfiprintf_r+0x18>
 800fe58:	6983      	ldr	r3, [r0, #24]
 800fe5a:	b90b      	cbnz	r3, 800fe60 <_vfiprintf_r+0x18>
 800fe5c:	f7ff fa30 	bl	800f2c0 <__sinit>
 800fe60:	4b89      	ldr	r3, [pc, #548]	; (8010088 <_vfiprintf_r+0x240>)
 800fe62:	429d      	cmp	r5, r3
 800fe64:	d11b      	bne.n	800fe9e <_vfiprintf_r+0x56>
 800fe66:	6875      	ldr	r5, [r6, #4]
 800fe68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe6a:	07d9      	lsls	r1, r3, #31
 800fe6c:	d405      	bmi.n	800fe7a <_vfiprintf_r+0x32>
 800fe6e:	89ab      	ldrh	r3, [r5, #12]
 800fe70:	059a      	lsls	r2, r3, #22
 800fe72:	d402      	bmi.n	800fe7a <_vfiprintf_r+0x32>
 800fe74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe76:	f7ff fac6 	bl	800f406 <__retarget_lock_acquire_recursive>
 800fe7a:	89ab      	ldrh	r3, [r5, #12]
 800fe7c:	071b      	lsls	r3, r3, #28
 800fe7e:	d501      	bpl.n	800fe84 <_vfiprintf_r+0x3c>
 800fe80:	692b      	ldr	r3, [r5, #16]
 800fe82:	b9eb      	cbnz	r3, 800fec0 <_vfiprintf_r+0x78>
 800fe84:	4629      	mov	r1, r5
 800fe86:	4630      	mov	r0, r6
 800fe88:	f7fe fa18 	bl	800e2bc <__swsetup_r>
 800fe8c:	b1c0      	cbz	r0, 800fec0 <_vfiprintf_r+0x78>
 800fe8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe90:	07dc      	lsls	r4, r3, #31
 800fe92:	d50e      	bpl.n	800feb2 <_vfiprintf_r+0x6a>
 800fe94:	f04f 30ff 	mov.w	r0, #4294967295
 800fe98:	b01d      	add	sp, #116	; 0x74
 800fe9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9e:	4b7b      	ldr	r3, [pc, #492]	; (801008c <_vfiprintf_r+0x244>)
 800fea0:	429d      	cmp	r5, r3
 800fea2:	d101      	bne.n	800fea8 <_vfiprintf_r+0x60>
 800fea4:	68b5      	ldr	r5, [r6, #8]
 800fea6:	e7df      	b.n	800fe68 <_vfiprintf_r+0x20>
 800fea8:	4b79      	ldr	r3, [pc, #484]	; (8010090 <_vfiprintf_r+0x248>)
 800feaa:	429d      	cmp	r5, r3
 800feac:	bf08      	it	eq
 800feae:	68f5      	ldreq	r5, [r6, #12]
 800feb0:	e7da      	b.n	800fe68 <_vfiprintf_r+0x20>
 800feb2:	89ab      	ldrh	r3, [r5, #12]
 800feb4:	0598      	lsls	r0, r3, #22
 800feb6:	d4ed      	bmi.n	800fe94 <_vfiprintf_r+0x4c>
 800feb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feba:	f7ff faa5 	bl	800f408 <__retarget_lock_release_recursive>
 800febe:	e7e9      	b.n	800fe94 <_vfiprintf_r+0x4c>
 800fec0:	2300      	movs	r3, #0
 800fec2:	9309      	str	r3, [sp, #36]	; 0x24
 800fec4:	2320      	movs	r3, #32
 800fec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feca:	f8cd 800c 	str.w	r8, [sp, #12]
 800fece:	2330      	movs	r3, #48	; 0x30
 800fed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010094 <_vfiprintf_r+0x24c>
 800fed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fed8:	f04f 0901 	mov.w	r9, #1
 800fedc:	4623      	mov	r3, r4
 800fede:	469a      	mov	sl, r3
 800fee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fee4:	b10a      	cbz	r2, 800feea <_vfiprintf_r+0xa2>
 800fee6:	2a25      	cmp	r2, #37	; 0x25
 800fee8:	d1f9      	bne.n	800fede <_vfiprintf_r+0x96>
 800feea:	ebba 0b04 	subs.w	fp, sl, r4
 800feee:	d00b      	beq.n	800ff08 <_vfiprintf_r+0xc0>
 800fef0:	465b      	mov	r3, fp
 800fef2:	4622      	mov	r2, r4
 800fef4:	4629      	mov	r1, r5
 800fef6:	4630      	mov	r0, r6
 800fef8:	f7ff ff93 	bl	800fe22 <__sfputs_r>
 800fefc:	3001      	adds	r0, #1
 800fefe:	f000 80aa 	beq.w	8010056 <_vfiprintf_r+0x20e>
 800ff02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff04:	445a      	add	r2, fp
 800ff06:	9209      	str	r2, [sp, #36]	; 0x24
 800ff08:	f89a 3000 	ldrb.w	r3, [sl]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 80a2 	beq.w	8010056 <_vfiprintf_r+0x20e>
 800ff12:	2300      	movs	r3, #0
 800ff14:	f04f 32ff 	mov.w	r2, #4294967295
 800ff18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff1c:	f10a 0a01 	add.w	sl, sl, #1
 800ff20:	9304      	str	r3, [sp, #16]
 800ff22:	9307      	str	r3, [sp, #28]
 800ff24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff28:	931a      	str	r3, [sp, #104]	; 0x68
 800ff2a:	4654      	mov	r4, sl
 800ff2c:	2205      	movs	r2, #5
 800ff2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff32:	4858      	ldr	r0, [pc, #352]	; (8010094 <_vfiprintf_r+0x24c>)
 800ff34:	f7f0 f97c 	bl	8000230 <memchr>
 800ff38:	9a04      	ldr	r2, [sp, #16]
 800ff3a:	b9d8      	cbnz	r0, 800ff74 <_vfiprintf_r+0x12c>
 800ff3c:	06d1      	lsls	r1, r2, #27
 800ff3e:	bf44      	itt	mi
 800ff40:	2320      	movmi	r3, #32
 800ff42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff46:	0713      	lsls	r3, r2, #28
 800ff48:	bf44      	itt	mi
 800ff4a:	232b      	movmi	r3, #43	; 0x2b
 800ff4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff50:	f89a 3000 	ldrb.w	r3, [sl]
 800ff54:	2b2a      	cmp	r3, #42	; 0x2a
 800ff56:	d015      	beq.n	800ff84 <_vfiprintf_r+0x13c>
 800ff58:	9a07      	ldr	r2, [sp, #28]
 800ff5a:	4654      	mov	r4, sl
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f04f 0c0a 	mov.w	ip, #10
 800ff62:	4621      	mov	r1, r4
 800ff64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff68:	3b30      	subs	r3, #48	; 0x30
 800ff6a:	2b09      	cmp	r3, #9
 800ff6c:	d94e      	bls.n	801000c <_vfiprintf_r+0x1c4>
 800ff6e:	b1b0      	cbz	r0, 800ff9e <_vfiprintf_r+0x156>
 800ff70:	9207      	str	r2, [sp, #28]
 800ff72:	e014      	b.n	800ff9e <_vfiprintf_r+0x156>
 800ff74:	eba0 0308 	sub.w	r3, r0, r8
 800ff78:	fa09 f303 	lsl.w	r3, r9, r3
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	9304      	str	r3, [sp, #16]
 800ff80:	46a2      	mov	sl, r4
 800ff82:	e7d2      	b.n	800ff2a <_vfiprintf_r+0xe2>
 800ff84:	9b03      	ldr	r3, [sp, #12]
 800ff86:	1d19      	adds	r1, r3, #4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	9103      	str	r1, [sp, #12]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	bfbb      	ittet	lt
 800ff90:	425b      	neglt	r3, r3
 800ff92:	f042 0202 	orrlt.w	r2, r2, #2
 800ff96:	9307      	strge	r3, [sp, #28]
 800ff98:	9307      	strlt	r3, [sp, #28]
 800ff9a:	bfb8      	it	lt
 800ff9c:	9204      	strlt	r2, [sp, #16]
 800ff9e:	7823      	ldrb	r3, [r4, #0]
 800ffa0:	2b2e      	cmp	r3, #46	; 0x2e
 800ffa2:	d10c      	bne.n	800ffbe <_vfiprintf_r+0x176>
 800ffa4:	7863      	ldrb	r3, [r4, #1]
 800ffa6:	2b2a      	cmp	r3, #42	; 0x2a
 800ffa8:	d135      	bne.n	8010016 <_vfiprintf_r+0x1ce>
 800ffaa:	9b03      	ldr	r3, [sp, #12]
 800ffac:	1d1a      	adds	r2, r3, #4
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	9203      	str	r2, [sp, #12]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	bfb8      	it	lt
 800ffb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffba:	3402      	adds	r4, #2
 800ffbc:	9305      	str	r3, [sp, #20]
 800ffbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100a4 <_vfiprintf_r+0x25c>
 800ffc2:	7821      	ldrb	r1, [r4, #0]
 800ffc4:	2203      	movs	r2, #3
 800ffc6:	4650      	mov	r0, sl
 800ffc8:	f7f0 f932 	bl	8000230 <memchr>
 800ffcc:	b140      	cbz	r0, 800ffe0 <_vfiprintf_r+0x198>
 800ffce:	2340      	movs	r3, #64	; 0x40
 800ffd0:	eba0 000a 	sub.w	r0, r0, sl
 800ffd4:	fa03 f000 	lsl.w	r0, r3, r0
 800ffd8:	9b04      	ldr	r3, [sp, #16]
 800ffda:	4303      	orrs	r3, r0
 800ffdc:	3401      	adds	r4, #1
 800ffde:	9304      	str	r3, [sp, #16]
 800ffe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffe4:	482c      	ldr	r0, [pc, #176]	; (8010098 <_vfiprintf_r+0x250>)
 800ffe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffea:	2206      	movs	r2, #6
 800ffec:	f7f0 f920 	bl	8000230 <memchr>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d03f      	beq.n	8010074 <_vfiprintf_r+0x22c>
 800fff4:	4b29      	ldr	r3, [pc, #164]	; (801009c <_vfiprintf_r+0x254>)
 800fff6:	bb1b      	cbnz	r3, 8010040 <_vfiprintf_r+0x1f8>
 800fff8:	9b03      	ldr	r3, [sp, #12]
 800fffa:	3307      	adds	r3, #7
 800fffc:	f023 0307 	bic.w	r3, r3, #7
 8010000:	3308      	adds	r3, #8
 8010002:	9303      	str	r3, [sp, #12]
 8010004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010006:	443b      	add	r3, r7
 8010008:	9309      	str	r3, [sp, #36]	; 0x24
 801000a:	e767      	b.n	800fedc <_vfiprintf_r+0x94>
 801000c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010010:	460c      	mov	r4, r1
 8010012:	2001      	movs	r0, #1
 8010014:	e7a5      	b.n	800ff62 <_vfiprintf_r+0x11a>
 8010016:	2300      	movs	r3, #0
 8010018:	3401      	adds	r4, #1
 801001a:	9305      	str	r3, [sp, #20]
 801001c:	4619      	mov	r1, r3
 801001e:	f04f 0c0a 	mov.w	ip, #10
 8010022:	4620      	mov	r0, r4
 8010024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010028:	3a30      	subs	r2, #48	; 0x30
 801002a:	2a09      	cmp	r2, #9
 801002c:	d903      	bls.n	8010036 <_vfiprintf_r+0x1ee>
 801002e:	2b00      	cmp	r3, #0
 8010030:	d0c5      	beq.n	800ffbe <_vfiprintf_r+0x176>
 8010032:	9105      	str	r1, [sp, #20]
 8010034:	e7c3      	b.n	800ffbe <_vfiprintf_r+0x176>
 8010036:	fb0c 2101 	mla	r1, ip, r1, r2
 801003a:	4604      	mov	r4, r0
 801003c:	2301      	movs	r3, #1
 801003e:	e7f0      	b.n	8010022 <_vfiprintf_r+0x1da>
 8010040:	ab03      	add	r3, sp, #12
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	462a      	mov	r2, r5
 8010046:	4b16      	ldr	r3, [pc, #88]	; (80100a0 <_vfiprintf_r+0x258>)
 8010048:	a904      	add	r1, sp, #16
 801004a:	4630      	mov	r0, r6
 801004c:	f7fd fbbe 	bl	800d7cc <_printf_float>
 8010050:	4607      	mov	r7, r0
 8010052:	1c78      	adds	r0, r7, #1
 8010054:	d1d6      	bne.n	8010004 <_vfiprintf_r+0x1bc>
 8010056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010058:	07d9      	lsls	r1, r3, #31
 801005a:	d405      	bmi.n	8010068 <_vfiprintf_r+0x220>
 801005c:	89ab      	ldrh	r3, [r5, #12]
 801005e:	059a      	lsls	r2, r3, #22
 8010060:	d402      	bmi.n	8010068 <_vfiprintf_r+0x220>
 8010062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010064:	f7ff f9d0 	bl	800f408 <__retarget_lock_release_recursive>
 8010068:	89ab      	ldrh	r3, [r5, #12]
 801006a:	065b      	lsls	r3, r3, #25
 801006c:	f53f af12 	bmi.w	800fe94 <_vfiprintf_r+0x4c>
 8010070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010072:	e711      	b.n	800fe98 <_vfiprintf_r+0x50>
 8010074:	ab03      	add	r3, sp, #12
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	462a      	mov	r2, r5
 801007a:	4b09      	ldr	r3, [pc, #36]	; (80100a0 <_vfiprintf_r+0x258>)
 801007c:	a904      	add	r1, sp, #16
 801007e:	4630      	mov	r0, r6
 8010080:	f7fd fe48 	bl	800dd14 <_printf_i>
 8010084:	e7e4      	b.n	8010050 <_vfiprintf_r+0x208>
 8010086:	bf00      	nop
 8010088:	080116e8 	.word	0x080116e8
 801008c:	08011708 	.word	0x08011708
 8010090:	080116c8 	.word	0x080116c8
 8010094:	08011884 	.word	0x08011884
 8010098:	0801188e 	.word	0x0801188e
 801009c:	0800d7cd 	.word	0x0800d7cd
 80100a0:	0800fe23 	.word	0x0800fe23
 80100a4:	0801188a 	.word	0x0801188a

080100a8 <_sbrk_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d06      	ldr	r5, [pc, #24]	; (80100c4 <_sbrk_r+0x1c>)
 80100ac:	2300      	movs	r3, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	4608      	mov	r0, r1
 80100b2:	602b      	str	r3, [r5, #0]
 80100b4:	f7f5 fb5c 	bl	8005770 <_sbrk>
 80100b8:	1c43      	adds	r3, r0, #1
 80100ba:	d102      	bne.n	80100c2 <_sbrk_r+0x1a>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	b103      	cbz	r3, 80100c2 <_sbrk_r+0x1a>
 80100c0:	6023      	str	r3, [r4, #0]
 80100c2:	bd38      	pop	{r3, r4, r5, pc}
 80100c4:	20000b84 	.word	0x20000b84

080100c8 <__sread>:
 80100c8:	b510      	push	{r4, lr}
 80100ca:	460c      	mov	r4, r1
 80100cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100d0:	f000 f8e2 	bl	8010298 <_read_r>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	bfab      	itete	ge
 80100d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80100da:	89a3      	ldrhlt	r3, [r4, #12]
 80100dc:	181b      	addge	r3, r3, r0
 80100de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80100e2:	bfac      	ite	ge
 80100e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80100e6:	81a3      	strhlt	r3, [r4, #12]
 80100e8:	bd10      	pop	{r4, pc}

080100ea <__swrite>:
 80100ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ee:	461f      	mov	r7, r3
 80100f0:	898b      	ldrh	r3, [r1, #12]
 80100f2:	05db      	lsls	r3, r3, #23
 80100f4:	4605      	mov	r5, r0
 80100f6:	460c      	mov	r4, r1
 80100f8:	4616      	mov	r6, r2
 80100fa:	d505      	bpl.n	8010108 <__swrite+0x1e>
 80100fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010100:	2302      	movs	r3, #2
 8010102:	2200      	movs	r2, #0
 8010104:	f000 f898 	bl	8010238 <_lseek_r>
 8010108:	89a3      	ldrh	r3, [r4, #12]
 801010a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801010e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010112:	81a3      	strh	r3, [r4, #12]
 8010114:	4632      	mov	r2, r6
 8010116:	463b      	mov	r3, r7
 8010118:	4628      	mov	r0, r5
 801011a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801011e:	f000 b817 	b.w	8010150 <_write_r>

08010122 <__sseek>:
 8010122:	b510      	push	{r4, lr}
 8010124:	460c      	mov	r4, r1
 8010126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801012a:	f000 f885 	bl	8010238 <_lseek_r>
 801012e:	1c43      	adds	r3, r0, #1
 8010130:	89a3      	ldrh	r3, [r4, #12]
 8010132:	bf15      	itete	ne
 8010134:	6560      	strne	r0, [r4, #84]	; 0x54
 8010136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801013a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801013e:	81a3      	strheq	r3, [r4, #12]
 8010140:	bf18      	it	ne
 8010142:	81a3      	strhne	r3, [r4, #12]
 8010144:	bd10      	pop	{r4, pc}

08010146 <__sclose>:
 8010146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801014a:	f000 b831 	b.w	80101b0 <_close_r>
	...

08010150 <_write_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d07      	ldr	r5, [pc, #28]	; (8010170 <_write_r+0x20>)
 8010154:	4604      	mov	r4, r0
 8010156:	4608      	mov	r0, r1
 8010158:	4611      	mov	r1, r2
 801015a:	2200      	movs	r2, #0
 801015c:	602a      	str	r2, [r5, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	f7f2 fec0 	bl	8002ee4 <_write>
 8010164:	1c43      	adds	r3, r0, #1
 8010166:	d102      	bne.n	801016e <_write_r+0x1e>
 8010168:	682b      	ldr	r3, [r5, #0]
 801016a:	b103      	cbz	r3, 801016e <_write_r+0x1e>
 801016c:	6023      	str	r3, [r4, #0]
 801016e:	bd38      	pop	{r3, r4, r5, pc}
 8010170:	20000b84 	.word	0x20000b84

08010174 <__assert_func>:
 8010174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010176:	4614      	mov	r4, r2
 8010178:	461a      	mov	r2, r3
 801017a:	4b09      	ldr	r3, [pc, #36]	; (80101a0 <__assert_func+0x2c>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4605      	mov	r5, r0
 8010180:	68d8      	ldr	r0, [r3, #12]
 8010182:	b14c      	cbz	r4, 8010198 <__assert_func+0x24>
 8010184:	4b07      	ldr	r3, [pc, #28]	; (80101a4 <__assert_func+0x30>)
 8010186:	9100      	str	r1, [sp, #0]
 8010188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801018c:	4906      	ldr	r1, [pc, #24]	; (80101a8 <__assert_func+0x34>)
 801018e:	462b      	mov	r3, r5
 8010190:	f000 f81e 	bl	80101d0 <fiprintf>
 8010194:	f000 f89f 	bl	80102d6 <abort>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__assert_func+0x38>)
 801019a:	461c      	mov	r4, r3
 801019c:	e7f3      	b.n	8010186 <__assert_func+0x12>
 801019e:	bf00      	nop
 80101a0:	20000014 	.word	0x20000014
 80101a4:	08011895 	.word	0x08011895
 80101a8:	080118a2 	.word	0x080118a2
 80101ac:	080118d0 	.word	0x080118d0

080101b0 <_close_r>:
 80101b0:	b538      	push	{r3, r4, r5, lr}
 80101b2:	4d06      	ldr	r5, [pc, #24]	; (80101cc <_close_r+0x1c>)
 80101b4:	2300      	movs	r3, #0
 80101b6:	4604      	mov	r4, r0
 80101b8:	4608      	mov	r0, r1
 80101ba:	602b      	str	r3, [r5, #0]
 80101bc:	f7f5 faa3 	bl	8005706 <_close>
 80101c0:	1c43      	adds	r3, r0, #1
 80101c2:	d102      	bne.n	80101ca <_close_r+0x1a>
 80101c4:	682b      	ldr	r3, [r5, #0]
 80101c6:	b103      	cbz	r3, 80101ca <_close_r+0x1a>
 80101c8:	6023      	str	r3, [r4, #0]
 80101ca:	bd38      	pop	{r3, r4, r5, pc}
 80101cc:	20000b84 	.word	0x20000b84

080101d0 <fiprintf>:
 80101d0:	b40e      	push	{r1, r2, r3}
 80101d2:	b503      	push	{r0, r1, lr}
 80101d4:	4601      	mov	r1, r0
 80101d6:	ab03      	add	r3, sp, #12
 80101d8:	4805      	ldr	r0, [pc, #20]	; (80101f0 <fiprintf+0x20>)
 80101da:	f853 2b04 	ldr.w	r2, [r3], #4
 80101de:	6800      	ldr	r0, [r0, #0]
 80101e0:	9301      	str	r3, [sp, #4]
 80101e2:	f7ff fe31 	bl	800fe48 <_vfiprintf_r>
 80101e6:	b002      	add	sp, #8
 80101e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80101ec:	b003      	add	sp, #12
 80101ee:	4770      	bx	lr
 80101f0:	20000014 	.word	0x20000014

080101f4 <_fstat_r>:
 80101f4:	b538      	push	{r3, r4, r5, lr}
 80101f6:	4d07      	ldr	r5, [pc, #28]	; (8010214 <_fstat_r+0x20>)
 80101f8:	2300      	movs	r3, #0
 80101fa:	4604      	mov	r4, r0
 80101fc:	4608      	mov	r0, r1
 80101fe:	4611      	mov	r1, r2
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	f7f5 fa8c 	bl	800571e <_fstat>
 8010206:	1c43      	adds	r3, r0, #1
 8010208:	d102      	bne.n	8010210 <_fstat_r+0x1c>
 801020a:	682b      	ldr	r3, [r5, #0]
 801020c:	b103      	cbz	r3, 8010210 <_fstat_r+0x1c>
 801020e:	6023      	str	r3, [r4, #0]
 8010210:	bd38      	pop	{r3, r4, r5, pc}
 8010212:	bf00      	nop
 8010214:	20000b84 	.word	0x20000b84

08010218 <_isatty_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d06      	ldr	r5, [pc, #24]	; (8010234 <_isatty_r+0x1c>)
 801021c:	2300      	movs	r3, #0
 801021e:	4604      	mov	r4, r0
 8010220:	4608      	mov	r0, r1
 8010222:	602b      	str	r3, [r5, #0]
 8010224:	f7f5 fa8b 	bl	800573e <_isatty>
 8010228:	1c43      	adds	r3, r0, #1
 801022a:	d102      	bne.n	8010232 <_isatty_r+0x1a>
 801022c:	682b      	ldr	r3, [r5, #0]
 801022e:	b103      	cbz	r3, 8010232 <_isatty_r+0x1a>
 8010230:	6023      	str	r3, [r4, #0]
 8010232:	bd38      	pop	{r3, r4, r5, pc}
 8010234:	20000b84 	.word	0x20000b84

08010238 <_lseek_r>:
 8010238:	b538      	push	{r3, r4, r5, lr}
 801023a:	4d07      	ldr	r5, [pc, #28]	; (8010258 <_lseek_r+0x20>)
 801023c:	4604      	mov	r4, r0
 801023e:	4608      	mov	r0, r1
 8010240:	4611      	mov	r1, r2
 8010242:	2200      	movs	r2, #0
 8010244:	602a      	str	r2, [r5, #0]
 8010246:	461a      	mov	r2, r3
 8010248:	f7f5 fa84 	bl	8005754 <_lseek>
 801024c:	1c43      	adds	r3, r0, #1
 801024e:	d102      	bne.n	8010256 <_lseek_r+0x1e>
 8010250:	682b      	ldr	r3, [r5, #0]
 8010252:	b103      	cbz	r3, 8010256 <_lseek_r+0x1e>
 8010254:	6023      	str	r3, [r4, #0]
 8010256:	bd38      	pop	{r3, r4, r5, pc}
 8010258:	20000b84 	.word	0x20000b84

0801025c <__ascii_mbtowc>:
 801025c:	b082      	sub	sp, #8
 801025e:	b901      	cbnz	r1, 8010262 <__ascii_mbtowc+0x6>
 8010260:	a901      	add	r1, sp, #4
 8010262:	b142      	cbz	r2, 8010276 <__ascii_mbtowc+0x1a>
 8010264:	b14b      	cbz	r3, 801027a <__ascii_mbtowc+0x1e>
 8010266:	7813      	ldrb	r3, [r2, #0]
 8010268:	600b      	str	r3, [r1, #0]
 801026a:	7812      	ldrb	r2, [r2, #0]
 801026c:	1e10      	subs	r0, r2, #0
 801026e:	bf18      	it	ne
 8010270:	2001      	movne	r0, #1
 8010272:	b002      	add	sp, #8
 8010274:	4770      	bx	lr
 8010276:	4610      	mov	r0, r2
 8010278:	e7fb      	b.n	8010272 <__ascii_mbtowc+0x16>
 801027a:	f06f 0001 	mvn.w	r0, #1
 801027e:	e7f8      	b.n	8010272 <__ascii_mbtowc+0x16>

08010280 <__malloc_lock>:
 8010280:	4801      	ldr	r0, [pc, #4]	; (8010288 <__malloc_lock+0x8>)
 8010282:	f7ff b8c0 	b.w	800f406 <__retarget_lock_acquire_recursive>
 8010286:	bf00      	nop
 8010288:	20000b78 	.word	0x20000b78

0801028c <__malloc_unlock>:
 801028c:	4801      	ldr	r0, [pc, #4]	; (8010294 <__malloc_unlock+0x8>)
 801028e:	f7ff b8bb 	b.w	800f408 <__retarget_lock_release_recursive>
 8010292:	bf00      	nop
 8010294:	20000b78 	.word	0x20000b78

08010298 <_read_r>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	4d07      	ldr	r5, [pc, #28]	; (80102b8 <_read_r+0x20>)
 801029c:	4604      	mov	r4, r0
 801029e:	4608      	mov	r0, r1
 80102a0:	4611      	mov	r1, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	602a      	str	r2, [r5, #0]
 80102a6:	461a      	mov	r2, r3
 80102a8:	f7f5 fa10 	bl	80056cc <_read>
 80102ac:	1c43      	adds	r3, r0, #1
 80102ae:	d102      	bne.n	80102b6 <_read_r+0x1e>
 80102b0:	682b      	ldr	r3, [r5, #0]
 80102b2:	b103      	cbz	r3, 80102b6 <_read_r+0x1e>
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	bd38      	pop	{r3, r4, r5, pc}
 80102b8:	20000b84 	.word	0x20000b84

080102bc <__ascii_wctomb>:
 80102bc:	b149      	cbz	r1, 80102d2 <__ascii_wctomb+0x16>
 80102be:	2aff      	cmp	r2, #255	; 0xff
 80102c0:	bf85      	ittet	hi
 80102c2:	238a      	movhi	r3, #138	; 0x8a
 80102c4:	6003      	strhi	r3, [r0, #0]
 80102c6:	700a      	strbls	r2, [r1, #0]
 80102c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80102cc:	bf98      	it	ls
 80102ce:	2001      	movls	r0, #1
 80102d0:	4770      	bx	lr
 80102d2:	4608      	mov	r0, r1
 80102d4:	4770      	bx	lr

080102d6 <abort>:
 80102d6:	b508      	push	{r3, lr}
 80102d8:	2006      	movs	r0, #6
 80102da:	f000 f82b 	bl	8010334 <raise>
 80102de:	2001      	movs	r0, #1
 80102e0:	f7f5 f9ea 	bl	80056b8 <_exit>

080102e4 <_raise_r>:
 80102e4:	291f      	cmp	r1, #31
 80102e6:	b538      	push	{r3, r4, r5, lr}
 80102e8:	4604      	mov	r4, r0
 80102ea:	460d      	mov	r5, r1
 80102ec:	d904      	bls.n	80102f8 <_raise_r+0x14>
 80102ee:	2316      	movs	r3, #22
 80102f0:	6003      	str	r3, [r0, #0]
 80102f2:	f04f 30ff 	mov.w	r0, #4294967295
 80102f6:	bd38      	pop	{r3, r4, r5, pc}
 80102f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80102fa:	b112      	cbz	r2, 8010302 <_raise_r+0x1e>
 80102fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010300:	b94b      	cbnz	r3, 8010316 <_raise_r+0x32>
 8010302:	4620      	mov	r0, r4
 8010304:	f000 f830 	bl	8010368 <_getpid_r>
 8010308:	462a      	mov	r2, r5
 801030a:	4601      	mov	r1, r0
 801030c:	4620      	mov	r0, r4
 801030e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010312:	f000 b817 	b.w	8010344 <_kill_r>
 8010316:	2b01      	cmp	r3, #1
 8010318:	d00a      	beq.n	8010330 <_raise_r+0x4c>
 801031a:	1c59      	adds	r1, r3, #1
 801031c:	d103      	bne.n	8010326 <_raise_r+0x42>
 801031e:	2316      	movs	r3, #22
 8010320:	6003      	str	r3, [r0, #0]
 8010322:	2001      	movs	r0, #1
 8010324:	e7e7      	b.n	80102f6 <_raise_r+0x12>
 8010326:	2400      	movs	r4, #0
 8010328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801032c:	4628      	mov	r0, r5
 801032e:	4798      	blx	r3
 8010330:	2000      	movs	r0, #0
 8010332:	e7e0      	b.n	80102f6 <_raise_r+0x12>

08010334 <raise>:
 8010334:	4b02      	ldr	r3, [pc, #8]	; (8010340 <raise+0xc>)
 8010336:	4601      	mov	r1, r0
 8010338:	6818      	ldr	r0, [r3, #0]
 801033a:	f7ff bfd3 	b.w	80102e4 <_raise_r>
 801033e:	bf00      	nop
 8010340:	20000014 	.word	0x20000014

08010344 <_kill_r>:
 8010344:	b538      	push	{r3, r4, r5, lr}
 8010346:	4d07      	ldr	r5, [pc, #28]	; (8010364 <_kill_r+0x20>)
 8010348:	2300      	movs	r3, #0
 801034a:	4604      	mov	r4, r0
 801034c:	4608      	mov	r0, r1
 801034e:	4611      	mov	r1, r2
 8010350:	602b      	str	r3, [r5, #0]
 8010352:	f7f5 f9a1 	bl	8005698 <_kill>
 8010356:	1c43      	adds	r3, r0, #1
 8010358:	d102      	bne.n	8010360 <_kill_r+0x1c>
 801035a:	682b      	ldr	r3, [r5, #0]
 801035c:	b103      	cbz	r3, 8010360 <_kill_r+0x1c>
 801035e:	6023      	str	r3, [r4, #0]
 8010360:	bd38      	pop	{r3, r4, r5, pc}
 8010362:	bf00      	nop
 8010364:	20000b84 	.word	0x20000b84

08010368 <_getpid_r>:
 8010368:	f7f5 b98e 	b.w	8005688 <_getpid>
 801036c:	0000      	movs	r0, r0
	...

08010370 <cos>:
 8010370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010372:	ec53 2b10 	vmov	r2, r3, d0
 8010376:	4826      	ldr	r0, [pc, #152]	; (8010410 <cos+0xa0>)
 8010378:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801037c:	4281      	cmp	r1, r0
 801037e:	dc06      	bgt.n	801038e <cos+0x1e>
 8010380:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010408 <cos+0x98>
 8010384:	b005      	add	sp, #20
 8010386:	f85d eb04 	ldr.w	lr, [sp], #4
 801038a:	f000 baa9 	b.w	80108e0 <__kernel_cos>
 801038e:	4821      	ldr	r0, [pc, #132]	; (8010414 <cos+0xa4>)
 8010390:	4281      	cmp	r1, r0
 8010392:	dd09      	ble.n	80103a8 <cos+0x38>
 8010394:	ee10 0a10 	vmov	r0, s0
 8010398:	4619      	mov	r1, r3
 801039a:	f7ef ff9d 	bl	80002d8 <__aeabi_dsub>
 801039e:	ec41 0b10 	vmov	d0, r0, r1
 80103a2:	b005      	add	sp, #20
 80103a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80103a8:	4668      	mov	r0, sp
 80103aa:	f000 f88d 	bl	80104c8 <__ieee754_rem_pio2>
 80103ae:	f000 0003 	and.w	r0, r0, #3
 80103b2:	2801      	cmp	r0, #1
 80103b4:	d00b      	beq.n	80103ce <cos+0x5e>
 80103b6:	2802      	cmp	r0, #2
 80103b8:	d016      	beq.n	80103e8 <cos+0x78>
 80103ba:	b9e0      	cbnz	r0, 80103f6 <cos+0x86>
 80103bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103c0:	ed9d 0b00 	vldr	d0, [sp]
 80103c4:	f000 fa8c 	bl	80108e0 <__kernel_cos>
 80103c8:	ec51 0b10 	vmov	r0, r1, d0
 80103cc:	e7e7      	b.n	801039e <cos+0x2e>
 80103ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103d2:	ed9d 0b00 	vldr	d0, [sp]
 80103d6:	f000 fe9b 	bl	8011110 <__kernel_sin>
 80103da:	ec53 2b10 	vmov	r2, r3, d0
 80103de:	ee10 0a10 	vmov	r0, s0
 80103e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80103e6:	e7da      	b.n	801039e <cos+0x2e>
 80103e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103ec:	ed9d 0b00 	vldr	d0, [sp]
 80103f0:	f000 fa76 	bl	80108e0 <__kernel_cos>
 80103f4:	e7f1      	b.n	80103da <cos+0x6a>
 80103f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80103fa:	ed9d 0b00 	vldr	d0, [sp]
 80103fe:	2001      	movs	r0, #1
 8010400:	f000 fe86 	bl	8011110 <__kernel_sin>
 8010404:	e7e0      	b.n	80103c8 <cos+0x58>
 8010406:	bf00      	nop
	...
 8010410:	3fe921fb 	.word	0x3fe921fb
 8010414:	7fefffff 	.word	0x7fefffff

08010418 <sin>:
 8010418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801041a:	ec53 2b10 	vmov	r2, r3, d0
 801041e:	4828      	ldr	r0, [pc, #160]	; (80104c0 <sin+0xa8>)
 8010420:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010424:	4281      	cmp	r1, r0
 8010426:	dc07      	bgt.n	8010438 <sin+0x20>
 8010428:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80104b8 <sin+0xa0>
 801042c:	2000      	movs	r0, #0
 801042e:	b005      	add	sp, #20
 8010430:	f85d eb04 	ldr.w	lr, [sp], #4
 8010434:	f000 be6c 	b.w	8011110 <__kernel_sin>
 8010438:	4822      	ldr	r0, [pc, #136]	; (80104c4 <sin+0xac>)
 801043a:	4281      	cmp	r1, r0
 801043c:	dd09      	ble.n	8010452 <sin+0x3a>
 801043e:	ee10 0a10 	vmov	r0, s0
 8010442:	4619      	mov	r1, r3
 8010444:	f7ef ff48 	bl	80002d8 <__aeabi_dsub>
 8010448:	ec41 0b10 	vmov	d0, r0, r1
 801044c:	b005      	add	sp, #20
 801044e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010452:	4668      	mov	r0, sp
 8010454:	f000 f838 	bl	80104c8 <__ieee754_rem_pio2>
 8010458:	f000 0003 	and.w	r0, r0, #3
 801045c:	2801      	cmp	r0, #1
 801045e:	d00c      	beq.n	801047a <sin+0x62>
 8010460:	2802      	cmp	r0, #2
 8010462:	d011      	beq.n	8010488 <sin+0x70>
 8010464:	b9f0      	cbnz	r0, 80104a4 <sin+0x8c>
 8010466:	ed9d 1b02 	vldr	d1, [sp, #8]
 801046a:	ed9d 0b00 	vldr	d0, [sp]
 801046e:	2001      	movs	r0, #1
 8010470:	f000 fe4e 	bl	8011110 <__kernel_sin>
 8010474:	ec51 0b10 	vmov	r0, r1, d0
 8010478:	e7e6      	b.n	8010448 <sin+0x30>
 801047a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801047e:	ed9d 0b00 	vldr	d0, [sp]
 8010482:	f000 fa2d 	bl	80108e0 <__kernel_cos>
 8010486:	e7f5      	b.n	8010474 <sin+0x5c>
 8010488:	ed9d 1b02 	vldr	d1, [sp, #8]
 801048c:	ed9d 0b00 	vldr	d0, [sp]
 8010490:	2001      	movs	r0, #1
 8010492:	f000 fe3d 	bl	8011110 <__kernel_sin>
 8010496:	ec53 2b10 	vmov	r2, r3, d0
 801049a:	ee10 0a10 	vmov	r0, s0
 801049e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80104a2:	e7d1      	b.n	8010448 <sin+0x30>
 80104a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80104a8:	ed9d 0b00 	vldr	d0, [sp]
 80104ac:	f000 fa18 	bl	80108e0 <__kernel_cos>
 80104b0:	e7f1      	b.n	8010496 <sin+0x7e>
 80104b2:	bf00      	nop
 80104b4:	f3af 8000 	nop.w
	...
 80104c0:	3fe921fb 	.word	0x3fe921fb
 80104c4:	7fefffff 	.word	0x7fefffff

080104c8 <__ieee754_rem_pio2>:
 80104c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104cc:	ed2d 8b02 	vpush	{d8}
 80104d0:	ec55 4b10 	vmov	r4, r5, d0
 80104d4:	4bca      	ldr	r3, [pc, #808]	; (8010800 <__ieee754_rem_pio2+0x338>)
 80104d6:	b08b      	sub	sp, #44	; 0x2c
 80104d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80104dc:	4598      	cmp	r8, r3
 80104de:	4682      	mov	sl, r0
 80104e0:	9502      	str	r5, [sp, #8]
 80104e2:	dc08      	bgt.n	80104f6 <__ieee754_rem_pio2+0x2e>
 80104e4:	2200      	movs	r2, #0
 80104e6:	2300      	movs	r3, #0
 80104e8:	ed80 0b00 	vstr	d0, [r0]
 80104ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80104f0:	f04f 0b00 	mov.w	fp, #0
 80104f4:	e028      	b.n	8010548 <__ieee754_rem_pio2+0x80>
 80104f6:	4bc3      	ldr	r3, [pc, #780]	; (8010804 <__ieee754_rem_pio2+0x33c>)
 80104f8:	4598      	cmp	r8, r3
 80104fa:	dc78      	bgt.n	80105ee <__ieee754_rem_pio2+0x126>
 80104fc:	9b02      	ldr	r3, [sp, #8]
 80104fe:	4ec2      	ldr	r6, [pc, #776]	; (8010808 <__ieee754_rem_pio2+0x340>)
 8010500:	2b00      	cmp	r3, #0
 8010502:	ee10 0a10 	vmov	r0, s0
 8010506:	a3b0      	add	r3, pc, #704	; (adr r3, 80107c8 <__ieee754_rem_pio2+0x300>)
 8010508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050c:	4629      	mov	r1, r5
 801050e:	dd39      	ble.n	8010584 <__ieee754_rem_pio2+0xbc>
 8010510:	f7ef fee2 	bl	80002d8 <__aeabi_dsub>
 8010514:	45b0      	cmp	r8, r6
 8010516:	4604      	mov	r4, r0
 8010518:	460d      	mov	r5, r1
 801051a:	d01b      	beq.n	8010554 <__ieee754_rem_pio2+0x8c>
 801051c:	a3ac      	add	r3, pc, #688	; (adr r3, 80107d0 <__ieee754_rem_pio2+0x308>)
 801051e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010522:	f7ef fed9 	bl	80002d8 <__aeabi_dsub>
 8010526:	4602      	mov	r2, r0
 8010528:	460b      	mov	r3, r1
 801052a:	e9ca 2300 	strd	r2, r3, [sl]
 801052e:	4620      	mov	r0, r4
 8010530:	4629      	mov	r1, r5
 8010532:	f7ef fed1 	bl	80002d8 <__aeabi_dsub>
 8010536:	a3a6      	add	r3, pc, #664	; (adr r3, 80107d0 <__ieee754_rem_pio2+0x308>)
 8010538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053c:	f7ef fecc 	bl	80002d8 <__aeabi_dsub>
 8010540:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010544:	f04f 0b01 	mov.w	fp, #1
 8010548:	4658      	mov	r0, fp
 801054a:	b00b      	add	sp, #44	; 0x2c
 801054c:	ecbd 8b02 	vpop	{d8}
 8010550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010554:	a3a0      	add	r3, pc, #640	; (adr r3, 80107d8 <__ieee754_rem_pio2+0x310>)
 8010556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055a:	f7ef febd 	bl	80002d8 <__aeabi_dsub>
 801055e:	a3a0      	add	r3, pc, #640	; (adr r3, 80107e0 <__ieee754_rem_pio2+0x318>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	4604      	mov	r4, r0
 8010566:	460d      	mov	r5, r1
 8010568:	f7ef feb6 	bl	80002d8 <__aeabi_dsub>
 801056c:	4602      	mov	r2, r0
 801056e:	460b      	mov	r3, r1
 8010570:	e9ca 2300 	strd	r2, r3, [sl]
 8010574:	4620      	mov	r0, r4
 8010576:	4629      	mov	r1, r5
 8010578:	f7ef feae 	bl	80002d8 <__aeabi_dsub>
 801057c:	a398      	add	r3, pc, #608	; (adr r3, 80107e0 <__ieee754_rem_pio2+0x318>)
 801057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010582:	e7db      	b.n	801053c <__ieee754_rem_pio2+0x74>
 8010584:	f7ef feaa 	bl	80002dc <__adddf3>
 8010588:	45b0      	cmp	r8, r6
 801058a:	4604      	mov	r4, r0
 801058c:	460d      	mov	r5, r1
 801058e:	d016      	beq.n	80105be <__ieee754_rem_pio2+0xf6>
 8010590:	a38f      	add	r3, pc, #572	; (adr r3, 80107d0 <__ieee754_rem_pio2+0x308>)
 8010592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010596:	f7ef fea1 	bl	80002dc <__adddf3>
 801059a:	4602      	mov	r2, r0
 801059c:	460b      	mov	r3, r1
 801059e:	e9ca 2300 	strd	r2, r3, [sl]
 80105a2:	4620      	mov	r0, r4
 80105a4:	4629      	mov	r1, r5
 80105a6:	f7ef fe97 	bl	80002d8 <__aeabi_dsub>
 80105aa:	a389      	add	r3, pc, #548	; (adr r3, 80107d0 <__ieee754_rem_pio2+0x308>)
 80105ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b0:	f7ef fe94 	bl	80002dc <__adddf3>
 80105b4:	f04f 3bff 	mov.w	fp, #4294967295
 80105b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80105bc:	e7c4      	b.n	8010548 <__ieee754_rem_pio2+0x80>
 80105be:	a386      	add	r3, pc, #536	; (adr r3, 80107d8 <__ieee754_rem_pio2+0x310>)
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	f7ef fe8a 	bl	80002dc <__adddf3>
 80105c8:	a385      	add	r3, pc, #532	; (adr r3, 80107e0 <__ieee754_rem_pio2+0x318>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	4604      	mov	r4, r0
 80105d0:	460d      	mov	r5, r1
 80105d2:	f7ef fe83 	bl	80002dc <__adddf3>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	e9ca 2300 	strd	r2, r3, [sl]
 80105de:	4620      	mov	r0, r4
 80105e0:	4629      	mov	r1, r5
 80105e2:	f7ef fe79 	bl	80002d8 <__aeabi_dsub>
 80105e6:	a37e      	add	r3, pc, #504	; (adr r3, 80107e0 <__ieee754_rem_pio2+0x318>)
 80105e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ec:	e7e0      	b.n	80105b0 <__ieee754_rem_pio2+0xe8>
 80105ee:	4b87      	ldr	r3, [pc, #540]	; (801080c <__ieee754_rem_pio2+0x344>)
 80105f0:	4598      	cmp	r8, r3
 80105f2:	f300 80d9 	bgt.w	80107a8 <__ieee754_rem_pio2+0x2e0>
 80105f6:	f000 fe49 	bl	801128c <fabs>
 80105fa:	ec55 4b10 	vmov	r4, r5, d0
 80105fe:	ee10 0a10 	vmov	r0, s0
 8010602:	a379      	add	r3, pc, #484	; (adr r3, 80107e8 <__ieee754_rem_pio2+0x320>)
 8010604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010608:	4629      	mov	r1, r5
 801060a:	f7f0 f81d 	bl	8000648 <__aeabi_dmul>
 801060e:	4b80      	ldr	r3, [pc, #512]	; (8010810 <__ieee754_rem_pio2+0x348>)
 8010610:	2200      	movs	r2, #0
 8010612:	f7ef fe63 	bl	80002dc <__adddf3>
 8010616:	f7f0 fac7 	bl	8000ba8 <__aeabi_d2iz>
 801061a:	4683      	mov	fp, r0
 801061c:	f7ef ffaa 	bl	8000574 <__aeabi_i2d>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	ec43 2b18 	vmov	d8, r2, r3
 8010628:	a367      	add	r3, pc, #412	; (adr r3, 80107c8 <__ieee754_rem_pio2+0x300>)
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	f7f0 f80b 	bl	8000648 <__aeabi_dmul>
 8010632:	4602      	mov	r2, r0
 8010634:	460b      	mov	r3, r1
 8010636:	4620      	mov	r0, r4
 8010638:	4629      	mov	r1, r5
 801063a:	f7ef fe4d 	bl	80002d8 <__aeabi_dsub>
 801063e:	a364      	add	r3, pc, #400	; (adr r3, 80107d0 <__ieee754_rem_pio2+0x308>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	4606      	mov	r6, r0
 8010646:	460f      	mov	r7, r1
 8010648:	ec51 0b18 	vmov	r0, r1, d8
 801064c:	f7ef fffc 	bl	8000648 <__aeabi_dmul>
 8010650:	f1bb 0f1f 	cmp.w	fp, #31
 8010654:	4604      	mov	r4, r0
 8010656:	460d      	mov	r5, r1
 8010658:	dc0d      	bgt.n	8010676 <__ieee754_rem_pio2+0x1ae>
 801065a:	4b6e      	ldr	r3, [pc, #440]	; (8010814 <__ieee754_rem_pio2+0x34c>)
 801065c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010664:	4543      	cmp	r3, r8
 8010666:	d006      	beq.n	8010676 <__ieee754_rem_pio2+0x1ae>
 8010668:	4622      	mov	r2, r4
 801066a:	462b      	mov	r3, r5
 801066c:	4630      	mov	r0, r6
 801066e:	4639      	mov	r1, r7
 8010670:	f7ef fe32 	bl	80002d8 <__aeabi_dsub>
 8010674:	e00f      	b.n	8010696 <__ieee754_rem_pio2+0x1ce>
 8010676:	462b      	mov	r3, r5
 8010678:	4622      	mov	r2, r4
 801067a:	4630      	mov	r0, r6
 801067c:	4639      	mov	r1, r7
 801067e:	f7ef fe2b 	bl	80002d8 <__aeabi_dsub>
 8010682:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010686:	9303      	str	r3, [sp, #12]
 8010688:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801068c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010690:	f1b8 0f10 	cmp.w	r8, #16
 8010694:	dc02      	bgt.n	801069c <__ieee754_rem_pio2+0x1d4>
 8010696:	e9ca 0100 	strd	r0, r1, [sl]
 801069a:	e039      	b.n	8010710 <__ieee754_rem_pio2+0x248>
 801069c:	a34e      	add	r3, pc, #312	; (adr r3, 80107d8 <__ieee754_rem_pio2+0x310>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	ec51 0b18 	vmov	r0, r1, d8
 80106a6:	f7ef ffcf 	bl	8000648 <__aeabi_dmul>
 80106aa:	4604      	mov	r4, r0
 80106ac:	460d      	mov	r5, r1
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4630      	mov	r0, r6
 80106b4:	4639      	mov	r1, r7
 80106b6:	f7ef fe0f 	bl	80002d8 <__aeabi_dsub>
 80106ba:	4602      	mov	r2, r0
 80106bc:	460b      	mov	r3, r1
 80106be:	4680      	mov	r8, r0
 80106c0:	4689      	mov	r9, r1
 80106c2:	4630      	mov	r0, r6
 80106c4:	4639      	mov	r1, r7
 80106c6:	f7ef fe07 	bl	80002d8 <__aeabi_dsub>
 80106ca:	4622      	mov	r2, r4
 80106cc:	462b      	mov	r3, r5
 80106ce:	f7ef fe03 	bl	80002d8 <__aeabi_dsub>
 80106d2:	a343      	add	r3, pc, #268	; (adr r3, 80107e0 <__ieee754_rem_pio2+0x318>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	4604      	mov	r4, r0
 80106da:	460d      	mov	r5, r1
 80106dc:	ec51 0b18 	vmov	r0, r1, d8
 80106e0:	f7ef ffb2 	bl	8000648 <__aeabi_dmul>
 80106e4:	4622      	mov	r2, r4
 80106e6:	462b      	mov	r3, r5
 80106e8:	f7ef fdf6 	bl	80002d8 <__aeabi_dsub>
 80106ec:	4602      	mov	r2, r0
 80106ee:	460b      	mov	r3, r1
 80106f0:	4604      	mov	r4, r0
 80106f2:	460d      	mov	r5, r1
 80106f4:	4640      	mov	r0, r8
 80106f6:	4649      	mov	r1, r9
 80106f8:	f7ef fdee 	bl	80002d8 <__aeabi_dsub>
 80106fc:	9a03      	ldr	r2, [sp, #12]
 80106fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	2b31      	cmp	r3, #49	; 0x31
 8010706:	dc24      	bgt.n	8010752 <__ieee754_rem_pio2+0x28a>
 8010708:	e9ca 0100 	strd	r0, r1, [sl]
 801070c:	4646      	mov	r6, r8
 801070e:	464f      	mov	r7, r9
 8010710:	e9da 8900 	ldrd	r8, r9, [sl]
 8010714:	4630      	mov	r0, r6
 8010716:	4642      	mov	r2, r8
 8010718:	464b      	mov	r3, r9
 801071a:	4639      	mov	r1, r7
 801071c:	f7ef fddc 	bl	80002d8 <__aeabi_dsub>
 8010720:	462b      	mov	r3, r5
 8010722:	4622      	mov	r2, r4
 8010724:	f7ef fdd8 	bl	80002d8 <__aeabi_dsub>
 8010728:	9b02      	ldr	r3, [sp, #8]
 801072a:	2b00      	cmp	r3, #0
 801072c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010730:	f6bf af0a 	bge.w	8010548 <__ieee754_rem_pio2+0x80>
 8010734:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010738:	f8ca 3004 	str.w	r3, [sl, #4]
 801073c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010740:	f8ca 8000 	str.w	r8, [sl]
 8010744:	f8ca 0008 	str.w	r0, [sl, #8]
 8010748:	f8ca 300c 	str.w	r3, [sl, #12]
 801074c:	f1cb 0b00 	rsb	fp, fp, #0
 8010750:	e6fa      	b.n	8010548 <__ieee754_rem_pio2+0x80>
 8010752:	a327      	add	r3, pc, #156	; (adr r3, 80107f0 <__ieee754_rem_pio2+0x328>)
 8010754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010758:	ec51 0b18 	vmov	r0, r1, d8
 801075c:	f7ef ff74 	bl	8000648 <__aeabi_dmul>
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	4602      	mov	r2, r0
 8010766:	460b      	mov	r3, r1
 8010768:	4640      	mov	r0, r8
 801076a:	4649      	mov	r1, r9
 801076c:	f7ef fdb4 	bl	80002d8 <__aeabi_dsub>
 8010770:	4602      	mov	r2, r0
 8010772:	460b      	mov	r3, r1
 8010774:	4606      	mov	r6, r0
 8010776:	460f      	mov	r7, r1
 8010778:	4640      	mov	r0, r8
 801077a:	4649      	mov	r1, r9
 801077c:	f7ef fdac 	bl	80002d8 <__aeabi_dsub>
 8010780:	4622      	mov	r2, r4
 8010782:	462b      	mov	r3, r5
 8010784:	f7ef fda8 	bl	80002d8 <__aeabi_dsub>
 8010788:	a31b      	add	r3, pc, #108	; (adr r3, 80107f8 <__ieee754_rem_pio2+0x330>)
 801078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078e:	4604      	mov	r4, r0
 8010790:	460d      	mov	r5, r1
 8010792:	ec51 0b18 	vmov	r0, r1, d8
 8010796:	f7ef ff57 	bl	8000648 <__aeabi_dmul>
 801079a:	4622      	mov	r2, r4
 801079c:	462b      	mov	r3, r5
 801079e:	f7ef fd9b 	bl	80002d8 <__aeabi_dsub>
 80107a2:	4604      	mov	r4, r0
 80107a4:	460d      	mov	r5, r1
 80107a6:	e75f      	b.n	8010668 <__ieee754_rem_pio2+0x1a0>
 80107a8:	4b1b      	ldr	r3, [pc, #108]	; (8010818 <__ieee754_rem_pio2+0x350>)
 80107aa:	4598      	cmp	r8, r3
 80107ac:	dd36      	ble.n	801081c <__ieee754_rem_pio2+0x354>
 80107ae:	ee10 2a10 	vmov	r2, s0
 80107b2:	462b      	mov	r3, r5
 80107b4:	4620      	mov	r0, r4
 80107b6:	4629      	mov	r1, r5
 80107b8:	f7ef fd8e 	bl	80002d8 <__aeabi_dsub>
 80107bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80107c0:	e9ca 0100 	strd	r0, r1, [sl]
 80107c4:	e694      	b.n	80104f0 <__ieee754_rem_pio2+0x28>
 80107c6:	bf00      	nop
 80107c8:	54400000 	.word	0x54400000
 80107cc:	3ff921fb 	.word	0x3ff921fb
 80107d0:	1a626331 	.word	0x1a626331
 80107d4:	3dd0b461 	.word	0x3dd0b461
 80107d8:	1a600000 	.word	0x1a600000
 80107dc:	3dd0b461 	.word	0x3dd0b461
 80107e0:	2e037073 	.word	0x2e037073
 80107e4:	3ba3198a 	.word	0x3ba3198a
 80107e8:	6dc9c883 	.word	0x6dc9c883
 80107ec:	3fe45f30 	.word	0x3fe45f30
 80107f0:	2e000000 	.word	0x2e000000
 80107f4:	3ba3198a 	.word	0x3ba3198a
 80107f8:	252049c1 	.word	0x252049c1
 80107fc:	397b839a 	.word	0x397b839a
 8010800:	3fe921fb 	.word	0x3fe921fb
 8010804:	4002d97b 	.word	0x4002d97b
 8010808:	3ff921fb 	.word	0x3ff921fb
 801080c:	413921fb 	.word	0x413921fb
 8010810:	3fe00000 	.word	0x3fe00000
 8010814:	080119dc 	.word	0x080119dc
 8010818:	7fefffff 	.word	0x7fefffff
 801081c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010820:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010824:	ee10 0a10 	vmov	r0, s0
 8010828:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801082c:	ee10 6a10 	vmov	r6, s0
 8010830:	460f      	mov	r7, r1
 8010832:	f7f0 f9b9 	bl	8000ba8 <__aeabi_d2iz>
 8010836:	f7ef fe9d 	bl	8000574 <__aeabi_i2d>
 801083a:	4602      	mov	r2, r0
 801083c:	460b      	mov	r3, r1
 801083e:	4630      	mov	r0, r6
 8010840:	4639      	mov	r1, r7
 8010842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010846:	f7ef fd47 	bl	80002d8 <__aeabi_dsub>
 801084a:	4b23      	ldr	r3, [pc, #140]	; (80108d8 <__ieee754_rem_pio2+0x410>)
 801084c:	2200      	movs	r2, #0
 801084e:	f7ef fefb 	bl	8000648 <__aeabi_dmul>
 8010852:	460f      	mov	r7, r1
 8010854:	4606      	mov	r6, r0
 8010856:	f7f0 f9a7 	bl	8000ba8 <__aeabi_d2iz>
 801085a:	f7ef fe8b 	bl	8000574 <__aeabi_i2d>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	4630      	mov	r0, r6
 8010864:	4639      	mov	r1, r7
 8010866:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801086a:	f7ef fd35 	bl	80002d8 <__aeabi_dsub>
 801086e:	4b1a      	ldr	r3, [pc, #104]	; (80108d8 <__ieee754_rem_pio2+0x410>)
 8010870:	2200      	movs	r2, #0
 8010872:	f7ef fee9 	bl	8000648 <__aeabi_dmul>
 8010876:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801087a:	ad04      	add	r5, sp, #16
 801087c:	f04f 0803 	mov.w	r8, #3
 8010880:	46a9      	mov	r9, r5
 8010882:	2600      	movs	r6, #0
 8010884:	2700      	movs	r7, #0
 8010886:	4632      	mov	r2, r6
 8010888:	463b      	mov	r3, r7
 801088a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801088e:	46c3      	mov	fp, r8
 8010890:	3d08      	subs	r5, #8
 8010892:	f108 38ff 	add.w	r8, r8, #4294967295
 8010896:	f7f0 f93f 	bl	8000b18 <__aeabi_dcmpeq>
 801089a:	2800      	cmp	r0, #0
 801089c:	d1f3      	bne.n	8010886 <__ieee754_rem_pio2+0x3be>
 801089e:	4b0f      	ldr	r3, [pc, #60]	; (80108dc <__ieee754_rem_pio2+0x414>)
 80108a0:	9301      	str	r3, [sp, #4]
 80108a2:	2302      	movs	r3, #2
 80108a4:	9300      	str	r3, [sp, #0]
 80108a6:	4622      	mov	r2, r4
 80108a8:	465b      	mov	r3, fp
 80108aa:	4651      	mov	r1, sl
 80108ac:	4648      	mov	r0, r9
 80108ae:	f000 f8df 	bl	8010a70 <__kernel_rem_pio2>
 80108b2:	9b02      	ldr	r3, [sp, #8]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	4683      	mov	fp, r0
 80108b8:	f6bf ae46 	bge.w	8010548 <__ieee754_rem_pio2+0x80>
 80108bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80108c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108c4:	e9ca 2300 	strd	r2, r3, [sl]
 80108c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80108cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80108d4:	e73a      	b.n	801074c <__ieee754_rem_pio2+0x284>
 80108d6:	bf00      	nop
 80108d8:	41700000 	.word	0x41700000
 80108dc:	08011a5c 	.word	0x08011a5c

080108e0 <__kernel_cos>:
 80108e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	ec57 6b10 	vmov	r6, r7, d0
 80108e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80108ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80108f0:	ed8d 1b00 	vstr	d1, [sp]
 80108f4:	da07      	bge.n	8010906 <__kernel_cos+0x26>
 80108f6:	ee10 0a10 	vmov	r0, s0
 80108fa:	4639      	mov	r1, r7
 80108fc:	f7f0 f954 	bl	8000ba8 <__aeabi_d2iz>
 8010900:	2800      	cmp	r0, #0
 8010902:	f000 8088 	beq.w	8010a16 <__kernel_cos+0x136>
 8010906:	4632      	mov	r2, r6
 8010908:	463b      	mov	r3, r7
 801090a:	4630      	mov	r0, r6
 801090c:	4639      	mov	r1, r7
 801090e:	f7ef fe9b 	bl	8000648 <__aeabi_dmul>
 8010912:	4b51      	ldr	r3, [pc, #324]	; (8010a58 <__kernel_cos+0x178>)
 8010914:	2200      	movs	r2, #0
 8010916:	4604      	mov	r4, r0
 8010918:	460d      	mov	r5, r1
 801091a:	f7ef fe95 	bl	8000648 <__aeabi_dmul>
 801091e:	a340      	add	r3, pc, #256	; (adr r3, 8010a20 <__kernel_cos+0x140>)
 8010920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010924:	4682      	mov	sl, r0
 8010926:	468b      	mov	fp, r1
 8010928:	4620      	mov	r0, r4
 801092a:	4629      	mov	r1, r5
 801092c:	f7ef fe8c 	bl	8000648 <__aeabi_dmul>
 8010930:	a33d      	add	r3, pc, #244	; (adr r3, 8010a28 <__kernel_cos+0x148>)
 8010932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010936:	f7ef fcd1 	bl	80002dc <__adddf3>
 801093a:	4622      	mov	r2, r4
 801093c:	462b      	mov	r3, r5
 801093e:	f7ef fe83 	bl	8000648 <__aeabi_dmul>
 8010942:	a33b      	add	r3, pc, #236	; (adr r3, 8010a30 <__kernel_cos+0x150>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	f7ef fcc6 	bl	80002d8 <__aeabi_dsub>
 801094c:	4622      	mov	r2, r4
 801094e:	462b      	mov	r3, r5
 8010950:	f7ef fe7a 	bl	8000648 <__aeabi_dmul>
 8010954:	a338      	add	r3, pc, #224	; (adr r3, 8010a38 <__kernel_cos+0x158>)
 8010956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095a:	f7ef fcbf 	bl	80002dc <__adddf3>
 801095e:	4622      	mov	r2, r4
 8010960:	462b      	mov	r3, r5
 8010962:	f7ef fe71 	bl	8000648 <__aeabi_dmul>
 8010966:	a336      	add	r3, pc, #216	; (adr r3, 8010a40 <__kernel_cos+0x160>)
 8010968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096c:	f7ef fcb4 	bl	80002d8 <__aeabi_dsub>
 8010970:	4622      	mov	r2, r4
 8010972:	462b      	mov	r3, r5
 8010974:	f7ef fe68 	bl	8000648 <__aeabi_dmul>
 8010978:	a333      	add	r3, pc, #204	; (adr r3, 8010a48 <__kernel_cos+0x168>)
 801097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801097e:	f7ef fcad 	bl	80002dc <__adddf3>
 8010982:	4622      	mov	r2, r4
 8010984:	462b      	mov	r3, r5
 8010986:	f7ef fe5f 	bl	8000648 <__aeabi_dmul>
 801098a:	4622      	mov	r2, r4
 801098c:	462b      	mov	r3, r5
 801098e:	f7ef fe5b 	bl	8000648 <__aeabi_dmul>
 8010992:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010996:	4604      	mov	r4, r0
 8010998:	460d      	mov	r5, r1
 801099a:	4630      	mov	r0, r6
 801099c:	4639      	mov	r1, r7
 801099e:	f7ef fe53 	bl	8000648 <__aeabi_dmul>
 80109a2:	460b      	mov	r3, r1
 80109a4:	4602      	mov	r2, r0
 80109a6:	4629      	mov	r1, r5
 80109a8:	4620      	mov	r0, r4
 80109aa:	f7ef fc95 	bl	80002d8 <__aeabi_dsub>
 80109ae:	4b2b      	ldr	r3, [pc, #172]	; (8010a5c <__kernel_cos+0x17c>)
 80109b0:	4598      	cmp	r8, r3
 80109b2:	4606      	mov	r6, r0
 80109b4:	460f      	mov	r7, r1
 80109b6:	dc10      	bgt.n	80109da <__kernel_cos+0xfa>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	4650      	mov	r0, sl
 80109be:	4659      	mov	r1, fp
 80109c0:	f7ef fc8a 	bl	80002d8 <__aeabi_dsub>
 80109c4:	460b      	mov	r3, r1
 80109c6:	4926      	ldr	r1, [pc, #152]	; (8010a60 <__kernel_cos+0x180>)
 80109c8:	4602      	mov	r2, r0
 80109ca:	2000      	movs	r0, #0
 80109cc:	f7ef fc84 	bl	80002d8 <__aeabi_dsub>
 80109d0:	ec41 0b10 	vmov	d0, r0, r1
 80109d4:	b003      	add	sp, #12
 80109d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109da:	4b22      	ldr	r3, [pc, #136]	; (8010a64 <__kernel_cos+0x184>)
 80109dc:	4920      	ldr	r1, [pc, #128]	; (8010a60 <__kernel_cos+0x180>)
 80109de:	4598      	cmp	r8, r3
 80109e0:	bfcc      	ite	gt
 80109e2:	4d21      	ldrgt	r5, [pc, #132]	; (8010a68 <__kernel_cos+0x188>)
 80109e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80109e8:	2400      	movs	r4, #0
 80109ea:	4622      	mov	r2, r4
 80109ec:	462b      	mov	r3, r5
 80109ee:	2000      	movs	r0, #0
 80109f0:	f7ef fc72 	bl	80002d8 <__aeabi_dsub>
 80109f4:	4622      	mov	r2, r4
 80109f6:	4680      	mov	r8, r0
 80109f8:	4689      	mov	r9, r1
 80109fa:	462b      	mov	r3, r5
 80109fc:	4650      	mov	r0, sl
 80109fe:	4659      	mov	r1, fp
 8010a00:	f7ef fc6a 	bl	80002d8 <__aeabi_dsub>
 8010a04:	4632      	mov	r2, r6
 8010a06:	463b      	mov	r3, r7
 8010a08:	f7ef fc66 	bl	80002d8 <__aeabi_dsub>
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	460b      	mov	r3, r1
 8010a10:	4640      	mov	r0, r8
 8010a12:	4649      	mov	r1, r9
 8010a14:	e7da      	b.n	80109cc <__kernel_cos+0xec>
 8010a16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010a50 <__kernel_cos+0x170>
 8010a1a:	e7db      	b.n	80109d4 <__kernel_cos+0xf4>
 8010a1c:	f3af 8000 	nop.w
 8010a20:	be8838d4 	.word	0xbe8838d4
 8010a24:	bda8fae9 	.word	0xbda8fae9
 8010a28:	bdb4b1c4 	.word	0xbdb4b1c4
 8010a2c:	3e21ee9e 	.word	0x3e21ee9e
 8010a30:	809c52ad 	.word	0x809c52ad
 8010a34:	3e927e4f 	.word	0x3e927e4f
 8010a38:	19cb1590 	.word	0x19cb1590
 8010a3c:	3efa01a0 	.word	0x3efa01a0
 8010a40:	16c15177 	.word	0x16c15177
 8010a44:	3f56c16c 	.word	0x3f56c16c
 8010a48:	5555554c 	.word	0x5555554c
 8010a4c:	3fa55555 	.word	0x3fa55555
 8010a50:	00000000 	.word	0x00000000
 8010a54:	3ff00000 	.word	0x3ff00000
 8010a58:	3fe00000 	.word	0x3fe00000
 8010a5c:	3fd33332 	.word	0x3fd33332
 8010a60:	3ff00000 	.word	0x3ff00000
 8010a64:	3fe90000 	.word	0x3fe90000
 8010a68:	3fd20000 	.word	0x3fd20000
 8010a6c:	00000000 	.word	0x00000000

08010a70 <__kernel_rem_pio2>:
 8010a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a74:	ed2d 8b02 	vpush	{d8}
 8010a78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010a7c:	f112 0f14 	cmn.w	r2, #20
 8010a80:	9308      	str	r3, [sp, #32]
 8010a82:	9101      	str	r1, [sp, #4]
 8010a84:	4bc4      	ldr	r3, [pc, #784]	; (8010d98 <__kernel_rem_pio2+0x328>)
 8010a86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010a88:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a8e:	9302      	str	r3, [sp, #8]
 8010a90:	9b08      	ldr	r3, [sp, #32]
 8010a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8010a96:	bfa8      	it	ge
 8010a98:	1ed4      	subge	r4, r2, #3
 8010a9a:	9306      	str	r3, [sp, #24]
 8010a9c:	bfb2      	itee	lt
 8010a9e:	2400      	movlt	r4, #0
 8010aa0:	2318      	movge	r3, #24
 8010aa2:	fb94 f4f3 	sdivge	r4, r4, r3
 8010aa6:	f06f 0317 	mvn.w	r3, #23
 8010aaa:	fb04 3303 	mla	r3, r4, r3, r3
 8010aae:	eb03 0a02 	add.w	sl, r3, r2
 8010ab2:	9b02      	ldr	r3, [sp, #8]
 8010ab4:	9a06      	ldr	r2, [sp, #24]
 8010ab6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8010d88 <__kernel_rem_pio2+0x318>
 8010aba:	eb03 0802 	add.w	r8, r3, r2
 8010abe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010ac0:	1aa7      	subs	r7, r4, r2
 8010ac2:	ae22      	add	r6, sp, #136	; 0x88
 8010ac4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010ac8:	2500      	movs	r5, #0
 8010aca:	4545      	cmp	r5, r8
 8010acc:	dd13      	ble.n	8010af6 <__kernel_rem_pio2+0x86>
 8010ace:	9b08      	ldr	r3, [sp, #32]
 8010ad0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8010d88 <__kernel_rem_pio2+0x318>
 8010ad4:	aa22      	add	r2, sp, #136	; 0x88
 8010ad6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010ada:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8010ade:	f04f 0800 	mov.w	r8, #0
 8010ae2:	9b02      	ldr	r3, [sp, #8]
 8010ae4:	4598      	cmp	r8, r3
 8010ae6:	dc2f      	bgt.n	8010b48 <__kernel_rem_pio2+0xd8>
 8010ae8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010aec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010af0:	462f      	mov	r7, r5
 8010af2:	2600      	movs	r6, #0
 8010af4:	e01b      	b.n	8010b2e <__kernel_rem_pio2+0xbe>
 8010af6:	42ef      	cmn	r7, r5
 8010af8:	d407      	bmi.n	8010b0a <__kernel_rem_pio2+0x9a>
 8010afa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010afe:	f7ef fd39 	bl	8000574 <__aeabi_i2d>
 8010b02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010b06:	3501      	adds	r5, #1
 8010b08:	e7df      	b.n	8010aca <__kernel_rem_pio2+0x5a>
 8010b0a:	ec51 0b18 	vmov	r0, r1, d8
 8010b0e:	e7f8      	b.n	8010b02 <__kernel_rem_pio2+0x92>
 8010b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010b18:	f7ef fd96 	bl	8000648 <__aeabi_dmul>
 8010b1c:	4602      	mov	r2, r0
 8010b1e:	460b      	mov	r3, r1
 8010b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b24:	f7ef fbda 	bl	80002dc <__adddf3>
 8010b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b2c:	3601      	adds	r6, #1
 8010b2e:	9b06      	ldr	r3, [sp, #24]
 8010b30:	429e      	cmp	r6, r3
 8010b32:	f1a7 0708 	sub.w	r7, r7, #8
 8010b36:	ddeb      	ble.n	8010b10 <__kernel_rem_pio2+0xa0>
 8010b38:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010b3c:	f108 0801 	add.w	r8, r8, #1
 8010b40:	ecab 7b02 	vstmia	fp!, {d7}
 8010b44:	3508      	adds	r5, #8
 8010b46:	e7cc      	b.n	8010ae2 <__kernel_rem_pio2+0x72>
 8010b48:	9b02      	ldr	r3, [sp, #8]
 8010b4a:	aa0e      	add	r2, sp, #56	; 0x38
 8010b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b50:	930d      	str	r3, [sp, #52]	; 0x34
 8010b52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010b54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010b58:	9c02      	ldr	r4, [sp, #8]
 8010b5a:	930c      	str	r3, [sp, #48]	; 0x30
 8010b5c:	00e3      	lsls	r3, r4, #3
 8010b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b60:	ab9a      	add	r3, sp, #616	; 0x268
 8010b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010b6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010b6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8010b70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010b74:	46c3      	mov	fp, r8
 8010b76:	46a1      	mov	r9, r4
 8010b78:	f1b9 0f00 	cmp.w	r9, #0
 8010b7c:	f1a5 0508 	sub.w	r5, r5, #8
 8010b80:	dc77      	bgt.n	8010c72 <__kernel_rem_pio2+0x202>
 8010b82:	ec47 6b10 	vmov	d0, r6, r7
 8010b86:	4650      	mov	r0, sl
 8010b88:	f000 fc0a 	bl	80113a0 <scalbn>
 8010b8c:	ec57 6b10 	vmov	r6, r7, d0
 8010b90:	2200      	movs	r2, #0
 8010b92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010b96:	ee10 0a10 	vmov	r0, s0
 8010b9a:	4639      	mov	r1, r7
 8010b9c:	f7ef fd54 	bl	8000648 <__aeabi_dmul>
 8010ba0:	ec41 0b10 	vmov	d0, r0, r1
 8010ba4:	f000 fb7c 	bl	80112a0 <floor>
 8010ba8:	4b7c      	ldr	r3, [pc, #496]	; (8010d9c <__kernel_rem_pio2+0x32c>)
 8010baa:	ec51 0b10 	vmov	r0, r1, d0
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f7ef fd4a 	bl	8000648 <__aeabi_dmul>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4630      	mov	r0, r6
 8010bba:	4639      	mov	r1, r7
 8010bbc:	f7ef fb8c 	bl	80002d8 <__aeabi_dsub>
 8010bc0:	460f      	mov	r7, r1
 8010bc2:	4606      	mov	r6, r0
 8010bc4:	f7ef fff0 	bl	8000ba8 <__aeabi_d2iz>
 8010bc8:	9004      	str	r0, [sp, #16]
 8010bca:	f7ef fcd3 	bl	8000574 <__aeabi_i2d>
 8010bce:	4602      	mov	r2, r0
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	f7ef fb7f 	bl	80002d8 <__aeabi_dsub>
 8010bda:	f1ba 0f00 	cmp.w	sl, #0
 8010bde:	4606      	mov	r6, r0
 8010be0:	460f      	mov	r7, r1
 8010be2:	dd6d      	ble.n	8010cc0 <__kernel_rem_pio2+0x250>
 8010be4:	1e62      	subs	r2, r4, #1
 8010be6:	ab0e      	add	r3, sp, #56	; 0x38
 8010be8:	9d04      	ldr	r5, [sp, #16]
 8010bea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010bee:	f1ca 0118 	rsb	r1, sl, #24
 8010bf2:	fa40 f301 	asr.w	r3, r0, r1
 8010bf6:	441d      	add	r5, r3
 8010bf8:	408b      	lsls	r3, r1
 8010bfa:	1ac0      	subs	r0, r0, r3
 8010bfc:	ab0e      	add	r3, sp, #56	; 0x38
 8010bfe:	9504      	str	r5, [sp, #16]
 8010c00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010c04:	f1ca 0317 	rsb	r3, sl, #23
 8010c08:	fa40 fb03 	asr.w	fp, r0, r3
 8010c0c:	f1bb 0f00 	cmp.w	fp, #0
 8010c10:	dd65      	ble.n	8010cde <__kernel_rem_pio2+0x26e>
 8010c12:	9b04      	ldr	r3, [sp, #16]
 8010c14:	2200      	movs	r2, #0
 8010c16:	3301      	adds	r3, #1
 8010c18:	9304      	str	r3, [sp, #16]
 8010c1a:	4615      	mov	r5, r2
 8010c1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010c20:	4294      	cmp	r4, r2
 8010c22:	f300 809c 	bgt.w	8010d5e <__kernel_rem_pio2+0x2ee>
 8010c26:	f1ba 0f00 	cmp.w	sl, #0
 8010c2a:	dd07      	ble.n	8010c3c <__kernel_rem_pio2+0x1cc>
 8010c2c:	f1ba 0f01 	cmp.w	sl, #1
 8010c30:	f000 80c0 	beq.w	8010db4 <__kernel_rem_pio2+0x344>
 8010c34:	f1ba 0f02 	cmp.w	sl, #2
 8010c38:	f000 80c6 	beq.w	8010dc8 <__kernel_rem_pio2+0x358>
 8010c3c:	f1bb 0f02 	cmp.w	fp, #2
 8010c40:	d14d      	bne.n	8010cde <__kernel_rem_pio2+0x26e>
 8010c42:	4632      	mov	r2, r6
 8010c44:	463b      	mov	r3, r7
 8010c46:	4956      	ldr	r1, [pc, #344]	; (8010da0 <__kernel_rem_pio2+0x330>)
 8010c48:	2000      	movs	r0, #0
 8010c4a:	f7ef fb45 	bl	80002d8 <__aeabi_dsub>
 8010c4e:	4606      	mov	r6, r0
 8010c50:	460f      	mov	r7, r1
 8010c52:	2d00      	cmp	r5, #0
 8010c54:	d043      	beq.n	8010cde <__kernel_rem_pio2+0x26e>
 8010c56:	4650      	mov	r0, sl
 8010c58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010d90 <__kernel_rem_pio2+0x320>
 8010c5c:	f000 fba0 	bl	80113a0 <scalbn>
 8010c60:	4630      	mov	r0, r6
 8010c62:	4639      	mov	r1, r7
 8010c64:	ec53 2b10 	vmov	r2, r3, d0
 8010c68:	f7ef fb36 	bl	80002d8 <__aeabi_dsub>
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	460f      	mov	r7, r1
 8010c70:	e035      	b.n	8010cde <__kernel_rem_pio2+0x26e>
 8010c72:	4b4c      	ldr	r3, [pc, #304]	; (8010da4 <__kernel_rem_pio2+0x334>)
 8010c74:	2200      	movs	r2, #0
 8010c76:	4630      	mov	r0, r6
 8010c78:	4639      	mov	r1, r7
 8010c7a:	f7ef fce5 	bl	8000648 <__aeabi_dmul>
 8010c7e:	f7ef ff93 	bl	8000ba8 <__aeabi_d2iz>
 8010c82:	f7ef fc77 	bl	8000574 <__aeabi_i2d>
 8010c86:	4602      	mov	r2, r0
 8010c88:	460b      	mov	r3, r1
 8010c8a:	ec43 2b18 	vmov	d8, r2, r3
 8010c8e:	4b46      	ldr	r3, [pc, #280]	; (8010da8 <__kernel_rem_pio2+0x338>)
 8010c90:	2200      	movs	r2, #0
 8010c92:	f7ef fcd9 	bl	8000648 <__aeabi_dmul>
 8010c96:	4602      	mov	r2, r0
 8010c98:	460b      	mov	r3, r1
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	4639      	mov	r1, r7
 8010c9e:	f7ef fb1b 	bl	80002d8 <__aeabi_dsub>
 8010ca2:	f7ef ff81 	bl	8000ba8 <__aeabi_d2iz>
 8010ca6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010caa:	f84b 0b04 	str.w	r0, [fp], #4
 8010cae:	ec51 0b18 	vmov	r0, r1, d8
 8010cb2:	f7ef fb13 	bl	80002dc <__adddf3>
 8010cb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8010cba:	4606      	mov	r6, r0
 8010cbc:	460f      	mov	r7, r1
 8010cbe:	e75b      	b.n	8010b78 <__kernel_rem_pio2+0x108>
 8010cc0:	d106      	bne.n	8010cd0 <__kernel_rem_pio2+0x260>
 8010cc2:	1e63      	subs	r3, r4, #1
 8010cc4:	aa0e      	add	r2, sp, #56	; 0x38
 8010cc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010cca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8010cce:	e79d      	b.n	8010c0c <__kernel_rem_pio2+0x19c>
 8010cd0:	4b36      	ldr	r3, [pc, #216]	; (8010dac <__kernel_rem_pio2+0x33c>)
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f7ef ff3e 	bl	8000b54 <__aeabi_dcmpge>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d13d      	bne.n	8010d58 <__kernel_rem_pio2+0x2e8>
 8010cdc:	4683      	mov	fp, r0
 8010cde:	2200      	movs	r2, #0
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	f7ef ff17 	bl	8000b18 <__aeabi_dcmpeq>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	f000 80c0 	beq.w	8010e70 <__kernel_rem_pio2+0x400>
 8010cf0:	1e65      	subs	r5, r4, #1
 8010cf2:	462b      	mov	r3, r5
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	9902      	ldr	r1, [sp, #8]
 8010cf8:	428b      	cmp	r3, r1
 8010cfa:	da6c      	bge.n	8010dd6 <__kernel_rem_pio2+0x366>
 8010cfc:	2a00      	cmp	r2, #0
 8010cfe:	f000 8089 	beq.w	8010e14 <__kernel_rem_pio2+0x3a4>
 8010d02:	ab0e      	add	r3, sp, #56	; 0x38
 8010d04:	f1aa 0a18 	sub.w	sl, sl, #24
 8010d08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f000 80ad 	beq.w	8010e6c <__kernel_rem_pio2+0x3fc>
 8010d12:	4650      	mov	r0, sl
 8010d14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010d90 <__kernel_rem_pio2+0x320>
 8010d18:	f000 fb42 	bl	80113a0 <scalbn>
 8010d1c:	ab9a      	add	r3, sp, #616	; 0x268
 8010d1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010d22:	ec57 6b10 	vmov	r6, r7, d0
 8010d26:	00ec      	lsls	r4, r5, #3
 8010d28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8010d2c:	46aa      	mov	sl, r5
 8010d2e:	f1ba 0f00 	cmp.w	sl, #0
 8010d32:	f280 80d6 	bge.w	8010ee2 <__kernel_rem_pio2+0x472>
 8010d36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8010d88 <__kernel_rem_pio2+0x318>
 8010d3a:	462e      	mov	r6, r5
 8010d3c:	2e00      	cmp	r6, #0
 8010d3e:	f2c0 8104 	blt.w	8010f4a <__kernel_rem_pio2+0x4da>
 8010d42:	ab72      	add	r3, sp, #456	; 0x1c8
 8010d44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010d48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8010db0 <__kernel_rem_pio2+0x340>
 8010d4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010d50:	f04f 0800 	mov.w	r8, #0
 8010d54:	1baf      	subs	r7, r5, r6
 8010d56:	e0ea      	b.n	8010f2e <__kernel_rem_pio2+0x4be>
 8010d58:	f04f 0b02 	mov.w	fp, #2
 8010d5c:	e759      	b.n	8010c12 <__kernel_rem_pio2+0x1a2>
 8010d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d62:	b955      	cbnz	r5, 8010d7a <__kernel_rem_pio2+0x30a>
 8010d64:	b123      	cbz	r3, 8010d70 <__kernel_rem_pio2+0x300>
 8010d66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010d6a:	f8c8 3000 	str.w	r3, [r8]
 8010d6e:	2301      	movs	r3, #1
 8010d70:	3201      	adds	r2, #1
 8010d72:	f108 0804 	add.w	r8, r8, #4
 8010d76:	461d      	mov	r5, r3
 8010d78:	e752      	b.n	8010c20 <__kernel_rem_pio2+0x1b0>
 8010d7a:	1acb      	subs	r3, r1, r3
 8010d7c:	f8c8 3000 	str.w	r3, [r8]
 8010d80:	462b      	mov	r3, r5
 8010d82:	e7f5      	b.n	8010d70 <__kernel_rem_pio2+0x300>
 8010d84:	f3af 8000 	nop.w
	...
 8010d94:	3ff00000 	.word	0x3ff00000
 8010d98:	08011ba8 	.word	0x08011ba8
 8010d9c:	40200000 	.word	0x40200000
 8010da0:	3ff00000 	.word	0x3ff00000
 8010da4:	3e700000 	.word	0x3e700000
 8010da8:	41700000 	.word	0x41700000
 8010dac:	3fe00000 	.word	0x3fe00000
 8010db0:	08011b68 	.word	0x08011b68
 8010db4:	1e62      	subs	r2, r4, #1
 8010db6:	ab0e      	add	r3, sp, #56	; 0x38
 8010db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010dc0:	a90e      	add	r1, sp, #56	; 0x38
 8010dc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010dc6:	e739      	b.n	8010c3c <__kernel_rem_pio2+0x1cc>
 8010dc8:	1e62      	subs	r2, r4, #1
 8010dca:	ab0e      	add	r3, sp, #56	; 0x38
 8010dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010dd4:	e7f4      	b.n	8010dc0 <__kernel_rem_pio2+0x350>
 8010dd6:	a90e      	add	r1, sp, #56	; 0x38
 8010dd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	430a      	orrs	r2, r1
 8010de0:	e789      	b.n	8010cf6 <__kernel_rem_pio2+0x286>
 8010de2:	3301      	adds	r3, #1
 8010de4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010de8:	2900      	cmp	r1, #0
 8010dea:	d0fa      	beq.n	8010de2 <__kernel_rem_pio2+0x372>
 8010dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8010df2:	446a      	add	r2, sp
 8010df4:	3a98      	subs	r2, #152	; 0x98
 8010df6:	920a      	str	r2, [sp, #40]	; 0x28
 8010df8:	9a08      	ldr	r2, [sp, #32]
 8010dfa:	18e3      	adds	r3, r4, r3
 8010dfc:	18a5      	adds	r5, r4, r2
 8010dfe:	aa22      	add	r2, sp, #136	; 0x88
 8010e00:	f104 0801 	add.w	r8, r4, #1
 8010e04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010e08:	9304      	str	r3, [sp, #16]
 8010e0a:	9b04      	ldr	r3, [sp, #16]
 8010e0c:	4543      	cmp	r3, r8
 8010e0e:	da04      	bge.n	8010e1a <__kernel_rem_pio2+0x3aa>
 8010e10:	461c      	mov	r4, r3
 8010e12:	e6a3      	b.n	8010b5c <__kernel_rem_pio2+0xec>
 8010e14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e16:	2301      	movs	r3, #1
 8010e18:	e7e4      	b.n	8010de4 <__kernel_rem_pio2+0x374>
 8010e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010e20:	f7ef fba8 	bl	8000574 <__aeabi_i2d>
 8010e24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e2a:	46ab      	mov	fp, r5
 8010e2c:	461c      	mov	r4, r3
 8010e2e:	f04f 0900 	mov.w	r9, #0
 8010e32:	2600      	movs	r6, #0
 8010e34:	2700      	movs	r7, #0
 8010e36:	9b06      	ldr	r3, [sp, #24]
 8010e38:	4599      	cmp	r9, r3
 8010e3a:	dd06      	ble.n	8010e4a <__kernel_rem_pio2+0x3da>
 8010e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010e42:	f108 0801 	add.w	r8, r8, #1
 8010e46:	930a      	str	r3, [sp, #40]	; 0x28
 8010e48:	e7df      	b.n	8010e0a <__kernel_rem_pio2+0x39a>
 8010e4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010e4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010e52:	f7ef fbf9 	bl	8000648 <__aeabi_dmul>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	4630      	mov	r0, r6
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	f7ef fa3d 	bl	80002dc <__adddf3>
 8010e62:	f109 0901 	add.w	r9, r9, #1
 8010e66:	4606      	mov	r6, r0
 8010e68:	460f      	mov	r7, r1
 8010e6a:	e7e4      	b.n	8010e36 <__kernel_rem_pio2+0x3c6>
 8010e6c:	3d01      	subs	r5, #1
 8010e6e:	e748      	b.n	8010d02 <__kernel_rem_pio2+0x292>
 8010e70:	ec47 6b10 	vmov	d0, r6, r7
 8010e74:	f1ca 0000 	rsb	r0, sl, #0
 8010e78:	f000 fa92 	bl	80113a0 <scalbn>
 8010e7c:	ec57 6b10 	vmov	r6, r7, d0
 8010e80:	4ba0      	ldr	r3, [pc, #640]	; (8011104 <__kernel_rem_pio2+0x694>)
 8010e82:	ee10 0a10 	vmov	r0, s0
 8010e86:	2200      	movs	r2, #0
 8010e88:	4639      	mov	r1, r7
 8010e8a:	f7ef fe63 	bl	8000b54 <__aeabi_dcmpge>
 8010e8e:	b1f8      	cbz	r0, 8010ed0 <__kernel_rem_pio2+0x460>
 8010e90:	4b9d      	ldr	r3, [pc, #628]	; (8011108 <__kernel_rem_pio2+0x698>)
 8010e92:	2200      	movs	r2, #0
 8010e94:	4630      	mov	r0, r6
 8010e96:	4639      	mov	r1, r7
 8010e98:	f7ef fbd6 	bl	8000648 <__aeabi_dmul>
 8010e9c:	f7ef fe84 	bl	8000ba8 <__aeabi_d2iz>
 8010ea0:	4680      	mov	r8, r0
 8010ea2:	f7ef fb67 	bl	8000574 <__aeabi_i2d>
 8010ea6:	4b97      	ldr	r3, [pc, #604]	; (8011104 <__kernel_rem_pio2+0x694>)
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f7ef fbcd 	bl	8000648 <__aeabi_dmul>
 8010eae:	460b      	mov	r3, r1
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	4639      	mov	r1, r7
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	f7ef fa0f 	bl	80002d8 <__aeabi_dsub>
 8010eba:	f7ef fe75 	bl	8000ba8 <__aeabi_d2iz>
 8010ebe:	1c65      	adds	r5, r4, #1
 8010ec0:	ab0e      	add	r3, sp, #56	; 0x38
 8010ec2:	f10a 0a18 	add.w	sl, sl, #24
 8010ec6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010eca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010ece:	e720      	b.n	8010d12 <__kernel_rem_pio2+0x2a2>
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	4639      	mov	r1, r7
 8010ed4:	f7ef fe68 	bl	8000ba8 <__aeabi_d2iz>
 8010ed8:	ab0e      	add	r3, sp, #56	; 0x38
 8010eda:	4625      	mov	r5, r4
 8010edc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010ee0:	e717      	b.n	8010d12 <__kernel_rem_pio2+0x2a2>
 8010ee2:	ab0e      	add	r3, sp, #56	; 0x38
 8010ee4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010ee8:	f7ef fb44 	bl	8000574 <__aeabi_i2d>
 8010eec:	4632      	mov	r2, r6
 8010eee:	463b      	mov	r3, r7
 8010ef0:	f7ef fbaa 	bl	8000648 <__aeabi_dmul>
 8010ef4:	4b84      	ldr	r3, [pc, #528]	; (8011108 <__kernel_rem_pio2+0x698>)
 8010ef6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8010efa:	2200      	movs	r2, #0
 8010efc:	4630      	mov	r0, r6
 8010efe:	4639      	mov	r1, r7
 8010f00:	f7ef fba2 	bl	8000648 <__aeabi_dmul>
 8010f04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f08:	4606      	mov	r6, r0
 8010f0a:	460f      	mov	r7, r1
 8010f0c:	e70f      	b.n	8010d2e <__kernel_rem_pio2+0x2be>
 8010f0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010f12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010f16:	f7ef fb97 	bl	8000648 <__aeabi_dmul>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f22:	f7ef f9db 	bl	80002dc <__adddf3>
 8010f26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010f2a:	f108 0801 	add.w	r8, r8, #1
 8010f2e:	9b02      	ldr	r3, [sp, #8]
 8010f30:	4598      	cmp	r8, r3
 8010f32:	dc01      	bgt.n	8010f38 <__kernel_rem_pio2+0x4c8>
 8010f34:	45b8      	cmp	r8, r7
 8010f36:	ddea      	ble.n	8010f0e <__kernel_rem_pio2+0x49e>
 8010f38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010f3c:	ab4a      	add	r3, sp, #296	; 0x128
 8010f3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010f42:	ed87 7b00 	vstr	d7, [r7]
 8010f46:	3e01      	subs	r6, #1
 8010f48:	e6f8      	b.n	8010d3c <__kernel_rem_pio2+0x2cc>
 8010f4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010f4c:	2b02      	cmp	r3, #2
 8010f4e:	dc0b      	bgt.n	8010f68 <__kernel_rem_pio2+0x4f8>
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	dc35      	bgt.n	8010fc0 <__kernel_rem_pio2+0x550>
 8010f54:	d059      	beq.n	801100a <__kernel_rem_pio2+0x59a>
 8010f56:	9b04      	ldr	r3, [sp, #16]
 8010f58:	f003 0007 	and.w	r0, r3, #7
 8010f5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010f60:	ecbd 8b02 	vpop	{d8}
 8010f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d1f3      	bne.n	8010f56 <__kernel_rem_pio2+0x4e6>
 8010f6e:	ab4a      	add	r3, sp, #296	; 0x128
 8010f70:	4423      	add	r3, r4
 8010f72:	9306      	str	r3, [sp, #24]
 8010f74:	461c      	mov	r4, r3
 8010f76:	469a      	mov	sl, r3
 8010f78:	9502      	str	r5, [sp, #8]
 8010f7a:	9b02      	ldr	r3, [sp, #8]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8010f82:	dc6b      	bgt.n	801105c <__kernel_rem_pio2+0x5ec>
 8010f84:	46aa      	mov	sl, r5
 8010f86:	f1ba 0f01 	cmp.w	sl, #1
 8010f8a:	f1a4 0408 	sub.w	r4, r4, #8
 8010f8e:	f300 8085 	bgt.w	801109c <__kernel_rem_pio2+0x62c>
 8010f92:	9c06      	ldr	r4, [sp, #24]
 8010f94:	2000      	movs	r0, #0
 8010f96:	3408      	adds	r4, #8
 8010f98:	2100      	movs	r1, #0
 8010f9a:	2d01      	cmp	r5, #1
 8010f9c:	f300 809d 	bgt.w	80110da <__kernel_rem_pio2+0x66a>
 8010fa0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010fa4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010fa8:	f1bb 0f00 	cmp.w	fp, #0
 8010fac:	f040 809b 	bne.w	80110e6 <__kernel_rem_pio2+0x676>
 8010fb0:	9b01      	ldr	r3, [sp, #4]
 8010fb2:	e9c3 5600 	strd	r5, r6, [r3]
 8010fb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010fba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010fbe:	e7ca      	b.n	8010f56 <__kernel_rem_pio2+0x4e6>
 8010fc0:	3408      	adds	r4, #8
 8010fc2:	ab4a      	add	r3, sp, #296	; 0x128
 8010fc4:	441c      	add	r4, r3
 8010fc6:	462e      	mov	r6, r5
 8010fc8:	2000      	movs	r0, #0
 8010fca:	2100      	movs	r1, #0
 8010fcc:	2e00      	cmp	r6, #0
 8010fce:	da36      	bge.n	801103e <__kernel_rem_pio2+0x5ce>
 8010fd0:	f1bb 0f00 	cmp.w	fp, #0
 8010fd4:	d039      	beq.n	801104a <__kernel_rem_pio2+0x5da>
 8010fd6:	4602      	mov	r2, r0
 8010fd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fdc:	9c01      	ldr	r4, [sp, #4]
 8010fde:	e9c4 2300 	strd	r2, r3, [r4]
 8010fe2:	4602      	mov	r2, r0
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010fea:	f7ef f975 	bl	80002d8 <__aeabi_dsub>
 8010fee:	ae4c      	add	r6, sp, #304	; 0x130
 8010ff0:	2401      	movs	r4, #1
 8010ff2:	42a5      	cmp	r5, r4
 8010ff4:	da2c      	bge.n	8011050 <__kernel_rem_pio2+0x5e0>
 8010ff6:	f1bb 0f00 	cmp.w	fp, #0
 8010ffa:	d002      	beq.n	8011002 <__kernel_rem_pio2+0x592>
 8010ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011000:	4619      	mov	r1, r3
 8011002:	9b01      	ldr	r3, [sp, #4]
 8011004:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011008:	e7a5      	b.n	8010f56 <__kernel_rem_pio2+0x4e6>
 801100a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801100e:	eb0d 0403 	add.w	r4, sp, r3
 8011012:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011016:	2000      	movs	r0, #0
 8011018:	2100      	movs	r1, #0
 801101a:	2d00      	cmp	r5, #0
 801101c:	da09      	bge.n	8011032 <__kernel_rem_pio2+0x5c2>
 801101e:	f1bb 0f00 	cmp.w	fp, #0
 8011022:	d002      	beq.n	801102a <__kernel_rem_pio2+0x5ba>
 8011024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011028:	4619      	mov	r1, r3
 801102a:	9b01      	ldr	r3, [sp, #4]
 801102c:	e9c3 0100 	strd	r0, r1, [r3]
 8011030:	e791      	b.n	8010f56 <__kernel_rem_pio2+0x4e6>
 8011032:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011036:	f7ef f951 	bl	80002dc <__adddf3>
 801103a:	3d01      	subs	r5, #1
 801103c:	e7ed      	b.n	801101a <__kernel_rem_pio2+0x5aa>
 801103e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011042:	f7ef f94b 	bl	80002dc <__adddf3>
 8011046:	3e01      	subs	r6, #1
 8011048:	e7c0      	b.n	8010fcc <__kernel_rem_pio2+0x55c>
 801104a:	4602      	mov	r2, r0
 801104c:	460b      	mov	r3, r1
 801104e:	e7c5      	b.n	8010fdc <__kernel_rem_pio2+0x56c>
 8011050:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011054:	f7ef f942 	bl	80002dc <__adddf3>
 8011058:	3401      	adds	r4, #1
 801105a:	e7ca      	b.n	8010ff2 <__kernel_rem_pio2+0x582>
 801105c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011060:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011064:	9b02      	ldr	r3, [sp, #8]
 8011066:	3b01      	subs	r3, #1
 8011068:	9302      	str	r3, [sp, #8]
 801106a:	4632      	mov	r2, r6
 801106c:	463b      	mov	r3, r7
 801106e:	4640      	mov	r0, r8
 8011070:	4649      	mov	r1, r9
 8011072:	f7ef f933 	bl	80002dc <__adddf3>
 8011076:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801107a:	4602      	mov	r2, r0
 801107c:	460b      	mov	r3, r1
 801107e:	4640      	mov	r0, r8
 8011080:	4649      	mov	r1, r9
 8011082:	f7ef f929 	bl	80002d8 <__aeabi_dsub>
 8011086:	4632      	mov	r2, r6
 8011088:	463b      	mov	r3, r7
 801108a:	f7ef f927 	bl	80002dc <__adddf3>
 801108e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011092:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011096:	ed8a 7b00 	vstr	d7, [sl]
 801109a:	e76e      	b.n	8010f7a <__kernel_rem_pio2+0x50a>
 801109c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80110a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80110a4:	4640      	mov	r0, r8
 80110a6:	4632      	mov	r2, r6
 80110a8:	463b      	mov	r3, r7
 80110aa:	4649      	mov	r1, r9
 80110ac:	f7ef f916 	bl	80002dc <__adddf3>
 80110b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110b4:	4602      	mov	r2, r0
 80110b6:	460b      	mov	r3, r1
 80110b8:	4640      	mov	r0, r8
 80110ba:	4649      	mov	r1, r9
 80110bc:	f7ef f90c 	bl	80002d8 <__aeabi_dsub>
 80110c0:	4632      	mov	r2, r6
 80110c2:	463b      	mov	r3, r7
 80110c4:	f7ef f90a 	bl	80002dc <__adddf3>
 80110c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80110cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80110d0:	ed84 7b00 	vstr	d7, [r4]
 80110d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80110d8:	e755      	b.n	8010f86 <__kernel_rem_pio2+0x516>
 80110da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80110de:	f7ef f8fd 	bl	80002dc <__adddf3>
 80110e2:	3d01      	subs	r5, #1
 80110e4:	e759      	b.n	8010f9a <__kernel_rem_pio2+0x52a>
 80110e6:	9b01      	ldr	r3, [sp, #4]
 80110e8:	9a01      	ldr	r2, [sp, #4]
 80110ea:	601d      	str	r5, [r3, #0]
 80110ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80110f0:	605c      	str	r4, [r3, #4]
 80110f2:	609f      	str	r7, [r3, #8]
 80110f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80110f8:	60d3      	str	r3, [r2, #12]
 80110fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110fe:	6110      	str	r0, [r2, #16]
 8011100:	6153      	str	r3, [r2, #20]
 8011102:	e728      	b.n	8010f56 <__kernel_rem_pio2+0x4e6>
 8011104:	41700000 	.word	0x41700000
 8011108:	3e700000 	.word	0x3e700000
 801110c:	00000000 	.word	0x00000000

08011110 <__kernel_sin>:
 8011110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011114:	ed2d 8b04 	vpush	{d8-d9}
 8011118:	eeb0 8a41 	vmov.f32	s16, s2
 801111c:	eef0 8a61 	vmov.f32	s17, s3
 8011120:	ec55 4b10 	vmov	r4, r5, d0
 8011124:	b083      	sub	sp, #12
 8011126:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801112a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801112e:	9001      	str	r0, [sp, #4]
 8011130:	da06      	bge.n	8011140 <__kernel_sin+0x30>
 8011132:	ee10 0a10 	vmov	r0, s0
 8011136:	4629      	mov	r1, r5
 8011138:	f7ef fd36 	bl	8000ba8 <__aeabi_d2iz>
 801113c:	2800      	cmp	r0, #0
 801113e:	d051      	beq.n	80111e4 <__kernel_sin+0xd4>
 8011140:	4622      	mov	r2, r4
 8011142:	462b      	mov	r3, r5
 8011144:	4620      	mov	r0, r4
 8011146:	4629      	mov	r1, r5
 8011148:	f7ef fa7e 	bl	8000648 <__aeabi_dmul>
 801114c:	4682      	mov	sl, r0
 801114e:	468b      	mov	fp, r1
 8011150:	4602      	mov	r2, r0
 8011152:	460b      	mov	r3, r1
 8011154:	4620      	mov	r0, r4
 8011156:	4629      	mov	r1, r5
 8011158:	f7ef fa76 	bl	8000648 <__aeabi_dmul>
 801115c:	a341      	add	r3, pc, #260	; (adr r3, 8011264 <__kernel_sin+0x154>)
 801115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011162:	4680      	mov	r8, r0
 8011164:	4689      	mov	r9, r1
 8011166:	4650      	mov	r0, sl
 8011168:	4659      	mov	r1, fp
 801116a:	f7ef fa6d 	bl	8000648 <__aeabi_dmul>
 801116e:	a33f      	add	r3, pc, #252	; (adr r3, 801126c <__kernel_sin+0x15c>)
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	f7ef f8b0 	bl	80002d8 <__aeabi_dsub>
 8011178:	4652      	mov	r2, sl
 801117a:	465b      	mov	r3, fp
 801117c:	f7ef fa64 	bl	8000648 <__aeabi_dmul>
 8011180:	a33c      	add	r3, pc, #240	; (adr r3, 8011274 <__kernel_sin+0x164>)
 8011182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011186:	f7ef f8a9 	bl	80002dc <__adddf3>
 801118a:	4652      	mov	r2, sl
 801118c:	465b      	mov	r3, fp
 801118e:	f7ef fa5b 	bl	8000648 <__aeabi_dmul>
 8011192:	a33a      	add	r3, pc, #232	; (adr r3, 801127c <__kernel_sin+0x16c>)
 8011194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011198:	f7ef f89e 	bl	80002d8 <__aeabi_dsub>
 801119c:	4652      	mov	r2, sl
 801119e:	465b      	mov	r3, fp
 80111a0:	f7ef fa52 	bl	8000648 <__aeabi_dmul>
 80111a4:	a337      	add	r3, pc, #220	; (adr r3, 8011284 <__kernel_sin+0x174>)
 80111a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111aa:	f7ef f897 	bl	80002dc <__adddf3>
 80111ae:	9b01      	ldr	r3, [sp, #4]
 80111b0:	4606      	mov	r6, r0
 80111b2:	460f      	mov	r7, r1
 80111b4:	b9eb      	cbnz	r3, 80111f2 <__kernel_sin+0xe2>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	4650      	mov	r0, sl
 80111bc:	4659      	mov	r1, fp
 80111be:	f7ef fa43 	bl	8000648 <__aeabi_dmul>
 80111c2:	a325      	add	r3, pc, #148	; (adr r3, 8011258 <__kernel_sin+0x148>)
 80111c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c8:	f7ef f886 	bl	80002d8 <__aeabi_dsub>
 80111cc:	4642      	mov	r2, r8
 80111ce:	464b      	mov	r3, r9
 80111d0:	f7ef fa3a 	bl	8000648 <__aeabi_dmul>
 80111d4:	4602      	mov	r2, r0
 80111d6:	460b      	mov	r3, r1
 80111d8:	4620      	mov	r0, r4
 80111da:	4629      	mov	r1, r5
 80111dc:	f7ef f87e 	bl	80002dc <__adddf3>
 80111e0:	4604      	mov	r4, r0
 80111e2:	460d      	mov	r5, r1
 80111e4:	ec45 4b10 	vmov	d0, r4, r5
 80111e8:	b003      	add	sp, #12
 80111ea:	ecbd 8b04 	vpop	{d8-d9}
 80111ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f2:	4b1b      	ldr	r3, [pc, #108]	; (8011260 <__kernel_sin+0x150>)
 80111f4:	ec51 0b18 	vmov	r0, r1, d8
 80111f8:	2200      	movs	r2, #0
 80111fa:	f7ef fa25 	bl	8000648 <__aeabi_dmul>
 80111fe:	4632      	mov	r2, r6
 8011200:	ec41 0b19 	vmov	d9, r0, r1
 8011204:	463b      	mov	r3, r7
 8011206:	4640      	mov	r0, r8
 8011208:	4649      	mov	r1, r9
 801120a:	f7ef fa1d 	bl	8000648 <__aeabi_dmul>
 801120e:	4602      	mov	r2, r0
 8011210:	460b      	mov	r3, r1
 8011212:	ec51 0b19 	vmov	r0, r1, d9
 8011216:	f7ef f85f 	bl	80002d8 <__aeabi_dsub>
 801121a:	4652      	mov	r2, sl
 801121c:	465b      	mov	r3, fp
 801121e:	f7ef fa13 	bl	8000648 <__aeabi_dmul>
 8011222:	ec53 2b18 	vmov	r2, r3, d8
 8011226:	f7ef f857 	bl	80002d8 <__aeabi_dsub>
 801122a:	a30b      	add	r3, pc, #44	; (adr r3, 8011258 <__kernel_sin+0x148>)
 801122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011230:	4606      	mov	r6, r0
 8011232:	460f      	mov	r7, r1
 8011234:	4640      	mov	r0, r8
 8011236:	4649      	mov	r1, r9
 8011238:	f7ef fa06 	bl	8000648 <__aeabi_dmul>
 801123c:	4602      	mov	r2, r0
 801123e:	460b      	mov	r3, r1
 8011240:	4630      	mov	r0, r6
 8011242:	4639      	mov	r1, r7
 8011244:	f7ef f84a 	bl	80002dc <__adddf3>
 8011248:	4602      	mov	r2, r0
 801124a:	460b      	mov	r3, r1
 801124c:	4620      	mov	r0, r4
 801124e:	4629      	mov	r1, r5
 8011250:	f7ef f842 	bl	80002d8 <__aeabi_dsub>
 8011254:	e7c4      	b.n	80111e0 <__kernel_sin+0xd0>
 8011256:	bf00      	nop
 8011258:	55555549 	.word	0x55555549
 801125c:	3fc55555 	.word	0x3fc55555
 8011260:	3fe00000 	.word	0x3fe00000
 8011264:	5acfd57c 	.word	0x5acfd57c
 8011268:	3de5d93a 	.word	0x3de5d93a
 801126c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011270:	3e5ae5e6 	.word	0x3e5ae5e6
 8011274:	57b1fe7d 	.word	0x57b1fe7d
 8011278:	3ec71de3 	.word	0x3ec71de3
 801127c:	19c161d5 	.word	0x19c161d5
 8011280:	3f2a01a0 	.word	0x3f2a01a0
 8011284:	1110f8a6 	.word	0x1110f8a6
 8011288:	3f811111 	.word	0x3f811111

0801128c <fabs>:
 801128c:	ec51 0b10 	vmov	r0, r1, d0
 8011290:	ee10 2a10 	vmov	r2, s0
 8011294:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011298:	ec43 2b10 	vmov	d0, r2, r3
 801129c:	4770      	bx	lr
	...

080112a0 <floor>:
 80112a0:	ec51 0b10 	vmov	r0, r1, d0
 80112a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80112ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80112b0:	2e13      	cmp	r6, #19
 80112b2:	ee10 5a10 	vmov	r5, s0
 80112b6:	ee10 8a10 	vmov	r8, s0
 80112ba:	460c      	mov	r4, r1
 80112bc:	dc32      	bgt.n	8011324 <floor+0x84>
 80112be:	2e00      	cmp	r6, #0
 80112c0:	da14      	bge.n	80112ec <floor+0x4c>
 80112c2:	a333      	add	r3, pc, #204	; (adr r3, 8011390 <floor+0xf0>)
 80112c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c8:	f7ef f808 	bl	80002dc <__adddf3>
 80112cc:	2200      	movs	r2, #0
 80112ce:	2300      	movs	r3, #0
 80112d0:	f7ef fc4a 	bl	8000b68 <__aeabi_dcmpgt>
 80112d4:	b138      	cbz	r0, 80112e6 <floor+0x46>
 80112d6:	2c00      	cmp	r4, #0
 80112d8:	da57      	bge.n	801138a <floor+0xea>
 80112da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80112de:	431d      	orrs	r5, r3
 80112e0:	d001      	beq.n	80112e6 <floor+0x46>
 80112e2:	4c2d      	ldr	r4, [pc, #180]	; (8011398 <floor+0xf8>)
 80112e4:	2500      	movs	r5, #0
 80112e6:	4621      	mov	r1, r4
 80112e8:	4628      	mov	r0, r5
 80112ea:	e025      	b.n	8011338 <floor+0x98>
 80112ec:	4f2b      	ldr	r7, [pc, #172]	; (801139c <floor+0xfc>)
 80112ee:	4137      	asrs	r7, r6
 80112f0:	ea01 0307 	and.w	r3, r1, r7
 80112f4:	4303      	orrs	r3, r0
 80112f6:	d01f      	beq.n	8011338 <floor+0x98>
 80112f8:	a325      	add	r3, pc, #148	; (adr r3, 8011390 <floor+0xf0>)
 80112fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fe:	f7ee ffed 	bl	80002dc <__adddf3>
 8011302:	2200      	movs	r2, #0
 8011304:	2300      	movs	r3, #0
 8011306:	f7ef fc2f 	bl	8000b68 <__aeabi_dcmpgt>
 801130a:	2800      	cmp	r0, #0
 801130c:	d0eb      	beq.n	80112e6 <floor+0x46>
 801130e:	2c00      	cmp	r4, #0
 8011310:	bfbe      	ittt	lt
 8011312:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011316:	fa43 f606 	asrlt.w	r6, r3, r6
 801131a:	19a4      	addlt	r4, r4, r6
 801131c:	ea24 0407 	bic.w	r4, r4, r7
 8011320:	2500      	movs	r5, #0
 8011322:	e7e0      	b.n	80112e6 <floor+0x46>
 8011324:	2e33      	cmp	r6, #51	; 0x33
 8011326:	dd0b      	ble.n	8011340 <floor+0xa0>
 8011328:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801132c:	d104      	bne.n	8011338 <floor+0x98>
 801132e:	ee10 2a10 	vmov	r2, s0
 8011332:	460b      	mov	r3, r1
 8011334:	f7ee ffd2 	bl	80002dc <__adddf3>
 8011338:	ec41 0b10 	vmov	d0, r0, r1
 801133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011340:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011344:	f04f 33ff 	mov.w	r3, #4294967295
 8011348:	fa23 f707 	lsr.w	r7, r3, r7
 801134c:	4207      	tst	r7, r0
 801134e:	d0f3      	beq.n	8011338 <floor+0x98>
 8011350:	a30f      	add	r3, pc, #60	; (adr r3, 8011390 <floor+0xf0>)
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ee ffc1 	bl	80002dc <__adddf3>
 801135a:	2200      	movs	r2, #0
 801135c:	2300      	movs	r3, #0
 801135e:	f7ef fc03 	bl	8000b68 <__aeabi_dcmpgt>
 8011362:	2800      	cmp	r0, #0
 8011364:	d0bf      	beq.n	80112e6 <floor+0x46>
 8011366:	2c00      	cmp	r4, #0
 8011368:	da02      	bge.n	8011370 <floor+0xd0>
 801136a:	2e14      	cmp	r6, #20
 801136c:	d103      	bne.n	8011376 <floor+0xd6>
 801136e:	3401      	adds	r4, #1
 8011370:	ea25 0507 	bic.w	r5, r5, r7
 8011374:	e7b7      	b.n	80112e6 <floor+0x46>
 8011376:	2301      	movs	r3, #1
 8011378:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801137c:	fa03 f606 	lsl.w	r6, r3, r6
 8011380:	4435      	add	r5, r6
 8011382:	4545      	cmp	r5, r8
 8011384:	bf38      	it	cc
 8011386:	18e4      	addcc	r4, r4, r3
 8011388:	e7f2      	b.n	8011370 <floor+0xd0>
 801138a:	2500      	movs	r5, #0
 801138c:	462c      	mov	r4, r5
 801138e:	e7aa      	b.n	80112e6 <floor+0x46>
 8011390:	8800759c 	.word	0x8800759c
 8011394:	7e37e43c 	.word	0x7e37e43c
 8011398:	bff00000 	.word	0xbff00000
 801139c:	000fffff 	.word	0x000fffff

080113a0 <scalbn>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	ec55 4b10 	vmov	r4, r5, d0
 80113a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80113aa:	4606      	mov	r6, r0
 80113ac:	462b      	mov	r3, r5
 80113ae:	b99a      	cbnz	r2, 80113d8 <scalbn+0x38>
 80113b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80113b4:	4323      	orrs	r3, r4
 80113b6:	d036      	beq.n	8011426 <scalbn+0x86>
 80113b8:	4b39      	ldr	r3, [pc, #228]	; (80114a0 <scalbn+0x100>)
 80113ba:	4629      	mov	r1, r5
 80113bc:	ee10 0a10 	vmov	r0, s0
 80113c0:	2200      	movs	r2, #0
 80113c2:	f7ef f941 	bl	8000648 <__aeabi_dmul>
 80113c6:	4b37      	ldr	r3, [pc, #220]	; (80114a4 <scalbn+0x104>)
 80113c8:	429e      	cmp	r6, r3
 80113ca:	4604      	mov	r4, r0
 80113cc:	460d      	mov	r5, r1
 80113ce:	da10      	bge.n	80113f2 <scalbn+0x52>
 80113d0:	a32b      	add	r3, pc, #172	; (adr r3, 8011480 <scalbn+0xe0>)
 80113d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d6:	e03a      	b.n	801144e <scalbn+0xae>
 80113d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80113dc:	428a      	cmp	r2, r1
 80113de:	d10c      	bne.n	80113fa <scalbn+0x5a>
 80113e0:	ee10 2a10 	vmov	r2, s0
 80113e4:	4620      	mov	r0, r4
 80113e6:	4629      	mov	r1, r5
 80113e8:	f7ee ff78 	bl	80002dc <__adddf3>
 80113ec:	4604      	mov	r4, r0
 80113ee:	460d      	mov	r5, r1
 80113f0:	e019      	b.n	8011426 <scalbn+0x86>
 80113f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80113f6:	460b      	mov	r3, r1
 80113f8:	3a36      	subs	r2, #54	; 0x36
 80113fa:	4432      	add	r2, r6
 80113fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011400:	428a      	cmp	r2, r1
 8011402:	dd08      	ble.n	8011416 <scalbn+0x76>
 8011404:	2d00      	cmp	r5, #0
 8011406:	a120      	add	r1, pc, #128	; (adr r1, 8011488 <scalbn+0xe8>)
 8011408:	e9d1 0100 	ldrd	r0, r1, [r1]
 801140c:	da1c      	bge.n	8011448 <scalbn+0xa8>
 801140e:	a120      	add	r1, pc, #128	; (adr r1, 8011490 <scalbn+0xf0>)
 8011410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011414:	e018      	b.n	8011448 <scalbn+0xa8>
 8011416:	2a00      	cmp	r2, #0
 8011418:	dd08      	ble.n	801142c <scalbn+0x8c>
 801141a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801141e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011426:	ec45 4b10 	vmov	d0, r4, r5
 801142a:	bd70      	pop	{r4, r5, r6, pc}
 801142c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011430:	da19      	bge.n	8011466 <scalbn+0xc6>
 8011432:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011436:	429e      	cmp	r6, r3
 8011438:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801143c:	dd0a      	ble.n	8011454 <scalbn+0xb4>
 801143e:	a112      	add	r1, pc, #72	; (adr r1, 8011488 <scalbn+0xe8>)
 8011440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1e2      	bne.n	801140e <scalbn+0x6e>
 8011448:	a30f      	add	r3, pc, #60	; (adr r3, 8011488 <scalbn+0xe8>)
 801144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144e:	f7ef f8fb 	bl	8000648 <__aeabi_dmul>
 8011452:	e7cb      	b.n	80113ec <scalbn+0x4c>
 8011454:	a10a      	add	r1, pc, #40	; (adr r1, 8011480 <scalbn+0xe0>)
 8011456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d0b8      	beq.n	80113d0 <scalbn+0x30>
 801145e:	a10e      	add	r1, pc, #56	; (adr r1, 8011498 <scalbn+0xf8>)
 8011460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011464:	e7b4      	b.n	80113d0 <scalbn+0x30>
 8011466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801146a:	3236      	adds	r2, #54	; 0x36
 801146c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011470:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011474:	4620      	mov	r0, r4
 8011476:	4b0c      	ldr	r3, [pc, #48]	; (80114a8 <scalbn+0x108>)
 8011478:	2200      	movs	r2, #0
 801147a:	e7e8      	b.n	801144e <scalbn+0xae>
 801147c:	f3af 8000 	nop.w
 8011480:	c2f8f359 	.word	0xc2f8f359
 8011484:	01a56e1f 	.word	0x01a56e1f
 8011488:	8800759c 	.word	0x8800759c
 801148c:	7e37e43c 	.word	0x7e37e43c
 8011490:	8800759c 	.word	0x8800759c
 8011494:	fe37e43c 	.word	0xfe37e43c
 8011498:	c2f8f359 	.word	0xc2f8f359
 801149c:	81a56e1f 	.word	0x81a56e1f
 80114a0:	43500000 	.word	0x43500000
 80114a4:	ffff3cb0 	.word	0xffff3cb0
 80114a8:	3c900000 	.word	0x3c900000

080114ac <_init>:
 80114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ae:	bf00      	nop
 80114b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114b2:	bc08      	pop	{r3}
 80114b4:	469e      	mov	lr, r3
 80114b6:	4770      	bx	lr

080114b8 <_fini>:
 80114b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ba:	bf00      	nop
 80114bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114be:	bc08      	pop	{r3}
 80114c0:	469e      	mov	lr, r3
 80114c2:	4770      	bx	lr
