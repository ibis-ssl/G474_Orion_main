
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbc4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800fda8  0800fda8  0001fda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801026c  0801026c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801026c  0801026c  0002026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010274  08010274  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010274  08010274  00020274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010278  08010278  00020278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801027c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000934  200001e4  08010460  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  08010460  00030b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002645d  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a7e  00000000  00000000  00056671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  0005b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf0  00000000  00000000  0005cee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d54a  00000000  00000000  0005ead8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000252ac  00000000  00000000  0008c022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dd78  00000000  00000000  000b12ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cf046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090cc  00000000  00000000  001cf098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fd8c 	.word	0x0800fd8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800fd8c 	.word	0x0800fd8c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fe6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 fc60 	bl	80058b8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	ed97 0a00 	vldr	s0, [r7]
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fc59 	bl	80058b8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001016:	7a3b      	ldrb	r3, [r7, #8]
 8001018:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800101a:	7a7b      	ldrb	r3, [r7, #9]
 800101c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	75fb      	strb	r3, [r7, #23]

	can1_send(0x100, senddata_motor);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001030:	f000 fc4e 	bl	80018d0 <can1_send>
}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
 8001046:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fc30 	bl	80058b8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 8001058:	f107 0308 	add.w	r3, r7, #8
 800105c:	ed97 0a00 	vldr	s0, [r7]
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fc29 	bl	80058b8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001066:	7b3b      	ldrb	r3, [r7, #12]
 8001068:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001076:	7a3b      	ldrb	r3, [r7, #8]
 8001078:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800107a:	7a7b      	ldrb	r3, [r7, #9]
 800107c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800107e:	7abb      	ldrb	r3, [r7, #10]
 8001080:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001082:	7afb      	ldrb	r3, [r7, #11]
 8001084:	75fb      	strb	r3, [r7, #23]

	can1_send(0x101, senddata_motor);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	f240 1001 	movw	r0, #257	; 0x101
 8001090:	f000 fc1e 	bl	80018d0 <can1_send>
}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a6:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fc00 	bl	80058b8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	ed97 0a00 	vldr	s0, [r7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fbf9 	bl	80058b8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 80010ca:	7b7b      	ldrb	r3, [r7, #13]
 80010cc:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 80010d6:	7a3b      	ldrb	r3, [r7, #8]
 80010d8:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 80010da:	7a7b      	ldrb	r3, [r7, #9]
 80010dc:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	75fb      	strb	r3, [r7, #23]

	can2_send(0x102, senddata_motor);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	f44f 7081 	mov.w	r0, #258	; 0x102
 80010f0:	f000 fc4e 	bl	8001990 <can2_send>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0a01 	vstr	s0, [r7, #4]
 8001106:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f004 fbd0 	bl	80058b8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	ed97 0a00 	vldr	s0, [r7]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fbc9 	bl	80058b8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001126:	7b3b      	ldrb	r3, [r7, #12]
 8001128:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001136:	7a3b      	ldrb	r3, [r7, #8]
 8001138:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800113a:	7a7b      	ldrb	r3, [r7, #9]
 800113c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	75fb      	strb	r3, [r7, #23]

	can2_send(0x103, senddata_motor);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	f240 1003 	movw	r0, #259	; 0x103
 8001150:	f000 fc1e 	bl	8001990 <can2_send>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	ed87 0a01 	vstr	s0, [r7, #4]
 8001166:	edc7 0a00 	vstr	s1, [r7]
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f004 fba0 	bl	80058b8 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	ed97 0a00 	vldr	s0, [r7]
 8001180:	4618      	mov	r0, r3
 8001182:	f004 fb99 	bl	80058b8 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
 8001186:	7b3b      	ldrb	r3, [r7, #12]
 8001188:	743b      	strb	r3, [r7, #16]
	senddata_motor[1]=senddata_motor_power[1];
 800118a:	7b7b      	ldrb	r3, [r7, #13]
 800118c:	747b      	strb	r3, [r7, #17]
	senddata_motor[2]=senddata_motor_power[2];
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	74bb      	strb	r3, [r7, #18]
	senddata_motor[3]=senddata_motor_power[3];
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	74fb      	strb	r3, [r7, #19]
	senddata_motor[4]=senddata_motor_Duty[0];
 8001196:	7a3b      	ldrb	r3, [r7, #8]
 8001198:	753b      	strb	r3, [r7, #20]
	senddata_motor[5]=senddata_motor_Duty[1];
 800119a:	7a7b      	ldrb	r3, [r7, #9]
 800119c:	757b      	strb	r3, [r7, #21]
	senddata_motor[6]=senddata_motor_Duty[2];
 800119e:	7abb      	ldrb	r3, [r7, #10]
 80011a0:	75bb      	strb	r3, [r7, #22]
	senddata_motor[7]=senddata_motor_Duty[3];
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	75fb      	strb	r3, [r7, #23]

	can1_send(0x104, senddata_motor);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	f44f 7082 	mov.w	r0, #260	; 0x104
 80011b0:	f000 fb8e 	bl	80018d0 <can1_send>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fb72 	bl	80058b8 <float_to_uchar4>

	senddata_kick[0]=0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	743b      	strb	r3, [r7, #16]
	senddata_kick[1]=senddata_voltage[0];
 80011d8:	7b3b      	ldrb	r3, [r7, #12]
 80011da:	747b      	strb	r3, [r7, #17]
	senddata_kick[2]=senddata_voltage[1];
 80011dc:	7b7b      	ldrb	r3, [r7, #13]
 80011de:	74bb      	strb	r3, [r7, #18]
	senddata_kick[3]=senddata_voltage[2];
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	74fb      	strb	r3, [r7, #19]
	senddata_kick[4]=senddata_voltage[3];
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	753b      	strb	r3, [r7, #20]
	can1_send(0x110, senddata_kick);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 7088 	mov.w	r0, #272	; 0x110
 80011f2:	f000 fb6d 	bl	80018d0 <can1_send>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	460a      	mov	r2, r1
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	71bb      	strb	r3, [r7, #6]
	/* id 1: 0=>standby   1=>charge
	 * id 2: 0=>straight  1=>chip
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	723b      	strb	r3, [r7, #8]
	senddata_kick[1]=param;
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	727b      	strb	r3, [r7, #9]
	can1_send(0x110, senddata_kick);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001220:	f000 fb56 	bl	80018d0 <can1_send>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 8001236:	2300      	movs	r3, #0
 8001238:	723b      	strb	r3, [r7, #8]
	senddata_power[1]=power_on;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	727b      	strb	r3, [r7, #9]
	can1_send(0x010, senddata_power);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4619      	mov	r1, r3
 8001244:	2010      	movs	r0, #16
 8001246:	f000 fb43 	bl	80018d0 <can1_send>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	ed87 0a00 	vstr	s0, [r7]
 800125e:	71fb      	strb	r3, [r7, #7]
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	ed97 0a00 	vldr	s0, [r7]
 8001268:	4618      	mov	r0, r3
 800126a:	f004 fb25 	bl	80058b8 <float_to_uchar4>
	senddata_power_param[0]=id;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	723b      	strb	r3, [r7, #8]
	senddata_power_param[1]=senddata_power_param_temp[0];
 8001272:	7c3b      	ldrb	r3, [r7, #16]
 8001274:	727b      	strb	r3, [r7, #9]
	senddata_power_param[2]=senddata_power_param_temp[1];
 8001276:	7c7b      	ldrb	r3, [r7, #17]
 8001278:	72bb      	strb	r3, [r7, #10]
	senddata_power_param[3]=senddata_power_param_temp[2];
 800127a:	7cbb      	ldrb	r3, [r7, #18]
 800127c:	72fb      	strb	r3, [r7, #11]
	senddata_power_param[4]=senddata_power_param_temp[3];
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	733b      	strb	r3, [r7, #12]

	can1_send(0x010, senddata_power_param);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4619      	mov	r1, r3
 8001288:	2010      	movs	r0, #16
 800128a:	f000 fb21 	bl	80018d0 <can1_send>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <actuator_buzzer+0x38>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	22fa      	movs	r2, #250	; 0xfa
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(ontime);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 fbd8 	bl	8005a68 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <actuator_buzzer+0x38>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fbd0 	bl	8005a68 <HAL_Delay>

}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200007f8 	.word	0x200007f8

080012d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2220      	movs	r2, #32
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00b fed5 	bl	800d09c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <MX_ADC1_Init+0xe8>)
 80012fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <MX_ADC1_Init+0xe8>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <MX_ADC1_Init+0xe8>)
 800131c:	2204      	movs	r2, #4
 800131e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001328:	2201      	movs	r2, #1
 800132a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_ADC1_Init+0xe8>)
 800132e:	2201      	movs	r2, #1
 8001330:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_ADC1_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	4817      	ldr	r0, [pc, #92]	; (80013bc <MX_ADC1_Init+0xe8>)
 800135e:	f004 fdc7 	bl	8005ef0 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001368:	f003 fc10 	bl	8004b8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <MX_ADC1_Init+0xe8>)
 8001378:	f005 fdca 	bl	8006f10 <HAL_ADCEx_MultiModeConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001382:	f003 fc03 	bl	8004b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_ADC1_Init+0xec>)
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138a:	2306      	movs	r3, #6
 800138c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800138e:	2307      	movs	r3, #7
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001392:	237f      	movs	r3, #127	; 0x7f
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001396:	2304      	movs	r3, #4
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <MX_ADC1_Init+0xe8>)
 80013a4:	f005 f858 	bl	8006458 <HAL_ADC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013ae:	f003 fbed 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	; 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000200 	.word	0x20000200
 80013c0:	3ef08000 	.word	0x3ef08000

080013c4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	; 0x30
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2220      	movs	r2, #32
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f00b fe5d 	bl	800d09c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013e4:	4a31      	ldr	r2, [pc, #196]	; (80014ac <MX_ADC3_Init+0xe8>)
 80013e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MX_ADC3_Init+0xe4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800140a:	2204      	movs	r2, #4
 800140c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001410:	2200      	movs	r2, #0
 8001412:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001416:	2201      	movs	r2, #1
 8001418:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800141c:	2201      	movs	r2, #1
 800141e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <MX_ADC3_Init+0xe4>)
 800144c:	f004 fd50 	bl	8005ef0 <HAL_ADC_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001456:	f003 fb99 	bl	8004b8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4810      	ldr	r0, [pc, #64]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001466:	f005 fd53 	bl	8006f10 <HAL_ADCEx_MultiModeConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001470:	f003 fb8c 	bl	8004b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_ADC3_Init+0xec>)
 8001476:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001478:	2306      	movs	r3, #6
 800147a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800147c:	2307      	movs	r3, #7
 800147e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001480:	237f      	movs	r3, #127	; 0x7f
 8001482:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001484:	2304      	movs	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_ADC3_Init+0xe4>)
 8001492:	f004 ffe1 	bl	8006458 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800149c:	f003 fb76 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000026c 	.word	0x2000026c
 80014ac:	50000400 	.word	0x50000400
 80014b0:	04300002 	.word	0x04300002

080014b4 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00b fdeb 	bl	800d09c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80014c6:	4b32      	ldr	r3, [pc, #200]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014c8:	4a32      	ldr	r2, [pc, #200]	; (8001594 <MX_ADC5_Init+0xe0>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b30      	ldr	r3, [pc, #192]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80014e0:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e6:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <MX_ADC5_Init+0xdc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001500:	2201      	movs	r2, #1
 8001502:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <MX_ADC5_Init+0xdc>)
 800150e:	2200      	movs	r2, #0
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC5_Init+0xdc>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001522:	2200      	movs	r2, #0
 8001524:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_4;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001530:	2204      	movs	r2, #4
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	649a      	str	r2, [r3, #72]	; 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC5_Init+0xdc>)
 800153c:	2200      	movs	r2, #0
 800153e:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001542:	2201      	movs	r2, #1
 8001544:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001546:	4812      	ldr	r0, [pc, #72]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001548:	f004 fcd2 	bl	8005ef0 <HAL_ADC_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8001552:	f003 fb1b 	bl	8004b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_ADC5_Init+0xe4>)
 8001558:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155a:	2306      	movs	r3, #6
 800155c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800155e:	2307      	movs	r3, #7
 8001560:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001562:	237f      	movs	r3, #127	; 0x7f
 8001564:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001566:	2304      	movs	r3, #4
 8001568:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSaturation = DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	773b      	strb	r3, [r7, #28]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001572:	463b      	mov	r3, r7
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_ADC5_Init+0xdc>)
 8001578:	f004 ff6e 	bl	8006458 <HAL_ADC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_ADC5_Init+0xd2>
  {
    Error_Handler();
 8001582:	f003 fb03 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3720      	adds	r7, #32
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002d8 	.word	0x200002d8
 8001594:	50000600 	.word	0x50000600
 8001598:	08600004 	.word	0x08600004

0800159c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a2      	sub	sp, #136	; 0x88
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	2254      	movs	r2, #84	; 0x54
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f00b fd6d 	bl	800d09c <memset>
  if(adcHandle->Instance==ADC1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ca:	d15f      	bne.n	800168c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4618      	mov	r0, r3
 80015de:	f008 f829 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015e8:	f003 fad0 	bl	8004b8c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015ec:	4b98      	ldr	r3, [pc, #608]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80015ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f0:	4a97      	ldr	r2, [pc, #604]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80015f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f8:	4b95      	ldr	r3, [pc, #596]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	4a91      	ldr	r2, [pc, #580]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001610:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800161c:	2301      	movs	r3, #1
 800161e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001620:	2303      	movs	r3, #3
 8001622:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800162c:	4619      	mov	r1, r3
 800162e:	4889      	ldr	r0, [pc, #548]	; (8001854 <HAL_ADC_MspInit+0x2b8>)
 8001630:	f007 f834 	bl	800869c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 8001634:	4b88      	ldr	r3, [pc, #544]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001636:	4a89      	ldr	r2, [pc, #548]	; (800185c <HAL_ADC_MspInit+0x2c0>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800163a:	4b87      	ldr	r3, [pc, #540]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800163c:	2205      	movs	r2, #5
 800163e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001640:	4b85      	ldr	r3, [pc, #532]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b84      	ldr	r3, [pc, #528]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001652:	4b81      	ldr	r3, [pc, #516]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001658:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165a:	4b7f      	ldr	r3, [pc, #508]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800165c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001662:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001664:	2220      	movs	r2, #32
 8001666:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001668:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800166e:	487a      	ldr	r0, [pc, #488]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001670:	f005 fe66 	bl	8007340 <HAL_DMA_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800167a:	f003 fa87 	bl	8004b8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
 8001684:	4a74      	ldr	r2, [pc, #464]	; (8001858 <HAL_ADC_MspInit+0x2bc>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 800168a:	e0dc      	b.n	8001846 <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a73      	ldr	r2, [pc, #460]	; (8001860 <HAL_ADC_MspInit+0x2c4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d168      	bne.n	8001768 <HAL_ADC_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800169c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016a0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a2:	f107 0320 	add.w	r3, r7, #32
 80016a6:	4618      	mov	r0, r3
 80016a8:	f007 ffc4 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80016b2:	f003 fa6b 	bl	8004b8c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80016b6:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	4a69      	ldr	r2, [pc, #420]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 80016be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10b      	bne.n	80016e0 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80016c8:	4b61      	ldr	r3, [pc, #388]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016cc:	4a60      	ldr	r2, [pc, #384]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d4:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80016f8:	2302      	movs	r3, #2
 80016fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	2303      	movs	r3, #3
 80016fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001708:	4619      	mov	r1, r3
 800170a:	4852      	ldr	r0, [pc, #328]	; (8001854 <HAL_ADC_MspInit+0x2b8>)
 800170c:	f006 ffc6 	bl	800869c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001712:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_ADC_MspInit+0x2d0>)
 8001714:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001718:	2225      	movs	r2, #37	; 0x25
 800171a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171c:	4b52      	ldr	r3, [pc, #328]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001728:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172e:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001736:	4b4c      	ldr	r3, [pc, #304]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800173c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001740:	2220      	movs	r2, #32
 8001742:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800174a:	4847      	ldr	r0, [pc, #284]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800174c:	f005 fdf8 	bl	8007340 <HAL_DMA_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 8001756:	f003 fa19 	bl	8004b8c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a42      	ldr	r2, [pc, #264]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
 8001760:	4a41      	ldr	r2, [pc, #260]	; (8001868 <HAL_ADC_MspInit+0x2cc>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001766:	e06e      	b.n	8001846 <HAL_ADC_MspInit+0x2aa>
  else if(adcHandle->Instance==ADC5)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a40      	ldr	r2, [pc, #256]	; (8001870 <HAL_ADC_MspInit+0x2d4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d169      	bne.n	8001846 <HAL_ADC_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800177c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	4618      	mov	r0, r3
 8001784:	f007 ff56 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_ADC_MspInit+0x1f6>
      Error_Handler();
 800178e:	f003 f9fd 	bl	8004b8c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 800179a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800179c:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_ADC_MspInit+0x2c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10b      	bne.n	80017bc <HAL_ADC_MspInit+0x220>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	4a29      	ldr	r2, [pc, #164]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	4a23      	ldr	r2, [pc, #140]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_ADC_MspInit+0x2b4>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017e6:	4619      	mov	r1, r3
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f006 ff56 	bl	800869c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_ADC_MspInit+0x2dc>)
 80017f4:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 80017f8:	2227      	movs	r2, #39	; 0x27
 80017fa:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001814:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001820:	2220      	movs	r2, #32
 8001822:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800182a:	4812      	ldr	r0, [pc, #72]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 800182c:	f005 fd88 	bl	8007340 <HAL_DMA_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_ADC_MspInit+0x29e>
      Error_Handler();
 8001836:	f003 f9a9 	bl	8004b8c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 800183e:	655a      	str	r2, [r3, #84]	; 0x54
 8001840:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <HAL_ADC_MspInit+0x2d8>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001846:	bf00      	nop
 8001848:	3788      	adds	r7, #136	; 0x88
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	48000400 	.word	0x48000400
 8001858:	20000344 	.word	0x20000344
 800185c:	40020058 	.word	0x40020058
 8001860:	50000400 	.word	0x50000400
 8001864:	20000464 	.word	0x20000464
 8001868:	200003a4 	.word	0x200003a4
 800186c:	40020030 	.word	0x40020030
 8001870:	50000600 	.word	0x50000600
 8001874:	20000404 	.word	0x20000404
 8001878:	40020044 	.word	0x40020044

0800187c <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800188c:	2302      	movs	r3, #2
 800188e:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4619      	mov	r1, r3
 80018a2:	480a      	ldr	r0, [pc, #40]	; (80018cc <can1_init_ibis+0x50>)
 80018a4:	f006 f9d8 	bl	8007c58 <HAL_FDCAN_ConfigFilter>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <can1_init_ibis+0x36>
		  {
			  Error_Handler();
 80018ae:	f003 f96d 	bl	8004b8c <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <can1_init_ibis+0x50>)
 80018b4:	f006 fa2a 	bl	8007d0c <HAL_FDCAN_Start>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <can1_init_ibis+0x46>
 80018be:	f003 f965 	bl	8004b8c <Error_Handler>
}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000468 	.word	0x20000468

080018d0 <can1_send>:

void can1_send(int id, uint8_t senddata[]){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a15      	ldr	r2, [pc, #84]	; (8001934 <can1_send+0x64>)
 80018de:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <can1_send+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <can1_send+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <can1_send+0x64>)
 80018ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018f2:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <can1_send+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <can1_send+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <can1_send+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <can1_send+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <can1_send+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 8001912:	bf00      	nop
 8001914:	4808      	ldr	r0, [pc, #32]	; (8001938 <can1_send+0x68>)
 8001916:	f006 fb3f 	bl	8007f98 <HAL_FDCAN_GetTxFifoFreeLevel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b03      	cmp	r3, #3
 800191e:	d1f9      	bne.n	8001914 <can1_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4904      	ldr	r1, [pc, #16]	; (8001934 <can1_send+0x64>)
 8001924:	4804      	ldr	r0, [pc, #16]	; (8001938 <can1_send+0x68>)
 8001926:	f006 fa19 	bl	8007d5c <HAL_FDCAN_AddMessageToTxFifoQ>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000738 	.word	0x20000738
 8001938:	20000468 	.word	0x20000468

0800193c <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800194c:	2302      	movs	r3, #2
 800194e:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001950:	2301      	movs	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x000;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x000;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	4619      	mov	r1, r3
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <can2_init_ibis+0x50>)
 8001964:	f006 f978 	bl	8007c58 <HAL_FDCAN_ConfigFilter>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <can2_init_ibis+0x36>
		  {
			  Error_Handler();
 800196e:	f003 f90d 	bl	8004b8c <Error_Handler>
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001972:	4806      	ldr	r0, [pc, #24]	; (800198c <can2_init_ibis+0x50>)
 8001974:	f006 f9ca 	bl	8007d0c <HAL_FDCAN_Start>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <can2_init_ibis+0x46>
 800197e:	f003 f905 	bl	8004b8c <Error_Handler>
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200004cc 	.word	0x200004cc

08001990 <can2_send>:

void can2_send(int id, uint8_t senddata[]){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]

	TxHeader.Identifier =id;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <can2_send+0x64>)
 800199e:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <can2_send+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <can2_send+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <can2_send+0x64>)
 80019ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b2:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <can2_send+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <can2_send+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <can2_send+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <can2_send+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <can2_send+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 80019d2:	bf00      	nop
 80019d4:	4808      	ldr	r0, [pc, #32]	; (80019f8 <can2_send+0x68>)
 80019d6:	f006 fadf 	bl	8007f98 <HAL_FDCAN_GetTxFifoFreeLevel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d1f9      	bne.n	80019d4 <can2_send+0x44>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4904      	ldr	r1, [pc, #16]	; (80019f4 <can2_send+0x64>)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <can2_send+0x68>)
 80019e6:	f006 f9b9 	bl	8007d5c <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000738 	.word	0x20000738
 80019f8:	200004cc 	.word	0x200004cc

080019fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1e:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6493      	str	r3, [r2, #72]	; 0x48
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_DMA_Init+0x90>)
 8001a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2102      	movs	r1, #2
 8001a36:	200b      	movs	r0, #11
 8001a38:	f005 fc4d 	bl	80072d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a3c:	200b      	movs	r0, #11
 8001a3e:	f005 fc64 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2105      	movs	r1, #5
 8001a46:	200c      	movs	r0, #12
 8001a48:	f005 fc45 	bl	80072d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f005 fc5c 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2109      	movs	r1, #9
 8001a56:	200d      	movs	r0, #13
 8001a58:	f005 fc3d 	bl	80072d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a5c:	200d      	movs	r0, #13
 8001a5e:	f005 fc54 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	210a      	movs	r1, #10
 8001a66:	200e      	movs	r0, #14
 8001a68:	f005 fc35 	bl	80072d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001a6c:	200e      	movs	r0, #14
 8001a6e:	f005 fc4c 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	210b      	movs	r1, #11
 8001a76:	200f      	movs	r0, #15
 8001a78:	f005 fc2d 	bl	80072d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f005 fc44 	bl	800730a <HAL_NVIC_EnableIRQ>

}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001a96:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <MX_FDCAN1_Init+0x88>)
 8001a98:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001aa0:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001acc:	220e      	movs	r2, #14
 8001ace:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ad8:	220a      	movs	r2, #10
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_FDCAN1_Init+0x84>)
 8001b02:	f005 ff4f 	bl	80079a4 <HAL_FDCAN_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001b0c:	f003 f83e 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000468 	.word	0x20000468
 8001b18:	40006400 	.word	0x40006400

08001b1c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <MX_FDCAN2_Init+0x88>)
 8001b24:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 10;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b4c:	220a      	movs	r2, #10
 8001b4e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b58:	220e      	movs	r2, #14
 8001b5a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 10;
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b64:	220a      	movs	r2, #10
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b70:	220c      	movs	r2, #12
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b76:	2202      	movs	r2, #2
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_FDCAN2_Init+0x84>)
 8001b8e:	f005 ff09 	bl	80079a4 <HAL_FDCAN_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001b98:	f002 fff8 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200004cc 	.word	0x200004cc
 8001ba4:	40006800 	.word	0x40006800

08001ba8 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b0a0      	sub	sp, #128	; 0x80
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	2254      	movs	r2, #84	; 0x54
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00b fa67 	bl	800d09c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <HAL_FDCAN_MspInit+0x190>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d153      	bne.n	8001c80 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f007 fd23 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001bf4:	f002 ffca 	bl	8004b8c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001c00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d10b      	bne.n	8001c22 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001c0a:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	4a46      	ldr	r2, [pc, #280]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2e:	4b44      	ldr	r3, [pc, #272]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c4c:	2309      	movs	r3, #9
 8001c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5a:	f006 fd1f 	bl	800869c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2103      	movs	r1, #3
 8001c62:	2015      	movs	r0, #21
 8001c64:	f005 fb37 	bl	80072d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001c68:	2015      	movs	r0, #21
 8001c6a:	f005 fb4e 	bl	800730a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2104      	movs	r1, #4
 8001c72:	2016      	movs	r0, #22
 8001c74:	f005 fb2f 	bl	80072d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001c78:	2016      	movs	r0, #22
 8001c7a:	f005 fb46 	bl	800730a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001c7e:	e056      	b.n	8001d2e <HAL_FDCAN_MspInit+0x186>
  else if(fdcanHandle->Instance==FDCAN2)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <HAL_FDCAN_MspInit+0x19c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d151      	bne.n	8001d2e <HAL_FDCAN_MspInit+0x186>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c94:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f007 fcca 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8001ca6:	f002 ff71 	bl	8004b8c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001cb2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_FDCAN_MspInit+0x194>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10b      	bne.n	8001cd4 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001cda:	f043 0302 	orr.w	r3, r3, #2
 8001cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_FDCAN_MspInit+0x198>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001cec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001cfe:	2309      	movs	r3, #9
 8001d00:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d06:	4619      	mov	r1, r3
 8001d08:	480f      	ldr	r0, [pc, #60]	; (8001d48 <HAL_FDCAN_MspInit+0x1a0>)
 8001d0a:	f006 fcc7 	bl	800869c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2106      	movs	r1, #6
 8001d12:	2056      	movs	r0, #86	; 0x56
 8001d14:	f005 fadf 	bl	80072d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001d18:	2056      	movs	r0, #86	; 0x56
 8001d1a:	f005 faf6 	bl	800730a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2107      	movs	r1, #7
 8001d22:	2057      	movs	r0, #87	; 0x57
 8001d24:	f005 fad7 	bl	80072d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001d28:	2057      	movs	r0, #87	; 0x57
 8001d2a:	f005 faee 	bl	800730a <HAL_NVIC_EnableIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3780      	adds	r7, #128	; 0x80
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40006400 	.word	0x40006400
 8001d3c:	20000530 	.word	0x20000530
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40006800 	.word	0x40006800
 8001d48:	48000400 	.word	0x48000400

08001d4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	4a63      	ldr	r2, [pc, #396]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d6e:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b55      	ldr	r3, [pc, #340]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <MX_GPIO_Init+0x1a8>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f246 0121 	movw	r1, #24609	; 0x6021
 8001de0:	4845      	ldr	r0, [pc, #276]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001de2:	f006 fdf5 	bl	80089d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	f248 0110 	movw	r1, #32784	; 0x8010
 8001dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001df0:	f006 fdee 	bl	80089d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f244 4184 	movw	r1, #17540	; 0x4484
 8001dfa:	4840      	ldr	r0, [pc, #256]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001dfc:	f006 fde8 	bl	80089d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
 8001e00:	f246 0321 	movw	r3, #24609	; 0x6021
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4837      	ldr	r0, [pc, #220]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001e1a:	f006 fc3f 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 8001e1e:	f248 0310 	movw	r3, #32784	; 0x8010
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3a:	f006 fc2f 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4829      	ldr	r0, [pc, #164]	; (8001ef8 <MX_GPIO_Init+0x1ac>)
 8001e52:	f006 fc23 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001e56:	f244 4384 	movw	r3, #17540	; 0x4484
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4823      	ldr	r0, [pc, #140]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001e70:	f006 fc14 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8c:	f006 fc06 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e90:	2304      	movs	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4817      	ldr	r0, [pc, #92]	; (8001f00 <MX_GPIO_Init+0x1b4>)
 8001ea4:	f006 fbfa 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ea8:	2360      	movs	r3, #96	; 0x60
 8001eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4810      	ldr	r0, [pc, #64]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001ebc:	f006 fbee 	bl	800869c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <MX_GPIO_Init+0x1b0>)
 8001ed8:	f006 fbe0 	bl	800869c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2101      	movs	r1, #1
 8001ee0:	2017      	movs	r0, #23
 8001ee2:	f005 f9f8 	bl	80072d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ee6:	2017      	movs	r0, #23
 8001ee8:	f005 fa0f 	bl	800730a <HAL_NVIC_EnableIRQ>

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000800 	.word	0x48000800
 8001efc:	48000400 	.word	0x48000400
 8001f00:	48000c00 	.word	0x48000c00

08001f04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f08:	f3bf 8f4f 	dsb	sy
}
 8001f0c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <__NVIC_SystemReset+0x24>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f16:	4904      	ldr	r1, [pc, #16]	; (8001f28 <__NVIC_SystemReset+0x24>)
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__NVIC_SystemReset+0x28>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f1e:	f3bf 8f4f 	dsb	sy
}
 8001f22:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <__NVIC_SystemReset+0x20>
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	05fa0004 	.word	0x05fa0004

08001f30 <ICM20602_writeByte>:
int Gscale = GFS_1000DPS;



void ICM20602_writeByte(uint8_t reg, uint8_t data)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	uint8_t send_data[1];
	uint8_t RxBuffer[1];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2110      	movs	r1, #16
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f48:	f006 fd42 	bl	80089d0 <HAL_GPIO_WritePin>

	send_data[0]=reg & 0x7F;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f56:	f107 0208 	add.w	r2, r7, #8
 8001f5a:	f107 010c 	add.w	r1, r7, #12
 8001f5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2301      	movs	r3, #1
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <ICM20602_writeByte+0x6c>)
 8001f68:	f007 fe5d 	bl	8009c26 <HAL_SPI_TransmitReceive>

	send_data[0]=data;
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f70:	f107 0208 	add.w	r2, r7, #8
 8001f74:	f107 010c 	add.w	r1, r7, #12
 8001f78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <ICM20602_writeByte+0x6c>)
 8001f82:	f007 fe50 	bl	8009c26 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f86:	2201      	movs	r2, #1
 8001f88:	2110      	movs	r1, #16
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f006 fd1f 	bl	80089d0 <HAL_GPIO_WritePin>
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000790 	.word	0x20000790

08001fa0 <ICM20602_readByte>:

uint8_t ICM20602_readByte(uint8_t reg)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    uint8_t send_data[1];
    uint8_t RxBuffer[1];
    
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2110      	movs	r1, #16
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f006 fd0d 	bl	80089d0 <HAL_GPIO_WritePin>

    send_data[0]= reg | 0x80;
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc0:	f107 0208 	add.w	r2, r7, #8
 8001fc4:	f107 010c 	add.w	r1, r7, #12
 8001fc8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2301      	movs	r3, #1
 8001fd0:	480e      	ldr	r0, [pc, #56]	; (800200c <ICM20602_readByte+0x6c>)
 8001fd2:	f007 fe28 	bl	8009c26 <HAL_SPI_TransmitReceive>

    send_data[0]=0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	733b      	strb	r3, [r7, #12]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fda:	f107 0208 	add.w	r2, r7, #8
 8001fde:	f107 010c 	add.w	r1, r7, #12
 8001fe2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <ICM20602_readByte+0x6c>)
 8001fec:	f007 fe1b 	bl	8009c26 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001ff0:	7a3b      	ldrb	r3, [r7, #8]
 8001ff2:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f006 fce8 	bl	80089d0 <HAL_GPIO_WritePin>
    
    return (val);
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000790 	.word	0x20000790

08002010 <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8002014:	2201      	movs	r2, #1
 8002016:	2120      	movs	r1, #32
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <ICM20602_init+0x40>)
 800201a:	f006 fcd9 	bl	80089d0 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
 800201e:	2100      	movs	r1, #0
 8002020:	206b      	movs	r0, #107	; 0x6b
 8002022:	f7ff ff85 	bl	8001f30 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
 8002026:	2107      	movs	r1, #7
 8002028:	2019      	movs	r0, #25
 800202a:	f7ff ff81 	bl	8001f30 <ICM20602_writeByte>
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03
 800202e:	2101      	movs	r1, #1
 8002030:	201a      	movs	r0, #26
 8002032:	f7ff ff7d 	bl	8001f30 <ICM20602_writeByte>

	ICM20602_setAccRange(Ascale);
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <ICM20602_init+0x44>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f8b6 	bl	80021ac <ICM20602_setAccRange>
	ICM20602_setGyroRange(Gscale);
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <ICM20602_init+0x48>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f8eb 	bl	8002220 <ICM20602_setGyroRange>
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	48000800 	.word	0x48000800
 8002054:	200005a8 	.word	0x200005a8
 8002058:	20000004 	.word	0x20000004

0800205c <ICM20602_getAccXvalue>:

int16_t ICM20602_getAccXvalue()
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_L); // read Accelerometer X_Low  value
 8002062:	203c      	movs	r0, #60	; 0x3c
 8002064:	f7ff ff9c 	bl	8001fa0 <ICM20602_readByte>
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_XOUT_H); // read Accelerometer X_High value
 800206c:	203b      	movs	r0, #59	; 0x3b
 800206e:	f7ff ff97 	bl	8001fa0 <ICM20602_readByte>
 8002072:	4603      	mov	r3, r0
 8002074:	71bb      	strb	r3, [r7, #6]
    return((HiByte<<8) | LoByte);
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	b21a      	sxth	r2, r3
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	b21b      	sxth	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b21b      	sxth	r3, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <ICM20602_getAccYvalue>:

int16_t ICM20602_getAccYvalue()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_L); // read Accelerometer X_Low  value
 8002092:	203e      	movs	r0, #62	; 0x3e
 8002094:	f7ff ff84 	bl	8001fa0 <ICM20602_readByte>
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_YOUT_H); // read Accelerometer X_High value
 800209c:	203d      	movs	r0, #61	; 0x3d
 800209e:	f7ff ff7f 	bl	8001fa0 <ICM20602_readByte>
 80020a2:	4603      	mov	r3, r0
 80020a4:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020a6:	79bb      	ldrb	r3, [r7, #6]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <ICM20602_getAccZvalue>:

int16_t ICM20602_getAccZvalue()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_L); // read Accelerometer X_Low  value
 80020c2:	2040      	movs	r0, #64	; 0x40
 80020c4:	f7ff ff6c 	bl	8001fa0 <ICM20602_readByte>
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_ACCEL_ZOUT_H); // read Accelerometer X_High value
 80020cc:	203f      	movs	r0, #63	; 0x3f
 80020ce:	f7ff ff67 	bl	8001fa0 <ICM20602_readByte>
 80020d2:	4603      	mov	r3, r0
 80020d4:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b21a      	sxth	r2, r3
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21b      	sxth	r3, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ICM20602_getGyrXvalue>:

int16_t ICM20602_getGyrXvalue()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_XOUT_L); // read Accelerometer X_Low  value
 80020f2:	2044      	movs	r0, #68	; 0x44
 80020f4:	f7ff ff54 	bl	8001fa0 <ICM20602_readByte>
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_XOUT_H); // read Accelerometer X_High value
 80020fc:	2043      	movs	r0, #67	; 0x43
 80020fe:	f7ff ff4f 	bl	8001fa0 <ICM20602_readByte>
 8002102:	4603      	mov	r3, r0
 8002104:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21a      	sxth	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	b21b      	sxth	r3, r3
 8002110:	4313      	orrs	r3, r2
 8002112:	b21b      	sxth	r3, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <ICM20602_getGyrYvalue>:

int16_t ICM20602_getGyrYvalue()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_YOUT_L); // read Accelerometer X_Low  value
 8002122:	2046      	movs	r0, #70	; 0x46
 8002124:	f7ff ff3c 	bl	8001fa0 <ICM20602_readByte>
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_YOUT_H); // read Accelerometer X_High value
 800212c:	2045      	movs	r0, #69	; 0x45
 800212e:	f7ff ff37 	bl	8001fa0 <ICM20602_readByte>
 8002132:	4603      	mov	r3, r0
 8002134:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21a      	sxth	r2, r3
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <ICM20602_getGyrZvalue>:

int16_t ICM20602_getGyrZvalue()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_L); // read Accelerometer X_Low  value
 8002152:	2048      	movs	r0, #72	; 0x48
 8002154:	f7ff ff24 	bl	8001fa0 <ICM20602_readByte>
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_GYRO_ZOUT_H); // read Accelerometer X_High value
 800215c:	2047      	movs	r0, #71	; 0x47
 800215e:	f7ff ff1f 	bl	8001fa0 <ICM20602_readByte>
 8002162:	4603      	mov	r3, r0
 8002164:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002166:	79bb      	ldrb	r3, [r7, #6]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b21a      	sxth	r2, r3
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21b      	sxth	r3, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <ICM20602_getIMUTemp>:

int16_t ICM20602_getIMUTemp()
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
    uint8_t LoByte, HiByte;
    LoByte = ICM20602_readByte(ICM20602_TEMP_OUT_L); // read Accelerometer X_Low  value
 8002182:	2042      	movs	r0, #66	; 0x42
 8002184:	f7ff ff0c 	bl	8001fa0 <ICM20602_readByte>
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
    HiByte = ICM20602_readByte(ICM20602_TEMP_OUT_H); // read Accelerometer X_High value
 800218c:	2041      	movs	r0, #65	; 0x41
 800218e:	f7ff ff07 	bl	8001fa0 <ICM20602_readByte>
 8002192:	4603      	mov	r3, r0
 8002194:	71bb      	strb	r3, [r7, #6]
    return ((HiByte<<8) | LoByte);
 8002196:	79bb      	ldrb	r3, [r7, #6]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b21a      	sxth	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	b21b      	sxth	r3, r3
 80021a0:	4313      	orrs	r3, r2
 80021a2:	b21b      	sxth	r3, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <ICM20602_setAccRange>:


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    switch(Ascale)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d81e      	bhi.n	80021f8 <ICM20602_setAccRange+0x4c>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <ICM20602_setAccRange+0x14>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021db 	.word	0x080021db
 80021c8:	080021e5 	.word	0x080021e5
 80021cc:	080021ef 	.word	0x080021ef
    {
        case AFS_2G:
            aRes = 2.0/32768.0;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <ICM20602_setAccRange+0x70>)
 80021d2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80021d6:	601a      	str	r2, [r3, #0]
            break;
 80021d8:	e00e      	b.n	80021f8 <ICM20602_setAccRange+0x4c>
        case AFS_4G:
            aRes = 4.0/32768.0;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <ICM20602_setAccRange+0x70>)
 80021dc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80021e0:	601a      	str	r2, [r3, #0]
            break;
 80021e2:	e009      	b.n	80021f8 <ICM20602_setAccRange+0x4c>
        case AFS_8G:
            aRes = 8.0/32768.0;
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <ICM20602_setAccRange+0x70>)
 80021e6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80021ea:	601a      	str	r2, [r3, #0]
            break;
 80021ec:	e004      	b.n	80021f8 <ICM20602_setAccRange+0x4c>
        case AFS_16G:
            aRes = 16.0/32768.0;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <ICM20602_setAccRange+0x70>)
 80021f0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80021f4:	601a      	str	r2, [r3, #0]
            break;         
 80021f6:	bf00      	nop
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	201c      	movs	r0, #28
 8002204:	f7ff fe94 	bl	8001f30 <ICM20602_writeByte>
    
    return aRes;
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <ICM20602_setAccRange+0x70>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	ee07 3a90 	vmov	s15, r3
}
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200005a0 	.word	0x200005a0

08002220 <ICM20602_setGyroRange>:

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    switch(Gscale)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d81a      	bhi.n	8002264 <ICM20602_setGyroRange+0x44>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <ICM20602_setGyroRange+0x14>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	0800224d 	.word	0x0800224d
 800223c:	08002255 	.word	0x08002255
 8002240:	0800225d 	.word	0x0800225d
    {
        case GFS_250DPS:
            gRes = 250.0/32768.0;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <ICM20602_setGyroRange+0x68>)
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <ICM20602_setGyroRange+0x6c>)
 8002248:	601a      	str	r2, [r3, #0]
            break;
 800224a:	e00b      	b.n	8002264 <ICM20602_setGyroRange+0x44>
        case GFS_500DPS:
            gRes = 500.0/32768.0;
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <ICM20602_setGyroRange+0x68>)
 800224e:	4a10      	ldr	r2, [pc, #64]	; (8002290 <ICM20602_setGyroRange+0x70>)
 8002250:	601a      	str	r2, [r3, #0]
            break;
 8002252:	e007      	b.n	8002264 <ICM20602_setGyroRange+0x44>
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <ICM20602_setGyroRange+0x68>)
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <ICM20602_setGyroRange+0x74>)
 8002258:	601a      	str	r2, [r3, #0]
            break;
 800225a:	e003      	b.n	8002264 <ICM20602_setGyroRange+0x44>
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <ICM20602_setGyroRange+0x68>)
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <ICM20602_setGyroRange+0x78>)
 8002260:	601a      	str	r2, [r3, #0]
            break;
 8002262:	bf00      	nop
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	201b      	movs	r0, #27
 8002270:	f7ff fe5e 	bl	8001f30 <ICM20602_writeByte>
    
    return gRes;
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <ICM20602_setGyroRange+0x68>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	ee07 3a90 	vmov	s15, r3
}
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	200005a4 	.word	0x200005a4
 800228c:	3bfa0000 	.word	0x3bfa0000
 8002290:	3c7a0000 	.word	0x3c7a0000
 8002294:	3cfa0000 	.word	0x3cfa0000
 8002298:	3d7a0000 	.word	0x3d7a0000

0800229c <ICM20602_read_IMU_data>:
    Gscale = (Gscale & 0x18) >> 3;

    return Gscale;
}

void ICM20602_read_IMU_data() {
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0

	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80022a0:	f7ff fedc 	bl	800205c <ICM20602_getAccXvalue>
 80022a4:	4603      	mov	r3, r0
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ae:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80024ac <ICM20602_read_IMU_data+0x210>
 80022b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022b6:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <ICM20602_read_IMU_data+0x214>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c0:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <ICM20602_read_IMU_data+0x218>)
 80022c2:	edc3 7a00 	vstr	s15, [r3]
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80022c6:	f7ff fee1 	bl	800208c <ICM20602_getAccYvalue>
 80022ca:	4603      	mov	r3, r0
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80024ac <ICM20602_read_IMU_data+0x210>
 80022d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022dc:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <ICM20602_read_IMU_data+0x214>)
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <ICM20602_read_IMU_data+0x218>)
 80022e8:	edc3 7a01 	vstr	s15, [r3, #4]
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80022ec:	f7ff fee6 	bl	80020bc <ICM20602_getAccZvalue>
 80022f0:	4603      	mov	r3, r0
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fa:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80024ac <ICM20602_read_IMU_data+0x210>
 80022fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <ICM20602_read_IMU_data+0x214>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230c:	4b69      	ldr	r3, [pc, #420]	; (80024b4 <ICM20602_read_IMU_data+0x218>)
 800230e:	edc3 7a02 	vstr	s15, [r3, #8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002312:	f7ff feeb 	bl	80020ec <ICM20602_getGyrXvalue>
 8002316:	4603      	mov	r3, r0
 8002318:	ee07 3a90 	vmov	s15, r3
 800231c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002320:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <ICM20602_read_IMU_data+0x21c>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	4b64      	ldr	r3, [pc, #400]	; (80024bc <ICM20602_read_IMU_data+0x220>)
 800232c:	edc3 7a00 	vstr	s15, [r3]
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002330:	f7ff fef4 	bl	800211c <ICM20602_getGyrYvalue>
 8002334:	4603      	mov	r3, r0
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <ICM20602_read_IMU_data+0x21c>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <ICM20602_read_IMU_data+0x220>)
 800234a:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 800234e:	f7ff fefd 	bl	800214c <ICM20602_getGyrZvalue>
 8002352:	4603      	mov	r3, r0
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235c:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <ICM20602_read_IMU_data+0x21c>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	4b55      	ldr	r3, [pc, #340]	; (80024bc <ICM20602_read_IMU_data+0x220>)
 8002368:	edc3 7a02 	vstr	s15, [r3, #8]

    ICM20602_medianFilter();
 800236c:	f000 f92c 	bl	80025c8 <ICM20602_medianFilter>

    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 8002370:	f7ff ff04 	bl	800217c <ICM20602_getIMUTemp>
 8002374:	4603      	mov	r3, r0
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237e:	eddf 6a50 	vldr	s13, [pc, #320]	; 80024c0 <ICM20602_read_IMU_data+0x224>
 8002382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002386:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800238a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800238e:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <ICM20602_read_IMU_data+0x228>)
 8002390:	edc3 7a00 	vstr	s15, [r3]
    ICM20602_IMU_compensate();
 8002394:	f000 fd48 	bl	8002e28 <ICM20602_IMU_compensate>

    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <ICM20602_read_IMU_data+0x234>)
 80023a6:	edd3 6a00 	vldr	s13, [r3]
 80023aa:	eeb0 1a66 	vmov.f32	s2, s13
 80023ae:	eef0 0a47 	vmov.f32	s1, s14
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	f000 f893 	bl	80024e0 <ICM20602_integral>
 80023ba:	eef0 7a40 	vmov.f32	s15, s0
 80023be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023cc:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 80023ce:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*2;
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 80023d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 80023da:	ed93 7a01 	vldr	s14, [r3, #4]
 80023de:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <ICM20602_read_IMU_data+0x234>)
 80023e0:	edd3 6a00 	vldr	s13, [r3]
 80023e4:	eeb0 1a66 	vmov.f32	s2, s13
 80023e8:	eef0 0a47 	vmov.f32	s1, s14
 80023ec:	eeb0 0a67 	vmov.f32	s0, s15
 80023f0:	f000 f876 	bl	80024e0 <ICM20602_integral>
 80023f4:	eef0 7a40 	vmov.f32	s15, s0
 80023f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 8002408:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*2;
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 800240e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 8002414:	ed93 7a02 	vldr	s14, [r3, #8]
 8002418:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <ICM20602_read_IMU_data+0x234>)
 800241a:	edd3 6a00 	vldr	s13, [r3]
 800241e:	eeb0 1a66 	vmov.f32	s2, s13
 8002422:	eef0 0a47 	vmov.f32	s1, s14
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	f000 f859 	bl	80024e0 <ICM20602_integral>
 800242e:	eef0 7a40 	vmov.f32	s15, s0
 8002432:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 8002442:	edc3 7a00 	vstr	s15, [r3]

    pitchAngle = ICM20602_normAngle(pitchAngle);
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eeb0 0a67 	vmov.f32	s0, s15
 8002450:	f000 f880 	bl	8002554 <ICM20602_normAngle>
 8002454:	eef0 7a40 	vmov.f32	s15, s0
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <ICM20602_read_IMU_data+0x238>)
 800245a:	edc3 7a00 	vstr	s15, [r3]
    rollAngle  = ICM20602_normAngle(rollAngle);
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	eeb0 0a67 	vmov.f32	s0, s15
 8002468:	f000 f874 	bl	8002554 <ICM20602_normAngle>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <ICM20602_read_IMU_data+0x23c>)
 8002472:	edc3 7a00 	vstr	s15, [r3]
    yawAngle   = ICM20602_normAngle(yawAngle);
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eeb0 0a67 	vmov.f32	s0, s15
 8002480:	f000 f868 	bl	8002554 <ICM20602_normAngle>
 8002484:	eef0 7a40 	vmov.f32	s15, s0
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <ICM20602_read_IMU_data+0x240>)
 800248a:	edc3 7a00 	vstr	s15, [r3]

    gyro_prv[0] = gyro_comp[0];
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 8002494:	6013      	str	r3, [r2, #0]
    gyro_prv[1] = gyro_comp[1];
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 800249c:	6053      	str	r3, [r2, #4]
    gyro_prv[2] = gyro_comp[2];
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <ICM20602_read_IMU_data+0x22c>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <ICM20602_read_IMU_data+0x230>)
 80024a4:	6093      	str	r3, [r2, #8]
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	411ce80a 	.word	0x411ce80a
 80024b0:	200005a0 	.word	0x200005a0
 80024b4:	200005e4 	.word	0x200005e4
 80024b8:	200005a4 	.word	0x200005a4
 80024bc:	200005f0 	.word	0x200005f0
 80024c0:	43a36666 	.word	0x43a36666
 80024c4:	20000614 	.word	0x20000614
 80024c8:	20000608 	.word	0x20000608
 80024cc:	20000534 	.word	0x20000534
 80024d0:	20000000 	.word	0x20000000
 80024d4:	200005d8 	.word	0x200005d8
 80024d8:	200005dc 	.word	0x200005dc
 80024dc:	200005e0 	.word	0x200005e0

080024e0 <ICM20602_integral>:



float ICM20602_integral(float val, float val_prv, float dt)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80024ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80024ee:	ed87 1a01 	vstr	s2, [r7, #4]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80024f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80024f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002506:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800250a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800250e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002512:	eeb0 0a67 	vmov.f32	s0, s15
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <ICM20602_clearAngle>:

void ICM20602_clearAngle(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
    pitchAngle = 0.0f;
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <ICM20602_clearAngle+0x28>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    rollAngle  = 0.0f;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <ICM20602_clearAngle+0x2c>)
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
    yawAngle   = 0.0f;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <ICM20602_clearAngle+0x30>)
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200005d8 	.word	0x200005d8
 800254c:	200005dc 	.word	0x200005dc
 8002550:	200005e0 	.word	0x200005e0

08002554 <ICM20602_normAngle>:
    rollAngle  = roll;
    yawAngle   = yaw;
}

float ICM20602_normAngle(float deg)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	ed87 0a01 	vstr	s0, [r7, #4]
    while (deg < -180.0f) deg += 360.0f;
 800255e:	e007      	b.n	8002570 <ICM20602_normAngle+0x1c>
 8002560:	edd7 7a01 	vldr	s15, [r7, #4]
 8002564:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80025bc <ICM20602_normAngle+0x68>
 8002568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800256c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002570:	edd7 7a01 	vldr	s15, [r7, #4]
 8002574:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80025c0 <ICM20602_normAngle+0x6c>
 8002578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d4ee      	bmi.n	8002560 <ICM20602_normAngle+0xc>
    while (deg >= 180.0f) deg -= 360.0f;
 8002582:	e007      	b.n	8002594 <ICM20602_normAngle+0x40>
 8002584:	edd7 7a01 	vldr	s15, [r7, #4]
 8002588:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025bc <ICM20602_normAngle+0x68>
 800258c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002590:	edc7 7a01 	vstr	s15, [r7, #4]
 8002594:	edd7 7a01 	vldr	s15, [r7, #4]
 8002598:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80025c4 <ICM20602_normAngle+0x70>
 800259c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	daee      	bge.n	8002584 <ICM20602_normAngle+0x30>

    return deg;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	ee07 3a90 	vmov	s15, r3
}
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	43b40000 	.word	0x43b40000
 80025c0:	c3340000 	.word	0xc3340000
 80025c4:	43340000 	.word	0x43340000

080025c8 <ICM20602_medianFilter>:
    return yawAngle;
}

// filter length : 3-only
void ICM20602_medianFilter(void)
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {
 80025ce:	2300      	movs	r3, #0
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	e123      	b.n	800281c <ICM20602_medianFilter+0x254>

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 80025d4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80025d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025dc:	4895      	ldr	r0, [pc, #596]	; (8002834 <ICM20602_medianFilter+0x26c>)
 80025de:	460b      	mov	r3, r1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	440b      	add	r3, r1
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	3304      	adds	r3, #4
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	4891      	ldr	r0, [pc, #580]	; (8002834 <ICM20602_medianFilter+0x26c>)
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	3308      	adds	r3, #8
 80025fa:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 80025fc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002600:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002604:	488b      	ldr	r0, [pc, #556]	; (8002834 <ICM20602_medianFilter+0x26c>)
 8002606:	460b      	mov	r3, r1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	440b      	add	r3, r1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4403      	add	r3, r0
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	4888      	ldr	r0, [pc, #544]	; (8002834 <ICM20602_medianFilter+0x26c>)
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4403      	add	r3, r0
 800261e:	3304      	adds	r3, #4
 8002620:	6019      	str	r1, [r3, #0]
    	gyro_mdat[i][0] = gyro[i];
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800262a:	4983      	ldr	r1, [pc, #524]	; (8002838 <ICM20602_medianFilter+0x270>)
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	6819      	ldr	r1, [r3, #0]
 8002632:	4880      	ldr	r0, [pc, #512]	; (8002834 <ICM20602_medianFilter+0x26c>)
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4403      	add	r3, r0
 800263e:	6019      	str	r1, [r3, #0]

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8002640:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002644:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002648:	487c      	ldr	r0, [pc, #496]	; (800283c <ICM20602_medianFilter+0x274>)
 800264a:	460b      	mov	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	440b      	add	r3, r1
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	3304      	adds	r3, #4
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	4878      	ldr	r0, [pc, #480]	; (800283c <ICM20602_medianFilter+0x274>)
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4403      	add	r3, r0
 8002664:	3308      	adds	r3, #8
 8002666:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8002668:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800266c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002670:	4872      	ldr	r0, [pc, #456]	; (800283c <ICM20602_medianFilter+0x274>)
 8002672:	460b      	mov	r3, r1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4403      	add	r3, r0
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	486f      	ldr	r0, [pc, #444]	; (800283c <ICM20602_medianFilter+0x274>)
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4403      	add	r3, r0
 800268a:	3304      	adds	r3, #4
 800268c:	6019      	str	r1, [r3, #0]
    	acc_mdat[i][0]  = acc[i];
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002696:	496a      	ldr	r1, [pc, #424]	; (8002840 <ICM20602_medianFilter+0x278>)
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	4867      	ldr	r0, [pc, #412]	; (800283c <ICM20602_medianFilter+0x274>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4403      	add	r3, r0
 80026aa:	6019      	str	r1, [r3, #0]

    	for (j = 0; j < 3; j ++){
 80026ac:	2300      	movs	r3, #0
 80026ae:	71bb      	strb	r3, [r7, #6]
 80026b0:	e029      	b.n	8002706 <ICM20602_medianFilter+0x13e>
    		gyro_tmp[j] = gyro_mdat[i][j];
 80026b2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026b6:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026ba:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026be:	4c5d      	ldr	r4, [pc, #372]	; (8002834 <ICM20602_medianFilter+0x26c>)
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	4403      	add	r3, r0
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4423      	add	r3, r4
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	485d      	ldr	r0, [pc, #372]	; (8002844 <ICM20602_medianFilter+0x27c>)
 80026d0:	008b      	lsls	r3, r1, #2
 80026d2:	4403      	add	r3, r0
 80026d4:	601a      	str	r2, [r3, #0]
    		acc_tmp[j]  = acc_mdat[i][j];
 80026d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80026da:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80026de:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80026e2:	4c56      	ldr	r4, [pc, #344]	; (800283c <ICM20602_medianFilter+0x274>)
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	4403      	add	r3, r0
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4423      	add	r3, r4
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4855      	ldr	r0, [pc, #340]	; (8002848 <ICM20602_medianFilter+0x280>)
 80026f4:	008b      	lsls	r3, r1, #2
 80026f6:	4403      	add	r3, r0
 80026f8:	601a      	str	r2, [r3, #0]
    	for (j = 0; j < 3; j ++){
 80026fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	3301      	adds	r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	71bb      	strb	r3, [r7, #6]
 8002706:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800270a:	2b02      	cmp	r3, #2
 800270c:	ddd1      	ble.n	80026b2 <ICM20602_medianFilter+0xea>
    	}

    	a = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	717b      	strb	r3, [r7, #5]
    	b = 2;
 8002712:	2302      	movs	r3, #2
 8002714:	713b      	strb	r3, [r7, #4]

    	for (j = 2; j >= 0; j--) {
 8002716:	2302      	movs	r3, #2
 8002718:	71bb      	strb	r3, [r7, #6]
 800271a:	e065      	b.n	80027e8 <ICM20602_medianFilter+0x220>
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 800271c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002720:	4a48      	ldr	r2, [pc, #288]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800272e:	4a45      	ldr	r2, [pc, #276]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	dd19      	ble.n	8002776 <ICM20602_medianFilter+0x1ae>
    			tmp         = gyro_tmp[a];
 8002742:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002746:	4a3f      	ldr	r2, [pc, #252]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	603b      	str	r3, [r7, #0]
    			gyro_tmp[a] = gyro_tmp[b];
 8002750:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8002754:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002758:	493a      	ldr	r1, [pc, #232]	; (8002844 <ICM20602_medianFilter+0x27c>)
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	440a      	add	r2, r1
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4938      	ldr	r1, [pc, #224]	; (8002844 <ICM20602_medianFilter+0x27c>)
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	601a      	str	r2, [r3, #0]
    			gyro_tmp[b] = tmp;
 8002768:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800276c:	4a35      	ldr	r2, [pc, #212]	; (8002844 <ICM20602_medianFilter+0x27c>)
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	601a      	str	r2, [r3, #0]
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8002776:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800277a:	4a33      	ldr	r2, [pc, #204]	; (8002848 <ICM20602_medianFilter+0x280>)
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002788:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <ICM20602_medianFilter+0x280>)
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	dd19      	ble.n	80027d0 <ICM20602_medianFilter+0x208>
				tmp         = acc_tmp[a];
 800279c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027a0:	4a29      	ldr	r2, [pc, #164]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	603b      	str	r3, [r7, #0]
				acc_tmp[a]  = acc_tmp[b];
 80027aa:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80027ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	440a      	add	r2, r1
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4923      	ldr	r1, [pc, #140]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	601a      	str	r2, [r3, #0]
				acc_tmp[b]  = tmp;
 80027c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <ICM20602_medianFilter+0x280>)
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]
			}
    		a = j-1;
 80027d0:	79bb      	ldrb	r3, [r7, #6]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	717b      	strb	r3, [r7, #5]
    		b = j;
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	713b      	strb	r3, [r7, #4]
    	for (j = 2; j >= 0; j--) {
 80027dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	71bb      	strb	r3, [r7, #6]
 80027e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da95      	bge.n	800271c <ICM20602_medianFilter+0x154>
    	}
    	gyro[i] = gyro_tmp[1];
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <ICM20602_medianFilter+0x27c>)
 80027f6:	6852      	ldr	r2, [r2, #4]
 80027f8:	490f      	ldr	r1, [pc, #60]	; (8002838 <ICM20602_medianFilter+0x270>)
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	601a      	str	r2, [r3, #0]
    	acc[i]  = acc_tmp[1];
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4a10      	ldr	r2, [pc, #64]	; (8002848 <ICM20602_medianFilter+0x280>)
 8002806:	6852      	ldr	r2, [r2, #4]
 8002808:	490d      	ldr	r1, [pc, #52]	; (8002840 <ICM20602_medianFilter+0x278>)
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 3; i ++) {
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	71fb      	strb	r3, [r7, #7]
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b02      	cmp	r3, #2
 8002822:	f77f aed7 	ble.w	80025d4 <ICM20602_medianFilter+0xc>
    }
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bc90      	pop	{r4, r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000540 	.word	0x20000540
 8002838:	200005f0 	.word	0x200005f0
 800283c:	20000564 	.word	0x20000564
 8002840:	200005e4 	.word	0x200005e4
 8002844:	20000588 	.word	0x20000588
 8002848:	20000594 	.word	0x20000594
 800284c:	00000000 	.word	0x00000000

08002850 <ICM20602_IMU_calibration2>:
    	gyro_off[j] = gyro_sum[j] / cal_len;
    }
}

void ICM20602_IMU_calibration2(void)
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8002858:	af00      	add	r7, sp, #0
	int i,j;
    double cal_len = 0.0f;
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
    double acc_sum[3]={0};
 8002866:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	615a      	str	r2, [r3, #20]
    double gyro_sum[3]={0};
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
 8002888:	615a      	str	r2, [r3, #20]

    double acc_ave[3][10] = {{0.0}};
 800288a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800288e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002892:	4618      	mov	r0, r3
 8002894:	23f0      	movs	r3, #240	; 0xf0
 8002896:	461a      	mov	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f00a fbff 	bl	800d09c <memset>
    double gyro_ave[3][10] = {{0.0}};
 800289e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80028a2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80028a6:	4618      	mov	r0, r3
 80028a8:	23f0      	movs	r3, #240	; 0xf0
 80028aa:	461a      	mov	r2, r3
 80028ac:	2100      	movs	r1, #0
 80028ae:	f00a fbf5 	bl	800d09c <memset>

    printf("put the IMU still!\n");
 80028b2:	4886      	ldr	r0, [pc, #536]	; (8002acc <ICM20602_IMU_calibration2+0x27c>)
 80028b4:	f00b f8ea 	bl	800da8c <puts>
    HAL_Delay(1000);
 80028b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028bc:	f003 f8d4 	bl	8005a68 <HAL_Delay>

    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80028c0:	e183      	b.n	8002bca <ICM20602_IMU_calibration2+0x37a>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
		|| cal_len < 500.0
		){

    	printf("cal_len=%f\r\n",cal_len);
 80028c2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80028c6:	4882      	ldr	r0, [pc, #520]	; (8002ad0 <ICM20602_IMU_calibration2+0x280>)
 80028c8:	f00b f85a 	bl	800d980 <iprintf>
    	for(j = 0; j < 3; j++){
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80028d2:	e15f      	b.n	8002b94 <ICM20602_IMU_calibration2+0x344>
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80028d4:	f7ff fbc2 	bl	800205c <ICM20602_getAccXvalue>
 80028d8:	4603      	mov	r3, r0
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002ad4 <ICM20602_IMU_calibration2+0x284>
 80028e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028ea:	4b7b      	ldr	r3, [pc, #492]	; (8002ad8 <ICM20602_IMU_calibration2+0x288>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f4:	4b79      	ldr	r3, [pc, #484]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 80028f6:	edc3 7a00 	vstr	s15, [r3]
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 80028fa:	f7ff fbc7 	bl	800208c <ICM20602_getAccYvalue>
 80028fe:	4603      	mov	r3, r0
 8002900:	ee07 3a90 	vmov	s15, r3
 8002904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002908:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002ad4 <ICM20602_IMU_calibration2+0x284>
 800290c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002910:	4b71      	ldr	r3, [pc, #452]	; (8002ad8 <ICM20602_IMU_calibration2+0x288>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291a:	4b70      	ldr	r3, [pc, #448]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 800291c:	edc3 7a01 	vstr	s15, [r3, #4]
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002920:	f7ff fbcc 	bl	80020bc <ICM20602_getAccZvalue>
 8002924:	4603      	mov	r3, r0
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002ad4 <ICM20602_IMU_calibration2+0x284>
 8002932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002936:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <ICM20602_IMU_calibration2+0x288>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002940:	4b66      	ldr	r3, [pc, #408]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 8002942:	edc3 7a02 	vstr	s15, [r3, #8]
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002946:	f7ff fbd1 	bl	80020ec <ICM20602_getGyrXvalue>
 800294a:	4603      	mov	r3, r0
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002954:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <ICM20602_IMU_calibration2+0x290>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295e:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 8002960:	edc3 7a00 	vstr	s15, [r3]
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002964:	f7ff fbda 	bl	800211c <ICM20602_getGyrYvalue>
 8002968:	4603      	mov	r3, r0
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002972:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <ICM20602_IMU_calibration2+0x290>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 800297e:	edc3 7a01 	vstr	s15, [r3, #4]
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002982:	f7ff fbe3 	bl	800214c <ICM20602_getGyrZvalue>
 8002986:	4603      	mov	r3, r0
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <ICM20602_IMU_calibration2+0x290>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299a:	4b52      	ldr	r3, [pc, #328]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 800299c:	edc3 7a02 	vstr	s15, [r3, #8]

    		acc_sum[j]  += acc[j];
 80029a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029aa:	f107 0220 	add.w	r2, r7, #32
 80029ae:	4413      	add	r3, r2
 80029b0:	3b28      	subs	r3, #40	; 0x28
 80029b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029b6:	4a49      	ldr	r2, [pc, #292]	; (8002adc <ICM20602_IMU_calibration2+0x28c>)
 80029b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fde8 	bl	8000598 <__aeabi_f2d>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fc84 	bl	80002dc <__adddf3>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029e6:	f107 0220 	add.w	r2, r7, #32
 80029ea:	4413      	add	r3, r2
 80029ec:	3b28      	subs	r3, #40	; 0x28
 80029ee:	e9c3 0100 	strd	r0, r1, [r3]
    		gyro_sum[j] += gyro[j];
 80029f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80029fc:	f107 0220 	add.w	r2, r7, #32
 8002a00:	4413      	add	r3, r2
 8002a02:	3b40      	subs	r3, #64	; 0x40
 8002a04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a08:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <ICM20602_IMU_calibration2+0x294>)
 8002a0a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fdbf 	bl	8000598 <__aeabi_f2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fc5b 	bl	80002dc <__adddf3>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a38:	f107 0220 	add.w	r2, r7, #32
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b40      	subs	r3, #64	; 0x40
 8002a40:	e9c3 0100 	strd	r0, r1, [r3]

    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002a44:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a4e:	f107 0220 	add.w	r2, r7, #32
 8002a52:	4413      	add	r3, r2
 8002a54:	3b28      	subs	r3, #40	; 0x28
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a5e:	f7fd ff1d 	bl	800089c <__aeabi_ddiv>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4614      	mov	r4, r2
 8002a68:	461d      	mov	r5, r3
 8002a6a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002a6e:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8002a72:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	440b      	add	r3, r1
 8002a80:	e9c3 4500 	strd	r4, r5, [r3]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002a84:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002a8e:	f107 0220 	add.w	r2, r7, #32
 8002a92:	4413      	add	r3, r2
 8002a94:	3b40      	subs	r3, #64	; 0x40
 8002a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a9a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002a9e:	f7fd fefd 	bl	800089c <__aeabi_ddiv>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002aae:	f5a3 7108 	sub.w	r1, r3, #544	; 0x220
 8002ab2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	440b      	add	r3, r1
 8002ac0:	e9c3 4500 	strd	r4, r5, [r3]

    		for(i = 9; i > 0; i --){
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002aca:	e05a      	b.n	8002b82 <ICM20602_IMU_calibration2+0x332>
 8002acc:	0800fda8 	.word	0x0800fda8
 8002ad0:	0800fdbc 	.word	0x0800fdbc
 8002ad4:	411ce80a 	.word	0x411ce80a
 8002ad8:	200005a0 	.word	0x200005a0
 8002adc:	200005e4 	.word	0x200005e4
 8002ae0:	200005a4 	.word	0x200005a4
 8002ae4:	200005f0 	.word	0x200005f0
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002ae8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002aec:	1e59      	subs	r1, r3, #1
 8002aee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002af2:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002af6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4403      	add	r3, r0
 8002b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b0c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b10:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 8002b14:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b18:	461a      	mov	r2, r3
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	0053      	lsls	r3, r2, #1
 8002b20:	461a      	mov	r2, r3
 8002b22:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4423      	add	r3, r4
 8002b2c:	e9c3 0100 	strd	r0, r1, [r3]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002b30:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b34:	1e59      	subs	r1, r3, #1
 8002b36:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b3a:	f5a3 7008 	sub.w	r0, r3, #544	; 0x220
 8002b3e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	440b      	add	r3, r1
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4403      	add	r3, r0
 8002b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b54:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002b58:	f5a3 7408 	sub.w	r4, r3, #544	; 0x220
 8002b5c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b60:	461a      	mov	r2, r3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	0053      	lsls	r3, r2, #1
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b6e:	4413      	add	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4423      	add	r3, r4
 8002b74:	e9c3 0100 	strd	r0, r1, [r3]
    		for(i = 9; i > 0; i --){
 8002b78:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002b82:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	dcae      	bgt.n	8002ae8 <ICM20602_IMU_calibration2+0x298>
    	for(j = 0; j < 3; j++){
 8002b8a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002b94:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	f77f ae9b 	ble.w	80028d4 <ICM20602_IMU_calibration2+0x84>
    		}
    	}
    	cal_len ++;
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	4b9d      	ldr	r3, [pc, #628]	; (8002e18 <ICM20602_IMU_calibration2+0x5c8>)
 8002ba4:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002ba8:	f7fd fb98 	bl	80002dc <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230

    	if(cal_len>5000){break;}
 8002bb4:	a394      	add	r3, pc, #592	; (adr r3, 8002e08 <ICM20602_IMU_calibration2+0x5b8>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002bbe:	f7fd ffd3 	bl	8000b68 <__aeabi_dcmpgt>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 80c4 	bne.w	8002d52 <ICM20602_IMU_calibration2+0x502>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002bca:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bd2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002bd6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fb79 	bl	80002d8 <__aeabi_dsub>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4690      	mov	r8, r2
 8002bec:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002bf0:	a387      	add	r3, pc, #540	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	f7fd ffb5 	bl	8000b68 <__aeabi_dcmpgt>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f47f ae5e 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 8002c06:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c0e:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002c12:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c1a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002c1e:	f7fd fb5b 	bl	80002d8 <__aeabi_dsub>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4692      	mov	sl, r2
 8002c28:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002c2c:	a378      	add	r3, pc, #480	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	4650      	mov	r0, sl
 8002c34:	4659      	mov	r1, fp
 8002c36:	f7fd ff97 	bl	8000b68 <__aeabi_dcmpgt>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f47f ae40 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 8002c42:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c4a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002c4e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002c56:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c5a:	f7fd fb3d 	bl	80002d8 <__aeabi_dsub>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	61ba      	str	r2, [r7, #24]
 8002c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	a369      	add	r3, pc, #420	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c74:	f7fd ff78 	bl	8000b68 <__aeabi_dcmpgt>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f ae21 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 8002c80:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c84:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c88:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002c8c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002c90:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd fb1e 	bl	80002d8 <__aeabi_dsub>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	613a      	str	r2, [r7, #16]
 8002ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	a359      	add	r3, pc, #356	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cb2:	f7fd ff59 	bl	8000b68 <__aeabi_dcmpgt>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f47f ae02 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 8002cbe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cc2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cc6:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8002cca:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002cce:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002cd2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002cd6:	f7fd faff 	bl	80002d8 <__aeabi_dsub>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	60ba      	str	r2, [r7, #8]
 8002ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	a34a      	add	r3, pc, #296	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cf0:	f7fd ff3a 	bl	8000b68 <__aeabi_dcmpgt>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f47f ade3 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 8002cfc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002d00:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002d04:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8002d08:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8002d0c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8002d10:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002d14:	f7fd fae0 	bl	80002d8 <__aeabi_dsub>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	603a      	str	r2, [r7, #0]
 8002d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	a33a      	add	r3, pc, #232	; (adr r3, 8002e10 <ICM20602_IMU_calibration2+0x5c0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d2e:	f7fd ff1b 	bl	8000b68 <__aeabi_dcmpgt>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f47f adc4 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
		|| cal_len < 500.0
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <ICM20602_IMU_calibration2+0x5cc>)
 8002d40:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d44:	f7fd fef2 	bl	8000b2c <__aeabi_dcmplt>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f adb9 	bne.w	80028c2 <ICM20602_IMU_calibration2+0x72>
 8002d50:	e000      	b.n	8002d54 <ICM20602_IMU_calibration2+0x504>
    	if(cal_len>5000){break;}
 8002d52:	bf00      	nop
    }

    if(cal_len==500){NVIC_SystemReset();}
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <ICM20602_IMU_calibration2+0x5cc>)
 8002d5a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002d5e:	f7fd fedb 	bl	8000b18 <__aeabi_dcmpeq>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <ICM20602_IMU_calibration2+0x51c>
 8002d68:	f7ff f8cc 	bl	8001f04 <__NVIC_SystemReset>

    for(j = 0; j < 3; j++){
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002d72:	e03c      	b.n	8002dee <ICM20602_IMU_calibration2+0x59e>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d74:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002d7e:	f107 0220 	add.w	r2, r7, #32
 8002d82:	4413      	add	r3, r2
 8002d84:	3b28      	subs	r3, #40	; 0x28
 8002d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d8a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002d8e:	f7fd fd85 	bl	800089c <__aeabi_ddiv>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff4d 	bl	8000c38 <__aeabi_d2f>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	491f      	ldr	r1, [pc, #124]	; (8002e20 <ICM20602_IMU_calibration2+0x5d0>)
 8002da2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	601a      	str	r2, [r3, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002dac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002db6:	f107 0220 	add.w	r2, r7, #32
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b40      	subs	r3, #64	; 0x40
 8002dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8002dc6:	f7fd fd69 	bl	800089c <__aeabi_ddiv>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd ff31 	bl	8000c38 <__aeabi_d2f>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4912      	ldr	r1, [pc, #72]	; (8002e24 <ICM20602_IMU_calibration2+0x5d4>)
 8002dda:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	601a      	str	r2, [r3, #0]
    for(j = 0; j < 3; j++){
 8002de4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002de8:	3301      	adds	r3, #1
 8002dea:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8002dee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	ddbe      	ble.n	8002d74 <ICM20602_IMU_calibration2+0x524>
    }
}
 8002df6:	bf00      	nop
 8002df8:	bf00      	nop
 8002dfa:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e04:	f3af 8000 	nop.w
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	40b38800 	.word	0x40b38800
 8002e10:	eb1c432d 	.word	0xeb1c432d
 8002e14:	3f2a36e2 	.word	0x3f2a36e2
 8002e18:	3ff00000 	.word	0x3ff00000
 8002e1c:	407f4000 	.word	0x407f4000
 8002e20:	20000618 	.word	0x20000618
 8002e24:	20000624 	.word	0x20000624

08002e28 <ICM20602_IMU_compensate>:

void ICM20602_IMU_compensate(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
    int k;
    for(k=0;k<3;k++){
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	e02a      	b.n	8002e8a <ICM20602_IMU_compensate+0x62>
        acc_comp[k] = acc[k] - acc_off[k];
 8002e34:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <ICM20602_IMU_compensate+0x78>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	ed93 7a00 	vldr	s14, [r3]
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <ICM20602_IMU_compensate+0x7c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e50:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <ICM20602_IMU_compensate+0x80>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	edc3 7a00 	vstr	s15, [r3]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002e5c:	4a13      	ldr	r2, [pc, #76]	; (8002eac <ICM20602_IMU_compensate+0x84>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	ed93 7a00 	vldr	s14, [r3]
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <ICM20602_IMU_compensate+0x88>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e78:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <ICM20602_IMU_compensate+0x8c>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	edc3 7a00 	vstr	s15, [r3]
    for(k=0;k<3;k++){
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3301      	adds	r3, #1
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	ddd1      	ble.n	8002e34 <ICM20602_IMU_compensate+0xc>
    }

}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200005e4 	.word	0x200005e4
 8002ea4:	20000618 	.word	0x20000618
 8002ea8:	200005fc 	.word	0x200005fc
 8002eac:	200005f0 	.word	0x200005f0
 8002eb0:	20000624 	.word	0x20000624
 8002eb4:	20000608 	.word	0x20000608

08002eb8 <__NVIC_SystemReset>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002ebc:	f3bf 8f4f 	dsb	sy
}
 8002ec0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <__NVIC_SystemReset+0x24>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002eca:	4904      	ldr	r1, [pc, #16]	; (8002edc <__NVIC_SystemReset+0x24>)
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <__NVIC_SystemReset+0x28>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed2:	f3bf 8f4f 	dsb	sy
}
 8002ed6:	bf00      	nop
    __NOP();
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <__NVIC_SystemReset+0x20>
 8002edc:	e000ed00 	.word	0xe000ed00
 8002ee0:	05fa0004 	.word	0x05fa0004

08002ee4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif 
void __io_putchar(uint8_t ch)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002eee:	1df9      	adds	r1, r7, #7
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <__io_putchar+0x20>)
 8002ef6:	f008 fc27 	bl	800b748 <HAL_UART_Transmit>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000890 	.word	0x20000890

08002f08 <HAL_GetTick>:
void maintask_state_stop();
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2) ;
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
 {
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
   return uwTick;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_GetTick+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 }
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000b04 	.word	0x20000b04

08002f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f26:	f002 fd3a 	bl	800599e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f2a:	f000 f939 	bl	80031a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f2e:	f7fe ff0d 	bl	8001d4c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f32:	f7fe fd63 	bl	80019fc <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002f36:	f7fe fdab 	bl	8001a90 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8002f3a:	f002 fa79 	bl	8005430 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8002f3e:	f002 fac5 	bl	80054cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002f42:	f002 fb13 	bl	800556c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002f46:	f001 ff4b 	bl	8004de0 <MX_SPI1_Init>
  MX_TIM5_Init();
 8002f4a:	f002 f963 	bl	8005214 <MX_TIM5_Init>
  MX_TIM7_Init();
 8002f4e:	f002 f9bb 	bl	80052c8 <MX_TIM7_Init>
  MX_ADC5_Init();
 8002f52:	f7fe faaf 	bl	80014b4 <MX_ADC5_Init>
  MX_ADC3_Init();
 8002f56:	f7fe fa35 	bl	80013c4 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8002f5a:	f7fe fddf 	bl	8001b1c <MX_FDCAN2_Init>
  MX_ADC1_Init();
 8002f5e:	f7fe f9b9 	bl	80012d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  check_motor1=0;
 8002f62:	4b72      	ldr	r3, [pc, #456]	; (800312c <main+0x20c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
  check_motor2=0;
 8002f68:	4b71      	ldr	r3, [pc, #452]	; (8003130 <main+0x210>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
  check_motor3=0;
 8002f6e:	4b71      	ldr	r3, [pc, #452]	; (8003134 <main+0x214>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  check_motor4=0;
 8002f74:	4b70      	ldr	r3, [pc, #448]	; (8003138 <main+0x218>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
  check_power=0;
 8002f7a:	4b70      	ldr	r3, [pc, #448]	; (800313c <main+0x21c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
  check_FC=0;
 8002f80:	4b6f      	ldr	r3, [pc, #444]	; (8003140 <main+0x220>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
  kick_state=0;
 8002f86:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <main+0x224>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	486e      	ldr	r0, [pc, #440]	; (8003148 <main+0x228>)
 8002f90:	f007 fae8 	bl	800a564 <HAL_TIM_PWM_Start>
    for(int i=0;i<3;i++){
 8002f94:	2300      	movs	r3, #0
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	e006      	b.n	8002fa8 <main+0x88>
      actuator_buzzer(20, 20);
 8002f9a:	2114      	movs	r1, #20
 8002f9c:	2014      	movs	r0, #20
 8002f9e:	f7fe f97b 	bl	8001298 <actuator_buzzer>
    for(int i=0;i<3;i++){
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	ddf5      	ble.n	8002f9a <main+0x7a>
    }
    setbuf(stdout, NULL);
 8002fae:	4b67      	ldr	r3, [pc, #412]	; (800314c <main+0x22c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f00a fd70 	bl	800da9c <setbuf>
    printf("start\r\n");
 8002fbc:	4864      	ldr	r0, [pc, #400]	; (8003150 <main+0x230>)
 8002fbe:	f00a fd65 	bl	800da8c <puts>
    can1_init_ibis(&hfdcan1);
 8002fc2:	4864      	ldr	r0, [pc, #400]	; (8003154 <main+0x234>)
 8002fc4:	f7fe fc5a 	bl	800187c <can1_init_ibis>
    can2_init_ibis(&hfdcan2);
 8002fc8:	4863      	ldr	r0, [pc, #396]	; (8003158 <main+0x238>)
 8002fca:	f7fe fcb7 	bl	800193c <can2_init_ibis>

    HAL_FDCAN_Start(&hfdcan1);
 8002fce:	4861      	ldr	r0, [pc, #388]	; (8003154 <main+0x234>)
 8002fd0:	f004 fe9c 	bl	8007d0c <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	485e      	ldr	r0, [pc, #376]	; (8003154 <main+0x234>)
 8002fda:	f004 ffef 	bl	8007fbc <HAL_FDCAN_ActivateNotification>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <main+0xc8>
    {
      Error_Handler();
 8002fe4:	f001 fdd2 	bl	8004b8c <Error_Handler>
    }

    HAL_FDCAN_Start(&hfdcan2);
 8002fe8:	485b      	ldr	r0, [pc, #364]	; (8003158 <main+0x238>)
 8002fea:	f004 fe8f 	bl	8007d0c <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4859      	ldr	r0, [pc, #356]	; (8003158 <main+0x238>)
 8002ff4:	f004 ffe2 	bl	8007fbc <HAL_FDCAN_ActivateNotification>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <main+0xe2>
    {
      Error_Handler();
 8002ffe:	f001 fdc5 	bl	8004b8c <Error_Handler>
    }

    HAL_UART_Init(&hlpuart1);
 8003002:	4856      	ldr	r0, [pc, #344]	; (800315c <main+0x23c>)
 8003004:	f008 fb50 	bl	800b6a8 <HAL_UART_Init>
    xprintf_init(&hlpuart1);
 8003008:	4854      	ldr	r0, [pc, #336]	; (800315c <main+0x23c>)
 800300a:	f002 fc73 	bl	80058f4 <xprintf_init>


    HAL_UART_Init(&huart2);
 800300e:	4854      	ldr	r0, [pc, #336]	; (8003160 <main+0x240>)
 8003010:	f008 fb4a 	bl	800b6a8 <HAL_UART_Init>
    HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_Ether,Rxbufsize_from_Ether);
 8003014:	220e      	movs	r2, #14
 8003016:	4953      	ldr	r1, [pc, #332]	; (8003164 <main+0x244>)
 8003018:	4851      	ldr	r0, [pc, #324]	; (8003160 <main+0x240>)
 800301a:	f008 fc2b 	bl	800b874 <HAL_UART_Receive_DMA>


    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense,1);
 800301e:	2201      	movs	r2, #1
 8003020:	4951      	ldr	r1, [pc, #324]	; (8003168 <main+0x248>)
 8003022:	4852      	ldr	r0, [pc, #328]	; (800316c <main+0x24c>)
 8003024:	f003 f926 	bl	8006274 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense,1);
 8003028:	2201      	movs	r2, #1
 800302a:	4951      	ldr	r1, [pc, #324]	; (8003170 <main+0x250>)
 800302c:	4851      	ldr	r0, [pc, #324]	; (8003174 <main+0x254>)
 800302e:	f003 f921 	bl	8006274 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata,1);
 8003032:	2201      	movs	r2, #1
 8003034:	4950      	ldr	r1, [pc, #320]	; (8003178 <main+0x258>)
 8003036:	4851      	ldr	r0, [pc, #324]	; (800317c <main+0x25c>)
 8003038:	f003 f91c 	bl	8006274 <HAL_ADC_Start_DMA>
    	//if(HAL_GetTick()>1000){
    	//	Error_Handler();
    	//}
   // }

    actuator_power_ONOFF(0);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fe f8f5 	bl	800122c <actuator_power_ONOFF>
    HAL_Delay(20);
 8003042:	2014      	movs	r0, #20
 8003044:	f002 fd10 	bl	8005a68 <HAL_Delay>


    actuator_motor1(0.0,0.0);
 8003048:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8003180 <main+0x260>
 800304c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8003180 <main+0x260>
 8003050:	f7fd ffc4 	bl	8000fdc <actuator_motor1>
    actuator_motor2(0.0,0.0);
 8003054:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8003180 <main+0x260>
 8003058:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003180 <main+0x260>
 800305c:	f7fd ffee 	bl	800103c <actuator_motor2>
    actuator_motor3(0.0,0.0);
 8003060:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003180 <main+0x260>
 8003064:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8003180 <main+0x260>
 8003068:	f7fe f818 	bl	800109c <actuator_motor3>
    actuator_motor4(0.0,0.0);
 800306c:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003180 <main+0x260>
 8003070:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003180 <main+0x260>
 8003074:	f7fe f842 	bl	80010fc <actuator_motor4>
    actuator_motor5(0.0,0.0);
 8003078:	eddf 0a41 	vldr	s1, [pc, #260]	; 8003180 <main+0x260>
 800307c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8003180 <main+0x260>
 8003080:	f7fe f86c 	bl	800115c <actuator_motor5>

    actuator_kicker(1, 1);
 8003084:	2101      	movs	r1, #1
 8003086:	2001      	movs	r0, #1
 8003088:	f7fe f8b9 	bl	80011fe <actuator_kicker>
    actuator_kicker_voltage(250.0);
 800308c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003184 <main+0x264>
 8003090:	f7fe f894 	bl	80011bc <actuator_kicker_voltage>
    actuator_power_param(1,15.0);//min voltage
 8003094:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003098:	2001      	movs	r0, #1
 800309a:	f7fe f8da 	bl	8001252 <actuator_power_param>
    actuator_power_param(2,35.0);//max voltage
 800309e:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8003188 <main+0x268>
 80030a2:	2002      	movs	r0, #2
 80030a4:	f7fe f8d5 	bl	8001252 <actuator_power_param>
    actuator_power_param(3,50.0);//max current
 80030a8:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800318c <main+0x26c>
 80030ac:	2003      	movs	r0, #3
 80030ae:	f7fe f8d0 	bl	8001252 <actuator_power_param>
    actuator_power_param(4,90.0);//max temp(fet)
 80030b2:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003190 <main+0x270>
 80030b6:	2004      	movs	r0, #4
 80030b8:	f7fe f8cb 	bl	8001252 <actuator_power_param>
    actuator_power_param(5,90.0);//max temp(solenoid)
 80030bc:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8003190 <main+0x270>
 80030c0:	2005      	movs	r0, #5
 80030c2:	f7fe f8c6 	bl	8001252 <actuator_power_param>


    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80030c6:	2201      	movs	r2, #1
 80030c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030cc:	4831      	ldr	r0, [pc, #196]	; (8003194 <main+0x274>)
 80030ce:	f005 fc7f 	bl	80089d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80030d2:	2201      	movs	r2, #1
 80030d4:	2101      	movs	r1, #1
 80030d6:	482f      	ldr	r0, [pc, #188]	; (8003194 <main+0x274>)
 80030d8:	f005 fc7a 	bl	80089d0 <HAL_GPIO_WritePin>
    ICM20602_init();
 80030dc:	f7fe ff98 	bl	8002010 <ICM20602_init>
    ICM20602_IMU_calibration2();
 80030e0:	f7ff fbb6 	bl	8002850 <ICM20602_IMU_calibration2>
    ICM20602_clearAngle();
 80030e4:	f7ff fa1c 	bl	8002520 <ICM20602_clearAngle>

    //uint8_t senddata_calib[8];
    //can1_send(0x340, senddata_calib);
    //can2_send(0x340, senddata_calib);

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ee:	4829      	ldr	r0, [pc, #164]	; (8003194 <main+0x274>)
 80030f0:	f005 fc6e 	bl	80089d0 <HAL_GPIO_WritePin>
    actuator_power_ONOFF(1);
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fe f899 	bl	800122c <actuator_power_ONOFF>


    for(int i=0;i<3;i++){
 80030fa:	2300      	movs	r3, #0
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	e006      	b.n	800310e <main+0x1ee>
    	actuator_buzzer(40, 40);
 8003100:	2128      	movs	r1, #40	; 0x28
 8003102:	2028      	movs	r0, #40	; 0x28
 8003104:	f7fe f8c8 	bl	8001298 <actuator_buzzer>
    for(int i=0;i<3;i++){
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	ddf5      	ble.n	8003100 <main+0x1e0>
    }

    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <main+0x278>)
 8003116:	2200      	movs	r2, #0
 8003118:	72da      	strb	r2, [r3, #11]
    HAL_Delay(500);
 800311a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800311e:	f002 fca3 	bl	8005a68 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim7);
 8003122:	481e      	ldr	r0, [pc, #120]	; (800319c <main+0x27c>)
 8003124:	f007 f94e 	bl	800a3c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003128:	e7fe      	b.n	8003128 <main+0x208>
 800312a:	bf00      	nop
 800312c:	20000731 	.word	0x20000731
 8003130:	20000732 	.word	0x20000732
 8003134:	20000733 	.word	0x20000733
 8003138:	20000734 	.word	0x20000734
 800313c:	20000735 	.word	0x20000735
 8003140:	20000736 	.word	0x20000736
 8003144:	20000630 	.word	0x20000630
 8003148:	200007f8 	.word	0x200007f8
 800314c:	20000014 	.word	0x20000014
 8003150:	0800fdcc 	.word	0x0800fdcc
 8003154:	20000468 	.word	0x20000468
 8003158:	200004cc 	.word	0x200004cc
 800315c:	20000890 	.word	0x20000890
 8003160:	20000920 	.word	0x20000920
 8003164:	200005ac 	.word	0x200005ac
 8003168:	20000658 	.word	0x20000658
 800316c:	20000200 	.word	0x20000200
 8003170:	20000654 	.word	0x20000654
 8003174:	2000026c 	.word	0x2000026c
 8003178:	2000065c 	.word	0x2000065c
 800317c:	200002d8 	.word	0x200002d8
 8003180:	00000000 	.word	0x00000000
 8003184:	437a0000 	.word	0x437a0000
 8003188:	420c0000 	.word	0x420c0000
 800318c:	42480000 	.word	0x42480000
 8003190:	42b40000 	.word	0x42b40000
 8003194:	48000800 	.word	0x48000800
 8003198:	20000638 	.word	0x20000638
 800319c:	20000844 	.word	0x20000844

080031a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b094      	sub	sp, #80	; 0x50
 80031a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031a6:	f107 0318 	add.w	r3, r7, #24
 80031aa:	2238      	movs	r2, #56	; 0x38
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f009 ff74 	bl	800d09c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f005 fc4e 	bl	8008a64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031d2:	2302      	movs	r3, #2
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031d6:	2303      	movs	r3, #3
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80031da:	2302      	movs	r3, #2
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80031de:	2355      	movs	r3, #85	; 0x55
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e2:	2302      	movs	r3, #2
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031e6:	2302      	movs	r3, #2
 80031e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031ea:	2302      	movs	r3, #2
 80031ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ee:	f107 0318 	add.w	r3, r7, #24
 80031f2:	4618      	mov	r0, r3
 80031f4:	f005 fcea 	bl	8008bcc <HAL_RCC_OscConfig>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80031fe:	f001 fcc5 	bl	8004b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003202:	230f      	movs	r3, #15
 8003204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003206:	2303      	movs	r3, #3
 8003208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	2104      	movs	r1, #4
 800321a:	4618      	mov	r0, r3
 800321c:	f005 ffee 	bl	80091fc <HAL_RCC_ClockConfig>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003226:	f001 fcb1 	bl	8004b8c <Error_Handler>
  }
}
 800322a:	bf00      	nop
 800322c:	3750      	adds	r7, #80	; 0x50
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	0000      	movs	r0, r0
 8003234:	0000      	movs	r0, r0
	...

08003238 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b08a      	sub	sp, #40	; 0x28
 800323e:	af06      	add	r7, sp, #24
 8003240:	6078      	str	r0, [r7, #4]
	 ICM20602_read_IMU_data();
 8003242:	f7ff f82b 	bl	800229c <ICM20602_read_IMU_data>
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 8003246:	2120      	movs	r1, #32
 8003248:	48c5      	ldr	r0, [pc, #788]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800324a:	f005 fba9 	bl	80089a0 <HAL_GPIO_ReadPin>
 800324e:	4603      	mov	r3, r0
 8003250:	461c      	mov	r4, r3
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	48c2      	ldr	r0, [pc, #776]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003256:	f005 fba3 	bl	80089a0 <HAL_GPIO_ReadPin>
 800325a:	4603      	mov	r3, r0
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4423      	add	r3, r4
 8003262:	b2dc      	uxtb	r4, r3
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 8003264:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800326c:	f005 fb98 	bl	80089a0 <HAL_GPIO_ReadPin>
 8003270:	4603      	mov	r3, r0
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4423      	add	r3, r4
 8003278:	b2dc      	uxtb	r4, r3
 800327a:	2104      	movs	r1, #4
 800327c:	48b9      	ldr	r0, [pc, #740]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800327e:	f005 fb8f 	bl	80089a0 <HAL_GPIO_ReadPin>
 8003282:	4603      	mov	r3, r0
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	b2db      	uxtb	r3, r3
 8003288:	4423      	add	r3, r4
 800328a:	b2db      	uxtb	r3, r3
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 800328c:	f1c3 030f 	rsb	r3, r3, #15
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4bb5      	ldr	r3, [pc, #724]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003294:	701a      	strb	r2, [r3, #0]

	 switch (sw_mode){
 8003296:	4bb4      	ldr	r3, [pc, #720]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b06      	cmp	r3, #6
 800329c:	f200 82b3 	bhi.w	8003806 <HAL_TIM_PeriodElapsedCallback+0x5ce>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032c5 	.word	0x080032c5
 80032ac:	080033bd 	.word	0x080033bd
 80032b0:	08003435 	.word	0x08003435
 80032b4:	080034a1 	.word	0x080034a1
 80032b8:	08003623 	.word	0x08003623
 80032bc:	0800367f 	.word	0x0800367f
 80032c0:	08003743 	.word	0x08003743
	 	 case 0:  //main without debug
	 		if(Ether_connect==1){
 80032c4:	4ba9      	ldr	r3, [pc, #676]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x334>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d13b      	bne.n	8003344 <HAL_TIM_PeriodElapsedCallback+0x10c>
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
 80032cc:	4ba8      	ldr	r3, [pc, #672]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f961 	bl	8000598 <__aeabi_f2d>
 80032d6:	a39c      	add	r3, pc, #624	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fd f9b4 	bl	8000648 <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4614      	mov	r4, r2
 80032e6:	461d      	mov	r5, r3
 80032e8:	4ba2      	ldr	r3, [pc, #648]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f953 	bl	8000598 <__aeabi_f2d>
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	4ba0      	ldr	r3, [pc, #640]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80032f8:	f7fd f9a6 	bl	8000648 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	a392      	add	r3, pc, #584	; (adr r3, 8003550 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fd fac7 	bl	800089c <__aeabi_ddiv>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	a390      	add	r3, pc, #576	; (adr r3, 8003558 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fd f994 	bl	8000648 <__aeabi_dmul>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4620      	mov	r0, r4
 8003326:	4629      	mov	r1, r5
 8003328:	f7fc ffd8 	bl	80002dc <__adddf3>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	f7fd fc80 	bl	8000c38 <__aeabi_d2f>
 8003338:	4603      	mov	r3, r0
 800333a:	4a8d      	ldr	r2, [pc, #564]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800333c:	6013      	str	r3, [r2, #0]
	 			maintask_run();
 800333e:	f000 fe27 	bl	8003f90 <maintask_run>
	 		}
	 		else{
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
	 			maintask_state_stop();
	 		}
	 		break;
 8003342:	e263      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>
	 			yawAngle=yawAngle*0.999+(theta_vision*180.0/PI)*0.001;
 8003344:	4b8a      	ldr	r3, [pc, #552]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f925 	bl	8000598 <__aeabi_f2d>
 800334e:	a37e      	add	r3, pc, #504	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd f978 	bl	8000648 <__aeabi_dmul>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4614      	mov	r4, r2
 800335e:	461d      	mov	r5, r3
 8003360:	4b84      	ldr	r3, [pc, #528]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f917 	bl	8000598 <__aeabi_f2d>
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	4b82      	ldr	r3, [pc, #520]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003370:	f7fd f96a 	bl	8000648 <__aeabi_dmul>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	a374      	add	r3, pc, #464	; (adr r3, 8003550 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f7fd fa8b 	bl	800089c <__aeabi_ddiv>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4610      	mov	r0, r2
 800338c:	4619      	mov	r1, r3
 800338e:	a372      	add	r3, pc, #456	; (adr r3, 8003558 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fd f958 	bl	8000648 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4620      	mov	r0, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	f7fc ff9c 	bl	80002dc <__adddf3>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7fd fc44 	bl	8000c38 <__aeabi_d2f>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4a6f      	ldr	r2, [pc, #444]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80033b4:	6013      	str	r3, [r2, #0]
	 			maintask_state_stop();
 80033b6:	f001 f88b 	bl	80044d0 <maintask_state_stop>
	 		break;
 80033ba:	e227      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>

	 	 case 1:  //main debug
			yawAngle = yawAngle * 0.999 + (theta_vision * 180.0 / PI) * 0.001;
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd f8e9 	bl	8000598 <__aeabi_f2d>
 80033c6:	a360      	add	r3, pc, #384	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f7fd f93c 	bl	8000648 <__aeabi_dmul>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4b66      	ldr	r3, [pc, #408]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f8db 	bl	8000598 <__aeabi_f2d>
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	4b64      	ldr	r3, [pc, #400]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80033e8:	f7fd f92e 	bl	8000648 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	a356      	add	r3, pc, #344	; (adr r3, 8003550 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fd fa4f 	bl	800089c <__aeabi_ddiv>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	a354      	add	r3, pc, #336	; (adr r3, 8003558 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd f91c 	bl	8000648 <__aeabi_dmul>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4620      	mov	r0, r4
 8003416:	4629      	mov	r1, r5
 8003418:	f7fc ff60 	bl	80002dc <__adddf3>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4610      	mov	r0, r2
 8003422:	4619      	mov	r1, r3
 8003424:	f7fd fc08 	bl	8000c38 <__aeabi_d2f>
 8003428:	4603      	mov	r3, r0
 800342a:	4a51      	ldr	r2, [pc, #324]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800342c:	6013      	str	r3, [r2, #0]
			maintask_run();
 800342e:	f000 fdaf 	bl	8003f90 <maintask_run>
			break;
 8003432:	e1eb      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>

	 	 case 2:  //calibration motor
			if(decode_SW(SWdata[0])&0b00010000){
 8003434:	4b51      	ldr	r3, [pc, #324]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f001 f9f5 	bl	8004828 <decode_SW>
 800343e:	4603      	mov	r3, r0
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d014      	beq.n	8003472 <HAL_TIM_PeriodElapsedCallback+0x23a>
				 uint8_t senddata_calib[8];
				 can1_send(0x310,senddata_calib);//calibration
 8003448:	f107 0308 	add.w	r3, r7, #8
 800344c:	4619      	mov	r1, r3
 800344e:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003452:	f7fe fa3d 	bl	80018d0 <can1_send>
				 can2_send(0x310,senddata_calib);//calibration
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	4619      	mov	r1, r3
 800345c:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003460:	f7fe fa96 	bl	8001990 <can2_send>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003464:	2201      	movs	r2, #1
 8003466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800346a:	4845      	ldr	r0, [pc, #276]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800346c:	f005 fab0 	bl	80089d0 <HAL_GPIO_WritePin>
			else{
				omni_move(0.0, 0.0, 0.0,0.0);
				actuator_motor5(0.0,0.0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
			}
			break;
 8003470:	e1cc      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>
				omni_move(0.0, 0.0, 0.0,0.0);
 8003472:	eddf 1a44 	vldr	s3, [pc, #272]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8003476:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 800347a:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 800347e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8003482:	f001 fbd9 	bl	8004c38 <omni_move>
				actuator_motor5(0.0,0.0);
 8003486:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 800348a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 800348e:	f7fd fe65 	bl	800115c <actuator_motor5>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003498:	4839      	ldr	r0, [pc, #228]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800349a:	f005 fa99 	bl	80089d0 <HAL_GPIO_WritePin>
			break;
 800349e:	e1b5      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>

	 	 case 3:  //motor test
			if(decode_SW(SWdata[0])&0b00000001){
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f9bf 	bl	8004828 <decode_SW>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d010      	beq.n	80034d6 <HAL_TIM_PeriodElapsedCallback+0x29e>
				 omni_move(1.0, 0.0, 0.0,1.0);//fwd
 80034b4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80034b8:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 80034bc:	eddf 0a31 	vldr	s1, [pc, #196]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 80034c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80034c4:	f001 fbb8 	bl	8004c38 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80034c8:	2201      	movs	r2, #1
 80034ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ce:	482c      	ldr	r0, [pc, #176]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80034d0:	f005 fa7e 	bl	80089d0 <HAL_GPIO_WritePin>
 80034d4:	e09e      	b.n	8003614 <HAL_TIM_PeriodElapsedCallback+0x3dc>
			 }
			else if(decode_SW(SWdata[0])&0b00000010){
 80034d6:	4b29      	ldr	r3, [pc, #164]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 f9a4 	bl	8004828 <decode_SW>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d010      	beq.n	800350c <HAL_TIM_PeriodElapsedCallback+0x2d4>
				 omni_move(-1.0, 0.0, 0.0,1.0);//back
 80034ea:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80034ee:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 80034f2:	eddf 0a24 	vldr	s1, [pc, #144]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 80034f6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80034fa:	f001 fb9d 	bl	8004c38 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80034fe:	2201      	movs	r2, #1
 8003500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003504:	481e      	ldr	r0, [pc, #120]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003506:	f005 fa63 	bl	80089d0 <HAL_GPIO_WritePin>
 800350a:	e083      	b.n	8003614 <HAL_TIM_PeriodElapsedCallback+0x3dc>
			 }
			else if(decode_SW(SWdata[0])&0b00000100){
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f989 	bl	8004828 <decode_SW>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d033      	beq.n	8003588 <HAL_TIM_PeriodElapsedCallback+0x350>
				 omni_move(0.0, -1.0, 0.0,1.0);//left
 8003520:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003524:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8003528:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800352c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003584 <HAL_TIM_PeriodElapsedCallback+0x34c>
 8003530:	f001 fb82 	bl	8004c38 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003534:	2201      	movs	r2, #1
 8003536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800353a:	4811      	ldr	r0, [pc, #68]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800353c:	f005 fa48 	bl	80089d0 <HAL_GPIO_WritePin>
 8003540:	e068      	b.n	8003614 <HAL_TIM_PeriodElapsedCallback+0x3dc>
 8003542:	bf00      	nop
 8003544:	f3af 8000 	nop.w
 8003548:	d916872b 	.word	0xd916872b
 800354c:	3feff7ce 	.word	0x3feff7ce
 8003550:	60000000 	.word	0x60000000
 8003554:	400921fb 	.word	0x400921fb
 8003558:	d2f1a9fc 	.word	0xd2f1a9fc
 800355c:	3f50624d 	.word	0x3f50624d
 8003560:	48000400 	.word	0x48000400
 8003564:	48000c00 	.word	0x48000c00
 8003568:	200005ce 	.word	0x200005ce
 800356c:	200005c9 	.word	0x200005c9
 8003570:	200005e0 	.word	0x200005e0
 8003574:	200006fc 	.word	0x200006fc
 8003578:	40668000 	.word	0x40668000
 800357c:	2000065c 	.word	0x2000065c
 8003580:	48000800 	.word	0x48000800
 8003584:	00000000 	.word	0x00000000
			 }
			else if(decode_SW(SWdata[0])&0b00001000){
 8003588:	4baa      	ldr	r3, [pc, #680]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f001 f94b 	bl	8004828 <decode_SW>
 8003592:	4603      	mov	r3, r0
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_TIM_PeriodElapsedCallback+0x386>
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 800359c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80035a0:	ed9f 1aa5 	vldr	s2, [pc, #660]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80035a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80035a8:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80035ac:	f001 fb44 	bl	8004c38 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80035b0:	2201      	movs	r2, #1
 80035b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035b6:	48a1      	ldr	r0, [pc, #644]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 80035b8:	f005 fa0a 	bl	80089d0 <HAL_GPIO_WritePin>
 80035bc:	e02a      	b.n	8003614 <HAL_TIM_PeriodElapsedCallback+0x3dc>
			 }
			else if(decode_SW(SWdata[0])&0b00010000){
 80035be:	4b9d      	ldr	r3, [pc, #628]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 f930 	bl	8004828 <decode_SW>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d010      	beq.n	80035f4 <HAL_TIM_PeriodElapsedCallback+0x3bc>
				 omni_move(0.0, 0.0, 7.0,1.0);//spin
 80035d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80035d6:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 80035da:	eddf 0a97 	vldr	s1, [pc, #604]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80035de:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80035e2:	f001 fb29 	bl	8004c38 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 80035e6:	2201      	movs	r2, #1
 80035e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035ec:	4893      	ldr	r0, [pc, #588]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 80035ee:	f005 f9ef 	bl	80089d0 <HAL_GPIO_WritePin>
 80035f2:	e00f      	b.n	8003614 <HAL_TIM_PeriodElapsedCallback+0x3dc>
			 }
			else{
				omni_move(0.0, 0.0, 0.0,0.0);
 80035f4:	eddf 1a90 	vldr	s3, [pc, #576]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80035f8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80035fc:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003600:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003604:	f001 fb18 	bl	8004c38 <omni_move>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800360e:	488b      	ldr	r0, [pc, #556]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003610:	f005 f9de 	bl	80089d0 <HAL_GPIO_WritePin>
			}
			actuator_motor5(0.0,0.0);
 8003614:	eddf 0a88 	vldr	s1, [pc, #544]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003618:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 800361c:	f7fd fd9e 	bl	800115c <actuator_motor5>
			break;
 8003620:	e0f4      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>

	 	 case 4://drible test
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003622:	4b84      	ldr	r3, [pc, #528]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f001 f8fe 	bl	8004828 <decode_SW>
 800362c:	4603      	mov	r3, r0
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_TIM_PeriodElapsedCallback+0x418>
	 			actuator_motor5(0.5,1.0);
 8003636:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800363a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800363e:	f7fd fd8d 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003642:	2201      	movs	r2, #1
 8003644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003648:	487c      	ldr	r0, [pc, #496]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800364a:	f005 f9c1 	bl	80089d0 <HAL_GPIO_WritePin>
 800364e:	e00b      	b.n	8003668 <HAL_TIM_PeriodElapsedCallback+0x430>
			 }
			 else{
				actuator_motor5(0.0,0.0);
 8003650:	eddf 0a79 	vldr	s1, [pc, #484]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003654:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003658:	f7fd fd80 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003662:	4876      	ldr	r0, [pc, #472]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003664:	f005 f9b4 	bl	80089d0 <HAL_GPIO_WritePin>
			 }

			 omni_move(0.0, 0.0, 0.0, 0.0);
 8003668:	eddf 1a73 	vldr	s3, [pc, #460]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 800366c:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003670:	eddf 0a71 	vldr	s1, [pc, #452]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003674:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003678:	f001 fade 	bl	8004c38 <omni_move>

			 break;
 800367c:	e0c6      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>

	 	 case 5:
	 		 if(decode_SW(SWdata[0])&0b00010000){
 800367e:	4b6d      	ldr	r3, [pc, #436]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f8d0 	bl	8004828 <decode_SW>
 8003688:	4603      	mov	r3, r0
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d02e      	beq.n	80036f0 <HAL_TIM_PeriodElapsedCallback+0x4b8>
		 		actuator_motor5(0.5,1.0);
 8003692:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003696:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800369a:	f7fd fd5f 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 800369e:	2201      	movs	r2, #1
 80036a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036a4:	4865      	ldr	r0, [pc, #404]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 80036a6:	f005 f993 	bl	80089d0 <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 80036aa:	4b65      	ldr	r3, [pc, #404]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10a      	bne.n	80036c8 <HAL_TIM_PeriodElapsedCallback+0x490>
					if(kick_state==0){
 80036b2:	4b64      	ldr	r3, [pc, #400]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_TIM_PeriodElapsedCallback+0x490>
						actuator_kicker(3, 100);
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	2003      	movs	r0, #3
 80036be:	f7fd fd9e 	bl	80011fe <actuator_kicker>
						kick_state=1;
 80036c2:	4b60      	ldr	r3, [pc, #384]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
					}
				}
	 			if(kick_state==1){
 80036c8:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d12d      	bne.n	800372c <HAL_TIM_PeriodElapsedCallback+0x4f4>
	 				kick_time++;
 80036d0:	4b5d      	ldr	r3, [pc, #372]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a5c      	ldr	r2, [pc, #368]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80036d8:	6013      	str	r3, [r2, #0]
	 				if(kick_time>100){
 80036da:	4b5b      	ldr	r3, [pc, #364]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	dd24      	ble.n	800372c <HAL_TIM_PeriodElapsedCallback+0x4f4>
	 					kick_state=0;
 80036e2:	4b58      	ldr	r3, [pc, #352]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
	 					kick_time=0;
 80036e8:	4b57      	ldr	r3, [pc, #348]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e01d      	b.n	800372c <HAL_TIM_PeriodElapsedCallback+0x4f4>
	 				}
	 			}

	 		 }
	 		 else{
				 actuator_motor5(0.0,0.0);
 80036f0:	eddf 0a51 	vldr	s1, [pc, #324]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80036f4:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80036f8:	f7fd fd30 	bl	800115c <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003702:	484e      	ldr	r0, [pc, #312]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 8003704:	f005 f964 	bl	80089d0 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003708:	2101      	movs	r1, #1
 800370a:	2001      	movs	r0, #1
 800370c:	f7fd fd77 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker(2, 0);
 8003710:	2100      	movs	r1, #0
 8003712:	2002      	movs	r0, #2
 8003714:	f7fd fd73 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker_voltage(250.0);
 8003718:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 800384c <HAL_TIM_PeriodElapsedCallback+0x614>
 800371c:	f7fd fd4e 	bl	80011bc <actuator_kicker_voltage>
				 kick_state=0;
 8003720:	4b48      	ldr	r3, [pc, #288]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
				 kick_time=0;
 8003726:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
	 		 }
				omni_move(0.0, 0.0, 0.0,0.0);
 800372c:	eddf 1a42 	vldr	s3, [pc, #264]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003730:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003734:	eddf 0a40 	vldr	s1, [pc, #256]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003738:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 800373c:	f001 fa7c 	bl	8004c38 <omni_move>
	 		break;
 8003740:	e064      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>

	 	 case 6:
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003742:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f001 f86e 	bl	8004828 <decode_SW>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02e      	beq.n	80037b4 <HAL_TIM_PeriodElapsedCallback+0x57c>
	 			actuator_motor5(0.5,1.0);
 8003756:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800375a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800375e:	f7fd fcfd 	bl	800115c <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003762:	2201      	movs	r2, #1
 8003764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003768:	4834      	ldr	r0, [pc, #208]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800376a:	f005 f931 	bl	80089d0 <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d10a      	bne.n	800378c <HAL_TIM_PeriodElapsedCallback+0x554>
					if(kick_state==0){
 8003776:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_PeriodElapsedCallback+0x554>
						actuator_kicker(3, 100);
 800377e:	2164      	movs	r1, #100	; 0x64
 8003780:	2003      	movs	r0, #3
 8003782:	f7fd fd3c 	bl	80011fe <actuator_kicker>
						kick_state=1;
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
					}
				}
				if(kick_state==1){
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d12d      	bne.n	80037f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>
					kick_time++;
 8003794:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800379c:	6013      	str	r3, [r2, #0]
					if(kick_time>100){
 800379e:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	dd24      	ble.n	80037f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>
						kick_state=0;
 80037a6:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
						kick_time=0;
 80037ac:	4b26      	ldr	r3, [pc, #152]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e01d      	b.n	80037f0 <HAL_TIM_PeriodElapsedCallback+0x5b8>
					}
				}
	 		 }
	 		 else{
	 			 actuator_motor5(0.0,0.0);
 80037b4:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80037b8:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80037bc:	f7fd fcce 	bl	800115c <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037c6:	481d      	ldr	r0, [pc, #116]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 80037c8:	f005 f902 	bl	80089d0 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 80037cc:	2101      	movs	r1, #1
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7fd fd15 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker(2, 1);
 80037d4:	2101      	movs	r1, #1
 80037d6:	2002      	movs	r0, #2
 80037d8:	f7fd fd11 	bl	80011fe <actuator_kicker>
	 			 actuator_kicker_voltage(0.0);
 80037dc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80037e0:	f7fd fcec 	bl	80011bc <actuator_kicker_voltage>
					kick_state=0;
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
					kick_time=0;
 80037ea:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x610>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
	 		 }
				omni_move(0.0, 0.0, 0.0,0.0);
 80037f0:	eddf 1a11 	vldr	s3, [pc, #68]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80037f4:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80037f8:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 80037fc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003838 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003800:	f001 fa1a 	bl	8004c38 <omni_move>
	 		break;
 8003804:	e002      	b.n	800380c <HAL_TIM_PeriodElapsedCallback+0x5d4>

	 	 default:
	 		maintask_stop();
 8003806:	f000 fecb 	bl	80045a0 <maintask_stop>
	 		 break;
 800380a:	bf00      	nop
	}

	 if(cnt_time_tim>50){
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	2b32      	cmp	r3, #50	; 0x32
 8003812:	d935      	bls.n	8003880 <HAL_TIM_PeriodElapsedCallback+0x648>
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8003816:	7ada      	ldrb	r2, [r3, #11]
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x620>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d01f      	beq.n	8003860 <HAL_TIM_PeriodElapsedCallback+0x628>
		 Ether_connect=1;
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x624>)
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8003826:	2201      	movs	r2, #1
 8003828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800382c:	4803      	ldr	r0, [pc, #12]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x604>)
 800382e:	f005 f8cf 	bl	80089d0 <HAL_GPIO_WritePin>
 8003832:	e01e      	b.n	8003872 <HAL_TIM_PeriodElapsedCallback+0x63a>
 8003834:	2000065c 	.word	0x2000065c
 8003838:	00000000 	.word	0x00000000
 800383c:	48000800 	.word	0x48000800
 8003840:	20000708 	.word	0x20000708
 8003844:	20000630 	.word	0x20000630
 8003848:	20000634 	.word	0x20000634
 800384c:	437a0000 	.word	0x437a0000
 8003850:	200005cc 	.word	0x200005cc
 8003854:	20000638 	.word	0x20000638
 8003858:	200005ca 	.word	0x200005ca
 800385c:	200005c9 	.word	0x200005c9
	 }
	 else{
		 Ether_connect=0;
 8003860:	4b3e      	ldr	r3, [pc, #248]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8003866:	2200      	movs	r2, #0
 8003868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800386c:	483c      	ldr	r0, [pc, #240]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800386e:	f005 f8af 	bl	80089d0 <HAL_GPIO_WritePin>
	 }
	 Ether_connect_check=data_from_ether[Rxbufsize_from_Ether-3];
 8003872:	4b3c      	ldr	r3, [pc, #240]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003874:	7ada      	ldrb	r2, [r3, #11]
 8003876:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003878:	701a      	strb	r2, [r3, #0]
	 cnt_time_tim=0;
 800387a:	4b3c      	ldr	r3, [pc, #240]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x734>)
 800387c:	2200      	movs	r2, #0
 800387e:	801a      	strh	r2, [r3, #0]

	 }

	 if(cnt_time_50Hz>50){
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	2b32      	cmp	r3, #50	; 0x32
 8003886:	d949      	bls.n	800391c <HAL_TIM_PeriodElapsedCallback+0x6e4>
       if(sw_mode>0){
 8003888:	4b3a      	ldr	r3, [pc, #232]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d03b      	beq.n	8003908 <HAL_TIM_PeriodElapsedCallback+0x6d0>
    	 //printf(" kicktime=%d, state=%d ",kick_time,kick_state);
		 //printf("data: acc0=%f,acc1=%f,acc2=%f,gyro0=%f,gyro1=%f,gyro2=%f,tmp=%f",acc[0],acc[1],acc[2],gyro[0],gyro[1],gyro[2],IMU_tmp);
		 //printf(" pich=%f roll=%f yaw=%f",pitchAngle,rollAngle,yawAngle);
    	 printf(" yaw=%+4.2f",yawAngle);
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fe7f 	bl	8000598 <__aeabi_f2d>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4837      	ldr	r0, [pc, #220]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x744>)
 80038a0:	f00a f86e 	bl	800d980 <iprintf>
		 //		 Rxbuf_from_Ether[8] ,Rxbuf_from_Ether[9],Rxbuf_from_Ether[10],Rxbuf_from_Ether[11],Rxbuf_from_Ether[12]
	     //		,Rxbuf_from_Ether[13],Rxbuf_from_Ether[14]);

		 //printf(" C=%d V=%d SW=%d",Csense[0],Vsense[0],SWdata[0]);
		 //printf(" A=%f",amplitude[4]);
		 printf("%+8.0f %+8.0f %+8.0f %+8.0f", motor_integral[0], motor_integral[1], motor_integral[2], motor_integral[3]);
 80038a4:	4b36      	ldr	r3, [pc, #216]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fe75 	bl	8000598 <__aeabi_f2d>
 80038ae:	4682      	mov	sl, r0
 80038b0:	468b      	mov	fp, r1
 80038b2:	4b33      	ldr	r3, [pc, #204]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fc fe6e 	bl	8000598 <__aeabi_f2d>
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fe67 	bl	8000598 <__aeabi_f2d>
 80038ca:	4680      	mov	r8, r0
 80038cc:	4689      	mov	r9, r1
 80038ce:	4b2c      	ldr	r3, [pc, #176]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fc fe60 	bl	8000598 <__aeabi_f2d>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80038e4:	e9cd 4500 	strd	r4, r5, [sp]
 80038e8:	4652      	mov	r2, sl
 80038ea:	465b      	mov	r3, fp
 80038ec:	4825      	ldr	r0, [pc, #148]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80038ee:	f00a f847 	bl	800d980 <iprintf>
		 //printf(" ball:0=%d",ball[0]);
		 printf(" mouse:x=%+6ld, y=%+6ld", mouse_odom[0], mouse_odom[1]);
 80038f2:	4b25      	ldr	r3, [pc, #148]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a24      	ldr	r2, [pc, #144]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80038f8:	6852      	ldr	r2, [r2, #4]
 80038fa:	4619      	mov	r1, r3
 80038fc:	4823      	ldr	r0, [pc, #140]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x754>)
 80038fe:	f00a f83f 	bl	800d980 <iprintf>
		 printf("\r\n");
 8003902:	4823      	ldr	r0, [pc, #140]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003904:	f00a f8c2 	bl	800da8c <puts>
	 }

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	4822      	ldr	r0, [pc, #136]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 800390c:	f005 f878 	bl	8008a00 <HAL_GPIO_TogglePin>
		  cnt_time_50Hz=0;
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]

		  actuator_power_ONOFF(1);
 8003916:	2001      	movs	r0, #1
 8003918:	f7fd fc88 	bl	800122c <actuator_power_ONOFF>
	 }
	 cnt_time_50Hz++;
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003926:	801a      	strh	r2, [r3, #0]
	 cnt_time_tim++;
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x734>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003932:	801a      	strh	r2, [r3, #0]

	 if(Power_voltage[4]<22.0){
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8003936:	edd3 7a04 	vldr	s15, [r3, #16]
 800393a:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800393e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	d400      	bmi.n	800394a <HAL_TIM_PeriodElapsedCallback+0x712>
		 actuator_buzzer(100,100);
	 }

}
 8003948:	e003      	b.n	8003952 <HAL_TIM_PeriodElapsedCallback+0x71a>
		 actuator_buzzer(100,100);
 800394a:	2164      	movs	r1, #100	; 0x64
 800394c:	2064      	movs	r0, #100	; 0x64
 800394e:	f7fd fca3 	bl	8001298 <actuator_buzzer>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395c:	200005c9 	.word	0x200005c9
 8003960:	48000800 	.word	0x48000800
 8003964:	20000638 	.word	0x20000638
 8003968:	200005ca 	.word	0x200005ca
 800396c:	200005cc 	.word	0x200005cc
 8003970:	200005d4 	.word	0x200005d4
 8003974:	200005ce 	.word	0x200005ce
 8003978:	200005e0 	.word	0x200005e0
 800397c:	0800fdd4 	.word	0x0800fdd4
 8003980:	20000690 	.word	0x20000690
 8003984:	0800fde0 	.word	0x0800fde0
 8003988:	20000710 	.word	0x20000710
 800398c:	0800fdfc 	.word	0x0800fdfc
 8003990:	0800fe14 	.word	0x0800fe14
 8003994:	48000400 	.word	0x48000400
 8003998:	200006a4 	.word	0x200006a4

0800399c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	80fb      	strh	r3, [r7, #6]
	if(HAL_GetTick()>2000){
 80039a6:	f7ff faaf 	bl	8002f08 <HAL_GetTick>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80039b0:	d934      	bls.n	8003a1c <HAL_GPIO_EXTI_Callback+0x80>
		uint8_t cnt=0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
		while(cnt<100){
 80039b6:	e00d      	b.n	80039d4 <HAL_GPIO_EXTI_Callback+0x38>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 80039b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039bc:	4819      	ldr	r0, [pc, #100]	; (8003a24 <HAL_GPIO_EXTI_Callback+0x88>)
 80039be:	f004 ffef 	bl	80089a0 <HAL_GPIO_ReadPin>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d109      	bne.n	80039dc <HAL_GPIO_EXTI_Callback+0x40>
				cnt++;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	3301      	adds	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
				delayUs(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f001 f91a 	bl	8004c08 <delayUs>
		while(cnt<100){
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b63      	cmp	r3, #99	; 0x63
 80039d8:	d9ee      	bls.n	80039b8 <HAL_GPIO_EXTI_Callback+0x1c>
 80039da:	e000      	b.n	80039de <HAL_GPIO_EXTI_Callback+0x42>
			}
			else{
				break;
 80039dc:	bf00      	nop
			}
		}

		if(cnt>=100){
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b63      	cmp	r3, #99	; 0x63
 80039e2:	d918      	bls.n	8003a16 <HAL_GPIO_EXTI_Callback+0x7a>
			Emargency=1;
 80039e4:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_GPIO_EXTI_Callback+0x8c>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 80039ea:	4810      	ldr	r0, [pc, #64]	; (8003a2c <HAL_GPIO_EXTI_Callback+0x90>)
 80039ec:	f009 ffc8 	bl	800d980 <iprintf>
			for(int i=0;i<50;i++){
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	e004      	b.n	8003a00 <HAL_GPIO_EXTI_Callback+0x64>
				maintask_emargency();
 80039f6:	f000 fcfd 	bl	80043f4 <maintask_emargency>
			for(int i=0;i<50;i++){
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3301      	adds	r3, #1
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b31      	cmp	r3, #49	; 0x31
 8003a04:	ddf7      	ble.n	80039f6 <HAL_GPIO_EXTI_Callback+0x5a>
			}
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a0c:	4805      	ldr	r0, [pc, #20]	; (8003a24 <HAL_GPIO_EXTI_Callback+0x88>)
 8003a0e:	f004 ffdf 	bl	80089d0 <HAL_GPIO_WritePin>
			NVIC_SystemReset();
 8003a12:	f7ff fa51 	bl	8002eb8 <__NVIC_SystemReset>
			Emargency=0;
		}
		else{
			Emargency=0;
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	48000400 	.word	0x48000400
 8003a28:	2000065e 	.word	0x2000065e
 8003a2c:	0800fe18 	.word	0x0800fe18

08003a30 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8281 	beq.w	8003f48 <HAL_FDCAN_RxFifo0Callback+0x518>
	  {
   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003a46:	4baf      	ldr	r3, [pc, #700]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003a48:	4aaf      	ldr	r2, [pc, #700]	; (8003d08 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003a4a:	2140      	movs	r1, #64	; 0x40
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f004 f9c9 	bl	8007de4 <HAL_FDCAN_GetRxMessage>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_FDCAN_RxFifo0Callback+0x2c>
    {
    Error_Handler();
 8003a58:	f001 f898 	bl	8004b8c <Error_Handler>
    }
	switch (RxHeader.Identifier){
 8003a5c:	4baa      	ldr	r3, [pc, #680]	; (8003d08 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f240 4201 	movw	r2, #1025	; 0x401
 8003a64:	4293      	cmp	r3, r2
 8003a66:	f000 8109 	beq.w	8003c7c <HAL_FDCAN_RxFifo0Callback+0x24c>
 8003a6a:	f240 4201 	movw	r2, #1025	; 0x401
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	f200 826d 	bhi.w	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	f200 809d 	bhi.w	8003bb4 <HAL_FDCAN_RxFifo0Callback+0x184>
 8003a7a:	e08b      	b.n	8003b94 <HAL_FDCAN_RxFifo0Callback+0x164>
 8003a7c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003a80:	2b41      	cmp	r3, #65	; 0x41
 8003a82:	f200 8264 	bhi.w	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003d8b 	.word	0x08003d8b
 8003a90:	08003dc7 	.word	0x08003dc7
 8003a94:	08003e03 	.word	0x08003e03
 8003a98:	08003e3f 	.word	0x08003e3f
 8003a9c:	08003e7b 	.word	0x08003e7b
 8003aa0:	08003f4f 	.word	0x08003f4f
 8003aa4:	08003f4f 	.word	0x08003f4f
 8003aa8:	08003f4f 	.word	0x08003f4f
 8003aac:	08003f4f 	.word	0x08003f4f
 8003ab0:	08003f4f 	.word	0x08003f4f
 8003ab4:	08003f4f 	.word	0x08003f4f
 8003ab8:	08003f4f 	.word	0x08003f4f
 8003abc:	08003f4f 	.word	0x08003f4f
 8003ac0:	08003f4f 	.word	0x08003f4f
 8003ac4:	08003f4f 	.word	0x08003f4f
 8003ac8:	08003f4f 	.word	0x08003f4f
 8003acc:	08003c1d 	.word	0x08003c1d
 8003ad0:	08003f4f 	.word	0x08003f4f
 8003ad4:	08003f4f 	.word	0x08003f4f
 8003ad8:	08003f4f 	.word	0x08003f4f
 8003adc:	08003f4f 	.word	0x08003f4f
 8003ae0:	08003c2f 	.word	0x08003c2f
 8003ae4:	08003f4f 	.word	0x08003f4f
 8003ae8:	08003f4f 	.word	0x08003f4f
 8003aec:	08003f4f 	.word	0x08003f4f
 8003af0:	08003f4f 	.word	0x08003f4f
 8003af4:	08003f4f 	.word	0x08003f4f
 8003af8:	08003f4f 	.word	0x08003f4f
 8003afc:	08003f4f 	.word	0x08003f4f
 8003b00:	08003f4f 	.word	0x08003f4f
 8003b04:	08003f4f 	.word	0x08003f4f
 8003b08:	08003f4f 	.word	0x08003f4f
 8003b0c:	08003ea1 	.word	0x08003ea1
 8003b10:	08003eb3 	.word	0x08003eb3
 8003b14:	08003ec5 	.word	0x08003ec5
 8003b18:	08003ed7 	.word	0x08003ed7
 8003b1c:	08003c41 	.word	0x08003c41
 8003b20:	08003c53 	.word	0x08003c53
 8003b24:	08003f4f 	.word	0x08003f4f
 8003b28:	08003f4f 	.word	0x08003f4f
 8003b2c:	08003f4f 	.word	0x08003f4f
 8003b30:	08003f4f 	.word	0x08003f4f
 8003b34:	08003f4f 	.word	0x08003f4f
 8003b38:	08003f4f 	.word	0x08003f4f
 8003b3c:	08003f4f 	.word	0x08003f4f
 8003b40:	08003f4f 	.word	0x08003f4f
 8003b44:	08003f4f 	.word	0x08003f4f
 8003b48:	08003f4f 	.word	0x08003f4f
 8003b4c:	08003ee9 	.word	0x08003ee9
 8003b50:	08003f01 	.word	0x08003f01
 8003b54:	08003f19 	.word	0x08003f19
 8003b58:	08003f31 	.word	0x08003f31
 8003b5c:	08003c65 	.word	0x08003c65
 8003b60:	08003f4f 	.word	0x08003f4f
 8003b64:	08003f4f 	.word	0x08003f4f
 8003b68:	08003f4f 	.word	0x08003f4f
 8003b6c:	08003f4f 	.word	0x08003f4f
 8003b70:	08003f4f 	.word	0x08003f4f
 8003b74:	08003f4f 	.word	0x08003f4f
 8003b78:	08003f4f 	.word	0x08003f4f
 8003b7c:	08003f4f 	.word	0x08003f4f
 8003b80:	08003f4f 	.word	0x08003f4f
 8003b84:	08003f4f 	.word	0x08003f4f
 8003b88:	08003f4f 	.word	0x08003f4f
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003d3d 	.word	0x08003d3d
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	f200 81da 	bhi.w	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
 8003b9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_FDCAN_RxFifo0Callback+0x170>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bc9 	.word	0x08003bc9
 8003ba4:	08003bdf 	.word	0x08003bdf
 8003ba8:	08003f4d 	.word	0x08003f4d
 8003bac:	08003f4d 	.word	0x08003f4d
 8003bb0:	08003f4d 	.word	0x08003f4d
 8003bb4:	f240 2241 	movw	r2, #577	; 0x241
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	f200 81c8 	bhi.w	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc2:	f4bf af5b 	bcs.w	8003a7c <HAL_FDCAN_RxFifo0Callback+0x4c>

	}
	}


}
 8003bc6:	e1c2      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		error_No[0]=RxData[0];
 8003bc8:	4b4e      	ldr	r3, [pc, #312]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	4b4f      	ldr	r3, [pc, #316]	; (8003d0c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003bce:	701a      	strb	r2, [r3, #0]
		error_No[1]=RxData[1];
 8003bd0:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003bd2:	785a      	ldrb	r2, [r3, #1]
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	; (8003d0c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003bd6:	705a      	strb	r2, [r3, #1]
		Error_Handler();
 8003bd8:	f000 ffd8 	bl	8004b8c <Error_Handler>
		break;
 8003bdc:	e1b7      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		error_No[0]=RxData[0];
 8003bde:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003be4:	701a      	strb	r2, [r3, #0]
		error_No[1]=RxData[1];
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003be8:	785a      	ldrb	r2, [r3, #1]
 8003bea:	4b48      	ldr	r3, [pc, #288]	; (8003d0c <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8003bec:	705a      	strb	r2, [r3, #1]
		maintask_stop();
 8003bee:	f000 fcd7 	bl	80045a0 <maintask_stop>
		break;
 8003bf2:	e1ac      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		ball[0]=RxData[0];
 8003bf4:	4b43      	ldr	r3, [pc, #268]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	4b45      	ldr	r3, [pc, #276]	; (8003d10 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003bfa:	701a      	strb	r2, [r3, #0]
		ball[1]=RxData[1];
 8003bfc:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003bfe:	785a      	ldrb	r2, [r3, #1]
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003c02:	705a      	strb	r2, [r3, #1]
		ball[2]=RxData[2];
 8003c04:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c06:	789a      	ldrb	r2, [r3, #2]
 8003c08:	4b41      	ldr	r3, [pc, #260]	; (8003d10 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003c0a:	709a      	strb	r2, [r3, #2]
		ball[3]=RxData[3];
 8003c0c:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c0e:	78da      	ldrb	r2, [r3, #3]
 8003c10:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8003c12:	70da      	strb	r2, [r3, #3]
		check_FC=1;
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_FDCAN_RxFifo0Callback+0x2e4>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
		break;
 8003c1a:	e198      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		Power_voltage[4]=uchar4_to_float(RxData);
 8003c1c:	4839      	ldr	r0, [pc, #228]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c1e:	f001 fe31 	bl	8005884 <uchar4_to_float>
 8003c22:	eef0 7a40 	vmov.f32	s15, s0
 8003c26:	4b3c      	ldr	r3, [pc, #240]	; (8003d18 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8003c28:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8003c2c:	e18f      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		Power_voltage[5]=uchar4_to_float(RxData);
 8003c2e:	4835      	ldr	r0, [pc, #212]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c30:	f001 fe28 	bl	8005884 <uchar4_to_float>
 8003c34:	eef0 7a40 	vmov.f32	s15, s0
 8003c38:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8003c3a:	edc3 7a05 	vstr	s15, [r3, #20]
		break;
 8003c3e:	e186      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		tempercher[4]=uchar4_to_float(RxData);
 8003c40:	4830      	ldr	r0, [pc, #192]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c42:	f001 fe1f 	bl	8005884 <uchar4_to_float>
 8003c46:	eef0 7a40 	vmov.f32	s15, s0
 8003c4a:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003c4c:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8003c50:	e17d      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		tempercher[5]=uchar4_to_float(RxData);
 8003c52:	482c      	ldr	r0, [pc, #176]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c54:	f001 fe16 	bl	8005884 <uchar4_to_float>
 8003c58:	eef0 7a40 	vmov.f32	s15, s0
 8003c5c:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8003c5e:	edc3 7a05 	vstr	s15, [r3, #20]
		break;
 8003c62:	e174      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		amplitude[4]=uchar4_to_float(RxData);
 8003c64:	4827      	ldr	r0, [pc, #156]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c66:	f001 fe0d 	bl	8005884 <uchar4_to_float>
 8003c6a:	eef0 7a40 	vmov.f32	s15, s0
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8003c70:	edc3 7a04 	vstr	s15, [r3, #16]
		check_power=1;
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	701a      	strb	r2, [r3, #0]
		break;
 8003c7a:	e168      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		data_from_ether[8]=RxData[0];
 8003c7c:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003c82:	721a      	strb	r2, [r3, #8]
		data_from_ether[9]=RxData[1];
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c86:	785a      	ldrb	r2, [r3, #1]
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003c8a:	725a      	strb	r2, [r3, #9]
		data_from_ether[10]=RxData[2];
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c8e:	789a      	ldrb	r2, [r3, #2]
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003c92:	729a      	strb	r2, [r3, #10]
		data_from_ether[11]=RxData[3];
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c96:	78da      	ldrb	r2, [r3, #3]
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003c9a:	72da      	strb	r2, [r3, #11]
		data_from_ether[12]=RxData[4];
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8003c9e:	791a      	ldrb	r2, [r3, #4]
 8003ca0:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003ca2:	731a      	strb	r2, [r3, #12]
		if(data_from_ether[8]>100){
 8003ca4:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003ca6:	7a1b      	ldrb	r3, [r3, #8]
 8003ca8:	2b64      	cmp	r3, #100	; 0x64
 8003caa:	d909      	bls.n	8003cc0 <HAL_FDCAN_RxFifo0Callback+0x290>
			chipEN=1;
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <HAL_FDCAN_RxFifo0Callback+0x2fc>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
			data_from_ether[8]=data_from_ether[8]-100;
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003cb4:	7a1b      	ldrb	r3, [r3, #8]
 8003cb6:	3b64      	subs	r3, #100	; 0x64
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003cbc:	721a      	strb	r2, [r3, #8]
 8003cbe:	e002      	b.n	8003cc6 <HAL_FDCAN_RxFifo0Callback+0x296>
			chipEN=0;
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_FDCAN_RxFifo0Callback+0x2fc>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
		kick_power=(float32_t)data_from_ether[8]/20.0;
 8003cc6:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003cc8:	7a1b      	ldrb	r3, [r3, #8]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cd2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_FDCAN_RxFifo0Callback+0x300>)
 8003cdc:	edc3 7a00 	vstr	s15, [r3]
		drible_power=(float32_t)data_from_ether[9]/20.0;
 8003ce0:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003ce2:	7a5b      	ldrb	r3, [r3, #9]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cec:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003cf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <HAL_FDCAN_RxFifo0Callback+0x304>)
 8003cf6:	edc3 7a00 	vstr	s15, [r3]
		keeper_EN=data_from_ether[10];
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8003cfc:	7a9a      	ldrb	r2, [r3, #10]
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <HAL_FDCAN_RxFifo0Callback+0x308>)
 8003d00:	701a      	strb	r2, [r3, #0]
	break;
 8003d02:	e124      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
 8003d04:	20000660 	.word	0x20000660
 8003d08:	2000075c 	.word	0x2000075c
 8003d0c:	20000718 	.word	0x20000718
 8003d10:	20000708 	.word	0x20000708
 8003d14:	20000736 	.word	0x20000736
 8003d18:	200006a4 	.word	0x200006a4
 8003d1c:	200006bc 	.word	0x200006bc
 8003d20:	200006d4 	.word	0x200006d4
 8003d24:	20000735 	.word	0x20000735
 8003d28:	20000638 	.word	0x20000638
 8003d2c:	20000704 	.word	0x20000704
 8003d30:	200006f8 	.word	0x200006f8
 8003d34:	200006f4 	.word	0x200006f4
 8003d38:	20000730 	.word	0x20000730
	mouse[0] = (int16_t)((RxData[1] << 8) | RxData[0]);
 8003d3c:	4b86      	ldr	r3, [pc, #536]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	4b84      	ldr	r3, [pc, #528]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b21b      	sxth	r3, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b21a      	sxth	r2, r3
 8003d4e:	4b83      	ldr	r3, [pc, #524]	; (8003f5c <HAL_FDCAN_RxFifo0Callback+0x52c>)
 8003d50:	801a      	strh	r2, [r3, #0]
	mouse[1] = (int16_t)((RxData[3] << 8) | RxData[2]);
 8003d52:	4b81      	ldr	r3, [pc, #516]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003d54:	78db      	ldrb	r3, [r3, #3]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	b21a      	sxth	r2, r3
 8003d5a:	4b7f      	ldr	r3, [pc, #508]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003d5c:	789b      	ldrb	r3, [r3, #2]
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b21a      	sxth	r2, r3
 8003d64:	4b7d      	ldr	r3, [pc, #500]	; (8003f5c <HAL_FDCAN_RxFifo0Callback+0x52c>)
 8003d66:	805a      	strh	r2, [r3, #2]
	mouse_odom[0] += mouse[0];
 8003d68:	4b7d      	ldr	r3, [pc, #500]	; (8003f60 <HAL_FDCAN_RxFifo0Callback+0x530>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a7b      	ldr	r2, [pc, #492]	; (8003f5c <HAL_FDCAN_RxFifo0Callback+0x52c>)
 8003d6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003d72:	4413      	add	r3, r2
 8003d74:	4a7a      	ldr	r2, [pc, #488]	; (8003f60 <HAL_FDCAN_RxFifo0Callback+0x530>)
 8003d76:	6013      	str	r3, [r2, #0]
	mouse_odom[1] += mouse[1];
 8003d78:	4b79      	ldr	r3, [pc, #484]	; (8003f60 <HAL_FDCAN_RxFifo0Callback+0x530>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4a77      	ldr	r2, [pc, #476]	; (8003f5c <HAL_FDCAN_RxFifo0Callback+0x52c>)
 8003d7e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8003d82:	4413      	add	r3, r2
 8003d84:	4a76      	ldr	r2, [pc, #472]	; (8003f60 <HAL_FDCAN_RxFifo0Callback+0x530>)
 8003d86:	6053      	str	r3, [r2, #4]
	break;
 8003d88:	e0e1      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  motor_feedback[0]=uchar4_to_float(RxData);
 8003d8a:	4873      	ldr	r0, [pc, #460]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003d8c:	f001 fd7a 	bl	8005884 <uchar4_to_float>
 8003d90:	eef0 7a40 	vmov.f32	s15, s0
 8003d94:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003d96:	edc3 7a00 	vstr	s15, [r3]
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8003d9a:	4b72      	ldr	r3, [pc, #456]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8003f68 <HAL_FDCAN_RxFifo0Callback+0x538>
 8003da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003da8:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003daa:	edc3 7a00 	vstr	s15, [r3]
			  motor_integral[0] += motor_feedback_velocity[0];
 8003dae:	4b70      	ldr	r3, [pc, #448]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003db0:	ed93 7a00 	vldr	s14, [r3]
 8003db4:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dbe:	4b6c      	ldr	r3, [pc, #432]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003dc0:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8003dc4:	e0c3      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  motor_feedback[1]=uchar4_to_float(RxData);
 8003dc6:	4864      	ldr	r0, [pc, #400]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003dc8:	f001 fd5c 	bl	8005884 <uchar4_to_float>
 8003dcc:	eef0 7a40 	vmov.f32	s15, s0
 8003dd0:	4b64      	ldr	r3, [pc, #400]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003dd2:	edc3 7a01 	vstr	s15, [r3, #4]
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003dd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ddc:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003f68 <HAL_FDCAN_RxFifo0Callback+0x538>
 8003de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de4:	4b61      	ldr	r3, [pc, #388]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003de6:	edc3 7a01 	vstr	s15, [r3, #4]
			  motor_integral[1] += motor_feedback_velocity[1];
 8003dea:	4b61      	ldr	r3, [pc, #388]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003dec:	ed93 7a01 	vldr	s14, [r3, #4]
 8003df0:	4b5e      	ldr	r3, [pc, #376]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003df2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003dfc:	edc3 7a01 	vstr	s15, [r3, #4]
			  break;
 8003e00:	e0a5      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  motor_feedback[2]=uchar4_to_float(RxData);
 8003e02:	4855      	ldr	r0, [pc, #340]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003e04:	f001 fd3e 	bl	8005884 <uchar4_to_float>
 8003e08:	eef0 7a40 	vmov.f32	s15, s0
 8003e0c:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003e0e:	edc3 7a02 	vstr	s15, [r3, #8]
			  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8003e12:	4b54      	ldr	r3, [pc, #336]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003e14:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e18:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003f68 <HAL_FDCAN_RxFifo0Callback+0x538>
 8003e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e20:	4b52      	ldr	r3, [pc, #328]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003e22:	edc3 7a02 	vstr	s15, [r3, #8]
			  motor_integral[2] += motor_feedback_velocity[2];
 8003e26:	4b52      	ldr	r3, [pc, #328]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003e28:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003e2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e36:	4b4e      	ldr	r3, [pc, #312]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003e38:	edc3 7a02 	vstr	s15, [r3, #8]
			  break;
 8003e3c:	e087      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  motor_feedback[3]=uchar4_to_float(RxData);
 8003e3e:	4846      	ldr	r0, [pc, #280]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003e40:	f001 fd20 	bl	8005884 <uchar4_to_float>
 8003e44:	eef0 7a40 	vmov.f32	s15, s0
 8003e48:	4b46      	ldr	r3, [pc, #280]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003e4a:	edc3 7a03 	vstr	s15, [r3, #12]
			  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8003e4e:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003e50:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e54:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003f68 <HAL_FDCAN_RxFifo0Callback+0x538>
 8003e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5c:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003e5e:	edc3 7a03 	vstr	s15, [r3, #12]
			  motor_integral[3] += motor_feedback_velocity[03];
 8003e62:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003e64:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e68:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003e6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <HAL_FDCAN_RxFifo0Callback+0x540>)
 8003e74:	edc3 7a03 	vstr	s15, [r3, #12]
			  break;
 8003e78:	e069      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  motor_feedback[4]=uchar4_to_float(RxData);
 8003e7a:	4837      	ldr	r0, [pc, #220]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003e7c:	f001 fd02 	bl	8005884 <uchar4_to_float>
 8003e80:	eef0 7a40 	vmov.f32	s15, s0
 8003e84:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003e86:	edc3 7a04 	vstr	s15, [r3, #16]
			  motor_feedback_velocity[4]=motor_feedback[3]*rotation_longth;
 8003e8a:	4b36      	ldr	r3, [pc, #216]	; (8003f64 <HAL_FDCAN_RxFifo0Callback+0x534>)
 8003e8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e90:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003f68 <HAL_FDCAN_RxFifo0Callback+0x538>
 8003e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e98:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_FDCAN_RxFifo0Callback+0x53c>)
 8003e9a:	edc3 7a04 	vstr	s15, [r3, #16]
			  break;
 8003e9e:	e056      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  tempercher[0]=uchar4_to_float(RxData);
 8003ea0:	482d      	ldr	r0, [pc, #180]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003ea2:	f001 fcef 	bl	8005884 <uchar4_to_float>
 8003ea6:	eef0 7a40 	vmov.f32	s15, s0
 8003eaa:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <HAL_FDCAN_RxFifo0Callback+0x544>)
 8003eac:	edc3 7a00 	vstr	s15, [r3]
			  break;
 8003eb0:	e04d      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  tempercher[1]=uchar4_to_float(RxData);
 8003eb2:	4829      	ldr	r0, [pc, #164]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003eb4:	f001 fce6 	bl	8005884 <uchar4_to_float>
 8003eb8:	eef0 7a40 	vmov.f32	s15, s0
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <HAL_FDCAN_RxFifo0Callback+0x544>)
 8003ebe:	edc3 7a01 	vstr	s15, [r3, #4]
			  break;
 8003ec2:	e044      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  tempercher[2]=uchar4_to_float(RxData);
 8003ec4:	4824      	ldr	r0, [pc, #144]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003ec6:	f001 fcdd 	bl	8005884 <uchar4_to_float>
 8003eca:	eef0 7a40 	vmov.f32	s15, s0
 8003ece:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_FDCAN_RxFifo0Callback+0x544>)
 8003ed0:	edc3 7a02 	vstr	s15, [r3, #8]
			  break;
 8003ed4:	e03b      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  tempercher[3]=uchar4_to_float(RxData);
 8003ed6:	4820      	ldr	r0, [pc, #128]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003ed8:	f001 fcd4 	bl	8005884 <uchar4_to_float>
 8003edc:	eef0 7a40 	vmov.f32	s15, s0
 8003ee0:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_FDCAN_RxFifo0Callback+0x544>)
 8003ee2:	edc3 7a03 	vstr	s15, [r3, #12]
			  break;
 8003ee6:	e032      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  amplitude[0]=uchar4_to_float(RxData);
 8003ee8:	481b      	ldr	r0, [pc, #108]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003eea:	f001 fccb 	bl	8005884 <uchar4_to_float>
 8003eee:	eef0 7a40 	vmov.f32	s15, s0
 8003ef2:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_FDCAN_RxFifo0Callback+0x548>)
 8003ef4:	edc3 7a00 	vstr	s15, [r3]
			  check_motor1=1;
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_FDCAN_RxFifo0Callback+0x54c>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
			  break;
 8003efe:	e026      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  amplitude[1]=uchar4_to_float(RxData);
 8003f00:	4815      	ldr	r0, [pc, #84]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003f02:	f001 fcbf 	bl	8005884 <uchar4_to_float>
 8003f06:	eef0 7a40 	vmov.f32	s15, s0
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_FDCAN_RxFifo0Callback+0x548>)
 8003f0c:	edc3 7a01 	vstr	s15, [r3, #4]
			  check_motor2=1;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_FDCAN_RxFifo0Callback+0x550>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
			  break;
 8003f16:	e01a      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  amplitude[2]=uchar4_to_float(RxData);
 8003f18:	480f      	ldr	r0, [pc, #60]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003f1a:	f001 fcb3 	bl	8005884 <uchar4_to_float>
 8003f1e:	eef0 7a40 	vmov.f32	s15, s0
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <HAL_FDCAN_RxFifo0Callback+0x548>)
 8003f24:	edc3 7a02 	vstr	s15, [r3, #8]
			  check_motor3=1;
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <HAL_FDCAN_RxFifo0Callback+0x554>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
			  break;
 8003f2e:	e00e      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
			  amplitude[3]=uchar4_to_float(RxData);
 8003f30:	4809      	ldr	r0, [pc, #36]	; (8003f58 <HAL_FDCAN_RxFifo0Callback+0x528>)
 8003f32:	f001 fca7 	bl	8005884 <uchar4_to_float>
 8003f36:	eef0 7a40 	vmov.f32	s15, s0
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	; (8003f78 <HAL_FDCAN_RxFifo0Callback+0x548>)
 8003f3c:	edc3 7a03 	vstr	s15, [r3, #12]
			  check_motor4=1;
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_FDCAN_RxFifo0Callback+0x558>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
			  break;
 8003f46:	e002      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
	}
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <HAL_FDCAN_RxFifo0Callback+0x51e>
		break;
 8003f4c:	bf00      	nop
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	20000660 	.word	0x20000660
 8003f5c:	2000070c 	.word	0x2000070c
 8003f60:	20000710 	.word	0x20000710
 8003f64:	20000668 	.word	0x20000668
 8003f68:	3e3426c8 	.word	0x3e3426c8
 8003f6c:	2000067c 	.word	0x2000067c
 8003f70:	20000690 	.word	0x20000690
 8003f74:	200006bc 	.word	0x200006bc
 8003f78:	200006d4 	.word	0x200006d4
 8003f7c:	20000731 	.word	0x20000731
 8003f80:	20000732 	.word	0x20000732
 8003f84:	20000733 	.word	0x20000733
 8003f88:	20000734 	.word	0x20000734
 8003f8c:	00000000 	.word	0x00000000

08003f90 <maintask_run>:


void maintask_run(){
 8003f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f92:	ed2d 8b02 	vpush	{d8}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
	//theta_target=0.0;
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*10.0)
 8003f9a:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <maintask_run+0x230>)
 8003f9c:	ed93 8a00 	vldr	s16, [r3]
 8003fa0:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <maintask_run+0x234>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc faf7 	bl	8000598 <__aeabi_f2d>
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	4b86      	ldr	r3, [pc, #536]	; (80041c8 <maintask_run+0x238>)
 8003fb0:	f7fc fc74 	bl	800089c <__aeabi_ddiv>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	a378      	add	r3, pc, #480	; (adr r3, 80041a0 <maintask_run+0x210>)
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f7fc fb41 	bl	8000648 <__aeabi_dmul>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f7fc fe33 	bl	8000c38 <__aeabi_d2f>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	ee00 3a90 	vmov	s1, r3
 8003fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8003fdc:	f000 fbac 	bl	8004738 <getAngleDiff>
 8003fe0:	ee10 3a10 	vmov	r3, s0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fad7 	bl	8000598 <__aeabi_f2d>
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	4b77      	ldr	r3, [pc, #476]	; (80041cc <maintask_run+0x23c>)
 8003ff0:	f7fc fb2a 	bl	8000648 <__aeabi_dmul>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4614      	mov	r4, r2
 8003ffa:	461d      	mov	r5, r3
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*57.29);
 8003ffc:	4b71      	ldr	r3, [pc, #452]	; (80041c4 <maintask_run+0x234>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fac9 	bl	8000598 <__aeabi_f2d>
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	4b6f      	ldr	r3, [pc, #444]	; (80041c8 <maintask_run+0x238>)
 800400c:	f7fc fc46 	bl	800089c <__aeabi_ddiv>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	a361      	add	r3, pc, #388	; (adr r3, 80041a0 <maintask_run+0x210>)
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	f7fc fb13 	bl	8000648 <__aeabi_dmul>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4610      	mov	r0, r2
 8004028:	4619      	mov	r1, r3
 800402a:	f7fc fe05 	bl	8000c38 <__aeabi_d2f>
 800402e:	4606      	mov	r6, r0
 8004030:	4b67      	ldr	r3, [pc, #412]	; (80041d0 <maintask_run+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc faaf 	bl	8000598 <__aeabi_f2d>
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <maintask_run+0x238>)
 8004040:	f7fc fc2c 	bl	800089c <__aeabi_ddiv>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4610      	mov	r0, r2
 800404a:	4619      	mov	r1, r3
 800404c:	a354      	add	r3, pc, #336	; (adr r3, 80041a0 <maintask_run+0x210>)
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f7fc faf9 	bl	8000648 <__aeabi_dmul>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f7fc fdeb 	bl	8000c38 <__aeabi_d2f>
 8004062:	4603      	mov	r3, r0
 8004064:	ee00 3a90 	vmov	s1, r3
 8004068:	ee00 6a10 	vmov	s0, r6
 800406c:	f000 fb64 	bl	8004738 <getAngleDiff>
 8004070:	ee10 3a10 	vmov	r3, s0
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc fa8f 	bl	8000598 <__aeabi_f2d>
 800407a:	a34b      	add	r3, pc, #300	; (adr r3, 80041a8 <maintask_run+0x218>)
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f7fc fae2 	bl	8000648 <__aeabi_dmul>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4620      	mov	r0, r4
 800408a:	4629      	mov	r1, r5
 800408c:	f7fc f924 	bl	80002d8 <__aeabi_dsub>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	f7fc fdce 	bl	8000c38 <__aeabi_d2f>
 800409c:	4603      	mov	r3, r0
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*10.0)
 800409e:	4a4d      	ldr	r2, [pc, #308]	; (80041d4 <maintask_run+0x244>)
 80040a0:	6013      	str	r3, [r2, #0]

	if(omega>6*M_PI){omega=6*M_PI;}
 80040a2:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <maintask_run+0x244>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fa76 	bl	8000598 <__aeabi_f2d>
 80040ac:	a340      	add	r3, pc, #256	; (adr r3, 80041b0 <maintask_run+0x220>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc fd59 	bl	8000b68 <__aeabi_dcmpgt>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <maintask_run+0x132>
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <maintask_run+0x244>)
 80040be:	4a46      	ldr	r2, [pc, #280]	; (80041d8 <maintask_run+0x248>)
 80040c0:	601a      	str	r2, [r3, #0]
	if(omega<-6*M_PI){omega=-6*M_PI;}
 80040c2:	4b44      	ldr	r3, [pc, #272]	; (80041d4 <maintask_run+0x244>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc fa66 	bl	8000598 <__aeabi_f2d>
 80040cc:	a33a      	add	r3, pc, #232	; (adr r3, 80041b8 <maintask_run+0x228>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f7fc fd2b 	bl	8000b2c <__aeabi_dcmplt>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <maintask_run+0x152>
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <maintask_run+0x244>)
 80040de:	4a3f      	ldr	r2, [pc, #252]	; (80041dc <maintask_run+0x24c>)
 80040e0:	601a      	str	r2, [r3, #0]

	static int32_t pre_mouse_odom[2] = {0, 0};
	float mouse_vel[2];
	mouse_vel[0] = mouse_odom[0] - pre_mouse_odom[0];
 80040e2:	4b3f      	ldr	r3, [pc, #252]	; (80041e0 <maintask_run+0x250>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <maintask_run+0x254>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f4:	edc7 7a03 	vstr	s15, [r7, #12]
	mouse_vel[1] = mouse_odom[1] - pre_mouse_odom[1];
 80040f8:	4b39      	ldr	r3, [pc, #228]	; (80041e0 <maintask_run+0x250>)
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <maintask_run+0x254>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410a:	edc7 7a04 	vstr	s15, [r7, #16]

	vel_surge = mouse_odom[0] / 50;
 800410e:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <maintask_run+0x250>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a35      	ldr	r2, [pc, #212]	; (80041e8 <maintask_run+0x258>)
 8004114:	fb82 1203 	smull	r1, r2, r2, r3
 8004118:	1112      	asrs	r2, r2, #4
 800411a:	17db      	asrs	r3, r3, #31
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004126:	4b31      	ldr	r3, [pc, #196]	; (80041ec <maintask_run+0x25c>)
 8004128:	edc3 7a00 	vstr	s15, [r3]
	vel_sway = mouse_odom[1] / 50;
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <maintask_run+0x250>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a2d      	ldr	r2, [pc, #180]	; (80041e8 <maintask_run+0x258>)
 8004132:	fb82 1203 	smull	r1, r2, r2, r3
 8004136:	1112      	asrs	r2, r2, #4
 8004138:	17db      	asrs	r3, r3, #31
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004144:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <maintask_run+0x260>)
 8004146:	edc3 7a00 	vstr	s15, [r3]

	if (vel_surge > 1)
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <maintask_run+0x25c>)
 800414c:	edd3 7a00 	vldr	s15, [r3]
 8004150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	dd04      	ble.n	8004168 <maintask_run+0x1d8>
	{
	vel_surge = 1;
 800415e:	4b23      	ldr	r3, [pc, #140]	; (80041ec <maintask_run+0x25c>)
 8004160:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e00c      	b.n	8004182 <maintask_run+0x1f2>
	}
	else if (vel_surge < -1)
 8004168:	4b20      	ldr	r3, [pc, #128]	; (80041ec <maintask_run+0x25c>)
 800416a:	edd3 7a00 	vldr	s15, [r3]
 800416e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417a:	d502      	bpl.n	8004182 <maintask_run+0x1f2>
	{
	vel_surge = -1;
 800417c:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <maintask_run+0x25c>)
 800417e:	4a1d      	ldr	r2, [pc, #116]	; (80041f4 <maintask_run+0x264>)
 8004180:	601a      	str	r2, [r3, #0]
	}

	if (vel_sway > 1)
 8004182:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <maintask_run+0x260>)
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800418c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	dd30      	ble.n	80041f8 <maintask_run+0x268>
	{
	vel_sway = 1;
 8004196:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <maintask_run+0x260>)
 8004198:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e038      	b.n	8004212 <maintask_run+0x282>
 80041a0:	54442d18 	.word	0x54442d18
 80041a4:	400921fb 	.word	0x400921fb
 80041a8:	b851eb85 	.word	0xb851eb85
 80041ac:	404ca51e 	.word	0x404ca51e
 80041b0:	7f3321d2 	.word	0x7f3321d2
 80041b4:	4032d97c 	.word	0x4032d97c
 80041b8:	7f3321d2 	.word	0x7f3321d2
 80041bc:	c032d97c 	.word	0xc032d97c
 80041c0:	20000700 	.word	0x20000700
 80041c4:	200005e0 	.word	0x200005e0
 80041c8:	40668000 	.word	0x40668000
 80041cc:	40240000 	.word	0x40240000
 80041d0:	200005d0 	.word	0x200005d0
 80041d4:	200006f0 	.word	0x200006f0
 80041d8:	4196cbe4 	.word	0x4196cbe4
 80041dc:	c196cbe4 	.word	0xc196cbe4
 80041e0:	20000710 	.word	0x20000710
 80041e4:	20000788 	.word	0x20000788
 80041e8:	51eb851f 	.word	0x51eb851f
 80041ec:	200006e8 	.word	0x200006e8
 80041f0:	200006ec 	.word	0x200006ec
 80041f4:	bf800000 	.word	0xbf800000
	}
	else if (vel_sway < -1)
 80041f8:	4b6b      	ldr	r3, [pc, #428]	; (80043a8 <maintask_run+0x418>)
 80041fa:	edd3 7a00 	vldr	s15, [r3]
 80041fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	d502      	bpl.n	8004212 <maintask_run+0x282>
	{
	vel_sway = -1;
 800420c:	4b66      	ldr	r3, [pc, #408]	; (80043a8 <maintask_run+0x418>)
 800420e:	4a67      	ldr	r2, [pc, #412]	; (80043ac <maintask_run+0x41c>)
 8004210:	601a      	str	r2, [r3, #0]
	}

	pre_mouse_odom[0] = mouse_odom[0];
 8004212:	4b67      	ldr	r3, [pc, #412]	; (80043b0 <maintask_run+0x420>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a67      	ldr	r2, [pc, #412]	; (80043b4 <maintask_run+0x424>)
 8004218:	6013      	str	r3, [r2, #0]
	pre_mouse_odom[1] = mouse_odom[1];
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <maintask_run+0x420>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a65      	ldr	r2, [pc, #404]	; (80043b4 <maintask_run+0x424>)
 8004220:	6053      	str	r3, [r2, #4]

	omni_move(vel_surge, vel_sway, omega,1.0);
 8004222:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <maintask_run+0x428>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	4b5f      	ldr	r3, [pc, #380]	; (80043a8 <maintask_run+0x418>)
 800422a:	ed93 7a00 	vldr	s14, [r3]
 800422e:	4b63      	ldr	r3, [pc, #396]	; (80043bc <maintask_run+0x42c>)
 8004230:	edd3 6a00 	vldr	s13, [r3]
 8004234:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004238:	eeb0 1a66 	vmov.f32	s2, s13
 800423c:	eef0 0a47 	vmov.f32	s1, s14
 8004240:	eeb0 0a67 	vmov.f32	s0, s15
 8004244:	f000 fcf8 	bl	8004c38 <omni_move>
	  if(kick_power>0){
 8004248:	4b5d      	ldr	r3, [pc, #372]	; (80043c0 <maintask_run+0x430>)
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	dd39      	ble.n	80042cc <maintask_run+0x33c>
			if(ball[0]==1){
 8004258:	4b5a      	ldr	r3, [pc, #360]	; (80043c4 <maintask_run+0x434>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d122      	bne.n	80042a6 <maintask_run+0x316>
				if(kick_state==0){
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <maintask_run+0x438>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11e      	bne.n	80042a6 <maintask_run+0x316>
				  uint8_t kick_power_param=(float)kick_power*255.0;
 8004268:	4b55      	ldr	r3, [pc, #340]	; (80043c0 <maintask_run+0x430>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f993 	bl	8000598 <__aeabi_f2d>
 8004272:	a34b      	add	r3, pc, #300	; (adr r3, 80043a0 <maintask_run+0x410>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fc f9e6 	bl	8000648 <__aeabi_dmul>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4610      	mov	r0, r2
 8004282:	4619      	mov	r1, r3
 8004284:	f7fc fcb8 	bl	8000bf8 <__aeabi_d2uiz>
 8004288:	4603      	mov	r3, r0
 800428a:	75fb      	strb	r3, [r7, #23]
				  printf(" kick=%d\r\n",kick_power_param);
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	4619      	mov	r1, r3
 8004290:	484e      	ldr	r0, [pc, #312]	; (80043cc <maintask_run+0x43c>)
 8004292:	f009 fb75 	bl	800d980 <iprintf>
				  actuator_kicker(3, (uint8_t)kick_power_param);
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	4619      	mov	r1, r3
 800429a:	2003      	movs	r0, #3
 800429c:	f7fc ffaf 	bl	80011fe <actuator_kicker>
				kick_state=1;
 80042a0:	4b49      	ldr	r3, [pc, #292]	; (80043c8 <maintask_run+0x438>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
				}
			}
			if(kick_state==1){
 80042a6:	4b48      	ldr	r3, [pc, #288]	; (80043c8 <maintask_run+0x438>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10e      	bne.n	80042cc <maintask_run+0x33c>
				kick_time++;
 80042ae:	4b48      	ldr	r3, [pc, #288]	; (80043d0 <maintask_run+0x440>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	4a46      	ldr	r2, [pc, #280]	; (80043d0 <maintask_run+0x440>)
 80042b6:	6013      	str	r3, [r2, #0]
				if(kick_time>100){
 80042b8:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <maintask_run+0x440>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	dd05      	ble.n	80042cc <maintask_run+0x33c>
					kick_state=0;
 80042c0:	4b41      	ldr	r3, [pc, #260]	; (80043c8 <maintask_run+0x438>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
					kick_time=0;
 80042c6:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <maintask_run+0x440>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
				}
			}
	  }

	  if(chipEN==1){
 80042cc:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <maintask_run+0x444>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d104      	bne.n	80042de <maintask_run+0x34e>
		  actuator_kicker(2, 1);
 80042d4:	2101      	movs	r1, #1
 80042d6:	2002      	movs	r0, #2
 80042d8:	f7fc ff91 	bl	80011fe <actuator_kicker>
 80042dc:	e003      	b.n	80042e6 <maintask_run+0x356>
	  }
	  else{
		  actuator_kicker(2, 0);
 80042de:	2100      	movs	r1, #0
 80042e0:	2002      	movs	r0, #2
 80042e2:	f7fc ff8c 	bl	80011fe <actuator_kicker>
	  }
	  actuator_kicker(1, 1);
 80042e6:	2101      	movs	r1, #1
 80042e8:	2001      	movs	r0, #1
 80042ea:	f7fc ff88 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(250.0);
 80042ee:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80043d8 <maintask_run+0x448>
 80042f2:	f7fc ff63 	bl	80011bc <actuator_kicker_voltage>

	  actuator_motor5(drible_power,1.0);
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <maintask_run+0x44c>)
 80042f8:	edd3 7a00 	vldr	s15, [r3]
 80042fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004300:	eeb0 0a67 	vmov.f32	s0, s15
 8004304:	f7fc ff2a 	bl	800115c <actuator_motor5>


      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <maintask_run+0x450>)
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004312:	edc7 7a01 	vstr	s15, [r7, #4]
 8004316:	793b      	ldrb	r3, [r7, #4]
 8004318:	3368      	adds	r3, #104	; 0x68
 800431a:	75bb      	strb	r3, [r7, #22]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 800431c:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <maintask_run+0x450>)
 800431e:	edd3 7a00 	vldr	s15, [r3]
 8004322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004326:	ee17 3a90 	vmov	r3, s15
 800432a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800432e:	121b      	asrs	r3, r3, #8
 8004330:	757b      	strb	r3, [r7, #21]

	  TX_data_UART[0]=254;
 8004332:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <maintask_run+0x454>)
 8004334:	22fe      	movs	r2, #254	; 0xfe
 8004336:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 8004338:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <maintask_run+0x454>)
 800433a:	7dbb      	ldrb	r3, [r7, #22]
 800433c:	7053      	strb	r3, [r2, #1]
	  TX_data_UART[2]=(uint8_t)yawAngle_send_high;
 800433e:	4a29      	ldr	r2, [pc, #164]	; (80043e4 <maintask_run+0x454>)
 8004340:	7d7b      	ldrb	r3, [r7, #21]
 8004342:	7093      	strb	r3, [r2, #2]
	  TX_data_UART[3]=ball[0];
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <maintask_run+0x434>)
 8004346:	781a      	ldrb	r2, [r3, #0]
 8004348:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <maintask_run+0x454>)
 800434a:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=ball[1];
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <maintask_run+0x434>)
 800434e:	785a      	ldrb	r2, [r3, #1]
 8004350:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <maintask_run+0x454>)
 8004352:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=chipEN;
 8004354:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <maintask_run+0x444>)
 8004356:	781a      	ldrb	r2, [r3, #0]
 8004358:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <maintask_run+0x454>)
 800435a:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=kick_state;
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <maintask_run+0x438>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <maintask_run+0x454>)
 8004364:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <maintask_run+0x458>)
 8004368:	edd3 7a04 	vldr	s15, [r3, #16]
 800436c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004370:	edc7 7a01 	vstr	s15, [r7, #4]
 8004374:	793b      	ldrb	r3, [r7, #4]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <maintask_run+0x454>)
 800437a:	71da      	strb	r2, [r3, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 800437c:	23ff      	movs	r3, #255	; 0xff
 800437e:	2208      	movs	r2, #8
 8004380:	4918      	ldr	r1, [pc, #96]	; (80043e4 <maintask_run+0x454>)
 8004382:	481a      	ldr	r0, [pc, #104]	; (80043ec <maintask_run+0x45c>)
 8004384:	f007 f9e0 	bl	800b748 <HAL_UART_Transmit>

	  yawAngle_temp=yawAngle;
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <maintask_run+0x450>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <maintask_run+0x460>)
 800438e:	6013      	str	r3, [r2, #0]
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	ecbd 8b02 	vpop	{d8}
 800439a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439c:	f3af 8000 	nop.w
 80043a0:	00000000 	.word	0x00000000
 80043a4:	406fe000 	.word	0x406fe000
 80043a8:	200006ec 	.word	0x200006ec
 80043ac:	bf800000 	.word	0xbf800000
 80043b0:	20000710 	.word	0x20000710
 80043b4:	20000788 	.word	0x20000788
 80043b8:	200006e8 	.word	0x200006e8
 80043bc:	200006f0 	.word	0x200006f0
 80043c0:	200006f8 	.word	0x200006f8
 80043c4:	20000708 	.word	0x20000708
 80043c8:	20000630 	.word	0x20000630
 80043cc:	0800fe38 	.word	0x0800fe38
 80043d0:	20000634 	.word	0x20000634
 80043d4:	20000704 	.word	0x20000704
 80043d8:	437a0000 	.word	0x437a0000
 80043dc:	200006f4 	.word	0x200006f4
 80043e0:	200005e0 	.word	0x200005e0
 80043e4:	20000648 	.word	0x20000648
 80043e8:	200006a4 	.word	0x200006a4
 80043ec:	20000920 	.word	0x20000920
 80043f0:	200005d0 	.word	0x200005d0

080043f4 <maintask_emargency>:


void maintask_emargency(){
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
	  actuator_motor1(0.0,0.0);
 80043fa:	eddf 0a30 	vldr	s1, [pc, #192]	; 80044bc <maintask_emargency+0xc8>
 80043fe:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80044bc <maintask_emargency+0xc8>
 8004402:	f7fc fdeb 	bl	8000fdc <actuator_motor1>
	  actuator_motor2(0.0,0.0);
 8004406:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80044bc <maintask_emargency+0xc8>
 800440a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80044bc <maintask_emargency+0xc8>
 800440e:	f7fc fe15 	bl	800103c <actuator_motor2>
	  actuator_motor3(0.0,0.0);
 8004412:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80044bc <maintask_emargency+0xc8>
 8004416:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80044bc <maintask_emargency+0xc8>
 800441a:	f7fc fe3f 	bl	800109c <actuator_motor3>
	  actuator_motor4(0.0,0.0);
 800441e:	eddf 0a27 	vldr	s1, [pc, #156]	; 80044bc <maintask_emargency+0xc8>
 8004422:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80044bc <maintask_emargency+0xc8>
 8004426:	f7fc fe69 	bl	80010fc <actuator_motor4>
	  actuator_motor5(0.0,0.0);
 800442a:	eddf 0a24 	vldr	s1, [pc, #144]	; 80044bc <maintask_emargency+0xc8>
 800442e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80044bc <maintask_emargency+0xc8>
 8004432:	f7fc fe93 	bl	800115c <actuator_motor5>

	  TX_data_UART[0]=254;
 8004436:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <maintask_emargency+0xcc>)
 8004438:	22fe      	movs	r2, #254	; 0xfe
 800443a:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=error_No[0];
 800443c:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <maintask_emargency+0xd0>)
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <maintask_emargency+0xcc>)
 8004442:	705a      	strb	r2, [r3, #1]
	  TX_data_UART[2]=error_No[1];
 8004444:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <maintask_emargency+0xd0>)
 8004446:	785a      	ldrb	r2, [r3, #1]
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <maintask_emargency+0xcc>)
 800444a:	709a      	strb	r2, [r3, #2]
	  TX_data_UART[3]=error_No[2];
 800444c:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <maintask_emargency+0xd0>)
 800444e:	789a      	ldrb	r2, [r3, #2]
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <maintask_emargency+0xcc>)
 8004452:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=error_No[3];
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <maintask_emargency+0xd0>)
 8004456:	78da      	ldrb	r2, [r3, #3]
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <maintask_emargency+0xcc>)
 800445a:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=252;
 800445c:	4b18      	ldr	r3, [pc, #96]	; (80044c0 <maintask_emargency+0xcc>)
 800445e:	22fc      	movs	r2, #252	; 0xfc
 8004460:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=122;
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <maintask_emargency+0xcc>)
 8004464:	227a      	movs	r2, #122	; 0x7a
 8004466:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=200;
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <maintask_emargency+0xcc>)
 800446a:	22c8      	movs	r2, #200	; 0xc8
 800446c:	71da      	strb	r2, [r3, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 800446e:	23ff      	movs	r3, #255	; 0xff
 8004470:	2208      	movs	r2, #8
 8004472:	4913      	ldr	r1, [pc, #76]	; (80044c0 <maintask_emargency+0xcc>)
 8004474:	4814      	ldr	r0, [pc, #80]	; (80044c8 <maintask_emargency+0xd4>)
 8004476:	f007 f967 	bl	800b748 <HAL_UART_Transmit>

	  actuator_buzzer(150, 150);
 800447a:	2196      	movs	r1, #150	; 0x96
 800447c:	2096      	movs	r0, #150	; 0x96
 800447e:	f7fc ff0b 	bl	8001298 <actuator_buzzer>

	  uint8_t senddata_error[8];

	  can1_send(0x000, senddata_error);
 8004482:	463b      	mov	r3, r7
 8004484:	4619      	mov	r1, r3
 8004486:	2000      	movs	r0, #0
 8004488:	f7fd fa22 	bl	80018d0 <can1_send>
	  can2_send(0x000, senddata_error);
 800448c:	463b      	mov	r3, r7
 800448e:	4619      	mov	r1, r3
 8004490:	2000      	movs	r0, #0
 8004492:	f7fd fa7d 	bl	8001990 <can2_send>

	  actuator_kicker(1, 0);
 8004496:	2100      	movs	r1, #0
 8004498:	2001      	movs	r0, #1
 800449a:	f7fc feb0 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 800449e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80044bc <maintask_emargency+0xc8>
 80044a2:	f7fc fe8b 	bl	80011bc <actuator_kicker_voltage>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80044a6:	2201      	movs	r2, #1
 80044a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044ac:	4807      	ldr	r0, [pc, #28]	; (80044cc <maintask_emargency+0xd8>)
 80044ae:	f004 fa8f 	bl	80089d0 <HAL_GPIO_WritePin>

}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	00000000 	.word	0x00000000
 80044c0:	20000648 	.word	0x20000648
 80044c4:	20000718 	.word	0x20000718
 80044c8:	20000920 	.word	0x20000920
 80044cc:	48000400 	.word	0x48000400

080044d0 <maintask_state_stop>:


void maintask_state_stop(){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0

    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80044d6:	4b2c      	ldr	r3, [pc, #176]	; (8004588 <maintask_state_stop+0xb8>)
 80044d8:	edd3 7a00 	vldr	s15, [r3]
 80044dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80044e4:	793b      	ldrb	r3, [r7, #4]
 80044e6:	3368      	adds	r3, #104	; 0x68
 80044e8:	73fb      	strb	r3, [r7, #15]
    uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <maintask_state_stop+0xb8>)
 80044ec:	edd3 7a00 	vldr	s15, [r3]
 80044f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f4:	ee17 3a90 	vmov	r3, s15
 80044f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044fc:	121b      	asrs	r3, r3, #8
 80044fe:	73bb      	strb	r3, [r7, #14]

	  omni_move(0.0, 0.0, 0.0,0.0);
 8004500:	eddf 1a22 	vldr	s3, [pc, #136]	; 800458c <maintask_state_stop+0xbc>
 8004504:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800458c <maintask_state_stop+0xbc>
 8004508:	eddf 0a20 	vldr	s1, [pc, #128]	; 800458c <maintask_state_stop+0xbc>
 800450c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800458c <maintask_state_stop+0xbc>
 8004510:	f000 fb92 	bl	8004c38 <omni_move>
	  actuator_motor5(0.0,0.0);
 8004514:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800458c <maintask_state_stop+0xbc>
 8004518:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800458c <maintask_state_stop+0xbc>
 800451c:	f7fc fe1e 	bl	800115c <actuator_motor5>


	  TX_data_UART[0]=254;
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <maintask_state_stop+0xc0>)
 8004522:	22fe      	movs	r2, #254	; 0xfe
 8004524:	701a      	strb	r2, [r3, #0]
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 8004526:	4a1a      	ldr	r2, [pc, #104]	; (8004590 <maintask_state_stop+0xc0>)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	7053      	strb	r3, [r2, #1]
	  TX_data_UART[2]=(uint8_t)yawAngle_send_high;
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <maintask_state_stop+0xc0>)
 800452e:	7bbb      	ldrb	r3, [r7, #14]
 8004530:	7093      	strb	r3, [r2, #2]
	  TX_data_UART[3]=error_No[0];
 8004532:	4b18      	ldr	r3, [pc, #96]	; (8004594 <maintask_state_stop+0xc4>)
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <maintask_state_stop+0xc0>)
 8004538:	70da      	strb	r2, [r3, #3]
	  TX_data_UART[4]=error_No[1];
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <maintask_state_stop+0xc4>)
 800453c:	785a      	ldrb	r2, [r3, #1]
 800453e:	4b14      	ldr	r3, [pc, #80]	; (8004590 <maintask_state_stop+0xc0>)
 8004540:	711a      	strb	r2, [r3, #4]
	  TX_data_UART[5]=1;
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <maintask_state_stop+0xc0>)
 8004544:	2201      	movs	r2, #1
 8004546:	715a      	strb	r2, [r3, #5]
	  TX_data_UART[6]=1;
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <maintask_state_stop+0xc0>)
 800454a:	2201      	movs	r2, #1
 800454c:	719a      	strb	r2, [r3, #6]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <maintask_state_stop+0xc8>)
 8004550:	edd3 7a04 	vldr	s15, [r3, #16]
 8004554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004558:	edc7 7a01 	vstr	s15, [r7, #4]
 800455c:	793b      	ldrb	r3, [r7, #4]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <maintask_state_stop+0xc0>)
 8004562:	71da      	strb	r2, [r3, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8004564:	23ff      	movs	r3, #255	; 0xff
 8004566:	2208      	movs	r2, #8
 8004568:	4909      	ldr	r1, [pc, #36]	; (8004590 <maintask_state_stop+0xc0>)
 800456a:	480c      	ldr	r0, [pc, #48]	; (800459c <maintask_state_stop+0xcc>)
 800456c:	f007 f8ec 	bl	800b748 <HAL_UART_Transmit>


	  actuator_kicker(1, 0);
 8004570:	2100      	movs	r1, #0
 8004572:	2001      	movs	r0, #1
 8004574:	f7fc fe43 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 8004578:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800458c <maintask_state_stop+0xbc>
 800457c:	f7fc fe1e 	bl	80011bc <actuator_kicker_voltage>
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200005e0 	.word	0x200005e0
 800458c:	00000000 	.word	0x00000000
 8004590:	20000648 	.word	0x20000648
 8004594:	20000718 	.word	0x20000718
 8004598:	200006a4 	.word	0x200006a4
 800459c:	20000920 	.word	0x20000920

080045a0 <maintask_stop>:

void maintask_stop(){
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
	  omni_move(0.0, 0.0, 0.0,0.0);
 80045a6:	eddf 1a34 	vldr	s3, [pc, #208]	; 8004678 <maintask_stop+0xd8>
 80045aa:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004678 <maintask_stop+0xd8>
 80045ae:	eddf 0a32 	vldr	s1, [pc, #200]	; 8004678 <maintask_stop+0xd8>
 80045b2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004678 <maintask_stop+0xd8>
 80045b6:	f000 fb3f 	bl	8004c38 <omni_move>
	  actuator_motor5(0.0,0.0);
 80045ba:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8004678 <maintask_stop+0xd8>
 80045be:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004678 <maintask_stop+0xd8>
 80045c2:	f7fc fdcb 	bl	800115c <actuator_motor5>

      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80045c6:	4b2d      	ldr	r3, [pc, #180]	; (800467c <maintask_stop+0xdc>)
 80045c8:	edd3 7a00 	vldr	s15, [r3]
 80045cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80045d4:	793b      	ldrb	r3, [r7, #4]
 80045d6:	3368      	adds	r3, #104	; 0x68
 80045d8:	73fb      	strb	r3, [r7, #15]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80045da:	4b28      	ldr	r3, [pc, #160]	; (800467c <maintask_stop+0xdc>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e4:	ee17 3a90 	vmov	r3, s15
 80045e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045ec:	121b      	asrs	r3, r3, #8
 80045ee:	73bb      	strb	r3, [r7, #14]

		  omni_move(0.0, 0.0, 0.0,0.0);
 80045f0:	eddf 1a21 	vldr	s3, [pc, #132]	; 8004678 <maintask_stop+0xd8>
 80045f4:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8004678 <maintask_stop+0xd8>
 80045f8:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004678 <maintask_stop+0xd8>
 80045fc:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004678 <maintask_stop+0xd8>
 8004600:	f000 fb1a 	bl	8004c38 <omni_move>
		  actuator_motor5(0.0,0.0);
 8004604:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004678 <maintask_stop+0xd8>
 8004608:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8004678 <maintask_stop+0xd8>
 800460c:	f7fc fda6 	bl	800115c <actuator_motor5>


		  TX_data_UART[0]=254;
 8004610:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <maintask_stop+0xe0>)
 8004612:	22fe      	movs	r2, #254	; 0xfe
 8004614:	701a      	strb	r2, [r3, #0]
		  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 8004616:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <maintask_stop+0xe0>)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	7053      	strb	r3, [r2, #1]
		  TX_data_UART[2]=(uint8_t)yawAngle_send_high;
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <maintask_stop+0xe0>)
 800461e:	7bbb      	ldrb	r3, [r7, #14]
 8004620:	7093      	strb	r3, [r2, #2]
		  TX_data_UART[3]=error_No[0];
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <maintask_stop+0xe4>)
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <maintask_stop+0xe0>)
 8004628:	70da      	strb	r2, [r3, #3]
		  TX_data_UART[4]=error_No[1];
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <maintask_stop+0xe4>)
 800462c:	785a      	ldrb	r2, [r3, #1]
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <maintask_stop+0xe0>)
 8004630:	711a      	strb	r2, [r3, #4]
		  TX_data_UART[5]=0;
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <maintask_stop+0xe0>)
 8004634:	2200      	movs	r2, #0
 8004636:	715a      	strb	r2, [r3, #5]
		  TX_data_UART[6]=0;
 8004638:	4b11      	ldr	r3, [pc, #68]	; (8004680 <maintask_stop+0xe0>)
 800463a:	2200      	movs	r2, #0
 800463c:	719a      	strb	r2, [r3, #6]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <maintask_stop+0xe8>)
 8004640:	edd3 7a04 	vldr	s15, [r3, #16]
 8004644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004648:	edc7 7a01 	vstr	s15, [r7, #4]
 800464c:	793b      	ldrb	r3, [r7, #4]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <maintask_stop+0xe0>)
 8004652:	71da      	strb	r2, [r3, #7]
		  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8004654:	23ff      	movs	r3, #255	; 0xff
 8004656:	2208      	movs	r2, #8
 8004658:	4909      	ldr	r1, [pc, #36]	; (8004680 <maintask_stop+0xe0>)
 800465a:	480c      	ldr	r0, [pc, #48]	; (800468c <maintask_stop+0xec>)
 800465c:	f007 f874 	bl	800b748 <HAL_UART_Transmit>

	  actuator_kicker(1, 0);
 8004660:	2100      	movs	r1, #0
 8004662:	2001      	movs	r0, #1
 8004664:	f7fc fdcb 	bl	80011fe <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 8004668:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8004678 <maintask_stop+0xd8>
 800466c:	f7fc fda6 	bl	80011bc <actuator_kicker_voltage>
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	00000000 	.word	0x00000000
 800467c:	200005e0 	.word	0x200005e0
 8004680:	20000648 	.word	0x20000648
 8004684:	20000718 	.word	0x20000718
 8004688:	200006a4 	.word	0x200006a4
 800468c:	20000920 	.word	0x20000920

08004690 <normalizeAngle>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

float normalizeAngle(float angle_rad) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	ed87 0a01 	vstr	s0, [r7, #4]
    while (angle_rad > M_PI) {
 800469a:	e00f      	b.n	80046bc <normalizeAngle+0x2c>
        angle_rad -= 2.0f * M_PI;
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fb ff7b 	bl	8000598 <__aeabi_f2d>
 80046a2:	a31f      	add	r3, pc, #124	; (adr r3, 8004720 <normalizeAngle+0x90>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f7fb fe16 	bl	80002d8 <__aeabi_dsub>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	f7fc fac0 	bl	8000c38 <__aeabi_d2f>
 80046b8:	4603      	mov	r3, r0
 80046ba:	607b      	str	r3, [r7, #4]
    while (angle_rad > M_PI) {
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fb ff6b 	bl	8000598 <__aeabi_f2d>
 80046c2:	a319      	add	r3, pc, #100	; (adr r3, 8004728 <normalizeAngle+0x98>)
 80046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c8:	f7fc fa4e 	bl	8000b68 <__aeabi_dcmpgt>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e4      	bne.n	800469c <normalizeAngle+0xc>
    }
    while (angle_rad < -M_PI) {
 80046d2:	e00f      	b.n	80046f4 <normalizeAngle+0x64>
        angle_rad += 2.0f * M_PI;
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fb ff5f 	bl	8000598 <__aeabi_f2d>
 80046da:	a311      	add	r3, pc, #68	; (adr r3, 8004720 <normalizeAngle+0x90>)
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f7fb fdfc 	bl	80002dc <__adddf3>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4610      	mov	r0, r2
 80046ea:	4619      	mov	r1, r3
 80046ec:	f7fc faa4 	bl	8000c38 <__aeabi_d2f>
 80046f0:	4603      	mov	r3, r0
 80046f2:	607b      	str	r3, [r7, #4]
    while (angle_rad < -M_PI) {
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fb ff4f 	bl	8000598 <__aeabi_f2d>
 80046fa:	a30d      	add	r3, pc, #52	; (adr r3, 8004730 <normalizeAngle+0xa0>)
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f7fc fa14 	bl	8000b2c <__aeabi_dcmplt>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e4      	bne.n	80046d4 <normalizeAngle+0x44>
    }
    return angle_rad;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	ee07 3a90 	vmov	s15, r3
}
 8004710:	eeb0 0a67 	vmov.f32	s0, s15
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	f3af 8000 	nop.w
 8004720:	54442d18 	.word	0x54442d18
 8004724:	401921fb 	.word	0x401921fb
 8004728:	54442d18 	.word	0x54442d18
 800472c:	400921fb 	.word	0x400921fb
 8004730:	54442d18 	.word	0x54442d18
 8004734:	c00921fb 	.word	0xc00921fb

08004738 <getAngleDiff>:

float getAngleDiff(float angle_rad1, float angle_rad2){
 8004738:	b5b0      	push	{r4, r5, r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004742:	edc7 0a00 	vstr	s1, [r7]
    angle_rad1 = normalizeAngle(angle_rad1);
 8004746:	ed97 0a01 	vldr	s0, [r7, #4]
 800474a:	f7ff ffa1 	bl	8004690 <normalizeAngle>
 800474e:	ed87 0a01 	vstr	s0, [r7, #4]
    angle_rad2 = normalizeAngle(angle_rad2);
 8004752:	ed97 0a00 	vldr	s0, [r7]
 8004756:	f7ff ff9b 	bl	8004690 <normalizeAngle>
 800475a:	ed87 0a00 	vstr	s0, [r7]
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 800475e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004762:	edd7 7a00 	vldr	s15, [r7]
 8004766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800476a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800476e:	ee17 3a90 	vmov	r3, s15
 8004772:	2b00      	cmp	r3, #0
 8004774:	bfb8      	it	lt
 8004776:	425b      	neglt	r3, r3
 8004778:	2b03      	cmp	r3, #3
 800477a:	dd40      	ble.n	80047fe <getAngleDiff+0xc6>
    	if(angle_rad1 > angle_rad2){
 800477c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004780:	edd7 7a00 	vldr	s15, [r7]
 8004784:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	dd1a      	ble.n	80047c4 <getAngleDiff+0x8c>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fb ff02 	bl	8000598 <__aeabi_f2d>
 8004794:	4604      	mov	r4, r0
 8004796:	460d      	mov	r5, r1
 8004798:	6838      	ldr	r0, [r7, #0]
 800479a:	f7fb fefd 	bl	8000598 <__aeabi_f2d>
 800479e:	a320      	add	r3, pc, #128	; (adr r3, 8004820 <getAngleDiff+0xe8>)
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f7fb fd9a 	bl	80002dc <__adddf3>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fb fd92 	bl	80002d8 <__aeabi_dsub>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f7fc fa3c 	bl	8000c38 <__aeabi_d2f>
 80047c0:	4603      	mov	r3, r0
 80047c2:	e024      	b.n	800480e <getAngleDiff+0xd6>
    	}else{
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fb fee7 	bl	8000598 <__aeabi_f2d>
 80047ca:	a315      	add	r3, pc, #84	; (adr r3, 8004820 <getAngleDiff+0xe8>)
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f7fb fd84 	bl	80002dc <__adddf3>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	f7fb fedb 	bl	8000598 <__aeabi_f2d>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fb fd75 	bl	80002d8 <__aeabi_dsub>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4610      	mov	r0, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	f7fc fa1f 	bl	8000c38 <__aeabi_d2f>
 80047fa:	4603      	mov	r3, r0
 80047fc:	e007      	b.n	800480e <getAngleDiff+0xd6>
    	}
    } else {
        return angle_rad1 - angle_rad2;
 80047fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8004802:	edd7 7a00 	vldr	s15, [r7]
 8004806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800480a:	ee17 3a90 	vmov	r3, s15
    }
}
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eeb0 0a67 	vmov.f32	s0, s15
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bdb0      	pop	{r4, r5, r7, pc}
 800481c:	f3af 8000 	nop.w
 8004820:	54442d18 	.word	0x54442d18
 8004824:	401921fb 	.word	0x401921fb

08004828 <decode_SW>:

uint8_t decode_SW(uint16_t SW_data){
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	80fb      	strh	r3, [r7, #6]
	int data;
	if(SW_data<100){
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	2b63      	cmp	r3, #99	; 0x63
 8004836:	d802      	bhi.n	800483e <decode_SW+0x16>
		data=0b00010000;//C
 8004838:	2310      	movs	r3, #16
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	e02e      	b.n	800489c <decode_SW+0x74>
	}
	else if(SW_data<500 && SW_data>100){
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004844:	d205      	bcs.n	8004852 <decode_SW+0x2a>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b64      	cmp	r3, #100	; 0x64
 800484a:	d902      	bls.n	8004852 <decode_SW+0x2a>
		data=0b00000010;//B
 800484c:	2302      	movs	r3, #2
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e024      	b.n	800489c <decode_SW+0x74>
	}
	else if(SW_data<2000 && SW_data>500){
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004858:	d206      	bcs.n	8004868 <decode_SW+0x40>
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004860:	d902      	bls.n	8004868 <decode_SW+0x40>
		data=0b00000100;//R
 8004862:	2304      	movs	r3, #4
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e019      	b.n	800489c <decode_SW+0x74>
	}
	else if(SW_data<3000 && SW_data>2000){
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800486e:	4293      	cmp	r3, r2
 8004870:	d806      	bhi.n	8004880 <decode_SW+0x58>
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004878:	d902      	bls.n	8004880 <decode_SW+0x58>
		data=0b00000001;//F
 800487a:	2301      	movs	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	e00d      	b.n	800489c <decode_SW+0x74>
	}
	else if(SW_data<4000 && SW_data>3000){
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004886:	d207      	bcs.n	8004898 <decode_SW+0x70>
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800488e:	4293      	cmp	r3, r2
 8004890:	d902      	bls.n	8004898 <decode_SW+0x70>
		data=0b00001000;//L
 8004892:	2308      	movs	r3, #8
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e001      	b.n	800489c <decode_SW+0x74>
	}
	else{
		data=0b00000000;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	b2db      	uxtb	r3, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	0000      	movs	r0, r0
	...

080048b0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	uint8_t j = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]

	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80048bc:	e002      	b.n	80048c4 <HAL_UART_RxCpltCallback+0x14>
		j++;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	3301      	adds	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	4aa4      	ldr	r2, [pc, #656]	; (8004b58 <HAL_UART_RxCpltCallback+0x2a8>)
 80048c8:	5cd3      	ldrb	r3, [r2, r3]
 80048ca:	2bfe      	cmp	r3, #254	; 0xfe
 80048cc:	d002      	beq.n	80048d4 <HAL_UART_RxCpltCallback+0x24>
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b0d      	cmp	r3, #13
 80048d2:	d9f4      	bls.n	80048be <HAL_UART_RxCpltCallback+0xe>
	}
	if(j>=sizeof(Rxbuf_from_Ether)){
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b0d      	cmp	r3, #13
 80048d8:	d90d      	bls.n	80048f6 <HAL_UART_RxCpltCallback+0x46>
		for(uint8_t k=0;k<(sizeof(data_from_ether));k++){
 80048da:	2300      	movs	r3, #0
 80048dc:	73bb      	strb	r3, [r7, #14]
 80048de:	e006      	b.n	80048ee <HAL_UART_RxCpltCallback+0x3e>
			data_from_ether[k]=0;
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	4a9e      	ldr	r2, [pc, #632]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 80048e4:	2100      	movs	r1, #0
 80048e6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<(sizeof(data_from_ether));k++){
 80048e8:	7bbb      	ldrb	r3, [r7, #14]
 80048ea:	3301      	adds	r3, #1
 80048ec:	73bb      	strb	r3, [r7, #14]
 80048ee:	7bbb      	ldrb	r3, [r7, #14]
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d9f5      	bls.n	80048e0 <HAL_UART_RxCpltCallback+0x30>
 80048f4:	e021      	b.n	800493a <HAL_UART_RxCpltCallback+0x8a>
		}
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 80048f6:	2300      	movs	r3, #0
 80048f8:	737b      	strb	r3, [r7, #13]
 80048fa:	e01b      	b.n	8004934 <HAL_UART_RxCpltCallback+0x84>
			if ((j + k) >= sizeof(data_from_ether)) {
 80048fc:	7bfa      	ldrb	r2, [r7, #15]
 80048fe:	7b7b      	ldrb	r3, [r7, #13]
 8004900:	4413      	add	r3, r2
 8004902:	2b0c      	cmp	r3, #12
 8004904:	d90a      	bls.n	800491c <HAL_UART_RxCpltCallback+0x6c>
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004906:	7b7a      	ldrb	r2, [r7, #13]
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	4413      	add	r3, r2
 800490c:	f1a3 020d 	sub.w	r2, r3, #13
 8004910:	7b7b      	ldrb	r3, [r7, #13]
 8004912:	4991      	ldr	r1, [pc, #580]	; (8004b58 <HAL_UART_RxCpltCallback+0x2a8>)
 8004914:	5c89      	ldrb	r1, [r1, r2]
 8004916:	4a91      	ldr	r2, [pc, #580]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004918:	54d1      	strb	r1, [r2, r3]
 800491a:	e008      	b.n	800492e <HAL_UART_RxCpltCallback+0x7e>
			}
			else {
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800491c:	7bfa      	ldrb	r2, [r7, #15]
 800491e:	7b7b      	ldrb	r3, [r7, #13]
 8004920:	4413      	add	r3, r2
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	7b7b      	ldrb	r3, [r7, #13]
 8004926:	498c      	ldr	r1, [pc, #560]	; (8004b58 <HAL_UART_RxCpltCallback+0x2a8>)
 8004928:	5c89      	ldrb	r1, [r1, r2]
 800492a:	4a8c      	ldr	r2, [pc, #560]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 800492c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	3301      	adds	r3, #1
 8004932:	737b      	strb	r3, [r7, #13]
 8004934:	7b7b      	ldrb	r3, [r7, #13]
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d9e0      	bls.n	80048fc <HAL_UART_RxCpltCallback+0x4c>
			}
		}
	}
	if(data_from_ether[sizeof(data_from_ether)-1]==253){
 800493a:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 800493c:	7b1b      	ldrb	r3, [r3, #12]
 800493e:	2bfd      	cmp	r3, #253	; 0xfd
 8004940:	d10f      	bne.n	8004962 <HAL_UART_RxCpltCallback+0xb2>
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004942:	2300      	movs	r3, #0
 8004944:	733b      	strb	r3, [r7, #12]
 8004946:	e008      	b.n	800495a <HAL_UART_RxCpltCallback+0xaa>
			Rxbuf_from_Ether_temp[k]=data_from_ether[k];
 8004948:	7b3a      	ldrb	r2, [r7, #12]
 800494a:	7b3b      	ldrb	r3, [r7, #12]
 800494c:	4983      	ldr	r1, [pc, #524]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 800494e:	5c89      	ldrb	r1, [r1, r2]
 8004950:	4a83      	ldr	r2, [pc, #524]	; (8004b60 <HAL_UART_RxCpltCallback+0x2b0>)
 8004952:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004954:	7b3b      	ldrb	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	733b      	strb	r3, [r7, #12]
 800495a:	7b3b      	ldrb	r3, [r7, #12]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d9f3      	bls.n	8004948 <HAL_UART_RxCpltCallback+0x98>
 8004960:	e00e      	b.n	8004980 <HAL_UART_RxCpltCallback+0xd0>
		}
	}
	else{
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004962:	2300      	movs	r3, #0
 8004964:	72fb      	strb	r3, [r7, #11]
 8004966:	e008      	b.n	800497a <HAL_UART_RxCpltCallback+0xca>
			data_from_ether[k]=Rxbuf_from_Ether_temp[k];
 8004968:	7afa      	ldrb	r2, [r7, #11]
 800496a:	7afb      	ldrb	r3, [r7, #11]
 800496c:	497c      	ldr	r1, [pc, #496]	; (8004b60 <HAL_UART_RxCpltCallback+0x2b0>)
 800496e:	5c89      	ldrb	r1, [r1, r2]
 8004970:	4a7a      	ldr	r2, [pc, #488]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004972:	54d1      	strb	r1, [r2, r3]
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
 8004974:	7afb      	ldrb	r3, [r7, #11]
 8004976:	3301      	adds	r3, #1
 8004978:	72fb      	strb	r3, [r7, #11]
 800497a:	7afb      	ldrb	r3, [r7, #11]
 800497c:	2b0c      	cmp	r3, #12
 800497e:	d9f3      	bls.n	8004968 <HAL_UART_RxCpltCallback+0xb8>
		}
	}

	vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 8004980:	4b76      	ldr	r3, [pc, #472]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	4a75      	ldr	r2, [pc, #468]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004988:	7852      	ldrb	r2, [r2, #1]
 800498a:	4313      	orrs	r3, r2
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004994:	ee17 0a90 	vmov	r0, s15
 8004998:	f7fb fdfe 	bl	8000598 <__aeabi_f2d>
 800499c:	a36a      	add	r3, pc, #424	; (adr r3, 8004b48 <HAL_UART_RxCpltCallback+0x298>)
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f7fb fc99 	bl	80002d8 <__aeabi_dsub>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	a366      	add	r3, pc, #408	; (adr r3, 8004b48 <HAL_UART_RxCpltCallback+0x298>)
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	f7fb ff72 	bl	800089c <__aeabi_ddiv>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	4b67      	ldr	r3, [pc, #412]	; (8004b64 <HAL_UART_RxCpltCallback+0x2b4>)
 80049c6:	f7fb fe3f 	bl	8000648 <__aeabi_dmul>
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4610      	mov	r0, r2
 80049d0:	4619      	mov	r1, r3
 80049d2:	f7fc f931 	bl	8000c38 <__aeabi_d2f>
 80049d6:	4603      	mov	r3, r0
 80049d8:	4a63      	ldr	r2, [pc, #396]	; (8004b68 <HAL_UART_RxCpltCallback+0x2b8>)
 80049da:	6013      	str	r3, [r2, #0]
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 80049dc:	4b5f      	ldr	r3, [pc, #380]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 80049de:	789b      	ldrb	r3, [r3, #2]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	4a5e      	ldr	r2, [pc, #376]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 80049e4:	78d2      	ldrb	r2, [r2, #3]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049f0:	ee17 0a90 	vmov	r0, s15
 80049f4:	f7fb fdd0 	bl	8000598 <__aeabi_f2d>
 80049f8:	a353      	add	r3, pc, #332	; (adr r3, 8004b48 <HAL_UART_RxCpltCallback+0x298>)
 80049fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fe:	f7fb fc6b 	bl	80002d8 <__aeabi_dsub>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	a34f      	add	r3, pc, #316	; (adr r3, 8004b48 <HAL_UART_RxCpltCallback+0x298>)
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f7fb ff44 	bl	800089c <__aeabi_ddiv>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_UART_RxCpltCallback+0x2b4>)
 8004a22:	f7fb fe11 	bl	8000648 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f7fc f903 	bl	8000c38 <__aeabi_d2f>
 8004a32:	4603      	mov	r3, r0
 8004a34:	4a4d      	ldr	r2, [pc, #308]	; (8004b6c <HAL_UART_RxCpltCallback+0x2bc>)
 8004a36:	6013      	str	r3, [r2, #0]
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004a38:	4b48      	ldr	r3, [pc, #288]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a3a:	791b      	ldrb	r3, [r3, #4]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	4a47      	ldr	r2, [pc, #284]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a40:	7952      	ldrb	r2, [r2, #5]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	ee07 3a90 	vmov	s15, r3
 8004a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a4c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004b70 <HAL_UART_RxCpltCallback+0x2c0>
 8004a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a54:	ee17 0a90 	vmov	r0, s15
 8004a58:	f7fb fd9e 	bl	8000598 <__aeabi_f2d>
 8004a5c:	a33a      	add	r3, pc, #232	; (adr r3, 8004b48 <HAL_UART_RxCpltCallback+0x298>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f7fb ff1b 	bl	800089c <__aeabi_ddiv>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	a338      	add	r3, pc, #224	; (adr r3, 8004b50 <HAL_UART_RxCpltCallback+0x2a0>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f7fb fde8 	bl	8000648 <__aeabi_dmul>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f7fc f8da 	bl	8000c38 <__aeabi_d2f>
 8004a84:	4603      	mov	r3, r0
 8004a86:	4a3b      	ldr	r2, [pc, #236]	; (8004b74 <HAL_UART_RxCpltCallback+0x2c4>)
 8004a88:	6013      	str	r3, [r2, #0]
	theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 8004a8a:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a8c:	799b      	ldrb	r3, [r3, #6]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004a92:	79d2      	ldrb	r2, [r2, #7]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a9e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004b70 <HAL_UART_RxCpltCallback+0x2c0>
 8004aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004aa6:	ee17 0a90 	vmov	r0, s15
 8004aaa:	f7fb fd75 	bl	8000598 <__aeabi_f2d>
 8004aae:	a326      	add	r3, pc, #152	; (adr r3, 8004b48 <HAL_UART_RxCpltCallback+0x298>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fef2 	bl	800089c <__aeabi_ddiv>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4610      	mov	r0, r2
 8004abe:	4619      	mov	r1, r3
 8004ac0:	a323      	add	r3, pc, #140	; (adr r3, 8004b50 <HAL_UART_RxCpltCallback+0x2a0>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fdbf 	bl	8000648 <__aeabi_dmul>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f7fc f8b1 	bl	8000c38 <__aeabi_d2f>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4a27      	ldr	r2, [pc, #156]	; (8004b78 <HAL_UART_RxCpltCallback+0x2c8>)
 8004ada:	6013      	str	r3, [r2, #0]

	if(data_from_ether[8]>100){
 8004adc:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004ade:	7a1b      	ldrb	r3, [r3, #8]
 8004ae0:	2b64      	cmp	r3, #100	; 0x64
 8004ae2:	d909      	bls.n	8004af8 <HAL_UART_RxCpltCallback+0x248>
		chipEN=1;
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_UART_RxCpltCallback+0x2cc>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
		data_from_ether[8]=data_from_ether[8]-100;
 8004aea:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004aec:	7a1b      	ldrb	r3, [r3, #8]
 8004aee:	3b64      	subs	r3, #100	; 0x64
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004af4:	721a      	strb	r2, [r3, #8]
 8004af6:	e002      	b.n	8004afe <HAL_UART_RxCpltCallback+0x24e>
	}
	else{
		chipEN=0;
 8004af8:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_UART_RxCpltCallback+0x2cc>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
	}
	kick_power=(float32_t)data_from_ether[8]/20.0;
 8004afe:	4b17      	ldr	r3, [pc, #92]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004b00:	7a1b      	ldrb	r3, [r3, #8]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b0a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_UART_RxCpltCallback+0x2d0>)
 8004b14:	edc3 7a00 	vstr	s15, [r3]
	drible_power=(float32_t)data_from_ether[9]/20.0;
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004b1a:	7a5b      	ldrb	r3, [r3, #9]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b24:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b2c:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <HAL_UART_RxCpltCallback+0x2d4>)
 8004b2e:	edc3 7a00 	vstr	s15, [r3]

	keeper_EN=data_from_ether[10];
 8004b32:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <HAL_UART_RxCpltCallback+0x2ac>)
 8004b34:	7a9a      	ldrb	r2, [r3, #10]
 8004b36:	4b14      	ldr	r3, [pc, #80]	; (8004b88 <HAL_UART_RxCpltCallback+0x2d8>)
 8004b38:	701a      	strb	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	f3af 8000 	nop.w
 8004b48:	00000000 	.word	0x00000000
 8004b4c:	40dfffc0 	.word	0x40dfffc0
 8004b50:	54442d18 	.word	0x54442d18
 8004b54:	400921fb 	.word	0x400921fb
 8004b58:	200005ac 	.word	0x200005ac
 8004b5c:	20000638 	.word	0x20000638
 8004b60:	200005bc 	.word	0x200005bc
 8004b64:	401c0000 	.word	0x401c0000
 8004b68:	200006e8 	.word	0x200006e8
 8004b6c:	200006ec 	.word	0x200006ec
 8004b70:	46fffe00 	.word	0x46fffe00
 8004b74:	200006fc 	.word	0x200006fc
 8004b78:	20000700 	.word	0x20000700
 8004b7c:	20000704 	.word	0x20000704
 8004b80:	200006f8 	.word	0x200006f8
 8004b84:	200006f4 	.word	0x200006f4
 8004b88:	20000730 	.word	0x20000730

08004b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		maintask_emargency();
 8004b90:	f7ff fc30 	bl	80043f4 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8004b94:	2201      	movs	r2, #1
 8004b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b9a:	4804      	ldr	r0, [pc, #16]	; (8004bac <Error_Handler+0x20>)
 8004b9c:	f003 ff18 	bl	80089d0 <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 8004ba0:	21c8      	movs	r1, #200	; 0xc8
 8004ba2:	20c8      	movs	r0, #200	; 0xc8
 8004ba4:	f7fc fb78 	bl	8001298 <actuator_buzzer>
		maintask_emargency();
 8004ba8:	e7f2      	b.n	8004b90 <Error_Handler+0x4>
 8004baa:	bf00      	nop
 8004bac:	48000400 	.word	0x48000400

08004bb0 <getUs>:
 */
#include "microsectimer.h"



uint32_t getUs(void) {
 8004bb0:	b5b0      	push	{r4, r5, r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004bb6:	f004 fc5d 	bl	8009474 <HAL_RCC_GetSysClockFreq>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <getUs+0x50>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	0c9b      	lsrs	r3, r3, #18
 8004bc4:	607b      	str	r3, [r7, #4]
register uint32_t ms, cycle_cnt;
do {
ms = HAL_GetTick();
 8004bc6:	f7fe f99f 	bl	8002f08 <HAL_GetTick>
 8004bca:	4604      	mov	r4, r0
cycle_cnt = SysTick->VAL;
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <getUs+0x54>)
 8004bce:	689d      	ldr	r5, [r3, #8]
} while (ms != HAL_GetTick());
 8004bd0:	f7fe f99a 	bl	8002f08 <HAL_GetTick>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	d1f5      	bne.n	8004bc6 <getUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bde:	fb03 f204 	mul.w	r2, r3, r4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1b59      	subs	r1, r3, r5
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	431bde83 	.word	0x431bde83
 8004c04:	e000e010 	.word	0xe000e010

08004c08 <delayUs>:

void delayUs(uint16_t micros) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	80fb      	strh	r3, [r7, #6]
uint32_t start = getUs();
 8004c12:	f7ff ffcd 	bl	8004bb0 <getUs>
 8004c16:	60f8      	str	r0, [r7, #12]
while (getUs()-start < (uint32_t) micros) {
 8004c18:	e000      	b.n	8004c1c <delayUs+0x14>
	asm("nop");
 8004c1a:	bf00      	nop
while (getUs()-start < (uint32_t) micros) {
 8004c1c:	f7ff ffc8 	bl	8004bb0 <getUs>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad2      	subs	r2, r2, r3
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3f6      	bcc.n	8004c1a <delayUs+0x12>
}
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004c42:	edc7 0a02 	vstr	s1, [r7, #8]
 8004c46:	ed87 1a01 	vstr	s2, [r7, #4]
 8004c4a:	edc7 1a00 	vstr	s3, [r7]
	v_round=robot_radius*omega_omni;
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fb fca2 	bl	8000598 <__aeabi_f2d>
 8004c54:	a360      	add	r3, pc, #384	; (adr r3, 8004dd8 <omni_move+0x1a0>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fcf5 	bl	8000648 <__aeabi_dmul>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	f7fb ffe7 	bl	8000c38 <__aeabi_d2f>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4a50      	ldr	r2, [pc, #320]	; (8004db0 <omni_move+0x178>)
 8004c6e:	6013      	str	r3, [r2, #0]

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004c70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c7c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8004db4 <omni_move+0x17c>
 8004c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c8c:	4b48      	ldr	r3, [pc, #288]	; (8004db0 <omni_move+0x178>)
 8004c8e:	edd3 7a00 	vldr	s15, [r3]
 8004c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c96:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004db8 <omni_move+0x180>
 8004c9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca6:	4b45      	ldr	r3, [pc, #276]	; (8004dbc <omni_move+0x184>)
 8004ca8:	edc3 7a00 	vstr	s15, [r3]
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004cac:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004dc0 <omni_move+0x188>
 8004cb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cb8:	eddf 6a42 	vldr	s13, [pc, #264]	; 8004dc4 <omni_move+0x18c>
 8004cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <omni_move+0x178>)
 8004cca:	edd3 7a00 	vldr	s15, [r3]
 8004cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cd2:	eddf 6a39 	vldr	s13, [pc, #228]	; 8004db8 <omni_move+0x180>
 8004cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <omni_move+0x190>)
 8004ce4:	edc3 7a00 	vstr	s15, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004ce8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004dc0 <omni_move+0x188>
 8004cec:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cf4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004dc0 <omni_move+0x188>
 8004cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <omni_move+0x178>)
 8004d06:	edd3 7a00 	vldr	s15, [r3]
 8004d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d0e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004db8 <omni_move+0x180>
 8004d12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <omni_move+0x194>)
 8004d20:	edc3 7a00 	vstr	s15, [r3]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004d24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d30:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004dd0 <omni_move+0x198>
 8004d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <omni_move+0x178>)
 8004d42:	edd3 7a00 	vldr	s15, [r3]
 8004d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d4a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8004db8 <omni_move+0x180>
 8004d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d5a:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <omni_move+0x19c>)
 8004d5c:	edc3 7a00 	vstr	s15, [r3]

	actuator_motor1(m1,duty_Limit);
 8004d60:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <omni_move+0x184>)
 8004d62:	edd3 7a00 	vldr	s15, [r3]
 8004d66:	edd7 0a00 	vldr	s1, [r7]
 8004d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d6e:	f7fc f935 	bl	8000fdc <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <omni_move+0x190>)
 8004d74:	edd3 7a00 	vldr	s15, [r3]
 8004d78:	edd7 0a00 	vldr	s1, [r7]
 8004d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d80:	f7fc f95c 	bl	800103c <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 8004d84:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <omni_move+0x194>)
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	edd7 0a00 	vldr	s1, [r7]
 8004d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d92:	f7fc f983 	bl	800109c <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <omni_move+0x19c>)
 8004d98:	edd3 7a00 	vldr	s15, [r3]
 8004d9c:	edd7 0a00 	vldr	s1, [r7]
 8004da0:	eeb0 0a67 	vmov.f32	s0, s15
 8004da4:	f7fc f9aa 	bl	80010fc <actuator_motor4>

		cnt_motor=0;
		stall=0;
	}*/

}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2000072c 	.word	0x2000072c
 8004db4:	3f5db3d7 	.word	0x3f5db3d7
 8004db8:	3e3426c8 	.word	0x3e3426c8
 8004dbc:	2000071c 	.word	0x2000071c
 8004dc0:	bf3504f3 	.word	0xbf3504f3
 8004dc4:	3f3504f3 	.word	0x3f3504f3
 8004dc8:	20000720 	.word	0x20000720
 8004dcc:	20000724 	.word	0x20000724
 8004dd0:	bf5db3d7 	.word	0xbf5db3d7
 8004dd4:	20000728 	.word	0x20000728
 8004dd8:	47ae147b 	.word	0x47ae147b
 8004ddc:	3fb47ae1 	.word	0x3fb47ae1

08004de0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004de4:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004de6:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <MX_SPI1_Init+0x78>)
 8004de8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004df0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004dfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004dfe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e0c:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e16:	2230      	movs	r2, #48	; 0x30
 8004e18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e20:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e2e:	2207      	movs	r2, #7
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e3e:	4805      	ldr	r0, [pc, #20]	; (8004e54 <MX_SPI1_Init+0x74>)
 8004e40:	f004 fe46 	bl	8009ad0 <HAL_SPI_Init>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004e4a:	f7ff fe9f 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000790 	.word	0x20000790
 8004e58:	40013000 	.word	0x40013000

08004e5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	; 0x28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e64:	f107 0314 	add.w	r3, r7, #20
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <HAL_SPI_MspInit+0x7c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d128      	bne.n	8004ed0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e7e:	4b17      	ldr	r3, [pc, #92]	; (8004edc <HAL_SPI_MspInit+0x80>)
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	4a16      	ldr	r2, [pc, #88]	; (8004edc <HAL_SPI_MspInit+0x80>)
 8004e84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e88:	6613      	str	r3, [r2, #96]	; 0x60
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <HAL_SPI_MspInit+0x80>)
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e96:	4b11      	ldr	r3, [pc, #68]	; (8004edc <HAL_SPI_MspInit+0x80>)
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	4a10      	ldr	r2, [pc, #64]	; (8004edc <HAL_SPI_MspInit+0x80>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	; (8004edc <HAL_SPI_MspInit+0x80>)
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004eae:	23e0      	movs	r3, #224	; 0xe0
 8004eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ebe:	2305      	movs	r3, #5
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ec2:	f107 0314 	add.w	r3, r7, #20
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ecc:	f003 fbe6 	bl	800869c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	3728      	adds	r7, #40	; 0x28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40013000 	.word	0x40013000
 8004edc:	40021000 	.word	0x40021000

08004ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <HAL_MspInit+0x44>)
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <HAL_MspInit+0x44>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <HAL_MspInit+0x44>)
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <HAL_MspInit+0x44>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <HAL_MspInit+0x44>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6593      	str	r3, [r2, #88]	; 0x58
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_MspInit+0x44>)
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f16:	f003 fe49 	bl	8008bac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000

08004f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f3a:	e7fe      	b.n	8004f3a <HardFault_Handler+0x4>

08004f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f40:	e7fe      	b.n	8004f40 <MemManage_Handler+0x4>

08004f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f46:	e7fe      	b.n	8004f46 <BusFault_Handler+0x4>

08004f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f4c:	e7fe      	b.n	8004f4c <UsageFault_Handler+0x4>

08004f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f6e:	bf00      	nop
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f7c:	f000 fd62 	bl	8005a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f80:	bf00      	nop
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <DMA1_Channel1_IRQHandler+0x10>)
 8004f8a:	f002 fbbc 	bl	8007706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000a40 	.word	0x20000a40

08004f98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <DMA1_Channel2_IRQHandler+0x10>)
 8004f9e:	f002 fbb2 	bl	8007706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000aa0 	.word	0x20000aa0

08004fac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004fb0:	4802      	ldr	r0, [pc, #8]	; (8004fbc <DMA1_Channel3_IRQHandler+0x10>)
 8004fb2:	f002 fba8 	bl	8007706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	200003a4 	.word	0x200003a4

08004fc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004fc4:	4802      	ldr	r0, [pc, #8]	; (8004fd0 <DMA1_Channel4_IRQHandler+0x10>)
 8004fc6:	f002 fb9e 	bl	8007706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000404 	.word	0x20000404

08004fd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <DMA1_Channel5_IRQHandler+0x10>)
 8004fda:	f002 fb94 	bl	8007706 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000344 	.word	0x20000344

08004fe8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004fec:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <FDCAN1_IT0_IRQHandler+0x10>)
 8004fee:	f003 f8cb 	bl	8008188 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000468 	.word	0x20000468

08004ffc <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <FDCAN1_IT1_IRQHandler+0x10>)
 8005002:	f003 f8c1 	bl	8008188 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000468 	.word	0x20000468

08005010 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8005014:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005018:	f003 fd0c 	bl	8008a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800501c:	bf00      	nop
 800501e:	bd80      	pop	{r7, pc}

08005020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005024:	4802      	ldr	r0, [pc, #8]	; (8005030 <USART2_IRQHandler+0x10>)
 8005026:	f006 fc7b 	bl	800b920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800502a:	bf00      	nop
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000920 	.word	0x20000920

08005034 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005038:	4802      	ldr	r0, [pc, #8]	; (8005044 <TIM7_DAC_IRQHandler+0x10>)
 800503a:	f005 fba5 	bl	800a788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000844 	.word	0x20000844

08005048 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800504c:	4802      	ldr	r0, [pc, #8]	; (8005058 <FDCAN2_IT0_IRQHandler+0x10>)
 800504e:	f003 f89b 	bl	8008188 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200004cc 	.word	0x200004cc

0800505c <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8005060:	4802      	ldr	r0, [pc, #8]	; (800506c <FDCAN2_IT1_IRQHandler+0x10>)
 8005062:	f003 f891 	bl	8008188 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	200004cc 	.word	0x200004cc

08005070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
	return 1;
 8005074:	2301      	movs	r3, #1
}
 8005076:	4618      	mov	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <_kill>:

int _kill(int pid, int sig)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800508a:	f007 ffdd 	bl	800d048 <__errno>
 800508e:	4603      	mov	r3, r0
 8005090:	2216      	movs	r2, #22
 8005092:	601a      	str	r2, [r3, #0]
	return -1;
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <_exit>:

void _exit (int status)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050a8:	f04f 31ff 	mov.w	r1, #4294967295
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ffe7 	bl	8005080 <_kill>
	while (1) {}		/* Make sure we hang here */
 80050b2:	e7fe      	b.n	80050b2 <_exit+0x12>

080050b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e00a      	b.n	80050dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050c6:	f3af 8000 	nop.w
 80050ca:	4601      	mov	r1, r0
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	60ba      	str	r2, [r7, #8]
 80050d2:	b2ca      	uxtb	r2, r1
 80050d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3301      	adds	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	dbf0      	blt.n	80050c6 <_read+0x12>
	}

return len;
 80050e4:	687b      	ldr	r3, [r7, #4]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e009      	b.n	8005114 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	60ba      	str	r2, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7fd feeb 	bl	8002ee4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	3301      	adds	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	dbf1      	blt.n	8005100 <_write+0x12>
	}
	return len;
 800511c:	687b      	ldr	r3, [r7, #4]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <_close>:

int _close(int file)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
	return -1;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800514e:	605a      	str	r2, [r3, #4]
	return 0;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <_isatty>:

int _isatty(int file)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
	return 1;
 8005166:	2301      	movs	r3, #1
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
	return 0;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005198:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <_sbrk+0x50>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d102      	bne.n	80051a6 <_sbrk+0x16>
		heap_end = &end;
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <_sbrk+0x50>)
 80051a2:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <_sbrk+0x54>)
 80051a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80051a6:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <_sbrk+0x50>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <_sbrk+0x50>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	466a      	mov	r2, sp
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d907      	bls.n	80051ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80051ba:	f007 ff45 	bl	800d048 <__errno>
 80051be:	4603      	mov	r3, r0
 80051c0:	220c      	movs	r2, #12
 80051c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80051c4:	f04f 33ff 	mov.w	r3, #4294967295
 80051c8:	e006      	b.n	80051d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <_sbrk+0x50>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <_sbrk+0x50>)
 80051d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200007f4 	.word	0x200007f4
 80051e4:	20000b18 	.word	0x20000b18

080051e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <SystemInit+0x28>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	4a07      	ldr	r2, [pc, #28]	; (8005210 <SystemInit+0x28>)
 80051f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <SystemInit+0x28>)
 80051fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005202:	609a      	str	r2, [r3, #8]
#endif
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	e000ed00 	.word	0xe000ed00

08005214 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800521a:	f107 031c 	add.w	r3, r7, #28
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
 8005224:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005226:	463b      	mov	r3, r7
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	605a      	str	r2, [r3, #4]
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	60da      	str	r2, [r3, #12]
 8005232:	611a      	str	r2, [r3, #16]
 8005234:	615a      	str	r2, [r3, #20]
 8005236:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005238:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <MX_TIM5_Init+0xac>)
 800523a:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <MX_TIM5_Init+0xb0>)
 800523c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 170;
 800523e:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <MX_TIM5_Init+0xac>)
 8005240:	22aa      	movs	r2, #170	; 0xaa
 8005242:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005244:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <MX_TIM5_Init+0xac>)
 8005246:	2200      	movs	r2, #0
 8005248:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500;
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <MX_TIM5_Init+0xac>)
 800524c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005250:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005252:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <MX_TIM5_Init+0xac>)
 8005254:	2200      	movs	r2, #0
 8005256:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <MX_TIM5_Init+0xac>)
 800525a:	2200      	movs	r2, #0
 800525c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800525e:	4818      	ldr	r0, [pc, #96]	; (80052c0 <MX_TIM5_Init+0xac>)
 8005260:	f005 f928 	bl	800a4b4 <HAL_TIM_PWM_Init>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800526a:	f7ff fc8f 	bl	8004b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005276:	f107 031c 	add.w	r3, r7, #28
 800527a:	4619      	mov	r1, r3
 800527c:	4810      	ldr	r0, [pc, #64]	; (80052c0 <MX_TIM5_Init+0xac>)
 800527e:	f006 f937 	bl	800b4f0 <HAL_TIMEx_MasterConfigSynchronization>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8005288:	f7ff fc80 	bl	8004b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800528c:	2360      	movs	r3, #96	; 0x60
 800528e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800529c:	463b      	mov	r3, r7
 800529e:	2204      	movs	r2, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4807      	ldr	r0, [pc, #28]	; (80052c0 <MX_TIM5_Init+0xac>)
 80052a4:	f005 fbf0 	bl	800aa88 <HAL_TIM_PWM_ConfigChannel>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80052ae:	f7ff fc6d 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80052b2:	4803      	ldr	r0, [pc, #12]	; (80052c0 <MX_TIM5_Init+0xac>)
 80052b4:	f000 f884 	bl	80053c0 <HAL_TIM_MspPostInit>

}
 80052b8:	bf00      	nop
 80052ba:	3728      	adds	r7, #40	; 0x28
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	200007f8 	.word	0x200007f8
 80052c4:	40000c00 	.word	0x40000c00

080052c8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80052d8:	4b14      	ldr	r3, [pc, #80]	; (800532c <MX_TIM7_Init+0x64>)
 80052da:	4a15      	ldr	r2, [pc, #84]	; (8005330 <MX_TIM7_Init+0x68>)
 80052dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170;
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <MX_TIM7_Init+0x64>)
 80052e0:	22aa      	movs	r2, #170	; 0xaa
 80052e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <MX_TIM7_Init+0x64>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <MX_TIM7_Init+0x64>)
 80052ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052f2:	4b0e      	ldr	r3, [pc, #56]	; (800532c <MX_TIM7_Init+0x64>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80052f8:	480c      	ldr	r0, [pc, #48]	; (800532c <MX_TIM7_Init+0x64>)
 80052fa:	f005 f80b 	bl	800a314 <HAL_TIM_Base_Init>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005304:	f7ff fc42 	bl	8004b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005308:	2300      	movs	r3, #0
 800530a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4805      	ldr	r0, [pc, #20]	; (800532c <MX_TIM7_Init+0x64>)
 8005316:	f006 f8eb 	bl	800b4f0 <HAL_TIMEx_MasterConfigSynchronization>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005320:	f7ff fc34 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000844 	.word	0x20000844
 8005330:	40001400 	.word	0x40001400

08005334 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0a      	ldr	r2, [pc, #40]	; (800536c <HAL_TIM_PWM_MspInit+0x38>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10b      	bne.n	800535e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <HAL_TIM_PWM_MspInit+0x3c>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	4a09      	ldr	r2, [pc, #36]	; (8005370 <HAL_TIM_PWM_MspInit+0x3c>)
 800534c:	f043 0308 	orr.w	r3, r3, #8
 8005350:	6593      	str	r3, [r2, #88]	; 0x58
 8005352:	4b07      	ldr	r3, [pc, #28]	; (8005370 <HAL_TIM_PWM_MspInit+0x3c>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40021000 	.word	0x40021000

08005374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <HAL_TIM_Base_MspInit+0x44>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d113      	bne.n	80053ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	4a0c      	ldr	r2, [pc, #48]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 800538c:	f043 0320 	orr.w	r3, r3, #32
 8005390:	6593      	str	r3, [r2, #88]	; 0x58
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_TIM_Base_MspInit+0x48>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 800539e:	2200      	movs	r2, #0
 80053a0:	2108      	movs	r1, #8
 80053a2:	2037      	movs	r0, #55	; 0x37
 80053a4:	f001 ff97 	bl	80072d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80053a8:	2037      	movs	r0, #55	; 0x37
 80053aa:	f001 ffae 	bl	800730a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40001400 	.word	0x40001400
 80053bc:	40021000 	.word	0x40021000

080053c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a11      	ldr	r2, [pc, #68]	; (8005424 <HAL_TIM_MspPostInit+0x64>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d11c      	bne.n	800541c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e2:	4b11      	ldr	r3, [pc, #68]	; (8005428 <HAL_TIM_MspPostInit+0x68>)
 80053e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <HAL_TIM_MspPostInit+0x68>)
 80053e8:	f043 0304 	orr.w	r3, r3, #4
 80053ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053ee:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <HAL_TIM_MspPostInit+0x68>)
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	f003 0304 	and.w	r3, r3, #4
 80053f6:	60bb      	str	r3, [r7, #8]
 80053f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 80053fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005400:	2302      	movs	r3, #2
 8005402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005408:	2300      	movs	r3, #0
 800540a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800540c:	2301      	movs	r3, #1
 800540e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005410:	f107 030c 	add.w	r3, r7, #12
 8005414:	4619      	mov	r1, r3
 8005416:	4805      	ldr	r0, [pc, #20]	; (800542c <HAL_TIM_MspPostInit+0x6c>)
 8005418:	f003 f940 	bl	800869c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800541c:	bf00      	nop
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40000c00 	.word	0x40000c00
 8005428:	40021000 	.word	0x40021000
 800542c:	48000800 	.word	0x48000800

08005430 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 8005436:	4a24      	ldr	r2, [pc, #144]	; (80054c8 <MX_LPUART1_UART_Init+0x98>)
 8005438:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800543a:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 800543c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005440:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 8005444:	2200      	movs	r2, #0
 8005446:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 800544a:	2200      	movs	r2, #0
 800544c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 8005450:	2200      	movs	r2, #0
 8005452:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005454:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 8005456:	220c      	movs	r2, #12
 8005458:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800545a:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 800545c:	2200      	movs	r2, #0
 800545e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005460:	4b18      	ldr	r3, [pc, #96]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 8005462:	2200      	movs	r2, #0
 8005464:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005466:	4b17      	ldr	r3, [pc, #92]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 8005468:	2200      	movs	r2, #0
 800546a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800546c:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 800546e:	2220      	movs	r2, #32
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 8005474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800547a:	4812      	ldr	r0, [pc, #72]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 800547c:	f006 f914 	bl	800b6a8 <HAL_UART_Init>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8005486:	f7ff fb81 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800548a:	2100      	movs	r1, #0
 800548c:	480d      	ldr	r0, [pc, #52]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 800548e:	f007 fd11 	bl	800ceb4 <HAL_UARTEx_SetTxFifoThreshold>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8005498:	f7ff fb78 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800549c:	2100      	movs	r1, #0
 800549e:	4809      	ldr	r0, [pc, #36]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 80054a0:	f007 fd46 	bl	800cf30 <HAL_UARTEx_SetRxFifoThreshold>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 80054aa:	f7ff fb6f 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80054ae:	4805      	ldr	r0, [pc, #20]	; (80054c4 <MX_LPUART1_UART_Init+0x94>)
 80054b0:	f007 fcc7 	bl	800ce42 <HAL_UARTEx_DisableFifoMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 80054ba:	f7ff fb67 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000890 	.word	0x20000890
 80054c8:	40008000 	.word	0x40008000

080054cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80054d0:	4b24      	ldr	r3, [pc, #144]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054d2:	4a25      	ldr	r2, [pc, #148]	; (8005568 <MX_USART2_UART_Init+0x9c>)
 80054d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80054d6:	4b23      	ldr	r3, [pc, #140]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054d8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80054dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80054de:	4b21      	ldr	r3, [pc, #132]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054e4:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054ea:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054f2:	220c      	movs	r2, #12
 80054f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054f6:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <MX_USART2_UART_Init+0x98>)
 80054fe:	2200      	movs	r2, #0
 8005500:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005502:	4b18      	ldr	r3, [pc, #96]	; (8005564 <MX_USART2_UART_Init+0x98>)
 8005504:	2200      	movs	r2, #0
 8005506:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005508:	4b16      	ldr	r3, [pc, #88]	; (8005564 <MX_USART2_UART_Init+0x98>)
 800550a:	2200      	movs	r2, #0
 800550c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <MX_USART2_UART_Init+0x98>)
 8005510:	2208      	movs	r2, #8
 8005512:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005514:	4b13      	ldr	r3, [pc, #76]	; (8005564 <MX_USART2_UART_Init+0x98>)
 8005516:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800551c:	4811      	ldr	r0, [pc, #68]	; (8005564 <MX_USART2_UART_Init+0x98>)
 800551e:	f006 f8c3 	bl	800b6a8 <HAL_UART_Init>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8005528:	f7ff fb30 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800552c:	2100      	movs	r1, #0
 800552e:	480d      	ldr	r0, [pc, #52]	; (8005564 <MX_USART2_UART_Init+0x98>)
 8005530:	f007 fcc0 	bl	800ceb4 <HAL_UARTEx_SetTxFifoThreshold>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 800553a:	f7ff fb27 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800553e:	2100      	movs	r1, #0
 8005540:	4808      	ldr	r0, [pc, #32]	; (8005564 <MX_USART2_UART_Init+0x98>)
 8005542:	f007 fcf5 	bl	800cf30 <HAL_UARTEx_SetRxFifoThreshold>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 800554c:	f7ff fb1e 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005550:	4804      	ldr	r0, [pc, #16]	; (8005564 <MX_USART2_UART_Init+0x98>)
 8005552:	f007 fc76 	bl	800ce42 <HAL_UARTEx_DisableFifoMode>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 800555c:	f7ff fb16 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005560:	bf00      	nop
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000920 	.word	0x20000920
 8005568:	40004400 	.word	0x40004400

0800556c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005570:	4b22      	ldr	r3, [pc, #136]	; (80055fc <MX_USART3_UART_Init+0x90>)
 8005572:	4a23      	ldr	r2, [pc, #140]	; (8005600 <MX_USART3_UART_Init+0x94>)
 8005574:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005576:	4b21      	ldr	r3, [pc, #132]	; (80055fc <MX_USART3_UART_Init+0x90>)
 8005578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800557c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800557e:	4b1f      	ldr	r3, [pc, #124]	; (80055fc <MX_USART3_UART_Init+0x90>)
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005584:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <MX_USART3_UART_Init+0x90>)
 8005586:	2200      	movs	r2, #0
 8005588:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800558a:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <MX_USART3_UART_Init+0x90>)
 800558c:	2200      	movs	r2, #0
 800558e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005590:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <MX_USART3_UART_Init+0x90>)
 8005592:	220c      	movs	r2, #12
 8005594:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005596:	4b19      	ldr	r3, [pc, #100]	; (80055fc <MX_USART3_UART_Init+0x90>)
 8005598:	2200      	movs	r2, #0
 800559a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800559c:	4b17      	ldr	r3, [pc, #92]	; (80055fc <MX_USART3_UART_Init+0x90>)
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055a2:	4b16      	ldr	r3, [pc, #88]	; (80055fc <MX_USART3_UART_Init+0x90>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055a8:	4b14      	ldr	r3, [pc, #80]	; (80055fc <MX_USART3_UART_Init+0x90>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <MX_USART3_UART_Init+0x90>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80055b4:	4811      	ldr	r0, [pc, #68]	; (80055fc <MX_USART3_UART_Init+0x90>)
 80055b6:	f006 f877 	bl	800b6a8 <HAL_UART_Init>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80055c0:	f7ff fae4 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055c4:	2100      	movs	r1, #0
 80055c6:	480d      	ldr	r0, [pc, #52]	; (80055fc <MX_USART3_UART_Init+0x90>)
 80055c8:	f007 fc74 	bl	800ceb4 <HAL_UARTEx_SetTxFifoThreshold>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80055d2:	f7ff fadb 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055d6:	2100      	movs	r1, #0
 80055d8:	4808      	ldr	r0, [pc, #32]	; (80055fc <MX_USART3_UART_Init+0x90>)
 80055da:	f007 fca9 	bl	800cf30 <HAL_UARTEx_SetRxFifoThreshold>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80055e4:	f7ff fad2 	bl	8004b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80055e8:	4804      	ldr	r0, [pc, #16]	; (80055fc <MX_USART3_UART_Init+0x90>)
 80055ea:	f007 fc2a 	bl	800ce42 <HAL_UARTEx_DisableFifoMode>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80055f4:	f7ff faca 	bl	8004b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	200009b0 	.word	0x200009b0
 8005600:	40004800 	.word	0x40004800

08005604 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b0a2      	sub	sp, #136	; 0x88
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800561c:	f107 0320 	add.w	r3, r7, #32
 8005620:	2254      	movs	r2, #84	; 0x54
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f007 fd39 	bl	800d09c <memset>
  if(uartHandle->Instance==LPUART1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a8b      	ldr	r2, [pc, #556]	; (800585c <HAL_UART_MspInit+0x258>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d139      	bne.n	80056a8 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005634:	2320      	movs	r3, #32
 8005636:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005638:	2300      	movs	r3, #0
 800563a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800563c:	f107 0320 	add.w	r3, r7, #32
 8005640:	4618      	mov	r0, r3
 8005642:	f003 fff7 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800564c:	f7ff fa9e 	bl	8004b8c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005650:	4b83      	ldr	r3, [pc, #524]	; (8005860 <HAL_UART_MspInit+0x25c>)
 8005652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005654:	4a82      	ldr	r2, [pc, #520]	; (8005860 <HAL_UART_MspInit+0x25c>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800565c:	4b80      	ldr	r3, [pc, #512]	; (8005860 <HAL_UART_MspInit+0x25c>)
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005668:	4b7d      	ldr	r3, [pc, #500]	; (8005860 <HAL_UART_MspInit+0x25c>)
 800566a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566c:	4a7c      	ldr	r2, [pc, #496]	; (8005860 <HAL_UART_MspInit+0x25c>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005674:	4b7a      	ldr	r3, [pc, #488]	; (8005860 <HAL_UART_MspInit+0x25c>)
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005680:	230c      	movs	r3, #12
 8005682:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005684:	2302      	movs	r3, #2
 8005686:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005688:	2300      	movs	r3, #0
 800568a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005692:	230c      	movs	r3, #12
 8005694:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005698:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800569c:	4619      	mov	r1, r3
 800569e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056a2:	f002 fffb 	bl	800869c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80056a6:	e0d5      	b.n	8005854 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a6d      	ldr	r2, [pc, #436]	; (8005864 <HAL_UART_MspInit+0x260>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d169      	bne.n	8005786 <HAL_UART_MspInit+0x182>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80056b2:	2302      	movs	r3, #2
 80056b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80056b6:	2300      	movs	r3, #0
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056ba:	f107 0320 	add.w	r3, r7, #32
 80056be:	4618      	mov	r0, r3
 80056c0:	f003 ffb8 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_UART_MspInit+0xca>
      Error_Handler();
 80056ca:	f7ff fa5f 	bl	8004b8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80056ce:	4b64      	ldr	r3, [pc, #400]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	4a63      	ldr	r2, [pc, #396]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80056d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d8:	6593      	str	r3, [r2, #88]	; 0x58
 80056da:	4b61      	ldr	r3, [pc, #388]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80056dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e6:	4b5e      	ldr	r3, [pc, #376]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80056e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ea:	4a5d      	ldr	r2, [pc, #372]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80056ec:	f043 0302 	orr.w	r3, r3, #2
 80056f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056f2:	4b5b      	ldr	r3, [pc, #364]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80056f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80056fe:	2318      	movs	r3, #24
 8005700:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005702:	2302      	movs	r3, #2
 8005704:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005706:	2300      	movs	r3, #0
 8005708:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570a:	2300      	movs	r3, #0
 800570c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005710:	2307      	movs	r3, #7
 8005712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005716:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800571a:	4619      	mov	r1, r3
 800571c:	4852      	ldr	r0, [pc, #328]	; (8005868 <HAL_UART_MspInit+0x264>)
 800571e:	f002 ffbd 	bl	800869c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8005722:	4b52      	ldr	r3, [pc, #328]	; (800586c <HAL_UART_MspInit+0x268>)
 8005724:	4a52      	ldr	r2, [pc, #328]	; (8005870 <HAL_UART_MspInit+0x26c>)
 8005726:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005728:	4b50      	ldr	r3, [pc, #320]	; (800586c <HAL_UART_MspInit+0x268>)
 800572a:	221a      	movs	r2, #26
 800572c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800572e:	4b4f      	ldr	r3, [pc, #316]	; (800586c <HAL_UART_MspInit+0x268>)
 8005730:	2200      	movs	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005734:	4b4d      	ldr	r3, [pc, #308]	; (800586c <HAL_UART_MspInit+0x268>)
 8005736:	2200      	movs	r2, #0
 8005738:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800573a:	4b4c      	ldr	r3, [pc, #304]	; (800586c <HAL_UART_MspInit+0x268>)
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005740:	4b4a      	ldr	r3, [pc, #296]	; (800586c <HAL_UART_MspInit+0x268>)
 8005742:	2200      	movs	r2, #0
 8005744:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005746:	4b49      	ldr	r3, [pc, #292]	; (800586c <HAL_UART_MspInit+0x268>)
 8005748:	2200      	movs	r2, #0
 800574a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800574c:	4b47      	ldr	r3, [pc, #284]	; (800586c <HAL_UART_MspInit+0x268>)
 800574e:	2220      	movs	r2, #32
 8005750:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005752:	4b46      	ldr	r3, [pc, #280]	; (800586c <HAL_UART_MspInit+0x268>)
 8005754:	2200      	movs	r2, #0
 8005756:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005758:	4844      	ldr	r0, [pc, #272]	; (800586c <HAL_UART_MspInit+0x268>)
 800575a:	f001 fdf1 	bl	8007340 <HAL_DMA_Init>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_UART_MspInit+0x164>
      Error_Handler();
 8005764:	f7ff fa12 	bl	8004b8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a40      	ldr	r2, [pc, #256]	; (800586c <HAL_UART_MspInit+0x268>)
 800576c:	67da      	str	r2, [r3, #124]	; 0x7c
 800576e:	4a3f      	ldr	r2, [pc, #252]	; (800586c <HAL_UART_MspInit+0x268>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005774:	2200      	movs	r2, #0
 8005776:	210c      	movs	r1, #12
 8005778:	2026      	movs	r0, #38	; 0x26
 800577a:	f001 fdac 	bl	80072d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800577e:	2026      	movs	r0, #38	; 0x26
 8005780:	f001 fdc3 	bl	800730a <HAL_NVIC_EnableIRQ>
}
 8005784:	e066      	b.n	8005854 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART3)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a3a      	ldr	r2, [pc, #232]	; (8005874 <HAL_UART_MspInit+0x270>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d161      	bne.n	8005854 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005790:	2304      	movs	r3, #4
 8005792:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005794:	2300      	movs	r3, #0
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005798:	f107 0320 	add.w	r3, r7, #32
 800579c:	4618      	mov	r0, r3
 800579e:	f003 ff49 	bl	8009634 <HAL_RCCEx_PeriphCLKConfig>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80057a8:	f7ff f9f0 	bl	8004b8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80057ac:	4b2c      	ldr	r3, [pc, #176]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80057b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b6:	6593      	str	r3, [r2, #88]	; 0x58
 80057b8:	4b29      	ldr	r3, [pc, #164]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c0:	60fb      	str	r3, [r7, #12]
 80057c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057c4:	4b26      	ldr	r3, [pc, #152]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80057c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80057ca:	f043 0304 	orr.w	r3, r3, #4
 80057ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057d0:	4b23      	ldr	r3, [pc, #140]	; (8005860 <HAL_UART_MspInit+0x25c>)
 80057d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 80057dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80057e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e2:	2302      	movs	r3, #2
 80057e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80057f0:	2307      	movs	r3, #7
 80057f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057fa:	4619      	mov	r1, r3
 80057fc:	481e      	ldr	r0, [pc, #120]	; (8005878 <HAL_UART_MspInit+0x274>)
 80057fe:	f002 ff4d 	bl	800869c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <HAL_UART_MspInit+0x278>)
 8005804:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <HAL_UART_MspInit+0x27c>)
 8005806:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005808:	4b1c      	ldr	r3, [pc, #112]	; (800587c <HAL_UART_MspInit+0x278>)
 800580a:	221c      	movs	r2, #28
 800580c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800580e:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_UART_MspInit+0x278>)
 8005810:	2200      	movs	r2, #0
 8005812:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005814:	4b19      	ldr	r3, [pc, #100]	; (800587c <HAL_UART_MspInit+0x278>)
 8005816:	2200      	movs	r2, #0
 8005818:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800581a:	4b18      	ldr	r3, [pc, #96]	; (800587c <HAL_UART_MspInit+0x278>)
 800581c:	2280      	movs	r2, #128	; 0x80
 800581e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005820:	4b16      	ldr	r3, [pc, #88]	; (800587c <HAL_UART_MspInit+0x278>)
 8005822:	2200      	movs	r2, #0
 8005824:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005826:	4b15      	ldr	r3, [pc, #84]	; (800587c <HAL_UART_MspInit+0x278>)
 8005828:	2200      	movs	r2, #0
 800582a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800582c:	4b13      	ldr	r3, [pc, #76]	; (800587c <HAL_UART_MspInit+0x278>)
 800582e:	2220      	movs	r2, #32
 8005830:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005832:	4b12      	ldr	r3, [pc, #72]	; (800587c <HAL_UART_MspInit+0x278>)
 8005834:	2200      	movs	r2, #0
 8005836:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005838:	4810      	ldr	r0, [pc, #64]	; (800587c <HAL_UART_MspInit+0x278>)
 800583a:	f001 fd81 	bl	8007340 <HAL_DMA_Init>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_UART_MspInit+0x244>
      Error_Handler();
 8005844:	f7ff f9a2 	bl	8004b8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a0c      	ldr	r2, [pc, #48]	; (800587c <HAL_UART_MspInit+0x278>)
 800584c:	67da      	str	r2, [r3, #124]	; 0x7c
 800584e:	4a0b      	ldr	r2, [pc, #44]	; (800587c <HAL_UART_MspInit+0x278>)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6293      	str	r3, [r2, #40]	; 0x28
}
 8005854:	bf00      	nop
 8005856:	3788      	adds	r7, #136	; 0x88
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40008000 	.word	0x40008000
 8005860:	40021000 	.word	0x40021000
 8005864:	40004400 	.word	0x40004400
 8005868:	48000400 	.word	0x48000400
 800586c:	20000a40 	.word	0x20000a40
 8005870:	40020008 	.word	0x40020008
 8005874:	40004800 	.word	0x40004800
 8005878:	48000800 	.word	0x48000800
 800587c:	20000aa0 	.word	0x20000aa0
 8005880:	4002001c 	.word	0x4002001c

08005884 <uchar4_to_float>:
typedef union{
    float float_value;
    unsigned char char4_value[4];
}Float_char4;

float uchar4_to_float(unsigned char *value){
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	733b      	strb	r3, [r7, #12]
    tmp.char4_value[1]=value[1];
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	737b      	strb	r3, [r7, #13]
    tmp.char4_value[2]=value[2];
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	789b      	ldrb	r3, [r3, #2]
 800589c:	73bb      	strb	r3, [r7, #14]
    tmp.char4_value[3]=value[3];
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	78db      	ldrb	r3, [r3, #3]
 80058a2:	73fb      	strb	r3, [r7, #15]
    return tmp.float_value;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	ee07 3a90 	vmov	s15, r3
}
 80058aa:	eeb0 0a67 	vmov.f32	s0, s15
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	ed87 0a00 	vstr	s0, [r7]
    Float_char4 tmp;
    tmp.float_value=float_value;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	60fb      	str	r3, [r7, #12]
    value[0]=tmp.char4_value[0];
 80058c8:	7b3a      	ldrb	r2, [r7, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	701a      	strb	r2, [r3, #0]
    value[1]=tmp.char4_value[1];
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3301      	adds	r3, #1
 80058d2:	7b7a      	ldrb	r2, [r7, #13]
 80058d4:	701a      	strb	r2, [r3, #0]
    value[2]=tmp.char4_value[2];
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	3302      	adds	r3, #2
 80058da:	7bba      	ldrb	r2, [r7, #14]
 80058dc:	701a      	strb	r2, [r3, #0]
    value[3]=tmp.char4_value[3];
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3303      	adds	r3, #3
 80058e2:	7bfa      	ldrb	r2, [r7, #15]
 80058e4:	701a      	strb	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <xprintf_init>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/


void xprintf_init(UART_HandleTypeDef *handler){
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	huart_xprintf = handler;
 80058fc:	4a05      	ldr	r2, [pc, #20]	; (8005914 <xprintf_init+0x20>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6013      	str	r3, [r2, #0]
	xdev_out(uart_putc);
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <xprintf_init+0x24>)
 8005904:	4a05      	ldr	r2, [pc, #20]	; (800591c <xprintf_init+0x28>)
 8005906:	601a      	str	r2, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000784 	.word	0x20000784
 8005918:	20000b00 	.word	0x20000b00
 800591c:	08005921 	.word	0x08005921

08005920 <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	71fb      	strb	r3, [r7, #7]
	 char buf[1];
	 buf[0] = c;
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	733b      	strb	r3, [r7, #12]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <uart_putc+0x28>)
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	f107 010c 	add.w	r1, r7, #12
 8005936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800593a:	2201      	movs	r2, #1
 800593c:	f005 ff04 	bl	800b748 <HAL_UART_Transmit>
	}
 8005940:	bf00      	nop
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000784 	.word	0x20000784

0800594c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800594c:	480d      	ldr	r0, [pc, #52]	; (8005984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800594e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005950:	480d      	ldr	r0, [pc, #52]	; (8005988 <LoopForever+0x6>)
  ldr r1, =_edata
 8005952:	490e      	ldr	r1, [pc, #56]	; (800598c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005954:	4a0e      	ldr	r2, [pc, #56]	; (8005990 <LoopForever+0xe>)
  movs r3, #0
 8005956:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005958:	e002      	b.n	8005960 <LoopCopyDataInit>

0800595a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800595a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800595c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800595e:	3304      	adds	r3, #4

08005960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005964:	d3f9      	bcc.n	800595a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005966:	4a0b      	ldr	r2, [pc, #44]	; (8005994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005968:	4c0b      	ldr	r4, [pc, #44]	; (8005998 <LoopForever+0x16>)
  movs r3, #0
 800596a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800596c:	e001      	b.n	8005972 <LoopFillZerobss>

0800596e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800596e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005970:	3204      	adds	r2, #4

08005972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005974:	d3fb      	bcc.n	800596e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005976:	f7ff fc37 	bl	80051e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800597a:	f007 fb6b 	bl	800d054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800597e:	f7fd facf 	bl	8002f20 <main>

08005982 <LoopForever>:

LoopForever:
    b LoopForever
 8005982:	e7fe      	b.n	8005982 <LoopForever>
  ldr   r0, =_estack
 8005984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800598c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005990:	0801027c 	.word	0x0801027c
  ldr r2, =_sbss
 8005994:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005998:	20000b18 	.word	0x20000b18

0800599c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800599c:	e7fe      	b.n	800599c <ADC1_2_IRQHandler>

0800599e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059a8:	2003      	movs	r0, #3
 80059aa:	f001 fc89 	bl	80072c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059ae:	2000      	movs	r0, #0
 80059b0:	f000 f80e 	bl	80059d0 <HAL_InitTick>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	71fb      	strb	r3, [r7, #7]
 80059be:	e001      	b.n	80059c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059c0:	f7ff fa8e 	bl	8004ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059c4:	79fb      	ldrb	r3, [r7, #7]

}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80059dc:	4b16      	ldr	r3, [pc, #88]	; (8005a38 <HAL_InitTick+0x68>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d022      	beq.n	8005a2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80059e4:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <HAL_InitTick+0x6c>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <HAL_InitTick+0x68>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fc94 	bl	8007326 <HAL_SYSTICK_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10f      	bne.n	8005a24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b0f      	cmp	r3, #15
 8005a08:	d809      	bhi.n	8005a1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a12:	f001 fc60 	bl	80072d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a16:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <HAL_InitTick+0x70>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	e007      	b.n	8005a2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
 8005a22:	e004      	b.n	8005a2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e001      	b.n	8005a2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000010 	.word	0x20000010
 8005a3c:	20000008 	.word	0x20000008
 8005a40:	2000000c 	.word	0x2000000c

08005a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_IncTick+0x1c>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <HAL_IncTick+0x20>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4413      	add	r3, r2
 8005a52:	4a03      	ldr	r2, [pc, #12]	; (8005a60 <HAL_IncTick+0x1c>)
 8005a54:	6013      	str	r3, [r2, #0]
}
 8005a56:	bf00      	nop
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	20000b04 	.word	0x20000b04
 8005a64:	20000010 	.word	0x20000010

08005a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a70:	f7fd fa4a 	bl	8002f08 <HAL_GetTick>
 8005a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d004      	beq.n	8005a8c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_Delay+0x40>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a8c:	bf00      	nop
 8005a8e:	f7fd fa3b 	bl	8002f08 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d8f7      	bhi.n	8005a8e <HAL_Delay+0x26>
  {
  }
}
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000010 	.word	0x20000010

08005aac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	609a      	str	r2, [r3, #8]
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	609a      	str	r2, [r3, #8]
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3360      	adds	r3, #96	; 0x60
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <LL_ADC_SetOffset+0x44>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	03fff000 	.word	0x03fff000

08005b5c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3360      	adds	r3, #96	; 0x60
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3360      	adds	r3, #96	; 0x60
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3360      	adds	r3, #96	; 0x60
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3360      	adds	r3, #96	; 0x60
 8005c04:	461a      	mov	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005c1e:	bf00      	nop
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	615a      	str	r2, [r3, #20]
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b087      	sub	sp, #28
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3330      	adds	r3, #48	; 0x30
 8005c86:	461a      	mov	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	4413      	add	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	211f      	movs	r1, #31
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	401a      	ands	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0e9b      	lsrs	r3, r3, #26
 8005cae:	f003 011f 	and.w	r1, r3, #31
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b087      	sub	sp, #28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	461a      	mov	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	0e5b      	lsrs	r3, r3, #25
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	4413      	add	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	0d1b      	lsrs	r3, r3, #20
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2107      	movs	r1, #7
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	0d1b      	lsrs	r3, r3, #20
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	6879      	ldr	r1, [r7, #4]
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	431a      	orrs	r2, r3
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d10a      	bne.n	8005d4e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8005d4c:	e00a      	b.n	8005d64 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	401a      	ands	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	407f0000 	.word	0x407f0000

08005d74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 031f 	and.w	r3, r3, #31
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6093      	str	r3, [r2, #8]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc8:	d101      	bne.n	8005dce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005dec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005df0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e18:	d101      	bne.n	8005e1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e40:	f043 0201 	orr.w	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <LL_ADC_IsEnabled+0x18>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <LL_ADC_IsEnabled+0x1a>
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e8e:	f043 0204 	orr.w	r2, r3, #4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d101      	bne.n	8005eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d101      	bne.n	8005ee0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e1af      	b.n	800626a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d109      	bne.n	8005f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7fb fb3f 	bl	800159c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff ff3f 	bl	8005db4 <LL_ADC_IsDeepPowerDownEnabled>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ff25 	bl	8005d90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff ff5a 	bl	8005e04 <LL_ADC_IsInternalRegulatorEnabled>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d115      	bne.n	8005f82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ff3e 	bl	8005ddc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f60:	4b9f      	ldr	r3, [pc, #636]	; (80061e0 <HAL_ADC_Init+0x2f0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	099b      	lsrs	r3, r3, #6
 8005f66:	4a9f      	ldr	r2, [pc, #636]	; (80061e4 <HAL_ADC_Init+0x2f4>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	099b      	lsrs	r3, r3, #6
 8005f6e:	3301      	adds	r3, #1
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f74:	e002      	b.n	8005f7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f9      	bne.n	8005f76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff ff3c 	bl	8005e04 <LL_ADC_IsInternalRegulatorEnabled>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	f043 0210 	orr.w	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa2:	f043 0201 	orr.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff ff75 	bl	8005ea2 <LL_ADC_REG_IsConversionOngoing>
 8005fb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 8148 	bne.w	8006258 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 8144 	bne.w	8006258 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005fd8:	f043 0202 	orr.w	r2, r3, #2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7ff ff35 	bl	8005e54 <LL_ADC_IsEnabled>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d141      	bne.n	8006074 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ff8:	d004      	beq.n	8006004 <HAL_ADC_Init+0x114>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a7a      	ldr	r2, [pc, #488]	; (80061e8 <HAL_ADC_Init+0x2f8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10f      	bne.n	8006024 <HAL_ADC_Init+0x134>
 8006004:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006008:	f7ff ff24 	bl	8005e54 <LL_ADC_IsEnabled>
 800600c:	4604      	mov	r4, r0
 800600e:	4876      	ldr	r0, [pc, #472]	; (80061e8 <HAL_ADC_Init+0x2f8>)
 8006010:	f7ff ff20 	bl	8005e54 <LL_ADC_IsEnabled>
 8006014:	4603      	mov	r3, r0
 8006016:	4323      	orrs	r3, r4
 8006018:	2b00      	cmp	r3, #0
 800601a:	bf0c      	ite	eq
 800601c:	2301      	moveq	r3, #1
 800601e:	2300      	movne	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	e012      	b.n	800604a <HAL_ADC_Init+0x15a>
 8006024:	4871      	ldr	r0, [pc, #452]	; (80061ec <HAL_ADC_Init+0x2fc>)
 8006026:	f7ff ff15 	bl	8005e54 <LL_ADC_IsEnabled>
 800602a:	4604      	mov	r4, r0
 800602c:	4870      	ldr	r0, [pc, #448]	; (80061f0 <HAL_ADC_Init+0x300>)
 800602e:	f7ff ff11 	bl	8005e54 <LL_ADC_IsEnabled>
 8006032:	4603      	mov	r3, r0
 8006034:	431c      	orrs	r4, r3
 8006036:	486f      	ldr	r0, [pc, #444]	; (80061f4 <HAL_ADC_Init+0x304>)
 8006038:	f7ff ff0c 	bl	8005e54 <LL_ADC_IsEnabled>
 800603c:	4603      	mov	r3, r0
 800603e:	4323      	orrs	r3, r4
 8006040:	2b00      	cmp	r3, #0
 8006042:	bf0c      	ite	eq
 8006044:	2301      	moveq	r3, #1
 8006046:	2300      	movne	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d012      	beq.n	8006074 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006056:	d004      	beq.n	8006062 <HAL_ADC_Init+0x172>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a62      	ldr	r2, [pc, #392]	; (80061e8 <HAL_ADC_Init+0x2f8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d101      	bne.n	8006066 <HAL_ADC_Init+0x176>
 8006062:	4a65      	ldr	r2, [pc, #404]	; (80061f8 <HAL_ADC_Init+0x308>)
 8006064:	e000      	b.n	8006068 <HAL_ADC_Init+0x178>
 8006066:	4a65      	ldr	r2, [pc, #404]	; (80061fc <HAL_ADC_Init+0x30c>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7ff fd1c 	bl	8005aac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7f5b      	ldrb	r3, [r3, #29]
 8006078:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800607e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006084:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800608a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006092:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006094:	4313      	orrs	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d106      	bne.n	80060b0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	3b01      	subs	r3, #1
 80060a8:	045b      	lsls	r3, r3, #17
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	4b4b      	ldr	r3, [pc, #300]	; (8006200 <HAL_ADC_Init+0x310>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	69b9      	ldr	r1, [r7, #24]
 80060dc:	430b      	orrs	r3, r1
 80060de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fed1 	bl	8005ea2 <LL_ADC_REG_IsConversionOngoing>
 8006100:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fede 	bl	8005ec8 <LL_ADC_INJ_IsConversionOngoing>
 800610c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d17f      	bne.n	8006214 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d17c      	bne.n	8006214 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800611e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006126:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006136:	f023 0302 	bic.w	r3, r3, #2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	69b9      	ldr	r1, [r7, #24]
 8006140:	430b      	orrs	r3, r1
 8006142:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d017      	beq.n	800617c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800615a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006164:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6911      	ldr	r1, [r2, #16]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	430b      	orrs	r3, r1
 8006176:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800617a:	e013      	b.n	80061a4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800618a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800619c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d12a      	bne.n	8006204 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061b8:	f023 0304 	bic.w	r3, r3, #4
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061c4:	4311      	orrs	r1, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061ca:	4311      	orrs	r1, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061d0:	430a      	orrs	r2, r1
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	611a      	str	r2, [r3, #16]
 80061de:	e019      	b.n	8006214 <HAL_ADC_Init+0x324>
 80061e0:	20000008 	.word	0x20000008
 80061e4:	053e2d63 	.word	0x053e2d63
 80061e8:	50000100 	.word	0x50000100
 80061ec:	50000400 	.word	0x50000400
 80061f0:	50000500 	.word	0x50000500
 80061f4:	50000600 	.word	0x50000600
 80061f8:	50000300 	.word	0x50000300
 80061fc:	50000700 	.word	0x50000700
 8006200:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10c      	bne.n	8006236 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f023 010f 	bic.w	r1, r3, #15
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	1e5a      	subs	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	631a      	str	r2, [r3, #48]	; 0x30
 8006234:	e007      	b.n	8006246 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 020f 	bic.w	r2, r2, #15
 8006244:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624a:	f023 0303 	bic.w	r3, r3, #3
 800624e:	f043 0201 	orr.w	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	65da      	str	r2, [r3, #92]	; 0x5c
 8006256:	e007      	b.n	8006268 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	f043 0210 	orr.w	r2, r3, #16
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006268:	7ffb      	ldrb	r3, [r7, #31]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3724      	adds	r7, #36	; 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd90      	pop	{r4, r7, pc}
 8006272:	bf00      	nop

08006274 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006288:	d004      	beq.n	8006294 <HAL_ADC_Start_DMA+0x20>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a5a      	ldr	r2, [pc, #360]	; (80063f8 <HAL_ADC_Start_DMA+0x184>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <HAL_ADC_Start_DMA+0x24>
 8006294:	4b59      	ldr	r3, [pc, #356]	; (80063fc <HAL_ADC_Start_DMA+0x188>)
 8006296:	e000      	b.n	800629a <HAL_ADC_Start_DMA+0x26>
 8006298:	4b59      	ldr	r3, [pc, #356]	; (8006400 <HAL_ADC_Start_DMA+0x18c>)
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fd6a 	bl	8005d74 <LL_ADC_GetMultimode>
 80062a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fdfb 	bl	8005ea2 <LL_ADC_REG_IsConversionOngoing>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f040 809b 	bne.w	80063ea <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_ADC_Start_DMA+0x4e>
 80062be:	2302      	movs	r3, #2
 80062c0:	e096      	b.n	80063f0 <HAL_ADC_Start_DMA+0x17c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a4d      	ldr	r2, [pc, #308]	; (8006404 <HAL_ADC_Start_DMA+0x190>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d008      	beq.n	80062e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b05      	cmp	r3, #5
 80062de:	d002      	beq.n	80062e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b09      	cmp	r3, #9
 80062e4:	d17a      	bne.n	80063dc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fcf6 	bl	8006cd8 <ADC_Enable>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d16d      	bne.n	80063d2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a3a      	ldr	r2, [pc, #232]	; (80063f8 <HAL_ADC_Start_DMA+0x184>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_ADC_Start_DMA+0xb4>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3b      	ldr	r2, [pc, #236]	; (8006408 <HAL_ADC_Start_DMA+0x194>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d002      	beq.n	8006324 <HAL_ADC_Start_DMA+0xb0>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	e003      	b.n	800632c <HAL_ADC_Start_DMA+0xb8>
 8006324:	4b39      	ldr	r3, [pc, #228]	; (800640c <HAL_ADC_Start_DMA+0x198>)
 8006326:	e001      	b.n	800632c <HAL_ADC_Start_DMA+0xb8>
 8006328:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	4293      	cmp	r3, r2
 8006332:	d002      	beq.n	800633a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d105      	bne.n	8006346 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	f023 0206 	bic.w	r2, r3, #6
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	661a      	str	r2, [r3, #96]	; 0x60
 800635e:	e002      	b.n	8006366 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	4a29      	ldr	r2, [pc, #164]	; (8006410 <HAL_ADC_Start_DMA+0x19c>)
 800636c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006372:	4a28      	ldr	r2, [pc, #160]	; (8006414 <HAL_ADC_Start_DMA+0x1a0>)
 8006374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	4a27      	ldr	r2, [pc, #156]	; (8006418 <HAL_ADC_Start_DMA+0x1a4>)
 800637c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	221c      	movs	r2, #28
 8006384:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0210 	orr.w	r2, r2, #16
 800639c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0201 	orr.w	r2, r2, #1
 80063ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3340      	adds	r3, #64	; 0x40
 80063b8:	4619      	mov	r1, r3
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f001 f867 	bl	8007490 <HAL_DMA_Start_IT>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fd55 	bl	8005e7a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80063d0:	e00d      	b.n	80063ee <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80063da:	e008      	b.n	80063ee <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80063e8:	e001      	b.n	80063ee <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
 80063ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80063ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	50000100 	.word	0x50000100
 80063fc:	50000300 	.word	0x50000300
 8006400:	50000700 	.word	0x50000700
 8006404:	50000600 	.word	0x50000600
 8006408:	50000500 	.word	0x50000500
 800640c:	50000400 	.word	0x50000400
 8006410:	08006d9d 	.word	0x08006d9d
 8006414:	08006e75 	.word	0x08006e75
 8006418:	08006e91 	.word	0x08006e91

0800641c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b0b6      	sub	sp, #216	; 0xd8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006472:	2b01      	cmp	r3, #1
 8006474:	d102      	bne.n	800647c <HAL_ADC_ConfigChannel+0x24>
 8006476:	2302      	movs	r3, #2
 8006478:	f000 bc13 	b.w	8006ca2 <HAL_ADC_ConfigChannel+0x84a>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fd0a 	bl	8005ea2 <LL_ADC_REG_IsConversionOngoing>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 83f3 	bne.w	8006c7c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7ff fbe7 	bl	8005c76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fcf8 	bl	8005ea2 <LL_ADC_REG_IsConversionOngoing>
 80064b2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fd04 	bl	8005ec8 <LL_ADC_INJ_IsConversionOngoing>
 80064c0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f040 81d9 	bne.w	8006880 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 81d4 	bne.w	8006880 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e0:	d10f      	bne.n	8006502 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2200      	movs	r2, #0
 80064ec:	4619      	mov	r1, r3
 80064ee:	f7ff fbee 	bl	8005cce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fb95 	bl	8005c2a <LL_ADC_SetSamplingTimeCommonConfig>
 8006500:	e00e      	b.n	8006520 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	461a      	mov	r2, r3
 8006510:	f7ff fbdd 	bl	8005cce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fb85 	bl	8005c2a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	08db      	lsrs	r3, r3, #3
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b04      	cmp	r3, #4
 8006540:	d022      	beq.n	8006588 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6919      	ldr	r1, [r3, #16]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006552:	f7ff fadf 	bl	8005b14 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	6919      	ldr	r1, [r3, #16]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	461a      	mov	r2, r3
 8006564:	f7ff fb2b 	bl	8005bbe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6919      	ldr	r1, [r3, #16]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	7f1b      	ldrb	r3, [r3, #28]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d102      	bne.n	800657e <HAL_ADC_ConfigChannel+0x126>
 8006578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657c:	e000      	b.n	8006580 <HAL_ADC_ConfigChannel+0x128>
 800657e:	2300      	movs	r3, #0
 8006580:	461a      	mov	r2, r3
 8006582:	f7ff fb37 	bl	8005bf4 <LL_ADC_SetOffsetSaturation>
 8006586:	e17b      	b.n	8006880 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2100      	movs	r1, #0
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fae4 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 8006594:	4603      	mov	r3, r0
 8006596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x15c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fad9 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 80065aa:	4603      	mov	r3, r0
 80065ac:	0e9b      	lsrs	r3, r3, #26
 80065ae:	f003 021f 	and.w	r2, r3, #31
 80065b2:	e01e      	b.n	80065f2 <HAL_ADC_ConfigChannel+0x19a>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff face 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065ca:	fa93 f3a3 	rbit	r3, r3
 80065ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80065d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80065da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80065e2:	2320      	movs	r3, #32
 80065e4:	e004      	b.n	80065f0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80065e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065ea:	fab3 f383 	clz	r3, r3
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d105      	bne.n	800660a <HAL_ADC_ConfigChannel+0x1b2>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	0e9b      	lsrs	r3, r3, #26
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	e018      	b.n	800663c <HAL_ADC_ConfigChannel+0x1e4>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006612:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006616:	fa93 f3a3 	rbit	r3, r3
 800661a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800661e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800662e:	2320      	movs	r3, #32
 8006630:	e004      	b.n	800663c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006636:	fab3 f383 	clz	r3, r3
 800663a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800663c:	429a      	cmp	r2, r3
 800663e:	d106      	bne.n	800664e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2200      	movs	r2, #0
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fa9d 	bl	8005b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fa81 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 800665a:	4603      	mov	r3, r0
 800665c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <HAL_ADC_ConfigChannel+0x222>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2101      	movs	r1, #1
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fa76 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 8006670:	4603      	mov	r3, r0
 8006672:	0e9b      	lsrs	r3, r3, #26
 8006674:	f003 021f 	and.w	r2, r3, #31
 8006678:	e01e      	b.n	80066b8 <HAL_ADC_ConfigChannel+0x260>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2101      	movs	r1, #1
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fa6b 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 8006686:	4603      	mov	r3, r0
 8006688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006690:	fa93 f3a3 	rbit	r3, r3
 8006694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800669c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80066a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80066a8:	2320      	movs	r3, #32
 80066aa:	e004      	b.n	80066b6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80066ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b0:	fab3 f383 	clz	r3, r3
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d105      	bne.n	80066d0 <HAL_ADC_ConfigChannel+0x278>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	0e9b      	lsrs	r3, r3, #26
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	e018      	b.n	8006702 <HAL_ADC_ConfigChannel+0x2aa>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066dc:	fa93 f3a3 	rbit	r3, r3
 80066e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80066e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80066e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80066ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80066f4:	2320      	movs	r3, #32
 80066f6:	e004      	b.n	8006702 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80066f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066fc:	fab3 f383 	clz	r3, r3
 8006700:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006702:	429a      	cmp	r2, r3
 8006704:	d106      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	2101      	movs	r1, #1
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fa3a 	bl	8005b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2102      	movs	r1, #2
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fa1e 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 8006720:	4603      	mov	r3, r0
 8006722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <HAL_ADC_ConfigChannel+0x2e8>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2102      	movs	r1, #2
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fa13 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 8006736:	4603      	mov	r3, r0
 8006738:	0e9b      	lsrs	r3, r3, #26
 800673a:	f003 021f 	and.w	r2, r3, #31
 800673e:	e01e      	b.n	800677e <HAL_ADC_ConfigChannel+0x326>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2102      	movs	r1, #2
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fa08 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 800674c:	4603      	mov	r3, r0
 800674e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006756:	fa93 f3a3 	rbit	r3, r3
 800675a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800675e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800676e:	2320      	movs	r3, #32
 8006770:	e004      	b.n	800677c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006776:	fab3 f383 	clz	r3, r3
 800677a:	b2db      	uxtb	r3, r3
 800677c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <HAL_ADC_ConfigChannel+0x33e>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	0e9b      	lsrs	r3, r3, #26
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	e016      	b.n	80067c4 <HAL_ADC_ConfigChannel+0x36c>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067a2:	fa93 f3a3 	rbit	r3, r3
 80067a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80067a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80067ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80067b6:	2320      	movs	r3, #32
 80067b8:	e004      	b.n	80067c4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80067ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067be:	fab3 f383 	clz	r3, r3
 80067c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d106      	bne.n	80067d6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2102      	movs	r1, #2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff f9d9 	bl	8005b88 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2103      	movs	r1, #3
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff f9bd 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <HAL_ADC_ConfigChannel+0x3aa>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2103      	movs	r1, #3
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff f9b2 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 80067f8:	4603      	mov	r3, r0
 80067fa:	0e9b      	lsrs	r3, r3, #26
 80067fc:	f003 021f 	and.w	r2, r3, #31
 8006800:	e017      	b.n	8006832 <HAL_ADC_ConfigChannel+0x3da>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2103      	movs	r1, #3
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff f9a7 	bl	8005b5c <LL_ADC_GetOffsetChannel>
 800680e:	4603      	mov	r3, r0
 8006810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006814:	fa93 f3a3 	rbit	r3, r3
 8006818:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800681a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800681c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800681e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006824:	2320      	movs	r3, #32
 8006826:	e003      	b.n	8006830 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800682a:	fab3 f383 	clz	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800683a:	2b00      	cmp	r3, #0
 800683c:	d105      	bne.n	800684a <HAL_ADC_ConfigChannel+0x3f2>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	0e9b      	lsrs	r3, r3, #26
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	e011      	b.n	800686e <HAL_ADC_ConfigChannel+0x416>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006852:	fa93 f3a3 	rbit	r3, r3
 8006856:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800685c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006862:	2320      	movs	r3, #32
 8006864:	e003      	b.n	800686e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006868:	fab3 f383 	clz	r3, r3
 800686c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800686e:	429a      	cmp	r2, r3
 8006870:	d106      	bne.n	8006880 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	2103      	movs	r1, #3
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff f984 	bl	8005b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fae5 	bl	8005e54 <LL_ADC_IsEnabled>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 813d 	bne.w	8006b0c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6819      	ldr	r1, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	f7ff fa40 	bl	8005d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	4aa2      	ldr	r2, [pc, #648]	; (8006b34 <HAL_ADC_ConfigChannel+0x6dc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	f040 812e 	bne.w	8006b0c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10b      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x480>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	0e9b      	lsrs	r3, r3, #26
 80068c6:	3301      	adds	r3, #1
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	bf94      	ite	ls
 80068d0:	2301      	movls	r3, #1
 80068d2:	2300      	movhi	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e019      	b.n	800690c <HAL_ADC_ConfigChannel+0x4b4>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e0:	fa93 f3a3 	rbit	r3, r3
 80068e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80068e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80068ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80068f0:	2320      	movs	r3, #32
 80068f2:	e003      	b.n	80068fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80068f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f6:	fab3 f383 	clz	r3, r3
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	3301      	adds	r3, #1
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	2b09      	cmp	r3, #9
 8006904:	bf94      	ite	ls
 8006906:	2301      	movls	r3, #1
 8006908:	2300      	movhi	r3, #0
 800690a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800690c:	2b00      	cmp	r3, #0
 800690e:	d079      	beq.n	8006a04 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006918:	2b00      	cmp	r3, #0
 800691a:	d107      	bne.n	800692c <HAL_ADC_ConfigChannel+0x4d4>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	0e9b      	lsrs	r3, r3, #26
 8006922:	3301      	adds	r3, #1
 8006924:	069b      	lsls	r3, r3, #26
 8006926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800692a:	e015      	b.n	8006958 <HAL_ADC_ConfigChannel+0x500>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006934:	fa93 f3a3 	rbit	r3, r3
 8006938:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800693a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800693c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800693e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006944:	2320      	movs	r3, #32
 8006946:	e003      	b.n	8006950 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694a:	fab3 f383 	clz	r3, r3
 800694e:	b2db      	uxtb	r3, r3
 8006950:	3301      	adds	r3, #1
 8006952:	069b      	lsls	r3, r3, #26
 8006954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <HAL_ADC_ConfigChannel+0x520>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	0e9b      	lsrs	r3, r3, #26
 800696a:	3301      	adds	r3, #1
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f303 	lsl.w	r3, r1, r3
 8006976:	e017      	b.n	80069a8 <HAL_ADC_ConfigChannel+0x550>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006980:	fa93 f3a3 	rbit	r3, r3
 8006984:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006988:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800698a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006990:	2320      	movs	r3, #32
 8006992:	e003      	b.n	800699c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006996:	fab3 f383 	clz	r3, r3
 800699a:	b2db      	uxtb	r3, r3
 800699c:	3301      	adds	r3, #1
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2101      	movs	r1, #1
 80069a4:	fa01 f303 	lsl.w	r3, r1, r3
 80069a8:	ea42 0103 	orr.w	r1, r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <HAL_ADC_ConfigChannel+0x576>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	0e9b      	lsrs	r3, r3, #26
 80069be:	3301      	adds	r3, #1
 80069c0:	f003 021f 	and.w	r2, r3, #31
 80069c4:	4613      	mov	r3, r2
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	4413      	add	r3, r2
 80069ca:	051b      	lsls	r3, r3, #20
 80069cc:	e018      	b.n	8006a00 <HAL_ADC_ConfigChannel+0x5a8>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	fa93 f3a3 	rbit	r3, r3
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80069e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80069e6:	2320      	movs	r3, #32
 80069e8:	e003      	b.n	80069f2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80069ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ec:	fab3 f383 	clz	r3, r3
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	3301      	adds	r3, #1
 80069f4:	f003 021f 	and.w	r2, r3, #31
 80069f8:	4613      	mov	r3, r2
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	4413      	add	r3, r2
 80069fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a00:	430b      	orrs	r3, r1
 8006a02:	e07e      	b.n	8006b02 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d107      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x5c8>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	0e9b      	lsrs	r3, r3, #26
 8006a16:	3301      	adds	r3, #1
 8006a18:	069b      	lsls	r3, r3, #26
 8006a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a1e:	e015      	b.n	8006a4c <HAL_ADC_ConfigChannel+0x5f4>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	fa93 f3a3 	rbit	r3, r3
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006a38:	2320      	movs	r3, #32
 8006a3a:	e003      	b.n	8006a44 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	fab3 f383 	clz	r3, r3
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	3301      	adds	r3, #1
 8006a46:	069b      	lsls	r3, r3, #26
 8006a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d109      	bne.n	8006a6c <HAL_ADC_ConfigChannel+0x614>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	0e9b      	lsrs	r3, r3, #26
 8006a5e:	3301      	adds	r3, #1
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	2101      	movs	r1, #1
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	e017      	b.n	8006a9c <HAL_ADC_ConfigChannel+0x644>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	fa93 f3a3 	rbit	r3, r3
 8006a78:	61fb      	str	r3, [r7, #28]
  return result;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006a84:	2320      	movs	r3, #32
 8006a86:	e003      	b.n	8006a90 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	fab3 f383 	clz	r3, r3
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	3301      	adds	r3, #1
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	2101      	movs	r1, #1
 8006a98:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9c:	ea42 0103 	orr.w	r1, r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <HAL_ADC_ConfigChannel+0x670>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	0e9b      	lsrs	r3, r3, #26
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	f003 021f 	and.w	r2, r3, #31
 8006ab8:	4613      	mov	r3, r2
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	4413      	add	r3, r2
 8006abe:	3b1e      	subs	r3, #30
 8006ac0:	051b      	lsls	r3, r3, #20
 8006ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ac6:	e01b      	b.n	8006b00 <HAL_ADC_ConfigChannel+0x6a8>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	fa93 f3a3 	rbit	r3, r3
 8006ad4:	613b      	str	r3, [r7, #16]
  return result;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	e003      	b.n	8006aec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	fab3 f383 	clz	r3, r3
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	3301      	adds	r3, #1
 8006aee:	f003 021f 	and.w	r2, r3, #31
 8006af2:	4613      	mov	r3, r2
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	4413      	add	r3, r2
 8006af8:	3b1e      	subs	r3, #30
 8006afa:	051b      	lsls	r3, r3, #20
 8006afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b00:	430b      	orrs	r3, r1
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	6892      	ldr	r2, [r2, #8]
 8006b06:	4619      	mov	r1, r3
 8006b08:	f7ff f8e1 	bl	8005cce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_ADC_ConfigChannel+0x6e0>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 80be 	beq.w	8006c96 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b22:	d004      	beq.n	8006b2e <HAL_ADC_ConfigChannel+0x6d6>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a04      	ldr	r2, [pc, #16]	; (8006b3c <HAL_ADC_ConfigChannel+0x6e4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d10a      	bne.n	8006b44 <HAL_ADC_ConfigChannel+0x6ec>
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <HAL_ADC_ConfigChannel+0x6e8>)
 8006b30:	e009      	b.n	8006b46 <HAL_ADC_ConfigChannel+0x6ee>
 8006b32:	bf00      	nop
 8006b34:	407f0000 	.word	0x407f0000
 8006b38:	80080000 	.word	0x80080000
 8006b3c:	50000100 	.word	0x50000100
 8006b40:	50000300 	.word	0x50000300
 8006b44:	4b59      	ldr	r3, [pc, #356]	; (8006cac <HAL_ADC_ConfigChannel+0x854>)
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe ffd6 	bl	8005af8 <LL_ADC_GetCommonPathInternalCh>
 8006b4c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a56      	ldr	r2, [pc, #344]	; (8006cb0 <HAL_ADC_ConfigChannel+0x858>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d004      	beq.n	8006b64 <HAL_ADC_ConfigChannel+0x70c>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a55      	ldr	r2, [pc, #340]	; (8006cb4 <HAL_ADC_ConfigChannel+0x85c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d13a      	bne.n	8006bda <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d134      	bne.n	8006bda <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b78:	d005      	beq.n	8006b86 <HAL_ADC_ConfigChannel+0x72e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a4e      	ldr	r2, [pc, #312]	; (8006cb8 <HAL_ADC_ConfigChannel+0x860>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	f040 8085 	bne.w	8006c90 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b8e:	d004      	beq.n	8006b9a <HAL_ADC_ConfigChannel+0x742>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a49      	ldr	r2, [pc, #292]	; (8006cbc <HAL_ADC_ConfigChannel+0x864>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d101      	bne.n	8006b9e <HAL_ADC_ConfigChannel+0x746>
 8006b9a:	4a49      	ldr	r2, [pc, #292]	; (8006cc0 <HAL_ADC_ConfigChannel+0x868>)
 8006b9c:	e000      	b.n	8006ba0 <HAL_ADC_ConfigChannel+0x748>
 8006b9e:	4a43      	ldr	r2, [pc, #268]	; (8006cac <HAL_ADC_ConfigChannel+0x854>)
 8006ba0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f7fe ff91 	bl	8005ad2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006bb0:	4b44      	ldr	r3, [pc, #272]	; (8006cc4 <HAL_ADC_ConfigChannel+0x86c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	099b      	lsrs	r3, r3, #6
 8006bb6:	4a44      	ldr	r2, [pc, #272]	; (8006cc8 <HAL_ADC_ConfigChannel+0x870>)
 8006bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbc:	099b      	lsrs	r3, r3, #6
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bca:	e002      	b.n	8006bd2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1f9      	bne.n	8006bcc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bd8:	e05a      	b.n	8006c90 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a3b      	ldr	r2, [pc, #236]	; (8006ccc <HAL_ADC_ConfigChannel+0x874>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d125      	bne.n	8006c30 <HAL_ADC_ConfigChannel+0x7d8>
 8006be4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11f      	bne.n	8006c30 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a31      	ldr	r2, [pc, #196]	; (8006cbc <HAL_ADC_ConfigChannel+0x864>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d104      	bne.n	8006c04 <HAL_ADC_ConfigChannel+0x7ac>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a34      	ldr	r2, [pc, #208]	; (8006cd0 <HAL_ADC_ConfigChannel+0x878>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d047      	beq.n	8006c94 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c0c:	d004      	beq.n	8006c18 <HAL_ADC_ConfigChannel+0x7c0>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2a      	ldr	r2, [pc, #168]	; (8006cbc <HAL_ADC_ConfigChannel+0x864>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d101      	bne.n	8006c1c <HAL_ADC_ConfigChannel+0x7c4>
 8006c18:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <HAL_ADC_ConfigChannel+0x868>)
 8006c1a:	e000      	b.n	8006c1e <HAL_ADC_ConfigChannel+0x7c6>
 8006c1c:	4a23      	ldr	r2, [pc, #140]	; (8006cac <HAL_ADC_ConfigChannel+0x854>)
 8006c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7fe ff52 	bl	8005ad2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c2e:	e031      	b.n	8006c94 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a27      	ldr	r2, [pc, #156]	; (8006cd4 <HAL_ADC_ConfigChannel+0x87c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d12d      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d127      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <HAL_ADC_ConfigChannel+0x864>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d022      	beq.n	8006c96 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c58:	d004      	beq.n	8006c64 <HAL_ADC_ConfigChannel+0x80c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a17      	ldr	r2, [pc, #92]	; (8006cbc <HAL_ADC_ConfigChannel+0x864>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <HAL_ADC_ConfigChannel+0x810>
 8006c64:	4a16      	ldr	r2, [pc, #88]	; (8006cc0 <HAL_ADC_ConfigChannel+0x868>)
 8006c66:	e000      	b.n	8006c6a <HAL_ADC_ConfigChannel+0x812>
 8006c68:	4a10      	ldr	r2, [pc, #64]	; (8006cac <HAL_ADC_ConfigChannel+0x854>)
 8006c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fe ff2c 	bl	8005ad2 <LL_ADC_SetCommonPathInternalCh>
 8006c7a:	e00c      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	f043 0220 	orr.w	r2, r3, #32
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006c8e:	e002      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c90:	bf00      	nop
 8006c92:	e000      	b.n	8006c96 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	37d8      	adds	r7, #216	; 0xd8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	50000700 	.word	0x50000700
 8006cb0:	c3210000 	.word	0xc3210000
 8006cb4:	90c00010 	.word	0x90c00010
 8006cb8:	50000600 	.word	0x50000600
 8006cbc:	50000100 	.word	0x50000100
 8006cc0:	50000300 	.word	0x50000300
 8006cc4:	20000008 	.word	0x20000008
 8006cc8:	053e2d63 	.word	0x053e2d63
 8006ccc:	c7520000 	.word	0xc7520000
 8006cd0:	50000500 	.word	0x50000500
 8006cd4:	cb840000 	.word	0xcb840000

08006cd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff f8b5 	bl	8005e54 <LL_ADC_IsEnabled>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d14d      	bne.n	8006d8c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	4b28      	ldr	r3, [pc, #160]	; (8006d98 <ADC_Enable+0xc0>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00d      	beq.n	8006d1a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	f043 0210 	orr.w	r2, r3, #16
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d0e:	f043 0201 	orr.w	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e039      	b.n	8006d8e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff f884 	bl	8005e2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006d24:	f7fc f8f0 	bl	8002f08 <HAL_GetTick>
 8006d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d2a:	e028      	b.n	8006d7e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff f88f 	bl	8005e54 <LL_ADC_IsEnabled>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff f873 	bl	8005e2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d46:	f7fc f8df 	bl	8002f08 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d914      	bls.n	8006d7e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d00d      	beq.n	8006d7e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	f043 0210 	orr.w	r2, r3, #16
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e007      	b.n	8006d8e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d1cf      	bne.n	8006d2c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	8000003f 	.word	0x8000003f

08006d9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d14b      	bne.n	8006e4e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d021      	beq.n	8006e14 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe ff3b 	bl	8005c50 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d032      	beq.n	8006e46 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d12b      	bne.n	8006e46 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d11f      	bne.n	8006e46 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	f043 0201 	orr.w	r2, r3, #1
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e12:	e018      	b.n	8006e46 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d111      	bne.n	8006e46 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d105      	bne.n	8006e46 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	f043 0201 	orr.w	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fae8 	bl	800641c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e4c:	e00e      	b.n	8006e6c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff faf2 	bl	8006444 <HAL_ADC_ErrorCallback>
}
 8006e60:	e004      	b.n	8006e6c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fad4 	bl	8006430 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eae:	f043 0204 	orr.w	r2, r3, #4
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f7ff fac4 	bl	8006444 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <LL_ADC_IsEnabled>:
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <LL_ADC_IsEnabled+0x18>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <LL_ADC_IsEnabled+0x1a>
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <LL_ADC_REG_IsConversionOngoing>:
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d101      	bne.n	8006f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006f10:	b590      	push	{r4, r7, lr}
 8006f12:	b0a1      	sub	sp, #132	; 0x84
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e0e7      	b.n	80070fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006f36:	2300      	movs	r3, #0
 8006f38:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f46:	d102      	bne.n	8006f4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f48:	4b6f      	ldr	r3, [pc, #444]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	e009      	b.n	8006f62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a6e      	ldr	r2, [pc, #440]	; (800710c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d102      	bne.n	8006f5e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006f58:	4b6d      	ldr	r3, [pc, #436]	; (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006f5a:	60bb      	str	r3, [r7, #8]
 8006f5c:	e001      	b.n	8006f62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6c:	f043 0220 	orr.w	r2, r3, #32
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0be      	b.n	80070fe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7ff ffb1 	bl	8006eea <LL_ADC_REG_IsConversionOngoing>
 8006f88:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff ffab 	bl	8006eea <LL_ADC_REG_IsConversionOngoing>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 80a0 	bne.w	80070dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 809c 	bne.w	80070dc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fac:	d004      	beq.n	8006fb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a55      	ldr	r2, [pc, #340]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d101      	bne.n	8006fbc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006fb8:	4b56      	ldr	r3, [pc, #344]	; (8007114 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006fba:	e000      	b.n	8006fbe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006fbc:	4b56      	ldr	r3, [pc, #344]	; (8007118 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006fbe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d04b      	beq.n	8007060 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	6859      	ldr	r1, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fda:	035b      	lsls	r3, r3, #13
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fec:	d004      	beq.n	8006ff8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a45      	ldr	r2, [pc, #276]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d10f      	bne.n	8007018 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006ff8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006ffc:	f7ff ff62 	bl	8006ec4 <LL_ADC_IsEnabled>
 8007000:	4604      	mov	r4, r0
 8007002:	4841      	ldr	r0, [pc, #260]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007004:	f7ff ff5e 	bl	8006ec4 <LL_ADC_IsEnabled>
 8007008:	4603      	mov	r3, r0
 800700a:	4323      	orrs	r3, r4
 800700c:	2b00      	cmp	r3, #0
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	e012      	b.n	800703e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007018:	483c      	ldr	r0, [pc, #240]	; (800710c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800701a:	f7ff ff53 	bl	8006ec4 <LL_ADC_IsEnabled>
 800701e:	4604      	mov	r4, r0
 8007020:	483b      	ldr	r0, [pc, #236]	; (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007022:	f7ff ff4f 	bl	8006ec4 <LL_ADC_IsEnabled>
 8007026:	4603      	mov	r3, r0
 8007028:	431c      	orrs	r4, r3
 800702a:	483c      	ldr	r0, [pc, #240]	; (800711c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800702c:	f7ff ff4a 	bl	8006ec4 <LL_ADC_IsEnabled>
 8007030:	4603      	mov	r3, r0
 8007032:	4323      	orrs	r3, r4
 8007034:	2b00      	cmp	r3, #0
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d056      	beq.n	80070f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800704a:	f023 030f 	bic.w	r3, r3, #15
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	6811      	ldr	r1, [r2, #0]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	6892      	ldr	r2, [r2, #8]
 8007056:	430a      	orrs	r2, r1
 8007058:	431a      	orrs	r2, r3
 800705a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800705c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800705e:	e047      	b.n	80070f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800706a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007074:	d004      	beq.n	8007080 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a23      	ldr	r2, [pc, #140]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d10f      	bne.n	80070a0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007080:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007084:	f7ff ff1e 	bl	8006ec4 <LL_ADC_IsEnabled>
 8007088:	4604      	mov	r4, r0
 800708a:	481f      	ldr	r0, [pc, #124]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800708c:	f7ff ff1a 	bl	8006ec4 <LL_ADC_IsEnabled>
 8007090:	4603      	mov	r3, r0
 8007092:	4323      	orrs	r3, r4
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf0c      	ite	eq
 8007098:	2301      	moveq	r3, #1
 800709a:	2300      	movne	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	e012      	b.n	80070c6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80070a0:	481a      	ldr	r0, [pc, #104]	; (800710c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80070a2:	f7ff ff0f 	bl	8006ec4 <LL_ADC_IsEnabled>
 80070a6:	4604      	mov	r4, r0
 80070a8:	4819      	ldr	r0, [pc, #100]	; (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80070aa:	f7ff ff0b 	bl	8006ec4 <LL_ADC_IsEnabled>
 80070ae:	4603      	mov	r3, r0
 80070b0:	431c      	orrs	r4, r3
 80070b2:	481a      	ldr	r0, [pc, #104]	; (800711c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80070b4:	f7ff ff06 	bl	8006ec4 <LL_ADC_IsEnabled>
 80070b8:	4603      	mov	r3, r0
 80070ba:	4323      	orrs	r3, r4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf0c      	ite	eq
 80070c0:	2301      	moveq	r3, #1
 80070c2:	2300      	movne	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d012      	beq.n	80070f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80070ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80070d2:	f023 030f 	bic.w	r3, r3, #15
 80070d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80070d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070da:	e009      	b.n	80070f0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e0:	f043 0220 	orr.w	r2, r3, #32
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80070ee:	e000      	b.n	80070f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80070f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80070fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3784      	adds	r7, #132	; 0x84
 8007102:	46bd      	mov	sp, r7
 8007104:	bd90      	pop	{r4, r7, pc}
 8007106:	bf00      	nop
 8007108:	50000100 	.word	0x50000100
 800710c:	50000400 	.word	0x50000400
 8007110:	50000500 	.word	0x50000500
 8007114:	50000300 	.word	0x50000300
 8007118:	50000700 	.word	0x50000700
 800711c:	50000600 	.word	0x50000600

08007120 <__NVIC_SetPriorityGrouping>:
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007130:	4b0c      	ldr	r3, [pc, #48]	; (8007164 <__NVIC_SetPriorityGrouping+0x44>)
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800713c:	4013      	ands	r3, r2
 800713e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800714c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007152:	4a04      	ldr	r2, [pc, #16]	; (8007164 <__NVIC_SetPriorityGrouping+0x44>)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	60d3      	str	r3, [r2, #12]
}
 8007158:	bf00      	nop
 800715a:	3714      	adds	r7, #20
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	e000ed00 	.word	0xe000ed00

08007168 <__NVIC_GetPriorityGrouping>:
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800716c:	4b04      	ldr	r3, [pc, #16]	; (8007180 <__NVIC_GetPriorityGrouping+0x18>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	0a1b      	lsrs	r3, r3, #8
 8007172:	f003 0307 	and.w	r3, r3, #7
}
 8007176:	4618      	mov	r0, r3
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	e000ed00 	.word	0xe000ed00

08007184 <__NVIC_EnableIRQ>:
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800718e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007192:	2b00      	cmp	r3, #0
 8007194:	db0b      	blt.n	80071ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	f003 021f 	and.w	r2, r3, #31
 800719c:	4907      	ldr	r1, [pc, #28]	; (80071bc <__NVIC_EnableIRQ+0x38>)
 800719e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	2001      	movs	r0, #1
 80071a6:	fa00 f202 	lsl.w	r2, r0, r2
 80071aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	e000e100 	.word	0xe000e100

080071c0 <__NVIC_SetPriority>:
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	db0a      	blt.n	80071ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	490c      	ldr	r1, [pc, #48]	; (800720c <__NVIC_SetPriority+0x4c>)
 80071da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071de:	0112      	lsls	r2, r2, #4
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	440b      	add	r3, r1
 80071e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071e8:	e00a      	b.n	8007200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	4908      	ldr	r1, [pc, #32]	; (8007210 <__NVIC_SetPriority+0x50>)
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	3b04      	subs	r3, #4
 80071f8:	0112      	lsls	r2, r2, #4
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	440b      	add	r3, r1
 80071fe:	761a      	strb	r2, [r3, #24]
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	e000e100 	.word	0xe000e100
 8007210:	e000ed00 	.word	0xe000ed00

08007214 <NVIC_EncodePriority>:
{
 8007214:	b480      	push	{r7}
 8007216:	b089      	sub	sp, #36	; 0x24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	f1c3 0307 	rsb	r3, r3, #7
 800722e:	2b04      	cmp	r3, #4
 8007230:	bf28      	it	cs
 8007232:	2304      	movcs	r3, #4
 8007234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	3304      	adds	r3, #4
 800723a:	2b06      	cmp	r3, #6
 800723c:	d902      	bls.n	8007244 <NVIC_EncodePriority+0x30>
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	3b03      	subs	r3, #3
 8007242:	e000      	b.n	8007246 <NVIC_EncodePriority+0x32>
 8007244:	2300      	movs	r3, #0
 8007246:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007248:	f04f 32ff 	mov.w	r2, #4294967295
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	43da      	mvns	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	401a      	ands	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800725c:	f04f 31ff 	mov.w	r1, #4294967295
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	fa01 f303 	lsl.w	r3, r1, r3
 8007266:	43d9      	mvns	r1, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800726c:	4313      	orrs	r3, r2
}
 800726e:	4618      	mov	r0, r3
 8007270:	3724      	adds	r7, #36	; 0x24
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3b01      	subs	r3, #1
 8007288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800728c:	d301      	bcc.n	8007292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800728e:	2301      	movs	r3, #1
 8007290:	e00f      	b.n	80072b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007292:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <SysTick_Config+0x40>)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3b01      	subs	r3, #1
 8007298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800729a:	210f      	movs	r1, #15
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	f7ff ff8e 	bl	80071c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <SysTick_Config+0x40>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072aa:	4b04      	ldr	r3, [pc, #16]	; (80072bc <SysTick_Config+0x40>)
 80072ac:	2207      	movs	r2, #7
 80072ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	e000e010 	.word	0xe000e010

080072c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ff29 	bl	8007120 <__NVIC_SetPriorityGrouping>
}
 80072ce:	bf00      	nop
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b086      	sub	sp, #24
 80072da:	af00      	add	r7, sp, #0
 80072dc:	4603      	mov	r3, r0
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072e4:	f7ff ff40 	bl	8007168 <__NVIC_GetPriorityGrouping>
 80072e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	6978      	ldr	r0, [r7, #20]
 80072f0:	f7ff ff90 	bl	8007214 <NVIC_EncodePriority>
 80072f4:	4602      	mov	r2, r0
 80072f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff5f 	bl	80071c0 <__NVIC_SetPriority>
}
 8007302:	bf00      	nop
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	4603      	mov	r3, r0
 8007312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff ff33 	bl	8007184 <__NVIC_EnableIRQ>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff ffa4 	bl	800727c <SysTick_Config>
 8007334:	4603      	mov	r3, r0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e08d      	b.n	800746e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	4b47      	ldr	r3, [pc, #284]	; (8007478 <HAL_DMA_Init+0x138>)
 800735a:	429a      	cmp	r2, r3
 800735c:	d80f      	bhi.n	800737e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	4b45      	ldr	r3, [pc, #276]	; (800747c <HAL_DMA_Init+0x13c>)
 8007366:	4413      	add	r3, r2
 8007368:	4a45      	ldr	r2, [pc, #276]	; (8007480 <HAL_DMA_Init+0x140>)
 800736a:	fba2 2303 	umull	r2, r3, r2, r3
 800736e:	091b      	lsrs	r3, r3, #4
 8007370:	009a      	lsls	r2, r3, #2
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a42      	ldr	r2, [pc, #264]	; (8007484 <HAL_DMA_Init+0x144>)
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
 800737c:	e00e      	b.n	800739c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	4b40      	ldr	r3, [pc, #256]	; (8007488 <HAL_DMA_Init+0x148>)
 8007386:	4413      	add	r3, r2
 8007388:	4a3d      	ldr	r2, [pc, #244]	; (8007480 <HAL_DMA_Init+0x140>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	091b      	lsrs	r3, r3, #4
 8007390:	009a      	lsls	r2, r3, #2
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a3c      	ldr	r2, [pc, #240]	; (800748c <HAL_DMA_Init+0x14c>)
 800739a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80073c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa76 	bl	80078e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073fc:	d102      	bne.n	8007404 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007418:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d010      	beq.n	8007444 <HAL_DMA_Init+0x104>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b04      	cmp	r3, #4
 8007428:	d80c      	bhi.n	8007444 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa96 	bl	800795c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007440:	605a      	str	r2, [r3, #4]
 8007442:	e008      	b.n	8007456 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40020407 	.word	0x40020407
 800747c:	bffdfff8 	.word	0xbffdfff8
 8007480:	cccccccd 	.word	0xcccccccd
 8007484:	40020000 	.word	0x40020000
 8007488:	bffdfbf8 	.word	0xbffdfbf8
 800748c:	40020400 	.word	0x40020400

08007490 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_DMA_Start_IT+0x20>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e066      	b.n	800757e <HAL_DMA_Start_IT+0xee>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d155      	bne.n	8007570 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0201 	bic.w	r2, r2, #1
 80074e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	68b9      	ldr	r1, [r7, #8]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f9bb 	bl	8007864 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d008      	beq.n	8007508 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 020e 	orr.w	r2, r2, #14
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e00f      	b.n	8007528 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0204 	bic.w	r2, r2, #4
 8007516:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 020a 	orr.w	r2, r2, #10
 8007526:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d007      	beq.n	8007546 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007544:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754a:	2b00      	cmp	r3, #0
 800754c:	d007      	beq.n	800755e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	e005      	b.n	800757c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007578:	2302      	movs	r3, #2
 800757a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d005      	beq.n	80075aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2204      	movs	r2, #4
 80075a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	73fb      	strb	r3, [r7, #15]
 80075a8:	e037      	b.n	800761a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 020e 	bic.w	r2, r2, #14
 80075b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0201 	bic.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	f003 021f 	and.w	r2, r3, #31
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	2101      	movs	r1, #1
 80075e8:	fa01 f202 	lsl.w	r2, r1, r2
 80075ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00c      	beq.n	800761a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800760e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007618:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d00d      	beq.n	800766c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2204      	movs	r2, #4
 8007654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	73fb      	strb	r3, [r7, #15]
 800766a:	e047      	b.n	80076fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 020e 	bic.w	r2, r2, #14
 800767a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007696:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800769a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a0:	f003 021f 	and.w	r2, r3, #31
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	2101      	movs	r1, #1
 80076aa:	fa01 f202 	lsl.w	r2, r1, r2
 80076ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80076b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00c      	beq.n	80076dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80076da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
    }
  }
  return status;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2204      	movs	r2, #4
 8007728:	409a      	lsls	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4013      	ands	r3, r2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d026      	beq.n	8007780 <HAL_DMA_IRQHandler+0x7a>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d021      	beq.n	8007780 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d107      	bne.n	800775a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0204 	bic.w	r2, r2, #4
 8007758:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775e:	f003 021f 	and.w	r2, r3, #31
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	2104      	movs	r1, #4
 8007768:	fa01 f202 	lsl.w	r2, r1, r2
 800776c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	2b00      	cmp	r3, #0
 8007774:	d071      	beq.n	800785a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800777e:	e06c      	b.n	800785a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007784:	f003 031f 	and.w	r3, r3, #31
 8007788:	2202      	movs	r2, #2
 800778a:	409a      	lsls	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d02e      	beq.n	80077f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d029      	beq.n	80077f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 020a 	bic.w	r2, r2, #10
 80077ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c8:	f003 021f 	and.w	r2, r3, #31
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	2102      	movs	r1, #2
 80077d2:	fa01 f202 	lsl.w	r2, r1, r2
 80077d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d038      	beq.n	800785a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80077f0:	e033      	b.n	800785a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f6:	f003 031f 	and.w	r3, r3, #31
 80077fa:	2208      	movs	r2, #8
 80077fc:	409a      	lsls	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	4013      	ands	r3, r2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d02a      	beq.n	800785c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d025      	beq.n	800785c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 020e 	bic.w	r2, r2, #14
 800781e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	f003 021f 	and.w	r2, r3, #31
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	2101      	movs	r1, #1
 800782e:	fa01 f202 	lsl.w	r2, r1, r2
 8007832:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800785a:	bf00      	nop
 800785c:	bf00      	nop
}
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800787a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	2b00      	cmp	r3, #0
 8007882:	d004      	beq.n	800788e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800788c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	f003 021f 	and.w	r2, r3, #31
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2101      	movs	r1, #1
 800789c:	fa01 f202 	lsl.w	r2, r1, r2
 80078a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d108      	bne.n	80078c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80078c2:	e007      	b.n	80078d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	60da      	str	r2, [r3, #12]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d802      	bhi.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80078f4:	4b15      	ldr	r3, [pc, #84]	; (800794c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e001      	b.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80078fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	3b08      	subs	r3, #8
 800790a:	4a12      	ldr	r2, [pc, #72]	; (8007954 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	091b      	lsrs	r3, r3, #4
 8007912:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007918:	089b      	lsrs	r3, r3, #2
 800791a:	009a      	lsls	r2, r3, #2
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	4413      	add	r3, r2
 8007920:	461a      	mov	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a0b      	ldr	r2, [pc, #44]	; (8007958 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800792a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2201      	movs	r2, #1
 8007934:	409a      	lsls	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	651a      	str	r2, [r3, #80]	; 0x50
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40020407 	.word	0x40020407
 800794c:	40020800 	.word	0x40020800
 8007950:	40020820 	.word	0x40020820
 8007954:	cccccccd 	.word	0xcccccccd
 8007958:	40020880 	.word	0x40020880

0800795c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4b0b      	ldr	r3, [pc, #44]	; (800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a08      	ldr	r2, [pc, #32]	; (80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800797e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3b01      	subs	r3, #1
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	2201      	movs	r2, #1
 800798a:	409a      	lsls	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	1000823f 	.word	0x1000823f
 80079a0:	40020940 	.word	0x40020940

080079a4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e147      	b.n	8007c46 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fa f8ec 	bl	8001ba8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0210 	bic.w	r2, r2, #16
 80079de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079e0:	f7fb fa92 	bl	8002f08 <HAL_GetTick>
 80079e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80079e6:	e012      	b.n	8007a0e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80079e8:	f7fb fa8e 	bl	8002f08 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b0a      	cmp	r3, #10
 80079f4:	d90b      	bls.n	8007a0e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fa:	f043 0201 	orr.w	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2203      	movs	r2, #3
 8007a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e11b      	b.n	8007c46 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d0e5      	beq.n	80079e8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a2c:	f7fb fa6c 	bl	8002f08 <HAL_GetTick>
 8007a30:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007a32:	e012      	b.n	8007a5a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a34:	f7fb fa68 	bl	8002f08 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b0a      	cmp	r3, #10
 8007a40:	d90b      	bls.n	8007a5a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a46:	f043 0201 	orr.w	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2203      	movs	r2, #3
 8007a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e0f5      	b.n	8007c46 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0e5      	beq.n	8007a34 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0202 	orr.w	r2, r2, #2
 8007a76:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a74      	ldr	r2, [pc, #464]	; (8007c50 <HAL_FDCAN_Init+0x2ac>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d103      	bne.n	8007a8a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007a82:	4a74      	ldr	r2, [pc, #464]	; (8007c54 <HAL_FDCAN_Init+0x2b0>)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7c1b      	ldrb	r3, [r3, #16]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d108      	bne.n	8007aa4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aa0:	619a      	str	r2, [r3, #24]
 8007aa2:	e007      	b.n	8007ab4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ab2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7c5b      	ldrb	r3, [r3, #17]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d108      	bne.n	8007ace <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aca:	619a      	str	r2, [r3, #24]
 8007acc:	e007      	b.n	8007ade <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007adc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7c9b      	ldrb	r3, [r3, #18]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d108      	bne.n	8007af8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007af4:	619a      	str	r2, [r3, #24]
 8007af6:	e007      	b.n	8007b08 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b06:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699a      	ldr	r2, [r3, #24]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007b2c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0210 	bic.w	r2, r2, #16
 8007b3c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d108      	bne.n	8007b58 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	699a      	ldr	r2, [r3, #24]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0204 	orr.w	r2, r2, #4
 8007b54:	619a      	str	r2, [r3, #24]
 8007b56:	e02c      	b.n	8007bb2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d028      	beq.n	8007bb2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d01c      	beq.n	8007ba2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b76:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0210 	orr.w	r2, r2, #16
 8007b86:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d110      	bne.n	8007bb2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0220 	orr.w	r2, r2, #32
 8007b9e:	619a      	str	r2, [r3, #24]
 8007ba0:	e007      	b.n	8007bb2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0220 	orr.w	r2, r2, #32
 8007bb0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bc2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007bca:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007bda:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007bdc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be6:	d115      	bne.n	8007c14 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007bf6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c00:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c10:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c12:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fc4e 	bl	80084cc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40006400 	.word	0x40006400
 8007c54:	40006500 	.word	0x40006500

08007c58 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c68:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d002      	beq.n	8007c76 <HAL_FDCAN_ConfigFilter+0x1e>
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d13d      	bne.n	8007cf2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d119      	bne.n	8007cb2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c8a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007c92:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e01d      	b.n	8007cee <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	075a      	lsls	r2, r3, #29
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	079a      	lsls	r2, r3, #30
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4413      	add	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e006      	b.n	8007d00 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf6:	f043 0202 	orr.w	r2, r3, #2
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
  }
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d110      	bne.n	8007d42 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699a      	ldr	r2, [r3, #24]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0201 	bic.w	r2, r2, #1
 8007d36:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e006      	b.n	8007d50 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d46:	f043 0204 	orr.w	r2, r3, #4
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
  }
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d12c      	bne.n	8007dce <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e023      	b.n	8007ddc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fbfa 	bl	80085a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2101      	movs	r1, #1
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	fa01 f202 	lsl.w	r2, r1, r2
 8007dbc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e006      	b.n	8007ddc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd2:	f043 0208 	orr.w	r2, r3, #8
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
  }
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b08b      	sub	sp, #44	; 0x2c
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007df8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007dfa:	7efb      	ldrb	r3, [r7, #27]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	f040 80bc 	bne.w	8007f7a <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b40      	cmp	r3, #64	; 0x40
 8007e06:	d121      	bne.n	8007e4c <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d107      	bne.n	8007e28 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0af      	b.n	8007f88 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e30:	0a1b      	lsrs	r3, r3, #8
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	4413      	add	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	440b      	add	r3, r1
 8007e48:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4a:	e020      	b.n	8007e8e <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d107      	bne.n	8007e6c <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e08d      	b.n	8007f88 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e74:	0a1b      	lsrs	r3, r3, #8
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	4613      	mov	r3, r2
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	4413      	add	r3, r2
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	440b      	add	r3, r1
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	0c9b      	lsrs	r3, r3, #18
 8007ea8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e005      	b.n	8007ebe <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	3304      	adds	r3, #4
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	0e1b      	lsrs	r3, r3, #24
 8007f10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	0fda      	lsrs	r2, r3, #31
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	3304      	adds	r3, #4
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	623b      	str	r3, [r7, #32]
 8007f30:	e00a      	b.n	8007f48 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	441a      	add	r2, r3
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	440b      	add	r3, r1
 8007f3e:	7812      	ldrb	r2, [r2, #0]
 8007f40:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	3301      	adds	r3, #1
 8007f46:	623b      	str	r3, [r7, #32]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	0c1b      	lsrs	r3, r3, #16
 8007f4e:	4a11      	ldr	r2, [pc, #68]	; (8007f94 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007f50:	5cd3      	ldrb	r3, [r2, r3]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d3eb      	bcc.n	8007f32 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d105      	bne.n	8007f6c <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007f6a:	e004      	b.n	8007f76 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e006      	b.n	8007f88 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7e:	f043 0208 	orr.w	r2, r3, #8
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
  }
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	372c      	adds	r7, #44	; 0x2c
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	0800fe5c 	.word	0x0800fe5c

08007f98 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fce:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d003      	beq.n	8007fde <HAL_FDCAN_ActivateNotification+0x22>
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	f040 80c8 	bne.w	800816e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d03b      	beq.n	8008072 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008000:	2b00      	cmp	r3, #0
 8008002:	d004      	beq.n	800800e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d031      	beq.n	8008072 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d027      	beq.n	8008072 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008028:	2b00      	cmp	r3, #0
 800802a:	d004      	beq.n	8008036 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01d      	beq.n	8008072 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2b00      	cmp	r3, #0
 8008048:	d013      	beq.n	8008072 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008050:	2b00      	cmp	r3, #0
 8008052:	d004      	beq.n	800805e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00c      	beq.n	8008082 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d107      	bne.n	8008082 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	d13b      	bne.n	800810e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d131      	bne.n	800810e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d127      	bne.n	800810e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d11d      	bne.n	800810e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d113      	bne.n	800810e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d109      	bne.n	800810e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00c      	beq.n	800811e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0202 	orr.w	r2, r2, #2
 800811c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008124:	2b00      	cmp	r3, #0
 8008126:	d009      	beq.n	800813c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	430a      	orrs	r2, r1
 8008138:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	430a      	orrs	r2, r1
 8008156:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	430a      	orrs	r2, r1
 8008168:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	e006      	b.n	800817c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008172:	f043 0202 	orr.w	r2, r3, #2
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	371c      	adds	r7, #28
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08a      	sub	sp, #40	; 0x28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008196:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a4:	4013      	ands	r3, r2
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	6a3a      	ldr	r2, [r7, #32]
 80081bc:	4013      	ands	r3, r2
 80081be:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081ca:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	4013      	ands	r3, r2
 80081d6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081de:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80081e2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4013      	ands	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80081fa:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	4013      	ands	r3, r2
 8008206:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d006      	beq.n	8008232 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2240      	movs	r2, #64	; 0x40
 800822a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f92e 	bl	800848e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01b      	beq.n	8008278 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824a:	2b00      	cmp	r3, #0
 800824c:	d014      	beq.n	8008278 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008256:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	4013      	ands	r3, r2
 8008264:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800826e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008270:	6939      	ldr	r1, [r7, #16]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f8ec 	bl	8008450 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d007      	beq.n	800828e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008284:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f8b6 	bl	80083fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d007      	beq.n	80082a4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800829c:	6a39      	ldr	r1, [r7, #32]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7fb fbc6 	bl	8003a30 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80082b2:	69f9      	ldr	r1, [r7, #28]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8ab 	bl	8008410 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d007      	beq.n	80082e6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f8a0 	bl	8008426 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01a      	beq.n	800832a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d013      	beq.n	800832a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800830a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4013      	ands	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2280      	movs	r2, #128	; 0x80
 8008320:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008322:	68f9      	ldr	r1, [r7, #12]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f888 	bl	800843a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00e      	beq.n	8008356 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800834e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f888 	bl	8008466 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800837a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f87c 	bl	800847a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d011      	beq.n	80083b4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80083a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80083c2:	6979      	ldr	r1, [r7, #20]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f876 	bl	80084b6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f858 	bl	80084a2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80083f2:	bf00      	nop
 80083f4:	3728      	adds	r7, #40	; 0x28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b083      	sub	sp, #12
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80084d4:	4b30      	ldr	r3, [pc, #192]	; (8008598 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80084d6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a2f      	ldr	r2, [pc, #188]	; (800859c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d103      	bne.n	80084ea <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80084e8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a2c      	ldr	r2, [pc, #176]	; (80085a0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d103      	bne.n	80084fc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80084fa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800850a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008512:	041a      	lsls	r2, r3, #16
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008530:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	061a      	lsls	r2, r3, #24
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e005      	b.n	800857e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3304      	adds	r3, #4
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	429a      	cmp	r2, r3
 8008588:	d3f3      	bcc.n	8008572 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800858a:	bf00      	nop
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	4000a400 	.word	0x4000a400
 800859c:	40006800 	.word	0x40006800
 80085a0:	40006c00 	.word	0x40006c00

080085a4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b089      	sub	sp, #36	; 0x24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80085c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80085ca:	4313      	orrs	r3, r2
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	e00a      	b.n	80085e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80085d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80085de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80085e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80085f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80085f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80085fc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008602:	4313      	orrs	r3, r2
 8008604:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	440b      	add	r3, r1
 8008616:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	3304      	adds	r3, #4
 8008622:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	3304      	adds	r3, #4
 800862e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e020      	b.n	8008678 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	3303      	adds	r3, #3
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	3302      	adds	r3, #2
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	440b      	add	r3, r1
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800864e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3301      	adds	r3, #1
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	440b      	add	r3, r1
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800865c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	440a      	add	r2, r1
 8008664:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008666:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	3304      	adds	r3, #4
 8008670:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	3304      	adds	r3, #4
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	4a06      	ldr	r2, [pc, #24]	; (8008698 <FDCAN_CopyMessageToRAM+0xf4>)
 8008680:	5cd3      	ldrb	r3, [r2, r3]
 8008682:	461a      	mov	r2, r3
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	4293      	cmp	r3, r2
 8008688:	d3d5      	bcc.n	8008636 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800868a:	bf00      	nop
 800868c:	bf00      	nop
 800868e:	3724      	adds	r7, #36	; 0x24
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	0800fe5c 	.word	0x0800fe5c

0800869c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80086aa:	e15a      	b.n	8008962 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	2101      	movs	r1, #1
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	fa01 f303 	lsl.w	r3, r1, r3
 80086b8:	4013      	ands	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 814c 	beq.w	800895c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d005      	beq.n	80086dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d130      	bne.n	800873e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	2203      	movs	r2, #3
 80086e8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ec:	43db      	mvns	r3, r3
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4013      	ands	r3, r2
 80086f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	68da      	ldr	r2, [r3, #12]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008712:	2201      	movs	r2, #1
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	fa02 f303 	lsl.w	r3, r2, r3
 800871a:	43db      	mvns	r3, r3
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4013      	ands	r3, r2
 8008720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	091b      	lsrs	r3, r3, #4
 8008728:	f003 0201 	and.w	r2, r3, #1
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4313      	orrs	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	693a      	ldr	r2, [r7, #16]
 800873c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	2b03      	cmp	r3, #3
 8008748:	d017      	beq.n	800877a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	005b      	lsls	r3, r3, #1
 8008754:	2203      	movs	r2, #3
 8008756:	fa02 f303 	lsl.w	r3, r2, r3
 800875a:	43db      	mvns	r3, r3
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4013      	ands	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	fa02 f303 	lsl.w	r3, r2, r3
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f003 0303 	and.w	r3, r3, #3
 8008782:	2b02      	cmp	r3, #2
 8008784:	d123      	bne.n	80087ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	08da      	lsrs	r2, r3, #3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3208      	adds	r2, #8
 800878e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	220f      	movs	r2, #15
 800879e:	fa02 f303 	lsl.w	r3, r2, r3
 80087a2:	43db      	mvns	r3, r3
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4013      	ands	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	08da      	lsrs	r2, r3, #3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3208      	adds	r2, #8
 80087c8:	6939      	ldr	r1, [r7, #16]
 80087ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	2203      	movs	r2, #3
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43db      	mvns	r3, r3
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4013      	ands	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f003 0203 	and.w	r2, r3, #3
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80a6 	beq.w	800895c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008810:	4b5b      	ldr	r3, [pc, #364]	; (8008980 <HAL_GPIO_Init+0x2e4>)
 8008812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008814:	4a5a      	ldr	r2, [pc, #360]	; (8008980 <HAL_GPIO_Init+0x2e4>)
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	6613      	str	r3, [r2, #96]	; 0x60
 800881c:	4b58      	ldr	r3, [pc, #352]	; (8008980 <HAL_GPIO_Init+0x2e4>)
 800881e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008828:	4a56      	ldr	r2, [pc, #344]	; (8008984 <HAL_GPIO_Init+0x2e8>)
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	089b      	lsrs	r3, r3, #2
 800882e:	3302      	adds	r3, #2
 8008830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	220f      	movs	r2, #15
 8008840:	fa02 f303 	lsl.w	r3, r2, r3
 8008844:	43db      	mvns	r3, r3
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	4013      	ands	r3, r2
 800884a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008852:	d01f      	beq.n	8008894 <HAL_GPIO_Init+0x1f8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a4c      	ldr	r2, [pc, #304]	; (8008988 <HAL_GPIO_Init+0x2ec>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d019      	beq.n	8008890 <HAL_GPIO_Init+0x1f4>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a4b      	ldr	r2, [pc, #300]	; (800898c <HAL_GPIO_Init+0x2f0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d013      	beq.n	800888c <HAL_GPIO_Init+0x1f0>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a4a      	ldr	r2, [pc, #296]	; (8008990 <HAL_GPIO_Init+0x2f4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d00d      	beq.n	8008888 <HAL_GPIO_Init+0x1ec>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a49      	ldr	r2, [pc, #292]	; (8008994 <HAL_GPIO_Init+0x2f8>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d007      	beq.n	8008884 <HAL_GPIO_Init+0x1e8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a48      	ldr	r2, [pc, #288]	; (8008998 <HAL_GPIO_Init+0x2fc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d101      	bne.n	8008880 <HAL_GPIO_Init+0x1e4>
 800887c:	2305      	movs	r3, #5
 800887e:	e00a      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008880:	2306      	movs	r3, #6
 8008882:	e008      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008884:	2304      	movs	r3, #4
 8008886:	e006      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008888:	2303      	movs	r3, #3
 800888a:	e004      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 800888c:	2302      	movs	r3, #2
 800888e:	e002      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <HAL_GPIO_Init+0x1fa>
 8008894:	2300      	movs	r3, #0
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	f002 0203 	and.w	r2, r2, #3
 800889c:	0092      	lsls	r2, r2, #2
 800889e:	4093      	lsls	r3, r2
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088a6:	4937      	ldr	r1, [pc, #220]	; (8008984 <HAL_GPIO_Init+0x2e8>)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	089b      	lsrs	r3, r3, #2
 80088ac:	3302      	adds	r3, #2
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088b4:	4b39      	ldr	r3, [pc, #228]	; (800899c <HAL_GPIO_Init+0x300>)
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	43db      	mvns	r3, r3
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	4013      	ands	r3, r2
 80088c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80088d8:	4a30      	ldr	r2, [pc, #192]	; (800899c <HAL_GPIO_Init+0x300>)
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80088de:	4b2f      	ldr	r3, [pc, #188]	; (800899c <HAL_GPIO_Init+0x300>)
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	43db      	mvns	r3, r3
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	4013      	ands	r3, r2
 80088ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008902:	4a26      	ldr	r2, [pc, #152]	; (800899c <HAL_GPIO_Init+0x300>)
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008908:	4b24      	ldr	r3, [pc, #144]	; (800899c <HAL_GPIO_Init+0x300>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	43db      	mvns	r3, r3
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4013      	ands	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800892c:	4a1b      	ldr	r2, [pc, #108]	; (800899c <HAL_GPIO_Init+0x300>)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008932:	4b1a      	ldr	r3, [pc, #104]	; (800899c <HAL_GPIO_Init+0x300>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	43db      	mvns	r3, r3
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4013      	ands	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008956:	4a11      	ldr	r2, [pc, #68]	; (800899c <HAL_GPIO_Init+0x300>)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	3301      	adds	r3, #1
 8008960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	f47f ae9d 	bne.w	80086ac <HAL_GPIO_Init+0x10>
  }
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	371c      	adds	r7, #28
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	40021000 	.word	0x40021000
 8008984:	40010000 	.word	0x40010000
 8008988:	48000400 	.word	0x48000400
 800898c:	48000800 	.word	0x48000800
 8008990:	48000c00 	.word	0x48000c00
 8008994:	48001000 	.word	0x48001000
 8008998:	48001400 	.word	0x48001400
 800899c:	40010400 	.word	0x40010400

080089a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	887b      	ldrh	r3, [r7, #2]
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
 80089bc:	e001      	b.n	80089c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	807b      	strh	r3, [r7, #2]
 80089dc:	4613      	mov	r3, r2
 80089de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089e0:	787b      	ldrb	r3, [r7, #1]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80089e6:	887a      	ldrh	r2, [r7, #2]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80089ec:	e002      	b.n	80089f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80089ee:	887a      	ldrh	r2, [r7, #2]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008a12:	887a      	ldrh	r2, [r7, #2]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4013      	ands	r3, r2
 8008a18:	041a      	lsls	r2, r3, #16
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	43d9      	mvns	r1, r3
 8008a1e:	887b      	ldrh	r3, [r7, #2]
 8008a20:	400b      	ands	r3, r1
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	619a      	str	r2, [r3, #24]
}
 8008a28:	bf00      	nop
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008a3e:	4b08      	ldr	r3, [pc, #32]	; (8008a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	4013      	ands	r3, r2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d006      	beq.n	8008a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a4a:	4a05      	ldr	r2, [pc, #20]	; (8008a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a50:	88fb      	ldrh	r3, [r7, #6]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fa ffa2 	bl	800399c <HAL_GPIO_EXTI_Callback>
  }
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	40010400 	.word	0x40010400

08008a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d141      	bne.n	8008af6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a72:	4b4b      	ldr	r3, [pc, #300]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a7e:	d131      	bne.n	8008ae4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a80:	4b47      	ldr	r3, [pc, #284]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a86:	4a46      	ldr	r2, [pc, #280]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a90:	4b43      	ldr	r3, [pc, #268]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008a98:	4a41      	ldr	r2, [pc, #260]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008aa0:	4b40      	ldr	r3, [pc, #256]	; (8008ba4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2232      	movs	r2, #50	; 0x32
 8008aa6:	fb02 f303 	mul.w	r3, r2, r3
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008aac:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab0:	0c9b      	lsrs	r3, r3, #18
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ab6:	e002      	b.n	8008abe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008abe:	4b38      	ldr	r3, [pc, #224]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aca:	d102      	bne.n	8008ad2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f2      	bne.n	8008ab8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ad2:	4b33      	ldr	r3, [pc, #204]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ade:	d158      	bne.n	8008b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e057      	b.n	8008b94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ae4:	4b2e      	ldr	r3, [pc, #184]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aea:	4a2d      	ldr	r2, [pc, #180]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008af4:	e04d      	b.n	8008b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008afc:	d141      	bne.n	8008b82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008afe:	4b28      	ldr	r3, [pc, #160]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0a:	d131      	bne.n	8008b70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b0c:	4b24      	ldr	r3, [pc, #144]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b12:	4a23      	ldr	r2, [pc, #140]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b1c:	4b20      	ldr	r3, [pc, #128]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b24:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2232      	movs	r2, #50	; 0x32
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
 8008b36:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	0c9b      	lsrs	r3, r3, #18
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b42:	e002      	b.n	8008b4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b4a:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b56:	d102      	bne.n	8008b5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f2      	bne.n	8008b44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b5e:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b6a:	d112      	bne.n	8008b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e011      	b.n	8008b94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b76:	4a0a      	ldr	r2, [pc, #40]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008b80:	e007      	b.n	8008b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b8a:	4a05      	ldr	r2, [pc, #20]	; (8008ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	40007000 	.word	0x40007000
 8008ba4:	20000008 	.word	0x20000008
 8008ba8:	431bde83 	.word	0x431bde83

08008bac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	4a04      	ldr	r2, [pc, #16]	; (8008bc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bba:	6093      	str	r3, [r2, #8]
}
 8008bbc:	bf00      	nop
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40007000 	.word	0x40007000

08008bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e306      	b.n	80091ec <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d075      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bea:	4b97      	ldr	r3, [pc, #604]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 030c 	and.w	r3, r3, #12
 8008bf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bf4:	4b94      	ldr	r3, [pc, #592]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b0c      	cmp	r3, #12
 8008c02:	d102      	bne.n	8008c0a <HAL_RCC_OscConfig+0x3e>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d002      	beq.n	8008c10 <HAL_RCC_OscConfig+0x44>
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d10b      	bne.n	8008c28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c10:	4b8d      	ldr	r3, [pc, #564]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d05b      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x108>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d157      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e2e1      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c30:	d106      	bne.n	8008c40 <HAL_RCC_OscConfig+0x74>
 8008c32:	4b85      	ldr	r3, [pc, #532]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a84      	ldr	r2, [pc, #528]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	e01d      	b.n	8008c7c <HAL_RCC_OscConfig+0xb0>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c48:	d10c      	bne.n	8008c64 <HAL_RCC_OscConfig+0x98>
 8008c4a:	4b7f      	ldr	r3, [pc, #508]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a7e      	ldr	r2, [pc, #504]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	4b7c      	ldr	r3, [pc, #496]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a7b      	ldr	r2, [pc, #492]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	e00b      	b.n	8008c7c <HAL_RCC_OscConfig+0xb0>
 8008c64:	4b78      	ldr	r3, [pc, #480]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a77      	ldr	r2, [pc, #476]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	4b75      	ldr	r3, [pc, #468]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a74      	ldr	r2, [pc, #464]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d013      	beq.n	8008cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c84:	f7fa f940 	bl	8002f08 <HAL_GetTick>
 8008c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c8c:	f7fa f93c 	bl	8002f08 <HAL_GetTick>
 8008c90:	4602      	mov	r2, r0
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	2b64      	cmp	r3, #100	; 0x64
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e2a6      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c9e:	4b6a      	ldr	r3, [pc, #424]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0f0      	beq.n	8008c8c <HAL_RCC_OscConfig+0xc0>
 8008caa:	e014      	b.n	8008cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cac:	f7fa f92c 	bl	8002f08 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cb4:	f7fa f928 	bl	8002f08 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b64      	cmp	r3, #100	; 0x64
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e292      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008cc6:	4b60      	ldr	r3, [pc, #384]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0xe8>
 8008cd2:	e000      	b.n	8008cd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d075      	beq.n	8008dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ce2:	4b59      	ldr	r3, [pc, #356]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 030c 	and.w	r3, r3, #12
 8008cea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cec:	4b56      	ldr	r3, [pc, #344]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	2b0c      	cmp	r3, #12
 8008cfa:	d102      	bne.n	8008d02 <HAL_RCC_OscConfig+0x136>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d002      	beq.n	8008d08 <HAL_RCC_OscConfig+0x13c>
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d11f      	bne.n	8008d48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d08:	4b4f      	ldr	r3, [pc, #316]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_RCC_OscConfig+0x154>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e265      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d20:	4b49      	ldr	r3, [pc, #292]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	061b      	lsls	r3, r3, #24
 8008d2e:	4946      	ldr	r1, [pc, #280]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008d34:	4b45      	ldr	r3, [pc, #276]	; (8008e4c <HAL_RCC_OscConfig+0x280>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fc fe49 	bl	80059d0 <HAL_InitTick>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d043      	beq.n	8008dcc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e251      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d023      	beq.n	8008d98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d50:	4b3d      	ldr	r3, [pc, #244]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a3c      	ldr	r2, [pc, #240]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d5c:	f7fa f8d4 	bl	8002f08 <HAL_GetTick>
 8008d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d64:	f7fa f8d0 	bl	8002f08 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e23a      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d76:	4b34      	ldr	r3, [pc, #208]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d82:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	061b      	lsls	r3, r3, #24
 8008d90:	492d      	ldr	r1, [pc, #180]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	604b      	str	r3, [r1, #4]
 8008d96:	e01a      	b.n	8008dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d98:	4b2b      	ldr	r3, [pc, #172]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a2a      	ldr	r2, [pc, #168]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da4:	f7fa f8b0 	bl	8002f08 <HAL_GetTick>
 8008da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008dac:	f7fa f8ac 	bl	8002f08 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e216      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008dbe:	4b22      	ldr	r3, [pc, #136]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1f0      	bne.n	8008dac <HAL_RCC_OscConfig+0x1e0>
 8008dca:	e000      	b.n	8008dce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008dcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 0308 	and.w	r3, r3, #8
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d041      	beq.n	8008e5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d01c      	beq.n	8008e1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008de2:	4b19      	ldr	r3, [pc, #100]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008de8:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008dea:	f043 0301 	orr.w	r3, r3, #1
 8008dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df2:	f7fa f889 	bl	8002f08 <HAL_GetTick>
 8008df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008df8:	e008      	b.n	8008e0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dfa:	f7fa f885 	bl	8002f08 <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d901      	bls.n	8008e0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e1ef      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e0c:	4b0e      	ldr	r3, [pc, #56]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0ef      	beq.n	8008dfa <HAL_RCC_OscConfig+0x22e>
 8008e1a:	e020      	b.n	8008e5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e22:	4a09      	ldr	r2, [pc, #36]	; (8008e48 <HAL_RCC_OscConfig+0x27c>)
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2c:	f7fa f86c 	bl	8002f08 <HAL_GetTick>
 8008e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e32:	e00d      	b.n	8008e50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e34:	f7fa f868 	bl	8002f08 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d906      	bls.n	8008e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e1d2      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
 8008e46:	bf00      	nop
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e50:	4b8c      	ldr	r3, [pc, #560]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1ea      	bne.n	8008e34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 80a6 	beq.w	8008fb8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e70:	4b84      	ldr	r3, [pc, #528]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d101      	bne.n	8008e80 <HAL_RCC_OscConfig+0x2b4>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e000      	b.n	8008e82 <HAL_RCC_OscConfig+0x2b6>
 8008e80:	2300      	movs	r3, #0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00d      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e86:	4b7f      	ldr	r3, [pc, #508]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8a:	4a7e      	ldr	r2, [pc, #504]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e90:	6593      	str	r3, [r2, #88]	; 0x58
 8008e92:	4b7c      	ldr	r3, [pc, #496]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ea2:	4b79      	ldr	r3, [pc, #484]	; (8009088 <HAL_RCC_OscConfig+0x4bc>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d118      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008eae:	4b76      	ldr	r3, [pc, #472]	; (8009088 <HAL_RCC_OscConfig+0x4bc>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a75      	ldr	r2, [pc, #468]	; (8009088 <HAL_RCC_OscConfig+0x4bc>)
 8008eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eba:	f7fa f825 	bl	8002f08 <HAL_GetTick>
 8008ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ec0:	e008      	b.n	8008ed4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ec2:	f7fa f821 	bl	8002f08 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d901      	bls.n	8008ed4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e18b      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ed4:	4b6c      	ldr	r3, [pc, #432]	; (8009088 <HAL_RCC_OscConfig+0x4bc>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0f0      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d108      	bne.n	8008efa <HAL_RCC_OscConfig+0x32e>
 8008ee8:	4b66      	ldr	r3, [pc, #408]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eee:	4a65      	ldr	r2, [pc, #404]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008ef8:	e024      	b.n	8008f44 <HAL_RCC_OscConfig+0x378>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b05      	cmp	r3, #5
 8008f00:	d110      	bne.n	8008f24 <HAL_RCC_OscConfig+0x358>
 8008f02:	4b60      	ldr	r3, [pc, #384]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f08:	4a5e      	ldr	r2, [pc, #376]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f0a:	f043 0304 	orr.w	r3, r3, #4
 8008f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f12:	4b5c      	ldr	r3, [pc, #368]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f18:	4a5a      	ldr	r2, [pc, #360]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f22:	e00f      	b.n	8008f44 <HAL_RCC_OscConfig+0x378>
 8008f24:	4b57      	ldr	r3, [pc, #348]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2a:	4a56      	ldr	r2, [pc, #344]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f34:	4b53      	ldr	r3, [pc, #332]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3a:	4a52      	ldr	r2, [pc, #328]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f3c:	f023 0304 	bic.w	r3, r3, #4
 8008f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d016      	beq.n	8008f7a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f4c:	f7f9 ffdc 	bl	8002f08 <HAL_GetTick>
 8008f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f52:	e00a      	b.n	8008f6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f54:	f7f9 ffd8 	bl	8002f08 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e140      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f6a:	4b46      	ldr	r3, [pc, #280]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0ed      	beq.n	8008f54 <HAL_RCC_OscConfig+0x388>
 8008f78:	e015      	b.n	8008fa6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f7a:	f7f9 ffc5 	bl	8002f08 <HAL_GetTick>
 8008f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f80:	e00a      	b.n	8008f98 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f82:	f7f9 ffc1 	bl	8002f08 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e129      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f98:	4b3a      	ldr	r3, [pc, #232]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1ed      	bne.n	8008f82 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008fa6:	7ffb      	ldrb	r3, [r7, #31]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d105      	bne.n	8008fb8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fac:	4b35      	ldr	r3, [pc, #212]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	4a34      	ldr	r2, [pc, #208]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d03c      	beq.n	800903e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01c      	beq.n	8009006 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fcc:	4b2d      	ldr	r3, [pc, #180]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008fd2:	4a2c      	ldr	r2, [pc, #176]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008fd4:	f043 0301 	orr.w	r3, r3, #1
 8008fd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fdc:	f7f9 ff94 	bl	8002f08 <HAL_GetTick>
 8008fe0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fe2:	e008      	b.n	8008ff6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fe4:	f7f9 ff90 	bl	8002f08 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e0fa      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ff6:	4b23      	ldr	r3, [pc, #140]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8008ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0ef      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x418>
 8009004:	e01b      	b.n	800903e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009006:	4b1f      	ldr	r3, [pc, #124]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8009008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800900c:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 800900e:	f023 0301 	bic.w	r3, r3, #1
 8009012:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009016:	f7f9 ff77 	bl	8002f08 <HAL_GetTick>
 800901a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800901c:	e008      	b.n	8009030 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800901e:	f7f9 ff73 	bl	8002f08 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e0dd      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009030:	4b14      	ldr	r3, [pc, #80]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8009032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1ef      	bne.n	800901e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80d1 	beq.w	80091ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009048:	4b0e      	ldr	r3, [pc, #56]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 030c 	and.w	r3, r3, #12
 8009050:	2b0c      	cmp	r3, #12
 8009052:	f000 808b 	beq.w	800916c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d15e      	bne.n	800911c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800905e:	4b09      	ldr	r3, [pc, #36]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a08      	ldr	r2, [pc, #32]	; (8009084 <HAL_RCC_OscConfig+0x4b8>)
 8009064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800906a:	f7f9 ff4d 	bl	8002f08 <HAL_GetTick>
 800906e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009070:	e00c      	b.n	800908c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009072:	f7f9 ff49 	bl	8002f08 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	2b02      	cmp	r3, #2
 800907e:	d905      	bls.n	800908c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e0b3      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
 8009084:	40021000 	.word	0x40021000
 8009088:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800908c:	4b59      	ldr	r3, [pc, #356]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1ec      	bne.n	8009072 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009098:	4b56      	ldr	r3, [pc, #344]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	4b56      	ldr	r3, [pc, #344]	; (80091f8 <HAL_RCC_OscConfig+0x62c>)
 800909e:	4013      	ands	r3, r2
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	6a11      	ldr	r1, [r2, #32]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090a8:	3a01      	subs	r2, #1
 80090aa:	0112      	lsls	r2, r2, #4
 80090ac:	4311      	orrs	r1, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80090b2:	0212      	lsls	r2, r2, #8
 80090b4:	4311      	orrs	r1, r2
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80090ba:	0852      	lsrs	r2, r2, #1
 80090bc:	3a01      	subs	r2, #1
 80090be:	0552      	lsls	r2, r2, #21
 80090c0:	4311      	orrs	r1, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80090c6:	0852      	lsrs	r2, r2, #1
 80090c8:	3a01      	subs	r2, #1
 80090ca:	0652      	lsls	r2, r2, #25
 80090cc:	4311      	orrs	r1, r2
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80090d2:	06d2      	lsls	r2, r2, #27
 80090d4:	430a      	orrs	r2, r1
 80090d6:	4947      	ldr	r1, [pc, #284]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090dc:	4b45      	ldr	r3, [pc, #276]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a44      	ldr	r2, [pc, #272]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 80090e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090e8:	4b42      	ldr	r3, [pc, #264]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	4a41      	ldr	r2, [pc, #260]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 80090ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f4:	f7f9 ff08 	bl	8002f08 <HAL_GetTick>
 80090f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090fa:	e008      	b.n	800910e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090fc:	f7f9 ff04 	bl	8002f08 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d901      	bls.n	800910e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e06e      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800910e:	4b39      	ldr	r3, [pc, #228]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0f0      	beq.n	80090fc <HAL_RCC_OscConfig+0x530>
 800911a:	e066      	b.n	80091ea <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800911c:	4b35      	ldr	r3, [pc, #212]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a34      	ldr	r2, [pc, #208]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 8009122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009126:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009128:	4b32      	ldr	r3, [pc, #200]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	4a31      	ldr	r2, [pc, #196]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009134:	4b2f      	ldr	r3, [pc, #188]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	4a2e      	ldr	r2, [pc, #184]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 800913a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800913e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009142:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009144:	f7f9 fee0 	bl	8002f08 <HAL_GetTick>
 8009148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800914a:	e008      	b.n	800915e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800914c:	f7f9 fedc 	bl	8002f08 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b02      	cmp	r3, #2
 8009158:	d901      	bls.n	800915e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800915a:	2303      	movs	r3, #3
 800915c:	e046      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800915e:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1f0      	bne.n	800914c <HAL_RCC_OscConfig+0x580>
 800916a:	e03e      	b.n	80091ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e039      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009178:	4b1e      	ldr	r3, [pc, #120]	; (80091f4 <HAL_RCC_OscConfig+0x628>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 0203 	and.w	r2, r3, #3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	429a      	cmp	r2, r3
 800918a:	d12c      	bne.n	80091e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	3b01      	subs	r3, #1
 8009198:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800919a:	429a      	cmp	r2, r3
 800919c:	d123      	bne.n	80091e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d11b      	bne.n	80091e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d113      	bne.n	80091e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	3b01      	subs	r3, #1
 80091cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d109      	bne.n	80091e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	3b01      	subs	r3, #1
 80091e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d001      	beq.n	80091ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e000      	b.n	80091ec <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	40021000 	.word	0x40021000
 80091f8:	019f800c 	.word	0x019f800c

080091fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009206:	2300      	movs	r3, #0
 8009208:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e11e      	b.n	8009452 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009214:	4b91      	ldr	r3, [pc, #580]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 030f 	and.w	r3, r3, #15
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d910      	bls.n	8009244 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009222:	4b8e      	ldr	r3, [pc, #568]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f023 020f 	bic.w	r2, r3, #15
 800922a:	498c      	ldr	r1, [pc, #560]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	4313      	orrs	r3, r2
 8009230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009232:	4b8a      	ldr	r3, [pc, #552]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d001      	beq.n	8009244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e106      	b.n	8009452 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0301 	and.w	r3, r3, #1
 800924c:	2b00      	cmp	r3, #0
 800924e:	d073      	beq.n	8009338 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d129      	bne.n	80092ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009258:	4b81      	ldr	r3, [pc, #516]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e0f4      	b.n	8009452 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009268:	f000 f99e 	bl	80095a8 <RCC_GetSysClockFreqFromPLLSource>
 800926c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	4a7c      	ldr	r2, [pc, #496]	; (8009464 <HAL_RCC_ClockConfig+0x268>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d93f      	bls.n	80092f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009276:	4b7a      	ldr	r3, [pc, #488]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d009      	beq.n	8009296 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800928a:	2b00      	cmp	r3, #0
 800928c:	d033      	beq.n	80092f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009292:	2b00      	cmp	r3, #0
 8009294:	d12f      	bne.n	80092f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009296:	4b72      	ldr	r3, [pc, #456]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800929e:	4a70      	ldr	r2, [pc, #448]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 80092a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80092a6:	2380      	movs	r3, #128	; 0x80
 80092a8:	617b      	str	r3, [r7, #20]
 80092aa:	e024      	b.n	80092f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d107      	bne.n	80092c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80092b4:	4b6a      	ldr	r3, [pc, #424]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d109      	bne.n	80092d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e0c6      	b.n	8009452 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092c4:	4b66      	ldr	r3, [pc, #408]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e0be      	b.n	8009452 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80092d4:	f000 f8ce 	bl	8009474 <HAL_RCC_GetSysClockFreq>
 80092d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	4a61      	ldr	r2, [pc, #388]	; (8009464 <HAL_RCC_ClockConfig+0x268>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d909      	bls.n	80092f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80092e2:	4b5f      	ldr	r3, [pc, #380]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092ea:	4a5d      	ldr	r2, [pc, #372]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 80092ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80092f2:	2380      	movs	r3, #128	; 0x80
 80092f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092f6:	4b5a      	ldr	r3, [pc, #360]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f023 0203 	bic.w	r2, r3, #3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	4957      	ldr	r1, [pc, #348]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009304:	4313      	orrs	r3, r2
 8009306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009308:	f7f9 fdfe 	bl	8002f08 <HAL_GetTick>
 800930c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800930e:	e00a      	b.n	8009326 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009310:	f7f9 fdfa 	bl	8002f08 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	f241 3288 	movw	r2, #5000	; 0x1388
 800931e:	4293      	cmp	r3, r2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e095      	b.n	8009452 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009326:	4b4e      	ldr	r3, [pc, #312]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 020c 	and.w	r2, r3, #12
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	429a      	cmp	r2, r3
 8009336:	d1eb      	bne.n	8009310 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d023      	beq.n	800938c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009350:	4b43      	ldr	r3, [pc, #268]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	4a42      	ldr	r2, [pc, #264]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800935a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d007      	beq.n	8009378 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009368:	4b3d      	ldr	r3, [pc, #244]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009370:	4a3b      	ldr	r2, [pc, #236]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009376:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009378:	4b39      	ldr	r3, [pc, #228]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	4936      	ldr	r1, [pc, #216]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009386:	4313      	orrs	r3, r2
 8009388:	608b      	str	r3, [r1, #8]
 800938a:	e008      	b.n	800939e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b80      	cmp	r3, #128	; 0x80
 8009390:	d105      	bne.n	800939e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009392:	4b33      	ldr	r3, [pc, #204]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	4a32      	ldr	r2, [pc, #200]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800939c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800939e:	4b2f      	ldr	r3, [pc, #188]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 030f 	and.w	r3, r3, #15
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d21d      	bcs.n	80093e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ac:	4b2b      	ldr	r3, [pc, #172]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f023 020f 	bic.w	r2, r3, #15
 80093b4:	4929      	ldr	r1, [pc, #164]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80093bc:	f7f9 fda4 	bl	8002f08 <HAL_GetTick>
 80093c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093c2:	e00a      	b.n	80093da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093c4:	f7f9 fda0 	bl	8002f08 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d901      	bls.n	80093da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e03b      	b.n	8009452 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093da:	4b20      	ldr	r3, [pc, #128]	; (800945c <HAL_RCC_ClockConfig+0x260>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 030f 	and.w	r3, r3, #15
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d1ed      	bne.n	80093c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d008      	beq.n	8009406 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093f4:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	4917      	ldr	r1, [pc, #92]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009402:	4313      	orrs	r3, r2
 8009404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009412:	4b13      	ldr	r3, [pc, #76]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	00db      	lsls	r3, r3, #3
 8009420:	490f      	ldr	r1, [pc, #60]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 8009422:	4313      	orrs	r3, r2
 8009424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009426:	f000 f825 	bl	8009474 <HAL_RCC_GetSysClockFreq>
 800942a:	4602      	mov	r2, r0
 800942c:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <HAL_RCC_ClockConfig+0x264>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	091b      	lsrs	r3, r3, #4
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	490c      	ldr	r1, [pc, #48]	; (8009468 <HAL_RCC_ClockConfig+0x26c>)
 8009438:	5ccb      	ldrb	r3, [r1, r3]
 800943a:	f003 031f 	and.w	r3, r3, #31
 800943e:	fa22 f303 	lsr.w	r3, r2, r3
 8009442:	4a0a      	ldr	r2, [pc, #40]	; (800946c <HAL_RCC_ClockConfig+0x270>)
 8009444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009446:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <HAL_RCC_ClockConfig+0x274>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f7fc fac0 	bl	80059d0 <HAL_InitTick>
 8009450:	4603      	mov	r3, r0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	40022000 	.word	0x40022000
 8009460:	40021000 	.word	0x40021000
 8009464:	04c4b400 	.word	0x04c4b400
 8009468:	0800fe44 	.word	0x0800fe44
 800946c:	20000008 	.word	0x20000008
 8009470:	2000000c 	.word	0x2000000c

08009474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800947a:	4b2c      	ldr	r3, [pc, #176]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	2b04      	cmp	r3, #4
 8009484:	d102      	bne.n	800948c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009486:	4b2a      	ldr	r3, [pc, #168]	; (8009530 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009488:	613b      	str	r3, [r7, #16]
 800948a:	e047      	b.n	800951c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800948c:	4b27      	ldr	r3, [pc, #156]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f003 030c 	and.w	r3, r3, #12
 8009494:	2b08      	cmp	r3, #8
 8009496:	d102      	bne.n	800949e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009498:	4b26      	ldr	r3, [pc, #152]	; (8009534 <HAL_RCC_GetSysClockFreq+0xc0>)
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	e03e      	b.n	800951c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800949e:	4b23      	ldr	r3, [pc, #140]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 030c 	and.w	r3, r3, #12
 80094a6:	2b0c      	cmp	r3, #12
 80094a8:	d136      	bne.n	8009518 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80094aa:	4b20      	ldr	r3, [pc, #128]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80094b4:	4b1d      	ldr	r3, [pc, #116]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	091b      	lsrs	r3, r3, #4
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	3301      	adds	r3, #1
 80094c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d10c      	bne.n	80094e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094c8:	4a1a      	ldr	r2, [pc, #104]	; (8009534 <HAL_RCC_GetSysClockFreq+0xc0>)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d0:	4a16      	ldr	r2, [pc, #88]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094d2:	68d2      	ldr	r2, [r2, #12]
 80094d4:	0a12      	lsrs	r2, r2, #8
 80094d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80094da:	fb02 f303 	mul.w	r3, r2, r3
 80094de:	617b      	str	r3, [r7, #20]
      break;
 80094e0:	e00c      	b.n	80094fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80094e2:	4a13      	ldr	r2, [pc, #76]	; (8009530 <HAL_RCC_GetSysClockFreq+0xbc>)
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ea:	4a10      	ldr	r2, [pc, #64]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ec:	68d2      	ldr	r2, [r2, #12]
 80094ee:	0a12      	lsrs	r2, r2, #8
 80094f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80094f4:	fb02 f303 	mul.w	r3, r2, r3
 80094f8:	617b      	str	r3, [r7, #20]
      break;
 80094fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80094fc:	4b0b      	ldr	r3, [pc, #44]	; (800952c <HAL_RCC_GetSysClockFreq+0xb8>)
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	0e5b      	lsrs	r3, r3, #25
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	3301      	adds	r3, #1
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	fbb2 f3f3 	udiv	r3, r2, r3
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e001      	b.n	800951c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800951c:	693b      	ldr	r3, [r7, #16]
}
 800951e:	4618      	mov	r0, r3
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	40021000 	.word	0x40021000
 8009530:	00f42400 	.word	0x00f42400
 8009534:	007a1200 	.word	0x007a1200

08009538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800953c:	4b03      	ldr	r3, [pc, #12]	; (800954c <HAL_RCC_GetHCLKFreq+0x14>)
 800953e:	681b      	ldr	r3, [r3, #0]
}
 8009540:	4618      	mov	r0, r3
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20000008 	.word	0x20000008

08009550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009554:	f7ff fff0 	bl	8009538 <HAL_RCC_GetHCLKFreq>
 8009558:	4602      	mov	r2, r0
 800955a:	4b06      	ldr	r3, [pc, #24]	; (8009574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	f003 0307 	and.w	r3, r3, #7
 8009564:	4904      	ldr	r1, [pc, #16]	; (8009578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009566:	5ccb      	ldrb	r3, [r1, r3]
 8009568:	f003 031f 	and.w	r3, r3, #31
 800956c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009570:	4618      	mov	r0, r3
 8009572:	bd80      	pop	{r7, pc}
 8009574:	40021000 	.word	0x40021000
 8009578:	0800fe54 	.word	0x0800fe54

0800957c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009580:	f7ff ffda 	bl	8009538 <HAL_RCC_GetHCLKFreq>
 8009584:	4602      	mov	r2, r0
 8009586:	4b06      	ldr	r3, [pc, #24]	; (80095a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	0adb      	lsrs	r3, r3, #11
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	4904      	ldr	r1, [pc, #16]	; (80095a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009592:	5ccb      	ldrb	r3, [r1, r3]
 8009594:	f003 031f 	and.w	r3, r3, #31
 8009598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800959c:	4618      	mov	r0, r3
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40021000 	.word	0x40021000
 80095a4:	0800fe54 	.word	0x0800fe54

080095a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80095ae:	4b1e      	ldr	r3, [pc, #120]	; (8009628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f003 0303 	and.w	r3, r3, #3
 80095b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80095b8:	4b1b      	ldr	r3, [pc, #108]	; (8009628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	091b      	lsrs	r3, r3, #4
 80095be:	f003 030f 	and.w	r3, r3, #15
 80095c2:	3301      	adds	r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d10c      	bne.n	80095e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095cc:	4a17      	ldr	r2, [pc, #92]	; (800962c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d4:	4a14      	ldr	r2, [pc, #80]	; (8009628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095d6:	68d2      	ldr	r2, [r2, #12]
 80095d8:	0a12      	lsrs	r2, r2, #8
 80095da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095de:	fb02 f303 	mul.w	r3, r2, r3
 80095e2:	617b      	str	r3, [r7, #20]
    break;
 80095e4:	e00c      	b.n	8009600 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80095e6:	4a12      	ldr	r2, [pc, #72]	; (8009630 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ee:	4a0e      	ldr	r2, [pc, #56]	; (8009628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80095f0:	68d2      	ldr	r2, [r2, #12]
 80095f2:	0a12      	lsrs	r2, r2, #8
 80095f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80095f8:	fb02 f303 	mul.w	r3, r2, r3
 80095fc:	617b      	str	r3, [r7, #20]
    break;
 80095fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009600:	4b09      	ldr	r3, [pc, #36]	; (8009628 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	0e5b      	lsrs	r3, r3, #25
 8009606:	f003 0303 	and.w	r3, r3, #3
 800960a:	3301      	adds	r3, #1
 800960c:	005b      	lsls	r3, r3, #1
 800960e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009610:	697a      	ldr	r2, [r7, #20]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	fbb2 f3f3 	udiv	r3, r2, r3
 8009618:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800961a:	687b      	ldr	r3, [r7, #4]
}
 800961c:	4618      	mov	r0, r3
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	40021000 	.word	0x40021000
 800962c:	007a1200 	.word	0x007a1200
 8009630:	00f42400 	.word	0x00f42400

08009634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800963c:	2300      	movs	r3, #0
 800963e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009640:	2300      	movs	r3, #0
 8009642:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 8098 	beq.w	8009782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009652:	2300      	movs	r3, #0
 8009654:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009656:	4b43      	ldr	r3, [pc, #268]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800965a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10d      	bne.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009662:	4b40      	ldr	r3, [pc, #256]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009666:	4a3f      	ldr	r2, [pc, #252]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800966c:	6593      	str	r3, [r2, #88]	; 0x58
 800966e:	4b3d      	ldr	r3, [pc, #244]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009676:	60bb      	str	r3, [r7, #8]
 8009678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800967a:	2301      	movs	r3, #1
 800967c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800967e:	4b3a      	ldr	r3, [pc, #232]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a39      	ldr	r2, [pc, #228]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009688:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800968a:	f7f9 fc3d 	bl	8002f08 <HAL_GetTick>
 800968e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009690:	e009      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009692:	f7f9 fc39 	bl	8002f08 <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	2b02      	cmp	r3, #2
 800969e:	d902      	bls.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80096a0:	2303      	movs	r3, #3
 80096a2:	74fb      	strb	r3, [r7, #19]
        break;
 80096a4:	e005      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096a6:	4b30      	ldr	r3, [pc, #192]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0ef      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80096b2:	7cfb      	ldrb	r3, [r7, #19]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d159      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01e      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d019      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80096d4:	4b23      	ldr	r3, [pc, #140]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096e0:	4b20      	ldr	r3, [pc, #128]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e6:	4a1f      	ldr	r2, [pc, #124]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096f0:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096f6:	4a1b      	ldr	r2, [pc, #108]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009700:	4a18      	ldr	r2, [pc, #96]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d016      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009712:	f7f9 fbf9 	bl	8002f08 <HAL_GetTick>
 8009716:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009718:	e00b      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800971a:	f7f9 fbf5 	bl	8002f08 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	4293      	cmp	r3, r2
 800972a:	d902      	bls.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	74fb      	strb	r3, [r7, #19]
            break;
 8009730:	e006      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0ec      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009740:	7cfb      	ldrb	r3, [r7, #19]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10b      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009746:	4b07      	ldr	r3, [pc, #28]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009754:	4903      	ldr	r1, [pc, #12]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009756:	4313      	orrs	r3, r2
 8009758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800975c:	e008      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800975e:	7cfb      	ldrb	r3, [r7, #19]
 8009760:	74bb      	strb	r3, [r7, #18]
 8009762:	e005      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009764:	40021000 	.word	0x40021000
 8009768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976c:	7cfb      	ldrb	r3, [r7, #19]
 800976e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009770:	7c7b      	ldrb	r3, [r7, #17]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d105      	bne.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009776:	4ba7      	ldr	r3, [pc, #668]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800977a:	4aa6      	ldr	r2, [pc, #664]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800977c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009780:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800978e:	4ba1      	ldr	r3, [pc, #644]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009794:	f023 0203 	bic.w	r2, r3, #3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	499d      	ldr	r1, [pc, #628]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0302 	and.w	r3, r3, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80097b0:	4b98      	ldr	r3, [pc, #608]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b6:	f023 020c 	bic.w	r2, r3, #12
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	4995      	ldr	r1, [pc, #596]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80097d2:	4b90      	ldr	r3, [pc, #576]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	498c      	ldr	r1, [pc, #560]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80097f4:	4b87      	ldr	r3, [pc, #540]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	4984      	ldr	r1, [pc, #528]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009804:	4313      	orrs	r3, r2
 8009806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0310 	and.w	r3, r3, #16
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009816:	4b7f      	ldr	r3, [pc, #508]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800981c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	497b      	ldr	r1, [pc, #492]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009826:	4313      	orrs	r3, r2
 8009828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0320 	and.w	r3, r3, #32
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00a      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009838:	4b76      	ldr	r3, [pc, #472]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800983a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800983e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	4973      	ldr	r1, [pc, #460]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009848:	4313      	orrs	r3, r2
 800984a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800985a:	4b6e      	ldr	r3, [pc, #440]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800985c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	496a      	ldr	r1, [pc, #424]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800986a:	4313      	orrs	r3, r2
 800986c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800987c:	4b65      	ldr	r3, [pc, #404]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800987e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009882:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	4962      	ldr	r1, [pc, #392]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800988c:	4313      	orrs	r3, r2
 800988e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800989e:	4b5d      	ldr	r3, [pc, #372]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	4959      	ldr	r1, [pc, #356]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098c0:	4b54      	ldr	r3, [pc, #336]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098c6:	f023 0203 	bic.w	r2, r3, #3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ce:	4951      	ldr	r1, [pc, #324]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098e2:	4b4c      	ldr	r3, [pc, #304]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f0:	4948      	ldr	r1, [pc, #288]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009900:	2b00      	cmp	r3, #0
 8009902:	d015      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009904:	4b43      	ldr	r3, [pc, #268]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800990a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009912:	4940      	ldr	r1, [pc, #256]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009914:	4313      	orrs	r3, r2
 8009916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009922:	d105      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009924:	4b3b      	ldr	r3, [pc, #236]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	4a3a      	ldr	r2, [pc, #232]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800992a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800992e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009938:	2b00      	cmp	r3, #0
 800993a:	d015      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800993c:	4b35      	ldr	r3, [pc, #212]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800993e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	4932      	ldr	r1, [pc, #200]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800994c:	4313      	orrs	r3, r2
 800994e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800995a:	d105      	bne.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800995c:	4b2d      	ldr	r3, [pc, #180]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	4a2c      	ldr	r2, [pc, #176]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009966:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d015      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009974:	4b27      	ldr	r3, [pc, #156]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	4924      	ldr	r1, [pc, #144]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009984:	4313      	orrs	r3, r2
 8009986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009992:	d105      	bne.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009994:	4b1f      	ldr	r3, [pc, #124]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4a1e      	ldr	r2, [pc, #120]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800999e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d015      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099ac:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ba:	4916      	ldr	r1, [pc, #88]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099ca:	d105      	bne.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099cc:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	4a10      	ldr	r2, [pc, #64]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d019      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099e4:	4b0b      	ldr	r3, [pc, #44]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	4908      	ldr	r1, [pc, #32]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a02:	d109      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a04:	4b03      	ldr	r3, [pc, #12]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	4a02      	ldr	r2, [pc, #8]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a0e:	60d3      	str	r3, [r2, #12]
 8009a10:	e002      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009a12:	bf00      	nop
 8009a14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d015      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a32:	4926      	ldr	r1, [pc, #152]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a42:	d105      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a44:	4b21      	ldr	r3, [pc, #132]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	4a20      	ldr	r2, [pc, #128]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d015      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009a5c:	4b1b      	ldr	r3, [pc, #108]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a62:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a6a:	4918      	ldr	r1, [pc, #96]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7a:	d105      	bne.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a7c:	4b13      	ldr	r3, [pc, #76]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	4a12      	ldr	r2, [pc, #72]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d015      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a94:	4b0d      	ldr	r3, [pc, #52]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa2:	490a      	ldr	r1, [pc, #40]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ab2:	d105      	bne.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ab4:	4b05      	ldr	r3, [pc, #20]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	4a04      	ldr	r2, [pc, #16]	; (8009acc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009abe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	40021000 	.word	0x40021000

08009ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e09d      	b.n	8009c1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d108      	bne.n	8009afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009af2:	d009      	beq.n	8009b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	61da      	str	r2, [r3, #28]
 8009afa:	e005      	b.n	8009b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7fb f99a 	bl	8004e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b48:	d902      	bls.n	8009b50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	e002      	b.n	8009b56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009b5e:	d007      	beq.n	8009b70 <HAL_SPI_Init+0xa0>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b68:	d002      	beq.n	8009b70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b80:	431a      	orrs	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	431a      	orrs	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b9e:	431a      	orrs	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb2:	ea42 0103 	orr.w	r1, r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	0c1b      	lsrs	r3, r3, #16
 8009bcc:	f003 0204 	and.w	r2, r3, #4
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	f003 0310 	and.w	r3, r3, #16
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bde:	f003 0308 	and.w	r3, r3, #8
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009bec:	ea42 0103 	orr.w	r1, r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69da      	ldr	r2, [r3, #28]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b08a      	sub	sp, #40	; 0x28
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
 8009c32:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c34:	2301      	movs	r3, #1
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_SPI_TransmitReceive+0x26>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e1fb      	b.n	800a044 <HAL_SPI_TransmitReceive+0x41e>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c54:	f7f9 f958 	bl	8002f08 <HAL_GetTick>
 8009c58:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c60:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009c68:	887b      	ldrh	r3, [r7, #2]
 8009c6a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009c6c:	887b      	ldrh	r3, [r7, #2]
 8009c6e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c70:	7efb      	ldrb	r3, [r7, #27]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d00e      	beq.n	8009c94 <HAL_SPI_TransmitReceive+0x6e>
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c7c:	d106      	bne.n	8009c8c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d102      	bne.n	8009c8c <HAL_SPI_TransmitReceive+0x66>
 8009c86:	7efb      	ldrb	r3, [r7, #27]
 8009c88:	2b04      	cmp	r3, #4
 8009c8a:	d003      	beq.n	8009c94 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009c92:	e1cd      	b.n	800a030 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d005      	beq.n	8009ca6 <HAL_SPI_TransmitReceive+0x80>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <HAL_SPI_TransmitReceive+0x80>
 8009ca0:	887b      	ldrh	r3, [r7, #2]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d103      	bne.n	8009cae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009cac:	e1c0      	b.n	800a030 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	d003      	beq.n	8009cc2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2205      	movs	r2, #5
 8009cbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	887a      	ldrh	r2, [r7, #2]
 8009cd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	887a      	ldrh	r2, [r7, #2]
 8009cda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	887a      	ldrh	r2, [r7, #2]
 8009ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	887a      	ldrh	r2, [r7, #2]
 8009cee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d04:	d802      	bhi.n	8009d0c <HAL_SPI_TransmitReceive+0xe6>
 8009d06:	8a3b      	ldrh	r3, [r7, #16]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d908      	bls.n	8009d1e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	685a      	ldr	r2, [r3, #4]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d1a:	605a      	str	r2, [r3, #4]
 8009d1c:	e007      	b.n	8009d2e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d38:	2b40      	cmp	r3, #64	; 0x40
 8009d3a:	d007      	beq.n	8009d4c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d54:	d97c      	bls.n	8009e50 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <HAL_SPI_TransmitReceive+0x13e>
 8009d5e:	8a7b      	ldrh	r3, [r7, #18]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d169      	bne.n	8009e38 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d68:	881a      	ldrh	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d74:	1c9a      	adds	r2, r3, #2
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	3b01      	subs	r3, #1
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d88:	e056      	b.n	8009e38 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d11b      	bne.n	8009dd0 <HAL_SPI_TransmitReceive+0x1aa>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d016      	beq.n	8009dd0 <HAL_SPI_TransmitReceive+0x1aa>
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d113      	bne.n	8009dd0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dac:	881a      	ldrh	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db8:	1c9a      	adds	r2, r3, #2
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d11c      	bne.n	8009e18 <HAL_SPI_TransmitReceive+0x1f2>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d016      	beq.n	8009e18 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df4:	b292      	uxth	r2, r2
 8009df6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	1c9a      	adds	r2, r3, #2
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e14:	2301      	movs	r3, #1
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e18:	f7f9 f876 	bl	8002f08 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d807      	bhi.n	8009e38 <HAL_SPI_TransmitReceive+0x212>
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2e:	d003      	beq.n	8009e38 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009e36:	e0fb      	b.n	800a030 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1a3      	bne.n	8009d8a <HAL_SPI_TransmitReceive+0x164>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d19d      	bne.n	8009d8a <HAL_SPI_TransmitReceive+0x164>
 8009e4e:	e0df      	b.n	800a010 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <HAL_SPI_TransmitReceive+0x23a>
 8009e58:	8a7b      	ldrh	r3, [r7, #18]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	f040 80cb 	bne.w	8009ff6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d912      	bls.n	8009e90 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6e:	881a      	ldrh	r2, [r3, #0]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	1c9a      	adds	r2, r3, #2
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	3b02      	subs	r3, #2
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e8e:	e0b2      	b.n	8009ff6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eb6:	e09e      	b.n	8009ff6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d134      	bne.n	8009f30 <HAL_SPI_TransmitReceive+0x30a>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d02f      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x30a>
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d12c      	bne.n	8009f30 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d912      	bls.n	8009f06 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee4:	881a      	ldrh	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef0:	1c9a      	adds	r2, r3, #2
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3b02      	subs	r3, #2
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009f04:	e012      	b.n	8009f2c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	330c      	adds	r3, #12
 8009f10:	7812      	ldrb	r2, [r2, #0]
 8009f12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d148      	bne.n	8009fd0 <HAL_SPI_TransmitReceive+0x3aa>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d042      	beq.n	8009fd0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d923      	bls.n	8009f9e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68da      	ldr	r2, [r3, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	b292      	uxth	r2, r2
 8009f62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f68:	1c9a      	adds	r2, r3, #2
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	3b02      	subs	r3, #2
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d81f      	bhi.n	8009fcc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f9a:	605a      	str	r2, [r3, #4]
 8009f9c:	e016      	b.n	8009fcc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f103 020c 	add.w	r2, r3, #12
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	7812      	ldrb	r2, [r2, #0]
 8009fac:	b2d2      	uxtb	r2, r2
 8009fae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	1c5a      	adds	r2, r3, #1
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009fd0:	f7f8 ff9a 	bl	8002f08 <HAL_GetTick>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d803      	bhi.n	8009fe8 <HAL_SPI_TransmitReceive+0x3c2>
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe6:	d102      	bne.n	8009fee <HAL_SPI_TransmitReceive+0x3c8>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009ff4:	e01c      	b.n	800a030 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f47f af5b 	bne.w	8009eb8 <HAL_SPI_TransmitReceive+0x292>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a008:	b29b      	uxth	r3, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f47f af54 	bne.w	8009eb8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a010:	69fa      	ldr	r2, [r7, #28]
 800a012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 f937 	bl	800a288 <SPI_EndRxTxTransaction>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d006      	beq.n	800a02e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2220      	movs	r2, #32
 800a02a:	661a      	str	r2, [r3, #96]	; 0x60
 800a02c:	e000      	b.n	800a030 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a02e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a044:	4618      	mov	r0, r3
 800a046:	3728      	adds	r7, #40	; 0x28
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b088      	sub	sp, #32
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	603b      	str	r3, [r7, #0]
 800a058:	4613      	mov	r3, r2
 800a05a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a05c:	f7f8 ff54 	bl	8002f08 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	1a9b      	subs	r3, r3, r2
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	4413      	add	r3, r2
 800a06a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a06c:	f7f8 ff4c 	bl	8002f08 <HAL_GetTick>
 800a070:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a072:	4b39      	ldr	r3, [pc, #228]	; (800a158 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	015b      	lsls	r3, r3, #5
 800a078:	0d1b      	lsrs	r3, r3, #20
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	fb02 f303 	mul.w	r3, r2, r3
 800a080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a082:	e054      	b.n	800a12e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08a:	d050      	beq.n	800a12e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a08c:	f7f8 ff3c 	bl	8002f08 <HAL_GetTick>
 800a090:	4602      	mov	r2, r0
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d902      	bls.n	800a0a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d13d      	bne.n	800a11e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0ba:	d111      	bne.n	800a0e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0c4:	d004      	beq.n	800a0d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ce:	d107      	bne.n	800a0e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0e8:	d10f      	bne.n	800a10a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e017      	b.n	800a14e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4013      	ands	r3, r2
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	bf0c      	ite	eq
 800a13e:	2301      	moveq	r3, #1
 800a140:	2300      	movne	r3, #0
 800a142:	b2db      	uxtb	r3, r3
 800a144:	461a      	mov	r2, r3
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d19b      	bne.n	800a084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3720      	adds	r7, #32
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000008 	.word	0x20000008

0800a15c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08a      	sub	sp, #40	; 0x28
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a16e:	f7f8 fecb 	bl	8002f08 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	4413      	add	r3, r2
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a17e:	f7f8 fec3 	bl	8002f08 <HAL_GetTick>
 800a182:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	330c      	adds	r3, #12
 800a18a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a18c:	4b3d      	ldr	r3, [pc, #244]	; (800a284 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	4613      	mov	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	00da      	lsls	r2, r3, #3
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	0d1b      	lsrs	r3, r3, #20
 800a19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19e:	fb02 f303 	mul.w	r3, r2, r3
 800a1a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a1a4:	e060      	b.n	800a268 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a1ac:	d107      	bne.n	800a1be <SPI_WaitFifoStateUntilTimeout+0x62>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d104      	bne.n	800a1be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c4:	d050      	beq.n	800a268 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1c6:	f7f8 fe9f 	bl	8002f08 <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d902      	bls.n	800a1dc <SPI_WaitFifoStateUntilTimeout+0x80>
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d13d      	bne.n	800a258 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1f4:	d111      	bne.n	800a21a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1fe:	d004      	beq.n	800a20a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a208:	d107      	bne.n	800a21a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a218:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a222:	d10f      	bne.n	800a244 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a242:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e010      	b.n	800a27a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	3b01      	subs	r3, #1
 800a266:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	689a      	ldr	r2, [r3, #8]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	4013      	ands	r3, r2
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d196      	bne.n	800a1a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3728      	adds	r7, #40	; 0x28
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000008 	.word	0x20000008

0800a288 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f7ff ff5b 	bl	800a15c <SPI_WaitFifoStateUntilTimeout>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d007      	beq.n	800a2bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b0:	f043 0220 	orr.w	r2, r3, #32
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	e027      	b.n	800a30c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2180      	movs	r1, #128	; 0x80
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fec0 	bl	800a04c <SPI_WaitFlagStateUntilTimeout>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d007      	beq.n	800a2e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d6:	f043 0220 	orr.w	r2, r3, #32
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e014      	b.n	800a30c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f7ff ff34 	bl	800a15c <SPI_WaitFifoStateUntilTimeout>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2fe:	f043 0220 	orr.w	r2, r3, #32
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e000      	b.n	800a30c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e049      	b.n	800a3ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d106      	bne.n	800a340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7fb f81a 	bl	8005374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2202      	movs	r2, #2
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3304      	adds	r3, #4
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f000 fcd4 	bl	800ad00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d001      	beq.n	800a3dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e054      	b.n	800a486 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 0201 	orr.w	r2, r2, #1
 800a3f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a26      	ldr	r2, [pc, #152]	; (800a494 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d022      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x80>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a406:	d01d      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x80>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a22      	ldr	r2, [pc, #136]	; (800a498 <HAL_TIM_Base_Start_IT+0xd4>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d018      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x80>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a21      	ldr	r2, [pc, #132]	; (800a49c <HAL_TIM_Base_Start_IT+0xd8>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d013      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x80>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1f      	ldr	r2, [pc, #124]	; (800a4a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00e      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x80>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a1e      	ldr	r2, [pc, #120]	; (800a4a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d009      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x80>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a1c      	ldr	r2, [pc, #112]	; (800a4a8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d004      	beq.n	800a444 <HAL_TIM_Base_Start_IT+0x80>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a1b      	ldr	r2, [pc, #108]	; (800a4ac <HAL_TIM_Base_Start_IT+0xe8>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d115      	bne.n	800a470 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	689a      	ldr	r2, [r3, #8]
 800a44a:	4b19      	ldr	r3, [pc, #100]	; (800a4b0 <HAL_TIM_Base_Start_IT+0xec>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b06      	cmp	r3, #6
 800a454:	d015      	beq.n	800a482 <HAL_TIM_Base_Start_IT+0xbe>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a45c:	d011      	beq.n	800a482 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f042 0201 	orr.w	r2, r2, #1
 800a46c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a46e:	e008      	b.n	800a482 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f042 0201 	orr.w	r2, r2, #1
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	e000      	b.n	800a484 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a482:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	40012c00 	.word	0x40012c00
 800a498:	40000400 	.word	0x40000400
 800a49c:	40000800 	.word	0x40000800
 800a4a0:	40000c00 	.word	0x40000c00
 800a4a4:	40013400 	.word	0x40013400
 800a4a8:	40014000 	.word	0x40014000
 800a4ac:	40015000 	.word	0x40015000
 800a4b0:	00010007 	.word	0x00010007

0800a4b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e049      	b.n	800a55a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d106      	bne.n	800a4e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7fa ff2a 	bl	8005334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2202      	movs	r2, #2
 800a4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f000 fc04 	bl	800ad00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
	...

0800a564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <HAL_TIM_PWM_Start+0x24>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	bf14      	ite	ne
 800a580:	2301      	movne	r3, #1
 800a582:	2300      	moveq	r3, #0
 800a584:	b2db      	uxtb	r3, r3
 800a586:	e03c      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	d109      	bne.n	800a5a2 <HAL_TIM_PWM_Start+0x3e>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b01      	cmp	r3, #1
 800a598:	bf14      	ite	ne
 800a59a:	2301      	movne	r3, #1
 800a59c:	2300      	moveq	r3, #0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	e02f      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d109      	bne.n	800a5bc <HAL_TIM_PWM_Start+0x58>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	bf14      	ite	ne
 800a5b4:	2301      	movne	r3, #1
 800a5b6:	2300      	moveq	r3, #0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	e022      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b0c      	cmp	r3, #12
 800a5c0:	d109      	bne.n	800a5d6 <HAL_TIM_PWM_Start+0x72>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	bf14      	ite	ne
 800a5ce:	2301      	movne	r3, #1
 800a5d0:	2300      	moveq	r3, #0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	e015      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b10      	cmp	r3, #16
 800a5da:	d109      	bne.n	800a5f0 <HAL_TIM_PWM_Start+0x8c>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	bf14      	ite	ne
 800a5e8:	2301      	movne	r3, #1
 800a5ea:	2300      	moveq	r3, #0
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	e008      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	bf14      	ite	ne
 800a5fc:	2301      	movne	r3, #1
 800a5fe:	2300      	moveq	r3, #0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e0a6      	b.n	800a758 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <HAL_TIM_PWM_Start+0xb6>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a618:	e023      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	d104      	bne.n	800a62a <HAL_TIM_PWM_Start+0xc6>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a628:	e01b      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d104      	bne.n	800a63a <HAL_TIM_PWM_Start+0xd6>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a638:	e013      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b0c      	cmp	r3, #12
 800a63e:	d104      	bne.n	800a64a <HAL_TIM_PWM_Start+0xe6>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a648:	e00b      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d104      	bne.n	800a65a <HAL_TIM_PWM_Start+0xf6>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a658:	e003      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2202      	movs	r2, #2
 800a65e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2201      	movs	r2, #1
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 ff1a 	bl	800b4a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a3a      	ldr	r2, [pc, #232]	; (800a760 <HAL_TIM_PWM_Start+0x1fc>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d018      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a39      	ldr	r2, [pc, #228]	; (800a764 <HAL_TIM_PWM_Start+0x200>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d013      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a37      	ldr	r2, [pc, #220]	; (800a768 <HAL_TIM_PWM_Start+0x204>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00e      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a36      	ldr	r2, [pc, #216]	; (800a76c <HAL_TIM_PWM_Start+0x208>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d009      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a34      	ldr	r2, [pc, #208]	; (800a770 <HAL_TIM_PWM_Start+0x20c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d004      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a33      	ldr	r2, [pc, #204]	; (800a774 <HAL_TIM_PWM_Start+0x210>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d101      	bne.n	800a6b0 <HAL_TIM_PWM_Start+0x14c>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e000      	b.n	800a6b2 <HAL_TIM_PWM_Start+0x14e>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d007      	beq.n	800a6c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a25      	ldr	r2, [pc, #148]	; (800a760 <HAL_TIM_PWM_Start+0x1fc>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d022      	beq.n	800a716 <HAL_TIM_PWM_Start+0x1b2>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6d8:	d01d      	beq.n	800a716 <HAL_TIM_PWM_Start+0x1b2>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a26      	ldr	r2, [pc, #152]	; (800a778 <HAL_TIM_PWM_Start+0x214>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d018      	beq.n	800a716 <HAL_TIM_PWM_Start+0x1b2>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a24      	ldr	r2, [pc, #144]	; (800a77c <HAL_TIM_PWM_Start+0x218>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d013      	beq.n	800a716 <HAL_TIM_PWM_Start+0x1b2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a23      	ldr	r2, [pc, #140]	; (800a780 <HAL_TIM_PWM_Start+0x21c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00e      	beq.n	800a716 <HAL_TIM_PWM_Start+0x1b2>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a19      	ldr	r2, [pc, #100]	; (800a764 <HAL_TIM_PWM_Start+0x200>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d009      	beq.n	800a716 <HAL_TIM_PWM_Start+0x1b2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <HAL_TIM_PWM_Start+0x204>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d004      	beq.n	800a716 <HAL_TIM_PWM_Start+0x1b2>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a18      	ldr	r2, [pc, #96]	; (800a774 <HAL_TIM_PWM_Start+0x210>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d115      	bne.n	800a742 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	4b19      	ldr	r3, [pc, #100]	; (800a784 <HAL_TIM_PWM_Start+0x220>)
 800a71e:	4013      	ands	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b06      	cmp	r3, #6
 800a726:	d015      	beq.n	800a754 <HAL_TIM_PWM_Start+0x1f0>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a72e:	d011      	beq.n	800a754 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a740:	e008      	b.n	800a754 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f042 0201 	orr.w	r2, r2, #1
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	e000      	b.n	800a756 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a754:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	40012c00 	.word	0x40012c00
 800a764:	40013400 	.word	0x40013400
 800a768:	40014000 	.word	0x40014000
 800a76c:	40014400 	.word	0x40014400
 800a770:	40014800 	.word	0x40014800
 800a774:	40015000 	.word	0x40015000
 800a778:	40000400 	.word	0x40000400
 800a77c:	40000800 	.word	0x40000800
 800a780:	40000c00 	.word	0x40000c00
 800a784:	00010007 	.word	0x00010007

0800a788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d122      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d11b      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0202 	mvn.w	r2, #2
 800a7b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fa7a 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a7d0:	e005      	b.n	800a7de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fa6c 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fa7d 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f003 0304 	and.w	r3, r3, #4
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d122      	bne.n	800a838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	d11b      	bne.n	800a838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f06f 0204 	mvn.w	r2, #4
 800a808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2202      	movs	r2, #2
 800a80e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fa50 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a824:	e005      	b.n	800a832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fa42 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fa53 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	f003 0308 	and.w	r3, r3, #8
 800a842:	2b08      	cmp	r3, #8
 800a844:	d122      	bne.n	800a88c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f003 0308 	and.w	r3, r3, #8
 800a850:	2b08      	cmp	r3, #8
 800a852:	d11b      	bne.n	800a88c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f06f 0208 	mvn.w	r2, #8
 800a85c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2204      	movs	r2, #4
 800a862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d003      	beq.n	800a87a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa26 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a878:	e005      	b.n	800a886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa18 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa29 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	f003 0310 	and.w	r3, r3, #16
 800a896:	2b10      	cmp	r3, #16
 800a898:	d122      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f003 0310 	and.w	r3, r3, #16
 800a8a4:	2b10      	cmp	r3, #16
 800a8a6:	d11b      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f06f 0210 	mvn.w	r2, #16
 800a8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2208      	movs	r2, #8
 800a8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f9fc 	bl	800acc4 <HAL_TIM_IC_CaptureCallback>
 800a8cc:	e005      	b.n	800a8da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f9ee 	bl	800acb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f9ff 	bl	800acd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d10e      	bne.n	800a90c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d107      	bne.n	800a90c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f06f 0201 	mvn.w	r2, #1
 800a904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7f8 fc96 	bl	8003238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a916:	2b80      	cmp	r3, #128	; 0x80
 800a918:	d10e      	bne.n	800a938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a924:	2b80      	cmp	r3, #128	; 0x80
 800a926:	d107      	bne.n	800a938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fe7c 	bl	800b630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a946:	d10e      	bne.n	800a966 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a952:	2b80      	cmp	r3, #128	; 0x80
 800a954:	d107      	bne.n	800a966 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a95e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fe6f 	bl	800b644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a970:	2b40      	cmp	r3, #64	; 0x40
 800a972:	d10e      	bne.n	800a992 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97e:	2b40      	cmp	r3, #64	; 0x40
 800a980:	d107      	bne.n	800a992 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a98a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f9ad 	bl	800acec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	d10e      	bne.n	800a9be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f003 0320 	and.w	r3, r3, #32
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d107      	bne.n	800a9be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f06f 0220 	mvn.w	r2, #32
 800a9b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fe2f 	bl	800b61c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9cc:	d10f      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9dc:	d107      	bne.n	800a9ee <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fe35 	bl	800b658 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9fc:	d10f      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa0c:	d107      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800aa16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fe27 	bl	800b66c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa2c:	d10f      	bne.n	800aa4e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa3c:	d107      	bne.n	800aa4e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800aa46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fe19 	bl	800b680 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa5c:	d10f      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa6c:	d107      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800aa76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fe0b 	bl	800b694 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	e0ff      	b.n	800aca6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b14      	cmp	r3, #20
 800aab2:	f200 80f0 	bhi.w	800ac96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aab6:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800ab11 	.word	0x0800ab11
 800aac0:	0800ac97 	.word	0x0800ac97
 800aac4:	0800ac97 	.word	0x0800ac97
 800aac8:	0800ac97 	.word	0x0800ac97
 800aacc:	0800ab51 	.word	0x0800ab51
 800aad0:	0800ac97 	.word	0x0800ac97
 800aad4:	0800ac97 	.word	0x0800ac97
 800aad8:	0800ac97 	.word	0x0800ac97
 800aadc:	0800ab93 	.word	0x0800ab93
 800aae0:	0800ac97 	.word	0x0800ac97
 800aae4:	0800ac97 	.word	0x0800ac97
 800aae8:	0800ac97 	.word	0x0800ac97
 800aaec:	0800abd3 	.word	0x0800abd3
 800aaf0:	0800ac97 	.word	0x0800ac97
 800aaf4:	0800ac97 	.word	0x0800ac97
 800aaf8:	0800ac97 	.word	0x0800ac97
 800aafc:	0800ac15 	.word	0x0800ac15
 800ab00:	0800ac97 	.word	0x0800ac97
 800ab04:	0800ac97 	.word	0x0800ac97
 800ab08:	0800ac97 	.word	0x0800ac97
 800ab0c:	0800ac55 	.word	0x0800ac55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 f99a 	bl	800ae50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f042 0208 	orr.w	r2, r2, #8
 800ab2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699a      	ldr	r2, [r3, #24]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0204 	bic.w	r2, r2, #4
 800ab3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6999      	ldr	r1, [r3, #24]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	691a      	ldr	r2, [r3, #16]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	430a      	orrs	r2, r1
 800ab4c:	619a      	str	r2, [r3, #24]
      break;
 800ab4e:	e0a5      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68b9      	ldr	r1, [r7, #8]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 fa14 	bl	800af84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699a      	ldr	r2, [r3, #24]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6999      	ldr	r1, [r3, #24]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	021a      	lsls	r2, r3, #8
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	430a      	orrs	r2, r1
 800ab8e:	619a      	str	r2, [r3, #24]
      break;
 800ab90:	e084      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f000 fa87 	bl	800b0ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69da      	ldr	r2, [r3, #28]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f042 0208 	orr.w	r2, r2, #8
 800abac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	69da      	ldr	r2, [r3, #28]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0204 	bic.w	r2, r2, #4
 800abbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	69d9      	ldr	r1, [r3, #28]
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	691a      	ldr	r2, [r3, #16]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	61da      	str	r2, [r3, #28]
      break;
 800abd0:	e064      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 faf9 	bl	800b1d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	69da      	ldr	r2, [r3, #28]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	69da      	ldr	r2, [r3, #28]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	69d9      	ldr	r1, [r3, #28]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	021a      	lsls	r2, r3, #8
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	61da      	str	r2, [r3, #28]
      break;
 800ac12:	e043      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68b9      	ldr	r1, [r7, #8]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fb6c 	bl	800b2f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f042 0208 	orr.w	r2, r2, #8
 800ac2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 0204 	bic.w	r2, r2, #4
 800ac3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	691a      	ldr	r2, [r3, #16]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ac52:	e023      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68b9      	ldr	r1, [r7, #8]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fbb6 	bl	800b3cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	021a      	lsls	r2, r3, #8
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ac94:	e002      	b.n	800ac9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	75fb      	strb	r3, [r7, #23]
      break;
 800ac9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop

0800acb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a46      	ldr	r2, [pc, #280]	; (800ae2c <TIM_Base_SetConfig+0x12c>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d017      	beq.n	800ad48 <TIM_Base_SetConfig+0x48>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad1e:	d013      	beq.n	800ad48 <TIM_Base_SetConfig+0x48>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a43      	ldr	r2, [pc, #268]	; (800ae30 <TIM_Base_SetConfig+0x130>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00f      	beq.n	800ad48 <TIM_Base_SetConfig+0x48>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a42      	ldr	r2, [pc, #264]	; (800ae34 <TIM_Base_SetConfig+0x134>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d00b      	beq.n	800ad48 <TIM_Base_SetConfig+0x48>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a41      	ldr	r2, [pc, #260]	; (800ae38 <TIM_Base_SetConfig+0x138>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d007      	beq.n	800ad48 <TIM_Base_SetConfig+0x48>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a40      	ldr	r2, [pc, #256]	; (800ae3c <TIM_Base_SetConfig+0x13c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d003      	beq.n	800ad48 <TIM_Base_SetConfig+0x48>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a3f      	ldr	r2, [pc, #252]	; (800ae40 <TIM_Base_SetConfig+0x140>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d108      	bne.n	800ad5a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	4313      	orrs	r3, r2
 800ad58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a33      	ldr	r2, [pc, #204]	; (800ae2c <TIM_Base_SetConfig+0x12c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d023      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad68:	d01f      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a30      	ldr	r2, [pc, #192]	; (800ae30 <TIM_Base_SetConfig+0x130>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d01b      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a2f      	ldr	r2, [pc, #188]	; (800ae34 <TIM_Base_SetConfig+0x134>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d017      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a2e      	ldr	r2, [pc, #184]	; (800ae38 <TIM_Base_SetConfig+0x138>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d013      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a2d      	ldr	r2, [pc, #180]	; (800ae3c <TIM_Base_SetConfig+0x13c>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d00f      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4a2d      	ldr	r2, [pc, #180]	; (800ae44 <TIM_Base_SetConfig+0x144>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d00b      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a2c      	ldr	r2, [pc, #176]	; (800ae48 <TIM_Base_SetConfig+0x148>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d007      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a2b      	ldr	r2, [pc, #172]	; (800ae4c <TIM_Base_SetConfig+0x14c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d003      	beq.n	800adaa <TIM_Base_SetConfig+0xaa>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a26      	ldr	r2, [pc, #152]	; (800ae40 <TIM_Base_SetConfig+0x140>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d108      	bne.n	800adbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a12      	ldr	r2, [pc, #72]	; (800ae2c <TIM_Base_SetConfig+0x12c>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d013      	beq.n	800ae10 <TIM_Base_SetConfig+0x110>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a14      	ldr	r2, [pc, #80]	; (800ae3c <TIM_Base_SetConfig+0x13c>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00f      	beq.n	800ae10 <TIM_Base_SetConfig+0x110>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a14      	ldr	r2, [pc, #80]	; (800ae44 <TIM_Base_SetConfig+0x144>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00b      	beq.n	800ae10 <TIM_Base_SetConfig+0x110>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a13      	ldr	r2, [pc, #76]	; (800ae48 <TIM_Base_SetConfig+0x148>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d007      	beq.n	800ae10 <TIM_Base_SetConfig+0x110>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a12      	ldr	r2, [pc, #72]	; (800ae4c <TIM_Base_SetConfig+0x14c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d003      	beq.n	800ae10 <TIM_Base_SetConfig+0x110>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a0d      	ldr	r2, [pc, #52]	; (800ae40 <TIM_Base_SetConfig+0x140>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d103      	bne.n	800ae18 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	691a      	ldr	r2, [r3, #16]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	615a      	str	r2, [r3, #20]
}
 800ae1e:	bf00      	nop
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	40012c00 	.word	0x40012c00
 800ae30:	40000400 	.word	0x40000400
 800ae34:	40000800 	.word	0x40000800
 800ae38:	40000c00 	.word	0x40000c00
 800ae3c:	40013400 	.word	0x40013400
 800ae40:	40015000 	.word	0x40015000
 800ae44:	40014000 	.word	0x40014000
 800ae48:	40014400 	.word	0x40014400
 800ae4c:	40014800 	.word	0x40014800

0800ae50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f023 0201 	bic.w	r2, r3, #1
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	699b      	ldr	r3, [r3, #24]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f023 0302 	bic.w	r3, r3, #2
 800ae9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	697a      	ldr	r2, [r7, #20]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a30      	ldr	r2, [pc, #192]	; (800af6c <TIM_OC1_SetConfig+0x11c>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d013      	beq.n	800aed8 <TIM_OC1_SetConfig+0x88>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a2f      	ldr	r2, [pc, #188]	; (800af70 <TIM_OC1_SetConfig+0x120>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00f      	beq.n	800aed8 <TIM_OC1_SetConfig+0x88>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a2e      	ldr	r2, [pc, #184]	; (800af74 <TIM_OC1_SetConfig+0x124>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00b      	beq.n	800aed8 <TIM_OC1_SetConfig+0x88>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a2d      	ldr	r2, [pc, #180]	; (800af78 <TIM_OC1_SetConfig+0x128>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d007      	beq.n	800aed8 <TIM_OC1_SetConfig+0x88>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a2c      	ldr	r2, [pc, #176]	; (800af7c <TIM_OC1_SetConfig+0x12c>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_OC1_SetConfig+0x88>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a2b      	ldr	r2, [pc, #172]	; (800af80 <TIM_OC1_SetConfig+0x130>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d10c      	bne.n	800aef2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	f023 0308 	bic.w	r3, r3, #8
 800aede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f023 0304 	bic.w	r3, r3, #4
 800aef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a1d      	ldr	r2, [pc, #116]	; (800af6c <TIM_OC1_SetConfig+0x11c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d013      	beq.n	800af22 <TIM_OC1_SetConfig+0xd2>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a1c      	ldr	r2, [pc, #112]	; (800af70 <TIM_OC1_SetConfig+0x120>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00f      	beq.n	800af22 <TIM_OC1_SetConfig+0xd2>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a1b      	ldr	r2, [pc, #108]	; (800af74 <TIM_OC1_SetConfig+0x124>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d00b      	beq.n	800af22 <TIM_OC1_SetConfig+0xd2>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a1a      	ldr	r2, [pc, #104]	; (800af78 <TIM_OC1_SetConfig+0x128>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d007      	beq.n	800af22 <TIM_OC1_SetConfig+0xd2>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a19      	ldr	r2, [pc, #100]	; (800af7c <TIM_OC1_SetConfig+0x12c>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d003      	beq.n	800af22 <TIM_OC1_SetConfig+0xd2>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a18      	ldr	r2, [pc, #96]	; (800af80 <TIM_OC1_SetConfig+0x130>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d111      	bne.n	800af46 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	4313      	orrs	r3, r2
 800af3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	4313      	orrs	r3, r2
 800af44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	697a      	ldr	r2, [r7, #20]
 800af5e:	621a      	str	r2, [r3, #32]
}
 800af60:	bf00      	nop
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	40012c00 	.word	0x40012c00
 800af70:	40013400 	.word	0x40013400
 800af74:	40014000 	.word	0x40014000
 800af78:	40014400 	.word	0x40014400
 800af7c:	40014800 	.word	0x40014800
 800af80:	40015000 	.word	0x40015000

0800af84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	f023 0210 	bic.w	r2, r3, #16
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f023 0320 	bic.w	r3, r3, #32
 800afd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	011b      	lsls	r3, r3, #4
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	4313      	orrs	r3, r2
 800afde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a2c      	ldr	r2, [pc, #176]	; (800b094 <TIM_OC2_SetConfig+0x110>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d007      	beq.n	800aff8 <TIM_OC2_SetConfig+0x74>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a2b      	ldr	r2, [pc, #172]	; (800b098 <TIM_OC2_SetConfig+0x114>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d003      	beq.n	800aff8 <TIM_OC2_SetConfig+0x74>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a2a      	ldr	r2, [pc, #168]	; (800b09c <TIM_OC2_SetConfig+0x118>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d10d      	bne.n	800b014 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	011b      	lsls	r3, r3, #4
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b012:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a1f      	ldr	r2, [pc, #124]	; (800b094 <TIM_OC2_SetConfig+0x110>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d013      	beq.n	800b044 <TIM_OC2_SetConfig+0xc0>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a1e      	ldr	r2, [pc, #120]	; (800b098 <TIM_OC2_SetConfig+0x114>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d00f      	beq.n	800b044 <TIM_OC2_SetConfig+0xc0>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a1e      	ldr	r2, [pc, #120]	; (800b0a0 <TIM_OC2_SetConfig+0x11c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00b      	beq.n	800b044 <TIM_OC2_SetConfig+0xc0>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a1d      	ldr	r2, [pc, #116]	; (800b0a4 <TIM_OC2_SetConfig+0x120>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d007      	beq.n	800b044 <TIM_OC2_SetConfig+0xc0>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a1c      	ldr	r2, [pc, #112]	; (800b0a8 <TIM_OC2_SetConfig+0x124>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <TIM_OC2_SetConfig+0xc0>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a17      	ldr	r2, [pc, #92]	; (800b09c <TIM_OC2_SetConfig+0x118>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d113      	bne.n	800b06c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b04a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	4313      	orrs	r3, r2
 800b06a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	621a      	str	r2, [r3, #32]
}
 800b086:	bf00      	nop
 800b088:	371c      	adds	r7, #28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	40012c00 	.word	0x40012c00
 800b098:	40013400 	.word	0x40013400
 800b09c:	40015000 	.word	0x40015000
 800b0a0:	40014000 	.word	0x40014000
 800b0a4:	40014400 	.word	0x40014400
 800b0a8:	40014800 	.word	0x40014800

0800b0ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b087      	sub	sp, #28
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f023 0303 	bic.w	r3, r3, #3
 800b0e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	021b      	lsls	r3, r3, #8
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	4313      	orrs	r3, r2
 800b104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a2b      	ldr	r2, [pc, #172]	; (800b1b8 <TIM_OC3_SetConfig+0x10c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d007      	beq.n	800b11e <TIM_OC3_SetConfig+0x72>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a2a      	ldr	r2, [pc, #168]	; (800b1bc <TIM_OC3_SetConfig+0x110>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d003      	beq.n	800b11e <TIM_OC3_SetConfig+0x72>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a29      	ldr	r2, [pc, #164]	; (800b1c0 <TIM_OC3_SetConfig+0x114>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d10d      	bne.n	800b13a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	4313      	orrs	r3, r2
 800b130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a1e      	ldr	r2, [pc, #120]	; (800b1b8 <TIM_OC3_SetConfig+0x10c>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d013      	beq.n	800b16a <TIM_OC3_SetConfig+0xbe>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a1d      	ldr	r2, [pc, #116]	; (800b1bc <TIM_OC3_SetConfig+0x110>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d00f      	beq.n	800b16a <TIM_OC3_SetConfig+0xbe>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <TIM_OC3_SetConfig+0x118>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00b      	beq.n	800b16a <TIM_OC3_SetConfig+0xbe>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a1c      	ldr	r2, [pc, #112]	; (800b1c8 <TIM_OC3_SetConfig+0x11c>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d007      	beq.n	800b16a <TIM_OC3_SetConfig+0xbe>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a1b      	ldr	r2, [pc, #108]	; (800b1cc <TIM_OC3_SetConfig+0x120>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d003      	beq.n	800b16a <TIM_OC3_SetConfig+0xbe>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a16      	ldr	r2, [pc, #88]	; (800b1c0 <TIM_OC3_SetConfig+0x114>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d113      	bne.n	800b192 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	695b      	ldr	r3, [r3, #20]
 800b17e:	011b      	lsls	r3, r3, #4
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	4313      	orrs	r3, r2
 800b184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	621a      	str	r2, [r3, #32]
}
 800b1ac:	bf00      	nop
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	40012c00 	.word	0x40012c00
 800b1bc:	40013400 	.word	0x40013400
 800b1c0:	40015000 	.word	0x40015000
 800b1c4:	40014000 	.word	0x40014000
 800b1c8:	40014400 	.word	0x40014400
 800b1cc:	40014800 	.word	0x40014800

0800b1d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	69db      	ldr	r3, [r3, #28]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	4313      	orrs	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b21e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	031b      	lsls	r3, r3, #12
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	4313      	orrs	r3, r2
 800b22a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a2c      	ldr	r2, [pc, #176]	; (800b2e0 <TIM_OC4_SetConfig+0x110>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d007      	beq.n	800b244 <TIM_OC4_SetConfig+0x74>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a2b      	ldr	r2, [pc, #172]	; (800b2e4 <TIM_OC4_SetConfig+0x114>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d003      	beq.n	800b244 <TIM_OC4_SetConfig+0x74>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a2a      	ldr	r2, [pc, #168]	; (800b2e8 <TIM_OC4_SetConfig+0x118>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d10d      	bne.n	800b260 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b24a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	031b      	lsls	r3, r3, #12
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	4313      	orrs	r3, r2
 800b256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b25e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <TIM_OC4_SetConfig+0x110>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d013      	beq.n	800b290 <TIM_OC4_SetConfig+0xc0>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a1e      	ldr	r2, [pc, #120]	; (800b2e4 <TIM_OC4_SetConfig+0x114>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d00f      	beq.n	800b290 <TIM_OC4_SetConfig+0xc0>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a1e      	ldr	r2, [pc, #120]	; (800b2ec <TIM_OC4_SetConfig+0x11c>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d00b      	beq.n	800b290 <TIM_OC4_SetConfig+0xc0>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a1d      	ldr	r2, [pc, #116]	; (800b2f0 <TIM_OC4_SetConfig+0x120>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d007      	beq.n	800b290 <TIM_OC4_SetConfig+0xc0>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <TIM_OC4_SetConfig+0x124>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d003      	beq.n	800b290 <TIM_OC4_SetConfig+0xc0>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <TIM_OC4_SetConfig+0x118>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d113      	bne.n	800b2b8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b296:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b29e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	019b      	lsls	r3, r3, #6
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	019b      	lsls	r3, r3, #6
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	621a      	str	r2, [r3, #32]
}
 800b2d2:	bf00      	nop
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	40012c00 	.word	0x40012c00
 800b2e4:	40013400 	.word	0x40013400
 800b2e8:	40015000 	.word	0x40015000
 800b2ec:	40014000 	.word	0x40014000
 800b2f0:	40014400 	.word	0x40014400
 800b2f4:	40014800 	.word	0x40014800

0800b2f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b33c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	041b      	lsls	r3, r3, #16
 800b344:	693a      	ldr	r2, [r7, #16]
 800b346:	4313      	orrs	r3, r2
 800b348:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a19      	ldr	r2, [pc, #100]	; (800b3b4 <TIM_OC5_SetConfig+0xbc>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d013      	beq.n	800b37a <TIM_OC5_SetConfig+0x82>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a18      	ldr	r2, [pc, #96]	; (800b3b8 <TIM_OC5_SetConfig+0xc0>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d00f      	beq.n	800b37a <TIM_OC5_SetConfig+0x82>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a17      	ldr	r2, [pc, #92]	; (800b3bc <TIM_OC5_SetConfig+0xc4>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d00b      	beq.n	800b37a <TIM_OC5_SetConfig+0x82>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a16      	ldr	r2, [pc, #88]	; (800b3c0 <TIM_OC5_SetConfig+0xc8>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d007      	beq.n	800b37a <TIM_OC5_SetConfig+0x82>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a15      	ldr	r2, [pc, #84]	; (800b3c4 <TIM_OC5_SetConfig+0xcc>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d003      	beq.n	800b37a <TIM_OC5_SetConfig+0x82>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a14      	ldr	r2, [pc, #80]	; (800b3c8 <TIM_OC5_SetConfig+0xd0>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d109      	bne.n	800b38e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b380:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	021b      	lsls	r3, r3, #8
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	693a      	ldr	r2, [r7, #16]
 800b3a6:	621a      	str	r2, [r3, #32]
}
 800b3a8:	bf00      	nop
 800b3aa:	371c      	adds	r7, #28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	40012c00 	.word	0x40012c00
 800b3b8:	40013400 	.word	0x40013400
 800b3bc:	40014000 	.word	0x40014000
 800b3c0:	40014400 	.word	0x40014400
 800b3c4:	40014800 	.word	0x40014800
 800b3c8:	40015000 	.word	0x40015000

0800b3cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	021b      	lsls	r3, r3, #8
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	4313      	orrs	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	051b      	lsls	r3, r3, #20
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a1a      	ldr	r2, [pc, #104]	; (800b48c <TIM_OC6_SetConfig+0xc0>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d013      	beq.n	800b450 <TIM_OC6_SetConfig+0x84>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a19      	ldr	r2, [pc, #100]	; (800b490 <TIM_OC6_SetConfig+0xc4>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d00f      	beq.n	800b450 <TIM_OC6_SetConfig+0x84>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a18      	ldr	r2, [pc, #96]	; (800b494 <TIM_OC6_SetConfig+0xc8>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d00b      	beq.n	800b450 <TIM_OC6_SetConfig+0x84>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a17      	ldr	r2, [pc, #92]	; (800b498 <TIM_OC6_SetConfig+0xcc>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d007      	beq.n	800b450 <TIM_OC6_SetConfig+0x84>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a16      	ldr	r2, [pc, #88]	; (800b49c <TIM_OC6_SetConfig+0xd0>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d003      	beq.n	800b450 <TIM_OC6_SetConfig+0x84>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a15      	ldr	r2, [pc, #84]	; (800b4a0 <TIM_OC6_SetConfig+0xd4>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d109      	bne.n	800b464 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	695b      	ldr	r3, [r3, #20]
 800b45c:	029b      	lsls	r3, r3, #10
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	621a      	str	r2, [r3, #32]
}
 800b47e:	bf00      	nop
 800b480:	371c      	adds	r7, #28
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	40012c00 	.word	0x40012c00
 800b490:	40013400 	.word	0x40013400
 800b494:	40014000 	.word	0x40014000
 800b498:	40014400 	.word	0x40014400
 800b49c:	40014800 	.word	0x40014800
 800b4a0:	40015000 	.word	0x40015000

0800b4a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f003 031f 	and.w	r3, r3, #31
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6a1a      	ldr	r2, [r3, #32]
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	43db      	mvns	r3, r3
 800b4c6:	401a      	ands	r2, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6a1a      	ldr	r2, [r3, #32]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f003 031f 	and.w	r3, r3, #31
 800b4d6:	6879      	ldr	r1, [r7, #4]
 800b4d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	621a      	str	r2, [r3, #32]
}
 800b4e2:	bf00      	nop
 800b4e4:	371c      	adds	r7, #28
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
	...

0800b4f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b504:	2302      	movs	r3, #2
 800b506:	e074      	b.n	800b5f2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2202      	movs	r2, #2
 800b514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a34      	ldr	r2, [pc, #208]	; (800b600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d009      	beq.n	800b546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a33      	ldr	r2, [pc, #204]	; (800b604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d004      	beq.n	800b546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a31      	ldr	r2, [pc, #196]	; (800b608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d108      	bne.n	800b558 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b54c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a21      	ldr	r2, [pc, #132]	; (800b600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d022      	beq.n	800b5c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b588:	d01d      	beq.n	800b5c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a1f      	ldr	r2, [pc, #124]	; (800b60c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d018      	beq.n	800b5c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a1d      	ldr	r2, [pc, #116]	; (800b610 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d013      	beq.n	800b5c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a1c      	ldr	r2, [pc, #112]	; (800b614 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d00e      	beq.n	800b5c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a15      	ldr	r2, [pc, #84]	; (800b604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d009      	beq.n	800b5c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a18      	ldr	r2, [pc, #96]	; (800b618 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d004      	beq.n	800b5c6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a11      	ldr	r2, [pc, #68]	; (800b608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d10c      	bne.n	800b5e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	40012c00 	.word	0x40012c00
 800b604:	40013400 	.word	0x40013400
 800b608:	40015000 	.word	0x40015000
 800b60c:	40000400 	.word	0x40000400
 800b610:	40000800 	.word	0x40000800
 800b614:	40000c00 	.word	0x40000c00
 800b618:	40014000 	.word	0x40014000

0800b61c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e042      	b.n	800b740 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7f9 ff99 	bl	8005604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2224      	movs	r2, #36	; 0x24
 800b6d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f022 0201 	bic.w	r2, r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fc5a 	bl	800bfa4 <UART_SetConfig>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d101      	bne.n	800b6fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e022      	b.n	800b740 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 ff4a 	bl	800c59c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 ffd1 	bl	800c6e0 <UART_CheckIdleState>
 800b73e:	4603      	mov	r3, r0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08a      	sub	sp, #40	; 0x28
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	603b      	str	r3, [r7, #0]
 800b754:	4613      	mov	r3, r2
 800b756:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b75e:	2b20      	cmp	r3, #32
 800b760:	f040 8083 	bne.w	800b86a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <HAL_UART_Transmit+0x28>
 800b76a:	88fb      	ldrh	r3, [r7, #6]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e07b      	b.n	800b86c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d101      	bne.n	800b782 <HAL_UART_Transmit+0x3a>
 800b77e:	2302      	movs	r3, #2
 800b780:	e074      	b.n	800b86c <HAL_UART_Transmit+0x124>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2221      	movs	r2, #33	; 0x21
 800b796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b79a:	f7f7 fbb5 	bl	8002f08 <HAL_GetTick>
 800b79e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	88fa      	ldrh	r2, [r7, #6]
 800b7a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b8:	d108      	bne.n	800b7cc <HAL_UART_Transmit+0x84>
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d104      	bne.n	800b7cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	e003      	b.n	800b7d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b7dc:	e02c      	b.n	800b838 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	2180      	movs	r1, #128	; 0x80
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 ffc4 	bl	800c776 <UART_WaitOnFlagUntilTimeout>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e039      	b.n	800b86c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d10b      	bne.n	800b816 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b80c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	3302      	adds	r3, #2
 800b812:	61bb      	str	r3, [r7, #24]
 800b814:	e007      	b.n	800b826 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	781a      	ldrb	r2, [r3, #0]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	3301      	adds	r3, #1
 800b824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	3b01      	subs	r3, #1
 800b830:	b29a      	uxth	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b83e:	b29b      	uxth	r3, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1cc      	bne.n	800b7de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2200      	movs	r2, #0
 800b84c:	2140      	movs	r1, #64	; 0x40
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 ff91 	bl	800c776 <UART_WaitOnFlagUntilTimeout>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d001      	beq.n	800b85e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e006      	b.n	800b86c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	e000      	b.n	800b86c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b86a:	2302      	movs	r3, #2
  }
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08a      	sub	sp, #40	; 0x28
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	4613      	mov	r3, r2
 800b880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b888:	2b20      	cmp	r3, #32
 800b88a:	d142      	bne.n	800b912 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <HAL_UART_Receive_DMA+0x24>
 800b892:	88fb      	ldrh	r3, [r7, #6]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e03b      	b.n	800b914 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d101      	bne.n	800b8aa <HAL_UART_Receive_DMA+0x36>
 800b8a6:	2302      	movs	r3, #2
 800b8a8:	e034      	b.n	800b914 <HAL_UART_Receive_DMA+0xa0>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a17      	ldr	r2, [pc, #92]	; (800b91c <HAL_UART_Receive_DMA+0xa8>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d01f      	beq.n	800b902 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d018      	beq.n	800b902 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	623b      	str	r3, [r7, #32]
 800b8f0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f2:	69f9      	ldr	r1, [r7, #28]
 800b8f4:	6a3a      	ldr	r2, [r7, #32]
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e6      	bne.n	800b8d0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b902:	88fb      	ldrh	r3, [r7, #6]
 800b904:	461a      	mov	r2, r3
 800b906:	68b9      	ldr	r1, [r7, #8]
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f000 fffd 	bl	800c908 <UART_Start_Receive_DMA>
 800b90e:	4603      	mov	r3, r0
 800b910:	e000      	b.n	800b914 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b912:	2302      	movs	r3, #2
  }
}
 800b914:	4618      	mov	r0, r3
 800b916:	3728      	adds	r7, #40	; 0x28
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	40008000 	.word	0x40008000

0800b920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b0ba      	sub	sp, #232	; 0xe8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b94a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b94e:	4013      	ands	r3, r2
 800b950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d11b      	bne.n	800b994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b960:	f003 0320 	and.w	r3, r3, #32
 800b964:	2b00      	cmp	r3, #0
 800b966:	d015      	beq.n	800b994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b96c:	f003 0320 	and.w	r3, r3, #32
 800b970:	2b00      	cmp	r3, #0
 800b972:	d105      	bne.n	800b980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d009      	beq.n	800b994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 82d6 	beq.w	800bf36 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	4798      	blx	r3
      }
      return;
 800b992:	e2d0      	b.n	800bf36 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 811f 	beq.w	800bbdc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b99e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b9a2:	4b8b      	ldr	r3, [pc, #556]	; (800bbd0 <HAL_UART_IRQHandler+0x2b0>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d106      	bne.n	800b9b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b9aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b9ae:	4b89      	ldr	r3, [pc, #548]	; (800bbd4 <HAL_UART_IRQHandler+0x2b4>)
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 8112 	beq.w	800bbdc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d011      	beq.n	800b9e8 <HAL_UART_IRQHandler+0xc8>
 800b9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9de:	f043 0201 	orr.w	r2, r3, #1
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d011      	beq.n	800ba18 <HAL_UART_IRQHandler+0xf8>
 800b9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00b      	beq.n	800ba18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2202      	movs	r2, #2
 800ba06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba0e:	f043 0204 	orr.w	r2, r3, #4
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba1c:	f003 0304 	and.w	r3, r3, #4
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d011      	beq.n	800ba48 <HAL_UART_IRQHandler+0x128>
 800ba24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2204      	movs	r2, #4
 800ba36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba3e:	f043 0202 	orr.w	r2, r3, #2
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4c:	f003 0308 	and.w	r3, r3, #8
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d017      	beq.n	800ba84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba58:	f003 0320 	and.w	r3, r3, #32
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d105      	bne.n	800ba6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba64:	4b5a      	ldr	r3, [pc, #360]	; (800bbd0 <HAL_UART_IRQHandler+0x2b0>)
 800ba66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00b      	beq.n	800ba84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2208      	movs	r2, #8
 800ba72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba7a:	f043 0208 	orr.w	r2, r3, #8
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d012      	beq.n	800bab6 <HAL_UART_IRQHandler+0x196>
 800ba90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00c      	beq.n	800bab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baac:	f043 0220 	orr.w	r2, r3, #32
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 823c 	beq.w	800bf3a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac6:	f003 0320 	and.w	r3, r3, #32
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d013      	beq.n	800baf6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad2:	f003 0320 	and.w	r3, r3, #32
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d105      	bne.n	800bae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d007      	beq.n	800baf6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bafc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb0a:	2b40      	cmp	r3, #64	; 0x40
 800bb0c:	d005      	beq.n	800bb1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d04f      	beq.n	800bbba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 ffdd 	bl	800cada <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2a:	2b40      	cmp	r3, #64	; 0x40
 800bb2c:	d141      	bne.n	800bbb2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	3308      	adds	r3, #8
 800bb34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb3c:	e853 3f00 	ldrex	r3, [r3]
 800bb40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	3308      	adds	r3, #8
 800bb56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1d9      	bne.n	800bb2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d013      	beq.n	800bbaa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb86:	4a14      	ldr	r2, [pc, #80]	; (800bbd8 <HAL_UART_IRQHandler+0x2b8>)
 800bb88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fb fd52 	bl	8007638 <HAL_DMA_Abort_IT>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d017      	beq.n	800bbca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bba4:	4610      	mov	r0, r2
 800bba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bba8:	e00f      	b.n	800bbca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f9e4 	bl	800bf78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb0:	e00b      	b.n	800bbca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9e0 	bl	800bf78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbb8:	e007      	b.n	800bbca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f9dc 	bl	800bf78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bbc8:	e1b7      	b.n	800bf3a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbca:	bf00      	nop
    return;
 800bbcc:	e1b5      	b.n	800bf3a <HAL_UART_IRQHandler+0x61a>
 800bbce:	bf00      	nop
 800bbd0:	10000001 	.word	0x10000001
 800bbd4:	04000120 	.word	0x04000120
 800bbd8:	0800cd85 	.word	0x0800cd85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	f040 814a 	bne.w	800be7a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bbe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbea:	f003 0310 	and.w	r3, r3, #16
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 8143 	beq.w	800be7a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbf8:	f003 0310 	and.w	r3, r3, #16
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 813c 	beq.w	800be7a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2210      	movs	r2, #16
 800bc08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc14:	2b40      	cmp	r3, #64	; 0x40
 800bc16:	f040 80b5 	bne.w	800bd84 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f000 8187 	beq.w	800bf3e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	f080 817f 	bcs.w	800bf3e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0320 	and.w	r3, r3, #32
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f040 8086 	bne.w	800bd68 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	461a      	mov	r2, r3
 800bc82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bc86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc96:	e841 2300 	strex	r3, r2, [r1]
 800bc9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1da      	bne.n	800bc5c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3308      	adds	r3, #8
 800bcac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcb0:	e853 3f00 	ldrex	r3, [r3]
 800bcb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bcb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcb8:	f023 0301 	bic.w	r3, r3, #1
 800bcbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3308      	adds	r3, #8
 800bcc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bcca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bcce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bcd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bcd6:	e841 2300 	strex	r3, r2, [r1]
 800bcda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bcdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e1      	bne.n	800bca6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3308      	adds	r3, #8
 800bce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3308      	adds	r3, #8
 800bd02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd06:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd0e:	e841 2300 	strex	r3, r2, [r1]
 800bd12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1e3      	bne.n	800bce2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	e853 3f00 	ldrex	r3, [r3]
 800bd34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd38:	f023 0310 	bic.w	r3, r3, #16
 800bd3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	461a      	mov	r2, r3
 800bd46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd52:	e841 2300 	strex	r3, r2, [r1]
 800bd56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1e4      	bne.n	800bd28 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fb fc0f 	bl	8007586 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 f905 	bl	800bf8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd82:	e0dc      	b.n	800bf3e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80ce 	beq.w	800bf42 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bda6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80c9 	beq.w	800bf42 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	e853 3f00 	ldrex	r3, [r3]
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	461a      	mov	r2, r3
 800bdce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bdd2:	647b      	str	r3, [r7, #68]	; 0x44
 800bdd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdda:	e841 2300 	strex	r3, r2, [r1]
 800bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1e4      	bne.n	800bdb0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3308      	adds	r3, #8
 800bdec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	e853 3f00 	ldrex	r3, [r3]
 800bdf4:	623b      	str	r3, [r7, #32]
   return(result);
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdfc:	f023 0301 	bic.w	r3, r3, #1
 800be00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3308      	adds	r3, #8
 800be0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be0e:	633a      	str	r2, [r7, #48]	; 0x30
 800be10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be16:	e841 2300 	strex	r3, r2, [r1]
 800be1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1e1      	bne.n	800bde6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2220      	movs	r2, #32
 800be26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	e853 3f00 	ldrex	r3, [r3]
 800be42:	60fb      	str	r3, [r7, #12]
   return(result);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f023 0310 	bic.w	r3, r3, #16
 800be4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be58:	61fb      	str	r3, [r7, #28]
 800be5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5c:	69b9      	ldr	r1, [r7, #24]
 800be5e:	69fa      	ldr	r2, [r7, #28]
 800be60:	e841 2300 	strex	r3, r2, [r1]
 800be64:	617b      	str	r3, [r7, #20]
   return(result);
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1e4      	bne.n	800be36 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f88a 	bl	800bf8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be78:	e063      	b.n	800bf42 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00e      	beq.n	800bea4 <HAL_UART_IRQHandler+0x584>
 800be86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d008      	beq.n	800bea4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800be9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 ffb2 	bl	800ce06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bea2:	e051      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beac:	2b00      	cmp	r3, #0
 800beae:	d014      	beq.n	800beda <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d105      	bne.n	800bec8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d008      	beq.n	800beda <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800becc:	2b00      	cmp	r3, #0
 800bece:	d03a      	beq.n	800bf46 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	4798      	blx	r3
    }
    return;
 800bed8:	e035      	b.n	800bf46 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800beda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d009      	beq.n	800befa <HAL_UART_IRQHandler+0x5da>
 800bee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d003      	beq.n	800befa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 ff5c 	bl	800cdb0 <UART_EndTransmit_IT>
    return;
 800bef8:	e026      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800befa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800befe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d009      	beq.n	800bf1a <HAL_UART_IRQHandler+0x5fa>
 800bf06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 ff8b 	bl	800ce2e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf18:	e016      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d010      	beq.n	800bf48 <HAL_UART_IRQHandler+0x628>
 800bf26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	da0c      	bge.n	800bf48 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 ff73 	bl	800ce1a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf34:	e008      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
      return;
 800bf36:	bf00      	nop
 800bf38:	e006      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
    return;
 800bf3a:	bf00      	nop
 800bf3c:	e004      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
      return;
 800bf3e:	bf00      	nop
 800bf40:	e002      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
      return;
 800bf42:	bf00      	nop
 800bf44:	e000      	b.n	800bf48 <HAL_UART_IRQHandler+0x628>
    return;
 800bf46:	bf00      	nop
  }
}
 800bf48:	37e8      	adds	r7, #232	; 0xe8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop

0800bf50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfa8:	b08c      	sub	sp, #48	; 0x30
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	689a      	ldr	r2, [r3, #8]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	431a      	orrs	r2, r3
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	695b      	ldr	r3, [r3, #20]
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4baa      	ldr	r3, [pc, #680]	; (800c27c <UART_SetConfig+0x2d8>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	6812      	ldr	r2, [r2, #0]
 800bfda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	68da      	ldr	r2, [r3, #12]
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	430a      	orrs	r2, r1
 800bff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a9f      	ldr	r2, [pc, #636]	; (800c280 <UART_SetConfig+0x2dc>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d004      	beq.n	800c010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00c:	4313      	orrs	r3, r2
 800c00e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c01a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	6812      	ldr	r2, [r2, #0]
 800c022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c024:	430b      	orrs	r3, r1
 800c026:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	f023 010f 	bic.w	r1, r3, #15
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	430a      	orrs	r2, r1
 800c03c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a90      	ldr	r2, [pc, #576]	; (800c284 <UART_SetConfig+0x2e0>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d125      	bne.n	800c094 <UART_SetConfig+0xf0>
 800c048:	4b8f      	ldr	r3, [pc, #572]	; (800c288 <UART_SetConfig+0x2e4>)
 800c04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04e:	f003 0303 	and.w	r3, r3, #3
 800c052:	2b03      	cmp	r3, #3
 800c054:	d81a      	bhi.n	800c08c <UART_SetConfig+0xe8>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <UART_SetConfig+0xb8>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c06d 	.word	0x0800c06d
 800c060:	0800c07d 	.word	0x0800c07d
 800c064:	0800c075 	.word	0x0800c075
 800c068:	0800c085 	.word	0x0800c085
 800c06c:	2301      	movs	r3, #1
 800c06e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c072:	e116      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c074:	2302      	movs	r3, #2
 800c076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c07a:	e112      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c07c:	2304      	movs	r3, #4
 800c07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c082:	e10e      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c084:	2308      	movs	r3, #8
 800c086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c08a:	e10a      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c08c:	2310      	movs	r3, #16
 800c08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c092:	e106      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a7c      	ldr	r2, [pc, #496]	; (800c28c <UART_SetConfig+0x2e8>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d138      	bne.n	800c110 <UART_SetConfig+0x16c>
 800c09e:	4b7a      	ldr	r3, [pc, #488]	; (800c288 <UART_SetConfig+0x2e4>)
 800c0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0a4:	f003 030c 	and.w	r3, r3, #12
 800c0a8:	2b0c      	cmp	r3, #12
 800c0aa:	d82d      	bhi.n	800c108 <UART_SetConfig+0x164>
 800c0ac:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <UART_SetConfig+0x110>)
 800c0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b2:	bf00      	nop
 800c0b4:	0800c0e9 	.word	0x0800c0e9
 800c0b8:	0800c109 	.word	0x0800c109
 800c0bc:	0800c109 	.word	0x0800c109
 800c0c0:	0800c109 	.word	0x0800c109
 800c0c4:	0800c0f9 	.word	0x0800c0f9
 800c0c8:	0800c109 	.word	0x0800c109
 800c0cc:	0800c109 	.word	0x0800c109
 800c0d0:	0800c109 	.word	0x0800c109
 800c0d4:	0800c0f1 	.word	0x0800c0f1
 800c0d8:	0800c109 	.word	0x0800c109
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	0800c109 	.word	0x0800c109
 800c0e4:	0800c101 	.word	0x0800c101
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0ee:	e0d8      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0f6:	e0d4      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c0f8:	2304      	movs	r3, #4
 800c0fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c0fe:	e0d0      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c100:	2308      	movs	r3, #8
 800c102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c106:	e0cc      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c108:	2310      	movs	r3, #16
 800c10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c10e:	e0c8      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a5e      	ldr	r2, [pc, #376]	; (800c290 <UART_SetConfig+0x2ec>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d125      	bne.n	800c166 <UART_SetConfig+0x1c2>
 800c11a:	4b5b      	ldr	r3, [pc, #364]	; (800c288 <UART_SetConfig+0x2e4>)
 800c11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c120:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c124:	2b30      	cmp	r3, #48	; 0x30
 800c126:	d016      	beq.n	800c156 <UART_SetConfig+0x1b2>
 800c128:	2b30      	cmp	r3, #48	; 0x30
 800c12a:	d818      	bhi.n	800c15e <UART_SetConfig+0x1ba>
 800c12c:	2b20      	cmp	r3, #32
 800c12e:	d00a      	beq.n	800c146 <UART_SetConfig+0x1a2>
 800c130:	2b20      	cmp	r3, #32
 800c132:	d814      	bhi.n	800c15e <UART_SetConfig+0x1ba>
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <UART_SetConfig+0x19a>
 800c138:	2b10      	cmp	r3, #16
 800c13a:	d008      	beq.n	800c14e <UART_SetConfig+0x1aa>
 800c13c:	e00f      	b.n	800c15e <UART_SetConfig+0x1ba>
 800c13e:	2300      	movs	r3, #0
 800c140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c144:	e0ad      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c146:	2302      	movs	r3, #2
 800c148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c14c:	e0a9      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c14e:	2304      	movs	r3, #4
 800c150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c154:	e0a5      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c156:	2308      	movs	r3, #8
 800c158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c15c:	e0a1      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c15e:	2310      	movs	r3, #16
 800c160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c164:	e09d      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a4a      	ldr	r2, [pc, #296]	; (800c294 <UART_SetConfig+0x2f0>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d125      	bne.n	800c1bc <UART_SetConfig+0x218>
 800c170:	4b45      	ldr	r3, [pc, #276]	; (800c288 <UART_SetConfig+0x2e4>)
 800c172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c17a:	2bc0      	cmp	r3, #192	; 0xc0
 800c17c:	d016      	beq.n	800c1ac <UART_SetConfig+0x208>
 800c17e:	2bc0      	cmp	r3, #192	; 0xc0
 800c180:	d818      	bhi.n	800c1b4 <UART_SetConfig+0x210>
 800c182:	2b80      	cmp	r3, #128	; 0x80
 800c184:	d00a      	beq.n	800c19c <UART_SetConfig+0x1f8>
 800c186:	2b80      	cmp	r3, #128	; 0x80
 800c188:	d814      	bhi.n	800c1b4 <UART_SetConfig+0x210>
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <UART_SetConfig+0x1f0>
 800c18e:	2b40      	cmp	r3, #64	; 0x40
 800c190:	d008      	beq.n	800c1a4 <UART_SetConfig+0x200>
 800c192:	e00f      	b.n	800c1b4 <UART_SetConfig+0x210>
 800c194:	2300      	movs	r3, #0
 800c196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c19a:	e082      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c19c:	2302      	movs	r3, #2
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1a2:	e07e      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c1a4:	2304      	movs	r3, #4
 800c1a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1aa:	e07a      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1b2:	e076      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c1b4:	2310      	movs	r3, #16
 800c1b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1ba:	e072      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a35      	ldr	r2, [pc, #212]	; (800c298 <UART_SetConfig+0x2f4>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d12a      	bne.n	800c21c <UART_SetConfig+0x278>
 800c1c6:	4b30      	ldr	r3, [pc, #192]	; (800c288 <UART_SetConfig+0x2e4>)
 800c1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1d4:	d01a      	beq.n	800c20c <UART_SetConfig+0x268>
 800c1d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1da:	d81b      	bhi.n	800c214 <UART_SetConfig+0x270>
 800c1dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1e0:	d00c      	beq.n	800c1fc <UART_SetConfig+0x258>
 800c1e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1e6:	d815      	bhi.n	800c214 <UART_SetConfig+0x270>
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <UART_SetConfig+0x250>
 800c1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1f0:	d008      	beq.n	800c204 <UART_SetConfig+0x260>
 800c1f2:	e00f      	b.n	800c214 <UART_SetConfig+0x270>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1fa:	e052      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c202:	e04e      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c204:	2304      	movs	r3, #4
 800c206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c20a:	e04a      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c20c:	2308      	movs	r3, #8
 800c20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c212:	e046      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c214:	2310      	movs	r3, #16
 800c216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c21a:	e042      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a17      	ldr	r2, [pc, #92]	; (800c280 <UART_SetConfig+0x2dc>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d13a      	bne.n	800c29c <UART_SetConfig+0x2f8>
 800c226:	4b18      	ldr	r3, [pc, #96]	; (800c288 <UART_SetConfig+0x2e4>)
 800c228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c22c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c234:	d01a      	beq.n	800c26c <UART_SetConfig+0x2c8>
 800c236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c23a:	d81b      	bhi.n	800c274 <UART_SetConfig+0x2d0>
 800c23c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c240:	d00c      	beq.n	800c25c <UART_SetConfig+0x2b8>
 800c242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c246:	d815      	bhi.n	800c274 <UART_SetConfig+0x2d0>
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d003      	beq.n	800c254 <UART_SetConfig+0x2b0>
 800c24c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c250:	d008      	beq.n	800c264 <UART_SetConfig+0x2c0>
 800c252:	e00f      	b.n	800c274 <UART_SetConfig+0x2d0>
 800c254:	2300      	movs	r3, #0
 800c256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c25a:	e022      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c25c:	2302      	movs	r3, #2
 800c25e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c262:	e01e      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c264:	2304      	movs	r3, #4
 800c266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c26a:	e01a      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c26c:	2308      	movs	r3, #8
 800c26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c272:	e016      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c274:	2310      	movs	r3, #16
 800c276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c27a:	e012      	b.n	800c2a2 <UART_SetConfig+0x2fe>
 800c27c:	cfff69f3 	.word	0xcfff69f3
 800c280:	40008000 	.word	0x40008000
 800c284:	40013800 	.word	0x40013800
 800c288:	40021000 	.word	0x40021000
 800c28c:	40004400 	.word	0x40004400
 800c290:	40004800 	.word	0x40004800
 800c294:	40004c00 	.word	0x40004c00
 800c298:	40005000 	.word	0x40005000
 800c29c:	2310      	movs	r3, #16
 800c29e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4aae      	ldr	r2, [pc, #696]	; (800c560 <UART_SetConfig+0x5bc>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	f040 8097 	bne.w	800c3dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c2b2:	2b08      	cmp	r3, #8
 800c2b4:	d823      	bhi.n	800c2fe <UART_SetConfig+0x35a>
 800c2b6:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <UART_SetConfig+0x318>)
 800c2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2bc:	0800c2e1 	.word	0x0800c2e1
 800c2c0:	0800c2ff 	.word	0x0800c2ff
 800c2c4:	0800c2e9 	.word	0x0800c2e9
 800c2c8:	0800c2ff 	.word	0x0800c2ff
 800c2cc:	0800c2ef 	.word	0x0800c2ef
 800c2d0:	0800c2ff 	.word	0x0800c2ff
 800c2d4:	0800c2ff 	.word	0x0800c2ff
 800c2d8:	0800c2ff 	.word	0x0800c2ff
 800c2dc:	0800c2f7 	.word	0x0800c2f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2e0:	f7fd f936 	bl	8009550 <HAL_RCC_GetPCLK1Freq>
 800c2e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2e6:	e010      	b.n	800c30a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2e8:	4b9e      	ldr	r3, [pc, #632]	; (800c564 <UART_SetConfig+0x5c0>)
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2ec:	e00d      	b.n	800c30a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2ee:	f7fd f8c1 	bl	8009474 <HAL_RCC_GetSysClockFreq>
 800c2f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c2f4:	e009      	b.n	800c30a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c2fc:	e005      	b.n	800c30a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c2fe:	2300      	movs	r3, #0
 800c300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 8130 	beq.w	800c572 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c316:	4a94      	ldr	r2, [pc, #592]	; (800c568 <UART_SetConfig+0x5c4>)
 800c318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c31c:	461a      	mov	r2, r3
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	fbb3 f3f2 	udiv	r3, r3, r2
 800c324:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	4613      	mov	r3, r2
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	4413      	add	r3, r2
 800c330:	69ba      	ldr	r2, [r7, #24]
 800c332:	429a      	cmp	r2, r3
 800c334:	d305      	bcc.n	800c342 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d903      	bls.n	800c34a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c348:	e113      	b.n	800c572 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	2200      	movs	r2, #0
 800c34e:	60bb      	str	r3, [r7, #8]
 800c350:	60fa      	str	r2, [r7, #12]
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c356:	4a84      	ldr	r2, [pc, #528]	; (800c568 <UART_SetConfig+0x5c4>)
 800c358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	2200      	movs	r2, #0
 800c360:	603b      	str	r3, [r7, #0]
 800c362:	607a      	str	r2, [r7, #4]
 800c364:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c368:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c36c:	f7f4 fcb4 	bl	8000cd8 <__aeabi_uldivmod>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4610      	mov	r0, r2
 800c376:	4619      	mov	r1, r3
 800c378:	f04f 0200 	mov.w	r2, #0
 800c37c:	f04f 0300 	mov.w	r3, #0
 800c380:	020b      	lsls	r3, r1, #8
 800c382:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c386:	0202      	lsls	r2, r0, #8
 800c388:	6979      	ldr	r1, [r7, #20]
 800c38a:	6849      	ldr	r1, [r1, #4]
 800c38c:	0849      	lsrs	r1, r1, #1
 800c38e:	2000      	movs	r0, #0
 800c390:	460c      	mov	r4, r1
 800c392:	4605      	mov	r5, r0
 800c394:	eb12 0804 	adds.w	r8, r2, r4
 800c398:	eb43 0905 	adc.w	r9, r3, r5
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	469a      	mov	sl, r3
 800c3a4:	4693      	mov	fp, r2
 800c3a6:	4652      	mov	r2, sl
 800c3a8:	465b      	mov	r3, fp
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f4 fc93 	bl	8000cd8 <__aeabi_uldivmod>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3c0:	d308      	bcc.n	800c3d4 <UART_SetConfig+0x430>
 800c3c2:	6a3b      	ldr	r3, [r7, #32]
 800c3c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3c8:	d204      	bcs.n	800c3d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6a3a      	ldr	r2, [r7, #32]
 800c3d0:	60da      	str	r2, [r3, #12]
 800c3d2:	e0ce      	b.n	800c572 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c3da:	e0ca      	b.n	800c572 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3e4:	d166      	bne.n	800c4b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c3e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3ea:	2b08      	cmp	r3, #8
 800c3ec:	d827      	bhi.n	800c43e <UART_SetConfig+0x49a>
 800c3ee:	a201      	add	r2, pc, #4	; (adr r2, 800c3f4 <UART_SetConfig+0x450>)
 800c3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f4:	0800c419 	.word	0x0800c419
 800c3f8:	0800c421 	.word	0x0800c421
 800c3fc:	0800c429 	.word	0x0800c429
 800c400:	0800c43f 	.word	0x0800c43f
 800c404:	0800c42f 	.word	0x0800c42f
 800c408:	0800c43f 	.word	0x0800c43f
 800c40c:	0800c43f 	.word	0x0800c43f
 800c410:	0800c43f 	.word	0x0800c43f
 800c414:	0800c437 	.word	0x0800c437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c418:	f7fd f89a 	bl	8009550 <HAL_RCC_GetPCLK1Freq>
 800c41c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c41e:	e014      	b.n	800c44a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c420:	f7fd f8ac 	bl	800957c <HAL_RCC_GetPCLK2Freq>
 800c424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c426:	e010      	b.n	800c44a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c428:	4b4e      	ldr	r3, [pc, #312]	; (800c564 <UART_SetConfig+0x5c0>)
 800c42a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c42c:	e00d      	b.n	800c44a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c42e:	f7fd f821 	bl	8009474 <HAL_RCC_GetSysClockFreq>
 800c432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c434:	e009      	b.n	800c44a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c43a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c43c:	e005      	b.n	800c44a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 8090 	beq.w	800c572 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c456:	4a44      	ldr	r2, [pc, #272]	; (800c568 <UART_SetConfig+0x5c4>)
 800c458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c45c:	461a      	mov	r2, r3
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	fbb3 f3f2 	udiv	r3, r3, r2
 800c464:	005a      	lsls	r2, r3, #1
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	085b      	lsrs	r3, r3, #1
 800c46c:	441a      	add	r2, r3
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	fbb2 f3f3 	udiv	r3, r2, r3
 800c476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	2b0f      	cmp	r3, #15
 800c47c:	d916      	bls.n	800c4ac <UART_SetConfig+0x508>
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c484:	d212      	bcs.n	800c4ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	b29b      	uxth	r3, r3
 800c48a:	f023 030f 	bic.w	r3, r3, #15
 800c48e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	085b      	lsrs	r3, r3, #1
 800c494:	b29b      	uxth	r3, r3
 800c496:	f003 0307 	and.w	r3, r3, #7
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	8bfb      	ldrh	r3, [r7, #30]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	8bfa      	ldrh	r2, [r7, #30]
 800c4a8:	60da      	str	r2, [r3, #12]
 800c4aa:	e062      	b.n	800c572 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c4b2:	e05e      	b.n	800c572 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4b8:	2b08      	cmp	r3, #8
 800c4ba:	d828      	bhi.n	800c50e <UART_SetConfig+0x56a>
 800c4bc:	a201      	add	r2, pc, #4	; (adr r2, 800c4c4 <UART_SetConfig+0x520>)
 800c4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c2:	bf00      	nop
 800c4c4:	0800c4e9 	.word	0x0800c4e9
 800c4c8:	0800c4f1 	.word	0x0800c4f1
 800c4cc:	0800c4f9 	.word	0x0800c4f9
 800c4d0:	0800c50f 	.word	0x0800c50f
 800c4d4:	0800c4ff 	.word	0x0800c4ff
 800c4d8:	0800c50f 	.word	0x0800c50f
 800c4dc:	0800c50f 	.word	0x0800c50f
 800c4e0:	0800c50f 	.word	0x0800c50f
 800c4e4:	0800c507 	.word	0x0800c507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4e8:	f7fd f832 	bl	8009550 <HAL_RCC_GetPCLK1Freq>
 800c4ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4ee:	e014      	b.n	800c51a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4f0:	f7fd f844 	bl	800957c <HAL_RCC_GetPCLK2Freq>
 800c4f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c4f6:	e010      	b.n	800c51a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4f8:	4b1a      	ldr	r3, [pc, #104]	; (800c564 <UART_SetConfig+0x5c0>)
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c4fc:	e00d      	b.n	800c51a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4fe:	f7fc ffb9 	bl	8009474 <HAL_RCC_GetSysClockFreq>
 800c502:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c504:	e009      	b.n	800c51a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c50a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c50c:	e005      	b.n	800c51a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c50e:	2300      	movs	r3, #0
 800c510:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c518:	bf00      	nop
    }

    if (pclk != 0U)
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d028      	beq.n	800c572 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c524:	4a10      	ldr	r2, [pc, #64]	; (800c568 <UART_SetConfig+0x5c4>)
 800c526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c52a:	461a      	mov	r2, r3
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	085b      	lsrs	r3, r3, #1
 800c538:	441a      	add	r2, r3
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c542:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	2b0f      	cmp	r3, #15
 800c548:	d910      	bls.n	800c56c <UART_SetConfig+0x5c8>
 800c54a:	6a3b      	ldr	r3, [r7, #32]
 800c54c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c550:	d20c      	bcs.n	800c56c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c552:	6a3b      	ldr	r3, [r7, #32]
 800c554:	b29a      	uxth	r2, r3
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60da      	str	r2, [r3, #12]
 800c55c:	e009      	b.n	800c572 <UART_SetConfig+0x5ce>
 800c55e:	bf00      	nop
 800c560:	40008000 	.word	0x40008000
 800c564:	00f42400 	.word	0x00f42400
 800c568:	0800fe6c 	.word	0x0800fe6c
      }
      else
      {
        ret = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2201      	movs	r2, #1
 800c576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	2200      	movs	r2, #0
 800c586:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2200      	movs	r2, #0
 800c58c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c58e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c592:	4618      	mov	r0, r3
 800c594:	3730      	adds	r7, #48	; 0x30
 800c596:	46bd      	mov	sp, r7
 800c598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c59c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00a      	beq.n	800c5c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	430a      	orrs	r2, r1
 800c5c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ca:	f003 0302 	and.w	r3, r3, #2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	430a      	orrs	r2, r1
 800c5e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00a      	beq.n	800c60a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	430a      	orrs	r2, r1
 800c608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60e:	f003 0308 	and.w	r3, r3, #8
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	430a      	orrs	r2, r1
 800c62a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c630:	f003 0310 	and.w	r3, r3, #16
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00a      	beq.n	800c64e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	430a      	orrs	r2, r1
 800c64c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c652:	f003 0320 	and.w	r3, r3, #32
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00a      	beq.n	800c670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	430a      	orrs	r2, r1
 800c66e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d01a      	beq.n	800c6b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	430a      	orrs	r2, r1
 800c690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c69a:	d10a      	bne.n	800c6b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	430a      	orrs	r2, r1
 800c6b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00a      	beq.n	800c6d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	430a      	orrs	r2, r1
 800c6d2:	605a      	str	r2, [r3, #4]
  }
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af02      	add	r7, sp, #8
 800c6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6f0:	f7f6 fc0a 	bl	8002f08 <HAL_GetTick>
 800c6f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0308 	and.w	r3, r3, #8
 800c700:	2b08      	cmp	r3, #8
 800c702:	d10e      	bne.n	800c722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f82f 	bl	800c776 <UART_WaitOnFlagUntilTimeout>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e025      	b.n	800c76e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b04      	cmp	r3, #4
 800c72e:	d10e      	bne.n	800c74e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2200      	movs	r2, #0
 800c73a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f819 	bl	800c776 <UART_WaitOnFlagUntilTimeout>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c74a:	2303      	movs	r3, #3
 800c74c:	e00f      	b.n	800c76e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2220      	movs	r2, #32
 800c752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2220      	movs	r2, #32
 800c75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b09c      	sub	sp, #112	; 0x70
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	603b      	str	r3, [r7, #0]
 800c782:	4613      	mov	r3, r2
 800c784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c786:	e0a9      	b.n	800c8dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78e:	f000 80a5 	beq.w	800c8dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c792:	f7f6 fbb9 	bl	8002f08 <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d302      	bcc.n	800c7a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c7a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d140      	bne.n	800c82a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7b0:	e853 3f00 	ldrex	r3, [r3]
 800c7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c7bc:	667b      	str	r3, [r7, #100]	; 0x64
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c7ce:	e841 2300 	strex	r3, r2, [r1]
 800c7d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1e6      	bne.n	800c7a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3308      	adds	r3, #8
 800c7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e4:	e853 3f00 	ldrex	r3, [r3]
 800c7e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	f023 0301 	bic.w	r3, r3, #1
 800c7f0:	663b      	str	r3, [r7, #96]	; 0x60
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	3308      	adds	r3, #8
 800c7f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c7fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800c7fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c802:	e841 2300 	strex	r3, r2, [r1]
 800c806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1e5      	bne.n	800c7da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2220      	movs	r2, #32
 800c812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2220      	movs	r2, #32
 800c81a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	e069      	b.n	800c8fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	2b00      	cmp	r3, #0
 800c836:	d051      	beq.n	800c8dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c846:	d149      	bne.n	800c8dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c850:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	e853 3f00 	ldrex	r3, [r3]
 800c85e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c866:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	461a      	mov	r2, r3
 800c86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c870:	637b      	str	r3, [r7, #52]	; 0x34
 800c872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c878:	e841 2300 	strex	r3, r2, [r1]
 800c87c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e6      	bne.n	800c852 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3308      	adds	r3, #8
 800c88a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	e853 3f00 	ldrex	r3, [r3]
 800c892:	613b      	str	r3, [r7, #16]
   return(result);
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f023 0301 	bic.w	r3, r3, #1
 800c89a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c8a4:	623a      	str	r2, [r7, #32]
 800c8a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a8:	69f9      	ldr	r1, [r7, #28]
 800c8aa:	6a3a      	ldr	r2, [r7, #32]
 800c8ac:	e841 2300 	strex	r3, r2, [r1]
 800c8b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e5      	bne.n	800c884 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2220      	movs	r2, #32
 800c8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2220      	movs	r2, #32
 800c8c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2220      	movs	r2, #32
 800c8cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e010      	b.n	800c8fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	69da      	ldr	r2, [r3, #28]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	bf0c      	ite	eq
 800c8ec:	2301      	moveq	r3, #1
 800c8ee:	2300      	movne	r3, #0
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	f43f af46 	beq.w	800c788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3770      	adds	r7, #112	; 0x70
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
	...

0800c908 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b096      	sub	sp, #88	; 0x58
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	4613      	mov	r3, r2
 800c914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	88fa      	ldrh	r2, [r7, #6]
 800c920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2222      	movs	r2, #34	; 0x22
 800c930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d02c      	beq.n	800c996 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c940:	4a42      	ldr	r2, [pc, #264]	; (800ca4c <UART_Start_Receive_DMA+0x144>)
 800c942:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c948:	4a41      	ldr	r2, [pc, #260]	; (800ca50 <UART_Start_Receive_DMA+0x148>)
 800c94a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c950:	4a40      	ldr	r2, [pc, #256]	; (800ca54 <UART_Start_Receive_DMA+0x14c>)
 800c952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c958:	2200      	movs	r2, #0
 800c95a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	3324      	adds	r3, #36	; 0x24
 800c966:	4619      	mov	r1, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c96c:	461a      	mov	r2, r3
 800c96e:	88fb      	ldrh	r3, [r7, #6]
 800c970:	f7fa fd8e 	bl	8007490 <HAL_DMA_Start_IT>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00d      	beq.n	800c996 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2210      	movs	r2, #16
 800c97e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2220      	movs	r2, #32
 800c98e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	e055      	b.n	800ca42 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d018      	beq.n	800c9d8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ae:	e853 3f00 	ldrex	r3, [r3]
 800c9b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9ba:	657b      	str	r3, [r7, #84]	; 0x54
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9c6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9cc:	e841 2300 	strex	r3, r2, [r1]
 800c9d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1e6      	bne.n	800c9a6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3308      	adds	r3, #8
 800c9de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	e853 3f00 	ldrex	r3, [r3]
 800c9e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	f043 0301 	orr.w	r3, r3, #1
 800c9ee:	653b      	str	r3, [r7, #80]	; 0x50
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9f8:	637a      	str	r2, [r7, #52]	; 0x34
 800c9fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca00:	e841 2300 	strex	r3, r2, [r1]
 800ca04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1e5      	bne.n	800c9d8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	e853 3f00 	ldrex	r3, [r3]
 800ca1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3308      	adds	r3, #8
 800ca2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca2c:	623a      	str	r2, [r7, #32]
 800ca2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca30:	69f9      	ldr	r1, [r7, #28]
 800ca32:	6a3a      	ldr	r2, [r7, #32]
 800ca34:	e841 2300 	strex	r3, r2, [r1]
 800ca38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1e5      	bne.n	800ca0c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3758      	adds	r7, #88	; 0x58
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	0800cba7 	.word	0x0800cba7
 800ca50:	0800cccd 	.word	0x0800cccd
 800ca54:	0800cd05 	.word	0x0800cd05

0800ca58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b08f      	sub	sp, #60	; 0x3c
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca66:	6a3b      	ldr	r3, [r7, #32]
 800ca68:	e853 3f00 	ldrex	r3, [r3]
 800ca6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ca74:	637b      	str	r3, [r7, #52]	; 0x34
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca80:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca86:	e841 2300 	strex	r3, r2, [r1]
 800ca8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1e6      	bne.n	800ca60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	3308      	adds	r3, #8
 800ca98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	e853 3f00 	ldrex	r3, [r3]
 800caa0:	60bb      	str	r3, [r7, #8]
   return(result);
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800caa8:	633b      	str	r3, [r7, #48]	; 0x30
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3308      	adds	r3, #8
 800cab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab2:	61ba      	str	r2, [r7, #24]
 800cab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6979      	ldr	r1, [r7, #20]
 800cab8:	69ba      	ldr	r2, [r7, #24]
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	613b      	str	r3, [r7, #16]
   return(result);
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e5      	bne.n	800ca92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2220      	movs	r2, #32
 800caca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800cace:	bf00      	nop
 800cad0:	373c      	adds	r7, #60	; 0x3c
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cada:	b480      	push	{r7}
 800cadc:	b095      	sub	sp, #84	; 0x54
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caea:	e853 3f00 	ldrex	r3, [r3]
 800caee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	461a      	mov	r2, r3
 800cafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb00:	643b      	str	r3, [r7, #64]	; 0x40
 800cb02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb08:	e841 2300 	strex	r3, r2, [r1]
 800cb0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1e6      	bne.n	800cae2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	3308      	adds	r3, #8
 800cb1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1c:	6a3b      	ldr	r3, [r7, #32]
 800cb1e:	e853 3f00 	ldrex	r3, [r3]
 800cb22:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3308      	adds	r3, #8
 800cb36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb38:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb40:	e841 2300 	strex	r3, r2, [r1]
 800cb44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1e3      	bne.n	800cb14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d118      	bne.n	800cb86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	e853 3f00 	ldrex	r3, [r3]
 800cb60:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	f023 0310 	bic.w	r3, r3, #16
 800cb68:	647b      	str	r3, [r7, #68]	; 0x44
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb72:	61bb      	str	r3, [r7, #24]
 800cb74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	6979      	ldr	r1, [r7, #20]
 800cb78:	69ba      	ldr	r2, [r7, #24]
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e6      	bne.n	800cb54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb9a:	bf00      	nop
 800cb9c:	3754      	adds	r7, #84	; 0x54
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b09c      	sub	sp, #112	; 0x70
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0320 	and.w	r3, r3, #32
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d171      	bne.n	800cca6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800cbc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbd2:	e853 3f00 	ldrex	r3, [r3]
 800cbd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cbd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbde:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbe8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbf0:	e841 2300 	strex	r3, r2, [r1]
 800cbf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cbf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e6      	bne.n	800cbca <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	3308      	adds	r3, #8
 800cc02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	f023 0301 	bic.w	r3, r3, #1
 800cc12:	667b      	str	r3, [r7, #100]	; 0x64
 800cc14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3308      	adds	r3, #8
 800cc1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc1c:	647a      	str	r2, [r7, #68]	; 0x44
 800cc1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc24:	e841 2300 	strex	r3, r2, [r1]
 800cc28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e5      	bne.n	800cbfc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3308      	adds	r3, #8
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	e853 3f00 	ldrex	r3, [r3]
 800cc3e:	623b      	str	r3, [r7, #32]
   return(result);
 800cc40:	6a3b      	ldr	r3, [r7, #32]
 800cc42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc46:	663b      	str	r3, [r7, #96]	; 0x60
 800cc48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc50:	633a      	str	r2, [r7, #48]	; 0x30
 800cc52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e5      	bne.n	800cc30 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cc64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc66:	2220      	movs	r2, #32
 800cc68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d118      	bne.n	800cca6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	e853 3f00 	ldrex	r3, [r3]
 800cc80:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f023 0310 	bic.w	r3, r3, #16
 800cc88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc92:	61fb      	str	r3, [r7, #28]
 800cc94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc96:	69b9      	ldr	r1, [r7, #24]
 800cc98:	69fa      	ldr	r2, [r7, #28]
 800cc9a:	e841 2300 	strex	r3, r2, [r1]
 800cc9e:	617b      	str	r3, [r7, #20]
   return(result);
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1e6      	bne.n	800cc74 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d107      	bne.n	800ccbe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ccb8:	f7ff f968 	bl	800bf8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccbc:	e002      	b.n	800ccc4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ccbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ccc0:	f7f7 fdf6 	bl	80048b0 <HAL_UART_RxCpltCallback>
}
 800ccc4:	bf00      	nop
 800ccc6:	3770      	adds	r7, #112	; 0x70
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d109      	bne.n	800ccf6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cce8:	085b      	lsrs	r3, r3, #1
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	4619      	mov	r1, r3
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f7ff f94c 	bl	800bf8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ccf4:	e002      	b.n	800ccfc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f7ff f934 	bl	800bf64 <HAL_UART_RxHalfCpltCallback>
}
 800ccfc:	bf00      	nop
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd10:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd20:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd2c:	2b80      	cmp	r3, #128	; 0x80
 800cd2e:	d109      	bne.n	800cd44 <UART_DMAError+0x40>
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	2b21      	cmp	r3, #33	; 0x21
 800cd34:	d106      	bne.n	800cd44 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cd3e:	6978      	ldr	r0, [r7, #20]
 800cd40:	f7ff fe8a 	bl	800ca58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4e:	2b40      	cmp	r3, #64	; 0x40
 800cd50:	d109      	bne.n	800cd66 <UART_DMAError+0x62>
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2b22      	cmp	r3, #34	; 0x22
 800cd56:	d106      	bne.n	800cd66 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cd60:	6978      	ldr	r0, [r7, #20]
 800cd62:	f7ff feba 	bl	800cada <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd6c:	f043 0210 	orr.w	r2, r3, #16
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd76:	6978      	ldr	r0, [r7, #20]
 800cd78:	f7ff f8fe 	bl	800bf78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd7c:	bf00      	nop
 800cd7e:	3718      	adds	r7, #24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff f8e8 	bl	800bf78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cda8:	bf00      	nop
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b088      	sub	sp, #32
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	e853 3f00 	ldrex	r3, [r3]
 800cdc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdcc:	61fb      	str	r3, [r7, #28]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	61bb      	str	r3, [r7, #24]
 800cdd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdda:	6979      	ldr	r1, [r7, #20]
 800cddc:	69ba      	ldr	r2, [r7, #24]
 800cdde:	e841 2300 	strex	r3, r2, [r1]
 800cde2:	613b      	str	r3, [r7, #16]
   return(result);
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1e6      	bne.n	800cdb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2220      	movs	r2, #32
 800cdee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff f8a9 	bl	800bf50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdfe:	bf00      	nop
 800ce00:	3720      	adds	r7, #32
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ce0e:	bf00      	nop
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b083      	sub	sp, #12
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ce22:	bf00      	nop
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b083      	sub	sp, #12
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b085      	sub	sp, #20
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d101      	bne.n	800ce58 <HAL_UARTEx_DisableFifoMode+0x16>
 800ce54:	2302      	movs	r3, #2
 800ce56:	e027      	b.n	800cea8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2224      	movs	r2, #36	; 0x24
 800ce64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f022 0201 	bic.w	r2, r2, #1
 800ce7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ce86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3714      	adds	r7, #20
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d101      	bne.n	800cecc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cec8:	2302      	movs	r3, #2
 800ceca:	e02d      	b.n	800cf28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2224      	movs	r2, #36	; 0x24
 800ced8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f022 0201 	bic.w	r2, r2, #1
 800cef2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	430a      	orrs	r2, r1
 800cf06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 f84f 	bl	800cfac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2220      	movs	r2, #32
 800cf1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3710      	adds	r7, #16
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d101      	bne.n	800cf48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cf44:	2302      	movs	r3, #2
 800cf46:	e02d      	b.n	800cfa4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2224      	movs	r2, #36	; 0x24
 800cf54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f022 0201 	bic.w	r2, r2, #1
 800cf6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f811 	bl	800cfac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2220      	movs	r2, #32
 800cf96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d108      	bne.n	800cfce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cfcc:	e031      	b.n	800d032 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cfce:	2308      	movs	r3, #8
 800cfd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cfd2:	2308      	movs	r3, #8
 800cfd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	0e5b      	lsrs	r3, r3, #25
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	f003 0307 	and.w	r3, r3, #7
 800cfe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	0f5b      	lsrs	r3, r3, #29
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	f003 0307 	and.w	r3, r3, #7
 800cff4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cff6:	7bbb      	ldrb	r3, [r7, #14]
 800cff8:	7b3a      	ldrb	r2, [r7, #12]
 800cffa:	4911      	ldr	r1, [pc, #68]	; (800d040 <UARTEx_SetNbDataToProcess+0x94>)
 800cffc:	5c8a      	ldrb	r2, [r1, r2]
 800cffe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d002:	7b3a      	ldrb	r2, [r7, #12]
 800d004:	490f      	ldr	r1, [pc, #60]	; (800d044 <UARTEx_SetNbDataToProcess+0x98>)
 800d006:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d008:	fb93 f3f2 	sdiv	r3, r3, r2
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	7b7a      	ldrb	r2, [r7, #13]
 800d018:	4909      	ldr	r1, [pc, #36]	; (800d040 <UARTEx_SetNbDataToProcess+0x94>)
 800d01a:	5c8a      	ldrb	r2, [r1, r2]
 800d01c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d020:	7b7a      	ldrb	r2, [r7, #13]
 800d022:	4908      	ldr	r1, [pc, #32]	; (800d044 <UARTEx_SetNbDataToProcess+0x98>)
 800d024:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d026:	fb93 f3f2 	sdiv	r3, r3, r2
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d032:	bf00      	nop
 800d034:	3714      	adds	r7, #20
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	0800fe84 	.word	0x0800fe84
 800d044:	0800fe8c 	.word	0x0800fe8c

0800d048 <__errno>:
 800d048:	4b01      	ldr	r3, [pc, #4]	; (800d050 <__errno+0x8>)
 800d04a:	6818      	ldr	r0, [r3, #0]
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	20000014 	.word	0x20000014

0800d054 <__libc_init_array>:
 800d054:	b570      	push	{r4, r5, r6, lr}
 800d056:	4d0d      	ldr	r5, [pc, #52]	; (800d08c <__libc_init_array+0x38>)
 800d058:	4c0d      	ldr	r4, [pc, #52]	; (800d090 <__libc_init_array+0x3c>)
 800d05a:	1b64      	subs	r4, r4, r5
 800d05c:	10a4      	asrs	r4, r4, #2
 800d05e:	2600      	movs	r6, #0
 800d060:	42a6      	cmp	r6, r4
 800d062:	d109      	bne.n	800d078 <__libc_init_array+0x24>
 800d064:	4d0b      	ldr	r5, [pc, #44]	; (800d094 <__libc_init_array+0x40>)
 800d066:	4c0c      	ldr	r4, [pc, #48]	; (800d098 <__libc_init_array+0x44>)
 800d068:	f002 fe90 	bl	800fd8c <_init>
 800d06c:	1b64      	subs	r4, r4, r5
 800d06e:	10a4      	asrs	r4, r4, #2
 800d070:	2600      	movs	r6, #0
 800d072:	42a6      	cmp	r6, r4
 800d074:	d105      	bne.n	800d082 <__libc_init_array+0x2e>
 800d076:	bd70      	pop	{r4, r5, r6, pc}
 800d078:	f855 3b04 	ldr.w	r3, [r5], #4
 800d07c:	4798      	blx	r3
 800d07e:	3601      	adds	r6, #1
 800d080:	e7ee      	b.n	800d060 <__libc_init_array+0xc>
 800d082:	f855 3b04 	ldr.w	r3, [r5], #4
 800d086:	4798      	blx	r3
 800d088:	3601      	adds	r6, #1
 800d08a:	e7f2      	b.n	800d072 <__libc_init_array+0x1e>
 800d08c:	08010274 	.word	0x08010274
 800d090:	08010274 	.word	0x08010274
 800d094:	08010274 	.word	0x08010274
 800d098:	08010278 	.word	0x08010278

0800d09c <memset>:
 800d09c:	4402      	add	r2, r0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d100      	bne.n	800d0a6 <memset+0xa>
 800d0a4:	4770      	bx	lr
 800d0a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0aa:	e7f9      	b.n	800d0a0 <memset+0x4>

0800d0ac <__cvt>:
 800d0ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b0:	ec55 4b10 	vmov	r4, r5, d0
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	460e      	mov	r6, r1
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	bfbb      	ittet	lt
 800d0be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d0c2:	461d      	movlt	r5, r3
 800d0c4:	2300      	movge	r3, #0
 800d0c6:	232d      	movlt	r3, #45	; 0x2d
 800d0c8:	700b      	strb	r3, [r1, #0]
 800d0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d0d0:	4691      	mov	r9, r2
 800d0d2:	f023 0820 	bic.w	r8, r3, #32
 800d0d6:	bfbc      	itt	lt
 800d0d8:	4622      	movlt	r2, r4
 800d0da:	4614      	movlt	r4, r2
 800d0dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0e0:	d005      	beq.n	800d0ee <__cvt+0x42>
 800d0e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d0e6:	d100      	bne.n	800d0ea <__cvt+0x3e>
 800d0e8:	3601      	adds	r6, #1
 800d0ea:	2102      	movs	r1, #2
 800d0ec:	e000      	b.n	800d0f0 <__cvt+0x44>
 800d0ee:	2103      	movs	r1, #3
 800d0f0:	ab03      	add	r3, sp, #12
 800d0f2:	9301      	str	r3, [sp, #4]
 800d0f4:	ab02      	add	r3, sp, #8
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	ec45 4b10 	vmov	d0, r4, r5
 800d0fc:	4653      	mov	r3, sl
 800d0fe:	4632      	mov	r2, r6
 800d100:	f000 fee6 	bl	800ded0 <_dtoa_r>
 800d104:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d108:	4607      	mov	r7, r0
 800d10a:	d102      	bne.n	800d112 <__cvt+0x66>
 800d10c:	f019 0f01 	tst.w	r9, #1
 800d110:	d022      	beq.n	800d158 <__cvt+0xac>
 800d112:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d116:	eb07 0906 	add.w	r9, r7, r6
 800d11a:	d110      	bne.n	800d13e <__cvt+0x92>
 800d11c:	783b      	ldrb	r3, [r7, #0]
 800d11e:	2b30      	cmp	r3, #48	; 0x30
 800d120:	d10a      	bne.n	800d138 <__cvt+0x8c>
 800d122:	2200      	movs	r2, #0
 800d124:	2300      	movs	r3, #0
 800d126:	4620      	mov	r0, r4
 800d128:	4629      	mov	r1, r5
 800d12a:	f7f3 fcf5 	bl	8000b18 <__aeabi_dcmpeq>
 800d12e:	b918      	cbnz	r0, 800d138 <__cvt+0x8c>
 800d130:	f1c6 0601 	rsb	r6, r6, #1
 800d134:	f8ca 6000 	str.w	r6, [sl]
 800d138:	f8da 3000 	ldr.w	r3, [sl]
 800d13c:	4499      	add	r9, r3
 800d13e:	2200      	movs	r2, #0
 800d140:	2300      	movs	r3, #0
 800d142:	4620      	mov	r0, r4
 800d144:	4629      	mov	r1, r5
 800d146:	f7f3 fce7 	bl	8000b18 <__aeabi_dcmpeq>
 800d14a:	b108      	cbz	r0, 800d150 <__cvt+0xa4>
 800d14c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d150:	2230      	movs	r2, #48	; 0x30
 800d152:	9b03      	ldr	r3, [sp, #12]
 800d154:	454b      	cmp	r3, r9
 800d156:	d307      	bcc.n	800d168 <__cvt+0xbc>
 800d158:	9b03      	ldr	r3, [sp, #12]
 800d15a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d15c:	1bdb      	subs	r3, r3, r7
 800d15e:	4638      	mov	r0, r7
 800d160:	6013      	str	r3, [r2, #0]
 800d162:	b004      	add	sp, #16
 800d164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d168:	1c59      	adds	r1, r3, #1
 800d16a:	9103      	str	r1, [sp, #12]
 800d16c:	701a      	strb	r2, [r3, #0]
 800d16e:	e7f0      	b.n	800d152 <__cvt+0xa6>

0800d170 <__exponent>:
 800d170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d172:	4603      	mov	r3, r0
 800d174:	2900      	cmp	r1, #0
 800d176:	bfb8      	it	lt
 800d178:	4249      	neglt	r1, r1
 800d17a:	f803 2b02 	strb.w	r2, [r3], #2
 800d17e:	bfb4      	ite	lt
 800d180:	222d      	movlt	r2, #45	; 0x2d
 800d182:	222b      	movge	r2, #43	; 0x2b
 800d184:	2909      	cmp	r1, #9
 800d186:	7042      	strb	r2, [r0, #1]
 800d188:	dd2a      	ble.n	800d1e0 <__exponent+0x70>
 800d18a:	f10d 0407 	add.w	r4, sp, #7
 800d18e:	46a4      	mov	ip, r4
 800d190:	270a      	movs	r7, #10
 800d192:	46a6      	mov	lr, r4
 800d194:	460a      	mov	r2, r1
 800d196:	fb91 f6f7 	sdiv	r6, r1, r7
 800d19a:	fb07 1516 	mls	r5, r7, r6, r1
 800d19e:	3530      	adds	r5, #48	; 0x30
 800d1a0:	2a63      	cmp	r2, #99	; 0x63
 800d1a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d1a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d1aa:	4631      	mov	r1, r6
 800d1ac:	dcf1      	bgt.n	800d192 <__exponent+0x22>
 800d1ae:	3130      	adds	r1, #48	; 0x30
 800d1b0:	f1ae 0502 	sub.w	r5, lr, #2
 800d1b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d1b8:	1c44      	adds	r4, r0, #1
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	4561      	cmp	r1, ip
 800d1be:	d30a      	bcc.n	800d1d6 <__exponent+0x66>
 800d1c0:	f10d 0209 	add.w	r2, sp, #9
 800d1c4:	eba2 020e 	sub.w	r2, r2, lr
 800d1c8:	4565      	cmp	r5, ip
 800d1ca:	bf88      	it	hi
 800d1cc:	2200      	movhi	r2, #0
 800d1ce:	4413      	add	r3, r2
 800d1d0:	1a18      	subs	r0, r3, r0
 800d1d2:	b003      	add	sp, #12
 800d1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d1de:	e7ed      	b.n	800d1bc <__exponent+0x4c>
 800d1e0:	2330      	movs	r3, #48	; 0x30
 800d1e2:	3130      	adds	r1, #48	; 0x30
 800d1e4:	7083      	strb	r3, [r0, #2]
 800d1e6:	70c1      	strb	r1, [r0, #3]
 800d1e8:	1d03      	adds	r3, r0, #4
 800d1ea:	e7f1      	b.n	800d1d0 <__exponent+0x60>

0800d1ec <_printf_float>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	ed2d 8b02 	vpush	{d8}
 800d1f4:	b08d      	sub	sp, #52	; 0x34
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d1fc:	4616      	mov	r6, r2
 800d1fe:	461f      	mov	r7, r3
 800d200:	4605      	mov	r5, r0
 800d202:	f001 fe0b 	bl	800ee1c <_localeconv_r>
 800d206:	f8d0 a000 	ldr.w	sl, [r0]
 800d20a:	4650      	mov	r0, sl
 800d20c:	f7f3 f808 	bl	8000220 <strlen>
 800d210:	2300      	movs	r3, #0
 800d212:	930a      	str	r3, [sp, #40]	; 0x28
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	9305      	str	r3, [sp, #20]
 800d218:	f8d8 3000 	ldr.w	r3, [r8]
 800d21c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d220:	3307      	adds	r3, #7
 800d222:	f023 0307 	bic.w	r3, r3, #7
 800d226:	f103 0208 	add.w	r2, r3, #8
 800d22a:	f8c8 2000 	str.w	r2, [r8]
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d236:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d23a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d23e:	9307      	str	r3, [sp, #28]
 800d240:	f8cd 8018 	str.w	r8, [sp, #24]
 800d244:	ee08 0a10 	vmov	s16, r0
 800d248:	4b9f      	ldr	r3, [pc, #636]	; (800d4c8 <_printf_float+0x2dc>)
 800d24a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d24e:	f04f 32ff 	mov.w	r2, #4294967295
 800d252:	f7f3 fc93 	bl	8000b7c <__aeabi_dcmpun>
 800d256:	bb88      	cbnz	r0, 800d2bc <_printf_float+0xd0>
 800d258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d25c:	4b9a      	ldr	r3, [pc, #616]	; (800d4c8 <_printf_float+0x2dc>)
 800d25e:	f04f 32ff 	mov.w	r2, #4294967295
 800d262:	f7f3 fc6d 	bl	8000b40 <__aeabi_dcmple>
 800d266:	bb48      	cbnz	r0, 800d2bc <_printf_float+0xd0>
 800d268:	2200      	movs	r2, #0
 800d26a:	2300      	movs	r3, #0
 800d26c:	4640      	mov	r0, r8
 800d26e:	4649      	mov	r1, r9
 800d270:	f7f3 fc5c 	bl	8000b2c <__aeabi_dcmplt>
 800d274:	b110      	cbz	r0, 800d27c <_printf_float+0x90>
 800d276:	232d      	movs	r3, #45	; 0x2d
 800d278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d27c:	4b93      	ldr	r3, [pc, #588]	; (800d4cc <_printf_float+0x2e0>)
 800d27e:	4894      	ldr	r0, [pc, #592]	; (800d4d0 <_printf_float+0x2e4>)
 800d280:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d284:	bf94      	ite	ls
 800d286:	4698      	movls	r8, r3
 800d288:	4680      	movhi	r8, r0
 800d28a:	2303      	movs	r3, #3
 800d28c:	6123      	str	r3, [r4, #16]
 800d28e:	9b05      	ldr	r3, [sp, #20]
 800d290:	f023 0204 	bic.w	r2, r3, #4
 800d294:	6022      	str	r2, [r4, #0]
 800d296:	f04f 0900 	mov.w	r9, #0
 800d29a:	9700      	str	r7, [sp, #0]
 800d29c:	4633      	mov	r3, r6
 800d29e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f9d8 	bl	800d658 <_printf_common>
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	f040 8090 	bne.w	800d3ce <_printf_float+0x1e2>
 800d2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b2:	b00d      	add	sp, #52	; 0x34
 800d2b4:	ecbd 8b02 	vpop	{d8}
 800d2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2bc:	4642      	mov	r2, r8
 800d2be:	464b      	mov	r3, r9
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	4649      	mov	r1, r9
 800d2c4:	f7f3 fc5a 	bl	8000b7c <__aeabi_dcmpun>
 800d2c8:	b140      	cbz	r0, 800d2dc <_printf_float+0xf0>
 800d2ca:	464b      	mov	r3, r9
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	bfbc      	itt	lt
 800d2d0:	232d      	movlt	r3, #45	; 0x2d
 800d2d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d2d6:	487f      	ldr	r0, [pc, #508]	; (800d4d4 <_printf_float+0x2e8>)
 800d2d8:	4b7f      	ldr	r3, [pc, #508]	; (800d4d8 <_printf_float+0x2ec>)
 800d2da:	e7d1      	b.n	800d280 <_printf_float+0x94>
 800d2dc:	6863      	ldr	r3, [r4, #4]
 800d2de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d2e2:	9206      	str	r2, [sp, #24]
 800d2e4:	1c5a      	adds	r2, r3, #1
 800d2e6:	d13f      	bne.n	800d368 <_printf_float+0x17c>
 800d2e8:	2306      	movs	r3, #6
 800d2ea:	6063      	str	r3, [r4, #4]
 800d2ec:	9b05      	ldr	r3, [sp, #20]
 800d2ee:	6861      	ldr	r1, [r4, #4]
 800d2f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9303      	str	r3, [sp, #12]
 800d2f8:	ab0a      	add	r3, sp, #40	; 0x28
 800d2fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d2fe:	ab09      	add	r3, sp, #36	; 0x24
 800d300:	ec49 8b10 	vmov	d0, r8, r9
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	6022      	str	r2, [r4, #0]
 800d308:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d30c:	4628      	mov	r0, r5
 800d30e:	f7ff fecd 	bl	800d0ac <__cvt>
 800d312:	9b06      	ldr	r3, [sp, #24]
 800d314:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d316:	2b47      	cmp	r3, #71	; 0x47
 800d318:	4680      	mov	r8, r0
 800d31a:	d108      	bne.n	800d32e <_printf_float+0x142>
 800d31c:	1cc8      	adds	r0, r1, #3
 800d31e:	db02      	blt.n	800d326 <_printf_float+0x13a>
 800d320:	6863      	ldr	r3, [r4, #4]
 800d322:	4299      	cmp	r1, r3
 800d324:	dd41      	ble.n	800d3aa <_printf_float+0x1be>
 800d326:	f1ab 0b02 	sub.w	fp, fp, #2
 800d32a:	fa5f fb8b 	uxtb.w	fp, fp
 800d32e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d332:	d820      	bhi.n	800d376 <_printf_float+0x18a>
 800d334:	3901      	subs	r1, #1
 800d336:	465a      	mov	r2, fp
 800d338:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d33c:	9109      	str	r1, [sp, #36]	; 0x24
 800d33e:	f7ff ff17 	bl	800d170 <__exponent>
 800d342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d344:	1813      	adds	r3, r2, r0
 800d346:	2a01      	cmp	r2, #1
 800d348:	4681      	mov	r9, r0
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	dc02      	bgt.n	800d354 <_printf_float+0x168>
 800d34e:	6822      	ldr	r2, [r4, #0]
 800d350:	07d2      	lsls	r2, r2, #31
 800d352:	d501      	bpl.n	800d358 <_printf_float+0x16c>
 800d354:	3301      	adds	r3, #1
 800d356:	6123      	str	r3, [r4, #16]
 800d358:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d09c      	beq.n	800d29a <_printf_float+0xae>
 800d360:	232d      	movs	r3, #45	; 0x2d
 800d362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d366:	e798      	b.n	800d29a <_printf_float+0xae>
 800d368:	9a06      	ldr	r2, [sp, #24]
 800d36a:	2a47      	cmp	r2, #71	; 0x47
 800d36c:	d1be      	bne.n	800d2ec <_printf_float+0x100>
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d1bc      	bne.n	800d2ec <_printf_float+0x100>
 800d372:	2301      	movs	r3, #1
 800d374:	e7b9      	b.n	800d2ea <_printf_float+0xfe>
 800d376:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d37a:	d118      	bne.n	800d3ae <_printf_float+0x1c2>
 800d37c:	2900      	cmp	r1, #0
 800d37e:	6863      	ldr	r3, [r4, #4]
 800d380:	dd0b      	ble.n	800d39a <_printf_float+0x1ae>
 800d382:	6121      	str	r1, [r4, #16]
 800d384:	b913      	cbnz	r3, 800d38c <_printf_float+0x1a0>
 800d386:	6822      	ldr	r2, [r4, #0]
 800d388:	07d0      	lsls	r0, r2, #31
 800d38a:	d502      	bpl.n	800d392 <_printf_float+0x1a6>
 800d38c:	3301      	adds	r3, #1
 800d38e:	440b      	add	r3, r1
 800d390:	6123      	str	r3, [r4, #16]
 800d392:	65a1      	str	r1, [r4, #88]	; 0x58
 800d394:	f04f 0900 	mov.w	r9, #0
 800d398:	e7de      	b.n	800d358 <_printf_float+0x16c>
 800d39a:	b913      	cbnz	r3, 800d3a2 <_printf_float+0x1b6>
 800d39c:	6822      	ldr	r2, [r4, #0]
 800d39e:	07d2      	lsls	r2, r2, #31
 800d3a0:	d501      	bpl.n	800d3a6 <_printf_float+0x1ba>
 800d3a2:	3302      	adds	r3, #2
 800d3a4:	e7f4      	b.n	800d390 <_printf_float+0x1a4>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e7f2      	b.n	800d390 <_printf_float+0x1a4>
 800d3aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b0:	4299      	cmp	r1, r3
 800d3b2:	db05      	blt.n	800d3c0 <_printf_float+0x1d4>
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	6121      	str	r1, [r4, #16]
 800d3b8:	07d8      	lsls	r0, r3, #31
 800d3ba:	d5ea      	bpl.n	800d392 <_printf_float+0x1a6>
 800d3bc:	1c4b      	adds	r3, r1, #1
 800d3be:	e7e7      	b.n	800d390 <_printf_float+0x1a4>
 800d3c0:	2900      	cmp	r1, #0
 800d3c2:	bfd4      	ite	le
 800d3c4:	f1c1 0202 	rsble	r2, r1, #2
 800d3c8:	2201      	movgt	r2, #1
 800d3ca:	4413      	add	r3, r2
 800d3cc:	e7e0      	b.n	800d390 <_printf_float+0x1a4>
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	055a      	lsls	r2, r3, #21
 800d3d2:	d407      	bmi.n	800d3e4 <_printf_float+0x1f8>
 800d3d4:	6923      	ldr	r3, [r4, #16]
 800d3d6:	4642      	mov	r2, r8
 800d3d8:	4631      	mov	r1, r6
 800d3da:	4628      	mov	r0, r5
 800d3dc:	47b8      	blx	r7
 800d3de:	3001      	adds	r0, #1
 800d3e0:	d12c      	bne.n	800d43c <_printf_float+0x250>
 800d3e2:	e764      	b.n	800d2ae <_printf_float+0xc2>
 800d3e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3e8:	f240 80e0 	bls.w	800d5ac <_printf_float+0x3c0>
 800d3ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	f7f3 fb90 	bl	8000b18 <__aeabi_dcmpeq>
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d034      	beq.n	800d466 <_printf_float+0x27a>
 800d3fc:	4a37      	ldr	r2, [pc, #220]	; (800d4dc <_printf_float+0x2f0>)
 800d3fe:	2301      	movs	r3, #1
 800d400:	4631      	mov	r1, r6
 800d402:	4628      	mov	r0, r5
 800d404:	47b8      	blx	r7
 800d406:	3001      	adds	r0, #1
 800d408:	f43f af51 	beq.w	800d2ae <_printf_float+0xc2>
 800d40c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d410:	429a      	cmp	r2, r3
 800d412:	db02      	blt.n	800d41a <_printf_float+0x22e>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	07d8      	lsls	r0, r3, #31
 800d418:	d510      	bpl.n	800d43c <_printf_float+0x250>
 800d41a:	ee18 3a10 	vmov	r3, s16
 800d41e:	4652      	mov	r2, sl
 800d420:	4631      	mov	r1, r6
 800d422:	4628      	mov	r0, r5
 800d424:	47b8      	blx	r7
 800d426:	3001      	adds	r0, #1
 800d428:	f43f af41 	beq.w	800d2ae <_printf_float+0xc2>
 800d42c:	f04f 0800 	mov.w	r8, #0
 800d430:	f104 091a 	add.w	r9, r4, #26
 800d434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d436:	3b01      	subs	r3, #1
 800d438:	4543      	cmp	r3, r8
 800d43a:	dc09      	bgt.n	800d450 <_printf_float+0x264>
 800d43c:	6823      	ldr	r3, [r4, #0]
 800d43e:	079b      	lsls	r3, r3, #30
 800d440:	f100 8105 	bmi.w	800d64e <_printf_float+0x462>
 800d444:	68e0      	ldr	r0, [r4, #12]
 800d446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d448:	4298      	cmp	r0, r3
 800d44a:	bfb8      	it	lt
 800d44c:	4618      	movlt	r0, r3
 800d44e:	e730      	b.n	800d2b2 <_printf_float+0xc6>
 800d450:	2301      	movs	r3, #1
 800d452:	464a      	mov	r2, r9
 800d454:	4631      	mov	r1, r6
 800d456:	4628      	mov	r0, r5
 800d458:	47b8      	blx	r7
 800d45a:	3001      	adds	r0, #1
 800d45c:	f43f af27 	beq.w	800d2ae <_printf_float+0xc2>
 800d460:	f108 0801 	add.w	r8, r8, #1
 800d464:	e7e6      	b.n	800d434 <_printf_float+0x248>
 800d466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d468:	2b00      	cmp	r3, #0
 800d46a:	dc39      	bgt.n	800d4e0 <_printf_float+0x2f4>
 800d46c:	4a1b      	ldr	r2, [pc, #108]	; (800d4dc <_printf_float+0x2f0>)
 800d46e:	2301      	movs	r3, #1
 800d470:	4631      	mov	r1, r6
 800d472:	4628      	mov	r0, r5
 800d474:	47b8      	blx	r7
 800d476:	3001      	adds	r0, #1
 800d478:	f43f af19 	beq.w	800d2ae <_printf_float+0xc2>
 800d47c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d480:	4313      	orrs	r3, r2
 800d482:	d102      	bne.n	800d48a <_printf_float+0x29e>
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	07d9      	lsls	r1, r3, #31
 800d488:	d5d8      	bpl.n	800d43c <_printf_float+0x250>
 800d48a:	ee18 3a10 	vmov	r3, s16
 800d48e:	4652      	mov	r2, sl
 800d490:	4631      	mov	r1, r6
 800d492:	4628      	mov	r0, r5
 800d494:	47b8      	blx	r7
 800d496:	3001      	adds	r0, #1
 800d498:	f43f af09 	beq.w	800d2ae <_printf_float+0xc2>
 800d49c:	f04f 0900 	mov.w	r9, #0
 800d4a0:	f104 0a1a 	add.w	sl, r4, #26
 800d4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a6:	425b      	negs	r3, r3
 800d4a8:	454b      	cmp	r3, r9
 800d4aa:	dc01      	bgt.n	800d4b0 <_printf_float+0x2c4>
 800d4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ae:	e792      	b.n	800d3d6 <_printf_float+0x1ea>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	4652      	mov	r2, sl
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	47b8      	blx	r7
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	f43f aef7 	beq.w	800d2ae <_printf_float+0xc2>
 800d4c0:	f109 0901 	add.w	r9, r9, #1
 800d4c4:	e7ee      	b.n	800d4a4 <_printf_float+0x2b8>
 800d4c6:	bf00      	nop
 800d4c8:	7fefffff 	.word	0x7fefffff
 800d4cc:	0800fe98 	.word	0x0800fe98
 800d4d0:	0800fe9c 	.word	0x0800fe9c
 800d4d4:	0800fea4 	.word	0x0800fea4
 800d4d8:	0800fea0 	.word	0x0800fea0
 800d4dc:	0800fea8 	.word	0x0800fea8
 800d4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	bfa8      	it	ge
 800d4e8:	461a      	movge	r2, r3
 800d4ea:	2a00      	cmp	r2, #0
 800d4ec:	4691      	mov	r9, r2
 800d4ee:	dc37      	bgt.n	800d560 <_printf_float+0x374>
 800d4f0:	f04f 0b00 	mov.w	fp, #0
 800d4f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4f8:	f104 021a 	add.w	r2, r4, #26
 800d4fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4fe:	9305      	str	r3, [sp, #20]
 800d500:	eba3 0309 	sub.w	r3, r3, r9
 800d504:	455b      	cmp	r3, fp
 800d506:	dc33      	bgt.n	800d570 <_printf_float+0x384>
 800d508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d50c:	429a      	cmp	r2, r3
 800d50e:	db3b      	blt.n	800d588 <_printf_float+0x39c>
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	07da      	lsls	r2, r3, #31
 800d514:	d438      	bmi.n	800d588 <_printf_float+0x39c>
 800d516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d518:	9a05      	ldr	r2, [sp, #20]
 800d51a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d51c:	1a9a      	subs	r2, r3, r2
 800d51e:	eba3 0901 	sub.w	r9, r3, r1
 800d522:	4591      	cmp	r9, r2
 800d524:	bfa8      	it	ge
 800d526:	4691      	movge	r9, r2
 800d528:	f1b9 0f00 	cmp.w	r9, #0
 800d52c:	dc35      	bgt.n	800d59a <_printf_float+0x3ae>
 800d52e:	f04f 0800 	mov.w	r8, #0
 800d532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d536:	f104 0a1a 	add.w	sl, r4, #26
 800d53a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d53e:	1a9b      	subs	r3, r3, r2
 800d540:	eba3 0309 	sub.w	r3, r3, r9
 800d544:	4543      	cmp	r3, r8
 800d546:	f77f af79 	ble.w	800d43c <_printf_float+0x250>
 800d54a:	2301      	movs	r3, #1
 800d54c:	4652      	mov	r2, sl
 800d54e:	4631      	mov	r1, r6
 800d550:	4628      	mov	r0, r5
 800d552:	47b8      	blx	r7
 800d554:	3001      	adds	r0, #1
 800d556:	f43f aeaa 	beq.w	800d2ae <_printf_float+0xc2>
 800d55a:	f108 0801 	add.w	r8, r8, #1
 800d55e:	e7ec      	b.n	800d53a <_printf_float+0x34e>
 800d560:	4613      	mov	r3, r2
 800d562:	4631      	mov	r1, r6
 800d564:	4642      	mov	r2, r8
 800d566:	4628      	mov	r0, r5
 800d568:	47b8      	blx	r7
 800d56a:	3001      	adds	r0, #1
 800d56c:	d1c0      	bne.n	800d4f0 <_printf_float+0x304>
 800d56e:	e69e      	b.n	800d2ae <_printf_float+0xc2>
 800d570:	2301      	movs	r3, #1
 800d572:	4631      	mov	r1, r6
 800d574:	4628      	mov	r0, r5
 800d576:	9205      	str	r2, [sp, #20]
 800d578:	47b8      	blx	r7
 800d57a:	3001      	adds	r0, #1
 800d57c:	f43f ae97 	beq.w	800d2ae <_printf_float+0xc2>
 800d580:	9a05      	ldr	r2, [sp, #20]
 800d582:	f10b 0b01 	add.w	fp, fp, #1
 800d586:	e7b9      	b.n	800d4fc <_printf_float+0x310>
 800d588:	ee18 3a10 	vmov	r3, s16
 800d58c:	4652      	mov	r2, sl
 800d58e:	4631      	mov	r1, r6
 800d590:	4628      	mov	r0, r5
 800d592:	47b8      	blx	r7
 800d594:	3001      	adds	r0, #1
 800d596:	d1be      	bne.n	800d516 <_printf_float+0x32a>
 800d598:	e689      	b.n	800d2ae <_printf_float+0xc2>
 800d59a:	9a05      	ldr	r2, [sp, #20]
 800d59c:	464b      	mov	r3, r9
 800d59e:	4442      	add	r2, r8
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	47b8      	blx	r7
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	d1c1      	bne.n	800d52e <_printf_float+0x342>
 800d5aa:	e680      	b.n	800d2ae <_printf_float+0xc2>
 800d5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5ae:	2a01      	cmp	r2, #1
 800d5b0:	dc01      	bgt.n	800d5b6 <_printf_float+0x3ca>
 800d5b2:	07db      	lsls	r3, r3, #31
 800d5b4:	d538      	bpl.n	800d628 <_printf_float+0x43c>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	4642      	mov	r2, r8
 800d5ba:	4631      	mov	r1, r6
 800d5bc:	4628      	mov	r0, r5
 800d5be:	47b8      	blx	r7
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	f43f ae74 	beq.w	800d2ae <_printf_float+0xc2>
 800d5c6:	ee18 3a10 	vmov	r3, s16
 800d5ca:	4652      	mov	r2, sl
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	47b8      	blx	r7
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	f43f ae6b 	beq.w	800d2ae <_printf_float+0xc2>
 800d5d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f7f3 fa9a 	bl	8000b18 <__aeabi_dcmpeq>
 800d5e4:	b9d8      	cbnz	r0, 800d61e <_printf_float+0x432>
 800d5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5e8:	f108 0201 	add.w	r2, r8, #1
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	47b8      	blx	r7
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	d10e      	bne.n	800d616 <_printf_float+0x42a>
 800d5f8:	e659      	b.n	800d2ae <_printf_float+0xc2>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	4652      	mov	r2, sl
 800d5fe:	4631      	mov	r1, r6
 800d600:	4628      	mov	r0, r5
 800d602:	47b8      	blx	r7
 800d604:	3001      	adds	r0, #1
 800d606:	f43f ae52 	beq.w	800d2ae <_printf_float+0xc2>
 800d60a:	f108 0801 	add.w	r8, r8, #1
 800d60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d610:	3b01      	subs	r3, #1
 800d612:	4543      	cmp	r3, r8
 800d614:	dcf1      	bgt.n	800d5fa <_printf_float+0x40e>
 800d616:	464b      	mov	r3, r9
 800d618:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d61c:	e6dc      	b.n	800d3d8 <_printf_float+0x1ec>
 800d61e:	f04f 0800 	mov.w	r8, #0
 800d622:	f104 0a1a 	add.w	sl, r4, #26
 800d626:	e7f2      	b.n	800d60e <_printf_float+0x422>
 800d628:	2301      	movs	r3, #1
 800d62a:	4642      	mov	r2, r8
 800d62c:	e7df      	b.n	800d5ee <_printf_float+0x402>
 800d62e:	2301      	movs	r3, #1
 800d630:	464a      	mov	r2, r9
 800d632:	4631      	mov	r1, r6
 800d634:	4628      	mov	r0, r5
 800d636:	47b8      	blx	r7
 800d638:	3001      	adds	r0, #1
 800d63a:	f43f ae38 	beq.w	800d2ae <_printf_float+0xc2>
 800d63e:	f108 0801 	add.w	r8, r8, #1
 800d642:	68e3      	ldr	r3, [r4, #12]
 800d644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d646:	1a5b      	subs	r3, r3, r1
 800d648:	4543      	cmp	r3, r8
 800d64a:	dcf0      	bgt.n	800d62e <_printf_float+0x442>
 800d64c:	e6fa      	b.n	800d444 <_printf_float+0x258>
 800d64e:	f04f 0800 	mov.w	r8, #0
 800d652:	f104 0919 	add.w	r9, r4, #25
 800d656:	e7f4      	b.n	800d642 <_printf_float+0x456>

0800d658 <_printf_common>:
 800d658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d65c:	4616      	mov	r6, r2
 800d65e:	4699      	mov	r9, r3
 800d660:	688a      	ldr	r2, [r1, #8]
 800d662:	690b      	ldr	r3, [r1, #16]
 800d664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d668:	4293      	cmp	r3, r2
 800d66a:	bfb8      	it	lt
 800d66c:	4613      	movlt	r3, r2
 800d66e:	6033      	str	r3, [r6, #0]
 800d670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d674:	4607      	mov	r7, r0
 800d676:	460c      	mov	r4, r1
 800d678:	b10a      	cbz	r2, 800d67e <_printf_common+0x26>
 800d67a:	3301      	adds	r3, #1
 800d67c:	6033      	str	r3, [r6, #0]
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	0699      	lsls	r1, r3, #26
 800d682:	bf42      	ittt	mi
 800d684:	6833      	ldrmi	r3, [r6, #0]
 800d686:	3302      	addmi	r3, #2
 800d688:	6033      	strmi	r3, [r6, #0]
 800d68a:	6825      	ldr	r5, [r4, #0]
 800d68c:	f015 0506 	ands.w	r5, r5, #6
 800d690:	d106      	bne.n	800d6a0 <_printf_common+0x48>
 800d692:	f104 0a19 	add.w	sl, r4, #25
 800d696:	68e3      	ldr	r3, [r4, #12]
 800d698:	6832      	ldr	r2, [r6, #0]
 800d69a:	1a9b      	subs	r3, r3, r2
 800d69c:	42ab      	cmp	r3, r5
 800d69e:	dc26      	bgt.n	800d6ee <_printf_common+0x96>
 800d6a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6a4:	1e13      	subs	r3, r2, #0
 800d6a6:	6822      	ldr	r2, [r4, #0]
 800d6a8:	bf18      	it	ne
 800d6aa:	2301      	movne	r3, #1
 800d6ac:	0692      	lsls	r2, r2, #26
 800d6ae:	d42b      	bmi.n	800d708 <_printf_common+0xb0>
 800d6b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6b4:	4649      	mov	r1, r9
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	47c0      	blx	r8
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	d01e      	beq.n	800d6fc <_printf_common+0xa4>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	68e5      	ldr	r5, [r4, #12]
 800d6c2:	6832      	ldr	r2, [r6, #0]
 800d6c4:	f003 0306 	and.w	r3, r3, #6
 800d6c8:	2b04      	cmp	r3, #4
 800d6ca:	bf08      	it	eq
 800d6cc:	1aad      	subeq	r5, r5, r2
 800d6ce:	68a3      	ldr	r3, [r4, #8]
 800d6d0:	6922      	ldr	r2, [r4, #16]
 800d6d2:	bf0c      	ite	eq
 800d6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6d8:	2500      	movne	r5, #0
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	bfc4      	itt	gt
 800d6de:	1a9b      	subgt	r3, r3, r2
 800d6e0:	18ed      	addgt	r5, r5, r3
 800d6e2:	2600      	movs	r6, #0
 800d6e4:	341a      	adds	r4, #26
 800d6e6:	42b5      	cmp	r5, r6
 800d6e8:	d11a      	bne.n	800d720 <_printf_common+0xc8>
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	e008      	b.n	800d700 <_printf_common+0xa8>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	4652      	mov	r2, sl
 800d6f2:	4649      	mov	r1, r9
 800d6f4:	4638      	mov	r0, r7
 800d6f6:	47c0      	blx	r8
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	d103      	bne.n	800d704 <_printf_common+0xac>
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d704:	3501      	adds	r5, #1
 800d706:	e7c6      	b.n	800d696 <_printf_common+0x3e>
 800d708:	18e1      	adds	r1, r4, r3
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	2030      	movs	r0, #48	; 0x30
 800d70e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d712:	4422      	add	r2, r4
 800d714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d71c:	3302      	adds	r3, #2
 800d71e:	e7c7      	b.n	800d6b0 <_printf_common+0x58>
 800d720:	2301      	movs	r3, #1
 800d722:	4622      	mov	r2, r4
 800d724:	4649      	mov	r1, r9
 800d726:	4638      	mov	r0, r7
 800d728:	47c0      	blx	r8
 800d72a:	3001      	adds	r0, #1
 800d72c:	d0e6      	beq.n	800d6fc <_printf_common+0xa4>
 800d72e:	3601      	adds	r6, #1
 800d730:	e7d9      	b.n	800d6e6 <_printf_common+0x8e>
	...

0800d734 <_printf_i>:
 800d734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d738:	7e0f      	ldrb	r7, [r1, #24]
 800d73a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d73c:	2f78      	cmp	r7, #120	; 0x78
 800d73e:	4691      	mov	r9, r2
 800d740:	4680      	mov	r8, r0
 800d742:	460c      	mov	r4, r1
 800d744:	469a      	mov	sl, r3
 800d746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d74a:	d807      	bhi.n	800d75c <_printf_i+0x28>
 800d74c:	2f62      	cmp	r7, #98	; 0x62
 800d74e:	d80a      	bhi.n	800d766 <_printf_i+0x32>
 800d750:	2f00      	cmp	r7, #0
 800d752:	f000 80d8 	beq.w	800d906 <_printf_i+0x1d2>
 800d756:	2f58      	cmp	r7, #88	; 0x58
 800d758:	f000 80a3 	beq.w	800d8a2 <_printf_i+0x16e>
 800d75c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d764:	e03a      	b.n	800d7dc <_printf_i+0xa8>
 800d766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d76a:	2b15      	cmp	r3, #21
 800d76c:	d8f6      	bhi.n	800d75c <_printf_i+0x28>
 800d76e:	a101      	add	r1, pc, #4	; (adr r1, 800d774 <_printf_i+0x40>)
 800d770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d774:	0800d7cd 	.word	0x0800d7cd
 800d778:	0800d7e1 	.word	0x0800d7e1
 800d77c:	0800d75d 	.word	0x0800d75d
 800d780:	0800d75d 	.word	0x0800d75d
 800d784:	0800d75d 	.word	0x0800d75d
 800d788:	0800d75d 	.word	0x0800d75d
 800d78c:	0800d7e1 	.word	0x0800d7e1
 800d790:	0800d75d 	.word	0x0800d75d
 800d794:	0800d75d 	.word	0x0800d75d
 800d798:	0800d75d 	.word	0x0800d75d
 800d79c:	0800d75d 	.word	0x0800d75d
 800d7a0:	0800d8ed 	.word	0x0800d8ed
 800d7a4:	0800d811 	.word	0x0800d811
 800d7a8:	0800d8cf 	.word	0x0800d8cf
 800d7ac:	0800d75d 	.word	0x0800d75d
 800d7b0:	0800d75d 	.word	0x0800d75d
 800d7b4:	0800d90f 	.word	0x0800d90f
 800d7b8:	0800d75d 	.word	0x0800d75d
 800d7bc:	0800d811 	.word	0x0800d811
 800d7c0:	0800d75d 	.word	0x0800d75d
 800d7c4:	0800d75d 	.word	0x0800d75d
 800d7c8:	0800d8d7 	.word	0x0800d8d7
 800d7cc:	682b      	ldr	r3, [r5, #0]
 800d7ce:	1d1a      	adds	r2, r3, #4
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	602a      	str	r2, [r5, #0]
 800d7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e0a3      	b.n	800d928 <_printf_i+0x1f4>
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	6829      	ldr	r1, [r5, #0]
 800d7e4:	0606      	lsls	r6, r0, #24
 800d7e6:	f101 0304 	add.w	r3, r1, #4
 800d7ea:	d50a      	bpl.n	800d802 <_printf_i+0xce>
 800d7ec:	680e      	ldr	r6, [r1, #0]
 800d7ee:	602b      	str	r3, [r5, #0]
 800d7f0:	2e00      	cmp	r6, #0
 800d7f2:	da03      	bge.n	800d7fc <_printf_i+0xc8>
 800d7f4:	232d      	movs	r3, #45	; 0x2d
 800d7f6:	4276      	negs	r6, r6
 800d7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7fc:	485e      	ldr	r0, [pc, #376]	; (800d978 <_printf_i+0x244>)
 800d7fe:	230a      	movs	r3, #10
 800d800:	e019      	b.n	800d836 <_printf_i+0x102>
 800d802:	680e      	ldr	r6, [r1, #0]
 800d804:	602b      	str	r3, [r5, #0]
 800d806:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d80a:	bf18      	it	ne
 800d80c:	b236      	sxthne	r6, r6
 800d80e:	e7ef      	b.n	800d7f0 <_printf_i+0xbc>
 800d810:	682b      	ldr	r3, [r5, #0]
 800d812:	6820      	ldr	r0, [r4, #0]
 800d814:	1d19      	adds	r1, r3, #4
 800d816:	6029      	str	r1, [r5, #0]
 800d818:	0601      	lsls	r1, r0, #24
 800d81a:	d501      	bpl.n	800d820 <_printf_i+0xec>
 800d81c:	681e      	ldr	r6, [r3, #0]
 800d81e:	e002      	b.n	800d826 <_printf_i+0xf2>
 800d820:	0646      	lsls	r6, r0, #25
 800d822:	d5fb      	bpl.n	800d81c <_printf_i+0xe8>
 800d824:	881e      	ldrh	r6, [r3, #0]
 800d826:	4854      	ldr	r0, [pc, #336]	; (800d978 <_printf_i+0x244>)
 800d828:	2f6f      	cmp	r7, #111	; 0x6f
 800d82a:	bf0c      	ite	eq
 800d82c:	2308      	moveq	r3, #8
 800d82e:	230a      	movne	r3, #10
 800d830:	2100      	movs	r1, #0
 800d832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d836:	6865      	ldr	r5, [r4, #4]
 800d838:	60a5      	str	r5, [r4, #8]
 800d83a:	2d00      	cmp	r5, #0
 800d83c:	bfa2      	ittt	ge
 800d83e:	6821      	ldrge	r1, [r4, #0]
 800d840:	f021 0104 	bicge.w	r1, r1, #4
 800d844:	6021      	strge	r1, [r4, #0]
 800d846:	b90e      	cbnz	r6, 800d84c <_printf_i+0x118>
 800d848:	2d00      	cmp	r5, #0
 800d84a:	d04d      	beq.n	800d8e8 <_printf_i+0x1b4>
 800d84c:	4615      	mov	r5, r2
 800d84e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d852:	fb03 6711 	mls	r7, r3, r1, r6
 800d856:	5dc7      	ldrb	r7, [r0, r7]
 800d858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d85c:	4637      	mov	r7, r6
 800d85e:	42bb      	cmp	r3, r7
 800d860:	460e      	mov	r6, r1
 800d862:	d9f4      	bls.n	800d84e <_printf_i+0x11a>
 800d864:	2b08      	cmp	r3, #8
 800d866:	d10b      	bne.n	800d880 <_printf_i+0x14c>
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	07de      	lsls	r6, r3, #31
 800d86c:	d508      	bpl.n	800d880 <_printf_i+0x14c>
 800d86e:	6923      	ldr	r3, [r4, #16]
 800d870:	6861      	ldr	r1, [r4, #4]
 800d872:	4299      	cmp	r1, r3
 800d874:	bfde      	ittt	le
 800d876:	2330      	movle	r3, #48	; 0x30
 800d878:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d87c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d880:	1b52      	subs	r2, r2, r5
 800d882:	6122      	str	r2, [r4, #16]
 800d884:	f8cd a000 	str.w	sl, [sp]
 800d888:	464b      	mov	r3, r9
 800d88a:	aa03      	add	r2, sp, #12
 800d88c:	4621      	mov	r1, r4
 800d88e:	4640      	mov	r0, r8
 800d890:	f7ff fee2 	bl	800d658 <_printf_common>
 800d894:	3001      	adds	r0, #1
 800d896:	d14c      	bne.n	800d932 <_printf_i+0x1fe>
 800d898:	f04f 30ff 	mov.w	r0, #4294967295
 800d89c:	b004      	add	sp, #16
 800d89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a2:	4835      	ldr	r0, [pc, #212]	; (800d978 <_printf_i+0x244>)
 800d8a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8a8:	6829      	ldr	r1, [r5, #0]
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8b0:	6029      	str	r1, [r5, #0]
 800d8b2:	061d      	lsls	r5, r3, #24
 800d8b4:	d514      	bpl.n	800d8e0 <_printf_i+0x1ac>
 800d8b6:	07df      	lsls	r7, r3, #31
 800d8b8:	bf44      	itt	mi
 800d8ba:	f043 0320 	orrmi.w	r3, r3, #32
 800d8be:	6023      	strmi	r3, [r4, #0]
 800d8c0:	b91e      	cbnz	r6, 800d8ca <_printf_i+0x196>
 800d8c2:	6823      	ldr	r3, [r4, #0]
 800d8c4:	f023 0320 	bic.w	r3, r3, #32
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	2310      	movs	r3, #16
 800d8cc:	e7b0      	b.n	800d830 <_printf_i+0xfc>
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	f043 0320 	orr.w	r3, r3, #32
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	2378      	movs	r3, #120	; 0x78
 800d8d8:	4828      	ldr	r0, [pc, #160]	; (800d97c <_printf_i+0x248>)
 800d8da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8de:	e7e3      	b.n	800d8a8 <_printf_i+0x174>
 800d8e0:	0659      	lsls	r1, r3, #25
 800d8e2:	bf48      	it	mi
 800d8e4:	b2b6      	uxthmi	r6, r6
 800d8e6:	e7e6      	b.n	800d8b6 <_printf_i+0x182>
 800d8e8:	4615      	mov	r5, r2
 800d8ea:	e7bb      	b.n	800d864 <_printf_i+0x130>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	6826      	ldr	r6, [r4, #0]
 800d8f0:	6961      	ldr	r1, [r4, #20]
 800d8f2:	1d18      	adds	r0, r3, #4
 800d8f4:	6028      	str	r0, [r5, #0]
 800d8f6:	0635      	lsls	r5, r6, #24
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	d501      	bpl.n	800d900 <_printf_i+0x1cc>
 800d8fc:	6019      	str	r1, [r3, #0]
 800d8fe:	e002      	b.n	800d906 <_printf_i+0x1d2>
 800d900:	0670      	lsls	r0, r6, #25
 800d902:	d5fb      	bpl.n	800d8fc <_printf_i+0x1c8>
 800d904:	8019      	strh	r1, [r3, #0]
 800d906:	2300      	movs	r3, #0
 800d908:	6123      	str	r3, [r4, #16]
 800d90a:	4615      	mov	r5, r2
 800d90c:	e7ba      	b.n	800d884 <_printf_i+0x150>
 800d90e:	682b      	ldr	r3, [r5, #0]
 800d910:	1d1a      	adds	r2, r3, #4
 800d912:	602a      	str	r2, [r5, #0]
 800d914:	681d      	ldr	r5, [r3, #0]
 800d916:	6862      	ldr	r2, [r4, #4]
 800d918:	2100      	movs	r1, #0
 800d91a:	4628      	mov	r0, r5
 800d91c:	f7f2 fc88 	bl	8000230 <memchr>
 800d920:	b108      	cbz	r0, 800d926 <_printf_i+0x1f2>
 800d922:	1b40      	subs	r0, r0, r5
 800d924:	6060      	str	r0, [r4, #4]
 800d926:	6863      	ldr	r3, [r4, #4]
 800d928:	6123      	str	r3, [r4, #16]
 800d92a:	2300      	movs	r3, #0
 800d92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d930:	e7a8      	b.n	800d884 <_printf_i+0x150>
 800d932:	6923      	ldr	r3, [r4, #16]
 800d934:	462a      	mov	r2, r5
 800d936:	4649      	mov	r1, r9
 800d938:	4640      	mov	r0, r8
 800d93a:	47d0      	blx	sl
 800d93c:	3001      	adds	r0, #1
 800d93e:	d0ab      	beq.n	800d898 <_printf_i+0x164>
 800d940:	6823      	ldr	r3, [r4, #0]
 800d942:	079b      	lsls	r3, r3, #30
 800d944:	d413      	bmi.n	800d96e <_printf_i+0x23a>
 800d946:	68e0      	ldr	r0, [r4, #12]
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	4298      	cmp	r0, r3
 800d94c:	bfb8      	it	lt
 800d94e:	4618      	movlt	r0, r3
 800d950:	e7a4      	b.n	800d89c <_printf_i+0x168>
 800d952:	2301      	movs	r3, #1
 800d954:	4632      	mov	r2, r6
 800d956:	4649      	mov	r1, r9
 800d958:	4640      	mov	r0, r8
 800d95a:	47d0      	blx	sl
 800d95c:	3001      	adds	r0, #1
 800d95e:	d09b      	beq.n	800d898 <_printf_i+0x164>
 800d960:	3501      	adds	r5, #1
 800d962:	68e3      	ldr	r3, [r4, #12]
 800d964:	9903      	ldr	r1, [sp, #12]
 800d966:	1a5b      	subs	r3, r3, r1
 800d968:	42ab      	cmp	r3, r5
 800d96a:	dcf2      	bgt.n	800d952 <_printf_i+0x21e>
 800d96c:	e7eb      	b.n	800d946 <_printf_i+0x212>
 800d96e:	2500      	movs	r5, #0
 800d970:	f104 0619 	add.w	r6, r4, #25
 800d974:	e7f5      	b.n	800d962 <_printf_i+0x22e>
 800d976:	bf00      	nop
 800d978:	0800feaa 	.word	0x0800feaa
 800d97c:	0800febb 	.word	0x0800febb

0800d980 <iprintf>:
 800d980:	b40f      	push	{r0, r1, r2, r3}
 800d982:	4b0a      	ldr	r3, [pc, #40]	; (800d9ac <iprintf+0x2c>)
 800d984:	b513      	push	{r0, r1, r4, lr}
 800d986:	681c      	ldr	r4, [r3, #0]
 800d988:	b124      	cbz	r4, 800d994 <iprintf+0x14>
 800d98a:	69a3      	ldr	r3, [r4, #24]
 800d98c:	b913      	cbnz	r3, 800d994 <iprintf+0x14>
 800d98e:	4620      	mov	r0, r4
 800d990:	f001 f9a6 	bl	800ece0 <__sinit>
 800d994:	ab05      	add	r3, sp, #20
 800d996:	9a04      	ldr	r2, [sp, #16]
 800d998:	68a1      	ldr	r1, [r4, #8]
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	4620      	mov	r0, r4
 800d99e:	f001 ff63 	bl	800f868 <_vfiprintf_r>
 800d9a2:	b002      	add	sp, #8
 800d9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9a8:	b004      	add	sp, #16
 800d9aa:	4770      	bx	lr
 800d9ac:	20000014 	.word	0x20000014

0800d9b0 <_puts_r>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	460e      	mov	r6, r1
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	b118      	cbz	r0, 800d9c0 <_puts_r+0x10>
 800d9b8:	6983      	ldr	r3, [r0, #24]
 800d9ba:	b90b      	cbnz	r3, 800d9c0 <_puts_r+0x10>
 800d9bc:	f001 f990 	bl	800ece0 <__sinit>
 800d9c0:	69ab      	ldr	r3, [r5, #24]
 800d9c2:	68ac      	ldr	r4, [r5, #8]
 800d9c4:	b913      	cbnz	r3, 800d9cc <_puts_r+0x1c>
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f001 f98a 	bl	800ece0 <__sinit>
 800d9cc:	4b2c      	ldr	r3, [pc, #176]	; (800da80 <_puts_r+0xd0>)
 800d9ce:	429c      	cmp	r4, r3
 800d9d0:	d120      	bne.n	800da14 <_puts_r+0x64>
 800d9d2:	686c      	ldr	r4, [r5, #4]
 800d9d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9d6:	07db      	lsls	r3, r3, #31
 800d9d8:	d405      	bmi.n	800d9e6 <_puts_r+0x36>
 800d9da:	89a3      	ldrh	r3, [r4, #12]
 800d9dc:	0598      	lsls	r0, r3, #22
 800d9de:	d402      	bmi.n	800d9e6 <_puts_r+0x36>
 800d9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9e2:	f001 fa20 	bl	800ee26 <__retarget_lock_acquire_recursive>
 800d9e6:	89a3      	ldrh	r3, [r4, #12]
 800d9e8:	0719      	lsls	r1, r3, #28
 800d9ea:	d51d      	bpl.n	800da28 <_puts_r+0x78>
 800d9ec:	6923      	ldr	r3, [r4, #16]
 800d9ee:	b1db      	cbz	r3, 800da28 <_puts_r+0x78>
 800d9f0:	3e01      	subs	r6, #1
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	60a3      	str	r3, [r4, #8]
 800d9fc:	bb39      	cbnz	r1, 800da4e <_puts_r+0x9e>
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	da38      	bge.n	800da74 <_puts_r+0xc4>
 800da02:	4622      	mov	r2, r4
 800da04:	210a      	movs	r1, #10
 800da06:	4628      	mov	r0, r5
 800da08:	f000 f916 	bl	800dc38 <__swbuf_r>
 800da0c:	3001      	adds	r0, #1
 800da0e:	d011      	beq.n	800da34 <_puts_r+0x84>
 800da10:	250a      	movs	r5, #10
 800da12:	e011      	b.n	800da38 <_puts_r+0x88>
 800da14:	4b1b      	ldr	r3, [pc, #108]	; (800da84 <_puts_r+0xd4>)
 800da16:	429c      	cmp	r4, r3
 800da18:	d101      	bne.n	800da1e <_puts_r+0x6e>
 800da1a:	68ac      	ldr	r4, [r5, #8]
 800da1c:	e7da      	b.n	800d9d4 <_puts_r+0x24>
 800da1e:	4b1a      	ldr	r3, [pc, #104]	; (800da88 <_puts_r+0xd8>)
 800da20:	429c      	cmp	r4, r3
 800da22:	bf08      	it	eq
 800da24:	68ec      	ldreq	r4, [r5, #12]
 800da26:	e7d5      	b.n	800d9d4 <_puts_r+0x24>
 800da28:	4621      	mov	r1, r4
 800da2a:	4628      	mov	r0, r5
 800da2c:	f000 f956 	bl	800dcdc <__swsetup_r>
 800da30:	2800      	cmp	r0, #0
 800da32:	d0dd      	beq.n	800d9f0 <_puts_r+0x40>
 800da34:	f04f 35ff 	mov.w	r5, #4294967295
 800da38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da3a:	07da      	lsls	r2, r3, #31
 800da3c:	d405      	bmi.n	800da4a <_puts_r+0x9a>
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	059b      	lsls	r3, r3, #22
 800da42:	d402      	bmi.n	800da4a <_puts_r+0x9a>
 800da44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da46:	f001 f9ef 	bl	800ee28 <__retarget_lock_release_recursive>
 800da4a:	4628      	mov	r0, r5
 800da4c:	bd70      	pop	{r4, r5, r6, pc}
 800da4e:	2b00      	cmp	r3, #0
 800da50:	da04      	bge.n	800da5c <_puts_r+0xac>
 800da52:	69a2      	ldr	r2, [r4, #24]
 800da54:	429a      	cmp	r2, r3
 800da56:	dc06      	bgt.n	800da66 <_puts_r+0xb6>
 800da58:	290a      	cmp	r1, #10
 800da5a:	d004      	beq.n	800da66 <_puts_r+0xb6>
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	6022      	str	r2, [r4, #0]
 800da62:	7019      	strb	r1, [r3, #0]
 800da64:	e7c5      	b.n	800d9f2 <_puts_r+0x42>
 800da66:	4622      	mov	r2, r4
 800da68:	4628      	mov	r0, r5
 800da6a:	f000 f8e5 	bl	800dc38 <__swbuf_r>
 800da6e:	3001      	adds	r0, #1
 800da70:	d1bf      	bne.n	800d9f2 <_puts_r+0x42>
 800da72:	e7df      	b.n	800da34 <_puts_r+0x84>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	250a      	movs	r5, #10
 800da78:	1c5a      	adds	r2, r3, #1
 800da7a:	6022      	str	r2, [r4, #0]
 800da7c:	701d      	strb	r5, [r3, #0]
 800da7e:	e7db      	b.n	800da38 <_puts_r+0x88>
 800da80:	0800ff7c 	.word	0x0800ff7c
 800da84:	0800ff9c 	.word	0x0800ff9c
 800da88:	0800ff5c 	.word	0x0800ff5c

0800da8c <puts>:
 800da8c:	4b02      	ldr	r3, [pc, #8]	; (800da98 <puts+0xc>)
 800da8e:	4601      	mov	r1, r0
 800da90:	6818      	ldr	r0, [r3, #0]
 800da92:	f7ff bf8d 	b.w	800d9b0 <_puts_r>
 800da96:	bf00      	nop
 800da98:	20000014 	.word	0x20000014

0800da9c <setbuf>:
 800da9c:	2900      	cmp	r1, #0
 800da9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daa2:	bf0c      	ite	eq
 800daa4:	2202      	moveq	r2, #2
 800daa6:	2200      	movne	r2, #0
 800daa8:	f000 b800 	b.w	800daac <setvbuf>

0800daac <setvbuf>:
 800daac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dab0:	461d      	mov	r5, r3
 800dab2:	4b5d      	ldr	r3, [pc, #372]	; (800dc28 <setvbuf+0x17c>)
 800dab4:	681f      	ldr	r7, [r3, #0]
 800dab6:	4604      	mov	r4, r0
 800dab8:	460e      	mov	r6, r1
 800daba:	4690      	mov	r8, r2
 800dabc:	b127      	cbz	r7, 800dac8 <setvbuf+0x1c>
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	b913      	cbnz	r3, 800dac8 <setvbuf+0x1c>
 800dac2:	4638      	mov	r0, r7
 800dac4:	f001 f90c 	bl	800ece0 <__sinit>
 800dac8:	4b58      	ldr	r3, [pc, #352]	; (800dc2c <setvbuf+0x180>)
 800daca:	429c      	cmp	r4, r3
 800dacc:	d167      	bne.n	800db9e <setvbuf+0xf2>
 800dace:	687c      	ldr	r4, [r7, #4]
 800dad0:	f1b8 0f02 	cmp.w	r8, #2
 800dad4:	d006      	beq.n	800dae4 <setvbuf+0x38>
 800dad6:	f1b8 0f01 	cmp.w	r8, #1
 800dada:	f200 809f 	bhi.w	800dc1c <setvbuf+0x170>
 800dade:	2d00      	cmp	r5, #0
 800dae0:	f2c0 809c 	blt.w	800dc1c <setvbuf+0x170>
 800dae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dae6:	07db      	lsls	r3, r3, #31
 800dae8:	d405      	bmi.n	800daf6 <setvbuf+0x4a>
 800daea:	89a3      	ldrh	r3, [r4, #12]
 800daec:	0598      	lsls	r0, r3, #22
 800daee:	d402      	bmi.n	800daf6 <setvbuf+0x4a>
 800daf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daf2:	f001 f998 	bl	800ee26 <__retarget_lock_acquire_recursive>
 800daf6:	4621      	mov	r1, r4
 800daf8:	4638      	mov	r0, r7
 800dafa:	f001 f85d 	bl	800ebb8 <_fflush_r>
 800dafe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db00:	b141      	cbz	r1, 800db14 <setvbuf+0x68>
 800db02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db06:	4299      	cmp	r1, r3
 800db08:	d002      	beq.n	800db10 <setvbuf+0x64>
 800db0a:	4638      	mov	r0, r7
 800db0c:	f001 fda2 	bl	800f654 <_free_r>
 800db10:	2300      	movs	r3, #0
 800db12:	6363      	str	r3, [r4, #52]	; 0x34
 800db14:	2300      	movs	r3, #0
 800db16:	61a3      	str	r3, [r4, #24]
 800db18:	6063      	str	r3, [r4, #4]
 800db1a:	89a3      	ldrh	r3, [r4, #12]
 800db1c:	0619      	lsls	r1, r3, #24
 800db1e:	d503      	bpl.n	800db28 <setvbuf+0x7c>
 800db20:	6921      	ldr	r1, [r4, #16]
 800db22:	4638      	mov	r0, r7
 800db24:	f001 fd96 	bl	800f654 <_free_r>
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800db2e:	f023 0303 	bic.w	r3, r3, #3
 800db32:	f1b8 0f02 	cmp.w	r8, #2
 800db36:	81a3      	strh	r3, [r4, #12]
 800db38:	d06c      	beq.n	800dc14 <setvbuf+0x168>
 800db3a:	ab01      	add	r3, sp, #4
 800db3c:	466a      	mov	r2, sp
 800db3e:	4621      	mov	r1, r4
 800db40:	4638      	mov	r0, r7
 800db42:	f001 f972 	bl	800ee2a <__swhatbuf_r>
 800db46:	89a3      	ldrh	r3, [r4, #12]
 800db48:	4318      	orrs	r0, r3
 800db4a:	81a0      	strh	r0, [r4, #12]
 800db4c:	2d00      	cmp	r5, #0
 800db4e:	d130      	bne.n	800dbb2 <setvbuf+0x106>
 800db50:	9d00      	ldr	r5, [sp, #0]
 800db52:	4628      	mov	r0, r5
 800db54:	f001 f9ce 	bl	800eef4 <malloc>
 800db58:	4606      	mov	r6, r0
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d155      	bne.n	800dc0a <setvbuf+0x15e>
 800db5e:	f8dd 9000 	ldr.w	r9, [sp]
 800db62:	45a9      	cmp	r9, r5
 800db64:	d14a      	bne.n	800dbfc <setvbuf+0x150>
 800db66:	f04f 35ff 	mov.w	r5, #4294967295
 800db6a:	2200      	movs	r2, #0
 800db6c:	60a2      	str	r2, [r4, #8]
 800db6e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800db72:	6022      	str	r2, [r4, #0]
 800db74:	6122      	str	r2, [r4, #16]
 800db76:	2201      	movs	r2, #1
 800db78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7c:	6162      	str	r2, [r4, #20]
 800db7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db80:	f043 0302 	orr.w	r3, r3, #2
 800db84:	07d2      	lsls	r2, r2, #31
 800db86:	81a3      	strh	r3, [r4, #12]
 800db88:	d405      	bmi.n	800db96 <setvbuf+0xea>
 800db8a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800db8e:	d102      	bne.n	800db96 <setvbuf+0xea>
 800db90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db92:	f001 f949 	bl	800ee28 <__retarget_lock_release_recursive>
 800db96:	4628      	mov	r0, r5
 800db98:	b003      	add	sp, #12
 800db9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db9e:	4b24      	ldr	r3, [pc, #144]	; (800dc30 <setvbuf+0x184>)
 800dba0:	429c      	cmp	r4, r3
 800dba2:	d101      	bne.n	800dba8 <setvbuf+0xfc>
 800dba4:	68bc      	ldr	r4, [r7, #8]
 800dba6:	e793      	b.n	800dad0 <setvbuf+0x24>
 800dba8:	4b22      	ldr	r3, [pc, #136]	; (800dc34 <setvbuf+0x188>)
 800dbaa:	429c      	cmp	r4, r3
 800dbac:	bf08      	it	eq
 800dbae:	68fc      	ldreq	r4, [r7, #12]
 800dbb0:	e78e      	b.n	800dad0 <setvbuf+0x24>
 800dbb2:	2e00      	cmp	r6, #0
 800dbb4:	d0cd      	beq.n	800db52 <setvbuf+0xa6>
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	b913      	cbnz	r3, 800dbc0 <setvbuf+0x114>
 800dbba:	4638      	mov	r0, r7
 800dbbc:	f001 f890 	bl	800ece0 <__sinit>
 800dbc0:	f1b8 0f01 	cmp.w	r8, #1
 800dbc4:	bf08      	it	eq
 800dbc6:	89a3      	ldrheq	r3, [r4, #12]
 800dbc8:	6026      	str	r6, [r4, #0]
 800dbca:	bf04      	itt	eq
 800dbcc:	f043 0301 	orreq.w	r3, r3, #1
 800dbd0:	81a3      	strheq	r3, [r4, #12]
 800dbd2:	89a2      	ldrh	r2, [r4, #12]
 800dbd4:	f012 0308 	ands.w	r3, r2, #8
 800dbd8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800dbdc:	d01c      	beq.n	800dc18 <setvbuf+0x16c>
 800dbde:	07d3      	lsls	r3, r2, #31
 800dbe0:	bf41      	itttt	mi
 800dbe2:	2300      	movmi	r3, #0
 800dbe4:	426d      	negmi	r5, r5
 800dbe6:	60a3      	strmi	r3, [r4, #8]
 800dbe8:	61a5      	strmi	r5, [r4, #24]
 800dbea:	bf58      	it	pl
 800dbec:	60a5      	strpl	r5, [r4, #8]
 800dbee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800dbf0:	f015 0501 	ands.w	r5, r5, #1
 800dbf4:	d115      	bne.n	800dc22 <setvbuf+0x176>
 800dbf6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800dbfa:	e7c8      	b.n	800db8e <setvbuf+0xe2>
 800dbfc:	4648      	mov	r0, r9
 800dbfe:	f001 f979 	bl	800eef4 <malloc>
 800dc02:	4606      	mov	r6, r0
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d0ae      	beq.n	800db66 <setvbuf+0xba>
 800dc08:	464d      	mov	r5, r9
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc10:	81a3      	strh	r3, [r4, #12]
 800dc12:	e7d0      	b.n	800dbb6 <setvbuf+0x10a>
 800dc14:	2500      	movs	r5, #0
 800dc16:	e7a8      	b.n	800db6a <setvbuf+0xbe>
 800dc18:	60a3      	str	r3, [r4, #8]
 800dc1a:	e7e8      	b.n	800dbee <setvbuf+0x142>
 800dc1c:	f04f 35ff 	mov.w	r5, #4294967295
 800dc20:	e7b9      	b.n	800db96 <setvbuf+0xea>
 800dc22:	2500      	movs	r5, #0
 800dc24:	e7b7      	b.n	800db96 <setvbuf+0xea>
 800dc26:	bf00      	nop
 800dc28:	20000014 	.word	0x20000014
 800dc2c:	0800ff7c 	.word	0x0800ff7c
 800dc30:	0800ff9c 	.word	0x0800ff9c
 800dc34:	0800ff5c 	.word	0x0800ff5c

0800dc38 <__swbuf_r>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	460e      	mov	r6, r1
 800dc3c:	4614      	mov	r4, r2
 800dc3e:	4605      	mov	r5, r0
 800dc40:	b118      	cbz	r0, 800dc4a <__swbuf_r+0x12>
 800dc42:	6983      	ldr	r3, [r0, #24]
 800dc44:	b90b      	cbnz	r3, 800dc4a <__swbuf_r+0x12>
 800dc46:	f001 f84b 	bl	800ece0 <__sinit>
 800dc4a:	4b21      	ldr	r3, [pc, #132]	; (800dcd0 <__swbuf_r+0x98>)
 800dc4c:	429c      	cmp	r4, r3
 800dc4e:	d12b      	bne.n	800dca8 <__swbuf_r+0x70>
 800dc50:	686c      	ldr	r4, [r5, #4]
 800dc52:	69a3      	ldr	r3, [r4, #24]
 800dc54:	60a3      	str	r3, [r4, #8]
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	071a      	lsls	r2, r3, #28
 800dc5a:	d52f      	bpl.n	800dcbc <__swbuf_r+0x84>
 800dc5c:	6923      	ldr	r3, [r4, #16]
 800dc5e:	b36b      	cbz	r3, 800dcbc <__swbuf_r+0x84>
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	6820      	ldr	r0, [r4, #0]
 800dc64:	1ac0      	subs	r0, r0, r3
 800dc66:	6963      	ldr	r3, [r4, #20]
 800dc68:	b2f6      	uxtb	r6, r6
 800dc6a:	4283      	cmp	r3, r0
 800dc6c:	4637      	mov	r7, r6
 800dc6e:	dc04      	bgt.n	800dc7a <__swbuf_r+0x42>
 800dc70:	4621      	mov	r1, r4
 800dc72:	4628      	mov	r0, r5
 800dc74:	f000 ffa0 	bl	800ebb8 <_fflush_r>
 800dc78:	bb30      	cbnz	r0, 800dcc8 <__swbuf_r+0x90>
 800dc7a:	68a3      	ldr	r3, [r4, #8]
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	60a3      	str	r3, [r4, #8]
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	6022      	str	r2, [r4, #0]
 800dc86:	701e      	strb	r6, [r3, #0]
 800dc88:	6963      	ldr	r3, [r4, #20]
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	4283      	cmp	r3, r0
 800dc8e:	d004      	beq.n	800dc9a <__swbuf_r+0x62>
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	07db      	lsls	r3, r3, #31
 800dc94:	d506      	bpl.n	800dca4 <__swbuf_r+0x6c>
 800dc96:	2e0a      	cmp	r6, #10
 800dc98:	d104      	bne.n	800dca4 <__swbuf_r+0x6c>
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f000 ff8b 	bl	800ebb8 <_fflush_r>
 800dca2:	b988      	cbnz	r0, 800dcc8 <__swbuf_r+0x90>
 800dca4:	4638      	mov	r0, r7
 800dca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dca8:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <__swbuf_r+0x9c>)
 800dcaa:	429c      	cmp	r4, r3
 800dcac:	d101      	bne.n	800dcb2 <__swbuf_r+0x7a>
 800dcae:	68ac      	ldr	r4, [r5, #8]
 800dcb0:	e7cf      	b.n	800dc52 <__swbuf_r+0x1a>
 800dcb2:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <__swbuf_r+0xa0>)
 800dcb4:	429c      	cmp	r4, r3
 800dcb6:	bf08      	it	eq
 800dcb8:	68ec      	ldreq	r4, [r5, #12]
 800dcba:	e7ca      	b.n	800dc52 <__swbuf_r+0x1a>
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f000 f80c 	bl	800dcdc <__swsetup_r>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d0cb      	beq.n	800dc60 <__swbuf_r+0x28>
 800dcc8:	f04f 37ff 	mov.w	r7, #4294967295
 800dccc:	e7ea      	b.n	800dca4 <__swbuf_r+0x6c>
 800dcce:	bf00      	nop
 800dcd0:	0800ff7c 	.word	0x0800ff7c
 800dcd4:	0800ff9c 	.word	0x0800ff9c
 800dcd8:	0800ff5c 	.word	0x0800ff5c

0800dcdc <__swsetup_r>:
 800dcdc:	4b32      	ldr	r3, [pc, #200]	; (800dda8 <__swsetup_r+0xcc>)
 800dcde:	b570      	push	{r4, r5, r6, lr}
 800dce0:	681d      	ldr	r5, [r3, #0]
 800dce2:	4606      	mov	r6, r0
 800dce4:	460c      	mov	r4, r1
 800dce6:	b125      	cbz	r5, 800dcf2 <__swsetup_r+0x16>
 800dce8:	69ab      	ldr	r3, [r5, #24]
 800dcea:	b913      	cbnz	r3, 800dcf2 <__swsetup_r+0x16>
 800dcec:	4628      	mov	r0, r5
 800dcee:	f000 fff7 	bl	800ece0 <__sinit>
 800dcf2:	4b2e      	ldr	r3, [pc, #184]	; (800ddac <__swsetup_r+0xd0>)
 800dcf4:	429c      	cmp	r4, r3
 800dcf6:	d10f      	bne.n	800dd18 <__swsetup_r+0x3c>
 800dcf8:	686c      	ldr	r4, [r5, #4]
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd00:	0719      	lsls	r1, r3, #28
 800dd02:	d42c      	bmi.n	800dd5e <__swsetup_r+0x82>
 800dd04:	06dd      	lsls	r5, r3, #27
 800dd06:	d411      	bmi.n	800dd2c <__swsetup_r+0x50>
 800dd08:	2309      	movs	r3, #9
 800dd0a:	6033      	str	r3, [r6, #0]
 800dd0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd10:	81a3      	strh	r3, [r4, #12]
 800dd12:	f04f 30ff 	mov.w	r0, #4294967295
 800dd16:	e03e      	b.n	800dd96 <__swsetup_r+0xba>
 800dd18:	4b25      	ldr	r3, [pc, #148]	; (800ddb0 <__swsetup_r+0xd4>)
 800dd1a:	429c      	cmp	r4, r3
 800dd1c:	d101      	bne.n	800dd22 <__swsetup_r+0x46>
 800dd1e:	68ac      	ldr	r4, [r5, #8]
 800dd20:	e7eb      	b.n	800dcfa <__swsetup_r+0x1e>
 800dd22:	4b24      	ldr	r3, [pc, #144]	; (800ddb4 <__swsetup_r+0xd8>)
 800dd24:	429c      	cmp	r4, r3
 800dd26:	bf08      	it	eq
 800dd28:	68ec      	ldreq	r4, [r5, #12]
 800dd2a:	e7e6      	b.n	800dcfa <__swsetup_r+0x1e>
 800dd2c:	0758      	lsls	r0, r3, #29
 800dd2e:	d512      	bpl.n	800dd56 <__swsetup_r+0x7a>
 800dd30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd32:	b141      	cbz	r1, 800dd46 <__swsetup_r+0x6a>
 800dd34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	d002      	beq.n	800dd42 <__swsetup_r+0x66>
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	f001 fc89 	bl	800f654 <_free_r>
 800dd42:	2300      	movs	r3, #0
 800dd44:	6363      	str	r3, [r4, #52]	; 0x34
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd4c:	81a3      	strh	r3, [r4, #12]
 800dd4e:	2300      	movs	r3, #0
 800dd50:	6063      	str	r3, [r4, #4]
 800dd52:	6923      	ldr	r3, [r4, #16]
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	89a3      	ldrh	r3, [r4, #12]
 800dd58:	f043 0308 	orr.w	r3, r3, #8
 800dd5c:	81a3      	strh	r3, [r4, #12]
 800dd5e:	6923      	ldr	r3, [r4, #16]
 800dd60:	b94b      	cbnz	r3, 800dd76 <__swsetup_r+0x9a>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd6c:	d003      	beq.n	800dd76 <__swsetup_r+0x9a>
 800dd6e:	4621      	mov	r1, r4
 800dd70:	4630      	mov	r0, r6
 800dd72:	f001 f87f 	bl	800ee74 <__smakebuf_r>
 800dd76:	89a0      	ldrh	r0, [r4, #12]
 800dd78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd7c:	f010 0301 	ands.w	r3, r0, #1
 800dd80:	d00a      	beq.n	800dd98 <__swsetup_r+0xbc>
 800dd82:	2300      	movs	r3, #0
 800dd84:	60a3      	str	r3, [r4, #8]
 800dd86:	6963      	ldr	r3, [r4, #20]
 800dd88:	425b      	negs	r3, r3
 800dd8a:	61a3      	str	r3, [r4, #24]
 800dd8c:	6923      	ldr	r3, [r4, #16]
 800dd8e:	b943      	cbnz	r3, 800dda2 <__swsetup_r+0xc6>
 800dd90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd94:	d1ba      	bne.n	800dd0c <__swsetup_r+0x30>
 800dd96:	bd70      	pop	{r4, r5, r6, pc}
 800dd98:	0781      	lsls	r1, r0, #30
 800dd9a:	bf58      	it	pl
 800dd9c:	6963      	ldrpl	r3, [r4, #20]
 800dd9e:	60a3      	str	r3, [r4, #8]
 800dda0:	e7f4      	b.n	800dd8c <__swsetup_r+0xb0>
 800dda2:	2000      	movs	r0, #0
 800dda4:	e7f7      	b.n	800dd96 <__swsetup_r+0xba>
 800dda6:	bf00      	nop
 800dda8:	20000014 	.word	0x20000014
 800ddac:	0800ff7c 	.word	0x0800ff7c
 800ddb0:	0800ff9c 	.word	0x0800ff9c
 800ddb4:	0800ff5c 	.word	0x0800ff5c

0800ddb8 <quorem>:
 800ddb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	6903      	ldr	r3, [r0, #16]
 800ddbe:	690c      	ldr	r4, [r1, #16]
 800ddc0:	42a3      	cmp	r3, r4
 800ddc2:	4607      	mov	r7, r0
 800ddc4:	f2c0 8081 	blt.w	800deca <quorem+0x112>
 800ddc8:	3c01      	subs	r4, #1
 800ddca:	f101 0814 	add.w	r8, r1, #20
 800ddce:	f100 0514 	add.w	r5, r0, #20
 800ddd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddd6:	9301      	str	r3, [sp, #4]
 800ddd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dddc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dde0:	3301      	adds	r3, #1
 800dde2:	429a      	cmp	r2, r3
 800dde4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dde8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddec:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddf0:	d331      	bcc.n	800de56 <quorem+0x9e>
 800ddf2:	f04f 0e00 	mov.w	lr, #0
 800ddf6:	4640      	mov	r0, r8
 800ddf8:	46ac      	mov	ip, r5
 800ddfa:	46f2      	mov	sl, lr
 800ddfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800de00:	b293      	uxth	r3, r2
 800de02:	fb06 e303 	mla	r3, r6, r3, lr
 800de06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	ebaa 0303 	sub.w	r3, sl, r3
 800de10:	f8dc a000 	ldr.w	sl, [ip]
 800de14:	0c12      	lsrs	r2, r2, #16
 800de16:	fa13 f38a 	uxtah	r3, r3, sl
 800de1a:	fb06 e202 	mla	r2, r6, r2, lr
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	9b00      	ldr	r3, [sp, #0]
 800de22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de26:	b292      	uxth	r2, r2
 800de28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de30:	f8bd 3000 	ldrh.w	r3, [sp]
 800de34:	4581      	cmp	r9, r0
 800de36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de3a:	f84c 3b04 	str.w	r3, [ip], #4
 800de3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de42:	d2db      	bcs.n	800ddfc <quorem+0x44>
 800de44:	f855 300b 	ldr.w	r3, [r5, fp]
 800de48:	b92b      	cbnz	r3, 800de56 <quorem+0x9e>
 800de4a:	9b01      	ldr	r3, [sp, #4]
 800de4c:	3b04      	subs	r3, #4
 800de4e:	429d      	cmp	r5, r3
 800de50:	461a      	mov	r2, r3
 800de52:	d32e      	bcc.n	800deb2 <quorem+0xfa>
 800de54:	613c      	str	r4, [r7, #16]
 800de56:	4638      	mov	r0, r7
 800de58:	f001 fae4 	bl	800f424 <__mcmp>
 800de5c:	2800      	cmp	r0, #0
 800de5e:	db24      	blt.n	800deaa <quorem+0xf2>
 800de60:	3601      	adds	r6, #1
 800de62:	4628      	mov	r0, r5
 800de64:	f04f 0c00 	mov.w	ip, #0
 800de68:	f858 2b04 	ldr.w	r2, [r8], #4
 800de6c:	f8d0 e000 	ldr.w	lr, [r0]
 800de70:	b293      	uxth	r3, r2
 800de72:	ebac 0303 	sub.w	r3, ip, r3
 800de76:	0c12      	lsrs	r2, r2, #16
 800de78:	fa13 f38e 	uxtah	r3, r3, lr
 800de7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de84:	b29b      	uxth	r3, r3
 800de86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de8a:	45c1      	cmp	r9, r8
 800de8c:	f840 3b04 	str.w	r3, [r0], #4
 800de90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de94:	d2e8      	bcs.n	800de68 <quorem+0xb0>
 800de96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de9e:	b922      	cbnz	r2, 800deaa <quorem+0xf2>
 800dea0:	3b04      	subs	r3, #4
 800dea2:	429d      	cmp	r5, r3
 800dea4:	461a      	mov	r2, r3
 800dea6:	d30a      	bcc.n	800debe <quorem+0x106>
 800dea8:	613c      	str	r4, [r7, #16]
 800deaa:	4630      	mov	r0, r6
 800deac:	b003      	add	sp, #12
 800deae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb2:	6812      	ldr	r2, [r2, #0]
 800deb4:	3b04      	subs	r3, #4
 800deb6:	2a00      	cmp	r2, #0
 800deb8:	d1cc      	bne.n	800de54 <quorem+0x9c>
 800deba:	3c01      	subs	r4, #1
 800debc:	e7c7      	b.n	800de4e <quorem+0x96>
 800debe:	6812      	ldr	r2, [r2, #0]
 800dec0:	3b04      	subs	r3, #4
 800dec2:	2a00      	cmp	r2, #0
 800dec4:	d1f0      	bne.n	800dea8 <quorem+0xf0>
 800dec6:	3c01      	subs	r4, #1
 800dec8:	e7eb      	b.n	800dea2 <quorem+0xea>
 800deca:	2000      	movs	r0, #0
 800decc:	e7ee      	b.n	800deac <quorem+0xf4>
	...

0800ded0 <_dtoa_r>:
 800ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	ed2d 8b04 	vpush	{d8-d9}
 800ded8:	ec57 6b10 	vmov	r6, r7, d0
 800dedc:	b093      	sub	sp, #76	; 0x4c
 800dede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dee0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dee4:	9106      	str	r1, [sp, #24]
 800dee6:	ee10 aa10 	vmov	sl, s0
 800deea:	4604      	mov	r4, r0
 800deec:	9209      	str	r2, [sp, #36]	; 0x24
 800deee:	930c      	str	r3, [sp, #48]	; 0x30
 800def0:	46bb      	mov	fp, r7
 800def2:	b975      	cbnz	r5, 800df12 <_dtoa_r+0x42>
 800def4:	2010      	movs	r0, #16
 800def6:	f000 fffd 	bl	800eef4 <malloc>
 800defa:	4602      	mov	r2, r0
 800defc:	6260      	str	r0, [r4, #36]	; 0x24
 800defe:	b920      	cbnz	r0, 800df0a <_dtoa_r+0x3a>
 800df00:	4ba7      	ldr	r3, [pc, #668]	; (800e1a0 <_dtoa_r+0x2d0>)
 800df02:	21ea      	movs	r1, #234	; 0xea
 800df04:	48a7      	ldr	r0, [pc, #668]	; (800e1a4 <_dtoa_r+0x2d4>)
 800df06:	f001 fe45 	bl	800fb94 <__assert_func>
 800df0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df0e:	6005      	str	r5, [r0, #0]
 800df10:	60c5      	str	r5, [r0, #12]
 800df12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df14:	6819      	ldr	r1, [r3, #0]
 800df16:	b151      	cbz	r1, 800df2e <_dtoa_r+0x5e>
 800df18:	685a      	ldr	r2, [r3, #4]
 800df1a:	604a      	str	r2, [r1, #4]
 800df1c:	2301      	movs	r3, #1
 800df1e:	4093      	lsls	r3, r2
 800df20:	608b      	str	r3, [r1, #8]
 800df22:	4620      	mov	r0, r4
 800df24:	f001 f83c 	bl	800efa0 <_Bfree>
 800df28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df2a:	2200      	movs	r2, #0
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	1e3b      	subs	r3, r7, #0
 800df30:	bfaa      	itet	ge
 800df32:	2300      	movge	r3, #0
 800df34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800df38:	f8c8 3000 	strge.w	r3, [r8]
 800df3c:	4b9a      	ldr	r3, [pc, #616]	; (800e1a8 <_dtoa_r+0x2d8>)
 800df3e:	bfbc      	itt	lt
 800df40:	2201      	movlt	r2, #1
 800df42:	f8c8 2000 	strlt.w	r2, [r8]
 800df46:	ea33 030b 	bics.w	r3, r3, fp
 800df4a:	d11b      	bne.n	800df84 <_dtoa_r+0xb4>
 800df4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df58:	4333      	orrs	r3, r6
 800df5a:	f000 8592 	beq.w	800ea82 <_dtoa_r+0xbb2>
 800df5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df60:	b963      	cbnz	r3, 800df7c <_dtoa_r+0xac>
 800df62:	4b92      	ldr	r3, [pc, #584]	; (800e1ac <_dtoa_r+0x2dc>)
 800df64:	e022      	b.n	800dfac <_dtoa_r+0xdc>
 800df66:	4b92      	ldr	r3, [pc, #584]	; (800e1b0 <_dtoa_r+0x2e0>)
 800df68:	9301      	str	r3, [sp, #4]
 800df6a:	3308      	adds	r3, #8
 800df6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df6e:	6013      	str	r3, [r2, #0]
 800df70:	9801      	ldr	r0, [sp, #4]
 800df72:	b013      	add	sp, #76	; 0x4c
 800df74:	ecbd 8b04 	vpop	{d8-d9}
 800df78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7c:	4b8b      	ldr	r3, [pc, #556]	; (800e1ac <_dtoa_r+0x2dc>)
 800df7e:	9301      	str	r3, [sp, #4]
 800df80:	3303      	adds	r3, #3
 800df82:	e7f3      	b.n	800df6c <_dtoa_r+0x9c>
 800df84:	2200      	movs	r2, #0
 800df86:	2300      	movs	r3, #0
 800df88:	4650      	mov	r0, sl
 800df8a:	4659      	mov	r1, fp
 800df8c:	f7f2 fdc4 	bl	8000b18 <__aeabi_dcmpeq>
 800df90:	ec4b ab19 	vmov	d9, sl, fp
 800df94:	4680      	mov	r8, r0
 800df96:	b158      	cbz	r0, 800dfb0 <_dtoa_r+0xe0>
 800df98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df9a:	2301      	movs	r3, #1
 800df9c:	6013      	str	r3, [r2, #0]
 800df9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 856b 	beq.w	800ea7c <_dtoa_r+0xbac>
 800dfa6:	4883      	ldr	r0, [pc, #524]	; (800e1b4 <_dtoa_r+0x2e4>)
 800dfa8:	6018      	str	r0, [r3, #0]
 800dfaa:	1e43      	subs	r3, r0, #1
 800dfac:	9301      	str	r3, [sp, #4]
 800dfae:	e7df      	b.n	800df70 <_dtoa_r+0xa0>
 800dfb0:	ec4b ab10 	vmov	d0, sl, fp
 800dfb4:	aa10      	add	r2, sp, #64	; 0x40
 800dfb6:	a911      	add	r1, sp, #68	; 0x44
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f001 fad9 	bl	800f570 <__d2b>
 800dfbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dfc2:	ee08 0a10 	vmov	s16, r0
 800dfc6:	2d00      	cmp	r5, #0
 800dfc8:	f000 8084 	beq.w	800e0d4 <_dtoa_r+0x204>
 800dfcc:	ee19 3a90 	vmov	r3, s19
 800dfd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dfd8:	4656      	mov	r6, sl
 800dfda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dfde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dfe2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dfe6:	4b74      	ldr	r3, [pc, #464]	; (800e1b8 <_dtoa_r+0x2e8>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	4630      	mov	r0, r6
 800dfec:	4639      	mov	r1, r7
 800dfee:	f7f2 f973 	bl	80002d8 <__aeabi_dsub>
 800dff2:	a365      	add	r3, pc, #404	; (adr r3, 800e188 <_dtoa_r+0x2b8>)
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	f7f2 fb26 	bl	8000648 <__aeabi_dmul>
 800dffc:	a364      	add	r3, pc, #400	; (adr r3, 800e190 <_dtoa_r+0x2c0>)
 800dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e002:	f7f2 f96b 	bl	80002dc <__adddf3>
 800e006:	4606      	mov	r6, r0
 800e008:	4628      	mov	r0, r5
 800e00a:	460f      	mov	r7, r1
 800e00c:	f7f2 fab2 	bl	8000574 <__aeabi_i2d>
 800e010:	a361      	add	r3, pc, #388	; (adr r3, 800e198 <_dtoa_r+0x2c8>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	f7f2 fb17 	bl	8000648 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4630      	mov	r0, r6
 800e020:	4639      	mov	r1, r7
 800e022:	f7f2 f95b 	bl	80002dc <__adddf3>
 800e026:	4606      	mov	r6, r0
 800e028:	460f      	mov	r7, r1
 800e02a:	f7f2 fdbd 	bl	8000ba8 <__aeabi_d2iz>
 800e02e:	2200      	movs	r2, #0
 800e030:	9000      	str	r0, [sp, #0]
 800e032:	2300      	movs	r3, #0
 800e034:	4630      	mov	r0, r6
 800e036:	4639      	mov	r1, r7
 800e038:	f7f2 fd78 	bl	8000b2c <__aeabi_dcmplt>
 800e03c:	b150      	cbz	r0, 800e054 <_dtoa_r+0x184>
 800e03e:	9800      	ldr	r0, [sp, #0]
 800e040:	f7f2 fa98 	bl	8000574 <__aeabi_i2d>
 800e044:	4632      	mov	r2, r6
 800e046:	463b      	mov	r3, r7
 800e048:	f7f2 fd66 	bl	8000b18 <__aeabi_dcmpeq>
 800e04c:	b910      	cbnz	r0, 800e054 <_dtoa_r+0x184>
 800e04e:	9b00      	ldr	r3, [sp, #0]
 800e050:	3b01      	subs	r3, #1
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	9b00      	ldr	r3, [sp, #0]
 800e056:	2b16      	cmp	r3, #22
 800e058:	d85a      	bhi.n	800e110 <_dtoa_r+0x240>
 800e05a:	9a00      	ldr	r2, [sp, #0]
 800e05c:	4b57      	ldr	r3, [pc, #348]	; (800e1bc <_dtoa_r+0x2ec>)
 800e05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	ec51 0b19 	vmov	r0, r1, d9
 800e06a:	f7f2 fd5f 	bl	8000b2c <__aeabi_dcmplt>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d050      	beq.n	800e114 <_dtoa_r+0x244>
 800e072:	9b00      	ldr	r3, [sp, #0]
 800e074:	3b01      	subs	r3, #1
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	2300      	movs	r3, #0
 800e07a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e07e:	1b5d      	subs	r5, r3, r5
 800e080:	1e6b      	subs	r3, r5, #1
 800e082:	9305      	str	r3, [sp, #20]
 800e084:	bf45      	ittet	mi
 800e086:	f1c5 0301 	rsbmi	r3, r5, #1
 800e08a:	9304      	strmi	r3, [sp, #16]
 800e08c:	2300      	movpl	r3, #0
 800e08e:	2300      	movmi	r3, #0
 800e090:	bf4c      	ite	mi
 800e092:	9305      	strmi	r3, [sp, #20]
 800e094:	9304      	strpl	r3, [sp, #16]
 800e096:	9b00      	ldr	r3, [sp, #0]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	db3d      	blt.n	800e118 <_dtoa_r+0x248>
 800e09c:	9b05      	ldr	r3, [sp, #20]
 800e09e:	9a00      	ldr	r2, [sp, #0]
 800e0a0:	920a      	str	r2, [sp, #40]	; 0x28
 800e0a2:	4413      	add	r3, r2
 800e0a4:	9305      	str	r3, [sp, #20]
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9307      	str	r3, [sp, #28]
 800e0aa:	9b06      	ldr	r3, [sp, #24]
 800e0ac:	2b09      	cmp	r3, #9
 800e0ae:	f200 8089 	bhi.w	800e1c4 <_dtoa_r+0x2f4>
 800e0b2:	2b05      	cmp	r3, #5
 800e0b4:	bfc4      	itt	gt
 800e0b6:	3b04      	subgt	r3, #4
 800e0b8:	9306      	strgt	r3, [sp, #24]
 800e0ba:	9b06      	ldr	r3, [sp, #24]
 800e0bc:	f1a3 0302 	sub.w	r3, r3, #2
 800e0c0:	bfcc      	ite	gt
 800e0c2:	2500      	movgt	r5, #0
 800e0c4:	2501      	movle	r5, #1
 800e0c6:	2b03      	cmp	r3, #3
 800e0c8:	f200 8087 	bhi.w	800e1da <_dtoa_r+0x30a>
 800e0cc:	e8df f003 	tbb	[pc, r3]
 800e0d0:	59383a2d 	.word	0x59383a2d
 800e0d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e0d8:	441d      	add	r5, r3
 800e0da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e0de:	2b20      	cmp	r3, #32
 800e0e0:	bfc1      	itttt	gt
 800e0e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e0ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800e0ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0f2:	bfda      	itte	le
 800e0f4:	f1c3 0320 	rsble	r3, r3, #32
 800e0f8:	fa06 f003 	lslle.w	r0, r6, r3
 800e0fc:	4318      	orrgt	r0, r3
 800e0fe:	f7f2 fa29 	bl	8000554 <__aeabi_ui2d>
 800e102:	2301      	movs	r3, #1
 800e104:	4606      	mov	r6, r0
 800e106:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e10a:	3d01      	subs	r5, #1
 800e10c:	930e      	str	r3, [sp, #56]	; 0x38
 800e10e:	e76a      	b.n	800dfe6 <_dtoa_r+0x116>
 800e110:	2301      	movs	r3, #1
 800e112:	e7b2      	b.n	800e07a <_dtoa_r+0x1aa>
 800e114:	900b      	str	r0, [sp, #44]	; 0x2c
 800e116:	e7b1      	b.n	800e07c <_dtoa_r+0x1ac>
 800e118:	9b04      	ldr	r3, [sp, #16]
 800e11a:	9a00      	ldr	r2, [sp, #0]
 800e11c:	1a9b      	subs	r3, r3, r2
 800e11e:	9304      	str	r3, [sp, #16]
 800e120:	4253      	negs	r3, r2
 800e122:	9307      	str	r3, [sp, #28]
 800e124:	2300      	movs	r3, #0
 800e126:	930a      	str	r3, [sp, #40]	; 0x28
 800e128:	e7bf      	b.n	800e0aa <_dtoa_r+0x1da>
 800e12a:	2300      	movs	r3, #0
 800e12c:	9308      	str	r3, [sp, #32]
 800e12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e130:	2b00      	cmp	r3, #0
 800e132:	dc55      	bgt.n	800e1e0 <_dtoa_r+0x310>
 800e134:	2301      	movs	r3, #1
 800e136:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e13a:	461a      	mov	r2, r3
 800e13c:	9209      	str	r2, [sp, #36]	; 0x24
 800e13e:	e00c      	b.n	800e15a <_dtoa_r+0x28a>
 800e140:	2301      	movs	r3, #1
 800e142:	e7f3      	b.n	800e12c <_dtoa_r+0x25c>
 800e144:	2300      	movs	r3, #0
 800e146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e148:	9308      	str	r3, [sp, #32]
 800e14a:	9b00      	ldr	r3, [sp, #0]
 800e14c:	4413      	add	r3, r2
 800e14e:	9302      	str	r3, [sp, #8]
 800e150:	3301      	adds	r3, #1
 800e152:	2b01      	cmp	r3, #1
 800e154:	9303      	str	r3, [sp, #12]
 800e156:	bfb8      	it	lt
 800e158:	2301      	movlt	r3, #1
 800e15a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e15c:	2200      	movs	r2, #0
 800e15e:	6042      	str	r2, [r0, #4]
 800e160:	2204      	movs	r2, #4
 800e162:	f102 0614 	add.w	r6, r2, #20
 800e166:	429e      	cmp	r6, r3
 800e168:	6841      	ldr	r1, [r0, #4]
 800e16a:	d93d      	bls.n	800e1e8 <_dtoa_r+0x318>
 800e16c:	4620      	mov	r0, r4
 800e16e:	f000 fed7 	bl	800ef20 <_Balloc>
 800e172:	9001      	str	r0, [sp, #4]
 800e174:	2800      	cmp	r0, #0
 800e176:	d13b      	bne.n	800e1f0 <_dtoa_r+0x320>
 800e178:	4b11      	ldr	r3, [pc, #68]	; (800e1c0 <_dtoa_r+0x2f0>)
 800e17a:	4602      	mov	r2, r0
 800e17c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e180:	e6c0      	b.n	800df04 <_dtoa_r+0x34>
 800e182:	2301      	movs	r3, #1
 800e184:	e7df      	b.n	800e146 <_dtoa_r+0x276>
 800e186:	bf00      	nop
 800e188:	636f4361 	.word	0x636f4361
 800e18c:	3fd287a7 	.word	0x3fd287a7
 800e190:	8b60c8b3 	.word	0x8b60c8b3
 800e194:	3fc68a28 	.word	0x3fc68a28
 800e198:	509f79fb 	.word	0x509f79fb
 800e19c:	3fd34413 	.word	0x3fd34413
 800e1a0:	0800fed9 	.word	0x0800fed9
 800e1a4:	0800fef0 	.word	0x0800fef0
 800e1a8:	7ff00000 	.word	0x7ff00000
 800e1ac:	0800fed5 	.word	0x0800fed5
 800e1b0:	0800fecc 	.word	0x0800fecc
 800e1b4:	0800fea9 	.word	0x0800fea9
 800e1b8:	3ff80000 	.word	0x3ff80000
 800e1bc:	08010040 	.word	0x08010040
 800e1c0:	0800ff4b 	.word	0x0800ff4b
 800e1c4:	2501      	movs	r5, #1
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	9306      	str	r3, [sp, #24]
 800e1ca:	9508      	str	r5, [sp, #32]
 800e1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e1d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	2312      	movs	r3, #18
 800e1d8:	e7b0      	b.n	800e13c <_dtoa_r+0x26c>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	9308      	str	r3, [sp, #32]
 800e1de:	e7f5      	b.n	800e1cc <_dtoa_r+0x2fc>
 800e1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1e6:	e7b8      	b.n	800e15a <_dtoa_r+0x28a>
 800e1e8:	3101      	adds	r1, #1
 800e1ea:	6041      	str	r1, [r0, #4]
 800e1ec:	0052      	lsls	r2, r2, #1
 800e1ee:	e7b8      	b.n	800e162 <_dtoa_r+0x292>
 800e1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1f2:	9a01      	ldr	r2, [sp, #4]
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	9b03      	ldr	r3, [sp, #12]
 800e1f8:	2b0e      	cmp	r3, #14
 800e1fa:	f200 809d 	bhi.w	800e338 <_dtoa_r+0x468>
 800e1fe:	2d00      	cmp	r5, #0
 800e200:	f000 809a 	beq.w	800e338 <_dtoa_r+0x468>
 800e204:	9b00      	ldr	r3, [sp, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	dd32      	ble.n	800e270 <_dtoa_r+0x3a0>
 800e20a:	4ab7      	ldr	r2, [pc, #732]	; (800e4e8 <_dtoa_r+0x618>)
 800e20c:	f003 030f 	and.w	r3, r3, #15
 800e210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e214:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e218:	9b00      	ldr	r3, [sp, #0]
 800e21a:	05d8      	lsls	r0, r3, #23
 800e21c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e220:	d516      	bpl.n	800e250 <_dtoa_r+0x380>
 800e222:	4bb2      	ldr	r3, [pc, #712]	; (800e4ec <_dtoa_r+0x61c>)
 800e224:	ec51 0b19 	vmov	r0, r1, d9
 800e228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e22c:	f7f2 fb36 	bl	800089c <__aeabi_ddiv>
 800e230:	f007 070f 	and.w	r7, r7, #15
 800e234:	4682      	mov	sl, r0
 800e236:	468b      	mov	fp, r1
 800e238:	2503      	movs	r5, #3
 800e23a:	4eac      	ldr	r6, [pc, #688]	; (800e4ec <_dtoa_r+0x61c>)
 800e23c:	b957      	cbnz	r7, 800e254 <_dtoa_r+0x384>
 800e23e:	4642      	mov	r2, r8
 800e240:	464b      	mov	r3, r9
 800e242:	4650      	mov	r0, sl
 800e244:	4659      	mov	r1, fp
 800e246:	f7f2 fb29 	bl	800089c <__aeabi_ddiv>
 800e24a:	4682      	mov	sl, r0
 800e24c:	468b      	mov	fp, r1
 800e24e:	e028      	b.n	800e2a2 <_dtoa_r+0x3d2>
 800e250:	2502      	movs	r5, #2
 800e252:	e7f2      	b.n	800e23a <_dtoa_r+0x36a>
 800e254:	07f9      	lsls	r1, r7, #31
 800e256:	d508      	bpl.n	800e26a <_dtoa_r+0x39a>
 800e258:	4640      	mov	r0, r8
 800e25a:	4649      	mov	r1, r9
 800e25c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e260:	f7f2 f9f2 	bl	8000648 <__aeabi_dmul>
 800e264:	3501      	adds	r5, #1
 800e266:	4680      	mov	r8, r0
 800e268:	4689      	mov	r9, r1
 800e26a:	107f      	asrs	r7, r7, #1
 800e26c:	3608      	adds	r6, #8
 800e26e:	e7e5      	b.n	800e23c <_dtoa_r+0x36c>
 800e270:	f000 809b 	beq.w	800e3aa <_dtoa_r+0x4da>
 800e274:	9b00      	ldr	r3, [sp, #0]
 800e276:	4f9d      	ldr	r7, [pc, #628]	; (800e4ec <_dtoa_r+0x61c>)
 800e278:	425e      	negs	r6, r3
 800e27a:	4b9b      	ldr	r3, [pc, #620]	; (800e4e8 <_dtoa_r+0x618>)
 800e27c:	f006 020f 	and.w	r2, r6, #15
 800e280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e288:	ec51 0b19 	vmov	r0, r1, d9
 800e28c:	f7f2 f9dc 	bl	8000648 <__aeabi_dmul>
 800e290:	1136      	asrs	r6, r6, #4
 800e292:	4682      	mov	sl, r0
 800e294:	468b      	mov	fp, r1
 800e296:	2300      	movs	r3, #0
 800e298:	2502      	movs	r5, #2
 800e29a:	2e00      	cmp	r6, #0
 800e29c:	d17a      	bne.n	800e394 <_dtoa_r+0x4c4>
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1d3      	bne.n	800e24a <_dtoa_r+0x37a>
 800e2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	f000 8082 	beq.w	800e3ae <_dtoa_r+0x4de>
 800e2aa:	4b91      	ldr	r3, [pc, #580]	; (800e4f0 <_dtoa_r+0x620>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	4650      	mov	r0, sl
 800e2b0:	4659      	mov	r1, fp
 800e2b2:	f7f2 fc3b 	bl	8000b2c <__aeabi_dcmplt>
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d079      	beq.n	800e3ae <_dtoa_r+0x4de>
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d076      	beq.n	800e3ae <_dtoa_r+0x4de>
 800e2c0:	9b02      	ldr	r3, [sp, #8]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	dd36      	ble.n	800e334 <_dtoa_r+0x464>
 800e2c6:	9b00      	ldr	r3, [sp, #0]
 800e2c8:	4650      	mov	r0, sl
 800e2ca:	4659      	mov	r1, fp
 800e2cc:	1e5f      	subs	r7, r3, #1
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	4b88      	ldr	r3, [pc, #544]	; (800e4f4 <_dtoa_r+0x624>)
 800e2d2:	f7f2 f9b9 	bl	8000648 <__aeabi_dmul>
 800e2d6:	9e02      	ldr	r6, [sp, #8]
 800e2d8:	4682      	mov	sl, r0
 800e2da:	468b      	mov	fp, r1
 800e2dc:	3501      	adds	r5, #1
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f7f2 f948 	bl	8000574 <__aeabi_i2d>
 800e2e4:	4652      	mov	r2, sl
 800e2e6:	465b      	mov	r3, fp
 800e2e8:	f7f2 f9ae 	bl	8000648 <__aeabi_dmul>
 800e2ec:	4b82      	ldr	r3, [pc, #520]	; (800e4f8 <_dtoa_r+0x628>)
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f7f1 fff4 	bl	80002dc <__adddf3>
 800e2f4:	46d0      	mov	r8, sl
 800e2f6:	46d9      	mov	r9, fp
 800e2f8:	4682      	mov	sl, r0
 800e2fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e2fe:	2e00      	cmp	r6, #0
 800e300:	d158      	bne.n	800e3b4 <_dtoa_r+0x4e4>
 800e302:	4b7e      	ldr	r3, [pc, #504]	; (800e4fc <_dtoa_r+0x62c>)
 800e304:	2200      	movs	r2, #0
 800e306:	4640      	mov	r0, r8
 800e308:	4649      	mov	r1, r9
 800e30a:	f7f1 ffe5 	bl	80002d8 <__aeabi_dsub>
 800e30e:	4652      	mov	r2, sl
 800e310:	465b      	mov	r3, fp
 800e312:	4680      	mov	r8, r0
 800e314:	4689      	mov	r9, r1
 800e316:	f7f2 fc27 	bl	8000b68 <__aeabi_dcmpgt>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f040 8295 	bne.w	800e84a <_dtoa_r+0x97a>
 800e320:	4652      	mov	r2, sl
 800e322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e326:	4640      	mov	r0, r8
 800e328:	4649      	mov	r1, r9
 800e32a:	f7f2 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800e32e:	2800      	cmp	r0, #0
 800e330:	f040 8289 	bne.w	800e846 <_dtoa_r+0x976>
 800e334:	ec5b ab19 	vmov	sl, fp, d9
 800e338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f2c0 8148 	blt.w	800e5d0 <_dtoa_r+0x700>
 800e340:	9a00      	ldr	r2, [sp, #0]
 800e342:	2a0e      	cmp	r2, #14
 800e344:	f300 8144 	bgt.w	800e5d0 <_dtoa_r+0x700>
 800e348:	4b67      	ldr	r3, [pc, #412]	; (800e4e8 <_dtoa_r+0x618>)
 800e34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e34e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e354:	2b00      	cmp	r3, #0
 800e356:	f280 80d5 	bge.w	800e504 <_dtoa_r+0x634>
 800e35a:	9b03      	ldr	r3, [sp, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f300 80d1 	bgt.w	800e504 <_dtoa_r+0x634>
 800e362:	f040 826f 	bne.w	800e844 <_dtoa_r+0x974>
 800e366:	4b65      	ldr	r3, [pc, #404]	; (800e4fc <_dtoa_r+0x62c>)
 800e368:	2200      	movs	r2, #0
 800e36a:	4640      	mov	r0, r8
 800e36c:	4649      	mov	r1, r9
 800e36e:	f7f2 f96b 	bl	8000648 <__aeabi_dmul>
 800e372:	4652      	mov	r2, sl
 800e374:	465b      	mov	r3, fp
 800e376:	f7f2 fbed 	bl	8000b54 <__aeabi_dcmpge>
 800e37a:	9e03      	ldr	r6, [sp, #12]
 800e37c:	4637      	mov	r7, r6
 800e37e:	2800      	cmp	r0, #0
 800e380:	f040 8245 	bne.w	800e80e <_dtoa_r+0x93e>
 800e384:	9d01      	ldr	r5, [sp, #4]
 800e386:	2331      	movs	r3, #49	; 0x31
 800e388:	f805 3b01 	strb.w	r3, [r5], #1
 800e38c:	9b00      	ldr	r3, [sp, #0]
 800e38e:	3301      	adds	r3, #1
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	e240      	b.n	800e816 <_dtoa_r+0x946>
 800e394:	07f2      	lsls	r2, r6, #31
 800e396:	d505      	bpl.n	800e3a4 <_dtoa_r+0x4d4>
 800e398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e39c:	f7f2 f954 	bl	8000648 <__aeabi_dmul>
 800e3a0:	3501      	adds	r5, #1
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	1076      	asrs	r6, r6, #1
 800e3a6:	3708      	adds	r7, #8
 800e3a8:	e777      	b.n	800e29a <_dtoa_r+0x3ca>
 800e3aa:	2502      	movs	r5, #2
 800e3ac:	e779      	b.n	800e2a2 <_dtoa_r+0x3d2>
 800e3ae:	9f00      	ldr	r7, [sp, #0]
 800e3b0:	9e03      	ldr	r6, [sp, #12]
 800e3b2:	e794      	b.n	800e2de <_dtoa_r+0x40e>
 800e3b4:	9901      	ldr	r1, [sp, #4]
 800e3b6:	4b4c      	ldr	r3, [pc, #304]	; (800e4e8 <_dtoa_r+0x618>)
 800e3b8:	4431      	add	r1, r6
 800e3ba:	910d      	str	r1, [sp, #52]	; 0x34
 800e3bc:	9908      	ldr	r1, [sp, #32]
 800e3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3c6:	2900      	cmp	r1, #0
 800e3c8:	d043      	beq.n	800e452 <_dtoa_r+0x582>
 800e3ca:	494d      	ldr	r1, [pc, #308]	; (800e500 <_dtoa_r+0x630>)
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	f7f2 fa65 	bl	800089c <__aeabi_ddiv>
 800e3d2:	4652      	mov	r2, sl
 800e3d4:	465b      	mov	r3, fp
 800e3d6:	f7f1 ff7f 	bl	80002d8 <__aeabi_dsub>
 800e3da:	9d01      	ldr	r5, [sp, #4]
 800e3dc:	4682      	mov	sl, r0
 800e3de:	468b      	mov	fp, r1
 800e3e0:	4649      	mov	r1, r9
 800e3e2:	4640      	mov	r0, r8
 800e3e4:	f7f2 fbe0 	bl	8000ba8 <__aeabi_d2iz>
 800e3e8:	4606      	mov	r6, r0
 800e3ea:	f7f2 f8c3 	bl	8000574 <__aeabi_i2d>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	f7f1 ff6f 	bl	80002d8 <__aeabi_dsub>
 800e3fa:	3630      	adds	r6, #48	; 0x30
 800e3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800e400:	4652      	mov	r2, sl
 800e402:	465b      	mov	r3, fp
 800e404:	4680      	mov	r8, r0
 800e406:	4689      	mov	r9, r1
 800e408:	f7f2 fb90 	bl	8000b2c <__aeabi_dcmplt>
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d163      	bne.n	800e4d8 <_dtoa_r+0x608>
 800e410:	4642      	mov	r2, r8
 800e412:	464b      	mov	r3, r9
 800e414:	4936      	ldr	r1, [pc, #216]	; (800e4f0 <_dtoa_r+0x620>)
 800e416:	2000      	movs	r0, #0
 800e418:	f7f1 ff5e 	bl	80002d8 <__aeabi_dsub>
 800e41c:	4652      	mov	r2, sl
 800e41e:	465b      	mov	r3, fp
 800e420:	f7f2 fb84 	bl	8000b2c <__aeabi_dcmplt>
 800e424:	2800      	cmp	r0, #0
 800e426:	f040 80b5 	bne.w	800e594 <_dtoa_r+0x6c4>
 800e42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e42c:	429d      	cmp	r5, r3
 800e42e:	d081      	beq.n	800e334 <_dtoa_r+0x464>
 800e430:	4b30      	ldr	r3, [pc, #192]	; (800e4f4 <_dtoa_r+0x624>)
 800e432:	2200      	movs	r2, #0
 800e434:	4650      	mov	r0, sl
 800e436:	4659      	mov	r1, fp
 800e438:	f7f2 f906 	bl	8000648 <__aeabi_dmul>
 800e43c:	4b2d      	ldr	r3, [pc, #180]	; (800e4f4 <_dtoa_r+0x624>)
 800e43e:	4682      	mov	sl, r0
 800e440:	468b      	mov	fp, r1
 800e442:	4640      	mov	r0, r8
 800e444:	4649      	mov	r1, r9
 800e446:	2200      	movs	r2, #0
 800e448:	f7f2 f8fe 	bl	8000648 <__aeabi_dmul>
 800e44c:	4680      	mov	r8, r0
 800e44e:	4689      	mov	r9, r1
 800e450:	e7c6      	b.n	800e3e0 <_dtoa_r+0x510>
 800e452:	4650      	mov	r0, sl
 800e454:	4659      	mov	r1, fp
 800e456:	f7f2 f8f7 	bl	8000648 <__aeabi_dmul>
 800e45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e45c:	9d01      	ldr	r5, [sp, #4]
 800e45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e460:	4682      	mov	sl, r0
 800e462:	468b      	mov	fp, r1
 800e464:	4649      	mov	r1, r9
 800e466:	4640      	mov	r0, r8
 800e468:	f7f2 fb9e 	bl	8000ba8 <__aeabi_d2iz>
 800e46c:	4606      	mov	r6, r0
 800e46e:	f7f2 f881 	bl	8000574 <__aeabi_i2d>
 800e472:	3630      	adds	r6, #48	; 0x30
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	4640      	mov	r0, r8
 800e47a:	4649      	mov	r1, r9
 800e47c:	f7f1 ff2c 	bl	80002d8 <__aeabi_dsub>
 800e480:	f805 6b01 	strb.w	r6, [r5], #1
 800e484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e486:	429d      	cmp	r5, r3
 800e488:	4680      	mov	r8, r0
 800e48a:	4689      	mov	r9, r1
 800e48c:	f04f 0200 	mov.w	r2, #0
 800e490:	d124      	bne.n	800e4dc <_dtoa_r+0x60c>
 800e492:	4b1b      	ldr	r3, [pc, #108]	; (800e500 <_dtoa_r+0x630>)
 800e494:	4650      	mov	r0, sl
 800e496:	4659      	mov	r1, fp
 800e498:	f7f1 ff20 	bl	80002dc <__adddf3>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4640      	mov	r0, r8
 800e4a2:	4649      	mov	r1, r9
 800e4a4:	f7f2 fb60 	bl	8000b68 <__aeabi_dcmpgt>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d173      	bne.n	800e594 <_dtoa_r+0x6c4>
 800e4ac:	4652      	mov	r2, sl
 800e4ae:	465b      	mov	r3, fp
 800e4b0:	4913      	ldr	r1, [pc, #76]	; (800e500 <_dtoa_r+0x630>)
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	f7f1 ff10 	bl	80002d8 <__aeabi_dsub>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	4640      	mov	r0, r8
 800e4be:	4649      	mov	r1, r9
 800e4c0:	f7f2 fb34 	bl	8000b2c <__aeabi_dcmplt>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	f43f af35 	beq.w	800e334 <_dtoa_r+0x464>
 800e4ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e4cc:	1e6b      	subs	r3, r5, #1
 800e4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e4d4:	2b30      	cmp	r3, #48	; 0x30
 800e4d6:	d0f8      	beq.n	800e4ca <_dtoa_r+0x5fa>
 800e4d8:	9700      	str	r7, [sp, #0]
 800e4da:	e049      	b.n	800e570 <_dtoa_r+0x6a0>
 800e4dc:	4b05      	ldr	r3, [pc, #20]	; (800e4f4 <_dtoa_r+0x624>)
 800e4de:	f7f2 f8b3 	bl	8000648 <__aeabi_dmul>
 800e4e2:	4680      	mov	r8, r0
 800e4e4:	4689      	mov	r9, r1
 800e4e6:	e7bd      	b.n	800e464 <_dtoa_r+0x594>
 800e4e8:	08010040 	.word	0x08010040
 800e4ec:	08010018 	.word	0x08010018
 800e4f0:	3ff00000 	.word	0x3ff00000
 800e4f4:	40240000 	.word	0x40240000
 800e4f8:	401c0000 	.word	0x401c0000
 800e4fc:	40140000 	.word	0x40140000
 800e500:	3fe00000 	.word	0x3fe00000
 800e504:	9d01      	ldr	r5, [sp, #4]
 800e506:	4656      	mov	r6, sl
 800e508:	465f      	mov	r7, fp
 800e50a:	4642      	mov	r2, r8
 800e50c:	464b      	mov	r3, r9
 800e50e:	4630      	mov	r0, r6
 800e510:	4639      	mov	r1, r7
 800e512:	f7f2 f9c3 	bl	800089c <__aeabi_ddiv>
 800e516:	f7f2 fb47 	bl	8000ba8 <__aeabi_d2iz>
 800e51a:	4682      	mov	sl, r0
 800e51c:	f7f2 f82a 	bl	8000574 <__aeabi_i2d>
 800e520:	4642      	mov	r2, r8
 800e522:	464b      	mov	r3, r9
 800e524:	f7f2 f890 	bl	8000648 <__aeabi_dmul>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4630      	mov	r0, r6
 800e52e:	4639      	mov	r1, r7
 800e530:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e534:	f7f1 fed0 	bl	80002d8 <__aeabi_dsub>
 800e538:	f805 6b01 	strb.w	r6, [r5], #1
 800e53c:	9e01      	ldr	r6, [sp, #4]
 800e53e:	9f03      	ldr	r7, [sp, #12]
 800e540:	1bae      	subs	r6, r5, r6
 800e542:	42b7      	cmp	r7, r6
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	d135      	bne.n	800e5b6 <_dtoa_r+0x6e6>
 800e54a:	f7f1 fec7 	bl	80002dc <__adddf3>
 800e54e:	4642      	mov	r2, r8
 800e550:	464b      	mov	r3, r9
 800e552:	4606      	mov	r6, r0
 800e554:	460f      	mov	r7, r1
 800e556:	f7f2 fb07 	bl	8000b68 <__aeabi_dcmpgt>
 800e55a:	b9d0      	cbnz	r0, 800e592 <_dtoa_r+0x6c2>
 800e55c:	4642      	mov	r2, r8
 800e55e:	464b      	mov	r3, r9
 800e560:	4630      	mov	r0, r6
 800e562:	4639      	mov	r1, r7
 800e564:	f7f2 fad8 	bl	8000b18 <__aeabi_dcmpeq>
 800e568:	b110      	cbz	r0, 800e570 <_dtoa_r+0x6a0>
 800e56a:	f01a 0f01 	tst.w	sl, #1
 800e56e:	d110      	bne.n	800e592 <_dtoa_r+0x6c2>
 800e570:	4620      	mov	r0, r4
 800e572:	ee18 1a10 	vmov	r1, s16
 800e576:	f000 fd13 	bl	800efa0 <_Bfree>
 800e57a:	2300      	movs	r3, #0
 800e57c:	9800      	ldr	r0, [sp, #0]
 800e57e:	702b      	strb	r3, [r5, #0]
 800e580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e582:	3001      	adds	r0, #1
 800e584:	6018      	str	r0, [r3, #0]
 800e586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f43f acf1 	beq.w	800df70 <_dtoa_r+0xa0>
 800e58e:	601d      	str	r5, [r3, #0]
 800e590:	e4ee      	b.n	800df70 <_dtoa_r+0xa0>
 800e592:	9f00      	ldr	r7, [sp, #0]
 800e594:	462b      	mov	r3, r5
 800e596:	461d      	mov	r5, r3
 800e598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e59c:	2a39      	cmp	r2, #57	; 0x39
 800e59e:	d106      	bne.n	800e5ae <_dtoa_r+0x6de>
 800e5a0:	9a01      	ldr	r2, [sp, #4]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d1f7      	bne.n	800e596 <_dtoa_r+0x6c6>
 800e5a6:	9901      	ldr	r1, [sp, #4]
 800e5a8:	2230      	movs	r2, #48	; 0x30
 800e5aa:	3701      	adds	r7, #1
 800e5ac:	700a      	strb	r2, [r1, #0]
 800e5ae:	781a      	ldrb	r2, [r3, #0]
 800e5b0:	3201      	adds	r2, #1
 800e5b2:	701a      	strb	r2, [r3, #0]
 800e5b4:	e790      	b.n	800e4d8 <_dtoa_r+0x608>
 800e5b6:	4ba6      	ldr	r3, [pc, #664]	; (800e850 <_dtoa_r+0x980>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f7f2 f845 	bl	8000648 <__aeabi_dmul>
 800e5be:	2200      	movs	r2, #0
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	4606      	mov	r6, r0
 800e5c4:	460f      	mov	r7, r1
 800e5c6:	f7f2 faa7 	bl	8000b18 <__aeabi_dcmpeq>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d09d      	beq.n	800e50a <_dtoa_r+0x63a>
 800e5ce:	e7cf      	b.n	800e570 <_dtoa_r+0x6a0>
 800e5d0:	9a08      	ldr	r2, [sp, #32]
 800e5d2:	2a00      	cmp	r2, #0
 800e5d4:	f000 80d7 	beq.w	800e786 <_dtoa_r+0x8b6>
 800e5d8:	9a06      	ldr	r2, [sp, #24]
 800e5da:	2a01      	cmp	r2, #1
 800e5dc:	f300 80ba 	bgt.w	800e754 <_dtoa_r+0x884>
 800e5e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5e2:	2a00      	cmp	r2, #0
 800e5e4:	f000 80b2 	beq.w	800e74c <_dtoa_r+0x87c>
 800e5e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5ec:	9e07      	ldr	r6, [sp, #28]
 800e5ee:	9d04      	ldr	r5, [sp, #16]
 800e5f0:	9a04      	ldr	r2, [sp, #16]
 800e5f2:	441a      	add	r2, r3
 800e5f4:	9204      	str	r2, [sp, #16]
 800e5f6:	9a05      	ldr	r2, [sp, #20]
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	441a      	add	r2, r3
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	9205      	str	r2, [sp, #20]
 800e600:	f000 fd86 	bl	800f110 <__i2b>
 800e604:	4607      	mov	r7, r0
 800e606:	2d00      	cmp	r5, #0
 800e608:	dd0c      	ble.n	800e624 <_dtoa_r+0x754>
 800e60a:	9b05      	ldr	r3, [sp, #20]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	dd09      	ble.n	800e624 <_dtoa_r+0x754>
 800e610:	42ab      	cmp	r3, r5
 800e612:	9a04      	ldr	r2, [sp, #16]
 800e614:	bfa8      	it	ge
 800e616:	462b      	movge	r3, r5
 800e618:	1ad2      	subs	r2, r2, r3
 800e61a:	9204      	str	r2, [sp, #16]
 800e61c:	9a05      	ldr	r2, [sp, #20]
 800e61e:	1aed      	subs	r5, r5, r3
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	9305      	str	r3, [sp, #20]
 800e624:	9b07      	ldr	r3, [sp, #28]
 800e626:	b31b      	cbz	r3, 800e670 <_dtoa_r+0x7a0>
 800e628:	9b08      	ldr	r3, [sp, #32]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f000 80af 	beq.w	800e78e <_dtoa_r+0x8be>
 800e630:	2e00      	cmp	r6, #0
 800e632:	dd13      	ble.n	800e65c <_dtoa_r+0x78c>
 800e634:	4639      	mov	r1, r7
 800e636:	4632      	mov	r2, r6
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 fe29 	bl	800f290 <__pow5mult>
 800e63e:	ee18 2a10 	vmov	r2, s16
 800e642:	4601      	mov	r1, r0
 800e644:	4607      	mov	r7, r0
 800e646:	4620      	mov	r0, r4
 800e648:	f000 fd78 	bl	800f13c <__multiply>
 800e64c:	ee18 1a10 	vmov	r1, s16
 800e650:	4680      	mov	r8, r0
 800e652:	4620      	mov	r0, r4
 800e654:	f000 fca4 	bl	800efa0 <_Bfree>
 800e658:	ee08 8a10 	vmov	s16, r8
 800e65c:	9b07      	ldr	r3, [sp, #28]
 800e65e:	1b9a      	subs	r2, r3, r6
 800e660:	d006      	beq.n	800e670 <_dtoa_r+0x7a0>
 800e662:	ee18 1a10 	vmov	r1, s16
 800e666:	4620      	mov	r0, r4
 800e668:	f000 fe12 	bl	800f290 <__pow5mult>
 800e66c:	ee08 0a10 	vmov	s16, r0
 800e670:	2101      	movs	r1, #1
 800e672:	4620      	mov	r0, r4
 800e674:	f000 fd4c 	bl	800f110 <__i2b>
 800e678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	4606      	mov	r6, r0
 800e67e:	f340 8088 	ble.w	800e792 <_dtoa_r+0x8c2>
 800e682:	461a      	mov	r2, r3
 800e684:	4601      	mov	r1, r0
 800e686:	4620      	mov	r0, r4
 800e688:	f000 fe02 	bl	800f290 <__pow5mult>
 800e68c:	9b06      	ldr	r3, [sp, #24]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	4606      	mov	r6, r0
 800e692:	f340 8081 	ble.w	800e798 <_dtoa_r+0x8c8>
 800e696:	f04f 0800 	mov.w	r8, #0
 800e69a:	6933      	ldr	r3, [r6, #16]
 800e69c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e6a0:	6918      	ldr	r0, [r3, #16]
 800e6a2:	f000 fce5 	bl	800f070 <__hi0bits>
 800e6a6:	f1c0 0020 	rsb	r0, r0, #32
 800e6aa:	9b05      	ldr	r3, [sp, #20]
 800e6ac:	4418      	add	r0, r3
 800e6ae:	f010 001f 	ands.w	r0, r0, #31
 800e6b2:	f000 8092 	beq.w	800e7da <_dtoa_r+0x90a>
 800e6b6:	f1c0 0320 	rsb	r3, r0, #32
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	f340 808a 	ble.w	800e7d4 <_dtoa_r+0x904>
 800e6c0:	f1c0 001c 	rsb	r0, r0, #28
 800e6c4:	9b04      	ldr	r3, [sp, #16]
 800e6c6:	4403      	add	r3, r0
 800e6c8:	9304      	str	r3, [sp, #16]
 800e6ca:	9b05      	ldr	r3, [sp, #20]
 800e6cc:	4403      	add	r3, r0
 800e6ce:	4405      	add	r5, r0
 800e6d0:	9305      	str	r3, [sp, #20]
 800e6d2:	9b04      	ldr	r3, [sp, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	dd07      	ble.n	800e6e8 <_dtoa_r+0x818>
 800e6d8:	ee18 1a10 	vmov	r1, s16
 800e6dc:	461a      	mov	r2, r3
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 fe30 	bl	800f344 <__lshift>
 800e6e4:	ee08 0a10 	vmov	s16, r0
 800e6e8:	9b05      	ldr	r3, [sp, #20]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	dd05      	ble.n	800e6fa <_dtoa_r+0x82a>
 800e6ee:	4631      	mov	r1, r6
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	f000 fe26 	bl	800f344 <__lshift>
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d06e      	beq.n	800e7de <_dtoa_r+0x90e>
 800e700:	ee18 0a10 	vmov	r0, s16
 800e704:	4631      	mov	r1, r6
 800e706:	f000 fe8d 	bl	800f424 <__mcmp>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	da67      	bge.n	800e7de <_dtoa_r+0x90e>
 800e70e:	9b00      	ldr	r3, [sp, #0]
 800e710:	3b01      	subs	r3, #1
 800e712:	ee18 1a10 	vmov	r1, s16
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	220a      	movs	r2, #10
 800e71a:	2300      	movs	r3, #0
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 fc61 	bl	800efe4 <__multadd>
 800e722:	9b08      	ldr	r3, [sp, #32]
 800e724:	ee08 0a10 	vmov	s16, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f000 81b1 	beq.w	800ea90 <_dtoa_r+0xbc0>
 800e72e:	2300      	movs	r3, #0
 800e730:	4639      	mov	r1, r7
 800e732:	220a      	movs	r2, #10
 800e734:	4620      	mov	r0, r4
 800e736:	f000 fc55 	bl	800efe4 <__multadd>
 800e73a:	9b02      	ldr	r3, [sp, #8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	4607      	mov	r7, r0
 800e740:	f300 808e 	bgt.w	800e860 <_dtoa_r+0x990>
 800e744:	9b06      	ldr	r3, [sp, #24]
 800e746:	2b02      	cmp	r3, #2
 800e748:	dc51      	bgt.n	800e7ee <_dtoa_r+0x91e>
 800e74a:	e089      	b.n	800e860 <_dtoa_r+0x990>
 800e74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e74e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e752:	e74b      	b.n	800e5ec <_dtoa_r+0x71c>
 800e754:	9b03      	ldr	r3, [sp, #12]
 800e756:	1e5e      	subs	r6, r3, #1
 800e758:	9b07      	ldr	r3, [sp, #28]
 800e75a:	42b3      	cmp	r3, r6
 800e75c:	bfbf      	itttt	lt
 800e75e:	9b07      	ldrlt	r3, [sp, #28]
 800e760:	9607      	strlt	r6, [sp, #28]
 800e762:	1af2      	sublt	r2, r6, r3
 800e764:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e766:	bfb6      	itet	lt
 800e768:	189b      	addlt	r3, r3, r2
 800e76a:	1b9e      	subge	r6, r3, r6
 800e76c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	bfb8      	it	lt
 800e772:	2600      	movlt	r6, #0
 800e774:	2b00      	cmp	r3, #0
 800e776:	bfb7      	itett	lt
 800e778:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e77c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e780:	1a9d      	sublt	r5, r3, r2
 800e782:	2300      	movlt	r3, #0
 800e784:	e734      	b.n	800e5f0 <_dtoa_r+0x720>
 800e786:	9e07      	ldr	r6, [sp, #28]
 800e788:	9d04      	ldr	r5, [sp, #16]
 800e78a:	9f08      	ldr	r7, [sp, #32]
 800e78c:	e73b      	b.n	800e606 <_dtoa_r+0x736>
 800e78e:	9a07      	ldr	r2, [sp, #28]
 800e790:	e767      	b.n	800e662 <_dtoa_r+0x792>
 800e792:	9b06      	ldr	r3, [sp, #24]
 800e794:	2b01      	cmp	r3, #1
 800e796:	dc18      	bgt.n	800e7ca <_dtoa_r+0x8fa>
 800e798:	f1ba 0f00 	cmp.w	sl, #0
 800e79c:	d115      	bne.n	800e7ca <_dtoa_r+0x8fa>
 800e79e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7a2:	b993      	cbnz	r3, 800e7ca <_dtoa_r+0x8fa>
 800e7a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e7a8:	0d1b      	lsrs	r3, r3, #20
 800e7aa:	051b      	lsls	r3, r3, #20
 800e7ac:	b183      	cbz	r3, 800e7d0 <_dtoa_r+0x900>
 800e7ae:	9b04      	ldr	r3, [sp, #16]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	9304      	str	r3, [sp, #16]
 800e7b4:	9b05      	ldr	r3, [sp, #20]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	9305      	str	r3, [sp, #20]
 800e7ba:	f04f 0801 	mov.w	r8, #1
 800e7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f47f af6a 	bne.w	800e69a <_dtoa_r+0x7ca>
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	e76f      	b.n	800e6aa <_dtoa_r+0x7da>
 800e7ca:	f04f 0800 	mov.w	r8, #0
 800e7ce:	e7f6      	b.n	800e7be <_dtoa_r+0x8ee>
 800e7d0:	4698      	mov	r8, r3
 800e7d2:	e7f4      	b.n	800e7be <_dtoa_r+0x8ee>
 800e7d4:	f43f af7d 	beq.w	800e6d2 <_dtoa_r+0x802>
 800e7d8:	4618      	mov	r0, r3
 800e7da:	301c      	adds	r0, #28
 800e7dc:	e772      	b.n	800e6c4 <_dtoa_r+0x7f4>
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	dc37      	bgt.n	800e854 <_dtoa_r+0x984>
 800e7e4:	9b06      	ldr	r3, [sp, #24]
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	dd34      	ble.n	800e854 <_dtoa_r+0x984>
 800e7ea:	9b03      	ldr	r3, [sp, #12]
 800e7ec:	9302      	str	r3, [sp, #8]
 800e7ee:	9b02      	ldr	r3, [sp, #8]
 800e7f0:	b96b      	cbnz	r3, 800e80e <_dtoa_r+0x93e>
 800e7f2:	4631      	mov	r1, r6
 800e7f4:	2205      	movs	r2, #5
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f000 fbf4 	bl	800efe4 <__multadd>
 800e7fc:	4601      	mov	r1, r0
 800e7fe:	4606      	mov	r6, r0
 800e800:	ee18 0a10 	vmov	r0, s16
 800e804:	f000 fe0e 	bl	800f424 <__mcmp>
 800e808:	2800      	cmp	r0, #0
 800e80a:	f73f adbb 	bgt.w	800e384 <_dtoa_r+0x4b4>
 800e80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e810:	9d01      	ldr	r5, [sp, #4]
 800e812:	43db      	mvns	r3, r3
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	f04f 0800 	mov.w	r8, #0
 800e81a:	4631      	mov	r1, r6
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 fbbf 	bl	800efa0 <_Bfree>
 800e822:	2f00      	cmp	r7, #0
 800e824:	f43f aea4 	beq.w	800e570 <_dtoa_r+0x6a0>
 800e828:	f1b8 0f00 	cmp.w	r8, #0
 800e82c:	d005      	beq.n	800e83a <_dtoa_r+0x96a>
 800e82e:	45b8      	cmp	r8, r7
 800e830:	d003      	beq.n	800e83a <_dtoa_r+0x96a>
 800e832:	4641      	mov	r1, r8
 800e834:	4620      	mov	r0, r4
 800e836:	f000 fbb3 	bl	800efa0 <_Bfree>
 800e83a:	4639      	mov	r1, r7
 800e83c:	4620      	mov	r0, r4
 800e83e:	f000 fbaf 	bl	800efa0 <_Bfree>
 800e842:	e695      	b.n	800e570 <_dtoa_r+0x6a0>
 800e844:	2600      	movs	r6, #0
 800e846:	4637      	mov	r7, r6
 800e848:	e7e1      	b.n	800e80e <_dtoa_r+0x93e>
 800e84a:	9700      	str	r7, [sp, #0]
 800e84c:	4637      	mov	r7, r6
 800e84e:	e599      	b.n	800e384 <_dtoa_r+0x4b4>
 800e850:	40240000 	.word	0x40240000
 800e854:	9b08      	ldr	r3, [sp, #32]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 80ca 	beq.w	800e9f0 <_dtoa_r+0xb20>
 800e85c:	9b03      	ldr	r3, [sp, #12]
 800e85e:	9302      	str	r3, [sp, #8]
 800e860:	2d00      	cmp	r5, #0
 800e862:	dd05      	ble.n	800e870 <_dtoa_r+0x9a0>
 800e864:	4639      	mov	r1, r7
 800e866:	462a      	mov	r2, r5
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 fd6b 	bl	800f344 <__lshift>
 800e86e:	4607      	mov	r7, r0
 800e870:	f1b8 0f00 	cmp.w	r8, #0
 800e874:	d05b      	beq.n	800e92e <_dtoa_r+0xa5e>
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 fb51 	bl	800ef20 <_Balloc>
 800e87e:	4605      	mov	r5, r0
 800e880:	b928      	cbnz	r0, 800e88e <_dtoa_r+0x9be>
 800e882:	4b87      	ldr	r3, [pc, #540]	; (800eaa0 <_dtoa_r+0xbd0>)
 800e884:	4602      	mov	r2, r0
 800e886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e88a:	f7ff bb3b 	b.w	800df04 <_dtoa_r+0x34>
 800e88e:	693a      	ldr	r2, [r7, #16]
 800e890:	3202      	adds	r2, #2
 800e892:	0092      	lsls	r2, r2, #2
 800e894:	f107 010c 	add.w	r1, r7, #12
 800e898:	300c      	adds	r0, #12
 800e89a:	f000 fb33 	bl	800ef04 <memcpy>
 800e89e:	2201      	movs	r2, #1
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	f000 fd4e 	bl	800f344 <__lshift>
 800e8a8:	9b01      	ldr	r3, [sp, #4]
 800e8aa:	f103 0901 	add.w	r9, r3, #1
 800e8ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	9305      	str	r3, [sp, #20]
 800e8b6:	f00a 0301 	and.w	r3, sl, #1
 800e8ba:	46b8      	mov	r8, r7
 800e8bc:	9304      	str	r3, [sp, #16]
 800e8be:	4607      	mov	r7, r0
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	ee18 0a10 	vmov	r0, s16
 800e8c6:	f7ff fa77 	bl	800ddb8 <quorem>
 800e8ca:	4641      	mov	r1, r8
 800e8cc:	9002      	str	r0, [sp, #8]
 800e8ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8d2:	ee18 0a10 	vmov	r0, s16
 800e8d6:	f000 fda5 	bl	800f424 <__mcmp>
 800e8da:	463a      	mov	r2, r7
 800e8dc:	9003      	str	r0, [sp, #12]
 800e8de:	4631      	mov	r1, r6
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f000 fdbb 	bl	800f45c <__mdiff>
 800e8e6:	68c2      	ldr	r2, [r0, #12]
 800e8e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e8ec:	4605      	mov	r5, r0
 800e8ee:	bb02      	cbnz	r2, 800e932 <_dtoa_r+0xa62>
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	ee18 0a10 	vmov	r0, s16
 800e8f6:	f000 fd95 	bl	800f424 <__mcmp>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	4629      	mov	r1, r5
 800e8fe:	4620      	mov	r0, r4
 800e900:	9207      	str	r2, [sp, #28]
 800e902:	f000 fb4d 	bl	800efa0 <_Bfree>
 800e906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e90a:	ea43 0102 	orr.w	r1, r3, r2
 800e90e:	9b04      	ldr	r3, [sp, #16]
 800e910:	430b      	orrs	r3, r1
 800e912:	464d      	mov	r5, r9
 800e914:	d10f      	bne.n	800e936 <_dtoa_r+0xa66>
 800e916:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e91a:	d02a      	beq.n	800e972 <_dtoa_r+0xaa2>
 800e91c:	9b03      	ldr	r3, [sp, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	dd02      	ble.n	800e928 <_dtoa_r+0xa58>
 800e922:	9b02      	ldr	r3, [sp, #8]
 800e924:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e928:	f88b a000 	strb.w	sl, [fp]
 800e92c:	e775      	b.n	800e81a <_dtoa_r+0x94a>
 800e92e:	4638      	mov	r0, r7
 800e930:	e7ba      	b.n	800e8a8 <_dtoa_r+0x9d8>
 800e932:	2201      	movs	r2, #1
 800e934:	e7e2      	b.n	800e8fc <_dtoa_r+0xa2c>
 800e936:	9b03      	ldr	r3, [sp, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	db04      	blt.n	800e946 <_dtoa_r+0xa76>
 800e93c:	9906      	ldr	r1, [sp, #24]
 800e93e:	430b      	orrs	r3, r1
 800e940:	9904      	ldr	r1, [sp, #16]
 800e942:	430b      	orrs	r3, r1
 800e944:	d122      	bne.n	800e98c <_dtoa_r+0xabc>
 800e946:	2a00      	cmp	r2, #0
 800e948:	ddee      	ble.n	800e928 <_dtoa_r+0xa58>
 800e94a:	ee18 1a10 	vmov	r1, s16
 800e94e:	2201      	movs	r2, #1
 800e950:	4620      	mov	r0, r4
 800e952:	f000 fcf7 	bl	800f344 <__lshift>
 800e956:	4631      	mov	r1, r6
 800e958:	ee08 0a10 	vmov	s16, r0
 800e95c:	f000 fd62 	bl	800f424 <__mcmp>
 800e960:	2800      	cmp	r0, #0
 800e962:	dc03      	bgt.n	800e96c <_dtoa_r+0xa9c>
 800e964:	d1e0      	bne.n	800e928 <_dtoa_r+0xa58>
 800e966:	f01a 0f01 	tst.w	sl, #1
 800e96a:	d0dd      	beq.n	800e928 <_dtoa_r+0xa58>
 800e96c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e970:	d1d7      	bne.n	800e922 <_dtoa_r+0xa52>
 800e972:	2339      	movs	r3, #57	; 0x39
 800e974:	f88b 3000 	strb.w	r3, [fp]
 800e978:	462b      	mov	r3, r5
 800e97a:	461d      	mov	r5, r3
 800e97c:	3b01      	subs	r3, #1
 800e97e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e982:	2a39      	cmp	r2, #57	; 0x39
 800e984:	d071      	beq.n	800ea6a <_dtoa_r+0xb9a>
 800e986:	3201      	adds	r2, #1
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	e746      	b.n	800e81a <_dtoa_r+0x94a>
 800e98c:	2a00      	cmp	r2, #0
 800e98e:	dd07      	ble.n	800e9a0 <_dtoa_r+0xad0>
 800e990:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e994:	d0ed      	beq.n	800e972 <_dtoa_r+0xaa2>
 800e996:	f10a 0301 	add.w	r3, sl, #1
 800e99a:	f88b 3000 	strb.w	r3, [fp]
 800e99e:	e73c      	b.n	800e81a <_dtoa_r+0x94a>
 800e9a0:	9b05      	ldr	r3, [sp, #20]
 800e9a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e9a6:	4599      	cmp	r9, r3
 800e9a8:	d047      	beq.n	800ea3a <_dtoa_r+0xb6a>
 800e9aa:	ee18 1a10 	vmov	r1, s16
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	220a      	movs	r2, #10
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	f000 fb16 	bl	800efe4 <__multadd>
 800e9b8:	45b8      	cmp	r8, r7
 800e9ba:	ee08 0a10 	vmov	s16, r0
 800e9be:	f04f 0300 	mov.w	r3, #0
 800e9c2:	f04f 020a 	mov.w	r2, #10
 800e9c6:	4641      	mov	r1, r8
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	d106      	bne.n	800e9da <_dtoa_r+0xb0a>
 800e9cc:	f000 fb0a 	bl	800efe4 <__multadd>
 800e9d0:	4680      	mov	r8, r0
 800e9d2:	4607      	mov	r7, r0
 800e9d4:	f109 0901 	add.w	r9, r9, #1
 800e9d8:	e772      	b.n	800e8c0 <_dtoa_r+0x9f0>
 800e9da:	f000 fb03 	bl	800efe4 <__multadd>
 800e9de:	4639      	mov	r1, r7
 800e9e0:	4680      	mov	r8, r0
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	220a      	movs	r2, #10
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f000 fafc 	bl	800efe4 <__multadd>
 800e9ec:	4607      	mov	r7, r0
 800e9ee:	e7f1      	b.n	800e9d4 <_dtoa_r+0xb04>
 800e9f0:	9b03      	ldr	r3, [sp, #12]
 800e9f2:	9302      	str	r3, [sp, #8]
 800e9f4:	9d01      	ldr	r5, [sp, #4]
 800e9f6:	ee18 0a10 	vmov	r0, s16
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	f7ff f9dc 	bl	800ddb8 <quorem>
 800ea00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ea04:	9b01      	ldr	r3, [sp, #4]
 800ea06:	f805 ab01 	strb.w	sl, [r5], #1
 800ea0a:	1aea      	subs	r2, r5, r3
 800ea0c:	9b02      	ldr	r3, [sp, #8]
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	dd09      	ble.n	800ea26 <_dtoa_r+0xb56>
 800ea12:	ee18 1a10 	vmov	r1, s16
 800ea16:	2300      	movs	r3, #0
 800ea18:	220a      	movs	r2, #10
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f000 fae2 	bl	800efe4 <__multadd>
 800ea20:	ee08 0a10 	vmov	s16, r0
 800ea24:	e7e7      	b.n	800e9f6 <_dtoa_r+0xb26>
 800ea26:	9b02      	ldr	r3, [sp, #8]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	bfc8      	it	gt
 800ea2c:	461d      	movgt	r5, r3
 800ea2e:	9b01      	ldr	r3, [sp, #4]
 800ea30:	bfd8      	it	le
 800ea32:	2501      	movle	r5, #1
 800ea34:	441d      	add	r5, r3
 800ea36:	f04f 0800 	mov.w	r8, #0
 800ea3a:	ee18 1a10 	vmov	r1, s16
 800ea3e:	2201      	movs	r2, #1
 800ea40:	4620      	mov	r0, r4
 800ea42:	f000 fc7f 	bl	800f344 <__lshift>
 800ea46:	4631      	mov	r1, r6
 800ea48:	ee08 0a10 	vmov	s16, r0
 800ea4c:	f000 fcea 	bl	800f424 <__mcmp>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	dc91      	bgt.n	800e978 <_dtoa_r+0xaa8>
 800ea54:	d102      	bne.n	800ea5c <_dtoa_r+0xb8c>
 800ea56:	f01a 0f01 	tst.w	sl, #1
 800ea5a:	d18d      	bne.n	800e978 <_dtoa_r+0xaa8>
 800ea5c:	462b      	mov	r3, r5
 800ea5e:	461d      	mov	r5, r3
 800ea60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea64:	2a30      	cmp	r2, #48	; 0x30
 800ea66:	d0fa      	beq.n	800ea5e <_dtoa_r+0xb8e>
 800ea68:	e6d7      	b.n	800e81a <_dtoa_r+0x94a>
 800ea6a:	9a01      	ldr	r2, [sp, #4]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d184      	bne.n	800e97a <_dtoa_r+0xaaa>
 800ea70:	9b00      	ldr	r3, [sp, #0]
 800ea72:	3301      	adds	r3, #1
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	2331      	movs	r3, #49	; 0x31
 800ea78:	7013      	strb	r3, [r2, #0]
 800ea7a:	e6ce      	b.n	800e81a <_dtoa_r+0x94a>
 800ea7c:	4b09      	ldr	r3, [pc, #36]	; (800eaa4 <_dtoa_r+0xbd4>)
 800ea7e:	f7ff ba95 	b.w	800dfac <_dtoa_r+0xdc>
 800ea82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f47f aa6e 	bne.w	800df66 <_dtoa_r+0x96>
 800ea8a:	4b07      	ldr	r3, [pc, #28]	; (800eaa8 <_dtoa_r+0xbd8>)
 800ea8c:	f7ff ba8e 	b.w	800dfac <_dtoa_r+0xdc>
 800ea90:	9b02      	ldr	r3, [sp, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	dcae      	bgt.n	800e9f4 <_dtoa_r+0xb24>
 800ea96:	9b06      	ldr	r3, [sp, #24]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	f73f aea8 	bgt.w	800e7ee <_dtoa_r+0x91e>
 800ea9e:	e7a9      	b.n	800e9f4 <_dtoa_r+0xb24>
 800eaa0:	0800ff4b 	.word	0x0800ff4b
 800eaa4:	0800fea8 	.word	0x0800fea8
 800eaa8:	0800fecc 	.word	0x0800fecc

0800eaac <__sflush_r>:
 800eaac:	898a      	ldrh	r2, [r1, #12]
 800eaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab2:	4605      	mov	r5, r0
 800eab4:	0710      	lsls	r0, r2, #28
 800eab6:	460c      	mov	r4, r1
 800eab8:	d458      	bmi.n	800eb6c <__sflush_r+0xc0>
 800eaba:	684b      	ldr	r3, [r1, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	dc05      	bgt.n	800eacc <__sflush_r+0x20>
 800eac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	dc02      	bgt.n	800eacc <__sflush_r+0x20>
 800eac6:	2000      	movs	r0, #0
 800eac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eacc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eace:	2e00      	cmp	r6, #0
 800ead0:	d0f9      	beq.n	800eac6 <__sflush_r+0x1a>
 800ead2:	2300      	movs	r3, #0
 800ead4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ead8:	682f      	ldr	r7, [r5, #0]
 800eada:	602b      	str	r3, [r5, #0]
 800eadc:	d032      	beq.n	800eb44 <__sflush_r+0x98>
 800eade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	075a      	lsls	r2, r3, #29
 800eae4:	d505      	bpl.n	800eaf2 <__sflush_r+0x46>
 800eae6:	6863      	ldr	r3, [r4, #4]
 800eae8:	1ac0      	subs	r0, r0, r3
 800eaea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eaec:	b10b      	cbz	r3, 800eaf2 <__sflush_r+0x46>
 800eaee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eaf0:	1ac0      	subs	r0, r0, r3
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	4602      	mov	r2, r0
 800eaf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaf8:	6a21      	ldr	r1, [r4, #32]
 800eafa:	4628      	mov	r0, r5
 800eafc:	47b0      	blx	r6
 800eafe:	1c43      	adds	r3, r0, #1
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	d106      	bne.n	800eb12 <__sflush_r+0x66>
 800eb04:	6829      	ldr	r1, [r5, #0]
 800eb06:	291d      	cmp	r1, #29
 800eb08:	d82c      	bhi.n	800eb64 <__sflush_r+0xb8>
 800eb0a:	4a2a      	ldr	r2, [pc, #168]	; (800ebb4 <__sflush_r+0x108>)
 800eb0c:	40ca      	lsrs	r2, r1
 800eb0e:	07d6      	lsls	r6, r2, #31
 800eb10:	d528      	bpl.n	800eb64 <__sflush_r+0xb8>
 800eb12:	2200      	movs	r2, #0
 800eb14:	6062      	str	r2, [r4, #4]
 800eb16:	04d9      	lsls	r1, r3, #19
 800eb18:	6922      	ldr	r2, [r4, #16]
 800eb1a:	6022      	str	r2, [r4, #0]
 800eb1c:	d504      	bpl.n	800eb28 <__sflush_r+0x7c>
 800eb1e:	1c42      	adds	r2, r0, #1
 800eb20:	d101      	bne.n	800eb26 <__sflush_r+0x7a>
 800eb22:	682b      	ldr	r3, [r5, #0]
 800eb24:	b903      	cbnz	r3, 800eb28 <__sflush_r+0x7c>
 800eb26:	6560      	str	r0, [r4, #84]	; 0x54
 800eb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb2a:	602f      	str	r7, [r5, #0]
 800eb2c:	2900      	cmp	r1, #0
 800eb2e:	d0ca      	beq.n	800eac6 <__sflush_r+0x1a>
 800eb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb34:	4299      	cmp	r1, r3
 800eb36:	d002      	beq.n	800eb3e <__sflush_r+0x92>
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f000 fd8b 	bl	800f654 <_free_r>
 800eb3e:	2000      	movs	r0, #0
 800eb40:	6360      	str	r0, [r4, #52]	; 0x34
 800eb42:	e7c1      	b.n	800eac8 <__sflush_r+0x1c>
 800eb44:	6a21      	ldr	r1, [r4, #32]
 800eb46:	2301      	movs	r3, #1
 800eb48:	4628      	mov	r0, r5
 800eb4a:	47b0      	blx	r6
 800eb4c:	1c41      	adds	r1, r0, #1
 800eb4e:	d1c7      	bne.n	800eae0 <__sflush_r+0x34>
 800eb50:	682b      	ldr	r3, [r5, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d0c4      	beq.n	800eae0 <__sflush_r+0x34>
 800eb56:	2b1d      	cmp	r3, #29
 800eb58:	d001      	beq.n	800eb5e <__sflush_r+0xb2>
 800eb5a:	2b16      	cmp	r3, #22
 800eb5c:	d101      	bne.n	800eb62 <__sflush_r+0xb6>
 800eb5e:	602f      	str	r7, [r5, #0]
 800eb60:	e7b1      	b.n	800eac6 <__sflush_r+0x1a>
 800eb62:	89a3      	ldrh	r3, [r4, #12]
 800eb64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb68:	81a3      	strh	r3, [r4, #12]
 800eb6a:	e7ad      	b.n	800eac8 <__sflush_r+0x1c>
 800eb6c:	690f      	ldr	r7, [r1, #16]
 800eb6e:	2f00      	cmp	r7, #0
 800eb70:	d0a9      	beq.n	800eac6 <__sflush_r+0x1a>
 800eb72:	0793      	lsls	r3, r2, #30
 800eb74:	680e      	ldr	r6, [r1, #0]
 800eb76:	bf08      	it	eq
 800eb78:	694b      	ldreq	r3, [r1, #20]
 800eb7a:	600f      	str	r7, [r1, #0]
 800eb7c:	bf18      	it	ne
 800eb7e:	2300      	movne	r3, #0
 800eb80:	eba6 0807 	sub.w	r8, r6, r7
 800eb84:	608b      	str	r3, [r1, #8]
 800eb86:	f1b8 0f00 	cmp.w	r8, #0
 800eb8a:	dd9c      	ble.n	800eac6 <__sflush_r+0x1a>
 800eb8c:	6a21      	ldr	r1, [r4, #32]
 800eb8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb90:	4643      	mov	r3, r8
 800eb92:	463a      	mov	r2, r7
 800eb94:	4628      	mov	r0, r5
 800eb96:	47b0      	blx	r6
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	dc06      	bgt.n	800ebaa <__sflush_r+0xfe>
 800eb9c:	89a3      	ldrh	r3, [r4, #12]
 800eb9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eba2:	81a3      	strh	r3, [r4, #12]
 800eba4:	f04f 30ff 	mov.w	r0, #4294967295
 800eba8:	e78e      	b.n	800eac8 <__sflush_r+0x1c>
 800ebaa:	4407      	add	r7, r0
 800ebac:	eba8 0800 	sub.w	r8, r8, r0
 800ebb0:	e7e9      	b.n	800eb86 <__sflush_r+0xda>
 800ebb2:	bf00      	nop
 800ebb4:	20400001 	.word	0x20400001

0800ebb8 <_fflush_r>:
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	690b      	ldr	r3, [r1, #16]
 800ebbc:	4605      	mov	r5, r0
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	b913      	cbnz	r3, 800ebc8 <_fflush_r+0x10>
 800ebc2:	2500      	movs	r5, #0
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	bd38      	pop	{r3, r4, r5, pc}
 800ebc8:	b118      	cbz	r0, 800ebd2 <_fflush_r+0x1a>
 800ebca:	6983      	ldr	r3, [r0, #24]
 800ebcc:	b90b      	cbnz	r3, 800ebd2 <_fflush_r+0x1a>
 800ebce:	f000 f887 	bl	800ece0 <__sinit>
 800ebd2:	4b14      	ldr	r3, [pc, #80]	; (800ec24 <_fflush_r+0x6c>)
 800ebd4:	429c      	cmp	r4, r3
 800ebd6:	d11b      	bne.n	800ec10 <_fflush_r+0x58>
 800ebd8:	686c      	ldr	r4, [r5, #4]
 800ebda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d0ef      	beq.n	800ebc2 <_fflush_r+0xa>
 800ebe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebe4:	07d0      	lsls	r0, r2, #31
 800ebe6:	d404      	bmi.n	800ebf2 <_fflush_r+0x3a>
 800ebe8:	0599      	lsls	r1, r3, #22
 800ebea:	d402      	bmi.n	800ebf2 <_fflush_r+0x3a>
 800ebec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebee:	f000 f91a 	bl	800ee26 <__retarget_lock_acquire_recursive>
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	4621      	mov	r1, r4
 800ebf6:	f7ff ff59 	bl	800eaac <__sflush_r>
 800ebfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebfc:	07da      	lsls	r2, r3, #31
 800ebfe:	4605      	mov	r5, r0
 800ec00:	d4e0      	bmi.n	800ebc4 <_fflush_r+0xc>
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	059b      	lsls	r3, r3, #22
 800ec06:	d4dd      	bmi.n	800ebc4 <_fflush_r+0xc>
 800ec08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec0a:	f000 f90d 	bl	800ee28 <__retarget_lock_release_recursive>
 800ec0e:	e7d9      	b.n	800ebc4 <_fflush_r+0xc>
 800ec10:	4b05      	ldr	r3, [pc, #20]	; (800ec28 <_fflush_r+0x70>)
 800ec12:	429c      	cmp	r4, r3
 800ec14:	d101      	bne.n	800ec1a <_fflush_r+0x62>
 800ec16:	68ac      	ldr	r4, [r5, #8]
 800ec18:	e7df      	b.n	800ebda <_fflush_r+0x22>
 800ec1a:	4b04      	ldr	r3, [pc, #16]	; (800ec2c <_fflush_r+0x74>)
 800ec1c:	429c      	cmp	r4, r3
 800ec1e:	bf08      	it	eq
 800ec20:	68ec      	ldreq	r4, [r5, #12]
 800ec22:	e7da      	b.n	800ebda <_fflush_r+0x22>
 800ec24:	0800ff7c 	.word	0x0800ff7c
 800ec28:	0800ff9c 	.word	0x0800ff9c
 800ec2c:	0800ff5c 	.word	0x0800ff5c

0800ec30 <std>:
 800ec30:	2300      	movs	r3, #0
 800ec32:	b510      	push	{r4, lr}
 800ec34:	4604      	mov	r4, r0
 800ec36:	e9c0 3300 	strd	r3, r3, [r0]
 800ec3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec3e:	6083      	str	r3, [r0, #8]
 800ec40:	8181      	strh	r1, [r0, #12]
 800ec42:	6643      	str	r3, [r0, #100]	; 0x64
 800ec44:	81c2      	strh	r2, [r0, #14]
 800ec46:	6183      	str	r3, [r0, #24]
 800ec48:	4619      	mov	r1, r3
 800ec4a:	2208      	movs	r2, #8
 800ec4c:	305c      	adds	r0, #92	; 0x5c
 800ec4e:	f7fe fa25 	bl	800d09c <memset>
 800ec52:	4b05      	ldr	r3, [pc, #20]	; (800ec68 <std+0x38>)
 800ec54:	6263      	str	r3, [r4, #36]	; 0x24
 800ec56:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <std+0x3c>)
 800ec58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec5a:	4b05      	ldr	r3, [pc, #20]	; (800ec70 <std+0x40>)
 800ec5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec5e:	4b05      	ldr	r3, [pc, #20]	; (800ec74 <std+0x44>)
 800ec60:	6224      	str	r4, [r4, #32]
 800ec62:	6323      	str	r3, [r4, #48]	; 0x30
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	bf00      	nop
 800ec68:	0800fae9 	.word	0x0800fae9
 800ec6c:	0800fb0b 	.word	0x0800fb0b
 800ec70:	0800fb43 	.word	0x0800fb43
 800ec74:	0800fb67 	.word	0x0800fb67

0800ec78 <_cleanup_r>:
 800ec78:	4901      	ldr	r1, [pc, #4]	; (800ec80 <_cleanup_r+0x8>)
 800ec7a:	f000 b8af 	b.w	800eddc <_fwalk_reent>
 800ec7e:	bf00      	nop
 800ec80:	0800ebb9 	.word	0x0800ebb9

0800ec84 <__sfmoreglue>:
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	2268      	movs	r2, #104	; 0x68
 800ec88:	1e4d      	subs	r5, r1, #1
 800ec8a:	4355      	muls	r5, r2
 800ec8c:	460e      	mov	r6, r1
 800ec8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec92:	f000 fd4b 	bl	800f72c <_malloc_r>
 800ec96:	4604      	mov	r4, r0
 800ec98:	b140      	cbz	r0, 800ecac <__sfmoreglue+0x28>
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	e9c0 1600 	strd	r1, r6, [r0]
 800eca0:	300c      	adds	r0, #12
 800eca2:	60a0      	str	r0, [r4, #8]
 800eca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eca8:	f7fe f9f8 	bl	800d09c <memset>
 800ecac:	4620      	mov	r0, r4
 800ecae:	bd70      	pop	{r4, r5, r6, pc}

0800ecb0 <__sfp_lock_acquire>:
 800ecb0:	4801      	ldr	r0, [pc, #4]	; (800ecb8 <__sfp_lock_acquire+0x8>)
 800ecb2:	f000 b8b8 	b.w	800ee26 <__retarget_lock_acquire_recursive>
 800ecb6:	bf00      	nop
 800ecb8:	20000b09 	.word	0x20000b09

0800ecbc <__sfp_lock_release>:
 800ecbc:	4801      	ldr	r0, [pc, #4]	; (800ecc4 <__sfp_lock_release+0x8>)
 800ecbe:	f000 b8b3 	b.w	800ee28 <__retarget_lock_release_recursive>
 800ecc2:	bf00      	nop
 800ecc4:	20000b09 	.word	0x20000b09

0800ecc8 <__sinit_lock_acquire>:
 800ecc8:	4801      	ldr	r0, [pc, #4]	; (800ecd0 <__sinit_lock_acquire+0x8>)
 800ecca:	f000 b8ac 	b.w	800ee26 <__retarget_lock_acquire_recursive>
 800ecce:	bf00      	nop
 800ecd0:	20000b0a 	.word	0x20000b0a

0800ecd4 <__sinit_lock_release>:
 800ecd4:	4801      	ldr	r0, [pc, #4]	; (800ecdc <__sinit_lock_release+0x8>)
 800ecd6:	f000 b8a7 	b.w	800ee28 <__retarget_lock_release_recursive>
 800ecda:	bf00      	nop
 800ecdc:	20000b0a 	.word	0x20000b0a

0800ece0 <__sinit>:
 800ece0:	b510      	push	{r4, lr}
 800ece2:	4604      	mov	r4, r0
 800ece4:	f7ff fff0 	bl	800ecc8 <__sinit_lock_acquire>
 800ece8:	69a3      	ldr	r3, [r4, #24]
 800ecea:	b11b      	cbz	r3, 800ecf4 <__sinit+0x14>
 800ecec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecf0:	f7ff bff0 	b.w	800ecd4 <__sinit_lock_release>
 800ecf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ecf8:	6523      	str	r3, [r4, #80]	; 0x50
 800ecfa:	4b13      	ldr	r3, [pc, #76]	; (800ed48 <__sinit+0x68>)
 800ecfc:	4a13      	ldr	r2, [pc, #76]	; (800ed4c <__sinit+0x6c>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed02:	42a3      	cmp	r3, r4
 800ed04:	bf04      	itt	eq
 800ed06:	2301      	moveq	r3, #1
 800ed08:	61a3      	streq	r3, [r4, #24]
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 f820 	bl	800ed50 <__sfp>
 800ed10:	6060      	str	r0, [r4, #4]
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 f81c 	bl	800ed50 <__sfp>
 800ed18:	60a0      	str	r0, [r4, #8]
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f000 f818 	bl	800ed50 <__sfp>
 800ed20:	2200      	movs	r2, #0
 800ed22:	60e0      	str	r0, [r4, #12]
 800ed24:	2104      	movs	r1, #4
 800ed26:	6860      	ldr	r0, [r4, #4]
 800ed28:	f7ff ff82 	bl	800ec30 <std>
 800ed2c:	68a0      	ldr	r0, [r4, #8]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	2109      	movs	r1, #9
 800ed32:	f7ff ff7d 	bl	800ec30 <std>
 800ed36:	68e0      	ldr	r0, [r4, #12]
 800ed38:	2202      	movs	r2, #2
 800ed3a:	2112      	movs	r1, #18
 800ed3c:	f7ff ff78 	bl	800ec30 <std>
 800ed40:	2301      	movs	r3, #1
 800ed42:	61a3      	str	r3, [r4, #24]
 800ed44:	e7d2      	b.n	800ecec <__sinit+0xc>
 800ed46:	bf00      	nop
 800ed48:	0800fe94 	.word	0x0800fe94
 800ed4c:	0800ec79 	.word	0x0800ec79

0800ed50 <__sfp>:
 800ed50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed52:	4607      	mov	r7, r0
 800ed54:	f7ff ffac 	bl	800ecb0 <__sfp_lock_acquire>
 800ed58:	4b1e      	ldr	r3, [pc, #120]	; (800edd4 <__sfp+0x84>)
 800ed5a:	681e      	ldr	r6, [r3, #0]
 800ed5c:	69b3      	ldr	r3, [r6, #24]
 800ed5e:	b913      	cbnz	r3, 800ed66 <__sfp+0x16>
 800ed60:	4630      	mov	r0, r6
 800ed62:	f7ff ffbd 	bl	800ece0 <__sinit>
 800ed66:	3648      	adds	r6, #72	; 0x48
 800ed68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	d503      	bpl.n	800ed78 <__sfp+0x28>
 800ed70:	6833      	ldr	r3, [r6, #0]
 800ed72:	b30b      	cbz	r3, 800edb8 <__sfp+0x68>
 800ed74:	6836      	ldr	r6, [r6, #0]
 800ed76:	e7f7      	b.n	800ed68 <__sfp+0x18>
 800ed78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed7c:	b9d5      	cbnz	r5, 800edb4 <__sfp+0x64>
 800ed7e:	4b16      	ldr	r3, [pc, #88]	; (800edd8 <__sfp+0x88>)
 800ed80:	60e3      	str	r3, [r4, #12]
 800ed82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed86:	6665      	str	r5, [r4, #100]	; 0x64
 800ed88:	f000 f84c 	bl	800ee24 <__retarget_lock_init_recursive>
 800ed8c:	f7ff ff96 	bl	800ecbc <__sfp_lock_release>
 800ed90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed98:	6025      	str	r5, [r4, #0]
 800ed9a:	61a5      	str	r5, [r4, #24]
 800ed9c:	2208      	movs	r2, #8
 800ed9e:	4629      	mov	r1, r5
 800eda0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eda4:	f7fe f97a 	bl	800d09c <memset>
 800eda8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800edac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800edb0:	4620      	mov	r0, r4
 800edb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb4:	3468      	adds	r4, #104	; 0x68
 800edb6:	e7d9      	b.n	800ed6c <__sfp+0x1c>
 800edb8:	2104      	movs	r1, #4
 800edba:	4638      	mov	r0, r7
 800edbc:	f7ff ff62 	bl	800ec84 <__sfmoreglue>
 800edc0:	4604      	mov	r4, r0
 800edc2:	6030      	str	r0, [r6, #0]
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d1d5      	bne.n	800ed74 <__sfp+0x24>
 800edc8:	f7ff ff78 	bl	800ecbc <__sfp_lock_release>
 800edcc:	230c      	movs	r3, #12
 800edce:	603b      	str	r3, [r7, #0]
 800edd0:	e7ee      	b.n	800edb0 <__sfp+0x60>
 800edd2:	bf00      	nop
 800edd4:	0800fe94 	.word	0x0800fe94
 800edd8:	ffff0001 	.word	0xffff0001

0800eddc <_fwalk_reent>:
 800eddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede0:	4606      	mov	r6, r0
 800ede2:	4688      	mov	r8, r1
 800ede4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ede8:	2700      	movs	r7, #0
 800edea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edee:	f1b9 0901 	subs.w	r9, r9, #1
 800edf2:	d505      	bpl.n	800ee00 <_fwalk_reent+0x24>
 800edf4:	6824      	ldr	r4, [r4, #0]
 800edf6:	2c00      	cmp	r4, #0
 800edf8:	d1f7      	bne.n	800edea <_fwalk_reent+0xe>
 800edfa:	4638      	mov	r0, r7
 800edfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee00:	89ab      	ldrh	r3, [r5, #12]
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d907      	bls.n	800ee16 <_fwalk_reent+0x3a>
 800ee06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	d003      	beq.n	800ee16 <_fwalk_reent+0x3a>
 800ee0e:	4629      	mov	r1, r5
 800ee10:	4630      	mov	r0, r6
 800ee12:	47c0      	blx	r8
 800ee14:	4307      	orrs	r7, r0
 800ee16:	3568      	adds	r5, #104	; 0x68
 800ee18:	e7e9      	b.n	800edee <_fwalk_reent+0x12>
	...

0800ee1c <_localeconv_r>:
 800ee1c:	4800      	ldr	r0, [pc, #0]	; (800ee20 <_localeconv_r+0x4>)
 800ee1e:	4770      	bx	lr
 800ee20:	20000168 	.word	0x20000168

0800ee24 <__retarget_lock_init_recursive>:
 800ee24:	4770      	bx	lr

0800ee26 <__retarget_lock_acquire_recursive>:
 800ee26:	4770      	bx	lr

0800ee28 <__retarget_lock_release_recursive>:
 800ee28:	4770      	bx	lr

0800ee2a <__swhatbuf_r>:
 800ee2a:	b570      	push	{r4, r5, r6, lr}
 800ee2c:	460e      	mov	r6, r1
 800ee2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee32:	2900      	cmp	r1, #0
 800ee34:	b096      	sub	sp, #88	; 0x58
 800ee36:	4614      	mov	r4, r2
 800ee38:	461d      	mov	r5, r3
 800ee3a:	da08      	bge.n	800ee4e <__swhatbuf_r+0x24>
 800ee3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ee40:	2200      	movs	r2, #0
 800ee42:	602a      	str	r2, [r5, #0]
 800ee44:	061a      	lsls	r2, r3, #24
 800ee46:	d410      	bmi.n	800ee6a <__swhatbuf_r+0x40>
 800ee48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee4c:	e00e      	b.n	800ee6c <__swhatbuf_r+0x42>
 800ee4e:	466a      	mov	r2, sp
 800ee50:	f000 fee0 	bl	800fc14 <_fstat_r>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	dbf1      	blt.n	800ee3c <__swhatbuf_r+0x12>
 800ee58:	9a01      	ldr	r2, [sp, #4]
 800ee5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee62:	425a      	negs	r2, r3
 800ee64:	415a      	adcs	r2, r3
 800ee66:	602a      	str	r2, [r5, #0]
 800ee68:	e7ee      	b.n	800ee48 <__swhatbuf_r+0x1e>
 800ee6a:	2340      	movs	r3, #64	; 0x40
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	6023      	str	r3, [r4, #0]
 800ee70:	b016      	add	sp, #88	; 0x58
 800ee72:	bd70      	pop	{r4, r5, r6, pc}

0800ee74 <__smakebuf_r>:
 800ee74:	898b      	ldrh	r3, [r1, #12]
 800ee76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee78:	079d      	lsls	r5, r3, #30
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	460c      	mov	r4, r1
 800ee7e:	d507      	bpl.n	800ee90 <__smakebuf_r+0x1c>
 800ee80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	6123      	str	r3, [r4, #16]
 800ee88:	2301      	movs	r3, #1
 800ee8a:	6163      	str	r3, [r4, #20]
 800ee8c:	b002      	add	sp, #8
 800ee8e:	bd70      	pop	{r4, r5, r6, pc}
 800ee90:	ab01      	add	r3, sp, #4
 800ee92:	466a      	mov	r2, sp
 800ee94:	f7ff ffc9 	bl	800ee2a <__swhatbuf_r>
 800ee98:	9900      	ldr	r1, [sp, #0]
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	f000 fc45 	bl	800f72c <_malloc_r>
 800eea2:	b948      	cbnz	r0, 800eeb8 <__smakebuf_r+0x44>
 800eea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eea8:	059a      	lsls	r2, r3, #22
 800eeaa:	d4ef      	bmi.n	800ee8c <__smakebuf_r+0x18>
 800eeac:	f023 0303 	bic.w	r3, r3, #3
 800eeb0:	f043 0302 	orr.w	r3, r3, #2
 800eeb4:	81a3      	strh	r3, [r4, #12]
 800eeb6:	e7e3      	b.n	800ee80 <__smakebuf_r+0xc>
 800eeb8:	4b0d      	ldr	r3, [pc, #52]	; (800eef0 <__smakebuf_r+0x7c>)
 800eeba:	62b3      	str	r3, [r6, #40]	; 0x28
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	6020      	str	r0, [r4, #0]
 800eec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eec4:	81a3      	strh	r3, [r4, #12]
 800eec6:	9b00      	ldr	r3, [sp, #0]
 800eec8:	6163      	str	r3, [r4, #20]
 800eeca:	9b01      	ldr	r3, [sp, #4]
 800eecc:	6120      	str	r0, [r4, #16]
 800eece:	b15b      	cbz	r3, 800eee8 <__smakebuf_r+0x74>
 800eed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eed4:	4630      	mov	r0, r6
 800eed6:	f000 feaf 	bl	800fc38 <_isatty_r>
 800eeda:	b128      	cbz	r0, 800eee8 <__smakebuf_r+0x74>
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	f023 0303 	bic.w	r3, r3, #3
 800eee2:	f043 0301 	orr.w	r3, r3, #1
 800eee6:	81a3      	strh	r3, [r4, #12]
 800eee8:	89a0      	ldrh	r0, [r4, #12]
 800eeea:	4305      	orrs	r5, r0
 800eeec:	81a5      	strh	r5, [r4, #12]
 800eeee:	e7cd      	b.n	800ee8c <__smakebuf_r+0x18>
 800eef0:	0800ec79 	.word	0x0800ec79

0800eef4 <malloc>:
 800eef4:	4b02      	ldr	r3, [pc, #8]	; (800ef00 <malloc+0xc>)
 800eef6:	4601      	mov	r1, r0
 800eef8:	6818      	ldr	r0, [r3, #0]
 800eefa:	f000 bc17 	b.w	800f72c <_malloc_r>
 800eefe:	bf00      	nop
 800ef00:	20000014 	.word	0x20000014

0800ef04 <memcpy>:
 800ef04:	440a      	add	r2, r1
 800ef06:	4291      	cmp	r1, r2
 800ef08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef0c:	d100      	bne.n	800ef10 <memcpy+0xc>
 800ef0e:	4770      	bx	lr
 800ef10:	b510      	push	{r4, lr}
 800ef12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef1a:	4291      	cmp	r1, r2
 800ef1c:	d1f9      	bne.n	800ef12 <memcpy+0xe>
 800ef1e:	bd10      	pop	{r4, pc}

0800ef20 <_Balloc>:
 800ef20:	b570      	push	{r4, r5, r6, lr}
 800ef22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef24:	4604      	mov	r4, r0
 800ef26:	460d      	mov	r5, r1
 800ef28:	b976      	cbnz	r6, 800ef48 <_Balloc+0x28>
 800ef2a:	2010      	movs	r0, #16
 800ef2c:	f7ff ffe2 	bl	800eef4 <malloc>
 800ef30:	4602      	mov	r2, r0
 800ef32:	6260      	str	r0, [r4, #36]	; 0x24
 800ef34:	b920      	cbnz	r0, 800ef40 <_Balloc+0x20>
 800ef36:	4b18      	ldr	r3, [pc, #96]	; (800ef98 <_Balloc+0x78>)
 800ef38:	4818      	ldr	r0, [pc, #96]	; (800ef9c <_Balloc+0x7c>)
 800ef3a:	2166      	movs	r1, #102	; 0x66
 800ef3c:	f000 fe2a 	bl	800fb94 <__assert_func>
 800ef40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef44:	6006      	str	r6, [r0, #0]
 800ef46:	60c6      	str	r6, [r0, #12]
 800ef48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef4a:	68f3      	ldr	r3, [r6, #12]
 800ef4c:	b183      	cbz	r3, 800ef70 <_Balloc+0x50>
 800ef4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ef56:	b9b8      	cbnz	r0, 800ef88 <_Balloc+0x68>
 800ef58:	2101      	movs	r1, #1
 800ef5a:	fa01 f605 	lsl.w	r6, r1, r5
 800ef5e:	1d72      	adds	r2, r6, #5
 800ef60:	0092      	lsls	r2, r2, #2
 800ef62:	4620      	mov	r0, r4
 800ef64:	f000 fb60 	bl	800f628 <_calloc_r>
 800ef68:	b160      	cbz	r0, 800ef84 <_Balloc+0x64>
 800ef6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ef6e:	e00e      	b.n	800ef8e <_Balloc+0x6e>
 800ef70:	2221      	movs	r2, #33	; 0x21
 800ef72:	2104      	movs	r1, #4
 800ef74:	4620      	mov	r0, r4
 800ef76:	f000 fb57 	bl	800f628 <_calloc_r>
 800ef7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef7c:	60f0      	str	r0, [r6, #12]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1e4      	bne.n	800ef4e <_Balloc+0x2e>
 800ef84:	2000      	movs	r0, #0
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
 800ef88:	6802      	ldr	r2, [r0, #0]
 800ef8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef94:	e7f7      	b.n	800ef86 <_Balloc+0x66>
 800ef96:	bf00      	nop
 800ef98:	0800fed9 	.word	0x0800fed9
 800ef9c:	0800ffbc 	.word	0x0800ffbc

0800efa0 <_Bfree>:
 800efa0:	b570      	push	{r4, r5, r6, lr}
 800efa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800efa4:	4605      	mov	r5, r0
 800efa6:	460c      	mov	r4, r1
 800efa8:	b976      	cbnz	r6, 800efc8 <_Bfree+0x28>
 800efaa:	2010      	movs	r0, #16
 800efac:	f7ff ffa2 	bl	800eef4 <malloc>
 800efb0:	4602      	mov	r2, r0
 800efb2:	6268      	str	r0, [r5, #36]	; 0x24
 800efb4:	b920      	cbnz	r0, 800efc0 <_Bfree+0x20>
 800efb6:	4b09      	ldr	r3, [pc, #36]	; (800efdc <_Bfree+0x3c>)
 800efb8:	4809      	ldr	r0, [pc, #36]	; (800efe0 <_Bfree+0x40>)
 800efba:	218a      	movs	r1, #138	; 0x8a
 800efbc:	f000 fdea 	bl	800fb94 <__assert_func>
 800efc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efc4:	6006      	str	r6, [r0, #0]
 800efc6:	60c6      	str	r6, [r0, #12]
 800efc8:	b13c      	cbz	r4, 800efda <_Bfree+0x3a>
 800efca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800efcc:	6862      	ldr	r2, [r4, #4]
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800efd4:	6021      	str	r1, [r4, #0]
 800efd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800efda:	bd70      	pop	{r4, r5, r6, pc}
 800efdc:	0800fed9 	.word	0x0800fed9
 800efe0:	0800ffbc 	.word	0x0800ffbc

0800efe4 <__multadd>:
 800efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe8:	690d      	ldr	r5, [r1, #16]
 800efea:	4607      	mov	r7, r0
 800efec:	460c      	mov	r4, r1
 800efee:	461e      	mov	r6, r3
 800eff0:	f101 0c14 	add.w	ip, r1, #20
 800eff4:	2000      	movs	r0, #0
 800eff6:	f8dc 3000 	ldr.w	r3, [ip]
 800effa:	b299      	uxth	r1, r3
 800effc:	fb02 6101 	mla	r1, r2, r1, r6
 800f000:	0c1e      	lsrs	r6, r3, #16
 800f002:	0c0b      	lsrs	r3, r1, #16
 800f004:	fb02 3306 	mla	r3, r2, r6, r3
 800f008:	b289      	uxth	r1, r1
 800f00a:	3001      	adds	r0, #1
 800f00c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f010:	4285      	cmp	r5, r0
 800f012:	f84c 1b04 	str.w	r1, [ip], #4
 800f016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f01a:	dcec      	bgt.n	800eff6 <__multadd+0x12>
 800f01c:	b30e      	cbz	r6, 800f062 <__multadd+0x7e>
 800f01e:	68a3      	ldr	r3, [r4, #8]
 800f020:	42ab      	cmp	r3, r5
 800f022:	dc19      	bgt.n	800f058 <__multadd+0x74>
 800f024:	6861      	ldr	r1, [r4, #4]
 800f026:	4638      	mov	r0, r7
 800f028:	3101      	adds	r1, #1
 800f02a:	f7ff ff79 	bl	800ef20 <_Balloc>
 800f02e:	4680      	mov	r8, r0
 800f030:	b928      	cbnz	r0, 800f03e <__multadd+0x5a>
 800f032:	4602      	mov	r2, r0
 800f034:	4b0c      	ldr	r3, [pc, #48]	; (800f068 <__multadd+0x84>)
 800f036:	480d      	ldr	r0, [pc, #52]	; (800f06c <__multadd+0x88>)
 800f038:	21b5      	movs	r1, #181	; 0xb5
 800f03a:	f000 fdab 	bl	800fb94 <__assert_func>
 800f03e:	6922      	ldr	r2, [r4, #16]
 800f040:	3202      	adds	r2, #2
 800f042:	f104 010c 	add.w	r1, r4, #12
 800f046:	0092      	lsls	r2, r2, #2
 800f048:	300c      	adds	r0, #12
 800f04a:	f7ff ff5b 	bl	800ef04 <memcpy>
 800f04e:	4621      	mov	r1, r4
 800f050:	4638      	mov	r0, r7
 800f052:	f7ff ffa5 	bl	800efa0 <_Bfree>
 800f056:	4644      	mov	r4, r8
 800f058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f05c:	3501      	adds	r5, #1
 800f05e:	615e      	str	r6, [r3, #20]
 800f060:	6125      	str	r5, [r4, #16]
 800f062:	4620      	mov	r0, r4
 800f064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f068:	0800ff4b 	.word	0x0800ff4b
 800f06c:	0800ffbc 	.word	0x0800ffbc

0800f070 <__hi0bits>:
 800f070:	0c03      	lsrs	r3, r0, #16
 800f072:	041b      	lsls	r3, r3, #16
 800f074:	b9d3      	cbnz	r3, 800f0ac <__hi0bits+0x3c>
 800f076:	0400      	lsls	r0, r0, #16
 800f078:	2310      	movs	r3, #16
 800f07a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f07e:	bf04      	itt	eq
 800f080:	0200      	lsleq	r0, r0, #8
 800f082:	3308      	addeq	r3, #8
 800f084:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f088:	bf04      	itt	eq
 800f08a:	0100      	lsleq	r0, r0, #4
 800f08c:	3304      	addeq	r3, #4
 800f08e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f092:	bf04      	itt	eq
 800f094:	0080      	lsleq	r0, r0, #2
 800f096:	3302      	addeq	r3, #2
 800f098:	2800      	cmp	r0, #0
 800f09a:	db05      	blt.n	800f0a8 <__hi0bits+0x38>
 800f09c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f0a0:	f103 0301 	add.w	r3, r3, #1
 800f0a4:	bf08      	it	eq
 800f0a6:	2320      	moveq	r3, #32
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	4770      	bx	lr
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	e7e4      	b.n	800f07a <__hi0bits+0xa>

0800f0b0 <__lo0bits>:
 800f0b0:	6803      	ldr	r3, [r0, #0]
 800f0b2:	f013 0207 	ands.w	r2, r3, #7
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	d00b      	beq.n	800f0d2 <__lo0bits+0x22>
 800f0ba:	07da      	lsls	r2, r3, #31
 800f0bc:	d423      	bmi.n	800f106 <__lo0bits+0x56>
 800f0be:	0798      	lsls	r0, r3, #30
 800f0c0:	bf49      	itett	mi
 800f0c2:	085b      	lsrmi	r3, r3, #1
 800f0c4:	089b      	lsrpl	r3, r3, #2
 800f0c6:	2001      	movmi	r0, #1
 800f0c8:	600b      	strmi	r3, [r1, #0]
 800f0ca:	bf5c      	itt	pl
 800f0cc:	600b      	strpl	r3, [r1, #0]
 800f0ce:	2002      	movpl	r0, #2
 800f0d0:	4770      	bx	lr
 800f0d2:	b298      	uxth	r0, r3
 800f0d4:	b9a8      	cbnz	r0, 800f102 <__lo0bits+0x52>
 800f0d6:	0c1b      	lsrs	r3, r3, #16
 800f0d8:	2010      	movs	r0, #16
 800f0da:	b2da      	uxtb	r2, r3
 800f0dc:	b90a      	cbnz	r2, 800f0e2 <__lo0bits+0x32>
 800f0de:	3008      	adds	r0, #8
 800f0e0:	0a1b      	lsrs	r3, r3, #8
 800f0e2:	071a      	lsls	r2, r3, #28
 800f0e4:	bf04      	itt	eq
 800f0e6:	091b      	lsreq	r3, r3, #4
 800f0e8:	3004      	addeq	r0, #4
 800f0ea:	079a      	lsls	r2, r3, #30
 800f0ec:	bf04      	itt	eq
 800f0ee:	089b      	lsreq	r3, r3, #2
 800f0f0:	3002      	addeq	r0, #2
 800f0f2:	07da      	lsls	r2, r3, #31
 800f0f4:	d403      	bmi.n	800f0fe <__lo0bits+0x4e>
 800f0f6:	085b      	lsrs	r3, r3, #1
 800f0f8:	f100 0001 	add.w	r0, r0, #1
 800f0fc:	d005      	beq.n	800f10a <__lo0bits+0x5a>
 800f0fe:	600b      	str	r3, [r1, #0]
 800f100:	4770      	bx	lr
 800f102:	4610      	mov	r0, r2
 800f104:	e7e9      	b.n	800f0da <__lo0bits+0x2a>
 800f106:	2000      	movs	r0, #0
 800f108:	4770      	bx	lr
 800f10a:	2020      	movs	r0, #32
 800f10c:	4770      	bx	lr
	...

0800f110 <__i2b>:
 800f110:	b510      	push	{r4, lr}
 800f112:	460c      	mov	r4, r1
 800f114:	2101      	movs	r1, #1
 800f116:	f7ff ff03 	bl	800ef20 <_Balloc>
 800f11a:	4602      	mov	r2, r0
 800f11c:	b928      	cbnz	r0, 800f12a <__i2b+0x1a>
 800f11e:	4b05      	ldr	r3, [pc, #20]	; (800f134 <__i2b+0x24>)
 800f120:	4805      	ldr	r0, [pc, #20]	; (800f138 <__i2b+0x28>)
 800f122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f126:	f000 fd35 	bl	800fb94 <__assert_func>
 800f12a:	2301      	movs	r3, #1
 800f12c:	6144      	str	r4, [r0, #20]
 800f12e:	6103      	str	r3, [r0, #16]
 800f130:	bd10      	pop	{r4, pc}
 800f132:	bf00      	nop
 800f134:	0800ff4b 	.word	0x0800ff4b
 800f138:	0800ffbc 	.word	0x0800ffbc

0800f13c <__multiply>:
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	4691      	mov	r9, r2
 800f142:	690a      	ldr	r2, [r1, #16]
 800f144:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f148:	429a      	cmp	r2, r3
 800f14a:	bfb8      	it	lt
 800f14c:	460b      	movlt	r3, r1
 800f14e:	460c      	mov	r4, r1
 800f150:	bfbc      	itt	lt
 800f152:	464c      	movlt	r4, r9
 800f154:	4699      	movlt	r9, r3
 800f156:	6927      	ldr	r7, [r4, #16]
 800f158:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f15c:	68a3      	ldr	r3, [r4, #8]
 800f15e:	6861      	ldr	r1, [r4, #4]
 800f160:	eb07 060a 	add.w	r6, r7, sl
 800f164:	42b3      	cmp	r3, r6
 800f166:	b085      	sub	sp, #20
 800f168:	bfb8      	it	lt
 800f16a:	3101      	addlt	r1, #1
 800f16c:	f7ff fed8 	bl	800ef20 <_Balloc>
 800f170:	b930      	cbnz	r0, 800f180 <__multiply+0x44>
 800f172:	4602      	mov	r2, r0
 800f174:	4b44      	ldr	r3, [pc, #272]	; (800f288 <__multiply+0x14c>)
 800f176:	4845      	ldr	r0, [pc, #276]	; (800f28c <__multiply+0x150>)
 800f178:	f240 115d 	movw	r1, #349	; 0x15d
 800f17c:	f000 fd0a 	bl	800fb94 <__assert_func>
 800f180:	f100 0514 	add.w	r5, r0, #20
 800f184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f188:	462b      	mov	r3, r5
 800f18a:	2200      	movs	r2, #0
 800f18c:	4543      	cmp	r3, r8
 800f18e:	d321      	bcc.n	800f1d4 <__multiply+0x98>
 800f190:	f104 0314 	add.w	r3, r4, #20
 800f194:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f198:	f109 0314 	add.w	r3, r9, #20
 800f19c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f1a0:	9202      	str	r2, [sp, #8]
 800f1a2:	1b3a      	subs	r2, r7, r4
 800f1a4:	3a15      	subs	r2, #21
 800f1a6:	f022 0203 	bic.w	r2, r2, #3
 800f1aa:	3204      	adds	r2, #4
 800f1ac:	f104 0115 	add.w	r1, r4, #21
 800f1b0:	428f      	cmp	r7, r1
 800f1b2:	bf38      	it	cc
 800f1b4:	2204      	movcc	r2, #4
 800f1b6:	9201      	str	r2, [sp, #4]
 800f1b8:	9a02      	ldr	r2, [sp, #8]
 800f1ba:	9303      	str	r3, [sp, #12]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d80c      	bhi.n	800f1da <__multiply+0x9e>
 800f1c0:	2e00      	cmp	r6, #0
 800f1c2:	dd03      	ble.n	800f1cc <__multiply+0x90>
 800f1c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d05a      	beq.n	800f282 <__multiply+0x146>
 800f1cc:	6106      	str	r6, [r0, #16]
 800f1ce:	b005      	add	sp, #20
 800f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d4:	f843 2b04 	str.w	r2, [r3], #4
 800f1d8:	e7d8      	b.n	800f18c <__multiply+0x50>
 800f1da:	f8b3 a000 	ldrh.w	sl, [r3]
 800f1de:	f1ba 0f00 	cmp.w	sl, #0
 800f1e2:	d024      	beq.n	800f22e <__multiply+0xf2>
 800f1e4:	f104 0e14 	add.w	lr, r4, #20
 800f1e8:	46a9      	mov	r9, r5
 800f1ea:	f04f 0c00 	mov.w	ip, #0
 800f1ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f1f2:	f8d9 1000 	ldr.w	r1, [r9]
 800f1f6:	fa1f fb82 	uxth.w	fp, r2
 800f1fa:	b289      	uxth	r1, r1
 800f1fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f200:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f204:	f8d9 2000 	ldr.w	r2, [r9]
 800f208:	4461      	add	r1, ip
 800f20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f20e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f212:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f216:	b289      	uxth	r1, r1
 800f218:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f21c:	4577      	cmp	r7, lr
 800f21e:	f849 1b04 	str.w	r1, [r9], #4
 800f222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f226:	d8e2      	bhi.n	800f1ee <__multiply+0xb2>
 800f228:	9a01      	ldr	r2, [sp, #4]
 800f22a:	f845 c002 	str.w	ip, [r5, r2]
 800f22e:	9a03      	ldr	r2, [sp, #12]
 800f230:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f234:	3304      	adds	r3, #4
 800f236:	f1b9 0f00 	cmp.w	r9, #0
 800f23a:	d020      	beq.n	800f27e <__multiply+0x142>
 800f23c:	6829      	ldr	r1, [r5, #0]
 800f23e:	f104 0c14 	add.w	ip, r4, #20
 800f242:	46ae      	mov	lr, r5
 800f244:	f04f 0a00 	mov.w	sl, #0
 800f248:	f8bc b000 	ldrh.w	fp, [ip]
 800f24c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f250:	fb09 220b 	mla	r2, r9, fp, r2
 800f254:	4492      	add	sl, r2
 800f256:	b289      	uxth	r1, r1
 800f258:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f25c:	f84e 1b04 	str.w	r1, [lr], #4
 800f260:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f264:	f8be 1000 	ldrh.w	r1, [lr]
 800f268:	0c12      	lsrs	r2, r2, #16
 800f26a:	fb09 1102 	mla	r1, r9, r2, r1
 800f26e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f272:	4567      	cmp	r7, ip
 800f274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f278:	d8e6      	bhi.n	800f248 <__multiply+0x10c>
 800f27a:	9a01      	ldr	r2, [sp, #4]
 800f27c:	50a9      	str	r1, [r5, r2]
 800f27e:	3504      	adds	r5, #4
 800f280:	e79a      	b.n	800f1b8 <__multiply+0x7c>
 800f282:	3e01      	subs	r6, #1
 800f284:	e79c      	b.n	800f1c0 <__multiply+0x84>
 800f286:	bf00      	nop
 800f288:	0800ff4b 	.word	0x0800ff4b
 800f28c:	0800ffbc 	.word	0x0800ffbc

0800f290 <__pow5mult>:
 800f290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f294:	4615      	mov	r5, r2
 800f296:	f012 0203 	ands.w	r2, r2, #3
 800f29a:	4606      	mov	r6, r0
 800f29c:	460f      	mov	r7, r1
 800f29e:	d007      	beq.n	800f2b0 <__pow5mult+0x20>
 800f2a0:	4c25      	ldr	r4, [pc, #148]	; (800f338 <__pow5mult+0xa8>)
 800f2a2:	3a01      	subs	r2, #1
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f2aa:	f7ff fe9b 	bl	800efe4 <__multadd>
 800f2ae:	4607      	mov	r7, r0
 800f2b0:	10ad      	asrs	r5, r5, #2
 800f2b2:	d03d      	beq.n	800f330 <__pow5mult+0xa0>
 800f2b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f2b6:	b97c      	cbnz	r4, 800f2d8 <__pow5mult+0x48>
 800f2b8:	2010      	movs	r0, #16
 800f2ba:	f7ff fe1b 	bl	800eef4 <malloc>
 800f2be:	4602      	mov	r2, r0
 800f2c0:	6270      	str	r0, [r6, #36]	; 0x24
 800f2c2:	b928      	cbnz	r0, 800f2d0 <__pow5mult+0x40>
 800f2c4:	4b1d      	ldr	r3, [pc, #116]	; (800f33c <__pow5mult+0xac>)
 800f2c6:	481e      	ldr	r0, [pc, #120]	; (800f340 <__pow5mult+0xb0>)
 800f2c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f2cc:	f000 fc62 	bl	800fb94 <__assert_func>
 800f2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2d4:	6004      	str	r4, [r0, #0]
 800f2d6:	60c4      	str	r4, [r0, #12]
 800f2d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2e0:	b94c      	cbnz	r4, 800f2f6 <__pow5mult+0x66>
 800f2e2:	f240 2171 	movw	r1, #625	; 0x271
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f7ff ff12 	bl	800f110 <__i2b>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	6003      	str	r3, [r0, #0]
 800f2f6:	f04f 0900 	mov.w	r9, #0
 800f2fa:	07eb      	lsls	r3, r5, #31
 800f2fc:	d50a      	bpl.n	800f314 <__pow5mult+0x84>
 800f2fe:	4639      	mov	r1, r7
 800f300:	4622      	mov	r2, r4
 800f302:	4630      	mov	r0, r6
 800f304:	f7ff ff1a 	bl	800f13c <__multiply>
 800f308:	4639      	mov	r1, r7
 800f30a:	4680      	mov	r8, r0
 800f30c:	4630      	mov	r0, r6
 800f30e:	f7ff fe47 	bl	800efa0 <_Bfree>
 800f312:	4647      	mov	r7, r8
 800f314:	106d      	asrs	r5, r5, #1
 800f316:	d00b      	beq.n	800f330 <__pow5mult+0xa0>
 800f318:	6820      	ldr	r0, [r4, #0]
 800f31a:	b938      	cbnz	r0, 800f32c <__pow5mult+0x9c>
 800f31c:	4622      	mov	r2, r4
 800f31e:	4621      	mov	r1, r4
 800f320:	4630      	mov	r0, r6
 800f322:	f7ff ff0b 	bl	800f13c <__multiply>
 800f326:	6020      	str	r0, [r4, #0]
 800f328:	f8c0 9000 	str.w	r9, [r0]
 800f32c:	4604      	mov	r4, r0
 800f32e:	e7e4      	b.n	800f2fa <__pow5mult+0x6a>
 800f330:	4638      	mov	r0, r7
 800f332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f336:	bf00      	nop
 800f338:	08010108 	.word	0x08010108
 800f33c:	0800fed9 	.word	0x0800fed9
 800f340:	0800ffbc 	.word	0x0800ffbc

0800f344 <__lshift>:
 800f344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f348:	460c      	mov	r4, r1
 800f34a:	6849      	ldr	r1, [r1, #4]
 800f34c:	6923      	ldr	r3, [r4, #16]
 800f34e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f352:	68a3      	ldr	r3, [r4, #8]
 800f354:	4607      	mov	r7, r0
 800f356:	4691      	mov	r9, r2
 800f358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f35c:	f108 0601 	add.w	r6, r8, #1
 800f360:	42b3      	cmp	r3, r6
 800f362:	db0b      	blt.n	800f37c <__lshift+0x38>
 800f364:	4638      	mov	r0, r7
 800f366:	f7ff fddb 	bl	800ef20 <_Balloc>
 800f36a:	4605      	mov	r5, r0
 800f36c:	b948      	cbnz	r0, 800f382 <__lshift+0x3e>
 800f36e:	4602      	mov	r2, r0
 800f370:	4b2a      	ldr	r3, [pc, #168]	; (800f41c <__lshift+0xd8>)
 800f372:	482b      	ldr	r0, [pc, #172]	; (800f420 <__lshift+0xdc>)
 800f374:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f378:	f000 fc0c 	bl	800fb94 <__assert_func>
 800f37c:	3101      	adds	r1, #1
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	e7ee      	b.n	800f360 <__lshift+0x1c>
 800f382:	2300      	movs	r3, #0
 800f384:	f100 0114 	add.w	r1, r0, #20
 800f388:	f100 0210 	add.w	r2, r0, #16
 800f38c:	4618      	mov	r0, r3
 800f38e:	4553      	cmp	r3, sl
 800f390:	db37      	blt.n	800f402 <__lshift+0xbe>
 800f392:	6920      	ldr	r0, [r4, #16]
 800f394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f398:	f104 0314 	add.w	r3, r4, #20
 800f39c:	f019 091f 	ands.w	r9, r9, #31
 800f3a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f3a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f3a8:	d02f      	beq.n	800f40a <__lshift+0xc6>
 800f3aa:	f1c9 0e20 	rsb	lr, r9, #32
 800f3ae:	468a      	mov	sl, r1
 800f3b0:	f04f 0c00 	mov.w	ip, #0
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	fa02 f209 	lsl.w	r2, r2, r9
 800f3ba:	ea42 020c 	orr.w	r2, r2, ip
 800f3be:	f84a 2b04 	str.w	r2, [sl], #4
 800f3c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c6:	4298      	cmp	r0, r3
 800f3c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f3cc:	d8f2      	bhi.n	800f3b4 <__lshift+0x70>
 800f3ce:	1b03      	subs	r3, r0, r4
 800f3d0:	3b15      	subs	r3, #21
 800f3d2:	f023 0303 	bic.w	r3, r3, #3
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	f104 0215 	add.w	r2, r4, #21
 800f3dc:	4290      	cmp	r0, r2
 800f3de:	bf38      	it	cc
 800f3e0:	2304      	movcc	r3, #4
 800f3e2:	f841 c003 	str.w	ip, [r1, r3]
 800f3e6:	f1bc 0f00 	cmp.w	ip, #0
 800f3ea:	d001      	beq.n	800f3f0 <__lshift+0xac>
 800f3ec:	f108 0602 	add.w	r6, r8, #2
 800f3f0:	3e01      	subs	r6, #1
 800f3f2:	4638      	mov	r0, r7
 800f3f4:	612e      	str	r6, [r5, #16]
 800f3f6:	4621      	mov	r1, r4
 800f3f8:	f7ff fdd2 	bl	800efa0 <_Bfree>
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f402:	f842 0f04 	str.w	r0, [r2, #4]!
 800f406:	3301      	adds	r3, #1
 800f408:	e7c1      	b.n	800f38e <__lshift+0x4a>
 800f40a:	3904      	subs	r1, #4
 800f40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f410:	f841 2f04 	str.w	r2, [r1, #4]!
 800f414:	4298      	cmp	r0, r3
 800f416:	d8f9      	bhi.n	800f40c <__lshift+0xc8>
 800f418:	e7ea      	b.n	800f3f0 <__lshift+0xac>
 800f41a:	bf00      	nop
 800f41c:	0800ff4b 	.word	0x0800ff4b
 800f420:	0800ffbc 	.word	0x0800ffbc

0800f424 <__mcmp>:
 800f424:	b530      	push	{r4, r5, lr}
 800f426:	6902      	ldr	r2, [r0, #16]
 800f428:	690c      	ldr	r4, [r1, #16]
 800f42a:	1b12      	subs	r2, r2, r4
 800f42c:	d10e      	bne.n	800f44c <__mcmp+0x28>
 800f42e:	f100 0314 	add.w	r3, r0, #20
 800f432:	3114      	adds	r1, #20
 800f434:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f438:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f43c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f440:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f444:	42a5      	cmp	r5, r4
 800f446:	d003      	beq.n	800f450 <__mcmp+0x2c>
 800f448:	d305      	bcc.n	800f456 <__mcmp+0x32>
 800f44a:	2201      	movs	r2, #1
 800f44c:	4610      	mov	r0, r2
 800f44e:	bd30      	pop	{r4, r5, pc}
 800f450:	4283      	cmp	r3, r0
 800f452:	d3f3      	bcc.n	800f43c <__mcmp+0x18>
 800f454:	e7fa      	b.n	800f44c <__mcmp+0x28>
 800f456:	f04f 32ff 	mov.w	r2, #4294967295
 800f45a:	e7f7      	b.n	800f44c <__mcmp+0x28>

0800f45c <__mdiff>:
 800f45c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	460c      	mov	r4, r1
 800f462:	4606      	mov	r6, r0
 800f464:	4611      	mov	r1, r2
 800f466:	4620      	mov	r0, r4
 800f468:	4690      	mov	r8, r2
 800f46a:	f7ff ffdb 	bl	800f424 <__mcmp>
 800f46e:	1e05      	subs	r5, r0, #0
 800f470:	d110      	bne.n	800f494 <__mdiff+0x38>
 800f472:	4629      	mov	r1, r5
 800f474:	4630      	mov	r0, r6
 800f476:	f7ff fd53 	bl	800ef20 <_Balloc>
 800f47a:	b930      	cbnz	r0, 800f48a <__mdiff+0x2e>
 800f47c:	4b3a      	ldr	r3, [pc, #232]	; (800f568 <__mdiff+0x10c>)
 800f47e:	4602      	mov	r2, r0
 800f480:	f240 2132 	movw	r1, #562	; 0x232
 800f484:	4839      	ldr	r0, [pc, #228]	; (800f56c <__mdiff+0x110>)
 800f486:	f000 fb85 	bl	800fb94 <__assert_func>
 800f48a:	2301      	movs	r3, #1
 800f48c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f494:	bfa4      	itt	ge
 800f496:	4643      	movge	r3, r8
 800f498:	46a0      	movge	r8, r4
 800f49a:	4630      	mov	r0, r6
 800f49c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f4a0:	bfa6      	itte	ge
 800f4a2:	461c      	movge	r4, r3
 800f4a4:	2500      	movge	r5, #0
 800f4a6:	2501      	movlt	r5, #1
 800f4a8:	f7ff fd3a 	bl	800ef20 <_Balloc>
 800f4ac:	b920      	cbnz	r0, 800f4b8 <__mdiff+0x5c>
 800f4ae:	4b2e      	ldr	r3, [pc, #184]	; (800f568 <__mdiff+0x10c>)
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f4b6:	e7e5      	b.n	800f484 <__mdiff+0x28>
 800f4b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f4bc:	6926      	ldr	r6, [r4, #16]
 800f4be:	60c5      	str	r5, [r0, #12]
 800f4c0:	f104 0914 	add.w	r9, r4, #20
 800f4c4:	f108 0514 	add.w	r5, r8, #20
 800f4c8:	f100 0e14 	add.w	lr, r0, #20
 800f4cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f4d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f4d4:	f108 0210 	add.w	r2, r8, #16
 800f4d8:	46f2      	mov	sl, lr
 800f4da:	2100      	movs	r1, #0
 800f4dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f4e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f4e4:	fa1f f883 	uxth.w	r8, r3
 800f4e8:	fa11 f18b 	uxtah	r1, r1, fp
 800f4ec:	0c1b      	lsrs	r3, r3, #16
 800f4ee:	eba1 0808 	sub.w	r8, r1, r8
 800f4f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f4f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f4fa:	fa1f f888 	uxth.w	r8, r8
 800f4fe:	1419      	asrs	r1, r3, #16
 800f500:	454e      	cmp	r6, r9
 800f502:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f506:	f84a 3b04 	str.w	r3, [sl], #4
 800f50a:	d8e7      	bhi.n	800f4dc <__mdiff+0x80>
 800f50c:	1b33      	subs	r3, r6, r4
 800f50e:	3b15      	subs	r3, #21
 800f510:	f023 0303 	bic.w	r3, r3, #3
 800f514:	3304      	adds	r3, #4
 800f516:	3415      	adds	r4, #21
 800f518:	42a6      	cmp	r6, r4
 800f51a:	bf38      	it	cc
 800f51c:	2304      	movcc	r3, #4
 800f51e:	441d      	add	r5, r3
 800f520:	4473      	add	r3, lr
 800f522:	469e      	mov	lr, r3
 800f524:	462e      	mov	r6, r5
 800f526:	4566      	cmp	r6, ip
 800f528:	d30e      	bcc.n	800f548 <__mdiff+0xec>
 800f52a:	f10c 0203 	add.w	r2, ip, #3
 800f52e:	1b52      	subs	r2, r2, r5
 800f530:	f022 0203 	bic.w	r2, r2, #3
 800f534:	3d03      	subs	r5, #3
 800f536:	45ac      	cmp	ip, r5
 800f538:	bf38      	it	cc
 800f53a:	2200      	movcc	r2, #0
 800f53c:	441a      	add	r2, r3
 800f53e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f542:	b17b      	cbz	r3, 800f564 <__mdiff+0x108>
 800f544:	6107      	str	r7, [r0, #16]
 800f546:	e7a3      	b.n	800f490 <__mdiff+0x34>
 800f548:	f856 8b04 	ldr.w	r8, [r6], #4
 800f54c:	fa11 f288 	uxtah	r2, r1, r8
 800f550:	1414      	asrs	r4, r2, #16
 800f552:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f556:	b292      	uxth	r2, r2
 800f558:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f55c:	f84e 2b04 	str.w	r2, [lr], #4
 800f560:	1421      	asrs	r1, r4, #16
 800f562:	e7e0      	b.n	800f526 <__mdiff+0xca>
 800f564:	3f01      	subs	r7, #1
 800f566:	e7ea      	b.n	800f53e <__mdiff+0xe2>
 800f568:	0800ff4b 	.word	0x0800ff4b
 800f56c:	0800ffbc 	.word	0x0800ffbc

0800f570 <__d2b>:
 800f570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f574:	4689      	mov	r9, r1
 800f576:	2101      	movs	r1, #1
 800f578:	ec57 6b10 	vmov	r6, r7, d0
 800f57c:	4690      	mov	r8, r2
 800f57e:	f7ff fccf 	bl	800ef20 <_Balloc>
 800f582:	4604      	mov	r4, r0
 800f584:	b930      	cbnz	r0, 800f594 <__d2b+0x24>
 800f586:	4602      	mov	r2, r0
 800f588:	4b25      	ldr	r3, [pc, #148]	; (800f620 <__d2b+0xb0>)
 800f58a:	4826      	ldr	r0, [pc, #152]	; (800f624 <__d2b+0xb4>)
 800f58c:	f240 310a 	movw	r1, #778	; 0x30a
 800f590:	f000 fb00 	bl	800fb94 <__assert_func>
 800f594:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f59c:	bb35      	cbnz	r5, 800f5ec <__d2b+0x7c>
 800f59e:	2e00      	cmp	r6, #0
 800f5a0:	9301      	str	r3, [sp, #4]
 800f5a2:	d028      	beq.n	800f5f6 <__d2b+0x86>
 800f5a4:	4668      	mov	r0, sp
 800f5a6:	9600      	str	r6, [sp, #0]
 800f5a8:	f7ff fd82 	bl	800f0b0 <__lo0bits>
 800f5ac:	9900      	ldr	r1, [sp, #0]
 800f5ae:	b300      	cbz	r0, 800f5f2 <__d2b+0x82>
 800f5b0:	9a01      	ldr	r2, [sp, #4]
 800f5b2:	f1c0 0320 	rsb	r3, r0, #32
 800f5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f5ba:	430b      	orrs	r3, r1
 800f5bc:	40c2      	lsrs	r2, r0
 800f5be:	6163      	str	r3, [r4, #20]
 800f5c0:	9201      	str	r2, [sp, #4]
 800f5c2:	9b01      	ldr	r3, [sp, #4]
 800f5c4:	61a3      	str	r3, [r4, #24]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	bf14      	ite	ne
 800f5ca:	2202      	movne	r2, #2
 800f5cc:	2201      	moveq	r2, #1
 800f5ce:	6122      	str	r2, [r4, #16]
 800f5d0:	b1d5      	cbz	r5, 800f608 <__d2b+0x98>
 800f5d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f5d6:	4405      	add	r5, r0
 800f5d8:	f8c9 5000 	str.w	r5, [r9]
 800f5dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f5e0:	f8c8 0000 	str.w	r0, [r8]
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	b003      	add	sp, #12
 800f5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f5f0:	e7d5      	b.n	800f59e <__d2b+0x2e>
 800f5f2:	6161      	str	r1, [r4, #20]
 800f5f4:	e7e5      	b.n	800f5c2 <__d2b+0x52>
 800f5f6:	a801      	add	r0, sp, #4
 800f5f8:	f7ff fd5a 	bl	800f0b0 <__lo0bits>
 800f5fc:	9b01      	ldr	r3, [sp, #4]
 800f5fe:	6163      	str	r3, [r4, #20]
 800f600:	2201      	movs	r2, #1
 800f602:	6122      	str	r2, [r4, #16]
 800f604:	3020      	adds	r0, #32
 800f606:	e7e3      	b.n	800f5d0 <__d2b+0x60>
 800f608:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f60c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f610:	f8c9 0000 	str.w	r0, [r9]
 800f614:	6918      	ldr	r0, [r3, #16]
 800f616:	f7ff fd2b 	bl	800f070 <__hi0bits>
 800f61a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f61e:	e7df      	b.n	800f5e0 <__d2b+0x70>
 800f620:	0800ff4b 	.word	0x0800ff4b
 800f624:	0800ffbc 	.word	0x0800ffbc

0800f628 <_calloc_r>:
 800f628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f62a:	fba1 2402 	umull	r2, r4, r1, r2
 800f62e:	b94c      	cbnz	r4, 800f644 <_calloc_r+0x1c>
 800f630:	4611      	mov	r1, r2
 800f632:	9201      	str	r2, [sp, #4]
 800f634:	f000 f87a 	bl	800f72c <_malloc_r>
 800f638:	9a01      	ldr	r2, [sp, #4]
 800f63a:	4605      	mov	r5, r0
 800f63c:	b930      	cbnz	r0, 800f64c <_calloc_r+0x24>
 800f63e:	4628      	mov	r0, r5
 800f640:	b003      	add	sp, #12
 800f642:	bd30      	pop	{r4, r5, pc}
 800f644:	220c      	movs	r2, #12
 800f646:	6002      	str	r2, [r0, #0]
 800f648:	2500      	movs	r5, #0
 800f64a:	e7f8      	b.n	800f63e <_calloc_r+0x16>
 800f64c:	4621      	mov	r1, r4
 800f64e:	f7fd fd25 	bl	800d09c <memset>
 800f652:	e7f4      	b.n	800f63e <_calloc_r+0x16>

0800f654 <_free_r>:
 800f654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f656:	2900      	cmp	r1, #0
 800f658:	d044      	beq.n	800f6e4 <_free_r+0x90>
 800f65a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f65e:	9001      	str	r0, [sp, #4]
 800f660:	2b00      	cmp	r3, #0
 800f662:	f1a1 0404 	sub.w	r4, r1, #4
 800f666:	bfb8      	it	lt
 800f668:	18e4      	addlt	r4, r4, r3
 800f66a:	f000 fb19 	bl	800fca0 <__malloc_lock>
 800f66e:	4a1e      	ldr	r2, [pc, #120]	; (800f6e8 <_free_r+0x94>)
 800f670:	9801      	ldr	r0, [sp, #4]
 800f672:	6813      	ldr	r3, [r2, #0]
 800f674:	b933      	cbnz	r3, 800f684 <_free_r+0x30>
 800f676:	6063      	str	r3, [r4, #4]
 800f678:	6014      	str	r4, [r2, #0]
 800f67a:	b003      	add	sp, #12
 800f67c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f680:	f000 bb14 	b.w	800fcac <__malloc_unlock>
 800f684:	42a3      	cmp	r3, r4
 800f686:	d908      	bls.n	800f69a <_free_r+0x46>
 800f688:	6825      	ldr	r5, [r4, #0]
 800f68a:	1961      	adds	r1, r4, r5
 800f68c:	428b      	cmp	r3, r1
 800f68e:	bf01      	itttt	eq
 800f690:	6819      	ldreq	r1, [r3, #0]
 800f692:	685b      	ldreq	r3, [r3, #4]
 800f694:	1949      	addeq	r1, r1, r5
 800f696:	6021      	streq	r1, [r4, #0]
 800f698:	e7ed      	b.n	800f676 <_free_r+0x22>
 800f69a:	461a      	mov	r2, r3
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	b10b      	cbz	r3, 800f6a4 <_free_r+0x50>
 800f6a0:	42a3      	cmp	r3, r4
 800f6a2:	d9fa      	bls.n	800f69a <_free_r+0x46>
 800f6a4:	6811      	ldr	r1, [r2, #0]
 800f6a6:	1855      	adds	r5, r2, r1
 800f6a8:	42a5      	cmp	r5, r4
 800f6aa:	d10b      	bne.n	800f6c4 <_free_r+0x70>
 800f6ac:	6824      	ldr	r4, [r4, #0]
 800f6ae:	4421      	add	r1, r4
 800f6b0:	1854      	adds	r4, r2, r1
 800f6b2:	42a3      	cmp	r3, r4
 800f6b4:	6011      	str	r1, [r2, #0]
 800f6b6:	d1e0      	bne.n	800f67a <_free_r+0x26>
 800f6b8:	681c      	ldr	r4, [r3, #0]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	6053      	str	r3, [r2, #4]
 800f6be:	4421      	add	r1, r4
 800f6c0:	6011      	str	r1, [r2, #0]
 800f6c2:	e7da      	b.n	800f67a <_free_r+0x26>
 800f6c4:	d902      	bls.n	800f6cc <_free_r+0x78>
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	6003      	str	r3, [r0, #0]
 800f6ca:	e7d6      	b.n	800f67a <_free_r+0x26>
 800f6cc:	6825      	ldr	r5, [r4, #0]
 800f6ce:	1961      	adds	r1, r4, r5
 800f6d0:	428b      	cmp	r3, r1
 800f6d2:	bf04      	itt	eq
 800f6d4:	6819      	ldreq	r1, [r3, #0]
 800f6d6:	685b      	ldreq	r3, [r3, #4]
 800f6d8:	6063      	str	r3, [r4, #4]
 800f6da:	bf04      	itt	eq
 800f6dc:	1949      	addeq	r1, r1, r5
 800f6de:	6021      	streq	r1, [r4, #0]
 800f6e0:	6054      	str	r4, [r2, #4]
 800f6e2:	e7ca      	b.n	800f67a <_free_r+0x26>
 800f6e4:	b003      	add	sp, #12
 800f6e6:	bd30      	pop	{r4, r5, pc}
 800f6e8:	20000b0c 	.word	0x20000b0c

0800f6ec <sbrk_aligned>:
 800f6ec:	b570      	push	{r4, r5, r6, lr}
 800f6ee:	4e0e      	ldr	r6, [pc, #56]	; (800f728 <sbrk_aligned+0x3c>)
 800f6f0:	460c      	mov	r4, r1
 800f6f2:	6831      	ldr	r1, [r6, #0]
 800f6f4:	4605      	mov	r5, r0
 800f6f6:	b911      	cbnz	r1, 800f6fe <sbrk_aligned+0x12>
 800f6f8:	f000 f9e6 	bl	800fac8 <_sbrk_r>
 800f6fc:	6030      	str	r0, [r6, #0]
 800f6fe:	4621      	mov	r1, r4
 800f700:	4628      	mov	r0, r5
 800f702:	f000 f9e1 	bl	800fac8 <_sbrk_r>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	d00a      	beq.n	800f720 <sbrk_aligned+0x34>
 800f70a:	1cc4      	adds	r4, r0, #3
 800f70c:	f024 0403 	bic.w	r4, r4, #3
 800f710:	42a0      	cmp	r0, r4
 800f712:	d007      	beq.n	800f724 <sbrk_aligned+0x38>
 800f714:	1a21      	subs	r1, r4, r0
 800f716:	4628      	mov	r0, r5
 800f718:	f000 f9d6 	bl	800fac8 <_sbrk_r>
 800f71c:	3001      	adds	r0, #1
 800f71e:	d101      	bne.n	800f724 <sbrk_aligned+0x38>
 800f720:	f04f 34ff 	mov.w	r4, #4294967295
 800f724:	4620      	mov	r0, r4
 800f726:	bd70      	pop	{r4, r5, r6, pc}
 800f728:	20000b10 	.word	0x20000b10

0800f72c <_malloc_r>:
 800f72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f730:	1ccd      	adds	r5, r1, #3
 800f732:	f025 0503 	bic.w	r5, r5, #3
 800f736:	3508      	adds	r5, #8
 800f738:	2d0c      	cmp	r5, #12
 800f73a:	bf38      	it	cc
 800f73c:	250c      	movcc	r5, #12
 800f73e:	2d00      	cmp	r5, #0
 800f740:	4607      	mov	r7, r0
 800f742:	db01      	blt.n	800f748 <_malloc_r+0x1c>
 800f744:	42a9      	cmp	r1, r5
 800f746:	d905      	bls.n	800f754 <_malloc_r+0x28>
 800f748:	230c      	movs	r3, #12
 800f74a:	603b      	str	r3, [r7, #0]
 800f74c:	2600      	movs	r6, #0
 800f74e:	4630      	mov	r0, r6
 800f750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f754:	4e2e      	ldr	r6, [pc, #184]	; (800f810 <_malloc_r+0xe4>)
 800f756:	f000 faa3 	bl	800fca0 <__malloc_lock>
 800f75a:	6833      	ldr	r3, [r6, #0]
 800f75c:	461c      	mov	r4, r3
 800f75e:	bb34      	cbnz	r4, 800f7ae <_malloc_r+0x82>
 800f760:	4629      	mov	r1, r5
 800f762:	4638      	mov	r0, r7
 800f764:	f7ff ffc2 	bl	800f6ec <sbrk_aligned>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	4604      	mov	r4, r0
 800f76c:	d14d      	bne.n	800f80a <_malloc_r+0xde>
 800f76e:	6834      	ldr	r4, [r6, #0]
 800f770:	4626      	mov	r6, r4
 800f772:	2e00      	cmp	r6, #0
 800f774:	d140      	bne.n	800f7f8 <_malloc_r+0xcc>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	4631      	mov	r1, r6
 800f77a:	4638      	mov	r0, r7
 800f77c:	eb04 0803 	add.w	r8, r4, r3
 800f780:	f000 f9a2 	bl	800fac8 <_sbrk_r>
 800f784:	4580      	cmp	r8, r0
 800f786:	d13a      	bne.n	800f7fe <_malloc_r+0xd2>
 800f788:	6821      	ldr	r1, [r4, #0]
 800f78a:	3503      	adds	r5, #3
 800f78c:	1a6d      	subs	r5, r5, r1
 800f78e:	f025 0503 	bic.w	r5, r5, #3
 800f792:	3508      	adds	r5, #8
 800f794:	2d0c      	cmp	r5, #12
 800f796:	bf38      	it	cc
 800f798:	250c      	movcc	r5, #12
 800f79a:	4629      	mov	r1, r5
 800f79c:	4638      	mov	r0, r7
 800f79e:	f7ff ffa5 	bl	800f6ec <sbrk_aligned>
 800f7a2:	3001      	adds	r0, #1
 800f7a4:	d02b      	beq.n	800f7fe <_malloc_r+0xd2>
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	442b      	add	r3, r5
 800f7aa:	6023      	str	r3, [r4, #0]
 800f7ac:	e00e      	b.n	800f7cc <_malloc_r+0xa0>
 800f7ae:	6822      	ldr	r2, [r4, #0]
 800f7b0:	1b52      	subs	r2, r2, r5
 800f7b2:	d41e      	bmi.n	800f7f2 <_malloc_r+0xc6>
 800f7b4:	2a0b      	cmp	r2, #11
 800f7b6:	d916      	bls.n	800f7e6 <_malloc_r+0xba>
 800f7b8:	1961      	adds	r1, r4, r5
 800f7ba:	42a3      	cmp	r3, r4
 800f7bc:	6025      	str	r5, [r4, #0]
 800f7be:	bf18      	it	ne
 800f7c0:	6059      	strne	r1, [r3, #4]
 800f7c2:	6863      	ldr	r3, [r4, #4]
 800f7c4:	bf08      	it	eq
 800f7c6:	6031      	streq	r1, [r6, #0]
 800f7c8:	5162      	str	r2, [r4, r5]
 800f7ca:	604b      	str	r3, [r1, #4]
 800f7cc:	4638      	mov	r0, r7
 800f7ce:	f104 060b 	add.w	r6, r4, #11
 800f7d2:	f000 fa6b 	bl	800fcac <__malloc_unlock>
 800f7d6:	f026 0607 	bic.w	r6, r6, #7
 800f7da:	1d23      	adds	r3, r4, #4
 800f7dc:	1af2      	subs	r2, r6, r3
 800f7de:	d0b6      	beq.n	800f74e <_malloc_r+0x22>
 800f7e0:	1b9b      	subs	r3, r3, r6
 800f7e2:	50a3      	str	r3, [r4, r2]
 800f7e4:	e7b3      	b.n	800f74e <_malloc_r+0x22>
 800f7e6:	6862      	ldr	r2, [r4, #4]
 800f7e8:	42a3      	cmp	r3, r4
 800f7ea:	bf0c      	ite	eq
 800f7ec:	6032      	streq	r2, [r6, #0]
 800f7ee:	605a      	strne	r2, [r3, #4]
 800f7f0:	e7ec      	b.n	800f7cc <_malloc_r+0xa0>
 800f7f2:	4623      	mov	r3, r4
 800f7f4:	6864      	ldr	r4, [r4, #4]
 800f7f6:	e7b2      	b.n	800f75e <_malloc_r+0x32>
 800f7f8:	4634      	mov	r4, r6
 800f7fa:	6876      	ldr	r6, [r6, #4]
 800f7fc:	e7b9      	b.n	800f772 <_malloc_r+0x46>
 800f7fe:	230c      	movs	r3, #12
 800f800:	603b      	str	r3, [r7, #0]
 800f802:	4638      	mov	r0, r7
 800f804:	f000 fa52 	bl	800fcac <__malloc_unlock>
 800f808:	e7a1      	b.n	800f74e <_malloc_r+0x22>
 800f80a:	6025      	str	r5, [r4, #0]
 800f80c:	e7de      	b.n	800f7cc <_malloc_r+0xa0>
 800f80e:	bf00      	nop
 800f810:	20000b0c 	.word	0x20000b0c

0800f814 <__sfputc_r>:
 800f814:	6893      	ldr	r3, [r2, #8]
 800f816:	3b01      	subs	r3, #1
 800f818:	2b00      	cmp	r3, #0
 800f81a:	b410      	push	{r4}
 800f81c:	6093      	str	r3, [r2, #8]
 800f81e:	da08      	bge.n	800f832 <__sfputc_r+0x1e>
 800f820:	6994      	ldr	r4, [r2, #24]
 800f822:	42a3      	cmp	r3, r4
 800f824:	db01      	blt.n	800f82a <__sfputc_r+0x16>
 800f826:	290a      	cmp	r1, #10
 800f828:	d103      	bne.n	800f832 <__sfputc_r+0x1e>
 800f82a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f82e:	f7fe ba03 	b.w	800dc38 <__swbuf_r>
 800f832:	6813      	ldr	r3, [r2, #0]
 800f834:	1c58      	adds	r0, r3, #1
 800f836:	6010      	str	r0, [r2, #0]
 800f838:	7019      	strb	r1, [r3, #0]
 800f83a:	4608      	mov	r0, r1
 800f83c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <__sfputs_r>:
 800f842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f844:	4606      	mov	r6, r0
 800f846:	460f      	mov	r7, r1
 800f848:	4614      	mov	r4, r2
 800f84a:	18d5      	adds	r5, r2, r3
 800f84c:	42ac      	cmp	r4, r5
 800f84e:	d101      	bne.n	800f854 <__sfputs_r+0x12>
 800f850:	2000      	movs	r0, #0
 800f852:	e007      	b.n	800f864 <__sfputs_r+0x22>
 800f854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f858:	463a      	mov	r2, r7
 800f85a:	4630      	mov	r0, r6
 800f85c:	f7ff ffda 	bl	800f814 <__sfputc_r>
 800f860:	1c43      	adds	r3, r0, #1
 800f862:	d1f3      	bne.n	800f84c <__sfputs_r+0xa>
 800f864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f868 <_vfiprintf_r>:
 800f868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	460d      	mov	r5, r1
 800f86e:	b09d      	sub	sp, #116	; 0x74
 800f870:	4614      	mov	r4, r2
 800f872:	4698      	mov	r8, r3
 800f874:	4606      	mov	r6, r0
 800f876:	b118      	cbz	r0, 800f880 <_vfiprintf_r+0x18>
 800f878:	6983      	ldr	r3, [r0, #24]
 800f87a:	b90b      	cbnz	r3, 800f880 <_vfiprintf_r+0x18>
 800f87c:	f7ff fa30 	bl	800ece0 <__sinit>
 800f880:	4b89      	ldr	r3, [pc, #548]	; (800faa8 <_vfiprintf_r+0x240>)
 800f882:	429d      	cmp	r5, r3
 800f884:	d11b      	bne.n	800f8be <_vfiprintf_r+0x56>
 800f886:	6875      	ldr	r5, [r6, #4]
 800f888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f88a:	07d9      	lsls	r1, r3, #31
 800f88c:	d405      	bmi.n	800f89a <_vfiprintf_r+0x32>
 800f88e:	89ab      	ldrh	r3, [r5, #12]
 800f890:	059a      	lsls	r2, r3, #22
 800f892:	d402      	bmi.n	800f89a <_vfiprintf_r+0x32>
 800f894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f896:	f7ff fac6 	bl	800ee26 <__retarget_lock_acquire_recursive>
 800f89a:	89ab      	ldrh	r3, [r5, #12]
 800f89c:	071b      	lsls	r3, r3, #28
 800f89e:	d501      	bpl.n	800f8a4 <_vfiprintf_r+0x3c>
 800f8a0:	692b      	ldr	r3, [r5, #16]
 800f8a2:	b9eb      	cbnz	r3, 800f8e0 <_vfiprintf_r+0x78>
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f7fe fa18 	bl	800dcdc <__swsetup_r>
 800f8ac:	b1c0      	cbz	r0, 800f8e0 <_vfiprintf_r+0x78>
 800f8ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8b0:	07dc      	lsls	r4, r3, #31
 800f8b2:	d50e      	bpl.n	800f8d2 <_vfiprintf_r+0x6a>
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b8:	b01d      	add	sp, #116	; 0x74
 800f8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8be:	4b7b      	ldr	r3, [pc, #492]	; (800faac <_vfiprintf_r+0x244>)
 800f8c0:	429d      	cmp	r5, r3
 800f8c2:	d101      	bne.n	800f8c8 <_vfiprintf_r+0x60>
 800f8c4:	68b5      	ldr	r5, [r6, #8]
 800f8c6:	e7df      	b.n	800f888 <_vfiprintf_r+0x20>
 800f8c8:	4b79      	ldr	r3, [pc, #484]	; (800fab0 <_vfiprintf_r+0x248>)
 800f8ca:	429d      	cmp	r5, r3
 800f8cc:	bf08      	it	eq
 800f8ce:	68f5      	ldreq	r5, [r6, #12]
 800f8d0:	e7da      	b.n	800f888 <_vfiprintf_r+0x20>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	0598      	lsls	r0, r3, #22
 800f8d6:	d4ed      	bmi.n	800f8b4 <_vfiprintf_r+0x4c>
 800f8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8da:	f7ff faa5 	bl	800ee28 <__retarget_lock_release_recursive>
 800f8de:	e7e9      	b.n	800f8b4 <_vfiprintf_r+0x4c>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f8e4:	2320      	movs	r3, #32
 800f8e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8ee:	2330      	movs	r3, #48	; 0x30
 800f8f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fab4 <_vfiprintf_r+0x24c>
 800f8f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8f8:	f04f 0901 	mov.w	r9, #1
 800f8fc:	4623      	mov	r3, r4
 800f8fe:	469a      	mov	sl, r3
 800f900:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f904:	b10a      	cbz	r2, 800f90a <_vfiprintf_r+0xa2>
 800f906:	2a25      	cmp	r2, #37	; 0x25
 800f908:	d1f9      	bne.n	800f8fe <_vfiprintf_r+0x96>
 800f90a:	ebba 0b04 	subs.w	fp, sl, r4
 800f90e:	d00b      	beq.n	800f928 <_vfiprintf_r+0xc0>
 800f910:	465b      	mov	r3, fp
 800f912:	4622      	mov	r2, r4
 800f914:	4629      	mov	r1, r5
 800f916:	4630      	mov	r0, r6
 800f918:	f7ff ff93 	bl	800f842 <__sfputs_r>
 800f91c:	3001      	adds	r0, #1
 800f91e:	f000 80aa 	beq.w	800fa76 <_vfiprintf_r+0x20e>
 800f922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f924:	445a      	add	r2, fp
 800f926:	9209      	str	r2, [sp, #36]	; 0x24
 800f928:	f89a 3000 	ldrb.w	r3, [sl]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 80a2 	beq.w	800fa76 <_vfiprintf_r+0x20e>
 800f932:	2300      	movs	r3, #0
 800f934:	f04f 32ff 	mov.w	r2, #4294967295
 800f938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f93c:	f10a 0a01 	add.w	sl, sl, #1
 800f940:	9304      	str	r3, [sp, #16]
 800f942:	9307      	str	r3, [sp, #28]
 800f944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f948:	931a      	str	r3, [sp, #104]	; 0x68
 800f94a:	4654      	mov	r4, sl
 800f94c:	2205      	movs	r2, #5
 800f94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f952:	4858      	ldr	r0, [pc, #352]	; (800fab4 <_vfiprintf_r+0x24c>)
 800f954:	f7f0 fc6c 	bl	8000230 <memchr>
 800f958:	9a04      	ldr	r2, [sp, #16]
 800f95a:	b9d8      	cbnz	r0, 800f994 <_vfiprintf_r+0x12c>
 800f95c:	06d1      	lsls	r1, r2, #27
 800f95e:	bf44      	itt	mi
 800f960:	2320      	movmi	r3, #32
 800f962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f966:	0713      	lsls	r3, r2, #28
 800f968:	bf44      	itt	mi
 800f96a:	232b      	movmi	r3, #43	; 0x2b
 800f96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f970:	f89a 3000 	ldrb.w	r3, [sl]
 800f974:	2b2a      	cmp	r3, #42	; 0x2a
 800f976:	d015      	beq.n	800f9a4 <_vfiprintf_r+0x13c>
 800f978:	9a07      	ldr	r2, [sp, #28]
 800f97a:	4654      	mov	r4, sl
 800f97c:	2000      	movs	r0, #0
 800f97e:	f04f 0c0a 	mov.w	ip, #10
 800f982:	4621      	mov	r1, r4
 800f984:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f988:	3b30      	subs	r3, #48	; 0x30
 800f98a:	2b09      	cmp	r3, #9
 800f98c:	d94e      	bls.n	800fa2c <_vfiprintf_r+0x1c4>
 800f98e:	b1b0      	cbz	r0, 800f9be <_vfiprintf_r+0x156>
 800f990:	9207      	str	r2, [sp, #28]
 800f992:	e014      	b.n	800f9be <_vfiprintf_r+0x156>
 800f994:	eba0 0308 	sub.w	r3, r0, r8
 800f998:	fa09 f303 	lsl.w	r3, r9, r3
 800f99c:	4313      	orrs	r3, r2
 800f99e:	9304      	str	r3, [sp, #16]
 800f9a0:	46a2      	mov	sl, r4
 800f9a2:	e7d2      	b.n	800f94a <_vfiprintf_r+0xe2>
 800f9a4:	9b03      	ldr	r3, [sp, #12]
 800f9a6:	1d19      	adds	r1, r3, #4
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	9103      	str	r1, [sp, #12]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bfbb      	ittet	lt
 800f9b0:	425b      	neglt	r3, r3
 800f9b2:	f042 0202 	orrlt.w	r2, r2, #2
 800f9b6:	9307      	strge	r3, [sp, #28]
 800f9b8:	9307      	strlt	r3, [sp, #28]
 800f9ba:	bfb8      	it	lt
 800f9bc:	9204      	strlt	r2, [sp, #16]
 800f9be:	7823      	ldrb	r3, [r4, #0]
 800f9c0:	2b2e      	cmp	r3, #46	; 0x2e
 800f9c2:	d10c      	bne.n	800f9de <_vfiprintf_r+0x176>
 800f9c4:	7863      	ldrb	r3, [r4, #1]
 800f9c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f9c8:	d135      	bne.n	800fa36 <_vfiprintf_r+0x1ce>
 800f9ca:	9b03      	ldr	r3, [sp, #12]
 800f9cc:	1d1a      	adds	r2, r3, #4
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	9203      	str	r2, [sp, #12]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	bfb8      	it	lt
 800f9d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9da:	3402      	adds	r4, #2
 800f9dc:	9305      	str	r3, [sp, #20]
 800f9de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fac4 <_vfiprintf_r+0x25c>
 800f9e2:	7821      	ldrb	r1, [r4, #0]
 800f9e4:	2203      	movs	r2, #3
 800f9e6:	4650      	mov	r0, sl
 800f9e8:	f7f0 fc22 	bl	8000230 <memchr>
 800f9ec:	b140      	cbz	r0, 800fa00 <_vfiprintf_r+0x198>
 800f9ee:	2340      	movs	r3, #64	; 0x40
 800f9f0:	eba0 000a 	sub.w	r0, r0, sl
 800f9f4:	fa03 f000 	lsl.w	r0, r3, r0
 800f9f8:	9b04      	ldr	r3, [sp, #16]
 800f9fa:	4303      	orrs	r3, r0
 800f9fc:	3401      	adds	r4, #1
 800f9fe:	9304      	str	r3, [sp, #16]
 800fa00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa04:	482c      	ldr	r0, [pc, #176]	; (800fab8 <_vfiprintf_r+0x250>)
 800fa06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa0a:	2206      	movs	r2, #6
 800fa0c:	f7f0 fc10 	bl	8000230 <memchr>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d03f      	beq.n	800fa94 <_vfiprintf_r+0x22c>
 800fa14:	4b29      	ldr	r3, [pc, #164]	; (800fabc <_vfiprintf_r+0x254>)
 800fa16:	bb1b      	cbnz	r3, 800fa60 <_vfiprintf_r+0x1f8>
 800fa18:	9b03      	ldr	r3, [sp, #12]
 800fa1a:	3307      	adds	r3, #7
 800fa1c:	f023 0307 	bic.w	r3, r3, #7
 800fa20:	3308      	adds	r3, #8
 800fa22:	9303      	str	r3, [sp, #12]
 800fa24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa26:	443b      	add	r3, r7
 800fa28:	9309      	str	r3, [sp, #36]	; 0x24
 800fa2a:	e767      	b.n	800f8fc <_vfiprintf_r+0x94>
 800fa2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa30:	460c      	mov	r4, r1
 800fa32:	2001      	movs	r0, #1
 800fa34:	e7a5      	b.n	800f982 <_vfiprintf_r+0x11a>
 800fa36:	2300      	movs	r3, #0
 800fa38:	3401      	adds	r4, #1
 800fa3a:	9305      	str	r3, [sp, #20]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	f04f 0c0a 	mov.w	ip, #10
 800fa42:	4620      	mov	r0, r4
 800fa44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa48:	3a30      	subs	r2, #48	; 0x30
 800fa4a:	2a09      	cmp	r2, #9
 800fa4c:	d903      	bls.n	800fa56 <_vfiprintf_r+0x1ee>
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d0c5      	beq.n	800f9de <_vfiprintf_r+0x176>
 800fa52:	9105      	str	r1, [sp, #20]
 800fa54:	e7c3      	b.n	800f9de <_vfiprintf_r+0x176>
 800fa56:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	e7f0      	b.n	800fa42 <_vfiprintf_r+0x1da>
 800fa60:	ab03      	add	r3, sp, #12
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	462a      	mov	r2, r5
 800fa66:	4b16      	ldr	r3, [pc, #88]	; (800fac0 <_vfiprintf_r+0x258>)
 800fa68:	a904      	add	r1, sp, #16
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	f7fd fbbe 	bl	800d1ec <_printf_float>
 800fa70:	4607      	mov	r7, r0
 800fa72:	1c78      	adds	r0, r7, #1
 800fa74:	d1d6      	bne.n	800fa24 <_vfiprintf_r+0x1bc>
 800fa76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa78:	07d9      	lsls	r1, r3, #31
 800fa7a:	d405      	bmi.n	800fa88 <_vfiprintf_r+0x220>
 800fa7c:	89ab      	ldrh	r3, [r5, #12]
 800fa7e:	059a      	lsls	r2, r3, #22
 800fa80:	d402      	bmi.n	800fa88 <_vfiprintf_r+0x220>
 800fa82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa84:	f7ff f9d0 	bl	800ee28 <__retarget_lock_release_recursive>
 800fa88:	89ab      	ldrh	r3, [r5, #12]
 800fa8a:	065b      	lsls	r3, r3, #25
 800fa8c:	f53f af12 	bmi.w	800f8b4 <_vfiprintf_r+0x4c>
 800fa90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa92:	e711      	b.n	800f8b8 <_vfiprintf_r+0x50>
 800fa94:	ab03      	add	r3, sp, #12
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	462a      	mov	r2, r5
 800fa9a:	4b09      	ldr	r3, [pc, #36]	; (800fac0 <_vfiprintf_r+0x258>)
 800fa9c:	a904      	add	r1, sp, #16
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f7fd fe48 	bl	800d734 <_printf_i>
 800faa4:	e7e4      	b.n	800fa70 <_vfiprintf_r+0x208>
 800faa6:	bf00      	nop
 800faa8:	0800ff7c 	.word	0x0800ff7c
 800faac:	0800ff9c 	.word	0x0800ff9c
 800fab0:	0800ff5c 	.word	0x0800ff5c
 800fab4:	08010114 	.word	0x08010114
 800fab8:	0801011e 	.word	0x0801011e
 800fabc:	0800d1ed 	.word	0x0800d1ed
 800fac0:	0800f843 	.word	0x0800f843
 800fac4:	0801011a 	.word	0x0801011a

0800fac8 <_sbrk_r>:
 800fac8:	b538      	push	{r3, r4, r5, lr}
 800faca:	4d06      	ldr	r5, [pc, #24]	; (800fae4 <_sbrk_r+0x1c>)
 800facc:	2300      	movs	r3, #0
 800face:	4604      	mov	r4, r0
 800fad0:	4608      	mov	r0, r1
 800fad2:	602b      	str	r3, [r5, #0]
 800fad4:	f7f5 fb5c 	bl	8005190 <_sbrk>
 800fad8:	1c43      	adds	r3, r0, #1
 800fada:	d102      	bne.n	800fae2 <_sbrk_r+0x1a>
 800fadc:	682b      	ldr	r3, [r5, #0]
 800fade:	b103      	cbz	r3, 800fae2 <_sbrk_r+0x1a>
 800fae0:	6023      	str	r3, [r4, #0]
 800fae2:	bd38      	pop	{r3, r4, r5, pc}
 800fae4:	20000b14 	.word	0x20000b14

0800fae8 <__sread>:
 800fae8:	b510      	push	{r4, lr}
 800faea:	460c      	mov	r4, r1
 800faec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faf0:	f000 f8e2 	bl	800fcb8 <_read_r>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	bfab      	itete	ge
 800faf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fafa:	89a3      	ldrhlt	r3, [r4, #12]
 800fafc:	181b      	addge	r3, r3, r0
 800fafe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb02:	bfac      	ite	ge
 800fb04:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb06:	81a3      	strhlt	r3, [r4, #12]
 800fb08:	bd10      	pop	{r4, pc}

0800fb0a <__swrite>:
 800fb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb0e:	461f      	mov	r7, r3
 800fb10:	898b      	ldrh	r3, [r1, #12]
 800fb12:	05db      	lsls	r3, r3, #23
 800fb14:	4605      	mov	r5, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	4616      	mov	r6, r2
 800fb1a:	d505      	bpl.n	800fb28 <__swrite+0x1e>
 800fb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb20:	2302      	movs	r3, #2
 800fb22:	2200      	movs	r2, #0
 800fb24:	f000 f898 	bl	800fc58 <_lseek_r>
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb32:	81a3      	strh	r3, [r4, #12]
 800fb34:	4632      	mov	r2, r6
 800fb36:	463b      	mov	r3, r7
 800fb38:	4628      	mov	r0, r5
 800fb3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb3e:	f000 b817 	b.w	800fb70 <_write_r>

0800fb42 <__sseek>:
 800fb42:	b510      	push	{r4, lr}
 800fb44:	460c      	mov	r4, r1
 800fb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4a:	f000 f885 	bl	800fc58 <_lseek_r>
 800fb4e:	1c43      	adds	r3, r0, #1
 800fb50:	89a3      	ldrh	r3, [r4, #12]
 800fb52:	bf15      	itete	ne
 800fb54:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb5e:	81a3      	strheq	r3, [r4, #12]
 800fb60:	bf18      	it	ne
 800fb62:	81a3      	strhne	r3, [r4, #12]
 800fb64:	bd10      	pop	{r4, pc}

0800fb66 <__sclose>:
 800fb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb6a:	f000 b831 	b.w	800fbd0 <_close_r>
	...

0800fb70 <_write_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	4d07      	ldr	r5, [pc, #28]	; (800fb90 <_write_r+0x20>)
 800fb74:	4604      	mov	r4, r0
 800fb76:	4608      	mov	r0, r1
 800fb78:	4611      	mov	r1, r2
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	602a      	str	r2, [r5, #0]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	f7f5 fab5 	bl	80050ee <_write>
 800fb84:	1c43      	adds	r3, r0, #1
 800fb86:	d102      	bne.n	800fb8e <_write_r+0x1e>
 800fb88:	682b      	ldr	r3, [r5, #0]
 800fb8a:	b103      	cbz	r3, 800fb8e <_write_r+0x1e>
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	bd38      	pop	{r3, r4, r5, pc}
 800fb90:	20000b14 	.word	0x20000b14

0800fb94 <__assert_func>:
 800fb94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb96:	4614      	mov	r4, r2
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4b09      	ldr	r3, [pc, #36]	; (800fbc0 <__assert_func+0x2c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4605      	mov	r5, r0
 800fba0:	68d8      	ldr	r0, [r3, #12]
 800fba2:	b14c      	cbz	r4, 800fbb8 <__assert_func+0x24>
 800fba4:	4b07      	ldr	r3, [pc, #28]	; (800fbc4 <__assert_func+0x30>)
 800fba6:	9100      	str	r1, [sp, #0]
 800fba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fbac:	4906      	ldr	r1, [pc, #24]	; (800fbc8 <__assert_func+0x34>)
 800fbae:	462b      	mov	r3, r5
 800fbb0:	f000 f81e 	bl	800fbf0 <fiprintf>
 800fbb4:	f000 f89f 	bl	800fcf6 <abort>
 800fbb8:	4b04      	ldr	r3, [pc, #16]	; (800fbcc <__assert_func+0x38>)
 800fbba:	461c      	mov	r4, r3
 800fbbc:	e7f3      	b.n	800fba6 <__assert_func+0x12>
 800fbbe:	bf00      	nop
 800fbc0:	20000014 	.word	0x20000014
 800fbc4:	08010125 	.word	0x08010125
 800fbc8:	08010132 	.word	0x08010132
 800fbcc:	08010160 	.word	0x08010160

0800fbd0 <_close_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4d06      	ldr	r5, [pc, #24]	; (800fbec <_close_r+0x1c>)
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	4608      	mov	r0, r1
 800fbda:	602b      	str	r3, [r5, #0]
 800fbdc:	f7f5 faa3 	bl	8005126 <_close>
 800fbe0:	1c43      	adds	r3, r0, #1
 800fbe2:	d102      	bne.n	800fbea <_close_r+0x1a>
 800fbe4:	682b      	ldr	r3, [r5, #0]
 800fbe6:	b103      	cbz	r3, 800fbea <_close_r+0x1a>
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	bd38      	pop	{r3, r4, r5, pc}
 800fbec:	20000b14 	.word	0x20000b14

0800fbf0 <fiprintf>:
 800fbf0:	b40e      	push	{r1, r2, r3}
 800fbf2:	b503      	push	{r0, r1, lr}
 800fbf4:	4601      	mov	r1, r0
 800fbf6:	ab03      	add	r3, sp, #12
 800fbf8:	4805      	ldr	r0, [pc, #20]	; (800fc10 <fiprintf+0x20>)
 800fbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbfe:	6800      	ldr	r0, [r0, #0]
 800fc00:	9301      	str	r3, [sp, #4]
 800fc02:	f7ff fe31 	bl	800f868 <_vfiprintf_r>
 800fc06:	b002      	add	sp, #8
 800fc08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc0c:	b003      	add	sp, #12
 800fc0e:	4770      	bx	lr
 800fc10:	20000014 	.word	0x20000014

0800fc14 <_fstat_r>:
 800fc14:	b538      	push	{r3, r4, r5, lr}
 800fc16:	4d07      	ldr	r5, [pc, #28]	; (800fc34 <_fstat_r+0x20>)
 800fc18:	2300      	movs	r3, #0
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	4608      	mov	r0, r1
 800fc1e:	4611      	mov	r1, r2
 800fc20:	602b      	str	r3, [r5, #0]
 800fc22:	f7f5 fa8c 	bl	800513e <_fstat>
 800fc26:	1c43      	adds	r3, r0, #1
 800fc28:	d102      	bne.n	800fc30 <_fstat_r+0x1c>
 800fc2a:	682b      	ldr	r3, [r5, #0]
 800fc2c:	b103      	cbz	r3, 800fc30 <_fstat_r+0x1c>
 800fc2e:	6023      	str	r3, [r4, #0]
 800fc30:	bd38      	pop	{r3, r4, r5, pc}
 800fc32:	bf00      	nop
 800fc34:	20000b14 	.word	0x20000b14

0800fc38 <_isatty_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d06      	ldr	r5, [pc, #24]	; (800fc54 <_isatty_r+0x1c>)
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4604      	mov	r4, r0
 800fc40:	4608      	mov	r0, r1
 800fc42:	602b      	str	r3, [r5, #0]
 800fc44:	f7f5 fa8b 	bl	800515e <_isatty>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d102      	bne.n	800fc52 <_isatty_r+0x1a>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	b103      	cbz	r3, 800fc52 <_isatty_r+0x1a>
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	20000b14 	.word	0x20000b14

0800fc58 <_lseek_r>:
 800fc58:	b538      	push	{r3, r4, r5, lr}
 800fc5a:	4d07      	ldr	r5, [pc, #28]	; (800fc78 <_lseek_r+0x20>)
 800fc5c:	4604      	mov	r4, r0
 800fc5e:	4608      	mov	r0, r1
 800fc60:	4611      	mov	r1, r2
 800fc62:	2200      	movs	r2, #0
 800fc64:	602a      	str	r2, [r5, #0]
 800fc66:	461a      	mov	r2, r3
 800fc68:	f7f5 fa84 	bl	8005174 <_lseek>
 800fc6c:	1c43      	adds	r3, r0, #1
 800fc6e:	d102      	bne.n	800fc76 <_lseek_r+0x1e>
 800fc70:	682b      	ldr	r3, [r5, #0]
 800fc72:	b103      	cbz	r3, 800fc76 <_lseek_r+0x1e>
 800fc74:	6023      	str	r3, [r4, #0]
 800fc76:	bd38      	pop	{r3, r4, r5, pc}
 800fc78:	20000b14 	.word	0x20000b14

0800fc7c <__ascii_mbtowc>:
 800fc7c:	b082      	sub	sp, #8
 800fc7e:	b901      	cbnz	r1, 800fc82 <__ascii_mbtowc+0x6>
 800fc80:	a901      	add	r1, sp, #4
 800fc82:	b142      	cbz	r2, 800fc96 <__ascii_mbtowc+0x1a>
 800fc84:	b14b      	cbz	r3, 800fc9a <__ascii_mbtowc+0x1e>
 800fc86:	7813      	ldrb	r3, [r2, #0]
 800fc88:	600b      	str	r3, [r1, #0]
 800fc8a:	7812      	ldrb	r2, [r2, #0]
 800fc8c:	1e10      	subs	r0, r2, #0
 800fc8e:	bf18      	it	ne
 800fc90:	2001      	movne	r0, #1
 800fc92:	b002      	add	sp, #8
 800fc94:	4770      	bx	lr
 800fc96:	4610      	mov	r0, r2
 800fc98:	e7fb      	b.n	800fc92 <__ascii_mbtowc+0x16>
 800fc9a:	f06f 0001 	mvn.w	r0, #1
 800fc9e:	e7f8      	b.n	800fc92 <__ascii_mbtowc+0x16>

0800fca0 <__malloc_lock>:
 800fca0:	4801      	ldr	r0, [pc, #4]	; (800fca8 <__malloc_lock+0x8>)
 800fca2:	f7ff b8c0 	b.w	800ee26 <__retarget_lock_acquire_recursive>
 800fca6:	bf00      	nop
 800fca8:	20000b08 	.word	0x20000b08

0800fcac <__malloc_unlock>:
 800fcac:	4801      	ldr	r0, [pc, #4]	; (800fcb4 <__malloc_unlock+0x8>)
 800fcae:	f7ff b8bb 	b.w	800ee28 <__retarget_lock_release_recursive>
 800fcb2:	bf00      	nop
 800fcb4:	20000b08 	.word	0x20000b08

0800fcb8 <_read_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	4d07      	ldr	r5, [pc, #28]	; (800fcd8 <_read_r+0x20>)
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	4608      	mov	r0, r1
 800fcc0:	4611      	mov	r1, r2
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	602a      	str	r2, [r5, #0]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	f7f5 f9f4 	bl	80050b4 <_read>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	d102      	bne.n	800fcd6 <_read_r+0x1e>
 800fcd0:	682b      	ldr	r3, [r5, #0]
 800fcd2:	b103      	cbz	r3, 800fcd6 <_read_r+0x1e>
 800fcd4:	6023      	str	r3, [r4, #0]
 800fcd6:	bd38      	pop	{r3, r4, r5, pc}
 800fcd8:	20000b14 	.word	0x20000b14

0800fcdc <__ascii_wctomb>:
 800fcdc:	b149      	cbz	r1, 800fcf2 <__ascii_wctomb+0x16>
 800fcde:	2aff      	cmp	r2, #255	; 0xff
 800fce0:	bf85      	ittet	hi
 800fce2:	238a      	movhi	r3, #138	; 0x8a
 800fce4:	6003      	strhi	r3, [r0, #0]
 800fce6:	700a      	strbls	r2, [r1, #0]
 800fce8:	f04f 30ff 	movhi.w	r0, #4294967295
 800fcec:	bf98      	it	ls
 800fcee:	2001      	movls	r0, #1
 800fcf0:	4770      	bx	lr
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4770      	bx	lr

0800fcf6 <abort>:
 800fcf6:	b508      	push	{r3, lr}
 800fcf8:	2006      	movs	r0, #6
 800fcfa:	f000 f82b 	bl	800fd54 <raise>
 800fcfe:	2001      	movs	r0, #1
 800fd00:	f7f5 f9ce 	bl	80050a0 <_exit>

0800fd04 <_raise_r>:
 800fd04:	291f      	cmp	r1, #31
 800fd06:	b538      	push	{r3, r4, r5, lr}
 800fd08:	4604      	mov	r4, r0
 800fd0a:	460d      	mov	r5, r1
 800fd0c:	d904      	bls.n	800fd18 <_raise_r+0x14>
 800fd0e:	2316      	movs	r3, #22
 800fd10:	6003      	str	r3, [r0, #0]
 800fd12:	f04f 30ff 	mov.w	r0, #4294967295
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fd1a:	b112      	cbz	r2, 800fd22 <_raise_r+0x1e>
 800fd1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd20:	b94b      	cbnz	r3, 800fd36 <_raise_r+0x32>
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 f830 	bl	800fd88 <_getpid_r>
 800fd28:	462a      	mov	r2, r5
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd32:	f000 b817 	b.w	800fd64 <_kill_r>
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d00a      	beq.n	800fd50 <_raise_r+0x4c>
 800fd3a:	1c59      	adds	r1, r3, #1
 800fd3c:	d103      	bne.n	800fd46 <_raise_r+0x42>
 800fd3e:	2316      	movs	r3, #22
 800fd40:	6003      	str	r3, [r0, #0]
 800fd42:	2001      	movs	r0, #1
 800fd44:	e7e7      	b.n	800fd16 <_raise_r+0x12>
 800fd46:	2400      	movs	r4, #0
 800fd48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	4798      	blx	r3
 800fd50:	2000      	movs	r0, #0
 800fd52:	e7e0      	b.n	800fd16 <_raise_r+0x12>

0800fd54 <raise>:
 800fd54:	4b02      	ldr	r3, [pc, #8]	; (800fd60 <raise+0xc>)
 800fd56:	4601      	mov	r1, r0
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	f7ff bfd3 	b.w	800fd04 <_raise_r>
 800fd5e:	bf00      	nop
 800fd60:	20000014 	.word	0x20000014

0800fd64 <_kill_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	4d07      	ldr	r5, [pc, #28]	; (800fd84 <_kill_r+0x20>)
 800fd68:	2300      	movs	r3, #0
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	4608      	mov	r0, r1
 800fd6e:	4611      	mov	r1, r2
 800fd70:	602b      	str	r3, [r5, #0]
 800fd72:	f7f5 f985 	bl	8005080 <_kill>
 800fd76:	1c43      	adds	r3, r0, #1
 800fd78:	d102      	bne.n	800fd80 <_kill_r+0x1c>
 800fd7a:	682b      	ldr	r3, [r5, #0]
 800fd7c:	b103      	cbz	r3, 800fd80 <_kill_r+0x1c>
 800fd7e:	6023      	str	r3, [r4, #0]
 800fd80:	bd38      	pop	{r3, r4, r5, pc}
 800fd82:	bf00      	nop
 800fd84:	20000b14 	.word	0x20000b14

0800fd88 <_getpid_r>:
 800fd88:	f7f5 b972 	b.w	8005070 <_getpid>

0800fd8c <_init>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	bf00      	nop
 800fd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd92:	bc08      	pop	{r3}
 800fd94:	469e      	mov	lr, r3
 800fd96:	4770      	bx	lr

0800fd98 <_fini>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	bf00      	nop
 800fd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd9e:	bc08      	pop	{r3}
 800fda0:	469e      	mov	lr, r3
 800fda2:	4770      	bx	lr
