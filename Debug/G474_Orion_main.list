
G474_Orion_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c834  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800ca18  0800ca18  0001ca18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf64  0800cf64  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf6c  0800cf6c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf70  0800cf70  0001cf70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cf74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  200001e8  0800d158  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  0800d158  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039b9c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ea6  00000000  00000000  00059db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000254ad  00000000  00000000  0005fc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  00085108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004f98  00000000  00000000  000868a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d574  00000000  00000000  0008b838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003661a  00000000  00000000  000b8dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011de94  00000000  00000000  000ef3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020d25a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ff8  00000000  00000000  0020d2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c9fc 	.word	0x0800c9fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800c9fc 	.word	0x0800c9fc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <actuator_motor1>:
 *  Created on: Sep 4, 2019
 *      Author: okada_tech
 */
#include "actuator.h"

void actuator_motor1(float m1,float duty_Limit1){
 8000fdc:	b500      	push	{lr}
 8000fde:	ed2d 8b02 	vpush	{d8}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m1);
 8000fe8:	4668      	mov	r0, sp
 8000fea:	f004 fb01 	bl	80055f0 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit1);
 8000fee:	eeb0 0a48 	vmov.f32	s0, s16
 8000ff2:	a801      	add	r0, sp, #4
 8000ff4:	f004 fafc 	bl	80055f0 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8000ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x100, senddata_motor);
 8000ffc:	a902      	add	r1, sp, #8
 8000ffe:	f44f 7080 	mov.w	r0, #256	; 0x100
	senddata_motor[4]=senddata_motor_Duty[0];
 8001002:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x100, senddata_motor);
 8001006:	f000 fae1 	bl	80015cc <can1_send>
}
 800100a:	b005      	add	sp, #20
 800100c:	ecbd 8b02 	vpop	{d8}
 8001010:	f85d fb04 	ldr.w	pc, [sp], #4

08001014 <actuator_motor2>:

void actuator_motor2(float m2,float duty_Limit2){
 8001014:	b500      	push	{lr}
 8001016:	ed2d 8b02 	vpush	{d8}
 800101a:	b085      	sub	sp, #20
 800101c:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m2);
 8001020:	4668      	mov	r0, sp
 8001022:	f004 fae5 	bl	80055f0 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit2);
 8001026:	eeb0 0a48 	vmov.f32	s0, s16
 800102a:	a801      	add	r0, sp, #4
 800102c:	f004 fae0 	bl	80055f0 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001030:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x101, senddata_motor);
 8001034:	a902      	add	r1, sp, #8
 8001036:	f240 1001 	movw	r0, #257	; 0x101
	senddata_motor[4]=senddata_motor_Duty[0];
 800103a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x101, senddata_motor);
 800103e:	f000 fac5 	bl	80015cc <can1_send>
}
 8001042:	b005      	add	sp, #20
 8001044:	ecbd 8b02 	vpop	{d8}
 8001048:	f85d fb04 	ldr.w	pc, [sp], #4

0800104c <actuator_motor3>:

void actuator_motor3(float m3,float duty_Limit3){
 800104c:	b500      	push	{lr}
 800104e:	ed2d 8b02 	vpush	{d8}
 8001052:	b085      	sub	sp, #20
 8001054:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m3);
 8001058:	4668      	mov	r0, sp
 800105a:	f004 fac9 	bl	80055f0 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit3);
 800105e:	eeb0 0a48 	vmov.f32	s0, s16
 8001062:	a801      	add	r0, sp, #4
 8001064:	f004 fac4 	bl	80055f0 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 8001068:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can2_send(0x102, senddata_motor);
 800106c:	a902      	add	r1, sp, #8
 800106e:	f44f 7081 	mov.w	r0, #258	; 0x102
	senddata_motor[4]=senddata_motor_Duty[0];
 8001072:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can2_send(0x102, senddata_motor);
 8001076:	f000 faf5 	bl	8001664 <can2_send>
}
 800107a:	b005      	add	sp, #20
 800107c:	ecbd 8b02 	vpop	{d8}
 8001080:	f85d fb04 	ldr.w	pc, [sp], #4

08001084 <actuator_motor4>:

void actuator_motor4(float m4,float duty_Limit4){
 8001084:	b500      	push	{lr}
 8001086:	ed2d 8b02 	vpush	{d8}
 800108a:	b085      	sub	sp, #20
 800108c:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m4);
 8001090:	4668      	mov	r0, sp
 8001092:	f004 faad 	bl	80055f0 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit4);
 8001096:	eeb0 0a48 	vmov.f32	s0, s16
 800109a:	a801      	add	r0, sp, #4
 800109c:	f004 faa8 	bl	80055f0 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 80010a0:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can2_send(0x103, senddata_motor);
 80010a4:	a902      	add	r1, sp, #8
 80010a6:	f240 1003 	movw	r0, #259	; 0x103
	senddata_motor[4]=senddata_motor_Duty[0];
 80010aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can2_send(0x103, senddata_motor);
 80010ae:	f000 fad9 	bl	8001664 <can2_send>
}
 80010b2:	b005      	add	sp, #20
 80010b4:	ecbd 8b02 	vpop	{d8}
 80010b8:	f85d fb04 	ldr.w	pc, [sp], #4

080010bc <actuator_motor5>:

void actuator_motor5(float m5,float duty_Limit5){
 80010bc:	b500      	push	{lr}
 80010be:	ed2d 8b02 	vpush	{d8}
 80010c2:	b085      	sub	sp, #20
 80010c4:	eeb0 8a60 	vmov.f32	s16, s1
	uint8_t senddata_motor[8];
	uint8_t senddata_motor_power[4];
	uint8_t senddata_motor_Duty[4];
	float_to_uchar4(senddata_motor_power,m5);
 80010c8:	4668      	mov	r0, sp
 80010ca:	f004 fa91 	bl	80055f0 <float_to_uchar4>
	float_to_uchar4(senddata_motor_Duty,duty_Limit5);
 80010ce:	eeb0 0a48 	vmov.f32	s0, s16
 80010d2:	a801      	add	r0, sp, #4
 80010d4:	f004 fa8c 	bl	80055f0 <float_to_uchar4>
	senddata_motor[0]=senddata_motor_power[0];
	senddata_motor[1]=senddata_motor_power[1];
	senddata_motor[2]=senddata_motor_power[2];
	senddata_motor[3]=senddata_motor_power[3];
	senddata_motor[4]=senddata_motor_Duty[0];
 80010d8:	e9dd 2300 	ldrd	r2, r3, [sp]
	senddata_motor[5]=senddata_motor_Duty[1];
	senddata_motor[6]=senddata_motor_Duty[2];
	senddata_motor[7]=senddata_motor_Duty[3];

	can1_send(0x104, senddata_motor);
 80010dc:	a902      	add	r1, sp, #8
 80010de:	f44f 7082 	mov.w	r0, #260	; 0x104
	senddata_motor[4]=senddata_motor_Duty[0];
 80010e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	can1_send(0x104, senddata_motor);
 80010e6:	f000 fa71 	bl	80015cc <can1_send>
}
 80010ea:	b005      	add	sp, #20
 80010ec:	ecbd 8b02 	vpop	{d8}
 80010f0:	f85d fb04 	ldr.w	pc, [sp], #4

080010f4 <actuator_kicker_voltage>:



void actuator_kicker_voltage(float voltage){
 80010f4:	b500      	push	{lr}
 80010f6:	b085      	sub	sp, #20
	uint8_t senddata_kick[8];
	uint8_t senddata_voltage[4];
	float_to_uchar4(senddata_voltage,voltage);
 80010f8:	a801      	add	r0, sp, #4
 80010fa:	f004 fa79 	bl	80055f0 <float_to_uchar4>

	senddata_kick[0]=0;
	senddata_kick[1]=senddata_voltage[0];
	senddata_kick[2]=senddata_voltage[1];
 80010fe:	f89d 0005 	ldrb.w	r0, [sp, #5]
	senddata_kick[1]=senddata_voltage[0];
 8001102:	f89d c004 	ldrb.w	ip, [sp, #4]
	senddata_kick[3]=senddata_voltage[2];
 8001106:	f89d 2006 	ldrb.w	r2, [sp, #6]
	senddata_kick[4]=senddata_voltage[3];
 800110a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	senddata_kick[2]=senddata_voltage[1];
 800110e:	f88d 000a 	strb.w	r0, [sp, #10]
	senddata_kick[0]=0;
 8001112:	2100      	movs	r1, #0
 8001114:	f88d 1008 	strb.w	r1, [sp, #8]
	can1_send(0x110, senddata_kick);
 8001118:	f44f 7088 	mov.w	r0, #272	; 0x110
 800111c:	a902      	add	r1, sp, #8
	senddata_kick[1]=senddata_voltage[0];
 800111e:	f88d c009 	strb.w	ip, [sp, #9]
	senddata_kick[3]=senddata_voltage[2];
 8001122:	f88d 200b 	strb.w	r2, [sp, #11]
	senddata_kick[4]=senddata_voltage[3];
 8001126:	f88d 300c 	strb.w	r3, [sp, #12]
	can1_send(0x110, senddata_kick);
 800112a:	f000 fa4f 	bl	80015cc <can1_send>
}
 800112e:	b005      	add	sp, #20
 8001130:	f85d fb04 	ldr.w	pc, [sp], #4

08001134 <actuator_kicker>:

void actuator_kicker(uint8_t id,uint8_t param){
 8001134:	b500      	push	{lr}
 8001136:	b083      	sub	sp, #12
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
	 * id 3: kick strength 0~255
	 * */
	uint8_t senddata_kick[8];
	senddata_kick[0]=id;
	senddata_kick[1]=param;
	can1_send(0x110, senddata_kick);
 800113c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8001140:	4669      	mov	r1, sp
	senddata_kick[0]=id;
 8001142:	f88d 2000 	strb.w	r2, [sp]
	senddata_kick[1]=param;
 8001146:	f88d 3001 	strb.w	r3, [sp, #1]
	can1_send(0x110, senddata_kick);
 800114a:	f000 fa3f 	bl	80015cc <can1_send>
}
 800114e:	b003      	add	sp, #12
 8001150:	f85d fb04 	ldr.w	pc, [sp], #4

08001154 <actuator_power_ONOFF>:

void actuator_power_ONOFF(uint8_t power_on){
 8001154:	b500      	push	{lr}
 8001156:	b083      	sub	sp, #12
 8001158:	4603      	mov	r3, r0
	/*id 0=>off
	 *   1=>on
	 * */
	uint8_t senddata_power[8];
	senddata_power[0]=0;
 800115a:	2200      	movs	r2, #0
	senddata_power[1]=power_on;
	can1_send(0x010, senddata_power);
 800115c:	4669      	mov	r1, sp
 800115e:	2010      	movs	r0, #16
	senddata_power[0]=0;
 8001160:	f88d 2000 	strb.w	r2, [sp]
	senddata_power[1]=power_on;
 8001164:	f88d 3001 	strb.w	r3, [sp, #1]
	can1_send(0x010, senddata_power);
 8001168:	f000 fa30 	bl	80015cc <can1_send>
}
 800116c:	b003      	add	sp, #12
 800116e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001172:	bf00      	nop

08001174 <actuator_power_param>:
	senddata_shutdown[2]=0x00;
	senddata_shutdown[3]=0xFF;
	can1_send(0x010, senddata_shutdown);
}

void actuator_power_param(uint8_t id,float param){
 8001174:	b510      	push	{r4, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	4604      	mov	r4, r0
 * */

	uint8_t senddata_power_param_temp[8];
	uint8_t senddata_power_param[8];

	float_to_uchar4(senddata_power_param_temp,param);
 800117a:	4668      	mov	r0, sp
 800117c:	f004 fa38 	bl	80055f0 <float_to_uchar4>
	senddata_power_param[0]=id;
	senddata_power_param[1]=senddata_power_param_temp[0];
 8001180:	f89d 1000 	ldrb.w	r1, [sp]
	senddata_power_param[2]=senddata_power_param_temp[1];
 8001184:	f89d c001 	ldrb.w	ip, [sp, #1]
	senddata_power_param[3]=senddata_power_param_temp[2];
 8001188:	f89d 2002 	ldrb.w	r2, [sp, #2]
	senddata_power_param[4]=senddata_power_param_temp[3];
 800118c:	f89d 3003 	ldrb.w	r3, [sp, #3]
	senddata_power_param[1]=senddata_power_param_temp[0];
 8001190:	f88d 1009 	strb.w	r1, [sp, #9]

	can1_send(0x010, senddata_power_param);
 8001194:	2010      	movs	r0, #16
 8001196:	a902      	add	r1, sp, #8
	senddata_power_param[0]=id;
 8001198:	f88d 4008 	strb.w	r4, [sp, #8]
	senddata_power_param[2]=senddata_power_param_temp[1];
 800119c:	f88d c00a 	strb.w	ip, [sp, #10]
	senddata_power_param[3]=senddata_power_param_temp[2];
 80011a0:	f88d 200b 	strb.w	r2, [sp, #11]
	senddata_power_param[4]=senddata_power_param_temp[3];
 80011a4:	f88d 300c 	strb.w	r3, [sp, #12]
	can1_send(0x010, senddata_power_param);
 80011a8:	f000 fa10 	bl	80015cc <can1_send>
}
 80011ac:	b004      	add	sp, #16
 80011ae:	bd10      	pop	{r4, pc}

080011b0 <actuator_buzzer>:
	senddata_param[3]=senddata_temp[2];
	senddata_param[4]=senddata_temp[3];
	can1_send(0x304, senddata_param);
}

void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 80011b0:	b538      	push	{r3, r4, r5, lr}

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 250);
 80011b2:	4d07      	ldr	r5, [pc, #28]	; (80011d0 <actuator_buzzer+0x20>)
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	22fa      	movs	r2, #250	; 0xfa
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
void actuator_buzzer(uint16_t ontime,uint16_t offtime){
 80011ba:	460c      	mov	r4, r1
	HAL_Delay(ontime);
 80011bc:	f004 fab8 	bl	8005730 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	2200      	movs	r2, #0
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(offtime);
 80011c6:	4620      	mov	r0, r4

}
 80011c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(offtime);
 80011cc:	f004 bab0 	b.w	8005730 <HAL_Delay>
 80011d0:	200007dc 	.word	0x200007dc

080011d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc3;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011d4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011d6:	2400      	movs	r4, #0
{
 80011d8:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	2220      	movs	r2, #32
 80011dc:	4621      	mov	r1, r4
 80011de:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 80011e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80011e4:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	f008 fd8f 	bl	8009d08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <MX_ADC1_Init+0x9c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011f0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80011f4:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f8:	2204      	movs	r2, #4
 80011fa:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fc:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.NbrOfConversion = 1;
 8001200:	2301      	movs	r3, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001202:	8382      	strh	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001208:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120c:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8001210:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001212:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001216:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800121a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800121c:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001220:	f004 fa98 	bl	8005754 <HAL_ADC_Init>
 8001224:	b9c8      	cbnz	r0, 800125a <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001226:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_ADC1_Init+0x9c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800122a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800122c:	a901      	add	r1, sp, #4
 800122e:	f004 ff63 	bl	80060f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001232:	b9c8      	cbnz	r0, 8001268 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001234:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <MX_ADC1_Init+0xa0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_ADC1_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_15;
 8001238:	2306      	movs	r3, #6
 800123a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800123e:	2207      	movs	r2, #7
 8001240:	237f      	movs	r3, #127	; 0x7f
 8001242:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_15;
 8001248:	2204      	movs	r2, #4
 800124a:	2300      	movs	r3, #0
 800124c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	f004 fbf6 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8001254:	b920      	cbnz	r0, 8001260 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001256:	b00c      	add	sp, #48	; 0x30
 8001258:	bd10      	pop	{r4, pc}
    Error_Handler();
 800125a:	f003 f963 	bl	8004524 <Error_Handler>
 800125e:	e7e2      	b.n	8001226 <MX_ADC1_Init+0x52>
    Error_Handler();
 8001260:	f003 f960 	bl	8004524 <Error_Handler>
}
 8001264:	b00c      	add	sp, #48	; 0x30
 8001266:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001268:	f003 f95c 	bl	8004524 <Error_Handler>
 800126c:	e7e2      	b.n	8001234 <MX_ADC1_Init+0x60>
 800126e:	bf00      	nop
 8001270:	20000208 	.word	0x20000208
 8001274:	3ef08000 	.word	0x3ef08000

08001278 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001278:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800127a:	2400      	movs	r4, #0
{
 800127c:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	2220      	movs	r2, #32
 8001280:	4621      	mov	r1, r4
 8001282:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001284:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001288:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	f008 fd3d 	bl	8009d08 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800128e:	4820      	ldr	r0, [pc, #128]	; (8001310 <MX_ADC3_Init+0x98>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001290:	4920      	ldr	r1, [pc, #128]	; (8001314 <MX_ADC3_Init+0x9c>)
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001292:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001296:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800129a:	e9c0 1200 	strd	r1, r2, [r0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129e:	2204      	movs	r2, #4
 80012a0:	6182      	str	r2, [r0, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012a2:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc3.Init.NbrOfConversion = 1;
 80012a6:	2301      	movs	r3, #1
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012a8:	8382      	strh	r2, [r0, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012b2:	e9c0 440b 	strd	r4, r4, [r0, #44]	; 0x2c
  hadc3.Init.NbrOfConversion = 1;
 80012b6:	6203      	str	r3, [r0, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80012b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012bc:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80012be:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012c2:	f004 fa47 	bl	8005754 <HAL_ADC_Init>
 80012c6:	b9c8      	cbnz	r0, 80012fc <MX_ADC3_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c8:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_ADC3_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012cc:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80012ce:	a901      	add	r1, sp, #4
 80012d0:	f004 ff12 	bl	80060f8 <HAL_ADCEx_MultiModeConfigChannel>
 80012d4:	b9c8      	cbnz	r0, 800130a <MX_ADC3_Init+0x92>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <MX_ADC3_Init+0xa0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_ADC3_Init+0x98>)
  sConfig.Channel = ADC_CHANNEL_1;
 80012da:	2306      	movs	r3, #6
 80012dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012e0:	2207      	movs	r2, #7
 80012e2:	237f      	movs	r3, #127	; 0x7f
 80012e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012e8:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 80012ea:	2204      	movs	r2, #4
 80012ec:	2300      	movs	r3, #0
 80012ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012f2:	f004 fba5 	bl	8005a40 <HAL_ADC_ConfigChannel>
 80012f6:	b920      	cbnz	r0, 8001302 <MX_ADC3_Init+0x8a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012f8:	b00c      	add	sp, #48	; 0x30
 80012fa:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012fc:	f003 f912 	bl	8004524 <Error_Handler>
 8001300:	e7e2      	b.n	80012c8 <MX_ADC3_Init+0x50>
    Error_Handler();
 8001302:	f003 f90f 	bl	8004524 <Error_Handler>
}
 8001306:	b00c      	add	sp, #48	; 0x30
 8001308:	bd10      	pop	{r4, pc}
    Error_Handler();
 800130a:	f003 f90b 	bl	8004524 <Error_Handler>
 800130e:	e7e2      	b.n	80012d6 <MX_ADC3_Init+0x5e>
 8001310:	20000274 	.word	0x20000274
 8001314:	50000400 	.word	0x50000400
 8001318:	04300002 	.word	0x04300002

0800131c <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 800131c:	b500      	push	{lr}
 800131e:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001320:	2220      	movs	r2, #32
 8001322:	2100      	movs	r1, #0
 8001324:	4668      	mov	r0, sp
 8001326:	f008 fcef 	bl	8009d08 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800132a:	481d      	ldr	r0, [pc, #116]	; (80013a0 <MX_ADC5_Init+0x84>)
  hadc5.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800132c:	f8df c078 	ldr.w	ip, [pc, #120]	; 80013a8 <MX_ADC5_Init+0x8c>
 8001330:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8001334:	e9c0 c100 	strd	ip, r1, [r0]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc5.Init.GainCompensation = 0;
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001338:	2104      	movs	r1, #4
 800133a:	6181      	str	r1, [r0, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800133c:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001340:	2300      	movs	r3, #0
  hadc5.Init.ContinuousConvMode = ENABLE;
  hadc5.Init.NbrOfConversion = 1;
 8001342:	2201      	movs	r2, #1
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001344:	8381      	strh	r1, [r0, #28]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001346:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800134a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134e:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hadc5.Init.NbrOfConversion = 1;
 8001352:	6202      	str	r2, [r0, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001354:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001358:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800135c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 800135e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001362:	f004 f9f7 	bl	8005754 <HAL_ADC_Init>
 8001366:	b998      	cbnz	r0, 8001390 <MX_ADC5_Init+0x74>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <MX_ADC5_Init+0x88>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_ADC5_Init+0x84>)
  sConfig.Channel = ADC_CHANNEL_2;
 800136c:	2306      	movs	r3, #6
 800136e:	e9cd 2300 	strd	r2, r3, [sp]
 8001372:	2207      	movs	r2, #7
 8001374:	237f      	movs	r3, #127	; 0x7f
 8001376:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800137a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 800137c:	2204      	movs	r2, #4
 800137e:	2300      	movs	r3, #0
 8001380:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001384:	f004 fb5c 	bl	8005a40 <HAL_ADC_ConfigChannel>
 8001388:	b928      	cbnz	r0, 8001396 <MX_ADC5_Init+0x7a>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 800138a:	b009      	add	sp, #36	; 0x24
 800138c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001390:	f003 f8c8 	bl	8004524 <Error_Handler>
 8001394:	e7e8      	b.n	8001368 <MX_ADC5_Init+0x4c>
    Error_Handler();
 8001396:	f003 f8c5 	bl	8004524 <Error_Handler>
}
 800139a:	b009      	add	sp, #36	; 0x24
 800139c:	f85d fb04 	ldr.w	pc, [sp], #4
 80013a0:	200002e0 	.word	0x200002e0
 80013a4:	08600004 	.word	0x08600004
 80013a8:	50000600 	.word	0x50000600

080013ac <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4604      	mov	r4, r0
 80013b0:	b0a0      	sub	sp, #128	; 0x80

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b4:	2254      	movs	r2, #84	; 0x54
 80013b6:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80013bc:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80013c0:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c2:	f008 fca1 	bl	8009d08 <memset>
  if(adcHandle->Instance==ADC1)
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013cc:	d007      	beq.n	80013de <HAL_ADC_MspInit+0x32>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 80013ce:	4a5f      	ldr	r2, [pc, #380]	; (800154c <HAL_ADC_MspInit+0x1a0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d04a      	beq.n	800146a <HAL_ADC_MspInit+0xbe>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC5)
 80013d4:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <HAL_ADC_MspInit+0x1a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d07a      	beq.n	80014d0 <HAL_ADC_MspInit+0x124>

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 80013da:	b020      	add	sp, #128	; 0x80
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e6:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013e8:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013ea:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ec:	f006 fabe 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	f040 80a2 	bne.w	800153a <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013f6:	4b57      	ldr	r3, [pc, #348]	; (8001554 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013f8:	4857      	ldr	r0, [pc, #348]	; (8001558 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel5;
 80013fc:	4d57      	ldr	r5, [pc, #348]	; (800155c <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001402:	64da      	str	r2, [r3, #76]	; 0x4c
 8001404:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001406:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001410:	f042 0202 	orr.w	r2, r2, #2
 8001414:	64da      	str	r2, [r3, #76]	; 0x4c
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 800141e:	2201      	movs	r2, #1
 8001420:	2303      	movs	r3, #3
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001422:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = V_SENSE_Pin;
 8001426:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(V_SENSE_GPIO_Port, &GPIO_InitStruct);
 800142e:	f005 fd43 	bl	8006eb8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel5;
 8001432:	4a4b      	ldr	r2, [pc, #300]	; (8001560 <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001434:	2305      	movs	r3, #5
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001436:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	2280      	movs	r2, #128	; 0x80
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001440:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8001444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001448:	2320      	movs	r3, #32
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800144e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001452:	4628      	mov	r0, r5
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8001456:	f004 ff79 	bl	800634c <HAL_DMA_Init>
 800145a:	b918      	cbnz	r0, 8001464 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 800145c:	6565      	str	r5, [r4, #84]	; 0x54
 800145e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001460:	b020      	add	sp, #128	; 0x80
 8001462:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001464:	f003 f85e 	bl	8004524 <Error_Handler>
 8001468:	e7f8      	b.n	800145c <HAL_ADC_MspInit+0xb0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800146a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800146e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001472:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001474:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001476:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	f006 fa78 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 800147c:	2800      	cmp	r0, #0
 800147e:	d15f      	bne.n	8001540 <HAL_ADC_MspInit+0x194>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001480:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_ADC_MspInit+0x1b8>)
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001486:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001488:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800148a:	d109      	bne.n	80014a0 <HAL_ADC_MspInit+0xf4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800148c:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_ADC_MspInit+0x1a8>)
 800148e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001494:	64da      	str	r2, [r3, #76]	; 0x4c
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014a2:	482d      	ldr	r0, [pc, #180]	; (8001558 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 80014a6:	4d30      	ldr	r5, [pc, #192]	; (8001568 <HAL_ADC_MspInit+0x1bc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	f042 0202 	orr.w	r2, r2, #2
 80014ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80014b6:	2202      	movs	r2, #2
 80014b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014ba:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = C_SENSE_Pin;
 80014be:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(C_SENSE_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f005 fcf7 	bl	8006eb8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_ADC_MspInit+0x1c0>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80014cc:	2325      	movs	r3, #37	; 0x25
 80014ce:	e7b2      	b.n	8001436 <HAL_ADC_MspInit+0x8a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014da:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80014dc:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014de:	f006 fa45 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d12f      	bne.n	8001546 <HAL_ADC_MspInit+0x19a>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014e6:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_ADC_MspInit+0x1b8>)
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014ec:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014f0:	d109      	bne.n	8001506 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_ADC_MspInit+0x1a8>)
 80014f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	9304      	str	r3, [sp, #16]
 8001504:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_ADC_MspInit+0x1a8>)
    hdma_adc5.Instance = DMA1_Channel4;
 8001508:	4d19      	ldr	r5, [pc, #100]	; (8001570 <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800150c:	f042 0201 	orr.w	r2, r2, #1
 8001510:	64da      	str	r2, [r3, #76]	; 0x4c
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800151a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001528:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f005 fcc2 	bl	8006eb8 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel4;
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8001536:	2327      	movs	r3, #39	; 0x27
 8001538:	e77d      	b.n	8001436 <HAL_ADC_MspInit+0x8a>
      Error_Handler();
 800153a:	f002 fff3 	bl	8004524 <Error_Handler>
 800153e:	e75a      	b.n	80013f6 <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8001540:	f002 fff0 	bl	8004524 <Error_Handler>
 8001544:	e79c      	b.n	8001480 <HAL_ADC_MspInit+0xd4>
      Error_Handler();
 8001546:	f002 ffed 	bl	8004524 <Error_Handler>
 800154a:	e7cc      	b.n	80014e6 <HAL_ADC_MspInit+0x13a>
 800154c:	50000400 	.word	0x50000400
 8001550:	50000600 	.word	0x50000600
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400
 800155c:	2000034c 	.word	0x2000034c
 8001560:	40020058 	.word	0x40020058
 8001564:	20000204 	.word	0x20000204
 8001568:	200003ac 	.word	0x200003ac
 800156c:	40020030 	.word	0x40020030
 8001570:	2000040c 	.word	0x2000040c
 8001574:	40020044 	.word	0x40020044

08001578 <can1_init_ibis>:

#include "can_ibis.h"


// power,FC,mose
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 8001578:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800157a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80015c0 <can1_init_ibis+0x48>
void can1_init_ibis(FDCAN_HandleTypeDef* handler){
 800157e:	b087      	sub	sp, #28
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001580:	2200      	movs	r2, #0
 8001582:	2300      	movs	r3, #0
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <can1_init_ibis+0x50>)
 8001586:	4669      	mov	r1, sp
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001588:	e9cd 2300 	strd	r2, r3, [sp]
 800158c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001590:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001594:	f005 fa0a 	bl	80069ac <HAL_FDCAN_ConfigFilter>
 8001598:	b930      	cbnz	r0, 80015a8 <can1_init_ibis+0x30>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <can1_init_ibis+0x50>)
 800159c:	f005 fa38 	bl	8006a10 <HAL_FDCAN_Start>
 80015a0:	b948      	cbnz	r0, 80015b6 <can1_init_ibis+0x3e>
}
 80015a2:	b007      	add	sp, #28
 80015a4:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 80015a8:	f002 ffbc 	bl	8004524 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){ Error_Handler();}
 80015ac:	4806      	ldr	r0, [pc, #24]	; (80015c8 <can1_init_ibis+0x50>)
 80015ae:	f005 fa2f 	bl	8006a10 <HAL_FDCAN_Start>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d0f5      	beq.n	80015a2 <can1_init_ibis+0x2a>
 80015b6:	f002 ffb5 	bl	8004524 <Error_Handler>
}
 80015ba:	b007      	add	sp, #28
 80015bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80015c0:	00000002 	.word	0x00000002
 80015c4:	00000001 	.word	0x00000001
 80015c8:	20000470 	.word	0x20000470

080015cc <can1_send>:

void can1_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <can1_send+0x38>)
void can1_send(int id, uint8_t senddata[]){
 80015ce:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80015d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80015d4:	2500      	movs	r5, #0
 80015d6:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80015da:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80015de:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80015e2:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 80015e6:	4c08      	ldr	r4, [pc, #32]	; (8001608 <can1_send+0x3c>)
	TxHeader.MessageMarker = 0;
 80015e8:	621d      	str	r5, [r3, #32]
void can1_send(int id, uint8_t senddata[]){
 80015ea:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) != 3) {}
 80015ec:	4620      	mov	r0, r4
 80015ee:	f005 fb11 	bl	8006c14 <HAL_FDCAN_GetTxFifoFreeLevel>
 80015f2:	2803      	cmp	r0, #3
 80015f4:	d1fa      	bne.n	80015ec <can1_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 80015f6:	4632      	mov	r2, r6
 80015f8:	4902      	ldr	r1, [pc, #8]	; (8001604 <can1_send+0x38>)
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <can1_send+0x3c>)

}
 80015fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, senddata);
 8001600:	f005 ba1e 	b.w	8006a40 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001604:	20000634 	.word	0x20000634
 8001608:	20000470 	.word	0x20000470
 800160c:	00000000 	.word	0x00000000

08001610 <can2_init_ibis>:


void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001610:	b500      	push	{lr}
	  FDCAN_FilterTypeDef  sFilterConfig;
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001612:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8001658 <can2_init_ibis+0x48>
void can2_init_ibis(FDCAN_HandleTypeDef* handler){
 8001616:	b087      	sub	sp, #28
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001618:	2200      	movs	r2, #0
 800161a:	2300      	movs	r3, #0
	  sFilterConfig.FilterIndex = 0;
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
	  sFilterConfig.FilterID1 = 0x000;
	  sFilterConfig.FilterID2 = 0x000;
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <can2_init_ibis+0x50>)
 800161e:	4669      	mov	r1, sp
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001620:	e9cd 2300 	strd	r2, r3, [sp]
 8001624:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001628:	e9cd 2304 	strd	r2, r3, [sp, #16]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 800162c:	f005 f9be 	bl	80069ac <HAL_FDCAN_ConfigFilter>
 8001630:	b930      	cbnz	r0, 8001640 <can2_init_ibis+0x30>
		  {
			  Error_Handler();
		  }
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001632:	480b      	ldr	r0, [pc, #44]	; (8001660 <can2_init_ibis+0x50>)
 8001634:	f005 f9ec 	bl	8006a10 <HAL_FDCAN_Start>
 8001638:	b948      	cbnz	r0, 800164e <can2_init_ibis+0x3e>
}
 800163a:	b007      	add	sp, #28
 800163c:	f85d fb04 	ldr.w	pc, [sp], #4
			  Error_Handler();
 8001640:	f002 ff70 	bl	8004524 <Error_Handler>
	  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){ Error_Handler();}
 8001644:	4806      	ldr	r0, [pc, #24]	; (8001660 <can2_init_ibis+0x50>)
 8001646:	f005 f9e3 	bl	8006a10 <HAL_FDCAN_Start>
 800164a:	2800      	cmp	r0, #0
 800164c:	d0f5      	beq.n	800163a <can2_init_ibis+0x2a>
 800164e:	f002 ff69 	bl	8004524 <Error_Handler>
}
 8001652:	b007      	add	sp, #28
 8001654:	f85d fb04 	ldr.w	pc, [sp], #4
 8001658:	00000002 	.word	0x00000002
 800165c:	00000001 	.word	0x00000001
 8001660:	200004d4 	.word	0x200004d4

08001664 <can2_send>:

void can2_send(int id, uint8_t senddata[]){

	TxHeader.Identifier =id;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <can2_send+0x38>)
void can2_send(int id, uint8_t senddata[]){
 8001666:	b570      	push	{r4, r5, r6, lr}
	TxHeader.IdType = FDCAN_STANDARD_ID;
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001668:	f44f 2200 	mov.w	r2, #524288	; 0x80000
	TxHeader.IdType = FDCAN_STANDARD_ID;
 800166c:	2500      	movs	r5, #0
 800166e:	e9c3 0500 	strd	r0, r5, [r3]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001672:	e9c3 5202 	strd	r5, r2, [r3, #8]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001676:	e9c3 5504 	strd	r5, r5, [r3, #16]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800167a:	e9c3 5506 	strd	r5, r5, [r3, #24]
	TxHeader.MessageMarker = 0;

	/* Request transmission */
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 800167e:	4c08      	ldr	r4, [pc, #32]	; (80016a0 <can2_send+0x3c>)
	TxHeader.MessageMarker = 0;
 8001680:	621d      	str	r5, [r3, #32]
void can2_send(int id, uint8_t senddata[]){
 8001682:	460e      	mov	r6, r1
	while(HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan2) != 3) {}
 8001684:	4620      	mov	r0, r4
 8001686:	f005 fac5 	bl	8006c14 <HAL_FDCAN_GetTxFifoFreeLevel>
 800168a:	2803      	cmp	r0, #3
 800168c:	d1fa      	bne.n	8001684 <can2_send+0x20>
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 800168e:	4632      	mov	r2, r6
 8001690:	4902      	ldr	r1, [pc, #8]	; (800169c <can2_send+0x38>)
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <can2_send+0x3c>)

}
 8001694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader, senddata);
 8001698:	f005 b9d2 	b.w	8006a40 <HAL_FDCAN_AddMessageToTxFifoQ>
 800169c:	20000634 	.word	0x20000634
 80016a0:	200004d4 	.word	0x200004d4

080016a4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_DMA_Init+0x80>)
{
 80016a6:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016a8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80016aa:	f040 0004 	orr.w	r0, r0, #4
 80016ae:	6498      	str	r0, [r3, #72]	; 0x48
 80016b0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 80016b2:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016b4:	f004 0404 	and.w	r4, r4, #4
 80016b8:	9400      	str	r4, [sp, #0]
 80016ba:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016bc:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80016be:	f044 0401 	orr.w	r4, r4, #1
 80016c2:	649c      	str	r4, [r3, #72]	; 0x48
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ce:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016d0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016d4:	f004 fdd4 	bl	8006280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016d8:	200b      	movs	r0, #11
 80016da:	f004 fe0f 	bl	80062fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	200c      	movs	r0, #12
 80016e4:	f004 fdcc 	bl	8006280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016e8:	200c      	movs	r0, #12
 80016ea:	f004 fe07 	bl	80062fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 9, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2109      	movs	r1, #9
 80016f2:	200d      	movs	r0, #13
 80016f4:	f004 fdc4 	bl	8006280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80016f8:	200d      	movs	r0, #13
 80016fa:	f004 fdff 	bl	80062fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 10, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	210a      	movs	r1, #10
 8001702:	200e      	movs	r0, #14
 8001704:	f004 fdbc 	bl	8006280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001708:	200e      	movs	r0, #14
 800170a:	f004 fdf7 	bl	80062fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 11, 0);
 800170e:	200f      	movs	r0, #15
 8001710:	2200      	movs	r2, #0
 8001712:	210b      	movs	r1, #11
 8001714:	f004 fdb4 	bl	8006280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001718:	200f      	movs	r0, #15

}
 800171a:	b002      	add	sp, #8
 800171c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001720:	f004 bdec 	b.w	80062fc <HAL_NVIC_EnableIRQ>
 8001724:	40021000 	.word	0x40021000

08001728 <MX_FDCAN1_Init>:
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001728:	4810      	ldr	r0, [pc, #64]	; (800176c <MX_FDCAN1_Init+0x44>)
{
 800172a:	b510      	push	{r4, lr}
  hfdcan1.Instance = FDCAN1;
 800172c:	4c10      	ldr	r4, [pc, #64]	; (8001770 <MX_FDCAN1_Init+0x48>)
 800172e:	6004      	str	r4, [r0, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001730:	2201      	movs	r2, #1
  hfdcan1.Init.TransmitPause = DISABLE;
  hfdcan1.Init.ProtocolException = DISABLE;
  hfdcan1.Init.NominalPrescaler = 10;
 8001732:	210a      	movs	r1, #10
  hfdcan1.Init.NominalSyncJumpWidth = 1;
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001734:	240e      	movs	r4, #14
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001736:	2300      	movs	r3, #0
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001738:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800173c:	61c4      	str	r4, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
  hfdcan1.Init.DataPrescaler = 10;
 800173e:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001740:	2402      	movs	r4, #2
  hfdcan1.Init.DataSyncJumpWidth = 1;
  hfdcan1.Init.DataTimeSeg1 = 12;
 8001742:	210c      	movs	r1, #12
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001744:	8202      	strh	r2, [r0, #16]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001746:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan1.Init.DataTimeSeg1 = 12;
 800174a:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg2 = 2;
  hfdcan1.Init.StdFiltersNbr = 0;
  hfdcan1.Init.ExtFiltersNbr = 0;
 800174e:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001752:	60c3      	str	r3, [r0, #12]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001754:	7483      	strb	r3, [r0, #18]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001756:	6204      	str	r4, [r0, #32]
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001758:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800175a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800175c:	f004 ffac 	bl	80066b8 <HAL_FDCAN_Init>
 8001760:	b900      	cbnz	r0, 8001764 <MX_FDCAN1_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001762:	bd10      	pop	{r4, pc}
 8001764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001768:	f002 bedc 	b.w	8004524 <Error_Handler>
 800176c:	20000470 	.word	0x20000470
 8001770:	40006400 	.word	0x40006400

08001774 <MX_FDCAN2_Init>:
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001774:	4810      	ldr	r0, [pc, #64]	; (80017b8 <MX_FDCAN2_Init+0x44>)
{
 8001776:	b510      	push	{r4, lr}
  hfdcan2.Instance = FDCAN2;
 8001778:	4c10      	ldr	r4, [pc, #64]	; (80017bc <MX_FDCAN2_Init+0x48>)
 800177a:	6004      	str	r4, [r0, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800177c:	2201      	movs	r2, #1
  hfdcan2.Init.TransmitPause = DISABLE;
  hfdcan2.Init.ProtocolException = DISABLE;
  hfdcan2.Init.NominalPrescaler = 10;
 800177e:	210a      	movs	r1, #10
  hfdcan2.Init.NominalSyncJumpWidth = 1;
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001780:	240e      	movs	r4, #14
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001782:	2300      	movs	r3, #0
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001784:	e9c0 1205 	strd	r1, r2, [r0, #20]
  hfdcan2.Init.NominalTimeSeg1 = 14;
 8001788:	61c4      	str	r4, [r0, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
  hfdcan2.Init.DataPrescaler = 10;
 800178a:	6241      	str	r1, [r0, #36]	; 0x24
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800178c:	2402      	movs	r4, #2
  hfdcan2.Init.DataSyncJumpWidth = 1;
  hfdcan2.Init.DataTimeSeg1 = 12;
 800178e:	210c      	movs	r1, #12
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8001790:	8202      	strh	r2, [r0, #16]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001792:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hfdcan2.Init.DataTimeSeg1 = 12;
 8001796:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg2 = 2;
  hfdcan2.Init.StdFiltersNbr = 0;
  hfdcan2.Init.ExtFiltersNbr = 0;
 800179a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800179e:	60c3      	str	r3, [r0, #12]
  hfdcan2.Init.ProtocolException = DISABLE;
 80017a0:	7483      	strb	r3, [r0, #18]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80017a2:	6204      	str	r4, [r0, #32]
  hfdcan2.Init.DataTimeSeg2 = 2;
 80017a4:	6304      	str	r4, [r0, #48]	; 0x30
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80017a6:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80017a8:	f004 ff86 	bl	80066b8 <HAL_FDCAN_Init>
 80017ac:	b900      	cbnz	r0, 80017b0 <MX_FDCAN2_Init+0x3c>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80017ae:	bd10      	pop	{r4, pc}
 80017b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80017b4:	f002 beb6 	b.w	8004524 <Error_Handler>
 80017b8:	200004d4 	.word	0x200004d4
 80017bc:	40006800 	.word	0x40006800

080017c0 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
 80017c4:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c8:	2254      	movs	r2, #84	; 0x54
 80017ca:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80017d0:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80017d4:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d6:	f008 fa97 	bl	8009d08 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	4a52      	ldr	r2, [pc, #328]	; (8001928 <HAL_FDCAN_MspInit+0x168>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d004      	beq.n	80017ec <HAL_FDCAN_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(fdcanHandle->Instance==FDCAN2)
 80017e2:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_FDCAN_MspInit+0x16c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d047      	beq.n	8001878 <HAL_FDCAN_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80017e8:	b01e      	add	sp, #120	; 0x78
 80017ea:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80017f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80017f6:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80017f8:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fa:	f006 f8b7 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d17f      	bne.n	8001902 <HAL_FDCAN_MspInit+0x142>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001802:	4a4b      	ldr	r2, [pc, #300]	; (8001930 <HAL_FDCAN_MspInit+0x170>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001808:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800180a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800180c:	d109      	bne.n	8001822 <HAL_FDCAN_MspInit+0x62>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <HAL_FDCAN_MspInit+0x174>)
 8001810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001812:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001816:	659a      	str	r2, [r3, #88]	; 0x58
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_FDCAN_MspInit+0x174>)
 8001824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001826:	ed9f 7b3a 	vldr	d7, [pc, #232]	; 8001910 <HAL_FDCAN_MspInit+0x150>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001832:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001836:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8001918 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001842:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001848:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800184c:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f005 fb32 	bl	8006eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2103      	movs	r1, #3
 8001858:	2015      	movs	r0, #21
 800185a:	f004 fd11 	bl	8006280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800185e:	2015      	movs	r0, #21
 8001860:	f004 fd4c 	bl	80062fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2104      	movs	r1, #4
 8001868:	2016      	movs	r0, #22
 800186a:	f004 fd09 	bl	8006280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800186e:	2016      	movs	r0, #22
 8001870:	f004 fd44 	bl	80062fc <HAL_NVIC_EnableIRQ>
}
 8001874:	b01e      	add	sp, #120	; 0x78
 8001876:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800187c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001880:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001882:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001884:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	f006 f871 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 800188a:	2800      	cmp	r0, #0
 800188c:	d13c      	bne.n	8001908 <HAL_FDCAN_MspInit+0x148>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800188e:	4a28      	ldr	r2, [pc, #160]	; (8001930 <HAL_FDCAN_MspInit+0x170>)
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	3301      	adds	r3, #1
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001894:	2b01      	cmp	r3, #1
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001896:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001898:	d109      	bne.n	80018ae <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_FDCAN_MspInit+0x174>)
 800189c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800189e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_FDCAN_MspInit+0x174>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	4821      	ldr	r0, [pc, #132]	; (8001938 <HAL_FDCAN_MspInit+0x178>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018b4:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001920 <HAL_FDCAN_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	f042 0202 	orr.w	r2, r2, #2
 80018bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018c0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8001918 <HAL_FDCAN_MspInit+0x158>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80018d0:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018d2:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80018d6:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f005 faed 	bl	8006eb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 6, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2106      	movs	r1, #6
 80018e2:	2056      	movs	r0, #86	; 0x56
 80018e4:	f004 fccc 	bl	8006280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80018e8:	2056      	movs	r0, #86	; 0x56
 80018ea:	f004 fd07 	bl	80062fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 7, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2107      	movs	r1, #7
 80018f2:	2057      	movs	r0, #87	; 0x57
 80018f4:	f004 fcc4 	bl	8006280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 80018f8:	2057      	movs	r0, #87	; 0x57
 80018fa:	f004 fcff 	bl	80062fc <HAL_NVIC_EnableIRQ>
}
 80018fe:	b01e      	add	sp, #120	; 0x78
 8001900:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001902:	f002 fe0f 	bl	8004524 <Error_Handler>
 8001906:	e77c      	b.n	8001802 <HAL_FDCAN_MspInit+0x42>
      Error_Handler();
 8001908:	f002 fe0c 	bl	8004524 <Error_Handler>
 800190c:	e7bf      	b.n	800188e <HAL_FDCAN_MspInit+0xce>
 800190e:	bf00      	nop
 8001910:	00001800 	.word	0x00001800
 8001914:	00000002 	.word	0x00000002
	...
 8001920:	00003000 	.word	0x00003000
 8001924:	00000002 	.word	0x00000002
 8001928:	40006400 	.word	0x40006400
 800192c:	40006800 	.word	0x40006800
 8001930:	2000046c 	.word	0x2000046c
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400

0800193c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800193c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	2400      	movs	r4, #0
{
 8001942:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001948:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <MX_GPIO_Init+0x160>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001952:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001aa8 <MX_GPIO_Init+0x16c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001956:	4d52      	ldr	r5, [pc, #328]	; (8001aa0 <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001958:	f042 0204 	orr.w	r2, r2, #4
 800195c:	64da      	str	r2, [r3, #76]	; 0x4c
 800195e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001960:	f002 0204 	and.w	r2, r2, #4
 8001964:	9201      	str	r2, [sp, #4]
 8001966:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001970:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001972:	f002 0220 	and.w	r2, r2, #32
 8001976:	9202      	str	r2, [sp, #8]
 8001978:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	64da      	str	r2, [r3, #76]	; 0x4c
 8001982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001984:	f002 0201 	and.w	r2, r2, #1
 8001988:	9203      	str	r2, [sp, #12]
 800198a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198e:	f042 0202 	orr.w	r2, r2, #2
 8001992:	64da      	str	r2, [r3, #76]	; 0x4c
 8001994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001996:	f002 0202 	and.w	r2, r2, #2
 800199a:	9204      	str	r2, [sp, #16]
 800199c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a0:	f042 0208 	orr.w	r2, r2, #8
 80019a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80019ae:	4640      	mov	r0, r8
 80019b0:	4622      	mov	r2, r4
 80019b2:	f246 0121 	movw	r1, #24609	; 0x6021
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b6:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 80019b8:	f005 fb7c 	bl	80070b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80019bc:	4622      	mov	r2, r4
 80019be:	f248 0110 	movw	r1, #32784	; 0x8010
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f005 fb75 	bl	80070b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80019ca:	4622      	mov	r2, r4
 80019cc:	4628      	mov	r0, r5
 80019ce:	f244 4184 	movw	r1, #17540	; 0x4484
 80019d2:	f005 fb6f 	bl	80070b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC0 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
 80019d6:	2600      	movs	r6, #0
 80019d8:	2700      	movs	r7, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	a906      	add	r1, sp, #24
 80019dc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_5;
 80019de:	f246 0221 	movw	r2, #24609	; 0x6021
 80019e2:	2301      	movs	r3, #1
 80019e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80019e8:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f005 fa64 	bl	8006eb8 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PA15 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 80019f2:	f248 0210 	movw	r2, #32784	; 0x8010
 80019f6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_15;
 80019fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a00:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f005 fa58 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	4640      	mov	r0, r8
 8001a0a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	f005 fa4f 	bl	8006eb8 <HAL_GPIO_Init>
  /*Configure GPIO pins : PB2 PB10 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	a906      	add	r1, sp, #24
 8001a1c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_7;
 8001a1e:	f244 4284 	movw	r2, #17540	; 0x4484
 8001a22:	2301      	movs	r3, #1
 8001a24:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a28:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	f005 fa44 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a30:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a36:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f005 fa39 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a48:	2204      	movs	r2, #4
 8001a4a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a54:	f005 fa30 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	a906      	add	r1, sp, #24
 8001a5a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a5c:	2260      	movs	r2, #96	; 0x60
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e9cd 2306 	strd	r2, r3, [sp, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESTOP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a64:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6a:	f005 fa25 	bl	8006eb8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001a6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001a72:	4628      	mov	r0, r5
 8001a74:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = ESTOP_Pin;
 8001a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7e:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(ESTOP_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f005 fa19 	bl	8006eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001a86:	4622      	mov	r2, r4
 8001a88:	4649      	mov	r1, r9
 8001a8a:	2017      	movs	r0, #23
 8001a8c:	f004 fbf8 	bl	8006280 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a90:	2017      	movs	r0, #23
 8001a92:	f004 fc33 	bl	80062fc <HAL_NVIC_EnableIRQ>

}
 8001a96:	b00d      	add	sp, #52	; 0x34
 8001a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	48000c00 	.word	0x48000c00
 8001aa8:	48000800 	.word	0x48000800

08001aac <ICM20602_init>:
{
    return ICM20602_readByte(ICM20602_WHO_AM_I);   // Should return 0x68
}

void ICM20602_init()
{
 8001aac:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001aae:	4870      	ldr	r0, [pc, #448]	; (8001c70 <ICM20602_init+0x1c4>)
{
 8001ab0:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	f005 fafd 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2110      	movs	r1, #16
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac2:	f005 faf7 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ac6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001aca:	216b      	movs	r1, #107	; 0x6b
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001acc:	2301      	movs	r3, #1
 8001ace:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001ad0:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ad4:	9400      	str	r4, [sp, #0]
 8001ad6:	a902      	add	r1, sp, #8
 8001ad8:	4866      	ldr	r0, [pc, #408]	; (8001c74 <ICM20602_init+0x1c8>)
 8001ada:	f006 fa63 	bl	8007fa4 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001ade:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	9400      	str	r4, [sp, #0]
 8001ae4:	aa03      	add	r2, sp, #12
 8001ae6:	a902      	add	r1, sp, #8
 8001ae8:	4862      	ldr	r0, [pc, #392]	; (8001c74 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001aea:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001aee:	f006 fa59 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001af2:	2201      	movs	r2, #1
 8001af4:	2110      	movs	r1, #16
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f005 fadb 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001afe:	462a      	mov	r2, r5
 8001b00:	2110      	movs	r1, #16
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f005 fad5 	bl	80070b4 <HAL_GPIO_WritePin>
	send_data[0]=reg & 0x7F;
 8001b0a:	2319      	movs	r3, #25
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b0c:	9400      	str	r4, [sp, #0]
	send_data[0]=reg & 0x7F;
 8001b0e:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b12:	aa03      	add	r2, sp, #12
 8001b14:	2301      	movs	r3, #1
 8001b16:	a902      	add	r1, sp, #8
 8001b18:	4856      	ldr	r0, [pc, #344]	; (8001c74 <ICM20602_init+0x1c8>)
 8001b1a:	f006 fa43 	bl	8007fa4 <HAL_SPI_TransmitReceive>
	send_data[0]=data;
 8001b1e:	2307      	movs	r3, #7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b20:	9400      	str	r4, [sp, #0]
	send_data[0]=data;
 8001b22:	f88d 3008 	strb.w	r3, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b26:	aa03      	add	r2, sp, #12
 8001b28:	2301      	movs	r3, #1
 8001b2a:	a902      	add	r1, sp, #8
 8001b2c:	4851      	ldr	r0, [pc, #324]	; (8001c74 <ICM20602_init+0x1c8>)
 8001b2e:	f006 fa39 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	2110      	movs	r1, #16
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f005 fabb 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001b3e:	462a      	mov	r2, r5
 8001b40:	2110      	movs	r1, #16
 8001b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b46:	f005 fab5 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b4a:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001b4c:	211a      	movs	r1, #26
	send_data[0]=data;
 8001b4e:	461d      	mov	r5, r3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b50:	aa03      	add	r2, sp, #12
	send_data[0]=reg & 0x7F;
 8001b52:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b56:	9400      	str	r4, [sp, #0]
 8001b58:	a902      	add	r1, sp, #8
 8001b5a:	4846      	ldr	r0, [pc, #280]	; (8001c74 <ICM20602_init+0x1c8>)
 8001b5c:	f006 fa22 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b60:	462b      	mov	r3, r5
 8001b62:	9400      	str	r4, [sp, #0]
 8001b64:	a902      	add	r1, sp, #8
 8001b66:	aa03      	add	r2, sp, #12
 8001b68:	4842      	ldr	r0, [pc, #264]	; (8001c74 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001b6a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001b6e:	f006 fa19 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001b72:	462a      	mov	r2, r5
 8001b74:	2110      	movs	r1, #16
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7a:	f005 fa9b 	bl	80070b4 <HAL_GPIO_WritePin>
	ICM20602_writeByte(ICM20602_PWR_MGMT_1, 0x00);    // CLK_SEL=0: internal 8MHz, TEMP_DIS=0, SLEEP=0
	ICM20602_writeByte(ICM20602_SMPLRT_DIV, 0x07);  // Gyro output sample rate = Gyro Output Rate/(1+SMPLRT_DIV)
	ICM20602_writeByte(ICM20602_CONFIG, 0x01); //176Hz     // set TEMP_OUT_L, DLPF=3 (Fs=1KHz):0x03

	ICM20602_setAccRange(Ascale);
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <ICM20602_init+0x1cc>)
 8001b80:	681c      	ldr	r4, [r3, #0]


// Calculates Acc resolution
float ICM20602_setAccRange(int Ascale)
{
    switch(Ascale)
 8001b82:	2c03      	cmp	r4, #3
 8001b84:	d807      	bhi.n	8001b96 <ICM20602_init+0xea>
 8001b86:	e8df f004 	tbb	[pc, r4]
 8001b8a:	686d      	.short	0x686d
 8001b8c:	0263      	.short	0x0263
            break;
        case AFS_8G:
            aRes = 8.0/32768.0;
            break;
        case AFS_16G:
            aRes = 16.0/32768.0;
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <ICM20602_init+0x1d0>)
 8001b90:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001b94:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2110      	movs	r1, #16
 8001b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9e:	f005 fa89 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ba2:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001ba6:	221c      	movs	r2, #28
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ba8:	2301      	movs	r3, #1
	send_data[0]=reg & 0x7F;
 8001baa:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bae:	a902      	add	r1, sp, #8
 8001bb0:	aa03      	add	r2, sp, #12
 8001bb2:	4830      	ldr	r0, [pc, #192]	; (8001c74 <ICM20602_init+0x1c8>)
 8001bb4:	9500      	str	r5, [sp, #0]
 8001bb6:	f006 f9f5 	bl	8007fa4 <HAL_SPI_TransmitReceive>
            break;         
    }

    ICM20602_writeByte(ICM20602_ACCEL_CONFIG, Ascale<<3);// bit[4:3] 0=+-2g,1=+-4g,2=+-8g,3=+-16g, ACC_HPF=On (5Hz)
 8001bba:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	aa03      	add	r2, sp, #12
 8001bc0:	a902      	add	r1, sp, #8
 8001bc2:	482c      	ldr	r0, [pc, #176]	; (8001c74 <ICM20602_init+0x1c8>)
 8001bc4:	9500      	str	r5, [sp, #0]
	send_data[0]=data;
 8001bc6:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bca:	f006 f9eb 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd6:	f005 fa6d 	bl	80070b4 <HAL_GPIO_WritePin>
	ICM20602_setGyroRange(Gscale);
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <ICM20602_init+0x1d4>)
 8001bdc:	681c      	ldr	r4, [r3, #0]
}

// Calculates Gyro resolution
float ICM20602_setGyroRange(int Gscale)
{
    switch(Gscale)
 8001bde:	2c03      	cmp	r4, #3
 8001be0:	d806      	bhi.n	8001bf0 <ICM20602_init+0x144>
 8001be2:	e8df f004 	tbb	[pc, r4]
 8001be6:	2d31      	.short	0x2d31
 8001be8:	0229      	.short	0x0229
            break;
        case GFS_1000DPS:
            gRes = 1000.0/32768.0;
            break;
        case GFS_2000DPS:
            gRes = 2000.0/32768.0;
 8001bea:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <ICM20602_init+0x1d8>)
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <ICM20602_init+0x1dc>)
 8001bee:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2110      	movs	r1, #16
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf8:	f005 fa5c 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001bfc:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
	send_data[0]=reg & 0x7F;
 8001c00:	221b      	movs	r2, #27
 8001c02:	f88d 2008 	strb.w	r2, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c06:	a902      	add	r1, sp, #8
 8001c08:	aa03      	add	r2, sp, #12
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	9500      	str	r5, [sp, #0]
 8001c0e:	4819      	ldr	r0, [pc, #100]	; (8001c74 <ICM20602_init+0x1c8>)
 8001c10:	f006 f9c8 	bl	8007fa4 <HAL_SPI_TransmitReceive>
            break;
    }
    
    ICM20602_writeByte(ICM20602_GYRO_CONFIG, Gscale<<3); // bit[4:3] 0=+-250d/s,1=+-500d/s,2=+-1000d/s,3=+-2000d/s
 8001c14:	00e4      	lsls	r4, r4, #3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c16:	aa03      	add	r2, sp, #12
 8001c18:	a902      	add	r1, sp, #8
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	9500      	str	r5, [sp, #0]
 8001c1e:	4815      	ldr	r0, [pc, #84]	; (8001c74 <ICM20602_init+0x1c8>)
	send_data[0]=data;
 8001c20:	f88d 4008 	strb.w	r4, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001c24:	f006 f9be 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c30:	f005 fa40 	bl	80070b4 <HAL_GPIO_WritePin>
}
 8001c34:	b005      	add	sp, #20
 8001c36:	bd30      	pop	{r4, r5, pc}
            gRes = 1000.0/32768.0;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <ICM20602_init+0x1d8>)
 8001c3a:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <ICM20602_init+0x1e0>)
 8001c3c:	601a      	str	r2, [r3, #0]
            break;
 8001c3e:	e7d7      	b.n	8001bf0 <ICM20602_init+0x144>
            gRes = 500.0/32768.0;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <ICM20602_init+0x1d8>)
 8001c42:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <ICM20602_init+0x1e4>)
 8001c44:	601a      	str	r2, [r3, #0]
            break;
 8001c46:	e7d3      	b.n	8001bf0 <ICM20602_init+0x144>
            gRes = 250.0/32768.0;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <ICM20602_init+0x1d8>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <ICM20602_init+0x1e8>)
 8001c4c:	601a      	str	r2, [r3, #0]
            break;
 8001c4e:	e7cf      	b.n	8001bf0 <ICM20602_init+0x144>
            aRes = 8.0/32768.0;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <ICM20602_init+0x1d0>)
 8001c52:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001c56:	601a      	str	r2, [r3, #0]
            break;
 8001c58:	e79d      	b.n	8001b96 <ICM20602_init+0xea>
            aRes = 4.0/32768.0;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <ICM20602_init+0x1d0>)
 8001c5c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001c60:	601a      	str	r2, [r3, #0]
            break;
 8001c62:	e798      	b.n	8001b96 <ICM20602_init+0xea>
            aRes = 2.0/32768.0;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <ICM20602_init+0x1d0>)
 8001c66:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001c6a:	601a      	str	r2, [r3, #0]
            break;
 8001c6c:	e793      	b.n	8001b96 <ICM20602_init+0xea>
 8001c6e:	bf00      	nop
 8001c70:	48000800 	.word	0x48000800
 8001c74:	20000774 	.word	0x20000774
 8001c78:	20000538 	.word	0x20000538
 8001c7c:	2000053c 	.word	0x2000053c
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000570 	.word	0x20000570
 8001c88:	3d7a0000 	.word	0x3d7a0000
 8001c8c:	3cfa0000 	.word	0x3cfa0000
 8001c90:	3c7a0000 	.word	0x3c7a0000
 8001c94:	3bfa0000 	.word	0x3bfa0000

08001c98 <ICM20602_clearAngle>:
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
}

void ICM20602_clearAngle(void)
{
    pitchAngle = 0.0f;
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <ICM20602_clearAngle+0x10>)
    rollAngle  = 0.0f;
 8001c9a:	4904      	ldr	r1, [pc, #16]	; (8001cac <ICM20602_clearAngle+0x14>)
    yawAngle   = 0.0f;
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <ICM20602_clearAngle+0x18>)
    pitchAngle = 0.0f;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	6003      	str	r3, [r0, #0]
    rollAngle  = 0.0f;
 8001ca2:	600b      	str	r3, [r1, #0]
    yawAngle   = 0.0f;
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000734 	.word	0x20000734
 8001cac:	20000738 	.word	0x20000738
 8001cb0:	2000076c 	.word	0x2000076c

08001cb4 <ICM20602_medianFilter>:
    float tmp;
    int8_t i, j, a, b;

    for (i = 0; i < 3; i ++) {

    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001cb4:	4a86      	ldr	r2, [pc, #536]	; (8001ed0 <ICM20602_medianFilter+0x21c>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
    	gyro_mdat[i][0] = gyro[i];
 8001cb6:	4887      	ldr	r0, [pc, #540]	; (8001ed4 <ICM20602_medianFilter+0x220>)

    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001cb8:	4b87      	ldr	r3, [pc, #540]	; (8001ed8 <ICM20602_medianFilter+0x224>)
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001cba:	ed92 5a01 	vldr	s10, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001cbe:	ed90 6a00 	vldr	s12, [r0]
    	acc_mdat[i][1]  = acc_mdat[i][0];
    	acc_mdat[i][0]  = acc[i];
 8001cc2:	4986      	ldr	r1, [pc, #536]	; (8001edc <ICM20602_medianFilter+0x228>)
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001cc4:	ed92 7a00 	vldr	s14, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001cc8:	edd3 5a01 	vldr	s11, [r3, #4]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
    	acc_mdat[i][0]  = acc[i];
 8001cd0:	edd1 6a00 	vldr	s13, [r1]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001cd4:	ed82 5a02 	vstr	s10, [r2, #8]

    	a = 0;
    	b = 2;

    	for (j = 2; j >= 0; j--) {
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001cd8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001ce0:	ed82 7a01 	vstr	s14, [r2, #4]
    	gyro_mdat[i][0] = gyro[i];
 8001ce4:	ed82 6a00 	vstr	s12, [r2]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001ce8:	edc3 5a02 	vstr	s11, [r3, #8]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001cec:	edc3 7a01 	vstr	s15, [r3, #4]
    	acc_mdat[i][0]  = acc[i];
 8001cf0:	edc3 6a00 	vstr	s13, [r3]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001cf4:	dd05      	ble.n	8001d02 <ICM20602_medianFilter+0x4e>
 8001cf6:	eef0 4a46 	vmov.f32	s9, s12
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001cfa:	eeb0 6a45 	vmov.f32	s12, s10
    	gyro_mdat[i][0] = gyro[i];
 8001cfe:	eeb0 5a64 	vmov.f32	s10, s9
    			tmp         = gyro_tmp[a];
    			gyro_tmp[a] = gyro_tmp[b];
    			gyro_tmp[b] = tmp;
    		}
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001d02:	eef4 5ae6 	vcmpe.f32	s11, s13
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	d505      	bpl.n	8001d18 <ICM20602_medianFilter+0x64>
 8001d0c:	eef0 4a66 	vmov.f32	s9, s13
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d10:	eef0 6a65 	vmov.f32	s13, s11
    	acc_mdat[i][0]  = acc[i];
 8001d14:	eef0 5a64 	vmov.f32	s11, s9
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d18:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001d24:	bf98      	it	ls
 8001d26:	eeb0 5a47 	vmovls.f32	s10, s14
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	bf98      	it	ls
 8001d30:	eef0 5a67 	vmovls.f32	s11, s15
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d34:	ed92 3a04 	vldr	s6, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001d38:	edd0 4a01 	vldr	s9, [r0, #4]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001d3c:	ed92 7a03 	vldr	s14, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d40:	ed93 4a04 	vldr	s8, [r3, #16]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001d44:	edd3 7a03 	vldr	s15, [r3, #12]
    	acc_mdat[i][0]  = acc[i];
 8001d48:	edd1 3a01 	vldr	s7, [r1, #4]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d4c:	ed82 3a05 	vstr	s6, [r2, #20]
				acc_tmp[b]  = tmp;
			}
    		a = j-1;
    		b = j;
    	}
    	gyro[i] = gyro_tmp[1];
 8001d50:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8001d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001d58:	eef4 6ae5 	vcmpe.f32	s13, s11
    	gyro[i] = gyro_tmp[1];
 8001d5c:	bfb8      	it	lt
 8001d5e:	eeb0 6a45 	vmovlt.f32	s12, s10
    	acc[i]  = acc_tmp[1];
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d66:	eeb4 3ae4 	vcmpe.f32	s6, s9
    	acc[i]  = acc_tmp[1];
 8001d6a:	bfb8      	it	lt
 8001d6c:	eef0 6a65 	vmovlt.f32	s13, s11
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	gyro[i] = gyro_tmp[1];
 8001d74:	ed80 6a00 	vstr	s12, [r0]
    	acc[i]  = acc_tmp[1];
 8001d78:	edc1 6a00 	vstr	s13, [r1]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001d7c:	ed82 7a04 	vstr	s14, [r2, #16]
    	gyro_mdat[i][0] = gyro[i];
 8001d80:	edc2 4a03 	vstr	s9, [r2, #12]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001d84:	ed83 4a05 	vstr	s8, [r3, #20]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001d88:	edc3 7a04 	vstr	s15, [r3, #16]
    	acc_mdat[i][0]  = acc[i];
 8001d8c:	edc3 3a03 	vstr	s7, [r3, #12]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001d90:	d505      	bpl.n	8001d9e <ICM20602_medianFilter+0xea>
 8001d92:	eef0 6a64 	vmov.f32	s13, s9
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001d96:	eef0 4a43 	vmov.f32	s9, s6
    	gyro_mdat[i][0] = gyro[i];
 8001d9a:	eeb0 3a66 	vmov.f32	s6, s13
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001d9e:	eeb4 4ae3 	vcmpe.f32	s8, s7
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d505      	bpl.n	8001db4 <ICM20602_medianFilter+0x100>
 8001da8:	eef0 6a63 	vmov.f32	s13, s7
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001dac:	eef0 3a44 	vmov.f32	s7, s8
    	acc_mdat[i][0]  = acc[i];
 8001db0:	eeb0 4a66 	vmov.f32	s8, s13
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001db4:	eeb4 7ac3 	vcmpe.f32	s14, s6
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	eef4 7ac4 	vcmpe.f32	s15, s8
 8001dc0:	bf88      	it	hi
 8001dc2:	eeb0 7a43 	vmovhi.f32	s14, s6
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	bf88      	it	hi
 8001dcc:	eef0 7a44 	vmovhi.f32	s15, s8
    	gyro[i] = gyro_tmp[1];
 8001dd0:	eeb4 7ae4 	vcmpe.f32	s14, s9
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001dd4:	ed92 5a07 	vldr	s10, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001dd8:	ed90 4a02 	vldr	s8, [r0, #8]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001ddc:	ed92 6a06 	vldr	s12, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001de0:	edd3 5a07 	vldr	s11, [r3, #28]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001de4:	edd3 6a06 	vldr	s13, [r3, #24]
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001de8:	ed82 5a08 	vstr	s10, [r2, #32]
    	gyro[i] = gyro_tmp[1];
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001df0:	eef4 7ae3 	vcmpe.f32	s15, s7
    	gyro[i] = gyro_tmp[1];
 8001df4:	bfb8      	it	lt
 8001df6:	eeb0 7a64 	vmovlt.f32	s14, s9
    	acc[i]  = acc_tmp[1];
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc_mdat[i][0]  = acc[i];
 8001dfe:	edd1 4a02 	vldr	s9, [r1, #8]
    	gyro[i] = gyro_tmp[1];
 8001e02:	ed80 7a01 	vstr	s14, [r0, #4]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e06:	eeb4 5ac4 	vcmpe.f32	s10, s8
    	acc[i]  = acc_tmp[1];
 8001e0a:	bfb8      	it	lt
 8001e0c:	eef0 7a63 	vmovlt.f32	s15, s7
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	acc[i]  = acc_tmp[1];
 8001e14:	edc1 7a01 	vstr	s15, [r1, #4]
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e18:	ed82 6a07 	vstr	s12, [r2, #28]
    	gyro_mdat[i][0] = gyro[i];
 8001e1c:	ed82 4a06 	vstr	s8, [r2, #24]
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e20:	edc3 5a08 	vstr	s11, [r3, #32]
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e24:	edc3 6a07 	vstr	s13, [r3, #28]
    	acc_mdat[i][0]  = acc[i];
 8001e28:	edc3 4a06 	vstr	s9, [r3, #24]
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e2c:	d505      	bpl.n	8001e3a <ICM20602_medianFilter+0x186>
 8001e2e:	eef0 7a44 	vmov.f32	s15, s8
    	gyro_mdat[i][2] = gyro_mdat[i][1];
 8001e32:	eeb0 4a45 	vmov.f32	s8, s10
    	gyro_mdat[i][0] = gyro[i];
 8001e36:	eeb0 5a67 	vmov.f32	s10, s15
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e3a:	eef4 5ae4 	vcmpe.f32	s11, s9
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	d505      	bpl.n	8001e50 <ICM20602_medianFilter+0x19c>
 8001e44:	eef0 7a64 	vmov.f32	s15, s9
    	acc_mdat[i][2]  = acc_mdat[i][1];
 8001e48:	eef0 4a65 	vmov.f32	s9, s11
    	acc_mdat[i][0]  = acc[i];
 8001e4c:	eef0 5a67 	vmov.f32	s11, s15
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e50:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8001e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e58:	d505      	bpl.n	8001e66 <ICM20602_medianFilter+0x1b2>
 8001e5a:	eef0 7a46 	vmov.f32	s15, s12
 8001e5e:	eeb0 6a45 	vmov.f32	s12, s10
    	gyro_mdat[i][1] = gyro_mdat[i][0];
 8001e62:	eeb0 5a67 	vmov.f32	s10, s15
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e66:	eef4 5ae6 	vcmpe.f32	s11, s13
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	d505      	bpl.n	8001e7c <ICM20602_medianFilter+0x1c8>
 8001e70:	eef0 7a66 	vmov.f32	s15, s13
 8001e74:	eef0 6a65 	vmov.f32	s13, s11
    	acc_mdat[i][1]  = acc_mdat[i][0];
 8001e78:	eef0 5a67 	vmov.f32	s11, s15
    		if (gyro_tmp[a] > gyro_tmp[b]) {
 8001e7c:	eeb4 4ac6 	vcmpe.f32	s8, s12
 8001e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e84:	dd05      	ble.n	8001e92 <ICM20602_medianFilter+0x1de>
 8001e86:	eef0 7a44 	vmov.f32	s15, s8
 8001e8a:	eeb0 4a46 	vmov.f32	s8, s12
 8001e8e:	eeb0 6a67 	vmov.f32	s12, s15
    		if (acc_tmp[a]  > acc_tmp[b]) {
 8001e92:	eef4 6ae4 	vcmpe.f32	s13, s9
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	d505      	bpl.n	8001ea8 <ICM20602_medianFilter+0x1f4>
 8001e9c:	eef0 7a64 	vmov.f32	s15, s9
 8001ea0:	eef0 4a66 	vmov.f32	s9, s13
 8001ea4:	eef0 6a67 	vmov.f32	s13, s15
    	gyro[i] = gyro_tmp[1];
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <ICM20602_medianFilter+0x22c>)
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <ICM20602_medianFilter+0x230>)
 8001eac:	ed80 6a02 	vstr	s12, [r0, #8]
    	acc[i]  = acc_tmp[1];
 8001eb0:	edc1 6a02 	vstr	s13, [r1, #8]
    for (i = 0; i < 3; i ++) {
 8001eb4:	ed82 4a00 	vstr	s8, [r2]
 8001eb8:	edc3 4a00 	vstr	s9, [r3]
 8001ebc:	ed82 6a01 	vstr	s12, [r2, #4]
 8001ec0:	edc3 6a01 	vstr	s13, [r3, #4]
 8001ec4:	ed82 5a02 	vstr	s10, [r2, #8]
 8001ec8:	edc3 5a02 	vstr	s11, [r3, #8]
    }
}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000574 	.word	0x20000574
 8001ed4:	200006bc 	.word	0x200006bc
 8001ed8:	20000540 	.word	0x20000540
 8001edc:	2000065c 	.word	0x2000065c
 8001ee0:	200005a4 	.word	0x200005a4
 8001ee4:	20000564 	.word	0x20000564

08001ee8 <ICM20602_read_IMU_data>:
void ICM20602_read_IMU_data() {
 8001ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eec:	ed2d 8b02 	vpush	{d8}
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001ef0:	2200      	movs	r2, #0
void ICM20602_read_IMU_data() {
 8001ef2:	b084      	sub	sp, #16
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001ef4:	2110      	movs	r1, #16
 8001ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001efa:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001efe:	f005 f8d9 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001f02:	21bc      	movs	r1, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f04:	2301      	movs	r3, #1
 8001f06:	aa03      	add	r2, sp, #12
    send_data[0]= reg | 0x80;
 8001f08:	f88d 1008 	strb.w	r1, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f0c:	9400      	str	r4, [sp, #0]
 8001f0e:	a902      	add	r1, sp, #8
 8001f10:	48d2      	ldr	r0, [pc, #840]	; (800225c <ICM20602_read_IMU_data+0x374>)
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001f12:	f8df 8354 	ldr.w	r8, [pc, #852]	; 8002268 <ICM20602_read_IMU_data+0x380>
 8001f16:	ed9f 8ad2 	vldr	s16, [pc, #840]	; 8002260 <ICM20602_read_IMU_data+0x378>
    send_data[0]=0x00;
 8001f1a:	2500      	movs	r5, #0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f1c:	f006 f842 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f20:	2301      	movs	r3, #1
 8001f22:	9400      	str	r4, [sp, #0]
 8001f24:	aa03      	add	r2, sp, #12
 8001f26:	a902      	add	r1, sp, #8
 8001f28:	48cc      	ldr	r0, [pc, #816]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8001f2a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f2e:	f006 f839 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f32:	2110      	movs	r1, #16
 8001f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f38:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8001f3a:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f3e:	f005 f8b9 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f42:	462a      	mov	r2, r5
 8001f44:	2110      	movs	r1, #16
 8001f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4a:	f005 f8b3 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001f4e:	27bb      	movs	r7, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f50:	9400      	str	r4, [sp, #0]
 8001f52:	2301      	movs	r3, #1
 8001f54:	aa03      	add	r2, sp, #12
 8001f56:	a902      	add	r1, sp, #8
 8001f58:	48c0      	ldr	r0, [pc, #768]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8001f5a:	f88d 7008 	strb.w	r7, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f5e:	f006 f821 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f62:	2301      	movs	r3, #1
 8001f64:	9400      	str	r4, [sp, #0]
 8001f66:	aa03      	add	r2, sp, #12
 8001f68:	a902      	add	r1, sp, #8
 8001f6a:	48bc      	ldr	r0, [pc, #752]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8001f6c:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001f70:	f006 f818 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8001f74:	f89d 700c 	ldrb.w	r7, [sp, #12]
    return((HiByte<<8) | LoByte);
 8001f78:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2110      	movs	r1, #16
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001f84:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001f86:	f005 f895 	bl	80070b4 <HAL_GPIO_WritePin>
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001f8a:	ed98 7a00 	vldr	s14, [r8]
 8001f8e:	4fb5      	ldr	r7, [pc, #724]	; (8002264 <ICM20602_read_IMU_data+0x37c>)
 8001f90:	ee07 6a90 	vmov	s15, r6
 8001f94:	ee27 7a08 	vmul.f32	s14, s14, s16
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001f9c:	462a      	mov	r2, r5
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001fa2:	2110      	movs	r1, #16
	acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 8001fa4:	edc7 7a00 	vstr	s15, [r7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fac:	f005 f882 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001fb0:	26be      	movs	r6, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fb2:	9400      	str	r4, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	aa03      	add	r2, sp, #12
 8001fb8:	a902      	add	r1, sp, #8
 8001fba:	48a8      	ldr	r0, [pc, #672]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8001fbc:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc0:	f005 fff0 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	9400      	str	r4, [sp, #0]
 8001fc8:	aa03      	add	r2, sp, #12
 8001fca:	a902      	add	r1, sp, #8
 8001fcc:	48a3      	ldr	r0, [pc, #652]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8001fce:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001fd2:	f005 ffe7 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fd6:	2110      	movs	r1, #16
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fdc:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8001fde:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001fe2:	f005 f867 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001fe6:	462a      	mov	r2, r5
 8001fe8:	2110      	movs	r1, #16
 8001fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fee:	f005 f861 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8001ff2:	f04f 0cbd 	mov.w	ip, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8001ff6:	9400      	str	r4, [sp, #0]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	aa03      	add	r2, sp, #12
 8001ffc:	a902      	add	r1, sp, #8
 8001ffe:	4897      	ldr	r0, [pc, #604]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002000:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002004:	f005 ffce 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002008:	2301      	movs	r3, #1
 800200a:	9400      	str	r4, [sp, #0]
 800200c:	aa03      	add	r2, sp, #12
 800200e:	a902      	add	r1, sp, #8
 8002010:	4892      	ldr	r0, [pc, #584]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002012:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002016:	f005 ffc5 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800201a:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800201e:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002022:	2201      	movs	r2, #1
 8002024:	2110      	movs	r1, #16
 8002026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800202a:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800202c:	f005 f842 	bl	80070b4 <HAL_GPIO_WritePin>
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002030:	ed98 7a00 	vldr	s14, [r8]
 8002034:	ee07 6a90 	vmov	s15, r6
 8002038:	ee27 7a08 	vmul.f32	s14, s14, s16
 800203c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002040:	462a      	mov	r2, r5
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002042:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002046:	2110      	movs	r1, #16
    acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002048:	edc7 7a01 	vstr	s15, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800204c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002050:	f005 f830 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002054:	26c0      	movs	r6, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002056:	9400      	str	r4, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	aa03      	add	r2, sp, #12
 800205c:	a902      	add	r1, sp, #8
 800205e:	487f      	ldr	r0, [pc, #508]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002060:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002064:	f005 ff9e 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002068:	2301      	movs	r3, #1
 800206a:	9400      	str	r4, [sp, #0]
 800206c:	aa03      	add	r2, sp, #12
 800206e:	a902      	add	r1, sp, #8
 8002070:	487a      	ldr	r0, [pc, #488]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002072:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002076:	f005 ff95 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800207a:	2110      	movs	r1, #16
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002080:	2201      	movs	r2, #1
    val = RxBuffer[0];
 8002082:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002086:	f005 f815 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800208a:	462a      	mov	r2, r5
 800208c:	2110      	movs	r1, #16
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002092:	f005 f80f 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002096:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800209a:	9400      	str	r4, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	aa03      	add	r2, sp, #12
 80020a0:	a902      	add	r1, sp, #8
 80020a2:	486e      	ldr	r0, [pc, #440]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80020a4:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020a8:	f005 ff7c 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ac:	2301      	movs	r3, #1
 80020ae:	9400      	str	r4, [sp, #0]
 80020b0:	aa03      	add	r2, sp, #12
 80020b2:	a902      	add	r1, sp, #8
 80020b4:	4869      	ldr	r0, [pc, #420]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80020b6:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020ba:	f005 ff73 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80020be:	f89d 900c 	ldrb.w	r9, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80020c2:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2110      	movs	r1, #16
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80020ce:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80020d0:	f004 fff0 	bl	80070b4 <HAL_GPIO_WritePin>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80020d4:	ed98 7a00 	vldr	s14, [r8]
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80020d8:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800226c <ICM20602_read_IMU_data+0x384>
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80020dc:	ee07 6a90 	vmov	s15, r6
 80020e0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80020e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020e8:	462a      	mov	r2, r5
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80020ea:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020ee:	2110      	movs	r1, #16
    acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 80020f0:	edc7 7a02 	vstr	s15, [r7, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f8:	f004 ffdc 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80020fc:	26c4      	movs	r6, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80020fe:	9400      	str	r4, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	aa03      	add	r2, sp, #12
 8002104:	a902      	add	r1, sp, #8
 8002106:	4855      	ldr	r0, [pc, #340]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 8002108:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800210c:	f005 ff4a 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002110:	2301      	movs	r3, #1
 8002112:	9400      	str	r4, [sp, #0]
 8002114:	aa03      	add	r2, sp, #12
 8002116:	a902      	add	r1, sp, #8
 8002118:	4850      	ldr	r0, [pc, #320]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800211a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800211e:	f005 ff41 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002122:	2110      	movs	r1, #16
 8002124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002128:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800212a:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800212e:	f004 ffc1 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002132:	462a      	mov	r2, r5
 8002134:	2110      	movs	r1, #16
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f004 ffbb 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800213e:	f04f 0cc3 	mov.w	ip, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002142:	9400      	str	r4, [sp, #0]
 8002144:	2301      	movs	r3, #1
 8002146:	aa03      	add	r2, sp, #12
 8002148:	a902      	add	r1, sp, #8
 800214a:	4844      	ldr	r0, [pc, #272]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 800214c:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002150:	f005 ff28 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002154:	2301      	movs	r3, #1
 8002156:	9400      	str	r4, [sp, #0]
 8002158:	aa03      	add	r2, sp, #12
 800215a:	a902      	add	r1, sp, #8
 800215c:	483f      	ldr	r0, [pc, #252]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 800215e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002162:	f005 ff1f 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002166:	f89d 800c 	ldrb.w	r8, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800216a:	ea46 2608 	orr.w	r6, r6, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800216e:	2201      	movs	r2, #1
 8002170:	2110      	movs	r1, #16
 8002172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002176:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002178:	f004 ff9c 	bl	80070b4 <HAL_GPIO_WritePin>
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800217c:	ee07 6a90 	vmov	s15, r6
 8002180:	ed99 7a00 	vldr	s14, [r9]
 8002184:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8002270 <ICM20602_read_IMU_data+0x388>
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800218c:	462a      	mov	r2, r5
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 800218e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002192:	2110      	movs	r1, #16
    gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002194:	edc8 7a00 	vstr	s15, [r8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219c:	f004 ff8a 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021a0:	26c6      	movs	r6, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021a2:	9400      	str	r4, [sp, #0]
 80021a4:	2301      	movs	r3, #1
 80021a6:	aa03      	add	r2, sp, #12
 80021a8:	a902      	add	r1, sp, #8
 80021aa:	482c      	ldr	r0, [pc, #176]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80021ac:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b0:	f005 fef8 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021b4:	2301      	movs	r3, #1
 80021b6:	9400      	str	r4, [sp, #0]
 80021b8:	aa03      	add	r2, sp, #12
 80021ba:	a902      	add	r1, sp, #8
 80021bc:	4827      	ldr	r0, [pc, #156]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 80021be:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021c2:	f005 feef 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021c6:	2110      	movs	r1, #16
 80021c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021cc:	2201      	movs	r2, #1
    val = RxBuffer[0];
 80021ce:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80021d2:	f004 ff6f 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80021d6:	462a      	mov	r2, r5
 80021d8:	2110      	movs	r1, #16
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f004 ff69 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80021e2:	f04f 0cc5 	mov.w	ip, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021e6:	9400      	str	r4, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	aa03      	add	r2, sp, #12
 80021ec:	a902      	add	r1, sp, #8
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 80021f0:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021f4:	f005 fed6 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80021f8:	2301      	movs	r3, #1
 80021fa:	9400      	str	r4, [sp, #0]
 80021fc:	aa03      	add	r2, sp, #12
 80021fe:	a902      	add	r1, sp, #8
 8002200:	4816      	ldr	r0, [pc, #88]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]=0x00;
 8002202:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002206:	f005 fecd 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 800220a:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 800220e:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002212:	2201      	movs	r2, #1
 8002214:	2110      	movs	r1, #16
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800221a:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800221c:	f004 ff4a 	bl	80070b4 <HAL_GPIO_WritePin>
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002220:	ee07 6a90 	vmov	s15, r6
 8002224:	ed99 7a00 	vldr	s14, [r9]
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800222c:	462a      	mov	r2, r5
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 800222e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002232:	2110      	movs	r1, #16
    gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002234:	edc8 7a01 	vstr	s15, [r8, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223c:	f004 ff3a 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002240:	26c8      	movs	r6, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002242:	9400      	str	r4, [sp, #0]
 8002244:	2301      	movs	r3, #1
 8002246:	aa03      	add	r2, sp, #12
 8002248:	a902      	add	r1, sp, #8
 800224a:	4804      	ldr	r0, [pc, #16]	; (800225c <ICM20602_read_IMU_data+0x374>)
    send_data[0]= reg | 0x80;
 800224c:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002250:	f005 fea8 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002254:	2301      	movs	r3, #1
 8002256:	9400      	str	r4, [sp, #0]
 8002258:	e00c      	b.n	8002274 <ICM20602_read_IMU_data+0x38c>
 800225a:	bf00      	nop
 800225c:	20000774 	.word	0x20000774
 8002260:	411ce80a 	.word	0x411ce80a
 8002264:	2000065c 	.word	0x2000065c
 8002268:	2000053c 	.word	0x2000053c
 800226c:	20000570 	.word	0x20000570
 8002270:	200006bc 	.word	0x200006bc
 8002274:	aa03      	add	r2, sp, #12
 8002276:	a902      	add	r1, sp, #8
 8002278:	48b6      	ldr	r0, [pc, #728]	; (8002554 <ICM20602_read_IMU_data+0x66c>)
    send_data[0]=0x00;
 800227a:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800227e:	f005 fe91 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002282:	2110      	movs	r1, #16
 8002284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002288:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800228a:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800228e:	f004 ff11 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002292:	462a      	mov	r2, r5
 8002294:	2110      	movs	r1, #16
 8002296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229a:	f004 ff0b 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800229e:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022a2:	9400      	str	r4, [sp, #0]
 80022a4:	2301      	movs	r3, #1
 80022a6:	aa03      	add	r2, sp, #12
 80022a8:	a902      	add	r1, sp, #8
 80022aa:	48aa      	ldr	r0, [pc, #680]	; (8002554 <ICM20602_read_IMU_data+0x66c>)
    send_data[0]= reg | 0x80;
 80022ac:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b0:	f005 fe78 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022b4:	2301      	movs	r3, #1
 80022b6:	9400      	str	r4, [sp, #0]
 80022b8:	aa03      	add	r2, sp, #12
 80022ba:	a902      	add	r1, sp, #8
 80022bc:	48a5      	ldr	r0, [pc, #660]	; (8002554 <ICM20602_read_IMU_data+0x66c>)
    send_data[0]=0x00;
 80022be:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80022c2:	f005 fe6f 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80022c6:	f89d a00c 	ldrb.w	sl, [sp, #12]
    return ((HiByte<<8) | LoByte);
 80022ca:	ea46 260a 	orr.w	r6, r6, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022ce:	2110      	movs	r1, #16
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d4:	2201      	movs	r2, #1
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80022d6:	b236      	sxth	r6, r6
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80022d8:	f004 feec 	bl	80070b4 <HAL_GPIO_WritePin>
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80022dc:	ee07 6a90 	vmov	s15, r6
 80022e0:	ed99 7a00 	vldr	s14, [r9]
 80022e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    send_data[0]= reg | 0x80;
 80022e8:	26c2      	movs	r6, #194	; 0xc2
    gyro[2] = ICM20602_getGyrZvalue() * gRes;
 80022ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ee:	edc8 7a02 	vstr	s15, [r8, #8]
    ICM20602_medianFilter();
 80022f2:	f7ff fcdf 	bl	8001cb4 <ICM20602_medianFilter>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80022f6:	462a      	mov	r2, r5
 80022f8:	2110      	movs	r1, #16
 80022fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fe:	f004 fed9 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002302:	9400      	str	r4, [sp, #0]
 8002304:	2301      	movs	r3, #1
 8002306:	aa03      	add	r2, sp, #12
 8002308:	a902      	add	r1, sp, #8
 800230a:	4892      	ldr	r0, [pc, #584]	; (8002554 <ICM20602_read_IMU_data+0x66c>)
    send_data[0]= reg | 0x80;
 800230c:	f88d 6008 	strb.w	r6, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002310:	f005 fe48 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002314:	2301      	movs	r3, #1
 8002316:	9400      	str	r4, [sp, #0]
 8002318:	aa03      	add	r2, sp, #12
 800231a:	a902      	add	r1, sp, #8
 800231c:	488d      	ldr	r0, [pc, #564]	; (8002554 <ICM20602_read_IMU_data+0x66c>)
    send_data[0]=0x00;
 800231e:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002322:	f005 fe3f 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002326:	2110      	movs	r1, #16
 8002328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232c:	2201      	movs	r2, #1
    val = RxBuffer[0];
 800232e:	f89d 600c 	ldrb.w	r6, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002332:	f004 febf 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002336:	462a      	mov	r2, r5
 8002338:	2110      	movs	r1, #16
 800233a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233e:	f004 feb9 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002342:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002346:	9400      	str	r4, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	aa03      	add	r2, sp, #12
 800234c:	a902      	add	r1, sp, #8
 800234e:	4881      	ldr	r0, [pc, #516]	; (8002554 <ICM20602_read_IMU_data+0x66c>)
    send_data[0]= reg | 0x80;
 8002350:	f88d c008 	strb.w	ip, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002354:	f005 fe26 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002358:	2301      	movs	r3, #1
 800235a:	9400      	str	r4, [sp, #0]
 800235c:	aa03      	add	r2, sp, #12
 800235e:	a902      	add	r1, sp, #8
 8002360:	487c      	ldr	r0, [pc, #496]	; (8002554 <ICM20602_read_IMU_data+0x66c>)
    send_data[0]=0x00;
 8002362:	f88d 5008 	strb.w	r5, [sp, #8]
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002366:	f005 fe1d 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800236a:	2201      	movs	r2, #1
 800236c:	2110      	movs	r1, #16
 800236e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002372:	f89d 400c 	ldrb.w	r4, [sp, #12]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002376:	f004 fe9d 	bl	80070b4 <HAL_GPIO_WritePin>
void ICM20602_IMU_compensate(void)
{
    int k;
    for(k=0;k<3;k++){
        acc_comp[k] = acc[k] - acc_off[k];
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800237a:	4977      	ldr	r1, [pc, #476]	; (8002558 <ICM20602_read_IMU_data+0x670>)
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 800237c:	4b77      	ldr	r3, [pc, #476]	; (800255c <ICM20602_read_IMU_data+0x674>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800237e:	edd1 7a00 	vldr	s15, [r1]
 8002382:	edd8 3a00 	vldr	s7, [r8]
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 8002386:	edd3 5a00 	vldr	s11, [r3]
 800238a:	4b75      	ldr	r3, [pc, #468]	; (8002560 <ICM20602_read_IMU_data+0x678>)
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 800238c:	ed9f 6a75 	vldr	s12, [pc, #468]	; 8002564 <ICM20602_read_IMU_data+0x67c>
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002390:	ed93 7a00 	vldr	s14, [r3]
        acc_comp[k] = acc[k] - acc_off[k];
 8002394:	4a74      	ldr	r2, [pc, #464]	; (8002568 <ICM20602_read_IMU_data+0x680>)
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002396:	ed91 5a02 	vldr	s10, [r1, #8]
 800239a:	ed98 3a01 	vldr	s6, [r8, #4]
 800239e:	ed91 4a01 	vldr	s8, [r1, #4]
 80023a2:	edd8 4a02 	vldr	s9, [r8, #8]
        acc_comp[k] = acc[k] - acc_off[k];
 80023a6:	edd2 0a00 	vldr	s1, [r2]
 80023aa:	ed92 1a01 	vldr	s2, [r2, #4]
 80023ae:	edd7 2a00 	vldr	s5, [r7]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80023b2:	ed93 2a01 	vldr	s4, [r3, #4]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*2;
 80023b6:	486d      	ldr	r0, [pc, #436]	; (800256c <ICM20602_read_IMU_data+0x684>)
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*2;
 80023b8:	496d      	ldr	r1, [pc, #436]	; (8002570 <ICM20602_read_IMU_data+0x688>)
    return ((HiByte<<8) | LoByte);
 80023ba:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023be:	b236      	sxth	r6, r6
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023c0:	ee73 3ae7 	vsub.f32	s7, s7, s15
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023c4:	ee07 6a90 	vmov	s15, r6
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 80023c8:	4c6a      	ldr	r4, [pc, #424]	; (8002574 <ICM20602_read_IMU_data+0x68c>)
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ce:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 80023d2:	eee7 1a86 	vfma.f32	s3, s15, s12
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80023d6:	ee33 7a87 	vadd.f32	s14, s7, s14
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 80023da:	edd4 6a00 	vldr	s13, [r4]
        acc_comp[k] = acc[k] - acc_off[k];
 80023de:	edd2 7a02 	vldr	s15, [r2, #8]
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023e2:	4a65      	ldr	r2, [pc, #404]	; (8002578 <ICM20602_read_IMU_data+0x690>)
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 80023e4:	ed93 6a02 	vldr	s12, [r3, #8]
    IMU_tmp = (ICM20602_getIMUTemp() / 326.8f) + 25.0f;
 80023e8:	edc2 1a00 	vstr	s3, [r2]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 80023ec:	ee33 4a44 	vsub.f32	s8, s6, s8
 80023f0:	ee74 4ac5 	vsub.f32	s9, s9, s10
    pitchAngle = pitchAngle + ICM20602_integral(gyro_comp[0], gyro_prv[0], imu_dt)*2;//とりあえず変えておく
 80023f4:	eee5 6a87 	vfma.f32	s13, s11, s14
        acc_comp[k] = acc[k] - acc_off[k];
 80023f8:	4a60      	ldr	r2, [pc, #384]	; (800257c <ICM20602_read_IMU_data+0x694>)
 80023fa:	ed97 3a01 	vldr	s6, [r7, #4]
 80023fe:	ed97 5a02 	vldr	s10, [r7, #8]
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*2;
 8002402:	ed90 7a00 	vldr	s14, [r0]
        acc_comp[k] = acc[k] - acc_off[k];
 8002406:	ee33 3a41 	vsub.f32	s6, s6, s2
 800240a:	ee35 5a67 	vsub.f32	s10, s10, s15
 800240e:	ee72 2ae0 	vsub.f32	s5, s5, s1
    while (deg < -180.0f) deg += 360.0f;
 8002412:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8002580 <ICM20602_read_IMU_data+0x698>
        acc_comp[k] = acc[k] - acc_off[k];
 8002416:	edc2 2a00 	vstr	s5, [r2]
 800241a:	ed82 3a01 	vstr	s6, [r2, #4]
 800241e:	ed82 5a02 	vstr	s10, [r2, #8]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002422:	ee34 2a02 	vadd.f32	s4, s8, s4
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002426:	4a57      	ldr	r2, [pc, #348]	; (8002584 <ICM20602_read_IMU_data+0x69c>)
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*2;
 8002428:	edd1 7a00 	vldr	s15, [r1]
        gyro_comp[k] = gyro[k] - gyro_off[k];
 800242c:	edc2 3a00 	vstr	s7, [r2]
    return (val + val_prv) * dt / 2.0f;   // trapezoidal formula
 8002430:	ee34 6a86 	vadd.f32	s12, s9, s12
    while (deg < -180.0f) deg += 360.0f;
 8002434:	eef4 6ac1 	vcmpe.f32	s13, s2
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rollAngle  = rollAngle  + ICM20602_integral(gyro_comp[1], gyro_prv[1], imu_dt)*2;
 800243c:	eea5 7a82 	vfma.f32	s14, s11, s4
    yawAngle   = yawAngle   + ICM20602_integral(gyro_comp[2], gyro_prv[2], imu_dt)*2;
 8002440:	eee5 7a86 	vfma.f32	s15, s11, s12
        gyro_comp[k] = gyro[k] - gyro_off[k];
 8002444:	ed82 4a01 	vstr	s8, [r2, #4]
 8002448:	edc2 4a02 	vstr	s9, [r2, #8]
    while (deg < -180.0f) deg += 360.0f;
 800244c:	d50c      	bpl.n	8002468 <ICM20602_read_IMU_data+0x580>
 800244e:	ed9f 5a4e 	vldr	s10, [pc, #312]	; 8002588 <ICM20602_read_IMU_data+0x6a0>
 8002452:	eddf 5a4e 	vldr	s11, [pc, #312]	; 800258c <ICM20602_read_IMU_data+0x6a4>
 8002456:	eeb0 6a66 	vmov.f32	s12, s13
 800245a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002466:	d4f6      	bmi.n	8002456 <ICM20602_read_IMU_data+0x56e>
    while (deg >= 180.0f) deg -= 360.0f;
 8002468:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8002590 <ICM20602_read_IMU_data+0x6a8>
 800246c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	db0c      	blt.n	8002490 <ICM20602_read_IMU_data+0x5a8>
 8002476:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8002588 <ICM20602_read_IMU_data+0x6a0>
 800247a:	eddf 5a46 	vldr	s11, [pc, #280]	; 8002594 <ICM20602_read_IMU_data+0x6ac>
 800247e:	eeb0 6a66 	vmov.f32	s12, s13
 8002482:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800248e:	daf6      	bge.n	800247e <ICM20602_read_IMU_data+0x596>
    while (deg < -180.0f) deg += 360.0f;
 8002490:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8002580 <ICM20602_read_IMU_data+0x698>
    pitchAngle = ICM20602_normAngle(pitchAngle);
 8002494:	edc4 6a00 	vstr	s13, [r4]
    while (deg < -180.0f) deg += 360.0f;
 8002498:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	d50c      	bpl.n	80024bc <ICM20602_read_IMU_data+0x5d4>
 80024a2:	eddf 5a39 	vldr	s11, [pc, #228]	; 8002588 <ICM20602_read_IMU_data+0x6a0>
 80024a6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800258c <ICM20602_read_IMU_data+0x6a4>
 80024aa:	eef0 6a47 	vmov.f32	s13, s14
 80024ae:	eef4 6ac6 	vcmpe.f32	s13, s12
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80024ba:	d4f6      	bmi.n	80024aa <ICM20602_read_IMU_data+0x5c2>
    while (deg >= 180.0f) deg -= 360.0f;
 80024bc:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002590 <ICM20602_read_IMU_data+0x6a8>
 80024c0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	db0c      	blt.n	80024e4 <ICM20602_read_IMU_data+0x5fc>
 80024ca:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8002588 <ICM20602_read_IMU_data+0x6a0>
 80024ce:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002594 <ICM20602_read_IMU_data+0x6ac>
 80024d2:	eef0 6a47 	vmov.f32	s13, s14
 80024d6:	eef4 6ac6 	vcmpe.f32	s13, s12
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	ee37 7a65 	vsub.f32	s14, s14, s11
 80024e2:	daf6      	bge.n	80024d2 <ICM20602_read_IMU_data+0x5ea>
    while (deg < -180.0f) deg += 360.0f;
 80024e4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002580 <ICM20602_read_IMU_data+0x698>
    rollAngle  = ICM20602_normAngle(rollAngle);
 80024e8:	ed80 7a00 	vstr	s14, [r0]
    while (deg < -180.0f) deg += 360.0f;
 80024ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d50c      	bpl.n	8002510 <ICM20602_read_IMU_data+0x628>
 80024f6:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8002588 <ICM20602_read_IMU_data+0x6a0>
 80024fa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800258c <ICM20602_read_IMU_data+0x6a4>
 80024fe:	eeb0 7a67 	vmov.f32	s14, s15
 8002502:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800250e:	d4f6      	bmi.n	80024fe <ICM20602_read_IMU_data+0x616>
    while (deg >= 180.0f) deg -= 360.0f;
 8002510:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002590 <ICM20602_read_IMU_data+0x6a8>
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	db0c      	blt.n	8002538 <ICM20602_read_IMU_data+0x650>
 800251e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002588 <ICM20602_read_IMU_data+0x6a0>
 8002522:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002594 <ICM20602_read_IMU_data+0x6ac>
 8002526:	eeb0 7a67 	vmov.f32	s14, s15
 800252a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002536:	daf6      	bge.n	8002526 <ICM20602_read_IMU_data+0x63e>
    yawAngle   = ICM20602_normAngle(yawAngle);
 8002538:	edc1 7a00 	vstr	s15, [r1]
    gyro_prv[0] = gyro_comp[0];
 800253c:	edc3 3a00 	vstr	s7, [r3]
    gyro_prv[1] = gyro_comp[1];
 8002540:	ed83 4a01 	vstr	s8, [r3, #4]
    gyro_prv[2] = gyro_comp[2];
 8002544:	edc3 4a02 	vstr	s9, [r3, #8]
}
 8002548:	b004      	add	sp, #16
 800254a:	ecbd 8b02 	vpop	{d8}
 800254e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002552:	bf00      	nop
 8002554:	20000774 	.word	0x20000774
 8002558:	200006d4 	.word	0x200006d4
 800255c:	20000004 	.word	0x20000004
 8002560:	20000598 	.word	0x20000598
 8002564:	3b4889df 	.word	0x3b4889df
 8002568:	20000674 	.word	0x20000674
 800256c:	20000738 	.word	0x20000738
 8002570:	2000076c 	.word	0x2000076c
 8002574:	20000734 	.word	0x20000734
 8002578:	200005b8 	.word	0x200005b8
 800257c:	20000668 	.word	0x20000668
 8002580:	c3340000 	.word	0xc3340000
 8002584:	200006c8 	.word	0x200006c8
 8002588:	43b40000 	.word	0x43b40000
 800258c:	c4070000 	.word	0xc4070000
 8002590:	43340000 	.word	0x43340000
 8002594:	44070000 	.word	0x44070000

08002598 <ICM20602_IMU_calibration2>:
{
 8002598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800259c:	ed2d 8b06 	vpush	{d8-d10}
    double acc_sum[3]={0};
 80025a0:	2400      	movs	r4, #0
{
 80025a2:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    double acc_ave[3][10] = {{0.0}};
 80025a6:	22f0      	movs	r2, #240	; 0xf0
 80025a8:	4621      	mov	r1, r4
 80025aa:	a822      	add	r0, sp, #136	; 0x88
    double acc_sum[3]={0};
 80025ac:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80025b0:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80025b4:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
    double gyro_sum[3]={0};
 80025b8:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 80025bc:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
 80025c0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    double acc_ave[3][10] = {{0.0}};
 80025c4:	f007 fba0 	bl	8009d08 <memset>
    double gyro_ave[3][10] = {{0.0}};
 80025c8:	4621      	mov	r1, r4
 80025ca:	22f0      	movs	r2, #240	; 0xf0
 80025cc:	a85e      	add	r0, sp, #376	; 0x178
 80025ce:	f007 fb9b 	bl	8009d08 <memset>
    printf("put the IMU still!\n");
 80025d2:	48c9      	ldr	r0, [pc, #804]	; (80028f8 <ICM20602_IMU_calibration2+0x360>)
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80025d4:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 80028fc <ICM20602_IMU_calibration2+0x364>
    printf("put the IMU still!\n");
 80025d8:	f008 f88e 	bl	800a6f8 <puts>
    HAL_Delay(1000);
 80025dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025e0:	f003 f8a6 	bl	8005730 <HAL_Delay>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80025e4:	2200      	movs	r2, #0
 80025e6:	2300      	movs	r3, #0
    double cal_len = 0.0f;
 80025e8:	ec43 2b1a 	vmov	d10, r2, r3
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fd fe72 	bl	80002d8 <__aeabi_dsub>
 80025f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80025f8:	9309      	str	r3, [sp, #36]	; 0x24
 80025fa:	9008      	str	r0, [sp, #32]
 80025fc:	a3bc      	add	r3, pc, #752	; (adr r3, 80028f0 <ICM20602_IMU_calibration2+0x358>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002606:	f7fe faaf 	bl	8000b68 <__aeabi_dcmpgt>
 800260a:	2800      	cmp	r0, #0
 800260c:	d15d      	bne.n	80026ca <ICM20602_IMU_calibration2+0x132>
		|| (fabs(acc_ave[1][9] - acc_ave[1][0]) > SHRINK_ERROR)
 800260e:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	; 0xd8
 8002612:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8002616:	f7fd fe5f 	bl	80002d8 <__aeabi_dsub>
 800261a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800261e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002620:	900a      	str	r0, [sp, #40]	; 0x28
 8002622:	a3b3      	add	r3, pc, #716	; (adr r3, 80028f0 <ICM20602_IMU_calibration2+0x358>)
 8002624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002628:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800262c:	f7fe fa9c 	bl	8000b68 <__aeabi_dcmpgt>
 8002630:	2800      	cmp	r0, #0
 8002632:	d14a      	bne.n	80026ca <ICM20602_IMU_calibration2+0x132>
		|| (fabs(acc_ave[2][9] - acc_ave[2][0]) > SHRINK_ERROR)
 8002634:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8002638:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 800263c:	f7fd fe4c 	bl	80002d8 <__aeabi_dsub>
 8002640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002644:	930d      	str	r3, [sp, #52]	; 0x34
 8002646:	900c      	str	r0, [sp, #48]	; 0x30
 8002648:	a3a9      	add	r3, pc, #676	; (adr r3, 80028f0 <ICM20602_IMU_calibration2+0x358>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002652:	f7fe fa89 	bl	8000b68 <__aeabi_dcmpgt>
 8002656:	2800      	cmp	r0, #0
 8002658:	d137      	bne.n	80026ca <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[0][9] - gyro_ave[0][0]) > SHRINK_ERROR)
 800265a:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
 800265e:	e9dd 0170 	ldrd	r0, r1, [sp, #448]	; 0x1c0
 8002662:	f7fd fe39 	bl	80002d8 <__aeabi_dsub>
 8002666:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800266a:	930f      	str	r3, [sp, #60]	; 0x3c
 800266c:	900e      	str	r0, [sp, #56]	; 0x38
 800266e:	a3a0      	add	r3, pc, #640	; (adr r3, 80028f0 <ICM20602_IMU_calibration2+0x358>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002678:	f7fe fa76 	bl	8000b68 <__aeabi_dcmpgt>
 800267c:	bb28      	cbnz	r0, 80026ca <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[1][9] - gyro_ave[1][0]) > SHRINK_ERROR)
 800267e:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 8002682:	e9dd 0184 	ldrd	r0, r1, [sp, #528]	; 0x210
 8002686:	f7fd fe27 	bl	80002d8 <__aeabi_dsub>
 800268a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800268e:	9311      	str	r3, [sp, #68]	; 0x44
 8002690:	9010      	str	r0, [sp, #64]	; 0x40
 8002692:	a397      	add	r3, pc, #604	; (adr r3, 80028f0 <ICM20602_IMU_calibration2+0x358>)
 8002694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002698:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800269c:	f7fe fa64 	bl	8000b68 <__aeabi_dcmpgt>
 80026a0:	b998      	cbnz	r0, 80026ca <ICM20602_IMU_calibration2+0x132>
		|| (fabs(gyro_ave[2][9] - gyro_ave[2][0]) > SHRINK_ERROR)
 80026a2:	e9dd 2386 	ldrd	r2, r3, [sp, #536]	; 0x218
 80026a6:	e9dd 0198 	ldrd	r0, r1, [sp, #608]	; 0x260
 80026aa:	f7fd fe15 	bl	80002d8 <__aeabi_dsub>
 80026ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80026b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80026b4:	9012      	str	r0, [sp, #72]	; 0x48
 80026b6:	a38e      	add	r3, pc, #568	; (adr r3, 80028f0 <ICM20602_IMU_calibration2+0x358>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80026c0:	f7fe fa52 	bl	8000b68 <__aeabi_dcmpgt>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	f000 82f3 	beq.w	8002cb0 <ICM20602_IMU_calibration2+0x718>
    	printf("cal_len=%f\r\n",cal_len);
 80026ca:	ab16      	add	r3, sp, #88	; 0x58
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	4b8c      	ldr	r3, [pc, #560]	; (8002900 <ICM20602_IMU_calibration2+0x368>)
 80026d0:	9305      	str	r3, [sp, #20]
 80026d2:	ec59 8b1a 	vmov	r8, r9, d10
 80026d6:	ab1c      	add	r3, sp, #112	; 0x70
 80026d8:	9303      	str	r3, [sp, #12]
 80026da:	4b8a      	ldr	r3, [pc, #552]	; (8002904 <ICM20602_IMU_calibration2+0x36c>)
 80026dc:	9304      	str	r3, [sp, #16]
 80026de:	ee1a 2a10 	vmov	r2, s20
 80026e2:	464b      	mov	r3, r9
 80026e4:	4888      	ldr	r0, [pc, #544]	; (8002908 <ICM20602_IMU_calibration2+0x370>)
 80026e6:	f8df b230 	ldr.w	fp, [pc, #560]	; 8002918 <ICM20602_IMU_calibration2+0x380>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80026ea:	4c88      	ldr	r4, [pc, #544]	; (800290c <ICM20602_IMU_calibration2+0x374>)
    	printf("cal_len=%f\r\n",cal_len);
 80026ec:	f007 ff7e 	bl	800a5ec <iprintf>
    	for(j = 0; j < 3; j++){
 80026f0:	ee1a 2a10 	vmov	r2, s20
 80026f4:	4986      	ldr	r1, [pc, #536]	; (8002910 <ICM20602_IMU_calibration2+0x378>)
 80026f6:	464b      	mov	r3, r9
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe f8cf 	bl	800089c <__aeabi_ddiv>
 80026fe:	ec41 0b19 	vmov	d9, r0, r1
 8002702:	ae22      	add	r6, sp, #136	; 0x88
 8002704:	ad5e      	add	r5, sp, #376	; 0x178
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002706:	2700      	movs	r7, #0
 8002708:	2200      	movs	r2, #0
 800270a:	2110      	movs	r1, #16
 800270c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002710:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002714:	f004 fcce 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002718:	20bc      	movs	r0, #188	; 0xbc
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800271a:	f8cd 8000 	str.w	r8, [sp]
 800271e:	2301      	movs	r3, #1
 8002720:	aa15      	add	r2, sp, #84	; 0x54
 8002722:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002724:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002728:	4620      	mov	r0, r4
 800272a:	f005 fc3b 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800272e:	2301      	movs	r3, #1
 8002730:	f8cd 8000 	str.w	r8, [sp]
 8002734:	aa15      	add	r2, sp, #84	; 0x54
 8002736:	a914      	add	r1, sp, #80	; 0x50
 8002738:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800273a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800273e:	f005 fc31 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002742:	2201      	movs	r2, #1
 8002744:	2110      	movs	r1, #16
 8002746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 800274a:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800274e:	f004 fcb1 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2110      	movs	r1, #16
 8002756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275a:	f004 fcab 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 800275e:	20bb      	movs	r0, #187	; 0xbb
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002760:	f8cd 8000 	str.w	r8, [sp]
 8002764:	2301      	movs	r3, #1
 8002766:	aa15      	add	r2, sp, #84	; 0x54
 8002768:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800276a:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800276e:	4620      	mov	r0, r4
 8002770:	f005 fc18 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002774:	2301      	movs	r3, #1
 8002776:	f8cd 8000 	str.w	r8, [sp]
 800277a:	aa15      	add	r2, sp, #84	; 0x54
 800277c:	a914      	add	r1, sp, #80	; 0x50
 800277e:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002780:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002784:	f005 fc0e 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002788:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800278c:	2201      	movs	r2, #1
 800278e:	2110      	movs	r1, #16
 8002790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002794:	f004 fc8e 	bl	80070b4 <HAL_GPIO_WritePin>
    return((HiByte<<8) | LoByte);
 8002798:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 800279c:	4b5d      	ldr	r3, [pc, #372]	; (8002914 <ICM20602_IMU_calibration2+0x37c>)
 800279e:	4a58      	ldr	r2, [pc, #352]	; (8002900 <ICM20602_IMU_calibration2+0x368>)
 80027a0:	ed93 7a00 	vldr	s14, [r3]
 80027a4:	fa0f f989 	sxth.w	r9, r9
 80027a8:	ee07 9a90 	vmov	s15, r9
 80027ac:	ee27 7a08 	vmul.f32	s14, s14, s16
 80027b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027b4:	2110      	movs	r1, #16
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80027b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[0] = ICM20602_getAccXvalue() * IMU_ONE_G * aRes;
 80027be:	edc2 7a00 	vstr	s15, [r2]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	f004 fc76 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027c8:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80027ca:	20be      	movs	r0, #190	; 0xbe
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027cc:	460a      	mov	r2, r1
 80027ce:	f8cd 8000 	str.w	r8, [sp]
 80027d2:	2301      	movs	r3, #1
 80027d4:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80027d6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027da:	4620      	mov	r0, r4
 80027dc:	f005 fbe2 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027e0:	a915      	add	r1, sp, #84	; 0x54
 80027e2:	2301      	movs	r3, #1
 80027e4:	460a      	mov	r2, r1
 80027e6:	f8cd 8000 	str.w	r8, [sp]
 80027ea:	a914      	add	r1, sp, #80	; 0x50
 80027ec:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80027ee:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80027f2:	f005 fbd7 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80027f6:	2201      	movs	r2, #1
 80027f8:	2110      	movs	r1, #16
 80027fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80027fe:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002802:	f004 fc57 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2110      	movs	r1, #16
 800280a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800280e:	f004 fc51 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002812:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002814:	20bd      	movs	r0, #189	; 0xbd
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002816:	460a      	mov	r2, r1
 8002818:	f8cd 8000 	str.w	r8, [sp]
 800281c:	2301      	movs	r3, #1
 800281e:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002820:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002824:	4620      	mov	r0, r4
 8002826:	f005 fbbd 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800282a:	a915      	add	r1, sp, #84	; 0x54
 800282c:	2301      	movs	r3, #1
 800282e:	460a      	mov	r2, r1
 8002830:	f8cd 8000 	str.w	r8, [sp]
 8002834:	a914      	add	r1, sp, #80	; 0x50
 8002836:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002838:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800283c:	f005 fbb2 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002840:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002844:	2201      	movs	r2, #1
 8002846:	2110      	movs	r1, #16
 8002848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284c:	f004 fc32 	bl	80070b4 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 8002850:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <ICM20602_IMU_calibration2+0x37c>)
 8002856:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <ICM20602_IMU_calibration2+0x368>)
 8002858:	ed93 7a00 	vldr	s14, [r3]
 800285c:	fa0f f989 	sxth.w	r9, r9
 8002860:	ee07 9a90 	vmov	s15, r9
 8002864:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800286c:	2110      	movs	r1, #16
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 800286e:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[1] = ICM20602_getAccYvalue() * IMU_ONE_G * aRes;
 8002876:	edc2 7a01 	vstr	s15, [r2, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	f004 fc1a 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002880:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 8002882:	20c0      	movs	r0, #192	; 0xc0
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002884:	460a      	mov	r2, r1
 8002886:	f8cd 8000 	str.w	r8, [sp]
 800288a:	2301      	movs	r3, #1
 800288c:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 800288e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002892:	4620      	mov	r0, r4
 8002894:	f005 fb86 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002898:	a915      	add	r1, sp, #84	; 0x54
 800289a:	2301      	movs	r3, #1
 800289c:	460a      	mov	r2, r1
 800289e:	f8cd 8000 	str.w	r8, [sp]
 80028a2:	a914      	add	r1, sp, #80	; 0x50
 80028a4:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80028a6:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028aa:	f005 fb7b 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028ae:	2201      	movs	r2, #1
 80028b0:	2110      	movs	r1, #16
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 80028b6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80028ba:	f004 fbfb 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2110      	movs	r1, #16
 80028c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c6:	f004 fbf5 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028ca:	a915      	add	r1, sp, #84	; 0x54
    send_data[0]= reg | 0x80;
 80028cc:	20bf      	movs	r0, #191	; 0xbf
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028ce:	460a      	mov	r2, r1
 80028d0:	f8cd 8000 	str.w	r8, [sp]
 80028d4:	2301      	movs	r3, #1
 80028d6:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80028d8:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028dc:	4620      	mov	r0, r4
 80028de:	f005 fb61 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80028e2:	a915      	add	r1, sp, #84	; 0x54
 80028e4:	2301      	movs	r3, #1
 80028e6:	460a      	mov	r2, r1
 80028e8:	f8cd 8000 	str.w	r8, [sp]
 80028ec:	e016      	b.n	800291c <ICM20602_IMU_calibration2+0x384>
 80028ee:	bf00      	nop
 80028f0:	eb1c432d 	.word	0xeb1c432d
 80028f4:	3f1a36e2 	.word	0x3f1a36e2
 80028f8:	0800ca18 	.word	0x0800ca18
 80028fc:	411ce80a 	.word	0x411ce80a
 8002900:	2000065c 	.word	0x2000065c
 8002904:	200006bc 	.word	0x200006bc
 8002908:	0800ca2c 	.word	0x0800ca2c
 800290c:	20000774 	.word	0x20000774
 8002910:	3ff00000 	.word	0x3ff00000
 8002914:	2000053c 	.word	0x2000053c
 8002918:	20000570 	.word	0x20000570
 800291c:	a914      	add	r1, sp, #80	; 0x50
 800291e:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002920:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002924:	f005 fb3e 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002928:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800292c:	2201      	movs	r2, #1
 800292e:	2110      	movs	r1, #16
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f004 fbbe 	bl	80070b4 <HAL_GPIO_WritePin>
    return ((HiByte<<8) | LoByte);
 8002938:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 800293c:	4bc4      	ldr	r3, [pc, #784]	; (8002c50 <ICM20602_IMU_calibration2+0x6b8>)
 800293e:	4ac5      	ldr	r2, [pc, #788]	; (8002c54 <ICM20602_IMU_calibration2+0x6bc>)
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	fa0f f989 	sxth.w	r9, r9
 8002948:	ee07 9a90 	vmov	s15, r9
 800294c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8002950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002954:	2110      	movs	r1, #16
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 8002956:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800295a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		acc[2] = ICM20602_getAccZvalue() * IMU_ONE_G * aRes;
 800295e:	edc2 7a02 	vstr	s15, [r2, #8]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	f004 fba6 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002968:	20c4      	movs	r0, #196	; 0xc4
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800296a:	f8cd 8000 	str.w	r8, [sp]
 800296e:	2301      	movs	r3, #1
 8002970:	aa15      	add	r2, sp, #84	; 0x54
 8002972:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002974:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002978:	4620      	mov	r0, r4
 800297a:	f005 fb13 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800297e:	2301      	movs	r3, #1
 8002980:	f8cd 8000 	str.w	r8, [sp]
 8002984:	aa15      	add	r2, sp, #84	; 0x54
 8002986:	a914      	add	r1, sp, #80	; 0x50
 8002988:	4620      	mov	r0, r4
    send_data[0]=0x00;
 800298a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 800298e:	f005 fb09 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002992:	2201      	movs	r2, #1
 8002994:	2110      	movs	r1, #16
 8002996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 800299a:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800299e:	f004 fb89 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2110      	movs	r1, #16
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f004 fb83 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 80029ae:	20c3      	movs	r0, #195	; 0xc3
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029b0:	f8cd 8000 	str.w	r8, [sp]
 80029b4:	2301      	movs	r3, #1
 80029b6:	aa15      	add	r2, sp, #84	; 0x54
 80029b8:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 80029ba:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029be:	4620      	mov	r0, r4
 80029c0:	f005 faf0 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029c4:	2301      	movs	r3, #1
 80029c6:	f8cd 8000 	str.w	r8, [sp]
 80029ca:	aa15      	add	r2, sp, #84	; 0x54
 80029cc:	a914      	add	r1, sp, #80	; 0x50
 80029ce:	4620      	mov	r0, r4
    send_data[0]=0x00;
 80029d0:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 80029d4:	f005 fae6 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 80029d8:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 80029dc:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029e0:	2201      	movs	r2, #1
 80029e2:	2110      	movs	r1, #16
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80029e8:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80029ec:	f004 fb62 	bl	80070b4 <HAL_GPIO_WritePin>
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 80029f0:	ee07 9a90 	vmov	s15, r9
 80029f4:	ed9b 7a00 	vldr	s14, [fp]
 80029f8:	4b97      	ldr	r3, [pc, #604]	; (8002c58 <ICM20602_IMU_calibration2+0x6c0>)
 80029fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80029fe:	2200      	movs	r2, #0
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a00:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a04:	2110      	movs	r1, #16
    		gyro[0] = ICM20602_getGyrXvalue() * gRes;
 8002a06:	edc3 7a00 	vstr	s15, [r3]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0e:	f004 fb51 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a12:	20c6      	movs	r0, #198	; 0xc6
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a14:	f8cd 8000 	str.w	r8, [sp]
 8002a18:	2301      	movs	r3, #1
 8002a1a:	aa15      	add	r2, sp, #84	; 0x54
 8002a1c:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a1e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a22:	4620      	mov	r0, r4
 8002a24:	f005 fabe 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f8cd 8000 	str.w	r8, [sp]
 8002a2e:	aa15      	add	r2, sp, #84	; 0x54
 8002a30:	a914      	add	r1, sp, #80	; 0x50
 8002a32:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a34:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a38:	f005 fab4 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2110      	movs	r1, #16
 8002a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002a44:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a48:	f004 fb34 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2110      	movs	r1, #16
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a54:	f004 fb2e 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002a58:	20c5      	movs	r0, #197	; 0xc5
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a5a:	f8cd 8000 	str.w	r8, [sp]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	aa15      	add	r2, sp, #84	; 0x54
 8002a62:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002a64:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f005 fa9b 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f8cd 8000 	str.w	r8, [sp]
 8002a74:	aa15      	add	r2, sp, #84	; 0x54
 8002a76:	a914      	add	r1, sp, #80	; 0x50
 8002a78:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002a7a:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002a7e:	f005 fa91 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002a82:	f89d a054 	ldrb.w	sl, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002a86:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2110      	movs	r1, #16
 8002a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002a92:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002a96:	f004 fb0d 	bl	80070b4 <HAL_GPIO_WritePin>
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002a9a:	ee07 9a90 	vmov	s15, r9
 8002a9e:	ed9b 7a00 	vldr	s14, [fp]
 8002aa2:	4b6d      	ldr	r3, [pc, #436]	; (8002c58 <ICM20602_IMU_calibration2+0x6c0>)
 8002aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002aa8:	2200      	movs	r2, #0
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002aae:	2110      	movs	r1, #16
    		gyro[1] = ICM20602_getGyrYvalue() * gRes;
 8002ab0:	edc3 7a01 	vstr	s15, [r3, #4]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab8:	f004 fafc 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002abc:	20c8      	movs	r0, #200	; 0xc8
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002abe:	f8cd 8000 	str.w	r8, [sp]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	aa15      	add	r2, sp, #84	; 0x54
 8002ac6:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002ac8:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002acc:	4620      	mov	r0, r4
 8002ace:	f005 fa69 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f8cd 8000 	str.w	r8, [sp]
 8002ad8:	aa15      	add	r2, sp, #84	; 0x54
 8002ada:	a914      	add	r1, sp, #80	; 0x50
 8002adc:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002ade:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002ae2:	f005 fa5f 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2110      	movs	r1, #16
 8002aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    val = RxBuffer[0];
 8002aee:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002af2:	f004 fadf 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2110      	movs	r1, #16
 8002afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afe:	f004 fad9 	bl	80070b4 <HAL_GPIO_WritePin>
    send_data[0]= reg | 0x80;
 8002b02:	20c7      	movs	r0, #199	; 0xc7
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b04:	f8cd 8000 	str.w	r8, [sp]
 8002b08:	2301      	movs	r3, #1
 8002b0a:	aa15      	add	r2, sp, #84	; 0x54
 8002b0c:	a914      	add	r1, sp, #80	; 0x50
    send_data[0]= reg | 0x80;
 8002b0e:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b12:	4620      	mov	r0, r4
 8002b14:	f005 fa46 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f8cd 8000 	str.w	r8, [sp]
 8002b1e:	aa15      	add	r2, sp, #84	; 0x54
 8002b20:	a914      	add	r1, sp, #80	; 0x50
 8002b22:	4620      	mov	r0, r4
    send_data[0]=0x00;
 8002b24:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)send_data,(uint8_t*)RxBuffer,1,2000);
 8002b28:	f005 fa3c 	bl	8007fa4 <HAL_SPI_TransmitReceive>
    val = RxBuffer[0];
 8002b2c:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    return ((HiByte<<8) | LoByte);
 8002b30:	ea49 2908 	orr.w	r9, r9, r8, lsl #8
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b34:	2201      	movs	r2, #1
 8002b36:	2110      	movs	r1, #16
 8002b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002b3c:	fa0f f989 	sxth.w	r9, r9
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002b40:	f004 fab8 	bl	80070b4 <HAL_GPIO_WritePin>
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002b44:	ee07 9a90 	vmov	s15, r9
 8002b48:	ed9b 7a00 	vldr	s14, [fp]
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <ICM20602_IMU_calibration2+0x6c0>)
 8002b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    	for(j = 0; j < 3; j++){
 8002b52:	3650      	adds	r6, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002b54:	ee67 7a87 	vmul.f32	s15, s15, s14
    	for(j = 0; j < 3; j++){
 8002b58:	3550      	adds	r5, #80	; 0x50
    		gyro[2] = ICM20602_getGyrZvalue() * gRes;
 8002b5a:	edc3 7a02 	vstr	s15, [r3, #8]
    		acc_sum[j]  += acc[j];
 8002b5e:	9b05      	ldr	r3, [sp, #20]
 8002b60:	f853 0b04 	ldr.w	r0, [r3], #4
 8002b64:	9305      	str	r3, [sp, #20]
 8002b66:	9b02      	ldr	r3, [sp, #8]
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b70:	f7fd fd12 	bl	8000598 <__aeabi_f2d>
 8002b74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002b78:	f7fd fbb0 	bl	80002dc <__adddf3>
 8002b7c:	9b02      	ldr	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002b7e:	9a04      	ldr	r2, [sp, #16]
    		acc_sum[j]  += acc[j];
 8002b80:	4680      	mov	r8, r0
 8002b82:	4689      	mov	r9, r1
 8002b84:	e8e3 8902 	strd	r8, r9, [r3], #8
    		gyro_sum[j] += gyro[j];
 8002b88:	f852 0b04 	ldr.w	r0, [r2], #4
 8002b8c:	9204      	str	r2, [sp, #16]
 8002b8e:	9a03      	ldr	r2, [sp, #12]
    		acc_sum[j]  += acc[j];
 8002b90:	9302      	str	r3, [sp, #8]
    		gyro_sum[j] += gyro[j];
 8002b92:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002b96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002b9a:	f7fd fcfd 	bl	8000598 <__aeabi_f2d>
 8002b9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002ba2:	f7fd fb9b 	bl	80002dc <__adddf3>
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002ba6:	464b      	mov	r3, r9
    		gyro_sum[j] += gyro[j];
 8002ba8:	4689      	mov	r9, r1
 8002baa:	9903      	ldr	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002bac:	4642      	mov	r2, r8
    		gyro_sum[j] += gyro[j];
 8002bae:	4680      	mov	r8, r0
 8002bb0:	e8e1 8902 	strd	r8, r9, [r1], #8
 8002bb4:	9103      	str	r1, [sp, #12]
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002bb6:	ec51 0b19 	vmov	r0, r1, d9
 8002bba:	f7fd fd45 	bl	8000648 <__aeabi_dmul>
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	464b      	mov	r3, r9
    		acc_ave[j][0]  = acc_sum[j]  / cal_len;
 8002bc2:	4680      	mov	r8, r0
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	e946 8914 	strd	r8, r9, [r6, #-80]	; 0x50
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002bca:	ec51 0b19 	vmov	r0, r1, d9
 8002bce:	f7fd fd3b 	bl	8000648 <__aeabi_dmul>
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002bd2:	e956 2304 	ldrd	r2, r3, [r6, #-16]
 8002bd6:	e946 2302 	strd	r2, r3, [r6, #-8]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002bda:	e955 2304 	ldrd	r2, r3, [r5, #-16]
 8002bde:	e945 2302 	strd	r2, r3, [r5, #-8]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002be2:	e956 2306 	ldrd	r2, r3, [r6, #-24]
 8002be6:	e946 2304 	strd	r2, r3, [r6, #-16]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002bea:	e955 2306 	ldrd	r2, r3, [r5, #-24]
 8002bee:	e945 2304 	strd	r2, r3, [r5, #-16]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002bf2:	e956 2308 	ldrd	r2, r3, [r6, #-32]
 8002bf6:	e946 2306 	strd	r2, r3, [r6, #-24]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002bfa:	e955 2308 	ldrd	r2, r3, [r5, #-32]
    		gyro_ave[j][0] = gyro_sum[j] / cal_len;
 8002bfe:	e945 0114 	strd	r0, r1, [r5, #-80]	; 0x50
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c02:	e945 2306 	strd	r2, r3, [r5, #-24]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c06:	e956 230a 	ldrd	r2, r3, [r6, #-40]	; 0x28
 8002c0a:	e946 2308 	strd	r2, r3, [r6, #-32]
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c0e:	e955 230a 	ldrd	r2, r3, [r5, #-40]	; 0x28
 8002c12:	e945 2308 	strd	r2, r3, [r5, #-32]
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c16:	e956 230c 	ldrd	r2, r3, [r6, #-48]	; 0x30
 8002c1a:	e946 230a 	strd	r2, r3, [r6, #-40]	; 0x28
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c1e:	e955 230c 	ldrd	r2, r3, [r5, #-48]	; 0x30
 8002c22:	e945 230a 	strd	r2, r3, [r5, #-40]	; 0x28
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c26:	e956 230e 	ldrd	r2, r3, [r6, #-56]	; 0x38
 8002c2a:	e946 230c 	strd	r2, r3, [r6, #-48]	; 0x30
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c2e:	e955 230e 	ldrd	r2, r3, [r5, #-56]	; 0x38
 8002c32:	e945 230c 	strd	r2, r3, [r5, #-48]	; 0x30
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c36:	e956 2310 	ldrd	r2, r3, [r6, #-64]	; 0x40
 8002c3a:	e946 230e 	strd	r2, r3, [r6, #-56]	; 0x38
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c3e:	e955 2310 	ldrd	r2, r3, [r5, #-64]	; 0x40
 8002c42:	e945 230e 	strd	r2, r3, [r5, #-56]	; 0x38
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c46:	e956 2312 	ldrd	r2, r3, [r6, #-72]	; 0x48
 8002c4a:	e946 2310 	strd	r2, r3, [r6, #-64]	; 0x40
 8002c4e:	e005      	b.n	8002c5c <ICM20602_IMU_calibration2+0x6c4>
 8002c50:	2000053c 	.word	0x2000053c
 8002c54:	2000065c 	.word	0x2000065c
 8002c58:	200006bc 	.word	0x200006bc
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c5c:	e955 2312 	ldrd	r2, r3, [r5, #-72]	; 0x48
 8002c60:	e945 2310 	strd	r2, r3, [r5, #-64]	; 0x40
    	for(j = 0; j < 3; j++){
 8002c64:	9b02      	ldr	r3, [sp, #8]
 8002c66:	aa1c      	add	r2, sp, #112	; 0x70
 8002c68:	4293      	cmp	r3, r2
    			acc_ave[j][i] = acc_ave[j][i-1];
 8002c6a:	e946 8912 	strd	r8, r9, [r6, #-72]	; 0x48
    			gyro_ave[j][i] = gyro_ave[j][i-1];
 8002c6e:	e945 0112 	strd	r0, r1, [r5, #-72]	; 0x48
    	for(j = 0; j < 3; j++){
 8002c72:	f47f ad49 	bne.w	8002708 <ICM20602_IMU_calibration2+0x170>
    	cal_len ++;
 8002c76:	ec55 4b1a 	vmov	r4, r5, d10
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <ICM20602_IMU_calibration2+0x7e8>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4629      	mov	r1, r5
 8002c80:	ee1a 0a10 	vmov	r0, s20
 8002c84:	f7fd fb2a 	bl	80002dc <__adddf3>
    	if(cal_len>5000){break;}
 8002c88:	a33b      	add	r3, pc, #236	; (adr r3, 8002d78 <ICM20602_IMU_calibration2+0x7e0>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
    	cal_len ++;
 8002c8e:	4606      	mov	r6, r0
 8002c90:	460f      	mov	r7, r1
    	if(cal_len>5000){break;}
 8002c92:	ee1a 0a10 	vmov	r0, s20
 8002c96:	4629      	mov	r1, r5
 8002c98:	f7fd ff66 	bl	8000b68 <__aeabi_dcmpgt>
    	cal_len ++;
 8002c9c:	4634      	mov	r4, r6
 8002c9e:	463d      	mov	r5, r7
    	if(cal_len>5000){break;}
 8002ca0:	b988      	cbnz	r0, 8002cc6 <ICM20602_IMU_calibration2+0x72e>
    while ((fabs(acc_ave[0][9] - acc_ave[0][0]) > SHRINK_ERROR)
 8002ca2:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8002ca6:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
    	cal_len ++;
 8002caa:	ec47 6b1a 	vmov	d10, r6, r7
 8002cae:	e49f      	b.n	80025f0 <ICM20602_IMU_calibration2+0x58>
		|| cal_len < 500.0
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <ICM20602_IMU_calibration2+0x7ec>)
 8002cb2:	ec51 0b1a 	vmov	r0, r1, d10
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f7fd ff38 	bl	8000b2c <__aeabi_dcmplt>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	f47f ad04 	bne.w	80026ca <ICM20602_IMU_calibration2+0x132>
 8002cc2:	ec55 4b1a 	vmov	r4, r5, d10
    if(cal_len==500){NVIC_SystemReset();}
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <ICM20602_IMU_calibration2+0x7ec>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd ff23 	bl	8000b18 <__aeabi_dcmpeq>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d143      	bne.n	8002d5e <ICM20602_IMU_calibration2+0x7c6>
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	4929      	ldr	r1, [pc, #164]	; (8002d80 <ICM20602_IMU_calibration2+0x7e8>)
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002cdc:	4f2a      	ldr	r7, [pc, #168]	; (8002d88 <ICM20602_IMU_calibration2+0x7f0>)
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002cde:	4e2b      	ldr	r6, [pc, #172]	; (8002d8c <ICM20602_IMU_calibration2+0x7f4>)
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fd fddb 	bl	800089c <__aeabi_ddiv>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002ce6:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8002cea:	4604      	mov	r4, r0
 8002cec:	460d      	mov	r5, r1
 8002cee:	f7fd fcab 	bl	8000648 <__aeabi_dmul>
 8002cf2:	f7fd ffa1 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002cf6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002cfa:	6038      	str	r0, [r7, #0]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f7fd fca2 	bl	8000648 <__aeabi_dmul>
 8002d04:	f7fd ff98 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d08:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d0c:	6030      	str	r0, [r6, #0]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d0e:	4629      	mov	r1, r5
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7fd fc99 	bl	8000648 <__aeabi_dmul>
 8002d16:	f7fd ff8f 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d1a:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d1e:	6078      	str	r0, [r7, #4]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d20:	4629      	mov	r1, r5
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7fd fc90 	bl	8000648 <__aeabi_dmul>
 8002d28:	f7fd ff86 	bl	8000c38 <__aeabi_d2f>
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d2c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d30:	6070      	str	r0, [r6, #4]
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d32:	4629      	mov	r1, r5
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fd fc87 	bl	8000648 <__aeabi_dmul>
 8002d3a:	f7fd ff7d 	bl	8000c38 <__aeabi_d2f>
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d3e:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
    	acc_off[j]  = acc_sum[j]  / cal_len;
 8002d42:	60b8      	str	r0, [r7, #8]
    	gyro_off[j] = gyro_sum[j] / cal_len;
 8002d44:	4629      	mov	r1, r5
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7fd fc7e 	bl	8000648 <__aeabi_dmul>
 8002d4c:	f7fd ff74 	bl	8000c38 <__aeabi_d2f>
 8002d50:	60b0      	str	r0, [r6, #8]
}
 8002d52:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002d56:	ecbd 8b06 	vpop	{d8-d10}
 8002d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d5e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d62:	490b      	ldr	r1, [pc, #44]	; (8002d90 <ICM20602_IMU_calibration2+0x7f8>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <ICM20602_IMU_calibration2+0x7fc>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d66:	68ca      	ldr	r2, [r1, #12]
 8002d68:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60cb      	str	r3, [r1, #12]
 8002d70:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002d74:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002d76:	e7fd      	b.n	8002d74 <ICM20602_IMU_calibration2+0x7dc>
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	40b38700 	.word	0x40b38700
 8002d80:	3ff00000 	.word	0x3ff00000
 8002d84:	407f4000 	.word	0x407f4000
 8002d88:	20000674 	.word	0x20000674
 8002d8c:	200006d4 	.word	0x200006d4
 8002d90:	e000ed00 	.word	0xe000ed00
 8002d94:	05fa0004 	.word	0x05fa0004

08002d98 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch) {
 8002d98:	b500      	push	{lr}
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002d9a:	2301      	movs	r3, #1
void __io_putchar(uint8_t ch) {
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	4684      	mov	ip, r0
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002da0:	461a      	mov	r2, r3
 8002da2:	f10d 0107 	add.w	r1, sp, #7
 8002da6:	4804      	ldr	r0, [pc, #16]	; (8002db8 <__io_putchar+0x20>)
void __io_putchar(uint8_t ch) {
 8002da8:	f88d c007 	strb.w	ip, [sp, #7]
HAL_UART_Transmit(&hlpuart1, &ch, 1, 1);
 8002dac:	f006 fd2a 	bl	8009804 <HAL_UART_Transmit>
}
 8002db0:	b003      	add	sp, #12
 8002db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002db6:	bf00      	nop
 8002db8:	20000938 	.word	0x20000938

08002dbc <HAL_GetTick>:
long map(long x, long in_min, long in_max, long out_min, long out_max);
float getAngleDiff(float angle_rad1, float angle_rad2) ;
float normalizeAngle(float angle_rad);
uint32_t HAL_GetTick(void)
 {
   return uwTick;
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <HAL_GetTick+0x8>)
 8002dbe:	6818      	ldr	r0, [r3, #0]
 }
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000aec 	.word	0x20000aec

08002dc8 <maintask_run>:


}


void maintask_run(){
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	ed2d 8b04 	vpush	{d8-d9}
	//theta_target=0.0;
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002dd0:	4ad5      	ldr	r2, [pc, #852]	; (8003128 <maintask_run+0x360>)
 8002dd2:	4bd6      	ldr	r3, [pc, #856]	; (800312c <maintask_run+0x364>)
 8002dd4:	6810      	ldr	r0, [r2, #0]
 8002dd6:	edd3 8a00 	vldr	s17, [r3]
void maintask_run(){
 8002dda:	b083      	sub	sp, #12
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002ddc:	f7fd fbdc 	bl	8000598 <__aeabi_f2d>
 8002de0:	a3c9      	add	r3, pc, #804	; (adr r3, 8003108 <maintask_run+0x340>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f7fd fc2f 	bl	8000648 <__aeabi_dmul>
 8002dea:	f7fd ff25 	bl	8000c38 <__aeabi_d2f>
 8002dee:	4603      	mov	r3, r0
long map(long x, long in_min, long in_max, long out_min, long out_max) {
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

float normalizeAngle(float angle_rad) {
    while (angle_rad > M_PI) {
 8002df0:	ee18 0a90 	vmov	r0, s17
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002df4:	ee08 3a10 	vmov	s16, r3
    while (angle_rad > M_PI) {
 8002df8:	f7fd fbce 	bl	8000598 <__aeabi_f2d>
 8002dfc:	a3c4      	add	r3, pc, #784	; (adr r3, 8003110 <maintask_run+0x348>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	4680      	mov	r8, r0
 8002e04:	4689      	mov	r9, r1
 8002e06:	f7fd feaf 	bl	8000b68 <__aeabi_dcmpgt>
 8002e0a:	b1c8      	cbz	r0, 8002e40 <maintask_run+0x78>
        angle_rad -= 2.0f * M_PI;
 8002e0c:	a7c2      	add	r7, pc, #776	; (adr r7, 8003118 <maintask_run+0x350>)
 8002e0e:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8002e12:	a5bf      	add	r5, pc, #764	; (adr r5, 8003110 <maintask_run+0x348>)
 8002e14:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8002e18:	4632      	mov	r2, r6
 8002e1a:	463b      	mov	r3, r7
 8002e1c:	4640      	mov	r0, r8
 8002e1e:	4649      	mov	r1, r9
 8002e20:	f7fd fa5a 	bl	80002d8 <__aeabi_dsub>
 8002e24:	f7fd ff08 	bl	8000c38 <__aeabi_d2f>
 8002e28:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8002e2c:	f7fd fbb4 	bl	8000598 <__aeabi_f2d>
 8002e30:	4622      	mov	r2, r4
 8002e32:	462b      	mov	r3, r5
 8002e34:	4680      	mov	r8, r0
 8002e36:	4689      	mov	r9, r1
 8002e38:	f7fd fe96 	bl	8000b68 <__aeabi_dcmpgt>
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	d1eb      	bne.n	8002e18 <maintask_run+0x50>
    }
    while (angle_rad < -M_PI) {
 8002e40:	a3b7      	add	r3, pc, #732	; (adr r3, 8003120 <maintask_run+0x358>)
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	4640      	mov	r0, r8
 8002e48:	4649      	mov	r1, r9
 8002e4a:	f7fd fe6f 	bl	8000b2c <__aeabi_dcmplt>
 8002e4e:	b1c8      	cbz	r0, 8002e84 <maintask_run+0xbc>
        angle_rad += 2.0f * M_PI;
 8002e50:	a7b1      	add	r7, pc, #708	; (adr r7, 8003118 <maintask_run+0x350>)
 8002e52:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8002e56:	a5b2      	add	r5, pc, #712	; (adr r5, 8003120 <maintask_run+0x358>)
 8002e58:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8002e5c:	4632      	mov	r2, r6
 8002e5e:	463b      	mov	r3, r7
 8002e60:	4640      	mov	r0, r8
 8002e62:	4649      	mov	r1, r9
 8002e64:	f7fd fa3a 	bl	80002dc <__adddf3>
 8002e68:	f7fd fee6 	bl	8000c38 <__aeabi_d2f>
 8002e6c:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8002e70:	f7fd fb92 	bl	8000598 <__aeabi_f2d>
 8002e74:	4622      	mov	r2, r4
 8002e76:	462b      	mov	r3, r5
 8002e78:	4680      	mov	r8, r0
 8002e7a:	4689      	mov	r9, r1
 8002e7c:	f7fd fe56 	bl	8000b2c <__aeabi_dcmplt>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d1eb      	bne.n	8002e5c <maintask_run+0x94>
    while (angle_rad > M_PI) {
 8002e84:	ee18 0a10 	vmov	r0, s16
 8002e88:	f7fd fb86 	bl	8000598 <__aeabi_f2d>
 8002e8c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003110 <maintask_run+0x348>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	4682      	mov	sl, r0
 8002e94:	468b      	mov	fp, r1
 8002e96:	f7fd fe67 	bl	8000b68 <__aeabi_dcmpgt>
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	f000 81fe 	beq.w	800329c <maintask_run+0x4d4>
        angle_rad -= 2.0f * M_PI;
 8002ea0:	a79d      	add	r7, pc, #628	; (adr r7, 8003118 <maintask_run+0x350>)
 8002ea2:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8002ea6:	4654      	mov	r4, sl
 8002ea8:	465d      	mov	r5, fp
        angle_rad -= 2.0f * M_PI;
 8002eaa:	4632      	mov	r2, r6
 8002eac:	463b      	mov	r3, r7
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd fa11 	bl	80002d8 <__aeabi_dsub>
 8002eb6:	f7fd febf 	bl	8000c38 <__aeabi_d2f>
 8002eba:	ee09 0a10 	vmov	s18, r0
    while (angle_rad > M_PI) {
 8002ebe:	f7fd fb6b 	bl	8000598 <__aeabi_f2d>
 8002ec2:	a393      	add	r3, pc, #588	; (adr r3, 8003110 <maintask_run+0x348>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	4604      	mov	r4, r0
 8002eca:	460d      	mov	r5, r1
 8002ecc:	f7fd fe4c 	bl	8000b68 <__aeabi_dcmpgt>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d1ea      	bne.n	8002eaa <maintask_run+0xe2>
    while (angle_rad < -M_PI) {
 8002ed4:	a392      	add	r3, pc, #584	; (adr r3, 8003120 <maintask_run+0x358>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd fe25 	bl	8000b2c <__aeabi_dcmplt>
 8002ee2:	b1b8      	cbz	r0, 8002f14 <maintask_run+0x14c>
        angle_rad += 2.0f * M_PI;
 8002ee4:	a78c      	add	r7, pc, #560	; (adr r7, 8003118 <maintask_run+0x350>)
 8002ee6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002eea:	4632      	mov	r2, r6
 8002eec:	463b      	mov	r3, r7
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7fd f9f3 	bl	80002dc <__adddf3>
 8002ef6:	f7fd fe9f 	bl	8000c38 <__aeabi_d2f>
 8002efa:	ee09 0a10 	vmov	s18, r0
    while (angle_rad < -M_PI) {
 8002efe:	f7fd fb4b 	bl	8000598 <__aeabi_f2d>
 8002f02:	a387      	add	r3, pc, #540	; (adr r3, 8003120 <maintask_run+0x358>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	4604      	mov	r4, r0
 8002f0a:	460d      	mov	r5, r1
 8002f0c:	f7fd fe0e 	bl	8000b2c <__aeabi_dcmplt>
 8002f10:	2800      	cmp	r0, #0
 8002f12:	d1ea      	bne.n	8002eea <maintask_run+0x122>
}

float getAngleDiff(float angle_rad1, float angle_rad2){
    angle_rad1 = normalizeAngle(angle_rad1);
    angle_rad2 = normalizeAngle(angle_rad2);
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 8002f14:	ee78 7ac9 	vsub.f32	s15, s17, s18
 8002f18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002f1c:	ee17 3a10 	vmov	r3, s14
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bfb8      	it	lt
 8002f24:	425b      	neglt	r3, r3
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	dd14      	ble.n	8002f54 <maintask_run+0x18c>
    	if(angle_rad1 > angle_rad2){
 8002f2a:	eef4 8ac9 	vcmpe.f32	s17, s18
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8002f32:	a379      	add	r3, pc, #484	; (adr r3, 8003118 <maintask_run+0x350>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	4640      	mov	r0, r8
 8002f3a:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 8002f3c:	f300 8175 	bgt.w	800322a <maintask_run+0x462>
    	}else{
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8002f40:	f7fd f9cc 	bl	80002dc <__adddf3>
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	f7fd f9c6 	bl	80002d8 <__aeabi_dsub>
 8002f4c:	f7fd fe74 	bl	8000c38 <__aeabi_d2f>
 8002f50:	ee07 0a90 	vmov	s15, r0
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002f54:	ee17 0a90 	vmov	r0, s15
 8002f58:	f7fd fb1e 	bl	8000598 <__aeabi_f2d>
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4b74      	ldr	r3, [pc, #464]	; (8003130 <maintask_run+0x368>)
 8002f60:	f7fd fb72 	bl	8000648 <__aeabi_dmul>
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 8002f64:	4b73      	ldr	r3, [pc, #460]	; (8003134 <maintask_run+0x36c>)
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 8002f66:	ec41 0b19 	vmov	d9, r0, r1
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	f7fd fb14 	bl	8000598 <__aeabi_f2d>
 8002f70:	a365      	add	r3, pc, #404	; (adr r3, 8003108 <maintask_run+0x340>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f7fd fb67 	bl	8000648 <__aeabi_dmul>
 8002f7a:	f7fd fe5d 	bl	8000c38 <__aeabi_d2f>
    while (angle_rad > M_PI) {
 8002f7e:	a364      	add	r3, pc, #400	; (adr r3, 8003110 <maintask_run+0x348>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 8002f84:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8002f88:	4659      	mov	r1, fp
 8002f8a:	4650      	mov	r0, sl
 8002f8c:	f7fd fdec 	bl	8000b68 <__aeabi_dcmpgt>
 8002f90:	b1c8      	cbz	r0, 8002fc6 <maintask_run+0x1fe>
        angle_rad -= 2.0f * M_PI;
 8002f92:	a761      	add	r7, pc, #388	; (adr r7, 8003118 <maintask_run+0x350>)
 8002f94:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8002f98:	a55d      	add	r5, pc, #372	; (adr r5, 8003110 <maintask_run+0x348>)
 8002f9a:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8002f9e:	4632      	mov	r2, r6
 8002fa0:	463b      	mov	r3, r7
 8002fa2:	4650      	mov	r0, sl
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	f7fd f997 	bl	80002d8 <__aeabi_dsub>
 8002faa:	f7fd fe45 	bl	8000c38 <__aeabi_d2f>
 8002fae:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8002fb2:	f7fd faf1 	bl	8000598 <__aeabi_f2d>
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	462b      	mov	r3, r5
 8002fba:	4682      	mov	sl, r0
 8002fbc:	468b      	mov	fp, r1
 8002fbe:	f7fd fdd3 	bl	8000b68 <__aeabi_dcmpgt>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d1eb      	bne.n	8002f9e <maintask_run+0x1d6>
    while (angle_rad < -M_PI) {
 8002fc6:	a356      	add	r3, pc, #344	; (adr r3, 8003120 <maintask_run+0x358>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	4650      	mov	r0, sl
 8002fce:	4659      	mov	r1, fp
 8002fd0:	f7fd fdac 	bl	8000b2c <__aeabi_dcmplt>
 8002fd4:	b1c8      	cbz	r0, 800300a <maintask_run+0x242>
        angle_rad += 2.0f * M_PI;
 8002fd6:	a750      	add	r7, pc, #320	; (adr r7, 8003118 <maintask_run+0x350>)
 8002fd8:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8002fdc:	a550      	add	r5, pc, #320	; (adr r5, 8003120 <maintask_run+0x358>)
 8002fde:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8002fe2:	4632      	mov	r2, r6
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	4650      	mov	r0, sl
 8002fe8:	4659      	mov	r1, fp
 8002fea:	f7fd f977 	bl	80002dc <__adddf3>
 8002fee:	f7fd fe23 	bl	8000c38 <__aeabi_d2f>
 8002ff2:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8002ff6:	f7fd facf 	bl	8000598 <__aeabi_f2d>
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	4682      	mov	sl, r0
 8003000:	468b      	mov	fp, r1
 8003002:	f7fd fd93 	bl	8000b2c <__aeabi_dcmplt>
 8003006:	2800      	cmp	r0, #0
 8003008:	d1eb      	bne.n	8002fe2 <maintask_run+0x21a>
    while (angle_rad > M_PI) {
 800300a:	ee18 0a90 	vmov	r0, s17
 800300e:	f7fd fac3 	bl	8000598 <__aeabi_f2d>
 8003012:	a33f      	add	r3, pc, #252	; (adr r3, 8003110 <maintask_run+0x348>)
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	4606      	mov	r6, r0
 800301a:	460f      	mov	r7, r1
 800301c:	f7fd fda4 	bl	8000b68 <__aeabi_dcmpgt>
 8003020:	b1d0      	cbz	r0, 8003058 <maintask_run+0x290>
        angle_rad -= 2.0f * M_PI;
 8003022:	a53d      	add	r5, pc, #244	; (adr r5, 8003118 <maintask_run+0x350>)
 8003024:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 8003028:	f20f 09e4 	addw	r9, pc, #228	; 0xe4
 800302c:	e9d9 8900 	ldrd	r8, r9, [r9]
        angle_rad -= 2.0f * M_PI;
 8003030:	4622      	mov	r2, r4
 8003032:	462b      	mov	r3, r5
 8003034:	4630      	mov	r0, r6
 8003036:	4639      	mov	r1, r7
 8003038:	f7fd f94e 	bl	80002d8 <__aeabi_dsub>
 800303c:	f7fd fdfc 	bl	8000c38 <__aeabi_d2f>
 8003040:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8003044:	f7fd faa8 	bl	8000598 <__aeabi_f2d>
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	4606      	mov	r6, r0
 800304e:	460f      	mov	r7, r1
 8003050:	f7fd fd8a 	bl	8000b68 <__aeabi_dcmpgt>
 8003054:	2800      	cmp	r0, #0
 8003056:	d1eb      	bne.n	8003030 <maintask_run+0x268>
    while (angle_rad < -M_PI) {
 8003058:	a331      	add	r3, pc, #196	; (adr r3, 8003120 <maintask_run+0x358>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	4630      	mov	r0, r6
 8003060:	4639      	mov	r1, r7
 8003062:	f7fd fd63 	bl	8000b2c <__aeabi_dcmplt>
 8003066:	b1d0      	cbz	r0, 800309e <maintask_run+0x2d6>
        angle_rad += 2.0f * M_PI;
 8003068:	a52b      	add	r5, pc, #172	; (adr r5, 8003118 <maintask_run+0x350>)
 800306a:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 800306e:	f20f 09b0 	addw	r9, pc, #176	; 0xb0
 8003072:	e9d9 8900 	ldrd	r8, r9, [r9]
        angle_rad += 2.0f * M_PI;
 8003076:	4622      	mov	r2, r4
 8003078:	462b      	mov	r3, r5
 800307a:	4630      	mov	r0, r6
 800307c:	4639      	mov	r1, r7
 800307e:	f7fd f92d 	bl	80002dc <__adddf3>
 8003082:	f7fd fdd9 	bl	8000c38 <__aeabi_d2f>
 8003086:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 800308a:	f7fd fa85 	bl	8000598 <__aeabi_f2d>
 800308e:	4642      	mov	r2, r8
 8003090:	464b      	mov	r3, r9
 8003092:	4606      	mov	r6, r0
 8003094:	460f      	mov	r7, r1
 8003096:	f7fd fd49 	bl	8000b2c <__aeabi_dcmplt>
 800309a:	2800      	cmp	r0, #0
 800309c:	d1eb      	bne.n	8003076 <maintask_run+0x2ae>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 800309e:	ee78 7a68 	vsub.f32	s15, s16, s17
 80030a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80030a6:	ee17 3a10 	vmov	r3, s14
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bfb8      	it	lt
 80030ae:	425b      	neglt	r3, r3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	dd14      	ble.n	80030de <maintask_run+0x316>
    	if(angle_rad1 > angle_rad2){
 80030b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 80030bc:	a316      	add	r3, pc, #88	; (adr r3, 8003118 <maintask_run+0x350>)
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	4650      	mov	r0, sl
 80030c4:	4659      	mov	r1, fp
    	if(angle_rad1 > angle_rad2){
 80030c6:	f300 80ad 	bgt.w	8003224 <maintask_run+0x45c>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 80030ca:	f7fd f907 	bl	80002dc <__adddf3>
 80030ce:	4632      	mov	r2, r6
 80030d0:	463b      	mov	r3, r7
 80030d2:	f7fd f901 	bl	80002d8 <__aeabi_dsub>
 80030d6:	f7fd fdaf 	bl	8000c38 <__aeabi_d2f>
 80030da:	ee07 0a90 	vmov	s15, r0
			-(getAngleDiff((yawAngle/180.0*M_PI),(yawAngle_temp/180.0*M_PI))*30.0);
 80030de:	ee17 0a90 	vmov	r0, s15
 80030e2:	f7fd fa59 	bl	8000598 <__aeabi_f2d>
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <maintask_run+0x370>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	f7fd faad 	bl	8000648 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	ec51 0b19 	vmov	r0, r1, d9
 80030f6:	f7fd f8ef 	bl	80002d8 <__aeabi_dsub>
 80030fa:	f7fd fd9d 	bl	8000c38 <__aeabi_d2f>
 80030fe:	ee08 0a10 	vmov	s16, r0
 8003102:	e01b      	b.n	800313c <maintask_run+0x374>
 8003104:	f3af 8000 	nop.w
 8003108:	a2529d39 	.word	0xa2529d39
 800310c:	3f91df46 	.word	0x3f91df46
 8003110:	54442d18 	.word	0x54442d18
 8003114:	400921fb 	.word	0x400921fb
 8003118:	54442d18 	.word	0x54442d18
 800311c:	401921fb 	.word	0x401921fb
 8003120:	54442d18 	.word	0x54442d18
 8003124:	c00921fb 	.word	0xc00921fb
 8003128:	2000076c 	.word	0x2000076c
 800312c:	20000758 	.word	0x20000758
 8003130:	401c0000 	.word	0x401c0000
 8003134:	20000770 	.word	0x20000770
 8003138:	403e0000 	.word	0x403e0000
	if(omega>6*M_PI){omega=6*M_PI;}
 800313c:	f7fd fa2c 	bl	8000598 <__aeabi_f2d>
 8003140:	a371      	add	r3, pc, #452	; (adr r3, 8003308 <maintask_run+0x540>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	4604      	mov	r4, r0
 8003148:	460d      	mov	r5, r1
 800314a:	f7fd fd0d 	bl	8000b68 <__aeabi_dcmpgt>
 800314e:	2800      	cmp	r0, #0
 8003150:	f000 8092 	beq.w	8003278 <maintask_run+0x4b0>
 8003154:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80032c0 <maintask_run+0x4f8>
 8003158:	4b5a      	ldr	r3, [pc, #360]	; (80032c4 <maintask_run+0x4fc>)
 800315a:	eeb0 8a67 	vmov.f32	s16, s15
 800315e:	edc3 7a00 	vstr	s15, [r3]
	omni_move(vel_surge, vel_sway, omega,1.0);
 8003162:	4b59      	ldr	r3, [pc, #356]	; (80032c8 <maintask_run+0x500>)
 8003164:	4a59      	ldr	r2, [pc, #356]	; (80032cc <maintask_run+0x504>)
 8003166:	ed93 0a00 	vldr	s0, [r3]
 800316a:	edd2 0a00 	vldr	s1, [r2]
			if(ball[0]==1){
 800316e:	4c58      	ldr	r4, [pc, #352]	; (80032d0 <maintask_run+0x508>)
	omni_move(vel_surge, vel_sway, omega,1.0);
 8003170:	eeb0 1a48 	vmov.f32	s2, s16
 8003174:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003178:	f001 fdde 	bl	8004d38 <omni_move>
	  if(kick_power>0){
 800317c:	4b55      	ldr	r3, [pc, #340]	; (80032d4 <maintask_run+0x50c>)
 800317e:	edd3 7a00 	vldr	s15, [r3]
 8003182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	f340 8085 	ble.w	8003298 <maintask_run+0x4d0>
			if(ball[0]==1){
 800318e:	7825      	ldrb	r5, [r4, #0]
				if(kick_state==0){
 8003190:	4e51      	ldr	r6, [pc, #324]	; (80032d8 <maintask_run+0x510>)
			if(ball[0]==1){
 8003192:	2d01      	cmp	r5, #1
 8003194:	d057      	beq.n	8003246 <maintask_run+0x47e>
			if(kick_state==1){
 8003196:	6833      	ldr	r3, [r6, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d049      	beq.n	8003230 <maintask_run+0x468>
	  if(chipEN==1){
 800319c:	4d4f      	ldr	r5, [pc, #316]	; (80032dc <maintask_run+0x514>)
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800319e:	4f50      	ldr	r7, [pc, #320]	; (80032e0 <maintask_run+0x518>)
	  if(chipEN==1){
 80031a0:	7829      	ldrb	r1, [r5, #0]
 80031a2:	2901      	cmp	r1, #1
		  actuator_kicker(2, 0);
 80031a4:	bf18      	it	ne
 80031a6:	2100      	movne	r1, #0
 80031a8:	2002      	movs	r0, #2
 80031aa:	f7fd ffc3 	bl	8001134 <actuator_kicker>
	  actuator_kicker(1, 1);
 80031ae:	2101      	movs	r1, #1
 80031b0:	4608      	mov	r0, r1
 80031b2:	f7fd ffbf 	bl	8001134 <actuator_kicker>
	  actuator_kicker_voltage(250.0);
 80031b6:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80032e4 <maintask_run+0x51c>
 80031ba:	f7fd ff9b 	bl	80010f4 <actuator_kicker_voltage>
	  actuator_motor5(drible_power,1.0);
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <maintask_run+0x520>)
 80031c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80031c4:	ed93 0a00 	vldr	s0, [r3]
 80031c8:	f7fd ff78 	bl	80010bc <actuator_motor5>
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80031cc:	edd7 7a00 	vldr	s15, [r7]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80031d0:	4b46      	ldr	r3, [pc, #280]	; (80032ec <maintask_run+0x524>)
	  TX_data_UART[0]=254;
 80031d2:	4947      	ldr	r1, [pc, #284]	; (80032f0 <maintask_run+0x528>)
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80031d4:	ed93 7a04 	vldr	s14, [r3, #16]
	  TX_data_UART[6]=kick_state;
 80031d8:	6832      	ldr	r2, [r6, #0]
 80031da:	718a      	strb	r2, [r1, #6]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80031dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  TX_data_UART[5]=chipEN;
 80031e0:	7828      	ldrb	r0, [r5, #0]
 80031e2:	7148      	strb	r0, [r1, #5]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80031e4:	ee17 3a90 	vmov	r3, s15
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80031e8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80031ec:	4841      	ldr	r0, [pc, #260]	; (80032f4 <maintask_run+0x52c>)
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80031ee:	ee17 2a90 	vmov	r2, s15
 80031f2:	71ca      	strb	r2, [r1, #7]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80031f4:	f503 72b4 	add.w	r2, r3, #360	; 0x168
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80031f8:	3368      	adds	r3, #104	; 0x68
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 80031fa:	704b      	strb	r3, [r1, #1]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80031fc:	1213      	asrs	r3, r2, #8
	  TX_data_UART[4]=ball[1];
 80031fe:	7862      	ldrb	r2, [r4, #1]
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 8003200:	708b      	strb	r3, [r1, #2]
	  TX_data_UART[4]=ball[1];
 8003202:	710a      	strb	r2, [r1, #4]
	  TX_data_UART[3]=ball[0];
 8003204:	7823      	ldrb	r3, [r4, #0]
 8003206:	70cb      	strb	r3, [r1, #3]
	  TX_data_UART[0]=254;
 8003208:	22fe      	movs	r2, #254	; 0xfe
 800320a:	700a      	strb	r2, [r1, #0]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 800320c:	23ff      	movs	r3, #255	; 0xff
 800320e:	2208      	movs	r2, #8
 8003210:	f006 faf8 	bl	8009804 <HAL_UART_Transmit>
	  yawAngle_temp=yawAngle;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <maintask_run+0x530>)
 8003218:	6013      	str	r3, [r2, #0]
}
 800321a:	b003      	add	sp, #12
 800321c:	ecbd 8b04 	vpop	{d8-d9}
 8003220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8003224:	f7fd f858 	bl	80002d8 <__aeabi_dsub>
 8003228:	e751      	b.n	80030ce <maintask_run+0x306>
 800322a:	f7fd f855 	bl	80002d8 <__aeabi_dsub>
 800322e:	e689      	b.n	8002f44 <maintask_run+0x17c>
				kick_time++;
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <maintask_run+0x534>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	3201      	adds	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
				if(kick_time>100){
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2a64      	cmp	r2, #100	; 0x64
 800323c:	ddae      	ble.n	800319c <maintask_run+0x3d4>
					kick_state=0;
 800323e:	2200      	movs	r2, #0
 8003240:	6032      	str	r2, [r6, #0]
					kick_time=0;
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e7aa      	b.n	800319c <maintask_run+0x3d4>
				if(kick_state==0){
 8003246:	6833      	ldr	r3, [r6, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1a4      	bne.n	8003196 <maintask_run+0x3ce>
				  uint8_t kick_power_param=(float)kick_power*255.0;
 800324c:	ee17 0a90 	vmov	r0, s15
 8003250:	f7fd f9a2 	bl	8000598 <__aeabi_f2d>
 8003254:	a316      	add	r3, pc, #88	; (adr r3, 80032b0 <maintask_run+0x4e8>)
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f7fd f9f5 	bl	8000648 <__aeabi_dmul>
 800325e:	f7fd fccb 	bl	8000bf8 <__aeabi_d2uiz>
 8003262:	b2c1      	uxtb	r1, r0
				  printf(" kick=%d\r\n",kick_power_param);
 8003264:	4826      	ldr	r0, [pc, #152]	; (8003300 <maintask_run+0x538>)
 8003266:	9101      	str	r1, [sp, #4]
 8003268:	f007 f9c0 	bl	800a5ec <iprintf>
				  actuator_kicker(3, (uint8_t)kick_power_param);
 800326c:	9901      	ldr	r1, [sp, #4]
 800326e:	2003      	movs	r0, #3
 8003270:	f7fd ff60 	bl	8001134 <actuator_kicker>
				kick_state=1;
 8003274:	6035      	str	r5, [r6, #0]
 8003276:	e78e      	b.n	8003196 <maintask_run+0x3ce>
	if(omega<-6*M_PI){omega=-6*M_PI;}
 8003278:	a30f      	add	r3, pc, #60	; (adr r3, 80032b8 <maintask_run+0x4f0>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	4620      	mov	r0, r4
 8003280:	4629      	mov	r1, r5
 8003282:	f7fd fc53 	bl	8000b2c <__aeabi_dcmplt>
 8003286:	b170      	cbz	r0, 80032a6 <maintask_run+0x4de>
 8003288:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8003304 <maintask_run+0x53c>
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <maintask_run+0x4fc>)
 800328e:	eeb0 8a67 	vmov.f32	s16, s15
 8003292:	edc3 7a00 	vstr	s15, [r3]
 8003296:	e764      	b.n	8003162 <maintask_run+0x39a>
 8003298:	4e0f      	ldr	r6, [pc, #60]	; (80032d8 <maintask_run+0x510>)
 800329a:	e77f      	b.n	800319c <maintask_run+0x3d4>
    while (angle_rad > M_PI) {
 800329c:	eeb0 9a48 	vmov.f32	s18, s16
 80032a0:	4654      	mov	r4, sl
 80032a2:	465d      	mov	r5, fp
 80032a4:	e616      	b.n	8002ed4 <maintask_run+0x10c>
	omega=(getAngleDiff(theta_target,(yawAngle/180.0*M_PI))*7.0)
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <maintask_run+0x4fc>)
 80032a8:	ed83 8a00 	vstr	s16, [r3]
 80032ac:	e759      	b.n	8003162 <maintask_run+0x39a>
 80032ae:	bf00      	nop
 80032b0:	00000000 	.word	0x00000000
 80032b4:	406fe000 	.word	0x406fe000
 80032b8:	7f3321d2 	.word	0x7f3321d2
 80032bc:	c032d97c 	.word	0xc032d97c
 80032c0:	4196cbe4 	.word	0x4196cbe4
 80032c4:	20000730 	.word	0x20000730
 80032c8:	20000764 	.word	0x20000764
 80032cc:	20000768 	.word	0x20000768
 80032d0:	20000694 	.word	0x20000694
 80032d4:	200006e8 	.word	0x200006e8
 80032d8:	200006ec 	.word	0x200006ec
 80032dc:	2000069e 	.word	0x2000069e
 80032e0:	2000076c 	.word	0x2000076c
 80032e4:	437a0000 	.word	0x437a0000
 80032e8:	200006b4 	.word	0x200006b4
 80032ec:	200005bc 	.word	0x200005bc
 80032f0:	20000628 	.word	0x20000628
 80032f4:	200009c8 	.word	0x200009c8
 80032f8:	20000770 	.word	0x20000770
 80032fc:	200006f0 	.word	0x200006f0
 8003300:	0800ca3c 	.word	0x0800ca3c
 8003304:	c196cbe4 	.word	0xc196cbe4
 8003308:	7f3321d2 	.word	0x7f3321d2
 800330c:	4032d97c 	.word	0x4032d97c

08003310 <maintask_emargency>:
void maintask_emargency(){
 8003310:	b500      	push	{lr}
	  actuator_motor1(0.0,0.0);
 8003312:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80033cc <maintask_emargency+0xbc>
void maintask_emargency(){
 8003316:	b085      	sub	sp, #20
	  actuator_motor1(0.0,0.0);
 8003318:	eef0 0a40 	vmov.f32	s1, s0
 800331c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003320:	f7fd fe5c 	bl	8000fdc <actuator_motor1>
	  actuator_motor2(0.0,0.0);
 8003324:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003328:	eef0 0a40 	vmov.f32	s1, s0
 800332c:	f7fd fe72 	bl	8001014 <actuator_motor2>
	  actuator_motor3(0.0,0.0);
 8003330:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003334:	eef0 0a40 	vmov.f32	s1, s0
 8003338:	f7fd fe88 	bl	800104c <actuator_motor3>
	  actuator_motor4(0.0,0.0);
 800333c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8003340:	eef0 0a40 	vmov.f32	s1, s0
 8003344:	f7fd fe9e 	bl	8001084 <actuator_motor4>
	  actuator_motor5(0.0,0.0);
 8003348:	ed9d 0a01 	vldr	s0, [sp, #4]
 800334c:	eef0 0a40 	vmov.f32	s1, s0
 8003350:	f7fd feb4 	bl	80010bc <actuator_motor5>
	  TX_data_UART[1]=error_No[0];
 8003354:	481e      	ldr	r0, [pc, #120]	; (80033d0 <maintask_emargency+0xc0>)
	  TX_data_UART[0]=254;
 8003356:	491f      	ldr	r1, [pc, #124]	; (80033d4 <maintask_emargency+0xc4>)
	  TX_data_UART[1]=error_No[0];
 8003358:	f890 c000 	ldrb.w	ip, [r0]
 800335c:	f881 c001 	strb.w	ip, [r1, #1]
	  TX_data_UART[0]=254;
 8003360:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
 8003364:	f881 c000 	strb.w	ip, [r1]
	  TX_data_UART[2]=error_No[1];
 8003368:	f890 c001 	ldrb.w	ip, [r0, #1]
 800336c:	f881 c002 	strb.w	ip, [r1, #2]
	  TX_data_UART[3]=error_No[2];
 8003370:	f890 c002 	ldrb.w	ip, [r0, #2]
	  TX_data_UART[4]=error_No[3];
 8003374:	78c0      	ldrb	r0, [r0, #3]
 8003376:	7108      	strb	r0, [r1, #4]
	  TX_data_UART[5]=252;
 8003378:	20fc      	movs	r0, #252	; 0xfc
 800337a:	7148      	strb	r0, [r1, #5]
	  TX_data_UART[6]=122;
 800337c:	f64c 007a 	movw	r0, #51322	; 0xc87a
	  TX_data_UART[3]=error_No[2];
 8003380:	f881 c003 	strb.w	ip, [r1, #3]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8003384:	23ff      	movs	r3, #255	; 0xff
 8003386:	2208      	movs	r2, #8
	  TX_data_UART[6]=122;
 8003388:	80c8      	strh	r0, [r1, #6]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 800338a:	4813      	ldr	r0, [pc, #76]	; (80033d8 <maintask_emargency+0xc8>)
 800338c:	f006 fa3a 	bl	8009804 <HAL_UART_Transmit>
	  actuator_buzzer(150, 150);
 8003390:	2196      	movs	r1, #150	; 0x96
 8003392:	4608      	mov	r0, r1
 8003394:	f7fd ff0c 	bl	80011b0 <actuator_buzzer>
	  can1_send(0x000, senddata_error);
 8003398:	a902      	add	r1, sp, #8
 800339a:	2000      	movs	r0, #0
 800339c:	f7fe f916 	bl	80015cc <can1_send>
	  can2_send(0x000, senddata_error);
 80033a0:	a902      	add	r1, sp, #8
 80033a2:	2000      	movs	r0, #0
 80033a4:	f7fe f95e 	bl	8001664 <can2_send>
	  actuator_kicker(1, 0);
 80033a8:	2100      	movs	r1, #0
 80033aa:	2001      	movs	r0, #1
 80033ac:	f7fd fec2 	bl	8001134 <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80033b0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80033b4:	f7fd fe9e 	bl	80010f4 <actuator_kicker_voltage>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 80033b8:	4808      	ldr	r0, [pc, #32]	; (80033dc <maintask_emargency+0xcc>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033c0:	f003 fe78 	bl	80070b4 <HAL_GPIO_WritePin>
}
 80033c4:	b005      	add	sp, #20
 80033c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ca:	bf00      	nop
 80033cc:	00000000 	.word	0x00000000
 80033d0:	200006b8 	.word	0x200006b8
 80033d4:	20000628 	.word	0x20000628
 80033d8:	200009c8 	.word	0x200009c8
 80033dc:	48000400 	.word	0x48000400

080033e0 <HAL_GPIO_EXTI_Callback>:
   return uwTick;
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <HAL_GPIO_EXTI_Callback+0x74>)
 80033e2:	681b      	ldr	r3, [r3, #0]
	if(HAL_GetTick()>2000){
 80033e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033e8:	d915      	bls.n	8003416 <HAL_GPIO_EXTI_Callback+0x36>
{
 80033ea:	b570      	push	{r4, r5, r6, lr}
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 80033ec:	4e1a      	ldr	r6, [pc, #104]	; (8003458 <HAL_GPIO_EXTI_Callback+0x78>)
 80033ee:	2464      	movs	r4, #100	; 0x64
 80033f0:	e005      	b.n	80033fe <HAL_GPIO_EXTI_Callback+0x1e>
				delayUs(1);
 80033f2:	f001 fc5f 	bl	8004cb4 <delayUs>
		while(cnt<100){
 80033f6:	1e63      	subs	r3, r4, #1
 80033f8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80033fc:	d00c      	beq.n	8003418 <HAL_GPIO_EXTI_Callback+0x38>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==1){
 80033fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003402:	4630      	mov	r0, r6
 8003404:	f003 fe50 	bl	80070a8 <HAL_GPIO_ReadPin>
 8003408:	2801      	cmp	r0, #1
 800340a:	4605      	mov	r5, r0
 800340c:	d0f1      	beq.n	80033f2 <HAL_GPIO_EXTI_Callback+0x12>
			Emargency=0;
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <HAL_GPIO_EXTI_Callback+0x7c>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
}
 8003414:	bd70      	pop	{r4, r5, r6, pc}
 8003416:	4770      	bx	lr
			Emargency=1;
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_GPIO_EXTI_Callback+0x7c>)
			printf("Emargency Stop !!!!!!!!!!!!!");
 800341a:	4811      	ldr	r0, [pc, #68]	; (8003460 <HAL_GPIO_EXTI_Callback+0x80>)
			Emargency=1;
 800341c:	701d      	strb	r5, [r3, #0]
			printf("Emargency Stop !!!!!!!!!!!!!");
 800341e:	2432      	movs	r4, #50	; 0x32
 8003420:	f007 f8e4 	bl	800a5ec <iprintf>
				maintask_emargency();
 8003424:	f7ff ff74 	bl	8003310 <maintask_emargency>
			for(int i=0;i<50;i++){
 8003428:	3c01      	subs	r4, #1
 800342a:	d1fb      	bne.n	8003424 <HAL_GPIO_EXTI_Callback+0x44>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,0);
 800342c:	480a      	ldr	r0, [pc, #40]	; (8003458 <HAL_GPIO_EXTI_Callback+0x78>)
 800342e:	4622      	mov	r2, r4
 8003430:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003434:	f003 fe3e 	bl	80070b4 <HAL_GPIO_WritePin>
 8003438:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800343c:	4909      	ldr	r1, [pc, #36]	; (8003464 <HAL_GPIO_EXTI_Callback+0x84>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_GPIO_EXTI_Callback+0x88>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003440:	68ca      	ldr	r2, [r1, #12]
 8003442:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003446:	4313      	orrs	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
 800344a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800344e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003450:	e7fd      	b.n	800344e <HAL_GPIO_EXTI_Callback+0x6e>
 8003452:	bf00      	nop
 8003454:	20000aec 	.word	0x20000aec
 8003458:	48000400 	.word	0x48000400
 800345c:	200005b2 	.word	0x200005b2
 8003460:	0800ca48 	.word	0x0800ca48
 8003464:	e000ed00 	.word	0xe000ed00
 8003468:	05fa0004 	.word	0x05fa0004

0800346c <maintask_state_stop>:
void maintask_state_stop(){
 800346c:	b510      	push	{r4, lr}
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800346e:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <maintask_state_stop+0x88>)
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003470:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80034f8 <maintask_state_stop+0x8c>
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003474:	edd3 7a00 	vldr	s15, [r3]
 8003478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
void maintask_state_stop(){
 800347c:	b082      	sub	sp, #8
	  omni_move(0.0, 0.0, 0.0,0.0);
 800347e:	eef0 1a40 	vmov.f32	s3, s0
 8003482:	eeb0 1a40 	vmov.f32	s2, s0
 8003486:	eef0 0a40 	vmov.f32	s1, s0
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800348a:	ee17 4a90 	vmov	r4, s15
	  omni_move(0.0, 0.0, 0.0,0.0);
 800348e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003492:	f001 fc51 	bl	8004d38 <omni_move>
	  actuator_motor5(0.0,0.0);
 8003496:	ed9d 0a01 	vldr	s0, [sp, #4]
 800349a:	eef0 0a40 	vmov.f32	s1, s0
 800349e:	f7fd fe0d 	bl	80010bc <actuator_motor5>
	  TX_data_UART[0]=254;
 80034a2:	4916      	ldr	r1, [pc, #88]	; (80034fc <maintask_state_stop+0x90>)
	  TX_data_UART[3]=error_No[0];
 80034a4:	4a16      	ldr	r2, [pc, #88]	; (8003500 <maintask_state_stop+0x94>)
    uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 80034a6:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 80034aa:	121b      	asrs	r3, r3, #8
 80034ac:	708b      	strb	r3, [r1, #2]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <maintask_state_stop+0x98>)
 80034b0:	edd3 7a04 	vldr	s15, [r3, #16]
	  TX_data_UART[3]=error_No[0];
 80034b4:	7813      	ldrb	r3, [r2, #0]
 80034b6:	70cb      	strb	r3, [r1, #3]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80034b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 80034bc:	3468      	adds	r4, #104	; 0x68
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80034be:	ee17 3a90 	vmov	r3, s15
	  TX_data_UART[4]=error_No[1];
 80034c2:	7852      	ldrb	r2, [r2, #1]
	  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 80034c4:	704c      	strb	r4, [r1, #1]
	  TX_data_UART[0]=254;
 80034c6:	20fe      	movs	r0, #254	; 0xfe
	  TX_data_UART[5]=1;
 80034c8:	2401      	movs	r4, #1
	  TX_data_UART[0]=254;
 80034ca:	7008      	strb	r0, [r1, #0]
	  TX_data_UART[4]=error_No[1];
 80034cc:	710a      	strb	r2, [r1, #4]
	  TX_data_UART[5]=1;
 80034ce:	714c      	strb	r4, [r1, #5]
	  TX_data_UART[6]=1;
 80034d0:	718c      	strb	r4, [r1, #6]
	  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 80034d2:	71cb      	strb	r3, [r1, #7]
	  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 80034d4:	2208      	movs	r2, #8
 80034d6:	23ff      	movs	r3, #255	; 0xff
 80034d8:	480b      	ldr	r0, [pc, #44]	; (8003508 <maintask_state_stop+0x9c>)
 80034da:	f006 f993 	bl	8009804 <HAL_UART_Transmit>
	  actuator_kicker(1, 0);
 80034de:	2100      	movs	r1, #0
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7fd fe27 	bl	8001134 <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80034e6:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 80034ea:	b002      	add	sp, #8
 80034ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  actuator_kicker_voltage(0.0);
 80034f0:	f7fd be00 	b.w	80010f4 <actuator_kicker_voltage>
 80034f4:	2000076c 	.word	0x2000076c
 80034f8:	00000000 	.word	0x00000000
 80034fc:	20000628 	.word	0x20000628
 8003500:	200006b8 	.word	0x200006b8
 8003504:	200005bc 	.word	0x200005bc
 8003508:	200009c8 	.word	0x200009c8

0800350c <maintask_stop>:
void maintask_stop(){
 800350c:	b510      	push	{r4, lr}
	  omni_move(0.0, 0.0, 0.0,0.0);
 800350e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80035b4 <maintask_stop+0xa8>
void maintask_stop(){
 8003512:	b082      	sub	sp, #8
	  omni_move(0.0, 0.0, 0.0,0.0);
 8003514:	eef0 1a40 	vmov.f32	s3, s0
 8003518:	eeb0 1a40 	vmov.f32	s2, s0
 800351c:	eef0 0a40 	vmov.f32	s1, s0
 8003520:	ed8d 0a01 	vstr	s0, [sp, #4]
 8003524:	f001 fc08 	bl	8004d38 <omni_move>
	  actuator_motor5(0.0,0.0);
 8003528:	ed9d 0a01 	vldr	s0, [sp, #4]
 800352c:	eef0 0a40 	vmov.f32	s1, s0
 8003530:	f7fd fdc4 	bl	80010bc <actuator_motor5>
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <maintask_stop+0xac>)
		  omni_move(0.0, 0.0, 0.0,0.0);
 8003536:	ed9d 0a01 	vldr	s0, [sp, #4]
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		  omni_move(0.0, 0.0, 0.0,0.0);
 8003542:	eef0 1a40 	vmov.f32	s3, s0
 8003546:	eeb0 1a40 	vmov.f32	s2, s0
 800354a:	eef0 0a40 	vmov.f32	s1, s0
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800354e:	ee17 4a90 	vmov	r4, s15
		  omni_move(0.0, 0.0, 0.0,0.0);
 8003552:	f001 fbf1 	bl	8004d38 <omni_move>
		  actuator_motor5(0.0,0.0);
 8003556:	ed9d 0a01 	vldr	s0, [sp, #4]
 800355a:	eef0 0a40 	vmov.f32	s1, s0
 800355e:	f7fd fdad 	bl	80010bc <actuator_motor5>
		  TX_data_UART[0]=254;
 8003562:	4916      	ldr	r1, [pc, #88]	; (80035bc <maintask_stop+0xb0>)
		  TX_data_UART[3]=error_No[0];
 8003564:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <maintask_stop+0xb4>)
      uint8_t yawAngle_send_high = (((int)yawAngle+360) & 0xFF00) >> 8;
 8003566:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 800356a:	121b      	asrs	r3, r3, #8
 800356c:	708b      	strb	r3, [r1, #2]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <maintask_stop+0xb8>)
 8003570:	edd3 7a04 	vldr	s15, [r3, #16]
		  TX_data_UART[3]=error_No[0];
 8003574:	7813      	ldrb	r3, [r2, #0]
 8003576:	70cb      	strb	r3, [r1, #3]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
      uint8_t yawAngle_send_low = ((int)yawAngle+360) & 0x00FF;
 800357c:	3468      	adds	r4, #104	; 0x68
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 800357e:	ee17 3a90 	vmov	r3, s15
		  TX_data_UART[4]=error_No[1];
 8003582:	7852      	ldrb	r2, [r2, #1]
		  TX_data_UART[1]=(uint8_t)yawAngle_send_low;
 8003584:	704c      	strb	r4, [r1, #1]
		  TX_data_UART[0]=254;
 8003586:	20fe      	movs	r0, #254	; 0xfe
		  TX_data_UART[5]=0;
 8003588:	2400      	movs	r4, #0
		  TX_data_UART[0]=254;
 800358a:	7008      	strb	r0, [r1, #0]
		  TX_data_UART[4]=error_No[1];
 800358c:	710a      	strb	r2, [r1, #4]
		  TX_data_UART[5]=0;
 800358e:	714c      	strb	r4, [r1, #5]
		  TX_data_UART[6]=0;
 8003590:	718c      	strb	r4, [r1, #6]
		  TX_data_UART[7]=(uint8_t)Power_voltage[4];
 8003592:	71cb      	strb	r3, [r1, #7]
		  HAL_UART_Transmit(&huart2, TX_data_UART, 8,0xff);
 8003594:	2208      	movs	r2, #8
 8003596:	23ff      	movs	r3, #255	; 0xff
 8003598:	480b      	ldr	r0, [pc, #44]	; (80035c8 <maintask_stop+0xbc>)
 800359a:	f006 f933 	bl	8009804 <HAL_UART_Transmit>
	  actuator_kicker(1, 0);
 800359e:	4621      	mov	r1, r4
 80035a0:	2001      	movs	r0, #1
 80035a2:	f7fd fdc7 	bl	8001134 <actuator_kicker>
	  actuator_kicker_voltage(0.0);
 80035a6:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 80035aa:	b002      	add	sp, #8
 80035ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  actuator_kicker_voltage(0.0);
 80035b0:	f7fd bda0 	b.w	80010f4 <actuator_kicker_voltage>
 80035b4:	00000000 	.word	0x00000000
 80035b8:	2000076c 	.word	0x2000076c
 80035bc:	20000628 	.word	0x20000628
 80035c0:	200006b8 	.word	0x200006b8
 80035c4:	200005bc 	.word	0x200005bc
 80035c8:	200009c8 	.word	0x200009c8
 80035cc:	00000000 	.word	0x00000000

080035d0 <HAL_TIM_PeriodElapsedCallback>:
{
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	ed2d 8b04 	vpush	{d8-d9}
 80035d8:	b089      	sub	sp, #36	; 0x24
	 ICM20602_read_IMU_data();
 80035da:	f7fe fc85 	bl	8001ee8 <ICM20602_read_IMU_data>
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 80035de:	2120      	movs	r1, #32
 80035e0:	48c5      	ldr	r0, [pc, #788]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80035e2:	f003 fd61 	bl	80070a8 <HAL_GPIO_ReadPin>
 80035e6:	2140      	movs	r1, #64	; 0x40
 80035e8:	4605      	mov	r5, r0
 80035ea:	48c3      	ldr	r0, [pc, #780]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80035ec:	f003 fd5c 	bl	80070a8 <HAL_GPIO_ReadPin>
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 80035f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 80035f4:	4604      	mov	r4, r0
	 	 					  + (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)<<3) + (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)<<2));
 80035f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035fa:	f003 fd55 	bl	80070a8 <HAL_GPIO_ReadPin>
 80035fe:	f1c5 030f 	rsb	r3, r5, #15
 8003602:	4606      	mov	r6, r0
 8003604:	2104      	movs	r1, #4
 8003606:	48bd      	ldr	r0, [pc, #756]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003608:	eba3 0544 	sub.w	r5, r3, r4, lsl #1
 800360c:	f003 fd4c 	bl	80070a8 <HAL_GPIO_ReadPin>
 8003610:	b2ec      	uxtb	r4, r5
	 sw_mode=15-(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) + (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)<<1)
 8003612:	eba4 04c6 	sub.w	r4, r4, r6, lsl #3
 8003616:	4bba      	ldr	r3, [pc, #744]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003618:	eba4 0080 	sub.w	r0, r4, r0, lsl #2
 800361c:	b2c0      	uxtb	r0, r0
 800361e:	7018      	strb	r0, [r3, #0]
	 switch (sw_mode){
 8003620:	2806      	cmp	r0, #6
 8003622:	f200 85d0 	bhi.w	80041c6 <HAL_TIM_PeriodElapsedCallback+0xbf6>
 8003626:	e8df f010 	tbh	[pc, r0, lsl #1]
 800362a:	0067      	.short	0x0067
 800362c:	02540187 	.word	0x02540187
 8003630:	026a027c 	.word	0x026a027c
 8003634:	00070298 	.word	0x00070298
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003638:	4bb2      	ldr	r3, [pc, #712]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x334>)
    }
}

uint8_t decode_SW(uint16_t SW_data){
	int data;
	if(SW_data<100){
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	2b63      	cmp	r3, #99	; 0x63
 800363e:	f240 8331 	bls.w	8003ca4 <HAL_TIM_PeriodElapsedCallback+0x6d4>
	 			 actuator_motor5(0.0,0.0);
 8003642:	eddf 0ab1 	vldr	s1, [pc, #708]	; 8003908 <HAL_TIM_PeriodElapsedCallback+0x338>
 8003646:	eeb0 0a60 	vmov.f32	s0, s1
 800364a:	f7fd fd37 	bl	80010bc <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	48ae      	ldr	r0, [pc, #696]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003652:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003656:	f003 fd2d 	bl	80070b4 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 800365a:	2101      	movs	r1, #1
 800365c:	4608      	mov	r0, r1
 800365e:	f7fd fd69 	bl	8001134 <actuator_kicker>
	 			 actuator_kicker(2, 1);
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f7fd fd65 	bl	8001134 <actuator_kicker>
	 			 actuator_kicker_voltage(0.0);
 800366a:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8003908 <HAL_TIM_PeriodElapsedCallback+0x338>
 800366e:	f7fd fd41 	bl	80010f4 <actuator_kicker_voltage>
					kick_state=0;
 8003672:	49a7      	ldr	r1, [pc, #668]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x340>)
					kick_time=0;
 8003674:	4aa7      	ldr	r2, [pc, #668]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x344>)
					kick_state=0;
 8003676:	2300      	movs	r3, #0
 8003678:	600b      	str	r3, [r1, #0]
					kick_time=0;
 800367a:	6013      	str	r3, [r2, #0]
				omni_move(0.0, 0.0, 0.0,0.0);
 800367c:	eddf 1aa2 	vldr	s3, [pc, #648]	; 8003908 <HAL_TIM_PeriodElapsedCallback+0x338>
 8003680:	eeb0 1a61 	vmov.f32	s2, s3
 8003684:	eef0 0a61 	vmov.f32	s1, s3
 8003688:	eeb0 0a61 	vmov.f32	s0, s3
 800368c:	f001 fb54 	bl	8004d38 <omni_move>
	 if(cnt_time_tim>50){
 8003690:	4ca1      	ldr	r4, [pc, #644]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8003692:	8823      	ldrh	r3, [r4, #0]
 8003694:	2b32      	cmp	r3, #50	; 0x32
 8003696:	d912      	bls.n	80036be <HAL_TIM_PeriodElapsedCallback+0xee>
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 8003698:	4ea0      	ldr	r6, [pc, #640]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800369a:	4da1      	ldr	r5, [pc, #644]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800369c:	7af2      	ldrb	r2, [r6, #11]
 800369e:	782b      	ldrb	r3, [r5, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80036a0:	489a      	ldr	r0, [pc, #616]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x33c>)
	 if(Ether_connect_check != data_from_ether[Rxbufsize_from_Ether-3]){
 80036a2:	429a      	cmp	r2, r3
		 Ether_connect=1;
 80036a4:	4b9f      	ldr	r3, [pc, #636]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80036a6:	bf14      	ite	ne
 80036a8:	2201      	movne	r2, #1
		 Ether_connect=0;
 80036aa:	2200      	moveq	r2, #0
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80036ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		 Ether_connect=0;
 80036b0:	701a      	strb	r2, [r3, #0]
		 HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80036b2:	f003 fcff 	bl	80070b4 <HAL_GPIO_WritePin>
	 Ether_connect_check=data_from_ether[Rxbufsize_from_Ether-3];
 80036b6:	7af2      	ldrb	r2, [r6, #11]
 80036b8:	702a      	strb	r2, [r5, #0]
	 cnt_time_tim=0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	8023      	strh	r3, [r4, #0]
	 if(cnt_time_50Hz>50){
 80036be:	4d9a      	ldr	r5, [pc, #616]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80036c0:	882a      	ldrh	r2, [r5, #0]
 80036c2:	2a32      	cmp	r2, #50	; 0x32
 80036c4:	d90f      	bls.n	80036e6 <HAL_TIM_PeriodElapsedCallback+0x116>
       if(sw_mode>0){
 80036c6:	4b8e      	ldr	r3, [pc, #568]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 8284 	bne.w	8003bd8 <HAL_TIM_PeriodElapsedCallback+0x608>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80036d0:	4889      	ldr	r0, [pc, #548]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	f003 fcf4 	bl	80070c0 <HAL_GPIO_TogglePin>
		  cnt_time_50Hz=0;
 80036d8:	2300      	movs	r3, #0
		  actuator_power_ONOFF(1);
 80036da:	2001      	movs	r0, #1
		  cnt_time_50Hz=0;
 80036dc:	802b      	strh	r3, [r5, #0]
		  actuator_power_ONOFF(1);
 80036de:	f7fd fd39 	bl	8001154 <actuator_power_ONOFF>
	 cnt_time_50Hz++;
 80036e2:	882a      	ldrh	r2, [r5, #0]
	 cnt_time_tim++;
 80036e4:	8823      	ldrh	r3, [r4, #0]
	 cnt_time_50Hz++;
 80036e6:	3201      	adds	r2, #1
	 cnt_time_tim++;
 80036e8:	3301      	adds	r3, #1
	 cnt_time_50Hz++;
 80036ea:	802a      	strh	r2, [r5, #0]
	 cnt_time_tim++;
 80036ec:	8023      	strh	r3, [r4, #0]
}
 80036ee:	b009      	add	sp, #36	; 0x24
 80036f0:	ecbd 8b04 	vpop	{d8-d9}
 80036f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 		if(Ether_connect==1){
 80036f8:	4b8a      	ldr	r3, [pc, #552]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 80036fe:	4b8b      	ldr	r3, [pc, #556]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003700:	9304      	str	r3, [sp, #16]
 8003702:	ed93 8a00 	vldr	s16, [r3]
 8003706:	ee18 0a10 	vmov	r0, s16
	 		if(Ether_connect==1){
 800370a:	f000 845a 	beq.w	8003fc2 <HAL_TIM_PeriodElapsedCallback+0x9f2>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 800370e:	f7fc ff43 	bl	8000598 <__aeabi_f2d>
 8003712:	eddf 7a87 	vldr	s15, [pc, #540]	; 8003930 <HAL_TIM_PeriodElapsedCallback+0x360>
 8003716:	ee68 7a27 	vmul.f32	s15, s16, s15
 800371a:	ec41 0b19 	vmov	d9, r0, r1
 800371e:	ee17 0a90 	vmov	r0, s15
 8003722:	f7fc ff39 	bl	8000598 <__aeabi_f2d>
 8003726:	a36a      	add	r3, pc, #424	; (adr r3, 80038d0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f7fc ff8c 	bl	8000648 <__aeabi_dmul>
 8003730:	f7fd fa82 	bl	8000c38 <__aeabi_d2f>
 8003734:	4b7f      	ldr	r3, [pc, #508]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003736:	ee08 0a10 	vmov	s16, r0
 800373a:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 800373e:	f7fc ff2b 	bl	8000598 <__aeabi_f2d>
 8003742:	a365      	add	r3, pc, #404	; (adr r3, 80038d8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	4680      	mov	r8, r0
 800374a:	4689      	mov	r9, r1
 800374c:	f7fd fa0c 	bl	8000b68 <__aeabi_dcmpgt>
 8003750:	b1c8      	cbz	r0, 8003786 <HAL_TIM_PeriodElapsedCallback+0x1b6>
        angle_rad -= 2.0f * M_PI;
 8003752:	a763      	add	r7, pc, #396	; (adr r7, 80038e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003754:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003758:	a55f      	add	r5, pc, #380	; (adr r5, 80038d8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800375a:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 800375e:	4632      	mov	r2, r6
 8003760:	463b      	mov	r3, r7
 8003762:	4640      	mov	r0, r8
 8003764:	4649      	mov	r1, r9
 8003766:	f7fc fdb7 	bl	80002d8 <__aeabi_dsub>
 800376a:	f7fd fa65 	bl	8000c38 <__aeabi_d2f>
 800376e:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8003772:	f7fc ff11 	bl	8000598 <__aeabi_f2d>
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	4680      	mov	r8, r0
 800377c:	4689      	mov	r9, r1
 800377e:	f7fd f9f3 	bl	8000b68 <__aeabi_dcmpgt>
 8003782:	2800      	cmp	r0, #0
 8003784:	d1eb      	bne.n	800375e <HAL_TIM_PeriodElapsedCallback+0x18e>
    while (angle_rad < -M_PI) {
 8003786:	a358      	add	r3, pc, #352	; (adr r3, 80038e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	4640      	mov	r0, r8
 800378e:	4649      	mov	r1, r9
 8003790:	f7fd f9cc 	bl	8000b2c <__aeabi_dcmplt>
 8003794:	b1c8      	cbz	r0, 80037ca <HAL_TIM_PeriodElapsedCallback+0x1fa>
        angle_rad += 2.0f * M_PI;
 8003796:	a752      	add	r7, pc, #328	; (adr r7, 80038e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8003798:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 800379c:	a552      	add	r5, pc, #328	; (adr r5, 80038e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800379e:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 80037a2:	4632      	mov	r2, r6
 80037a4:	463b      	mov	r3, r7
 80037a6:	4640      	mov	r0, r8
 80037a8:	4649      	mov	r1, r9
 80037aa:	f7fc fd97 	bl	80002dc <__adddf3>
 80037ae:	f7fd fa43 	bl	8000c38 <__aeabi_d2f>
 80037b2:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 80037b6:	f7fc feef 	bl	8000598 <__aeabi_f2d>
 80037ba:	4622      	mov	r2, r4
 80037bc:	462b      	mov	r3, r5
 80037be:	4680      	mov	r8, r0
 80037c0:	4689      	mov	r9, r1
 80037c2:	f7fd f9b3 	bl	8000b2c <__aeabi_dcmplt>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d1eb      	bne.n	80037a2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
    while (angle_rad > M_PI) {
 80037ca:	ee18 0a90 	vmov	r0, s17
 80037ce:	f7fc fee3 	bl	8000598 <__aeabi_f2d>
 80037d2:	a341      	add	r3, pc, #260	; (adr r3, 80038d8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	4606      	mov	r6, r0
 80037da:	460f      	mov	r7, r1
 80037dc:	f7fd f9c4 	bl	8000b68 <__aeabi_dcmpgt>
 80037e0:	b1d0      	cbz	r0, 8003818 <HAL_TIM_PeriodElapsedCallback+0x248>
        angle_rad -= 2.0f * M_PI;
 80037e2:	a53f      	add	r5, pc, #252	; (adr r5, 80038e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80037e4:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 80037e8:	f20f 0bec 	addw	fp, pc, #236	; 0xec
 80037ec:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 80037f0:	4622      	mov	r2, r4
 80037f2:	462b      	mov	r3, r5
 80037f4:	4630      	mov	r0, r6
 80037f6:	4639      	mov	r1, r7
 80037f8:	f7fc fd6e 	bl	80002d8 <__aeabi_dsub>
 80037fc:	f7fd fa1c 	bl	8000c38 <__aeabi_d2f>
 8003800:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8003804:	f7fc fec8 	bl	8000598 <__aeabi_f2d>
 8003808:	4652      	mov	r2, sl
 800380a:	465b      	mov	r3, fp
 800380c:	4606      	mov	r6, r0
 800380e:	460f      	mov	r7, r1
 8003810:	f7fd f9aa 	bl	8000b68 <__aeabi_dcmpgt>
 8003814:	2800      	cmp	r0, #0
 8003816:	d1eb      	bne.n	80037f0 <HAL_TIM_PeriodElapsedCallback+0x220>
    while (angle_rad < -M_PI) {
 8003818:	a333      	add	r3, pc, #204	; (adr r3, 80038e8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	4630      	mov	r0, r6
 8003820:	4639      	mov	r1, r7
 8003822:	f7fd f983 	bl	8000b2c <__aeabi_dcmplt>
 8003826:	b1d0      	cbz	r0, 800385e <HAL_TIM_PeriodElapsedCallback+0x28e>
        angle_rad += 2.0f * M_PI;
 8003828:	a52d      	add	r5, pc, #180	; (adr r5, 80038e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800382a:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 800382e:	f20f 0bb8 	addw	fp, pc, #184	; 0xb8
 8003832:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 8003836:	4622      	mov	r2, r4
 8003838:	462b      	mov	r3, r5
 800383a:	4630      	mov	r0, r6
 800383c:	4639      	mov	r1, r7
 800383e:	f7fc fd4d 	bl	80002dc <__adddf3>
 8003842:	f7fd f9f9 	bl	8000c38 <__aeabi_d2f>
 8003846:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 800384a:	f7fc fea5 	bl	8000598 <__aeabi_f2d>
 800384e:	4652      	mov	r2, sl
 8003850:	465b      	mov	r3, fp
 8003852:	4606      	mov	r6, r0
 8003854:	460f      	mov	r7, r1
 8003856:	f7fd f969 	bl	8000b2c <__aeabi_dcmplt>
 800385a:	2800      	cmp	r0, #0
 800385c:	d1eb      	bne.n	8003836 <HAL_TIM_PeriodElapsedCallback+0x266>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 800385e:	ee78 7a68 	vsub.f32	s15, s16, s17
 8003862:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003866:	ee17 3a10 	vmov	r3, s14
 800386a:	2b00      	cmp	r3, #0
 800386c:	bfb8      	it	lt
 800386e:	425b      	neglt	r3, r3
 8003870:	2b03      	cmp	r3, #3
 8003872:	dd14      	ble.n	800389e <HAL_TIM_PeriodElapsedCallback+0x2ce>
    	if(angle_rad1 > angle_rad2){
 8003874:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 800387c:	a318      	add	r3, pc, #96	; (adr r3, 80038e0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	4640      	mov	r0, r8
 8003884:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 8003886:	f300 8121 	bgt.w	8003acc <HAL_TIM_PeriodElapsedCallback+0x4fc>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 800388a:	f7fc fd27 	bl	80002dc <__adddf3>
 800388e:	4632      	mov	r2, r6
 8003890:	463b      	mov	r3, r7
 8003892:	f7fc fd21 	bl	80002d8 <__aeabi_dsub>
 8003896:	f7fd f9cf 	bl	8000c38 <__aeabi_d2f>
 800389a:	ee07 0a90 	vmov	s15, r0
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 800389e:	ee17 0a90 	vmov	r0, s15
 80038a2:	f7fc fe79 	bl	8000598 <__aeabi_f2d>
 80038a6:	a312      	add	r3, pc, #72	; (adr r3, 80038f0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fecc 	bl	8000648 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	ec51 0b19 	vmov	r0, r1, d9
 80038b8:	f7fc fd0e 	bl	80002d8 <__aeabi_dsub>
 80038bc:	f7fd f9bc 	bl	8000c38 <__aeabi_d2f>
 80038c0:	9b04      	ldr	r3, [sp, #16]
 80038c2:	6018      	str	r0, [r3, #0]
	 			maintask_state_stop();
 80038c4:	f7ff fdd2 	bl	800346c <maintask_state_stop>
 80038c8:	e6e2      	b.n	8003690 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w
 80038d0:	16c16c17 	.word	0x16c16c17
 80038d4:	3f76c16c 	.word	0x3f76c16c
 80038d8:	54442d18 	.word	0x54442d18
 80038dc:	400921fb 	.word	0x400921fb
 80038e0:	54442d18 	.word	0x54442d18
 80038e4:	401921fb 	.word	0x401921fb
 80038e8:	54442d18 	.word	0x54442d18
 80038ec:	c00921fb 	.word	0xc00921fb
 80038f0:	48b81fe5 	.word	0x48b81fe5
 80038f4:	3fad55df 	.word	0x3fad55df
 80038f8:	48000400 	.word	0x48000400
 80038fc:	48000c00 	.word	0x48000c00
 8003900:	2000073c 	.word	0x2000073c
 8003904:	20000624 	.word	0x20000624
 8003908:	00000000 	.word	0x00000000
 800390c:	48000800 	.word	0x48000800
 8003910:	200006ec 	.word	0x200006ec
 8003914:	200006f0 	.word	0x200006f0
 8003918:	200006a2 	.word	0x200006a2
 800391c:	200006a4 	.word	0x200006a4
 8003920:	200005b4 	.word	0x200005b4
 8003924:	200005b3 	.word	0x200005b3
 8003928:	200006a0 	.word	0x200006a0
 800392c:	2000076c 	.word	0x2000076c
 8003930:	40490fdb 	.word	0x40490fdb
 8003934:	2000075c 	.word	0x2000075c
	 		if(Ether_connect==1){
 8003938:	4b9f      	ldr	r3, [pc, #636]	; (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 800393e:	4b9f      	ldr	r3, [pc, #636]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8003940:	9304      	str	r3, [sp, #16]
 8003942:	ed93 8a00 	vldr	s16, [r3]
 8003946:	ee18 0a10 	vmov	r0, s16
	 		if(Ether_connect==1){
 800394a:	f000 825b 	beq.w	8003e04 <HAL_TIM_PeriodElapsedCallback+0x834>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 800394e:	f7fc fe23 	bl	8000598 <__aeabi_f2d>
 8003952:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8003bc0 <HAL_TIM_PeriodElapsedCallback+0x5f0>
 8003956:	ee68 7a27 	vmul.f32	s15, s16, s15
 800395a:	ec41 0b19 	vmov	d9, r0, r1
 800395e:	ee17 0a90 	vmov	r0, s15
 8003962:	f7fc fe19 	bl	8000598 <__aeabi_f2d>
 8003966:	a38c      	add	r3, pc, #560	; (adr r3, 8003b98 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc fe6c 	bl	8000648 <__aeabi_dmul>
 8003970:	f7fd f962 	bl	8000c38 <__aeabi_d2f>
 8003974:	4b93      	ldr	r3, [pc, #588]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8003976:	ee08 0a10 	vmov	s16, r0
 800397a:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 800397e:	f7fc fe0b 	bl	8000598 <__aeabi_f2d>
 8003982:	a387      	add	r3, pc, #540	; (adr r3, 8003ba0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	4680      	mov	r8, r0
 800398a:	4689      	mov	r9, r1
 800398c:	f7fd f8ec 	bl	8000b68 <__aeabi_dcmpgt>
 8003990:	b1c8      	cbz	r0, 80039c6 <HAL_TIM_PeriodElapsedCallback+0x3f6>
        angle_rad -= 2.0f * M_PI;
 8003992:	a785      	add	r7, pc, #532	; (adr r7, 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003994:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003998:	a581      	add	r5, pc, #516	; (adr r5, 8003ba0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800399a:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 800399e:	4632      	mov	r2, r6
 80039a0:	463b      	mov	r3, r7
 80039a2:	4640      	mov	r0, r8
 80039a4:	4649      	mov	r1, r9
 80039a6:	f7fc fc97 	bl	80002d8 <__aeabi_dsub>
 80039aa:	f7fd f945 	bl	8000c38 <__aeabi_d2f>
 80039ae:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 80039b2:	f7fc fdf1 	bl	8000598 <__aeabi_f2d>
 80039b6:	4622      	mov	r2, r4
 80039b8:	462b      	mov	r3, r5
 80039ba:	4680      	mov	r8, r0
 80039bc:	4689      	mov	r9, r1
 80039be:	f7fd f8d3 	bl	8000b68 <__aeabi_dcmpgt>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d1eb      	bne.n	800399e <HAL_TIM_PeriodElapsedCallback+0x3ce>
    while (angle_rad < -M_PI) {
 80039c6:	a37a      	add	r3, pc, #488	; (adr r3, 8003bb0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	4640      	mov	r0, r8
 80039ce:	4649      	mov	r1, r9
 80039d0:	f7fd f8ac 	bl	8000b2c <__aeabi_dcmplt>
 80039d4:	b1c8      	cbz	r0, 8003a0a <HAL_TIM_PeriodElapsedCallback+0x43a>
        angle_rad += 2.0f * M_PI;
 80039d6:	a774      	add	r7, pc, #464	; (adr r7, 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80039d8:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80039dc:	a574      	add	r5, pc, #464	; (adr r5, 8003bb0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80039de:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 80039e2:	4632      	mov	r2, r6
 80039e4:	463b      	mov	r3, r7
 80039e6:	4640      	mov	r0, r8
 80039e8:	4649      	mov	r1, r9
 80039ea:	f7fc fc77 	bl	80002dc <__adddf3>
 80039ee:	f7fd f923 	bl	8000c38 <__aeabi_d2f>
 80039f2:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 80039f6:	f7fc fdcf 	bl	8000598 <__aeabi_f2d>
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	4680      	mov	r8, r0
 8003a00:	4689      	mov	r9, r1
 8003a02:	f7fd f893 	bl	8000b2c <__aeabi_dcmplt>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d1eb      	bne.n	80039e2 <HAL_TIM_PeriodElapsedCallback+0x412>
    while (angle_rad > M_PI) {
 8003a0a:	ee18 0a90 	vmov	r0, s17
 8003a0e:	f7fc fdc3 	bl	8000598 <__aeabi_f2d>
 8003a12:	a363      	add	r3, pc, #396	; (adr r3, 8003ba0 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	4606      	mov	r6, r0
 8003a1a:	460f      	mov	r7, r1
 8003a1c:	f7fd f8a4 	bl	8000b68 <__aeabi_dcmpgt>
 8003a20:	b1d0      	cbz	r0, 8003a58 <HAL_TIM_PeriodElapsedCallback+0x488>
        angle_rad -= 2.0f * M_PI;
 8003a22:	a561      	add	r5, pc, #388	; (adr r5, 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003a24:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad > M_PI) {
 8003a28:	f20f 1b74 	addw	fp, pc, #372	; 0x174
 8003a2c:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8003a30:	4622      	mov	r2, r4
 8003a32:	462b      	mov	r3, r5
 8003a34:	4630      	mov	r0, r6
 8003a36:	4639      	mov	r1, r7
 8003a38:	f7fc fc4e 	bl	80002d8 <__aeabi_dsub>
 8003a3c:	f7fd f8fc 	bl	8000c38 <__aeabi_d2f>
 8003a40:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8003a44:	f7fc fda8 	bl	8000598 <__aeabi_f2d>
 8003a48:	4652      	mov	r2, sl
 8003a4a:	465b      	mov	r3, fp
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	460f      	mov	r7, r1
 8003a50:	f7fd f88a 	bl	8000b68 <__aeabi_dcmpgt>
 8003a54:	2800      	cmp	r0, #0
 8003a56:	d1eb      	bne.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0x460>
    while (angle_rad < -M_PI) {
 8003a58:	a355      	add	r3, pc, #340	; (adr r3, 8003bb0 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	4630      	mov	r0, r6
 8003a60:	4639      	mov	r1, r7
 8003a62:	f7fd f863 	bl	8000b2c <__aeabi_dcmplt>
 8003a66:	b1d0      	cbz	r0, 8003a9e <HAL_TIM_PeriodElapsedCallback+0x4ce>
        angle_rad += 2.0f * M_PI;
 8003a68:	a54f      	add	r5, pc, #316	; (adr r5, 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003a6a:	e9d5 4500 	ldrd	r4, r5, [r5]
    while (angle_rad < -M_PI) {
 8003a6e:	f20f 1b40 	addw	fp, pc, #320	; 0x140
 8003a72:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	f7fc fc2d 	bl	80002dc <__adddf3>
 8003a82:	f7fd f8d9 	bl	8000c38 <__aeabi_d2f>
 8003a86:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8003a8a:	f7fc fd85 	bl	8000598 <__aeabi_f2d>
 8003a8e:	4652      	mov	r2, sl
 8003a90:	465b      	mov	r3, fp
 8003a92:	4606      	mov	r6, r0
 8003a94:	460f      	mov	r7, r1
 8003a96:	f7fd f849 	bl	8000b2c <__aeabi_dcmplt>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d1eb      	bne.n	8003a76 <HAL_TIM_PeriodElapsedCallback+0x4a6>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 8003a9e:	ee78 7a68 	vsub.f32	s15, s16, s17
 8003aa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003aa6:	ee17 3a10 	vmov	r3, s14
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfb8      	it	lt
 8003aae:	425b      	neglt	r3, r3
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	f77f aef4 	ble.w	800389e <HAL_TIM_PeriodElapsedCallback+0x2ce>
    	if(angle_rad1 > angle_rad2){
 8003ab6:	eef4 8ac8 	vcmpe.f32	s17, s16
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8003abe:	a33a      	add	r3, pc, #232	; (adr r3, 8003ba8 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	4640      	mov	r0, r8
 8003ac6:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 8003ac8:	f57f aedf 	bpl.w	800388a <HAL_TIM_PeriodElapsedCallback+0x2ba>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8003acc:	f7fc fc04 	bl	80002d8 <__aeabi_dsub>
 8003ad0:	e6dd      	b.n	800388e <HAL_TIM_PeriodElapsedCallback+0x2be>
			if(decode_SW(SWdata[0])&0b00010000){
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
	if(SW_data<100){
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	2b63      	cmp	r3, #99	; 0x63
 8003ad8:	f200 8105 	bhi.w	8003ce6 <HAL_TIM_PeriodElapsedCallback+0x716>
				 can1_send(0x310,senddata_calib);//calibration
 8003adc:	a906      	add	r1, sp, #24
 8003ade:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003ae2:	f7fd fd73 	bl	80015cc <can1_send>
				 can2_send(0x310,senddata_calib);//calibration
 8003ae6:	a906      	add	r1, sp, #24
 8003ae8:	f44f 7044 	mov.w	r0, #784	; 0x310
 8003aec:	f7fd fdba 	bl	8001664 <can2_send>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003af0:	4836      	ldr	r0, [pc, #216]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003af8:	f003 fadc 	bl	80070b4 <HAL_GPIO_WritePin>
 8003afc:	e5c8      	b.n	8003690 <HAL_TIM_PeriodElapsedCallback+0xc0>
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003afe:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
	if(SW_data<100){
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	2b63      	cmp	r3, #99	; 0x63
 8003b04:	f200 8126 	bhi.w	8003d54 <HAL_TIM_PeriodElapsedCallback+0x784>
	 			actuator_motor5(0.5,1.0);
 8003b08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003b0c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003b10:	f7fd fad4 	bl	80010bc <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003b14:	482d      	ldr	r0, [pc, #180]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b1c:	f003 faca 	bl	80070b4 <HAL_GPIO_WritePin>
 8003b20:	e5ac      	b.n	800367c <HAL_TIM_PeriodElapsedCallback+0xac>
			if(decode_SW(SWdata[0])&0b00000001){
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
	if(SW_data<100){
 8003b26:	2b63      	cmp	r3, #99	; 0x63
 8003b28:	f200 80f4 	bhi.w	8003d14 <HAL_TIM_PeriodElapsedCallback+0x744>
				 omni_move(0.0, 0.0, 7.0,1.0);//spin
 8003b2c:	eddf 0a28 	vldr	s1, [pc, #160]	; 8003bd0 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003b30:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003b34:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8003b38:	eeb0 0a60 	vmov.f32	s0, s1
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8003b3c:	f001 f8fc 	bl	8004d38 <omni_move>
				 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003b40:	4822      	ldr	r0, [pc, #136]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b48:	f003 fab4 	bl	80070b4 <HAL_GPIO_WritePin>
			actuator_motor5(0.0,0.0);
 8003b4c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003bd0 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003b50:	eeb0 0a60 	vmov.f32	s0, s1
 8003b54:	f7fd fab2 	bl	80010bc <actuator_motor5>
			break;
 8003b58:	e59a      	b.n	8003690 <HAL_TIM_PeriodElapsedCallback+0xc0>
	 		 if(decode_SW(SWdata[0])&0b00010000){
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
	if(SW_data<100){
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	2b63      	cmp	r3, #99	; 0x63
 8003b60:	f240 80a0 	bls.w	8003ca4 <HAL_TIM_PeriodElapsedCallback+0x6d4>
				 actuator_motor5(0.0,0.0);
 8003b64:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8003bd0 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003b68:	eeb0 0a60 	vmov.f32	s0, s1
 8003b6c:	f7fd faa6 	bl	80010bc <actuator_motor5>
	 			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003b70:	2200      	movs	r2, #0
 8003b72:	4816      	ldr	r0, [pc, #88]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8003b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b78:	f003 fa9c 	bl	80070b4 <HAL_GPIO_WritePin>
	 		     actuator_kicker(1, 1);
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4608      	mov	r0, r1
 8003b80:	f7fd fad8 	bl	8001134 <actuator_kicker>
	 			 actuator_kicker(2, 0);
 8003b84:	2100      	movs	r1, #0
 8003b86:	2002      	movs	r0, #2
 8003b88:	f7fd fad4 	bl	8001134 <actuator_kicker>
	 			 actuator_kicker_voltage(250.0);
 8003b8c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003bd4 <HAL_TIM_PeriodElapsedCallback+0x604>
 8003b90:	e56d      	b.n	800366e <HAL_TIM_PeriodElapsedCallback+0x9e>
 8003b92:	bf00      	nop
 8003b94:	f3af 8000 	nop.w
 8003b98:	16c16c17 	.word	0x16c16c17
 8003b9c:	3f76c16c 	.word	0x3f76c16c
 8003ba0:	54442d18 	.word	0x54442d18
 8003ba4:	400921fb 	.word	0x400921fb
 8003ba8:	54442d18 	.word	0x54442d18
 8003bac:	401921fb 	.word	0x401921fb
 8003bb0:	54442d18 	.word	0x54442d18
 8003bb4:	c00921fb 	.word	0xc00921fb
 8003bb8:	200005b3 	.word	0x200005b3
 8003bbc:	2000076c 	.word	0x2000076c
 8003bc0:	40490fdb 	.word	0x40490fdb
 8003bc4:	2000075c 	.word	0x2000075c
 8003bc8:	20000624 	.word	0x20000624
 8003bcc:	48000800 	.word	0x48000800
 8003bd0:	00000000 	.word	0x00000000
 8003bd4:	437a0000 	.word	0x437a0000
    	 printf(" yaw=%f",yawAngle);
 8003bd8:	4b71      	ldr	r3, [pc, #452]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
		 printf(" connect=%d vel_surge=%.4f vel_sway=%.4f ",Ether_connect,vel_surge,vel_sway);
 8003bda:	4e72      	ldr	r6, [pc, #456]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x7d4>)
    	 printf(" yaw=%f",yawAngle);
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	f7fc fcdb 	bl	8000598 <__aeabi_f2d>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4870      	ldr	r0, [pc, #448]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8003be8:	f006 fd00 	bl	800a5ec <iprintf>
		 printf(" connect=%d vel_surge=%.4f vel_sway=%.4f ",Ether_connect,vel_surge,vel_sway);
 8003bec:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	f7fc fcd2 	bl	8000598 <__aeabi_f2d>
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	496e      	ldr	r1, [pc, #440]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8003bf8:	7836      	ldrb	r6, [r6, #0]
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6808      	ldr	r0, [r1, #0]
 8003bfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c02:	f7fc fcc9 	bl	8000598 <__aeabi_f2d>
 8003c06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c0a:	e9cd 0100 	strd	r0, r1, [sp]
 8003c0e:	4631      	mov	r1, r6
 8003c10:	4868      	ldr	r0, [pc, #416]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8003c12:	f006 fceb 	bl	800a5ec <iprintf>
		 printf(" theta_vision=%.4f theta_AI=%.4f drible_power=%.4f",(theta_vision*180.0/PI),(theta_target*180.0/PI),drible_power);
 8003c16:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f7fc fcbd 	bl	8000598 <__aeabi_f2d>
 8003c1e:	a35e      	add	r3, pc, #376	; (adr r3, 8003d98 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fd10 	bl	8000648 <__aeabi_dmul>
 8003c28:	4b64      	ldr	r3, [pc, #400]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	460f      	mov	r7, r1
 8003c30:	f7fc fcb2 	bl	8000598 <__aeabi_f2d>
 8003c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c38:	4b61      	ldr	r3, [pc, #388]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	f7fc fcac 	bl	8000598 <__aeabi_f2d>
 8003c40:	a355      	add	r3, pc, #340	; (adr r3, 8003d98 <HAL_TIM_PeriodElapsedCallback+0x7c8>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f7fc fcff 	bl	8000648 <__aeabi_dmul>
 8003c4a:	4632      	mov	r2, r6
 8003c4c:	e9cd 0100 	strd	r0, r1, [sp]
 8003c50:	463b      	mov	r3, r7
 8003c52:	485c      	ldr	r0, [pc, #368]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8003c54:	f006 fcca 	bl	800a5ec <iprintf>
    	  printf(" v_power=%.3f",Power_voltage[4]);
 8003c58:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8003c5a:	6918      	ldr	r0, [r3, #16]
 8003c5c:	f7fc fc9c 	bl	8000598 <__aeabi_f2d>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4859      	ldr	r0, [pc, #356]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8003c66:	f006 fcc1 	bl	800a5ec <iprintf>
		 printf(" kick_power=%.4f chip=%d",kick_power,chipEN);
 8003c6a:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	f7fc fc93 	bl	8000598 <__aeabi_f2d>
 8003c72:	460b      	mov	r3, r1
 8003c74:	4957      	ldr	r1, [pc, #348]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8003c76:	7809      	ldrb	r1, [r1, #0]
 8003c78:	9100      	str	r1, [sp, #0]
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4856      	ldr	r0, [pc, #344]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8003c7e:	f006 fcb5 	bl	800a5ec <iprintf>
		 printf(" ball:0=%d",ball[0]);
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003c84:	4856      	ldr	r0, [pc, #344]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x810>)
 8003c86:	7819      	ldrb	r1, [r3, #0]
 8003c88:	f006 fcb0 	bl	800a5ec <iprintf>
		 printf(" mouse:x=%d, y=%d",mouse[0],mouse[1]);
 8003c8c:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x814>)
 8003c8e:	4856      	ldr	r0, [pc, #344]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x818>)
 8003c90:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003c94:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003c98:	f006 fca8 	bl	800a5ec <iprintf>
		 printf("\r\n");
 8003c9c:	4853      	ldr	r0, [pc, #332]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x81c>)
 8003c9e:	f006 fd2b 	bl	800a6f8 <puts>
 8003ca2:	e515      	b.n	80036d0 <HAL_TIM_PeriodElapsedCallback+0x100>
	 			actuator_motor5(0.5,1.0);
 8003ca4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ca8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003cac:	f7fd fa06 	bl	80010bc <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003cb0:	484f      	ldr	r0, [pc, #316]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x820>)
					if(kick_state==0){
 8003cb2:	4c50      	ldr	r4, [pc, #320]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x824>)
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 1);
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cba:	f003 f9fb 	bl	80070b4 <HAL_GPIO_WritePin>
	 			if(ball[0]==1){
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x80c>)
 8003cc0:	781d      	ldrb	r5, [r3, #0]
 8003cc2:	2d01      	cmp	r5, #1
 8003cc4:	d05c      	beq.n	8003d80 <HAL_TIM_PeriodElapsedCallback+0x7b0>
				if(kick_state==1){
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f47f acd7 	bne.w	800367c <HAL_TIM_PeriodElapsedCallback+0xac>
					kick_time++;
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	3201      	adds	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
					if(kick_time>100){
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2a64      	cmp	r2, #100	; 0x64
 8003cda:	f77f accf 	ble.w	800367c <HAL_TIM_PeriodElapsedCallback+0xac>
						kick_state=0;
 8003cde:	2200      	movs	r2, #0
 8003ce0:	6022      	str	r2, [r4, #0]
						kick_time=0;
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e4ca      	b.n	800367c <HAL_TIM_PeriodElapsedCallback+0xac>
				omni_move(0.0, 0.0, 0.0,0.0);
 8003ce6:	eddf 1a45 	vldr	s3, [pc, #276]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x82c>
 8003cea:	eef0 0a61 	vmov.f32	s1, s3
 8003cee:	eeb0 0a61 	vmov.f32	s0, s3
 8003cf2:	eeb0 1a61 	vmov.f32	s2, s3
 8003cf6:	f001 f81f 	bl	8004d38 <omni_move>
				actuator_motor5(0.0,0.0);
 8003cfa:	eddf 0a40 	vldr	s1, [pc, #256]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x82c>
 8003cfe:	eeb0 0a60 	vmov.f32	s0, s1
 8003d02:	f7fd f9db 	bl	80010bc <actuator_motor5>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003d06:	483a      	ldr	r0, [pc, #232]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d0e:	f003 f9d1 	bl	80070b4 <HAL_GPIO_WritePin>
 8003d12:	e4bd      	b.n	8003690 <HAL_TIM_PeriodElapsedCallback+0xc0>
		data=0b00010000;//C
	}
	else if(SW_data<500 && SW_data>100){
 8003d14:	f1a3 0265 	sub.w	r2, r3, #101	; 0x65
 8003d18:	f5b2 7fc7 	cmp.w	r2, #398	; 0x18e
 8003d1c:	d927      	bls.n	8003d6e <HAL_TIM_PeriodElapsedCallback+0x79e>
		data=0b00000010;//B
	}
	else if(SW_data<2000 && SW_data>500){
 8003d1e:	f46f 62fa 	mvn.w	r2, #2000	; 0x7d0
 8003d22:	189a      	adds	r2, r3, r2
 8003d24:	f46f 71fa 	mvn.w	r1, #500	; 0x1f4
 8003d28:	b292      	uxth	r2, r2
 8003d2a:	f240 30e6 	movw	r0, #998	; 0x3e6
 8003d2e:	1859      	adds	r1, r3, r1
 8003d30:	4282      	cmp	r2, r0
 8003d32:	b289      	uxth	r1, r1
 8003d34:	f240 8207 	bls.w	8004146 <HAL_TIM_PeriodElapsedCallback+0xb76>
 8003d38:	f240 52da 	movw	r2, #1498	; 0x5da
 8003d3c:	4291      	cmp	r1, r2
 8003d3e:	f200 8225 	bhi.w	800418c <HAL_TIM_PeriodElapsedCallback+0xbbc>
				 omni_move(0.0, -1.0, 0.0,1.0);//left
 8003d42:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x82c>
 8003d46:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003d4a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8003d4e:	eeb0 0a41 	vmov.f32	s0, s2
 8003d52:	e6f3      	b.n	8003b3c <HAL_TIM_PeriodElapsedCallback+0x56c>
				actuator_motor5(0.0,0.0);
 8003d54:	eddf 0a29 	vldr	s1, [pc, #164]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x82c>
 8003d58:	eeb0 0a60 	vmov.f32	s0, s1
 8003d5c:	f7fd f9ae 	bl	80010bc <actuator_motor5>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8003d60:	4823      	ldr	r0, [pc, #140]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x820>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d68:	f003 f9a4 	bl	80070b4 <HAL_GPIO_WritePin>
 8003d6c:	e486      	b.n	800367c <HAL_TIM_PeriodElapsedCallback+0xac>
				 omni_move(-1.0, 0.0, 0.0,1.0);//back
 8003d6e:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8003dfc <HAL_TIM_PeriodElapsedCallback+0x82c>
 8003d72:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003d76:	eef0 0a41 	vmov.f32	s1, s2
 8003d7a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003d7e:	e6dd      	b.n	8003b3c <HAL_TIM_PeriodElapsedCallback+0x56c>
					if(kick_state==0){
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d19f      	bne.n	8003cc6 <HAL_TIM_PeriodElapsedCallback+0x6f6>
						actuator_kicker(3, 100);
 8003d86:	2164      	movs	r1, #100	; 0x64
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f7fd f9d3 	bl	8001134 <actuator_kicker>
						kick_state=1;
 8003d8e:	6025      	str	r5, [r4, #0]
 8003d90:	e799      	b.n	8003cc6 <HAL_TIM_PeriodElapsedCallback+0x6f6>
 8003d92:	bf00      	nop
 8003d94:	f3af 8000 	nop.w
 8003d98:	0d03cf25 	.word	0x0d03cf25
 8003d9c:	404ca5dc 	.word	0x404ca5dc
 8003da0:	2000076c 	.word	0x2000076c
 8003da4:	200005b3 	.word	0x200005b3
 8003da8:	0800ca68 	.word	0x0800ca68
 8003dac:	20000764 	.word	0x20000764
 8003db0:	20000768 	.word	0x20000768
 8003db4:	0800ca70 	.word	0x0800ca70
 8003db8:	2000075c 	.word	0x2000075c
 8003dbc:	200006b4 	.word	0x200006b4
 8003dc0:	20000758 	.word	0x20000758
 8003dc4:	0800ca9c 	.word	0x0800ca9c
 8003dc8:	200005bc 	.word	0x200005bc
 8003dcc:	0800cad0 	.word	0x0800cad0
 8003dd0:	200006e8 	.word	0x200006e8
 8003dd4:	2000069e 	.word	0x2000069e
 8003dd8:	0800cae0 	.word	0x0800cae0
 8003ddc:	20000694 	.word	0x20000694
 8003de0:	0800cafc 	.word	0x0800cafc
 8003de4:	2000072c 	.word	0x2000072c
 8003de8:	0800cb08 	.word	0x0800cb08
 8003dec:	0800cb1c 	.word	0x0800cb1c
 8003df0:	48000800 	.word	0x48000800
 8003df4:	200006ec 	.word	0x200006ec
 8003df8:	200006f0 	.word	0x200006f0
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	40490fdb 	.word	0x40490fdb
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003e04:	f7fc fbc8 	bl	8000598 <__aeabi_f2d>
 8003e08:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8003e00 <HAL_TIM_PeriodElapsedCallback+0x830>
 8003e0c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003e10:	ec41 0b19 	vmov	d9, r0, r1
 8003e14:	ee17 0a90 	vmov	r0, s15
 8003e18:	f7fc fbbe 	bl	8000598 <__aeabi_f2d>
 8003e1c:	a3d6      	add	r3, pc, #856	; (adr r3, 8004178 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8003e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e22:	f7fc fc11 	bl	8000648 <__aeabi_dmul>
 8003e26:	f7fc ff07 	bl	8000c38 <__aeabi_d2f>
 8003e2a:	4bd5      	ldr	r3, [pc, #852]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8003e2c:	ee08 0a10 	vmov	s16, r0
 8003e30:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003e34:	f7fc fbb0 	bl	8000598 <__aeabi_f2d>
 8003e38:	a3c7      	add	r3, pc, #796	; (adr r3, 8004158 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	4680      	mov	r8, r0
 8003e40:	4689      	mov	r9, r1
 8003e42:	f7fc fe91 	bl	8000b68 <__aeabi_dcmpgt>
 8003e46:	b1c8      	cbz	r0, 8003e7c <HAL_TIM_PeriodElapsedCallback+0x8ac>
        angle_rad -= 2.0f * M_PI;
 8003e48:	a7c5      	add	r7, pc, #788	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8003e4a:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003e4e:	a5c2      	add	r5, pc, #776	; (adr r5, 8004158 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8003e50:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8003e54:	4632      	mov	r2, r6
 8003e56:	463b      	mov	r3, r7
 8003e58:	4640      	mov	r0, r8
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	f7fc fa3c 	bl	80002d8 <__aeabi_dsub>
 8003e60:	f7fc feea 	bl	8000c38 <__aeabi_d2f>
 8003e64:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8003e68:	f7fc fb96 	bl	8000598 <__aeabi_f2d>
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	462b      	mov	r3, r5
 8003e70:	4680      	mov	r8, r0
 8003e72:	4689      	mov	r9, r1
 8003e74:	f7fc fe78 	bl	8000b68 <__aeabi_dcmpgt>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d1eb      	bne.n	8003e54 <HAL_TIM_PeriodElapsedCallback+0x884>
    while (angle_rad < -M_PI) {
 8003e7c:	a3ba      	add	r3, pc, #744	; (adr r3, 8004168 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	4640      	mov	r0, r8
 8003e84:	4649      	mov	r1, r9
 8003e86:	f7fc fe51 	bl	8000b2c <__aeabi_dcmplt>
 8003e8a:	b1c8      	cbz	r0, 8003ec0 <HAL_TIM_PeriodElapsedCallback+0x8f0>
        angle_rad += 2.0f * M_PI;
 8003e8c:	a7b4      	add	r7, pc, #720	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8003e8e:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8003e92:	a5b5      	add	r5, pc, #724	; (adr r5, 8004168 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003e94:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8003e98:	4632      	mov	r2, r6
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	f7fc fa1c 	bl	80002dc <__adddf3>
 8003ea4:	f7fc fec8 	bl	8000c38 <__aeabi_d2f>
 8003ea8:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 8003eac:	f7fc fb74 	bl	8000598 <__aeabi_f2d>
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	462b      	mov	r3, r5
 8003eb4:	4680      	mov	r8, r0
 8003eb6:	4689      	mov	r9, r1
 8003eb8:	f7fc fe38 	bl	8000b2c <__aeabi_dcmplt>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d1eb      	bne.n	8003e98 <HAL_TIM_PeriodElapsedCallback+0x8c8>
    while (angle_rad > M_PI) {
 8003ec0:	ee18 0a90 	vmov	r0, s17
 8003ec4:	f7fc fb68 	bl	8000598 <__aeabi_f2d>
 8003ec8:	a3a3      	add	r3, pc, #652	; (adr r3, 8004158 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	4604      	mov	r4, r0
 8003ed0:	460d      	mov	r5, r1
 8003ed2:	f7fc fe49 	bl	8000b68 <__aeabi_dcmpgt>
 8003ed6:	b1d0      	cbz	r0, 8003f0e <HAL_TIM_PeriodElapsedCallback+0x93e>
        angle_rad -= 2.0f * M_PI;
 8003ed8:	a7a1      	add	r7, pc, #644	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8003eda:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 8003ede:	f20f 2b78 	addw	fp, pc, #632	; 0x278
 8003ee2:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	463b      	mov	r3, r7
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7fc f9f3 	bl	80002d8 <__aeabi_dsub>
 8003ef2:	f7fc fea1 	bl	8000c38 <__aeabi_d2f>
 8003ef6:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 8003efa:	f7fc fb4d 	bl	8000598 <__aeabi_f2d>
 8003efe:	4652      	mov	r2, sl
 8003f00:	465b      	mov	r3, fp
 8003f02:	4604      	mov	r4, r0
 8003f04:	460d      	mov	r5, r1
 8003f06:	f7fc fe2f 	bl	8000b68 <__aeabi_dcmpgt>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d1eb      	bne.n	8003ee6 <HAL_TIM_PeriodElapsedCallback+0x916>
    while (angle_rad < -M_PI) {
 8003f0e:	a396      	add	r3, pc, #600	; (adr r3, 8004168 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	4620      	mov	r0, r4
 8003f16:	4629      	mov	r1, r5
 8003f18:	f7fc fe08 	bl	8000b2c <__aeabi_dcmplt>
 8003f1c:	b1d0      	cbz	r0, 8003f54 <HAL_TIM_PeriodElapsedCallback+0x984>
        angle_rad += 2.0f * M_PI;
 8003f1e:	a790      	add	r7, pc, #576	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8003f20:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8003f24:	f20f 2b40 	addw	fp, pc, #576	; 0x240
 8003f28:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	463b      	mov	r3, r7
 8003f30:	4620      	mov	r0, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	f7fc f9d2 	bl	80002dc <__adddf3>
 8003f38:	f7fc fe7e 	bl	8000c38 <__aeabi_d2f>
 8003f3c:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 8003f40:	f7fc fb2a 	bl	8000598 <__aeabi_f2d>
 8003f44:	4652      	mov	r2, sl
 8003f46:	465b      	mov	r3, fp
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	f7fc fdee 	bl	8000b2c <__aeabi_dcmplt>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d1eb      	bne.n	8003f2c <HAL_TIM_PeriodElapsedCallback+0x95c>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 8003f54:	ee78 7a68 	vsub.f32	s15, s16, s17
 8003f58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003f5c:	ee17 3a10 	vmov	r3, s14
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bfb8      	it	lt
 8003f64:	425b      	neglt	r3, r3
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	dd14      	ble.n	8003f94 <HAL_TIM_PeriodElapsedCallback+0x9c4>
    	if(angle_rad1 > angle_rad2){
 8003f6a:	eef4 8ac8 	vcmpe.f32	s17, s16
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8003f72:	a37b      	add	r3, pc, #492	; (adr r3, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	4640      	mov	r0, r8
 8003f7a:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 8003f7c:	f140 80e0 	bpl.w	8004140 <HAL_TIM_PeriodElapsedCallback+0xb70>
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8003f80:	f7fc f9aa 	bl	80002d8 <__aeabi_dsub>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8003f84:	4622      	mov	r2, r4
 8003f86:	462b      	mov	r3, r5
 8003f88:	f7fc f9a6 	bl	80002d8 <__aeabi_dsub>
 8003f8c:	f7fc fe54 	bl	8000c38 <__aeabi_d2f>
 8003f90:	ee07 0a90 	vmov	s15, r0
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003f94:	ee17 0a90 	vmov	r0, s15
 8003f98:	f7fc fafe 	bl	8000598 <__aeabi_f2d>
 8003f9c:	a374      	add	r3, pc, #464	; (adr r3, 8004170 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f7fc fb51 	bl	8000648 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	ec51 0b19 	vmov	r0, r1, d9
 8003fae:	f7fc f993 	bl	80002d8 <__aeabi_dsub>
 8003fb2:	f7fc fe41 	bl	8000c38 <__aeabi_d2f>
 8003fb6:	9b04      	ldr	r3, [sp, #16]
 8003fb8:	6018      	str	r0, [r3, #0]
	 			maintask_run();
 8003fba:	f7fe ff05 	bl	8002dc8 <maintask_run>
 8003fbe:	f7ff bb67 	b.w	8003690 <HAL_TIM_PeriodElapsedCallback+0xc0>
	 			yawAngle=yawAngle-(getAngleDiff(yawAngle*PI/180.0, theta_vision)*180.0/PI)*0.001;
 8003fc2:	f7fc fae9 	bl	8000598 <__aeabi_f2d>
 8003fc6:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8004184 <HAL_TIM_PeriodElapsedCallback+0xbb4>
 8003fca:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003fce:	ec41 0b19 	vmov	d9, r0, r1
 8003fd2:	ee17 0a90 	vmov	r0, s15
 8003fd6:	f7fc fadf 	bl	8000598 <__aeabi_f2d>
 8003fda:	a367      	add	r3, pc, #412	; (adr r3, 8004178 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc fb32 	bl	8000648 <__aeabi_dmul>
 8003fe4:	f7fc fe28 	bl	8000c38 <__aeabi_d2f>
 8003fe8:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8003fea:	ee08 0a10 	vmov	s16, r0
 8003fee:	edd3 8a00 	vldr	s17, [r3]
    while (angle_rad > M_PI) {
 8003ff2:	f7fc fad1 	bl	8000598 <__aeabi_f2d>
 8003ff6:	a358      	add	r3, pc, #352	; (adr r3, 8004158 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	4689      	mov	r9, r1
 8004000:	f7fc fdb2 	bl	8000b68 <__aeabi_dcmpgt>
 8004004:	b1c8      	cbz	r0, 800403a <HAL_TIM_PeriodElapsedCallback+0xa6a>
        angle_rad -= 2.0f * M_PI;
 8004006:	a756      	add	r7, pc, #344	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8004008:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 800400c:	a552      	add	r5, pc, #328	; (adr r5, 8004158 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 800400e:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad -= 2.0f * M_PI;
 8004012:	4632      	mov	r2, r6
 8004014:	463b      	mov	r3, r7
 8004016:	4640      	mov	r0, r8
 8004018:	4649      	mov	r1, r9
 800401a:	f7fc f95d 	bl	80002d8 <__aeabi_dsub>
 800401e:	f7fc fe0b 	bl	8000c38 <__aeabi_d2f>
 8004022:	ee08 0a10 	vmov	s16, r0
    while (angle_rad > M_PI) {
 8004026:	f7fc fab7 	bl	8000598 <__aeabi_f2d>
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	4680      	mov	r8, r0
 8004030:	4689      	mov	r9, r1
 8004032:	f7fc fd99 	bl	8000b68 <__aeabi_dcmpgt>
 8004036:	2800      	cmp	r0, #0
 8004038:	d1eb      	bne.n	8004012 <HAL_TIM_PeriodElapsedCallback+0xa42>
    while (angle_rad < -M_PI) {
 800403a:	a34b      	add	r3, pc, #300	; (adr r3, 8004168 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	4640      	mov	r0, r8
 8004042:	4649      	mov	r1, r9
 8004044:	f7fc fd72 	bl	8000b2c <__aeabi_dcmplt>
 8004048:	b1c8      	cbz	r0, 800407e <HAL_TIM_PeriodElapsedCallback+0xaae>
        angle_rad += 2.0f * M_PI;
 800404a:	a745      	add	r7, pc, #276	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 800404c:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 8004050:	a545      	add	r5, pc, #276	; (adr r5, 8004168 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8004052:	e9d5 4500 	ldrd	r4, r5, [r5]
        angle_rad += 2.0f * M_PI;
 8004056:	4632      	mov	r2, r6
 8004058:	463b      	mov	r3, r7
 800405a:	4640      	mov	r0, r8
 800405c:	4649      	mov	r1, r9
 800405e:	f7fc f93d 	bl	80002dc <__adddf3>
 8004062:	f7fc fde9 	bl	8000c38 <__aeabi_d2f>
 8004066:	ee08 0a10 	vmov	s16, r0
    while (angle_rad < -M_PI) {
 800406a:	f7fc fa95 	bl	8000598 <__aeabi_f2d>
 800406e:	4622      	mov	r2, r4
 8004070:	462b      	mov	r3, r5
 8004072:	4680      	mov	r8, r0
 8004074:	4689      	mov	r9, r1
 8004076:	f7fc fd59 	bl	8000b2c <__aeabi_dcmplt>
 800407a:	2800      	cmp	r0, #0
 800407c:	d1eb      	bne.n	8004056 <HAL_TIM_PeriodElapsedCallback+0xa86>
    while (angle_rad > M_PI) {
 800407e:	ee18 0a90 	vmov	r0, s17
 8004082:	f7fc fa89 	bl	8000598 <__aeabi_f2d>
 8004086:	a334      	add	r3, pc, #208	; (adr r3, 8004158 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	4604      	mov	r4, r0
 800408e:	460d      	mov	r5, r1
 8004090:	f7fc fd6a 	bl	8000b68 <__aeabi_dcmpgt>
 8004094:	b1d0      	cbz	r0, 80040cc <HAL_TIM_PeriodElapsedCallback+0xafc>
        angle_rad -= 2.0f * M_PI;
 8004096:	a732      	add	r7, pc, #200	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8004098:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad > M_PI) {
 800409c:	f20f 0bb8 	addw	fp, pc, #184	; 0xb8
 80040a0:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad -= 2.0f * M_PI;
 80040a4:	4632      	mov	r2, r6
 80040a6:	463b      	mov	r3, r7
 80040a8:	4620      	mov	r0, r4
 80040aa:	4629      	mov	r1, r5
 80040ac:	f7fc f914 	bl	80002d8 <__aeabi_dsub>
 80040b0:	f7fc fdc2 	bl	8000c38 <__aeabi_d2f>
 80040b4:	ee08 0a90 	vmov	s17, r0
    while (angle_rad > M_PI) {
 80040b8:	f7fc fa6e 	bl	8000598 <__aeabi_f2d>
 80040bc:	4652      	mov	r2, sl
 80040be:	465b      	mov	r3, fp
 80040c0:	4604      	mov	r4, r0
 80040c2:	460d      	mov	r5, r1
 80040c4:	f7fc fd50 	bl	8000b68 <__aeabi_dcmpgt>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d1eb      	bne.n	80040a4 <HAL_TIM_PeriodElapsedCallback+0xad4>
    while (angle_rad < -M_PI) {
 80040cc:	a326      	add	r3, pc, #152	; (adr r3, 8004168 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	4620      	mov	r0, r4
 80040d4:	4629      	mov	r1, r5
 80040d6:	f7fc fd29 	bl	8000b2c <__aeabi_dcmplt>
 80040da:	b1d0      	cbz	r0, 8004112 <HAL_TIM_PeriodElapsedCallback+0xb42>
        angle_rad += 2.0f * M_PI;
 80040dc:	a720      	add	r7, pc, #128	; (adr r7, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 80040de:	e9d7 6700 	ldrd	r6, r7, [r7]
    while (angle_rad < -M_PI) {
 80040e2:	f20f 0b84 	addw	fp, pc, #132	; 0x84
 80040e6:	e9db ab00 	ldrd	sl, fp, [fp]
        angle_rad += 2.0f * M_PI;
 80040ea:	4632      	mov	r2, r6
 80040ec:	463b      	mov	r3, r7
 80040ee:	4620      	mov	r0, r4
 80040f0:	4629      	mov	r1, r5
 80040f2:	f7fc f8f3 	bl	80002dc <__adddf3>
 80040f6:	f7fc fd9f 	bl	8000c38 <__aeabi_d2f>
 80040fa:	ee08 0a90 	vmov	s17, r0
    while (angle_rad < -M_PI) {
 80040fe:	f7fc fa4b 	bl	8000598 <__aeabi_f2d>
 8004102:	4652      	mov	r2, sl
 8004104:	465b      	mov	r3, fp
 8004106:	4604      	mov	r4, r0
 8004108:	460d      	mov	r5, r1
 800410a:	f7fc fd0f 	bl	8000b2c <__aeabi_dcmplt>
 800410e:	2800      	cmp	r0, #0
 8004110:	d1eb      	bne.n	80040ea <HAL_TIM_PeriodElapsedCallback+0xb1a>
    if (abs(angle_rad1 - angle_rad2) > M_PI) {
 8004112:	ee78 7a68 	vsub.f32	s15, s16, s17
 8004116:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800411a:	ee17 3a10 	vmov	r3, s14
 800411e:	2b00      	cmp	r3, #0
 8004120:	bfb8      	it	lt
 8004122:	425b      	neglt	r3, r3
 8004124:	2b03      	cmp	r3, #3
 8004126:	f77f af35 	ble.w	8003f94 <HAL_TIM_PeriodElapsedCallback+0x9c4>
    	if(angle_rad1 > angle_rad2){
 800412a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    		return angle_rad1 - (angle_rad2 + 2*M_PI);
 8004132:	a30b      	add	r3, pc, #44	; (adr r3, 8004160 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	4640      	mov	r0, r8
 800413a:	4649      	mov	r1, r9
    	if(angle_rad1 > angle_rad2){
 800413c:	f73f af20 	bgt.w	8003f80 <HAL_TIM_PeriodElapsedCallback+0x9b0>
    		return (angle_rad1 + 2*M_PI) - angle_rad2;
 8004140:	f7fc f8cc 	bl	80002dc <__adddf3>
 8004144:	e71e      	b.n	8003f84 <HAL_TIM_PeriodElapsedCallback+0x9b4>
				 omni_move(1.0, 0.0, 0.0,1.0);//fwd
 8004146:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8004188 <HAL_TIM_PeriodElapsedCallback+0xbb8>
 800414a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800414e:	eef0 0a41 	vmov.f32	s1, s2
 8004152:	eeb0 0a61 	vmov.f32	s0, s3
 8004156:	e4f1      	b.n	8003b3c <HAL_TIM_PeriodElapsedCallback+0x56c>
 8004158:	54442d18 	.word	0x54442d18
 800415c:	400921fb 	.word	0x400921fb
 8004160:	54442d18 	.word	0x54442d18
 8004164:	401921fb 	.word	0x401921fb
 8004168:	54442d18 	.word	0x54442d18
 800416c:	c00921fb 	.word	0xc00921fb
 8004170:	48b81fe5 	.word	0x48b81fe5
 8004174:	3fad55df 	.word	0x3fad55df
 8004178:	16c16c17 	.word	0x16c16c17
 800417c:	3f76c16c 	.word	0x3f76c16c
 8004180:	2000075c 	.word	0x2000075c
 8004184:	40490fdb 	.word	0x40490fdb
 8004188:	00000000 	.word	0x00000000
		data=0b00000100;//R
	}
	else if(SW_data<3000 && SW_data>2000){
 800418c:	f6a3 33b9 	subw	r3, r3, #3001	; 0xbb9
 8004190:	b29b      	uxth	r3, r3
 8004192:	4283      	cmp	r3, r0
 8004194:	d806      	bhi.n	80041a4 <HAL_TIM_PeriodElapsedCallback+0xbd4>
				 omni_move(0.0, 1.0, 0.0,1.0);//right
 8004196:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800419a:	ed1f 1a05 	vldr	s2, [pc, #-20]	; 8004188 <HAL_TIM_PeriodElapsedCallback+0xbb8>
 800419e:	eef0 0a61 	vmov.f32	s1, s3
 80041a2:	e5d4      	b.n	8003d4e <HAL_TIM_PeriodElapsedCallback+0x77e>
				omni_move(0.0, 0.0, 0.0,0.0);
 80041a4:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 8004188 <HAL_TIM_PeriodElapsedCallback+0xbb8>
 80041a8:	eeb0 1a61 	vmov.f32	s2, s3
 80041ac:	eef0 0a61 	vmov.f32	s1, s3
 80041b0:	eeb0 0a61 	vmov.f32	s0, s3
 80041b4:	f000 fdc0 	bl	8004d38 <omni_move>
	 			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 80041b8:	4805      	ldr	r0, [pc, #20]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041c0:	f002 ff78 	bl	80070b4 <HAL_GPIO_WritePin>
 80041c4:	e4c2      	b.n	8003b4c <HAL_TIM_PeriodElapsedCallback+0x57c>
	 		maintask_stop();
 80041c6:	f7ff f9a1 	bl	800350c <maintask_stop>
	 		 break;
 80041ca:	f7ff ba61 	b.w	8003690 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80041ce:	bf00      	nop
 80041d0:	48000800 	.word	0x48000800
 80041d4:	00000000 	.word	0x00000000

080041d8 <HAL_UART_RxCpltCallback>:
	}
	return data;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	ed2d 8b02 	vpush	{d8}
	uint8_t j = 0;

	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80041de:	4bb6      	ldr	r3, [pc, #728]	; (80044b8 <HAL_UART_RxCpltCallback+0x2e0>)
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	2afe      	cmp	r2, #254	; 0xfe
 80041e4:	f000 814c 	beq.w	8004480 <HAL_UART_RxCpltCallback+0x2a8>
 80041e8:	7859      	ldrb	r1, [r3, #1]
 80041ea:	29fe      	cmp	r1, #254	; 0xfe
 80041ec:	f000 814b 	beq.w	8004486 <HAL_UART_RxCpltCallback+0x2ae>
 80041f0:	7899      	ldrb	r1, [r3, #2]
 80041f2:	29fe      	cmp	r1, #254	; 0xfe
 80041f4:	f000 814a 	beq.w	800448c <HAL_UART_RxCpltCallback+0x2b4>
 80041f8:	78d9      	ldrb	r1, [r3, #3]
 80041fa:	29fe      	cmp	r1, #254	; 0xfe
 80041fc:	f000 8174 	beq.w	80044e8 <HAL_UART_RxCpltCallback+0x310>
 8004200:	7919      	ldrb	r1, [r3, #4]
 8004202:	29fe      	cmp	r1, #254	; 0xfe
 8004204:	f000 8173 	beq.w	80044ee <HAL_UART_RxCpltCallback+0x316>
 8004208:	7959      	ldrb	r1, [r3, #5]
 800420a:	29fe      	cmp	r1, #254	; 0xfe
 800420c:	f000 8130 	beq.w	8004470 <HAL_UART_RxCpltCallback+0x298>
 8004210:	7999      	ldrb	r1, [r3, #6]
 8004212:	29fe      	cmp	r1, #254	; 0xfe
 8004214:	f000 816e 	beq.w	80044f4 <HAL_UART_RxCpltCallback+0x31c>
 8004218:	79d9      	ldrb	r1, [r3, #7]
 800421a:	29fe      	cmp	r1, #254	; 0xfe
 800421c:	f000 816d 	beq.w	80044fa <HAL_UART_RxCpltCallback+0x322>
 8004220:	7a19      	ldrb	r1, [r3, #8]
 8004222:	29fe      	cmp	r1, #254	; 0xfe
 8004224:	f000 816c 	beq.w	8004500 <HAL_UART_RxCpltCallback+0x328>
 8004228:	7a59      	ldrb	r1, [r3, #9]
 800422a:	29fe      	cmp	r1, #254	; 0xfe
 800422c:	f000 816b 	beq.w	8004506 <HAL_UART_RxCpltCallback+0x32e>
 8004230:	7a99      	ldrb	r1, [r3, #10]
 8004232:	29fe      	cmp	r1, #254	; 0xfe
 8004234:	f000 816a 	beq.w	800450c <HAL_UART_RxCpltCallback+0x334>
 8004238:	7ad9      	ldrb	r1, [r3, #11]
 800423a:	29fe      	cmp	r1, #254	; 0xfe
 800423c:	f000 8169 	beq.w	8004512 <HAL_UART_RxCpltCallback+0x33a>
 8004240:	7b19      	ldrb	r1, [r3, #12]
 8004242:	4c9e      	ldr	r4, [pc, #632]	; (80044bc <HAL_UART_RxCpltCallback+0x2e4>)
 8004244:	29fe      	cmp	r1, #254	; 0xfe
 8004246:	f000 8167 	beq.w	8004518 <HAL_UART_RxCpltCallback+0x340>
		j++;
 800424a:	210d      	movs	r1, #13
 800424c:	7022      	strb	r2, [r4, #0]
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800424e:	460a      	mov	r2, r1
		}
	}
	else{
		for (uint8_t k = 0; k < sizeof(data_from_ether); k++) {
			if ((j + k) >= sizeof(data_from_ether)) {
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004250:	1858      	adds	r0, r3, r1
 8004252:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
 8004256:	7060      	strb	r0, [r4, #1]
			if ((j + k) >= sizeof(data_from_ether)) {
 8004258:	1c90      	adds	r0, r2, #2
 800425a:	280c      	cmp	r0, #12
			}
			else {
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800425c:	bfd5      	itete	le
 800425e:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004260:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004262:	78c0      	ldrble	r0, [r0, #3]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004264:	f810 0c0b 	ldrbgt.w	r0, [r0, #-11]
 8004268:	70a0      	strb	r0, [r4, #2]
			if ((j + k) >= sizeof(data_from_ether)) {
 800426a:	1cd0      	adds	r0, r2, #3
 800426c:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800426e:	bfd5      	itete	le
 8004270:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004272:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004274:	7900      	ldrble	r0, [r0, #4]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004276:	f810 0c0a 	ldrbgt.w	r0, [r0, #-10]
 800427a:	70e0      	strb	r0, [r4, #3]
			if ((j + k) >= sizeof(data_from_ether)) {
 800427c:	1d10      	adds	r0, r2, #4
 800427e:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004280:	bfd5      	itete	le
 8004282:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004284:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004286:	7940      	ldrble	r0, [r0, #5]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004288:	f810 0c09 	ldrbgt.w	r0, [r0, #-9]
 800428c:	7120      	strb	r0, [r4, #4]
			if ((j + k) >= sizeof(data_from_ether)) {
 800428e:	1d50      	adds	r0, r2, #5
 8004290:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004292:	bfd5      	itete	le
 8004294:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 8004296:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004298:	7980      	ldrble	r0, [r0, #6]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800429a:	f810 0c08 	ldrbgt.w	r0, [r0, #-8]
 800429e:	7160      	strb	r0, [r4, #5]
			if ((j + k) >= sizeof(data_from_ether)) {
 80042a0:	1d90      	adds	r0, r2, #6
 80042a2:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042a4:	bfd5      	itete	le
 80042a6:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042a8:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042aa:	79c0      	ldrble	r0, [r0, #7]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042ac:	f810 0c07 	ldrbgt.w	r0, [r0, #-7]
 80042b0:	71a0      	strb	r0, [r4, #6]
			if ((j + k) >= sizeof(data_from_ether)) {
 80042b2:	1dd0      	adds	r0, r2, #7
 80042b4:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042b6:	bfd5      	itete	le
 80042b8:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042ba:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042bc:	7a00      	ldrble	r0, [r0, #8]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042be:	f810 0c06 	ldrbgt.w	r0, [r0, #-6]
 80042c2:	71e0      	strb	r0, [r4, #7]
			if ((j + k) >= sizeof(data_from_ether)) {
 80042c4:	f102 0008 	add.w	r0, r2, #8
 80042c8:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042ca:	bfd5      	itete	le
 80042cc:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042ce:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042d0:	7a40      	ldrble	r0, [r0, #9]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042d2:	f810 0c05 	ldrbgt.w	r0, [r0, #-5]
 80042d6:	7220      	strb	r0, [r4, #8]
			if ((j + k) >= sizeof(data_from_ether)) {
 80042d8:	f102 0009 	add.w	r0, r2, #9
 80042dc:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042de:	bfd5      	itete	le
 80042e0:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042e2:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042e4:	7a80      	ldrble	r0, [r0, #10]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042e6:	f810 0c04 	ldrbgt.w	r0, [r0, #-4]
 80042ea:	7260      	strb	r0, [r4, #9]
			if ((j + k) >= sizeof(data_from_ether)) {
 80042ec:	f102 000a 	add.w	r0, r2, #10
 80042f0:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042f2:	bfd5      	itete	le
 80042f4:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042f6:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 80042f8:	7ac0      	ldrble	r0, [r0, #11]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 80042fa:	f810 0c03 	ldrbgt.w	r0, [r0, #-3]
 80042fe:	72a0      	strb	r0, [r4, #10]
			if ((j + k) >= sizeof(data_from_ether)) {
 8004300:	f102 000b 	add.w	r0, r2, #11
 8004304:	280c      	cmp	r0, #12
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004306:	bfd5      	itete	le
 8004308:	1898      	addle	r0, r3, r2
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800430a:	1858      	addgt	r0, r3, r1
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800430c:	7b00      	ldrble	r0, [r0, #12]
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800430e:	f810 0c02 	ldrbgt.w	r0, [r0, #-2]
 8004312:	72e0      	strb	r0, [r4, #11]
			if ((j + k) >= sizeof(data_from_ether)) {
 8004314:	2a00      	cmp	r2, #0
 8004316:	f000 80a0 	beq.w	800445a <HAL_UART_RxCpltCallback+0x282>
				data_from_ether[k] = Rxbuf_from_Ether[k - (sizeof(data_from_ether) - j)];
 800431a:	440b      	add	r3, r1
 800431c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004320:	7323      	strb	r3, [r4, #12]
			}
		}
	}
	if(data_from_ether[sizeof(data_from_ether)-1]==253){
 8004322:	2bfd      	cmp	r3, #253	; 0xfd
 8004324:	f000 809e 	beq.w	8004464 <HAL_UART_RxCpltCallback+0x28c>
			Rxbuf_from_Ether_temp[k]=data_from_ether[k];
		}
	}
	else{
		for(uint8_t k=0;k<sizeof(data_from_ether);k++){
			data_from_ether[k]=Rxbuf_from_Ether_temp[k];
 8004328:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <HAL_UART_RxCpltCallback+0x2e8>)
 800432a:	4d64      	ldr	r5, [pc, #400]	; (80044bc <HAL_UART_RxCpltCallback+0x2e4>)
 800432c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800432e:	c507      	stmia	r5!, {r0, r1, r2}
 8004330:	702b      	strb	r3, [r5, #0]
		}
	}

	vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 8004332:	8820      	ldrh	r0, [r4, #0]
 8004334:	4d63      	ldr	r5, [pc, #396]	; (80044c4 <HAL_UART_RxCpltCallback+0x2ec>)
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004336:	ed9f 8a64 	vldr	s16, [pc, #400]	; 80044c8 <HAL_UART_RxCpltCallback+0x2f0>
	vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 800433a:	ba40      	rev16	r0, r0
 800433c:	b280      	uxth	r0, r0
 800433e:	ee07 0a90 	vmov	s15, r0
 8004342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004346:	ee17 0a90 	vmov	r0, s15
 800434a:	f7fc f925 	bl	8000598 <__aeabi_f2d>
 800434e:	a352      	add	r3, pc, #328	; (adr r3, 8004498 <HAL_UART_RxCpltCallback+0x2c0>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fb ffc0 	bl	80002d8 <__aeabi_dsub>
 8004358:	a351      	add	r3, pc, #324	; (adr r3, 80044a0 <HAL_UART_RxCpltCallback+0x2c8>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f7fc f973 	bl	8000648 <__aeabi_dmul>
 8004362:	f7fc fc69 	bl	8000c38 <__aeabi_d2f>
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 8004366:	8863      	ldrh	r3, [r4, #2]
	vel_surge=((float32_t)(data_from_ether[0]<<8 | data_from_ether[1])-32767.0)/32767.0*7.0;
 8004368:	6028      	str	r0, [r5, #0]
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 800436a:	ba5b      	rev16	r3, r3
 800436c:	b298      	uxth	r0, r3
 800436e:	ee07 0a90 	vmov	s15, r0
 8004372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004376:	4d55      	ldr	r5, [pc, #340]	; (80044cc <HAL_UART_RxCpltCallback+0x2f4>)
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 8004378:	ee17 0a90 	vmov	r0, s15
 800437c:	f7fc f90c 	bl	8000598 <__aeabi_f2d>
 8004380:	a345      	add	r3, pc, #276	; (adr r3, 8004498 <HAL_UART_RxCpltCallback+0x2c0>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f7fb ffa7 	bl	80002d8 <__aeabi_dsub>
 800438a:	a345      	add	r3, pc, #276	; (adr r3, 80044a0 <HAL_UART_RxCpltCallback+0x2c8>)
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f7fc f95a 	bl	8000648 <__aeabi_dmul>
 8004394:	f7fc fc50 	bl	8000c38 <__aeabi_d2f>
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 8004398:	88a3      	ldrh	r3, [r4, #4]
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 800439a:	4a4d      	ldr	r2, [pc, #308]	; (80044d0 <HAL_UART_RxCpltCallback+0x2f8>)
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 800439c:	ba5b      	rev16	r3, r3
 800439e:	b29b      	uxth	r3, r3
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	vel_sway= ((float32_t)(data_from_ether[2]<<8 | data_from_ether[3])-32767.0)/32767.0*7.0;
 80043a8:	6010      	str	r0, [r2, #0]
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 80043aa:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80043ae:	ee17 0a90 	vmov	r0, s15
 80043b2:	f7fc f8f1 	bl	8000598 <__aeabi_f2d>
 80043b6:	a33c      	add	r3, pc, #240	; (adr r3, 80044a8 <HAL_UART_RxCpltCallback+0x2d0>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	f7fc f944 	bl	8000648 <__aeabi_dmul>
 80043c0:	f7fc fc3a 	bl	8000c38 <__aeabi_d2f>
	theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 80043c4:	88e3      	ldrh	r3, [r4, #6]
	theta_vision=((float32_t)(data_from_ether[4]<<8 | data_from_ether[5])-32767)/32767.0*M_PI;
 80043c6:	6028      	str	r0, [r5, #0]
	theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 80043c8:	ba5b      	rev16	r3, r3
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	ee07 3a90 	vmov	s15, r3
 80043d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d4:	4d3f      	ldr	r5, [pc, #252]	; (80044d4 <HAL_UART_RxCpltCallback+0x2fc>)
 80043d6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80043da:	ee17 0a90 	vmov	r0, s15
 80043de:	f7fc f8db 	bl	8000598 <__aeabi_f2d>
 80043e2:	a331      	add	r3, pc, #196	; (adr r3, 80044a8 <HAL_UART_RxCpltCallback+0x2d0>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fc f92e 	bl	8000648 <__aeabi_dmul>
 80043ec:	f7fc fc24 	bl	8000c38 <__aeabi_d2f>

	if(data_from_ether[8]>100){
 80043f0:	7a23      	ldrb	r3, [r4, #8]
	theta_target=((float32_t)(data_from_ether[6]<<8 | data_from_ether[7])-32767)/32767.0*M_PI;
 80043f2:	6028      	str	r0, [r5, #0]
	if(data_from_ether[8]>100){
 80043f4:	2b64      	cmp	r3, #100	; 0x64
 80043f6:	d82b      	bhi.n	8004450 <HAL_UART_RxCpltCallback+0x278>
		chipEN=1;
		data_from_ether[8]=data_from_ether[8]-100;
	}
	else{
		chipEN=0;
 80043f8:	2100      	movs	r1, #0
	}
	kick_power=(float32_t)data_from_ether[8]/20.0;
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	4a36      	ldr	r2, [pc, #216]	; (80044d8 <HAL_UART_RxCpltCallback+0x300>)
 8004400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004404:	7011      	strb	r1, [r2, #0]
 8004406:	ee17 0a90 	vmov	r0, s15
 800440a:	f7fc f8c5 	bl	8000598 <__aeabi_f2d>
 800440e:	a328      	add	r3, pc, #160	; (adr r3, 80044b0 <HAL_UART_RxCpltCallback+0x2d8>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fc f918 	bl	8000648 <__aeabi_dmul>
 8004418:	f7fc fc0e 	bl	8000c38 <__aeabi_d2f>
	drible_power=(float32_t)data_from_ether[9]/20.0;
 800441c:	7a63      	ldrb	r3, [r4, #9]
	kick_power=(float32_t)data_from_ether[8]/20.0;
 800441e:	4a2f      	ldr	r2, [pc, #188]	; (80044dc <HAL_UART_RxCpltCallback+0x304>)
	drible_power=(float32_t)data_from_ether[9]/20.0;
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 7a67 	vcvt.f32.u32	s15, s15
	kick_power=(float32_t)data_from_ether[8]/20.0;
 8004428:	6010      	str	r0, [r2, #0]
	drible_power=(float32_t)data_from_ether[9]/20.0;
 800442a:	ee17 0a90 	vmov	r0, s15
 800442e:	f7fc f8b3 	bl	8000598 <__aeabi_f2d>
 8004432:	a31f      	add	r3, pc, #124	; (adr r3, 80044b0 <HAL_UART_RxCpltCallback+0x2d8>)
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f7fc f906 	bl	8000648 <__aeabi_dmul>
 800443c:	f7fc fbfc 	bl	8000c38 <__aeabi_d2f>

	keeper_EN=data_from_ether[10];
 8004440:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <HAL_UART_RxCpltCallback+0x308>)
 8004442:	7aa2      	ldrb	r2, [r4, #10]
 8004444:	701a      	strb	r2, [r3, #0]
}
 8004446:	ecbd 8b02 	vpop	{d8}
	drible_power=(float32_t)data_from_ether[9]/20.0;
 800444a:	4926      	ldr	r1, [pc, #152]	; (80044e4 <HAL_UART_RxCpltCallback+0x30c>)
 800444c:	6008      	str	r0, [r1, #0]
}
 800444e:	bd38      	pop	{r3, r4, r5, pc}
		data_from_ether[8]=data_from_ether[8]-100;
 8004450:	3b64      	subs	r3, #100	; 0x64
 8004452:	b2db      	uxtb	r3, r3
 8004454:	7223      	strb	r3, [r4, #8]
		chipEN=1;
 8004456:	2101      	movs	r1, #1
 8004458:	e7cf      	b.n	80043fa <HAL_UART_RxCpltCallback+0x222>
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 800445a:	7b5b      	ldrb	r3, [r3, #13]
 800445c:	7323      	strb	r3, [r4, #12]
	if(data_from_ether[sizeof(data_from_ether)-1]==253){
 800445e:	2bfd      	cmp	r3, #253	; 0xfd
 8004460:	f47f af62 	bne.w	8004328 <HAL_UART_RxCpltCallback+0x150>
			Rxbuf_from_Ether_temp[k]=data_from_ether[k];
 8004464:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004468:	4d15      	ldr	r5, [pc, #84]	; (80044c0 <HAL_UART_RxCpltCallback+0x2e8>)
 800446a:	c507      	stmia	r5!, {r0, r1, r2}
 800446c:	702b      	strb	r3, [r5, #0]
 800446e:	e760      	b.n	8004332 <HAL_UART_RxCpltCallback+0x15a>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004470:	2205      	movs	r2, #5
		j++;
 8004472:	4611      	mov	r1, r2
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004474:	1898      	adds	r0, r3, r2
 8004476:	4c11      	ldr	r4, [pc, #68]	; (80044bc <HAL_UART_RxCpltCallback+0x2e4>)
 8004478:	7845      	ldrb	r5, [r0, #1]
 800447a:	7025      	strb	r5, [r4, #0]
 800447c:	7880      	ldrb	r0, [r0, #2]
 800447e:	e6ea      	b.n	8004256 <HAL_UART_RxCpltCallback+0x7e>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004480:	2200      	movs	r2, #0
	uint8_t j = 0;
 8004482:	4611      	mov	r1, r2
 8004484:	e7f6      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004486:	2201      	movs	r2, #1
		j++;
 8004488:	4611      	mov	r1, r2
 800448a:	e7f3      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800448c:	2202      	movs	r2, #2
		j++;
 800448e:	4611      	mov	r1, r2
 8004490:	e7f0      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
 8004492:	bf00      	nop
 8004494:	f3af 8000 	nop.w
 8004498:	00000000 	.word	0x00000000
 800449c:	40dfffc0 	.word	0x40dfffc0
 80044a0:	007000e0 	.word	0x007000e0
 80044a4:	3f2c0038 	.word	0x3f2c0038
 80044a8:	989f5e57 	.word	0x989f5e57
 80044ac:	3f19222d 	.word	0x3f19222d
 80044b0:	9999999a 	.word	0x9999999a
 80044b4:	3fa99999 	.word	0x3fa99999
 80044b8:	20000604 	.word	0x20000604
 80044bc:	200006a4 	.word	0x200006a4
 80044c0:	20000614 	.word	0x20000614
 80044c4:	20000764 	.word	0x20000764
 80044c8:	46fffe00 	.word	0x46fffe00
 80044cc:	2000075c 	.word	0x2000075c
 80044d0:	20000768 	.word	0x20000768
 80044d4:	20000758 	.word	0x20000758
 80044d8:	2000069e 	.word	0x2000069e
 80044dc:	200006e8 	.word	0x200006e8
 80044e0:	200006e4 	.word	0x200006e4
 80044e4:	200006b4 	.word	0x200006b4
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80044e8:	2203      	movs	r2, #3
		j++;
 80044ea:	4611      	mov	r1, r2
 80044ec:	e7c2      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80044ee:	2204      	movs	r2, #4
		j++;
 80044f0:	4611      	mov	r1, r2
 80044f2:	e7bf      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80044f4:	2206      	movs	r2, #6
		j++;
 80044f6:	4611      	mov	r1, r2
 80044f8:	e7bc      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 80044fa:	2207      	movs	r2, #7
		j++;
 80044fc:	4611      	mov	r1, r2
 80044fe:	e7b9      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004500:	2208      	movs	r2, #8
		j++;
 8004502:	4611      	mov	r1, r2
 8004504:	e7b6      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004506:	2209      	movs	r2, #9
		j++;
 8004508:	4611      	mov	r1, r2
 800450a:	e7b3      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800450c:	220a      	movs	r2, #10
		j++;
 800450e:	4611      	mov	r1, r2
 8004510:	e7b0      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 8004512:	220b      	movs	r2, #11
		j++;
 8004514:	4611      	mov	r1, r2
 8004516:	e7ad      	b.n	8004474 <HAL_UART_RxCpltCallback+0x29c>
				data_from_ether[k] = Rxbuf_from_Ether[j + k + 1];
 8004518:	7b5a      	ldrb	r2, [r3, #13]
 800451a:	7022      	strb	r2, [r4, #0]
		j++;
 800451c:	210c      	movs	r1, #12
	while (Rxbuf_from_Ether[j] != 254 &&  j<sizeof(Rxbuf_from_Ether)) {
 800451e:	460a      	mov	r2, r1
 8004520:	e696      	b.n	8004250 <HAL_UART_RxCpltCallback+0x78>
 8004522:	bf00      	nop

08004524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004524:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1){
		maintask_emargency();
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 8004526:	4c07      	ldr	r4, [pc, #28]	; (8004544 <Error_Handler+0x20>)
		maintask_emargency();
 8004528:	f7fe fef2 	bl	8003310 <maintask_emargency>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,1);
 800452c:	4620      	mov	r0, r4
 800452e:	2201      	movs	r2, #1
 8004530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004534:	f002 fdbe 	bl	80070b4 <HAL_GPIO_WritePin>
		actuator_buzzer(200, 200);
 8004538:	21c8      	movs	r1, #200	; 0xc8
 800453a:	4608      	mov	r0, r1
 800453c:	f7fc fe38 	bl	80011b0 <actuator_buzzer>
	while(1){
 8004540:	e7f2      	b.n	8004528 <Error_Handler+0x4>
 8004542:	bf00      	nop
 8004544:	48000400 	.word	0x48000400

08004548 <SystemClock_Config>:
{
 8004548:	b500      	push	{lr}
 800454a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800454c:	2238      	movs	r2, #56	; 0x38
 800454e:	2100      	movs	r1, #0
 8004550:	a806      	add	r0, sp, #24
 8004552:	f005 fbd9 	bl	8009d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004556:	2000      	movs	r0, #0
 8004558:	e9cd 0000 	strd	r0, r0, [sp]
 800455c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8004560:	9004      	str	r0, [sp, #16]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004562:	f002 fdc3 	bl	80070ec <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004566:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80045b8 <SystemClock_Config+0x70>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800456a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800456c:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLN = 85;
 800456e:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004570:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004572:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004576:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 800457a:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800457e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004582:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004584:	f002 fe38 	bl	80071f8 <HAL_RCC_OscConfig>
 8004588:	b988      	cbnz	r0, 80045ae <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800458a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80045c0 <SystemClock_Config+0x78>
 800458e:	ed8d 7b00 	vstr	d7, [sp]
 8004592:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80045c8 <SystemClock_Config+0x80>
 8004596:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004598:	2104      	movs	r1, #4
 800459a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800459c:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045a0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80045a2:	f003 f8ad 	bl	8007700 <HAL_RCC_ClockConfig>
 80045a6:	b910      	cbnz	r0, 80045ae <SystemClock_Config+0x66>
}
 80045a8:	b015      	add	sp, #84	; 0x54
 80045aa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80045ae:	f7ff ffb9 	bl	8004524 <Error_Handler>
 80045b2:	bf00      	nop
 80045b4:	f3af 8000 	nop.w
 80045b8:	00000001 	.word	0x00000001
 80045bc:	00010000 	.word	0x00010000
 80045c0:	0000000f 	.word	0x0000000f
 80045c4:	00000003 	.word	0x00000003
	...

080045d0 <main>:
{
 80045d0:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 80045d2:	f001 f891 	bl	80056f8 <HAL_Init>
  SystemClock_Config();
 80045d6:	f7ff ffb7 	bl	8004548 <SystemClock_Config>
  MX_GPIO_Init();
 80045da:	f7fd f9af 	bl	800193c <MX_GPIO_Init>
  MX_DMA_Init();
 80045de:	f7fd f861 	bl	80016a4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80045e2:	f7fd f8a1 	bl	8001728 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 80045e6:	f000 fe33 	bl	8005250 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80045ea:	f000 fe7f 	bl	80052ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80045ee:	f000 fec5 	bl	800537c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80045f2:	f000 fc25 	bl	8004e40 <MX_SPI1_Init>
  MX_TIM5_Init();
 80045f6:	f000 fd5b 	bl	80050b0 <MX_TIM5_Init>
  MX_TIM7_Init();
 80045fa:	f000 fdc7 	bl	800518c <MX_TIM7_Init>
  MX_ADC5_Init();
 80045fe:	f7fc fe8d 	bl	800131c <MX_ADC5_Init>
  MX_ADC3_Init();
 8004602:	f7fc fe39 	bl	8001278 <MX_ADC3_Init>
  MX_FDCAN2_Init();
 8004606:	f7fd f8b5 	bl	8001774 <MX_FDCAN2_Init>
  MX_ADC1_Init();
 800460a:	f7fc fde3 	bl	80011d4 <MX_ADC1_Init>
  check_motor2=0;
 800460e:	4a6b      	ldr	r2, [pc, #428]	; (80047bc <main+0x1ec>)
  check_motor4=0;
 8004610:	4b6b      	ldr	r3, [pc, #428]	; (80047c0 <main+0x1f0>)
  check_motor3=0;
 8004612:	496c      	ldr	r1, [pc, #432]	; (80047c4 <main+0x1f4>)
  check_power=0;
 8004614:	486c      	ldr	r0, [pc, #432]	; (80047c8 <main+0x1f8>)
  check_motor1=0;
 8004616:	4d6d      	ldr	r5, [pc, #436]	; (80047cc <main+0x1fc>)
 8004618:	2400      	movs	r4, #0
  check_motor2=0;
 800461a:	7014      	strb	r4, [r2, #0]
  check_motor4=0;
 800461c:	701c      	strb	r4, [r3, #0]
  check_FC=0;
 800461e:	4a6c      	ldr	r2, [pc, #432]	; (80047d0 <main+0x200>)
  kick_state=0;
 8004620:	4b6c      	ldr	r3, [pc, #432]	; (80047d4 <main+0x204>)
  check_motor3=0;
 8004622:	700c      	strb	r4, [r1, #0]
  check_power=0;
 8004624:	7004      	strb	r4, [r0, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004626:	2104      	movs	r1, #4
 8004628:	486b      	ldr	r0, [pc, #428]	; (80047d8 <main+0x208>)
  check_FC=0;
 800462a:	7014      	strb	r4, [r2, #0]
  kick_state=0;
 800462c:	601c      	str	r4, [r3, #0]
  check_motor1=0;
 800462e:	702c      	strb	r4, [r5, #0]
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8004630:	f004 f89c 	bl	800876c <HAL_TIM_PWM_Start>
      actuator_buzzer(20, 20);
 8004634:	2114      	movs	r1, #20
 8004636:	4608      	mov	r0, r1
 8004638:	f7fc fdba 	bl	80011b0 <actuator_buzzer>
 800463c:	2114      	movs	r1, #20
 800463e:	4608      	mov	r0, r1
 8004640:	f7fc fdb6 	bl	80011b0 <actuator_buzzer>
 8004644:	2114      	movs	r1, #20
 8004646:	4608      	mov	r0, r1
 8004648:	f7fc fdb2 	bl	80011b0 <actuator_buzzer>
    setbuf(stdout, NULL);
 800464c:	4b63      	ldr	r3, [pc, #396]	; (80047dc <main+0x20c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4621      	mov	r1, r4
 8004652:	6898      	ldr	r0, [r3, #8]
 8004654:	f006 f858 	bl	800a708 <setbuf>
    printf("start\r\n");
 8004658:	4861      	ldr	r0, [pc, #388]	; (80047e0 <main+0x210>)
 800465a:	f006 f84d 	bl	800a6f8 <puts>
    can1_init_ibis(&hfdcan1);
 800465e:	4861      	ldr	r0, [pc, #388]	; (80047e4 <main+0x214>)
 8004660:	f7fc ff8a 	bl	8001578 <can1_init_ibis>
    can2_init_ibis(&hfdcan2);
 8004664:	4860      	ldr	r0, [pc, #384]	; (80047e8 <main+0x218>)
 8004666:	f7fc ffd3 	bl	8001610 <can2_init_ibis>
    HAL_FDCAN_Start(&hfdcan1);
 800466a:	485e      	ldr	r0, [pc, #376]	; (80047e4 <main+0x214>)
 800466c:	f002 f9d0 	bl	8006a10 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004670:	485c      	ldr	r0, [pc, #368]	; (80047e4 <main+0x214>)
 8004672:	4622      	mov	r2, r4
 8004674:	2101      	movs	r1, #1
 8004676:	f002 fad3 	bl	8006c20 <HAL_FDCAN_ActivateNotification>
 800467a:	b950      	cbnz	r0, 8004692 <main+0xc2>
    HAL_FDCAN_Start(&hfdcan2);
 800467c:	4604      	mov	r4, r0
 800467e:	485a      	ldr	r0, [pc, #360]	; (80047e8 <main+0x218>)
 8004680:	f002 f9c6 	bl	8006a10 <HAL_FDCAN_Start>
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8004684:	4622      	mov	r2, r4
 8004686:	4858      	ldr	r0, [pc, #352]	; (80047e8 <main+0x218>)
 8004688:	2101      	movs	r1, #1
 800468a:	f002 fac9 	bl	8006c20 <HAL_FDCAN_ActivateNotification>
 800468e:	4604      	mov	r4, r0
 8004690:	b108      	cbz	r0, 8004696 <main+0xc6>
      Error_Handler();
 8004692:	f7ff ff47 	bl	8004524 <Error_Handler>
    HAL_UART_Init(&hlpuart1);
 8004696:	4855      	ldr	r0, [pc, #340]	; (80047ec <main+0x21c>)
 8004698:	f005 f97a 	bl	8009990 <HAL_UART_Init>
    xprintf_init(&hlpuart1);
 800469c:	4853      	ldr	r0, [pc, #332]	; (80047ec <main+0x21c>)
 800469e:	f000 ffcf 	bl	8005640 <xprintf_init>
    HAL_UART_Init(&huart2);
 80046a2:	4853      	ldr	r0, [pc, #332]	; (80047f0 <main+0x220>)
 80046a4:	f005 f974 	bl	8009990 <HAL_UART_Init>
    HAL_UART_Receive_DMA(&huart2,(uint8_t *)Rxbuf_from_Ether,Rxbufsize_from_Ether);
 80046a8:	4952      	ldr	r1, [pc, #328]	; (80047f4 <main+0x224>)
 80046aa:	4851      	ldr	r0, [pc, #324]	; (80047f0 <main+0x220>)
 80046ac:	220e      	movs	r2, #14
 80046ae:	f005 fa2f 	bl	8009b10 <HAL_UART_Receive_DMA>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Vsense,1);
 80046b2:	4951      	ldr	r1, [pc, #324]	; (80047f8 <main+0x228>)
 80046b4:	4851      	ldr	r0, [pc, #324]	; (80047fc <main+0x22c>)
 80046b6:	2201      	movs	r2, #1
 80046b8:	f001 fc96 	bl	8005fe8 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t *)Csense,1);
 80046bc:	4950      	ldr	r1, [pc, #320]	; (8004800 <main+0x230>)
 80046be:	4851      	ldr	r0, [pc, #324]	; (8004804 <main+0x234>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	f001 fc91 	bl	8005fe8 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc5, (uint32_t *)SWdata,1);
 80046c6:	2201      	movs	r2, #1
 80046c8:	494f      	ldr	r1, [pc, #316]	; (8004808 <main+0x238>)
 80046ca:	4850      	ldr	r0, [pc, #320]	; (800480c <main+0x23c>)
 80046cc:	f001 fc8c 	bl	8005fe8 <HAL_ADC_Start_DMA>
    actuator_power_ONOFF(0);
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7fc fd3f 	bl	8001154 <actuator_power_ONOFF>
    HAL_Delay(20);
 80046d6:	2014      	movs	r0, #20
 80046d8:	f001 f82a 	bl	8005730 <HAL_Delay>
    actuator_motor1(0.0,0.0);
 80046dc:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8004810 <main+0x240>
 80046e0:	eeb0 0a60 	vmov.f32	s0, s1
 80046e4:	f7fc fc7a 	bl	8000fdc <actuator_motor1>
    actuator_motor2(0.0,0.0);
 80046e8:	eddf 0a49 	vldr	s1, [pc, #292]	; 8004810 <main+0x240>
 80046ec:	eeb0 0a60 	vmov.f32	s0, s1
 80046f0:	f7fc fc90 	bl	8001014 <actuator_motor2>
    actuator_motor3(0.0,0.0);
 80046f4:	eddf 0a46 	vldr	s1, [pc, #280]	; 8004810 <main+0x240>
 80046f8:	eeb0 0a60 	vmov.f32	s0, s1
 80046fc:	f7fc fca6 	bl	800104c <actuator_motor3>
    actuator_motor4(0.0,0.0);
 8004700:	eddf 0a43 	vldr	s1, [pc, #268]	; 8004810 <main+0x240>
 8004704:	eeb0 0a60 	vmov.f32	s0, s1
 8004708:	f7fc fcbc 	bl	8001084 <actuator_motor4>
    actuator_motor5(0.0,0.0);
 800470c:	eddf 0a40 	vldr	s1, [pc, #256]	; 8004810 <main+0x240>
 8004710:	eeb0 0a60 	vmov.f32	s0, s1
 8004714:	f7fc fcd2 	bl	80010bc <actuator_motor5>
    actuator_kicker(1, 1);
 8004718:	2101      	movs	r1, #1
 800471a:	4608      	mov	r0, r1
 800471c:	f7fc fd0a 	bl	8001134 <actuator_kicker>
    actuator_kicker_voltage(250.0);
 8004720:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8004814 <main+0x244>
 8004724:	f7fc fce6 	bl	80010f4 <actuator_kicker_voltage>
    actuator_power_param(1,15.0);//min voltage
 8004728:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800472c:	2001      	movs	r0, #1
 800472e:	f7fc fd21 	bl	8001174 <actuator_power_param>
    actuator_power_param(2,35.0);//max voltage
 8004732:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8004818 <main+0x248>
 8004736:	2002      	movs	r0, #2
 8004738:	f7fc fd1c 	bl	8001174 <actuator_power_param>
    actuator_power_param(3,50.0);//max current
 800473c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800481c <main+0x24c>
 8004740:	2003      	movs	r0, #3
 8004742:	f7fc fd17 	bl	8001174 <actuator_power_param>
    actuator_power_param(4,90.0);//max temp(fet)
 8004746:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8004820 <main+0x250>
 800474a:	2004      	movs	r0, #4
 800474c:	f7fc fd12 	bl	8001174 <actuator_power_param>
    actuator_power_param(5,90.0);//max temp(solenoid)
 8004750:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8004820 <main+0x250>
 8004754:	2005      	movs	r0, #5
 8004756:	f7fc fd0d 	bl	8001174 <actuator_power_param>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800475a:	4832      	ldr	r0, [pc, #200]	; (8004824 <main+0x254>)
 800475c:	2201      	movs	r2, #1
 800475e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004762:	f002 fca7 	bl	80070b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8004766:	2201      	movs	r2, #1
 8004768:	4611      	mov	r1, r2
 800476a:	482e      	ldr	r0, [pc, #184]	; (8004824 <main+0x254>)
 800476c:	f002 fca2 	bl	80070b4 <HAL_GPIO_WritePin>
    ICM20602_init();
 8004770:	f7fd f99c 	bl	8001aac <ICM20602_init>
    ICM20602_IMU_calibration2();
 8004774:	f7fd ff10 	bl	8002598 <ICM20602_IMU_calibration2>
    ICM20602_clearAngle();
 8004778:	f7fd fa8e 	bl	8001c98 <ICM20602_clearAngle>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800477c:	4622      	mov	r2, r4
 800477e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004782:	4828      	ldr	r0, [pc, #160]	; (8004824 <main+0x254>)
 8004784:	f002 fc96 	bl	80070b4 <HAL_GPIO_WritePin>
    actuator_power_ONOFF(1);
 8004788:	2001      	movs	r0, #1
 800478a:	f7fc fce3 	bl	8001154 <actuator_power_ONOFF>
    	actuator_buzzer(40, 40);
 800478e:	2128      	movs	r1, #40	; 0x28
 8004790:	4608      	mov	r0, r1
 8004792:	f7fc fd0d 	bl	80011b0 <actuator_buzzer>
 8004796:	2128      	movs	r1, #40	; 0x28
 8004798:	4608      	mov	r0, r1
 800479a:	f7fc fd09 	bl	80011b0 <actuator_buzzer>
 800479e:	2128      	movs	r1, #40	; 0x28
 80047a0:	4608      	mov	r0, r1
 80047a2:	f7fc fd05 	bl	80011b0 <actuator_buzzer>
    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 80047a6:	4b20      	ldr	r3, [pc, #128]	; (8004828 <main+0x258>)
    HAL_Delay(500);
 80047a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    data_from_ether[Rxbufsize_from_Ether-3] = 0;
 80047ac:	72dc      	strb	r4, [r3, #11]
    HAL_Delay(500);
 80047ae:	f000 ffbf 	bl	8005730 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim7);
 80047b2:	481e      	ldr	r0, [pc, #120]	; (800482c <main+0x25c>)
 80047b4:	f003 fefe 	bl	80085b4 <HAL_TIM_Base_Start_IT>
  while (1)
 80047b8:	e7fe      	b.n	80047b8 <main+0x1e8>
 80047ba:	bf00      	nop
 80047bc:	2000069a 	.word	0x2000069a
 80047c0:	2000069c 	.word	0x2000069c
 80047c4:	2000069b 	.word	0x2000069b
 80047c8:	2000069d 	.word	0x2000069d
 80047cc:	20000699 	.word	0x20000699
 80047d0:	20000698 	.word	0x20000698
 80047d4:	200006ec 	.word	0x200006ec
 80047d8:	200007dc 	.word	0x200007dc
 80047dc:	20000014 	.word	0x20000014
 80047e0:	0800cb20 	.word	0x0800cb20
 80047e4:	20000470 	.word	0x20000470
 80047e8:	200004d4 	.word	0x200004d4
 80047ec:	20000938 	.word	0x20000938
 80047f0:	200009c8 	.word	0x200009c8
 80047f4:	20000604 	.word	0x20000604
 80047f8:	20000658 	.word	0x20000658
 80047fc:	20000208 	.word	0x20000208
 8004800:	200005b0 	.word	0x200005b0
 8004804:	20000274 	.word	0x20000274
 8004808:	20000624 	.word	0x20000624
 800480c:	200002e0 	.word	0x200002e0
 8004810:	00000000 	.word	0x00000000
 8004814:	437a0000 	.word	0x437a0000
 8004818:	420c0000 	.word	0x420c0000
 800481c:	42480000 	.word	0x42480000
 8004820:	42b40000 	.word	0x42b40000
 8004824:	48000800 	.word	0x48000800
 8004828:	200006a4 	.word	0x200006a4
 800482c:	20000828 	.word	0x20000828

08004830 <HAL_FDCAN_RxFifo0Callback>:
{
 8004830:	b538      	push	{r3, r4, r5, lr}
	if (hfdcan->Instance == hfdcan1.Instance) {
 8004832:	4bd9      	ldr	r3, [pc, #868]	; (8004b98 <HAL_FDCAN_RxFifo0Callback+0x368>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	6803      	ldr	r3, [r0, #0]
 8004838:	4293      	cmp	r3, r2
 800483a:	f000 80a3 	beq.w	8004984 <HAL_FDCAN_RxFifo0Callback+0x154>
	else if (hfdcan->Instance == hfdcan2.Instance) {
 800483e:	4ad7      	ldr	r2, [pc, #860]	; (8004b9c <HAL_FDCAN_RxFifo0Callback+0x36c>)
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	4293      	cmp	r3, r2
 8004844:	d000      	beq.n	8004848 <HAL_FDCAN_RxFifo0Callback+0x18>
}
 8004846:	bd38      	pop	{r3, r4, r5, pc}
		   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8004848:	07cb      	lsls	r3, r1, #31
 800484a:	d5fc      	bpl.n	8004846 <HAL_FDCAN_RxFifo0Callback+0x16>
		   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800484c:	4cd4      	ldr	r4, [pc, #848]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 800484e:	4dd5      	ldr	r5, [pc, #852]	; (8004ba4 <HAL_FDCAN_RxFifo0Callback+0x374>)
 8004850:	4623      	mov	r3, r4
 8004852:	462a      	mov	r2, r5
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	f002 f959 	bl	8006b0c <HAL_FDCAN_GetRxMessage>
 800485a:	2800      	cmp	r0, #0
 800485c:	f040 8211 	bne.w	8004c82 <HAL_FDCAN_RxFifo0Callback+0x452>
			switch (RxHeader.Identifier){
 8004860:	682a      	ldr	r2, [r5, #0]
 8004862:	f240 2341 	movw	r3, #577	; 0x241
 8004866:	429a      	cmp	r2, r3
 8004868:	d8ed      	bhi.n	8004846 <HAL_FDCAN_RxFifo0Callback+0x16>
 800486a:	f240 2301 	movw	r3, #513	; 0x201
 800486e:	429a      	cmp	r2, r3
 8004870:	f240 8128 	bls.w	8004ac4 <HAL_FDCAN_RxFifo0Callback+0x294>
 8004874:	f2a2 2202 	subw	r2, r2, #514	; 0x202
 8004878:	2a3f      	cmp	r2, #63	; 0x3f
 800487a:	d8e4      	bhi.n	8004846 <HAL_FDCAN_RxFifo0Callback+0x16>
 800487c:	a301      	add	r3, pc, #4	; (adr r3, 8004884 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800487e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004bd5 	.word	0x08004bd5
 8004888:	08004bff 	.word	0x08004bff
 800488c:	08004847 	.word	0x08004847
 8004890:	08004847 	.word	0x08004847
 8004894:	08004847 	.word	0x08004847
 8004898:	08004847 	.word	0x08004847
 800489c:	08004847 	.word	0x08004847
 80048a0:	08004847 	.word	0x08004847
 80048a4:	08004847 	.word	0x08004847
 80048a8:	08004847 	.word	0x08004847
 80048ac:	08004847 	.word	0x08004847
 80048b0:	08004847 	.word	0x08004847
 80048b4:	08004847 	.word	0x08004847
 80048b8:	08004847 	.word	0x08004847
 80048bc:	08004847 	.word	0x08004847
 80048c0:	08004847 	.word	0x08004847
 80048c4:	08004847 	.word	0x08004847
 80048c8:	08004847 	.word	0x08004847
 80048cc:	08004847 	.word	0x08004847
 80048d0:	08004bf1 	.word	0x08004bf1
 80048d4:	08004c6f 	.word	0x08004c6f
 80048d8:	08004847 	.word	0x08004847
 80048dc:	08004847 	.word	0x08004847
 80048e0:	08004847 	.word	0x08004847
 80048e4:	08004847 	.word	0x08004847
 80048e8:	08004847 	.word	0x08004847
 80048ec:	08004847 	.word	0x08004847
 80048f0:	08004847 	.word	0x08004847
 80048f4:	08004847 	.word	0x08004847
 80048f8:	08004847 	.word	0x08004847
 80048fc:	08004847 	.word	0x08004847
 8004900:	08004847 	.word	0x08004847
 8004904:	08004c61 	.word	0x08004c61
 8004908:	08004c53 	.word	0x08004c53
 800490c:	08004af3 	.word	0x08004af3
 8004910:	08004847 	.word	0x08004847
 8004914:	08004847 	.word	0x08004847
 8004918:	08004847 	.word	0x08004847
 800491c:	08004847 	.word	0x08004847
 8004920:	08004847 	.word	0x08004847
 8004924:	08004847 	.word	0x08004847
 8004928:	08004847 	.word	0x08004847
 800492c:	08004847 	.word	0x08004847
 8004930:	08004847 	.word	0x08004847
 8004934:	08004847 	.word	0x08004847
 8004938:	08004847 	.word	0x08004847
 800493c:	08004847 	.word	0x08004847
 8004940:	08004847 	.word	0x08004847
 8004944:	08004c3f 	.word	0x08004c3f
 8004948:	08004c2b 	.word	0x08004c2b
 800494c:	08004adf 	.word	0x08004adf
 8004950:	08004847 	.word	0x08004847
 8004954:	08004847 	.word	0x08004847
 8004958:	08004847 	.word	0x08004847
 800495c:	08004847 	.word	0x08004847
 8004960:	08004847 	.word	0x08004847
 8004964:	08004847 	.word	0x08004847
 8004968:	08004847 	.word	0x08004847
 800496c:	08004847 	.word	0x08004847
 8004970:	08004847 	.word	0x08004847
 8004974:	08004847 	.word	0x08004847
 8004978:	08004847 	.word	0x08004847
 800497c:	08004847 	.word	0x08004847
 8004980:	08004c1b 	.word	0x08004c1b
	   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8004984:	07ca      	lsls	r2, r1, #31
 8004986:	f57f af5e 	bpl.w	8004846 <HAL_FDCAN_RxFifo0Callback+0x16>
	   if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800498a:	4c85      	ldr	r4, [pc, #532]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 800498c:	4d85      	ldr	r5, [pc, #532]	; (8004ba4 <HAL_FDCAN_RxFifo0Callback+0x374>)
 800498e:	4623      	mov	r3, r4
 8004990:	462a      	mov	r2, r5
 8004992:	2140      	movs	r1, #64	; 0x40
 8004994:	f002 f8ba 	bl	8006b0c <HAL_FDCAN_GetRxMessage>
 8004998:	2800      	cmp	r0, #0
 800499a:	f040 8172 	bne.w	8004c82 <HAL_FDCAN_RxFifo0Callback+0x452>
		switch (RxHeader.Identifier){
 800499e:	682a      	ldr	r2, [r5, #0]
 80049a0:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
 80049a4:	f63f af4f 	bhi.w	8004846 <HAL_FDCAN_RxFifo0Callback+0x16>
 80049a8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80049ac:	f0c0 808a 	bcc.w	8004ac4 <HAL_FDCAN_RxFifo0Callback+0x294>
 80049b0:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80049b4:	2a40      	cmp	r2, #64	; 0x40
 80049b6:	f63f af46 	bhi.w	8004846 <HAL_FDCAN_RxFifo0Callback+0x16>
 80049ba:	a301      	add	r3, pc, #4	; (adr r3, 80049c0 <HAL_FDCAN_RxFifo0Callback+0x190>)
 80049bc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80049c0:	08004b6f 	.word	0x08004b6f
 80049c4:	08004b53 	.word	0x08004b53
 80049c8:	08004847 	.word	0x08004847
 80049cc:	08004847 	.word	0x08004847
 80049d0:	08004847 	.word	0x08004847
 80049d4:	08004847 	.word	0x08004847
 80049d8:	08004847 	.word	0x08004847
 80049dc:	08004847 	.word	0x08004847
 80049e0:	08004847 	.word	0x08004847
 80049e4:	08004847 	.word	0x08004847
 80049e8:	08004847 	.word	0x08004847
 80049ec:	08004847 	.word	0x08004847
 80049f0:	08004847 	.word	0x08004847
 80049f4:	08004847 	.word	0x08004847
 80049f8:	08004847 	.word	0x08004847
 80049fc:	08004847 	.word	0x08004847
 8004a00:	08004847 	.word	0x08004847
 8004a04:	08004847 	.word	0x08004847
 8004a08:	08004847 	.word	0x08004847
 8004a0c:	08004847 	.word	0x08004847
 8004a10:	08004847 	.word	0x08004847
 8004a14:	08004847 	.word	0x08004847
 8004a18:	08004847 	.word	0x08004847
 8004a1c:	08004847 	.word	0x08004847
 8004a20:	08004847 	.word	0x08004847
 8004a24:	08004847 	.word	0x08004847
 8004a28:	08004847 	.word	0x08004847
 8004a2c:	08004847 	.word	0x08004847
 8004a30:	08004847 	.word	0x08004847
 8004a34:	08004847 	.word	0x08004847
 8004a38:	08004847 	.word	0x08004847
 8004a3c:	08004847 	.word	0x08004847
 8004a40:	08004b45 	.word	0x08004b45
 8004a44:	08004b37 	.word	0x08004b37
 8004a48:	08004847 	.word	0x08004847
 8004a4c:	08004847 	.word	0x08004847
 8004a50:	08004af3 	.word	0x08004af3
 8004a54:	08004b01 	.word	0x08004b01
 8004a58:	08004847 	.word	0x08004847
 8004a5c:	08004847 	.word	0x08004847
 8004a60:	08004847 	.word	0x08004847
 8004a64:	08004847 	.word	0x08004847
 8004a68:	08004847 	.word	0x08004847
 8004a6c:	08004847 	.word	0x08004847
 8004a70:	08004847 	.word	0x08004847
 8004a74:	08004847 	.word	0x08004847
 8004a78:	08004847 	.word	0x08004847
 8004a7c:	08004847 	.word	0x08004847
 8004a80:	08004b23 	.word	0x08004b23
 8004a84:	08004b0f 	.word	0x08004b0f
 8004a88:	08004847 	.word	0x08004847
 8004a8c:	08004847 	.word	0x08004847
 8004a90:	08004adf 	.word	0x08004adf
 8004a94:	08004847 	.word	0x08004847
 8004a98:	08004847 	.word	0x08004847
 8004a9c:	08004847 	.word	0x08004847
 8004aa0:	08004847 	.word	0x08004847
 8004aa4:	08004847 	.word	0x08004847
 8004aa8:	08004847 	.word	0x08004847
 8004aac:	08004847 	.word	0x08004847
 8004ab0:	08004847 	.word	0x08004847
 8004ab4:	08004847 	.word	0x08004847
 8004ab8:	08004847 	.word	0x08004847
 8004abc:	08004847 	.word	0x08004847
 8004ac0:	08004b8b 	.word	0x08004b8b
			switch (RxHeader.Identifier){
 8004ac4:	2a00      	cmp	r2, #0
 8004ac6:	f000 80d9 	beq.w	8004c7c <HAL_FDCAN_RxFifo0Callback+0x44c>
 8004aca:	2a01      	cmp	r2, #1
 8004acc:	f47f aebb 	bne.w	8004846 <HAL_FDCAN_RxFifo0Callback+0x16>
				error_No[0]=RxData[0];
 8004ad0:	4b35      	ldr	r3, [pc, #212]	; (8004ba8 <HAL_FDCAN_RxFifo0Callback+0x378>)
 8004ad2:	8822      	ldrh	r2, [r4, #0]
 8004ad4:	801a      	strh	r2, [r3, #0]
}
 8004ad6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				maintask_stop();
 8004ada:	f7fe bd17 	b.w	800350c <maintask_stop>
				amplitude[4]=uchar4_to_float(RxData);
 8004ade:	4830      	ldr	r0, [pc, #192]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004ae0:	f000 fd82 	bl	80055e8 <uchar4_to_float>
 8004ae4:	4931      	ldr	r1, [pc, #196]	; (8004bac <HAL_FDCAN_RxFifo0Callback+0x37c>)
				check_power=1;
 8004ae6:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <HAL_FDCAN_RxFifo0Callback+0x380>)
				amplitude[4]=uchar4_to_float(RxData);
 8004ae8:	ed81 0a04 	vstr	s0, [r1, #16]
				check_power=1;
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
}
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
				tempercher[4]=uchar4_to_float(RxData);
 8004af2:	482b      	ldr	r0, [pc, #172]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004af4:	f000 fd78 	bl	80055e8 <uchar4_to_float>
 8004af8:	4b2e      	ldr	r3, [pc, #184]	; (8004bb4 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004afa:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8004afe:	bd38      	pop	{r3, r4, r5, pc}
			tempercher[5]=uchar4_to_float(RxData);
 8004b00:	4827      	ldr	r0, [pc, #156]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b02:	f000 fd71 	bl	80055e8 <uchar4_to_float>
 8004b06:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004b08:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
			  amplitude[1]=uchar4_to_float(RxData);
 8004b0e:	4824      	ldr	r0, [pc, #144]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b10:	f000 fd6a 	bl	80055e8 <uchar4_to_float>
 8004b14:	4925      	ldr	r1, [pc, #148]	; (8004bac <HAL_FDCAN_RxFifo0Callback+0x37c>)
			  check_motor2=1;
 8004b16:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <HAL_FDCAN_RxFifo0Callback+0x388>)
			  amplitude[1]=uchar4_to_float(RxData);
 8004b18:	ed81 0a01 	vstr	s0, [r1, #4]
			  check_motor2=1;
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
}
 8004b20:	bd38      	pop	{r3, r4, r5, pc}
			  amplitude[0]=uchar4_to_float(RxData);
 8004b22:	481f      	ldr	r0, [pc, #124]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b24:	f000 fd60 	bl	80055e8 <uchar4_to_float>
 8004b28:	4920      	ldr	r1, [pc, #128]	; (8004bac <HAL_FDCAN_RxFifo0Callback+0x37c>)
			  check_motor1=1;
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_FDCAN_RxFifo0Callback+0x38c>)
			  amplitude[0]=uchar4_to_float(RxData);
 8004b2c:	ed81 0a00 	vstr	s0, [r1]
			  check_motor1=1;
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
}
 8004b34:	bd38      	pop	{r3, r4, r5, pc}
			  tempercher[1]=uchar4_to_float(RxData);
 8004b36:	481a      	ldr	r0, [pc, #104]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b38:	f000 fd56 	bl	80055e8 <uchar4_to_float>
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004b3e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
			  tempercher[0]=uchar4_to_float(RxData);
 8004b44:	4816      	ldr	r0, [pc, #88]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b46:	f000 fd4f 	bl	80055e8 <uchar4_to_float>
 8004b4a:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <HAL_FDCAN_RxFifo0Callback+0x384>)
 8004b4c:	ed83 0a00 	vstr	s0, [r3]
}
 8004b50:	bd38      	pop	{r3, r4, r5, pc}
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004b52:	4813      	ldr	r0, [pc, #76]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b54:	f000 fd48 	bl	80055e8 <uchar4_to_float>
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004b58:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004bc0 <HAL_FDCAN_RxFifo0Callback+0x390>
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004b5c:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_FDCAN_RxFifo0Callback+0x394>)
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <HAL_FDCAN_RxFifo0Callback+0x398>)
			  motor_feedback[1]=uchar4_to_float(RxData);
 8004b60:	ed82 0a01 	vstr	s0, [r2, #4]
			  motor_feedback_velocity[1]=motor_feedback[1]*rotation_longth;
 8004b64:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004b68:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004b6c:	bd38      	pop	{r3, r4, r5, pc}
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004b6e:	480c      	ldr	r0, [pc, #48]	; (8004ba0 <HAL_FDCAN_RxFifo0Callback+0x370>)
 8004b70:	f000 fd3a 	bl	80055e8 <uchar4_to_float>
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004b74:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004bc0 <HAL_FDCAN_RxFifo0Callback+0x390>
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004b78:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <HAL_FDCAN_RxFifo0Callback+0x394>)
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <HAL_FDCAN_RxFifo0Callback+0x398>)
			  motor_feedback[0]=uchar4_to_float(RxData);
 8004b7c:	ed82 0a00 	vstr	s0, [r2]
			  motor_feedback_velocity[0]=motor_feedback[0]*rotation_longth;
 8004b80:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004b84:	edc3 7a00 	vstr	s15, [r3]
}
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
			ball[0]=RxData[0];
 8004b8a:	4910      	ldr	r1, [pc, #64]	; (8004bcc <HAL_FDCAN_RxFifo0Callback+0x39c>)
			check_FC=1;
 8004b8c:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <HAL_FDCAN_RxFifo0Callback+0x3a0>)
			ball[0]=RxData[0];
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	6008      	str	r0, [r1, #0]
			check_FC=1;
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
}
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	20000470 	.word	0x20000470
 8004b9c:	200004d4 	.word	0x200004d4
 8004ba0:	200005d4 	.word	0x200005d4
 8004ba4:	200005dc 	.word	0x200005dc
 8004ba8:	200006b8 	.word	0x200006b8
 8004bac:	20000680 	.word	0x20000680
 8004bb0:	2000069d 	.word	0x2000069d
 8004bb4:	20000740 	.word	0x20000740
 8004bb8:	2000069a 	.word	0x2000069a
 8004bbc:	20000699 	.word	0x20000699
 8004bc0:	3e3426c8 	.word	0x3e3426c8
 8004bc4:	20000704 	.word	0x20000704
 8004bc8:	20000718 	.word	0x20000718
 8004bcc:	20000694 	.word	0x20000694
 8004bd0:	20000698 	.word	0x20000698
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004bd4:	482c      	ldr	r0, [pc, #176]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004bd6:	f000 fd07 	bl	80055e8 <uchar4_to_float>
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004bda:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8004c8c <HAL_FDCAN_RxFifo0Callback+0x45c>
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004bde:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <HAL_FDCAN_RxFifo0Callback+0x460>)
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004be0:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <HAL_FDCAN_RxFifo0Callback+0x464>)
					  motor_feedback[2]=uchar4_to_float(RxData);
 8004be2:	ed82 0a02 	vstr	s0, [r2, #8]
					  motor_feedback_velocity[2]=motor_feedback[2]*rotation_longth;
 8004be6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004bea:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
				Power_voltage[4]=uchar4_to_float(RxData);
 8004bf0:	4825      	ldr	r0, [pc, #148]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004bf2:	f000 fcf9 	bl	80055e8 <uchar4_to_float>
 8004bf6:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <HAL_FDCAN_RxFifo0Callback+0x468>)
 8004bf8:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8004bfc:	bd38      	pop	{r3, r4, r5, pc}
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004bfe:	4822      	ldr	r0, [pc, #136]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004c00:	f000 fcf2 	bl	80055e8 <uchar4_to_float>
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004c04:	eddf 7a21 	vldr	s15, [pc, #132]	; 8004c8c <HAL_FDCAN_RxFifo0Callback+0x45c>
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004c08:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <HAL_FDCAN_RxFifo0Callback+0x460>)
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004c0a:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <HAL_FDCAN_RxFifo0Callback+0x464>)
					  motor_feedback[3]=uchar4_to_float(RxData);
 8004c0c:	ed82 0a03 	vstr	s0, [r2, #12]
					  motor_feedback_velocity[3]=motor_feedback[3]*rotation_longth;
 8004c10:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004c14:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004c18:	bd38      	pop	{r3, r4, r5, pc}
				mouse[0]=(RxData[0]<<8)|RxData[1];
 8004c1a:	8822      	ldrh	r2, [r4, #0]
				mouse[1]=(RxData[2]<<8)|RxData[3];
 8004c1c:	8863      	ldrh	r3, [r4, #2]
				mouse[0]=(RxData[0]<<8)|RxData[1];
 8004c1e:	491f      	ldr	r1, [pc, #124]	; (8004c9c <HAL_FDCAN_RxFifo0Callback+0x46c>)
 8004c20:	ba52      	rev16	r2, r2
				mouse[1]=(RxData[2]<<8)|RxData[3];
 8004c22:	ba5b      	rev16	r3, r3
				mouse[0]=(RxData[0]<<8)|RxData[1];
 8004c24:	800a      	strh	r2, [r1, #0]
				mouse[1]=(RxData[2]<<8)|RxData[3];
 8004c26:	804b      	strh	r3, [r1, #2]
}
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
					  amplitude[3]=uchar4_to_float(RxData);
 8004c2a:	4817      	ldr	r0, [pc, #92]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004c2c:	f000 fcdc 	bl	80055e8 <uchar4_to_float>
 8004c30:	491b      	ldr	r1, [pc, #108]	; (8004ca0 <HAL_FDCAN_RxFifo0Callback+0x470>)
					  check_motor4=1;
 8004c32:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <HAL_FDCAN_RxFifo0Callback+0x474>)
					  amplitude[3]=uchar4_to_float(RxData);
 8004c34:	ed81 0a03 	vstr	s0, [r1, #12]
					  check_motor4=1;
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
}
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
					  amplitude[2]=uchar4_to_float(RxData);
 8004c3e:	4812      	ldr	r0, [pc, #72]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004c40:	f000 fcd2 	bl	80055e8 <uchar4_to_float>
 8004c44:	4916      	ldr	r1, [pc, #88]	; (8004ca0 <HAL_FDCAN_RxFifo0Callback+0x470>)
					  check_motor3=1;
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <HAL_FDCAN_RxFifo0Callback+0x478>)
					  amplitude[2]=uchar4_to_float(RxData);
 8004c48:	ed81 0a02 	vstr	s0, [r1, #8]
					  check_motor3=1;
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	701a      	strb	r2, [r3, #0]
}
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
					  tempercher[3]=uchar4_to_float(RxData);
 8004c52:	480d      	ldr	r0, [pc, #52]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004c54:	f000 fcc8 	bl	80055e8 <uchar4_to_float>
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <HAL_FDCAN_RxFifo0Callback+0x47c>)
 8004c5a:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8004c5e:	bd38      	pop	{r3, r4, r5, pc}
					  tempercher[2]=uchar4_to_float(RxData);
 8004c60:	4809      	ldr	r0, [pc, #36]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004c62:	f000 fcc1 	bl	80055e8 <uchar4_to_float>
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <HAL_FDCAN_RxFifo0Callback+0x47c>)
 8004c68:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8004c6c:	bd38      	pop	{r3, r4, r5, pc}
				Power_voltage[5]=uchar4_to_float(RxData);
 8004c6e:	4806      	ldr	r0, [pc, #24]	; (8004c88 <HAL_FDCAN_RxFifo0Callback+0x458>)
 8004c70:	f000 fcba 	bl	80055e8 <uchar4_to_float>
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_FDCAN_RxFifo0Callback+0x468>)
 8004c76:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
				error_No[0]=RxData[0];
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <HAL_FDCAN_RxFifo0Callback+0x480>)
 8004c7e:	8822      	ldrh	r2, [r4, #0]
 8004c80:	801a      	strh	r2, [r3, #0]
				Error_Handler();
 8004c82:	f7ff fc4f 	bl	8004524 <Error_Handler>
 8004c86:	bf00      	nop
 8004c88:	200005d4 	.word	0x200005d4
 8004c8c:	3e3426c8 	.word	0x3e3426c8
 8004c90:	20000704 	.word	0x20000704
 8004c94:	20000718 	.word	0x20000718
 8004c98:	200005bc 	.word	0x200005bc
 8004c9c:	2000072c 	.word	0x2000072c
 8004ca0:	20000680 	.word	0x20000680
 8004ca4:	2000069c 	.word	0x2000069c
 8004ca8:	2000069b 	.word	0x2000069b
 8004cac:	20000740 	.word	0x20000740
 8004cb0:	200006b8 	.word	0x200006b8

08004cb4 <delayUs>:
cycle_cnt = SysTick->VAL;
} while (ms != HAL_GetTick());
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
}

void delayUs(uint16_t micros) {
 8004cb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4682      	mov	sl, r0
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004cba:	f002 fce9 	bl	8007690 <HAL_RCC_GetSysClockFreq>
 8004cbe:	4e1c      	ldr	r6, [pc, #112]	; (8004d30 <delayUs+0x7c>)
 8004cc0:	fba6 3600 	umull	r3, r6, r6, r0
 8004cc4:	0cb6      	lsrs	r6, r6, #18
cycle_cnt = SysTick->VAL;
 8004cc6:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
ms = HAL_GetTick();
 8004cca:	f7fe f877 	bl	8002dbc <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8004cce:	69ac      	ldr	r4, [r5, #24]
ms = HAL_GetTick();
 8004cd0:	4681      	mov	r9, r0
} while (ms != HAL_GetTick());
 8004cd2:	f7fe f873 	bl	8002dbc <HAL_GetTick>
 8004cd6:	4581      	cmp	r9, r0
 8004cd8:	d1f7      	bne.n	8004cca <delayUs+0x16>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004cda:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8004cde:	fb08 f306 	mul.w	r3, r8, r6
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004ce2:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8004d30 <delayUs+0x7c>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004ce6:	1b1c      	subs	r4, r3, r4
 8004ce8:	fbb4 f6f6 	udiv	r6, r4, r6
 8004cec:	fb08 6909 	mla	r9, r8, r9, r6
cycle_cnt = SysTick->VAL;
 8004cf0:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 8004cf4:	f002 fccc 	bl	8007690 <HAL_RCC_GetSysClockFreq>
 8004cf8:	fbab 3700 	umull	r3, r7, fp, r0
 8004cfc:	0cbf      	lsrs	r7, r7, #18
ms = HAL_GetTick();
 8004cfe:	f7fe f85d 	bl	8002dbc <HAL_GetTick>
cycle_cnt = SysTick->VAL;
 8004d02:	69b5      	ldr	r5, [r6, #24]
ms = HAL_GetTick();
 8004d04:	4604      	mov	r4, r0
} while (ms != HAL_GetTick());
 8004d06:	f7fe f859 	bl	8002dbc <HAL_GetTick>
 8004d0a:	4284      	cmp	r4, r0
 8004d0c:	d1f7      	bne.n	8004cfe <delayUs+0x4a>
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004d0e:	fb08 f404 	mul.w	r4, r8, r4
 8004d12:	fb08 f307 	mul.w	r3, r8, r7
uint32_t start = getUs();
while (getUs()-start < (uint32_t) micros) {
 8004d16:	eba4 0409 	sub.w	r4, r4, r9
return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 8004d1a:	1b5d      	subs	r5, r3, r5
 8004d1c:	fbb5 f7f7 	udiv	r7, r5, r7
while (getUs()-start < (uint32_t) micros) {
 8004d20:	443c      	add	r4, r7
 8004d22:	4554      	cmp	r4, sl
 8004d24:	d201      	bcs.n	8004d2a <delayUs+0x76>
	asm("nop");
 8004d26:	bf00      	nop
 8004d28:	e7e4      	b.n	8004cf4 <delayUs+0x40>
}
}
 8004d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop
 8004d30:	431bde83 	.word	0x431bde83
 8004d34:	00000000 	.word	0x00000000

08004d38 <omni_move>:
const float32_t cosM1 = cos(    M_PI/6.0);
const float32_t cosM2 = cos(7.0*M_PI/4.0);
const float32_t cosM3 = cos(5.0*M_PI/4.0);
const float32_t cosM4 = cos(5.0*M_PI/6.0);

void omni_move(float32_t vel_y_omni,float32_t vel_x_omni,float32_t omega_omni,float32_t duty_Limit){
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	ee11 0a10 	vmov	r0, s2
 8004d3e:	ed2d 8b04 	vpush	{d8-d9}
 8004d42:	eef0 8a61 	vmov.f32	s17, s3
 8004d46:	eeb0 9a40 	vmov.f32	s18, s0
 8004d4a:	eeb0 8a60 	vmov.f32	s16, s1
	v_round=robot_radius*omega_omni;
 8004d4e:	f7fb fc23 	bl	8000598 <__aeabi_f2d>
 8004d52:	a339      	add	r3, pc, #228	; (adr r3, 8004e38 <omni_move+0x100>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fc76 	bl	8000648 <__aeabi_dmul>
 8004d5c:	f7fb ff6c 	bl	8000c38 <__aeabi_d2f>

	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004d60:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004e10 <omni_move+0xd8>
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004d64:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004e14 <omni_move+0xdc>
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004d68:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004e18 <omni_move+0xe0>
 8004d6c:	eddf 4a2b 	vldr	s9, [pc, #172]	; 8004e1c <omni_move+0xe4>
	v_round=robot_radius*omega_omni;
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <omni_move+0xe8>)
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004d72:	4e2c      	ldr	r6, [pc, #176]	; (8004e24 <omni_move+0xec>)
	v_round=robot_radius*omega_omni;
 8004d74:	6018      	str	r0, [r3, #0]
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004d76:	ee69 7a27 	vmul.f32	s15, s18, s15
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004d7a:	ee69 6a26 	vmul.f32	s13, s18, s13
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004d7e:	ee29 7a07 	vmul.f32	s14, s18, s14
 8004d82:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8004d86:	eee8 6a24 	vfma.f32	s13, s16, s9
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004d8a:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <omni_move+0xf0>)
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004d8c:	4d27      	ldr	r5, [pc, #156]	; (8004e2c <omni_move+0xf4>)
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004d8e:	4c28      	ldr	r4, [pc, #160]	; (8004e30 <omni_move+0xf8>)
 8004d90:	eee8 7a25 	vfma.f32	s15, s16, s11
 8004d94:	eea8 7a25 	vfma.f32	s14, s16, s11
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004d98:	ee05 0a10 	vmov	s10, r0
 8004d9c:	ee38 8a09 	vadd.f32	s16, s16, s18
	v_round=robot_radius*omega_omni;
 8004da0:	ee06 0a10 	vmov	s12, r0
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004da4:	eea8 5a24 	vfma.f32	s10, s16, s9
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004da8:	eddf 5a22 	vldr	s11, [pc, #136]	; 8004e34 <omni_move+0xfc>
 8004dac:	ee36 0a27 	vadd.f32	s0, s12, s15
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004db0:	ee76 6a26 	vadd.f32	s13, s12, s13
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004db4:	ee76 7a07 	vadd.f32	s15, s12, s14
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004db8:	ee20 0a25 	vmul.f32	s0, s0, s11
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004dbc:	ee26 7aa5 	vmul.f32	s14, s13, s11
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004dc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004dc4:	ee65 6a25 	vmul.f32	s13, s10, s11

	actuator_motor1(m1,duty_Limit);
 8004dc8:	eef0 0a68 	vmov.f32	s1, s17
	m2=((vel_x_omni*sinM2)+(vel_y_omni*cosM2)+v_round)/rotation_length_omni*gear_ratio;
 8004dcc:	ed86 7a00 	vstr	s14, [r6]
	m1=((vel_x_omni*sinM1)+(vel_y_omni*cosM1)+v_round)/rotation_length_omni*gear_ratio;
 8004dd0:	ed83 0a00 	vstr	s0, [r3]
	m3=((vel_x_omni*sinM3)+(vel_y_omni*cosM3)+v_round)/rotation_length_omni*gear_ratio;
 8004dd4:	edc5 6a00 	vstr	s13, [r5]
	m4=((vel_x_omni*sinM4)+(vel_y_omni*cosM4)+v_round)/rotation_length_omni*gear_ratio;
 8004dd8:	edc4 7a00 	vstr	s15, [r4]
	actuator_motor1(m1,duty_Limit);
 8004ddc:	f7fc f8fe 	bl	8000fdc <actuator_motor1>
	actuator_motor2(m2,duty_Limit);
 8004de0:	ed96 0a00 	vldr	s0, [r6]
 8004de4:	eef0 0a68 	vmov.f32	s1, s17
 8004de8:	f7fc f914 	bl	8001014 <actuator_motor2>
	actuator_motor3(m3,duty_Limit);
 8004dec:	ed95 0a00 	vldr	s0, [r5]
 8004df0:	eef0 0a68 	vmov.f32	s1, s17
 8004df4:	f7fc f92a 	bl	800104c <actuator_motor3>
	actuator_motor4(m4,duty_Limit);
 8004df8:	eef0 0a68 	vmov.f32	s1, s17

		cnt_motor=0;
		stall=0;
	}*/

}
 8004dfc:	ecbd 8b04 	vpop	{d8-d9}
	actuator_motor4(m4,duty_Limit);
 8004e00:	ed94 0a00 	vldr	s0, [r4]
}
 8004e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	actuator_motor4(m4,duty_Limit);
 8004e08:	f7fc b93c 	b.w	8001084 <actuator_motor4>
 8004e0c:	f3af 8000 	nop.w
 8004e10:	3f5db3d7 	.word	0x3f5db3d7
 8004e14:	3f3504f3 	.word	0x3f3504f3
 8004e18:	bf5db3d7 	.word	0xbf5db3d7
 8004e1c:	bf3504f3 	.word	0xbf3504f3
 8004e20:	20000760 	.word	0x20000760
 8004e24:	200006f8 	.word	0x200006f8
 8004e28:	200006f4 	.word	0x200006f4
 8004e2c:	200006fc 	.word	0x200006fc
 8004e30:	20000700 	.word	0x20000700
 8004e34:	40b5e430 	.word	0x40b5e430
 8004e38:	47ae147b 	.word	0x47ae147b
 8004e3c:	3fb47ae1 	.word	0x3fb47ae1

08004e40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004e40:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004e42:	4811      	ldr	r0, [pc, #68]	; (8004e88 <MX_SPI1_Init+0x48>)
 8004e44:	4c11      	ldr	r4, [pc, #68]	; (8004e8c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e46:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e4a:	2300      	movs	r3, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e4c:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e50:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e54:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e58:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004e5c:	2430      	movs	r4, #48	; 0x30
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e5e:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8004e60:	2107      	movs	r1, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004e62:	2208      	movs	r2, #8
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e64:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e68:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e6c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004e70:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004e74:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e76:	f003 f817 	bl	8007ea8 <HAL_SPI_Init>
 8004e7a:	b900      	cbnz	r0, 8004e7e <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004e82:	f7ff bb4f 	b.w	8004524 <Error_Handler>
 8004e86:	bf00      	nop
 8004e88:	20000774 	.word	0x20000774
 8004e8c:	40013000 	.word	0x40013000

08004e90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e90:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8004e92:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <HAL_SPI_MspInit+0x70>)
 8004e94:	6801      	ldr	r1, [r0, #0]
{
 8004e96:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e98:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8004e9a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ea0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004ea4:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004ea8:	b009      	add	sp, #36	; 0x24
 8004eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004eae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004eb2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004eb6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8004ef8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004eba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ebc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ec0:	661a      	str	r2, [r3, #96]	; 0x60
 8004ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ec4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004ec8:	9200      	str	r2, [sp, #0]
 8004eca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ecc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004edc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ede:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004ee4:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee8:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004eea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eec:	f001 ffe4 	bl	8006eb8 <HAL_GPIO_Init>
}
 8004ef0:	b009      	add	sp, #36	; 0x24
 8004ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ef6:	bf00      	nop
 8004ef8:	000000e0 	.word	0x000000e0
 8004efc:	00000002 	.word	0x00000002
 8004f00:	40013000 	.word	0x40013000

08004f04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_MspInit+0x30>)
 8004f06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	661a      	str	r2, [r3, #96]	; 0x60
 8004f0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004f10:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	f002 0201 	and.w	r2, r2, #1
 8004f16:	9200      	str	r2, [sp, #0]
 8004f18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f20:	659a      	str	r2, [r3, #88]	; 0x58
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f2c:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f2e:	f002 b95b 	b.w	80071e8 <HAL_PWREx_DisableUCPDDeadBattery>
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000

08004f38 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop

08004f3c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f3c:	e7fe      	b.n	8004f3c <HardFault_Handler>
 8004f3e:	bf00      	nop

08004f40 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f40:	e7fe      	b.n	8004f40 <MemManage_Handler>
 8004f42:	bf00      	nop

08004f44 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f44:	e7fe      	b.n	8004f44 <BusFault_Handler>
 8004f46:	bf00      	nop

08004f48 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f48:	e7fe      	b.n	8004f48 <UsageFault_Handler>
 8004f4a:	bf00      	nop

08004f4c <SVC_Handler>:
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop

08004f50 <DebugMon_Handler>:
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop

08004f54 <PendSV_Handler>:
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop

08004f58 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f58:	f000 bbde 	b.w	8005718 <HAL_IncTick>

08004f5c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <DMA1_Channel1_IRQHandler+0x8>)
 8004f5e:	f001 bb5d 	b.w	800661c <HAL_DMA_IRQHandler>
 8004f62:	bf00      	nop
 8004f64:	20000874 	.word	0x20000874

08004f68 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <DMA1_Channel2_IRQHandler+0x8>)
 8004f6a:	f001 bb57 	b.w	800661c <HAL_DMA_IRQHandler>
 8004f6e:	bf00      	nop
 8004f70:	200008d4 	.word	0x200008d4

08004f74 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <DMA1_Channel3_IRQHandler+0x8>)
 8004f76:	f001 bb51 	b.w	800661c <HAL_DMA_IRQHandler>
 8004f7a:	bf00      	nop
 8004f7c:	200003ac 	.word	0x200003ac

08004f80 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <DMA1_Channel4_IRQHandler+0x8>)
 8004f82:	f001 bb4b 	b.w	800661c <HAL_DMA_IRQHandler>
 8004f86:	bf00      	nop
 8004f88:	2000040c 	.word	0x2000040c

08004f8c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f8c:	4801      	ldr	r0, [pc, #4]	; (8004f94 <DMA1_Channel5_IRQHandler+0x8>)
 8004f8e:	f001 bb45 	b.w	800661c <HAL_DMA_IRQHandler>
 8004f92:	bf00      	nop
 8004f94:	2000034c 	.word	0x2000034c

08004f98 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004f98:	4801      	ldr	r0, [pc, #4]	; (8004fa0 <FDCAN1_IT0_IRQHandler+0x8>)
 8004f9a:	f001 bec9 	b.w	8006d30 <HAL_FDCAN_IRQHandler>
 8004f9e:	bf00      	nop
 8004fa0:	20000470 	.word	0x20000470

08004fa4 <FDCAN1_IT1_IRQHandler>:
 8004fa4:	4801      	ldr	r0, [pc, #4]	; (8004fac <FDCAN1_IT1_IRQHandler+0x8>)
 8004fa6:	f001 bec3 	b.w	8006d30 <HAL_FDCAN_IRQHandler>
 8004faa:	bf00      	nop
 8004fac:	20000470 	.word	0x20000470

08004fb0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ESTOP_Pin);
 8004fb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004fb4:	f002 b88e 	b.w	80070d4 <HAL_GPIO_EXTI_IRQHandler>

08004fb8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <USART2_IRQHandler+0x8>)
 8004fba:	f003 bfb5 	b.w	8008f28 <HAL_UART_IRQHandler>
 8004fbe:	bf00      	nop
 8004fc0:	200009c8 	.word	0x200009c8

08004fc4 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <TIM7_DAC_IRQHandler+0x8>)
 8004fc6:	f003 bc77 	b.w	80088b8 <HAL_TIM_IRQHandler>
 8004fca:	bf00      	nop
 8004fcc:	20000828 	.word	0x20000828

08004fd0 <FDCAN2_IT0_IRQHandler>:
void FDCAN2_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <FDCAN2_IT0_IRQHandler+0x8>)
 8004fd2:	f001 bead 	b.w	8006d30 <HAL_FDCAN_IRQHandler>
 8004fd6:	bf00      	nop
 8004fd8:	200004d4 	.word	0x200004d4

08004fdc <FDCAN2_IT1_IRQHandler>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <FDCAN2_IT1_IRQHandler+0x8>)
 8004fde:	f001 bea7 	b.w	8006d30 <HAL_FDCAN_IRQHandler>
 8004fe2:	bf00      	nop
 8004fe4:	200004d4 	.word	0x200004d4

08004fe8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004fe8:	2001      	movs	r0, #1
 8004fea:	4770      	bx	lr

08004fec <_kill>:

int _kill(int pid, int sig)
{
 8004fec:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004fee:	f004 fe61 	bl	8009cb4 <__errno>
 8004ff2:	2316      	movs	r3, #22
 8004ff4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	bd08      	pop	{r3, pc}

08004ffc <_exit>:

void _exit (int status)
{
 8004ffc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004ffe:	f004 fe59 	bl	8009cb4 <__errno>
 8005002:	2316      	movs	r3, #22
 8005004:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8005006:	e7fe      	b.n	8005006 <_exit+0xa>

08005008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005008:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800500a:	1e16      	subs	r6, r2, #0
 800500c:	dd07      	ble.n	800501e <_read+0x16>
 800500e:	460c      	mov	r4, r1
 8005010:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8005012:	f3af 8000 	nop.w
 8005016:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800501a:	42a5      	cmp	r5, r4
 800501c:	d1f9      	bne.n	8005012 <_read+0xa>
	}

return len;
}
 800501e:	4630      	mov	r0, r6
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	bf00      	nop

08005024 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005024:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005026:	1e16      	subs	r6, r2, #0
 8005028:	dd07      	ble.n	800503a <_write+0x16>
 800502a:	460c      	mov	r4, r1
 800502c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800502e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005032:	f7fd feb1 	bl	8002d98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005036:	42ac      	cmp	r4, r5
 8005038:	d1f9      	bne.n	800502e <_write+0xa>
	}
	return len;
}
 800503a:	4630      	mov	r0, r6
 800503c:	bd70      	pop	{r4, r5, r6, pc}
 800503e:	bf00      	nop

08005040 <_close>:

int _close(int file)
{
	return -1;
}
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop

08005048 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800504c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800504e:	2000      	movs	r0, #0
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop

08005054 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005054:	2001      	movs	r0, #1
 8005056:	4770      	bx	lr

08005058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005058:	2000      	movs	r0, #0
 800505a:	4770      	bx	lr

0800505c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800505c:	4a0b      	ldr	r2, [pc, #44]	; (800508c <_sbrk+0x30>)
{
 800505e:	b508      	push	{r3, lr}
 8005060:	4603      	mov	r3, r0
	if (heap_end == 0)
 8005062:	6810      	ldr	r0, [r2, #0]
 8005064:	b128      	cbz	r0, 8005072 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005066:	4403      	add	r3, r0
 8005068:	4669      	mov	r1, sp
 800506a:	428b      	cmp	r3, r1
 800506c:	d807      	bhi.n	800507e <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800506e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005070:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005072:	4807      	ldr	r0, [pc, #28]	; (8005090 <_sbrk+0x34>)
 8005074:	6010      	str	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005076:	4403      	add	r3, r0
 8005078:	4669      	mov	r1, sp
 800507a:	428b      	cmp	r3, r1
 800507c:	d9f7      	bls.n	800506e <_sbrk+0x12>
		errno = ENOMEM;
 800507e:	f004 fe19 	bl	8009cb4 <__errno>
 8005082:	230c      	movs	r3, #12
 8005084:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005086:	f04f 30ff 	mov.w	r0, #4294967295
}
 800508a:	bd08      	pop	{r3, pc}
 800508c:	200007d8 	.word	0x200007d8
 8005090:	20000b00 	.word	0x20000b00

08005094 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <SystemInit+0x18>)
 8005096:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800509a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800509e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80050a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050a6:	6099      	str	r1, [r3, #8]
#endif
}
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80050b0:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80050b2:	4c33      	ldr	r4, [pc, #204]	; (8005180 <MX_TIM5_Init+0xd0>)
 80050b4:	4a33      	ldr	r2, [pc, #204]	; (8005184 <MX_TIM5_Init+0xd4>)
 80050b6:	6022      	str	r2, [r4, #0]
{
 80050b8:	b092      	sub	sp, #72	; 0x48
  htim5.Init.Prescaler = 170;
 80050ba:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050bc:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 170;
 80050be:	6062      	str	r2, [r4, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 500;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80050c0:	4620      	mov	r0, r4
  htim5.Init.Period = 500;
 80050c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050c6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80050ce:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80050d2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim5.Init.Period = 500;
 80050d6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050da:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050dc:	9310      	str	r3, [sp, #64]	; 0x40
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050de:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050e0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80050e2:	f003 faa9 	bl	8008638 <HAL_TIM_PWM_Init>
 80050e6:	bb00      	cbnz	r0, 800512a <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e8:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050ea:	4825      	ldr	r0, [pc, #148]	; (8005180 <MX_TIM5_Init+0xd0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ec:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050ee:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050f0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050f2:	f003 fe33 	bl	8008d5c <HAL_TIMEx_MasterConfigSynchronization>
 80050f6:	b9f0      	cbnz	r0, 8005136 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050f8:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8005170 <MX_TIM5_Init+0xc0>
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050fc:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80050fe:	4820      	ldr	r0, [pc, #128]	; (8005180 <MX_TIM5_Init+0xd0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005100:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005102:	2204      	movs	r2, #4
 8005104:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005106:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800510a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800510c:	f003 fd20 	bl	8008b50 <HAL_TIM_PWM_ConfigChannel>
 8005110:	b970      	cbnz	r0, 8005130 <MX_TIM5_Init+0x80>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <MX_TIM5_Init+0xd4>)
 8005114:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005116:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8005118:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800511a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800511e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005122:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM5)
 8005124:	d00a      	beq.n	800513c <MX_TIM5_Init+0x8c>
}
 8005126:	b012      	add	sp, #72	; 0x48
 8005128:	bd10      	pop	{r4, pc}
    Error_Handler();
 800512a:	f7ff f9fb 	bl	8004524 <Error_Handler>
 800512e:	e7db      	b.n	80050e8 <MX_TIM5_Init+0x38>
    Error_Handler();
 8005130:	f7ff f9f8 	bl	8004524 <Error_Handler>
 8005134:	e7ed      	b.n	8005112 <MX_TIM5_Init+0x62>
    Error_Handler();
 8005136:	f7ff f9f5 	bl	8004524 <Error_Handler>
 800513a:	e7dd      	b.n	80050f8 <MX_TIM5_Init+0x48>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800513c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005140:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM5 GPIO Configuration
    PC12     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 8005144:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8005178 <MX_TIM5_Init+0xc8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800514a:	480f      	ldr	r0, [pc, #60]	; (8005188 <MX_TIM5_Init+0xd8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800514c:	f042 0204 	orr.w	r2, r2, #4
 8005150:	64da      	str	r2, [r3, #76]	; 0x4c
 8005152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 800515a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800515c:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = TIM5_CH2_Buzzer_Pin;
 800515e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005162:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8005164:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(TIM5_CH2_Buzzer_GPIO_Port, &GPIO_InitStruct);
 8005166:	f001 fea7 	bl	8006eb8 <HAL_GPIO_Init>
}
 800516a:	b012      	add	sp, #72	; 0x48
 800516c:	bd10      	pop	{r4, pc}
 800516e:	bf00      	nop
 8005170:	00000060 	.word	0x00000060
 8005174:	00000000 	.word	0x00000000
 8005178:	00001000 	.word	0x00001000
 800517c:	00000002 	.word	0x00000002
 8005180:	200007dc 	.word	0x200007dc
 8005184:	40000c00 	.word	0x40000c00
 8005188:	48000800 	.word	0x48000800

0800518c <MX_TIM7_Init>:
{
 800518c:	b500      	push	{lr}
  htim7.Instance = TIM7;
 800518e:	4812      	ldr	r0, [pc, #72]	; (80051d8 <MX_TIM7_Init+0x4c>)
 8005190:	4912      	ldr	r1, [pc, #72]	; (80051dc <MX_TIM7_Init+0x50>)
{
 8005192:	b085      	sub	sp, #20
  htim7.Init.Prescaler = 170;
 8005194:	22aa      	movs	r2, #170	; 0xaa
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005196:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 170;
 8005198:	e9c0 1200 	strd	r1, r2, [r0]
  htim7.Init.Period = 1000;
 800519c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim7.Init.Period = 1000;
 80051a4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a8:	9303      	str	r3, [sp, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051aa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80051ac:	f003 f968 	bl	8008480 <HAL_TIM_Base_Init>
 80051b0:	b950      	cbnz	r0, 80051c8 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051b2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051b4:	4808      	ldr	r0, [pc, #32]	; (80051d8 <MX_TIM7_Init+0x4c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051b6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051b8:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051ba:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80051bc:	f003 fdce 	bl	8008d5c <HAL_TIMEx_MasterConfigSynchronization>
 80051c0:	b928      	cbnz	r0, 80051ce <MX_TIM7_Init+0x42>
}
 80051c2:	b005      	add	sp, #20
 80051c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80051c8:	f7ff f9ac 	bl	8004524 <Error_Handler>
 80051cc:	e7f1      	b.n	80051b2 <MX_TIM7_Init+0x26>
    Error_Handler();
 80051ce:	f7ff f9a9 	bl	8004524 <Error_Handler>
}
 80051d2:	b005      	add	sp, #20
 80051d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80051d8:	20000828 	.word	0x20000828
 80051dc:	40001400 	.word	0x40001400

080051e0 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM5)
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_TIM_PWM_MspInit+0x28>)
 80051e2:	6802      	ldr	r2, [r0, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d000      	beq.n	80051ea <HAL_TIM_PWM_MspInit+0xa>
 80051e8:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 80051ea:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
{
 80051ee:	b082      	sub	sp, #8
    __HAL_RCC_TIM5_CLK_ENABLE();
 80051f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051f2:	f042 0208 	orr.w	r2, r2, #8
 80051f6:	659a      	str	r2, [r3, #88]	; 0x58
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	9b01      	ldr	r3, [sp, #4]
}
 8005202:	b002      	add	sp, #8
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40000c00 	.word	0x40000c00

0800520c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM7)
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <HAL_TIM_Base_MspInit+0x3c>)
 800520e:	6802      	ldr	r2, [r0, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d000      	beq.n	8005216 <HAL_TIM_Base_MspInit+0xa>
 8005214:	4770      	bx	lr
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005216:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
{
 800521a:	b500      	push	{lr}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800521c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800521e:	f041 0120 	orr.w	r1, r1, #32
 8005222:	6599      	str	r1, [r3, #88]	; 0x58
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 8005226:	b083      	sub	sp, #12
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 800522e:	2037      	movs	r0, #55	; 0x37
 8005230:	2200      	movs	r2, #0
 8005232:	2108      	movs	r1, #8
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005234:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 8, 0);
 8005236:	f001 f823 	bl	8006280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800523a:	2037      	movs	r0, #55	; 0x37
}
 800523c:	b003      	add	sp, #12
 800523e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8005242:	f001 b85b 	b.w	80062fc <HAL_NVIC_EnableIRQ>
 8005246:	bf00      	nop
 8005248:	40001400 	.word	0x40001400
 800524c:	00000000 	.word	0x00000000

08005250 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005250:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80052d8 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 8005254:	4822      	ldr	r0, [pc, #136]	; (80052e0 <MX_LPUART1_UART_Init+0x90>)
 8005256:	4923      	ldr	r1, [pc, #140]	; (80052e4 <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.BaudRate = 2000000;
 8005258:	4a23      	ldr	r2, [pc, #140]	; (80052e8 <MX_LPUART1_UART_Init+0x98>)
{
 800525a:	b510      	push	{r4, lr}
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800525c:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 2000000;
 800525e:	e9c0 1200 	strd	r1, r2, [r0]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005262:	240c      	movs	r4, #12
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005264:	2120      	movs	r1, #32
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800526a:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800526e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005272:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005276:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8005278:	6281      	str	r1, [r0, #40]	; 0x28
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800527a:	6402      	str	r2, [r0, #64]	; 0x40
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800527c:	f004 fb88 	bl	8009990 <HAL_UART_Init>
 8005280:	b970      	cbnz	r0, 80052a0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005282:	4817      	ldr	r0, [pc, #92]	; (80052e0 <MX_LPUART1_UART_Init+0x90>)
 8005284:	2100      	movs	r1, #0
 8005286:	f004 fc91 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 800528a:	b988      	cbnz	r0, 80052b0 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800528c:	4814      	ldr	r0, [pc, #80]	; (80052e0 <MX_LPUART1_UART_Init+0x90>)
 800528e:	2100      	movs	r1, #0
 8005290:	f004 fcce 	bl	8009c30 <HAL_UARTEx_SetRxFifoThreshold>
 8005294:	b9a0      	cbnz	r0, 80052c0 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005296:	4812      	ldr	r0, [pc, #72]	; (80052e0 <MX_LPUART1_UART_Init+0x90>)
 8005298:	f004 fc6a 	bl	8009b70 <HAL_UARTEx_DisableFifoMode>
 800529c:	b9b8      	cbnz	r0, 80052ce <MX_LPUART1_UART_Init+0x7e>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800529e:	bd10      	pop	{r4, pc}
    Error_Handler();
 80052a0:	f7ff f940 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80052a4:	480e      	ldr	r0, [pc, #56]	; (80052e0 <MX_LPUART1_UART_Init+0x90>)
 80052a6:	2100      	movs	r1, #0
 80052a8:	f004 fc80 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d0ed      	beq.n	800528c <MX_LPUART1_UART_Init+0x3c>
    Error_Handler();
 80052b0:	f7ff f938 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80052b4:	480a      	ldr	r0, [pc, #40]	; (80052e0 <MX_LPUART1_UART_Init+0x90>)
 80052b6:	2100      	movs	r1, #0
 80052b8:	f004 fcba 	bl	8009c30 <HAL_UARTEx_SetRxFifoThreshold>
 80052bc:	2800      	cmp	r0, #0
 80052be:	d0ea      	beq.n	8005296 <MX_LPUART1_UART_Init+0x46>
    Error_Handler();
 80052c0:	f7ff f930 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80052c4:	4806      	ldr	r0, [pc, #24]	; (80052e0 <MX_LPUART1_UART_Init+0x90>)
 80052c6:	f004 fc53 	bl	8009b70 <HAL_UARTEx_DisableFifoMode>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d0e7      	beq.n	800529e <MX_LPUART1_UART_Init+0x4e>
}
 80052ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80052d2:	f7ff b927 	b.w	8004524 <Error_Handler>
 80052d6:	bf00      	nop
	...
 80052e0:	20000938 	.word	0x20000938
 80052e4:	40008000 	.word	0x40008000
 80052e8:	001e8480 	.word	0x001e8480

080052ec <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80052ec:	4821      	ldr	r0, [pc, #132]	; (8005374 <MX_USART2_UART_Init+0x88>)
 80052ee:	4922      	ldr	r1, [pc, #136]	; (8005378 <MX_USART2_UART_Init+0x8c>)
  huart2.Init.BaudRate = 921600;
 80052f0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
{
 80052f4:	b510      	push	{r4, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052f6:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 921600;
 80052f8:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052fc:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80052fe:	2108      	movs	r1, #8
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005300:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005304:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005308:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800530c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005310:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005314:	6281      	str	r1, [r0, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005316:	6382      	str	r2, [r0, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005318:	f004 fb3a 	bl	8009990 <HAL_UART_Init>
 800531c:	b970      	cbnz	r0, 800533c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800531e:	4815      	ldr	r0, [pc, #84]	; (8005374 <MX_USART2_UART_Init+0x88>)
 8005320:	2100      	movs	r1, #0
 8005322:	f004 fc43 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 8005326:	b988      	cbnz	r0, 800534c <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005328:	4812      	ldr	r0, [pc, #72]	; (8005374 <MX_USART2_UART_Init+0x88>)
 800532a:	2100      	movs	r1, #0
 800532c:	f004 fc80 	bl	8009c30 <HAL_UARTEx_SetRxFifoThreshold>
 8005330:	b9a0      	cbnz	r0, 800535c <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005332:	4810      	ldr	r0, [pc, #64]	; (8005374 <MX_USART2_UART_Init+0x88>)
 8005334:	f004 fc1c 	bl	8009b70 <HAL_UARTEx_DisableFifoMode>
 8005338:	b9b8      	cbnz	r0, 800536a <MX_USART2_UART_Init+0x7e>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800533a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800533c:	f7ff f8f2 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005340:	480c      	ldr	r0, [pc, #48]	; (8005374 <MX_USART2_UART_Init+0x88>)
 8005342:	2100      	movs	r1, #0
 8005344:	f004 fc32 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 8005348:	2800      	cmp	r0, #0
 800534a:	d0ed      	beq.n	8005328 <MX_USART2_UART_Init+0x3c>
    Error_Handler();
 800534c:	f7ff f8ea 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005350:	4808      	ldr	r0, [pc, #32]	; (8005374 <MX_USART2_UART_Init+0x88>)
 8005352:	2100      	movs	r1, #0
 8005354:	f004 fc6c 	bl	8009c30 <HAL_UARTEx_SetRxFifoThreshold>
 8005358:	2800      	cmp	r0, #0
 800535a:	d0ea      	beq.n	8005332 <MX_USART2_UART_Init+0x46>
    Error_Handler();
 800535c:	f7ff f8e2 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005360:	4804      	ldr	r0, [pc, #16]	; (8005374 <MX_USART2_UART_Init+0x88>)
 8005362:	f004 fc05 	bl	8009b70 <HAL_UARTEx_DisableFifoMode>
 8005366:	2800      	cmp	r0, #0
 8005368:	d0e7      	beq.n	800533a <MX_USART2_UART_Init+0x4e>
}
 800536a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800536e:	f7ff b8d9 	b.w	8004524 <Error_Handler>
 8005372:	bf00      	nop
 8005374:	200009c8 	.word	0x200009c8
 8005378:	40004400 	.word	0x40004400

0800537c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800537c:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800537e:	481f      	ldr	r0, [pc, #124]	; (80053fc <MX_USART3_UART_Init+0x80>)
 8005380:	4c1f      	ldr	r4, [pc, #124]	; (8005400 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005382:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8005384:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005388:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 800538a:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800538e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005392:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005396:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800539a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800539e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80053a0:	f004 faf6 	bl	8009990 <HAL_UART_Init>
 80053a4:	b970      	cbnz	r0, 80053c4 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053a6:	4815      	ldr	r0, [pc, #84]	; (80053fc <MX_USART3_UART_Init+0x80>)
 80053a8:	2100      	movs	r1, #0
 80053aa:	f004 fbff 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 80053ae:	b988      	cbnz	r0, 80053d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053b0:	4812      	ldr	r0, [pc, #72]	; (80053fc <MX_USART3_UART_Init+0x80>)
 80053b2:	2100      	movs	r1, #0
 80053b4:	f004 fc3c 	bl	8009c30 <HAL_UARTEx_SetRxFifoThreshold>
 80053b8:	b9a0      	cbnz	r0, 80053e4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80053ba:	4810      	ldr	r0, [pc, #64]	; (80053fc <MX_USART3_UART_Init+0x80>)
 80053bc:	f004 fbd8 	bl	8009b70 <HAL_UARTEx_DisableFifoMode>
 80053c0:	b9b8      	cbnz	r0, 80053f2 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80053c2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80053c4:	f7ff f8ae 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053c8:	480c      	ldr	r0, [pc, #48]	; (80053fc <MX_USART3_UART_Init+0x80>)
 80053ca:	2100      	movs	r1, #0
 80053cc:	f004 fbee 	bl	8009bac <HAL_UARTEx_SetTxFifoThreshold>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d0ed      	beq.n	80053b0 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 80053d4:	f7ff f8a6 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053d8:	4808      	ldr	r0, [pc, #32]	; (80053fc <MX_USART3_UART_Init+0x80>)
 80053da:	2100      	movs	r1, #0
 80053dc:	f004 fc28 	bl	8009c30 <HAL_UARTEx_SetRxFifoThreshold>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d0ea      	beq.n	80053ba <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 80053e4:	f7ff f89e 	bl	8004524 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80053e8:	4804      	ldr	r0, [pc, #16]	; (80053fc <MX_USART3_UART_Init+0x80>)
 80053ea:	f004 fbc1 	bl	8009b70 <HAL_UARTEx_DisableFifoMode>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d0e7      	beq.n	80053c2 <MX_USART3_UART_Init+0x46>
}
 80053f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80053f6:	f7ff b895 	b.w	8004524 <Error_Handler>
 80053fa:	bf00      	nop
 80053fc:	20000a58 	.word	0x20000a58
 8005400:	40004800 	.word	0x40004800

08005404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005404:	b530      	push	{r4, r5, lr}
 8005406:	4604      	mov	r4, r0
 8005408:	b0a1      	sub	sp, #132	; 0x84

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800540c:	2254      	movs	r2, #84	; 0x54
 800540e:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005410:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8005414:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8005418:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800541a:	f004 fc75 	bl	8009d08 <memset>
  if(uartHandle->Instance==LPUART1)
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	4a67      	ldr	r2, [pc, #412]	; (80055c0 <HAL_UART_MspInit+0x1bc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <HAL_UART_MspInit+0x32>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8005426:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_UART_MspInit+0x1c0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d030      	beq.n	800548e <HAL_UART_MspInit+0x8a>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 800542c:	4a66      	ldr	r2, [pc, #408]	; (80055c8 <HAL_UART_MspInit+0x1c4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d076      	beq.n	8005520 <HAL_UART_MspInit+0x11c>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005432:	b021      	add	sp, #132	; 0x84
 8005434:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005436:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005438:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800543a:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800543c:	f002 fa96 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8005440:	2800      	cmp	r0, #0
 8005442:	f040 80ad 	bne.w	80055a0 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005446:	4b61      	ldr	r3, [pc, #388]	; (80055cc <HAL_UART_MspInit+0x1c8>)
 8005448:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005452:	f002 0201 	and.w	r2, r2, #1
 8005456:	9200      	str	r2, [sp, #0]
 8005458:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800545a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	64da      	str	r2, [r3, #76]	; 0x4c
 8005462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005464:	240c      	movs	r4, #12
 8005466:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005468:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800546c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005472:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005474:	230c      	movs	r3, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005476:	2400      	movs	r4, #0
 8005478:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800547a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800547e:	e9cd 4508 	strd	r4, r5, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005482:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8005484:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005486:	f001 fd17 	bl	8006eb8 <HAL_GPIO_Init>
}
 800548a:	b021      	add	sp, #132	; 0x84
 800548c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800548e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005490:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005492:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005494:	f002 fa6a 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 8005498:	2800      	cmp	r0, #0
 800549a:	f040 8084 	bne.w	80055a6 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800549e:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <HAL_UART_MspInit+0x1c8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a0:	484b      	ldr	r0, [pc, #300]	; (80055d0 <HAL_UART_MspInit+0x1cc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80054a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80054a4:	4d4b      	ldr	r5, [pc, #300]	; (80055d4 <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80054a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80054aa:	659a      	str	r2, [r3, #88]	; 0x58
 80054ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054ae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054b8:	f042 0202 	orr.w	r2, r2, #2
 80054bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80054be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80054c6:	2218      	movs	r2, #24
 80054c8:	2302      	movs	r3, #2
 80054ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054ce:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = UART2_TX_ETH_Pin|UART2_RX_ETH_Pin;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054da:	2307      	movs	r3, #7
 80054dc:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054de:	f001 fceb 	bl	8006eb8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80054e2:	493d      	ldr	r1, [pc, #244]	; (80055d8 <HAL_UART_MspInit+0x1d4>)
 80054e4:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054e6:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80054e8:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80054ec:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054ee:	2180      	movs	r1, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80054f0:	2220      	movs	r2, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054f2:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054f6:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80054fa:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054fe:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005500:	f000 ff24 	bl	800634c <HAL_DMA_Init>
 8005504:	2800      	cmp	r0, #0
 8005506:	d151      	bne.n	80055ac <HAL_UART_MspInit+0x1a8>
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005508:	2200      	movs	r2, #0
 800550a:	210c      	movs	r1, #12
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800550c:	67e5      	str	r5, [r4, #124]	; 0x7c
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 800550e:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005510:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 12, 0);
 8005512:	f000 feb5 	bl	8006280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005516:	2026      	movs	r0, #38	; 0x26
 8005518:	f000 fef0 	bl	80062fc <HAL_NVIC_EnableIRQ>
}
 800551c:	b021      	add	sp, #132	; 0x84
 800551e:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005520:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005522:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005524:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005526:	f002 fa21 	bl	800796c <HAL_RCCEx_PeriphCLKConfig>
 800552a:	2800      	cmp	r0, #0
 800552c:	d144      	bne.n	80055b8 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800552e:	4b27      	ldr	r3, [pc, #156]	; (80055cc <HAL_UART_MspInit+0x1c8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005530:	482a      	ldr	r0, [pc, #168]	; (80055dc <HAL_UART_MspInit+0x1d8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8005534:	4d2a      	ldr	r5, [pc, #168]	; (80055e0 <HAL_UART_MspInit+0x1dc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005536:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800553a:	659a      	str	r2, [r3, #88]	; 0x58
 800553c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800553e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005542:	9204      	str	r2, [sp, #16]
 8005544:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005548:	f042 0204 	orr.w	r2, r2, #4
 800554c:	64da      	str	r2, [r3, #76]	; 0x4c
 800554e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8005556:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800555a:	2302      	movs	r3, #2
 800555c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005560:	2200      	movs	r2, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005562:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = UART3_TX_SBC_Pin|UART3_RX_SBC_Pin;
 8005564:	2300      	movs	r3, #0
 8005566:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800556a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800556c:	2307      	movs	r3, #7
 800556e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005570:	f001 fca2 	bl	8006eb8 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005574:	491b      	ldr	r1, [pc, #108]	; (80055e4 <HAL_UART_MspInit+0x1e0>)
 8005576:	221c      	movs	r2, #28
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005578:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800557a:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800557e:	4628      	mov	r0, r5
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005580:	2180      	movs	r1, #128	; 0x80
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005582:	2220      	movs	r2, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005584:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005588:	e9c5 1304 	strd	r1, r3, [r5, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800558c:	e9c5 3206 	strd	r3, r2, [r5, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005590:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005592:	f000 fedb 	bl	800634c <HAL_DMA_Init>
 8005596:	b960      	cbnz	r0, 80055b2 <HAL_UART_MspInit+0x1ae>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005598:	67e5      	str	r5, [r4, #124]	; 0x7c
 800559a:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800559c:	b021      	add	sp, #132	; 0x84
 800559e:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80055a0:	f7fe ffc0 	bl	8004524 <Error_Handler>
 80055a4:	e74f      	b.n	8005446 <HAL_UART_MspInit+0x42>
      Error_Handler();
 80055a6:	f7fe ffbd 	bl	8004524 <Error_Handler>
 80055aa:	e778      	b.n	800549e <HAL_UART_MspInit+0x9a>
      Error_Handler();
 80055ac:	f7fe ffba 	bl	8004524 <Error_Handler>
 80055b0:	e7aa      	b.n	8005508 <HAL_UART_MspInit+0x104>
      Error_Handler();
 80055b2:	f7fe ffb7 	bl	8004524 <Error_Handler>
 80055b6:	e7ef      	b.n	8005598 <HAL_UART_MspInit+0x194>
      Error_Handler();
 80055b8:	f7fe ffb4 	bl	8004524 <Error_Handler>
 80055bc:	e7b7      	b.n	800552e <HAL_UART_MspInit+0x12a>
 80055be:	bf00      	nop
 80055c0:	40008000 	.word	0x40008000
 80055c4:	40004400 	.word	0x40004400
 80055c8:	40004800 	.word	0x40004800
 80055cc:	40021000 	.word	0x40021000
 80055d0:	48000400 	.word	0x48000400
 80055d4:	20000874 	.word	0x20000874
 80055d8:	40020008 	.word	0x40020008
 80055dc:	48000800 	.word	0x48000800
 80055e0:	200008d4 	.word	0x200008d4
 80055e4:	4002001c 	.word	0x4002001c

080055e8 <uchar4_to_float>:
    Float_char4 tmp;
    tmp.char4_value[0]=value[0];
    tmp.char4_value[1]=value[1];
    tmp.char4_value[2]=value[2];
    tmp.char4_value[3]=value[3];
    return tmp.float_value;
 80055e8:	6803      	ldr	r3, [r0, #0]
 80055ea:	ee00 3a10 	vmov	s0, r3
}
 80055ee:	4770      	bx	lr

080055f0 <float_to_uchar4>:

void float_to_uchar4(unsigned char *value,float float_value){
 80055f0:	b082      	sub	sp, #8
 80055f2:	ed8d 0a01 	vstr	s0, [sp, #4]
    Float_char4 tmp;
    tmp.float_value=float_value;
    value[0]=tmp.char4_value[0];
 80055f6:	9b01      	ldr	r3, [sp, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80055fe:	f363 0207 	bfi	r2, r3, #0, #8
 8005602:	f361 220f 	bfi	r2, r1, #8, #8
 8005606:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800560a:	f361 4217 	bfi	r2, r1, #16, #8
 800560e:	0e1b      	lsrs	r3, r3, #24
 8005610:	f363 621f 	bfi	r2, r3, #24, #8
 8005614:	6002      	str	r2, [r0, #0]
    value[1]=tmp.char4_value[1];
    value[2]=tmp.char4_value[2];
    value[3]=tmp.char4_value[3];
}
 8005616:	b002      	add	sp, #8
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop

0800561c <uart_putc>:
	    HAL_UART_Receive(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
	    c = buf[0];
	    return c;
	}
void uart_putc(uint8_t c)
	{
 800561c:	b500      	push	{lr}
	 char buf[1];
	 buf[0] = c;
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 800561e:	4a07      	ldr	r2, [pc, #28]	; (800563c <uart_putc+0x20>)
	{
 8005620:	b083      	sub	sp, #12
 8005622:	4684      	mov	ip, r0
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8005624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005628:	6810      	ldr	r0, [r2, #0]
	 buf[0] = c;
 800562a:	f88d c004 	strb.w	ip, [sp, #4]
	 HAL_UART_Transmit(huart_xprintf, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 800562e:	2201      	movs	r2, #1
 8005630:	a901      	add	r1, sp, #4
 8005632:	f004 f8e7 	bl	8009804 <HAL_UART_Transmit>
	}
 8005636:	b003      	add	sp, #12
 8005638:	f85d fb04 	ldr.w	pc, [sp], #4
 800563c:	200006e0 	.word	0x200006e0

08005640 <xprintf_init>:
	huart_xprintf = handler;
 8005640:	4902      	ldr	r1, [pc, #8]	; (800564c <xprintf_init+0xc>)
	xdev_out(uart_putc);
 8005642:	4b03      	ldr	r3, [pc, #12]	; (8005650 <xprintf_init+0x10>)
 8005644:	4a03      	ldr	r2, [pc, #12]	; (8005654 <xprintf_init+0x14>)
	huart_xprintf = handler;
 8005646:	6008      	str	r0, [r1, #0]
	xdev_out(uart_putc);
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	4770      	bx	lr
 800564c:	200006e0 	.word	0x200006e0
 8005650:	20000ae8 	.word	0x20000ae8
 8005654:	0800561d 	.word	0x0800561d

08005658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005658:	480d      	ldr	r0, [pc, #52]	; (8005690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800565a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800565c:	480d      	ldr	r0, [pc, #52]	; (8005694 <LoopForever+0x6>)
  ldr r1, =_edata
 800565e:	490e      	ldr	r1, [pc, #56]	; (8005698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005660:	4a0e      	ldr	r2, [pc, #56]	; (800569c <LoopForever+0xe>)
  movs r3, #0
 8005662:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005664:	e002      	b.n	800566c <LoopCopyDataInit>

08005666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800566a:	3304      	adds	r3, #4

0800566c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800566c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800566e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005670:	d3f9      	bcc.n	8005666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005672:	4a0b      	ldr	r2, [pc, #44]	; (80056a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005674:	4c0b      	ldr	r4, [pc, #44]	; (80056a4 <LoopForever+0x16>)
  movs r3, #0
 8005676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005678:	e001      	b.n	800567e <LoopFillZerobss>

0800567a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800567a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800567c:	3204      	adds	r2, #4

0800567e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800567e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005680:	d3fb      	bcc.n	800567a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005682:	f7ff fd07 	bl	8005094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005686:	f004 fb1b 	bl	8009cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800568a:	f7fe ffa1 	bl	80045d0 <main>

0800568e <LoopForever>:

LoopForever:
    b LoopForever
 800568e:	e7fe      	b.n	800568e <LoopForever>
  ldr   r0, =_estack
 8005690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005698:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800569c:	0800cf74 	.word	0x0800cf74
  ldr r2, =_sbss
 80056a0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80056a4:	20000b00 	.word	0x20000b00

080056a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80056a8:	e7fe      	b.n	80056a8 <ADC1_2_IRQHandler>
	...

080056ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056ac:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <HAL_InitTick+0x40>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	b90b      	cbnz	r3, 80056b8 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80056b4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80056b8:	490d      	ldr	r1, [pc, #52]	; (80056f0 <HAL_InitTick+0x44>)
 80056ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056be:	4605      	mov	r5, r0
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	6808      	ldr	r0, [r1, #0]
 80056c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80056ca:	f000 fe25 	bl	8006318 <HAL_SYSTICK_Config>
 80056ce:	4604      	mov	r4, r0
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d1ef      	bne.n	80056b4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056d4:	2d0f      	cmp	r5, #15
 80056d6:	d8ed      	bhi.n	80056b4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056d8:	4602      	mov	r2, r0
 80056da:	4629      	mov	r1, r5
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	f000 fdce 	bl	8006280 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <HAL_InitTick+0x48>)
 80056e6:	4620      	mov	r0, r4
 80056e8:	601d      	str	r5, [r3, #0]
}
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	2000000c 	.word	0x2000000c
 80056f0:	20000008 	.word	0x20000008
 80056f4:	20000010 	.word	0x20000010

080056f8 <HAL_Init>:
{
 80056f8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056fa:	2003      	movs	r0, #3
 80056fc:	f000 fdae 	bl	800625c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005700:	2000      	movs	r0, #0
 8005702:	f7ff ffd3 	bl	80056ac <HAL_InitTick>
 8005706:	b110      	cbz	r0, 800570e <HAL_Init+0x16>
    status = HAL_ERROR;
 8005708:	2401      	movs	r4, #1
}
 800570a:	4620      	mov	r0, r4
 800570c:	bd10      	pop	{r4, pc}
 800570e:	4604      	mov	r4, r0
    HAL_MspInit();
 8005710:	f7ff fbf8 	bl	8004f04 <HAL_MspInit>
}
 8005714:	4620      	mov	r0, r4
 8005716:	bd10      	pop	{r4, pc}

08005718 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005718:	4a03      	ldr	r2, [pc, #12]	; (8005728 <HAL_IncTick+0x10>)
 800571a:	4904      	ldr	r1, [pc, #16]	; (800572c <HAL_IncTick+0x14>)
 800571c:	6813      	ldr	r3, [r2, #0]
 800571e:	6809      	ldr	r1, [r1, #0]
 8005720:	440b      	add	r3, r1
 8005722:	6013      	str	r3, [r2, #0]
}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000aec 	.word	0x20000aec
 800572c:	2000000c 	.word	0x2000000c

08005730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005734:	f7fd fb42 	bl	8002dbc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005738:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800573a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800573c:	d002      	beq.n	8005744 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800573e:	4b04      	ldr	r3, [pc, #16]	; (8005750 <HAL_Delay+0x20>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005744:	f7fd fb3a 	bl	8002dbc <HAL_GetTick>
 8005748:	1b43      	subs	r3, r0, r5
 800574a:	42a3      	cmp	r3, r4
 800574c:	d3fa      	bcc.n	8005744 <HAL_Delay+0x14>
  {
  }
}
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	2000000c 	.word	0x2000000c

08005754 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005754:	b530      	push	{r4, r5, lr}
 8005756:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005758:	2300      	movs	r3, #0
 800575a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800575c:	2800      	cmp	r0, #0
 800575e:	f000 80d4 	beq.w	800590a <HAL_ADC_Init+0x1b6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005762:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8005764:	4604      	mov	r4, r0
 8005766:	2d00      	cmp	r5, #0
 8005768:	f000 809d 	beq.w	80058a6 <HAL_ADC_Init+0x152>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800576c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800576e:	6893      	ldr	r3, [r2, #8]
 8005770:	009d      	lsls	r5, r3, #2
 8005772:	d505      	bpl.n	8005780 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005774:	6893      	ldr	r3, [r2, #8]
 8005776:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800577a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800577e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005780:	6893      	ldr	r3, [r2, #8]
 8005782:	00d8      	lsls	r0, r3, #3
 8005784:	d419      	bmi.n	80057ba <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005786:	4b7e      	ldr	r3, [pc, #504]	; (8005980 <HAL_ADC_Init+0x22c>)
 8005788:	487e      	ldr	r0, [pc, #504]	; (8005984 <HAL_ADC_Init+0x230>)
 800578a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800578c:	6891      	ldr	r1, [r2, #8]
 800578e:	099b      	lsrs	r3, r3, #6
 8005790:	fba0 0303 	umull	r0, r3, r0, r3
 8005794:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8005798:	099b      	lsrs	r3, r3, #6
 800579a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800579e:	3301      	adds	r3, #1
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80057a6:	6091      	str	r1, [r2, #8]
 80057a8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80057aa:	9b01      	ldr	r3, [sp, #4]
 80057ac:	b12b      	cbz	r3, 80057ba <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80057b4:	9b01      	ldr	r3, [sp, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f9      	bne.n	80057ae <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057ba:	6893      	ldr	r3, [r2, #8]
 80057bc:	00d9      	lsls	r1, r3, #3
 80057be:	d464      	bmi.n	800588a <HAL_ADC_Init+0x136>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057c2:	f043 0310 	orr.w	r3, r3, #16
 80057c6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c8:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80057ca:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057cc:	4303      	orrs	r3, r0
 80057ce:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057d0:	6893      	ldr	r3, [r2, #8]
 80057d2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057d8:	d15e      	bne.n	8005898 <HAL_ADC_Init+0x144>
 80057da:	06db      	lsls	r3, r3, #27
 80057dc:	d45c      	bmi.n	8005898 <HAL_ADC_Init+0x144>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80057e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057ea:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057ec:	07dd      	lsls	r5, r3, #31
 80057ee:	d419      	bmi.n	8005824 <HAL_ADC_Init+0xd0>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057f0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80057f4:	f000 80a1 	beq.w	800593a <HAL_ADC_Init+0x1e6>
 80057f8:	4b63      	ldr	r3, [pc, #396]	; (8005988 <HAL_ADC_Init+0x234>)
 80057fa:	429a      	cmp	r2, r3
 80057fc:	f000 80a6 	beq.w	800594c <HAL_ADC_Init+0x1f8>
 8005800:	4962      	ldr	r1, [pc, #392]	; (800598c <HAL_ADC_Init+0x238>)
 8005802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005806:	6889      	ldr	r1, [r1, #8]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	430b      	orrs	r3, r1
 800580c:	4960      	ldr	r1, [pc, #384]	; (8005990 <HAL_ADC_Init+0x23c>)
 800580e:	6889      	ldr	r1, [r1, #8]
 8005810:	430b      	orrs	r3, r1
 8005812:	07d9      	lsls	r1, r3, #31
 8005814:	d406      	bmi.n	8005824 <HAL_ADC_Init+0xd0>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005816:	495f      	ldr	r1, [pc, #380]	; (8005994 <HAL_ADC_Init+0x240>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005818:	688b      	ldr	r3, [r1, #8]
 800581a:	6865      	ldr	r5, [r4, #4]
 800581c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005820:	432b      	orrs	r3, r5
 8005822:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8005824:	68e5      	ldr	r5, [r4, #12]
 8005826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005828:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800582c:	432b      	orrs	r3, r5
 800582e:	68a5      	ldr	r5, [r4, #8]
 8005830:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005832:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005834:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8005836:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800583a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800583e:	d05f      	beq.n	8005900 <HAL_ADC_Init+0x1ac>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005840:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005842:	b121      	cbz	r1, 800584e <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8005844:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005846:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800584a:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800584c:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800584e:	68d5      	ldr	r5, [r2, #12]
 8005850:	4951      	ldr	r1, [pc, #324]	; (8005998 <HAL_ADC_Init+0x244>)
 8005852:	4029      	ands	r1, r5
 8005854:	430b      	orrs	r3, r1
 8005856:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005858:	6913      	ldr	r3, [r2, #16]
 800585a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800585c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005860:	430b      	orrs	r3, r1
 8005862:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005864:	6893      	ldr	r3, [r2, #8]
 8005866:	075b      	lsls	r3, r3, #29
 8005868:	d523      	bpl.n	80058b2 <HAL_ADC_Init+0x15e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800586a:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800586c:	6963      	ldr	r3, [r4, #20]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d04e      	beq.n	8005910 <HAL_ADC_Init+0x1bc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005872:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005874:	f023 030f 	bic.w	r3, r3, #15
 8005878:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800587a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800587c:	f023 0303 	bic.w	r3, r3, #3
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005886:	b003      	add	sp, #12
 8005888:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800588a:	6893      	ldr	r3, [r2, #8]
 800588c:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005890:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005894:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005896:	d0a0      	beq.n	80057da <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005898:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800589a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800589c:	f043 0310 	orr.w	r3, r3, #16
 80058a0:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80058a2:	b003      	add	sp, #12
 80058a4:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80058a6:	f7fb fd81 	bl	80013ac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80058aa:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80058ac:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80058b0:	e75c      	b.n	800576c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058b2:	6893      	ldr	r3, [r2, #8]
 80058b4:	071d      	lsls	r5, r3, #28
 80058b6:	d4d9      	bmi.n	800586c <HAL_ADC_Init+0x118>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058b8:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058be:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058c0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058c4:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058c6:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058ca:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058ce:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80058d0:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058d2:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80058d4:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80058d6:	bb19      	cbnz	r1, 8005920 <HAL_ADC_Init+0x1cc>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80058d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058dc:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80058de:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80058e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80058ee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d033      	beq.n	800595e <HAL_ADC_Init+0x20a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80058f6:	6913      	ldr	r3, [r2, #16]
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	6113      	str	r3, [r2, #16]
 80058fe:	e7b5      	b.n	800586c <HAL_ADC_Init+0x118>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005900:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005902:	3901      	subs	r1, #1
 8005904:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005908:	e79a      	b.n	8005840 <HAL_ADC_Init+0xec>
    return HAL_ERROR;
 800590a:	2001      	movs	r0, #1
}
 800590c:	b003      	add	sp, #12
 800590e:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005910:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005912:	6a23      	ldr	r3, [r4, #32]
 8005914:	f021 010f 	bic.w	r1, r1, #15
 8005918:	3b01      	subs	r3, #1
 800591a:	430b      	orrs	r3, r1
 800591c:	6313      	str	r3, [r2, #48]	; 0x30
 800591e:	e7ac      	b.n	800587a <HAL_ADC_Init+0x126>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005924:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005926:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800592a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800592e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005932:	430b      	orrs	r3, r1
 8005934:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005938:	e7d9      	b.n	80058ee <HAL_ADC_Init+0x19a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800593a:	4913      	ldr	r1, [pc, #76]	; (8005988 <HAL_ADC_Init+0x234>)
 800593c:	6893      	ldr	r3, [r2, #8]
 800593e:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005940:	430b      	orrs	r3, r1
 8005942:	07d9      	lsls	r1, r3, #31
 8005944:	f53f af6e 	bmi.w	8005824 <HAL_ADC_Init+0xd0>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005948:	4914      	ldr	r1, [pc, #80]	; (800599c <HAL_ADC_Init+0x248>)
 800594a:	e765      	b.n	8005818 <HAL_ADC_Init+0xc4>
 800594c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005954:	430b      	orrs	r3, r1
 8005956:	07db      	lsls	r3, r3, #31
 8005958:	f53f af64 	bmi.w	8005824 <HAL_ADC_Init+0xd0>
 800595c:	e7f4      	b.n	8005948 <HAL_ADC_Init+0x1f4>
        MODIFY_REG(hadc->Instance->CFGR2,
 800595e:	6911      	ldr	r1, [r2, #16]
 8005960:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005962:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005964:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8005968:	f021 0104 	bic.w	r1, r1, #4
 800596c:	432b      	orrs	r3, r5
 800596e:	430b      	orrs	r3, r1
 8005970:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005972:	430b      	orrs	r3, r1
 8005974:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005976:	430b      	orrs	r3, r1
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	6113      	str	r3, [r2, #16]
 800597e:	e775      	b.n	800586c <HAL_ADC_Init+0x118>
 8005980:	20000008 	.word	0x20000008
 8005984:	053e2d63 	.word	0x053e2d63
 8005988:	50000100 	.word	0x50000100
 800598c:	50000400 	.word	0x50000400
 8005990:	50000600 	.word	0x50000600
 8005994:	50000700 	.word	0x50000700
 8005998:	fff04007 	.word	0xfff04007
 800599c:	50000300 	.word	0x50000300

080059a0 <HAL_ADC_ConvCpltCallback>:
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop

080059a4 <HAL_ADC_ConvHalfCpltCallback>:
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop

080059a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80059a8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80059ac:	f7ff fffa 	bl	80059a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059b0:	bd08      	pop	{r3, pc}
 80059b2:	bf00      	nop

080059b4 <HAL_ADC_ErrorCallback>:
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop

080059b8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80059ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059bc:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80059c0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80059c4:	d11d      	bne.n	8005a02 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80059c6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059cc:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80059ce:	680a      	ldr	r2, [r1, #0]
 80059d0:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80059d4:	68ca      	ldr	r2, [r1, #12]
 80059d6:	d01b      	beq.n	8005a10 <ADC_DMAConvCplt+0x58>
 80059d8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80059dc:	d10d      	bne.n	80059fa <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80059de:	68ca      	ldr	r2, [r1, #12]
 80059e0:	0494      	lsls	r4, r2, #18
 80059e2:	d40a      	bmi.n	80059fa <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80059ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059ee:	04d1      	lsls	r1, r2, #19
 80059f0:	d403      	bmi.n	80059fa <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059f4:	f042 0201 	orr.w	r2, r2, #1
 80059f8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff ffd0 	bl	80059a0 <HAL_ADC_ConvCpltCallback>
}
 8005a00:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a02:	06d2      	lsls	r2, r2, #27
 8005a04:	d40a      	bmi.n	8005a1c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005a10:	0790      	lsls	r0, r2, #30
 8005a12:	d5e7      	bpl.n	80059e4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ffc3 	bl	80059a0 <HAL_ADC_ConvCpltCallback>
 8005a1a:	e7f1      	b.n	8005a00 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff ffc9 	bl	80059b4 <HAL_ADC_ErrorCallback>
}
 8005a22:	bd10      	pop	{r4, pc}

08005a24 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a24:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8005a26:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a28:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a2e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a30:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005a32:	f043 0304 	orr.w	r3, r3, #4
 8005a36:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a38:	f7ff ffbc 	bl	80059b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a3c:	bd08      	pop	{r3, pc}
 8005a3e:	bf00      	nop

08005a40 <HAL_ADC_ConfigChannel>:
{
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005a42:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8005a46:	b083      	sub	sp, #12
 8005a48:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005a4a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005a4c:	f04f 0000 	mov.w	r0, #0
 8005a50:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005a52:	f000 8177 	beq.w	8005d44 <HAL_ADC_ConfigChannel+0x304>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a56:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a5e:	6894      	ldr	r4, [r2, #8]
 8005a60:	0765      	lsls	r5, r4, #29
 8005a62:	d45d      	bmi.n	8005b20 <HAL_ADC_ConfigChannel+0xe0>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005a64:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a66:	0984      	lsrs	r4, r0, #6
 8005a68:	f004 040c 	and.w	r4, r4, #12
  MODIFY_REG(*preg,
 8005a6c:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a70:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8005a74:	6808      	ldr	r0, [r1, #0]
 8005a76:	f854 500e 	ldr.w	r5, [r4, lr]
 8005a7a:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005a7e:	261f      	movs	r6, #31
 8005a80:	fa00 f00c 	lsl.w	r0, r0, ip
 8005a84:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005a88:	ea25 0c0c 	bic.w	ip, r5, ip
 8005a8c:	ea40 000c 	orr.w	r0, r0, ip
 8005a90:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a94:	6890      	ldr	r0, [r2, #8]
 8005a96:	0744      	lsls	r4, r0, #29
 8005a98:	d572      	bpl.n	8005b80 <HAL_ADC_ConfigChannel+0x140>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a9a:	6890      	ldr	r0, [r2, #8]
 8005a9c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a9e:	6894      	ldr	r4, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aa0:	f014 0f01 	tst.w	r4, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005aa4:	4604      	mov	r4, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x82>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005aa8:	4db2      	ldr	r5, [pc, #712]	; (8005d74 <HAL_ADC_ConfigChannel+0x334>)
 8005aaa:	68ce      	ldr	r6, [r1, #12]
 8005aac:	42ae      	cmp	r6, r5
 8005aae:	f000 80f0 	beq.w	8005c92 <HAL_ADC_ConfigChannel+0x252>
    CLEAR_BIT(ADCx->DIFSEL,
 8005ab2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8005ab6:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8005aba:	ea21 0100 	bic.w	r1, r1, r0
 8005abe:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005ac2:	49ad      	ldr	r1, [pc, #692]	; (8005d78 <HAL_ADC_ConfigChannel+0x338>)
 8005ac4:	420c      	tst	r4, r1
 8005ac6:	d059      	beq.n	8005b7c <HAL_ADC_ConfigChannel+0x13c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ac8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005acc:	f000 8138 	beq.w	8005d40 <HAL_ADC_ConfigChannel+0x300>
 8005ad0:	4daa      	ldr	r5, [pc, #680]	; (8005d7c <HAL_ADC_ConfigChannel+0x33c>)
 8005ad2:	49ab      	ldr	r1, [pc, #684]	; (8005d80 <HAL_ADC_ConfigChannel+0x340>)
 8005ad4:	48ab      	ldr	r0, [pc, #684]	; (8005d84 <HAL_ADC_ConfigChannel+0x344>)
 8005ad6:	42aa      	cmp	r2, r5
 8005ad8:	bf18      	it	ne
 8005ada:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005adc:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005ade:	49aa      	ldr	r1, [pc, #680]	; (8005d88 <HAL_ADC_ConfigChannel+0x348>)
 8005ae0:	428c      	cmp	r4, r1
 8005ae2:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8005ae6:	d024      	beq.n	8005b32 <HAL_ADC_ConfigChannel+0xf2>
 8005ae8:	49a8      	ldr	r1, [pc, #672]	; (8005d8c <HAL_ADC_ConfigChannel+0x34c>)
 8005aea:	428c      	cmp	r4, r1
 8005aec:	d021      	beq.n	8005b32 <HAL_ADC_ConfigChannel+0xf2>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005aee:	49a8      	ldr	r1, [pc, #672]	; (8005d90 <HAL_ADC_ConfigChannel+0x350>)
 8005af0:	428c      	cmp	r4, r1
 8005af2:	f040 8157 	bne.w	8005da4 <HAL_ADC_ConfigChannel+0x364>
 8005af6:	01c0      	lsls	r0, r0, #7
 8005af8:	d440      	bmi.n	8005b7c <HAL_ADC_ConfigChannel+0x13c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005afa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005afe:	f000 821b 	beq.w	8005f38 <HAL_ADC_ConfigChannel+0x4f8>
 8005b02:	4c9e      	ldr	r4, [pc, #632]	; (8005d7c <HAL_ADC_ConfigChannel+0x33c>)
 8005b04:	499e      	ldr	r1, [pc, #632]	; (8005d80 <HAL_ADC_ConfigChannel+0x340>)
 8005b06:	489f      	ldr	r0, [pc, #636]	; (8005d84 <HAL_ADC_ConfigChannel+0x344>)
 8005b08:	42a2      	cmp	r2, r4
 8005b0a:	bf18      	it	ne
 8005b0c:	4601      	movne	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b0e:	688a      	ldr	r2, [r1, #8]
 8005b10:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005b14:	4315      	orrs	r5, r2
 8005b16:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	608d      	str	r5, [r1, #8]
}
 8005b1e:	e003      	b.n	8005b28 <HAL_ADC_ConfigChannel+0xe8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b22:	f042 0220 	orr.w	r2, r2, #32
 8005b26:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005b2e:	b003      	add	sp, #12
 8005b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b32:	0201      	lsls	r1, r0, #8
 8005b34:	d422      	bmi.n	8005b7c <HAL_ADC_ConfigChannel+0x13c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b36:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005b3a:	f000 8118 	beq.w	8005d6e <HAL_ADC_ConfigChannel+0x32e>
 8005b3e:	4995      	ldr	r1, [pc, #596]	; (8005d94 <HAL_ADC_ConfigChannel+0x354>)
 8005b40:	428a      	cmp	r2, r1
 8005b42:	d11b      	bne.n	8005b7c <HAL_ADC_ConfigChannel+0x13c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b44:	488f      	ldr	r0, [pc, #572]	; (8005d84 <HAL_ADC_ConfigChannel+0x344>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b46:	4a94      	ldr	r2, [pc, #592]	; (8005d98 <HAL_ADC_ConfigChannel+0x358>)
 8005b48:	4c94      	ldr	r4, [pc, #592]	; (8005d9c <HAL_ADC_ConfigChannel+0x35c>)
 8005b4a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b4c:	6881      	ldr	r1, [r0, #8]
 8005b4e:	0992      	lsrs	r2, r2, #6
 8005b50:	fba4 4202 	umull	r4, r2, r4, r2
 8005b54:	0992      	lsrs	r2, r2, #6
 8005b56:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8005b5a:	3201      	adds	r2, #1
 8005b5c:	430d      	orrs	r5, r1
 8005b5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005b62:	0092      	lsls	r2, r2, #2
 8005b64:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 8005b68:	6085      	str	r5, [r0, #8]
 8005b6a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005b6c:	9a01      	ldr	r2, [sp, #4]
 8005b6e:	b12a      	cbz	r2, 8005b7c <HAL_ADC_ConfigChannel+0x13c>
            wait_loop_index--;
 8005b70:	9a01      	ldr	r2, [sp, #4]
 8005b72:	3a01      	subs	r2, #1
 8005b74:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005b76:	9a01      	ldr	r2, [sp, #4]
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	d1f9      	bne.n	8005b70 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e7d3      	b.n	8005b28 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b80:	6890      	ldr	r0, [r2, #8]
 8005b82:	f010 0008 	ands.w	r0, r0, #8
 8005b86:	f040 8082 	bne.w	8005c8e <HAL_ADC_ConfigChannel+0x24e>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b8a:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005b8c:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005b8e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005b92:	f000 8122 	beq.w	8005dda <HAL_ADC_ConfigChannel+0x39a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b96:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8005b9a:	f102 0714 	add.w	r7, r2, #20
 8005b9e:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8005ba2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005ba6:	f85c 5007 	ldr.w	r5, [ip, r7]
 8005baa:	f04f 0e07 	mov.w	lr, #7
 8005bae:	40b4      	lsls	r4, r6
 8005bb0:	fa0e f606 	lsl.w	r6, lr, r6
 8005bb4:	ea25 0506 	bic.w	r5, r5, r6
 8005bb8:	432c      	orrs	r4, r5
 8005bba:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005bbe:	6954      	ldr	r4, [r2, #20]
 8005bc0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005bc4:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bc6:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bc8:	68d5      	ldr	r5, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bca:	2f04      	cmp	r7, #4
 8005bcc:	d02f      	beq.n	8005c2e <HAL_ADC_ConfigChannel+0x1ee>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bce:	f102 0460 	add.w	r4, r2, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bd2:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 8005bd6:	f854 e027 	ldr.w	lr, [r4, r7, lsl #2]
 8005bda:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8005da0 <HAL_ADC_ConfigChannel+0x360>
 8005bde:	006e      	lsls	r6, r5, #1
 8005be0:	680d      	ldr	r5, [r1, #0]
 8005be2:	ea0e 0c0c 	and.w	ip, lr, ip
 8005be6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005bea:	ea45 0c0c 	orr.w	ip, r5, ip
 8005bee:	694d      	ldr	r5, [r1, #20]
 8005bf0:	40b5      	lsls	r5, r6
 8005bf2:	ea45 050c 	orr.w	r5, r5, ip
 8005bf6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8005bfa:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bfe:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005c00:	698e      	ldr	r6, [r1, #24]
 8005c02:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8005c06:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8005c0a:	4335      	orrs	r5, r6
 8005c0c:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005c10:	7f0d      	ldrb	r5, [r1, #28]
 8005c12:	690e      	ldr	r6, [r1, #16]
 8005c14:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 8005c16:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8005c1a:	bf08      	it	eq
 8005c1c:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8005c20:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8005c24:	4328      	orrs	r0, r5
 8005c26:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8005c2a:	6808      	ldr	r0, [r1, #0]
}
 8005c2c:	e737      	b.n	8005a9e <HAL_ADC_ConfigChannel+0x5e>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c2e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c30:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005c32:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8005c34:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c38:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c3c:	2d00      	cmp	r5, #0
 8005c3e:	f040 80e0 	bne.w	8005e02 <HAL_ADC_ConfigChannel+0x3c2>
 8005c42:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c46:	42ac      	cmp	r4, r5
 8005c48:	f000 813e 	beq.w	8005ec8 <HAL_ADC_ConfigChannel+0x488>
 8005c4c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005c4e:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c50:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c54:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005c58:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8005c5c:	42ae      	cmp	r6, r5
 8005c5e:	f000 8159 	beq.w	8005f14 <HAL_ADC_ConfigChannel+0x4d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c62:	68a6      	ldr	r6, [r4, #8]
 8005c64:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c66:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c6a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005c6e:	42ae      	cmp	r6, r5
 8005c70:	f000 813e 	beq.w	8005ef0 <HAL_ADC_ConfigChannel+0x4b0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c74:	68e6      	ldr	r6, [r4, #12]
 8005c76:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c78:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c7c:	f3c6 6484 	ubfx	r4, r6, #26, #5
 8005c80:	42a5      	cmp	r5, r4
 8005c82:	f47f af0c 	bne.w	8005a9e <HAL_ADC_ConfigChannel+0x5e>
  MODIFY_REG(*preg,
 8005c86:	6838      	ldr	r0, [r7, #0]
 8005c88:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c8c:	6038      	str	r0, [r7, #0]
 8005c8e:	6808      	ldr	r0, [r1, #0]
}
 8005c90:	e705      	b.n	8005a9e <HAL_ADC_ConfigChannel+0x5e>
    SET_BIT(ADCx->DIFSEL,
 8005c92:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8005c96:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8005c9a:	432c      	orrs	r4, r5
 8005c9c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	d052      	beq.n	8005d4a <HAL_ADC_ConfigChannel+0x30a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	f000 80e9 	beq.w	8005e80 <HAL_ADC_ConfigChannel+0x440>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8005cae:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cb2:	3401      	adds	r4, #1
 8005cb4:	f004 041f 	and.w	r4, r4, #31
 8005cb8:	2c09      	cmp	r4, #9
 8005cba:	f240 80e1 	bls.w	8005e80 <HAL_ADC_ConfigChannel+0x440>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbe:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	f000 813e 	beq.w	8005f44 <HAL_ADC_ConfigChannel+0x504>
  return __builtin_clz(value);
 8005cc8:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ccc:	3401      	adds	r4, #1
 8005cce:	06a4      	lsls	r4, r4, #26
 8005cd0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005cd8:	2d00      	cmp	r5, #0
 8005cda:	f000 8131 	beq.w	8005f40 <HAL_ADC_ConfigChannel+0x500>
  return __builtin_clz(value);
 8005cde:	fab5 f585 	clz	r5, r5
 8005ce2:	3501      	adds	r5, #1
 8005ce4:	f005 051f 	and.w	r5, r5, #31
 8005ce8:	2601      	movs	r6, #1
 8005cea:	fa06 f505 	lsl.w	r5, r6, r5
 8005cee:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f000 8121 	beq.w	8005f3c <HAL_ADC_ConfigChannel+0x4fc>
  return __builtin_clz(value);
 8005cfa:	fab0 f080 	clz	r0, r0
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f000 051f 	and.w	r5, r0, #31
 8005d04:	f06f 061d 	mvn.w	r6, #29
 8005d08:	2003      	movs	r0, #3
 8005d0a:	fb10 6005 	smlabb	r0, r0, r5, r6
 8005d0e:	0500      	lsls	r0, r0, #20
 8005d10:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d14:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d16:	0dc6      	lsrs	r6, r0, #23
  MODIFY_REG(*preg,
 8005d18:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d1a:	f006 0604 	and.w	r6, r6, #4
 8005d1e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8005d22:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005d26:	fa04 f700 	lsl.w	r7, r4, r0
 8005d2a:	f04f 0c07 	mov.w	ip, #7
 8005d2e:	5974      	ldr	r4, [r6, r5]
 8005d30:	fa0c f000 	lsl.w	r0, ip, r0
 8005d34:	ea24 0000 	bic.w	r0, r4, r0
 8005d38:	4338      	orrs	r0, r7
 8005d3a:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d3c:	680c      	ldr	r4, [r1, #0]
}
 8005d3e:	e6c0      	b.n	8005ac2 <HAL_ADC_ConfigChannel+0x82>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d40:	490f      	ldr	r1, [pc, #60]	; (8005d80 <HAL_ADC_ConfigChannel+0x340>)
 8005d42:	e6cb      	b.n	8005adc <HAL_ADC_ConfigChannel+0x9c>
  __HAL_LOCK(hadc);
 8005d44:	2002      	movs	r0, #2
}
 8005d46:	b003      	add	sp, #12
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d4a:	0e80      	lsrs	r0, r0, #26
 8005d4c:	1c44      	adds	r4, r0, #1
 8005d4e:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d52:	2e09      	cmp	r6, #9
 8005d54:	f200 8086 	bhi.w	8005e64 <HAL_ADC_ConfigChannel+0x424>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d58:	06a5      	lsls	r5, r4, #26
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	40b0      	lsls	r0, r6
 8005d5e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8005d62:	4305      	orrs	r5, r0
 8005d64:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005d68:	0500      	lsls	r0, r0, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d6a:	4328      	orrs	r0, r5
 8005d6c:	e7d3      	b.n	8005d16 <HAL_ADC_ConfigChannel+0x2d6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d6e:	4804      	ldr	r0, [pc, #16]	; (8005d80 <HAL_ADC_ConfigChannel+0x340>)
 8005d70:	e6e9      	b.n	8005b46 <HAL_ADC_ConfigChannel+0x106>
 8005d72:	bf00      	nop
 8005d74:	407f0000 	.word	0x407f0000
 8005d78:	80080000 	.word	0x80080000
 8005d7c:	50000100 	.word	0x50000100
 8005d80:	50000300 	.word	0x50000300
 8005d84:	50000700 	.word	0x50000700
 8005d88:	c3210000 	.word	0xc3210000
 8005d8c:	90c00010 	.word	0x90c00010
 8005d90:	c7520000 	.word	0xc7520000
 8005d94:	50000600 	.word	0x50000600
 8005d98:	20000008 	.word	0x20000008
 8005d9c:	053e2d63 	.word	0x053e2d63
 8005da0:	03fff000 	.word	0x03fff000
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005da4:	496d      	ldr	r1, [pc, #436]	; (8005f5c <HAL_ADC_ConfigChannel+0x51c>)
 8005da6:	428c      	cmp	r4, r1
 8005da8:	f47f aee8 	bne.w	8005b7c <HAL_ADC_ConfigChannel+0x13c>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005dac:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8005db0:	f47f aee4 	bne.w	8005b7c <HAL_ADC_ConfigChannel+0x13c>
        if (ADC_VREFINT_INSTANCE(hadc))
 8005db4:	496a      	ldr	r1, [pc, #424]	; (8005f60 <HAL_ADC_ConfigChannel+0x520>)
 8005db6:	428a      	cmp	r2, r1
 8005db8:	f43f aee0 	beq.w	8005b7c <HAL_ADC_ConfigChannel+0x13c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dbc:	4c69      	ldr	r4, [pc, #420]	; (8005f64 <HAL_ADC_ConfigChannel+0x524>)
 8005dbe:	f501 7100 	add.w	r1, r1, #512	; 0x200
 8005dc2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005dc6:	bf18      	it	ne
 8005dc8:	4621      	movne	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005dca:	688a      	ldr	r2, [r1, #8]
 8005dcc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8005dd0:	432a      	orrs	r2, r5
 8005dd2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005dd6:	608a      	str	r2, [r1, #8]
}
 8005dd8:	e6a6      	b.n	8005b28 <HAL_ADC_ConfigChannel+0xe8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005dda:	0df5      	lsrs	r5, r6, #23
 8005ddc:	f102 0414 	add.w	r4, r2, #20
 8005de0:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8005de4:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8005de8:	592f      	ldr	r7, [r5, r4]
 8005dea:	f04f 0c07 	mov.w	ip, #7
 8005dee:	fa0c f606 	lsl.w	r6, ip, r6
 8005df2:	ea27 0606 	bic.w	r6, r7, r6
 8005df6:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005df8:	6954      	ldr	r4, [r2, #20]
 8005dfa:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005dfe:	6154      	str	r4, [r2, #20]
}
 8005e00:	e6e1      	b.n	8005bc6 <HAL_ADC_ConfigChannel+0x186>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e02:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e06:	b11d      	cbz	r5, 8005e10 <HAL_ADC_ConfigChannel+0x3d0>
  return __builtin_clz(value);
 8005e08:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e0c:	42ac      	cmp	r4, r5
 8005e0e:	d05b      	beq.n	8005ec8 <HAL_ADC_ConfigChannel+0x488>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e10:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8005e12:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e14:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e18:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005e1c:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e20:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e24:	b11d      	cbz	r5, 8005e2e <HAL_ADC_ConfigChannel+0x3ee>
  return __builtin_clz(value);
 8005e26:	fab5 f585 	clz	r5, r5
 8005e2a:	42ae      	cmp	r6, r5
 8005e2c:	d072      	beq.n	8005f14 <HAL_ADC_ConfigChannel+0x4d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e2e:	68a5      	ldr	r5, [r4, #8]
 8005e30:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e32:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e36:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e3e:	b11d      	cbz	r5, 8005e48 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8005e40:	fab5 f585 	clz	r5, r5
 8005e44:	42ae      	cmp	r6, r5
 8005e46:	d053      	beq.n	8005ef0 <HAL_ADC_ConfigChannel+0x4b0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e4c:	f104 070c 	add.w	r7, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e50:	f3c5 6484 	ubfx	r4, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	f43f ae20 	beq.w	8005a9e <HAL_ADC_ConfigChannel+0x5e>
  return __builtin_clz(value);
 8005e5e:	fab5 f585 	clz	r5, r5
 8005e62:	e70d      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e64:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8005e68:	06a4      	lsls	r4, r4, #26
 8005e6a:	381e      	subs	r0, #30
 8005e6c:	2501      	movs	r5, #1
 8005e6e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005e72:	0500      	lsls	r0, r0, #20
 8005e74:	fa05 f606 	lsl.w	r6, r5, r6
 8005e78:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005e7c:	4334      	orrs	r4, r6
 8005e7e:	e749      	b.n	8005d14 <HAL_ADC_ConfigChannel+0x2d4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e80:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	d065      	beq.n	8005f54 <HAL_ADC_ConfigChannel+0x514>
  return __builtin_clz(value);
 8005e88:	fab5 f585 	clz	r5, r5
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	06ad      	lsls	r5, r5, #26
 8005e90:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e94:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005e98:	2c00      	cmp	r4, #0
 8005e9a:	d059      	beq.n	8005f50 <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 8005e9c:	fab4 f484 	clz	r4, r4
 8005ea0:	3401      	adds	r4, #1
 8005ea2:	f004 041f 	and.w	r4, r4, #31
 8005ea6:	2601      	movs	r6, #1
 8005ea8:	fa06 f404 	lsl.w	r4, r6, r4
 8005eac:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eae:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d049      	beq.n	8005f4a <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 8005eb6:	fab0 f480 	clz	r4, r0
 8005eba:	3401      	adds	r4, #1
 8005ebc:	f004 041f 	and.w	r4, r4, #31
 8005ec0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005ec4:	0520      	lsls	r0, r4, #20
 8005ec6:	e750      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x32a>
  MODIFY_REG(*preg,
 8005ec8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005eca:	4614      	mov	r4, r2
 8005ecc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005ed0:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ed4:	6e50      	ldr	r0, [r2, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ed6:	6808      	ldr	r0, [r1, #0]
 8005ed8:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8005eda:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ede:	f102 0764 	add.w	r7, r2, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ee2:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ee6:	2d00      	cmp	r5, #0
 8005ee8:	d19a      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x3e0>
 8005eea:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005eee:	e6b5      	b.n	8005c5c <HAL_ADC_ConfigChannel+0x21c>
  MODIFY_REG(*preg,
 8005ef0:	6838      	ldr	r0, [r7, #0]
 8005ef2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005ef6:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ef8:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005efa:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005efc:	f104 070c 	add.w	r7, r4, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f00:	68e4      	ldr	r4, [r4, #12]
 8005f02:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f06:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	d1a2      	bne.n	8005e54 <HAL_ADC_ConfigChannel+0x414>
 8005f0e:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005f12:	e6b5      	b.n	8005c80 <HAL_ADC_ConfigChannel+0x240>
  MODIFY_REG(*preg,
 8005f14:	6838      	ldr	r0, [r7, #0]
 8005f16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f1a:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f1c:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f1e:	6808      	ldr	r0, [r1, #0]
 8005f20:	68a6      	ldr	r6, [r4, #8]
 8005f22:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f26:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f2a:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	d183      	bne.n	8005e3a <HAL_ADC_ConfigChannel+0x3fa>
 8005f32:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8005f36:	e69a      	b.n	8005c6e <HAL_ADC_ConfigChannel+0x22e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f38:	490b      	ldr	r1, [pc, #44]	; (8005f68 <HAL_ADC_ConfigChannel+0x528>)
 8005f3a:	e5e8      	b.n	8005b0e <HAL_ADC_ConfigChannel+0xce>
 8005f3c:	480b      	ldr	r0, [pc, #44]	; (8005f6c <HAL_ADC_ConfigChannel+0x52c>)
 8005f3e:	e6e9      	b.n	8005d14 <HAL_ADC_ConfigChannel+0x2d4>
 8005f40:	2502      	movs	r5, #2
 8005f42:	e6d4      	b.n	8005cee <HAL_ADC_ConfigChannel+0x2ae>
 8005f44:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005f48:	e6c4      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x294>
 8005f4a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005f4e:	e70c      	b.n	8005d6a <HAL_ADC_ConfigChannel+0x32a>
 8005f50:	2402      	movs	r4, #2
 8005f52:	e7ab      	b.n	8005eac <HAL_ADC_ConfigChannel+0x46c>
 8005f54:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005f58:	e79c      	b.n	8005e94 <HAL_ADC_ConfigChannel+0x454>
 8005f5a:	bf00      	nop
 8005f5c:	cb840000 	.word	0xcb840000
 8005f60:	50000100 	.word	0x50000100
 8005f64:	50000700 	.word	0x50000700
 8005f68:	50000300 	.word	0x50000300
 8005f6c:	fe500000 	.word	0xfe500000

08005f70 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f70:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	07d2      	lsls	r2, r2, #31
 8005f76:	d501      	bpl.n	8005f7c <ADC_Enable+0xc>
  return HAL_OK;
 8005f78:	2000      	movs	r0, #0
}
 8005f7a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005f7c:	6899      	ldr	r1, [r3, #8]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <ADC_Enable+0x70>)
 8005f80:	4211      	tst	r1, r2
{
 8005f82:	b570      	push	{r4, r5, r6, lr}
 8005f84:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005f86:	d008      	beq.n	8005f9a <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f88:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8005f8a:	f043 0310 	orr.w	r3, r3, #16
 8005f8e:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f90:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8005f92:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f94:	4303      	orrs	r3, r0
 8005f96:	6633      	str	r3, [r6, #96]	; 0x60
}
 8005f98:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4d11      	ldr	r5, [pc, #68]	; (8005fe4 <ADC_Enable+0x74>)
 8005f9e:	402a      	ands	r2, r5
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005fa6:	f7fc ff09 	bl	8002dbc <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005faa:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005fac:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	07d0      	lsls	r0, r2, #31
 8005fb2:	d413      	bmi.n	8005fdc <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fb4:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fb6:	07d1      	lsls	r1, r2, #31
 8005fb8:	d404      	bmi.n	8005fc4 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	402a      	ands	r2, r5
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fc4:	f7fc fefa 	bl	8002dbc <HAL_GetTick>
 8005fc8:	1b03      	subs	r3, r0, r4
 8005fca:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fcc:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fce:	d9ee      	bls.n	8005fae <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	07d2      	lsls	r2, r2, #31
 8005fd4:	d5d8      	bpl.n	8005f88 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	07d0      	lsls	r0, r2, #31
 8005fda:	d5eb      	bpl.n	8005fb4 <ADC_Enable+0x44>
  return HAL_OK;
 8005fdc:	2000      	movs	r0, #0
}
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	8000003f 	.word	0x8000003f
 8005fe4:	7fffffc0 	.word	0x7fffffc0

08005fe8 <HAL_ADC_Start_DMA>:
{
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fec:	6800      	ldr	r0, [r0, #0]
 8005fee:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8005ff2:	460f      	mov	r7, r1
 8005ff4:	4616      	mov	r6, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ff6:	d062      	beq.n	80060be <HAL_ADC_Start_DMA+0xd6>
 8005ff8:	4a38      	ldr	r2, [pc, #224]	; (80060dc <HAL_ADC_Start_DMA+0xf4>)
 8005ffa:	4d39      	ldr	r5, [pc, #228]	; (80060e0 <HAL_ADC_Start_DMA+0xf8>)
 8005ffc:	4b39      	ldr	r3, [pc, #228]	; (80060e4 <HAL_ADC_Start_DMA+0xfc>)
 8005ffe:	4290      	cmp	r0, r2
 8006000:	bf18      	it	ne
 8006002:	461d      	movne	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006004:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006006:	6885      	ldr	r5, [r0, #8]
 8006008:	076a      	lsls	r2, r5, #29
 800600a:	d456      	bmi.n	80060ba <HAL_ADC_Start_DMA+0xd2>
    __HAL_LOCK(hadc);
 800600c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8006010:	2a01      	cmp	r2, #1
 8006012:	d052      	beq.n	80060ba <HAL_ADC_Start_DMA+0xd2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006014:	f003 051f 	and.w	r5, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006018:	4b33      	ldr	r3, [pc, #204]	; (80060e8 <HAL_ADC_Start_DMA+0x100>)
    __HAL_LOCK(hadc);
 800601a:	2201      	movs	r2, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800601c:	4298      	cmp	r0, r3
    __HAL_LOCK(hadc);
 800601e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006022:	d006      	beq.n	8006032 <HAL_ADC_Start_DMA+0x4a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006024:	2d09      	cmp	r5, #9
 8006026:	d84c      	bhi.n	80060c2 <HAL_ADC_Start_DMA+0xda>
 8006028:	f240 2321 	movw	r3, #545	; 0x221
 800602c:	40eb      	lsrs	r3, r5
 800602e:	07db      	lsls	r3, r3, #31
 8006030:	d547      	bpl.n	80060c2 <HAL_ADC_Start_DMA+0xda>
      tmp_hal_status = ADC_Enable(hadc);
 8006032:	4620      	mov	r0, r4
 8006034:	f7ff ff9c 	bl	8005f70 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8006038:	2800      	cmp	r0, #0
 800603a:	d147      	bne.n	80060cc <HAL_ADC_Start_DMA+0xe4>
        ADC_STATE_CLR_SET(hadc->State,
 800603c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800603e:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8006040:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800604e:	4b23      	ldr	r3, [pc, #140]	; (80060dc <HAL_ADC_Start_DMA+0xf4>)
 8006050:	4299      	cmp	r1, r3
 8006052:	d03f      	beq.n	80060d4 <HAL_ADC_Start_DMA+0xec>
 8006054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006058:	4299      	cmp	r1, r3
 800605a:	d03b      	beq.n	80060d4 <HAL_ADC_Start_DMA+0xec>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800605c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800605e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006062:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006064:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006068:	4d20      	ldr	r5, [pc, #128]	; (80060ec <HAL_ADC_Start_DMA+0x104>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800606a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800606e:	bf1c      	itt	ne
 8006070:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8006072:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8006076:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006078:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800607a:	4d1d      	ldr	r5, [pc, #116]	; (80060f0 <HAL_ADC_Start_DMA+0x108>)
 800607c:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800607e:	4d1d      	ldr	r5, [pc, #116]	; (80060f4 <HAL_ADC_Start_DMA+0x10c>)
 8006080:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006082:	251c      	movs	r5, #28
 8006084:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8006086:	2500      	movs	r5, #0
 8006088:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800608c:	684d      	ldr	r5, [r1, #4]
 800608e:	f045 0510 	orr.w	r5, r5, #16
 8006092:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006094:	68cd      	ldr	r5, [r1, #12]
 8006096:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800609a:	4633      	mov	r3, r6
 800609c:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800609e:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060a0:	3140      	adds	r1, #64	; 0x40
 80060a2:	f000 f9e9 	bl	8006478 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80060a6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80060a8:	6893      	ldr	r3, [r2, #8]
 80060aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060b2:	f043 0304 	orr.w	r3, r3, #4
 80060b6:	6093      	str	r3, [r2, #8]
}
 80060b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 80060ba:	2002      	movs	r0, #2
}
 80060bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060be:	4d08      	ldr	r5, [pc, #32]	; (80060e0 <HAL_ADC_Start_DMA+0xf8>)
 80060c0:	e7a0      	b.n	8006004 <HAL_ADC_Start_DMA+0x1c>
      __HAL_UNLOCK(hadc);
 80060c2:	2300      	movs	r3, #0
 80060c4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80060c8:	2001      	movs	r0, #1
}
 80060ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 80060cc:	2300      	movs	r3, #0
 80060ce:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 80060d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060d4:	2d00      	cmp	r5, #0
 80060d6:	d1c5      	bne.n	8006064 <HAL_ADC_Start_DMA+0x7c>
 80060d8:	e7c0      	b.n	800605c <HAL_ADC_Start_DMA+0x74>
 80060da:	bf00      	nop
 80060dc:	50000100 	.word	0x50000100
 80060e0:	50000300 	.word	0x50000300
 80060e4:	50000700 	.word	0x50000700
 80060e8:	50000600 	.word	0x50000600
 80060ec:	080059b9 	.word	0x080059b9
 80060f0:	080059a9 	.word	0x080059a9
 80060f4:	08005a25 	.word	0x08005a25

080060f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80060f8:	b470      	push	{r4, r5, r6}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060fa:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80060fe:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8006100:	2b01      	cmp	r3, #1
{
 8006102:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8006104:	d057      	beq.n	80061b6 <HAL_ADCEx_MultiModeConfigChannel+0xbe>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006106:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006108:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800610a:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800610c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006110:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8006112:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006116:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006118:	d00c      	beq.n	8006134 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 800611a:	4d4a      	ldr	r5, [pc, #296]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800611c:	42aa      	cmp	r2, r5
 800611e:	d048      	beq.n	80061b2 <HAL_ADCEx_MultiModeConfigChannel+0xba>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006120:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006122:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006126:	f042 0220 	orr.w	r2, r2, #32
 800612a:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800612c:	4618      	mov	r0, r3
 800612e:	b01d      	add	sp, #116	; 0x74
 8006130:	bc70      	pop	{r4, r5, r6}
 8006132:	4770      	bx	lr
 8006134:	4b44      	ldr	r3, [pc, #272]	; (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	075b      	lsls	r3, r3, #29
 800613a:	d50c      	bpl.n	8006156 <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 800613c:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800613e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006140:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006146:	65c2      	str	r2, [r0, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8006148:	2200      	movs	r2, #0
 800614a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 800614e:	4618      	mov	r0, r3
 8006150:	b01d      	add	sp, #116	; 0x74
 8006152:	bc70      	pop	{r4, r5, r6}
 8006154:	4770      	bx	lr
 8006156:	6893      	ldr	r3, [r2, #8]
 8006158:	075c      	lsls	r4, r3, #29
 800615a:	d4f0      	bmi.n	800613e <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800615c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006160:	d02e      	beq.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8006162:	4b39      	ldr	r3, [pc, #228]	; (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006164:	429a      	cmp	r2, r3
 8006166:	d02b      	beq.n	80061c0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006168:	2e00      	cmp	r6, #0
 800616a:	d059      	beq.n	8006220 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800616c:	4a37      	ldr	r2, [pc, #220]	; (800624c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800616e:	684c      	ldr	r4, [r1, #4]
 8006170:	6893      	ldr	r3, [r2, #8]
 8006172:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006176:	4323      	orrs	r3, r4
 8006178:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800617c:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8006180:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006182:	4b30      	ldr	r3, [pc, #192]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006184:	689c      	ldr	r4, [r3, #8]
 8006186:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800618a:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800618c:	4323      	orrs	r3, r4
 800618e:	4c30      	ldr	r4, [pc, #192]	; (8006250 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006190:	68a4      	ldr	r4, [r4, #8]
 8006192:	4323      	orrs	r3, r4
 8006194:	43db      	mvns	r3, r3
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	b143      	cbz	r3, 80061ae <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        MODIFY_REG(tmpADC_Common->CCR,
 800619c:	6894      	ldr	r4, [r2, #8]
 800619e:	688b      	ldr	r3, [r1, #8]
 80061a0:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 80061a4:	431e      	orrs	r6, r3
 80061a6:	f021 010f 	bic.w	r1, r1, #15
 80061aa:	430e      	orrs	r6, r1
 80061ac:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e7ca      	b.n	8006148 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 80061b2:	4b28      	ldr	r3, [pc, #160]	; (8006254 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80061b4:	e7bf      	b.n	8006136 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 80061b6:	2302      	movs	r3, #2
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	b01d      	add	sp, #116	; 0x74
 80061bc:	bc70      	pop	{r4, r5, r6}
 80061be:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80061c0:	b1ae      	cbz	r6, 80061ee <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80061c2:	4a25      	ldr	r2, [pc, #148]	; (8006258 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 80061c4:	684c      	ldr	r4, [r1, #4]
 80061c6:	6893      	ldr	r3, [r2, #8]
 80061c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80061cc:	4323      	orrs	r3, r4
 80061ce:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 80061d2:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 80061d6:	6093      	str	r3, [r2, #8]
 80061d8:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80061da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80061de:	6892      	ldr	r2, [r2, #8]
 80061e0:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	43db      	mvns	r3, r3
 80061e6:	4a1c      	ldr	r2, [pc, #112]	; (8006258 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	e7d5      	b.n	800619a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80061ee:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 80061f0:	6893      	ldr	r3, [r2, #8]
 80061f2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80061f6:	6093      	str	r3, [r2, #8]
 80061f8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80061fc:	4b12      	ldr	r3, [pc, #72]	; (8006248 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80061fe:	6889      	ldr	r1, [r1, #8]
 8006200:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006202:	4a15      	ldr	r2, [pc, #84]	; (8006258 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8006204:	430b      	orrs	r3, r1
 8006206:	43db      	mvns	r3, r3
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ce      	beq.n	80061ae <HAL_ADCEx_MultiModeConfigChannel+0xb6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006210:	6891      	ldr	r1, [r2, #8]
 8006212:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8006216:	f021 010f 	bic.w	r1, r1, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800621a:	2300      	movs	r3, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800621c:	6091      	str	r1, [r2, #8]
 800621e:	e793      	b.n	8006148 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006220:	4a0a      	ldr	r2, [pc, #40]	; (800624c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006222:	4908      	ldr	r1, [pc, #32]	; (8006244 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006224:	6893      	ldr	r3, [r2, #8]
 8006226:	4c0b      	ldr	r4, [pc, #44]	; (8006254 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006228:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800622c:	6093      	str	r3, [r2, #8]
 800622e:	6889      	ldr	r1, [r1, #8]
 8006230:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006232:	430b      	orrs	r3, r1
 8006234:	4906      	ldr	r1, [pc, #24]	; (8006250 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006236:	6889      	ldr	r1, [r1, #8]
 8006238:	430b      	orrs	r3, r1
 800623a:	43db      	mvns	r3, r3
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	e7e4      	b.n	800620c <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8006242:	bf00      	nop
 8006244:	50000400 	.word	0x50000400
 8006248:	50000100 	.word	0x50000100
 800624c:	50000700 	.word	0x50000700
 8006250:	50000600 	.word	0x50000600
 8006254:	50000500 	.word	0x50000500
 8006258:	50000300 	.word	0x50000300

0800625c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800625c:	4907      	ldr	r1, [pc, #28]	; (800627c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800625e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006260:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006262:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800626a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800626c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800626e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006276:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	e000ed00 	.word	0xe000ed00

08006280 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006280:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <HAL_NVIC_SetPriority+0x74>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006288:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800628a:	f1c3 0e07 	rsb	lr, r3, #7
 800628e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006292:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006296:	bf28      	it	cs
 8006298:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800629c:	f1bc 0f06 	cmp.w	ip, #6
 80062a0:	d91b      	bls.n	80062da <HAL_NVIC_SetPriority+0x5a>
 80062a2:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062a4:	f04f 3cff 	mov.w	ip, #4294967295
 80062a8:	fa0c fc03 	lsl.w	ip, ip, r3
 80062ac:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062b0:	f04f 3cff 	mov.w	ip, #4294967295
 80062b4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80062b8:	ea21 010c 	bic.w	r1, r1, ip
 80062bc:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80062be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80062c4:	db0c      	blt.n	80062e0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80062ca:	0109      	lsls	r1, r1, #4
 80062cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80062d0:	b2c9      	uxtb	r1, r1
 80062d2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80062d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80062da:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062dc:	4613      	mov	r3, r2
 80062de:	e7e7      	b.n	80062b0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_NVIC_SetPriority+0x78>)
 80062e2:	f000 000f 	and.w	r0, r0, #15
 80062e6:	0109      	lsls	r1, r1, #4
 80062e8:	4403      	add	r3, r0
 80062ea:	b2c9      	uxtb	r1, r1
 80062ec:	7619      	strb	r1, [r3, #24]
 80062ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80062f2:	bf00      	nop
 80062f4:	e000ed00 	.word	0xe000ed00
 80062f8:	e000ecfc 	.word	0xe000ecfc

080062fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80062fc:	2800      	cmp	r0, #0
 80062fe:	db08      	blt.n	8006312 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006300:	4a04      	ldr	r2, [pc, #16]	; (8006314 <HAL_NVIC_EnableIRQ+0x18>)
 8006302:	0941      	lsrs	r1, r0, #5
 8006304:	2301      	movs	r3, #1
 8006306:	f000 001f 	and.w	r0, r0, #31
 800630a:	fa03 f000 	lsl.w	r0, r3, r0
 800630e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006312:	4770      	bx	lr
 8006314:	e000e100 	.word	0xe000e100

08006318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006318:	3801      	subs	r0, #1
 800631a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800631e:	d210      	bcs.n	8006342 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006320:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006322:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006326:	4c08      	ldr	r4, [pc, #32]	; (8006348 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006328:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800632a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800632e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006332:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006334:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006336:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006338:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800633a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800633e:	6119      	str	r1, [r3, #16]
 8006340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006342:	2001      	movs	r0, #1
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	e000ed00 	.word	0xe000ed00

0800634c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800634c:	2800      	cmp	r0, #0
 800634e:	d078      	beq.n	8006442 <HAL_DMA_Init+0xf6>
{
 8006350:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006352:	4b3d      	ldr	r3, [pc, #244]	; (8006448 <HAL_DMA_Init+0xfc>)
 8006354:	6804      	ldr	r4, [r0, #0]
 8006356:	429c      	cmp	r4, r3
 8006358:	d95f      	bls.n	800641a <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800635a:	4a3c      	ldr	r2, [pc, #240]	; (800644c <HAL_DMA_Init+0x100>)
 800635c:	4b3c      	ldr	r3, [pc, #240]	; (8006450 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800635e:	493d      	ldr	r1, [pc, #244]	; (8006454 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006360:	4422      	add	r2, r4
 8006362:	fba3 3202 	umull	r3, r2, r3, r2
 8006366:	0912      	lsrs	r2, r2, #4
 8006368:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800636a:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800636c:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800636e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8006372:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006374:	69c6      	ldr	r6, [r0, #28]
 8006376:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800637a:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 800637c:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800637e:	430b      	orrs	r3, r1
 8006380:	6941      	ldr	r1, [r0, #20]
 8006382:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006384:	6981      	ldr	r1, [r0, #24]
 8006386:	430b      	orrs	r3, r1
 8006388:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800638a:	fa5f fc84 	uxtb.w	ip, r4
 800638e:	4e30      	ldr	r6, [pc, #192]	; (8006450 <HAL_DMA_Init+0x104>)
  tmp = hdma->Instance->CCR;
 8006390:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006392:	f1ac 0c08 	sub.w	ip, ip, #8
 8006396:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 800639a:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800639c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80063a0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80063a4:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80063a6:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 80063a8:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063aa:	4e2b      	ldr	r6, [pc, #172]	; (8006458 <HAL_DMA_Init+0x10c>)
 80063ac:	4b26      	ldr	r3, [pc, #152]	; (8006448 <HAL_DMA_Init+0xfc>)
 80063ae:	492b      	ldr	r1, [pc, #172]	; (800645c <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063b0:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	bf98      	it	ls
 80063b8:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063ba:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063be:	4c28      	ldr	r4, [pc, #160]	; (8006460 <HAL_DMA_Init+0x114>)
 80063c0:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063c2:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80063c6:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80063c8:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80063cc:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80063ce:	6484      	str	r4, [r0, #72]	; 0x48
 80063d0:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80063d4:	d02a      	beq.n	800642c <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063d6:	6845      	ldr	r5, [r0, #4]
 80063d8:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80063da:	3d01      	subs	r5, #1
 80063dc:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063de:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063e2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80063e6:	d827      	bhi.n	8006438 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063e8:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063ea:	491f      	ldr	r1, [pc, #124]	; (8006468 <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063ec:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80063ee:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063f0:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80063f2:	f004 041f 	and.w	r4, r4, #31
 80063f6:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80063fa:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063fc:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006400:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006402:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006404:	4b19      	ldr	r3, [pc, #100]	; (800646c <HAL_DMA_Init+0x120>)
 8006406:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006408:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800640a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800640c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800640e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006412:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 8006416:	4618      	mov	r0, r3
}
 8006418:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800641a:	4a15      	ldr	r2, [pc, #84]	; (8006470 <HAL_DMA_Init+0x124>)
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 800641e:	4915      	ldr	r1, [pc, #84]	; (8006474 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006420:	4422      	add	r2, r4
 8006422:	fba3 3202 	umull	r3, r2, r3, r2
 8006426:	0912      	lsrs	r2, r2, #4
 8006428:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800642a:	e79e      	b.n	800636a <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800642c:	2400      	movs	r4, #0
 800642e:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006430:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006434:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006438:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800643a:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800643e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8006440:	e7e2      	b.n	8006408 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 8006442:	2001      	movs	r0, #1
}
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40020407 	.word	0x40020407
 800644c:	bffdfbf8 	.word	0xbffdfbf8
 8006450:	cccccccd 	.word	0xcccccccd
 8006454:	40020400 	.word	0x40020400
 8006458:	40020800 	.word	0x40020800
 800645c:	40020820 	.word	0x40020820
 8006460:	40020880 	.word	0x40020880
 8006464:	1000823f 	.word	0x1000823f
 8006468:	40020940 	.word	0x40020940
 800646c:	40020900 	.word	0x40020900
 8006470:	bffdfff8 	.word	0xbffdfff8
 8006474:	40020000 	.word	0x40020000

08006478 <HAL_DMA_Start_IT>:
{
 8006478:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800647a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800647e:	2c01      	cmp	r4, #1
 8006480:	d051      	beq.n	8006526 <HAL_DMA_Start_IT+0xae>
 8006482:	2401      	movs	r4, #1
 8006484:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006488:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 800648c:	2c01      	cmp	r4, #1
 800648e:	d005      	beq.n	800649c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006490:	2300      	movs	r3, #0
 8006492:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8006496:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8006498:	2002      	movs	r0, #2
}
 800649a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800649c:	2402      	movs	r4, #2
 800649e:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064a2:	2400      	movs	r4, #0
 80064a4:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80064a6:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064a8:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 80064aa:	6825      	ldr	r5, [r4, #0]
 80064ac:	f025 0501 	bic.w	r5, r5, #1
 80064b0:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b2:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 80064b6:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80064b8:	b115      	cbz	r5, 80064c0 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064ba:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 80064be:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064c0:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80064c2:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80064c4:	f006 0c1f 	and.w	ip, r6, #31
 80064c8:	2601      	movs	r6, #1
 80064ca:	fa06 f60c 	lsl.w	r6, r6, ip
 80064ce:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80064d0:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064d2:	6883      	ldr	r3, [r0, #8]
 80064d4:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80064d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 80064d8:	bf0b      	itete	eq
 80064da:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80064dc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80064de:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80064e0:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80064e2:	b1bb      	cbz	r3, 8006514 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	f043 030e 	orr.w	r3, r3, #14
 80064ea:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80064ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	03d2      	lsls	r2, r2, #15
 80064f2:	d503      	bpl.n	80064fc <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064fa:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80064fc:	b11d      	cbz	r5, 8006506 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80064fe:	682b      	ldr	r3, [r5, #0]
 8006500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006504:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800650e:	6023      	str	r3, [r4, #0]
}
 8006510:	bcf0      	pop	{r4, r5, r6, r7}
 8006512:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	f023 0304 	bic.w	r3, r3, #4
 800651a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	f043 030a 	orr.w	r3, r3, #10
 8006522:	6023      	str	r3, [r4, #0]
 8006524:	e7e2      	b.n	80064ec <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8006526:	2002      	movs	r0, #2
}
 8006528:	bcf0      	pop	{r4, r5, r6, r7}
 800652a:	4770      	bx	lr

0800652c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800652c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8006530:	2a02      	cmp	r2, #2
{
 8006532:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006534:	d009      	beq.n	800654a <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006536:	2204      	movs	r2, #4
 8006538:	63c2      	str	r2, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800653a:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 800653c:	2200      	movs	r2, #0
    status = HAL_ERROR;
 800653e:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8006540:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8006548:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800654a:	6802      	ldr	r2, [r0, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800654c:	6c59      	ldr	r1, [r3, #68]	; 0x44
{
 800654e:	b430      	push	{r4, r5}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006550:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006552:	6810      	ldr	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006554:	6c1d      	ldr	r5, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006556:	f020 000e 	bic.w	r0, r0, #14
 800655a:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8006562:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 8006564:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006566:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE(hdma);
 8006568:	f020 0001 	bic.w	r0, r0, #1
 800656c:	6010      	str	r0, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800656e:	f001 011f 	and.w	r1, r1, #31
 8006572:	2201      	movs	r2, #1
 8006574:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006576:	e9d3 1014 	ldrd	r1, r0, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800657a:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800657c:	6061      	str	r1, [r4, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 800657e:	b138      	cbz	r0, 8006590 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006580:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006582:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800658a:	6002      	str	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800658c:	604c      	str	r4, [r1, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006590:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 8006592:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006594:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8006598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800659c:	bc30      	pop	{r4, r5}
 800659e:	4770      	bx	lr

080065a0 <HAL_DMA_Abort_IT>:
{
 80065a0:	b538      	push	{r3, r4, r5, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 80065a2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d009      	beq.n	80065be <HAL_DMA_Abort_IT+0x1e>
    hdma->State = HAL_DMA_STATE_READY;
 80065aa:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065ac:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80065ae:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065b0:	63c1      	str	r1, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80065b2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80065b6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    status = HAL_ERROR;
 80065ba:	4618      	mov	r0, r3
}
 80065bc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065be:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065c0:	6c84      	ldr	r4, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065c2:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065c6:	6c05      	ldr	r5, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065c8:	f021 010e 	bic.w	r1, r1, #14
 80065cc:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	f021 0101 	bic.w	r1, r1, #1
 80065d4:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065d6:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065d8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065de:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065e0:	f002 021f 	and.w	r2, r2, #31
 80065e4:	2301      	movs	r3, #1
 80065e6:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065e8:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ec:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065ee:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80065f0:	b132      	cbz	r2, 8006600 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065f2:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065f4:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fc:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065fe:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8006600:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006602:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8006604:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006606:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800660a:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 800660e:	b113      	cbz	r3, 8006616 <HAL_DMA_Abort_IT+0x76>
      hdma->XferAbortCallback(hdma);
 8006610:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006612:	4620      	mov	r0, r4
}
 8006614:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006616:	4618      	mov	r0, r3
}
 8006618:	bd38      	pop	{r3, r4, r5, pc}
 800661a:	bf00      	nop

0800661c <HAL_DMA_IRQHandler>:
{
 800661c:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800661e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006620:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8006622:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006624:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006626:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	2204      	movs	r2, #4
 800662e:	409a      	lsls	r2, r3
 8006630:	420a      	tst	r2, r1
 8006632:	d00e      	beq.n	8006652 <HAL_DMA_IRQHandler+0x36>
 8006634:	f014 0f04 	tst.w	r4, #4
 8006638:	d00b      	beq.n	8006652 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800663a:	682b      	ldr	r3, [r5, #0]
 800663c:	069b      	lsls	r3, r3, #26
 800663e:	d403      	bmi.n	8006648 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	f023 0304 	bic.w	r3, r3, #4
 8006646:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006648:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800664a:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800664c:	b1cb      	cbz	r3, 8006682 <HAL_DMA_IRQHandler+0x66>
}
 800664e:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006650:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006652:	2202      	movs	r2, #2
 8006654:	409a      	lsls	r2, r3
 8006656:	420a      	tst	r2, r1
 8006658:	d015      	beq.n	8006686 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 800665a:	f014 0f02 	tst.w	r4, #2
 800665e:	d012      	beq.n	8006686 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	0699      	lsls	r1, r3, #26
 8006664:	d406      	bmi.n	8006674 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	f023 030a 	bic.w	r3, r3, #10
 800666c:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800666e:	2301      	movs	r3, #1
 8006670:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8006674:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006676:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006678:	2100      	movs	r1, #0
 800667a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e5      	bne.n	800664e <HAL_DMA_IRQHandler+0x32>
}
 8006682:	bc70      	pop	{r4, r5, r6}
 8006684:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006686:	2208      	movs	r2, #8
 8006688:	409a      	lsls	r2, r3
 800668a:	420a      	tst	r2, r1
 800668c:	d0f9      	beq.n	8006682 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 800668e:	0722      	lsls	r2, r4, #28
 8006690:	d5f7      	bpl.n	8006682 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006692:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006694:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006696:	f022 020e 	bic.w	r2, r2, #14
 800669a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800669c:	2201      	movs	r2, #1
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80066a2:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066a4:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066a6:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80066a8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80066ac:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 80066b0:	2900      	cmp	r1, #0
 80066b2:	d0e6      	beq.n	8006682 <HAL_DMA_IRQHandler+0x66>
}
 80066b4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80066b6:	4708      	bx	r1

080066b8 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80066b8:	2800      	cmp	r0, #0
 80066ba:	f000 8149 	beq.w	8006950 <HAL_FDCAN_Init+0x298>
{
 80066be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80066c2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80066c6:	4604      	mov	r4, r0
 80066c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d073      	beq.n	80067b8 <HAL_FDCAN_Init+0x100>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	6993      	ldr	r3, [r2, #24]
 80066d4:	f023 0310 	bic.w	r3, r3, #16
 80066d8:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066da:	f7fc fb6f 	bl	8002dbc <HAL_GetTick>
 80066de:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80066e0:	e004      	b.n	80066ec <HAL_FDCAN_Init+0x34>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80066e2:	f7fc fb6b 	bl	8002dbc <HAL_GetTick>
 80066e6:	1b43      	subs	r3, r0, r5
 80066e8:	2b0a      	cmp	r3, #10
 80066ea:	d85b      	bhi.n	80067a4 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	699a      	ldr	r2, [r3, #24]
 80066f0:	0711      	lsls	r1, r2, #28
 80066f2:	d4f6      	bmi.n	80066e2 <HAL_FDCAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066fc:	f7fc fb5e 	bl	8002dbc <HAL_GetTick>
 8006700:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006702:	e004      	b.n	800670e <HAL_FDCAN_Init+0x56>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006704:	f7fc fb5a 	bl	8002dbc <HAL_GetTick>
 8006708:	1b40      	subs	r0, r0, r5
 800670a:	280a      	cmp	r0, #10
 800670c:	d84a      	bhi.n	80067a4 <HAL_FDCAN_Init+0xec>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	07d2      	lsls	r2, r2, #31
 8006714:	d5f6      	bpl.n	8006704 <HAL_FDCAN_Init+0x4c>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006716:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006718:	4996      	ldr	r1, [pc, #600]	; (8006974 <HAL_FDCAN_Init+0x2bc>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800671a:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 800671e:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006720:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006722:	f000 8110 	beq.w	8006946 <HAL_FDCAN_Init+0x28e>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006726:	7c22      	ldrb	r2, [r4, #16]
 8006728:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	bf0c      	ite	eq
 800672e:	f022 0240 	biceq.w	r2, r2, #64	; 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006732:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
 8006736:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006738:	7c62      	ldrb	r2, [r4, #17]
 800673a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	bf0c      	ite	eq
 8006740:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006744:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8006748:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800674a:	7ca2      	ldrb	r2, [r4, #18]
 800674c:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	bf0c      	ite	eq
 8006752:	f422 5280 	biceq.w	r2, r2, #4096	; 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006756:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800675a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006760:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006762:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006766:	4302      	orrs	r2, r0
 8006768:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006770:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006772:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006774:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006776:	f022 0210 	bic.w	r2, r2, #16
 800677a:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800677c:	d021      	beq.n	80067c2 <HAL_FDCAN_Init+0x10a>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800677e:	b321      	cbz	r1, 80067ca <HAL_FDCAN_Init+0x112>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006780:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006782:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006784:	f000 80f2 	beq.w	800696c <HAL_FDCAN_Init+0x2b4>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800678c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800678e:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006790:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006792:	f042 0210 	orr.w	r2, r2, #16
 8006796:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006798:	d117      	bne.n	80067ca <HAL_FDCAN_Init+0x112>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800679a:	699a      	ldr	r2, [r3, #24]
 800679c:	f042 0220 	orr.w	r2, r2, #32
 80067a0:	619a      	str	r2, [r3, #24]
 80067a2:	e012      	b.n	80067ca <HAL_FDCAN_Init+0x112>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80067a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80067a6:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80067a8:	f043 0301 	orr.w	r3, r3, #1
 80067ac:	6623      	str	r3, [r4, #96]	; 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80067ae:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80067b2:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80067b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80067b8:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80067bc:	f7fb f800 	bl	80017c0 <HAL_FDCAN_MspInit>
 80067c0:	e786      	b.n	80066d0 <HAL_FDCAN_Init+0x18>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	f042 0204 	orr.w	r2, r2, #4
 80067c8:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067ca:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067ce:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067d0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067d2:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067d4:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80067d8:	6a21      	ldr	r1, [r4, #32]
 80067da:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80067dc:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80067de:	6961      	ldr	r1, [r4, #20]
 80067e0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80067e2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80067e6:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80067ea:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80067ec:	d10e      	bne.n	800680c <HAL_FDCAN_Init+0x154>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80067ee:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	; 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80067f4:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80067f6:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80067f8:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80067fa:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80067fc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006800:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006802:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006804:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006806:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800680a:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800680c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006810:	6be0      	ldr	r0, [r4, #60]	; 0x3c
{
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006812:	4959      	ldr	r1, [pc, #356]	; (8006978 <HAL_FDCAN_Init+0x2c0>)
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006814:	4302      	orrs	r2, r0
  if (hfdcan->Instance == FDCAN2)
 8006816:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006818:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  if (hfdcan->Instance == FDCAN2)
 800681c:	f000 809a 	beq.w	8006954 <HAL_FDCAN_Init+0x29c>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8006820:	4a56      	ldr	r2, [pc, #344]	; (800697c <HAL_FDCAN_Init+0x2c4>)
 8006822:	4e57      	ldr	r6, [pc, #348]	; (8006980 <HAL_FDCAN_Init+0x2c8>)
 8006824:	4f57      	ldr	r7, [pc, #348]	; (8006984 <HAL_FDCAN_Init+0x2cc>)
 8006826:	4d58      	ldr	r5, [pc, #352]	; (8006988 <HAL_FDCAN_Init+0x2d0>)
 8006828:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800682c:	428b      	cmp	r3, r1
 800682e:	bf18      	it	ne
 8006830:	4691      	movne	r9, r2
 8006832:	f501 517d 	add.w	r1, r1, #16192	; 0x3f40
 8006836:	f1a2 0218 	sub.w	r2, r2, #24
 800683a:	f101 0110 	add.w	r1, r1, #16
 800683e:	bf18      	it	ne
 8006840:	4616      	movne	r6, r2
 8006842:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006846:	bf14      	ite	ne
 8006848:	4617      	movne	r7, r2
 800684a:	468e      	moveq	lr, r1
 800684c:	f1a2 02d8 	sub.w	r2, r2, #216	; 0xd8
 8006850:	f1a1 0140 	sub.w	r1, r1, #64	; 0x40
 8006854:	bf14      	ite	ne
 8006856:	4696      	movne	lr, r2
 8006858:	4688      	moveq	r8, r1
 800685a:	f1a2 0240 	sub.w	r2, r2, #64	; 0x40
 800685e:	f501 7138 	add.w	r1, r1, #736	; 0x2e0
 8006862:	bf14      	ite	ne
 8006864:	4690      	movne	r8, r2
 8006866:	468c      	moveq	ip, r1
 8006868:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800686c:	f5a1 7154 	sub.w	r1, r1, #848	; 0x350
 8006870:	bf14      	ite	ne
 8006872:	4694      	movne	ip, r2
 8006874:	46a9      	moveq	r9, r5
 8006876:	f5a2 7254 	sub.w	r2, r2, #848	; 0x350
 800687a:	bf08      	it	eq
 800687c:	460a      	moveq	r2, r1

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800687e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006882:	6b61      	ldr	r1, [r4, #52]	; 0x34
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006884:	6422      	str	r2, [r4, #64]	; 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006886:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 800688a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800688e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006892:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8006896:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006898:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800689c:	f10c 30ff 	add.w	r0, ip, #4294967295
 80068a0:	1a80      	subs	r0, r0, r2
 80068a2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80068a6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 80068aa:	0885      	lsrs	r5, r0, #2
 80068ac:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80068b0:	3501      	adds	r5, #1
 80068b2:	1c51      	adds	r1, r2, #1
 80068b4:	458c      	cmp	ip, r1
 80068b6:	bf38      	it	cc
 80068b8:	2501      	movcc	r5, #1
 80068ba:	2817      	cmp	r0, #23

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80068bc:	e9c4 e712 	strd	lr, r7, [r4, #72]	; 0x48

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80068c0:	e9c4 6914 	strd	r6, r9, [r4, #80]	; 0x50

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068c4:	f3c2 0380 	ubfx	r3, r2, #2, #1
 80068c8:	d91a      	bls.n	8006900 <HAL_FDCAN_Init+0x248>
 80068ca:	458c      	cmp	ip, r1
 80068cc:	bf2c      	ite	cs
 80068ce:	2100      	movcs	r1, #0
 80068d0:	2101      	movcc	r1, #1
 80068d2:	b9a9      	cbnz	r1, 8006900 <HAL_FDCAN_Init+0x248>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80068d4:	4616      	mov	r6, r2
 80068d6:	b10b      	cbz	r3, 80068dc <HAL_FDCAN_Init+0x224>
 80068d8:	f846 1b04 	str.w	r1, [r6], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068dc:	1aed      	subs	r5, r5, r3
 80068de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80068e2:	086a      	lsrs	r2, r5, #1
 80068e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80068e8:	2000      	movs	r0, #0
 80068ea:	2100      	movs	r1, #0
 80068ec:	e8e3 0102 	strd	r0, r1, [r3], #8
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d1fb      	bne.n	80068ec <HAL_FDCAN_Init+0x234>
 80068f4:	f025 0301 	bic.w	r3, r5, #1
 80068f8:	429d      	cmp	r5, r3
 80068fa:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80068fe:	d01a      	beq.n	8006936 <HAL_FDCAN_Init+0x27e>
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006900:	4611      	mov	r1, r2
 8006902:	2300      	movs	r3, #0
 8006904:	f841 3b04 	str.w	r3, [r1], #4
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006908:	458c      	cmp	ip, r1
 800690a:	d914      	bls.n	8006936 <HAL_FDCAN_Init+0x27e>
 800690c:	f102 0108 	add.w	r1, r2, #8
 8006910:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006912:	6053      	str	r3, [r2, #4]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006914:	d90f      	bls.n	8006936 <HAL_FDCAN_Init+0x27e>
 8006916:	f102 010c 	add.w	r1, r2, #12
 800691a:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800691c:	6093      	str	r3, [r2, #8]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800691e:	d90a      	bls.n	8006936 <HAL_FDCAN_Init+0x27e>
 8006920:	f102 0110 	add.w	r1, r2, #16
 8006924:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006926:	60d3      	str	r3, [r2, #12]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006928:	d905      	bls.n	8006936 <HAL_FDCAN_Init+0x27e>
 800692a:	f102 0114 	add.w	r1, r2, #20
 800692e:	458c      	cmp	ip, r1
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006930:	6113      	str	r3, [r2, #16]
 8006932:	bf88      	it	hi
 8006934:	6153      	strhi	r3, [r2, #20]
  hfdcan->LatestTxFifoQRequest = 0U;
 8006936:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006938:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800693a:	6620      	str	r0, [r4, #96]	; 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800693c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8006940:	65a0      	str	r0, [r4, #88]	; 0x58
}
 8006942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006946:	4a11      	ldr	r2, [pc, #68]	; (800698c <HAL_FDCAN_Init+0x2d4>)
 8006948:	6861      	ldr	r1, [r4, #4]
 800694a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
 800694e:	e6ea      	b.n	8006726 <HAL_FDCAN_Init+0x6e>
    return HAL_ERROR;
 8006950:	2001      	movs	r0, #1
}
 8006952:	4770      	bx	lr
 8006954:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800699c <HAL_FDCAN_Init+0x2e4>
 8006958:	4e0d      	ldr	r6, [pc, #52]	; (8006990 <HAL_FDCAN_Init+0x2d8>)
 800695a:	4f0e      	ldr	r7, [pc, #56]	; (8006994 <HAL_FDCAN_Init+0x2dc>)
 800695c:	f8df e040 	ldr.w	lr, [pc, #64]	; 80069a0 <HAL_FDCAN_Init+0x2e8>
 8006960:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80069a4 <HAL_FDCAN_Init+0x2ec>
 8006964:	f8df c040 	ldr.w	ip, [pc, #64]	; 80069a8 <HAL_FDCAN_Init+0x2f0>
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006968:	4a0b      	ldr	r2, [pc, #44]	; (8006998 <HAL_FDCAN_Init+0x2e0>)
 800696a:	e788      	b.n	800687e <HAL_FDCAN_Init+0x1c6>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800696c:	f042 0220 	orr.w	r2, r2, #32
 8006970:	619a      	str	r2, [r3, #24]
 8006972:	e72a      	b.n	80067ca <HAL_FDCAN_Init+0x112>
 8006974:	40006400 	.word	0x40006400
 8006978:	40006800 	.word	0x40006800
 800697c:	4000a678 	.word	0x4000a678
 8006980:	4000ad00 	.word	0x4000ad00
 8006984:	4000ac28 	.word	0x4000ac28
 8006988:	4000ad18 	.word	0x4000ad18
 800698c:	40006000 	.word	0x40006000
 8006990:	4000a9b0 	.word	0x4000a9b0
 8006994:	4000a8d8 	.word	0x4000a8d8
 8006998:	4000a750 	.word	0x4000a750
 800699c:	4000a9c8 	.word	0x4000a9c8
 80069a0:	4000a800 	.word	0x4000a800
 80069a4:	4000a7c0 	.word	0x4000a7c0
 80069a8:	4000aaa0 	.word	0x4000aaa0

080069ac <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80069ac:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069b0:	3a01      	subs	r2, #1
 80069b2:	2a01      	cmp	r2, #1
{
 80069b4:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069b6:	d905      	bls.n	80069c4 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80069b8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80069ba:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80069be:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80069c0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80069c2:	4770      	bx	lr
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80069c4:	6808      	ldr	r0, [r1, #0]
{
 80069c6:	b430      	push	{r4, r5}
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80069c8:	b978      	cbnz	r0, 80069ea <HAL_FDCAN_ConfigFilter+0x3e>
                         (sFilterConfig->FilterConfig << 27U) |
 80069ca:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 80069ce:	06d2      	lsls	r2, r2, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069d0:	ea42 7284 	orr.w	r2, r2, r4, lsl #30
      *FilterAddress = FilterElementW1;
 80069d4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069d6:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80069d8:	684d      	ldr	r5, [r1, #4]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069da:	4313      	orrs	r3, r2
                         (sFilterConfig->FilterID1 << 16U)    |
 80069dc:	690a      	ldr	r2, [r1, #16]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
      *FilterAddress = FilterElementW1;
 80069e2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
}
 80069e6:	bc30      	pop	{r4, r5}
 80069e8:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069ea:	6c58      	ldr	r0, [r3, #68]	; 0x44
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80069ec:	688a      	ldr	r2, [r1, #8]
 80069ee:	694b      	ldr	r3, [r1, #20]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069f0:	684c      	ldr	r4, [r1, #4]
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80069f2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80069f6:	e9d1 5203 	ldrd	r5, r2, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069fa:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80069fe:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8006a02:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    return HAL_OK;
 8006a06:	2000      	movs	r0, #0
}
 8006a08:	bc30      	pop	{r4, r5}
      *FilterAddress = FilterElementW2;
 8006a0a:	f8cc 3004 	str.w	r3, [ip, #4]
}
 8006a0e:	4770      	bx	lr

08006a10 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a10:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8006a14:	2a01      	cmp	r2, #1
{
 8006a16:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a18:	d005      	beq.n	8006a26 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a1a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006a1c:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8006a20:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a22:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006a24:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a26:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a2e:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a30:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006a38:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a3a:	6619      	str	r1, [r3, #96]	; 0x60
    return HAL_OK;
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop

08006a40 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006a42:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8006a46:	2b02      	cmp	r3, #2
{
 8006a48:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006a4a:	d10c      	bne.n	8006a66 <HAL_FDCAN_AddMessageToTxFifoQ+0x26>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006a4c:	6805      	ldr	r5, [r0, #0]
 8006a4e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
 8006a52:	f413 1c00 	ands.w	ip, r3, #2097152	; 0x200000
 8006a56:	d00d      	beq.n	8006a74 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006a58:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8006a5e:	2001      	movs	r0, #1
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006a60:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006a66:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006a68:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006a6c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006a6e:	f8ce 3060 	str.w	r3, [lr, #96]	; 0x60
}
 8006a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006a74:	f8d5 60c4 	ldr.w	r6, [r5, #196]	; 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a78:	684b      	ldr	r3, [r1, #4]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006a7a:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d13a      	bne.n	8006af8 <HAL_FDCAN_AddMessageToTxFifoQ+0xb8>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
                   FDCAN_STANDARD_ID |
 8006a82:	688b      	ldr	r3, [r1, #8]
 8006a84:	690f      	ldr	r7, [r1, #16]
 8006a86:	431f      	orrs	r7, r3
                   pTxHeader->TxFrameType |
                   (pTxHeader->Identifier << 18U));
 8006a88:	680b      	ldr	r3, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a8a:	ea47 4783 	orr.w	r7, r7, r3, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006a8e:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8006a92:	694c      	ldr	r4, [r1, #20]
 8006a94:	4303      	orrs	r3, r0
 8006a96:	68c8      	ldr	r0, [r1, #12]
 8006a98:	4323      	orrs	r3, r4
 8006a9a:	6a0c      	ldr	r4, [r1, #32]
 8006a9c:	4303      	orrs	r3, r0
 8006a9e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
                 pTxHeader->FDFormat |
                 pTxHeader->BitRateSwitch |
                 pTxHeader->DataLength);

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006aa2:	f8de 0054 	ldr.w	r0, [lr, #84]	; 0x54
 8006aa6:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006aaa:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006aae:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006ab2:	4c15      	ldr	r4, [pc, #84]	; (8006b08 <HAL_FDCAN_AddMessageToTxFifoQ+0xc8>)
  *TxAddress = TxElementW2;
 8006ab4:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006ab6:	89cb      	ldrh	r3, [r1, #14]
 8006ab8:	5ce3      	ldrb	r3, [r4, r3]
 8006aba:	b1a3      	cbz	r3, 8006ae6 <HAL_FDCAN_AddMessageToTxFifoQ+0xa6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006abc:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006abe:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ac0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ac2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006ac6:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006ac8:	433b      	orrs	r3, r7
 8006aca:	7857      	ldrb	r7, [r2, #1]
 8006acc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ad0:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006ad4:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ad8:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006ada:	89cb      	ldrh	r3, [r1, #14]
 8006adc:	5ce3      	ldrb	r3, [r4, r3]
 8006ade:	459c      	cmp	ip, r3
 8006ae0:	f102 0204 	add.w	r2, r2, #4
 8006ae4:	d3ea      	bcc.n	8006abc <HAL_FDCAN_AddMessageToTxFifoQ+0x7c>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	fa03 f606 	lsl.w	r6, r3, r6
 8006aec:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    return HAL_OK;
 8006af0:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006af2:	f8ce 6058 	str.w	r6, [lr, #88]	; 0x58
}
 8006af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8006af8:	690b      	ldr	r3, [r1, #16]
 8006afa:	680f      	ldr	r7, [r1, #0]
 8006afc:	431f      	orrs	r7, r3
 8006afe:	688b      	ldr	r3, [r1, #8]
 8006b00:	431f      	orrs	r7, r3
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006b02:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 8006b06:	e7c2      	b.n	8006a8e <HAL_FDCAN_AddMessageToTxFifoQ+0x4e>
 8006b08:	0800cb40 	.word	0x0800cb40

08006b0c <HAL_FDCAN_GetRxMessage>:
{
 8006b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b0e:	4604      	mov	r4, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006b10:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006b14:	2802      	cmp	r0, #2
 8006b16:	d10d      	bne.n	8006b34 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b18:	2940      	cmp	r1, #64	; 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006b1a:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b1e:	d00f      	beq.n	8006b40 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006b20:	f8dc 0098 	ldr.w	r0, [ip, #152]	; 0x98
 8006b24:	0700      	lsls	r0, r0, #28
 8006b26:	d15f      	bne.n	8006be8 <HAL_FDCAN_GetRxMessage+0xdc>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b28:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        return HAL_ERROR;
 8006b2e:	2001      	movs	r0, #1
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006b30:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006b36:	f043 0308 	orr.w	r3, r3, #8
    return HAL_ERROR;
 8006b3a:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b3c:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006b40:	f8dc 0090 	ldr.w	r0, [ip, #144]	; 0x90
 8006b44:	0705      	lsls	r5, r0, #28
 8006b46:	d0ef      	beq.n	8006b28 <HAL_FDCAN_GetRxMessage+0x1c>
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006b48:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006b4c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006b4e:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006b52:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006b56:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006b5a:	6828      	ldr	r0, [r5, #0]
 8006b5c:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006b60:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d14f      	bne.n	8006c06 <HAL_FDCAN_GetRxMessage+0xfa>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006b66:	6828      	ldr	r0, [r5, #0]
 8006b68:	f3c0 408a 	ubfx	r0, r0, #18, #11
 8006b6c:	6010      	str	r0, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006b6e:	6828      	ldr	r0, [r5, #0]
 8006b70:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8006b74:	6090      	str	r0, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006b76:	6828      	ldr	r0, [r5, #0]
 8006b78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006b7c:	6110      	str	r0, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006b7e:	88a8      	ldrh	r0, [r5, #4]
 8006b80:	61d0      	str	r0, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006b82:	6868      	ldr	r0, [r5, #4]
 8006b84:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
 8006b88:	60d0      	str	r0, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006b8a:	686e      	ldr	r6, [r5, #4]
 8006b8c:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8006b90:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006b92:	686e      	ldr	r6, [r5, #4]
 8006b94:	f406 1600 	and.w	r6, r6, #2097152	; 0x200000
 8006b98:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006b9a:	79ee      	ldrb	r6, [r5, #7]
 8006b9c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006ba0:	0c00      	lsrs	r0, r0, #16
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006ba2:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006ba4:	4e1a      	ldr	r6, [pc, #104]	; (8006c10 <HAL_FDCAN_GetRxMessage+0x104>)
 8006ba6:	f816 e000 	ldrb.w	lr, [r6, r0]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006baa:	6868      	ldr	r0, [r5, #4]
 8006bac:	0fc0      	lsrs	r0, r0, #31
 8006bae:	6250      	str	r0, [r2, #36]	; 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006bb0:	f1be 0f00 	cmp.w	lr, #0
 8006bb4:	d010      	beq.n	8006bd8 <HAL_FDCAN_GetRxMessage+0xcc>
 8006bb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8006bba:	f105 0c07 	add.w	ip, r5, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006bbe:	4663      	mov	r3, ip
 8006bc0:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8006bc4:	f80e 0f01 	strb.w	r0, [lr, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006bc8:	89d0      	ldrh	r0, [r2, #14]
 8006bca:	3b06      	subs	r3, #6
 8006bcc:	5c30      	ldrb	r0, [r6, r0]
 8006bce:	1b5b      	subs	r3, r3, r5
 8006bd0:	4298      	cmp	r0, r3
 8006bd2:	d8f4      	bhi.n	8006bbe <HAL_FDCAN_GetRxMessage+0xb2>
 8006bd4:	f8d4 c000 	ldr.w	ip, [r4]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006bd8:	2940      	cmp	r1, #64	; 0x40
      hfdcan->Instance->RXF0A = GetIndex;
 8006bda:	bf0c      	ite	eq
 8006bdc:	f8cc 7094 	streq.w	r7, [ip, #148]	; 0x94
      hfdcan->Instance->RXF1A = GetIndex;
 8006be0:	f8cc 709c 	strne.w	r7, [ip, #156]	; 0x9c
    return HAL_OK;
 8006be4:	2000      	movs	r0, #0
}
 8006be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006be8:	f8dc 7098 	ldr.w	r7, [ip, #152]	; 0x98
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006bec:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006bee:	f3c7 2701 	ubfx	r7, r7, #8, #2
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006bf2:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 8006bf6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006bfa:	6828      	ldr	r0, [r5, #0]
 8006bfc:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
 8006c00:	6050      	str	r0, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d0af      	beq.n	8006b66 <HAL_FDCAN_GetRxMessage+0x5a>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006c06:	6828      	ldr	r0, [r5, #0]
 8006c08:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006c0c:	e7ae      	b.n	8006b6c <HAL_FDCAN_GetRxMessage+0x60>
 8006c0e:	bf00      	nop
 8006c10:	0800cb40 	.word	0x0800cb40

08006c14 <HAL_FDCAN_GetTxFifoFreeLevel>:
  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006c14:	6803      	ldr	r3, [r0, #0]
 8006c16:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
}
 8006c1a:	f000 0007 	and.w	r0, r0, #7
 8006c1e:	4770      	bx	lr

08006c20 <HAL_FDCAN_ActivateNotification>:
{
 8006c20:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006c22:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006c26:	3801      	subs	r0, #1
 8006c28:	2801      	cmp	r0, #1
 8006c2a:	d905      	bls.n	8006c38 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c2e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006c32:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c34:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c36:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c38:	681b      	ldr	r3, [r3, #0]
{
 8006c3a:	b430      	push	{r4, r5}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c3c:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c40:	6d98      	ldr	r0, [r3, #88]	; 0x58
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c42:	d03d      	beq.n	8006cc0 <HAL_FDCAN_ActivateNotification+0xa0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006c44:	07c4      	lsls	r4, r0, #31
 8006c46:	d43b      	bmi.n	8006cc0 <HAL_FDCAN_ActivateNotification+0xa0>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006c48:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8006c4a:	f044 0401 	orr.w	r4, r4, #1
 8006c4e:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006c50:	b1cd      	cbz	r5, 8006c86 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006c52:	07c5      	lsls	r5, r0, #31
 8006c54:	d517      	bpl.n	8006c86 <HAL_FDCAN_ActivateNotification+0x66>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006c56:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8006c58:	f040 0002 	orr.w	r0, r0, #2
 8006c5c:	65d8      	str	r0, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006c5e:	060c      	lsls	r4, r1, #24
 8006c60:	d504      	bpl.n	8006c6c <HAL_FDCAN_ActivateNotification+0x4c>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006c62:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8006c66:	4310      	orrs	r0, r2
 8006c68:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006c6c:	05c8      	lsls	r0, r1, #23
 8006c6e:	d504      	bpl.n	8006c7a <HAL_FDCAN_ActivateNotification+0x5a>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006c70:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8006c74:	4302      	orrs	r2, r0
 8006c76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006c7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c7c:	4311      	orrs	r1, r2
    return HAL_OK;
 8006c7e:	2000      	movs	r0, #0
}
 8006c80:	bc30      	pop	{r4, r5}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006c82:	6559      	str	r1, [r3, #84]	; 0x54
}
 8006c84:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006c86:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006c8a:	d001      	beq.n	8006c90 <HAL_FDCAN_ActivateNotification+0x70>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006c8c:	0784      	lsls	r4, r0, #30
 8006c8e:	d4e2      	bmi.n	8006c56 <HAL_FDCAN_ActivateNotification+0x36>
 8006c90:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006c94:	d131      	bne.n	8006cfa <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006c96:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006c9a:	d001      	beq.n	8006ca0 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006c9c:	0704      	lsls	r4, r0, #28
 8006c9e:	d4da      	bmi.n	8006c56 <HAL_FDCAN_ActivateNotification+0x36>
 8006ca0:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006ca4:	d001      	beq.n	8006caa <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006ca6:	06c5      	lsls	r5, r0, #27
 8006ca8:	d4d5      	bmi.n	8006c56 <HAL_FDCAN_ActivateNotification+0x36>
 8006caa:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006cae:	d001      	beq.n	8006cb4 <HAL_FDCAN_ActivateNotification+0x94>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006cb0:	0684      	lsls	r4, r0, #26
 8006cb2:	d4d0      	bmi.n	8006c56 <HAL_FDCAN_ActivateNotification+0x36>
 8006cb4:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006cb8:	d0d1      	beq.n	8006c5e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006cba:	0645      	lsls	r5, r0, #25
 8006cbc:	d5cf      	bpl.n	8006c5e <HAL_FDCAN_ActivateNotification+0x3e>
 8006cbe:	e7ca      	b.n	8006c56 <HAL_FDCAN_ActivateNotification+0x36>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006cc0:	f011 0f38 	tst.w	r1, #56	; 0x38
 8006cc4:	d001      	beq.n	8006cca <HAL_FDCAN_ActivateNotification+0xaa>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006cc6:	0784      	lsls	r4, r0, #30
 8006cc8:	d5be      	bpl.n	8006c48 <HAL_FDCAN_ActivateNotification+0x28>
 8006cca:	f411 7fe0 	tst.w	r1, #448	; 0x1c0
 8006cce:	d117      	bne.n	8006d00 <HAL_FDCAN_ActivateNotification+0xe0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006cd0:	f411 5ff0 	tst.w	r1, #7680	; 0x1e00
 8006cd4:	d001      	beq.n	8006cda <HAL_FDCAN_ActivateNotification+0xba>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006cd6:	0704      	lsls	r4, r0, #28
 8006cd8:	d5b6      	bpl.n	8006c48 <HAL_FDCAN_ActivateNotification+0x28>
 8006cda:	f411 4f60 	tst.w	r1, #57344	; 0xe000
 8006cde:	d001      	beq.n	8006ce4 <HAL_FDCAN_ActivateNotification+0xc4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006ce0:	06c4      	lsls	r4, r0, #27
 8006ce2:	d5b1      	bpl.n	8006c48 <HAL_FDCAN_ActivateNotification+0x28>
 8006ce4:	f411 3f40 	tst.w	r1, #196608	; 0x30000
 8006ce8:	d001      	beq.n	8006cee <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006cea:	0684      	lsls	r4, r0, #26
 8006cec:	d5ac      	bpl.n	8006c48 <HAL_FDCAN_ActivateNotification+0x28>
 8006cee:	f411 0f7c 	tst.w	r1, #16515072	; 0xfc0000
 8006cf2:	d0ad      	beq.n	8006c50 <HAL_FDCAN_ActivateNotification+0x30>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006cf4:	0644      	lsls	r4, r0, #25
 8006cf6:	d4ab      	bmi.n	8006c50 <HAL_FDCAN_ActivateNotification+0x30>
 8006cf8:	e7a6      	b.n	8006c48 <HAL_FDCAN_ActivateNotification+0x28>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006cfa:	0745      	lsls	r5, r0, #29
 8006cfc:	d4ab      	bmi.n	8006c56 <HAL_FDCAN_ActivateNotification+0x36>
 8006cfe:	e7ca      	b.n	8006c96 <HAL_FDCAN_ActivateNotification+0x76>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006d00:	0744      	lsls	r4, r0, #29
 8006d02:	d5a1      	bpl.n	8006c48 <HAL_FDCAN_ActivateNotification+0x28>
 8006d04:	e7e4      	b.n	8006cd0 <HAL_FDCAN_ActivateNotification+0xb0>
 8006d06:	bf00      	nop

08006d08 <HAL_FDCAN_TxEventFifoCallback>:
}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <HAL_FDCAN_RxFifo1Callback>:
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop

08006d10 <HAL_FDCAN_TxFifoEmptyCallback>:
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <HAL_FDCAN_TxBufferCompleteCallback>:
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop

08006d18 <HAL_FDCAN_TxBufferAbortCallback>:
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop

08006d1c <HAL_FDCAN_TimestampWraparoundCallback>:
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop

08006d20 <HAL_FDCAN_TimeoutOccurredCallback>:
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop

08006d24 <HAL_FDCAN_HighPriorityMessageCallback>:
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <HAL_FDCAN_ErrorCallback>:
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop

08006d2c <HAL_FDCAN_ErrorStatusCallback>:
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop

08006d30 <HAL_FDCAN_IRQHandler>:
{
 8006d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006d34:	6803      	ldr	r3, [r0, #0]
 8006d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d3a:	ea02 0901 	and.w	r9, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d40:	6d59      	ldr	r1, [r3, #84]	; 0x54
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006d42:	6d1f      	ldr	r7, [r3, #80]	; 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d44:	ea02 0801 	and.w	r8, r2, r1
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006d4a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d4c:	4017      	ands	r7, r2
  Errors &= hfdcan->Instance->IE;
 8006d4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006d50:	6d1e      	ldr	r6, [r3, #80]	; 0x50
  Errors &= hfdcan->Instance->IE;
 8006d52:	4015      	ands	r5, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d56:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d5a:	0652      	lsls	r2, r2, #25
{
 8006d5c:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d5e:	f409 59e0 	and.w	r9, r9, #7168	; 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d62:	f008 0807 	and.w	r8, r8, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d66:	f007 0738 	and.w	r7, r7, #56	; 0x38
  Errors &= hfdcan->Instance->IE;
 8006d6a:	f405 0571 	and.w	r5, r5, #15794176	; 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006d6e:	f406 2660 	and.w	r6, r6, #917504	; 0xe0000
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006d72:	d502      	bpl.n	8006d7a <HAL_FDCAN_IRQHandler+0x4a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d76:	0651      	lsls	r1, r2, #25
 8006d78:	d473      	bmi.n	8006e62 <HAL_FDCAN_IRQHandler+0x132>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006d7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d7c:	05d2      	lsls	r2, r2, #23
 8006d7e:	d502      	bpl.n	8006d86 <HAL_FDCAN_IRQHandler+0x56>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d82:	05d0      	lsls	r0, r2, #23
 8006d84:	d45d      	bmi.n	8006e42 <HAL_FDCAN_IRQHandler+0x112>
  if (TxEventFifoITs != 0U)
 8006d86:	f1b9 0f00 	cmp.w	r9, #0
 8006d8a:	d14a      	bne.n	8006e22 <HAL_FDCAN_IRQHandler+0xf2>
  if (RxFifo0ITs != 0U)
 8006d8c:	f1b8 0f00 	cmp.w	r8, #0
 8006d90:	d137      	bne.n	8006e02 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8006d92:	2f00      	cmp	r7, #0
 8006d94:	d13e      	bne.n	8006e14 <HAL_FDCAN_IRQHandler+0xe4>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d98:	0591      	lsls	r1, r2, #22
 8006d9a:	d502      	bpl.n	8006da2 <HAL_FDCAN_IRQHandler+0x72>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d9e:	0592      	lsls	r2, r2, #22
 8006da0:	d475      	bmi.n	8006e8e <HAL_FDCAN_IRQHandler+0x15e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006da4:	0617      	lsls	r7, r2, #24
 8006da6:	d502      	bpl.n	8006dae <HAL_FDCAN_IRQHandler+0x7e>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006daa:	0610      	lsls	r0, r2, #24
 8006dac:	d477      	bmi.n	8006e9e <HAL_FDCAN_IRQHandler+0x16e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006db0:	0491      	lsls	r1, r2, #18
 8006db2:	d502      	bpl.n	8006dba <HAL_FDCAN_IRQHandler+0x8a>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8006db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006db6:	0492      	lsls	r2, r2, #18
 8006db8:	d459      	bmi.n	8006e6e <HAL_FDCAN_IRQHandler+0x13e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dbc:	0417      	lsls	r7, r2, #16
 8006dbe:	d502      	bpl.n	8006dc6 <HAL_FDCAN_IRQHandler+0x96>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8006dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc2:	0410      	lsls	r0, r2, #16
 8006dc4:	d45b      	bmi.n	8006e7e <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc8:	0451      	lsls	r1, r2, #17
 8006dca:	d509      	bpl.n	8006de0 <HAL_FDCAN_IRQHandler+0xb0>
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dce:	0452      	lsls	r2, r2, #17
 8006dd0:	d506      	bpl.n	8006de0 <HAL_FDCAN_IRQHandler+0xb0>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006dd6:	651a      	str	r2, [r3, #80]	; 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006dd8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006dda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dde:	6622      	str	r2, [r4, #96]	; 0x60
  if (ErrorStatusITs != 0U)
 8006de0:	b94e      	cbnz	r6, 8006df6 <HAL_FDCAN_IRQHandler+0xc6>
  if (Errors != 0U)
 8006de2:	b125      	cbz	r5, 8006dee <HAL_FDCAN_IRQHandler+0xbe>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	651d      	str	r5, [r3, #80]	; 0x50
    hfdcan->ErrorCode |= Errors;
 8006de8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006dea:	431d      	orrs	r5, r3
 8006dec:	6625      	str	r5, [r4, #96]	; 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006dee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006df0:	bb13      	cbnz	r3, 8006e38 <HAL_FDCAN_IRQHandler+0x108>
}
 8006df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006df6:	651e      	str	r6, [r3, #80]	; 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f7ff ff96 	bl	8006d2c <HAL_FDCAN_ErrorStatusCallback>
 8006e00:	e7ef      	b.n	8006de2 <HAL_FDCAN_IRQHandler+0xb2>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e02:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006e06:	4641      	mov	r1, r8
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7fd fd11 	bl	8004830 <HAL_FDCAN_RxFifo0Callback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e0e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo1ITs != 0U)
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	d0c0      	beq.n	8006d96 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e14:	651f      	str	r7, [r3, #80]	; 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006e16:	4639      	mov	r1, r7
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff ff77 	bl	8006d0c <HAL_FDCAN_RxFifo1Callback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	e7b9      	b.n	8006d96 <HAL_FDCAN_IRQHandler+0x66>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e22:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006e26:	4649      	mov	r1, r9
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f7ff ff6d 	bl	8006d08 <HAL_FDCAN_TxEventFifoCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e2e:	6823      	ldr	r3, [r4, #0]
  if (RxFifo0ITs != 0U)
 8006e30:	f1b8 0f00 	cmp.w	r8, #0
 8006e34:	d0ad      	beq.n	8006d92 <HAL_FDCAN_IRQHandler+0x62>
 8006e36:	e7e4      	b.n	8006e02 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff ff75 	bl	8006d28 <HAL_FDCAN_ErrorCallback>
}
 8006e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006e42:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006e46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006e4a:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e50:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7ff ff60 	bl	8006d18 <HAL_FDCAN_TxBufferAbortCallback>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e58:	6823      	ldr	r3, [r4, #0]
  if (TxEventFifoITs != 0U)
 8006e5a:	f1b9 0f00 	cmp.w	r9, #0
 8006e5e:	d095      	beq.n	8006d8c <HAL_FDCAN_IRQHandler+0x5c>
 8006e60:	e7df      	b.n	8006e22 <HAL_FDCAN_IRQHandler+0xf2>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006e62:	2240      	movs	r2, #64	; 0x40
 8006e64:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006e66:	f7ff ff5d 	bl	8006d24 <HAL_FDCAN_HighPriorityMessageCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	e785      	b.n	8006d7a <HAL_FDCAN_IRQHandler+0x4a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006e6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e72:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7ff ff51 	bl	8006d1c <HAL_FDCAN_TimestampWraparoundCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	e79d      	b.n	8006dba <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006e82:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7ff ff4b 	bl	8006d20 <HAL_FDCAN_TimeoutOccurredCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	e79b      	b.n	8006dc6 <HAL_FDCAN_IRQHandler+0x96>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e92:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006e94:	4620      	mov	r0, r4
 8006e96:	f7ff ff3b 	bl	8006d10 <HAL_FDCAN_TxFifoEmptyCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	e781      	b.n	8006da2 <HAL_FDCAN_IRQHandler+0x72>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006e9e:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006ea2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006ea6:	4011      	ands	r1, r2
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7ff ff31 	bl	8006d14 <HAL_FDCAN_TxBufferCompleteCallback>
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	e77b      	b.n	8006dae <HAL_FDCAN_IRQHandler+0x7e>
 8006eb6:	bf00      	nop

08006eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ebc:	680c      	ldr	r4, [r1, #0]
{
 8006ebe:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ec0:	2c00      	cmp	r4, #0
 8006ec2:	f000 8083 	beq.w	8006fcc <HAL_GPIO_Init+0x114>
 8006ec6:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eca:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80070a4 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 8006ece:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ed0:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ed4:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ed6:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8006eda:	ea15 0804 	ands.w	r8, r5, r4
 8006ede:	d06f      	beq.n	8006fc0 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006ee0:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8006ee4:	f007 0203 	and.w	r2, r7, #3
 8006ee8:	1e51      	subs	r1, r2, #1
 8006eea:	2901      	cmp	r1, #1
 8006eec:	d971      	bls.n	8006fd2 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eee:	2a03      	cmp	r2, #3
 8006ef0:	f040 80b0 	bne.w	8007054 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ef4:	fa02 f20c 	lsl.w	r2, r2, ip
 8006ef8:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8006efa:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006efc:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006efe:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f00:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006f04:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f06:	d05b      	beq.n	8006fc0 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f08:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8006f14:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8006f18:	f002 0201 	and.w	r2, r2, #1
 8006f1c:	9203      	str	r2, [sp, #12]
 8006f1e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f20:	f023 0203 	bic.w	r2, r3, #3
 8006f24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006f28:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f2c:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f30:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f32:	00ad      	lsls	r5, r5, #2
 8006f34:	260f      	movs	r6, #15
 8006f36:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f3a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f3e:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f42:	d019      	beq.n	8006f78 <HAL_GPIO_Init+0xc0>
 8006f44:	4e51      	ldr	r6, [pc, #324]	; (800708c <HAL_GPIO_Init+0x1d4>)
 8006f46:	42b0      	cmp	r0, r6
 8006f48:	f000 808f 	beq.w	800706a <HAL_GPIO_Init+0x1b2>
 8006f4c:	4e50      	ldr	r6, [pc, #320]	; (8007090 <HAL_GPIO_Init+0x1d8>)
 8006f4e:	42b0      	cmp	r0, r6
 8006f50:	f000 808f 	beq.w	8007072 <HAL_GPIO_Init+0x1ba>
 8006f54:	4e4f      	ldr	r6, [pc, #316]	; (8007094 <HAL_GPIO_Init+0x1dc>)
 8006f56:	42b0      	cmp	r0, r6
 8006f58:	f000 8081 	beq.w	800705e <HAL_GPIO_Init+0x1a6>
 8006f5c:	4e4e      	ldr	r6, [pc, #312]	; (8007098 <HAL_GPIO_Init+0x1e0>)
 8006f5e:	42b0      	cmp	r0, r6
 8006f60:	f000 808d 	beq.w	800707e <HAL_GPIO_Init+0x1c6>
 8006f64:	4e4d      	ldr	r6, [pc, #308]	; (800709c <HAL_GPIO_Init+0x1e4>)
 8006f66:	42b0      	cmp	r0, r6
 8006f68:	bf0c      	ite	eq
 8006f6a:	f04f 0e05 	moveq.w	lr, #5
 8006f6e:	f04f 0e06 	movne.w	lr, #6
 8006f72:	fa0e f505 	lsl.w	r5, lr, r5
 8006f76:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f78:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f7a:	4a49      	ldr	r2, [pc, #292]	; (80070a0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8006f7c:	4948      	ldr	r1, [pc, #288]	; (80070a0 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 8006f7e:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8006f80:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f84:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8006f86:	bf54      	ite	pl
 8006f88:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8006f8a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 8006f8e:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8006f90:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f92:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8006f94:	4942      	ldr	r1, [pc, #264]	; (80070a0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8006f96:	bf54      	ite	pl
 8006f98:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8006f9a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 8006f9e:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8006fa0:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8006fa2:	4a3f      	ldr	r2, [pc, #252]	; (80070a0 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fa4:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8006fa6:	bf54      	ite	pl
 8006fa8:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8006faa:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 8006fae:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006fb0:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fb2:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8006fb4:	493a      	ldr	r1, [pc, #232]	; (80070a0 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8006fb6:	bf54      	ite	pl
 8006fb8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8006fba:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 8006fbe:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8006fc0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006fc2:	fa34 f203 	lsrs.w	r2, r4, r3
 8006fc6:	f10c 0c02 	add.w	ip, ip, #2
 8006fca:	d184      	bne.n	8006ed6 <HAL_GPIO_Init+0x1e>
  }
}
 8006fcc:	b005      	add	sp, #20
 8006fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006fd2:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fd4:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fd8:	f04f 0e03 	mov.w	lr, #3
 8006fdc:	fa0e fe0c 	lsl.w	lr, lr, ip
 8006fe0:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fe4:	fa06 f60c 	lsl.w	r6, r6, ip
 8006fe8:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8006fea:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fec:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8006ff0:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ff4:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ff8:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8006ffc:	409d      	lsls	r5, r3
 8006ffe:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8007002:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8007004:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007006:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800700a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800700e:	fa05 f50c 	lsl.w	r5, r5, ip
 8007012:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007016:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8007018:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800701a:	fa02 f20c 	lsl.w	r2, r2, ip
 800701e:	f47f af6c 	bne.w	8006efa <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8007022:	08dd      	lsrs	r5, r3, #3
 8007024:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8007028:	9501      	str	r5, [sp, #4]
 800702a:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800702c:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8007030:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007032:	f003 0e07 	and.w	lr, r3, #7
 8007036:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800703a:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800703c:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007040:	fa06 fe0e 	lsl.w	lr, r6, lr
 8007044:	9e00      	ldr	r6, [sp, #0]
 8007046:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 800704a:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800704c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8007050:	6235      	str	r5, [r6, #32]
 8007052:	e752      	b.n	8006efa <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007054:	2103      	movs	r1, #3
 8007056:	fa01 f10c 	lsl.w	r1, r1, ip
 800705a:	43c9      	mvns	r1, r1
 800705c:	e7d2      	b.n	8007004 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800705e:	f04f 0e03 	mov.w	lr, #3
 8007062:	fa0e f505 	lsl.w	r5, lr, r5
 8007066:	4329      	orrs	r1, r5
 8007068:	e786      	b.n	8006f78 <HAL_GPIO_Init+0xc0>
 800706a:	fa0b f505 	lsl.w	r5, fp, r5
 800706e:	4329      	orrs	r1, r5
 8007070:	e782      	b.n	8006f78 <HAL_GPIO_Init+0xc0>
 8007072:	f04f 0e02 	mov.w	lr, #2
 8007076:	fa0e f505 	lsl.w	r5, lr, r5
 800707a:	4329      	orrs	r1, r5
 800707c:	e77c      	b.n	8006f78 <HAL_GPIO_Init+0xc0>
 800707e:	f04f 0e04 	mov.w	lr, #4
 8007082:	fa0e f505 	lsl.w	r5, lr, r5
 8007086:	4329      	orrs	r1, r5
 8007088:	e776      	b.n	8006f78 <HAL_GPIO_Init+0xc0>
 800708a:	bf00      	nop
 800708c:	48000400 	.word	0x48000400
 8007090:	48000800 	.word	0x48000800
 8007094:	48000c00 	.word	0x48000c00
 8007098:	48001000 	.word	0x48001000
 800709c:	48001400 	.word	0x48001400
 80070a0:	40010400 	.word	0x40010400
 80070a4:	40021000 	.word	0x40021000

080070a8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80070a8:	6903      	ldr	r3, [r0, #16]
 80070aa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80070ac:	bf14      	ite	ne
 80070ae:	2001      	movne	r0, #1
 80070b0:	2000      	moveq	r0, #0
 80070b2:	4770      	bx	lr

080070b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070b4:	b10a      	cbz	r2, 80070ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070b6:	6181      	str	r1, [r0, #24]
 80070b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070ba:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop

080070c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80070c0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80070c2:	ea01 0203 	and.w	r2, r1, r3
 80070c6:	ea21 0103 	bic.w	r1, r1, r3
 80070ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070ce:	6181      	str	r1, [r0, #24]
}
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop

080070d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80070d4:	4a04      	ldr	r2, [pc, #16]	; (80070e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80070d6:	6951      	ldr	r1, [r2, #20]
 80070d8:	4201      	tst	r1, r0
 80070da:	d100      	bne.n	80070de <HAL_GPIO_EXTI_IRQHandler+0xa>
 80070dc:	4770      	bx	lr
{
 80070de:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070e0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070e2:	f7fc f97d 	bl	80033e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80070e6:	bd08      	pop	{r3, pc}
 80070e8:	40010400 	.word	0x40010400

080070ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80070ec:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070ee:	4a3b      	ldr	r2, [pc, #236]	; (80071dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80070f0:	b970      	cbnz	r0, 8007110 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070fc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007100:	d023      	beq.n	800714a <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8007106:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800710a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 800710e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007110:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007114:	d009      	beq.n	800712a <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007116:	6813      	ldr	r3, [r2, #0]
}
 8007118:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800711c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007120:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 8007124:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007126:	6013      	str	r3, [r2, #0]
}
 8007128:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007134:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007138:	d02f      	beq.n	800719a <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800713a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800713e:	2000      	movs	r0, #0
}
 8007140:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8007148:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800714a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800714e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007152:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007154:	4c22      	ldr	r4, [pc, #136]	; (80071e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007156:	4823      	ldr	r0, [pc, #140]	; (80071e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007158:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800715c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007160:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	2132      	movs	r1, #50	; 0x32
 8007166:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800716a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800716c:	fba0 0303 	umull	r0, r3, r0, r3
 8007170:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007172:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007174:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007178:	d506      	bpl.n	8007188 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800717a:	e000      	b.n	800717e <HAL_PWREx_ControlVoltageScaling+0x92>
 800717c:	b123      	cbz	r3, 8007188 <HAL_PWREx_ControlVoltageScaling+0x9c>
 800717e:	6951      	ldr	r1, [r2, #20]
 8007180:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007182:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007186:	d4f9      	bmi.n	800717c <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007188:	4b14      	ldr	r3, [pc, #80]	; (80071dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 800718e:	bf54      	ite	pl
 8007190:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8007192:	2003      	movmi	r0, #3
}
 8007194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007198:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800719a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071a2:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071a4:	4c0e      	ldr	r4, [pc, #56]	; (80071e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80071a6:	480f      	ldr	r0, [pc, #60]	; (80071e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80071a8:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80071ac:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80071b0:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	2132      	movs	r1, #50	; 0x32
 80071b6:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071ba:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071bc:	fba0 0303 	umull	r0, r3, r0, r3
 80071c0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071c2:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80071c4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071c8:	d5de      	bpl.n	8007188 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80071ca:	e001      	b.n	80071d0 <HAL_PWREx_ControlVoltageScaling+0xe4>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0db      	beq.n	8007188 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80071d0:	6951      	ldr	r1, [r2, #20]
 80071d2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80071d4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80071d8:	d5d6      	bpl.n	8007188 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80071da:	e7f7      	b.n	80071cc <HAL_PWREx_ControlVoltageScaling+0xe0>
 80071dc:	40007000 	.word	0x40007000
 80071e0:	20000008 	.word	0x20000008
 80071e4:	431bde83 	.word	0x431bde83

080071e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80071e8:	4a02      	ldr	r2, [pc, #8]	; (80071f4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80071ea:	6893      	ldr	r3, [r2, #8]
 80071ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071f0:	6093      	str	r3, [r2, #8]
}
 80071f2:	4770      	bx	lr
 80071f4:	40007000 	.word	0x40007000

080071f8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f000 81c3 	beq.w	8007584 <HAL_RCC_OscConfig+0x38c>
{
 80071fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007202:	6803      	ldr	r3, [r0, #0]
 8007204:	07d9      	lsls	r1, r3, #31
{
 8007206:	b082      	sub	sp, #8
 8007208:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800720a:	d52d      	bpl.n	8007268 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800720c:	49a6      	ldr	r1, [pc, #664]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 800720e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007210:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007212:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007216:	2a0c      	cmp	r2, #12
 8007218:	f000 810a 	beq.w	8007430 <HAL_RCC_OscConfig+0x238>
 800721c:	2a08      	cmp	r2, #8
 800721e:	f000 810c 	beq.w	800743a <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007222:	6863      	ldr	r3, [r4, #4]
 8007224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007228:	f000 8133 	beq.w	8007492 <HAL_RCC_OscConfig+0x29a>
 800722c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007230:	f000 819b 	beq.w	800756a <HAL_RCC_OscConfig+0x372>
 8007234:	4d9c      	ldr	r5, [pc, #624]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 8007236:	682a      	ldr	r2, [r5, #0]
 8007238:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800723c:	602a      	str	r2, [r5, #0]
 800723e:	682a      	ldr	r2, [r5, #0]
 8007240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007244:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007246:	2b00      	cmp	r3, #0
 8007248:	f040 8128 	bne.w	800749c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fb fdb6 	bl	8002dbc <HAL_GetTick>
 8007250:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007252:	e005      	b.n	8007260 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007254:	f7fb fdb2 	bl	8002dbc <HAL_GetTick>
 8007258:	1b80      	subs	r0, r0, r6
 800725a:	2864      	cmp	r0, #100	; 0x64
 800725c:	f200 8142 	bhi.w	80074e4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	039f      	lsls	r7, r3, #14
 8007264:	d4f6      	bmi.n	8007254 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	079e      	lsls	r6, r3, #30
 800726a:	d528      	bpl.n	80072be <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800726c:	4a8e      	ldr	r2, [pc, #568]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 800726e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007270:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007272:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007276:	2b0c      	cmp	r3, #12
 8007278:	f000 80ec 	beq.w	8007454 <HAL_RCC_OscConfig+0x25c>
 800727c:	2b04      	cmp	r3, #4
 800727e:	f000 80ee 	beq.w	800745e <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007282:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007284:	4d88      	ldr	r5, [pc, #544]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 811d 	beq.w	80074c6 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007292:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fb fd92 	bl	8002dbc <HAL_GetTick>
 8007298:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800729a:	e005      	b.n	80072a8 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800729c:	f7fb fd8e 	bl	8002dbc <HAL_GetTick>
 80072a0:	1b80      	subs	r0, r0, r6
 80072a2:	2802      	cmp	r0, #2
 80072a4:	f200 811e 	bhi.w	80074e4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	0558      	lsls	r0, r3, #21
 80072ac:	d5f6      	bpl.n	800729c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ae:	686b      	ldr	r3, [r5, #4]
 80072b0:	6922      	ldr	r2, [r4, #16]
 80072b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80072ba:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	071a      	lsls	r2, r3, #28
 80072c0:	d519      	bpl.n	80072f6 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072c2:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072c4:	4d78      	ldr	r5, [pc, #480]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 809e 	beq.w	8007408 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80072cc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d8:	f7fb fd70 	bl	8002dbc <HAL_GetTick>
 80072dc:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072de:	e005      	b.n	80072ec <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e0:	f7fb fd6c 	bl	8002dbc <HAL_GetTick>
 80072e4:	1b80      	subs	r0, r0, r6
 80072e6:	2802      	cmp	r0, #2
 80072e8:	f200 80fc 	bhi.w	80074e4 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80072ec:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80072f0:	079f      	lsls	r7, r3, #30
 80072f2:	d5f5      	bpl.n	80072e0 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	0759      	lsls	r1, r3, #29
 80072f8:	d541      	bpl.n	800737e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072fa:	4b6b      	ldr	r3, [pc, #428]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 80072fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072fe:	00d2      	lsls	r2, r2, #3
 8007300:	f100 80f4 	bmi.w	80074ec <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007304:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007306:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800730a:	659a      	str	r2, [r3, #88]	; 0x58
 800730c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007316:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007318:	4e64      	ldr	r6, [pc, #400]	; (80074ac <HAL_RCC_OscConfig+0x2b4>)
 800731a:	6833      	ldr	r3, [r6, #0]
 800731c:	05df      	lsls	r7, r3, #23
 800731e:	f140 8113 	bpl.w	8007548 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	2b01      	cmp	r3, #1
 8007326:	f000 80e3 	beq.w	80074f0 <HAL_RCC_OscConfig+0x2f8>
 800732a:	2b05      	cmp	r3, #5
 800732c:	f000 8169 	beq.w	8007602 <HAL_RCC_OscConfig+0x40a>
 8007330:	4e5d      	ldr	r6, [pc, #372]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 8007332:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800733e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8007342:	f022 0204 	bic.w	r2, r2, #4
 8007346:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 80d7 	bne.w	80074fe <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007350:	f7fb fd34 	bl	8002dbc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007354:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007358:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800735a:	e005      	b.n	8007368 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735c:	f7fb fd2e 	bl	8002dbc <HAL_GetTick>
 8007360:	1bc0      	subs	r0, r0, r7
 8007362:	4540      	cmp	r0, r8
 8007364:	f200 80be 	bhi.w	80074e4 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007368:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800736c:	079a      	lsls	r2, r3, #30
 800736e:	d4f5      	bmi.n	800735c <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007370:	b125      	cbz	r5, 800737c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007372:	4a4d      	ldr	r2, [pc, #308]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 8007374:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800737a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	069b      	lsls	r3, r3, #26
 8007380:	d518      	bpl.n	80073b4 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007382:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007384:	4d48      	ldr	r5, [pc, #288]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80ca 	beq.w	8007520 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 800738c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007390:	f043 0301 	orr.w	r3, r3, #1
 8007394:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007398:	f7fb fd10 	bl	8002dbc <HAL_GetTick>
 800739c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800739e:	e005      	b.n	80073ac <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073a0:	f7fb fd0c 	bl	8002dbc <HAL_GetTick>
 80073a4:	1b80      	subs	r0, r0, r6
 80073a6:	2802      	cmp	r0, #2
 80073a8:	f200 809c 	bhi.w	80074e4 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80073b0:	079f      	lsls	r7, r3, #30
 80073b2:	d5f5      	bpl.n	80073a0 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073b4:	69e0      	ldr	r0, [r4, #28]
 80073b6:	b318      	cbz	r0, 8007400 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073b8:	4d3b      	ldr	r5, [pc, #236]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 80073ba:	68ab      	ldr	r3, [r5, #8]
 80073bc:	f003 030c 	and.w	r3, r3, #12
 80073c0:	2b0c      	cmp	r3, #12
 80073c2:	f000 812c 	beq.w	800761e <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c6:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073c8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80073ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ce:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073d0:	f000 80da 	beq.w	8007588 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80073d4:	68eb      	ldr	r3, [r5, #12]
 80073d6:	f023 0303 	bic.w	r3, r3, #3
 80073da:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80073dc:	68eb      	ldr	r3, [r5, #12]
 80073de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80073e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073e6:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e8:	f7fb fce8 	bl	8002dbc <HAL_GetTick>
 80073ec:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073ee:	e004      	b.n	80073fa <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f0:	f7fb fce4 	bl	8002dbc <HAL_GetTick>
 80073f4:	1b00      	subs	r0, r0, r4
 80073f6:	2802      	cmp	r0, #2
 80073f8:	d874      	bhi.n	80074e4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073fa:	682b      	ldr	r3, [r5, #0]
 80073fc:	019b      	lsls	r3, r3, #6
 80073fe:	d4f7      	bmi.n	80073f0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8007400:	2000      	movs	r0, #0
}
 8007402:	b002      	add	sp, #8
 8007404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007408:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007414:	f7fb fcd2 	bl	8002dbc <HAL_GetTick>
 8007418:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800741a:	e004      	b.n	8007426 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800741c:	f7fb fcce 	bl	8002dbc <HAL_GetTick>
 8007420:	1b80      	subs	r0, r0, r6
 8007422:	2802      	cmp	r0, #2
 8007424:	d85e      	bhi.n	80074e4 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007426:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800742a:	0798      	lsls	r0, r3, #30
 800742c:	d4f6      	bmi.n	800741c <HAL_RCC_OscConfig+0x224>
 800742e:	e761      	b.n	80072f4 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007430:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007434:	2903      	cmp	r1, #3
 8007436:	f47f aef4 	bne.w	8007222 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800743a:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	0392      	lsls	r2, r2, #14
 8007440:	f57f af12 	bpl.w	8007268 <HAL_RCC_OscConfig+0x70>
 8007444:	6862      	ldr	r2, [r4, #4]
 8007446:	2a00      	cmp	r2, #0
 8007448:	f47f af0e 	bne.w	8007268 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 800744c:	2001      	movs	r0, #1
}
 800744e:	b002      	add	sp, #8
 8007450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007454:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007458:	2a02      	cmp	r2, #2
 800745a:	f47f af12 	bne.w	8007282 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	055d      	lsls	r5, r3, #21
 8007464:	d502      	bpl.n	800746c <HAL_RCC_OscConfig+0x274>
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0ef      	beq.n	800744c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800746c:	4a0e      	ldr	r2, [pc, #56]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 800746e:	6920      	ldr	r0, [r4, #16]
 8007470:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007472:	490f      	ldr	r1, [pc, #60]	; (80074b0 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007474:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007478:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800747c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800747e:	6808      	ldr	r0, [r1, #0]
 8007480:	f7fe f914 	bl	80056ac <HAL_InitTick>
 8007484:	2800      	cmp	r0, #0
 8007486:	d1e1      	bne.n	800744c <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	071a      	lsls	r2, r3, #28
 800748c:	f57f af33 	bpl.w	80072f6 <HAL_RCC_OscConfig+0xfe>
 8007490:	e717      	b.n	80072c2 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007492:	4a05      	ldr	r2, [pc, #20]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
 8007494:	6813      	ldr	r3, [r2, #0]
 8007496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800749a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800749c:	f7fb fc8e 	bl	8002dbc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074a0:	4e01      	ldr	r6, [pc, #4]	; (80074a8 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80074a2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074a4:	e00b      	b.n	80074be <HAL_RCC_OscConfig+0x2c6>
 80074a6:	bf00      	nop
 80074a8:	40021000 	.word	0x40021000
 80074ac:	40007000 	.word	0x40007000
 80074b0:	20000010 	.word	0x20000010
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074b4:	f7fb fc82 	bl	8002dbc <HAL_GetTick>
 80074b8:	1b40      	subs	r0, r0, r5
 80074ba:	2864      	cmp	r0, #100	; 0x64
 80074bc:	d812      	bhi.n	80074e4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074be:	6833      	ldr	r3, [r6, #0]
 80074c0:	039b      	lsls	r3, r3, #14
 80074c2:	d5f7      	bpl.n	80074b4 <HAL_RCC_OscConfig+0x2bc>
 80074c4:	e6cf      	b.n	8007266 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80074c6:	682b      	ldr	r3, [r5, #0]
 80074c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80074ce:	f7fb fc75 	bl	8002dbc <HAL_GetTick>
 80074d2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	0559      	lsls	r1, r3, #21
 80074d8:	d5d6      	bpl.n	8007488 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074da:	f7fb fc6f 	bl	8002dbc <HAL_GetTick>
 80074de:	1b80      	subs	r0, r0, r6
 80074e0:	2802      	cmp	r0, #2
 80074e2:	d9f7      	bls.n	80074d4 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 80074e4:	2003      	movs	r0, #3
}
 80074e6:	b002      	add	sp, #8
 80074e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80074ec:	2500      	movs	r5, #0
 80074ee:	e713      	b.n	8007318 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074f0:	4a65      	ldr	r2, [pc, #404]	; (8007688 <HAL_RCC_OscConfig+0x490>)
 80074f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80074f6:	f043 0301 	orr.w	r3, r3, #1
 80074fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80074fe:	f7fb fc5d 	bl	8002dbc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007502:	4f61      	ldr	r7, [pc, #388]	; (8007688 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8007504:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007506:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800750a:	e004      	b.n	8007516 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fb fc56 	bl	8002dbc <HAL_GetTick>
 8007510:	1b80      	subs	r0, r0, r6
 8007512:	4540      	cmp	r0, r8
 8007514:	d8e6      	bhi.n	80074e4 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007516:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800751a:	0799      	lsls	r1, r3, #30
 800751c:	d5f6      	bpl.n	800750c <HAL_RCC_OscConfig+0x314>
 800751e:	e727      	b.n	8007370 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8007520:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 800752c:	f7fb fc46 	bl	8002dbc <HAL_GetTick>
 8007530:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007532:	e004      	b.n	800753e <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007534:	f7fb fc42 	bl	8002dbc <HAL_GetTick>
 8007538:	1b80      	subs	r0, r0, r6
 800753a:	2802      	cmp	r0, #2
 800753c:	d8d2      	bhi.n	80074e4 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800753e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007542:	0798      	lsls	r0, r3, #30
 8007544:	d4f6      	bmi.n	8007534 <HAL_RCC_OscConfig+0x33c>
 8007546:	e735      	b.n	80073b4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007548:	6833      	ldr	r3, [r6, #0]
 800754a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800754e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007550:	f7fb fc34 	bl	8002dbc <HAL_GetTick>
 8007554:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007556:	6833      	ldr	r3, [r6, #0]
 8007558:	05d8      	lsls	r0, r3, #23
 800755a:	f53f aee2 	bmi.w	8007322 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755e:	f7fb fc2d 	bl	8002dbc <HAL_GetTick>
 8007562:	1bc0      	subs	r0, r0, r7
 8007564:	2802      	cmp	r0, #2
 8007566:	d9f6      	bls.n	8007556 <HAL_RCC_OscConfig+0x35e>
 8007568:	e7bc      	b.n	80074e4 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800756a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800756e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007580:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007582:	e78b      	b.n	800749c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8007584:	2001      	movs	r0, #1
}
 8007586:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8007588:	f7fb fc18 	bl	8002dbc <HAL_GetTick>
 800758c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800758e:	e004      	b.n	800759a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007590:	f7fb fc14 	bl	8002dbc <HAL_GetTick>
 8007594:	1b80      	subs	r0, r0, r6
 8007596:	2802      	cmp	r0, #2
 8007598:	d8a4      	bhi.n	80074e4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	0199      	lsls	r1, r3, #6
 800759e:	d4f7      	bmi.n	8007590 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075a0:	68e9      	ldr	r1, [r5, #12]
 80075a2:	4b3a      	ldr	r3, [pc, #232]	; (800768c <HAL_RCC_OscConfig+0x494>)
 80075a4:	6a22      	ldr	r2, [r4, #32]
 80075a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075a8:	4e37      	ldr	r6, [pc, #220]	; (8007688 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075aa:	400b      	ands	r3, r1
 80075ac:	4313      	orrs	r3, r2
 80075ae:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80075b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80075b6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80075ba:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80075be:	3801      	subs	r0, #1
 80075c0:	0849      	lsrs	r1, r1, #1
 80075c2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80075c6:	3901      	subs	r1, #1
 80075c8:	0852      	lsrs	r2, r2, #1
 80075ca:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80075ce:	3a01      	subs	r2, #1
 80075d0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80075d4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80075d6:	682b      	ldr	r3, [r5, #0]
 80075d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075dc:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075de:	68eb      	ldr	r3, [r5, #12]
 80075e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075e4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80075e6:	f7fb fbe9 	bl	8002dbc <HAL_GetTick>
 80075ea:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ec:	e005      	b.n	80075fa <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ee:	f7fb fbe5 	bl	8002dbc <HAL_GetTick>
 80075f2:	1b00      	subs	r0, r0, r4
 80075f4:	2802      	cmp	r0, #2
 80075f6:	f63f af75 	bhi.w	80074e4 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075fa:	6833      	ldr	r3, [r6, #0]
 80075fc:	019a      	lsls	r2, r3, #6
 80075fe:	d5f6      	bpl.n	80075ee <HAL_RCC_OscConfig+0x3f6>
 8007600:	e6fe      	b.n	8007400 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007602:	4b21      	ldr	r3, [pc, #132]	; (8007688 <HAL_RCC_OscConfig+0x490>)
 8007604:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007608:	f042 0204 	orr.w	r2, r2, #4
 800760c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007610:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007614:	f042 0201 	orr.w	r2, r2, #1
 8007618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800761c:	e76f      	b.n	80074fe <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800761e:	2801      	cmp	r0, #1
 8007620:	f43f aeef 	beq.w	8007402 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8007624:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007626:	6a22      	ldr	r2, [r4, #32]
 8007628:	f003 0103 	and.w	r1, r3, #3
 800762c:	4291      	cmp	r1, r2
 800762e:	f47f af0d 	bne.w	800744c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007632:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007634:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007638:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800763a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800763e:	f47f af05 	bne.w	800744c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007642:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007648:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800764c:	f47f aefe 	bne.w	800744c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007650:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007652:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007656:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800765a:	f47f aef7 	bne.w	800744c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800765e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007660:	0852      	lsrs	r2, r2, #1
 8007662:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8007666:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007668:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800766c:	f47f aeee 	bne.w	800744c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007670:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007672:	0852      	lsrs	r2, r2, #1
 8007674:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007678:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800767a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 800767e:	bf14      	ite	ne
 8007680:	2001      	movne	r0, #1
 8007682:	2000      	moveq	r0, #0
 8007684:	e6bd      	b.n	8007402 <HAL_RCC_OscConfig+0x20a>
 8007686:	bf00      	nop
 8007688:	40021000 	.word	0x40021000
 800768c:	019f800c 	.word	0x019f800c

08007690 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007690:	4b18      	ldr	r3, [pc, #96]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x64>)
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	f002 020c 	and.w	r2, r2, #12
 8007698:	2a04      	cmp	r2, #4
 800769a:	d027      	beq.n	80076ec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800769c:	689a      	ldr	r2, [r3, #8]
 800769e:	f002 020c 	and.w	r2, r2, #12
 80076a2:	2a08      	cmp	r2, #8
 80076a4:	d024      	beq.n	80076f0 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	f002 020c 	and.w	r2, r2, #12
 80076ac:	2a0c      	cmp	r2, #12
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80076b0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80076b2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076b4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076b6:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076b8:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 80076bc:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076be:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80076c2:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076c6:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076c8:	bf0c      	ite	eq
 80076ca:	4b0b      	ldreq	r3, [pc, #44]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076cc:	4b0b      	ldrne	r3, [pc, #44]	; (80076fc <HAL_RCC_GetSysClockFreq+0x6c>)
 80076ce:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076d2:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <HAL_RCC_GetSysClockFreq+0x64>)
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076da:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076de:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076e0:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076e4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80076e6:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80076ea:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80076ec:	4803      	ldr	r0, [pc, #12]	; (80076fc <HAL_RCC_GetSysClockFreq+0x6c>)
 80076ee:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80076f0:	4801      	ldr	r0, [pc, #4]	; (80076f8 <HAL_RCC_GetSysClockFreq+0x68>)
 80076f2:	4770      	bx	lr
 80076f4:	40021000 	.word	0x40021000
 80076f8:	007a1200 	.word	0x007a1200
 80076fc:	00f42400 	.word	0x00f42400

08007700 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007700:	2800      	cmp	r0, #0
 8007702:	f000 80ee 	beq.w	80078e2 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007706:	4a7f      	ldr	r2, [pc, #508]	; (8007904 <HAL_RCC_ClockConfig+0x204>)
{
 8007708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800770c:	6813      	ldr	r3, [r2, #0]
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	428b      	cmp	r3, r1
 8007714:	460d      	mov	r5, r1
 8007716:	4604      	mov	r4, r0
 8007718:	d20c      	bcs.n	8007734 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	f023 030f 	bic.w	r3, r3, #15
 8007720:	430b      	orrs	r3, r1
 8007722:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007724:	6813      	ldr	r3, [r2, #0]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	428b      	cmp	r3, r1
 800772c:	d002      	beq.n	8007734 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800772e:	2001      	movs	r0, #1
}
 8007730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	07df      	lsls	r7, r3, #31
 8007738:	d563      	bpl.n	8007802 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800773a:	6862      	ldr	r2, [r4, #4]
 800773c:	2a03      	cmp	r2, #3
 800773e:	f000 809a 	beq.w	8007876 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007742:	4b71      	ldr	r3, [pc, #452]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007744:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007746:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007748:	f000 8091 	beq.w	800786e <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800774c:	055b      	lsls	r3, r3, #21
 800774e:	d5ee      	bpl.n	800772e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007750:	f7ff ff9e 	bl	8007690 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007754:	4b6d      	ldr	r3, [pc, #436]	; (800790c <HAL_RCC_ClockConfig+0x20c>)
 8007756:	4298      	cmp	r0, r3
 8007758:	f200 80c5 	bhi.w	80078e6 <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800775c:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800775e:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007762:	4e69      	ldr	r6, [pc, #420]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 8007764:	68b3      	ldr	r3, [r6, #8]
 8007766:	f023 0303 	bic.w	r3, r3, #3
 800776a:	431a      	orrs	r2, r3
 800776c:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 800776e:	f7fb fb25 	bl	8002dbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007772:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007776:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007778:	e004      	b.n	8007784 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800777a:	f7fb fb1f 	bl	8002dbc <HAL_GetTick>
 800777e:	1bc0      	subs	r0, r0, r7
 8007780:	4540      	cmp	r0, r8
 8007782:	d871      	bhi.n	8007868 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007784:	68b3      	ldr	r3, [r6, #8]
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	f003 030c 	and.w	r3, r3, #12
 800778c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007790:	d1f3      	bne.n	800777a <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	079f      	lsls	r7, r3, #30
 8007796:	d436      	bmi.n	8007806 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8007798:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800779c:	d103      	bne.n	80077a6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800779e:	68b3      	ldr	r3, [r6, #8]
 80077a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077a4:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077a6:	4e57      	ldr	r6, [pc, #348]	; (8007904 <HAL_RCC_ClockConfig+0x204>)
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	42ab      	cmp	r3, r5
 80077b0:	d846      	bhi.n	8007840 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	075a      	lsls	r2, r3, #29
 80077b6:	d506      	bpl.n	80077c6 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077b8:	4953      	ldr	r1, [pc, #332]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 80077ba:	68e0      	ldr	r0, [r4, #12]
 80077bc:	688a      	ldr	r2, [r1, #8]
 80077be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077c2:	4302      	orrs	r2, r0
 80077c4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077c6:	071b      	lsls	r3, r3, #28
 80077c8:	d507      	bpl.n	80077da <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077ca:	4a4f      	ldr	r2, [pc, #316]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 80077cc:	6921      	ldr	r1, [r4, #16]
 80077ce:	6893      	ldr	r3, [r2, #8]
 80077d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80077d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80077d8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077da:	f7ff ff59 	bl	8007690 <HAL_RCC_GetSysClockFreq>
 80077de:	4a4a      	ldr	r2, [pc, #296]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 80077e0:	4c4b      	ldr	r4, [pc, #300]	; (8007910 <HAL_RCC_ClockConfig+0x210>)
 80077e2:	6892      	ldr	r2, [r2, #8]
 80077e4:	494b      	ldr	r1, [pc, #300]	; (8007914 <HAL_RCC_ClockConfig+0x214>)
 80077e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80077ea:	4603      	mov	r3, r0
 80077ec:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80077ee:	484a      	ldr	r0, [pc, #296]	; (8007918 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077f0:	f002 021f 	and.w	r2, r2, #31
 80077f4:	40d3      	lsrs	r3, r2
 80077f6:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80077f8:	6800      	ldr	r0, [r0, #0]
}
 80077fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80077fe:	f7fd bf55 	b.w	80056ac <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007802:	079e      	lsls	r6, r3, #30
 8007804:	d5cf      	bpl.n	80077a6 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007806:	0758      	lsls	r0, r3, #29
 8007808:	d504      	bpl.n	8007814 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800780a:	493f      	ldr	r1, [pc, #252]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 800780c:	688a      	ldr	r2, [r1, #8]
 800780e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007812:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007814:	0719      	lsls	r1, r3, #28
 8007816:	d506      	bpl.n	8007826 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007818:	4a3b      	ldr	r2, [pc, #236]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 800781a:	6893      	ldr	r3, [r2, #8]
 800781c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007820:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007824:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007826:	4a38      	ldr	r2, [pc, #224]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 8007828:	68a1      	ldr	r1, [r4, #8]
 800782a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800782c:	4e35      	ldr	r6, [pc, #212]	; (8007904 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800782e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007832:	430b      	orrs	r3, r1
 8007834:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007836:	6833      	ldr	r3, [r6, #0]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	42ab      	cmp	r3, r5
 800783e:	d9b8      	bls.n	80077b2 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007840:	6833      	ldr	r3, [r6, #0]
 8007842:	f023 030f 	bic.w	r3, r3, #15
 8007846:	432b      	orrs	r3, r5
 8007848:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800784a:	f7fb fab7 	bl	8002dbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800784e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007852:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007854:	6833      	ldr	r3, [r6, #0]
 8007856:	f003 030f 	and.w	r3, r3, #15
 800785a:	42ab      	cmp	r3, r5
 800785c:	d0a9      	beq.n	80077b2 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800785e:	f7fb faad 	bl	8002dbc <HAL_GetTick>
 8007862:	1bc0      	subs	r0, r0, r7
 8007864:	4540      	cmp	r0, r8
 8007866:	d9f5      	bls.n	8007854 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8007868:	2003      	movs	r0, #3
}
 800786a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800786e:	039a      	lsls	r2, r3, #14
 8007870:	f53f af6e 	bmi.w	8007750 <HAL_RCC_ClockConfig+0x50>
 8007874:	e75b      	b.n	800772e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007876:	4924      	ldr	r1, [pc, #144]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 8007878:	6808      	ldr	r0, [r1, #0]
 800787a:	0180      	lsls	r0, r0, #6
 800787c:	f57f af57 	bpl.w	800772e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007880:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007882:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007884:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8007886:	4f21      	ldr	r7, [pc, #132]	; (800790c <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007888:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 800788c:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800788e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007892:	bf0c      	ite	eq
 8007894:	4e21      	ldreq	r6, [pc, #132]	; (800791c <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007896:	4e22      	ldrne	r6, [pc, #136]	; (8007920 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007898:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800789a:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800789e:	4e1a      	ldr	r6, [pc, #104]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80078a0:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80078a4:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078a8:	68f0      	ldr	r0, [r6, #12]
 80078aa:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80078ae:	3001      	adds	r0, #1
 80078b0:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80078b2:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80078b6:	42b9      	cmp	r1, r7
 80078b8:	d920      	bls.n	80078fc <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80078ba:	68b1      	ldr	r1, [r6, #8]
 80078bc:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80078c0:	d005      	beq.n	80078ce <HAL_RCC_ClockConfig+0x1ce>
 80078c2:	f013 0902 	ands.w	r9, r3, #2
 80078c6:	f43f af4c 	beq.w	8007762 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	b9b3      	cbnz	r3, 80078fc <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078ce:	490e      	ldr	r1, [pc, #56]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 80078d0:	688b      	ldr	r3, [r1, #8]
 80078d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078da:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80078dc:	f04f 0980 	mov.w	r9, #128	; 0x80
 80078e0:	e73f      	b.n	8007762 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 80078e2:	2001      	movs	r0, #1
}
 80078e4:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078e6:	4a08      	ldr	r2, [pc, #32]	; (8007908 <HAL_RCC_ClockConfig+0x208>)
 80078e8:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80078ea:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078f2:	ea43 0309 	orr.w	r3, r3, r9
 80078f6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078f8:	6862      	ldr	r2, [r4, #4]
 80078fa:	e732      	b.n	8007762 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80078fc:	f04f 0900 	mov.w	r9, #0
 8007900:	e72f      	b.n	8007762 <HAL_RCC_ClockConfig+0x62>
 8007902:	bf00      	nop
 8007904:	40022000 	.word	0x40022000
 8007908:	40021000 	.word	0x40021000
 800790c:	04c4b400 	.word	0x04c4b400
 8007910:	0800cb28 	.word	0x0800cb28
 8007914:	20000008 	.word	0x20000008
 8007918:	20000010 	.word	0x20000010
 800791c:	007a1200 	.word	0x007a1200
 8007920:	00f42400 	.word	0x00f42400

08007924 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007926:	4a06      	ldr	r2, [pc, #24]	; (8007940 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007928:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800792a:	4906      	ldr	r1, [pc, #24]	; (8007944 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800792c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	5cd3      	ldrb	r3, [r2, r3]
 8007934:	f003 031f 	and.w	r3, r3, #31
}
 8007938:	40d8      	lsrs	r0, r3
 800793a:	4770      	bx	lr
 800793c:	40021000 	.word	0x40021000
 8007940:	0800cb38 	.word	0x0800cb38
 8007944:	20000008 	.word	0x20000008

08007948 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <HAL_RCC_GetPCLK2Freq+0x18>)
 800794a:	4a06      	ldr	r2, [pc, #24]	; (8007964 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800794c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800794e:	4906      	ldr	r1, [pc, #24]	; (8007968 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007950:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007954:	6808      	ldr	r0, [r1, #0]
 8007956:	5cd3      	ldrb	r3, [r2, r3]
 8007958:	f003 031f 	and.w	r3, r3, #31
}
 800795c:	40d8      	lsrs	r0, r3
 800795e:	4770      	bx	lr
 8007960:	40021000 	.word	0x40021000
 8007964:	0800cb38 	.word	0x0800cb38
 8007968:	20000008 	.word	0x20000008

0800796c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007970:	6803      	ldr	r3, [r0, #0]
{
 8007972:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007974:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8007978:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800797a:	d056      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800797c:	4bac      	ldr	r3, [pc, #688]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800797e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007980:	00d5      	lsls	r5, r2, #3
 8007982:	f140 813e 	bpl.w	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8007986:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007988:	4daa      	ldr	r5, [pc, #680]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800798a:	682b      	ldr	r3, [r5, #0]
 800798c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007990:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007992:	f7fb fa13 	bl	8002dbc <HAL_GetTick>
 8007996:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007998:	e005      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800799a:	f7fb fa0f 	bl	8002dbc <HAL_GetTick>
 800799e:	1b83      	subs	r3, r0, r6
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	f200 8139 	bhi.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079a6:	682b      	ldr	r3, [r5, #0]
 80079a8:	05d8      	lsls	r0, r3, #23
 80079aa:	d5f6      	bpl.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079ac:	4da0      	ldr	r5, [pc, #640]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80079ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079b2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80079b6:	d027      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80079b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d025      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079be:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079c2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80079c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ca:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079ce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80079d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079da:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079de:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80079e0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80079e4:	f140 8148 	bpl.w	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fb f9e8 	bl	8002dbc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ec:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80079f0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079f2:	e005      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f4:	f7fb f9e2 	bl	8002dbc <HAL_GetTick>
 80079f8:	1b80      	subs	r0, r0, r6
 80079fa:	4540      	cmp	r0, r8
 80079fc:	f200 810c 	bhi.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a00:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007a04:	079b      	lsls	r3, r3, #30
 8007a06:	d5f5      	bpl.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007a0a:	4989      	ldr	r1, [pc, #548]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007a10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a1a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a1c:	b127      	cbz	r7, 8007a28 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a1e:	4a84      	ldr	r2, [pc, #528]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a20:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	07dd      	lsls	r5, r3, #31
 8007a2c:	d508      	bpl.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a2e:	4980      	ldr	r1, [pc, #512]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a30:	6865      	ldr	r5, [r4, #4]
 8007a32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a36:	f022 0203 	bic.w	r2, r2, #3
 8007a3a:	432a      	orrs	r2, r5
 8007a3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a40:	0799      	lsls	r1, r3, #30
 8007a42:	d508      	bpl.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a44:	497a      	ldr	r1, [pc, #488]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a46:	68a5      	ldr	r5, [r4, #8]
 8007a48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a4c:	f022 020c 	bic.w	r2, r2, #12
 8007a50:	432a      	orrs	r2, r5
 8007a52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a56:	075a      	lsls	r2, r3, #29
 8007a58:	d508      	bpl.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a5a:	4975      	ldr	r1, [pc, #468]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a5c:	68e5      	ldr	r5, [r4, #12]
 8007a5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a62:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007a66:	432a      	orrs	r2, r5
 8007a68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a6c:	071f      	lsls	r7, r3, #28
 8007a6e:	d508      	bpl.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a70:	496f      	ldr	r1, [pc, #444]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a72:	6925      	ldr	r5, [r4, #16]
 8007a74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a78:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a7c:	432a      	orrs	r2, r5
 8007a7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a82:	06de      	lsls	r6, r3, #27
 8007a84:	d508      	bpl.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a86:	496a      	ldr	r1, [pc, #424]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a88:	6965      	ldr	r5, [r4, #20]
 8007a8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007a8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a92:	432a      	orrs	r2, r5
 8007a94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a98:	069d      	lsls	r5, r3, #26
 8007a9a:	d508      	bpl.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a9c:	4964      	ldr	r1, [pc, #400]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a9e:	69a5      	ldr	r5, [r4, #24]
 8007aa0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007aa4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007aa8:	432a      	orrs	r2, r5
 8007aaa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007aae:	0659      	lsls	r1, r3, #25
 8007ab0:	d508      	bpl.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ab2:	495f      	ldr	r1, [pc, #380]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ab4:	69e5      	ldr	r5, [r4, #28]
 8007ab6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007aba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007abe:	432a      	orrs	r2, r5
 8007ac0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ac4:	061a      	lsls	r2, r3, #24
 8007ac6:	d508      	bpl.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ac8:	4959      	ldr	r1, [pc, #356]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007aca:	6a25      	ldr	r5, [r4, #32]
 8007acc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ad0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007ad4:	432a      	orrs	r2, r5
 8007ad6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ada:	05df      	lsls	r7, r3, #23
 8007adc:	d508      	bpl.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ade:	4954      	ldr	r1, [pc, #336]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ae0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ae2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007ae6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007aea:	432a      	orrs	r2, r5
 8007aec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007af0:	039e      	lsls	r6, r3, #14
 8007af2:	d508      	bpl.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007af4:	494e      	ldr	r1, [pc, #312]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007af6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007af8:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8007afc:	f022 0203 	bic.w	r2, r2, #3
 8007b00:	432a      	orrs	r2, r5
 8007b02:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b06:	059d      	lsls	r5, r3, #22
 8007b08:	d508      	bpl.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b0a:	4949      	ldr	r1, [pc, #292]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b0c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007b0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b12:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007b16:	432a      	orrs	r2, r5
 8007b18:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b1c:	0559      	lsls	r1, r3, #21
 8007b1e:	d50b      	bpl.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b20:	4943      	ldr	r1, [pc, #268]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007b24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b28:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007b2c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b2e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b36:	d071      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b38:	051a      	lsls	r2, r3, #20
 8007b3a:	d50b      	bpl.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b3c:	493c      	ldr	r1, [pc, #240]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b3e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007b40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b44:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007b48:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b4a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b4e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007b52:	d068      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b54:	04df      	lsls	r7, r3, #19
 8007b56:	d50b      	bpl.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b58:	4935      	ldr	r1, [pc, #212]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b5a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007b5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b64:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b66:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b6a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b6e:	d063      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b70:	049e      	lsls	r6, r3, #18
 8007b72:	d50b      	bpl.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b74:	492e      	ldr	r1, [pc, #184]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b76:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007b78:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b7c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007b80:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b82:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b86:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b8a:	d05a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b8c:	045d      	lsls	r5, r3, #17
 8007b8e:	d50b      	bpl.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b90:	4927      	ldr	r1, [pc, #156]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b92:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007b94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007b98:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007b9c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b9e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ba2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ba6:	d051      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ba8:	0419      	lsls	r1, r3, #16
 8007baa:	d50b      	bpl.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bac:	4920      	ldr	r1, [pc, #128]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bae:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007bb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bb8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bba:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bbe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bc2:	d048      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007bc4:	03da      	lsls	r2, r3, #15
 8007bc6:	d50b      	bpl.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007bc8:	4919      	ldr	r1, [pc, #100]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bca:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8007bcc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007bd0:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8007bd4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007bd6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007bda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007bde:	d03f      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007be0:	035b      	lsls	r3, r3, #13
 8007be2:	d50b      	bpl.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007be4:	4a12      	ldr	r2, [pc, #72]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007be6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007be8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8007bec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007bf0:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bf2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007bf6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bfa:	d036      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8007bfc:	b002      	add	sp, #8
 8007bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007c08:	659a      	str	r2, [r3, #88]	; 0x58
 8007c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007c14:	2701      	movs	r7, #1
 8007c16:	e6b7      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8007c18:	2003      	movs	r0, #3
 8007c1a:	e6ff      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c1c:	68ca      	ldr	r2, [r1, #12]
 8007c1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c22:	60ca      	str	r2, [r1, #12]
 8007c24:	e788      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c26:	68ca      	ldr	r2, [r1, #12]
 8007c28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c2c:	60ca      	str	r2, [r1, #12]
 8007c2e:	e791      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007c30:	40021000 	.word	0x40021000
 8007c34:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c38:	68ca      	ldr	r2, [r1, #12]
 8007c3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c3e:	60ca      	str	r2, [r1, #12]
 8007c40:	e796      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c42:	68ca      	ldr	r2, [r1, #12]
 8007c44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c48:	60ca      	str	r2, [r1, #12]
 8007c4a:	e79f      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c4c:	68ca      	ldr	r2, [r1, #12]
 8007c4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c52:	60ca      	str	r2, [r1, #12]
 8007c54:	e7a8      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c56:	68ca      	ldr	r2, [r1, #12]
 8007c58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c5c:	60ca      	str	r2, [r1, #12]
 8007c5e:	e7b1      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c60:	68ca      	ldr	r2, [r1, #12]
 8007c62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c66:	60ca      	str	r2, [r1, #12]
 8007c68:	e7ba      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c6a:	68d3      	ldr	r3, [r2, #12]
 8007c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c70:	60d3      	str	r3, [r2, #12]
}
 8007c72:	b002      	add	sp, #8
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	4613      	mov	r3, r2
 8007c7a:	e6c6      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9e>

08007c7c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c82:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007c84:	4614      	mov	r4, r2
 8007c86:	460d      	mov	r5, r1
  __IO uint8_t  tmpreg8 = 0;
 8007c88:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8007c8c:	4606      	mov	r6, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c8e:	f7fb f895 	bl	8002dbc <HAL_GetTick>
 8007c92:	442c      	add	r4, r5
 8007c94:	1a27      	subs	r7, r4, r0
  tmp_tickstart = HAL_GetTick();
 8007c96:	f7fb f891 	bl	8002dbc <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c9a:	4b32      	ldr	r3, [pc, #200]	; (8007d64 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c9c:	6834      	ldr	r4, [r6, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007ca4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ca8:	0d1b      	lsrs	r3, r3, #20
 8007caa:	fb07 f303 	mul.w	r3, r7, r3
  tmp_tickstart = HAL_GetTick();
 8007cae:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007cb0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	1c69      	adds	r1, r5, #1
 8007cb6:	6893      	ldr	r3, [r2, #8]
 8007cb8:	d110      	bne.n	8007cdc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
 8007cba:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007cbe:	d009      	beq.n	8007cd4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007cc0:	7b23      	ldrb	r3, [r4, #12]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ccc:	6893      	ldr	r3, [r2, #8]
 8007cce:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007cd2:	d1f5      	bne.n	8007cc0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8007cd4:	2000      	movs	r0, #0
}
 8007cd6:	b002      	add	sp, #8
 8007cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007cdc:	f413 6fc0 	tst.w	r3, #1536	; 0x600
 8007ce0:	d0f8      	beq.n	8007cd4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
      tmpreg8 = *ptmpreg8;
 8007ce2:	7b23      	ldrb	r3, [r4, #12]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8007cea:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cee:	f7fb f865 	bl	8002dbc <HAL_GetTick>
 8007cf2:	eba0 0008 	sub.w	r0, r0, r8
 8007cf6:	42b8      	cmp	r0, r7
 8007cf8:	d209      	bcs.n	8007d0e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
      if (count == 0U)
 8007cfa:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8007cfc:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 8007cfe:	2b00      	cmp	r3, #0
      count--;
 8007d00:	9b01      	ldr	r3, [sp, #4]
 8007d02:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007d06:	bf08      	it	eq
 8007d08:	2700      	moveq	r7, #0
      count--;
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	e7d2      	b.n	8007cb4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d0e:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d12:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d14:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d1c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d1e:	d014      	beq.n	8007d4a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d20:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007d22:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007d26:	d007      	beq.n	8007d38 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbc>
        hspi->State = HAL_SPI_STATE_READY;
 8007d28:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8007d2a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8007d2c:	f886 205d 	strb.w	r2, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007d30:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007d34:	2003      	movs	r0, #3
 8007d36:	e7ce      	b.n	8007cd6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
          SPI_RESET_CRC(hspi);
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	e7ee      	b.n	8007d28 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xac>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d4a:	68b2      	ldr	r2, [r6, #8]
 8007d4c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007d50:	d002      	beq.n	8007d58 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d52:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007d56:	d1e3      	bne.n	8007d20 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
          __HAL_SPI_DISABLE(hspi);
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	e7de      	b.n	8007d20 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa4>
 8007d62:	bf00      	nop
 8007d64:	20000008 	.word	0x20000008

08007d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f88d 3007 	strb.w	r3, [sp, #7]
 8007d74:	eb01 0902 	add.w	r9, r1, r2
{
 8007d78:	460e      	mov	r6, r1
 8007d7a:	4617      	mov	r7, r2
 8007d7c:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d7e:	f7fb f81d 	bl	8002dbc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d82:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8007ea4 <SPI_EndRxTxTransaction+0x13c>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d86:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007d8a:	f7fb f817 	bl	8002dbc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007d9a:	0d1b      	lsrs	r3, r3, #20
 8007d9c:	fb0a f303 	mul.w	r3, sl, r3
  tmp_tickstart = HAL_GetTick();
 8007da0:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007da2:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8007da4:	1c70      	adds	r0, r6, #1
 8007da6:	682c      	ldr	r4, [r5, #0]
 8007da8:	d120      	bne.n	8007dec <SPI_EndRxTxTransaction+0x84>
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8007db0:	d1fb      	bne.n	8007daa <SPI_EndRxTxTransaction+0x42>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007db2:	f7fb f803 	bl	8002dbc <HAL_GetTick>
 8007db6:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8007dba:	f7fa ffff 	bl	8002dbc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007dc6:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8007dca:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dcc:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dce:	1c71      	adds	r1, r6, #1
 8007dd0:	682c      	ldr	r4, [r5, #0]
 8007dd2:	d11f      	bne.n	8007e14 <SPI_EndRxTxTransaction+0xac>
 8007dd4:	68a3      	ldr	r3, [r4, #8]
 8007dd6:	061a      	lsls	r2, r3, #24
 8007dd8:	d4fc      	bmi.n	8007dd4 <SPI_EndRxTxTransaction+0x6c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	f7ff ff4c 	bl	8007c7c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8007de4:	bb48      	cbnz	r0, 8007e3a <SPI_EndRxTxTransaction+0xd2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8007de6:	b005      	add	sp, #20
 8007de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8007df2:	d0de      	beq.n	8007db2 <SPI_EndRxTxTransaction+0x4a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007df4:	f7fa ffe2 	bl	8002dbc <HAL_GetTick>
 8007df8:	eba0 000b 	sub.w	r0, r0, fp
 8007dfc:	4550      	cmp	r0, sl
 8007dfe:	d222      	bcs.n	8007e46 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007e00:	9a02      	ldr	r2, [sp, #8]
      count--;
 8007e02:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8007e04:	2a00      	cmp	r2, #0
      count--;
 8007e06:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007e0a:	bf08      	it	eq
 8007e0c:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8007e10:	9302      	str	r3, [sp, #8]
 8007e12:	e7c7      	b.n	8007da4 <SPI_EndRxTxTransaction+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e14:	68a3      	ldr	r3, [r4, #8]
 8007e16:	061b      	lsls	r3, r3, #24
 8007e18:	d5df      	bpl.n	8007dda <SPI_EndRxTxTransaction+0x72>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e1a:	f7fa ffcf 	bl	8002dbc <HAL_GetTick>
 8007e1e:	eba0 0008 	sub.w	r0, r0, r8
 8007e22:	4548      	cmp	r0, r9
 8007e24:	d20f      	bcs.n	8007e46 <SPI_EndRxTxTransaction+0xde>
      if (count == 0U)
 8007e26:	9a03      	ldr	r2, [sp, #12]
      count--;
 8007e28:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8007e2a:	2a00      	cmp	r2, #0
      count--;
 8007e2c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8007e30:	bf08      	it	eq
 8007e32:	f04f 0900 	moveq.w	r9, #0
      count--;
 8007e36:	9303      	str	r3, [sp, #12]
 8007e38:	e7c9      	b.n	8007dce <SPI_EndRxTxTransaction+0x66>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e3a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007e3c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007e40:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e42:	662b      	str	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e44:	e7cf      	b.n	8007de6 <SPI_EndRxTxTransaction+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e46:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e4a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e4c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e54:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e56:	d019      	beq.n	8007e8c <SPI_EndRxTxTransaction+0x124>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e58:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007e5a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007e5e:	d107      	bne.n	8007e70 <SPI_EndRxTxTransaction+0x108>
          SPI_RESET_CRC(hspi);
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e6e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e76:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8007e78:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e7a:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 8007e7e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8007e80:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e84:	662b      	str	r3, [r5, #96]	; 0x60
}
 8007e86:	b005      	add	sp, #20
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e8c:	68aa      	ldr	r2, [r5, #8]
 8007e8e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007e92:	d002      	beq.n	8007e9a <SPI_EndRxTxTransaction+0x132>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007e98:	d1de      	bne.n	8007e58 <SPI_EndRxTxTransaction+0xf0>
          __HAL_SPI_DISABLE(hspi);
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e7d9      	b.n	8007e58 <SPI_EndRxTxTransaction+0xf0>
 8007ea4:	20000008 	.word	0x20000008

08007ea8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d077      	beq.n	8007f9c <HAL_SPI_Init+0xf4>
{
 8007eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007eb0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	2e00      	cmp	r6, #0
 8007eb6:	d058      	beq.n	8007f6a <HAL_SPI_Init+0xc2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007eb8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ebe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ec6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d059      	beq.n	8007f82 <HAL_SPI_Init+0xda>
  __HAL_SPI_DISABLE(hspi);
 8007ece:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ed0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007ed8:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eda:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007ede:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8007ee2:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ee4:	d947      	bls.n	8007f76 <HAL_SPI_Init+0xce>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ee6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8007eea:	d159      	bne.n	8007fa0 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007eee:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ef0:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8007ef4:	68a3      	ldr	r3, [r4, #8]
 8007ef6:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ef8:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007efc:	6862      	ldr	r2, [r4, #4]
 8007efe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f02:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007f06:	431a      	orrs	r2, r3
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	6963      	ldr	r3, [r4, #20]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f1a:	f003 0308 	and.w	r3, r3, #8
 8007f1e:	f006 0c10 	and.w	ip, r6, #16
 8007f22:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f26:	69a6      	ldr	r6, [r4, #24]
 8007f28:	69e3      	ldr	r3, [r4, #28]
 8007f2a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007f2e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007f32:	4313      	orrs	r3, r2
 8007f34:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8007f38:	ea43 0308 	orr.w	r3, r3, r8
 8007f3c:	433b      	orrs	r3, r7
 8007f3e:	432b      	orrs	r3, r5
 8007f40:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f42:	0c33      	lsrs	r3, r6, #16
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	ea4e 0303 	orr.w	r3, lr, r3
 8007f4c:	ea43 030c 	orr.w	r3, r3, ip
 8007f50:	4303      	orrs	r3, r0
 8007f52:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f54:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f56:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007f5c:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f5e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f60:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f62:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 8007f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f6a:	6843      	ldr	r3, [r0, #4]
 8007f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f70:	d0a5      	beq.n	8007ebe <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f72:	61c6      	str	r6, [r0, #28]
 8007f74:	e7a3      	b.n	8007ebe <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f76:	d00b      	beq.n	8007f90 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f78:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	62a5      	str	r5, [r4, #40]	; 0x28
 8007f80:	e7b8      	b.n	8007ef4 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8007f82:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7fc ff82 	bl	8004e90 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f8e:	e79e      	b.n	8007ece <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f96:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8007f9a:	e7ab      	b.n	8007ef4 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8007f9c:	2001      	movs	r0, #1
}
 8007f9e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	e7eb      	b.n	8007f7c <HAL_SPI_Init+0xd4>

08007fa4 <HAL_SPI_TransmitReceive>:
{
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007faa:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 8007fae:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8007fb0:	2801      	cmp	r0, #1
 8007fb2:	f000 8098 	beq.w	80080e6 <HAL_SPI_TransmitReceive+0x142>
 8007fb6:	461f      	mov	r7, r3
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8007fbe:	4689      	mov	r9, r1
 8007fc0:	4690      	mov	r8, r2
 8007fc2:	f7fa fefb 	bl	8002dbc <HAL_GetTick>
 8007fc6:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8007fc8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8007fcc:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fce:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 8007fd0:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fd2:	d010      	beq.n	8007ff6 <HAL_SPI_TransmitReceive+0x52>
 8007fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fd8:	d008      	beq.n	8007fec <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8007fda:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007fdc:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8007fde:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8007fe0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007fe4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8007fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fec:	68a2      	ldr	r2, [r4, #8]
 8007fee:	2a00      	cmp	r2, #0
 8007ff0:	d1f3      	bne.n	8007fda <HAL_SPI_TransmitReceive+0x36>
 8007ff2:	2904      	cmp	r1, #4
 8007ff4:	d1f1      	bne.n	8007fda <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ff6:	f1b9 0f00 	cmp.w	r9, #0
 8007ffa:	d077      	beq.n	80080ec <HAL_SPI_TransmitReceive+0x148>
 8007ffc:	f1b8 0f00 	cmp.w	r8, #0
 8008000:	d074      	beq.n	80080ec <HAL_SPI_TransmitReceive+0x148>
 8008002:	2f00      	cmp	r7, #0
 8008004:	d072      	beq.n	80080ec <HAL_SPI_TransmitReceive+0x148>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008006:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800800a:	68e1      	ldr	r1, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800800c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008010:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008012:	bf1c      	itt	ne
 8008014:	2205      	movne	r2, #5
 8008016:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800801a:	2200      	movs	r2, #0
 800801c:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800801e:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008022:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8008024:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008028:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  hspi->TxXferCount = Size;
 800802c:	87e7      	strh	r7, [r4, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800802e:	6851      	ldr	r1, [r2, #4]
  hspi->RxXferSize  = Size;
 8008030:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008034:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008038:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800803a:	d859      	bhi.n	80080f0 <HAL_SPI_TransmitReceive+0x14c>
 800803c:	2f01      	cmp	r7, #1
 800803e:	f000 8129 	beq.w	8008294 <HAL_SPI_TransmitReceive+0x2f0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008042:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008046:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008048:	6811      	ldr	r1, [r2, #0]
 800804a:	0649      	lsls	r1, r1, #25
 800804c:	f100 80e4 	bmi.w	8008218 <HAL_SPI_TransmitReceive+0x274>
    __HAL_SPI_ENABLE(hspi);
 8008050:	6811      	ldr	r1, [r2, #0]
 8008052:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008056:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80e0 	beq.w	800821e <HAL_SPI_TransmitReceive+0x27a>
 800805e:	2f01      	cmp	r7, #1
 8008060:	f000 80dd 	beq.w	800821e <HAL_SPI_TransmitReceive+0x27a>
        txallowed = 1U;
 8008064:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008066:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008068:	b29b      	uxth	r3, r3
 800806a:	b92b      	cbnz	r3, 8008078 <HAL_SPI_TransmitReceive+0xd4>
 800806c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8087 	beq.w	8008186 <HAL_SPI_TransmitReceive+0x1e2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008078:	6822      	ldr	r2, [r4, #0]
 800807a:	6893      	ldr	r3, [r2, #8]
 800807c:	0799      	lsls	r1, r3, #30
 800807e:	d505      	bpl.n	800808c <HAL_SPI_TransmitReceive+0xe8>
 8008080:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008082:	b29b      	uxth	r3, r3
 8008084:	b113      	cbz	r3, 800808c <HAL_SPI_TransmitReceive+0xe8>
 8008086:	2f00      	cmp	r7, #0
 8008088:	f040 80e9 	bne.w	800825e <HAL_SPI_TransmitReceive+0x2ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800808c:	6893      	ldr	r3, [r2, #8]
 800808e:	f013 0301 	ands.w	r3, r3, #1
 8008092:	d01e      	beq.n	80080d2 <HAL_SPI_TransmitReceive+0x12e>
 8008094:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008098:	b289      	uxth	r1, r1
 800809a:	b1d1      	cbz	r1, 80080d2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->RxXferCount > 1U)
 800809c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80080a0:	b289      	uxth	r1, r1
 80080a2:	2901      	cmp	r1, #1
 80080a4:	f240 80cd 	bls.w	8008242 <HAL_SPI_TransmitReceive+0x29e>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080aa:	68d0      	ldr	r0, [r2, #12]
 80080ac:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080b0:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80080b2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80080b6:	3902      	subs	r1, #2
 80080b8:	b289      	uxth	r1, r1
 80080ba:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80080be:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80080c2:	b289      	uxth	r1, r1
 80080c4:	2901      	cmp	r1, #1
        txallowed = 1U;
 80080c6:	461f      	mov	r7, r3
          if (hspi->RxXferCount <= 1U)
 80080c8:	d803      	bhi.n	80080d2 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080ca:	6853      	ldr	r3, [r2, #4]
 80080cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080d0:	6053      	str	r3, [r2, #4]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080d2:	f7fa fe73 	bl	8002dbc <HAL_GetTick>
 80080d6:	1b40      	subs	r0, r0, r5
 80080d8:	42b0      	cmp	r0, r6
 80080da:	f0c0 80ae 	bcc.w	800823a <HAL_SPI_TransmitReceive+0x296>
 80080de:	1c73      	adds	r3, r6, #1
 80080e0:	d0c1      	beq.n	8008066 <HAL_SPI_TransmitReceive+0xc2>
        errorcode = HAL_TIMEOUT;
 80080e2:	2003      	movs	r0, #3
 80080e4:	e77a      	b.n	8007fdc <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80080e6:	2002      	movs	r0, #2
}
 80080e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80080ec:	2001      	movs	r0, #1
 80080ee:	e775      	b.n	8007fdc <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080f0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80080f4:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080f6:	6811      	ldr	r1, [r2, #0]
 80080f8:	0648      	lsls	r0, r1, #25
 80080fa:	d403      	bmi.n	8008104 <HAL_SPI_TransmitReceive+0x160>
    __HAL_SPI_ENABLE(hspi);
 80080fc:	6811      	ldr	r1, [r2, #0]
 80080fe:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008102:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008104:	2b00      	cmp	r3, #0
 8008106:	d161      	bne.n	80081cc <HAL_SPI_TransmitReceive+0x228>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008108:	4649      	mov	r1, r9
 800810a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800810e:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8008110:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008112:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8008114:	3b01      	subs	r3, #1
 8008116:	b29b      	uxth	r3, r3
 8008118:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800811a:	1c72      	adds	r2, r6, #1
{
 800811c:	f04f 0701 	mov.w	r7, #1
 8008120:	d028      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x1d0>
 8008122:	e04e      	b.n	80081c2 <HAL_SPI_TransmitReceive+0x21e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008124:	6822      	ldr	r2, [r4, #0]
 8008126:	6893      	ldr	r3, [r2, #8]
 8008128:	079b      	lsls	r3, r3, #30
 800812a:	d50d      	bpl.n	8008148 <HAL_SPI_TransmitReceive+0x1a4>
 800812c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800812e:	b29b      	uxth	r3, r3
 8008130:	b153      	cbz	r3, 8008148 <HAL_SPI_TransmitReceive+0x1a4>
 8008132:	b14f      	cbz	r7, 8008148 <HAL_SPI_TransmitReceive+0x1a4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008134:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008136:	f831 3b02 	ldrh.w	r3, [r1], #2
 800813a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800813c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800813e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008140:	3b01      	subs	r3, #1
 8008142:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008144:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008146:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008148:	6893      	ldr	r3, [r2, #8]
 800814a:	f013 0301 	ands.w	r3, r3, #1
 800814e:	d00f      	beq.n	8008170 <HAL_SPI_TransmitReceive+0x1cc>
 8008150:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8008154:	b289      	uxth	r1, r1
 8008156:	b159      	cbz	r1, 8008170 <HAL_SPI_TransmitReceive+0x1cc>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008158:	68d1      	ldr	r1, [r2, #12]
 800815a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800815c:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 8008160:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8008162:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008166:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8008168:	3b01      	subs	r3, #1
 800816a:	b29b      	uxth	r3, r3
 800816c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008170:	f7fa fe24 	bl	8002dbc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008176:	b29b      	uxth	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1d3      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x180>
 800817c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1ce      	bne.n	8008124 <HAL_SPI_TransmitReceive+0x180>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008186:	462a      	mov	r2, r5
 8008188:	4631      	mov	r1, r6
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff fdec 	bl	8007d68 <SPI_EndRxTxTransaction>
 8008190:	2800      	cmp	r0, #0
 8008192:	f43f af23 	beq.w	8007fdc <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008196:	2320      	movs	r3, #32
 8008198:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800819a:	2001      	movs	r0, #1
 800819c:	e71e      	b.n	8007fdc <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800819e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0ee      	beq.n	8008186 <HAL_SPI_TransmitReceive+0x1e2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	6893      	ldr	r3, [r2, #8]
 80081ac:	0798      	lsls	r0, r3, #30
 80081ae:	d422      	bmi.n	80081f6 <HAL_SPI_TransmitReceive+0x252>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081b0:	6893      	ldr	r3, [r2, #8]
 80081b2:	f013 0301 	ands.w	r3, r3, #1
 80081b6:	d10c      	bne.n	80081d2 <HAL_SPI_TransmitReceive+0x22e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081b8:	f7fa fe00 	bl	8002dbc <HAL_GetTick>
 80081bc:	1b40      	subs	r0, r0, r5
 80081be:	42b0      	cmp	r0, r6
 80081c0:	d28f      	bcs.n	80080e2 <HAL_SPI_TransmitReceive+0x13e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1ee      	bne.n	80081a8 <HAL_SPI_TransmitReceive+0x204>
 80081ca:	e7e8      	b.n	800819e <HAL_SPI_TransmitReceive+0x1fa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081cc:	2f01      	cmp	r7, #1
 80081ce:	d1a4      	bne.n	800811a <HAL_SPI_TransmitReceive+0x176>
 80081d0:	e79a      	b.n	8008108 <HAL_SPI_TransmitReceive+0x164>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081d2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80081d6:	b289      	uxth	r1, r1
 80081d8:	2900      	cmp	r1, #0
 80081da:	d0ed      	beq.n	80081b8 <HAL_SPI_TransmitReceive+0x214>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081dc:	68d1      	ldr	r1, [r2, #12]
 80081de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081e0:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80081e4:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80081e6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081ea:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80081f4:	e7e0      	b.n	80081b8 <HAL_SPI_TransmitReceive+0x214>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0d8      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x20c>
 80081fe:	2f00      	cmp	r7, #0
 8008200:	d0d6      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x20c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008204:	f833 1b02 	ldrh.w	r1, [r3], #2
 8008208:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800820a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800820c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800820e:	3b01      	subs	r3, #1
 8008210:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008212:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8008214:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8008216:	e7cb      	b.n	80081b0 <HAL_SPI_TransmitReceive+0x20c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008218:	2b00      	cmp	r3, #0
 800821a:	f47f af23 	bne.w	8008064 <HAL_SPI_TransmitReceive+0xc0>
      if (hspi->TxXferCount > 1U)
 800821e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008220:	b29b      	uxth	r3, r3
 8008222:	2b01      	cmp	r3, #1
 8008224:	d93e      	bls.n	80082a4 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008226:	4649      	mov	r1, r9
 8008228:	f831 3b02 	ldrh.w	r3, [r1], #2
 800822c:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 800822e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008230:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008232:	3b02      	subs	r3, #2
 8008234:	b29b      	uxth	r3, r3
 8008236:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008238:	e714      	b.n	8008064 <HAL_SPI_TransmitReceive+0xc0>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800823a:	2e00      	cmp	r6, #0
 800823c:	f47f af13 	bne.w	8008066 <HAL_SPI_TransmitReceive+0xc2>
 8008240:	e74f      	b.n	80080e2 <HAL_SPI_TransmitReceive+0x13e>
        txallowed = 1U;
 8008242:	461f      	mov	r7, r3
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008246:	7b12      	ldrb	r2, [r2, #12]
 8008248:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800824a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800824c:	3301      	adds	r3, #1
 800824e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8008250:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008254:	3b01      	subs	r3, #1
 8008256:	b29b      	uxth	r3, r3
 8008258:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800825c:	e739      	b.n	80080d2 <HAL_SPI_TransmitReceive+0x12e>
        if (hspi->TxXferCount > 1U)
 800825e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008260:	b29b      	uxth	r3, r3
 8008262:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8008266:	d909      	bls.n	800827c <HAL_SPI_TransmitReceive+0x2d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008268:	f833 1b02 	ldrh.w	r1, [r3], #2
 800826c:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800826e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008270:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008272:	3b02      	subs	r3, #2
 8008274:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8008276:	2700      	movs	r7, #0
          hspi->TxXferCount -= 2U;
 8008278:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800827a:	e707      	b.n	800808c <HAL_SPI_TransmitReceive+0xe8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8008280:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8008282:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8008284:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8008286:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 8008288:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800828a:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800828c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800828e:	6822      	ldr	r2, [r4, #0]
        txallowed = 0U;
 8008290:	2700      	movs	r7, #0
 8008292:	e6fb      	b.n	800808c <HAL_SPI_TransmitReceive+0xe8>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008294:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008298:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800829a:	6811      	ldr	r1, [r2, #0]
 800829c:	0649      	lsls	r1, r1, #25
 800829e:	f57f aed7 	bpl.w	8008050 <HAL_SPI_TransmitReceive+0xac>
 80082a2:	e7bc      	b.n	800821e <HAL_SPI_TransmitReceive+0x27a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082a4:	f899 3000 	ldrb.w	r3, [r9]
 80082a8:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80082aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 80082ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80082ae:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80082b0:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80082b2:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80082b4:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80082b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082b8:	e6d4      	b.n	8008064 <HAL_SPI_TransmitReceive+0xc0>
 80082ba:	bf00      	nop

080082bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082bc:	6a03      	ldr	r3, [r0, #32]
 80082be:	f023 0301 	bic.w	r3, r3, #1
 80082c2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c4:	6a03      	ldr	r3, [r0, #32]
{
 80082c6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80082d2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80082d6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082d8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80082da:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80082de:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e0:	4d15      	ldr	r5, [pc, #84]	; (8008338 <TIM_OC1_SetConfig+0x7c>)
 80082e2:	42a8      	cmp	r0, r5
 80082e4:	d013      	beq.n	800830e <TIM_OC1_SetConfig+0x52>
 80082e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80082ea:	42a8      	cmp	r0, r5
 80082ec:	d00f      	beq.n	800830e <TIM_OC1_SetConfig+0x52>
 80082ee:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80082f2:	42a8      	cmp	r0, r5
 80082f4:	d00b      	beq.n	800830e <TIM_OC1_SetConfig+0x52>
 80082f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80082fa:	42a8      	cmp	r0, r5
 80082fc:	d007      	beq.n	800830e <TIM_OC1_SetConfig+0x52>
 80082fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008302:	42a8      	cmp	r0, r5
 8008304:	d003      	beq.n	800830e <TIM_OC1_SetConfig+0x52>
 8008306:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800830a:	42a8      	cmp	r0, r5
 800830c:	d10d      	bne.n	800832a <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800830e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008310:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008314:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008316:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800831a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800831e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008322:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008326:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800832a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800832c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800832e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008330:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8008332:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8008334:	6203      	str	r3, [r0, #32]
}
 8008336:	4770      	bx	lr
 8008338:	40012c00 	.word	0x40012c00

0800833c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800833c:	6a03      	ldr	r3, [r0, #32]
 800833e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008342:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008344:	6a03      	ldr	r3, [r0, #32]
{
 8008346:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008348:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800834c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800834e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008352:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008356:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008358:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800835a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800835e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008362:	4d1c      	ldr	r5, [pc, #112]	; (80083d4 <TIM_OC3_SetConfig+0x98>)
 8008364:	42a8      	cmp	r0, r5
 8008366:	d017      	beq.n	8008398 <TIM_OC3_SetConfig+0x5c>
 8008368:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800836c:	42a8      	cmp	r0, r5
 800836e:	d013      	beq.n	8008398 <TIM_OC3_SetConfig+0x5c>
 8008370:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008374:	42a8      	cmp	r0, r5
 8008376:	d025      	beq.n	80083c4 <TIM_OC3_SetConfig+0x88>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008378:	4d17      	ldr	r5, [pc, #92]	; (80083d8 <TIM_OC3_SetConfig+0x9c>)
 800837a:	42a8      	cmp	r0, r5
 800837c:	d013      	beq.n	80083a6 <TIM_OC3_SetConfig+0x6a>
 800837e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008382:	42a8      	cmp	r0, r5
 8008384:	d00f      	beq.n	80083a6 <TIM_OC3_SetConfig+0x6a>
 8008386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800838a:	42a8      	cmp	r0, r5
 800838c:	d00b      	beq.n	80083a6 <TIM_OC3_SetConfig+0x6a>
 800838e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008392:	42a8      	cmp	r0, r5
 8008394:	d10f      	bne.n	80083b6 <TIM_OC3_SetConfig+0x7a>
 8008396:	e006      	b.n	80083a6 <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008398:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800839a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800839e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80083a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083a6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083aa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083ae:	ea46 0c05 	orr.w	ip, r6, r5
 80083b2:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083b6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80083b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80083ba:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80083bc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80083be:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80083c0:	6203      	str	r3, [r0, #32]
}
 80083c2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083c4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80083c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d2:	e7d1      	b.n	8008378 <TIM_OC3_SetConfig+0x3c>
 80083d4:	40012c00 	.word	0x40012c00
 80083d8:	40014000 	.word	0x40014000

080083dc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083dc:	6a03      	ldr	r3, [r0, #32]
 80083de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083e4:	6a03      	ldr	r3, [r0, #32]
{
 80083e6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ea:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80083f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80083fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008400:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008404:	4d1c      	ldr	r5, [pc, #112]	; (8008478 <TIM_OC4_SetConfig+0x9c>)
 8008406:	42a8      	cmp	r0, r5
 8008408:	d017      	beq.n	800843a <TIM_OC4_SetConfig+0x5e>
 800840a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800840e:	42a8      	cmp	r0, r5
 8008410:	d013      	beq.n	800843a <TIM_OC4_SetConfig+0x5e>
 8008412:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008416:	42a8      	cmp	r0, r5
 8008418:	d025      	beq.n	8008466 <TIM_OC4_SetConfig+0x8a>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800841a:	4d18      	ldr	r5, [pc, #96]	; (800847c <TIM_OC4_SetConfig+0xa0>)
 800841c:	42a8      	cmp	r0, r5
 800841e:	d013      	beq.n	8008448 <TIM_OC4_SetConfig+0x6c>
 8008420:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008424:	42a8      	cmp	r0, r5
 8008426:	d00f      	beq.n	8008448 <TIM_OC4_SetConfig+0x6c>
 8008428:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800842c:	42a8      	cmp	r0, r5
 800842e:	d00b      	beq.n	8008448 <TIM_OC4_SetConfig+0x6c>
 8008430:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008434:	42a8      	cmp	r0, r5
 8008436:	d10f      	bne.n	8008458 <TIM_OC4_SetConfig+0x7c>
 8008438:	e006      	b.n	8008448 <TIM_OC4_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800843a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800843c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008440:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008444:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008448:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800844c:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008450:	ea46 0c05 	orr.w	ip, r6, r5
 8008454:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008458:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800845a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800845c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800845e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8008460:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8008462:	6203      	str	r3, [r0, #32]
}
 8008464:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008466:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008468:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800846c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008474:	e7d1      	b.n	800841a <TIM_OC4_SetConfig+0x3e>
 8008476:	bf00      	nop
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40014000 	.word	0x40014000

08008480 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008480:	2800      	cmp	r0, #0
 8008482:	f000 808c 	beq.w	800859e <HAL_TIM_Base_Init+0x11e>
{
 8008486:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008488:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800848c:	4604      	mov	r4, r0
 800848e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008492:	2b00      	cmp	r3, #0
 8008494:	d078      	beq.n	8008588 <HAL_TIM_Base_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008496:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008498:	4944      	ldr	r1, [pc, #272]	; (80085ac <HAL_TIM_Base_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800849a:	2302      	movs	r3, #2
 800849c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084a0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80084a2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084a4:	d05c      	beq.n	8008560 <HAL_TIM_Base_Init+0xe0>
 80084a6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80084aa:	d02c      	beq.n	8008506 <HAL_TIM_Base_Init+0x86>
 80084ac:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80084b0:	428a      	cmp	r2, r1
 80084b2:	d028      	beq.n	8008506 <HAL_TIM_Base_Init+0x86>
 80084b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084b8:	428a      	cmp	r2, r1
 80084ba:	d024      	beq.n	8008506 <HAL_TIM_Base_Init+0x86>
 80084bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084c0:	428a      	cmp	r2, r1
 80084c2:	d020      	beq.n	8008506 <HAL_TIM_Base_Init+0x86>
 80084c4:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80084c8:	428a      	cmp	r2, r1
 80084ca:	d049      	beq.n	8008560 <HAL_TIM_Base_Init+0xe0>
 80084cc:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 80084d0:	428a      	cmp	r2, r1
 80084d2:	d066      	beq.n	80085a2 <HAL_TIM_Base_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084d4:	4936      	ldr	r1, [pc, #216]	; (80085b0 <HAL_TIM_Base_Init+0x130>)
 80084d6:	428a      	cmp	r2, r1
 80084d8:	d05b      	beq.n	8008592 <HAL_TIM_Base_Init+0x112>
 80084da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084de:	428a      	cmp	r2, r1
 80084e0:	d057      	beq.n	8008592 <HAL_TIM_Base_Init+0x112>
 80084e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084e6:	428a      	cmp	r2, r1
 80084e8:	d053      	beq.n	8008592 <HAL_TIM_Base_Init+0x112>
 80084ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084ee:	428a      	cmp	r2, r1
 80084f0:	d04f      	beq.n	8008592 <HAL_TIM_Base_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084f4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084fa:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80084fc:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80084fe:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008500:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008502:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008504:	e010      	b.n	8008528 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8008506:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008508:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800850a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800850e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008514:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008516:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800851c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800851e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008520:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008522:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008524:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008526:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008528:	2301      	movs	r3, #1
 800852a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800852c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008530:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008534:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008538:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800853c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008548:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800854c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008550:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008554:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008558:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800855c:	2000      	movs	r0, #0
}
 800855e:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008560:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008562:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008568:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800856a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800856e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008570:	69a1      	ldr	r1, [r4, #24]
 8008572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008576:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008578:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800857e:	6863      	ldr	r3, [r4, #4]
 8008580:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008582:	6963      	ldr	r3, [r4, #20]
 8008584:	6313      	str	r3, [r2, #48]	; 0x30
 8008586:	e7cf      	b.n	8008528 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008588:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800858c:	f7fc fe3e 	bl	800520c <HAL_TIM_Base_MspInit>
 8008590:	e781      	b.n	8008496 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008592:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008594:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859a:	4303      	orrs	r3, r0
 800859c:	e7e9      	b.n	8008572 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 800859e:	2001      	movs	r0, #1
}
 80085a0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80085a2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80085a8:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085aa:	e793      	b.n	80084d4 <HAL_TIM_Base_Init+0x54>
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40014000 	.word	0x40014000

080085b4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80085b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d132      	bne.n	8008622 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085be:	491b      	ldr	r1, [pc, #108]	; (800862c <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 80085c0:	2202      	movs	r2, #2
 80085c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085c6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085ca:	f042 0201 	orr.w	r2, r2, #1
 80085ce:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085d0:	d019      	beq.n	8008606 <HAL_TIM_Base_Start_IT+0x52>
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d6:	d016      	beq.n	8008606 <HAL_TIM_Base_Start_IT+0x52>
 80085d8:	4a15      	ldr	r2, [pc, #84]	; (8008630 <HAL_TIM_Base_Start_IT+0x7c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d013      	beq.n	8008606 <HAL_TIM_Base_Start_IT+0x52>
 80085de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00f      	beq.n	8008606 <HAL_TIM_Base_Start_IT+0x52>
 80085e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00b      	beq.n	8008606 <HAL_TIM_Base_Start_IT+0x52>
 80085ee:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d007      	beq.n	8008606 <HAL_TIM_Base_Start_IT+0x52>
 80085f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d003      	beq.n	8008606 <HAL_TIM_Base_Start_IT+0x52>
 80085fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008602:	4293      	cmp	r3, r2
 8008604:	d107      	bne.n	8008616 <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008606:	6899      	ldr	r1, [r3, #8]
 8008608:	4a0a      	ldr	r2, [pc, #40]	; (8008634 <HAL_TIM_Base_Start_IT+0x80>)
 800860a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800860c:	2a06      	cmp	r2, #6
 800860e:	d00a      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x72>
 8008610:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008614:	d007      	beq.n	8008626 <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800861c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	4770      	bx	lr
    return HAL_ERROR;
 8008622:	2001      	movs	r0, #1
 8008624:	4770      	bx	lr
  return HAL_OK;
 8008626:	2000      	movs	r0, #0
}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	40012c00 	.word	0x40012c00
 8008630:	40000400 	.word	0x40000400
 8008634:	00010007 	.word	0x00010007

08008638 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008638:	2800      	cmp	r0, #0
 800863a:	f000 808c 	beq.w	8008756 <HAL_TIM_PWM_Init+0x11e>
{
 800863e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008640:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008644:	4604      	mov	r4, r0
 8008646:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800864a:	2b00      	cmp	r3, #0
 800864c:	d078      	beq.n	8008740 <HAL_TIM_PWM_Init+0x108>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008650:	4944      	ldr	r1, [pc, #272]	; (8008764 <HAL_TIM_PWM_Init+0x12c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008652:	2302      	movs	r3, #2
 8008654:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008658:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800865a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800865c:	d05c      	beq.n	8008718 <HAL_TIM_PWM_Init+0xe0>
 800865e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008662:	d02c      	beq.n	80086be <HAL_TIM_PWM_Init+0x86>
 8008664:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8008668:	428a      	cmp	r2, r1
 800866a:	d028      	beq.n	80086be <HAL_TIM_PWM_Init+0x86>
 800866c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008670:	428a      	cmp	r2, r1
 8008672:	d024      	beq.n	80086be <HAL_TIM_PWM_Init+0x86>
 8008674:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008678:	428a      	cmp	r2, r1
 800867a:	d020      	beq.n	80086be <HAL_TIM_PWM_Init+0x86>
 800867c:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 8008680:	428a      	cmp	r2, r1
 8008682:	d049      	beq.n	8008718 <HAL_TIM_PWM_Init+0xe0>
 8008684:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
 8008688:	428a      	cmp	r2, r1
 800868a:	d066      	beq.n	800875a <HAL_TIM_PWM_Init+0x122>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800868c:	4936      	ldr	r1, [pc, #216]	; (8008768 <HAL_TIM_PWM_Init+0x130>)
 800868e:	428a      	cmp	r2, r1
 8008690:	d05b      	beq.n	800874a <HAL_TIM_PWM_Init+0x112>
 8008692:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008696:	428a      	cmp	r2, r1
 8008698:	d057      	beq.n	800874a <HAL_TIM_PWM_Init+0x112>
 800869a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800869e:	428a      	cmp	r2, r1
 80086a0:	d053      	beq.n	800874a <HAL_TIM_PWM_Init+0x112>
 80086a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086a6:	428a      	cmp	r2, r1
 80086a8:	d04f      	beq.n	800874a <HAL_TIM_PWM_Init+0x112>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086aa:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086ac:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086b2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80086b4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80086b6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086ba:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086bc:	e010      	b.n	80086e0 <HAL_TIM_PWM_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 80086be:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086c0:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80086c6:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80086c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086cc:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086d4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086d6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80086d8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80086da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086dc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80086de:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80086e0:	2301      	movs	r3, #1
 80086e2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80086ec:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80086f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80086f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80086f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008700:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008704:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008708:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800870c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008710:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008714:	2000      	movs	r0, #0
}
 8008716:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008718:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800871a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008720:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008726:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008728:	69a1      	ldr	r1, [r4, #24]
 800872a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800872e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008730:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008732:	68e3      	ldr	r3, [r4, #12]
 8008734:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800873a:	6963      	ldr	r3, [r4, #20]
 800873c:	6313      	str	r3, [r2, #48]	; 0x30
 800873e:	e7cf      	b.n	80086e0 <HAL_TIM_PWM_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8008740:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008744:	f7fc fd4c 	bl	80051e0 <HAL_TIM_PWM_MspInit>
 8008748:	e781      	b.n	800864e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800874a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800874c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800874e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008752:	4303      	orrs	r3, r0
 8008754:	e7e9      	b.n	800872a <HAL_TIM_PWM_Init+0xf2>
    return HAL_ERROR;
 8008756:	2001      	movs	r0, #1
}
 8008758:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800875a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800875c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008760:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008762:	e793      	b.n	800868c <HAL_TIM_PWM_Init+0x54>
 8008764:	40012c00 	.word	0x40012c00
 8008768:	40014000 	.word	0x40014000

0800876c <HAL_TIM_PWM_Start>:
 800876c:	2900      	cmp	r1, #0
 800876e:	d156      	bne.n	800881e <HAL_TIM_PWM_Start+0xb2>
 8008770:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008774:	2b01      	cmp	r3, #1
 8008776:	d16c      	bne.n	8008852 <HAL_TIM_PWM_Start+0xe6>
 8008778:	2302      	movs	r3, #2
 800877a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800877e:	6803      	ldr	r3, [r0, #0]
 8008780:	2201      	movs	r2, #1
 8008782:	6a18      	ldr	r0, [r3, #32]
 8008784:	f001 011f 	and.w	r1, r1, #31
 8008788:	fa02 f101 	lsl.w	r1, r2, r1
 800878c:	ea20 0001 	bic.w	r0, r0, r1
 8008790:	6218      	str	r0, [r3, #32]
 8008792:	6a18      	ldr	r0, [r3, #32]
 8008794:	4a41      	ldr	r2, [pc, #260]	; (800889c <HAL_TIM_PWM_Start+0x130>)
 8008796:	4301      	orrs	r1, r0
 8008798:	4293      	cmp	r3, r2
 800879a:	6219      	str	r1, [r3, #32]
 800879c:	d065      	beq.n	800886a <HAL_TIM_PWM_Start+0xfe>
 800879e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00f      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x5a>
 80087a6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00b      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x5a>
 80087ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d007      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x5a>
 80087b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <HAL_TIM_PWM_Start+0x5a>
 80087be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d103      	bne.n	80087ce <HAL_TIM_PWM_Start+0x62>
 80087c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087cc:	645a      	str	r2, [r3, #68]	; 0x44
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d2:	d016      	beq.n	8008802 <HAL_TIM_PWM_Start+0x96>
 80087d4:	4a32      	ldr	r2, [pc, #200]	; (80088a0 <HAL_TIM_PWM_Start+0x134>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d013      	beq.n	8008802 <HAL_TIM_PWM_Start+0x96>
 80087da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00f      	beq.n	8008802 <HAL_TIM_PWM_Start+0x96>
 80087e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d00b      	beq.n	8008802 <HAL_TIM_PWM_Start+0x96>
 80087ea:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d007      	beq.n	8008802 <HAL_TIM_PWM_Start+0x96>
 80087f2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <HAL_TIM_PWM_Start+0x96>
 80087fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087fe:	4293      	cmp	r3, r2
 8008800:	d107      	bne.n	8008812 <HAL_TIM_PWM_Start+0xa6>
 8008802:	6899      	ldr	r1, [r3, #8]
 8008804:	4a27      	ldr	r2, [pc, #156]	; (80088a4 <HAL_TIM_PWM_Start+0x138>)
 8008806:	400a      	ands	r2, r1
 8008808:	2a06      	cmp	r2, #6
 800880a:	d024      	beq.n	8008856 <HAL_TIM_PWM_Start+0xea>
 800880c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008810:	d021      	beq.n	8008856 <HAL_TIM_PWM_Start+0xea>
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	f042 0201 	orr.w	r2, r2, #1
 8008818:	2000      	movs	r0, #0
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	4770      	bx	lr
 800881e:	2904      	cmp	r1, #4
 8008820:	d01b      	beq.n	800885a <HAL_TIM_PWM_Start+0xee>
 8008822:	2908      	cmp	r1, #8
 8008824:	d026      	beq.n	8008874 <HAL_TIM_PWM_Start+0x108>
 8008826:	290c      	cmp	r1, #12
 8008828:	d00f      	beq.n	800884a <HAL_TIM_PWM_Start+0xde>
 800882a:	2910      	cmp	r1, #16
 800882c:	d02e      	beq.n	800888c <HAL_TIM_PWM_Start+0x120>
 800882e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008832:	2b01      	cmp	r3, #1
 8008834:	d10d      	bne.n	8008852 <HAL_TIM_PWM_Start+0xe6>
 8008836:	2908      	cmp	r1, #8
 8008838:	d020      	beq.n	800887c <HAL_TIM_PWM_Start+0x110>
 800883a:	290c      	cmp	r1, #12
 800883c:	d022      	beq.n	8008884 <HAL_TIM_PWM_Start+0x118>
 800883e:	2910      	cmp	r1, #16
 8008840:	d028      	beq.n	8008894 <HAL_TIM_PWM_Start+0x128>
 8008842:	2302      	movs	r3, #2
 8008844:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008848:	e799      	b.n	800877e <HAL_TIM_PWM_Start+0x12>
 800884a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800884e:	2b01      	cmp	r3, #1
 8008850:	d018      	beq.n	8008884 <HAL_TIM_PWM_Start+0x118>
 8008852:	2001      	movs	r0, #1
 8008854:	4770      	bx	lr
 8008856:	2000      	movs	r0, #0
 8008858:	4770      	bx	lr
 800885a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800885e:	2b01      	cmp	r3, #1
 8008860:	d1f7      	bne.n	8008852 <HAL_TIM_PWM_Start+0xe6>
 8008862:	2302      	movs	r3, #2
 8008864:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008868:	e789      	b.n	800877e <HAL_TIM_PWM_Start+0x12>
 800886a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008870:	645a      	str	r2, [r3, #68]	; 0x44
 8008872:	e7c6      	b.n	8008802 <HAL_TIM_PWM_Start+0x96>
 8008874:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008878:	2b01      	cmp	r3, #1
 800887a:	d1ea      	bne.n	8008852 <HAL_TIM_PWM_Start+0xe6>
 800887c:	2302      	movs	r3, #2
 800887e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008882:	e77c      	b.n	800877e <HAL_TIM_PWM_Start+0x12>
 8008884:	2302      	movs	r3, #2
 8008886:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800888a:	e778      	b.n	800877e <HAL_TIM_PWM_Start+0x12>
 800888c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008890:	2b01      	cmp	r3, #1
 8008892:	d1de      	bne.n	8008852 <HAL_TIM_PWM_Start+0xe6>
 8008894:	2302      	movs	r3, #2
 8008896:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800889a:	e770      	b.n	800877e <HAL_TIM_PWM_Start+0x12>
 800889c:	40012c00 	.word	0x40012c00
 80088a0:	40000400 	.word	0x40000400
 80088a4:	00010007 	.word	0x00010007

080088a8 <HAL_TIM_OC_DelayElapsedCallback>:
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop

080088ac <HAL_TIM_IC_CaptureCallback>:
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop

080088b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop

080088b4 <HAL_TIM_TriggerCallback>:
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088b8:	6803      	ldr	r3, [r0, #0]
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	0791      	lsls	r1, r2, #30
{
 80088be:	b510      	push	{r4, lr}
 80088c0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088c2:	d503      	bpl.n	80088cc <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	0792      	lsls	r2, r2, #30
 80088c8:	f100 808a 	bmi.w	80089e0 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088cc:	691a      	ldr	r2, [r3, #16]
 80088ce:	0752      	lsls	r2, r2, #29
 80088d0:	d502      	bpl.n	80088d8 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088d2:	68da      	ldr	r2, [r3, #12]
 80088d4:	0750      	lsls	r0, r2, #29
 80088d6:	d470      	bmi.n	80089ba <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	0711      	lsls	r1, r2, #28
 80088dc:	d502      	bpl.n	80088e4 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	0712      	lsls	r2, r2, #28
 80088e2:	d458      	bmi.n	8008996 <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	06d1      	lsls	r1, r2, #27
 80088e8:	d502      	bpl.n	80088f0 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	06d2      	lsls	r2, r2, #27
 80088ee:	d43e      	bmi.n	800896e <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088f0:	691a      	ldr	r2, [r3, #16]
 80088f2:	07d0      	lsls	r0, r2, #31
 80088f4:	d503      	bpl.n	80088fe <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	07d1      	lsls	r1, r2, #31
 80088fa:	f100 808a 	bmi.w	8008a12 <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	0612      	lsls	r2, r2, #24
 8008902:	d503      	bpl.n	800890c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	0610      	lsls	r0, r2, #24
 8008908:	f100 808b 	bmi.w	8008a22 <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	05d1      	lsls	r1, r2, #23
 8008910:	d503      	bpl.n	800891a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	0612      	lsls	r2, r2, #24
 8008916:	f100 808c 	bmi.w	8008a32 <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	0650      	lsls	r0, r2, #25
 800891e:	d503      	bpl.n	8008928 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	0651      	lsls	r1, r2, #25
 8008924:	f100 808d 	bmi.w	8008a42 <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008928:	691a      	ldr	r2, [r3, #16]
 800892a:	0692      	lsls	r2, r2, #26
 800892c:	d503      	bpl.n	8008936 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	0690      	lsls	r0, r2, #26
 8008932:	f100 808e 	bmi.w	8008a52 <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	02d1      	lsls	r1, r2, #11
 800893a:	d503      	bpl.n	8008944 <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	02d2      	lsls	r2, r2, #11
 8008940:	f100 808f 	bmi.w	8008a62 <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008944:	691a      	ldr	r2, [r3, #16]
 8008946:	0290      	lsls	r0, r2, #10
 8008948:	d503      	bpl.n	8008952 <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800894a:	68da      	ldr	r2, [r3, #12]
 800894c:	0291      	lsls	r1, r2, #10
 800894e:	f100 8090 	bmi.w	8008a72 <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	0252      	lsls	r2, r2, #9
 8008956:	d503      	bpl.n	8008960 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	0250      	lsls	r0, r2, #9
 800895c:	f100 8091 	bmi.w	8008a82 <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	0211      	lsls	r1, r2, #8
 8008964:	d502      	bpl.n	800896c <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	0212      	lsls	r2, r2, #8
 800896a:	d44a      	bmi.n	8008a02 <HAL_TIM_IRQHandler+0x14a>
}
 800896c:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800896e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008972:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008974:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008976:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800897e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008980:	f040 8090 	bne.w	8008aa4 <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008984:	f7ff ff90 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008988:	4620      	mov	r0, r4
 800898a:	f7ff ff91 	bl	80088b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008990:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008992:	7722      	strb	r2, [r4, #28]
 8008994:	e7ac      	b.n	80088f0 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008996:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800899a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800899c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800899e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80089a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089a6:	d17a      	bne.n	8008a9e <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a8:	f7ff ff7e 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ac:	4620      	mov	r0, r4
 80089ae:	f7ff ff7f 	bl	80088b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089b4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b6:	7722      	strb	r2, [r4, #28]
 80089b8:	e794      	b.n	80088e4 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089ba:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089be:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089c0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80089ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089cc:	d164      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ce:	f7ff ff6b 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff ff6c 	bl	80088b0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089da:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089dc:	7722      	strb	r2, [r4, #28]
 80089de:	e77b      	b.n	80088d8 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089e0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089e4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089e6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089e8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	0799      	lsls	r1, r3, #30
 80089ee:	d150      	bne.n	8008a92 <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f0:	f7ff ff5a 	bl	80088a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7ff ff5b 	bl	80088b0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089fc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fe:	7722      	strb	r2, [r4, #28]
 8008a00:	e764      	b.n	80088cc <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008a02:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008a06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008a08:	611a      	str	r2, [r3, #16]
}
 8008a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008a0e:	f000 ba0d 	b.w	8008e2c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a12:	f06f 0201 	mvn.w	r2, #1
 8008a16:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7fa fdd9 	bl	80035d0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	e76d      	b.n	80088fe <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 f9f5 	bl	8008e18 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	e76c      	b.n	800890c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 f9ef 	bl	8008e1c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	e76b      	b.n	800891a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a46:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f7ff ff33 	bl	80088b4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	e76a      	b.n	8008928 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a52:	f06f 0220 	mvn.w	r2, #32
 8008a56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f9db 	bl	8008e14 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	e769      	b.n	8008936 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008a62:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008a66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 f9d9 	bl	8008e20 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	e768      	b.n	8008944 <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008a72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008a76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f000 f9d3 	bl	8008e24 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008a7e:	6823      	ldr	r3, [r4, #0]
 8008a80:	e767      	b.n	8008952 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008a82:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008a86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f000 f9cd 	bl	8008e28 <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	e766      	b.n	8008960 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8008a92:	f7ff ff0b 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 8008a96:	e7b0      	b.n	80089fa <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8008a98:	f7ff ff08 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 8008a9c:	e79c      	b.n	80089d8 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8008a9e:	f7ff ff05 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 8008aa2:	e786      	b.n	80089b2 <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8008aa4:	f7ff ff02 	bl	80088ac <HAL_TIM_IC_CaptureCallback>
 8008aa8:	e771      	b.n	800898e <HAL_TIM_IRQHandler+0xd6>
 8008aaa:	bf00      	nop

08008aac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aac:	6a03      	ldr	r3, [r0, #32]
 8008aae:	f023 0310 	bic.w	r3, r3, #16
 8008ab2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008ab4:	6a03      	ldr	r3, [r0, #32]
{
 8008ab6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8008ab8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008aba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008abc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008abe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008ac2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ac6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008aca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008acc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ad0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ad4:	4d1c      	ldr	r5, [pc, #112]	; (8008b48 <TIM_OC2_SetConfig+0x9c>)
 8008ad6:	42a8      	cmp	r0, r5
 8008ad8:	d017      	beq.n	8008b0a <TIM_OC2_SetConfig+0x5e>
 8008ada:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008ade:	42a8      	cmp	r0, r5
 8008ae0:	d013      	beq.n	8008b0a <TIM_OC2_SetConfig+0x5e>
 8008ae2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008ae6:	42a8      	cmp	r0, r5
 8008ae8:	d025      	beq.n	8008b36 <TIM_OC2_SetConfig+0x8a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aea:	4d18      	ldr	r5, [pc, #96]	; (8008b4c <TIM_OC2_SetConfig+0xa0>)
 8008aec:	42a8      	cmp	r0, r5
 8008aee:	d013      	beq.n	8008b18 <TIM_OC2_SetConfig+0x6c>
 8008af0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008af4:	42a8      	cmp	r0, r5
 8008af6:	d00f      	beq.n	8008b18 <TIM_OC2_SetConfig+0x6c>
 8008af8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008afc:	42a8      	cmp	r0, r5
 8008afe:	d00b      	beq.n	8008b18 <TIM_OC2_SetConfig+0x6c>
 8008b00:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008b04:	42a8      	cmp	r0, r5
 8008b06:	d10f      	bne.n	8008b28 <TIM_OC2_SetConfig+0x7c>
 8008b08:	e006      	b.n	8008b18 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b0a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b18:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b1c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b20:	ea46 0c05 	orr.w	ip, r6, r5
 8008b24:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008b28:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008b2a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008b2c:	6182      	str	r2, [r0, #24]
}
 8008b2e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008b30:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008b32:	6203      	str	r3, [r0, #32]
}
 8008b34:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b36:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b44:	e7d1      	b.n	8008aea <TIM_OC2_SetConfig+0x3e>
 8008b46:	bf00      	nop
 8008b48:	40012c00 	.word	0x40012c00
 8008b4c:	40014000 	.word	0x40014000

08008b50 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008b50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	f000 80fc 	beq.w	8008d52 <HAL_TIM_PWM_ConfigChannel+0x202>
 8008b5a:	2301      	movs	r3, #1
{
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008b62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008b66:	2a14      	cmp	r2, #20
 8008b68:	d80c      	bhi.n	8008b84 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008b6a:	e8df f002 	tbb	[pc, r2]
 8008b6e:	0b57      	.short	0x0b57
 8008b70:	0b6c0b0b 	.word	0x0b6c0b0b
 8008b74:	0b820b0b 	.word	0x0b820b0b
 8008b78:	0b970b0b 	.word	0x0b970b0b
 8008b7c:	0bad0b0b 	.word	0x0bad0b0b
 8008b80:	0b0b      	.short	0x0b0b
 8008b82:	10          	.byte	0x10
 8008b83:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008b84:	2300      	movs	r3, #0
 8008b86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8008b8a:	2001      	movs	r0, #1
}
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b8e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b90:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b92:	6a1a      	ldr	r2, [r3, #32]
 8008b94:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008b98:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008b9a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008b9c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008b9e:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ba0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008ba4:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bac:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bb2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb6:	4e68      	ldr	r6, [pc, #416]	; (8008d58 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8008bb8:	42b3      	cmp	r3, r6
 8008bba:	d013      	beq.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008bbc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008bc0:	42b3      	cmp	r3, r6
 8008bc2:	d00f      	beq.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008bc4:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008bc8:	42b3      	cmp	r3, r6
 8008bca:	d00b      	beq.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008bcc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008bd0:	42b3      	cmp	r3, r6
 8008bd2:	d007      	beq.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008bd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008bd8:	42b3      	cmp	r3, r6
 8008bda:	d003      	beq.n	8008be4 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008bdc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008be0:	42b3      	cmp	r3, r6
 8008be2:	d104      	bne.n	8008bee <HAL_TIM_PWM_ConfigChannel+0x9e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008be4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008be6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bea:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bee:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bf0:	6519      	str	r1, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bf2:	6869      	ldr	r1, [r5, #4]
 8008bf4:	64d9      	str	r1, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008bf8:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008bfa:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008bfc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008c00:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c02:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c04:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008c08:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c0c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8008c10:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008c12:	2300      	movs	r3, #0
 8008c14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008c18:	2000      	movs	r0, #0
}
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c1c:	6800      	ldr	r0, [r0, #0]
 8008c1e:	f7ff fb4d 	bl	80082bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c22:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c24:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c26:	6999      	ldr	r1, [r3, #24]
 8008c28:	f041 0108 	orr.w	r1, r1, #8
 8008c2c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c2e:	6999      	ldr	r1, [r3, #24]
 8008c30:	f021 0104 	bic.w	r1, r1, #4
 8008c34:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c36:	699a      	ldr	r2, [r3, #24]
 8008c38:	4302      	orrs	r2, r0
 8008c3a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008c42:	2000      	movs	r0, #0
}
 8008c44:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c46:	6800      	ldr	r0, [r0, #0]
 8008c48:	f7ff ff30 	bl	8008aac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c4c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c4e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c50:	6999      	ldr	r1, [r3, #24]
 8008c52:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008c56:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c58:	6999      	ldr	r1, [r3, #24]
 8008c5a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008c5e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c60:	699a      	ldr	r2, [r3, #24]
 8008c62:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008c66:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008c6e:	2000      	movs	r0, #0
}
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c72:	6800      	ldr	r0, [r0, #0]
 8008c74:	f7ff fb62 	bl	800833c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c78:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c7a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c7c:	69d9      	ldr	r1, [r3, #28]
 8008c7e:	f041 0108 	orr.w	r1, r1, #8
 8008c82:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c84:	69d9      	ldr	r1, [r3, #28]
 8008c86:	f021 0104 	bic.w	r1, r1, #4
 8008c8a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c8c:	69da      	ldr	r2, [r3, #28]
 8008c8e:	4302      	orrs	r2, r0
 8008c90:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008c92:	2300      	movs	r3, #0
 8008c94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008c98:	2000      	movs	r0, #0
}
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c9c:	6800      	ldr	r0, [r0, #0]
 8008c9e:	f7ff fb9d 	bl	80083dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ca2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ca4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ca6:	69d9      	ldr	r1, [r3, #28]
 8008ca8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008cac:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cae:	69d9      	ldr	r1, [r3, #28]
 8008cb0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008cb4:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cb6:	69da      	ldr	r2, [r3, #28]
 8008cb8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008cbc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008cc4:	2000      	movs	r0, #0
}
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008cc8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008cca:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ccc:	6a1a      	ldr	r2, [r3, #32]
 8008cce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cd2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008cd4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008cd6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008cd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cda:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008cde:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008ce2:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ce4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008ce6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008cea:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cee:	4e1a      	ldr	r6, [pc, #104]	; (8008d58 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8008cf0:	42b3      	cmp	r3, r6
 8008cf2:	d013      	beq.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8008cf4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008cf8:	42b3      	cmp	r3, r6
 8008cfa:	d00f      	beq.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8008cfc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008d00:	42b3      	cmp	r3, r6
 8008d02:	d00b      	beq.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8008d04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008d08:	42b3      	cmp	r3, r6
 8008d0a:	d007      	beq.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8008d0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008d10:	42b3      	cmp	r3, r6
 8008d12:	d003      	beq.n	8008d1c <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8008d14:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008d18:	42b3      	cmp	r3, r6
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_ConfigChannel+0x1d6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d1c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d1e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d22:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008d26:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008d28:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008d2a:	6869      	ldr	r1, [r5, #4]
 8008d2c:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8008d2e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d30:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d32:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d34:	f041 0108 	orr.w	r1, r1, #8
 8008d38:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d3a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d3c:	f021 0104 	bic.w	r1, r1, #4
 8008d40:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d44:	432a      	orrs	r2, r5
 8008d46:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008d4e:	2000      	movs	r0, #0
}
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8008d52:	2002      	movs	r0, #2
}
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40012c00 	.word	0x40012c00

08008d5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d051      	beq.n	8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xac>
{
 8008d64:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d66:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d68:	4d28      	ldr	r5, [pc, #160]	; (8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d70:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008d72:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008d74:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d76:	d03b      	beq.n	8008df0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008d78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008d7c:	42aa      	cmp	r2, r5
 8008d7e:	d032      	beq.n	8008de6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8008d80:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8008d84:	42aa      	cmp	r2, r5
 8008d86:	d02e      	beq.n	8008de6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d88:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d92:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d94:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008d98:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d9a:	d016      	beq.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008d9c:	4b1c      	ldr	r3, [pc, #112]	; (8008e10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d013      	beq.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d00f      	beq.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d00b      	beq.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008db2:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d007      	beq.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008dba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d003      	beq.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8008dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d104      	bne.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dca:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dcc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dd0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dd2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008dd4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008ddc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008de0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8008de2:	4618      	mov	r0, r3
}
 8008de4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008de6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008de8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008dec:	432b      	orrs	r3, r5
 8008dee:	e7cb      	b.n	8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 8008df0:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008df2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008df6:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008df8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dfc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e02:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008e04:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e06:	e7e0      	b.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8008e08:	2002      	movs	r0, #2
}
 8008e0a:	4770      	bx	lr
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	40000400 	.word	0x40000400

08008e14 <HAL_TIMEx_CommutCallback>:
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop

08008e18 <HAL_TIMEx_BreakCallback>:
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop

08008e1c <HAL_TIMEx_Break2Callback>:
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop

08008e20 <HAL_TIMEx_EncoderIndexCallback>:
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop

08008e24 <HAL_TIMEx_DirectionChangeCallback>:
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop

08008e28 <HAL_TIMEx_IndexErrorCallback>:
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop

08008e2c <HAL_TIMEx_TransitionErrorCallback>:
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop

08008e30 <HAL_UART_TxCpltCallback>:
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop

08008e34 <HAL_UART_RxHalfCpltCallback>:
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop

08008e38 <HAL_UART_ErrorCallback>:
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop

08008e3c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e3c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e3e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e40:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
{
 8008e44:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e46:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	0612      	lsls	r2, r2, #24
 8008e4e:	d501      	bpl.n	8008e54 <UART_DMAError+0x18>
 8008e50:	2921      	cmp	r1, #33	; 0x21
 8008e52:	d00d      	beq.n	8008e70 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	0652      	lsls	r2, r2, #25
 8008e58:	d501      	bpl.n	8008e5e <UART_DMAError+0x22>
 8008e5a:	2c22      	cmp	r4, #34	; 0x22
 8008e5c:	d023      	beq.n	8008ea6 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e5e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8008e62:	f043 0310 	orr.w	r3, r3, #16
 8008e66:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e6a:	f7ff ffe5 	bl	8008e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e6e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	e843 2100 	strex	r1, r2, [r3]
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d1f7      	bne.n	8008e76 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	f103 0208 	add.w	r2, r3, #8
 8008e8a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e8e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	f103 0c08 	add.w	ip, r3, #8
 8008e96:	e84c 2100 	strex	r1, r2, [ip]
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	d1f3      	bne.n	8008e86 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
}
 8008ea4:	e7d6      	b.n	8008e54 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	e843 2100 	strex	r1, r2, [r3]
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d1f7      	bne.n	8008eac <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ebc:	4c13      	ldr	r4, [pc, #76]	; (8008f0c <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	f103 0208 	add.w	r2, r3, #8
 8008ec2:	e852 2f00 	ldrex	r2, [r2]
 8008ec6:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	f103 0c08 	add.w	ip, r3, #8
 8008ecc:	e84c 2100 	strex	r1, r2, [ip]
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	d1f4      	bne.n	8008ebe <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8008ed6:	2a01      	cmp	r2, #1
 8008ed8:	d006      	beq.n	8008ee8 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eda:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8008ee2:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee4:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8008ee6:	e7ba      	b.n	8008e5e <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	e843 2100 	strex	r1, r2, [r3]
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	d0f0      	beq.n	8008eda <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	e853 2f00 	ldrex	r2, [r3]
 8008efc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	e843 2100 	strex	r1, r2, [r3]
 8008f04:	2900      	cmp	r1, #0
 8008f06:	d1ef      	bne.n	8008ee8 <UART_DMAError+0xac>
 8008f08:	e7e7      	b.n	8008eda <UART_DMAError+0x9e>
 8008f0a:	bf00      	nop
 8008f0c:	effffffe 	.word	0xeffffffe

08008f10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f10:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f12:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f1a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f1e:	f7ff ff8b 	bl	8008e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f22:	bd08      	pop	{r3, pc}

08008f24 <HAL_UARTEx_RxEventCallback>:
}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop

08008f28 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f28:	6803      	ldr	r3, [r0, #0]
 8008f2a:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f2c:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8008f30:	ea12 0f0c 	tst.w	r2, ip
{
 8008f34:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f36:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f38:	6899      	ldr	r1, [r3, #8]
{
 8008f3a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008f3c:	f000 80ea 	beq.w	8009114 <HAL_UART_IRQHandler+0x1ec>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f40:	4e9a      	ldr	r6, [pc, #616]	; (80091ac <HAL_UART_IRQHandler+0x284>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f42:	489b      	ldr	r0, [pc, #620]	; (80091b0 <HAL_UART_IRQHandler+0x288>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f44:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f48:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f4a:	ea5c 0600 	orrs.w	r6, ip, r0
 8008f4e:	d155      	bne.n	8008ffc <HAL_UART_IRQHandler+0xd4>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f50:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008f52:	2801      	cmp	r0, #1
 8008f54:	d022      	beq.n	8008f9c <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008f56:	02d0      	lsls	r0, r2, #11
 8008f58:	d502      	bpl.n	8008f60 <HAL_UART_IRQHandler+0x38>
 8008f5a:	024e      	lsls	r6, r1, #9
 8008f5c:	f100 8103 	bmi.w	8009166 <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f60:	0610      	lsls	r0, r2, #24
 8008f62:	d506      	bpl.n	8008f72 <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f64:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008f68:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f6c:	4301      	orrs	r1, r0
 8008f6e:	f040 80f2 	bne.w	8009156 <HAL_UART_IRQHandler+0x22e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f72:	0651      	lsls	r1, r2, #25
 8008f74:	d534      	bpl.n	8008fe0 <HAL_UART_IRQHandler+0xb8>
 8008f76:	066e      	lsls	r6, r5, #25
 8008f78:	d532      	bpl.n	8008fe0 <HAL_UART_IRQHandler+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	e843 2100 	strex	r1, r2, [r3]
 8008f86:	2900      	cmp	r1, #0
 8008f88:	d1f7      	bne.n	8008f7a <HAL_UART_IRQHandler+0x52>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f8a:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f8c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008f8e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8008f92:	6763      	str	r3, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f94:	4620      	mov	r0, r4
 8008f96:	f7ff ff4b 	bl	8008e30 <HAL_UART_TxCpltCallback>
}
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f9c:	06d6      	lsls	r6, r2, #27
 8008f9e:	d5da      	bpl.n	8008f56 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fa0:	06e8      	lsls	r0, r5, #27
 8008fa2:	d5d8      	bpl.n	8008f56 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fa4:	2210      	movs	r2, #16
 8008fa6:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa8:	689a      	ldr	r2, [r3, #8]
 8008faa:	0652      	lsls	r2, r2, #25
 8008fac:	f140 8106 	bpl.w	80091bc <HAL_UART_IRQHandler+0x294>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fb0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008fb2:	6801      	ldr	r1, [r0, #0]
 8008fb4:	684a      	ldr	r2, [r1, #4]
 8008fb6:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008fb8:	2a00      	cmp	r2, #0
 8008fba:	d0ee      	beq.n	8008f9a <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fbc:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8008fc0:	4295      	cmp	r5, r2
 8008fc2:	d9ea      	bls.n	8008f9a <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8008fc4:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008fc8:	680a      	ldr	r2, [r1, #0]
 8008fca:	0696      	lsls	r6, r2, #26
 8008fcc:	f140 812b 	bpl.w	8009226 <HAL_UART_IRQHandler+0x2fe>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008fd0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8008fd4:	1a69      	subs	r1, r5, r1
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	b289      	uxth	r1, r1
 8008fda:	f7ff ffa3 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
}
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008fe0:	0210      	lsls	r0, r2, #8
 8008fe2:	d502      	bpl.n	8008fea <HAL_UART_IRQHandler+0xc2>
 8008fe4:	0069      	lsls	r1, r5, #1
 8008fe6:	f100 80db 	bmi.w	80091a0 <HAL_UART_IRQHandler+0x278>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008fea:	01d3      	lsls	r3, r2, #7
 8008fec:	d5d5      	bpl.n	8008f9a <HAL_UART_IRQHandler+0x72>
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	dad3      	bge.n	8008f9a <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ff2:	4620      	mov	r0, r4
}
 8008ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ff8:	f000 bdb6 	b.w	8009b68 <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ffc:	07d6      	lsls	r6, r2, #31
 8008ffe:	d509      	bpl.n	8009014 <HAL_UART_IRQHandler+0xec>
 8009000:	05ee      	lsls	r6, r5, #23
 8009002:	d507      	bpl.n	8009014 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009004:	2601      	movs	r6, #1
 8009006:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009008:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800900c:	f046 0601 	orr.w	r6, r6, #1
 8009010:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009014:	0796      	lsls	r6, r2, #30
 8009016:	f140 808f 	bpl.w	8009138 <HAL_UART_IRQHandler+0x210>
 800901a:	07ce      	lsls	r6, r1, #31
 800901c:	d50a      	bpl.n	8009034 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800901e:	2602      	movs	r6, #2
 8009020:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009022:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8009026:	f046 0604 	orr.w	r6, r6, #4
 800902a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800902e:	0756      	lsls	r6, r2, #29
 8009030:	f100 8088 	bmi.w	8009144 <HAL_UART_IRQHandler+0x21c>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009034:	0716      	lsls	r6, r2, #28
 8009036:	d50b      	bpl.n	8009050 <HAL_UART_IRQHandler+0x128>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009038:	f005 0620 	and.w	r6, r5, #32
 800903c:	4330      	orrs	r0, r6
 800903e:	d007      	beq.n	8009050 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009040:	2008      	movs	r0, #8
 8009042:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009044:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009048:	f040 0008 	orr.w	r0, r0, #8
 800904c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009050:	0510      	lsls	r0, r2, #20
 8009052:	d50a      	bpl.n	800906a <HAL_UART_IRQHandler+0x142>
 8009054:	016e      	lsls	r6, r5, #5
 8009056:	d508      	bpl.n	800906a <HAL_UART_IRQHandler+0x142>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009058:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800905c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800905e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009062:	f040 0020 	orr.w	r0, r0, #32
 8009066:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800906a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800906e:	2800      	cmp	r0, #0
 8009070:	d093      	beq.n	8008f9a <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009072:	0690      	lsls	r0, r2, #26
 8009074:	d50b      	bpl.n	800908e <HAL_UART_IRQHandler+0x166>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009076:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800907a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800907e:	ea55 0201 	orrs.w	r2, r5, r1
 8009082:	d004      	beq.n	800908e <HAL_UART_IRQHandler+0x166>
        if (huart->RxISR != NULL)
 8009084:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8009086:	b112      	cbz	r2, 800908e <HAL_UART_IRQHandler+0x166>
          huart->RxISR(huart);
 8009088:	4620      	mov	r0, r4
 800908a:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800908c:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800908e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009092:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009094:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009098:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800909c:	4315      	orrs	r5, r2
 800909e:	f000 80f3 	beq.w	8009288 <HAL_UART_IRQHandler+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	e843 2100 	strex	r1, r2, [r3]
 80090ae:	2900      	cmp	r1, #0
 80090b0:	d1f7      	bne.n	80090a2 <HAL_UART_IRQHandler+0x17a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090b2:	4840      	ldr	r0, [pc, #256]	; (80091b4 <HAL_UART_IRQHandler+0x28c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	f103 0208 	add.w	r2, r3, #8
 80090b8:	e852 2f00 	ldrex	r2, [r2]
 80090bc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	f103 0508 	add.w	r5, r3, #8
 80090c2:	e845 2100 	strex	r1, r2, [r5]
 80090c6:	2900      	cmp	r1, #0
 80090c8:	d1f4      	bne.n	80090b4 <HAL_UART_IRQHandler+0x18c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80090cc:	2a01      	cmp	r2, #1
 80090ce:	d052      	beq.n	8009176 <HAL_UART_IRQHandler+0x24e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80090d2:	2120      	movs	r1, #32
 80090d4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090d8:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090da:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80090dc:	6722      	str	r2, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090de:	064a      	lsls	r2, r1, #25
 80090e0:	d55a      	bpl.n	8009198 <HAL_UART_IRQHandler+0x270>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	f103 0208 	add.w	r2, r3, #8
 80090e6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	f103 0008 	add.w	r0, r3, #8
 80090f2:	e840 2100 	strex	r1, r2, [r0]
 80090f6:	2900      	cmp	r1, #0
 80090f8:	d1f3      	bne.n	80090e2 <HAL_UART_IRQHandler+0x1ba>
          if (huart->hdmarx != NULL)
 80090fa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d04b      	beq.n	8009198 <HAL_UART_IRQHandler+0x270>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009100:	4b2d      	ldr	r3, [pc, #180]	; (80091b8 <HAL_UART_IRQHandler+0x290>)
 8009102:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009104:	f7fd fa4c 	bl	80065a0 <HAL_DMA_Abort_IT>
 8009108:	2800      	cmp	r0, #0
 800910a:	f43f af46 	beq.w	8008f9a <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800910e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8009110:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009112:	e00e      	b.n	8009132 <HAL_UART_IRQHandler+0x20a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009114:	0696      	lsls	r6, r2, #26
 8009116:	f57f af1b 	bpl.w	8008f50 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800911a:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800911e:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 8009122:	ea56 060c 	orrs.w	r6, r6, ip
 8009126:	f43f af13 	beq.w	8008f50 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 800912a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800912c:	2b00      	cmp	r3, #0
 800912e:	f43f af34 	beq.w	8008f9a <HAL_UART_IRQHandler+0x72>
}
 8009132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009136:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009138:	0756      	lsls	r6, r2, #29
 800913a:	f57f af7b 	bpl.w	8009034 <HAL_UART_IRQHandler+0x10c>
 800913e:	07ce      	lsls	r6, r1, #31
 8009140:	f57f af78 	bpl.w	8009034 <HAL_UART_IRQHandler+0x10c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009144:	2604      	movs	r6, #4
 8009146:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009148:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 800914c:	f046 0602 	orr.w	r6, r6, #2
 8009150:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8009154:	e76e      	b.n	8009034 <HAL_UART_IRQHandler+0x10c>
    if (huart->TxISR != NULL)
 8009156:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009158:	2b00      	cmp	r3, #0
 800915a:	f43f af1e 	beq.w	8008f9a <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 800915e:	4620      	mov	r0, r4
}
 8009160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8009164:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009166:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800916a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800916c:	621a      	str	r2, [r3, #32]
}
 800916e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8009172:	f000 bcf7 	b.w	8009b64 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800917a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	e843 2100 	strex	r1, r2, [r3]
 8009182:	2900      	cmp	r1, #0
 8009184:	d0a4      	beq.n	80090d0 <HAL_UART_IRQHandler+0x1a8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	e853 2f00 	ldrex	r2, [r3]
 800918a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	e843 2100 	strex	r1, r2, [r3]
 8009192:	2900      	cmp	r1, #0
 8009194:	d1ef      	bne.n	8009176 <HAL_UART_IRQHandler+0x24e>
 8009196:	e79b      	b.n	80090d0 <HAL_UART_IRQHandler+0x1a8>
            HAL_UART_ErrorCallback(huart);
 8009198:	4620      	mov	r0, r4
 800919a:	f7ff fe4d 	bl	8008e38 <HAL_UART_ErrorCallback>
}
 800919e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091a0:	4620      	mov	r0, r4
}
 80091a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80091a6:	f000 bce1 	b.w	8009b6c <HAL_UARTEx_TxFifoEmptyCallback>
 80091aa:	bf00      	nop
 80091ac:	04000120 	.word	0x04000120
 80091b0:	10000001 	.word	0x10000001
 80091b4:	effffffe 	.word	0xeffffffe
 80091b8:	08008f11 	.word	0x08008f11
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091bc:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 80091c0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80091c4:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	f43f aee6 	beq.w	8008f9a <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091ce:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80091d2:	1a51      	subs	r1, r2, r1
 80091d4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80091d6:	2900      	cmp	r1, #0
 80091d8:	f43f aedf 	beq.w	8008f9a <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	e843 2000 	strex	r0, r2, [r3]
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d1f7      	bne.n	80091dc <HAL_UART_IRQHandler+0x2b4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ec:	4d29      	ldr	r5, [pc, #164]	; (8009294 <HAL_UART_IRQHandler+0x36c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	f103 0208 	add.w	r2, r3, #8
 80091f2:	e852 2f00 	ldrex	r2, [r2]
 80091f6:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	f103 0608 	add.w	r6, r3, #8
 80091fc:	e846 2000 	strex	r0, r2, [r6]
 8009200:	2800      	cmp	r0, #0
 8009202:	d1f4      	bne.n	80091ee <HAL_UART_IRQHandler+0x2c6>
        huart->RxState = HAL_UART_STATE_READY;
 8009204:	2220      	movs	r2, #32
 8009206:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800920a:	6720      	str	r0, [r4, #112]	; 0x70
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920c:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009212:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	e843 2000 	strex	r0, r2, [r3]
 800921a:	2800      	cmp	r0, #0
 800921c:	d1f7      	bne.n	800920e <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800921e:	4620      	mov	r0, r4
 8009220:	f7ff fe80 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
}
 8009224:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009226:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800922a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	e843 2100 	strex	r1, r2, [r3]
 8009232:	2900      	cmp	r1, #0
 8009234:	d1f7      	bne.n	8009226 <HAL_UART_IRQHandler+0x2fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	f103 0208 	add.w	r2, r3, #8
 800923a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	f103 0508 	add.w	r5, r3, #8
 8009246:	e845 2100 	strex	r1, r2, [r5]
 800924a:	2900      	cmp	r1, #0
 800924c:	d1f3      	bne.n	8009236 <HAL_UART_IRQHandler+0x30e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	f103 0208 	add.w	r2, r3, #8
 8009252:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	f103 0508 	add.w	r5, r3, #8
 800925e:	e845 2100 	strex	r1, r2, [r5]
 8009262:	2900      	cmp	r1, #0
 8009264:	d1f3      	bne.n	800924e <HAL_UART_IRQHandler+0x326>
          huart->RxState = HAL_UART_STATE_READY;
 8009266:	2220      	movs	r2, #32
 8009268:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926c:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009272:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	e843 2100 	strex	r1, r2, [r3]
 800927a:	2900      	cmp	r1, #0
 800927c:	d1f7      	bne.n	800926e <HAL_UART_IRQHandler+0x346>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800927e:	f7fd f955 	bl	800652c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009282:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8009286:	e6a3      	b.n	8008fd0 <HAL_UART_IRQHandler+0xa8>
        HAL_UART_ErrorCallback(huart);
 8009288:	4620      	mov	r0, r4
 800928a:	f7ff fdd5 	bl	8008e38 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	effffffe 	.word	0xeffffffe

08009298 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009298:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800929a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800929c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d002      	beq.n	80092a8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80092a2:	f7ff fdc7 	bl	8008e34 <HAL_UART_RxHalfCpltCallback>
}
 80092a6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80092a8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80092ac:	0849      	lsrs	r1, r1, #1
 80092ae:	f7ff fe39 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
}
 80092b2:	bd08      	pop	{r3, pc}

080092b4 <UART_DMAReceiveCplt>:
{
 80092b4:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092b6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	f012 0220 	ands.w	r2, r2, #32
 80092c0:	d128      	bne.n	8009314 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 80092c2:	6803      	ldr	r3, [r0, #0]
 80092c4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	e843 2100 	strex	r1, r2, [r3]
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d1f7      	bne.n	80092c8 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	f103 0208 	add.w	r2, r3, #8
 80092dc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	f103 0c08 	add.w	ip, r3, #8
 80092e8:	e84c 2100 	strex	r1, r2, [ip]
 80092ec:	2900      	cmp	r1, #0
 80092ee:	d1f3      	bne.n	80092d8 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	f103 0208 	add.w	r2, r3, #8
 80092f4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fc:	f103 0c08 	add.w	ip, r3, #8
 8009300:	e84c 2100 	strex	r1, r2, [ip]
 8009304:	2900      	cmp	r1, #0
 8009306:	d1f3      	bne.n	80092f0 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8009308:	2220      	movs	r2, #32
 800930a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800930e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8009310:	2a01      	cmp	r2, #1
 8009312:	d005      	beq.n	8009320 <UART_DMAReceiveCplt+0x6c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009314:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009316:	2b01      	cmp	r3, #1
 8009318:	d013      	beq.n	8009342 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800931a:	f7fa ff5d 	bl	80041d8 <HAL_UART_RxCpltCallback>
}
 800931e:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009324:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009328:	e843 2100 	strex	r1, r2, [r3]
 800932c:	2900      	cmp	r1, #0
 800932e:	d0f1      	beq.n	8009314 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009330:	e853 2f00 	ldrex	r2, [r3]
 8009334:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	e843 2100 	strex	r1, r2, [r3]
 800933c:	2900      	cmp	r1, #0
 800933e:	d1ef      	bne.n	8009320 <UART_DMAReceiveCplt+0x6c>
 8009340:	e7e8      	b.n	8009314 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009342:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8009346:	f7ff fded 	bl	8008f24 <HAL_UARTEx_RxEventCallback>
}
 800934a:	bd08      	pop	{r3, pc}

0800934c <UART_SetConfig>:
{
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009350:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009352:	6882      	ldr	r2, [r0, #8]
 8009354:	6900      	ldr	r0, [r0, #16]
 8009356:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009358:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800935a:	4302      	orrs	r2, r0
 800935c:	430a      	orrs	r2, r1
 800935e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009360:	49b3      	ldr	r1, [pc, #716]	; (8009630 <UART_SetConfig+0x2e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009362:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009364:	4029      	ands	r1, r5
 8009366:	430a      	orrs	r2, r1
 8009368:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	68e1      	ldr	r1, [r4, #12]
 800936e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009372:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009374:	49af      	ldr	r1, [pc, #700]	; (8009634 <UART_SetConfig+0x2e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009376:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009378:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800937a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800937c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800937e:	f000 8081 	beq.w	8009484 <UART_SetConfig+0x138>
    tmpreg |= huart->Init.OneBitSampling;
 8009382:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009384:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009388:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800938c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009396:	f022 020f 	bic.w	r2, r2, #15
 800939a:	430a      	orrs	r2, r1
 800939c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800939e:	4aa6      	ldr	r2, [pc, #664]	; (8009638 <UART_SetConfig+0x2ec>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d027      	beq.n	80093f4 <UART_SetConfig+0xa8>
 80093a4:	4aa5      	ldr	r2, [pc, #660]	; (800963c <UART_SetConfig+0x2f0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d04b      	beq.n	8009442 <UART_SetConfig+0xf6>
 80093aa:	4aa5      	ldr	r2, [pc, #660]	; (8009640 <UART_SetConfig+0x2f4>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	f000 8113 	beq.w	80095d8 <UART_SetConfig+0x28c>
 80093b2:	4aa4      	ldr	r2, [pc, #656]	; (8009644 <UART_SetConfig+0x2f8>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	f000 80ba 	beq.w	800952e <UART_SetConfig+0x1e2>
 80093ba:	4aa3      	ldr	r2, [pc, #652]	; (8009648 <UART_SetConfig+0x2fc>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d111      	bne.n	80093e4 <UART_SetConfig+0x98>
 80093c0:	4ba2      	ldr	r3, [pc, #648]	; (800964c <UART_SetConfig+0x300>)
 80093c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093ce:	f000 8128 	beq.w	8009622 <UART_SetConfig+0x2d6>
 80093d2:	f200 80d7 	bhi.w	8009584 <UART_SetConfig+0x238>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 80db 	beq.w	8009592 <UART_SetConfig+0x246>
 80093dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093e0:	f000 80b1 	beq.w	8009546 <UART_SetConfig+0x1fa>
        ret = HAL_ERROR;
 80093e4:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80093e6:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80093e8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 80093ec:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80093f0:	66a2      	str	r2, [r4, #104]	; 0x68
}
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093f4:	4b95      	ldr	r3, [pc, #596]	; (800964c <UART_SetConfig+0x300>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	3b01      	subs	r3, #1
 8009400:	2b02      	cmp	r3, #2
 8009402:	f240 808e 	bls.w	8009522 <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009406:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800940a:	f000 8105 	beq.w	8009618 <UART_SetConfig+0x2cc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800940e:	f7fe fa9b 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009412:	2800      	cmp	r0, #0
 8009414:	f000 80de 	beq.w	80095d4 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009418:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800941a:	6862      	ldr	r2, [r4, #4]
 800941c:	4b8c      	ldr	r3, [pc, #560]	; (8009650 <UART_SetConfig+0x304>)
 800941e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8009422:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009426:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800942a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800942e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009432:	f1a3 0210 	sub.w	r2, r3, #16
 8009436:	428a      	cmp	r2, r1
 8009438:	d8d4      	bhi.n	80093e4 <UART_SetConfig+0x98>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800943a:	6822      	ldr	r2, [r4, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	60d3      	str	r3, [r2, #12]
 8009440:	e7d1      	b.n	80093e6 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009442:	4b82      	ldr	r3, [pc, #520]	; (800964c <UART_SetConfig+0x300>)
 8009444:	4a83      	ldr	r2, [pc, #524]	; (8009654 <UART_SetConfig+0x308>)
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800944a:	f003 030c 	and.w	r3, r3, #12
 800944e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009450:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009454:	d07d      	beq.n	8009552 <UART_SetConfig+0x206>
    switch (clocksource)
 8009456:	2b08      	cmp	r3, #8
 8009458:	d8c4      	bhi.n	80093e4 <UART_SetConfig+0x98>
 800945a:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <UART_SetConfig+0x114>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	0800958d 	.word	0x0800958d
 8009464:	0800940f 	.word	0x0800940f
 8009468:	0800960f 	.word	0x0800960f
 800946c:	080093e5 	.word	0x080093e5
 8009470:	0800954d 	.word	0x0800954d
 8009474:	080093e5 	.word	0x080093e5
 8009478:	080093e5 	.word	0x080093e5
 800947c:	080093e5 	.word	0x080093e5
 8009480:	080095ff 	.word	0x080095ff
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009484:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009488:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800948c:	430a      	orrs	r2, r1
 800948e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009492:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009494:	486d      	ldr	r0, [pc, #436]	; (800964c <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009496:	f022 020f 	bic.w	r2, r2, #15
 800949a:	430a      	orrs	r2, r1
 800949c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800949e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80094a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80094a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094aa:	f000 80ae 	beq.w	800960a <UART_SetConfig+0x2be>
 80094ae:	d80b      	bhi.n	80094c8 <UART_SetConfig+0x17c>
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d039      	beq.n	8009528 <UART_SetConfig+0x1dc>
 80094b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094b8:	d194      	bne.n	80093e4 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetSysClockFreq();
 80094ba:	f7fe f8e9 	bl	8007690 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80094be:	2800      	cmp	r0, #0
 80094c0:	f000 8088 	beq.w	80095d4 <UART_SetConfig+0x288>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80094c6:	e004      	b.n	80094d2 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094cc:	d18a      	bne.n	80093e4 <UART_SetConfig+0x98>
        pclk = (uint32_t) LSE_VALUE;
 80094ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094d2:	4b5f      	ldr	r3, [pc, #380]	; (8009650 <UART_SetConfig+0x304>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094d4:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094d6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80094da:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094de:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80094e2:	4299      	cmp	r1, r3
 80094e4:	f63f af7e 	bhi.w	80093e4 <UART_SetConfig+0x98>
 80094e8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80094ec:	f63f af7a 	bhi.w	80093e4 <UART_SetConfig+0x98>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094f0:	2300      	movs	r3, #0
 80094f2:	4619      	mov	r1, r3
 80094f4:	f7f7 fbf0 	bl	8000cd8 <__aeabi_uldivmod>
 80094f8:	0209      	lsls	r1, r1, #8
 80094fa:	0203      	lsls	r3, r0, #8
 80094fc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009500:	0868      	lsrs	r0, r5, #1
 8009502:	1818      	adds	r0, r3, r0
 8009504:	462a      	mov	r2, r5
 8009506:	f04f 0300 	mov.w	r3, #0
 800950a:	f141 0100 	adc.w	r1, r1, #0
 800950e:	f7f7 fbe3 	bl	8000cd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009512:	4a51      	ldr	r2, [pc, #324]	; (8009658 <UART_SetConfig+0x30c>)
 8009514:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8009518:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800951a:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800951c:	f63f af62 	bhi.w	80093e4 <UART_SetConfig+0x98>
 8009520:	e78b      	b.n	800943a <UART_SetConfig+0xee>
 8009522:	4a4e      	ldr	r2, [pc, #312]	; (800965c <UART_SetConfig+0x310>)
 8009524:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8009526:	e793      	b.n	8009450 <UART_SetConfig+0x104>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009528:	f7fe f9fc 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
        break;
 800952c:	e7c7      	b.n	80094be <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800952e:	4b47      	ldr	r3, [pc, #284]	; (800964c <UART_SetConfig+0x300>)
 8009530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009538:	2b80      	cmp	r3, #128	; 0x80
 800953a:	d072      	beq.n	8009622 <UART_SetConfig+0x2d6>
 800953c:	d862      	bhi.n	8009604 <UART_SetConfig+0x2b8>
 800953e:	b343      	cbz	r3, 8009592 <UART_SetConfig+0x246>
 8009540:	2b40      	cmp	r3, #64	; 0x40
 8009542:	f47f af4f 	bne.w	80093e4 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009546:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800954a:	d062      	beq.n	8009612 <UART_SetConfig+0x2c6>
        pclk = HAL_RCC_GetSysClockFreq();
 800954c:	f7fe f8a0 	bl	8007690 <HAL_RCC_GetSysClockFreq>
        break;
 8009550:	e75f      	b.n	8009412 <UART_SetConfig+0xc6>
    switch (clocksource)
 8009552:	2b08      	cmp	r3, #8
 8009554:	f63f af46 	bhi.w	80093e4 <UART_SetConfig+0x98>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <UART_SetConfig+0x214>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009599 	.word	0x08009599
 8009564:	08009619 	.word	0x08009619
 8009568:	0800961f 	.word	0x0800961f
 800956c:	080093e5 	.word	0x080093e5
 8009570:	08009613 	.word	0x08009613
 8009574:	080093e5 	.word	0x080093e5
 8009578:	080093e5 	.word	0x080093e5
 800957c:	080093e5 	.word	0x080093e5
 8009580:	080095a1 	.word	0x080095a1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009588:	d036      	beq.n	80095f8 <UART_SetConfig+0x2ac>
 800958a:	e72b      	b.n	80093e4 <UART_SetConfig+0x98>
        pclk = HAL_RCC_GetPCLK1Freq();
 800958c:	f7fe f9ca 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
        break;
 8009590:	e73f      	b.n	8009412 <UART_SetConfig+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009592:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8009596:	d1f9      	bne.n	800958c <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009598:	f7fe f9c4 	bl	8007924 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800959c:	b1d0      	cbz	r0, 80095d4 <UART_SetConfig+0x288>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800959e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095a0:	6862      	ldr	r2, [r4, #4]
 80095a2:	4b2b      	ldr	r3, [pc, #172]	; (8009650 <UART_SetConfig+0x304>)
 80095a4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80095a8:	fbb0 f0f1 	udiv	r0, r0, r1
 80095ac:	0853      	lsrs	r3, r2, #1
 80095ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095b2:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095b6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ba:	f1a0 0210 	sub.w	r2, r0, #16
 80095be:	429a      	cmp	r2, r3
 80095c0:	f63f af10 	bhi.w	80093e4 <UART_SetConfig+0x98>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095c4:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80095c8:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095ca:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095cc:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80095d0:	4318      	orrs	r0, r3
 80095d2:	60d0      	str	r0, [r2, #12]
 80095d4:	2000      	movs	r0, #0
 80095d6:	e706      	b.n	80093e6 <UART_SetConfig+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095d8:	4b1c      	ldr	r3, [pc, #112]	; (800964c <UART_SetConfig+0x300>)
 80095da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	d01d      	beq.n	8009622 <UART_SetConfig+0x2d6>
 80095e6:	d804      	bhi.n	80095f2 <UART_SetConfig+0x2a6>
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0d2      	beq.n	8009592 <UART_SetConfig+0x246>
 80095ec:	2b10      	cmp	r3, #16
 80095ee:	d0aa      	beq.n	8009546 <UART_SetConfig+0x1fa>
 80095f0:	e6f8      	b.n	80093e4 <UART_SetConfig+0x98>
 80095f2:	2b30      	cmp	r3, #48	; 0x30
 80095f4:	f47f aef6 	bne.w	80093e4 <UART_SetConfig+0x98>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80095fc:	d0d0      	beq.n	80095a0 <UART_SetConfig+0x254>
    switch (clocksource)
 80095fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009602:	e70a      	b.n	800941a <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009604:	2bc0      	cmp	r3, #192	; 0xc0
 8009606:	d0f7      	beq.n	80095f8 <UART_SetConfig+0x2ac>
 8009608:	e6ec      	b.n	80093e4 <UART_SetConfig+0x98>
 800960a:	4815      	ldr	r0, [pc, #84]	; (8009660 <UART_SetConfig+0x314>)
 800960c:	e761      	b.n	80094d2 <UART_SetConfig+0x186>
        pclk = (uint32_t) HSI_VALUE;
 800960e:	4814      	ldr	r0, [pc, #80]	; (8009660 <UART_SetConfig+0x314>)
 8009610:	e703      	b.n	800941a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8009612:	f7fe f83d 	bl	8007690 <HAL_RCC_GetSysClockFreq>
        break;
 8009616:	e7c1      	b.n	800959c <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 8009618:	f7fe f996 	bl	8007948 <HAL_RCC_GetPCLK2Freq>
        break;
 800961c:	e7be      	b.n	800959c <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 800961e:	4810      	ldr	r0, [pc, #64]	; (8009660 <UART_SetConfig+0x314>)
 8009620:	e7be      	b.n	80095a0 <UART_SetConfig+0x254>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009622:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8009626:	480e      	ldr	r0, [pc, #56]	; (8009660 <UART_SetConfig+0x314>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009628:	f47f aef7 	bne.w	800941a <UART_SetConfig+0xce>
 800962c:	e7b8      	b.n	80095a0 <UART_SetConfig+0x254>
 800962e:	bf00      	nop
 8009630:	cfff69f3 	.word	0xcfff69f3
 8009634:	40008000 	.word	0x40008000
 8009638:	40013800 	.word	0x40013800
 800963c:	40004400 	.word	0x40004400
 8009640:	40004800 	.word	0x40004800
 8009644:	40004c00 	.word	0x40004c00
 8009648:	40005000 	.word	0x40005000
 800964c:	40021000 	.word	0x40021000
 8009650:	0800cb64 	.word	0x0800cb64
 8009654:	0800cb54 	.word	0x0800cb54
 8009658:	000ffcff 	.word	0x000ffcff
 800965c:	0800cb50 	.word	0x0800cb50
 8009660:	00f42400 	.word	0x00f42400

08009664 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009664:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009666:	07da      	lsls	r2, r3, #31
{
 8009668:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800966a:	d506      	bpl.n	800967a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800966c:	6801      	ldr	r1, [r0, #0]
 800966e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009670:	684a      	ldr	r2, [r1, #4]
 8009672:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009676:	4322      	orrs	r2, r4
 8009678:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800967a:	079c      	lsls	r4, r3, #30
 800967c:	d506      	bpl.n	800968c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800967e:	6801      	ldr	r1, [r0, #0]
 8009680:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8009682:	684a      	ldr	r2, [r1, #4]
 8009684:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009688:	4322      	orrs	r2, r4
 800968a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800968c:	0759      	lsls	r1, r3, #29
 800968e:	d506      	bpl.n	800969e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009690:	6801      	ldr	r1, [r0, #0]
 8009692:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009694:	684a      	ldr	r2, [r1, #4]
 8009696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800969a:	4322      	orrs	r2, r4
 800969c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800969e:	071a      	lsls	r2, r3, #28
 80096a0:	d506      	bpl.n	80096b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096a2:	6801      	ldr	r1, [r0, #0]
 80096a4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80096a6:	684a      	ldr	r2, [r1, #4]
 80096a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096ac:	4322      	orrs	r2, r4
 80096ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096b0:	06dc      	lsls	r4, r3, #27
 80096b2:	d506      	bpl.n	80096c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096b4:	6801      	ldr	r1, [r0, #0]
 80096b6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80096b8:	688a      	ldr	r2, [r1, #8]
 80096ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096be:	4322      	orrs	r2, r4
 80096c0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096c2:	0699      	lsls	r1, r3, #26
 80096c4:	d506      	bpl.n	80096d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096c6:	6801      	ldr	r1, [r0, #0]
 80096c8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80096ca:	688a      	ldr	r2, [r1, #8]
 80096cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096d0:	4322      	orrs	r2, r4
 80096d2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096d4:	065a      	lsls	r2, r3, #25
 80096d6:	d509      	bpl.n	80096ec <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096d8:	6801      	ldr	r1, [r0, #0]
 80096da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80096dc:	684a      	ldr	r2, [r1, #4]
 80096de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80096e2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096e8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096ea:	d00b      	beq.n	8009704 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096ec:	061b      	lsls	r3, r3, #24
 80096ee:	d506      	bpl.n	80096fe <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096f0:	6802      	ldr	r2, [r0, #0]
 80096f2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80096f4:	6853      	ldr	r3, [r2, #4]
 80096f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80096fa:	430b      	orrs	r3, r1
 80096fc:	6053      	str	r3, [r2, #4]
}
 80096fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009702:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009704:	684a      	ldr	r2, [r1, #4]
 8009706:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009708:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800970c:	4322      	orrs	r2, r4
 800970e:	604a      	str	r2, [r1, #4]
 8009710:	e7ec      	b.n	80096ec <UART_AdvFeatureConfig+0x88>
 8009712:	bf00      	nop

08009714 <UART_WaitOnFlagUntilTimeout>:
{
 8009714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009718:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800971c:	6804      	ldr	r4, [r0, #0]
{
 800971e:	4607      	mov	r7, r0
 8009720:	460e      	mov	r6, r1
 8009722:	4615      	mov	r5, r2
 8009724:	4699      	mov	r9, r3
 8009726:	f1b8 3fff 	cmp.w	r8, #4294967295
 800972a:	d10a      	bne.n	8009742 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800972c:	69e3      	ldr	r3, [r4, #28]
 800972e:	ea36 0303 	bics.w	r3, r6, r3
 8009732:	bf0c      	ite	eq
 8009734:	2301      	moveq	r3, #1
 8009736:	2300      	movne	r3, #0
 8009738:	429d      	cmp	r5, r3
 800973a:	d0f7      	beq.n	800972c <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800973c:	2000      	movs	r0, #0
}
 800973e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009742:	69e3      	ldr	r3, [r4, #28]
 8009744:	ea36 0303 	bics.w	r3, r6, r3
 8009748:	bf0c      	ite	eq
 800974a:	2301      	moveq	r3, #1
 800974c:	2300      	movne	r3, #0
 800974e:	42ab      	cmp	r3, r5
 8009750:	d1f4      	bne.n	800973c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009752:	f7f9 fb33 	bl	8002dbc <HAL_GetTick>
 8009756:	eba0 0009 	sub.w	r0, r0, r9
 800975a:	4540      	cmp	r0, r8
 800975c:	d833      	bhi.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800975e:	f1b8 0f00 	cmp.w	r8, #0
 8009762:	d030      	beq.n	80097c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009764:	683c      	ldr	r4, [r7, #0]
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	0759      	lsls	r1, r3, #29
 800976a:	4622      	mov	r2, r4
 800976c:	d5db      	bpl.n	8009726 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800976e:	69e3      	ldr	r3, [r4, #28]
 8009770:	051b      	lsls	r3, r3, #20
 8009772:	d5d8      	bpl.n	8009726 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009778:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800977e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	e844 3100 	strex	r1, r3, [r4]
 8009786:	b139      	cbz	r1, 8009798 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	e852 3f00 	ldrex	r3, [r2]
 800978c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009790:	e842 3100 	strex	r1, r3, [r2]
 8009794:	2900      	cmp	r1, #0
 8009796:	d1f7      	bne.n	8009788 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	f102 0308 	add.w	r3, r2, #8
 800979c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	f102 0008 	add.w	r0, r2, #8
 80097a8:	e840 3100 	strex	r1, r3, [r0]
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d1f3      	bne.n	8009798 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80097b0:	2320      	movs	r3, #32
 80097b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 80097b6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80097ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 80097be:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 80097c4:	e7bb      	b.n	800973e <UART_WaitOnFlagUntilTimeout+0x2a>
 80097c6:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c8:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	e842 3100 	strex	r1, r3, [r2]
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d1f7      	bne.n	80097c8 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	f102 0308 	add.w	r3, r2, #8
 80097dc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e4:	f102 0008 	add.w	r0, r2, #8
 80097e8:	e840 3100 	strex	r1, r3, [r0]
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d1f3      	bne.n	80097d8 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 80097f0:	2320      	movs	r3, #32
 80097f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 80097f6:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80097fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 80097fe:	2003      	movs	r0, #3
 8009800:	e79d      	b.n	800973e <UART_WaitOnFlagUntilTimeout+0x2a>
 8009802:	bf00      	nop

08009804 <HAL_UART_Transmit>:
{
 8009804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009808:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800980a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 800980e:	2820      	cmp	r0, #32
{
 8009810:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8009812:	f040 8090 	bne.w	8009936 <HAL_UART_Transmit+0x132>
    if ((pData == NULL) || (Size == 0U))
 8009816:	4689      	mov	r9, r1
 8009818:	2900      	cmp	r1, #0
 800981a:	d048      	beq.n	80098ae <HAL_UART_Transmit+0xaa>
 800981c:	4614      	mov	r4, r2
 800981e:	2a00      	cmp	r2, #0
 8009820:	d045      	beq.n	80098ae <HAL_UART_Transmit+0xaa>
 8009822:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8009824:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8009828:	2b01      	cmp	r3, #1
 800982a:	f000 8084 	beq.w	8009936 <HAL_UART_Transmit+0x132>
 800982e:	2301      	movs	r3, #1
 8009830:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009834:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009838:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800983a:	f8c5 808c 	str.w	r8, [r5, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800983e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tickstart = HAL_GetTick();
 8009842:	f7f9 fabb 	bl	8002dbc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009846:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 8009848:	f8a5 4054 	strh.w	r4, [r5, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800984c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8009850:	f8a5 4056 	strh.w	r4, [r5, #86]	; 0x56
    tickstart = HAL_GetTick();
 8009854:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009856:	d072      	beq.n	800993e <HAL_UART_Transmit+0x13a>
    while (huart->TxXferCount > 0U)
 8009858:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
    __HAL_UNLOCK(huart);
 800985c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800985e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8009860:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8009864:	b1b3      	cbz	r3, 8009894 <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009866:	682c      	ldr	r4, [r5, #0]
 8009868:	1c71      	adds	r1, r6, #1
 800986a:	d124      	bne.n	80098b6 <HAL_UART_Transmit+0xb2>
 800986c:	69e2      	ldr	r2, [r4, #28]
 800986e:	0612      	lsls	r2, r2, #24
 8009870:	d5fc      	bpl.n	800986c <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 8009872:	f1b9 0f00 	cmp.w	r9, #0
 8009876:	d059      	beq.n	800992c <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009878:	f819 3b01 	ldrb.w	r3, [r9], #1
 800987c:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 800987e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8009882:	3b01      	subs	r3, #1
 8009884:	b29b      	uxth	r3, r3
 8009886:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800988a:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 800988e:	b29b      	uxth	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e9      	bne.n	8009868 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009894:	9600      	str	r6, [sp, #0]
 8009896:	463b      	mov	r3, r7
 8009898:	2200      	movs	r2, #0
 800989a:	2140      	movs	r1, #64	; 0x40
 800989c:	4628      	mov	r0, r5
 800989e:	f7ff ff39 	bl	8009714 <UART_WaitOnFlagUntilTimeout>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d171      	bne.n	800998a <HAL_UART_Transmit+0x186>
    huart->gState = HAL_UART_STATE_READY;
 80098a6:	2320      	movs	r3, #32
 80098a8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    return HAL_OK;
 80098ac:	e000      	b.n	80098b0 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80098ae:	2001      	movs	r0, #1
}
 80098b0:	b003      	add	sp, #12
 80098b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b6:	69e3      	ldr	r3, [r4, #28]
 80098b8:	061b      	lsls	r3, r3, #24
 80098ba:	d4da      	bmi.n	8009872 <HAL_UART_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098bc:	f7f9 fa7e 	bl	8002dbc <HAL_GetTick>
 80098c0:	1bc0      	subs	r0, r0, r7
 80098c2:	4286      	cmp	r6, r0
 80098c4:	d341      	bcc.n	800994a <HAL_UART_Transmit+0x146>
 80098c6:	2e00      	cmp	r6, #0
 80098c8:	d03f      	beq.n	800994a <HAL_UART_Transmit+0x146>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098ca:	682c      	ldr	r4, [r5, #0]
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	0752      	lsls	r2, r2, #29
 80098d0:	4623      	mov	r3, r4
 80098d2:	d5c9      	bpl.n	8009868 <HAL_UART_Transmit+0x64>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098d4:	69e2      	ldr	r2, [r4, #28]
 80098d6:	0510      	lsls	r0, r2, #20
 80098d8:	d5c6      	bpl.n	8009868 <HAL_UART_Transmit+0x64>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098de:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80098e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e8:	e844 2100 	strex	r1, r2, [r4]
 80098ec:	b139      	cbz	r1, 80098fe <HAL_UART_Transmit+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	e853 2f00 	ldrex	r2, [r3]
 80098f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	e843 2100 	strex	r1, r2, [r3]
 80098fa:	2900      	cmp	r1, #0
 80098fc:	d1f7      	bne.n	80098ee <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	f103 0208 	add.w	r2, r3, #8
 8009902:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009906:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	f103 0008 	add.w	r0, r3, #8
 800990e:	e840 2100 	strex	r1, r2, [r0]
 8009912:	2900      	cmp	r1, #0
 8009914:	d1f3      	bne.n	80098fe <HAL_UART_Transmit+0xfa>
          huart->gState = HAL_UART_STATE_READY;
 8009916:	2320      	movs	r3, #32
 8009918:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 800991c:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009920:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        return HAL_TIMEOUT;
 8009924:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009926:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          return HAL_TIMEOUT;
 800992a:	e7c1      	b.n	80098b0 <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800992c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009934:	e7a2      	b.n	800987c <HAL_UART_Transmit+0x78>
    return HAL_BUSY;
 8009936:	2002      	movs	r0, #2
}
 8009938:	b003      	add	sp, #12
 800993a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800993e:	692b      	ldr	r3, [r5, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d189      	bne.n	8009858 <HAL_UART_Transmit+0x54>
 8009944:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8009946:	4699      	mov	r9, r3
 8009948:	e786      	b.n	8009858 <HAL_UART_Transmit+0x54>
 800994a:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	e843 2100 	strex	r1, r2, [r3]
 8009958:	2900      	cmp	r1, #0
 800995a:	d1f7      	bne.n	800994c <HAL_UART_Transmit+0x148>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995c:	f103 0208 	add.w	r2, r3, #8
 8009960:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009964:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	f103 0008 	add.w	r0, r3, #8
 800996c:	e840 2100 	strex	r1, r2, [r0]
 8009970:	2900      	cmp	r1, #0
 8009972:	d1f3      	bne.n	800995c <HAL_UART_Transmit+0x158>
        huart->gState = HAL_UART_STATE_READY;
 8009974:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8009976:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8009978:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800997c:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009980:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8009984:	b003      	add	sp, #12
 8009986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800998a:	2003      	movs	r0, #3
 800998c:	e790      	b.n	80098b0 <HAL_UART_Transmit+0xac>
 800998e:	bf00      	nop

08009990 <HAL_UART_Init>:
  if (huart == NULL)
 8009990:	2800      	cmp	r0, #0
 8009992:	d066      	beq.n	8009a62 <HAL_UART_Init+0xd2>
{
 8009994:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8009996:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800999a:	b082      	sub	sp, #8
 800999c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d04c      	beq.n	8009a3c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80099a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80099a4:	2324      	movs	r3, #36	; 0x24
 80099a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80099aa:	6813      	ldr	r3, [r2, #0]
 80099ac:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099b0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80099b2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099b4:	f7ff fcca 	bl	800934c <UART_SetConfig>
 80099b8:	2801      	cmp	r0, #1
 80099ba:	d03c      	beq.n	8009a36 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d135      	bne.n	8009a2e <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	6859      	ldr	r1, [r3, #4]
 80099c6:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80099ca:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099cc:	6899      	ldr	r1, [r3, #8]
 80099ce:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80099d2:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80099d4:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d6:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80099d8:	f041 0101 	orr.w	r1, r1, #1
 80099dc:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099de:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80099e2:	f7f9 f9eb 	bl	8002dbc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80099ec:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099ee:	d40e      	bmi.n	8009a0e <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	075b      	lsls	r3, r3, #29
 80099f4:	d427      	bmi.n	8009a46 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80099f8:	2220      	movs	r2, #32
 80099fa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80099fe:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009a02:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 8009a06:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a08:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8009a0a:	b002      	add	sp, #8
 8009a0c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	462a      	mov	r2, r5
 8009a16:	4603      	mov	r3, r0
 8009a18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f7ff fe79 	bl	8009714 <UART_WaitOnFlagUntilTimeout>
 8009a22:	b9e0      	cbnz	r0, 8009a5e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	075b      	lsls	r3, r3, #29
 8009a2a:	d40c      	bmi.n	8009a46 <HAL_UART_Init+0xb6>
 8009a2c:	e7e3      	b.n	80099f6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f7ff fe18 	bl	8009664 <UART_AdvFeatureConfig>
 8009a34:	e7c5      	b.n	80099c2 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8009a36:	2001      	movs	r0, #1
}
 8009a38:	b002      	add	sp, #8
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8009a3c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8009a40:	f7fb fce0 	bl	8005404 <HAL_UART_MspInit>
 8009a44:	e7ad      	b.n	80099a2 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4633      	mov	r3, r6
 8009a50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a54:	4620      	mov	r0, r4
 8009a56:	f7ff fe5d 	bl	8009714 <UART_WaitOnFlagUntilTimeout>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	d0cb      	beq.n	80099f6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8009a5e:	2003      	movs	r0, #3
 8009a60:	e7d3      	b.n	8009a0a <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8009a62:	2001      	movs	r0, #1
}
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop

08009a68 <UART_Start_Receive_DMA>:
{
 8009a68:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a6a:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6c:	2500      	movs	r5, #0
 8009a6e:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
{
 8009a72:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009a74:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8009a76:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a7a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8009a7e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8009a80:	b168      	cbz	r0, 8009a9e <UART_Start_Receive_DMA+0x36>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a82:	4e20      	ldr	r6, [pc, #128]	; (8009b04 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8009a84:	6385      	str	r5, [r0, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a86:	4613      	mov	r3, r2
 8009a88:	460a      	mov	r2, r1
 8009a8a:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a8c:	62c6      	str	r6, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a8e:	4e1e      	ldr	r6, [pc, #120]	; (8009b08 <UART_Start_Receive_DMA+0xa0>)
 8009a90:	6306      	str	r6, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a92:	4e1e      	ldr	r6, [pc, #120]	; (8009b0c <UART_Start_Receive_DMA+0xa4>)
 8009a94:	6346      	str	r6, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009a96:	3124      	adds	r1, #36	; 0x24
 8009a98:	f7fc fcee 	bl	8006478 <HAL_DMA_Start_IT>
 8009a9c:	bb40      	cbnz	r0, 8009af0 <UART_Start_Receive_DMA+0x88>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a9e:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009aa6:	b14b      	cbz	r3, 8009abc <UART_Start_Receive_DMA+0x54>
 8009aa8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aaa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	e843 2100 	strex	r1, r2, [r3]
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	d1f7      	bne.n	8009aaa <UART_Start_Receive_DMA+0x42>
 8009aba:	e000      	b.n	8009abe <UART_Start_Receive_DMA+0x56>
 8009abc:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	f103 0208 	add.w	r2, r3, #8
 8009ac2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac6:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	f103 0008 	add.w	r0, r3, #8
 8009ace:	e840 2100 	strex	r1, r2, [r0]
 8009ad2:	2900      	cmp	r1, #0
 8009ad4:	d1f3      	bne.n	8009abe <UART_Start_Receive_DMA+0x56>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	f103 0208 	add.w	r2, r3, #8
 8009ada:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	f103 0108 	add.w	r1, r3, #8
 8009ae6:	e841 2000 	strex	r0, r2, [r1]
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d1f3      	bne.n	8009ad6 <UART_Start_Receive_DMA+0x6e>
}
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009af0:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8009af2:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8009af4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009af8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 8009afc:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 8009afe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	080092b5 	.word	0x080092b5
 8009b08:	08009299 	.word	0x08009299
 8009b0c:	08008e3d 	.word	0x08008e3d

08009b10 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b10:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009b14:	2b20      	cmp	r3, #32
 8009b16:	d120      	bne.n	8009b5a <HAL_UART_Receive_DMA+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8009b18:	b1e9      	cbz	r1, 8009b56 <HAL_UART_Receive_DMA+0x46>
 8009b1a:	b1e2      	cbz	r2, 8009b56 <HAL_UART_Receive_DMA+0x46>
    __HAL_LOCK(huart);
 8009b1c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d01a      	beq.n	8009b5a <HAL_UART_Receive_DMA+0x4a>
{
 8009b24:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b26:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <HAL_UART_Receive_DMA+0x50>)
 8009b28:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 8009b2a:	2501      	movs	r5, #1
 8009b2c:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b30:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b32:	f04f 0500 	mov.w	r5, #0
 8009b36:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b38:	d00a      	beq.n	8009b50 <HAL_UART_Receive_DMA+0x40>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b3a:	6863      	ldr	r3, [r4, #4]
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	d507      	bpl.n	8009b50 <HAL_UART_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b40:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	e844 3500 	strex	r5, r3, [r4]
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	d1f7      	bne.n	8009b40 <HAL_UART_Receive_DMA+0x30>
}
 8009b50:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b52:	f7ff bf89 	b.w	8009a68 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8009b56:	2001      	movs	r0, #1
 8009b58:	4770      	bx	lr
    return HAL_BUSY;
 8009b5a:	2002      	movs	r0, #2
}
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	40008000 	.word	0x40008000

08009b64 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop

08009b68 <HAL_UARTEx_RxFifoFullCallback>:
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop

08009b6c <HAL_UARTEx_TxFifoEmptyCallback>:
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop

08009b70 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b70:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d017      	beq.n	8009ba8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b78:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009b7a:	2324      	movs	r3, #36	; 0x24
{
 8009b7c:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009b7e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b82:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b84:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b86:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8009b88:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b8c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009b90:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b92:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b94:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b96:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8009ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8009ba4:	4618      	mov	r0, r3
}
 8009ba6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009ba8:	2002      	movs	r0, #2
}
 8009baa:	4770      	bx	lr

08009bac <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bac:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009bb0:	2a01      	cmp	r2, #1
 8009bb2:	d037      	beq.n	8009c24 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb4:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bb6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009bb8:	2024      	movs	r0, #36	; 0x24
{
 8009bba:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009bbc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bc0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bc2:	6810      	ldr	r0, [r2, #0]
 8009bc4:	f020 0001 	bic.w	r0, r0, #1
 8009bc8:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bca:	6890      	ldr	r0, [r2, #8]
 8009bcc:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8009bd0:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bd2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bd4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bd6:	b310      	cbz	r0, 8009c1e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bd8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bda:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bdc:	4d12      	ldr	r5, [pc, #72]	; (8009c28 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bde:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009be2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009be6:	4911      	ldr	r1, [pc, #68]	; (8009c2c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009be8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bec:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bf0:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bf4:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bf8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bfa:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bfc:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c00:	fbb1 f1f5 	udiv	r1, r1, r5
 8009c04:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009c08:	2100      	movs	r1, #0
 8009c0a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c10:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009c12:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009c16:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009c18:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009c1c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009c1e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009c20:	4608      	mov	r0, r1
 8009c22:	e7ef      	b.n	8009c04 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009c24:	2002      	movs	r0, #2
}
 8009c26:	4770      	bx	lr
 8009c28:	0800cb7c 	.word	0x0800cb7c
 8009c2c:	0800cb84 	.word	0x0800cb84

08009c30 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009c30:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8009c34:	2a01      	cmp	r2, #1
 8009c36:	d037      	beq.n	8009ca8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8009c38:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c3a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009c3c:	2024      	movs	r0, #36	; 0x24
{
 8009c3e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009c40:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c44:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009c46:	6810      	ldr	r0, [r2, #0]
 8009c48:	f020 0001 	bic.w	r0, r0, #1
 8009c4c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c4e:	6890      	ldr	r0, [r2, #8]
 8009c50:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8009c54:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c56:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c58:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c5a:	b310      	cbz	r0, 8009ca2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c5c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c5e:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c60:	4d12      	ldr	r5, [pc, #72]	; (8009cac <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c62:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c66:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c6a:	4911      	ldr	r1, [pc, #68]	; (8009cb0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009c6c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c70:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c74:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c78:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c7c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c7e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c80:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c84:	fbb1 f1f5 	udiv	r1, r1, r5
 8009c88:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009c92:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c94:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009c96:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8009c9a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009c9c:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8009ca0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009ca2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009ca4:	4608      	mov	r0, r1
 8009ca6:	e7ef      	b.n	8009c88 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009ca8:	2002      	movs	r0, #2
}
 8009caa:	4770      	bx	lr
 8009cac:	0800cb7c 	.word	0x0800cb7c
 8009cb0:	0800cb84 	.word	0x0800cb84

08009cb4 <__errno>:
 8009cb4:	4b01      	ldr	r3, [pc, #4]	; (8009cbc <__errno+0x8>)
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	20000014 	.word	0x20000014

08009cc0 <__libc_init_array>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	4d0d      	ldr	r5, [pc, #52]	; (8009cf8 <__libc_init_array+0x38>)
 8009cc4:	4c0d      	ldr	r4, [pc, #52]	; (8009cfc <__libc_init_array+0x3c>)
 8009cc6:	1b64      	subs	r4, r4, r5
 8009cc8:	10a4      	asrs	r4, r4, #2
 8009cca:	2600      	movs	r6, #0
 8009ccc:	42a6      	cmp	r6, r4
 8009cce:	d109      	bne.n	8009ce4 <__libc_init_array+0x24>
 8009cd0:	4d0b      	ldr	r5, [pc, #44]	; (8009d00 <__libc_init_array+0x40>)
 8009cd2:	4c0c      	ldr	r4, [pc, #48]	; (8009d04 <__libc_init_array+0x44>)
 8009cd4:	f002 fe92 	bl	800c9fc <_init>
 8009cd8:	1b64      	subs	r4, r4, r5
 8009cda:	10a4      	asrs	r4, r4, #2
 8009cdc:	2600      	movs	r6, #0
 8009cde:	42a6      	cmp	r6, r4
 8009ce0:	d105      	bne.n	8009cee <__libc_init_array+0x2e>
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce8:	4798      	blx	r3
 8009cea:	3601      	adds	r6, #1
 8009cec:	e7ee      	b.n	8009ccc <__libc_init_array+0xc>
 8009cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf2:	4798      	blx	r3
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	e7f2      	b.n	8009cde <__libc_init_array+0x1e>
 8009cf8:	0800cf6c 	.word	0x0800cf6c
 8009cfc:	0800cf6c 	.word	0x0800cf6c
 8009d00:	0800cf6c 	.word	0x0800cf6c
 8009d04:	0800cf70 	.word	0x0800cf70

08009d08 <memset>:
 8009d08:	4402      	add	r2, r0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d100      	bne.n	8009d12 <memset+0xa>
 8009d10:	4770      	bx	lr
 8009d12:	f803 1b01 	strb.w	r1, [r3], #1
 8009d16:	e7f9      	b.n	8009d0c <memset+0x4>

08009d18 <__cvt>:
 8009d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	ec55 4b10 	vmov	r4, r5, d0
 8009d20:	2d00      	cmp	r5, #0
 8009d22:	460e      	mov	r6, r1
 8009d24:	4619      	mov	r1, r3
 8009d26:	462b      	mov	r3, r5
 8009d28:	bfbb      	ittet	lt
 8009d2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d2e:	461d      	movlt	r5, r3
 8009d30:	2300      	movge	r3, #0
 8009d32:	232d      	movlt	r3, #45	; 0x2d
 8009d34:	700b      	strb	r3, [r1, #0]
 8009d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d3c:	4691      	mov	r9, r2
 8009d3e:	f023 0820 	bic.w	r8, r3, #32
 8009d42:	bfbc      	itt	lt
 8009d44:	4622      	movlt	r2, r4
 8009d46:	4614      	movlt	r4, r2
 8009d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d4c:	d005      	beq.n	8009d5a <__cvt+0x42>
 8009d4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d52:	d100      	bne.n	8009d56 <__cvt+0x3e>
 8009d54:	3601      	adds	r6, #1
 8009d56:	2102      	movs	r1, #2
 8009d58:	e000      	b.n	8009d5c <__cvt+0x44>
 8009d5a:	2103      	movs	r1, #3
 8009d5c:	ab03      	add	r3, sp, #12
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	ab02      	add	r3, sp, #8
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	ec45 4b10 	vmov	d0, r4, r5
 8009d68:	4653      	mov	r3, sl
 8009d6a:	4632      	mov	r2, r6
 8009d6c:	f000 fee8 	bl	800ab40 <_dtoa_r>
 8009d70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d74:	4607      	mov	r7, r0
 8009d76:	d102      	bne.n	8009d7e <__cvt+0x66>
 8009d78:	f019 0f01 	tst.w	r9, #1
 8009d7c:	d022      	beq.n	8009dc4 <__cvt+0xac>
 8009d7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d82:	eb07 0906 	add.w	r9, r7, r6
 8009d86:	d110      	bne.n	8009daa <__cvt+0x92>
 8009d88:	783b      	ldrb	r3, [r7, #0]
 8009d8a:	2b30      	cmp	r3, #48	; 0x30
 8009d8c:	d10a      	bne.n	8009da4 <__cvt+0x8c>
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2300      	movs	r3, #0
 8009d92:	4620      	mov	r0, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	f7f6 febf 	bl	8000b18 <__aeabi_dcmpeq>
 8009d9a:	b918      	cbnz	r0, 8009da4 <__cvt+0x8c>
 8009d9c:	f1c6 0601 	rsb	r6, r6, #1
 8009da0:	f8ca 6000 	str.w	r6, [sl]
 8009da4:	f8da 3000 	ldr.w	r3, [sl]
 8009da8:	4499      	add	r9, r3
 8009daa:	2200      	movs	r2, #0
 8009dac:	2300      	movs	r3, #0
 8009dae:	4620      	mov	r0, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 feb1 	bl	8000b18 <__aeabi_dcmpeq>
 8009db6:	b108      	cbz	r0, 8009dbc <__cvt+0xa4>
 8009db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009dbc:	2230      	movs	r2, #48	; 0x30
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	454b      	cmp	r3, r9
 8009dc2:	d307      	bcc.n	8009dd4 <__cvt+0xbc>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dc8:	1bdb      	subs	r3, r3, r7
 8009dca:	4638      	mov	r0, r7
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	b004      	add	sp, #16
 8009dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd4:	1c59      	adds	r1, r3, #1
 8009dd6:	9103      	str	r1, [sp, #12]
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	e7f0      	b.n	8009dbe <__cvt+0xa6>

08009ddc <__exponent>:
 8009ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dde:	4603      	mov	r3, r0
 8009de0:	2900      	cmp	r1, #0
 8009de2:	bfb8      	it	lt
 8009de4:	4249      	neglt	r1, r1
 8009de6:	f803 2b02 	strb.w	r2, [r3], #2
 8009dea:	bfb4      	ite	lt
 8009dec:	222d      	movlt	r2, #45	; 0x2d
 8009dee:	222b      	movge	r2, #43	; 0x2b
 8009df0:	2909      	cmp	r1, #9
 8009df2:	7042      	strb	r2, [r0, #1]
 8009df4:	dd2a      	ble.n	8009e4c <__exponent+0x70>
 8009df6:	f10d 0407 	add.w	r4, sp, #7
 8009dfa:	46a4      	mov	ip, r4
 8009dfc:	270a      	movs	r7, #10
 8009dfe:	46a6      	mov	lr, r4
 8009e00:	460a      	mov	r2, r1
 8009e02:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e06:	fb07 1516 	mls	r5, r7, r6, r1
 8009e0a:	3530      	adds	r5, #48	; 0x30
 8009e0c:	2a63      	cmp	r2, #99	; 0x63
 8009e0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e16:	4631      	mov	r1, r6
 8009e18:	dcf1      	bgt.n	8009dfe <__exponent+0x22>
 8009e1a:	3130      	adds	r1, #48	; 0x30
 8009e1c:	f1ae 0502 	sub.w	r5, lr, #2
 8009e20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e24:	1c44      	adds	r4, r0, #1
 8009e26:	4629      	mov	r1, r5
 8009e28:	4561      	cmp	r1, ip
 8009e2a:	d30a      	bcc.n	8009e42 <__exponent+0x66>
 8009e2c:	f10d 0209 	add.w	r2, sp, #9
 8009e30:	eba2 020e 	sub.w	r2, r2, lr
 8009e34:	4565      	cmp	r5, ip
 8009e36:	bf88      	it	hi
 8009e38:	2200      	movhi	r2, #0
 8009e3a:	4413      	add	r3, r2
 8009e3c:	1a18      	subs	r0, r3, r0
 8009e3e:	b003      	add	sp, #12
 8009e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e4a:	e7ed      	b.n	8009e28 <__exponent+0x4c>
 8009e4c:	2330      	movs	r3, #48	; 0x30
 8009e4e:	3130      	adds	r1, #48	; 0x30
 8009e50:	7083      	strb	r3, [r0, #2]
 8009e52:	70c1      	strb	r1, [r0, #3]
 8009e54:	1d03      	adds	r3, r0, #4
 8009e56:	e7f1      	b.n	8009e3c <__exponent+0x60>

08009e58 <_printf_float>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	ed2d 8b02 	vpush	{d8}
 8009e60:	b08d      	sub	sp, #52	; 0x34
 8009e62:	460c      	mov	r4, r1
 8009e64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e68:	4616      	mov	r6, r2
 8009e6a:	461f      	mov	r7, r3
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	f001 fe0d 	bl	800ba8c <_localeconv_r>
 8009e72:	f8d0 a000 	ldr.w	sl, [r0]
 8009e76:	4650      	mov	r0, sl
 8009e78:	f7f6 f9d2 	bl	8000220 <strlen>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	9305      	str	r3, [sp, #20]
 8009e84:	f8d8 3000 	ldr.w	r3, [r8]
 8009e88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e8c:	3307      	adds	r3, #7
 8009e8e:	f023 0307 	bic.w	r3, r3, #7
 8009e92:	f103 0208 	add.w	r2, r3, #8
 8009e96:	f8c8 2000 	str.w	r2, [r8]
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ea2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009eaa:	9307      	str	r3, [sp, #28]
 8009eac:	f8cd 8018 	str.w	r8, [sp, #24]
 8009eb0:	ee08 0a10 	vmov	s16, r0
 8009eb4:	4b9f      	ldr	r3, [pc, #636]	; (800a134 <_printf_float+0x2dc>)
 8009eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eba:	f04f 32ff 	mov.w	r2, #4294967295
 8009ebe:	f7f6 fe5d 	bl	8000b7c <__aeabi_dcmpun>
 8009ec2:	bb88      	cbnz	r0, 8009f28 <_printf_float+0xd0>
 8009ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ec8:	4b9a      	ldr	r3, [pc, #616]	; (800a134 <_printf_float+0x2dc>)
 8009eca:	f04f 32ff 	mov.w	r2, #4294967295
 8009ece:	f7f6 fe37 	bl	8000b40 <__aeabi_dcmple>
 8009ed2:	bb48      	cbnz	r0, 8009f28 <_printf_float+0xd0>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 fe26 	bl	8000b2c <__aeabi_dcmplt>
 8009ee0:	b110      	cbz	r0, 8009ee8 <_printf_float+0x90>
 8009ee2:	232d      	movs	r3, #45	; 0x2d
 8009ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee8:	4b93      	ldr	r3, [pc, #588]	; (800a138 <_printf_float+0x2e0>)
 8009eea:	4894      	ldr	r0, [pc, #592]	; (800a13c <_printf_float+0x2e4>)
 8009eec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ef0:	bf94      	ite	ls
 8009ef2:	4698      	movls	r8, r3
 8009ef4:	4680      	movhi	r8, r0
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	9b05      	ldr	r3, [sp, #20]
 8009efc:	f023 0204 	bic.w	r2, r3, #4
 8009f00:	6022      	str	r2, [r4, #0]
 8009f02:	f04f 0900 	mov.w	r9, #0
 8009f06:	9700      	str	r7, [sp, #0]
 8009f08:	4633      	mov	r3, r6
 8009f0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	4628      	mov	r0, r5
 8009f10:	f000 f9d8 	bl	800a2c4 <_printf_common>
 8009f14:	3001      	adds	r0, #1
 8009f16:	f040 8090 	bne.w	800a03a <_printf_float+0x1e2>
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	b00d      	add	sp, #52	; 0x34
 8009f20:	ecbd 8b02 	vpop	{d8}
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	4642      	mov	r2, r8
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 fe24 	bl	8000b7c <__aeabi_dcmpun>
 8009f34:	b140      	cbz	r0, 8009f48 <_printf_float+0xf0>
 8009f36:	464b      	mov	r3, r9
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	bfbc      	itt	lt
 8009f3c:	232d      	movlt	r3, #45	; 0x2d
 8009f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f42:	487f      	ldr	r0, [pc, #508]	; (800a140 <_printf_float+0x2e8>)
 8009f44:	4b7f      	ldr	r3, [pc, #508]	; (800a144 <_printf_float+0x2ec>)
 8009f46:	e7d1      	b.n	8009eec <_printf_float+0x94>
 8009f48:	6863      	ldr	r3, [r4, #4]
 8009f4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f4e:	9206      	str	r2, [sp, #24]
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	d13f      	bne.n	8009fd4 <_printf_float+0x17c>
 8009f54:	2306      	movs	r3, #6
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	9b05      	ldr	r3, [sp, #20]
 8009f5a:	6861      	ldr	r1, [r4, #4]
 8009f5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f60:	2300      	movs	r3, #0
 8009f62:	9303      	str	r3, [sp, #12]
 8009f64:	ab0a      	add	r3, sp, #40	; 0x28
 8009f66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f6a:	ab09      	add	r3, sp, #36	; 0x24
 8009f6c:	ec49 8b10 	vmov	d0, r8, r9
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	6022      	str	r2, [r4, #0]
 8009f74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f7ff fecd 	bl	8009d18 <__cvt>
 8009f7e:	9b06      	ldr	r3, [sp, #24]
 8009f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f82:	2b47      	cmp	r3, #71	; 0x47
 8009f84:	4680      	mov	r8, r0
 8009f86:	d108      	bne.n	8009f9a <_printf_float+0x142>
 8009f88:	1cc8      	adds	r0, r1, #3
 8009f8a:	db02      	blt.n	8009f92 <_printf_float+0x13a>
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	dd41      	ble.n	800a016 <_printf_float+0x1be>
 8009f92:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f96:	fa5f fb8b 	uxtb.w	fp, fp
 8009f9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f9e:	d820      	bhi.n	8009fe2 <_printf_float+0x18a>
 8009fa0:	3901      	subs	r1, #1
 8009fa2:	465a      	mov	r2, fp
 8009fa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fa8:	9109      	str	r1, [sp, #36]	; 0x24
 8009faa:	f7ff ff17 	bl	8009ddc <__exponent>
 8009fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fb0:	1813      	adds	r3, r2, r0
 8009fb2:	2a01      	cmp	r2, #1
 8009fb4:	4681      	mov	r9, r0
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	dc02      	bgt.n	8009fc0 <_printf_float+0x168>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	07d2      	lsls	r2, r2, #31
 8009fbe:	d501      	bpl.n	8009fc4 <_printf_float+0x16c>
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d09c      	beq.n	8009f06 <_printf_float+0xae>
 8009fcc:	232d      	movs	r3, #45	; 0x2d
 8009fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd2:	e798      	b.n	8009f06 <_printf_float+0xae>
 8009fd4:	9a06      	ldr	r2, [sp, #24]
 8009fd6:	2a47      	cmp	r2, #71	; 0x47
 8009fd8:	d1be      	bne.n	8009f58 <_printf_float+0x100>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1bc      	bne.n	8009f58 <_printf_float+0x100>
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e7b9      	b.n	8009f56 <_printf_float+0xfe>
 8009fe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fe6:	d118      	bne.n	800a01a <_printf_float+0x1c2>
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	6863      	ldr	r3, [r4, #4]
 8009fec:	dd0b      	ble.n	800a006 <_printf_float+0x1ae>
 8009fee:	6121      	str	r1, [r4, #16]
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_printf_float+0x1a0>
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	07d0      	lsls	r0, r2, #31
 8009ff6:	d502      	bpl.n	8009ffe <_printf_float+0x1a6>
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	440b      	add	r3, r1
 8009ffc:	6123      	str	r3, [r4, #16]
 8009ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a000:	f04f 0900 	mov.w	r9, #0
 800a004:	e7de      	b.n	8009fc4 <_printf_float+0x16c>
 800a006:	b913      	cbnz	r3, 800a00e <_printf_float+0x1b6>
 800a008:	6822      	ldr	r2, [r4, #0]
 800a00a:	07d2      	lsls	r2, r2, #31
 800a00c:	d501      	bpl.n	800a012 <_printf_float+0x1ba>
 800a00e:	3302      	adds	r3, #2
 800a010:	e7f4      	b.n	8009ffc <_printf_float+0x1a4>
 800a012:	2301      	movs	r3, #1
 800a014:	e7f2      	b.n	8009ffc <_printf_float+0x1a4>
 800a016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	4299      	cmp	r1, r3
 800a01e:	db05      	blt.n	800a02c <_printf_float+0x1d4>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	6121      	str	r1, [r4, #16]
 800a024:	07d8      	lsls	r0, r3, #31
 800a026:	d5ea      	bpl.n	8009ffe <_printf_float+0x1a6>
 800a028:	1c4b      	adds	r3, r1, #1
 800a02a:	e7e7      	b.n	8009ffc <_printf_float+0x1a4>
 800a02c:	2900      	cmp	r1, #0
 800a02e:	bfd4      	ite	le
 800a030:	f1c1 0202 	rsble	r2, r1, #2
 800a034:	2201      	movgt	r2, #1
 800a036:	4413      	add	r3, r2
 800a038:	e7e0      	b.n	8009ffc <_printf_float+0x1a4>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	055a      	lsls	r2, r3, #21
 800a03e:	d407      	bmi.n	800a050 <_printf_float+0x1f8>
 800a040:	6923      	ldr	r3, [r4, #16]
 800a042:	4642      	mov	r2, r8
 800a044:	4631      	mov	r1, r6
 800a046:	4628      	mov	r0, r5
 800a048:	47b8      	blx	r7
 800a04a:	3001      	adds	r0, #1
 800a04c:	d12c      	bne.n	800a0a8 <_printf_float+0x250>
 800a04e:	e764      	b.n	8009f1a <_printf_float+0xc2>
 800a050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a054:	f240 80e0 	bls.w	800a218 <_printf_float+0x3c0>
 800a058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a05c:	2200      	movs	r2, #0
 800a05e:	2300      	movs	r3, #0
 800a060:	f7f6 fd5a 	bl	8000b18 <__aeabi_dcmpeq>
 800a064:	2800      	cmp	r0, #0
 800a066:	d034      	beq.n	800a0d2 <_printf_float+0x27a>
 800a068:	4a37      	ldr	r2, [pc, #220]	; (800a148 <_printf_float+0x2f0>)
 800a06a:	2301      	movs	r3, #1
 800a06c:	4631      	mov	r1, r6
 800a06e:	4628      	mov	r0, r5
 800a070:	47b8      	blx	r7
 800a072:	3001      	adds	r0, #1
 800a074:	f43f af51 	beq.w	8009f1a <_printf_float+0xc2>
 800a078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a07c:	429a      	cmp	r2, r3
 800a07e:	db02      	blt.n	800a086 <_printf_float+0x22e>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	07d8      	lsls	r0, r3, #31
 800a084:	d510      	bpl.n	800a0a8 <_printf_float+0x250>
 800a086:	ee18 3a10 	vmov	r3, s16
 800a08a:	4652      	mov	r2, sl
 800a08c:	4631      	mov	r1, r6
 800a08e:	4628      	mov	r0, r5
 800a090:	47b8      	blx	r7
 800a092:	3001      	adds	r0, #1
 800a094:	f43f af41 	beq.w	8009f1a <_printf_float+0xc2>
 800a098:	f04f 0800 	mov.w	r8, #0
 800a09c:	f104 091a 	add.w	r9, r4, #26
 800a0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	4543      	cmp	r3, r8
 800a0a6:	dc09      	bgt.n	800a0bc <_printf_float+0x264>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	079b      	lsls	r3, r3, #30
 800a0ac:	f100 8105 	bmi.w	800a2ba <_printf_float+0x462>
 800a0b0:	68e0      	ldr	r0, [r4, #12]
 800a0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b4:	4298      	cmp	r0, r3
 800a0b6:	bfb8      	it	lt
 800a0b8:	4618      	movlt	r0, r3
 800a0ba:	e730      	b.n	8009f1e <_printf_float+0xc6>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	464a      	mov	r2, r9
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	f43f af27 	beq.w	8009f1a <_printf_float+0xc2>
 800a0cc:	f108 0801 	add.w	r8, r8, #1
 800a0d0:	e7e6      	b.n	800a0a0 <_printf_float+0x248>
 800a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dc39      	bgt.n	800a14c <_printf_float+0x2f4>
 800a0d8:	4a1b      	ldr	r2, [pc, #108]	; (800a148 <_printf_float+0x2f0>)
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4631      	mov	r1, r6
 800a0de:	4628      	mov	r0, r5
 800a0e0:	47b8      	blx	r7
 800a0e2:	3001      	adds	r0, #1
 800a0e4:	f43f af19 	beq.w	8009f1a <_printf_float+0xc2>
 800a0e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	d102      	bne.n	800a0f6 <_printf_float+0x29e>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	07d9      	lsls	r1, r3, #31
 800a0f4:	d5d8      	bpl.n	800a0a8 <_printf_float+0x250>
 800a0f6:	ee18 3a10 	vmov	r3, s16
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	f43f af09 	beq.w	8009f1a <_printf_float+0xc2>
 800a108:	f04f 0900 	mov.w	r9, #0
 800a10c:	f104 0a1a 	add.w	sl, r4, #26
 800a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a112:	425b      	negs	r3, r3
 800a114:	454b      	cmp	r3, r9
 800a116:	dc01      	bgt.n	800a11c <_printf_float+0x2c4>
 800a118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11a:	e792      	b.n	800a042 <_printf_float+0x1ea>
 800a11c:	2301      	movs	r3, #1
 800a11e:	4652      	mov	r2, sl
 800a120:	4631      	mov	r1, r6
 800a122:	4628      	mov	r0, r5
 800a124:	47b8      	blx	r7
 800a126:	3001      	adds	r0, #1
 800a128:	f43f aef7 	beq.w	8009f1a <_printf_float+0xc2>
 800a12c:	f109 0901 	add.w	r9, r9, #1
 800a130:	e7ee      	b.n	800a110 <_printf_float+0x2b8>
 800a132:	bf00      	nop
 800a134:	7fefffff 	.word	0x7fefffff
 800a138:	0800cb90 	.word	0x0800cb90
 800a13c:	0800cb94 	.word	0x0800cb94
 800a140:	0800cb9c 	.word	0x0800cb9c
 800a144:	0800cb98 	.word	0x0800cb98
 800a148:	0800cba0 	.word	0x0800cba0
 800a14c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a14e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a150:	429a      	cmp	r2, r3
 800a152:	bfa8      	it	ge
 800a154:	461a      	movge	r2, r3
 800a156:	2a00      	cmp	r2, #0
 800a158:	4691      	mov	r9, r2
 800a15a:	dc37      	bgt.n	800a1cc <_printf_float+0x374>
 800a15c:	f04f 0b00 	mov.w	fp, #0
 800a160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a164:	f104 021a 	add.w	r2, r4, #26
 800a168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	eba3 0309 	sub.w	r3, r3, r9
 800a170:	455b      	cmp	r3, fp
 800a172:	dc33      	bgt.n	800a1dc <_printf_float+0x384>
 800a174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a178:	429a      	cmp	r2, r3
 800a17a:	db3b      	blt.n	800a1f4 <_printf_float+0x39c>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07da      	lsls	r2, r3, #31
 800a180:	d438      	bmi.n	800a1f4 <_printf_float+0x39c>
 800a182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a184:	9a05      	ldr	r2, [sp, #20]
 800a186:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a188:	1a9a      	subs	r2, r3, r2
 800a18a:	eba3 0901 	sub.w	r9, r3, r1
 800a18e:	4591      	cmp	r9, r2
 800a190:	bfa8      	it	ge
 800a192:	4691      	movge	r9, r2
 800a194:	f1b9 0f00 	cmp.w	r9, #0
 800a198:	dc35      	bgt.n	800a206 <_printf_float+0x3ae>
 800a19a:	f04f 0800 	mov.w	r8, #0
 800a19e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1a2:	f104 0a1a 	add.w	sl, r4, #26
 800a1a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1aa:	1a9b      	subs	r3, r3, r2
 800a1ac:	eba3 0309 	sub.w	r3, r3, r9
 800a1b0:	4543      	cmp	r3, r8
 800a1b2:	f77f af79 	ble.w	800a0a8 <_printf_float+0x250>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4652      	mov	r2, sl
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f aeaa 	beq.w	8009f1a <_printf_float+0xc2>
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	e7ec      	b.n	800a1a6 <_printf_float+0x34e>
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	47b8      	blx	r7
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d1c0      	bne.n	800a15c <_printf_float+0x304>
 800a1da:	e69e      	b.n	8009f1a <_printf_float+0xc2>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	9205      	str	r2, [sp, #20]
 800a1e4:	47b8      	blx	r7
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f43f ae97 	beq.w	8009f1a <_printf_float+0xc2>
 800a1ec:	9a05      	ldr	r2, [sp, #20]
 800a1ee:	f10b 0b01 	add.w	fp, fp, #1
 800a1f2:	e7b9      	b.n	800a168 <_printf_float+0x310>
 800a1f4:	ee18 3a10 	vmov	r3, s16
 800a1f8:	4652      	mov	r2, sl
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	d1be      	bne.n	800a182 <_printf_float+0x32a>
 800a204:	e689      	b.n	8009f1a <_printf_float+0xc2>
 800a206:	9a05      	ldr	r2, [sp, #20]
 800a208:	464b      	mov	r3, r9
 800a20a:	4442      	add	r2, r8
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	d1c1      	bne.n	800a19a <_printf_float+0x342>
 800a216:	e680      	b.n	8009f1a <_printf_float+0xc2>
 800a218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a21a:	2a01      	cmp	r2, #1
 800a21c:	dc01      	bgt.n	800a222 <_printf_float+0x3ca>
 800a21e:	07db      	lsls	r3, r3, #31
 800a220:	d538      	bpl.n	800a294 <_printf_float+0x43c>
 800a222:	2301      	movs	r3, #1
 800a224:	4642      	mov	r2, r8
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	47b8      	blx	r7
 800a22c:	3001      	adds	r0, #1
 800a22e:	f43f ae74 	beq.w	8009f1a <_printf_float+0xc2>
 800a232:	ee18 3a10 	vmov	r3, s16
 800a236:	4652      	mov	r2, sl
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f ae6b 	beq.w	8009f1a <_printf_float+0xc2>
 800a244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a248:	2200      	movs	r2, #0
 800a24a:	2300      	movs	r3, #0
 800a24c:	f7f6 fc64 	bl	8000b18 <__aeabi_dcmpeq>
 800a250:	b9d8      	cbnz	r0, 800a28a <_printf_float+0x432>
 800a252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a254:	f108 0201 	add.w	r2, r8, #1
 800a258:	3b01      	subs	r3, #1
 800a25a:	4631      	mov	r1, r6
 800a25c:	4628      	mov	r0, r5
 800a25e:	47b8      	blx	r7
 800a260:	3001      	adds	r0, #1
 800a262:	d10e      	bne.n	800a282 <_printf_float+0x42a>
 800a264:	e659      	b.n	8009f1a <_printf_float+0xc2>
 800a266:	2301      	movs	r3, #1
 800a268:	4652      	mov	r2, sl
 800a26a:	4631      	mov	r1, r6
 800a26c:	4628      	mov	r0, r5
 800a26e:	47b8      	blx	r7
 800a270:	3001      	adds	r0, #1
 800a272:	f43f ae52 	beq.w	8009f1a <_printf_float+0xc2>
 800a276:	f108 0801 	add.w	r8, r8, #1
 800a27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27c:	3b01      	subs	r3, #1
 800a27e:	4543      	cmp	r3, r8
 800a280:	dcf1      	bgt.n	800a266 <_printf_float+0x40e>
 800a282:	464b      	mov	r3, r9
 800a284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a288:	e6dc      	b.n	800a044 <_printf_float+0x1ec>
 800a28a:	f04f 0800 	mov.w	r8, #0
 800a28e:	f104 0a1a 	add.w	sl, r4, #26
 800a292:	e7f2      	b.n	800a27a <_printf_float+0x422>
 800a294:	2301      	movs	r3, #1
 800a296:	4642      	mov	r2, r8
 800a298:	e7df      	b.n	800a25a <_printf_float+0x402>
 800a29a:	2301      	movs	r3, #1
 800a29c:	464a      	mov	r2, r9
 800a29e:	4631      	mov	r1, r6
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	47b8      	blx	r7
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f43f ae38 	beq.w	8009f1a <_printf_float+0xc2>
 800a2aa:	f108 0801 	add.w	r8, r8, #1
 800a2ae:	68e3      	ldr	r3, [r4, #12]
 800a2b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b2:	1a5b      	subs	r3, r3, r1
 800a2b4:	4543      	cmp	r3, r8
 800a2b6:	dcf0      	bgt.n	800a29a <_printf_float+0x442>
 800a2b8:	e6fa      	b.n	800a0b0 <_printf_float+0x258>
 800a2ba:	f04f 0800 	mov.w	r8, #0
 800a2be:	f104 0919 	add.w	r9, r4, #25
 800a2c2:	e7f4      	b.n	800a2ae <_printf_float+0x456>

0800a2c4 <_printf_common>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	4699      	mov	r9, r3
 800a2cc:	688a      	ldr	r2, [r1, #8]
 800a2ce:	690b      	ldr	r3, [r1, #16]
 800a2d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	bfb8      	it	lt
 800a2d8:	4613      	movlt	r3, r2
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	b10a      	cbz	r2, 800a2ea <_printf_common+0x26>
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	0699      	lsls	r1, r3, #26
 800a2ee:	bf42      	ittt	mi
 800a2f0:	6833      	ldrmi	r3, [r6, #0]
 800a2f2:	3302      	addmi	r3, #2
 800a2f4:	6033      	strmi	r3, [r6, #0]
 800a2f6:	6825      	ldr	r5, [r4, #0]
 800a2f8:	f015 0506 	ands.w	r5, r5, #6
 800a2fc:	d106      	bne.n	800a30c <_printf_common+0x48>
 800a2fe:	f104 0a19 	add.w	sl, r4, #25
 800a302:	68e3      	ldr	r3, [r4, #12]
 800a304:	6832      	ldr	r2, [r6, #0]
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	42ab      	cmp	r3, r5
 800a30a:	dc26      	bgt.n	800a35a <_printf_common+0x96>
 800a30c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a310:	1e13      	subs	r3, r2, #0
 800a312:	6822      	ldr	r2, [r4, #0]
 800a314:	bf18      	it	ne
 800a316:	2301      	movne	r3, #1
 800a318:	0692      	lsls	r2, r2, #26
 800a31a:	d42b      	bmi.n	800a374 <_printf_common+0xb0>
 800a31c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a320:	4649      	mov	r1, r9
 800a322:	4638      	mov	r0, r7
 800a324:	47c0      	blx	r8
 800a326:	3001      	adds	r0, #1
 800a328:	d01e      	beq.n	800a368 <_printf_common+0xa4>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	68e5      	ldr	r5, [r4, #12]
 800a32e:	6832      	ldr	r2, [r6, #0]
 800a330:	f003 0306 	and.w	r3, r3, #6
 800a334:	2b04      	cmp	r3, #4
 800a336:	bf08      	it	eq
 800a338:	1aad      	subeq	r5, r5, r2
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	6922      	ldr	r2, [r4, #16]
 800a33e:	bf0c      	ite	eq
 800a340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a344:	2500      	movne	r5, #0
 800a346:	4293      	cmp	r3, r2
 800a348:	bfc4      	itt	gt
 800a34a:	1a9b      	subgt	r3, r3, r2
 800a34c:	18ed      	addgt	r5, r5, r3
 800a34e:	2600      	movs	r6, #0
 800a350:	341a      	adds	r4, #26
 800a352:	42b5      	cmp	r5, r6
 800a354:	d11a      	bne.n	800a38c <_printf_common+0xc8>
 800a356:	2000      	movs	r0, #0
 800a358:	e008      	b.n	800a36c <_printf_common+0xa8>
 800a35a:	2301      	movs	r3, #1
 800a35c:	4652      	mov	r2, sl
 800a35e:	4649      	mov	r1, r9
 800a360:	4638      	mov	r0, r7
 800a362:	47c0      	blx	r8
 800a364:	3001      	adds	r0, #1
 800a366:	d103      	bne.n	800a370 <_printf_common+0xac>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	3501      	adds	r5, #1
 800a372:	e7c6      	b.n	800a302 <_printf_common+0x3e>
 800a374:	18e1      	adds	r1, r4, r3
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	2030      	movs	r0, #48	; 0x30
 800a37a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a37e:	4422      	add	r2, r4
 800a380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a388:	3302      	adds	r3, #2
 800a38a:	e7c7      	b.n	800a31c <_printf_common+0x58>
 800a38c:	2301      	movs	r3, #1
 800a38e:	4622      	mov	r2, r4
 800a390:	4649      	mov	r1, r9
 800a392:	4638      	mov	r0, r7
 800a394:	47c0      	blx	r8
 800a396:	3001      	adds	r0, #1
 800a398:	d0e6      	beq.n	800a368 <_printf_common+0xa4>
 800a39a:	3601      	adds	r6, #1
 800a39c:	e7d9      	b.n	800a352 <_printf_common+0x8e>
	...

0800a3a0 <_printf_i>:
 800a3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	7e0f      	ldrb	r7, [r1, #24]
 800a3a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3a8:	2f78      	cmp	r7, #120	; 0x78
 800a3aa:	4691      	mov	r9, r2
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	469a      	mov	sl, r3
 800a3b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3b6:	d807      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3b8:	2f62      	cmp	r7, #98	; 0x62
 800a3ba:	d80a      	bhi.n	800a3d2 <_printf_i+0x32>
 800a3bc:	2f00      	cmp	r7, #0
 800a3be:	f000 80d8 	beq.w	800a572 <_printf_i+0x1d2>
 800a3c2:	2f58      	cmp	r7, #88	; 0x58
 800a3c4:	f000 80a3 	beq.w	800a50e <_printf_i+0x16e>
 800a3c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3d0:	e03a      	b.n	800a448 <_printf_i+0xa8>
 800a3d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3d6:	2b15      	cmp	r3, #21
 800a3d8:	d8f6      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3da:	a101      	add	r1, pc, #4	; (adr r1, 800a3e0 <_printf_i+0x40>)
 800a3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e0:	0800a439 	.word	0x0800a439
 800a3e4:	0800a44d 	.word	0x0800a44d
 800a3e8:	0800a3c9 	.word	0x0800a3c9
 800a3ec:	0800a3c9 	.word	0x0800a3c9
 800a3f0:	0800a3c9 	.word	0x0800a3c9
 800a3f4:	0800a3c9 	.word	0x0800a3c9
 800a3f8:	0800a44d 	.word	0x0800a44d
 800a3fc:	0800a3c9 	.word	0x0800a3c9
 800a400:	0800a3c9 	.word	0x0800a3c9
 800a404:	0800a3c9 	.word	0x0800a3c9
 800a408:	0800a3c9 	.word	0x0800a3c9
 800a40c:	0800a559 	.word	0x0800a559
 800a410:	0800a47d 	.word	0x0800a47d
 800a414:	0800a53b 	.word	0x0800a53b
 800a418:	0800a3c9 	.word	0x0800a3c9
 800a41c:	0800a3c9 	.word	0x0800a3c9
 800a420:	0800a57b 	.word	0x0800a57b
 800a424:	0800a3c9 	.word	0x0800a3c9
 800a428:	0800a47d 	.word	0x0800a47d
 800a42c:	0800a3c9 	.word	0x0800a3c9
 800a430:	0800a3c9 	.word	0x0800a3c9
 800a434:	0800a543 	.word	0x0800a543
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	1d1a      	adds	r2, r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	602a      	str	r2, [r5, #0]
 800a440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a448:	2301      	movs	r3, #1
 800a44a:	e0a3      	b.n	800a594 <_printf_i+0x1f4>
 800a44c:	6820      	ldr	r0, [r4, #0]
 800a44e:	6829      	ldr	r1, [r5, #0]
 800a450:	0606      	lsls	r6, r0, #24
 800a452:	f101 0304 	add.w	r3, r1, #4
 800a456:	d50a      	bpl.n	800a46e <_printf_i+0xce>
 800a458:	680e      	ldr	r6, [r1, #0]
 800a45a:	602b      	str	r3, [r5, #0]
 800a45c:	2e00      	cmp	r6, #0
 800a45e:	da03      	bge.n	800a468 <_printf_i+0xc8>
 800a460:	232d      	movs	r3, #45	; 0x2d
 800a462:	4276      	negs	r6, r6
 800a464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a468:	485e      	ldr	r0, [pc, #376]	; (800a5e4 <_printf_i+0x244>)
 800a46a:	230a      	movs	r3, #10
 800a46c:	e019      	b.n	800a4a2 <_printf_i+0x102>
 800a46e:	680e      	ldr	r6, [r1, #0]
 800a470:	602b      	str	r3, [r5, #0]
 800a472:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a476:	bf18      	it	ne
 800a478:	b236      	sxthne	r6, r6
 800a47a:	e7ef      	b.n	800a45c <_printf_i+0xbc>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	6820      	ldr	r0, [r4, #0]
 800a480:	1d19      	adds	r1, r3, #4
 800a482:	6029      	str	r1, [r5, #0]
 800a484:	0601      	lsls	r1, r0, #24
 800a486:	d501      	bpl.n	800a48c <_printf_i+0xec>
 800a488:	681e      	ldr	r6, [r3, #0]
 800a48a:	e002      	b.n	800a492 <_printf_i+0xf2>
 800a48c:	0646      	lsls	r6, r0, #25
 800a48e:	d5fb      	bpl.n	800a488 <_printf_i+0xe8>
 800a490:	881e      	ldrh	r6, [r3, #0]
 800a492:	4854      	ldr	r0, [pc, #336]	; (800a5e4 <_printf_i+0x244>)
 800a494:	2f6f      	cmp	r7, #111	; 0x6f
 800a496:	bf0c      	ite	eq
 800a498:	2308      	moveq	r3, #8
 800a49a:	230a      	movne	r3, #10
 800a49c:	2100      	movs	r1, #0
 800a49e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4a2:	6865      	ldr	r5, [r4, #4]
 800a4a4:	60a5      	str	r5, [r4, #8]
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	bfa2      	ittt	ge
 800a4aa:	6821      	ldrge	r1, [r4, #0]
 800a4ac:	f021 0104 	bicge.w	r1, r1, #4
 800a4b0:	6021      	strge	r1, [r4, #0]
 800a4b2:	b90e      	cbnz	r6, 800a4b8 <_printf_i+0x118>
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	d04d      	beq.n	800a554 <_printf_i+0x1b4>
 800a4b8:	4615      	mov	r5, r2
 800a4ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4be:	fb03 6711 	mls	r7, r3, r1, r6
 800a4c2:	5dc7      	ldrb	r7, [r0, r7]
 800a4c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4c8:	4637      	mov	r7, r6
 800a4ca:	42bb      	cmp	r3, r7
 800a4cc:	460e      	mov	r6, r1
 800a4ce:	d9f4      	bls.n	800a4ba <_printf_i+0x11a>
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d10b      	bne.n	800a4ec <_printf_i+0x14c>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	07de      	lsls	r6, r3, #31
 800a4d8:	d508      	bpl.n	800a4ec <_printf_i+0x14c>
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	6861      	ldr	r1, [r4, #4]
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	bfde      	ittt	le
 800a4e2:	2330      	movle	r3, #48	; 0x30
 800a4e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4ec:	1b52      	subs	r2, r2, r5
 800a4ee:	6122      	str	r2, [r4, #16]
 800a4f0:	f8cd a000 	str.w	sl, [sp]
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	aa03      	add	r2, sp, #12
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f7ff fee2 	bl	800a2c4 <_printf_common>
 800a500:	3001      	adds	r0, #1
 800a502:	d14c      	bne.n	800a59e <_printf_i+0x1fe>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	b004      	add	sp, #16
 800a50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50e:	4835      	ldr	r0, [pc, #212]	; (800a5e4 <_printf_i+0x244>)
 800a510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a514:	6829      	ldr	r1, [r5, #0]
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	f851 6b04 	ldr.w	r6, [r1], #4
 800a51c:	6029      	str	r1, [r5, #0]
 800a51e:	061d      	lsls	r5, r3, #24
 800a520:	d514      	bpl.n	800a54c <_printf_i+0x1ac>
 800a522:	07df      	lsls	r7, r3, #31
 800a524:	bf44      	itt	mi
 800a526:	f043 0320 	orrmi.w	r3, r3, #32
 800a52a:	6023      	strmi	r3, [r4, #0]
 800a52c:	b91e      	cbnz	r6, 800a536 <_printf_i+0x196>
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	f023 0320 	bic.w	r3, r3, #32
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	2310      	movs	r3, #16
 800a538:	e7b0      	b.n	800a49c <_printf_i+0xfc>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	f043 0320 	orr.w	r3, r3, #32
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	2378      	movs	r3, #120	; 0x78
 800a544:	4828      	ldr	r0, [pc, #160]	; (800a5e8 <_printf_i+0x248>)
 800a546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a54a:	e7e3      	b.n	800a514 <_printf_i+0x174>
 800a54c:	0659      	lsls	r1, r3, #25
 800a54e:	bf48      	it	mi
 800a550:	b2b6      	uxthmi	r6, r6
 800a552:	e7e6      	b.n	800a522 <_printf_i+0x182>
 800a554:	4615      	mov	r5, r2
 800a556:	e7bb      	b.n	800a4d0 <_printf_i+0x130>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	6826      	ldr	r6, [r4, #0]
 800a55c:	6961      	ldr	r1, [r4, #20]
 800a55e:	1d18      	adds	r0, r3, #4
 800a560:	6028      	str	r0, [r5, #0]
 800a562:	0635      	lsls	r5, r6, #24
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	d501      	bpl.n	800a56c <_printf_i+0x1cc>
 800a568:	6019      	str	r1, [r3, #0]
 800a56a:	e002      	b.n	800a572 <_printf_i+0x1d2>
 800a56c:	0670      	lsls	r0, r6, #25
 800a56e:	d5fb      	bpl.n	800a568 <_printf_i+0x1c8>
 800a570:	8019      	strh	r1, [r3, #0]
 800a572:	2300      	movs	r3, #0
 800a574:	6123      	str	r3, [r4, #16]
 800a576:	4615      	mov	r5, r2
 800a578:	e7ba      	b.n	800a4f0 <_printf_i+0x150>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	602a      	str	r2, [r5, #0]
 800a580:	681d      	ldr	r5, [r3, #0]
 800a582:	6862      	ldr	r2, [r4, #4]
 800a584:	2100      	movs	r1, #0
 800a586:	4628      	mov	r0, r5
 800a588:	f7f5 fe52 	bl	8000230 <memchr>
 800a58c:	b108      	cbz	r0, 800a592 <_printf_i+0x1f2>
 800a58e:	1b40      	subs	r0, r0, r5
 800a590:	6060      	str	r0, [r4, #4]
 800a592:	6863      	ldr	r3, [r4, #4]
 800a594:	6123      	str	r3, [r4, #16]
 800a596:	2300      	movs	r3, #0
 800a598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a59c:	e7a8      	b.n	800a4f0 <_printf_i+0x150>
 800a59e:	6923      	ldr	r3, [r4, #16]
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	4640      	mov	r0, r8
 800a5a6:	47d0      	blx	sl
 800a5a8:	3001      	adds	r0, #1
 800a5aa:	d0ab      	beq.n	800a504 <_printf_i+0x164>
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	079b      	lsls	r3, r3, #30
 800a5b0:	d413      	bmi.n	800a5da <_printf_i+0x23a>
 800a5b2:	68e0      	ldr	r0, [r4, #12]
 800a5b4:	9b03      	ldr	r3, [sp, #12]
 800a5b6:	4298      	cmp	r0, r3
 800a5b8:	bfb8      	it	lt
 800a5ba:	4618      	movlt	r0, r3
 800a5bc:	e7a4      	b.n	800a508 <_printf_i+0x168>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	47d0      	blx	sl
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d09b      	beq.n	800a504 <_printf_i+0x164>
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	68e3      	ldr	r3, [r4, #12]
 800a5d0:	9903      	ldr	r1, [sp, #12]
 800a5d2:	1a5b      	subs	r3, r3, r1
 800a5d4:	42ab      	cmp	r3, r5
 800a5d6:	dcf2      	bgt.n	800a5be <_printf_i+0x21e>
 800a5d8:	e7eb      	b.n	800a5b2 <_printf_i+0x212>
 800a5da:	2500      	movs	r5, #0
 800a5dc:	f104 0619 	add.w	r6, r4, #25
 800a5e0:	e7f5      	b.n	800a5ce <_printf_i+0x22e>
 800a5e2:	bf00      	nop
 800a5e4:	0800cba2 	.word	0x0800cba2
 800a5e8:	0800cbb3 	.word	0x0800cbb3

0800a5ec <iprintf>:
 800a5ec:	b40f      	push	{r0, r1, r2, r3}
 800a5ee:	4b0a      	ldr	r3, [pc, #40]	; (800a618 <iprintf+0x2c>)
 800a5f0:	b513      	push	{r0, r1, r4, lr}
 800a5f2:	681c      	ldr	r4, [r3, #0]
 800a5f4:	b124      	cbz	r4, 800a600 <iprintf+0x14>
 800a5f6:	69a3      	ldr	r3, [r4, #24]
 800a5f8:	b913      	cbnz	r3, 800a600 <iprintf+0x14>
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f001 f9a8 	bl	800b950 <__sinit>
 800a600:	ab05      	add	r3, sp, #20
 800a602:	9a04      	ldr	r2, [sp, #16]
 800a604:	68a1      	ldr	r1, [r4, #8]
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	4620      	mov	r0, r4
 800a60a:	f001 ff65 	bl	800c4d8 <_vfiprintf_r>
 800a60e:	b002      	add	sp, #8
 800a610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a614:	b004      	add	sp, #16
 800a616:	4770      	bx	lr
 800a618:	20000014 	.word	0x20000014

0800a61c <_puts_r>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	4605      	mov	r5, r0
 800a622:	b118      	cbz	r0, 800a62c <_puts_r+0x10>
 800a624:	6983      	ldr	r3, [r0, #24]
 800a626:	b90b      	cbnz	r3, 800a62c <_puts_r+0x10>
 800a628:	f001 f992 	bl	800b950 <__sinit>
 800a62c:	69ab      	ldr	r3, [r5, #24]
 800a62e:	68ac      	ldr	r4, [r5, #8]
 800a630:	b913      	cbnz	r3, 800a638 <_puts_r+0x1c>
 800a632:	4628      	mov	r0, r5
 800a634:	f001 f98c 	bl	800b950 <__sinit>
 800a638:	4b2c      	ldr	r3, [pc, #176]	; (800a6ec <_puts_r+0xd0>)
 800a63a:	429c      	cmp	r4, r3
 800a63c:	d120      	bne.n	800a680 <_puts_r+0x64>
 800a63e:	686c      	ldr	r4, [r5, #4]
 800a640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a642:	07db      	lsls	r3, r3, #31
 800a644:	d405      	bmi.n	800a652 <_puts_r+0x36>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	0598      	lsls	r0, r3, #22
 800a64a:	d402      	bmi.n	800a652 <_puts_r+0x36>
 800a64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a64e:	f001 fa22 	bl	800ba96 <__retarget_lock_acquire_recursive>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	0719      	lsls	r1, r3, #28
 800a656:	d51d      	bpl.n	800a694 <_puts_r+0x78>
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	b1db      	cbz	r3, 800a694 <_puts_r+0x78>
 800a65c:	3e01      	subs	r6, #1
 800a65e:	68a3      	ldr	r3, [r4, #8]
 800a660:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a664:	3b01      	subs	r3, #1
 800a666:	60a3      	str	r3, [r4, #8]
 800a668:	bb39      	cbnz	r1, 800a6ba <_puts_r+0x9e>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	da38      	bge.n	800a6e0 <_puts_r+0xc4>
 800a66e:	4622      	mov	r2, r4
 800a670:	210a      	movs	r1, #10
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f916 	bl	800a8a4 <__swbuf_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	d011      	beq.n	800a6a0 <_puts_r+0x84>
 800a67c:	250a      	movs	r5, #10
 800a67e:	e011      	b.n	800a6a4 <_puts_r+0x88>
 800a680:	4b1b      	ldr	r3, [pc, #108]	; (800a6f0 <_puts_r+0xd4>)
 800a682:	429c      	cmp	r4, r3
 800a684:	d101      	bne.n	800a68a <_puts_r+0x6e>
 800a686:	68ac      	ldr	r4, [r5, #8]
 800a688:	e7da      	b.n	800a640 <_puts_r+0x24>
 800a68a:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <_puts_r+0xd8>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	bf08      	it	eq
 800a690:	68ec      	ldreq	r4, [r5, #12]
 800a692:	e7d5      	b.n	800a640 <_puts_r+0x24>
 800a694:	4621      	mov	r1, r4
 800a696:	4628      	mov	r0, r5
 800a698:	f000 f956 	bl	800a948 <__swsetup_r>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d0dd      	beq.n	800a65c <_puts_r+0x40>
 800a6a0:	f04f 35ff 	mov.w	r5, #4294967295
 800a6a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6a6:	07da      	lsls	r2, r3, #31
 800a6a8:	d405      	bmi.n	800a6b6 <_puts_r+0x9a>
 800a6aa:	89a3      	ldrh	r3, [r4, #12]
 800a6ac:	059b      	lsls	r3, r3, #22
 800a6ae:	d402      	bmi.n	800a6b6 <_puts_r+0x9a>
 800a6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6b2:	f001 f9f1 	bl	800ba98 <__retarget_lock_release_recursive>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	da04      	bge.n	800a6c8 <_puts_r+0xac>
 800a6be:	69a2      	ldr	r2, [r4, #24]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	dc06      	bgt.n	800a6d2 <_puts_r+0xb6>
 800a6c4:	290a      	cmp	r1, #10
 800a6c6:	d004      	beq.n	800a6d2 <_puts_r+0xb6>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	6022      	str	r2, [r4, #0]
 800a6ce:	7019      	strb	r1, [r3, #0]
 800a6d0:	e7c5      	b.n	800a65e <_puts_r+0x42>
 800a6d2:	4622      	mov	r2, r4
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f000 f8e5 	bl	800a8a4 <__swbuf_r>
 800a6da:	3001      	adds	r0, #1
 800a6dc:	d1bf      	bne.n	800a65e <_puts_r+0x42>
 800a6de:	e7df      	b.n	800a6a0 <_puts_r+0x84>
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	250a      	movs	r5, #10
 800a6e4:	1c5a      	adds	r2, r3, #1
 800a6e6:	6022      	str	r2, [r4, #0]
 800a6e8:	701d      	strb	r5, [r3, #0]
 800a6ea:	e7db      	b.n	800a6a4 <_puts_r+0x88>
 800a6ec:	0800cc74 	.word	0x0800cc74
 800a6f0:	0800cc94 	.word	0x0800cc94
 800a6f4:	0800cc54 	.word	0x0800cc54

0800a6f8 <puts>:
 800a6f8:	4b02      	ldr	r3, [pc, #8]	; (800a704 <puts+0xc>)
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f7ff bf8d 	b.w	800a61c <_puts_r>
 800a702:	bf00      	nop
 800a704:	20000014 	.word	0x20000014

0800a708 <setbuf>:
 800a708:	2900      	cmp	r1, #0
 800a70a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a70e:	bf0c      	ite	eq
 800a710:	2202      	moveq	r2, #2
 800a712:	2200      	movne	r2, #0
 800a714:	f000 b800 	b.w	800a718 <setvbuf>

0800a718 <setvbuf>:
 800a718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a71c:	461d      	mov	r5, r3
 800a71e:	4b5d      	ldr	r3, [pc, #372]	; (800a894 <setvbuf+0x17c>)
 800a720:	681f      	ldr	r7, [r3, #0]
 800a722:	4604      	mov	r4, r0
 800a724:	460e      	mov	r6, r1
 800a726:	4690      	mov	r8, r2
 800a728:	b127      	cbz	r7, 800a734 <setvbuf+0x1c>
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	b913      	cbnz	r3, 800a734 <setvbuf+0x1c>
 800a72e:	4638      	mov	r0, r7
 800a730:	f001 f90e 	bl	800b950 <__sinit>
 800a734:	4b58      	ldr	r3, [pc, #352]	; (800a898 <setvbuf+0x180>)
 800a736:	429c      	cmp	r4, r3
 800a738:	d167      	bne.n	800a80a <setvbuf+0xf2>
 800a73a:	687c      	ldr	r4, [r7, #4]
 800a73c:	f1b8 0f02 	cmp.w	r8, #2
 800a740:	d006      	beq.n	800a750 <setvbuf+0x38>
 800a742:	f1b8 0f01 	cmp.w	r8, #1
 800a746:	f200 809f 	bhi.w	800a888 <setvbuf+0x170>
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	f2c0 809c 	blt.w	800a888 <setvbuf+0x170>
 800a750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a752:	07db      	lsls	r3, r3, #31
 800a754:	d405      	bmi.n	800a762 <setvbuf+0x4a>
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	0598      	lsls	r0, r3, #22
 800a75a:	d402      	bmi.n	800a762 <setvbuf+0x4a>
 800a75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75e:	f001 f99a 	bl	800ba96 <__retarget_lock_acquire_recursive>
 800a762:	4621      	mov	r1, r4
 800a764:	4638      	mov	r0, r7
 800a766:	f001 f85f 	bl	800b828 <_fflush_r>
 800a76a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a76c:	b141      	cbz	r1, 800a780 <setvbuf+0x68>
 800a76e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a772:	4299      	cmp	r1, r3
 800a774:	d002      	beq.n	800a77c <setvbuf+0x64>
 800a776:	4638      	mov	r0, r7
 800a778:	f001 fda4 	bl	800c2c4 <_free_r>
 800a77c:	2300      	movs	r3, #0
 800a77e:	6363      	str	r3, [r4, #52]	; 0x34
 800a780:	2300      	movs	r3, #0
 800a782:	61a3      	str	r3, [r4, #24]
 800a784:	6063      	str	r3, [r4, #4]
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	0619      	lsls	r1, r3, #24
 800a78a:	d503      	bpl.n	800a794 <setvbuf+0x7c>
 800a78c:	6921      	ldr	r1, [r4, #16]
 800a78e:	4638      	mov	r0, r7
 800a790:	f001 fd98 	bl	800c2c4 <_free_r>
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a79a:	f023 0303 	bic.w	r3, r3, #3
 800a79e:	f1b8 0f02 	cmp.w	r8, #2
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	d06c      	beq.n	800a880 <setvbuf+0x168>
 800a7a6:	ab01      	add	r3, sp, #4
 800a7a8:	466a      	mov	r2, sp
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f001 f974 	bl	800ba9a <__swhatbuf_r>
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	4318      	orrs	r0, r3
 800a7b6:	81a0      	strh	r0, [r4, #12]
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	d130      	bne.n	800a81e <setvbuf+0x106>
 800a7bc:	9d00      	ldr	r5, [sp, #0]
 800a7be:	4628      	mov	r0, r5
 800a7c0:	f001 f9d0 	bl	800bb64 <malloc>
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d155      	bne.n	800a876 <setvbuf+0x15e>
 800a7ca:	f8dd 9000 	ldr.w	r9, [sp]
 800a7ce:	45a9      	cmp	r9, r5
 800a7d0:	d14a      	bne.n	800a868 <setvbuf+0x150>
 800a7d2:	f04f 35ff 	mov.w	r5, #4294967295
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	60a2      	str	r2, [r4, #8]
 800a7da:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	6122      	str	r2, [r4, #16]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e8:	6162      	str	r2, [r4, #20]
 800a7ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7ec:	f043 0302 	orr.w	r3, r3, #2
 800a7f0:	07d2      	lsls	r2, r2, #31
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	d405      	bmi.n	800a802 <setvbuf+0xea>
 800a7f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a7fa:	d102      	bne.n	800a802 <setvbuf+0xea>
 800a7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fe:	f001 f94b 	bl	800ba98 <__retarget_lock_release_recursive>
 800a802:	4628      	mov	r0, r5
 800a804:	b003      	add	sp, #12
 800a806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a80a:	4b24      	ldr	r3, [pc, #144]	; (800a89c <setvbuf+0x184>)
 800a80c:	429c      	cmp	r4, r3
 800a80e:	d101      	bne.n	800a814 <setvbuf+0xfc>
 800a810:	68bc      	ldr	r4, [r7, #8]
 800a812:	e793      	b.n	800a73c <setvbuf+0x24>
 800a814:	4b22      	ldr	r3, [pc, #136]	; (800a8a0 <setvbuf+0x188>)
 800a816:	429c      	cmp	r4, r3
 800a818:	bf08      	it	eq
 800a81a:	68fc      	ldreq	r4, [r7, #12]
 800a81c:	e78e      	b.n	800a73c <setvbuf+0x24>
 800a81e:	2e00      	cmp	r6, #0
 800a820:	d0cd      	beq.n	800a7be <setvbuf+0xa6>
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	b913      	cbnz	r3, 800a82c <setvbuf+0x114>
 800a826:	4638      	mov	r0, r7
 800a828:	f001 f892 	bl	800b950 <__sinit>
 800a82c:	f1b8 0f01 	cmp.w	r8, #1
 800a830:	bf08      	it	eq
 800a832:	89a3      	ldrheq	r3, [r4, #12]
 800a834:	6026      	str	r6, [r4, #0]
 800a836:	bf04      	itt	eq
 800a838:	f043 0301 	orreq.w	r3, r3, #1
 800a83c:	81a3      	strheq	r3, [r4, #12]
 800a83e:	89a2      	ldrh	r2, [r4, #12]
 800a840:	f012 0308 	ands.w	r3, r2, #8
 800a844:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a848:	d01c      	beq.n	800a884 <setvbuf+0x16c>
 800a84a:	07d3      	lsls	r3, r2, #31
 800a84c:	bf41      	itttt	mi
 800a84e:	2300      	movmi	r3, #0
 800a850:	426d      	negmi	r5, r5
 800a852:	60a3      	strmi	r3, [r4, #8]
 800a854:	61a5      	strmi	r5, [r4, #24]
 800a856:	bf58      	it	pl
 800a858:	60a5      	strpl	r5, [r4, #8]
 800a85a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a85c:	f015 0501 	ands.w	r5, r5, #1
 800a860:	d115      	bne.n	800a88e <setvbuf+0x176>
 800a862:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a866:	e7c8      	b.n	800a7fa <setvbuf+0xe2>
 800a868:	4648      	mov	r0, r9
 800a86a:	f001 f97b 	bl	800bb64 <malloc>
 800a86e:	4606      	mov	r6, r0
 800a870:	2800      	cmp	r0, #0
 800a872:	d0ae      	beq.n	800a7d2 <setvbuf+0xba>
 800a874:	464d      	mov	r5, r9
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	e7d0      	b.n	800a822 <setvbuf+0x10a>
 800a880:	2500      	movs	r5, #0
 800a882:	e7a8      	b.n	800a7d6 <setvbuf+0xbe>
 800a884:	60a3      	str	r3, [r4, #8]
 800a886:	e7e8      	b.n	800a85a <setvbuf+0x142>
 800a888:	f04f 35ff 	mov.w	r5, #4294967295
 800a88c:	e7b9      	b.n	800a802 <setvbuf+0xea>
 800a88e:	2500      	movs	r5, #0
 800a890:	e7b7      	b.n	800a802 <setvbuf+0xea>
 800a892:	bf00      	nop
 800a894:	20000014 	.word	0x20000014
 800a898:	0800cc74 	.word	0x0800cc74
 800a89c:	0800cc94 	.word	0x0800cc94
 800a8a0:	0800cc54 	.word	0x0800cc54

0800a8a4 <__swbuf_r>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	460e      	mov	r6, r1
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	b118      	cbz	r0, 800a8b6 <__swbuf_r+0x12>
 800a8ae:	6983      	ldr	r3, [r0, #24]
 800a8b0:	b90b      	cbnz	r3, 800a8b6 <__swbuf_r+0x12>
 800a8b2:	f001 f84d 	bl	800b950 <__sinit>
 800a8b6:	4b21      	ldr	r3, [pc, #132]	; (800a93c <__swbuf_r+0x98>)
 800a8b8:	429c      	cmp	r4, r3
 800a8ba:	d12b      	bne.n	800a914 <__swbuf_r+0x70>
 800a8bc:	686c      	ldr	r4, [r5, #4]
 800a8be:	69a3      	ldr	r3, [r4, #24]
 800a8c0:	60a3      	str	r3, [r4, #8]
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	071a      	lsls	r2, r3, #28
 800a8c6:	d52f      	bpl.n	800a928 <__swbuf_r+0x84>
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	b36b      	cbz	r3, 800a928 <__swbuf_r+0x84>
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	6820      	ldr	r0, [r4, #0]
 800a8d0:	1ac0      	subs	r0, r0, r3
 800a8d2:	6963      	ldr	r3, [r4, #20]
 800a8d4:	b2f6      	uxtb	r6, r6
 800a8d6:	4283      	cmp	r3, r0
 800a8d8:	4637      	mov	r7, r6
 800a8da:	dc04      	bgt.n	800a8e6 <__swbuf_r+0x42>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f000 ffa2 	bl	800b828 <_fflush_r>
 800a8e4:	bb30      	cbnz	r0, 800a934 <__swbuf_r+0x90>
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	60a3      	str	r3, [r4, #8]
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	6022      	str	r2, [r4, #0]
 800a8f2:	701e      	strb	r6, [r3, #0]
 800a8f4:	6963      	ldr	r3, [r4, #20]
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	4283      	cmp	r3, r0
 800a8fa:	d004      	beq.n	800a906 <__swbuf_r+0x62>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	07db      	lsls	r3, r3, #31
 800a900:	d506      	bpl.n	800a910 <__swbuf_r+0x6c>
 800a902:	2e0a      	cmp	r6, #10
 800a904:	d104      	bne.n	800a910 <__swbuf_r+0x6c>
 800a906:	4621      	mov	r1, r4
 800a908:	4628      	mov	r0, r5
 800a90a:	f000 ff8d 	bl	800b828 <_fflush_r>
 800a90e:	b988      	cbnz	r0, 800a934 <__swbuf_r+0x90>
 800a910:	4638      	mov	r0, r7
 800a912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a914:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <__swbuf_r+0x9c>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d101      	bne.n	800a91e <__swbuf_r+0x7a>
 800a91a:	68ac      	ldr	r4, [r5, #8]
 800a91c:	e7cf      	b.n	800a8be <__swbuf_r+0x1a>
 800a91e:	4b09      	ldr	r3, [pc, #36]	; (800a944 <__swbuf_r+0xa0>)
 800a920:	429c      	cmp	r4, r3
 800a922:	bf08      	it	eq
 800a924:	68ec      	ldreq	r4, [r5, #12]
 800a926:	e7ca      	b.n	800a8be <__swbuf_r+0x1a>
 800a928:	4621      	mov	r1, r4
 800a92a:	4628      	mov	r0, r5
 800a92c:	f000 f80c 	bl	800a948 <__swsetup_r>
 800a930:	2800      	cmp	r0, #0
 800a932:	d0cb      	beq.n	800a8cc <__swbuf_r+0x28>
 800a934:	f04f 37ff 	mov.w	r7, #4294967295
 800a938:	e7ea      	b.n	800a910 <__swbuf_r+0x6c>
 800a93a:	bf00      	nop
 800a93c:	0800cc74 	.word	0x0800cc74
 800a940:	0800cc94 	.word	0x0800cc94
 800a944:	0800cc54 	.word	0x0800cc54

0800a948 <__swsetup_r>:
 800a948:	4b32      	ldr	r3, [pc, #200]	; (800aa14 <__swsetup_r+0xcc>)
 800a94a:	b570      	push	{r4, r5, r6, lr}
 800a94c:	681d      	ldr	r5, [r3, #0]
 800a94e:	4606      	mov	r6, r0
 800a950:	460c      	mov	r4, r1
 800a952:	b125      	cbz	r5, 800a95e <__swsetup_r+0x16>
 800a954:	69ab      	ldr	r3, [r5, #24]
 800a956:	b913      	cbnz	r3, 800a95e <__swsetup_r+0x16>
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 fff9 	bl	800b950 <__sinit>
 800a95e:	4b2e      	ldr	r3, [pc, #184]	; (800aa18 <__swsetup_r+0xd0>)
 800a960:	429c      	cmp	r4, r3
 800a962:	d10f      	bne.n	800a984 <__swsetup_r+0x3c>
 800a964:	686c      	ldr	r4, [r5, #4]
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a96c:	0719      	lsls	r1, r3, #28
 800a96e:	d42c      	bmi.n	800a9ca <__swsetup_r+0x82>
 800a970:	06dd      	lsls	r5, r3, #27
 800a972:	d411      	bmi.n	800a998 <__swsetup_r+0x50>
 800a974:	2309      	movs	r3, #9
 800a976:	6033      	str	r3, [r6, #0]
 800a978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a97c:	81a3      	strh	r3, [r4, #12]
 800a97e:	f04f 30ff 	mov.w	r0, #4294967295
 800a982:	e03e      	b.n	800aa02 <__swsetup_r+0xba>
 800a984:	4b25      	ldr	r3, [pc, #148]	; (800aa1c <__swsetup_r+0xd4>)
 800a986:	429c      	cmp	r4, r3
 800a988:	d101      	bne.n	800a98e <__swsetup_r+0x46>
 800a98a:	68ac      	ldr	r4, [r5, #8]
 800a98c:	e7eb      	b.n	800a966 <__swsetup_r+0x1e>
 800a98e:	4b24      	ldr	r3, [pc, #144]	; (800aa20 <__swsetup_r+0xd8>)
 800a990:	429c      	cmp	r4, r3
 800a992:	bf08      	it	eq
 800a994:	68ec      	ldreq	r4, [r5, #12]
 800a996:	e7e6      	b.n	800a966 <__swsetup_r+0x1e>
 800a998:	0758      	lsls	r0, r3, #29
 800a99a:	d512      	bpl.n	800a9c2 <__swsetup_r+0x7a>
 800a99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a99e:	b141      	cbz	r1, 800a9b2 <__swsetup_r+0x6a>
 800a9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9a4:	4299      	cmp	r1, r3
 800a9a6:	d002      	beq.n	800a9ae <__swsetup_r+0x66>
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f001 fc8b 	bl	800c2c4 <_free_r>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	6363      	str	r3, [r4, #52]	; 0x34
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9b8:	81a3      	strh	r3, [r4, #12]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6063      	str	r3, [r4, #4]
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	f043 0308 	orr.w	r3, r3, #8
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	b94b      	cbnz	r3, 800a9e2 <__swsetup_r+0x9a>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9d8:	d003      	beq.n	800a9e2 <__swsetup_r+0x9a>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f001 f881 	bl	800bae4 <__smakebuf_r>
 800a9e2:	89a0      	ldrh	r0, [r4, #12]
 800a9e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9e8:	f010 0301 	ands.w	r3, r0, #1
 800a9ec:	d00a      	beq.n	800aa04 <__swsetup_r+0xbc>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60a3      	str	r3, [r4, #8]
 800a9f2:	6963      	ldr	r3, [r4, #20]
 800a9f4:	425b      	negs	r3, r3
 800a9f6:	61a3      	str	r3, [r4, #24]
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	b943      	cbnz	r3, 800aa0e <__swsetup_r+0xc6>
 800a9fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa00:	d1ba      	bne.n	800a978 <__swsetup_r+0x30>
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	0781      	lsls	r1, r0, #30
 800aa06:	bf58      	it	pl
 800aa08:	6963      	ldrpl	r3, [r4, #20]
 800aa0a:	60a3      	str	r3, [r4, #8]
 800aa0c:	e7f4      	b.n	800a9f8 <__swsetup_r+0xb0>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	e7f7      	b.n	800aa02 <__swsetup_r+0xba>
 800aa12:	bf00      	nop
 800aa14:	20000014 	.word	0x20000014
 800aa18:	0800cc74 	.word	0x0800cc74
 800aa1c:	0800cc94 	.word	0x0800cc94
 800aa20:	0800cc54 	.word	0x0800cc54

0800aa24 <quorem>:
 800aa24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	6903      	ldr	r3, [r0, #16]
 800aa2a:	690c      	ldr	r4, [r1, #16]
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	4607      	mov	r7, r0
 800aa30:	f2c0 8081 	blt.w	800ab36 <quorem+0x112>
 800aa34:	3c01      	subs	r4, #1
 800aa36:	f101 0814 	add.w	r8, r1, #20
 800aa3a:	f100 0514 	add.w	r5, r0, #20
 800aa3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa58:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa5c:	d331      	bcc.n	800aac2 <quorem+0x9e>
 800aa5e:	f04f 0e00 	mov.w	lr, #0
 800aa62:	4640      	mov	r0, r8
 800aa64:	46ac      	mov	ip, r5
 800aa66:	46f2      	mov	sl, lr
 800aa68:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa6c:	b293      	uxth	r3, r2
 800aa6e:	fb06 e303 	mla	r3, r6, r3, lr
 800aa72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	ebaa 0303 	sub.w	r3, sl, r3
 800aa7c:	f8dc a000 	ldr.w	sl, [ip]
 800aa80:	0c12      	lsrs	r2, r2, #16
 800aa82:	fa13 f38a 	uxtah	r3, r3, sl
 800aa86:	fb06 e202 	mla	r2, r6, r2, lr
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	9b00      	ldr	r3, [sp, #0]
 800aa8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa92:	b292      	uxth	r2, r2
 800aa94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aa98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa9c:	f8bd 3000 	ldrh.w	r3, [sp]
 800aaa0:	4581      	cmp	r9, r0
 800aaa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaa6:	f84c 3b04 	str.w	r3, [ip], #4
 800aaaa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aaae:	d2db      	bcs.n	800aa68 <quorem+0x44>
 800aab0:	f855 300b 	ldr.w	r3, [r5, fp]
 800aab4:	b92b      	cbnz	r3, 800aac2 <quorem+0x9e>
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	3b04      	subs	r3, #4
 800aaba:	429d      	cmp	r5, r3
 800aabc:	461a      	mov	r2, r3
 800aabe:	d32e      	bcc.n	800ab1e <quorem+0xfa>
 800aac0:	613c      	str	r4, [r7, #16]
 800aac2:	4638      	mov	r0, r7
 800aac4:	f001 fae6 	bl	800c094 <__mcmp>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	db24      	blt.n	800ab16 <quorem+0xf2>
 800aacc:	3601      	adds	r6, #1
 800aace:	4628      	mov	r0, r5
 800aad0:	f04f 0c00 	mov.w	ip, #0
 800aad4:	f858 2b04 	ldr.w	r2, [r8], #4
 800aad8:	f8d0 e000 	ldr.w	lr, [r0]
 800aadc:	b293      	uxth	r3, r2
 800aade:	ebac 0303 	sub.w	r3, ip, r3
 800aae2:	0c12      	lsrs	r2, r2, #16
 800aae4:	fa13 f38e 	uxtah	r3, r3, lr
 800aae8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aaec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaf6:	45c1      	cmp	r9, r8
 800aaf8:	f840 3b04 	str.w	r3, [r0], #4
 800aafc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab00:	d2e8      	bcs.n	800aad4 <quorem+0xb0>
 800ab02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab0a:	b922      	cbnz	r2, 800ab16 <quorem+0xf2>
 800ab0c:	3b04      	subs	r3, #4
 800ab0e:	429d      	cmp	r5, r3
 800ab10:	461a      	mov	r2, r3
 800ab12:	d30a      	bcc.n	800ab2a <quorem+0x106>
 800ab14:	613c      	str	r4, [r7, #16]
 800ab16:	4630      	mov	r0, r6
 800ab18:	b003      	add	sp, #12
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	6812      	ldr	r2, [r2, #0]
 800ab20:	3b04      	subs	r3, #4
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	d1cc      	bne.n	800aac0 <quorem+0x9c>
 800ab26:	3c01      	subs	r4, #1
 800ab28:	e7c7      	b.n	800aaba <quorem+0x96>
 800ab2a:	6812      	ldr	r2, [r2, #0]
 800ab2c:	3b04      	subs	r3, #4
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	d1f0      	bne.n	800ab14 <quorem+0xf0>
 800ab32:	3c01      	subs	r4, #1
 800ab34:	e7eb      	b.n	800ab0e <quorem+0xea>
 800ab36:	2000      	movs	r0, #0
 800ab38:	e7ee      	b.n	800ab18 <quorem+0xf4>
 800ab3a:	0000      	movs	r0, r0
 800ab3c:	0000      	movs	r0, r0
	...

0800ab40 <_dtoa_r>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	ed2d 8b04 	vpush	{d8-d9}
 800ab48:	ec57 6b10 	vmov	r6, r7, d0
 800ab4c:	b093      	sub	sp, #76	; 0x4c
 800ab4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab54:	9106      	str	r1, [sp, #24]
 800ab56:	ee10 aa10 	vmov	sl, s0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab60:	46bb      	mov	fp, r7
 800ab62:	b975      	cbnz	r5, 800ab82 <_dtoa_r+0x42>
 800ab64:	2010      	movs	r0, #16
 800ab66:	f000 fffd 	bl	800bb64 <malloc>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	6260      	str	r0, [r4, #36]	; 0x24
 800ab6e:	b920      	cbnz	r0, 800ab7a <_dtoa_r+0x3a>
 800ab70:	4ba7      	ldr	r3, [pc, #668]	; (800ae10 <_dtoa_r+0x2d0>)
 800ab72:	21ea      	movs	r1, #234	; 0xea
 800ab74:	48a7      	ldr	r0, [pc, #668]	; (800ae14 <_dtoa_r+0x2d4>)
 800ab76:	f001 fe45 	bl	800c804 <__assert_func>
 800ab7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab7e:	6005      	str	r5, [r0, #0]
 800ab80:	60c5      	str	r5, [r0, #12]
 800ab82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab84:	6819      	ldr	r1, [r3, #0]
 800ab86:	b151      	cbz	r1, 800ab9e <_dtoa_r+0x5e>
 800ab88:	685a      	ldr	r2, [r3, #4]
 800ab8a:	604a      	str	r2, [r1, #4]
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	4093      	lsls	r3, r2
 800ab90:	608b      	str	r3, [r1, #8]
 800ab92:	4620      	mov	r0, r4
 800ab94:	f001 f83c 	bl	800bc10 <_Bfree>
 800ab98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	1e3b      	subs	r3, r7, #0
 800aba0:	bfaa      	itet	ge
 800aba2:	2300      	movge	r3, #0
 800aba4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aba8:	f8c8 3000 	strge.w	r3, [r8]
 800abac:	4b9a      	ldr	r3, [pc, #616]	; (800ae18 <_dtoa_r+0x2d8>)
 800abae:	bfbc      	itt	lt
 800abb0:	2201      	movlt	r2, #1
 800abb2:	f8c8 2000 	strlt.w	r2, [r8]
 800abb6:	ea33 030b 	bics.w	r3, r3, fp
 800abba:	d11b      	bne.n	800abf4 <_dtoa_r+0xb4>
 800abbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abbe:	f242 730f 	movw	r3, #9999	; 0x270f
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abc8:	4333      	orrs	r3, r6
 800abca:	f000 8592 	beq.w	800b6f2 <_dtoa_r+0xbb2>
 800abce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abd0:	b963      	cbnz	r3, 800abec <_dtoa_r+0xac>
 800abd2:	4b92      	ldr	r3, [pc, #584]	; (800ae1c <_dtoa_r+0x2dc>)
 800abd4:	e022      	b.n	800ac1c <_dtoa_r+0xdc>
 800abd6:	4b92      	ldr	r3, [pc, #584]	; (800ae20 <_dtoa_r+0x2e0>)
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	3308      	adds	r3, #8
 800abdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	9801      	ldr	r0, [sp, #4]
 800abe2:	b013      	add	sp, #76	; 0x4c
 800abe4:	ecbd 8b04 	vpop	{d8-d9}
 800abe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abec:	4b8b      	ldr	r3, [pc, #556]	; (800ae1c <_dtoa_r+0x2dc>)
 800abee:	9301      	str	r3, [sp, #4]
 800abf0:	3303      	adds	r3, #3
 800abf2:	e7f3      	b.n	800abdc <_dtoa_r+0x9c>
 800abf4:	2200      	movs	r2, #0
 800abf6:	2300      	movs	r3, #0
 800abf8:	4650      	mov	r0, sl
 800abfa:	4659      	mov	r1, fp
 800abfc:	f7f5 ff8c 	bl	8000b18 <__aeabi_dcmpeq>
 800ac00:	ec4b ab19 	vmov	d9, sl, fp
 800ac04:	4680      	mov	r8, r0
 800ac06:	b158      	cbz	r0, 800ac20 <_dtoa_r+0xe0>
 800ac08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	6013      	str	r3, [r2, #0]
 800ac0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 856b 	beq.w	800b6ec <_dtoa_r+0xbac>
 800ac16:	4883      	ldr	r0, [pc, #524]	; (800ae24 <_dtoa_r+0x2e4>)
 800ac18:	6018      	str	r0, [r3, #0]
 800ac1a:	1e43      	subs	r3, r0, #1
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	e7df      	b.n	800abe0 <_dtoa_r+0xa0>
 800ac20:	ec4b ab10 	vmov	d0, sl, fp
 800ac24:	aa10      	add	r2, sp, #64	; 0x40
 800ac26:	a911      	add	r1, sp, #68	; 0x44
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f001 fad9 	bl	800c1e0 <__d2b>
 800ac2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ac32:	ee08 0a10 	vmov	s16, r0
 800ac36:	2d00      	cmp	r5, #0
 800ac38:	f000 8084 	beq.w	800ad44 <_dtoa_r+0x204>
 800ac3c:	ee19 3a90 	vmov	r3, s19
 800ac40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ac48:	4656      	mov	r6, sl
 800ac4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ac4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ac56:	4b74      	ldr	r3, [pc, #464]	; (800ae28 <_dtoa_r+0x2e8>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	f7f5 fb3b 	bl	80002d8 <__aeabi_dsub>
 800ac62:	a365      	add	r3, pc, #404	; (adr r3, 800adf8 <_dtoa_r+0x2b8>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f7f5 fcee 	bl	8000648 <__aeabi_dmul>
 800ac6c:	a364      	add	r3, pc, #400	; (adr r3, 800ae00 <_dtoa_r+0x2c0>)
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	f7f5 fb33 	bl	80002dc <__adddf3>
 800ac76:	4606      	mov	r6, r0
 800ac78:	4628      	mov	r0, r5
 800ac7a:	460f      	mov	r7, r1
 800ac7c:	f7f5 fc7a 	bl	8000574 <__aeabi_i2d>
 800ac80:	a361      	add	r3, pc, #388	; (adr r3, 800ae08 <_dtoa_r+0x2c8>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f7f5 fcdf 	bl	8000648 <__aeabi_dmul>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4630      	mov	r0, r6
 800ac90:	4639      	mov	r1, r7
 800ac92:	f7f5 fb23 	bl	80002dc <__adddf3>
 800ac96:	4606      	mov	r6, r0
 800ac98:	460f      	mov	r7, r1
 800ac9a:	f7f5 ff85 	bl	8000ba8 <__aeabi_d2iz>
 800ac9e:	2200      	movs	r2, #0
 800aca0:	9000      	str	r0, [sp, #0]
 800aca2:	2300      	movs	r3, #0
 800aca4:	4630      	mov	r0, r6
 800aca6:	4639      	mov	r1, r7
 800aca8:	f7f5 ff40 	bl	8000b2c <__aeabi_dcmplt>
 800acac:	b150      	cbz	r0, 800acc4 <_dtoa_r+0x184>
 800acae:	9800      	ldr	r0, [sp, #0]
 800acb0:	f7f5 fc60 	bl	8000574 <__aeabi_i2d>
 800acb4:	4632      	mov	r2, r6
 800acb6:	463b      	mov	r3, r7
 800acb8:	f7f5 ff2e 	bl	8000b18 <__aeabi_dcmpeq>
 800acbc:	b910      	cbnz	r0, 800acc4 <_dtoa_r+0x184>
 800acbe:	9b00      	ldr	r3, [sp, #0]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	9b00      	ldr	r3, [sp, #0]
 800acc6:	2b16      	cmp	r3, #22
 800acc8:	d85a      	bhi.n	800ad80 <_dtoa_r+0x240>
 800acca:	9a00      	ldr	r2, [sp, #0]
 800accc:	4b57      	ldr	r3, [pc, #348]	; (800ae2c <_dtoa_r+0x2ec>)
 800acce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	ec51 0b19 	vmov	r0, r1, d9
 800acda:	f7f5 ff27 	bl	8000b2c <__aeabi_dcmplt>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d050      	beq.n	800ad84 <_dtoa_r+0x244>
 800ace2:	9b00      	ldr	r3, [sp, #0]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	2300      	movs	r3, #0
 800acea:	930b      	str	r3, [sp, #44]	; 0x2c
 800acec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acee:	1b5d      	subs	r5, r3, r5
 800acf0:	1e6b      	subs	r3, r5, #1
 800acf2:	9305      	str	r3, [sp, #20]
 800acf4:	bf45      	ittet	mi
 800acf6:	f1c5 0301 	rsbmi	r3, r5, #1
 800acfa:	9304      	strmi	r3, [sp, #16]
 800acfc:	2300      	movpl	r3, #0
 800acfe:	2300      	movmi	r3, #0
 800ad00:	bf4c      	ite	mi
 800ad02:	9305      	strmi	r3, [sp, #20]
 800ad04:	9304      	strpl	r3, [sp, #16]
 800ad06:	9b00      	ldr	r3, [sp, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	db3d      	blt.n	800ad88 <_dtoa_r+0x248>
 800ad0c:	9b05      	ldr	r3, [sp, #20]
 800ad0e:	9a00      	ldr	r2, [sp, #0]
 800ad10:	920a      	str	r2, [sp, #40]	; 0x28
 800ad12:	4413      	add	r3, r2
 800ad14:	9305      	str	r3, [sp, #20]
 800ad16:	2300      	movs	r3, #0
 800ad18:	9307      	str	r3, [sp, #28]
 800ad1a:	9b06      	ldr	r3, [sp, #24]
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	f200 8089 	bhi.w	800ae34 <_dtoa_r+0x2f4>
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	bfc4      	itt	gt
 800ad26:	3b04      	subgt	r3, #4
 800ad28:	9306      	strgt	r3, [sp, #24]
 800ad2a:	9b06      	ldr	r3, [sp, #24]
 800ad2c:	f1a3 0302 	sub.w	r3, r3, #2
 800ad30:	bfcc      	ite	gt
 800ad32:	2500      	movgt	r5, #0
 800ad34:	2501      	movle	r5, #1
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	f200 8087 	bhi.w	800ae4a <_dtoa_r+0x30a>
 800ad3c:	e8df f003 	tbb	[pc, r3]
 800ad40:	59383a2d 	.word	0x59383a2d
 800ad44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ad48:	441d      	add	r5, r3
 800ad4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad4e:	2b20      	cmp	r3, #32
 800ad50:	bfc1      	itttt	gt
 800ad52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ad5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ad5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad62:	bfda      	itte	le
 800ad64:	f1c3 0320 	rsble	r3, r3, #32
 800ad68:	fa06 f003 	lslle.w	r0, r6, r3
 800ad6c:	4318      	orrgt	r0, r3
 800ad6e:	f7f5 fbf1 	bl	8000554 <__aeabi_ui2d>
 800ad72:	2301      	movs	r3, #1
 800ad74:	4606      	mov	r6, r0
 800ad76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ad7a:	3d01      	subs	r5, #1
 800ad7c:	930e      	str	r3, [sp, #56]	; 0x38
 800ad7e:	e76a      	b.n	800ac56 <_dtoa_r+0x116>
 800ad80:	2301      	movs	r3, #1
 800ad82:	e7b2      	b.n	800acea <_dtoa_r+0x1aa>
 800ad84:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad86:	e7b1      	b.n	800acec <_dtoa_r+0x1ac>
 800ad88:	9b04      	ldr	r3, [sp, #16]
 800ad8a:	9a00      	ldr	r2, [sp, #0]
 800ad8c:	1a9b      	subs	r3, r3, r2
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	4253      	negs	r3, r2
 800ad92:	9307      	str	r3, [sp, #28]
 800ad94:	2300      	movs	r3, #0
 800ad96:	930a      	str	r3, [sp, #40]	; 0x28
 800ad98:	e7bf      	b.n	800ad1a <_dtoa_r+0x1da>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9308      	str	r3, [sp, #32]
 800ad9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dc55      	bgt.n	800ae50 <_dtoa_r+0x310>
 800ada4:	2301      	movs	r3, #1
 800ada6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800adaa:	461a      	mov	r2, r3
 800adac:	9209      	str	r2, [sp, #36]	; 0x24
 800adae:	e00c      	b.n	800adca <_dtoa_r+0x28a>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7f3      	b.n	800ad9c <_dtoa_r+0x25c>
 800adb4:	2300      	movs	r3, #0
 800adb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adb8:	9308      	str	r3, [sp, #32]
 800adba:	9b00      	ldr	r3, [sp, #0]
 800adbc:	4413      	add	r3, r2
 800adbe:	9302      	str	r3, [sp, #8]
 800adc0:	3301      	adds	r3, #1
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	9303      	str	r3, [sp, #12]
 800adc6:	bfb8      	it	lt
 800adc8:	2301      	movlt	r3, #1
 800adca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800adcc:	2200      	movs	r2, #0
 800adce:	6042      	str	r2, [r0, #4]
 800add0:	2204      	movs	r2, #4
 800add2:	f102 0614 	add.w	r6, r2, #20
 800add6:	429e      	cmp	r6, r3
 800add8:	6841      	ldr	r1, [r0, #4]
 800adda:	d93d      	bls.n	800ae58 <_dtoa_r+0x318>
 800addc:	4620      	mov	r0, r4
 800adde:	f000 fed7 	bl	800bb90 <_Balloc>
 800ade2:	9001      	str	r0, [sp, #4]
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d13b      	bne.n	800ae60 <_dtoa_r+0x320>
 800ade8:	4b11      	ldr	r3, [pc, #68]	; (800ae30 <_dtoa_r+0x2f0>)
 800adea:	4602      	mov	r2, r0
 800adec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800adf0:	e6c0      	b.n	800ab74 <_dtoa_r+0x34>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e7df      	b.n	800adb6 <_dtoa_r+0x276>
 800adf6:	bf00      	nop
 800adf8:	636f4361 	.word	0x636f4361
 800adfc:	3fd287a7 	.word	0x3fd287a7
 800ae00:	8b60c8b3 	.word	0x8b60c8b3
 800ae04:	3fc68a28 	.word	0x3fc68a28
 800ae08:	509f79fb 	.word	0x509f79fb
 800ae0c:	3fd34413 	.word	0x3fd34413
 800ae10:	0800cbd1 	.word	0x0800cbd1
 800ae14:	0800cbe8 	.word	0x0800cbe8
 800ae18:	7ff00000 	.word	0x7ff00000
 800ae1c:	0800cbcd 	.word	0x0800cbcd
 800ae20:	0800cbc4 	.word	0x0800cbc4
 800ae24:	0800cba1 	.word	0x0800cba1
 800ae28:	3ff80000 	.word	0x3ff80000
 800ae2c:	0800cd38 	.word	0x0800cd38
 800ae30:	0800cc43 	.word	0x0800cc43
 800ae34:	2501      	movs	r5, #1
 800ae36:	2300      	movs	r3, #0
 800ae38:	9306      	str	r3, [sp, #24]
 800ae3a:	9508      	str	r5, [sp, #32]
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae44:	2200      	movs	r2, #0
 800ae46:	2312      	movs	r3, #18
 800ae48:	e7b0      	b.n	800adac <_dtoa_r+0x26c>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	9308      	str	r3, [sp, #32]
 800ae4e:	e7f5      	b.n	800ae3c <_dtoa_r+0x2fc>
 800ae50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae56:	e7b8      	b.n	800adca <_dtoa_r+0x28a>
 800ae58:	3101      	adds	r1, #1
 800ae5a:	6041      	str	r1, [r0, #4]
 800ae5c:	0052      	lsls	r2, r2, #1
 800ae5e:	e7b8      	b.n	800add2 <_dtoa_r+0x292>
 800ae60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae62:	9a01      	ldr	r2, [sp, #4]
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	2b0e      	cmp	r3, #14
 800ae6a:	f200 809d 	bhi.w	800afa8 <_dtoa_r+0x468>
 800ae6e:	2d00      	cmp	r5, #0
 800ae70:	f000 809a 	beq.w	800afa8 <_dtoa_r+0x468>
 800ae74:	9b00      	ldr	r3, [sp, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	dd32      	ble.n	800aee0 <_dtoa_r+0x3a0>
 800ae7a:	4ab7      	ldr	r2, [pc, #732]	; (800b158 <_dtoa_r+0x618>)
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae88:	9b00      	ldr	r3, [sp, #0]
 800ae8a:	05d8      	lsls	r0, r3, #23
 800ae8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ae90:	d516      	bpl.n	800aec0 <_dtoa_r+0x380>
 800ae92:	4bb2      	ldr	r3, [pc, #712]	; (800b15c <_dtoa_r+0x61c>)
 800ae94:	ec51 0b19 	vmov	r0, r1, d9
 800ae98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae9c:	f7f5 fcfe 	bl	800089c <__aeabi_ddiv>
 800aea0:	f007 070f 	and.w	r7, r7, #15
 800aea4:	4682      	mov	sl, r0
 800aea6:	468b      	mov	fp, r1
 800aea8:	2503      	movs	r5, #3
 800aeaa:	4eac      	ldr	r6, [pc, #688]	; (800b15c <_dtoa_r+0x61c>)
 800aeac:	b957      	cbnz	r7, 800aec4 <_dtoa_r+0x384>
 800aeae:	4642      	mov	r2, r8
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	f7f5 fcf1 	bl	800089c <__aeabi_ddiv>
 800aeba:	4682      	mov	sl, r0
 800aebc:	468b      	mov	fp, r1
 800aebe:	e028      	b.n	800af12 <_dtoa_r+0x3d2>
 800aec0:	2502      	movs	r5, #2
 800aec2:	e7f2      	b.n	800aeaa <_dtoa_r+0x36a>
 800aec4:	07f9      	lsls	r1, r7, #31
 800aec6:	d508      	bpl.n	800aeda <_dtoa_r+0x39a>
 800aec8:	4640      	mov	r0, r8
 800aeca:	4649      	mov	r1, r9
 800aecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aed0:	f7f5 fbba 	bl	8000648 <__aeabi_dmul>
 800aed4:	3501      	adds	r5, #1
 800aed6:	4680      	mov	r8, r0
 800aed8:	4689      	mov	r9, r1
 800aeda:	107f      	asrs	r7, r7, #1
 800aedc:	3608      	adds	r6, #8
 800aede:	e7e5      	b.n	800aeac <_dtoa_r+0x36c>
 800aee0:	f000 809b 	beq.w	800b01a <_dtoa_r+0x4da>
 800aee4:	9b00      	ldr	r3, [sp, #0]
 800aee6:	4f9d      	ldr	r7, [pc, #628]	; (800b15c <_dtoa_r+0x61c>)
 800aee8:	425e      	negs	r6, r3
 800aeea:	4b9b      	ldr	r3, [pc, #620]	; (800b158 <_dtoa_r+0x618>)
 800aeec:	f006 020f 	and.w	r2, r6, #15
 800aef0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef8:	ec51 0b19 	vmov	r0, r1, d9
 800aefc:	f7f5 fba4 	bl	8000648 <__aeabi_dmul>
 800af00:	1136      	asrs	r6, r6, #4
 800af02:	4682      	mov	sl, r0
 800af04:	468b      	mov	fp, r1
 800af06:	2300      	movs	r3, #0
 800af08:	2502      	movs	r5, #2
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	d17a      	bne.n	800b004 <_dtoa_r+0x4c4>
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1d3      	bne.n	800aeba <_dtoa_r+0x37a>
 800af12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8082 	beq.w	800b01e <_dtoa_r+0x4de>
 800af1a:	4b91      	ldr	r3, [pc, #580]	; (800b160 <_dtoa_r+0x620>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	4650      	mov	r0, sl
 800af20:	4659      	mov	r1, fp
 800af22:	f7f5 fe03 	bl	8000b2c <__aeabi_dcmplt>
 800af26:	2800      	cmp	r0, #0
 800af28:	d079      	beq.n	800b01e <_dtoa_r+0x4de>
 800af2a:	9b03      	ldr	r3, [sp, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d076      	beq.n	800b01e <_dtoa_r+0x4de>
 800af30:	9b02      	ldr	r3, [sp, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	dd36      	ble.n	800afa4 <_dtoa_r+0x464>
 800af36:	9b00      	ldr	r3, [sp, #0]
 800af38:	4650      	mov	r0, sl
 800af3a:	4659      	mov	r1, fp
 800af3c:	1e5f      	subs	r7, r3, #1
 800af3e:	2200      	movs	r2, #0
 800af40:	4b88      	ldr	r3, [pc, #544]	; (800b164 <_dtoa_r+0x624>)
 800af42:	f7f5 fb81 	bl	8000648 <__aeabi_dmul>
 800af46:	9e02      	ldr	r6, [sp, #8]
 800af48:	4682      	mov	sl, r0
 800af4a:	468b      	mov	fp, r1
 800af4c:	3501      	adds	r5, #1
 800af4e:	4628      	mov	r0, r5
 800af50:	f7f5 fb10 	bl	8000574 <__aeabi_i2d>
 800af54:	4652      	mov	r2, sl
 800af56:	465b      	mov	r3, fp
 800af58:	f7f5 fb76 	bl	8000648 <__aeabi_dmul>
 800af5c:	4b82      	ldr	r3, [pc, #520]	; (800b168 <_dtoa_r+0x628>)
 800af5e:	2200      	movs	r2, #0
 800af60:	f7f5 f9bc 	bl	80002dc <__adddf3>
 800af64:	46d0      	mov	r8, sl
 800af66:	46d9      	mov	r9, fp
 800af68:	4682      	mov	sl, r0
 800af6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800af6e:	2e00      	cmp	r6, #0
 800af70:	d158      	bne.n	800b024 <_dtoa_r+0x4e4>
 800af72:	4b7e      	ldr	r3, [pc, #504]	; (800b16c <_dtoa_r+0x62c>)
 800af74:	2200      	movs	r2, #0
 800af76:	4640      	mov	r0, r8
 800af78:	4649      	mov	r1, r9
 800af7a:	f7f5 f9ad 	bl	80002d8 <__aeabi_dsub>
 800af7e:	4652      	mov	r2, sl
 800af80:	465b      	mov	r3, fp
 800af82:	4680      	mov	r8, r0
 800af84:	4689      	mov	r9, r1
 800af86:	f7f5 fdef 	bl	8000b68 <__aeabi_dcmpgt>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f040 8295 	bne.w	800b4ba <_dtoa_r+0x97a>
 800af90:	4652      	mov	r2, sl
 800af92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 fdc7 	bl	8000b2c <__aeabi_dcmplt>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f040 8289 	bne.w	800b4b6 <_dtoa_r+0x976>
 800afa4:	ec5b ab19 	vmov	sl, fp, d9
 800afa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f2c0 8148 	blt.w	800b240 <_dtoa_r+0x700>
 800afb0:	9a00      	ldr	r2, [sp, #0]
 800afb2:	2a0e      	cmp	r2, #14
 800afb4:	f300 8144 	bgt.w	800b240 <_dtoa_r+0x700>
 800afb8:	4b67      	ldr	r3, [pc, #412]	; (800b158 <_dtoa_r+0x618>)
 800afba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f280 80d5 	bge.w	800b174 <_dtoa_r+0x634>
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f300 80d1 	bgt.w	800b174 <_dtoa_r+0x634>
 800afd2:	f040 826f 	bne.w	800b4b4 <_dtoa_r+0x974>
 800afd6:	4b65      	ldr	r3, [pc, #404]	; (800b16c <_dtoa_r+0x62c>)
 800afd8:	2200      	movs	r2, #0
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 fb33 	bl	8000648 <__aeabi_dmul>
 800afe2:	4652      	mov	r2, sl
 800afe4:	465b      	mov	r3, fp
 800afe6:	f7f5 fdb5 	bl	8000b54 <__aeabi_dcmpge>
 800afea:	9e03      	ldr	r6, [sp, #12]
 800afec:	4637      	mov	r7, r6
 800afee:	2800      	cmp	r0, #0
 800aff0:	f040 8245 	bne.w	800b47e <_dtoa_r+0x93e>
 800aff4:	9d01      	ldr	r5, [sp, #4]
 800aff6:	2331      	movs	r3, #49	; 0x31
 800aff8:	f805 3b01 	strb.w	r3, [r5], #1
 800affc:	9b00      	ldr	r3, [sp, #0]
 800affe:	3301      	adds	r3, #1
 800b000:	9300      	str	r3, [sp, #0]
 800b002:	e240      	b.n	800b486 <_dtoa_r+0x946>
 800b004:	07f2      	lsls	r2, r6, #31
 800b006:	d505      	bpl.n	800b014 <_dtoa_r+0x4d4>
 800b008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b00c:	f7f5 fb1c 	bl	8000648 <__aeabi_dmul>
 800b010:	3501      	adds	r5, #1
 800b012:	2301      	movs	r3, #1
 800b014:	1076      	asrs	r6, r6, #1
 800b016:	3708      	adds	r7, #8
 800b018:	e777      	b.n	800af0a <_dtoa_r+0x3ca>
 800b01a:	2502      	movs	r5, #2
 800b01c:	e779      	b.n	800af12 <_dtoa_r+0x3d2>
 800b01e:	9f00      	ldr	r7, [sp, #0]
 800b020:	9e03      	ldr	r6, [sp, #12]
 800b022:	e794      	b.n	800af4e <_dtoa_r+0x40e>
 800b024:	9901      	ldr	r1, [sp, #4]
 800b026:	4b4c      	ldr	r3, [pc, #304]	; (800b158 <_dtoa_r+0x618>)
 800b028:	4431      	add	r1, r6
 800b02a:	910d      	str	r1, [sp, #52]	; 0x34
 800b02c:	9908      	ldr	r1, [sp, #32]
 800b02e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b032:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b036:	2900      	cmp	r1, #0
 800b038:	d043      	beq.n	800b0c2 <_dtoa_r+0x582>
 800b03a:	494d      	ldr	r1, [pc, #308]	; (800b170 <_dtoa_r+0x630>)
 800b03c:	2000      	movs	r0, #0
 800b03e:	f7f5 fc2d 	bl	800089c <__aeabi_ddiv>
 800b042:	4652      	mov	r2, sl
 800b044:	465b      	mov	r3, fp
 800b046:	f7f5 f947 	bl	80002d8 <__aeabi_dsub>
 800b04a:	9d01      	ldr	r5, [sp, #4]
 800b04c:	4682      	mov	sl, r0
 800b04e:	468b      	mov	fp, r1
 800b050:	4649      	mov	r1, r9
 800b052:	4640      	mov	r0, r8
 800b054:	f7f5 fda8 	bl	8000ba8 <__aeabi_d2iz>
 800b058:	4606      	mov	r6, r0
 800b05a:	f7f5 fa8b 	bl	8000574 <__aeabi_i2d>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4640      	mov	r0, r8
 800b064:	4649      	mov	r1, r9
 800b066:	f7f5 f937 	bl	80002d8 <__aeabi_dsub>
 800b06a:	3630      	adds	r6, #48	; 0x30
 800b06c:	f805 6b01 	strb.w	r6, [r5], #1
 800b070:	4652      	mov	r2, sl
 800b072:	465b      	mov	r3, fp
 800b074:	4680      	mov	r8, r0
 800b076:	4689      	mov	r9, r1
 800b078:	f7f5 fd58 	bl	8000b2c <__aeabi_dcmplt>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d163      	bne.n	800b148 <_dtoa_r+0x608>
 800b080:	4642      	mov	r2, r8
 800b082:	464b      	mov	r3, r9
 800b084:	4936      	ldr	r1, [pc, #216]	; (800b160 <_dtoa_r+0x620>)
 800b086:	2000      	movs	r0, #0
 800b088:	f7f5 f926 	bl	80002d8 <__aeabi_dsub>
 800b08c:	4652      	mov	r2, sl
 800b08e:	465b      	mov	r3, fp
 800b090:	f7f5 fd4c 	bl	8000b2c <__aeabi_dcmplt>
 800b094:	2800      	cmp	r0, #0
 800b096:	f040 80b5 	bne.w	800b204 <_dtoa_r+0x6c4>
 800b09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b09c:	429d      	cmp	r5, r3
 800b09e:	d081      	beq.n	800afa4 <_dtoa_r+0x464>
 800b0a0:	4b30      	ldr	r3, [pc, #192]	; (800b164 <_dtoa_r+0x624>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	4650      	mov	r0, sl
 800b0a6:	4659      	mov	r1, fp
 800b0a8:	f7f5 face 	bl	8000648 <__aeabi_dmul>
 800b0ac:	4b2d      	ldr	r3, [pc, #180]	; (800b164 <_dtoa_r+0x624>)
 800b0ae:	4682      	mov	sl, r0
 800b0b0:	468b      	mov	fp, r1
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f7f5 fac6 	bl	8000648 <__aeabi_dmul>
 800b0bc:	4680      	mov	r8, r0
 800b0be:	4689      	mov	r9, r1
 800b0c0:	e7c6      	b.n	800b050 <_dtoa_r+0x510>
 800b0c2:	4650      	mov	r0, sl
 800b0c4:	4659      	mov	r1, fp
 800b0c6:	f7f5 fabf 	bl	8000648 <__aeabi_dmul>
 800b0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0cc:	9d01      	ldr	r5, [sp, #4]
 800b0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0d0:	4682      	mov	sl, r0
 800b0d2:	468b      	mov	fp, r1
 800b0d4:	4649      	mov	r1, r9
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	f7f5 fd66 	bl	8000ba8 <__aeabi_d2iz>
 800b0dc:	4606      	mov	r6, r0
 800b0de:	f7f5 fa49 	bl	8000574 <__aeabi_i2d>
 800b0e2:	3630      	adds	r6, #48	; 0x30
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	f7f5 f8f4 	bl	80002d8 <__aeabi_dsub>
 800b0f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b0f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0f6:	429d      	cmp	r5, r3
 800b0f8:	4680      	mov	r8, r0
 800b0fa:	4689      	mov	r9, r1
 800b0fc:	f04f 0200 	mov.w	r2, #0
 800b100:	d124      	bne.n	800b14c <_dtoa_r+0x60c>
 800b102:	4b1b      	ldr	r3, [pc, #108]	; (800b170 <_dtoa_r+0x630>)
 800b104:	4650      	mov	r0, sl
 800b106:	4659      	mov	r1, fp
 800b108:	f7f5 f8e8 	bl	80002dc <__adddf3>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 fd28 	bl	8000b68 <__aeabi_dcmpgt>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d173      	bne.n	800b204 <_dtoa_r+0x6c4>
 800b11c:	4652      	mov	r2, sl
 800b11e:	465b      	mov	r3, fp
 800b120:	4913      	ldr	r1, [pc, #76]	; (800b170 <_dtoa_r+0x630>)
 800b122:	2000      	movs	r0, #0
 800b124:	f7f5 f8d8 	bl	80002d8 <__aeabi_dsub>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	4640      	mov	r0, r8
 800b12e:	4649      	mov	r1, r9
 800b130:	f7f5 fcfc 	bl	8000b2c <__aeabi_dcmplt>
 800b134:	2800      	cmp	r0, #0
 800b136:	f43f af35 	beq.w	800afa4 <_dtoa_r+0x464>
 800b13a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b13c:	1e6b      	subs	r3, r5, #1
 800b13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b140:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b144:	2b30      	cmp	r3, #48	; 0x30
 800b146:	d0f8      	beq.n	800b13a <_dtoa_r+0x5fa>
 800b148:	9700      	str	r7, [sp, #0]
 800b14a:	e049      	b.n	800b1e0 <_dtoa_r+0x6a0>
 800b14c:	4b05      	ldr	r3, [pc, #20]	; (800b164 <_dtoa_r+0x624>)
 800b14e:	f7f5 fa7b 	bl	8000648 <__aeabi_dmul>
 800b152:	4680      	mov	r8, r0
 800b154:	4689      	mov	r9, r1
 800b156:	e7bd      	b.n	800b0d4 <_dtoa_r+0x594>
 800b158:	0800cd38 	.word	0x0800cd38
 800b15c:	0800cd10 	.word	0x0800cd10
 800b160:	3ff00000 	.word	0x3ff00000
 800b164:	40240000 	.word	0x40240000
 800b168:	401c0000 	.word	0x401c0000
 800b16c:	40140000 	.word	0x40140000
 800b170:	3fe00000 	.word	0x3fe00000
 800b174:	9d01      	ldr	r5, [sp, #4]
 800b176:	4656      	mov	r6, sl
 800b178:	465f      	mov	r7, fp
 800b17a:	4642      	mov	r2, r8
 800b17c:	464b      	mov	r3, r9
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 fb8b 	bl	800089c <__aeabi_ddiv>
 800b186:	f7f5 fd0f 	bl	8000ba8 <__aeabi_d2iz>
 800b18a:	4682      	mov	sl, r0
 800b18c:	f7f5 f9f2 	bl	8000574 <__aeabi_i2d>
 800b190:	4642      	mov	r2, r8
 800b192:	464b      	mov	r3, r9
 800b194:	f7f5 fa58 	bl	8000648 <__aeabi_dmul>
 800b198:	4602      	mov	r2, r0
 800b19a:	460b      	mov	r3, r1
 800b19c:	4630      	mov	r0, r6
 800b19e:	4639      	mov	r1, r7
 800b1a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b1a4:	f7f5 f898 	bl	80002d8 <__aeabi_dsub>
 800b1a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b1ac:	9e01      	ldr	r6, [sp, #4]
 800b1ae:	9f03      	ldr	r7, [sp, #12]
 800b1b0:	1bae      	subs	r6, r5, r6
 800b1b2:	42b7      	cmp	r7, r6
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	d135      	bne.n	800b226 <_dtoa_r+0x6e6>
 800b1ba:	f7f5 f88f 	bl	80002dc <__adddf3>
 800b1be:	4642      	mov	r2, r8
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	f7f5 fccf 	bl	8000b68 <__aeabi_dcmpgt>
 800b1ca:	b9d0      	cbnz	r0, 800b202 <_dtoa_r+0x6c2>
 800b1cc:	4642      	mov	r2, r8
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	f7f5 fca0 	bl	8000b18 <__aeabi_dcmpeq>
 800b1d8:	b110      	cbz	r0, 800b1e0 <_dtoa_r+0x6a0>
 800b1da:	f01a 0f01 	tst.w	sl, #1
 800b1de:	d110      	bne.n	800b202 <_dtoa_r+0x6c2>
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	ee18 1a10 	vmov	r1, s16
 800b1e6:	f000 fd13 	bl	800bc10 <_Bfree>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	9800      	ldr	r0, [sp, #0]
 800b1ee:	702b      	strb	r3, [r5, #0]
 800b1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f2:	3001      	adds	r0, #1
 800b1f4:	6018      	str	r0, [r3, #0]
 800b1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f43f acf1 	beq.w	800abe0 <_dtoa_r+0xa0>
 800b1fe:	601d      	str	r5, [r3, #0]
 800b200:	e4ee      	b.n	800abe0 <_dtoa_r+0xa0>
 800b202:	9f00      	ldr	r7, [sp, #0]
 800b204:	462b      	mov	r3, r5
 800b206:	461d      	mov	r5, r3
 800b208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b20c:	2a39      	cmp	r2, #57	; 0x39
 800b20e:	d106      	bne.n	800b21e <_dtoa_r+0x6de>
 800b210:	9a01      	ldr	r2, [sp, #4]
 800b212:	429a      	cmp	r2, r3
 800b214:	d1f7      	bne.n	800b206 <_dtoa_r+0x6c6>
 800b216:	9901      	ldr	r1, [sp, #4]
 800b218:	2230      	movs	r2, #48	; 0x30
 800b21a:	3701      	adds	r7, #1
 800b21c:	700a      	strb	r2, [r1, #0]
 800b21e:	781a      	ldrb	r2, [r3, #0]
 800b220:	3201      	adds	r2, #1
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	e790      	b.n	800b148 <_dtoa_r+0x608>
 800b226:	4ba6      	ldr	r3, [pc, #664]	; (800b4c0 <_dtoa_r+0x980>)
 800b228:	2200      	movs	r2, #0
 800b22a:	f7f5 fa0d 	bl	8000648 <__aeabi_dmul>
 800b22e:	2200      	movs	r2, #0
 800b230:	2300      	movs	r3, #0
 800b232:	4606      	mov	r6, r0
 800b234:	460f      	mov	r7, r1
 800b236:	f7f5 fc6f 	bl	8000b18 <__aeabi_dcmpeq>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d09d      	beq.n	800b17a <_dtoa_r+0x63a>
 800b23e:	e7cf      	b.n	800b1e0 <_dtoa_r+0x6a0>
 800b240:	9a08      	ldr	r2, [sp, #32]
 800b242:	2a00      	cmp	r2, #0
 800b244:	f000 80d7 	beq.w	800b3f6 <_dtoa_r+0x8b6>
 800b248:	9a06      	ldr	r2, [sp, #24]
 800b24a:	2a01      	cmp	r2, #1
 800b24c:	f300 80ba 	bgt.w	800b3c4 <_dtoa_r+0x884>
 800b250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b252:	2a00      	cmp	r2, #0
 800b254:	f000 80b2 	beq.w	800b3bc <_dtoa_r+0x87c>
 800b258:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b25c:	9e07      	ldr	r6, [sp, #28]
 800b25e:	9d04      	ldr	r5, [sp, #16]
 800b260:	9a04      	ldr	r2, [sp, #16]
 800b262:	441a      	add	r2, r3
 800b264:	9204      	str	r2, [sp, #16]
 800b266:	9a05      	ldr	r2, [sp, #20]
 800b268:	2101      	movs	r1, #1
 800b26a:	441a      	add	r2, r3
 800b26c:	4620      	mov	r0, r4
 800b26e:	9205      	str	r2, [sp, #20]
 800b270:	f000 fd86 	bl	800bd80 <__i2b>
 800b274:	4607      	mov	r7, r0
 800b276:	2d00      	cmp	r5, #0
 800b278:	dd0c      	ble.n	800b294 <_dtoa_r+0x754>
 800b27a:	9b05      	ldr	r3, [sp, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dd09      	ble.n	800b294 <_dtoa_r+0x754>
 800b280:	42ab      	cmp	r3, r5
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	bfa8      	it	ge
 800b286:	462b      	movge	r3, r5
 800b288:	1ad2      	subs	r2, r2, r3
 800b28a:	9204      	str	r2, [sp, #16]
 800b28c:	9a05      	ldr	r2, [sp, #20]
 800b28e:	1aed      	subs	r5, r5, r3
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	9305      	str	r3, [sp, #20]
 800b294:	9b07      	ldr	r3, [sp, #28]
 800b296:	b31b      	cbz	r3, 800b2e0 <_dtoa_r+0x7a0>
 800b298:	9b08      	ldr	r3, [sp, #32]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 80af 	beq.w	800b3fe <_dtoa_r+0x8be>
 800b2a0:	2e00      	cmp	r6, #0
 800b2a2:	dd13      	ble.n	800b2cc <_dtoa_r+0x78c>
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 fe29 	bl	800bf00 <__pow5mult>
 800b2ae:	ee18 2a10 	vmov	r2, s16
 800b2b2:	4601      	mov	r1, r0
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 fd78 	bl	800bdac <__multiply>
 800b2bc:	ee18 1a10 	vmov	r1, s16
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fca4 	bl	800bc10 <_Bfree>
 800b2c8:	ee08 8a10 	vmov	s16, r8
 800b2cc:	9b07      	ldr	r3, [sp, #28]
 800b2ce:	1b9a      	subs	r2, r3, r6
 800b2d0:	d006      	beq.n	800b2e0 <_dtoa_r+0x7a0>
 800b2d2:	ee18 1a10 	vmov	r1, s16
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 fe12 	bl	800bf00 <__pow5mult>
 800b2dc:	ee08 0a10 	vmov	s16, r0
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 fd4c 	bl	800bd80 <__i2b>
 800b2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	f340 8088 	ble.w	800b402 <_dtoa_r+0x8c2>
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4601      	mov	r1, r0
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fe02 	bl	800bf00 <__pow5mult>
 800b2fc:	9b06      	ldr	r3, [sp, #24]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	4606      	mov	r6, r0
 800b302:	f340 8081 	ble.w	800b408 <_dtoa_r+0x8c8>
 800b306:	f04f 0800 	mov.w	r8, #0
 800b30a:	6933      	ldr	r3, [r6, #16]
 800b30c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b310:	6918      	ldr	r0, [r3, #16]
 800b312:	f000 fce5 	bl	800bce0 <__hi0bits>
 800b316:	f1c0 0020 	rsb	r0, r0, #32
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	4418      	add	r0, r3
 800b31e:	f010 001f 	ands.w	r0, r0, #31
 800b322:	f000 8092 	beq.w	800b44a <_dtoa_r+0x90a>
 800b326:	f1c0 0320 	rsb	r3, r0, #32
 800b32a:	2b04      	cmp	r3, #4
 800b32c:	f340 808a 	ble.w	800b444 <_dtoa_r+0x904>
 800b330:	f1c0 001c 	rsb	r0, r0, #28
 800b334:	9b04      	ldr	r3, [sp, #16]
 800b336:	4403      	add	r3, r0
 800b338:	9304      	str	r3, [sp, #16]
 800b33a:	9b05      	ldr	r3, [sp, #20]
 800b33c:	4403      	add	r3, r0
 800b33e:	4405      	add	r5, r0
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	9b04      	ldr	r3, [sp, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	dd07      	ble.n	800b358 <_dtoa_r+0x818>
 800b348:	ee18 1a10 	vmov	r1, s16
 800b34c:	461a      	mov	r2, r3
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 fe30 	bl	800bfb4 <__lshift>
 800b354:	ee08 0a10 	vmov	s16, r0
 800b358:	9b05      	ldr	r3, [sp, #20]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	dd05      	ble.n	800b36a <_dtoa_r+0x82a>
 800b35e:	4631      	mov	r1, r6
 800b360:	461a      	mov	r2, r3
 800b362:	4620      	mov	r0, r4
 800b364:	f000 fe26 	bl	800bfb4 <__lshift>
 800b368:	4606      	mov	r6, r0
 800b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d06e      	beq.n	800b44e <_dtoa_r+0x90e>
 800b370:	ee18 0a10 	vmov	r0, s16
 800b374:	4631      	mov	r1, r6
 800b376:	f000 fe8d 	bl	800c094 <__mcmp>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	da67      	bge.n	800b44e <_dtoa_r+0x90e>
 800b37e:	9b00      	ldr	r3, [sp, #0]
 800b380:	3b01      	subs	r3, #1
 800b382:	ee18 1a10 	vmov	r1, s16
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	220a      	movs	r2, #10
 800b38a:	2300      	movs	r3, #0
 800b38c:	4620      	mov	r0, r4
 800b38e:	f000 fc61 	bl	800bc54 <__multadd>
 800b392:	9b08      	ldr	r3, [sp, #32]
 800b394:	ee08 0a10 	vmov	s16, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f000 81b1 	beq.w	800b700 <_dtoa_r+0xbc0>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	220a      	movs	r2, #10
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fc55 	bl	800bc54 <__multadd>
 800b3aa:	9b02      	ldr	r3, [sp, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	f300 808e 	bgt.w	800b4d0 <_dtoa_r+0x990>
 800b3b4:	9b06      	ldr	r3, [sp, #24]
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	dc51      	bgt.n	800b45e <_dtoa_r+0x91e>
 800b3ba:	e089      	b.n	800b4d0 <_dtoa_r+0x990>
 800b3bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3c2:	e74b      	b.n	800b25c <_dtoa_r+0x71c>
 800b3c4:	9b03      	ldr	r3, [sp, #12]
 800b3c6:	1e5e      	subs	r6, r3, #1
 800b3c8:	9b07      	ldr	r3, [sp, #28]
 800b3ca:	42b3      	cmp	r3, r6
 800b3cc:	bfbf      	itttt	lt
 800b3ce:	9b07      	ldrlt	r3, [sp, #28]
 800b3d0:	9607      	strlt	r6, [sp, #28]
 800b3d2:	1af2      	sublt	r2, r6, r3
 800b3d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3d6:	bfb6      	itet	lt
 800b3d8:	189b      	addlt	r3, r3, r2
 800b3da:	1b9e      	subge	r6, r3, r6
 800b3dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	bfb8      	it	lt
 800b3e2:	2600      	movlt	r6, #0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bfb7      	itett	lt
 800b3e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b3ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b3f0:	1a9d      	sublt	r5, r3, r2
 800b3f2:	2300      	movlt	r3, #0
 800b3f4:	e734      	b.n	800b260 <_dtoa_r+0x720>
 800b3f6:	9e07      	ldr	r6, [sp, #28]
 800b3f8:	9d04      	ldr	r5, [sp, #16]
 800b3fa:	9f08      	ldr	r7, [sp, #32]
 800b3fc:	e73b      	b.n	800b276 <_dtoa_r+0x736>
 800b3fe:	9a07      	ldr	r2, [sp, #28]
 800b400:	e767      	b.n	800b2d2 <_dtoa_r+0x792>
 800b402:	9b06      	ldr	r3, [sp, #24]
 800b404:	2b01      	cmp	r3, #1
 800b406:	dc18      	bgt.n	800b43a <_dtoa_r+0x8fa>
 800b408:	f1ba 0f00 	cmp.w	sl, #0
 800b40c:	d115      	bne.n	800b43a <_dtoa_r+0x8fa>
 800b40e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b412:	b993      	cbnz	r3, 800b43a <_dtoa_r+0x8fa>
 800b414:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b418:	0d1b      	lsrs	r3, r3, #20
 800b41a:	051b      	lsls	r3, r3, #20
 800b41c:	b183      	cbz	r3, 800b440 <_dtoa_r+0x900>
 800b41e:	9b04      	ldr	r3, [sp, #16]
 800b420:	3301      	adds	r3, #1
 800b422:	9304      	str	r3, [sp, #16]
 800b424:	9b05      	ldr	r3, [sp, #20]
 800b426:	3301      	adds	r3, #1
 800b428:	9305      	str	r3, [sp, #20]
 800b42a:	f04f 0801 	mov.w	r8, #1
 800b42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b430:	2b00      	cmp	r3, #0
 800b432:	f47f af6a 	bne.w	800b30a <_dtoa_r+0x7ca>
 800b436:	2001      	movs	r0, #1
 800b438:	e76f      	b.n	800b31a <_dtoa_r+0x7da>
 800b43a:	f04f 0800 	mov.w	r8, #0
 800b43e:	e7f6      	b.n	800b42e <_dtoa_r+0x8ee>
 800b440:	4698      	mov	r8, r3
 800b442:	e7f4      	b.n	800b42e <_dtoa_r+0x8ee>
 800b444:	f43f af7d 	beq.w	800b342 <_dtoa_r+0x802>
 800b448:	4618      	mov	r0, r3
 800b44a:	301c      	adds	r0, #28
 800b44c:	e772      	b.n	800b334 <_dtoa_r+0x7f4>
 800b44e:	9b03      	ldr	r3, [sp, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	dc37      	bgt.n	800b4c4 <_dtoa_r+0x984>
 800b454:	9b06      	ldr	r3, [sp, #24]
 800b456:	2b02      	cmp	r3, #2
 800b458:	dd34      	ble.n	800b4c4 <_dtoa_r+0x984>
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	9302      	str	r3, [sp, #8]
 800b45e:	9b02      	ldr	r3, [sp, #8]
 800b460:	b96b      	cbnz	r3, 800b47e <_dtoa_r+0x93e>
 800b462:	4631      	mov	r1, r6
 800b464:	2205      	movs	r2, #5
 800b466:	4620      	mov	r0, r4
 800b468:	f000 fbf4 	bl	800bc54 <__multadd>
 800b46c:	4601      	mov	r1, r0
 800b46e:	4606      	mov	r6, r0
 800b470:	ee18 0a10 	vmov	r0, s16
 800b474:	f000 fe0e 	bl	800c094 <__mcmp>
 800b478:	2800      	cmp	r0, #0
 800b47a:	f73f adbb 	bgt.w	800aff4 <_dtoa_r+0x4b4>
 800b47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b480:	9d01      	ldr	r5, [sp, #4]
 800b482:	43db      	mvns	r3, r3
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	f04f 0800 	mov.w	r8, #0
 800b48a:	4631      	mov	r1, r6
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fbbf 	bl	800bc10 <_Bfree>
 800b492:	2f00      	cmp	r7, #0
 800b494:	f43f aea4 	beq.w	800b1e0 <_dtoa_r+0x6a0>
 800b498:	f1b8 0f00 	cmp.w	r8, #0
 800b49c:	d005      	beq.n	800b4aa <_dtoa_r+0x96a>
 800b49e:	45b8      	cmp	r8, r7
 800b4a0:	d003      	beq.n	800b4aa <_dtoa_r+0x96a>
 800b4a2:	4641      	mov	r1, r8
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 fbb3 	bl	800bc10 <_Bfree>
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fbaf 	bl	800bc10 <_Bfree>
 800b4b2:	e695      	b.n	800b1e0 <_dtoa_r+0x6a0>
 800b4b4:	2600      	movs	r6, #0
 800b4b6:	4637      	mov	r7, r6
 800b4b8:	e7e1      	b.n	800b47e <_dtoa_r+0x93e>
 800b4ba:	9700      	str	r7, [sp, #0]
 800b4bc:	4637      	mov	r7, r6
 800b4be:	e599      	b.n	800aff4 <_dtoa_r+0x4b4>
 800b4c0:	40240000 	.word	0x40240000
 800b4c4:	9b08      	ldr	r3, [sp, #32]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f000 80ca 	beq.w	800b660 <_dtoa_r+0xb20>
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	9302      	str	r3, [sp, #8]
 800b4d0:	2d00      	cmp	r5, #0
 800b4d2:	dd05      	ble.n	800b4e0 <_dtoa_r+0x9a0>
 800b4d4:	4639      	mov	r1, r7
 800b4d6:	462a      	mov	r2, r5
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f000 fd6b 	bl	800bfb4 <__lshift>
 800b4de:	4607      	mov	r7, r0
 800b4e0:	f1b8 0f00 	cmp.w	r8, #0
 800b4e4:	d05b      	beq.n	800b59e <_dtoa_r+0xa5e>
 800b4e6:	6879      	ldr	r1, [r7, #4]
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f000 fb51 	bl	800bb90 <_Balloc>
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	b928      	cbnz	r0, 800b4fe <_dtoa_r+0x9be>
 800b4f2:	4b87      	ldr	r3, [pc, #540]	; (800b710 <_dtoa_r+0xbd0>)
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b4fa:	f7ff bb3b 	b.w	800ab74 <_dtoa_r+0x34>
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	3202      	adds	r2, #2
 800b502:	0092      	lsls	r2, r2, #2
 800b504:	f107 010c 	add.w	r1, r7, #12
 800b508:	300c      	adds	r0, #12
 800b50a:	f000 fb33 	bl	800bb74 <memcpy>
 800b50e:	2201      	movs	r2, #1
 800b510:	4629      	mov	r1, r5
 800b512:	4620      	mov	r0, r4
 800b514:	f000 fd4e 	bl	800bfb4 <__lshift>
 800b518:	9b01      	ldr	r3, [sp, #4]
 800b51a:	f103 0901 	add.w	r9, r3, #1
 800b51e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b522:	4413      	add	r3, r2
 800b524:	9305      	str	r3, [sp, #20]
 800b526:	f00a 0301 	and.w	r3, sl, #1
 800b52a:	46b8      	mov	r8, r7
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	4607      	mov	r7, r0
 800b530:	4631      	mov	r1, r6
 800b532:	ee18 0a10 	vmov	r0, s16
 800b536:	f7ff fa75 	bl	800aa24 <quorem>
 800b53a:	4641      	mov	r1, r8
 800b53c:	9002      	str	r0, [sp, #8]
 800b53e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b542:	ee18 0a10 	vmov	r0, s16
 800b546:	f000 fda5 	bl	800c094 <__mcmp>
 800b54a:	463a      	mov	r2, r7
 800b54c:	9003      	str	r0, [sp, #12]
 800b54e:	4631      	mov	r1, r6
 800b550:	4620      	mov	r0, r4
 800b552:	f000 fdbb 	bl	800c0cc <__mdiff>
 800b556:	68c2      	ldr	r2, [r0, #12]
 800b558:	f109 3bff 	add.w	fp, r9, #4294967295
 800b55c:	4605      	mov	r5, r0
 800b55e:	bb02      	cbnz	r2, 800b5a2 <_dtoa_r+0xa62>
 800b560:	4601      	mov	r1, r0
 800b562:	ee18 0a10 	vmov	r0, s16
 800b566:	f000 fd95 	bl	800c094 <__mcmp>
 800b56a:	4602      	mov	r2, r0
 800b56c:	4629      	mov	r1, r5
 800b56e:	4620      	mov	r0, r4
 800b570:	9207      	str	r2, [sp, #28]
 800b572:	f000 fb4d 	bl	800bc10 <_Bfree>
 800b576:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b57a:	ea43 0102 	orr.w	r1, r3, r2
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	430b      	orrs	r3, r1
 800b582:	464d      	mov	r5, r9
 800b584:	d10f      	bne.n	800b5a6 <_dtoa_r+0xa66>
 800b586:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b58a:	d02a      	beq.n	800b5e2 <_dtoa_r+0xaa2>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dd02      	ble.n	800b598 <_dtoa_r+0xa58>
 800b592:	9b02      	ldr	r3, [sp, #8]
 800b594:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b598:	f88b a000 	strb.w	sl, [fp]
 800b59c:	e775      	b.n	800b48a <_dtoa_r+0x94a>
 800b59e:	4638      	mov	r0, r7
 800b5a0:	e7ba      	b.n	800b518 <_dtoa_r+0x9d8>
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	e7e2      	b.n	800b56c <_dtoa_r+0xa2c>
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	db04      	blt.n	800b5b6 <_dtoa_r+0xa76>
 800b5ac:	9906      	ldr	r1, [sp, #24]
 800b5ae:	430b      	orrs	r3, r1
 800b5b0:	9904      	ldr	r1, [sp, #16]
 800b5b2:	430b      	orrs	r3, r1
 800b5b4:	d122      	bne.n	800b5fc <_dtoa_r+0xabc>
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	ddee      	ble.n	800b598 <_dtoa_r+0xa58>
 800b5ba:	ee18 1a10 	vmov	r1, s16
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f000 fcf7 	bl	800bfb4 <__lshift>
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	ee08 0a10 	vmov	s16, r0
 800b5cc:	f000 fd62 	bl	800c094 <__mcmp>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	dc03      	bgt.n	800b5dc <_dtoa_r+0xa9c>
 800b5d4:	d1e0      	bne.n	800b598 <_dtoa_r+0xa58>
 800b5d6:	f01a 0f01 	tst.w	sl, #1
 800b5da:	d0dd      	beq.n	800b598 <_dtoa_r+0xa58>
 800b5dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5e0:	d1d7      	bne.n	800b592 <_dtoa_r+0xa52>
 800b5e2:	2339      	movs	r3, #57	; 0x39
 800b5e4:	f88b 3000 	strb.w	r3, [fp]
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	461d      	mov	r5, r3
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5f2:	2a39      	cmp	r2, #57	; 0x39
 800b5f4:	d071      	beq.n	800b6da <_dtoa_r+0xb9a>
 800b5f6:	3201      	adds	r2, #1
 800b5f8:	701a      	strb	r2, [r3, #0]
 800b5fa:	e746      	b.n	800b48a <_dtoa_r+0x94a>
 800b5fc:	2a00      	cmp	r2, #0
 800b5fe:	dd07      	ble.n	800b610 <_dtoa_r+0xad0>
 800b600:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b604:	d0ed      	beq.n	800b5e2 <_dtoa_r+0xaa2>
 800b606:	f10a 0301 	add.w	r3, sl, #1
 800b60a:	f88b 3000 	strb.w	r3, [fp]
 800b60e:	e73c      	b.n	800b48a <_dtoa_r+0x94a>
 800b610:	9b05      	ldr	r3, [sp, #20]
 800b612:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b616:	4599      	cmp	r9, r3
 800b618:	d047      	beq.n	800b6aa <_dtoa_r+0xb6a>
 800b61a:	ee18 1a10 	vmov	r1, s16
 800b61e:	2300      	movs	r3, #0
 800b620:	220a      	movs	r2, #10
 800b622:	4620      	mov	r0, r4
 800b624:	f000 fb16 	bl	800bc54 <__multadd>
 800b628:	45b8      	cmp	r8, r7
 800b62a:	ee08 0a10 	vmov	s16, r0
 800b62e:	f04f 0300 	mov.w	r3, #0
 800b632:	f04f 020a 	mov.w	r2, #10
 800b636:	4641      	mov	r1, r8
 800b638:	4620      	mov	r0, r4
 800b63a:	d106      	bne.n	800b64a <_dtoa_r+0xb0a>
 800b63c:	f000 fb0a 	bl	800bc54 <__multadd>
 800b640:	4680      	mov	r8, r0
 800b642:	4607      	mov	r7, r0
 800b644:	f109 0901 	add.w	r9, r9, #1
 800b648:	e772      	b.n	800b530 <_dtoa_r+0x9f0>
 800b64a:	f000 fb03 	bl	800bc54 <__multadd>
 800b64e:	4639      	mov	r1, r7
 800b650:	4680      	mov	r8, r0
 800b652:	2300      	movs	r3, #0
 800b654:	220a      	movs	r2, #10
 800b656:	4620      	mov	r0, r4
 800b658:	f000 fafc 	bl	800bc54 <__multadd>
 800b65c:	4607      	mov	r7, r0
 800b65e:	e7f1      	b.n	800b644 <_dtoa_r+0xb04>
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	9302      	str	r3, [sp, #8]
 800b664:	9d01      	ldr	r5, [sp, #4]
 800b666:	ee18 0a10 	vmov	r0, s16
 800b66a:	4631      	mov	r1, r6
 800b66c:	f7ff f9da 	bl	800aa24 <quorem>
 800b670:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	f805 ab01 	strb.w	sl, [r5], #1
 800b67a:	1aea      	subs	r2, r5, r3
 800b67c:	9b02      	ldr	r3, [sp, #8]
 800b67e:	4293      	cmp	r3, r2
 800b680:	dd09      	ble.n	800b696 <_dtoa_r+0xb56>
 800b682:	ee18 1a10 	vmov	r1, s16
 800b686:	2300      	movs	r3, #0
 800b688:	220a      	movs	r2, #10
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fae2 	bl	800bc54 <__multadd>
 800b690:	ee08 0a10 	vmov	s16, r0
 800b694:	e7e7      	b.n	800b666 <_dtoa_r+0xb26>
 800b696:	9b02      	ldr	r3, [sp, #8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	bfc8      	it	gt
 800b69c:	461d      	movgt	r5, r3
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	bfd8      	it	le
 800b6a2:	2501      	movle	r5, #1
 800b6a4:	441d      	add	r5, r3
 800b6a6:	f04f 0800 	mov.w	r8, #0
 800b6aa:	ee18 1a10 	vmov	r1, s16
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f000 fc7f 	bl	800bfb4 <__lshift>
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	ee08 0a10 	vmov	s16, r0
 800b6bc:	f000 fcea 	bl	800c094 <__mcmp>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	dc91      	bgt.n	800b5e8 <_dtoa_r+0xaa8>
 800b6c4:	d102      	bne.n	800b6cc <_dtoa_r+0xb8c>
 800b6c6:	f01a 0f01 	tst.w	sl, #1
 800b6ca:	d18d      	bne.n	800b5e8 <_dtoa_r+0xaa8>
 800b6cc:	462b      	mov	r3, r5
 800b6ce:	461d      	mov	r5, r3
 800b6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6d4:	2a30      	cmp	r2, #48	; 0x30
 800b6d6:	d0fa      	beq.n	800b6ce <_dtoa_r+0xb8e>
 800b6d8:	e6d7      	b.n	800b48a <_dtoa_r+0x94a>
 800b6da:	9a01      	ldr	r2, [sp, #4]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d184      	bne.n	800b5ea <_dtoa_r+0xaaa>
 800b6e0:	9b00      	ldr	r3, [sp, #0]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	2331      	movs	r3, #49	; 0x31
 800b6e8:	7013      	strb	r3, [r2, #0]
 800b6ea:	e6ce      	b.n	800b48a <_dtoa_r+0x94a>
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <_dtoa_r+0xbd4>)
 800b6ee:	f7ff ba95 	b.w	800ac1c <_dtoa_r+0xdc>
 800b6f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f47f aa6e 	bne.w	800abd6 <_dtoa_r+0x96>
 800b6fa:	4b07      	ldr	r3, [pc, #28]	; (800b718 <_dtoa_r+0xbd8>)
 800b6fc:	f7ff ba8e 	b.w	800ac1c <_dtoa_r+0xdc>
 800b700:	9b02      	ldr	r3, [sp, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	dcae      	bgt.n	800b664 <_dtoa_r+0xb24>
 800b706:	9b06      	ldr	r3, [sp, #24]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	f73f aea8 	bgt.w	800b45e <_dtoa_r+0x91e>
 800b70e:	e7a9      	b.n	800b664 <_dtoa_r+0xb24>
 800b710:	0800cc43 	.word	0x0800cc43
 800b714:	0800cba0 	.word	0x0800cba0
 800b718:	0800cbc4 	.word	0x0800cbc4

0800b71c <__sflush_r>:
 800b71c:	898a      	ldrh	r2, [r1, #12]
 800b71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b722:	4605      	mov	r5, r0
 800b724:	0710      	lsls	r0, r2, #28
 800b726:	460c      	mov	r4, r1
 800b728:	d458      	bmi.n	800b7dc <__sflush_r+0xc0>
 800b72a:	684b      	ldr	r3, [r1, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	dc05      	bgt.n	800b73c <__sflush_r+0x20>
 800b730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	dc02      	bgt.n	800b73c <__sflush_r+0x20>
 800b736:	2000      	movs	r0, #0
 800b738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73e:	2e00      	cmp	r6, #0
 800b740:	d0f9      	beq.n	800b736 <__sflush_r+0x1a>
 800b742:	2300      	movs	r3, #0
 800b744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b748:	682f      	ldr	r7, [r5, #0]
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	d032      	beq.n	800b7b4 <__sflush_r+0x98>
 800b74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	075a      	lsls	r2, r3, #29
 800b754:	d505      	bpl.n	800b762 <__sflush_r+0x46>
 800b756:	6863      	ldr	r3, [r4, #4]
 800b758:	1ac0      	subs	r0, r0, r3
 800b75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b75c:	b10b      	cbz	r3, 800b762 <__sflush_r+0x46>
 800b75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b760:	1ac0      	subs	r0, r0, r3
 800b762:	2300      	movs	r3, #0
 800b764:	4602      	mov	r2, r0
 800b766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b768:	6a21      	ldr	r1, [r4, #32]
 800b76a:	4628      	mov	r0, r5
 800b76c:	47b0      	blx	r6
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	d106      	bne.n	800b782 <__sflush_r+0x66>
 800b774:	6829      	ldr	r1, [r5, #0]
 800b776:	291d      	cmp	r1, #29
 800b778:	d82c      	bhi.n	800b7d4 <__sflush_r+0xb8>
 800b77a:	4a2a      	ldr	r2, [pc, #168]	; (800b824 <__sflush_r+0x108>)
 800b77c:	40ca      	lsrs	r2, r1
 800b77e:	07d6      	lsls	r6, r2, #31
 800b780:	d528      	bpl.n	800b7d4 <__sflush_r+0xb8>
 800b782:	2200      	movs	r2, #0
 800b784:	6062      	str	r2, [r4, #4]
 800b786:	04d9      	lsls	r1, r3, #19
 800b788:	6922      	ldr	r2, [r4, #16]
 800b78a:	6022      	str	r2, [r4, #0]
 800b78c:	d504      	bpl.n	800b798 <__sflush_r+0x7c>
 800b78e:	1c42      	adds	r2, r0, #1
 800b790:	d101      	bne.n	800b796 <__sflush_r+0x7a>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	b903      	cbnz	r3, 800b798 <__sflush_r+0x7c>
 800b796:	6560      	str	r0, [r4, #84]	; 0x54
 800b798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b79a:	602f      	str	r7, [r5, #0]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	d0ca      	beq.n	800b736 <__sflush_r+0x1a>
 800b7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7a4:	4299      	cmp	r1, r3
 800b7a6:	d002      	beq.n	800b7ae <__sflush_r+0x92>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f000 fd8b 	bl	800c2c4 <_free_r>
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b7b2:	e7c1      	b.n	800b738 <__sflush_r+0x1c>
 800b7b4:	6a21      	ldr	r1, [r4, #32]
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b0      	blx	r6
 800b7bc:	1c41      	adds	r1, r0, #1
 800b7be:	d1c7      	bne.n	800b750 <__sflush_r+0x34>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0c4      	beq.n	800b750 <__sflush_r+0x34>
 800b7c6:	2b1d      	cmp	r3, #29
 800b7c8:	d001      	beq.n	800b7ce <__sflush_r+0xb2>
 800b7ca:	2b16      	cmp	r3, #22
 800b7cc:	d101      	bne.n	800b7d2 <__sflush_r+0xb6>
 800b7ce:	602f      	str	r7, [r5, #0]
 800b7d0:	e7b1      	b.n	800b736 <__sflush_r+0x1a>
 800b7d2:	89a3      	ldrh	r3, [r4, #12]
 800b7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	e7ad      	b.n	800b738 <__sflush_r+0x1c>
 800b7dc:	690f      	ldr	r7, [r1, #16]
 800b7de:	2f00      	cmp	r7, #0
 800b7e0:	d0a9      	beq.n	800b736 <__sflush_r+0x1a>
 800b7e2:	0793      	lsls	r3, r2, #30
 800b7e4:	680e      	ldr	r6, [r1, #0]
 800b7e6:	bf08      	it	eq
 800b7e8:	694b      	ldreq	r3, [r1, #20]
 800b7ea:	600f      	str	r7, [r1, #0]
 800b7ec:	bf18      	it	ne
 800b7ee:	2300      	movne	r3, #0
 800b7f0:	eba6 0807 	sub.w	r8, r6, r7
 800b7f4:	608b      	str	r3, [r1, #8]
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	dd9c      	ble.n	800b736 <__sflush_r+0x1a>
 800b7fc:	6a21      	ldr	r1, [r4, #32]
 800b7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b800:	4643      	mov	r3, r8
 800b802:	463a      	mov	r2, r7
 800b804:	4628      	mov	r0, r5
 800b806:	47b0      	blx	r6
 800b808:	2800      	cmp	r0, #0
 800b80a:	dc06      	bgt.n	800b81a <__sflush_r+0xfe>
 800b80c:	89a3      	ldrh	r3, [r4, #12]
 800b80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	f04f 30ff 	mov.w	r0, #4294967295
 800b818:	e78e      	b.n	800b738 <__sflush_r+0x1c>
 800b81a:	4407      	add	r7, r0
 800b81c:	eba8 0800 	sub.w	r8, r8, r0
 800b820:	e7e9      	b.n	800b7f6 <__sflush_r+0xda>
 800b822:	bf00      	nop
 800b824:	20400001 	.word	0x20400001

0800b828 <_fflush_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	690b      	ldr	r3, [r1, #16]
 800b82c:	4605      	mov	r5, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	b913      	cbnz	r3, 800b838 <_fflush_r+0x10>
 800b832:	2500      	movs	r5, #0
 800b834:	4628      	mov	r0, r5
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	b118      	cbz	r0, 800b842 <_fflush_r+0x1a>
 800b83a:	6983      	ldr	r3, [r0, #24]
 800b83c:	b90b      	cbnz	r3, 800b842 <_fflush_r+0x1a>
 800b83e:	f000 f887 	bl	800b950 <__sinit>
 800b842:	4b14      	ldr	r3, [pc, #80]	; (800b894 <_fflush_r+0x6c>)
 800b844:	429c      	cmp	r4, r3
 800b846:	d11b      	bne.n	800b880 <_fflush_r+0x58>
 800b848:	686c      	ldr	r4, [r5, #4]
 800b84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d0ef      	beq.n	800b832 <_fflush_r+0xa>
 800b852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b854:	07d0      	lsls	r0, r2, #31
 800b856:	d404      	bmi.n	800b862 <_fflush_r+0x3a>
 800b858:	0599      	lsls	r1, r3, #22
 800b85a:	d402      	bmi.n	800b862 <_fflush_r+0x3a>
 800b85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b85e:	f000 f91a 	bl	800ba96 <__retarget_lock_acquire_recursive>
 800b862:	4628      	mov	r0, r5
 800b864:	4621      	mov	r1, r4
 800b866:	f7ff ff59 	bl	800b71c <__sflush_r>
 800b86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b86c:	07da      	lsls	r2, r3, #31
 800b86e:	4605      	mov	r5, r0
 800b870:	d4e0      	bmi.n	800b834 <_fflush_r+0xc>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	059b      	lsls	r3, r3, #22
 800b876:	d4dd      	bmi.n	800b834 <_fflush_r+0xc>
 800b878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b87a:	f000 f90d 	bl	800ba98 <__retarget_lock_release_recursive>
 800b87e:	e7d9      	b.n	800b834 <_fflush_r+0xc>
 800b880:	4b05      	ldr	r3, [pc, #20]	; (800b898 <_fflush_r+0x70>)
 800b882:	429c      	cmp	r4, r3
 800b884:	d101      	bne.n	800b88a <_fflush_r+0x62>
 800b886:	68ac      	ldr	r4, [r5, #8]
 800b888:	e7df      	b.n	800b84a <_fflush_r+0x22>
 800b88a:	4b04      	ldr	r3, [pc, #16]	; (800b89c <_fflush_r+0x74>)
 800b88c:	429c      	cmp	r4, r3
 800b88e:	bf08      	it	eq
 800b890:	68ec      	ldreq	r4, [r5, #12]
 800b892:	e7da      	b.n	800b84a <_fflush_r+0x22>
 800b894:	0800cc74 	.word	0x0800cc74
 800b898:	0800cc94 	.word	0x0800cc94
 800b89c:	0800cc54 	.word	0x0800cc54

0800b8a0 <std>:
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	b510      	push	{r4, lr}
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8ae:	6083      	str	r3, [r0, #8]
 800b8b0:	8181      	strh	r1, [r0, #12]
 800b8b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b8b4:	81c2      	strh	r2, [r0, #14]
 800b8b6:	6183      	str	r3, [r0, #24]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	2208      	movs	r2, #8
 800b8bc:	305c      	adds	r0, #92	; 0x5c
 800b8be:	f7fe fa23 	bl	8009d08 <memset>
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <std+0x38>)
 800b8c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8c6:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <std+0x3c>)
 800b8c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8ca:	4b05      	ldr	r3, [pc, #20]	; (800b8e0 <std+0x40>)
 800b8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8ce:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <std+0x44>)
 800b8d0:	6224      	str	r4, [r4, #32]
 800b8d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b8d4:	bd10      	pop	{r4, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800c759 	.word	0x0800c759
 800b8dc:	0800c77b 	.word	0x0800c77b
 800b8e0:	0800c7b3 	.word	0x0800c7b3
 800b8e4:	0800c7d7 	.word	0x0800c7d7

0800b8e8 <_cleanup_r>:
 800b8e8:	4901      	ldr	r1, [pc, #4]	; (800b8f0 <_cleanup_r+0x8>)
 800b8ea:	f000 b8af 	b.w	800ba4c <_fwalk_reent>
 800b8ee:	bf00      	nop
 800b8f0:	0800b829 	.word	0x0800b829

0800b8f4 <__sfmoreglue>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	2268      	movs	r2, #104	; 0x68
 800b8f8:	1e4d      	subs	r5, r1, #1
 800b8fa:	4355      	muls	r5, r2
 800b8fc:	460e      	mov	r6, r1
 800b8fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b902:	f000 fd4b 	bl	800c39c <_malloc_r>
 800b906:	4604      	mov	r4, r0
 800b908:	b140      	cbz	r0, 800b91c <__sfmoreglue+0x28>
 800b90a:	2100      	movs	r1, #0
 800b90c:	e9c0 1600 	strd	r1, r6, [r0]
 800b910:	300c      	adds	r0, #12
 800b912:	60a0      	str	r0, [r4, #8]
 800b914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b918:	f7fe f9f6 	bl	8009d08 <memset>
 800b91c:	4620      	mov	r0, r4
 800b91e:	bd70      	pop	{r4, r5, r6, pc}

0800b920 <__sfp_lock_acquire>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__sfp_lock_acquire+0x8>)
 800b922:	f000 b8b8 	b.w	800ba96 <__retarget_lock_acquire_recursive>
 800b926:	bf00      	nop
 800b928:	20000af1 	.word	0x20000af1

0800b92c <__sfp_lock_release>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__sfp_lock_release+0x8>)
 800b92e:	f000 b8b3 	b.w	800ba98 <__retarget_lock_release_recursive>
 800b932:	bf00      	nop
 800b934:	20000af1 	.word	0x20000af1

0800b938 <__sinit_lock_acquire>:
 800b938:	4801      	ldr	r0, [pc, #4]	; (800b940 <__sinit_lock_acquire+0x8>)
 800b93a:	f000 b8ac 	b.w	800ba96 <__retarget_lock_acquire_recursive>
 800b93e:	bf00      	nop
 800b940:	20000af2 	.word	0x20000af2

0800b944 <__sinit_lock_release>:
 800b944:	4801      	ldr	r0, [pc, #4]	; (800b94c <__sinit_lock_release+0x8>)
 800b946:	f000 b8a7 	b.w	800ba98 <__retarget_lock_release_recursive>
 800b94a:	bf00      	nop
 800b94c:	20000af2 	.word	0x20000af2

0800b950 <__sinit>:
 800b950:	b510      	push	{r4, lr}
 800b952:	4604      	mov	r4, r0
 800b954:	f7ff fff0 	bl	800b938 <__sinit_lock_acquire>
 800b958:	69a3      	ldr	r3, [r4, #24]
 800b95a:	b11b      	cbz	r3, 800b964 <__sinit+0x14>
 800b95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b960:	f7ff bff0 	b.w	800b944 <__sinit_lock_release>
 800b964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b968:	6523      	str	r3, [r4, #80]	; 0x50
 800b96a:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <__sinit+0x68>)
 800b96c:	4a13      	ldr	r2, [pc, #76]	; (800b9bc <__sinit+0x6c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	62a2      	str	r2, [r4, #40]	; 0x28
 800b972:	42a3      	cmp	r3, r4
 800b974:	bf04      	itt	eq
 800b976:	2301      	moveq	r3, #1
 800b978:	61a3      	streq	r3, [r4, #24]
 800b97a:	4620      	mov	r0, r4
 800b97c:	f000 f820 	bl	800b9c0 <__sfp>
 800b980:	6060      	str	r0, [r4, #4]
 800b982:	4620      	mov	r0, r4
 800b984:	f000 f81c 	bl	800b9c0 <__sfp>
 800b988:	60a0      	str	r0, [r4, #8]
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f818 	bl	800b9c0 <__sfp>
 800b990:	2200      	movs	r2, #0
 800b992:	60e0      	str	r0, [r4, #12]
 800b994:	2104      	movs	r1, #4
 800b996:	6860      	ldr	r0, [r4, #4]
 800b998:	f7ff ff82 	bl	800b8a0 <std>
 800b99c:	68a0      	ldr	r0, [r4, #8]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	2109      	movs	r1, #9
 800b9a2:	f7ff ff7d 	bl	800b8a0 <std>
 800b9a6:	68e0      	ldr	r0, [r4, #12]
 800b9a8:	2202      	movs	r2, #2
 800b9aa:	2112      	movs	r1, #18
 800b9ac:	f7ff ff78 	bl	800b8a0 <std>
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	61a3      	str	r3, [r4, #24]
 800b9b4:	e7d2      	b.n	800b95c <__sinit+0xc>
 800b9b6:	bf00      	nop
 800b9b8:	0800cb8c 	.word	0x0800cb8c
 800b9bc:	0800b8e9 	.word	0x0800b8e9

0800b9c0 <__sfp>:
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c2:	4607      	mov	r7, r0
 800b9c4:	f7ff ffac 	bl	800b920 <__sfp_lock_acquire>
 800b9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ba44 <__sfp+0x84>)
 800b9ca:	681e      	ldr	r6, [r3, #0]
 800b9cc:	69b3      	ldr	r3, [r6, #24]
 800b9ce:	b913      	cbnz	r3, 800b9d6 <__sfp+0x16>
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff ffbd 	bl	800b950 <__sinit>
 800b9d6:	3648      	adds	r6, #72	; 0x48
 800b9d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	d503      	bpl.n	800b9e8 <__sfp+0x28>
 800b9e0:	6833      	ldr	r3, [r6, #0]
 800b9e2:	b30b      	cbz	r3, 800ba28 <__sfp+0x68>
 800b9e4:	6836      	ldr	r6, [r6, #0]
 800b9e6:	e7f7      	b.n	800b9d8 <__sfp+0x18>
 800b9e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9ec:	b9d5      	cbnz	r5, 800ba24 <__sfp+0x64>
 800b9ee:	4b16      	ldr	r3, [pc, #88]	; (800ba48 <__sfp+0x88>)
 800b9f0:	60e3      	str	r3, [r4, #12]
 800b9f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b9f8:	f000 f84c 	bl	800ba94 <__retarget_lock_init_recursive>
 800b9fc:	f7ff ff96 	bl	800b92c <__sfp_lock_release>
 800ba00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba08:	6025      	str	r5, [r4, #0]
 800ba0a:	61a5      	str	r5, [r4, #24]
 800ba0c:	2208      	movs	r2, #8
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba14:	f7fe f978 	bl	8009d08 <memset>
 800ba18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba20:	4620      	mov	r0, r4
 800ba22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba24:	3468      	adds	r4, #104	; 0x68
 800ba26:	e7d9      	b.n	800b9dc <__sfp+0x1c>
 800ba28:	2104      	movs	r1, #4
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f7ff ff62 	bl	800b8f4 <__sfmoreglue>
 800ba30:	4604      	mov	r4, r0
 800ba32:	6030      	str	r0, [r6, #0]
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1d5      	bne.n	800b9e4 <__sfp+0x24>
 800ba38:	f7ff ff78 	bl	800b92c <__sfp_lock_release>
 800ba3c:	230c      	movs	r3, #12
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	e7ee      	b.n	800ba20 <__sfp+0x60>
 800ba42:	bf00      	nop
 800ba44:	0800cb8c 	.word	0x0800cb8c
 800ba48:	ffff0001 	.word	0xffff0001

0800ba4c <_fwalk_reent>:
 800ba4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba50:	4606      	mov	r6, r0
 800ba52:	4688      	mov	r8, r1
 800ba54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba58:	2700      	movs	r7, #0
 800ba5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba5e:	f1b9 0901 	subs.w	r9, r9, #1
 800ba62:	d505      	bpl.n	800ba70 <_fwalk_reent+0x24>
 800ba64:	6824      	ldr	r4, [r4, #0]
 800ba66:	2c00      	cmp	r4, #0
 800ba68:	d1f7      	bne.n	800ba5a <_fwalk_reent+0xe>
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba70:	89ab      	ldrh	r3, [r5, #12]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d907      	bls.n	800ba86 <_fwalk_reent+0x3a>
 800ba76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	d003      	beq.n	800ba86 <_fwalk_reent+0x3a>
 800ba7e:	4629      	mov	r1, r5
 800ba80:	4630      	mov	r0, r6
 800ba82:	47c0      	blx	r8
 800ba84:	4307      	orrs	r7, r0
 800ba86:	3568      	adds	r5, #104	; 0x68
 800ba88:	e7e9      	b.n	800ba5e <_fwalk_reent+0x12>
	...

0800ba8c <_localeconv_r>:
 800ba8c:	4800      	ldr	r0, [pc, #0]	; (800ba90 <_localeconv_r+0x4>)
 800ba8e:	4770      	bx	lr
 800ba90:	20000168 	.word	0x20000168

0800ba94 <__retarget_lock_init_recursive>:
 800ba94:	4770      	bx	lr

0800ba96 <__retarget_lock_acquire_recursive>:
 800ba96:	4770      	bx	lr

0800ba98 <__retarget_lock_release_recursive>:
 800ba98:	4770      	bx	lr

0800ba9a <__swhatbuf_r>:
 800ba9a:	b570      	push	{r4, r5, r6, lr}
 800ba9c:	460e      	mov	r6, r1
 800ba9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa2:	2900      	cmp	r1, #0
 800baa4:	b096      	sub	sp, #88	; 0x58
 800baa6:	4614      	mov	r4, r2
 800baa8:	461d      	mov	r5, r3
 800baaa:	da08      	bge.n	800babe <__swhatbuf_r+0x24>
 800baac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	602a      	str	r2, [r5, #0]
 800bab4:	061a      	lsls	r2, r3, #24
 800bab6:	d410      	bmi.n	800bada <__swhatbuf_r+0x40>
 800bab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800babc:	e00e      	b.n	800badc <__swhatbuf_r+0x42>
 800babe:	466a      	mov	r2, sp
 800bac0:	f000 fee0 	bl	800c884 <_fstat_r>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	dbf1      	blt.n	800baac <__swhatbuf_r+0x12>
 800bac8:	9a01      	ldr	r2, [sp, #4]
 800baca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bace:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bad2:	425a      	negs	r2, r3
 800bad4:	415a      	adcs	r2, r3
 800bad6:	602a      	str	r2, [r5, #0]
 800bad8:	e7ee      	b.n	800bab8 <__swhatbuf_r+0x1e>
 800bada:	2340      	movs	r3, #64	; 0x40
 800badc:	2000      	movs	r0, #0
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	b016      	add	sp, #88	; 0x58
 800bae2:	bd70      	pop	{r4, r5, r6, pc}

0800bae4 <__smakebuf_r>:
 800bae4:	898b      	ldrh	r3, [r1, #12]
 800bae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bae8:	079d      	lsls	r5, r3, #30
 800baea:	4606      	mov	r6, r0
 800baec:	460c      	mov	r4, r1
 800baee:	d507      	bpl.n	800bb00 <__smakebuf_r+0x1c>
 800baf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	6123      	str	r3, [r4, #16]
 800baf8:	2301      	movs	r3, #1
 800bafa:	6163      	str	r3, [r4, #20]
 800bafc:	b002      	add	sp, #8
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	ab01      	add	r3, sp, #4
 800bb02:	466a      	mov	r2, sp
 800bb04:	f7ff ffc9 	bl	800ba9a <__swhatbuf_r>
 800bb08:	9900      	ldr	r1, [sp, #0]
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f000 fc45 	bl	800c39c <_malloc_r>
 800bb12:	b948      	cbnz	r0, 800bb28 <__smakebuf_r+0x44>
 800bb14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb18:	059a      	lsls	r2, r3, #22
 800bb1a:	d4ef      	bmi.n	800bafc <__smakebuf_r+0x18>
 800bb1c:	f023 0303 	bic.w	r3, r3, #3
 800bb20:	f043 0302 	orr.w	r3, r3, #2
 800bb24:	81a3      	strh	r3, [r4, #12]
 800bb26:	e7e3      	b.n	800baf0 <__smakebuf_r+0xc>
 800bb28:	4b0d      	ldr	r3, [pc, #52]	; (800bb60 <__smakebuf_r+0x7c>)
 800bb2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	6020      	str	r0, [r4, #0]
 800bb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	6163      	str	r3, [r4, #20]
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	6120      	str	r0, [r4, #16]
 800bb3e:	b15b      	cbz	r3, 800bb58 <__smakebuf_r+0x74>
 800bb40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb44:	4630      	mov	r0, r6
 800bb46:	f000 feaf 	bl	800c8a8 <_isatty_r>
 800bb4a:	b128      	cbz	r0, 800bb58 <__smakebuf_r+0x74>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	f023 0303 	bic.w	r3, r3, #3
 800bb52:	f043 0301 	orr.w	r3, r3, #1
 800bb56:	81a3      	strh	r3, [r4, #12]
 800bb58:	89a0      	ldrh	r0, [r4, #12]
 800bb5a:	4305      	orrs	r5, r0
 800bb5c:	81a5      	strh	r5, [r4, #12]
 800bb5e:	e7cd      	b.n	800bafc <__smakebuf_r+0x18>
 800bb60:	0800b8e9 	.word	0x0800b8e9

0800bb64 <malloc>:
 800bb64:	4b02      	ldr	r3, [pc, #8]	; (800bb70 <malloc+0xc>)
 800bb66:	4601      	mov	r1, r0
 800bb68:	6818      	ldr	r0, [r3, #0]
 800bb6a:	f000 bc17 	b.w	800c39c <_malloc_r>
 800bb6e:	bf00      	nop
 800bb70:	20000014 	.word	0x20000014

0800bb74 <memcpy>:
 800bb74:	440a      	add	r2, r1
 800bb76:	4291      	cmp	r1, r2
 800bb78:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb7c:	d100      	bne.n	800bb80 <memcpy+0xc>
 800bb7e:	4770      	bx	lr
 800bb80:	b510      	push	{r4, lr}
 800bb82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb8a:	4291      	cmp	r1, r2
 800bb8c:	d1f9      	bne.n	800bb82 <memcpy+0xe>
 800bb8e:	bd10      	pop	{r4, pc}

0800bb90 <_Balloc>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb94:	4604      	mov	r4, r0
 800bb96:	460d      	mov	r5, r1
 800bb98:	b976      	cbnz	r6, 800bbb8 <_Balloc+0x28>
 800bb9a:	2010      	movs	r0, #16
 800bb9c:	f7ff ffe2 	bl	800bb64 <malloc>
 800bba0:	4602      	mov	r2, r0
 800bba2:	6260      	str	r0, [r4, #36]	; 0x24
 800bba4:	b920      	cbnz	r0, 800bbb0 <_Balloc+0x20>
 800bba6:	4b18      	ldr	r3, [pc, #96]	; (800bc08 <_Balloc+0x78>)
 800bba8:	4818      	ldr	r0, [pc, #96]	; (800bc0c <_Balloc+0x7c>)
 800bbaa:	2166      	movs	r1, #102	; 0x66
 800bbac:	f000 fe2a 	bl	800c804 <__assert_func>
 800bbb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbb4:	6006      	str	r6, [r0, #0]
 800bbb6:	60c6      	str	r6, [r0, #12]
 800bbb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bbba:	68f3      	ldr	r3, [r6, #12]
 800bbbc:	b183      	cbz	r3, 800bbe0 <_Balloc+0x50>
 800bbbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbc6:	b9b8      	cbnz	r0, 800bbf8 <_Balloc+0x68>
 800bbc8:	2101      	movs	r1, #1
 800bbca:	fa01 f605 	lsl.w	r6, r1, r5
 800bbce:	1d72      	adds	r2, r6, #5
 800bbd0:	0092      	lsls	r2, r2, #2
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fb60 	bl	800c298 <_calloc_r>
 800bbd8:	b160      	cbz	r0, 800bbf4 <_Balloc+0x64>
 800bbda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbde:	e00e      	b.n	800bbfe <_Balloc+0x6e>
 800bbe0:	2221      	movs	r2, #33	; 0x21
 800bbe2:	2104      	movs	r1, #4
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f000 fb57 	bl	800c298 <_calloc_r>
 800bbea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbec:	60f0      	str	r0, [r6, #12]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1e4      	bne.n	800bbbe <_Balloc+0x2e>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	6802      	ldr	r2, [r0, #0]
 800bbfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc04:	e7f7      	b.n	800bbf6 <_Balloc+0x66>
 800bc06:	bf00      	nop
 800bc08:	0800cbd1 	.word	0x0800cbd1
 800bc0c:	0800ccb4 	.word	0x0800ccb4

0800bc10 <_Bfree>:
 800bc10:	b570      	push	{r4, r5, r6, lr}
 800bc12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc14:	4605      	mov	r5, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	b976      	cbnz	r6, 800bc38 <_Bfree+0x28>
 800bc1a:	2010      	movs	r0, #16
 800bc1c:	f7ff ffa2 	bl	800bb64 <malloc>
 800bc20:	4602      	mov	r2, r0
 800bc22:	6268      	str	r0, [r5, #36]	; 0x24
 800bc24:	b920      	cbnz	r0, 800bc30 <_Bfree+0x20>
 800bc26:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <_Bfree+0x3c>)
 800bc28:	4809      	ldr	r0, [pc, #36]	; (800bc50 <_Bfree+0x40>)
 800bc2a:	218a      	movs	r1, #138	; 0x8a
 800bc2c:	f000 fdea 	bl	800c804 <__assert_func>
 800bc30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc34:	6006      	str	r6, [r0, #0]
 800bc36:	60c6      	str	r6, [r0, #12]
 800bc38:	b13c      	cbz	r4, 800bc4a <_Bfree+0x3a>
 800bc3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc3c:	6862      	ldr	r2, [r4, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc44:	6021      	str	r1, [r4, #0]
 800bc46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	0800cbd1 	.word	0x0800cbd1
 800bc50:	0800ccb4 	.word	0x0800ccb4

0800bc54 <__multadd>:
 800bc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc58:	690d      	ldr	r5, [r1, #16]
 800bc5a:	4607      	mov	r7, r0
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	461e      	mov	r6, r3
 800bc60:	f101 0c14 	add.w	ip, r1, #20
 800bc64:	2000      	movs	r0, #0
 800bc66:	f8dc 3000 	ldr.w	r3, [ip]
 800bc6a:	b299      	uxth	r1, r3
 800bc6c:	fb02 6101 	mla	r1, r2, r1, r6
 800bc70:	0c1e      	lsrs	r6, r3, #16
 800bc72:	0c0b      	lsrs	r3, r1, #16
 800bc74:	fb02 3306 	mla	r3, r2, r6, r3
 800bc78:	b289      	uxth	r1, r1
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc80:	4285      	cmp	r5, r0
 800bc82:	f84c 1b04 	str.w	r1, [ip], #4
 800bc86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc8a:	dcec      	bgt.n	800bc66 <__multadd+0x12>
 800bc8c:	b30e      	cbz	r6, 800bcd2 <__multadd+0x7e>
 800bc8e:	68a3      	ldr	r3, [r4, #8]
 800bc90:	42ab      	cmp	r3, r5
 800bc92:	dc19      	bgt.n	800bcc8 <__multadd+0x74>
 800bc94:	6861      	ldr	r1, [r4, #4]
 800bc96:	4638      	mov	r0, r7
 800bc98:	3101      	adds	r1, #1
 800bc9a:	f7ff ff79 	bl	800bb90 <_Balloc>
 800bc9e:	4680      	mov	r8, r0
 800bca0:	b928      	cbnz	r0, 800bcae <__multadd+0x5a>
 800bca2:	4602      	mov	r2, r0
 800bca4:	4b0c      	ldr	r3, [pc, #48]	; (800bcd8 <__multadd+0x84>)
 800bca6:	480d      	ldr	r0, [pc, #52]	; (800bcdc <__multadd+0x88>)
 800bca8:	21b5      	movs	r1, #181	; 0xb5
 800bcaa:	f000 fdab 	bl	800c804 <__assert_func>
 800bcae:	6922      	ldr	r2, [r4, #16]
 800bcb0:	3202      	adds	r2, #2
 800bcb2:	f104 010c 	add.w	r1, r4, #12
 800bcb6:	0092      	lsls	r2, r2, #2
 800bcb8:	300c      	adds	r0, #12
 800bcba:	f7ff ff5b 	bl	800bb74 <memcpy>
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	f7ff ffa5 	bl	800bc10 <_Bfree>
 800bcc6:	4644      	mov	r4, r8
 800bcc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bccc:	3501      	adds	r5, #1
 800bcce:	615e      	str	r6, [r3, #20]
 800bcd0:	6125      	str	r5, [r4, #16]
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd8:	0800cc43 	.word	0x0800cc43
 800bcdc:	0800ccb4 	.word	0x0800ccb4

0800bce0 <__hi0bits>:
 800bce0:	0c03      	lsrs	r3, r0, #16
 800bce2:	041b      	lsls	r3, r3, #16
 800bce4:	b9d3      	cbnz	r3, 800bd1c <__hi0bits+0x3c>
 800bce6:	0400      	lsls	r0, r0, #16
 800bce8:	2310      	movs	r3, #16
 800bcea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bcee:	bf04      	itt	eq
 800bcf0:	0200      	lsleq	r0, r0, #8
 800bcf2:	3308      	addeq	r3, #8
 800bcf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bcf8:	bf04      	itt	eq
 800bcfa:	0100      	lsleq	r0, r0, #4
 800bcfc:	3304      	addeq	r3, #4
 800bcfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd02:	bf04      	itt	eq
 800bd04:	0080      	lsleq	r0, r0, #2
 800bd06:	3302      	addeq	r3, #2
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	db05      	blt.n	800bd18 <__hi0bits+0x38>
 800bd0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd10:	f103 0301 	add.w	r3, r3, #1
 800bd14:	bf08      	it	eq
 800bd16:	2320      	moveq	r3, #32
 800bd18:	4618      	mov	r0, r3
 800bd1a:	4770      	bx	lr
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	e7e4      	b.n	800bcea <__hi0bits+0xa>

0800bd20 <__lo0bits>:
 800bd20:	6803      	ldr	r3, [r0, #0]
 800bd22:	f013 0207 	ands.w	r2, r3, #7
 800bd26:	4601      	mov	r1, r0
 800bd28:	d00b      	beq.n	800bd42 <__lo0bits+0x22>
 800bd2a:	07da      	lsls	r2, r3, #31
 800bd2c:	d423      	bmi.n	800bd76 <__lo0bits+0x56>
 800bd2e:	0798      	lsls	r0, r3, #30
 800bd30:	bf49      	itett	mi
 800bd32:	085b      	lsrmi	r3, r3, #1
 800bd34:	089b      	lsrpl	r3, r3, #2
 800bd36:	2001      	movmi	r0, #1
 800bd38:	600b      	strmi	r3, [r1, #0]
 800bd3a:	bf5c      	itt	pl
 800bd3c:	600b      	strpl	r3, [r1, #0]
 800bd3e:	2002      	movpl	r0, #2
 800bd40:	4770      	bx	lr
 800bd42:	b298      	uxth	r0, r3
 800bd44:	b9a8      	cbnz	r0, 800bd72 <__lo0bits+0x52>
 800bd46:	0c1b      	lsrs	r3, r3, #16
 800bd48:	2010      	movs	r0, #16
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	b90a      	cbnz	r2, 800bd52 <__lo0bits+0x32>
 800bd4e:	3008      	adds	r0, #8
 800bd50:	0a1b      	lsrs	r3, r3, #8
 800bd52:	071a      	lsls	r2, r3, #28
 800bd54:	bf04      	itt	eq
 800bd56:	091b      	lsreq	r3, r3, #4
 800bd58:	3004      	addeq	r0, #4
 800bd5a:	079a      	lsls	r2, r3, #30
 800bd5c:	bf04      	itt	eq
 800bd5e:	089b      	lsreq	r3, r3, #2
 800bd60:	3002      	addeq	r0, #2
 800bd62:	07da      	lsls	r2, r3, #31
 800bd64:	d403      	bmi.n	800bd6e <__lo0bits+0x4e>
 800bd66:	085b      	lsrs	r3, r3, #1
 800bd68:	f100 0001 	add.w	r0, r0, #1
 800bd6c:	d005      	beq.n	800bd7a <__lo0bits+0x5a>
 800bd6e:	600b      	str	r3, [r1, #0]
 800bd70:	4770      	bx	lr
 800bd72:	4610      	mov	r0, r2
 800bd74:	e7e9      	b.n	800bd4a <__lo0bits+0x2a>
 800bd76:	2000      	movs	r0, #0
 800bd78:	4770      	bx	lr
 800bd7a:	2020      	movs	r0, #32
 800bd7c:	4770      	bx	lr
	...

0800bd80 <__i2b>:
 800bd80:	b510      	push	{r4, lr}
 800bd82:	460c      	mov	r4, r1
 800bd84:	2101      	movs	r1, #1
 800bd86:	f7ff ff03 	bl	800bb90 <_Balloc>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	b928      	cbnz	r0, 800bd9a <__i2b+0x1a>
 800bd8e:	4b05      	ldr	r3, [pc, #20]	; (800bda4 <__i2b+0x24>)
 800bd90:	4805      	ldr	r0, [pc, #20]	; (800bda8 <__i2b+0x28>)
 800bd92:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd96:	f000 fd35 	bl	800c804 <__assert_func>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	6144      	str	r4, [r0, #20]
 800bd9e:	6103      	str	r3, [r0, #16]
 800bda0:	bd10      	pop	{r4, pc}
 800bda2:	bf00      	nop
 800bda4:	0800cc43 	.word	0x0800cc43
 800bda8:	0800ccb4 	.word	0x0800ccb4

0800bdac <__multiply>:
 800bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb0:	4691      	mov	r9, r2
 800bdb2:	690a      	ldr	r2, [r1, #16]
 800bdb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	bfb8      	it	lt
 800bdbc:	460b      	movlt	r3, r1
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	bfbc      	itt	lt
 800bdc2:	464c      	movlt	r4, r9
 800bdc4:	4699      	movlt	r9, r3
 800bdc6:	6927      	ldr	r7, [r4, #16]
 800bdc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bdcc:	68a3      	ldr	r3, [r4, #8]
 800bdce:	6861      	ldr	r1, [r4, #4]
 800bdd0:	eb07 060a 	add.w	r6, r7, sl
 800bdd4:	42b3      	cmp	r3, r6
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	bfb8      	it	lt
 800bdda:	3101      	addlt	r1, #1
 800bddc:	f7ff fed8 	bl	800bb90 <_Balloc>
 800bde0:	b930      	cbnz	r0, 800bdf0 <__multiply+0x44>
 800bde2:	4602      	mov	r2, r0
 800bde4:	4b44      	ldr	r3, [pc, #272]	; (800bef8 <__multiply+0x14c>)
 800bde6:	4845      	ldr	r0, [pc, #276]	; (800befc <__multiply+0x150>)
 800bde8:	f240 115d 	movw	r1, #349	; 0x15d
 800bdec:	f000 fd0a 	bl	800c804 <__assert_func>
 800bdf0:	f100 0514 	add.w	r5, r0, #20
 800bdf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bdf8:	462b      	mov	r3, r5
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	4543      	cmp	r3, r8
 800bdfe:	d321      	bcc.n	800be44 <__multiply+0x98>
 800be00:	f104 0314 	add.w	r3, r4, #20
 800be04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be08:	f109 0314 	add.w	r3, r9, #20
 800be0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be10:	9202      	str	r2, [sp, #8]
 800be12:	1b3a      	subs	r2, r7, r4
 800be14:	3a15      	subs	r2, #21
 800be16:	f022 0203 	bic.w	r2, r2, #3
 800be1a:	3204      	adds	r2, #4
 800be1c:	f104 0115 	add.w	r1, r4, #21
 800be20:	428f      	cmp	r7, r1
 800be22:	bf38      	it	cc
 800be24:	2204      	movcc	r2, #4
 800be26:	9201      	str	r2, [sp, #4]
 800be28:	9a02      	ldr	r2, [sp, #8]
 800be2a:	9303      	str	r3, [sp, #12]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d80c      	bhi.n	800be4a <__multiply+0x9e>
 800be30:	2e00      	cmp	r6, #0
 800be32:	dd03      	ble.n	800be3c <__multiply+0x90>
 800be34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d05a      	beq.n	800bef2 <__multiply+0x146>
 800be3c:	6106      	str	r6, [r0, #16]
 800be3e:	b005      	add	sp, #20
 800be40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be44:	f843 2b04 	str.w	r2, [r3], #4
 800be48:	e7d8      	b.n	800bdfc <__multiply+0x50>
 800be4a:	f8b3 a000 	ldrh.w	sl, [r3]
 800be4e:	f1ba 0f00 	cmp.w	sl, #0
 800be52:	d024      	beq.n	800be9e <__multiply+0xf2>
 800be54:	f104 0e14 	add.w	lr, r4, #20
 800be58:	46a9      	mov	r9, r5
 800be5a:	f04f 0c00 	mov.w	ip, #0
 800be5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be62:	f8d9 1000 	ldr.w	r1, [r9]
 800be66:	fa1f fb82 	uxth.w	fp, r2
 800be6a:	b289      	uxth	r1, r1
 800be6c:	fb0a 110b 	mla	r1, sl, fp, r1
 800be70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be74:	f8d9 2000 	ldr.w	r2, [r9]
 800be78:	4461      	add	r1, ip
 800be7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be7e:	fb0a c20b 	mla	r2, sl, fp, ip
 800be82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be86:	b289      	uxth	r1, r1
 800be88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be8c:	4577      	cmp	r7, lr
 800be8e:	f849 1b04 	str.w	r1, [r9], #4
 800be92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be96:	d8e2      	bhi.n	800be5e <__multiply+0xb2>
 800be98:	9a01      	ldr	r2, [sp, #4]
 800be9a:	f845 c002 	str.w	ip, [r5, r2]
 800be9e:	9a03      	ldr	r2, [sp, #12]
 800bea0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bea4:	3304      	adds	r3, #4
 800bea6:	f1b9 0f00 	cmp.w	r9, #0
 800beaa:	d020      	beq.n	800beee <__multiply+0x142>
 800beac:	6829      	ldr	r1, [r5, #0]
 800beae:	f104 0c14 	add.w	ip, r4, #20
 800beb2:	46ae      	mov	lr, r5
 800beb4:	f04f 0a00 	mov.w	sl, #0
 800beb8:	f8bc b000 	ldrh.w	fp, [ip]
 800bebc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bec0:	fb09 220b 	mla	r2, r9, fp, r2
 800bec4:	4492      	add	sl, r2
 800bec6:	b289      	uxth	r1, r1
 800bec8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800becc:	f84e 1b04 	str.w	r1, [lr], #4
 800bed0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bed4:	f8be 1000 	ldrh.w	r1, [lr]
 800bed8:	0c12      	lsrs	r2, r2, #16
 800beda:	fb09 1102 	mla	r1, r9, r2, r1
 800bede:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bee2:	4567      	cmp	r7, ip
 800bee4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bee8:	d8e6      	bhi.n	800beb8 <__multiply+0x10c>
 800beea:	9a01      	ldr	r2, [sp, #4]
 800beec:	50a9      	str	r1, [r5, r2]
 800beee:	3504      	adds	r5, #4
 800bef0:	e79a      	b.n	800be28 <__multiply+0x7c>
 800bef2:	3e01      	subs	r6, #1
 800bef4:	e79c      	b.n	800be30 <__multiply+0x84>
 800bef6:	bf00      	nop
 800bef8:	0800cc43 	.word	0x0800cc43
 800befc:	0800ccb4 	.word	0x0800ccb4

0800bf00 <__pow5mult>:
 800bf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf04:	4615      	mov	r5, r2
 800bf06:	f012 0203 	ands.w	r2, r2, #3
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460f      	mov	r7, r1
 800bf0e:	d007      	beq.n	800bf20 <__pow5mult+0x20>
 800bf10:	4c25      	ldr	r4, [pc, #148]	; (800bfa8 <__pow5mult+0xa8>)
 800bf12:	3a01      	subs	r2, #1
 800bf14:	2300      	movs	r3, #0
 800bf16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf1a:	f7ff fe9b 	bl	800bc54 <__multadd>
 800bf1e:	4607      	mov	r7, r0
 800bf20:	10ad      	asrs	r5, r5, #2
 800bf22:	d03d      	beq.n	800bfa0 <__pow5mult+0xa0>
 800bf24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bf26:	b97c      	cbnz	r4, 800bf48 <__pow5mult+0x48>
 800bf28:	2010      	movs	r0, #16
 800bf2a:	f7ff fe1b 	bl	800bb64 <malloc>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	6270      	str	r0, [r6, #36]	; 0x24
 800bf32:	b928      	cbnz	r0, 800bf40 <__pow5mult+0x40>
 800bf34:	4b1d      	ldr	r3, [pc, #116]	; (800bfac <__pow5mult+0xac>)
 800bf36:	481e      	ldr	r0, [pc, #120]	; (800bfb0 <__pow5mult+0xb0>)
 800bf38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bf3c:	f000 fc62 	bl	800c804 <__assert_func>
 800bf40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf44:	6004      	str	r4, [r0, #0]
 800bf46:	60c4      	str	r4, [r0, #12]
 800bf48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bf4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf50:	b94c      	cbnz	r4, 800bf66 <__pow5mult+0x66>
 800bf52:	f240 2171 	movw	r1, #625	; 0x271
 800bf56:	4630      	mov	r0, r6
 800bf58:	f7ff ff12 	bl	800bd80 <__i2b>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf62:	4604      	mov	r4, r0
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	f04f 0900 	mov.w	r9, #0
 800bf6a:	07eb      	lsls	r3, r5, #31
 800bf6c:	d50a      	bpl.n	800bf84 <__pow5mult+0x84>
 800bf6e:	4639      	mov	r1, r7
 800bf70:	4622      	mov	r2, r4
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7ff ff1a 	bl	800bdac <__multiply>
 800bf78:	4639      	mov	r1, r7
 800bf7a:	4680      	mov	r8, r0
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7ff fe47 	bl	800bc10 <_Bfree>
 800bf82:	4647      	mov	r7, r8
 800bf84:	106d      	asrs	r5, r5, #1
 800bf86:	d00b      	beq.n	800bfa0 <__pow5mult+0xa0>
 800bf88:	6820      	ldr	r0, [r4, #0]
 800bf8a:	b938      	cbnz	r0, 800bf9c <__pow5mult+0x9c>
 800bf8c:	4622      	mov	r2, r4
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4630      	mov	r0, r6
 800bf92:	f7ff ff0b 	bl	800bdac <__multiply>
 800bf96:	6020      	str	r0, [r4, #0]
 800bf98:	f8c0 9000 	str.w	r9, [r0]
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	e7e4      	b.n	800bf6a <__pow5mult+0x6a>
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa6:	bf00      	nop
 800bfa8:	0800ce00 	.word	0x0800ce00
 800bfac:	0800cbd1 	.word	0x0800cbd1
 800bfb0:	0800ccb4 	.word	0x0800ccb4

0800bfb4 <__lshift>:
 800bfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb8:	460c      	mov	r4, r1
 800bfba:	6849      	ldr	r1, [r1, #4]
 800bfbc:	6923      	ldr	r3, [r4, #16]
 800bfbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	4691      	mov	r9, r2
 800bfc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfcc:	f108 0601 	add.w	r6, r8, #1
 800bfd0:	42b3      	cmp	r3, r6
 800bfd2:	db0b      	blt.n	800bfec <__lshift+0x38>
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f7ff fddb 	bl	800bb90 <_Balloc>
 800bfda:	4605      	mov	r5, r0
 800bfdc:	b948      	cbnz	r0, 800bff2 <__lshift+0x3e>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	4b2a      	ldr	r3, [pc, #168]	; (800c08c <__lshift+0xd8>)
 800bfe2:	482b      	ldr	r0, [pc, #172]	; (800c090 <__lshift+0xdc>)
 800bfe4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bfe8:	f000 fc0c 	bl	800c804 <__assert_func>
 800bfec:	3101      	adds	r1, #1
 800bfee:	005b      	lsls	r3, r3, #1
 800bff0:	e7ee      	b.n	800bfd0 <__lshift+0x1c>
 800bff2:	2300      	movs	r3, #0
 800bff4:	f100 0114 	add.w	r1, r0, #20
 800bff8:	f100 0210 	add.w	r2, r0, #16
 800bffc:	4618      	mov	r0, r3
 800bffe:	4553      	cmp	r3, sl
 800c000:	db37      	blt.n	800c072 <__lshift+0xbe>
 800c002:	6920      	ldr	r0, [r4, #16]
 800c004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c008:	f104 0314 	add.w	r3, r4, #20
 800c00c:	f019 091f 	ands.w	r9, r9, #31
 800c010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c014:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c018:	d02f      	beq.n	800c07a <__lshift+0xc6>
 800c01a:	f1c9 0e20 	rsb	lr, r9, #32
 800c01e:	468a      	mov	sl, r1
 800c020:	f04f 0c00 	mov.w	ip, #0
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	fa02 f209 	lsl.w	r2, r2, r9
 800c02a:	ea42 020c 	orr.w	r2, r2, ip
 800c02e:	f84a 2b04 	str.w	r2, [sl], #4
 800c032:	f853 2b04 	ldr.w	r2, [r3], #4
 800c036:	4298      	cmp	r0, r3
 800c038:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c03c:	d8f2      	bhi.n	800c024 <__lshift+0x70>
 800c03e:	1b03      	subs	r3, r0, r4
 800c040:	3b15      	subs	r3, #21
 800c042:	f023 0303 	bic.w	r3, r3, #3
 800c046:	3304      	adds	r3, #4
 800c048:	f104 0215 	add.w	r2, r4, #21
 800c04c:	4290      	cmp	r0, r2
 800c04e:	bf38      	it	cc
 800c050:	2304      	movcc	r3, #4
 800c052:	f841 c003 	str.w	ip, [r1, r3]
 800c056:	f1bc 0f00 	cmp.w	ip, #0
 800c05a:	d001      	beq.n	800c060 <__lshift+0xac>
 800c05c:	f108 0602 	add.w	r6, r8, #2
 800c060:	3e01      	subs	r6, #1
 800c062:	4638      	mov	r0, r7
 800c064:	612e      	str	r6, [r5, #16]
 800c066:	4621      	mov	r1, r4
 800c068:	f7ff fdd2 	bl	800bc10 <_Bfree>
 800c06c:	4628      	mov	r0, r5
 800c06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c072:	f842 0f04 	str.w	r0, [r2, #4]!
 800c076:	3301      	adds	r3, #1
 800c078:	e7c1      	b.n	800bffe <__lshift+0x4a>
 800c07a:	3904      	subs	r1, #4
 800c07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c080:	f841 2f04 	str.w	r2, [r1, #4]!
 800c084:	4298      	cmp	r0, r3
 800c086:	d8f9      	bhi.n	800c07c <__lshift+0xc8>
 800c088:	e7ea      	b.n	800c060 <__lshift+0xac>
 800c08a:	bf00      	nop
 800c08c:	0800cc43 	.word	0x0800cc43
 800c090:	0800ccb4 	.word	0x0800ccb4

0800c094 <__mcmp>:
 800c094:	b530      	push	{r4, r5, lr}
 800c096:	6902      	ldr	r2, [r0, #16]
 800c098:	690c      	ldr	r4, [r1, #16]
 800c09a:	1b12      	subs	r2, r2, r4
 800c09c:	d10e      	bne.n	800c0bc <__mcmp+0x28>
 800c09e:	f100 0314 	add.w	r3, r0, #20
 800c0a2:	3114      	adds	r1, #20
 800c0a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c0a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c0ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c0b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c0b4:	42a5      	cmp	r5, r4
 800c0b6:	d003      	beq.n	800c0c0 <__mcmp+0x2c>
 800c0b8:	d305      	bcc.n	800c0c6 <__mcmp+0x32>
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	4610      	mov	r0, r2
 800c0be:	bd30      	pop	{r4, r5, pc}
 800c0c0:	4283      	cmp	r3, r0
 800c0c2:	d3f3      	bcc.n	800c0ac <__mcmp+0x18>
 800c0c4:	e7fa      	b.n	800c0bc <__mcmp+0x28>
 800c0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ca:	e7f7      	b.n	800c0bc <__mcmp+0x28>

0800c0cc <__mdiff>:
 800c0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	4690      	mov	r8, r2
 800c0da:	f7ff ffdb 	bl	800c094 <__mcmp>
 800c0de:	1e05      	subs	r5, r0, #0
 800c0e0:	d110      	bne.n	800c104 <__mdiff+0x38>
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7ff fd53 	bl	800bb90 <_Balloc>
 800c0ea:	b930      	cbnz	r0, 800c0fa <__mdiff+0x2e>
 800c0ec:	4b3a      	ldr	r3, [pc, #232]	; (800c1d8 <__mdiff+0x10c>)
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	f240 2132 	movw	r1, #562	; 0x232
 800c0f4:	4839      	ldr	r0, [pc, #228]	; (800c1dc <__mdiff+0x110>)
 800c0f6:	f000 fb85 	bl	800c804 <__assert_func>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c104:	bfa4      	itt	ge
 800c106:	4643      	movge	r3, r8
 800c108:	46a0      	movge	r8, r4
 800c10a:	4630      	mov	r0, r6
 800c10c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c110:	bfa6      	itte	ge
 800c112:	461c      	movge	r4, r3
 800c114:	2500      	movge	r5, #0
 800c116:	2501      	movlt	r5, #1
 800c118:	f7ff fd3a 	bl	800bb90 <_Balloc>
 800c11c:	b920      	cbnz	r0, 800c128 <__mdiff+0x5c>
 800c11e:	4b2e      	ldr	r3, [pc, #184]	; (800c1d8 <__mdiff+0x10c>)
 800c120:	4602      	mov	r2, r0
 800c122:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c126:	e7e5      	b.n	800c0f4 <__mdiff+0x28>
 800c128:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c12c:	6926      	ldr	r6, [r4, #16]
 800c12e:	60c5      	str	r5, [r0, #12]
 800c130:	f104 0914 	add.w	r9, r4, #20
 800c134:	f108 0514 	add.w	r5, r8, #20
 800c138:	f100 0e14 	add.w	lr, r0, #20
 800c13c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c140:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c144:	f108 0210 	add.w	r2, r8, #16
 800c148:	46f2      	mov	sl, lr
 800c14a:	2100      	movs	r1, #0
 800c14c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c150:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c154:	fa1f f883 	uxth.w	r8, r3
 800c158:	fa11 f18b 	uxtah	r1, r1, fp
 800c15c:	0c1b      	lsrs	r3, r3, #16
 800c15e:	eba1 0808 	sub.w	r8, r1, r8
 800c162:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c166:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c16a:	fa1f f888 	uxth.w	r8, r8
 800c16e:	1419      	asrs	r1, r3, #16
 800c170:	454e      	cmp	r6, r9
 800c172:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c176:	f84a 3b04 	str.w	r3, [sl], #4
 800c17a:	d8e7      	bhi.n	800c14c <__mdiff+0x80>
 800c17c:	1b33      	subs	r3, r6, r4
 800c17e:	3b15      	subs	r3, #21
 800c180:	f023 0303 	bic.w	r3, r3, #3
 800c184:	3304      	adds	r3, #4
 800c186:	3415      	adds	r4, #21
 800c188:	42a6      	cmp	r6, r4
 800c18a:	bf38      	it	cc
 800c18c:	2304      	movcc	r3, #4
 800c18e:	441d      	add	r5, r3
 800c190:	4473      	add	r3, lr
 800c192:	469e      	mov	lr, r3
 800c194:	462e      	mov	r6, r5
 800c196:	4566      	cmp	r6, ip
 800c198:	d30e      	bcc.n	800c1b8 <__mdiff+0xec>
 800c19a:	f10c 0203 	add.w	r2, ip, #3
 800c19e:	1b52      	subs	r2, r2, r5
 800c1a0:	f022 0203 	bic.w	r2, r2, #3
 800c1a4:	3d03      	subs	r5, #3
 800c1a6:	45ac      	cmp	ip, r5
 800c1a8:	bf38      	it	cc
 800c1aa:	2200      	movcc	r2, #0
 800c1ac:	441a      	add	r2, r3
 800c1ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c1b2:	b17b      	cbz	r3, 800c1d4 <__mdiff+0x108>
 800c1b4:	6107      	str	r7, [r0, #16]
 800c1b6:	e7a3      	b.n	800c100 <__mdiff+0x34>
 800c1b8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c1bc:	fa11 f288 	uxtah	r2, r1, r8
 800c1c0:	1414      	asrs	r4, r2, #16
 800c1c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c1c6:	b292      	uxth	r2, r2
 800c1c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c1cc:	f84e 2b04 	str.w	r2, [lr], #4
 800c1d0:	1421      	asrs	r1, r4, #16
 800c1d2:	e7e0      	b.n	800c196 <__mdiff+0xca>
 800c1d4:	3f01      	subs	r7, #1
 800c1d6:	e7ea      	b.n	800c1ae <__mdiff+0xe2>
 800c1d8:	0800cc43 	.word	0x0800cc43
 800c1dc:	0800ccb4 	.word	0x0800ccb4

0800c1e0 <__d2b>:
 800c1e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1e4:	4689      	mov	r9, r1
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	ec57 6b10 	vmov	r6, r7, d0
 800c1ec:	4690      	mov	r8, r2
 800c1ee:	f7ff fccf 	bl	800bb90 <_Balloc>
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	b930      	cbnz	r0, 800c204 <__d2b+0x24>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	4b25      	ldr	r3, [pc, #148]	; (800c290 <__d2b+0xb0>)
 800c1fa:	4826      	ldr	r0, [pc, #152]	; (800c294 <__d2b+0xb4>)
 800c1fc:	f240 310a 	movw	r1, #778	; 0x30a
 800c200:	f000 fb00 	bl	800c804 <__assert_func>
 800c204:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c20c:	bb35      	cbnz	r5, 800c25c <__d2b+0x7c>
 800c20e:	2e00      	cmp	r6, #0
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	d028      	beq.n	800c266 <__d2b+0x86>
 800c214:	4668      	mov	r0, sp
 800c216:	9600      	str	r6, [sp, #0]
 800c218:	f7ff fd82 	bl	800bd20 <__lo0bits>
 800c21c:	9900      	ldr	r1, [sp, #0]
 800c21e:	b300      	cbz	r0, 800c262 <__d2b+0x82>
 800c220:	9a01      	ldr	r2, [sp, #4]
 800c222:	f1c0 0320 	rsb	r3, r0, #32
 800c226:	fa02 f303 	lsl.w	r3, r2, r3
 800c22a:	430b      	orrs	r3, r1
 800c22c:	40c2      	lsrs	r2, r0
 800c22e:	6163      	str	r3, [r4, #20]
 800c230:	9201      	str	r2, [sp, #4]
 800c232:	9b01      	ldr	r3, [sp, #4]
 800c234:	61a3      	str	r3, [r4, #24]
 800c236:	2b00      	cmp	r3, #0
 800c238:	bf14      	ite	ne
 800c23a:	2202      	movne	r2, #2
 800c23c:	2201      	moveq	r2, #1
 800c23e:	6122      	str	r2, [r4, #16]
 800c240:	b1d5      	cbz	r5, 800c278 <__d2b+0x98>
 800c242:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c246:	4405      	add	r5, r0
 800c248:	f8c9 5000 	str.w	r5, [r9]
 800c24c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c250:	f8c8 0000 	str.w	r0, [r8]
 800c254:	4620      	mov	r0, r4
 800c256:	b003      	add	sp, #12
 800c258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c25c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c260:	e7d5      	b.n	800c20e <__d2b+0x2e>
 800c262:	6161      	str	r1, [r4, #20]
 800c264:	e7e5      	b.n	800c232 <__d2b+0x52>
 800c266:	a801      	add	r0, sp, #4
 800c268:	f7ff fd5a 	bl	800bd20 <__lo0bits>
 800c26c:	9b01      	ldr	r3, [sp, #4]
 800c26e:	6163      	str	r3, [r4, #20]
 800c270:	2201      	movs	r2, #1
 800c272:	6122      	str	r2, [r4, #16]
 800c274:	3020      	adds	r0, #32
 800c276:	e7e3      	b.n	800c240 <__d2b+0x60>
 800c278:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c27c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c280:	f8c9 0000 	str.w	r0, [r9]
 800c284:	6918      	ldr	r0, [r3, #16]
 800c286:	f7ff fd2b 	bl	800bce0 <__hi0bits>
 800c28a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c28e:	e7df      	b.n	800c250 <__d2b+0x70>
 800c290:	0800cc43 	.word	0x0800cc43
 800c294:	0800ccb4 	.word	0x0800ccb4

0800c298 <_calloc_r>:
 800c298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c29a:	fba1 2402 	umull	r2, r4, r1, r2
 800c29e:	b94c      	cbnz	r4, 800c2b4 <_calloc_r+0x1c>
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	9201      	str	r2, [sp, #4]
 800c2a4:	f000 f87a 	bl	800c39c <_malloc_r>
 800c2a8:	9a01      	ldr	r2, [sp, #4]
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	b930      	cbnz	r0, 800c2bc <_calloc_r+0x24>
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	b003      	add	sp, #12
 800c2b2:	bd30      	pop	{r4, r5, pc}
 800c2b4:	220c      	movs	r2, #12
 800c2b6:	6002      	str	r2, [r0, #0]
 800c2b8:	2500      	movs	r5, #0
 800c2ba:	e7f8      	b.n	800c2ae <_calloc_r+0x16>
 800c2bc:	4621      	mov	r1, r4
 800c2be:	f7fd fd23 	bl	8009d08 <memset>
 800c2c2:	e7f4      	b.n	800c2ae <_calloc_r+0x16>

0800c2c4 <_free_r>:
 800c2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	d044      	beq.n	800c354 <_free_r+0x90>
 800c2ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ce:	9001      	str	r0, [sp, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c2d6:	bfb8      	it	lt
 800c2d8:	18e4      	addlt	r4, r4, r3
 800c2da:	f000 fb19 	bl	800c910 <__malloc_lock>
 800c2de:	4a1e      	ldr	r2, [pc, #120]	; (800c358 <_free_r+0x94>)
 800c2e0:	9801      	ldr	r0, [sp, #4]
 800c2e2:	6813      	ldr	r3, [r2, #0]
 800c2e4:	b933      	cbnz	r3, 800c2f4 <_free_r+0x30>
 800c2e6:	6063      	str	r3, [r4, #4]
 800c2e8:	6014      	str	r4, [r2, #0]
 800c2ea:	b003      	add	sp, #12
 800c2ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2f0:	f000 bb14 	b.w	800c91c <__malloc_unlock>
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	d908      	bls.n	800c30a <_free_r+0x46>
 800c2f8:	6825      	ldr	r5, [r4, #0]
 800c2fa:	1961      	adds	r1, r4, r5
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	bf01      	itttt	eq
 800c300:	6819      	ldreq	r1, [r3, #0]
 800c302:	685b      	ldreq	r3, [r3, #4]
 800c304:	1949      	addeq	r1, r1, r5
 800c306:	6021      	streq	r1, [r4, #0]
 800c308:	e7ed      	b.n	800c2e6 <_free_r+0x22>
 800c30a:	461a      	mov	r2, r3
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	b10b      	cbz	r3, 800c314 <_free_r+0x50>
 800c310:	42a3      	cmp	r3, r4
 800c312:	d9fa      	bls.n	800c30a <_free_r+0x46>
 800c314:	6811      	ldr	r1, [r2, #0]
 800c316:	1855      	adds	r5, r2, r1
 800c318:	42a5      	cmp	r5, r4
 800c31a:	d10b      	bne.n	800c334 <_free_r+0x70>
 800c31c:	6824      	ldr	r4, [r4, #0]
 800c31e:	4421      	add	r1, r4
 800c320:	1854      	adds	r4, r2, r1
 800c322:	42a3      	cmp	r3, r4
 800c324:	6011      	str	r1, [r2, #0]
 800c326:	d1e0      	bne.n	800c2ea <_free_r+0x26>
 800c328:	681c      	ldr	r4, [r3, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	6053      	str	r3, [r2, #4]
 800c32e:	4421      	add	r1, r4
 800c330:	6011      	str	r1, [r2, #0]
 800c332:	e7da      	b.n	800c2ea <_free_r+0x26>
 800c334:	d902      	bls.n	800c33c <_free_r+0x78>
 800c336:	230c      	movs	r3, #12
 800c338:	6003      	str	r3, [r0, #0]
 800c33a:	e7d6      	b.n	800c2ea <_free_r+0x26>
 800c33c:	6825      	ldr	r5, [r4, #0]
 800c33e:	1961      	adds	r1, r4, r5
 800c340:	428b      	cmp	r3, r1
 800c342:	bf04      	itt	eq
 800c344:	6819      	ldreq	r1, [r3, #0]
 800c346:	685b      	ldreq	r3, [r3, #4]
 800c348:	6063      	str	r3, [r4, #4]
 800c34a:	bf04      	itt	eq
 800c34c:	1949      	addeq	r1, r1, r5
 800c34e:	6021      	streq	r1, [r4, #0]
 800c350:	6054      	str	r4, [r2, #4]
 800c352:	e7ca      	b.n	800c2ea <_free_r+0x26>
 800c354:	b003      	add	sp, #12
 800c356:	bd30      	pop	{r4, r5, pc}
 800c358:	20000af4 	.word	0x20000af4

0800c35c <sbrk_aligned>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	4e0e      	ldr	r6, [pc, #56]	; (800c398 <sbrk_aligned+0x3c>)
 800c360:	460c      	mov	r4, r1
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	b911      	cbnz	r1, 800c36e <sbrk_aligned+0x12>
 800c368:	f000 f9e6 	bl	800c738 <_sbrk_r>
 800c36c:	6030      	str	r0, [r6, #0]
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	f000 f9e1 	bl	800c738 <_sbrk_r>
 800c376:	1c43      	adds	r3, r0, #1
 800c378:	d00a      	beq.n	800c390 <sbrk_aligned+0x34>
 800c37a:	1cc4      	adds	r4, r0, #3
 800c37c:	f024 0403 	bic.w	r4, r4, #3
 800c380:	42a0      	cmp	r0, r4
 800c382:	d007      	beq.n	800c394 <sbrk_aligned+0x38>
 800c384:	1a21      	subs	r1, r4, r0
 800c386:	4628      	mov	r0, r5
 800c388:	f000 f9d6 	bl	800c738 <_sbrk_r>
 800c38c:	3001      	adds	r0, #1
 800c38e:	d101      	bne.n	800c394 <sbrk_aligned+0x38>
 800c390:	f04f 34ff 	mov.w	r4, #4294967295
 800c394:	4620      	mov	r0, r4
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	20000af8 	.word	0x20000af8

0800c39c <_malloc_r>:
 800c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a0:	1ccd      	adds	r5, r1, #3
 800c3a2:	f025 0503 	bic.w	r5, r5, #3
 800c3a6:	3508      	adds	r5, #8
 800c3a8:	2d0c      	cmp	r5, #12
 800c3aa:	bf38      	it	cc
 800c3ac:	250c      	movcc	r5, #12
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	db01      	blt.n	800c3b8 <_malloc_r+0x1c>
 800c3b4:	42a9      	cmp	r1, r5
 800c3b6:	d905      	bls.n	800c3c4 <_malloc_r+0x28>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	2600      	movs	r6, #0
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	4e2e      	ldr	r6, [pc, #184]	; (800c480 <_malloc_r+0xe4>)
 800c3c6:	f000 faa3 	bl	800c910 <__malloc_lock>
 800c3ca:	6833      	ldr	r3, [r6, #0]
 800c3cc:	461c      	mov	r4, r3
 800c3ce:	bb34      	cbnz	r4, 800c41e <_malloc_r+0x82>
 800c3d0:	4629      	mov	r1, r5
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	f7ff ffc2 	bl	800c35c <sbrk_aligned>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	4604      	mov	r4, r0
 800c3dc:	d14d      	bne.n	800c47a <_malloc_r+0xde>
 800c3de:	6834      	ldr	r4, [r6, #0]
 800c3e0:	4626      	mov	r6, r4
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	d140      	bne.n	800c468 <_malloc_r+0xcc>
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	4631      	mov	r1, r6
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	eb04 0803 	add.w	r8, r4, r3
 800c3f0:	f000 f9a2 	bl	800c738 <_sbrk_r>
 800c3f4:	4580      	cmp	r8, r0
 800c3f6:	d13a      	bne.n	800c46e <_malloc_r+0xd2>
 800c3f8:	6821      	ldr	r1, [r4, #0]
 800c3fa:	3503      	adds	r5, #3
 800c3fc:	1a6d      	subs	r5, r5, r1
 800c3fe:	f025 0503 	bic.w	r5, r5, #3
 800c402:	3508      	adds	r5, #8
 800c404:	2d0c      	cmp	r5, #12
 800c406:	bf38      	it	cc
 800c408:	250c      	movcc	r5, #12
 800c40a:	4629      	mov	r1, r5
 800c40c:	4638      	mov	r0, r7
 800c40e:	f7ff ffa5 	bl	800c35c <sbrk_aligned>
 800c412:	3001      	adds	r0, #1
 800c414:	d02b      	beq.n	800c46e <_malloc_r+0xd2>
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	442b      	add	r3, r5
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	e00e      	b.n	800c43c <_malloc_r+0xa0>
 800c41e:	6822      	ldr	r2, [r4, #0]
 800c420:	1b52      	subs	r2, r2, r5
 800c422:	d41e      	bmi.n	800c462 <_malloc_r+0xc6>
 800c424:	2a0b      	cmp	r2, #11
 800c426:	d916      	bls.n	800c456 <_malloc_r+0xba>
 800c428:	1961      	adds	r1, r4, r5
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	6025      	str	r5, [r4, #0]
 800c42e:	bf18      	it	ne
 800c430:	6059      	strne	r1, [r3, #4]
 800c432:	6863      	ldr	r3, [r4, #4]
 800c434:	bf08      	it	eq
 800c436:	6031      	streq	r1, [r6, #0]
 800c438:	5162      	str	r2, [r4, r5]
 800c43a:	604b      	str	r3, [r1, #4]
 800c43c:	4638      	mov	r0, r7
 800c43e:	f104 060b 	add.w	r6, r4, #11
 800c442:	f000 fa6b 	bl	800c91c <__malloc_unlock>
 800c446:	f026 0607 	bic.w	r6, r6, #7
 800c44a:	1d23      	adds	r3, r4, #4
 800c44c:	1af2      	subs	r2, r6, r3
 800c44e:	d0b6      	beq.n	800c3be <_malloc_r+0x22>
 800c450:	1b9b      	subs	r3, r3, r6
 800c452:	50a3      	str	r3, [r4, r2]
 800c454:	e7b3      	b.n	800c3be <_malloc_r+0x22>
 800c456:	6862      	ldr	r2, [r4, #4]
 800c458:	42a3      	cmp	r3, r4
 800c45a:	bf0c      	ite	eq
 800c45c:	6032      	streq	r2, [r6, #0]
 800c45e:	605a      	strne	r2, [r3, #4]
 800c460:	e7ec      	b.n	800c43c <_malloc_r+0xa0>
 800c462:	4623      	mov	r3, r4
 800c464:	6864      	ldr	r4, [r4, #4]
 800c466:	e7b2      	b.n	800c3ce <_malloc_r+0x32>
 800c468:	4634      	mov	r4, r6
 800c46a:	6876      	ldr	r6, [r6, #4]
 800c46c:	e7b9      	b.n	800c3e2 <_malloc_r+0x46>
 800c46e:	230c      	movs	r3, #12
 800c470:	603b      	str	r3, [r7, #0]
 800c472:	4638      	mov	r0, r7
 800c474:	f000 fa52 	bl	800c91c <__malloc_unlock>
 800c478:	e7a1      	b.n	800c3be <_malloc_r+0x22>
 800c47a:	6025      	str	r5, [r4, #0]
 800c47c:	e7de      	b.n	800c43c <_malloc_r+0xa0>
 800c47e:	bf00      	nop
 800c480:	20000af4 	.word	0x20000af4

0800c484 <__sfputc_r>:
 800c484:	6893      	ldr	r3, [r2, #8]
 800c486:	3b01      	subs	r3, #1
 800c488:	2b00      	cmp	r3, #0
 800c48a:	b410      	push	{r4}
 800c48c:	6093      	str	r3, [r2, #8]
 800c48e:	da08      	bge.n	800c4a2 <__sfputc_r+0x1e>
 800c490:	6994      	ldr	r4, [r2, #24]
 800c492:	42a3      	cmp	r3, r4
 800c494:	db01      	blt.n	800c49a <__sfputc_r+0x16>
 800c496:	290a      	cmp	r1, #10
 800c498:	d103      	bne.n	800c4a2 <__sfputc_r+0x1e>
 800c49a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c49e:	f7fe ba01 	b.w	800a8a4 <__swbuf_r>
 800c4a2:	6813      	ldr	r3, [r2, #0]
 800c4a4:	1c58      	adds	r0, r3, #1
 800c4a6:	6010      	str	r0, [r2, #0]
 800c4a8:	7019      	strb	r1, [r3, #0]
 800c4aa:	4608      	mov	r0, r1
 800c4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <__sfputs_r>:
 800c4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	460f      	mov	r7, r1
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	18d5      	adds	r5, r2, r3
 800c4bc:	42ac      	cmp	r4, r5
 800c4be:	d101      	bne.n	800c4c4 <__sfputs_r+0x12>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	e007      	b.n	800c4d4 <__sfputs_r+0x22>
 800c4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c8:	463a      	mov	r2, r7
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f7ff ffda 	bl	800c484 <__sfputc_r>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d1f3      	bne.n	800c4bc <__sfputs_r+0xa>
 800c4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4d8 <_vfiprintf_r>:
 800c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	460d      	mov	r5, r1
 800c4de:	b09d      	sub	sp, #116	; 0x74
 800c4e0:	4614      	mov	r4, r2
 800c4e2:	4698      	mov	r8, r3
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	b118      	cbz	r0, 800c4f0 <_vfiprintf_r+0x18>
 800c4e8:	6983      	ldr	r3, [r0, #24]
 800c4ea:	b90b      	cbnz	r3, 800c4f0 <_vfiprintf_r+0x18>
 800c4ec:	f7ff fa30 	bl	800b950 <__sinit>
 800c4f0:	4b89      	ldr	r3, [pc, #548]	; (800c718 <_vfiprintf_r+0x240>)
 800c4f2:	429d      	cmp	r5, r3
 800c4f4:	d11b      	bne.n	800c52e <_vfiprintf_r+0x56>
 800c4f6:	6875      	ldr	r5, [r6, #4]
 800c4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4fa:	07d9      	lsls	r1, r3, #31
 800c4fc:	d405      	bmi.n	800c50a <_vfiprintf_r+0x32>
 800c4fe:	89ab      	ldrh	r3, [r5, #12]
 800c500:	059a      	lsls	r2, r3, #22
 800c502:	d402      	bmi.n	800c50a <_vfiprintf_r+0x32>
 800c504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c506:	f7ff fac6 	bl	800ba96 <__retarget_lock_acquire_recursive>
 800c50a:	89ab      	ldrh	r3, [r5, #12]
 800c50c:	071b      	lsls	r3, r3, #28
 800c50e:	d501      	bpl.n	800c514 <_vfiprintf_r+0x3c>
 800c510:	692b      	ldr	r3, [r5, #16]
 800c512:	b9eb      	cbnz	r3, 800c550 <_vfiprintf_r+0x78>
 800c514:	4629      	mov	r1, r5
 800c516:	4630      	mov	r0, r6
 800c518:	f7fe fa16 	bl	800a948 <__swsetup_r>
 800c51c:	b1c0      	cbz	r0, 800c550 <_vfiprintf_r+0x78>
 800c51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c520:	07dc      	lsls	r4, r3, #31
 800c522:	d50e      	bpl.n	800c542 <_vfiprintf_r+0x6a>
 800c524:	f04f 30ff 	mov.w	r0, #4294967295
 800c528:	b01d      	add	sp, #116	; 0x74
 800c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52e:	4b7b      	ldr	r3, [pc, #492]	; (800c71c <_vfiprintf_r+0x244>)
 800c530:	429d      	cmp	r5, r3
 800c532:	d101      	bne.n	800c538 <_vfiprintf_r+0x60>
 800c534:	68b5      	ldr	r5, [r6, #8]
 800c536:	e7df      	b.n	800c4f8 <_vfiprintf_r+0x20>
 800c538:	4b79      	ldr	r3, [pc, #484]	; (800c720 <_vfiprintf_r+0x248>)
 800c53a:	429d      	cmp	r5, r3
 800c53c:	bf08      	it	eq
 800c53e:	68f5      	ldreq	r5, [r6, #12]
 800c540:	e7da      	b.n	800c4f8 <_vfiprintf_r+0x20>
 800c542:	89ab      	ldrh	r3, [r5, #12]
 800c544:	0598      	lsls	r0, r3, #22
 800c546:	d4ed      	bmi.n	800c524 <_vfiprintf_r+0x4c>
 800c548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c54a:	f7ff faa5 	bl	800ba98 <__retarget_lock_release_recursive>
 800c54e:	e7e9      	b.n	800c524 <_vfiprintf_r+0x4c>
 800c550:	2300      	movs	r3, #0
 800c552:	9309      	str	r3, [sp, #36]	; 0x24
 800c554:	2320      	movs	r3, #32
 800c556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c55a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c55e:	2330      	movs	r3, #48	; 0x30
 800c560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c724 <_vfiprintf_r+0x24c>
 800c564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c568:	f04f 0901 	mov.w	r9, #1
 800c56c:	4623      	mov	r3, r4
 800c56e:	469a      	mov	sl, r3
 800c570:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c574:	b10a      	cbz	r2, 800c57a <_vfiprintf_r+0xa2>
 800c576:	2a25      	cmp	r2, #37	; 0x25
 800c578:	d1f9      	bne.n	800c56e <_vfiprintf_r+0x96>
 800c57a:	ebba 0b04 	subs.w	fp, sl, r4
 800c57e:	d00b      	beq.n	800c598 <_vfiprintf_r+0xc0>
 800c580:	465b      	mov	r3, fp
 800c582:	4622      	mov	r2, r4
 800c584:	4629      	mov	r1, r5
 800c586:	4630      	mov	r0, r6
 800c588:	f7ff ff93 	bl	800c4b2 <__sfputs_r>
 800c58c:	3001      	adds	r0, #1
 800c58e:	f000 80aa 	beq.w	800c6e6 <_vfiprintf_r+0x20e>
 800c592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c594:	445a      	add	r2, fp
 800c596:	9209      	str	r2, [sp, #36]	; 0x24
 800c598:	f89a 3000 	ldrb.w	r3, [sl]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 80a2 	beq.w	800c6e6 <_vfiprintf_r+0x20e>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ac:	f10a 0a01 	add.w	sl, sl, #1
 800c5b0:	9304      	str	r3, [sp, #16]
 800c5b2:	9307      	str	r3, [sp, #28]
 800c5b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ba:	4654      	mov	r4, sl
 800c5bc:	2205      	movs	r2, #5
 800c5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c2:	4858      	ldr	r0, [pc, #352]	; (800c724 <_vfiprintf_r+0x24c>)
 800c5c4:	f7f3 fe34 	bl	8000230 <memchr>
 800c5c8:	9a04      	ldr	r2, [sp, #16]
 800c5ca:	b9d8      	cbnz	r0, 800c604 <_vfiprintf_r+0x12c>
 800c5cc:	06d1      	lsls	r1, r2, #27
 800c5ce:	bf44      	itt	mi
 800c5d0:	2320      	movmi	r3, #32
 800c5d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d6:	0713      	lsls	r3, r2, #28
 800c5d8:	bf44      	itt	mi
 800c5da:	232b      	movmi	r3, #43	; 0x2b
 800c5dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e6:	d015      	beq.n	800c614 <_vfiprintf_r+0x13c>
 800c5e8:	9a07      	ldr	r2, [sp, #28]
 800c5ea:	4654      	mov	r4, sl
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	f04f 0c0a 	mov.w	ip, #10
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5f8:	3b30      	subs	r3, #48	; 0x30
 800c5fa:	2b09      	cmp	r3, #9
 800c5fc:	d94e      	bls.n	800c69c <_vfiprintf_r+0x1c4>
 800c5fe:	b1b0      	cbz	r0, 800c62e <_vfiprintf_r+0x156>
 800c600:	9207      	str	r2, [sp, #28]
 800c602:	e014      	b.n	800c62e <_vfiprintf_r+0x156>
 800c604:	eba0 0308 	sub.w	r3, r0, r8
 800c608:	fa09 f303 	lsl.w	r3, r9, r3
 800c60c:	4313      	orrs	r3, r2
 800c60e:	9304      	str	r3, [sp, #16]
 800c610:	46a2      	mov	sl, r4
 800c612:	e7d2      	b.n	800c5ba <_vfiprintf_r+0xe2>
 800c614:	9b03      	ldr	r3, [sp, #12]
 800c616:	1d19      	adds	r1, r3, #4
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	9103      	str	r1, [sp, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	bfbb      	ittet	lt
 800c620:	425b      	neglt	r3, r3
 800c622:	f042 0202 	orrlt.w	r2, r2, #2
 800c626:	9307      	strge	r3, [sp, #28]
 800c628:	9307      	strlt	r3, [sp, #28]
 800c62a:	bfb8      	it	lt
 800c62c:	9204      	strlt	r2, [sp, #16]
 800c62e:	7823      	ldrb	r3, [r4, #0]
 800c630:	2b2e      	cmp	r3, #46	; 0x2e
 800c632:	d10c      	bne.n	800c64e <_vfiprintf_r+0x176>
 800c634:	7863      	ldrb	r3, [r4, #1]
 800c636:	2b2a      	cmp	r3, #42	; 0x2a
 800c638:	d135      	bne.n	800c6a6 <_vfiprintf_r+0x1ce>
 800c63a:	9b03      	ldr	r3, [sp, #12]
 800c63c:	1d1a      	adds	r2, r3, #4
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	9203      	str	r2, [sp, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	bfb8      	it	lt
 800c646:	f04f 33ff 	movlt.w	r3, #4294967295
 800c64a:	3402      	adds	r4, #2
 800c64c:	9305      	str	r3, [sp, #20]
 800c64e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c734 <_vfiprintf_r+0x25c>
 800c652:	7821      	ldrb	r1, [r4, #0]
 800c654:	2203      	movs	r2, #3
 800c656:	4650      	mov	r0, sl
 800c658:	f7f3 fdea 	bl	8000230 <memchr>
 800c65c:	b140      	cbz	r0, 800c670 <_vfiprintf_r+0x198>
 800c65e:	2340      	movs	r3, #64	; 0x40
 800c660:	eba0 000a 	sub.w	r0, r0, sl
 800c664:	fa03 f000 	lsl.w	r0, r3, r0
 800c668:	9b04      	ldr	r3, [sp, #16]
 800c66a:	4303      	orrs	r3, r0
 800c66c:	3401      	adds	r4, #1
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c674:	482c      	ldr	r0, [pc, #176]	; (800c728 <_vfiprintf_r+0x250>)
 800c676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c67a:	2206      	movs	r2, #6
 800c67c:	f7f3 fdd8 	bl	8000230 <memchr>
 800c680:	2800      	cmp	r0, #0
 800c682:	d03f      	beq.n	800c704 <_vfiprintf_r+0x22c>
 800c684:	4b29      	ldr	r3, [pc, #164]	; (800c72c <_vfiprintf_r+0x254>)
 800c686:	bb1b      	cbnz	r3, 800c6d0 <_vfiprintf_r+0x1f8>
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	3307      	adds	r3, #7
 800c68c:	f023 0307 	bic.w	r3, r3, #7
 800c690:	3308      	adds	r3, #8
 800c692:	9303      	str	r3, [sp, #12]
 800c694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c696:	443b      	add	r3, r7
 800c698:	9309      	str	r3, [sp, #36]	; 0x24
 800c69a:	e767      	b.n	800c56c <_vfiprintf_r+0x94>
 800c69c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6a0:	460c      	mov	r4, r1
 800c6a2:	2001      	movs	r0, #1
 800c6a4:	e7a5      	b.n	800c5f2 <_vfiprintf_r+0x11a>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	3401      	adds	r4, #1
 800c6aa:	9305      	str	r3, [sp, #20]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	f04f 0c0a 	mov.w	ip, #10
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6b8:	3a30      	subs	r2, #48	; 0x30
 800c6ba:	2a09      	cmp	r2, #9
 800c6bc:	d903      	bls.n	800c6c6 <_vfiprintf_r+0x1ee>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0c5      	beq.n	800c64e <_vfiprintf_r+0x176>
 800c6c2:	9105      	str	r1, [sp, #20]
 800c6c4:	e7c3      	b.n	800c64e <_vfiprintf_r+0x176>
 800c6c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e7f0      	b.n	800c6b2 <_vfiprintf_r+0x1da>
 800c6d0:	ab03      	add	r3, sp, #12
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	462a      	mov	r2, r5
 800c6d6:	4b16      	ldr	r3, [pc, #88]	; (800c730 <_vfiprintf_r+0x258>)
 800c6d8:	a904      	add	r1, sp, #16
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f7fd fbbc 	bl	8009e58 <_printf_float>
 800c6e0:	4607      	mov	r7, r0
 800c6e2:	1c78      	adds	r0, r7, #1
 800c6e4:	d1d6      	bne.n	800c694 <_vfiprintf_r+0x1bc>
 800c6e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6e8:	07d9      	lsls	r1, r3, #31
 800c6ea:	d405      	bmi.n	800c6f8 <_vfiprintf_r+0x220>
 800c6ec:	89ab      	ldrh	r3, [r5, #12]
 800c6ee:	059a      	lsls	r2, r3, #22
 800c6f0:	d402      	bmi.n	800c6f8 <_vfiprintf_r+0x220>
 800c6f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6f4:	f7ff f9d0 	bl	800ba98 <__retarget_lock_release_recursive>
 800c6f8:	89ab      	ldrh	r3, [r5, #12]
 800c6fa:	065b      	lsls	r3, r3, #25
 800c6fc:	f53f af12 	bmi.w	800c524 <_vfiprintf_r+0x4c>
 800c700:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c702:	e711      	b.n	800c528 <_vfiprintf_r+0x50>
 800c704:	ab03      	add	r3, sp, #12
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	462a      	mov	r2, r5
 800c70a:	4b09      	ldr	r3, [pc, #36]	; (800c730 <_vfiprintf_r+0x258>)
 800c70c:	a904      	add	r1, sp, #16
 800c70e:	4630      	mov	r0, r6
 800c710:	f7fd fe46 	bl	800a3a0 <_printf_i>
 800c714:	e7e4      	b.n	800c6e0 <_vfiprintf_r+0x208>
 800c716:	bf00      	nop
 800c718:	0800cc74 	.word	0x0800cc74
 800c71c:	0800cc94 	.word	0x0800cc94
 800c720:	0800cc54 	.word	0x0800cc54
 800c724:	0800ce0c 	.word	0x0800ce0c
 800c728:	0800ce16 	.word	0x0800ce16
 800c72c:	08009e59 	.word	0x08009e59
 800c730:	0800c4b3 	.word	0x0800c4b3
 800c734:	0800ce12 	.word	0x0800ce12

0800c738 <_sbrk_r>:
 800c738:	b538      	push	{r3, r4, r5, lr}
 800c73a:	4d06      	ldr	r5, [pc, #24]	; (800c754 <_sbrk_r+0x1c>)
 800c73c:	2300      	movs	r3, #0
 800c73e:	4604      	mov	r4, r0
 800c740:	4608      	mov	r0, r1
 800c742:	602b      	str	r3, [r5, #0]
 800c744:	f7f8 fc8a 	bl	800505c <_sbrk>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	d102      	bne.n	800c752 <_sbrk_r+0x1a>
 800c74c:	682b      	ldr	r3, [r5, #0]
 800c74e:	b103      	cbz	r3, 800c752 <_sbrk_r+0x1a>
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	bd38      	pop	{r3, r4, r5, pc}
 800c754:	20000afc 	.word	0x20000afc

0800c758 <__sread>:
 800c758:	b510      	push	{r4, lr}
 800c75a:	460c      	mov	r4, r1
 800c75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c760:	f000 f8e2 	bl	800c928 <_read_r>
 800c764:	2800      	cmp	r0, #0
 800c766:	bfab      	itete	ge
 800c768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c76a:	89a3      	ldrhlt	r3, [r4, #12]
 800c76c:	181b      	addge	r3, r3, r0
 800c76e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c772:	bfac      	ite	ge
 800c774:	6563      	strge	r3, [r4, #84]	; 0x54
 800c776:	81a3      	strhlt	r3, [r4, #12]
 800c778:	bd10      	pop	{r4, pc}

0800c77a <__swrite>:
 800c77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77e:	461f      	mov	r7, r3
 800c780:	898b      	ldrh	r3, [r1, #12]
 800c782:	05db      	lsls	r3, r3, #23
 800c784:	4605      	mov	r5, r0
 800c786:	460c      	mov	r4, r1
 800c788:	4616      	mov	r6, r2
 800c78a:	d505      	bpl.n	800c798 <__swrite+0x1e>
 800c78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c790:	2302      	movs	r3, #2
 800c792:	2200      	movs	r2, #0
 800c794:	f000 f898 	bl	800c8c8 <_lseek_r>
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c79e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7a2:	81a3      	strh	r3, [r4, #12]
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	463b      	mov	r3, r7
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ae:	f000 b817 	b.w	800c7e0 <_write_r>

0800c7b2 <__sseek>:
 800c7b2:	b510      	push	{r4, lr}
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ba:	f000 f885 	bl	800c8c8 <_lseek_r>
 800c7be:	1c43      	adds	r3, r0, #1
 800c7c0:	89a3      	ldrh	r3, [r4, #12]
 800c7c2:	bf15      	itete	ne
 800c7c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7ce:	81a3      	strheq	r3, [r4, #12]
 800c7d0:	bf18      	it	ne
 800c7d2:	81a3      	strhne	r3, [r4, #12]
 800c7d4:	bd10      	pop	{r4, pc}

0800c7d6 <__sclose>:
 800c7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7da:	f000 b831 	b.w	800c840 <_close_r>
	...

0800c7e0 <_write_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d07      	ldr	r5, [pc, #28]	; (800c800 <_write_r+0x20>)
 800c7e4:	4604      	mov	r4, r0
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	602a      	str	r2, [r5, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f7f8 fc18 	bl	8005024 <_write>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_write_r+0x1e>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_write_r+0x1e>
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	20000afc 	.word	0x20000afc

0800c804 <__assert_func>:
 800c804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c806:	4614      	mov	r4, r2
 800c808:	461a      	mov	r2, r3
 800c80a:	4b09      	ldr	r3, [pc, #36]	; (800c830 <__assert_func+0x2c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4605      	mov	r5, r0
 800c810:	68d8      	ldr	r0, [r3, #12]
 800c812:	b14c      	cbz	r4, 800c828 <__assert_func+0x24>
 800c814:	4b07      	ldr	r3, [pc, #28]	; (800c834 <__assert_func+0x30>)
 800c816:	9100      	str	r1, [sp, #0]
 800c818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c81c:	4906      	ldr	r1, [pc, #24]	; (800c838 <__assert_func+0x34>)
 800c81e:	462b      	mov	r3, r5
 800c820:	f000 f81e 	bl	800c860 <fiprintf>
 800c824:	f000 f89f 	bl	800c966 <abort>
 800c828:	4b04      	ldr	r3, [pc, #16]	; (800c83c <__assert_func+0x38>)
 800c82a:	461c      	mov	r4, r3
 800c82c:	e7f3      	b.n	800c816 <__assert_func+0x12>
 800c82e:	bf00      	nop
 800c830:	20000014 	.word	0x20000014
 800c834:	0800ce1d 	.word	0x0800ce1d
 800c838:	0800ce2a 	.word	0x0800ce2a
 800c83c:	0800ce58 	.word	0x0800ce58

0800c840 <_close_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4d06      	ldr	r5, [pc, #24]	; (800c85c <_close_r+0x1c>)
 800c844:	2300      	movs	r3, #0
 800c846:	4604      	mov	r4, r0
 800c848:	4608      	mov	r0, r1
 800c84a:	602b      	str	r3, [r5, #0]
 800c84c:	f7f8 fbf8 	bl	8005040 <_close>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_close_r+0x1a>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b103      	cbz	r3, 800c85a <_close_r+0x1a>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	20000afc 	.word	0x20000afc

0800c860 <fiprintf>:
 800c860:	b40e      	push	{r1, r2, r3}
 800c862:	b503      	push	{r0, r1, lr}
 800c864:	4601      	mov	r1, r0
 800c866:	ab03      	add	r3, sp, #12
 800c868:	4805      	ldr	r0, [pc, #20]	; (800c880 <fiprintf+0x20>)
 800c86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c86e:	6800      	ldr	r0, [r0, #0]
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	f7ff fe31 	bl	800c4d8 <_vfiprintf_r>
 800c876:	b002      	add	sp, #8
 800c878:	f85d eb04 	ldr.w	lr, [sp], #4
 800c87c:	b003      	add	sp, #12
 800c87e:	4770      	bx	lr
 800c880:	20000014 	.word	0x20000014

0800c884 <_fstat_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4d07      	ldr	r5, [pc, #28]	; (800c8a4 <_fstat_r+0x20>)
 800c888:	2300      	movs	r3, #0
 800c88a:	4604      	mov	r4, r0
 800c88c:	4608      	mov	r0, r1
 800c88e:	4611      	mov	r1, r2
 800c890:	602b      	str	r3, [r5, #0]
 800c892:	f7f8 fbd9 	bl	8005048 <_fstat>
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	d102      	bne.n	800c8a0 <_fstat_r+0x1c>
 800c89a:	682b      	ldr	r3, [r5, #0]
 800c89c:	b103      	cbz	r3, 800c8a0 <_fstat_r+0x1c>
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	bd38      	pop	{r3, r4, r5, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20000afc 	.word	0x20000afc

0800c8a8 <_isatty_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d06      	ldr	r5, [pc, #24]	; (800c8c4 <_isatty_r+0x1c>)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	f7f8 fbce 	bl	8005054 <_isatty>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_isatty_r+0x1a>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_isatty_r+0x1a>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20000afc 	.word	0x20000afc

0800c8c8 <_lseek_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d07      	ldr	r5, [pc, #28]	; (800c8e8 <_lseek_r+0x20>)
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	602a      	str	r2, [r5, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f7f8 fbbe 	bl	8005058 <_lseek>
 800c8dc:	1c43      	adds	r3, r0, #1
 800c8de:	d102      	bne.n	800c8e6 <_lseek_r+0x1e>
 800c8e0:	682b      	ldr	r3, [r5, #0]
 800c8e2:	b103      	cbz	r3, 800c8e6 <_lseek_r+0x1e>
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	20000afc 	.word	0x20000afc

0800c8ec <__ascii_mbtowc>:
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	b901      	cbnz	r1, 800c8f2 <__ascii_mbtowc+0x6>
 800c8f0:	a901      	add	r1, sp, #4
 800c8f2:	b142      	cbz	r2, 800c906 <__ascii_mbtowc+0x1a>
 800c8f4:	b14b      	cbz	r3, 800c90a <__ascii_mbtowc+0x1e>
 800c8f6:	7813      	ldrb	r3, [r2, #0]
 800c8f8:	600b      	str	r3, [r1, #0]
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	1e10      	subs	r0, r2, #0
 800c8fe:	bf18      	it	ne
 800c900:	2001      	movne	r0, #1
 800c902:	b002      	add	sp, #8
 800c904:	4770      	bx	lr
 800c906:	4610      	mov	r0, r2
 800c908:	e7fb      	b.n	800c902 <__ascii_mbtowc+0x16>
 800c90a:	f06f 0001 	mvn.w	r0, #1
 800c90e:	e7f8      	b.n	800c902 <__ascii_mbtowc+0x16>

0800c910 <__malloc_lock>:
 800c910:	4801      	ldr	r0, [pc, #4]	; (800c918 <__malloc_lock+0x8>)
 800c912:	f7ff b8c0 	b.w	800ba96 <__retarget_lock_acquire_recursive>
 800c916:	bf00      	nop
 800c918:	20000af0 	.word	0x20000af0

0800c91c <__malloc_unlock>:
 800c91c:	4801      	ldr	r0, [pc, #4]	; (800c924 <__malloc_unlock+0x8>)
 800c91e:	f7ff b8bb 	b.w	800ba98 <__retarget_lock_release_recursive>
 800c922:	bf00      	nop
 800c924:	20000af0 	.word	0x20000af0

0800c928 <_read_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4d07      	ldr	r5, [pc, #28]	; (800c948 <_read_r+0x20>)
 800c92c:	4604      	mov	r4, r0
 800c92e:	4608      	mov	r0, r1
 800c930:	4611      	mov	r1, r2
 800c932:	2200      	movs	r2, #0
 800c934:	602a      	str	r2, [r5, #0]
 800c936:	461a      	mov	r2, r3
 800c938:	f7f8 fb66 	bl	8005008 <_read>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	d102      	bne.n	800c946 <_read_r+0x1e>
 800c940:	682b      	ldr	r3, [r5, #0]
 800c942:	b103      	cbz	r3, 800c946 <_read_r+0x1e>
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	bd38      	pop	{r3, r4, r5, pc}
 800c948:	20000afc 	.word	0x20000afc

0800c94c <__ascii_wctomb>:
 800c94c:	b149      	cbz	r1, 800c962 <__ascii_wctomb+0x16>
 800c94e:	2aff      	cmp	r2, #255	; 0xff
 800c950:	bf85      	ittet	hi
 800c952:	238a      	movhi	r3, #138	; 0x8a
 800c954:	6003      	strhi	r3, [r0, #0]
 800c956:	700a      	strbls	r2, [r1, #0]
 800c958:	f04f 30ff 	movhi.w	r0, #4294967295
 800c95c:	bf98      	it	ls
 800c95e:	2001      	movls	r0, #1
 800c960:	4770      	bx	lr
 800c962:	4608      	mov	r0, r1
 800c964:	4770      	bx	lr

0800c966 <abort>:
 800c966:	b508      	push	{r3, lr}
 800c968:	2006      	movs	r0, #6
 800c96a:	f000 f82b 	bl	800c9c4 <raise>
 800c96e:	2001      	movs	r0, #1
 800c970:	f7f8 fb44 	bl	8004ffc <_exit>

0800c974 <_raise_r>:
 800c974:	291f      	cmp	r1, #31
 800c976:	b538      	push	{r3, r4, r5, lr}
 800c978:	4604      	mov	r4, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	d904      	bls.n	800c988 <_raise_r+0x14>
 800c97e:	2316      	movs	r3, #22
 800c980:	6003      	str	r3, [r0, #0]
 800c982:	f04f 30ff 	mov.w	r0, #4294967295
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c98a:	b112      	cbz	r2, 800c992 <_raise_r+0x1e>
 800c98c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c990:	b94b      	cbnz	r3, 800c9a6 <_raise_r+0x32>
 800c992:	4620      	mov	r0, r4
 800c994:	f000 f830 	bl	800c9f8 <_getpid_r>
 800c998:	462a      	mov	r2, r5
 800c99a:	4601      	mov	r1, r0
 800c99c:	4620      	mov	r0, r4
 800c99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9a2:	f000 b817 	b.w	800c9d4 <_kill_r>
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d00a      	beq.n	800c9c0 <_raise_r+0x4c>
 800c9aa:	1c59      	adds	r1, r3, #1
 800c9ac:	d103      	bne.n	800c9b6 <_raise_r+0x42>
 800c9ae:	2316      	movs	r3, #22
 800c9b0:	6003      	str	r3, [r0, #0]
 800c9b2:	2001      	movs	r0, #1
 800c9b4:	e7e7      	b.n	800c986 <_raise_r+0x12>
 800c9b6:	2400      	movs	r4, #0
 800c9b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c9bc:	4628      	mov	r0, r5
 800c9be:	4798      	blx	r3
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	e7e0      	b.n	800c986 <_raise_r+0x12>

0800c9c4 <raise>:
 800c9c4:	4b02      	ldr	r3, [pc, #8]	; (800c9d0 <raise+0xc>)
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	6818      	ldr	r0, [r3, #0]
 800c9ca:	f7ff bfd3 	b.w	800c974 <_raise_r>
 800c9ce:	bf00      	nop
 800c9d0:	20000014 	.word	0x20000014

0800c9d4 <_kill_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4d07      	ldr	r5, [pc, #28]	; (800c9f4 <_kill_r+0x20>)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	4604      	mov	r4, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	4611      	mov	r1, r2
 800c9e0:	602b      	str	r3, [r5, #0]
 800c9e2:	f7f8 fb03 	bl	8004fec <_kill>
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	d102      	bne.n	800c9f0 <_kill_r+0x1c>
 800c9ea:	682b      	ldr	r3, [r5, #0]
 800c9ec:	b103      	cbz	r3, 800c9f0 <_kill_r+0x1c>
 800c9ee:	6023      	str	r3, [r4, #0]
 800c9f0:	bd38      	pop	{r3, r4, r5, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20000afc 	.word	0x20000afc

0800c9f8 <_getpid_r>:
 800c9f8:	f7f8 baf6 	b.w	8004fe8 <_getpid>

0800c9fc <_init>:
 800c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fe:	bf00      	nop
 800ca00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca02:	bc08      	pop	{r3}
 800ca04:	469e      	mov	lr, r3
 800ca06:	4770      	bx	lr

0800ca08 <_fini>:
 800ca08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0a:	bf00      	nop
 800ca0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca0e:	bc08      	pop	{r3}
 800ca10:	469e      	mov	lr, r3
 800ca12:	4770      	bx	lr
